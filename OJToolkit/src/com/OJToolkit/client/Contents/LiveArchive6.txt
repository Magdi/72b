2546||||||false||||||
<p>
You are a dealer at The One, the first all-binary casino in Las Vegas.
What makes The One special is that its blackjack tables donÃ•t use cards;
they use bytes (an 8-bit sequence representing a number from 0 to 255)
and nibbles (a 4-bit sequence representing a number from 0 to 15).
<p>
All day long, you play the houseÃ•s hand against individual opponents.
Of course, the casino owners know their statistics, and they have devised
a strategy for you that gives gamblers just less than even odds.
<p>
<ol>Here are the rules of binary blackjack:
	<li>The goal of the game is to be the player closest to <tt>510</tt> points
without going over.
	<li>Each player is dealt two bytes, one face up and one face down.
	<li>The players then have the opportunity to take more bytes (by saying, 
"<tt>Byte Me!</tt>") or more nibbles (by saying, "<tt>Nibble Me!</tt>") until he 
reaches his limit of <tt>4</tt> hits or has more than <tt>510</tt> points showing.
	<li>All hits are played face up.
	<li>If a player goes over <tt>510</tt>, he immediately <i>busts</i> and loses the hand.
	<li>The dealer hits last.
	<li>The dealer wins any ties (this includes a <i>tie</i> where everyone busts).
</oL>
<p>
<ol>The rules for the dealer are (in order of precedence, where lower numbered 
rules override higher numbered ones):
	<li>Never hit when it is certain that youÃ•ve won by simply looking at 
your hand and what is showing of other peopleÃ•s hands.
	<li>If your total is strictly less than <tt>382</tt> take a byte hit.
	<li>If your total is less than or equal to <tt>500</tt> take a nibble hit.
	<li>Take no hits
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to <tt>100</tt> 
data sets.  Each data set will be formatted according to the following
description, and there will be no blank lines separating data sets.
<p>
<ol>A single data set has <tt>6</tt> components:
	<li><i>Start line</i> Ã� A single line, "<tt>START N</tt>", where <tt>N</tt> is the 
number of players playing this hand (not including the dealer).  There will 
never be more than <tt>10</tt> non-dealer players, and the dealer never plays 
by himself.
	<li><i>Dealer Line</i> Ã� A single line containing <tt>2</tt> binary strings of 
exactly eight digits separated by exactly one space.  These two strings 
represent the two cards in the dealerÃ•s hand.
	<li><i>Player Line</i> Ã� A single line containing <tt>N 8</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the face-up 
cards of all of the non-dealer players.
	<li><i>Byte Line</i> Ã� A single line containing <tt>4 8</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the next <tt>4</tt> 
bytes in the byte deck, in the order they will be drawn.
	<li><i>Nibble Line</i> Ã� A single line containing <tt>4 4</tt>-digit binary strings, 
each separated from the others by a single space.  These represent the next <tt>4</tt> 
nibbles in the nibble deck, in the order they will be drawn.
	<li><i>End line</i> Ã� A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<ul>Here are some other useful facts:
	<li>Oddly enough, each non-dealer player is always dealt a face-down card 
<tt>11111111</tt>, value <tt>255</tt>, but the dealer has no knowledge of this.
	<li>Players other than the dealer never hit (they arenÃ•t too bright).
</ul>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
Calculate the actions taken by the dealer and how the dealer fares with the 
resulting hand.
<p>
<ol>For each data set, there will be exactly one output set, consisting 
of the following components:
	<li><i>Hand Line</i> Ã� A single line, "<tt>HAND N</tt>", where 
<tt>N</tt> is the number of players playing this hand (not including the 
dealer).
	<li><i>Dealer Hit List</i> Ã� A single line will be printed for 
each hit the dealer takes on his turn.  For a byte hit, print a line 
"<tt>Byte me!</tt>", and for a nibble hit print, "<tt>Nibble me!</tt>"
	<li><i>Outcome Line</i> Ã� A single line containing "<tt>Win!</tt>" 
if the dealer wins, "<tt>Bust!</tt>" if the dealer loses by busting, and 
"<tt>Lose!</tt>" if the dealer loses without busting.
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 1
11111111 11111111
00000001
10101010 01010101 11110000 00001111
1010 0101 1100 0011
END
START 1
10111110 10111111 
11111110
00010010 10101010 01010101 11110000
0001 1010 1100 0011
END
START 8
11111111 00001000
00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 
00010010 10101010 01010101 11110000
0001 1010 1100 0011
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
HAND 1
Win!
HAND 1
Byte me!
Nibble me!
Nibble me!
Nibble me!
Lose!
HAND 8
Win!
</pre>

______________________________________________________
2547||||||false||||||
<p>
You are a very impatient person, and hate to be kept waiting.
You are on your way to visit a relative all the way in New Orleans.
The problem is that the bus station you are at has the world's worst
bus schedule!  There are no arrival or departure times listed, only
route durations for each bus running.  Being the impatient person you
are, you whip out your laptop and attempt to write a program that will
determine how long you will have to wait before the next bus comes.
Hey, you have nothing better to do, right?
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<p>
Input to this problem will consist of a (non-empty) series of up to 
<tt>100</tt> data sets.  Each data set will be formatted according 
to the following description, and there will be <b>no blank lines</b> 
separating data sets.
<p>
<ol>A single data set has <tt>3</tt> components:
	<li><i>Start line</i> - A single line, "<tt>START N</tt>", 
where <tt>N</tt> is the number of buses running and <br>
                                        <tt>1 &le; N &le; 20</tt>.

	<li><i>Route Duration line</i> - There will be <tt>N</tt> 
of these lines, and each line will consist of <tt>M</tt> route 
durations (where <tt>1 &le; M &le; 10</tt>), which will signify 
how long it will take each bus to return to the bus station after 
completing a particular route.  A route duration will be 
represented as an integer between <tt>1</tt> and <tt>1000</tt> 
(inclusive).

	<li><i>Arrival Time</i> - There will only be one of these 
lines per data set.  This line represents the time that you arrived 
at the bus station and began waiting.  This is simply the number of 
time units that you arrived at the bus station after the buses began 
running (all buses begin running at time <tt>0</tt>).  This number 
is represented as a positive integer (yes, it can be <tt>0</tt> as 
well, this would signify arriving at the bus station as the buses 
begin running).  

	<li><i>End line</i> - A single line, "<tt>END</tt>".
</ol>
<p>
Following the final data set will be a single line, "<tt>ENDOFINPUT</tt>".
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<p>
For each data set, there will be exactly one line of output.  
This line will simply be the number of time units you will 
have to wait before the next bus comes after you arrive.  
You hate waiting so much that you will just get on the 
first bus that returns to the station.  Let's hope this 
is the bus to New Orleans!  
<p>
<h3>Notes</h3>
<p>
<ol>
	<li>All buses continuously go on their routes, 
starting back up with their first route after their 
last route is done.
	<li>If the passenger's arrival time coincides 
with any of the bus' route departure times, he/she 
catches the bus at that time.
</ol>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<p>
<pre>
START 3
100 200 300
400 500 600
700 800 900
1000
END
START 3 
100 200 300 4 3 2 4 2 22 
800
10 1000
32767
END
ENDOFINPUT
</pre>
<p>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<p>
<pre>
200
20
</pre>
<p>

______________________________________________________
2548||||||false||||||
<P>Two words are said to be <SPAN CLASS="textit">anagrams</SPAN> if one can be formed by permuting the letters of the other. For example: <TT>"pots"</TT>, <TT>"tops"</TT>, and <TT>"stop"</TT> are anagrams. An <SPAN CLASS="textit">anagram chain</SPAN> is a list of words that are all anagrams to each other. The shortest anagram chain has the length two. We're interested in calculating the length of the longest anagram chain in a given list of words. For example, the following nine words: <TT>rates, pots, tops, along, aster, stop, stare, tears,</TT> and <TT>long</TT> has two anagram chains where the longest includes the four words: <TT>rates, aster, stare,</TT> and <TT>tears</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on a number of test cases. The first line of the input file contains an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>Each test case contains one or more words, but no more than 20,000 words, with no duplicates.<P>Each word appears on a separate line. All words are in small letters, and in no particular order. No word will be longer than 10 characters. Each test case ends with a string made of one or more `<TT>-</TT>' characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write, on a separate line, the length (number of words) of the longest anagram chain found in the given list of words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                
rates                                            
pots
tops
along
aster
stop
stare
tears
long
-----
north
fresher
refresh
thorn
bye
--
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4
2
</PRE><P>
______________________________________________________
2549||||||false||||||
<P>Yasmeen loves solving crossword puzzles. A crossword puzzle is a puzzle in which words are filled into a pattern of numbered squares (the grid) in answer to correspondingly numbered clues and in such a way that the words read across (left to right,) and down.<P><DIV ALIGN="CENTER"><IMG WIDTH="185" HEIGHT="408" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2549a.jpg ALT="\epsfbox{p2549a.eps}"> <tex2html_verbatim_mark></DIV><P>Yasmeen normally solves a puzzle by writing the answers on a separate sheet of paper rather than on the puzzle itself. Once the puzzle is solved, she then neatly copies the solution on the grid.<P>But today Yasmeen has a problem, she lost the page of the clues (which describes where the words go on the puzzle.) All what she has is the puzzle grid and the list of words that constitutes the answers to the clues. She needs your help in reconstructing the solution to the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file is an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>The first line of each test case specifies three integers: <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the number of rows in the grid, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is the number of columns in the grid, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the number of words. Note that <!-- MATH
 $0 < R < 50$
 --><SPAN CLASS="MATH">0 &lt; <I>R</I> &lt; 50</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < C < 50$
 --><SPAN CLASS="MATH">0 &lt; <I>C</I> &lt; 50</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < W < 1000$
 --><SPAN CLASS="MATH">0 &lt; <I>W</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>.<P>Starting at the second line of each test case are <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines describing the grid. The grid is described using two characters: A `<TT>.</TT>' indicates a square that should be eventually filled with a letter, while a `<TT>#</TT>' means the corresponding square ``is blocked" (it doesn't receive any letter.)<P>The list of words appears on the last line of each test case. Words are separated by exactly one space character. All words are small letters and there are no duplicates.<P>The sample input describes two test cases: The first is a <SPAN CLASS="MATH">4 <TT>x</TT> 5</SPAN> <tex2html_verbatim_mark> grid with 10 words. The second test case starts at line #8 and describes a <SPAN CLASS="MATH">7 <TT>x</TT> 7</SPAN> <tex2html_verbatim_mark> grid with 15 words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the grid with the solution filled in. There should be a blank line after each grid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 5 10
.....
..#..
....#
#....
he stood no ones else so she tell do lost
7 7 15
..#....
.#....#
.#.###.
.......
.#.#.#.
##.....
.......
egypt arab africa pyramid cairo dr ad nb ri ia ed maid addon ding aladdin
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
stood
he#no
else#
#lost

ed#ding
g#arab#
y#f###a
pyramid
t#i#a#d
##cairo
aladdin
</PRE><P><P><P><BR><DIV ALIGN="CENTER"><IMG WIDTH="230" HEIGHT="243" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2549a.jpg ALT="\epsfbox{p2549b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Sample CrossWord #2</DIV><P>
______________________________________________________
2550||||||false||||||
<P>In recognition to the number of famous mathematicians of its residents, the City of Flatland has decided to rename all its streets as numbers (positive integers to be more precise.) The streets of Flatland are organized as a grid. The city decided to number all its North-South streets using powers of two <SPAN CLASS="MATH">(1, 2, 4, 8,...)</SPAN> <tex2html_verbatim_mark> and all its East-West streets using odd numbers <SPAN CLASS="MATH">(1, 3, 5,...)</SPAN> <tex2html_verbatim_mark>. The city also decided to re-number all its buildings so that the number of each building is the result of multiplying the numbers of the two streets the building is on. For example, building #40 is at the intersection of streets 5 and 8.<P><DIV ALIGN="CENTER"><IMG WIDTH="818" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2550.jpg ALT="\epsfbox{p2550.eps}"> <tex2html_verbatim_mark></DIV><P>The problem with this numbering scheme is that it is not easy for the residents to determine the distance between buildings. The distance between any two buildings is the number of buildings one needs to cross to go from one building to another. One can only move parallel to the streets (no diagonals or any other shortcuts.) For example, to go from building #6 to building #40, one has to travel one building north and two buildings east, so the distance is 3. Similarly, the distance from building #80 to building #88 is 4.<P>Help the residents of Flatland by writing a program that calculates the distance between any two given buildings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is made of one or more pairs of building numbers. Each pair <SPAN CLASS="MATH">&lt; <I>S</I>, <I>T</I> &gt;</SPAN> <tex2html_verbatim_mark> appears on a single line with a single space between the two numbers. Note that <!-- MATH
 $S,T < 1,000,000,000$
 --><SPAN CLASS="MATH"><I>S</I>, <I>T</I> &lt; 1, 000, 000, 000</SPAN> <tex2html_verbatim_mark>. The end of the input is identified by the pair <SPAN CLASS="MATH">&lt; 0, 0 &gt;</SPAN> <tex2html_verbatim_mark> (which is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input pair <SPAN CLASS="MATH">&lt; <I>S</I>, <I>T</I> &gt;</SPAN> <tex2html_verbatim_mark>, the output file should include a line of the form:<P><P><BR><TT>The distance between</TT> <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <TT>and</TT> <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <TT>is</TT> <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>The output file should be in the same order as the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12 14                        
20 30                        
40 50                        
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The distance between 12 and 14 is 3.
The distance between 20 and 30 is 6.
The distance between 40 and 50 is 12.
</PRE><P>
______________________________________________________
2551||||||false||||||
<P>
Lamees works at the delivery zone in a plant. Carts arrive to the delivery zone on the [IN] track, and it is Lamees's responsibility to make sure the carts are sorted before leaving the delivery zone. The carts are heavy, so they must remain on the tracks at all times. The carts can be temporarily pushed to either of the two side bays. The exchange at the center can be configured to move the carts in the following seven directions:       

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551b.eps}$
 -->
<IMG
 WIDTH="511" HEIGHT="153" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Initially, the exchange is set to [IN <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT]. The exchange can be reconfigured from the control room which is a bit far from the delivery zone. Normally, there is an operator at the control room to configure the exchange while Lamees remains at the delivery zone. But today the operator has called in sick, and Lamees has to do both tasks herself. Every time the exchange is to be reconfigured, Lamees has to make a trip to the control room. Help Lamees by writing a program to compute the minimum number of times the exchange must be reconfigured to complete the job.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551a.eps}$
 -->
<IMG
 WIDTH="460" HEIGHT="431" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For example, the carts <TT>D-C-A-B</TT> can be sorted in three exchanges (see figure on next page.) First set the exchange to [IN  <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> LEFT], push <TT>D</TT> and <TT>C</TT>, then set the exchange to [IN <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT], push <TT>A</TT>, <TT>B</TT>, finally set the exchange to [LEFT <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="17" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> OUT] and push <TT>C</TT>, <TT>D</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file includes a number of test cases. Each test case is described using a string of capital letters appearing on a separate line. The end of the test cases is indicated by a string starting with the letter `<TT>Z</TT>' (which is not part of the test cases.)

<P>
Each test case specifies the order in which the carts arrive to the [IN] track. For example, the string ``<TT>DCAB</TT>" says that <TT>D</TT> arrives first, then <TT>C</TT>, then <TT>A</TT>, and finally <TT>B</TT>. The proper order of the carts is a lexicographic ordering (i.e. ``<TT>ABCD</TT>"). There will be no ``missing" letters in any test case, and no duplicates. There will be no more than 26 carts in any test string.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write on a separate line, the minimum number of exchanges needed to sort the carts.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
DCAB                                           
EDACB                                          
ZaEnd
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4
</PRE> 

<P>

<P><P>
<BR>

<B>Illustrations</B>

<P>
How the first test case was solved in 3 moves:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2551c.eps}$
 -->
<IMG
 WIDTH="805" HEIGHT="319" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551c.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<P><P>
<BR>
How the second test case was solved in 4 moves:

<P>
<DIV ALIGN="CENTER">
 =6.5in
<!-- MATH
 $\epsfbox{p2551d.eps}$
 -->
<IMG
 WIDTH="898" HEIGHT="277" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2551b.jpg
 ALT="\epsfbox{p2551d.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

______________________________________________________
2552||||||false||||||
<P>
A palindrome is a word that reads the same forward or backward. For example, ``noon", ``civic", and ``rotator" are all palindromes. We can extend the definition of palindromes to include integers too. For example, ``5", ``22", and ``10701" are all palindromes. As for negative integers, we'll say that a negative integer is a palindrome only if its positive counterpart is a palindrome.

<P>
Write a program that computes how many palindrome integers there are between any two given integers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file is made of a number of test cases. Each test case specifies a range of integers using a pair of integers <SPAN CLASS="MATH">&lt; <I>L</I>, <I>U</I> &gt;</SPAN>
<tex2html_verbatim_mark> where <!-- MATH
 $-1,000,000 < L \le U < 1,000,000$
 -->
<SPAN CLASS="MATH">-1, 000, 000 &lt; <I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2552img1.png
 ALT="$ \le$"><I>U</I> &lt; 1, 000, 000</SPAN>
<tex2html_verbatim_mark>. Each test case is specified on a separate line, with at least one space character between <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN>
<tex2html_verbatim_mark>.

<P>
The set of test cases ends with the pair <SPAN CLASS="MATH">&lt; -1, -1 &gt;</SPAN>
<tex2html_verbatim_mark>, which is not part of the test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case <SPAN CLASS="MATH">&lt; <I>L</I>, <I>U</I> &gt;</SPAN>
<tex2html_verbatim_mark>, your program should print how many palindromes there are within the range <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN>
<tex2html_verbatim_mark> (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
101 202                                          
11 30                                            
-202 -101                                        
-1 -1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11
2
11
</PRE> 

<P>

______________________________________________________
2553||||||false||||||
<P>Poor Johnny; He can hardly count. Johnny needs a program to ``spell out" numbers into their equivalent English text. For example, the number 109210 is read in English as: ``<SPAN CLASS="textit">one hundred and nine thousand, two hundred and ten</SPAN>". To make the program easier, Johnny is willing to accept the following compromises:<P><OL><LI>The program will be given positive integers less than a million. </LI><LI>No need to print any punctuation marks. </LI><LI>Use singular words, not plural. For example: ``<SPAN CLASS="textit">thousand</SPAN>" rather than ``<SPAN CLASS="textit">thousands</SPAN>". </LI><LI>Don't use the word ``<SPAN CLASS="textit">and</SPAN>" in the phrase. For example, instead of converting the number 102 into ``one hundred and two", all you need to do is convert it to ``<SPAN CLASS="textit">one hundred two</SPAN>". Similarly, 109210 would be spelled out as: ``<SPAN CLASS="textit">one hundred nine thousand two hundred ten</SPAN>". </LI></OL><P>On the other hand, Johnny requires the following:<P><OL><LI>Johnny hates spelling mistakes. The output should be spelled correctly and using only small letters. The list of allowable words in the output is:<P><TT>zero, one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety, hundred, thousand</TT>. </LI><LI>Johnny requires that the output be sorted in a non-decreasing order to make it easier for him to locate the numbers. </LI><LI>For an unclear reason, there will be duplicates in the input file, and Johnny insists that each instance be printed. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is made of one or more positive integers terminated by a negative number (which is not part of the input data.) Each number appears on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each number, you should print exactly one line showing the number and its equivalent phrase as shown in the sample output. Use a single space character as a separator. Note the colon character `<TT>:</TT>' after the number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
199
123456
14
199
421000
112
999999
199
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14: fourteen
112: one hundred twelve
199: one hundred ninety nine
199: one hundred ninety nine
199: one hundred ninety nine
123456: one hundred twenty three thousand four hundred fifty six
421000: four hundred twenty one thousand
999999: nine hundred ninety nine thousand nine hundred ninety nine
</PRE><P>
______________________________________________________
2554||||||false||||||
<P>Snakes and ladders is a board game played on an <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> squares grid (see the figure on the next page.) The squares are numbered from 1 up to <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>. Players start by placing their counters at square #1. Players take turns by throwing a dice and moving their counter the number of spaces shown on the dice. The board includes a number of snakes and ladders. If a player's counter lands on the mouth of a snake, the counter must move down to the tail of the snake. If a player's counter lands at the bottom of a ladder then the counter must climb to the top. The winner is the first player to reach square #<SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark>. The following points are worth knowing about the layout of the board:<P><OL><LI>There are no ladders or snakes that start or end at the first or last square. </LI><LI>Snakes and ladders can't be adjacent. There is at least one ``regular" square between any two squares that are the starting or ending points of either snakes or ladders. </LI></OL><P>Your friend Fadi wants you to write a program to help him win the game of Snake and Ladders. See, Fadi is a professional cheater. He can throw the dice and let it show any number he desires. Fadi wants a program to determine the minimum number of throws needed to win the game.<P><P><BR>For example, given the ``example one" board shown on the next page, Fadi can win in three moves as follows: On the first throw he gets a 4, moving him to square 5, up the ladder to square 16. Then another 4 on the second throw taking him to square 20, up the ladder to square 33. A 3 on the third throw wins him the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file is an integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file.<P>Each test case is described using three lines. The first line includes three integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the size of the board, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the number of snakes on the board, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is the number of ladders. Note that <!-- MATH
 $0 < N \le 20$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2554img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < S < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>S</I> &lt; 100</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < T < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>T</I> &lt; 100</SPAN> <tex2html_verbatim_mark>.<P>The second line of a test case includes <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> integer pairs. Each pair describes a particular snake. The first integer is the starting square of the snake (its mouth) and the second integer is the ending square (the tail.) Remember, squares are numbered starting at 1.<P>The third line is the same as the second but for ladders. It includes <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> integer pairs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write, on a separate line, the minimum number of dice throws required to win the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                        
6 1 3                                                    
35 25
3 23 5 16 20 33
5 1 1
16 14
9 11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
4
</PRE><P><P><P><BR><B>Illustrations of Example One and Example Two</B><P><DIV ALIGN="CENTER"><IMG WIDTH="869" HEIGHT="421" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2554img1.png ALT="\epsfbox{p2554.eps}"> <tex2html_verbatim_mark></DIV><P>
______________________________________________________
2555||||||false||||||
<P>Back in 1963, while doodling during a boring talk at a scientific meeting, a Polish-American mathematician named Stanislaw Ulman came up with what is now known as the <SPAN CLASS="textit">Prime Spiral</SPAN>. While drawing a grid of lines, he decided to number the intersections according to a spiral pattern as you see in the adjacent figure. He then began circling the numbers in the spiral that were primes. Surprisingly, the circled primes appeared to fall along a number of diagonal straight lines.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>24</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Prime Spiral of Size <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> <tex2html_verbatim_mark></DIV><P><P><BR>In this problem, we're interested in finding the largest sum of primes along any diagonal straight line for any given grid of size <SPAN CLASS="MATH"><I>N</I> &lt; 100</SPAN> <tex2html_verbatim_mark> . For example, inspecting the prime spiral for <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> <tex2html_verbatim_mark>, the largest sum of primes on a diagonal line is <SPAN CLASS="MATH">19 + 7 + 23 = 49</SPAN> <tex2html_verbatim_mark>. Similarly the largest sum of primes for <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark> is 10.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line in the input file contains a single integer <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> which represents how many data sets are used to test your program.<P>Each data set contains exactly one integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, representing the size of the grid, on a separate line. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is always an odd number in the range <!-- MATH
 $0 < N < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 100</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the largest sum on a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2                                                 
5                                                 
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
49
10
</PRE>
______________________________________________________
2556||||||false||||||
<P><EM>Four Quarters</EM> is a game of chance played with, well, four quarters. Two people, called A and B, each flip two quarters each round. They each gain or lose points each round based on the following tables:<P><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=3>Player B</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><B>Player A's payoff</B></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=RHS RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=3>Player B</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Player</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>HT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TT</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD></TR><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><B>Player B's payoff</B></DIV><P><DIV ALIGN="CENTER"></DIV><P><P><P><BR>There is no difference between Heads/Tails and Tails/Heads. As you can see, the odds are stacked in Player A's favor. At the beginning of the game, each player has 0 points, and points accumulate as the game progresses. At the end of the game, whichever player has the most points wins.<P>You must write a program that determines the probability that Player A will win, Player B will win, or they will tie, after a certain number of rounds. Assume that the coins are fair, i.e. that heads and tails are equally likely.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There is no input file for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output a table that lists the probability that Player A will win, B will win, or they will tie, after each round for 1 to 20 rounds. The output for rounds 1 through 3 is given below.<P>Probabilities must be expressed as a percent, with 4 places after the decimal.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P>There is no sample input for this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Round   A wins    B wins    Tie
    1   43.7500%  18.7500%  37.5000%
    2   56.6406%  22.2656%  21.0938%
    3   62.3535%  22.7051%  14.9414%
</PRE><P>
______________________________________________________
2557||||||false||||||
<P>A certain prison contains a long hall of <SPAN CLASS="MATH"><I>n</I></SPAN> cells, each right next to each other. Each cell has a prisoner in it, and each cell is locked.<P>One night, the jailer gets bored and decides to play a game. For round 1 of the game, he takes a drink of whiskey, and then runs down the hall unlocking each cell. For round 2, he takes a drink of whiskey, and then runs down the hall locking every other cell (cells 2, 4, 6, ...). For round 3, he takes a drink of whiskey, and then runs down the hall. He visits every third cell (cells 3, 6, 9, ...). If the cell is locked, he unlocks it; if it is unlocked, he locks it. He repeats this for <SPAN CLASS="MATH"><I>n</I></SPAN> rounds, takes a final drink, and passes out.<P>Some number of prisoners, possibly zero, realizes that their cells are unlocked and the jailer is incapacitated. They immediately escape.<P>Given the number of cells, determine how many prisoners escape jail.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines contains a single integer between 5 and 100, inclusive, which is the number of cells <SPAN CLASS="MATH"><I>n</I></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line, you must print out the number of prisoners that escape when the prison has <SPAN CLASS="MATH"><I>n</I></SPAN> cells.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
5
100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
10
</PRE><P>
______________________________________________________
2558||||||false||||||
<P>A new TV game show requires contestants to deduce a five letter word based on hints obtained by guessing other five letter words. The way the game is played is as follows: a secret five letter word is selected by the production staff of the game show. The object of the game is for the contestant to guess the secret word. The first letter of the secret word is revealed. The contestant will then guess a five letter word that may match the secret word. A computer then provides feedback to the contestant on the accuracy of the guess. Feedback consists of a report indicating if any letters in the guessed word are correct and in the same position in the secret word, if any letters in the guessed word are correct but not in the correct position in the secret word, and any letters in the guessed word that do not appear in the secret word.<P>As an example, the production staff chooses the secret word: ``<TT>HELLO</TT>". The contestant is told the first letter of the word is ``<TT>H</TT>". The contestant then guesses what the word could be, knowing it begins with the letter ``<TT>H</TT>". Let's say the contestant guesses the word: ``<TT>HOLES</TT>". The game show computer would report that the ``<TT>H</TT>" and ``<TT>L</TT>" are in the secret word and in the correct position. In addition, the ``<TT>O</TT>" and ``<TT>E</TT>" are in the secret word, but in the incorrect position, and the ``<TT>S</TT>" is not in the secret word. This is conveyed to the contestant by a single line report:<P><P><BR><BIG CLASS="HUGE"><TT>HoLe.</TT></BIG><P><P><BR>The upper case letters (``<TT>H</TT>" and ``<TT>L</TT>") indicate correct letter and position. The lower case letters (``<TT>o</TT>" and ``<TT>e</TT>") indicate correct letter, wrong position. The period (``<TT>.</TT>") indicates a wrong letter (not in the secret word). Letters from the word to guess should only be referenced once per try. If a single letter is guessed twice in the wrong position in the same try, only the first one should be reported. <P>You will write a program that evaluates the contestant guesses, and prints out the single line report for each guess. If the contestant guesses the secret word exactly, then the five capital letters of the secret word will be displayed in the report.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input data file consists of datasets for one or more games. A blank line marks the beginning of the next dataset (game). The line after the blank line contains the secret word. The remaining lines in the dataset represent the contestant's guesses; there may be too few or too many guesses than are necessary to guess the secret word. The secret word will contain exactly five upper case letters. The contestant's guesses, however, have to be checked for validity: valid guesses consist of exactly five upper case letters. Input is terminated by a dataset with the secret word: `<TT>LINGO</TT>' (that is, game play is stopped at that point, the program terminates, and no further guessing occurs).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each game's output should be preceded by a single blank line (except for the terminating case). The first single line status report should be printed, which consists of the first letter of the secret word, followed by four periods. For each guess, print the single line status report for that guess. For an invalid guess, repeat the previous single line status report. If the guess exactly matches the secret word, that game ends and you should move on to the next one. The contestant may guess a maximum of six times; after the sixth guess, if the contestant did not guess the secret word, or you run out of guesses (the contestant gives up) print out the secret word in lower case letters and move on to the next game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>

HELLO
HOLES
HAPPY
HELMS
HELLO
HELPS

PARTY
PARKS
PARES
PARIS
PONDER
PATTY
PUNTS
PARTY

HELIX
HeLIX
HELIX

HELIX
HAELL

LINGO
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>

H....
HoLe.
H....
HEL..
HELLO

P....
PAR..
PAR..
PAR..
PAR..
PA.TY
party

H....
H....
HELIX

H....
H.el.
helix
</PRE><P>
______________________________________________________
2559||||||false||||||
<P>Write a program to convert numbers in one base to numbers in a second base. There are 62 different <EM>digits</EM>:<P><P><BR>{ 0-9,A-Z,a-z }<P><P><BR><B>HINT:</B> If you make a sequence of base conversions using the output of one conversion as the input to the next, when you get back to the original base, you should get the original number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines will have a (decimal) input base followed by a (decimal) output base followed by a number expressed in the input base. Both the input base and the output base will be in the range from 2 to 62. That is (in decimal) A = 10, B = 11, ..., Z = 35, a = 36, b = 37, ..., z = 61 (0-9 have their usual meanings).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output of the program should consist of three lines of output for each base conversion performed. The first line should be the input base in decimal followed by a space then the input number (as given expressed in the input base). The second output line should be the output base followed by a space then the input number (as expressed in the output base). The third output line is blank.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
62 2 abcdefghiz
10 16 1234567890123456789012345678901234567890
16 35 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2
35 23 333YMHOUE8JPLT7OX6K9FYCQ8A
23 49 946B9AA02MI37E3D3MMJ4G7BL2F05
49 61 1VbDkSIMJL3JjRgAdlUfcaWj
61 5 dl9MDSWqwHjDnToKcsWE1S
5 10 42104444441001414401221302402201233340311104212022133030
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
62 abcdefghiz
2 11011100000100010111110010010110011111001001100011010010001

10 1234567890123456789012345678901234567890
16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2

16 3A0C92075C0DBF3B8ACBC5F96CE3F0AD2
35 333YMHOUE8JPLT7OX6K9FYCQ8A

35 333YMHOUE8JPLT7OX6K9FYCQ8A
23 946B9AA02MI37E3D3MMJ4G7BL2F05

23 946B9AA02MI37E3D3MMJ4G7BL2F05
49 1VbDkSIMJL3JjRgAdlUfcaWj

49 1VbDkSIMJL3JjRgAdlUfcaWj
61 dl9MDSWqwHjDnToKcsWE1S

61 dl9MDSWqwHjDnToKcsWE1S
5 42104444441001414401221302402201233340311104212022133030

5 42104444441001414401221302402201233340311104212022133030
10 1234567890123456789012345678901234567890
</PRE><P>
______________________________________________________
2560||||||false||||||
<P>A sequence of positive integers is <EM>Palindromic</EM> if it reads the same forward and backward. For example:<P><PRE>
     23 11 15 1 37 37 1 15 11 23

     1 1 2 3 4 7 7 10 7 7 4 3 2 1 1
</PRE><P>A <EM>Palindromic</EM> sequence is <EM>Unimodal Palindromic</EM> if the values do not decrease up to the middle value and then (since the sequence is palindromic) do not increase from the middle to the end For example, the first example sequence above is <B>NOT</B> <EM>Unimodal Palindromic</EM> while the second example is.<P>A <EM>Unimodal Palindromic</EM> sequence is a <EM>Unimodal Palindromic Decomposition</EM> of an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, if the sum of the integers in the sequence is <SPAN CLASS="MATH"><I>N</I></SPAN>. For example, all of the <EM>Unimodal Palindromic Decompositions</EM> of the first few integers are given below:<P><PRE>
1:  (1)
2:  (2), (1 1)
3:  (3), (1 1 1)
4:  (4), (1 2 1), (2 2), (1 1 1 1)
5:  (5), (1 3 1), (1 1 1 1 1)
6:  (6), (1 4 1), (2 2 2), (1 1 2 1 1), (3 3),
          (1 2 2 1), (1 1 1 1 1 1)
7:  (7), (1 5 1), (2 3 2), (1 1 3 1 1), (1 1 1 1 1 1 1)
8:  (8), (1 6 1), (2 4 2), (1 1 4 1 1), (1 2 2 2 1),
          (1 1 1 2 1 1 1), (4 4), (1 3 3 1), (2 2 2 2),
          (1 1 2 2 1 1), (1 1 1 1 1 1 1 1)
</PRE><P>Write a program, which computes the number of <EM>Unimodal Palindromic Decompositions</EM> of an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a sequence of positive integers, one per line ending with a `<TT>0</TT>' (zero) indicating the end.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input value except the last, the output is a line containing the input value followed by a space, then the number of <EM>Unimodal Palindromic Decompositions</EM> of the input value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
4
5
6
7
8
10
23
24
131
213
92
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2
3 2
4 4
5 3
6 7
7 5
8 11
10 17
23 104
24 199
131 5010688
213 1055852590
92 331143
</PRE><P>
______________________________________________________
2561||||||false||||||
<P>In an extended version of the game <EM>Lights Out</EM>&#169;, is a puzzle with 5 rows of 6 buttons each (the actual puzzle has 5 rows of 5 buttons each). Each button has a light. When a button is pressed, that button and each of its (up to four) neighbors above, below, right and left, has the state of its light reversed. (If on, the light is turned off; if off, the light is turned on.) Buttons in the corners change the state of 3 buttons; buttons on an edge change the state of 4 buttons and other buttons change the state of 5. For example, if the buttons marked <B>X</B> on the left below were to be pressed, the display would change to the image on the right.<P><DIV ALIGN="CENTER"><IMG WIDTH="629" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2561a.gif ALT="\epsfbox{p2561a.eps}"></DIV><P>The aim of the game is, starting from any initial set of lights on in the display, to press buttons to get the display to a state where all lights are off. When adjacent buttons are pressed, the action of one button can undo the effect of another. For instance, in the display below, pressing buttons marked X in the left display results in the right display. Note that the buttons in row 2 column 3 and row 2 column 5 both change the state of the button in row 2 column 4, so that, in the end, its state is unchanged.<P><DIV ALIGN="CENTER"><IMG WIDTH="639" HEIGHT="188" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2561a.gif ALT="\epsfbox{p2561b.eps}"></DIV><P><P><BR><B>Note:</B><P><OL><LI>It does not matter what order the buttons are pressed. </LI><LI>If a button is pressed a second time, it exactly cancels the effect of the first press, so no button ever need be pressed more than once. </LI><LI>As illustrated in the second diagram, all the lights in the first row may be turned off, by pressing the corresponding buttons in the second row. By repeating this process in each row, all the lights in the first four rows may be turned out. Similarly, by pressing buttons in columns 2, 3 ..., all lights in the first 5 columns may be turned off. </LI></OL><P>Write a program to solve the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of puzzles that follow. Each puzzle will be five lines, each of which has six <TT>0</TT>'s or <TT>1</TT>'s separated by one or more spaces. A `<TT>0</TT>' indicates that the light is off, while a `<TT>1</TT>' indicates that the light is on initially.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each puzzle, the output consists of a line with the string: `<TT>PUZZLE #<SPAN CLASS="MATH"><I>m</I></SPAN></TT>', where <SPAN CLASS="MATH"><I>m</I></SPAN> is the index of the puzzle in the input file. Following that line, is a puzzle-like display (in the same format as the input) . In this case, <TT>1</TT>'s indicate buttons that must be pressed to solve the puzzle, while <TT>0</TT>'s indicate buttons, which are not pressed. There should be exactly one space between each `<TT>0</TT>' or `<TT>1</TT>' in the output puzzle-like display.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
0 1 1 0 1 0
1 0 0 1 1 1
0 0 1 0 0 1
1 0 0 1 0 1
0 1 1 1 0 0
0 0 1 0 1 0
1 0 1 0 1 1
0 0 1 0 1 1
1 0 1 1 0 0
0 1 0 1 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Ouput</A>&nbsp;</FONT></H2><P><PRE>
PUZZLE #1
1 0 1 0 0 1
1 1 0 1 0 1
0 0 1 0 1 1
1 0 0 1 0 0
0 1 0 0 0 0
PUZZLE #2
1 0 0 1 1 1
1 1 0 0 0 0
0 0 0 1 0 0
1 1 0 1 0 1
1 0 1 1 0 1
</PRE><P>
______________________________________________________
2562||||||false||||||
<P>A certain data compression technique involves creating a table of variable-length binary codes where one or more binary digits are used to represent a single letter of an alphabet. Usually, letters that occur most frequently in words generated using this alphabet will have shorter binary codes than those used less frequently. For example, in an alphabet consisting of the letters A through Z, in general the letter E appears in more words than the letter Q; therefore it would be expected that E would have a shorter binary code than does Q.<P>Given a sample string using at least one of each letter in an alphabet, along with the entire binary encoding of that sample string, you should be able to generate at least one binary code table for each letter in the alphabet. For example, consider the sample string: ``<TT>CAB</TT>" which contains each letter of the alphabet {A,B,C}. If the binary encoding of ``<TT>CAB</TT>" is ``<TT>01011</TT>" then the (only) binary code table is:<P><PRE>
   C = 0
   A = 10
   B = 11
</PRE><P>The binary codes for each character are <EM>prefix</EM> codes in that no code in the set can be the initial binary string for any other code (so <TT>A = 01</TT>, <TT>B = 011</TT> would not be allowed). For this problem, you will write a program that determines binary code tables for sample strings and their binary encodings. If there is a single binary code table solution, then you will print it out (sorted). If more than one binary code table can be generated from the given set of data, you will print `<TT>MULTIPLE TABLES</TT>'.<P><P><BR><B>Note:</B> For a given alphabet, the entire code space will be used; that is, there will be no unused codes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of a single line consisting of an integer value <SPAN CLASS="MATH"><I>N</I></SPAN> representing the number of datasets that follow. Each dataset consists of two lines. The first line is the sample string that contains at least one of each letter (or space) in the alphabet. The second line is the binary encoding of the sample string.<P><P><BR><B>Note:</B> Sample strings may only contain upper case letters and spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, print a line that identifies the dataset in the format: `<TT>DATASET #<SPAN CLASS="MATH"><I>n</I></SPAN></TT>' where <SPAN CLASS="MATH"><I>n</I></SPAN> is the dataset number (1 through <SPAN CLASS="MATH"><I>N</I></SPAN>). If more than one binary code table can be generated to represent the alphabet, print `<TT>MULTIPLE TABLES</TT>' on a new line and move onto the next dataset. If only one binary code table can be generated, for each character in the alphabet, display the letter, a space, and equal sign `<TT>=</TT>', a space and the binary code for that letter. Display the table in order sorted by the ASCII value of each character of the alphabet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
CAB
01011
HELLO WORLD
111011011110111101111100111111111111011111101111010
ABCDEFGHI
010110111011110111110111111011111110001011111111
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
DATASET #1
A = 10
B = 11
C = 0
DATASET #2
  = 0
D = 10
E = 110
H = 1110
L = 11110
O = 111110
R = 1111110
W = 1111111
DATASET #3
MULTIPLE TABLES
</PRE><P>
______________________________________________________
2563||||||false||||||
<P>One type of picture puzzle consists of nine square pieces, each of which has one-half of a picture on each edge. The pictures on each piece are either the left or the right half of one of four pictures designated B, C, K and P for this problem. The picture halves are aligned along the edges so that, if the left half is on one piece and the right on another, when the two pieces are aligned the pictures match. The purpose of the puzzle is to place the nine pieces into a three by three grid so that all the pictures along the adjacent edges match. Note that some of the pieces may need to be rotated to match.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2563.gif ALT="\epsfbox{p2563.eps}"></DIV><P>Write a program to solve one or more instances of the puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a sequence of problems. Each problem begins with the problem number on a line by itself. The end of the data is indicated by a problem number of `<TT>0</TT>'. Following the problem number line will be nine lines describing the pieces. Each of these lines begins with the piece number (1 through 9) followed by the picture on the top, right side, bottom and left side of the piece, in that order and separated by spaces. The picture halves are BL, BR, CL, CR, KL, KR, PL and PR. BL matches with BR, CL matches with CR, KL matches with KR and PL matches with PR. (For example, BL is the <EM>left</EM> half and BR is the <EM>right</EM> half of the picture designated B)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each problem is to be: A line with the problem number followed by a colon `<TT>:</TT>'. If the problem has no solution, the next line should be `<TT>No Solution</TT>'. If there is a solution, that solution should be displayed as follows:<P>Since any solution may be rotated 90, 180 or 270 degrees to obtain another, the center square should be in the orientation given in the input and other squares aligned accordingly. Each row of pieces is displayed on three lines with a blank line between rows. The format for a single piece is:<P><P><BR><SPAN CLASS="MATH">&lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char top picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt;</SPAN><P><SPAN CLASS="MATH">&lt;</SPAN>2 char left picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt; &lt;</SPAN>1 digit piece number<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char right picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>sp<SPAN CLASS="MATH">&gt;</SPAN><P><SPAN CLASS="MATH">&lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt; &lt;</SPAN>2 char bottom picture<SPAN CLASS="MATH">&gt; &lt;</SPAN>3 spaces<SPAN CLASS="MATH">&gt;</SPAN><P><P><BR>A single blank line should follow the output for each problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
1 BR KR PL CR
2 CL PR BL KR
3 KR PR CR BL
4 PL KR BL CL
5 PL BR CL KR
6 PR CL BR PL
7 CR KL BL PR
8 BL CR KL PL
9 KL CL PR BL
2
1 PR PR BL CR
2 BR KL CR PR
3 CR BL PL KR
4 KL PL BL CL
5 BR CR PL KR
6 KL BR PL CR
7 CL PL BL KR
8 KR KL CR BL
9 CR KL PR BL
3
1 PL KL CL BR
2 PL CR KL BL
3 PR BR CL KR
4 CR PL BR KR
5 PR CL BR KR
6 BL KL CR PR
7 PL BL CL KR
8 PR CR KL BR
9 KL BL CL PL
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1:
   CL      KR      KL
PR 6 BR BL 2 CL CR 7 BL
   PL      PR      PR

   PR      PL      PL
KR 3 CR CL 4 KR KL 8 BL
   BL      BL      CR

   BR      BR      CL
PL 5 CL CR 1 KR KL 9 PR
   KR      PL      BL

2:
No Solution

3:
   KL      BR      BL
BL 6 CR CL 5 KR KL 9 CL
   PR      PR      PL

   PL      PL      PR
KR 7 BL BR 1 KL KR 3 BR
   CL      CL      CL

   CR      CR      CR
PL 2 KL KR 4 PL PR 8 KL
   BL      BR      BR
</PRE><P>
______________________________________________________
2564||||||false||||||
<P>Two triangles ABC and XYZ are <EM>Similar</EM> if their corresponding sides are proportional (or, equivalently if their corresponding angles are equal. We will say that ABC and XYZ are <EM>Similar In Order</EM>, if A corresponds to X, B corresponds to Y and C corresponds to Z. That is:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">| <I>AB</I>|/| <I>XY</I>| = | <I>BC</I>|/| <I>YZ</I>| = | <I>AC</I>|/| <I>XZ</I>|,</DIV><P></P>where <SPAN CLASS="MATH">| <I>MN</I>|</SPAN> denotes the length of the line from M to N.<P>Triangle XYZ is <EM>Strictly Inscribed in</EM> triangle ABC, if each vertex of XYZ lies in the interior (not at a vertex) of a different edge of ABC. This means that no edge of XYZ can be contained in an edge of ABC. If XYZ is similar in order to ABC and strictly inscribed in ABC, we say that XYZ is a <EM>Strictly Inscribed Similar Triangle</EM> to ABC.<P>If the line through X and Y makes an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> with the line through A and B, there are four possible orientations illustrated in the figures below. X and Y may be at either end of the segment and the third vertex, Z, may be on either side of the line. In the figures, the line through X and Y makes an angle of 30<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> with the line through A and B.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="\epsfbox{p2564.eps}"></DIV><P>Depending on the shape of the outside triangle, ABC, and the angle, <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>, between the line through X and Y and the line through A and B, there may be 0, 1, 2, 3 or 4 strictly inscribed similar triangles to ABC with angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>.<P>Write a program, which takes as input the vertices of the triangle ABC and an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN>, and computes the vertices of all strictly inscribed similar triangles to ABC for which the line through X and Y makes an angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> with the line through A and B.<P><P><BR><B>Note:</B> Use the value: 3.14159253 as the value for <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \pi$"></SPAN>, should you need it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> which is the number of triangle datasets that follow. Each triangle dataset consists of four lines. The first line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex A, the second line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex B and the third line has the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of vertex C. The last line has the angle <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2564img1.gif ALT="$ \theta$"></SPAN> in degrees between the line through X and Y and the line through A and B.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, you will output the number of strictly inscribed similar triangles to ABC satisfying the input conditions. Then, for each such triangle, print a blank line, followed by a line containing the coordinates of vertex X (corresponding to A); a line containing the coordinates of vertex Y (corresponding to B); a line containing the coordinates of vertex Z (corresponding to C); and another blank line. Each coordinate should be given to four decimal places.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2
0 0
21 0
14 6
30
0 0
21 0
14 6
50
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2

15.6030 4.6260
7.5905 0.0000
8.9396 3.8313

8.1575 0.0000
15.8312 4.4304
12.0075 5.1461

1
10.0510 0.0000
14.6315 5.4587
11.5450 4.9479
</PRE><P>
______________________________________________________
2565||||||false||||||
<P>A message from humans to extraterrestrial inteIigence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November l6, l974. The message consisted of l679 bits and was meant to be translated to a rectangular picture with <SPAN CLASS="MATH">23 <TT>x</TT> 73</SPAN> <tex2html_verbatim_mark> pixels. Since both 23 and 73 are prime numbers, <SPAN CLASS="MATH">23 <TT>x</TT> 73</SPAN> <tex2html_verbatim_mark> is the unique possible size of the translated rectangular picture each edge of which is longer than l pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic.<P><P><BR>We are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term ``most suitable'' is defined as follows. An integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> greater than 4 is given. A positive fraction <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> less than or equal to 1 is also given. The area of the picture should not be greater than <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> nor greater than 1. You should maximize the area of the picture under these constraints.<P><P><BR>In other words, you will receive an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and a haction <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark>. It holds that <SPAN CLASS="MATH"><I>m</I> &gt; 4</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < a/b \le 1$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I>/<I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>. You should find the pair of prime numbers <SPAN CLASS="MATH"><I>p</I>, <I>q</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>pq</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I>/<I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>p</I>/<I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>, and furthermore, the product <SPAN CLASS="MATH"><I>pq</I></SPAN> <tex2html_verbatim_mark> takes the maximum value among such pairs of two prime numbers. You should report <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> as the ``most suitable'' width and height of the translated picture.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, <TT>0 0 0</TT>, which indicates the end of the input and should not be treated as data to be processed.<P><P><BR>The integers of each input triplet are the integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, the numerator <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, and the denominator <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> described above, in this order. You may assume <!-- MATH
 $4 < m \le 100000$
 --><SPAN CLASS="MATH">4 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2565img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a sequence of pairs of positive integers. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th output pair corresponds to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th input triplet. The integers of each output pair are the width <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and the height <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> described above, in this order.<P><P><BR>Each output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 1 2
99999 999 999
1680 5 16
1970 1 1
2002 4 11
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2
313 313
23 73
43 43
37 53
</PRE><P>
______________________________________________________
2566||||||false||||||
<P>
Mr. Simpson got up with a slight feeling of tiredness. It was the start of another day of hard work.
A bunch of papers were waiting for his inspection on his desk in his omce. The papers contained his
students' answers to questions in his Math class, but the answers looked as if they were just stains of ink.

<P>
His headache came from the ``creativity'' of his students. They provided him a variety of ways to answer
each problem. He has his own answer to each problem, which is correct, of course, and the best hom his
aesthetic point of view.

<P>
Some of his students wrote algebraic expressions equivalent to the expected answer, but many of them
look quite different from Mr. Simpson's answer in terms of their literal forms. Some wrote algebraic
expressions not equivalent to his answer, but they look quite similar to it. Only a few of the students'
answers were exactly the same as his.

<P>
It is his duty to check if each expression is mathematicaly equivalent to the answer he has prepared.
This is to prevent expressions that are equivalent to his hom being marked as ``incorrect'', even if they
are not acceptable to his aesthetic moral.

<P>
He had now spent five days checking the expressions. Suddenly, he stood up and yelled, ``I've had enough!
I must call for help.''

<P>

<P>
<BR>
Your job is to write a program to help Mr. Simpson to judge if each answer is equivalent to the ``correct''
one. Algebraic expressions written on the papers are multi-variable polynomials over variable symbols
<!-- MATH
 $a,b,\ldots, z$
 -->
<SPAN CLASS="MATH"><I>a</I>, <I>b</I>,..., <I>z</I></SPAN>
<tex2html_verbatim_mark> with integer coefficients, e.g., 
<P><!-- MATH
 \begin{displaymath}
(a+ b^{2})(a - b^{2}), \ ax^{2} + 2bx + c \mbox{ and } (x^{2} + 5x +4)(x^{2} + 5x + 6) + 1.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(<I>a</I> + <I>b</I><SUP>2</SUP>)(<I>a</I> - <I>b</I><SUP>2</SUP>),&nbsp;<I>ax</I><SUP>2</SUP> +2<I>bx</I> + <I>c</I> and (<I>x</I><SUP>2</SUP> +5<I>x</I> + 4)(<I>x</I><SUP>2</SUP> + 5<I>x</I> + 6) + 1.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
Mr. Simpson will input every answer expression as it is written on the papers; he promises you that
an algebraic expression he inputs is a sequence of tenns separated by additive operators `<TT>+</TT>' and `<TT>-</TT>',
representing the sum of the terms with those operators, if any; a term is a juxtaposition of multiplicands,
representing their product; and a multiplicand is either (a) a non-negative integer as a digit sequence
in decimal, (b) a variable symbol (one of the lowercase letters `<TT>a</TT>' to `<TT>z</TT>'), possibly followed by a symbol `<code>^</code>' and a non-zero digit, which represents the power of that variable, or (c) a parenthesized algebraic
expression, recursively. Note that the operator `<TT>+</TT>' or `<TT>-</TT>' appears only as a binary operator and not as a unary operator to specify the sing of its operand.

<P>
He says that he will put one or more space characters before an integer if it immediately follows another
integer or a digit following the symbol `<code>^</code>'. He also says he may put spaces here and there in an expression
as an attempt to make it readable, but he will never put a space between two consecutive digits of an
integer. He remarks that the expressions are not so complicated, and that any expression, having its `<TT>-</TT>'s
replaced with `<TT>+</TT>'s, if any, would have no variable raised to its lOth power, nor coefficient more than a
billion, even if it is fully expanded into a form of a sum of products of coefficients and powered variables.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program is a sequence of blocks of lines. A block consists of lines, each containing an
expression, and a terminating line. After the last block, there is another terminating line. A terminating
line is a line solely consisting of a period symbol.

<P>
The first expression of a block is one prepared by Mr. Simpson; all that follow in a block are answers by
the students. An expression consists of lowercase letters, digits, operators `<TT>+</TT>', `<TT>-</TT>' and `<code>^</code>', parentheses `<TT>(</TT>' and `<TT>)</TT>', and spaces. A line containing an expression has no more than 80 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should produce a line solely consisting of ``<TT>yes</TT>'' or ``<TT>no</TT>'' for each answer by the students corresponding to whether or not it is mathematically equivalent to the expected answer. Your program
should produce a line solely containing a period symbol after each block.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
a+b+c
(a+b)+c
a- (b-c)+2
.
4ab
(a - b) (0-b+a) - 1a ^ 2 - b ^ 2
2 b 2 a
.
108 a
2 2 3 3 3 a
4 a^1 27
.
.
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
yes
no
.
no
yes
.
yes
yes
.
</PRE> 

<P>

______________________________________________________
2567||||||false||||||
<P>
Following FIFA World Cup, a larger competition called ``GIGA Universe Cup'' is taking place somewhere
in our universe. Both FIFA World Cup and GIGA Universe Cup are two rounds competitions that consist
of the first round, also known as ``group league,'' and the second called ``final tournament.'' In the first
round, participating teams are divided into groups of four teams each. Each team in a group plays a
match against each of the other teams in the same group. For example, let's say we have a group of the
foIowing four teams, ``Engband, Swedon, Argontina, and Nigerua.'' They play the following six matches:
Engband - Swedon, Engband - Argontina, Engband - Nigerua, Swedon - Argontina, Swedon - Nigerua,
and Argontina - Nigerua.

<P>

<P>
<BR>
The result of a single match is shown by the number of goals scored by each team, like ``Engband 1 -
0 Argontina,'' which says Engband scored one goal whereas Argontina zero. Based on the result of a
match, <EM>points</EM> are given to the two teams as follows and used to rank teams. If a team wins a match (i.e.,
scores more goals than the other), three points are given to it and zero to the other. If a match draws
(i.e., the two teams score the same number of goals), one point is given to each.

<P>
The <EM>goal difference</EM> of a team in given matches is the total number of goals it scored minus the total
number of goals its opponents scored in these matches. For example, if we have three matches ``Swedon
1 - 2 Engband,'' ``Swedon 3 - 4 Nigerua,'' and ``Swedon 5 - 6 Argontina,'' then the goal diference of
Swedon in these three matches is (1 + 3 + 5) - (2 + 4+ 6) = -3.

<P>

<P>
<BR>
Given the results of all the six matches in a group, teams are ranked by the following criteria, listed in
the order of priority (that is, we first apply (a) to detennine the ranking, with ties broken by (b), with
ties broken by (c), and so on).

<P>
<DL COMPACT>
<DT>(a)</DT>
<DD>greater number of points in all the group matches;
</DD>
<DT>(b)</DT>
<DD>greater goal difference in all the group matches;
</DD>
<DT>(c)</DT>
<DD>greater number of goals scored in all the group matches.
</DD>
</DL>

<P>
If two or more teams are equal on the basis of the above three criteria, their place shoul be determined
by the following criteria, applied in this order:

<P>
<DL COMPACT>
<DT>(d)</DT>
<DD>greater number of points obtained in the group matches between the teams concerned;
</DD>
<DT>(e)</DT>
<DD>greater goal difference resulting from the group matches between the teams concerned;
</DD>
<DT>(f)</DT>
<DD>greater number of goals scored in the group matches between the teams concerned;
</DD>
</DL>

<P>
If two or more teams are stiIl equal, apply (d), (e), and (f) as necessary to each such group. Repeat this
until those three rules to equal teams do not make any further resolution. FinaIy, teams that still remain
equal are ordered by:

<P>
<DL COMPACT>
<DT>(g)</DT>
<DD>drawing lots by the Organizing Committee for the GIGA Universe Cup.
</DD>
</DL>

<P>
The two teams coming first and second in each group qualify for the second round.

<P>

<P>
<BR>
Your job is to write a program which, given the results of matches played so far in a group and one team
specified in the group, calculates the probability that the specified team will qualify for the second round.
You may assume each team has played exactly two matches and has one match to play. In total, four
matches have been played and two matches are to be played.

<P>
Assume the probability that any team scores (exactly) <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> goals in any match is:

<P>
<P><!-- MATH
 \begin{displaymath}
\frac{8!}{p!(8-p)!}\left(\frac{1}{4}\right)^{p}\left(\frac{3}{4}\right)^{8-p},
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<IMG
 WIDTH="79" HEIGHT="56" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{8!}}{{p!(8-p)!}}}$"><IMG
 WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left(\vphantom{\frac{1}{4}}\right.$"><IMG
 WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{1}}{{4}}}$"><IMG
 WIDTH="26" HEIGHT="56" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left.\vphantom{\frac{1}{4}}\right)^{{p}}_{}$"><IMG
 WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left(\vphantom{\frac{3}{4}}\right.$"><IMG
 WIDTH="17" HEIGHT="55" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle {\frac{{3}}{{4}}}$"><IMG
 WIDTH="43" HEIGHT="62" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$\displaystyle \left.\vphantom{\frac{3}{4}}\right)^{{8-p}}_{}$">,
</DIV><P>
<tex2html_verbatim_mark></P>
for <SPAN CLASS="MATH"><I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">8</SPAN>
<tex2html_verbatim_mark>, and zero for <SPAN CLASS="MATH"><I>p</I> &gt; 8</SPAN>
<tex2html_verbatim_mark>. Assume the lot in the step (g) is fair.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input is an integer, less than 1000, that indicates the number of subsequent records.

<P>
The rest of the input is the indicated number of records. A single record has the following format:

<P>

<P>
<BR>
<TABLE COLS=9>
<COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{2}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{2}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{3}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{3}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_\rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{12}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{12}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{13}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{13}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{14}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{14}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{2}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{2}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{23}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{23}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{24}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{24}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{3}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{3}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle m \rangle_{34}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="25" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{34}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

<P>

<P>
<BR>
In the above, <!-- MATH
 $\langle \_ \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><IMG
 WIDTH="11" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \_$"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> is a single underscore (<code>_</code>) and <!-- MATH
 $\langle empty \rangle$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>empty</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$"></SPAN>
<tex2html_verbatim_mark> a sequence of exactly four underscores (<code>____</code>).
Each of <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $\langle team \rangle 4$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle$">4</SPAN>
<tex2html_verbatim_mark> is either an asterisk character (<TT>*</TT>) followed by exactly three uppercase letters
(e.g., <TT>*ENG</TT>), or an underscore followed by exactly three uppercase letters (e.g., <TT>_SWE</TT>). The former indicates that it is the team you are asked to calculate the probabiIty of the second round qualification for. You
may assume exactly one of <!-- MATH
 $\langle team \rangle_{1}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{1}}^{}$"></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> , <!-- MATH
 $\langle team \rangle_{4}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="19" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{4}}^{}$"></SPAN>
<tex2html_verbatim_mark> is marked with an asterisk. Each <!-- MATH
 $\langle m \rangle_{ij}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>m</I><IMG
 WIDTH="23" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{ij}}^{}$"></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(l \le j < j \le 4)$
 -->
<SPAN CLASS="MATH">(<I>l</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$"><I>j</I> &lt; <I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">4)</SPAN>
<tex2html_verbatim_mark> is
a match result between the <!-- MATH
 $\langle team \rangle_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="17" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $\langle team \rangle_{j}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="18" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{j}}^{}$"></SPAN>
<tex2html_verbatim_mark>. Each match result is either <code>__-_</code> (i.e., two underscores, hyphen, and another underscore) or of the form <TT>_</TT><SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark><TT>-</TT><SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> where each of <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> is a single digit <SPAN CLASS="MATH">(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \le$">8)</SPAN>
<tex2html_verbatim_mark>. The former indicates that the corresponding match has not been played, whereas the latter that the result of the match was <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> goals by <!-- MATH
 $\langle team \rangle_{i}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="17" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{i}}^{}$"></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> goals by <!-- MATH
 $\langle team \rangle_{j}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="11" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \langle$"><I>team</I><IMG
 WIDTH="18" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2567img1.png
 ALT="$ \rangle_{{j}}^{}$"></SPAN>
<tex2html_verbatim_mark>. Since each team has played exactly two matches, exactly two match results are in the former format.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output should consist of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of records in the input. The <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th line should
show the probability that the designated team (marked with an asterisk) will qualify for the second round
in the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th record.

<P>
Numbers should be printed with exactly seven digits after the decimal point. Each number should not
contain an error geater than <SPAN CLASS="MATH">10<SUP>-7</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
_____*AAA__BBB__CCC__DDD
*AAA_______0-0__0-0___-_
_BBB_____________-___0-0
_CCC_________________0-0
_DDD____________________
_______CHN__CRC__TR_*BRA
_CHN_______0-2___-___0-4
_CRC____________1-1___-_
_TUR_________________1-2
*BRA____________________
______CMR_*KSA__GER___RL
_CMR_______1-0___-___1-1
*KSA____________0-8___-_
_GER_________________1-1
_IRL____________________
______TUN__JPN_*BEL__RUS
_TUN________-___1-1__0-2
_JPN____________2-2__1-0
*BEL__________________-_
_RUS____________________
______MEX__CRO_*ECU__ITA
_MEX_______1-0__2-1___-_
_CRO_____________-___2-1
*ECU_________________0-2
_ITA____________________
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.5000000
1.0000000
0.0000000
0.3852746
0.0353304
</PRE> 

<P>

______________________________________________________
2568||||||false||||||
<P>
Let's play a new board game ``Life Line''.

<P>
The number of the players is greater than 1 and less than 10.

<P>
In this game, the board is a regular triangle in which many small regular triangles are arranged (See
Figure l). The edges of each small triangle are of the same length.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568a.eps}$
 -->
<IMG
 WIDTH="536" HEIGHT="285" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1: The board

</DIV>

<P>
The size of the board is expressed by the number of vertices on the bottom edge of the outer triangle.

<P>
For example, the size of the board in Figure 1 is 4.

<P>
At the beginning of the game, each player is assigned his own identification number between 1 and 9,
and is given some stones on which his identification number is written.

<P>
Each player puts his stone in turn on one of the ``empty'' vertices. An ``empty vertex'' is a vertex that
has no stone on it.

<P>
When one player puts his stone on one of the vertices during his turn, some stones might be removed
from the board. The player gains points which is equal to the number of the removed stones of others,
but loses points which is equal to the number of the removed stones of himself. The points of a player
for a single turn is the points he gained minus the points he lost in that turn.

<P>

<P>
<BR>
The conditions for removing stones are as follows:

<P>

<UL>
<LI>The stones on the board are divided into groups. Each group contains a set of stones whose numbers
are the same and placed adjacently. That is, if the same numbered stones are placed adjacently,
they belong to the same group.

<P>
</LI>
<LI>If none of the stones in a group is adjacent to at least one ``empty'' vertex, all the stones in that
group are removed from the board.
</LI>
</UL>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568b.eps}$
 -->
<IMG
 WIDTH="442" HEIGHT="268" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2: The groups of stones

</DIV>

<P>
Figure 2 shows an example of the groups of stones.

<P>
Suppose that the turn of the player `4' comes now. If he puts his stone on the vertex shown in Figure
3a, the conditions will be satisfied to remove some groups of stones (shadowed in Figure 3b). The player
gains 6 points, because the 6 stones of others are removed hom the board (See Figure 3c).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568c.eps}$
 -->
<IMG
 WIDTH="909" HEIGHT="239" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568c.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figures 3a, 3b and 3c

</DIV>

<P>
As another example, suppose that the turn of the player `2' comes in Figure 2. If the player puts his
stone on the vertex shown in Figure 4a, the conditions will be satisfied to remove some groups of stones
(shadowed in Figgue 4b). The player gains 4 points, because the 4 stones of others are removed. But, at
the same time, he loses 3 points, because his 3 stones are removed. As the result, the player's points of
this turn is 4 - 3 = 1 (See Figure 4c).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2568d.eps}$
 -->
<IMG
 WIDTH="897" HEIGHT="248" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="\epsfbox{p2568d.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figures 4a, 4b and 4c

</DIV>

<P>
When each player puts all of his stones on the board, the game is over. The total score of a player is the
summation of the points of all of his turns.

<P>
Yourjob is to write a program that tells you the maximum points a player can get (i.e., the points he
gains - the points he loses) in his current turn.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data. Each data represents the state of the board of the game still in
progress.

<P>
The fonnat of each data is as follows.

<P>

<P>
<BR>
<!-- MATH
 $\ \ N \ \ C$
 -->
<SPAN CLASS="MATH">&nbsp; <I>N</I>&nbsp; <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ \ \ \ S_{1,1}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <I>S</I><SUB>1, 1</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ S_{2,1}\ \ S_{2,2}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp;<I>S</I><SUB>2, 1</SUB>&nbsp; <I>S</I><SUB>2, 2</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ S_{3,1}\ \ S_{3,2} \ \ S_{3,3}$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; <I>S</I><SUB>3, 1</SUB>&nbsp; <I>S</I><SUB>3, 2</SUB>&nbsp; <I>S</I><SUB>3, 3</SUB></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ \ \ \ \ \ \ \ \ \cdots$
 -->
<SPAN CLASS="MATH">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\ \ S_{N,1}\ \ \ \cdots \ \ \ S_{N,N}$
 -->
<SPAN CLASS="MATH">&nbsp; <I>S</I><SUB>N, 1</SUB>&nbsp; &nbsp;<SUP> ... </SUP>&nbsp; &nbsp;<I>S</I><SUB>N, N</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the size ofthe board <!-- MATH
 $(3 \le N \le 10)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark>.

<P>
<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> is the identification number ofthe player whose turn comes now <!-- MATH
 $(1 \le C \le 9)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">9)</SPAN>
<tex2html_verbatim_mark>. That is, your program
must calculate his points in this turn.

<P>
<SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is the state of the vertex on the board <!-- MATH
 $(0 \le S_{i,j} \le 9)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$"><I>S</I><SUB>i, j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2568a.jpg
 ALT="$ \le$">9)</SPAN>
<tex2html_verbatim_mark>. If the value of <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is positive, it means that there is the stone numbered by <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> there. If the value of <SPAN CLASS="MATH"><I>S</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is 0, it means that the vertex is ``empty''.

<P>
Two zeros in a line, i.e., <TT>0 0</TT>, represents the end of the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data, the maximum points the player can get in the turn should be output, each in a separate
line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4
   2
  2 3
 1 0 4
1 1 4 0
4 5
   2
  2 3
 3 0 4
1 1 4 0
4 1
   2
  2 3
 3 0 4
1 1 4 0
4 1
   1
  1 1
 1 1 1
1 1 1 0
4 2
   1
  1 1
 1 1 1
1 1 1 0
4 1
   0
  2 2
 5 0 7
0 5 7 0
4 2
   0
  0 3
 1 0 4
0 1 0 4
4 3
   0
  3 3
 3 2 3
0 3 0 3
4 2
   0
  3 3
 3 2 3
0 3 0 3
6 1
     1
    1 2
   1 1 0
  6 7 6 8
 0 7 6 8 2
6 6 7 2 2 0
5 9
    0
   0 0
  0 0 0
 0 0 0 0
0 0 0 0 0
5 3
    3
   3 2
  4 3 2
 4 4 0 3
3 3 3 0 3
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
5
1
-10
8
-1
0
1
-1
5
0
5
</PRE> 

<P>

______________________________________________________
2569||||||false||||||
<P>An old document says that a Ninja House in Kanazawa City was in fact a defensive fortress, which was designed like a maze. Its rooms were connected by hidden doors in a complicated manner, so that any invader would become lost. Each room has at least two doors.<P>The Ninja House can be modeled by a graph, as shown in Figure l. A circle represents a room. Each line connecting two circles represents a door between two rooms.<P><DIV ALIGN="CENTER">=6.5in <IMG WIDTH="881" HEIGHT="356" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2569.jpg ALT="\epsfbox{p2569.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure l. Graph Model of Ninja House. <B>and</B> Figure 2. Ninja House exploration.</DIV><P>I decided to draw a map, since no map was available. Your mission is to help me draw a map hom the record of my exploration.<P>I started exploring by entering a single entrance that was open to the outside. The path I walked is schematically shown in Figure 2, by a line with arrows. The rules for moving between rooms are described below.<P><P><BR><BLOCKQUOTE>After entering a room, I first open the rightmost door and move to the next room. However, if the next room has already been visited, I close the door without entering, and open the next rightmost door, and so on. When I have inspected all the doors of a room, I go back through the door I used to enter the room.</BLOCKQUOTE><P><P><BR>I have a counter with me to memorize the <EM>distance</EM> from the first room. The counter is incremented when I enter a new room, and decremented when I go back hom a room. In Figure 2, each number in parentheses is the value of the counter when I have entered the room, i.e., the distance hom the first room. In contrast, the numbers not in parentheses represent the order of my visit.<P>I take a record of my exploration. Every time I open a door, I record a single number, acording to the following rules.<P><OL><LI>If the opposite side of the door is a new room, I record the number of doors in that room, which is a positive number. </LI><LI>If it is an already visited room, say R, I record ``<EM>the distance of R from the first room</EM>'' minus ``<EM>the distance of the current room from the first room</EM>'', which is a negative number. </LI></OL><P>In the example shown in Figure 2, as the first room has three doors connecting other rooms, I initialy record ``3''. Then when I move to the second, third, and fourth rooms, which all have three doors, I append ``3 3 3'' to the record. When I skip the entry from the fourth room to the first room, the distance difference ``-3'' (minus three) will be appended, and so on. So, when I finish this exploration, its record is a sequence of numbers ``3 3 3 3 -3 3 2 -5 3 2 -5 -3''.<P>There are several dozens of Ninja Houses in the city. Given a sequence of numbers for each of these houses, you should produce a graph for each house.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, indicating the number of records of Ninja Houses I have visited. You can assume that <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is less than 100. Each of the foIowing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> records consists of numbers recorded on one exploration and a zero as a terminator. Each record consists of one or more lines whose lengths are less than 1000 characters. Each number is delimited by a space or a newline. You can assume that the number of rooms for each Ninja House is less than 100, and the number of doors in each room is less than 40.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each Ninja House of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> rooms, the output should consist of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line of each such <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines should look as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>i</I>&nbsp;<I>r</I><SUB>1</SUB>&nbsp;<I>r</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP><I>r</I><SUB>k<SUB>i</SUB></SUB></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> should be rooms adjoining room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> should be the number of doors in room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. Numbers should be separated by exactly one space character. The rooms should be numbered from 1 in visited order. <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> should be in ascending order. Note that the room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> may be connected to another room through more than one door. In this case, that room number should appear in <SPAN CLASS="MATH"><I>r</I>1,<SUP> ... </SUP>, <I>r</I><SUB>k<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> as many times as it is connected by different doors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3 3 3 3 -3 3 2 -5 3 2 -5 -3 0
3 5 4 -2 4 -3 -2 -2 -1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 2 4 6
2 1 3 8
3 2 4 7
4 1 3 5
5 4 6 7
6 1 5
7 3 5 8
8 2 7
1 2 3 4
2 1 3 3 4 4
3 1 2 2 4
4 1 2 2 3
</PRE><P>
______________________________________________________
2570||||||false||||||
<P>You have just been put in charge of developing a new shredder for the Shredding Company. Although a ``normal'' shredder would just shred sheets of paper into little pieces so that the contents would become unreadable, this new shredder needs to have the following unusual basic characteristics.<P><UL><LI>The shredder takes as input a <EM>target number</EM> and a sheet of paper with a number written on it. </LI><LI>It shreds (or cuts) the sheet into pieces each of which has one or more digits on it. </LI><LI>The sum of the numbers written on each piece is the closest possible number to the target number, without going over it. </LI></UL><P>For example, suppose that the target number is 50, and the sheet of paper has the number 12346. The shredder would cut the sheet into four pieces, where one piece has 1, another has 2, the third has 34, and the fourth has 6. This is because their sum 43 (= 1 + 2 + 34 + 6) is closest to the target number 50 of all possible combinations without going over 50. For example, a combination where the pieces are 1, 23, 4, and 6 is not valid, because the sum of this combination 34 (= 1 + 23 + 4 + 6) is less than the above combination's 43. The combination of 12, 34, and 6 is not valid either, because the sum 52 (= 12+34+6) is greater than the target number of 50.<P><DIV ALIGN="CENTER"><IMG WIDTH="496" HEIGHT="392" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2570.jpg ALT="\epsfbox{p2570.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1. Shredding a sheet ofpaper having the number 12346 when the target number is 50</DIV><P>There are also three special rules:<P><UL><LI>If the target number is the same as the number on the sheet of paper, then the paper is not cut. For example, if the target number is 100 and the number on the sheet of paper is also 100, then the paper is not cut. </LI><LI>If it is not possible to make any combination whose sum is less than or equal to the target number, then <EM>error</EM> is printed on a display. For example, if the target number is 1 and the number on the sheet ofpaper is 123, it is not possible to make any valid combination, as the combination with the smallest possible sum is 1, 2, 3. The sum for this combination is 6, which is greater than the target number, and thus <EM>error</EM> is printed. </LI><LI>If there is more than one possible combination where the sum is closest to the target number without going over it, then <EM>rejected</EM> is printed on a display. For example, if the target number is 15, and the number on the sheet of paper is 111, then there are two possible combinations with the highest possible sum of 12: (a) 1 and 11 and (b) 11 and 1; thus <EM>rejected</EM> is printed. </LI></UL><P>In order to develop such a shredder, you have decided to first make a simple program that would simulate the above characteristics and rules. Given two numbers, where the first is the target number and the second is the number on the sheet of paper to be shredded, you need to figure out how the shredder should ``cut up'' the second number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases, each on one line, as foIows:<P><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>&nbsp;<I>num</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>t</I><SUB>2</SUB>&nbsp;<I>num</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark><P><SPAN CLASS="MATH"><I>t</I><SUB>n</SUB>&nbsp;<I>num</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><TT>0 0</TT><P>Each test case consists of the following two positive integers, which are separated by one space: (1) the first integer (<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> above) is the target number; (2) the second integer (<SPAN CLASS="MATH"><I>num</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> above) is the number that is on the paper to be shredded.<P>Neither integers may have a 0 as the first digit, e.g., 123 is aIowed but 0123 is not. You may assume that both integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, the corresponding output takes one of the following three types:<P><UL><LI><SPAN CLASS="MATH"><I>sum</I>&nbsp;<I>part</I><SUB>1</SUB>&nbsp;<I>part</I><SUB>2</SUB>&nbsp;<SUP> ... </SUP></SPAN><tex2html_verbatim_mark> </LI><LI><TT>rejected</TT> </LI><LI><TT>error</TT> </LI></UL><P>In the first type, <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark> have the following meaning:<P><UL><LI>Each <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is a number on one piece of shredded paper. The order of <SPAN CLASS="MATH"><I>part</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> corresponds to the order of the original digits on the sheet of paper. </LI><LI><SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark> is the sum ofthe numbers after being shredded, i.e., <SPAN CLASS="MATH"><I>sum</I> = <I>part</I><SUB>1</SUB> + <I>part</I><SUB>2</SUB> + <SUP>... </SUP></SPAN><tex2html_verbatim_mark>. </LI></UL><P>Each number should be separated by one space.<P>The message `<TT>error</TT>' is printed if it is not possible to make any combination, and `<TT>rejected</TT>' if there is more than one possible combination.<P>No extra characters including spaces are allowed at the beginning of each line, nor at the end of each line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
50 12346
376 144139
927438 927438
18 3312
9 3142
25 1299
111 33333
103 862150
6 1104
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
43 1 2 34 6
283 144 139
927438 927438
18 3 3 12
error
21 1 2 9 9
rejected
103 86 2 15 0
rejected
</PRE><P>
______________________________________________________
2571||||||false||||||
<P>
After having drifted about in a small boat for a couple of days, Akira Crusoe Maeda was finally cast
ashore on a foggy island. Though he was exhausted and despaired, he was still fortunate to remember a
legend of the foggy island, which he had heard from patriarchs in his childhood. This must be the island
in the legend.

<P>
In the legend, two tribes have inhabited the island, one is divine and the other is devilish; once members
of the divine tribe bless you, your future is bright and promising, and your soul will eventually go to
Heaven; in contrast, once members of the devilish tribe curse you, your future is bleak and hopeless, and
your soul will eventually fall down to Hell.

<P>
In order to prevent the worst-case scenario, Akira should distinguish the devilish from the divine. But
how? They looked exactly alike and he could not distinguish one from the other solely by their appearances. 
He still had his last hope, however. The members of the divine tribe are truth-tellers, that is, they
always tell the truth and those of the devilish tribe are liars, that is, they always tell a lie.

<P>
He asked some of the whether or not some are divine. They knew one another very much and always
responded to him ``faithfully'' according to their individual natures (i.e., they always tell the truth or
always a lie). He did not dare to ask any other forms of questions, since the legend says that a devilish
member would curse a person forever when he did not like the question. He had another piece of useful
information: the legend tells the populations of both tribes. These numbers in the legend are trustworthy
since everyone living on this island is immortal and none have ever been born at least these millennia.

<P>
You are a good computer programmer and so requested to help Akira by writing a program that classifies
the inhabitants according to their answers to his inquiries.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple data sets, each in the following fonnat:

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
</TABLE>

<P>

<P>
<BR>
The first line has three non-negative integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of questions Akira asked.
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are the populations of the divine and devilish tribes, respectively, in the legend. Each of the
following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines has two integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and one word <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are the identification numbers of inhabitants, each of which is between 1 and <!-- MATH
 $p_{1} +p_{2}$
 -->
<SPAN CLASS="MATH"><I>p</I><SUB>1</SUB> + <I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, inclusive. <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is either `<TT>yes</TT>', if the inhabitant <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> said that the inhabitant <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> was a member of the divine tribe, or `<TT>no</TT>', otherwise. Note that <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> can be the same number since ``are you a member of the divine tribe?'' is a valid question. Note also that two lines may have the same <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>'s and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>'s since Akira was very upset and might have asked the same question to the same one more than once.

<P>

<P>
<BR>
You may assume that <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is less than 1000 and that <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are less than 300. A line with three zeros,
i.e., `<TT>0 0 0</TT>', represents the end of the input. You can assume that each data set is consistent and no
contradictory answers are included.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data set, if it includes sumffient information to classify all the inhabitants, print the identification
numbers of all the divine ones in ascending order, one in a line. In addition, following the output numbers,
print `<TT>end</TT>' in a line. Otherwise, i.e., if a given data set does not include sufficient information to identify
all the divine members, print `<TT>no</TT>' in a line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1 1
1 2 no
2 1 no
3 2 1
1 1 yes
2 2 yes
3 3 yes
2 2 1
1 2 yes
2 3 no
5 4 3
1 2 yes
1 3 no
4 5 yes
5 6 yes
6 7 no
0 0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
no
no
1
2
end
3
4
5
6
end
</PRE> 

<P>

______________________________________________________
2572||||||false||||||
<P>Do you know <EM>confetti</EM>? They are small discs of colored paper, and people throw them around during parties or festivals. Since people throw lots of confetti, they may end up stacked one on another, so there may be hidden ones underneath.<P>A handful of various sized confetti have been dropped on a table. Given their positions and sizes, can you tell us how many of them you can see?<P>The following figure represents the disc configuration for the first sample input, where the bottom disc is still visible.<P><DIV ALIGN="CENTER"><IMG WIDTH="434" HEIGHT="230" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="\epsfbox{p2572.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is composed of a number of configurations of the following form.<P><P><BR><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE><P><P><BR>The first line in a configuration is the number of discs in the configuration (a positive integer not more than 100), followed by one Ine descriptions of each disc: coordinates of its center and radius, expressed as real numbers in decimal notation, with up to 12 digits after the decimal point. The imprecision margin is <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \pm$">5 <TT>x</TT> 10<SUP>-13</SUP></SPAN> <tex2html_verbatim_mark>. That is, it is guaranteed that variations of less than <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2572.jpg ALT="$ \pm$">5 <TT>x</TT> 10<SUP>-13</SUP></SPAN> <tex2html_verbatim_mark> on input values do not change which discs are visible. Coordinates of all points contained in discs are between -10 and 10.<P>Confetti are listed in their stacking order, <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> being the bottom one and <SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> the top one. You are observing from the top.<P>The end of the input is marked by a zero on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each configuration you should output the number of visible confetti on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 0 0.5
-0.9 0 1.00000000001
0.9 0 1.00000000001
5
0 1 0.5
1 1 1.00000000001
0 2 1.00000000001
-1 1 1.00000000001
0 -0.00001 1.00000000001
5
0 1 0.5
1 1 1.00000000001
0 2 1.00000000001
-1 1 1.00000000001
0 0 1.00000000001
2
0 0 1.0000001
0 0 1
2
0 0 1
0.00000001 0 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
5
4
2
2
</PRE>
______________________________________________________
2573||||||false||||||
<P>Suppose you are given many poker cards. As you have already known, each card has points ranging from 1 to 13. Using these poker cards, you need to play a game on the cardboard in Figure 1. The game begins with a place called START. From START, you can walk to left or right to a rectangular box. Each box is labeled with an integer, which is the distance to START.<P><DIV ALIGN="CENTER"><IMG WIDTH="310" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: The poker card game cardboard.</DIV><P>To place poker cards on these boxes, you must follow the rules below:<P><DL COMPACT><DT>(1)</DT><DD>If you put a card with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points on a box labeled <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, you got <SPAN CLASS="MATH">(<I>n</I> <TT>*</TT> <I>i</I>)</SPAN> <tex2html_verbatim_mark> points.</DD><DT>(2)</DT><DD>Once you place a card on a box <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, you block the paths to the boxes behind <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>.</DD></DL><P>For example, in Figure 2, a player places a queen on the right box of distance 1, he gets <SPAN CLASS="MATH">1 <TT>*</TT> 12</SPAN> <tex2html_verbatim_mark> points but the queen also blocks the paths to boxes behind it; i.e., it is not allowed to put cards on boxes behind it anymore.<P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="191" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: Placing a queen.</DIV><P><SPAN CLASS="textbf">Your goal:</SPAN> Given a number of poker cards, find a way to place them so that you will get the <EM>minimum points</EM>. For example, suppose you have 3 cards 5, 10, and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. To get the minimum points, you can place cards like Figure 3, where the total points are <SPAN CLASS="MATH">1 <TT>*</TT> 13 + 2 <TT>*</TT> 5 + 2 <TT>*</TT> 10 = 43</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="294" HEIGHT="204" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="\epsfbox{p2573c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3: An example to place cards.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, which represents the number of test cases. In each test case, it begins with an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2573a.jpg ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, which represents the number of poker cards. Next, each card represented by its number are listed consecutively. Note that, the numbers of ace, <SPAN CLASS="MATH">2, 3,..., <I>K</I></SPAN> <tex2html_verbatim_mark> are given by integers <SPAN CLASS="MATH">1, 2, 3,..., 13</SPAN> <tex2html_verbatim_mark>, respectively. The final minimum point in each test case is less than 5000000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>List the minimum points of each test case line by line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
5 10 13
4
3 4 5 5
5
7 7 10 11 13
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
43
34
110
</PRE><P>
______________________________________________________
2574||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> be a weighted graph, i.e., every edge in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is associated with a nonnegative integer weight. The <EM>length</EM> of a path is the sum of edge weights in the path. A <EM>shortest path</EM> between vertices <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, is defined as a path with the shortest length from <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. The <EM>distance</EM> between vertices <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, denoted by <SPAN CLASS="MATH"><I>d</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, is the length of the shortest path <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. For two vertices in a connected graph, there exists at least one shortest path between them. Let <SPAN CLASS="MATH"><I>e</I> = (<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark> be an edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> closer to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> than <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> may be <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>). Let <SPAN CLASS="MATH"><I>G</I> - <I>e</I></SPAN> <tex2html_verbatim_mark> denote the subgraph obtained by removing edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. A <EM>detour</EM> from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> is the shortest path from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>G</I> - <I>e</I></SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH"><I>P</I><SUB>G-e</SUB>(<I>u</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. Edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is a <EM>detour-critical edge</EM> in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> if the removal of <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> results in the maximum distance increment from <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. In other words, if <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is a detour-critical edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>d</I><SUB>G-e</SUB>(<I>u</I>, <I>s</I>) - <I>d</I><SUB>G</SUB>(<I>u</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark> is maximum among all edges in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(<I>r</I>, <I>s</I>)</SPAN> <tex2html_verbatim_mark>. The <EM>longest detour problem</EM> is to find the maximum distance increment of a shortest path.<P><DIV ALIGN="CENTER"><IMG WIDTH="479" HEIGHT="391" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="\epsfbox{p2574.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 4: A weighted graph G.</DIV><P>For example, see Figure 4. <!-- 1) = < 4, 3, 2, 1 >$
 --><SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(4, 1) = &lt; 4, 3, 2, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the shortest path from vertex 4 to vertex 1. Path <!-- MATH
 $< 4, 6, 1 >$
 --><SPAN CLASS="MATH">&lt; 4, 6, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 4 to vertex 1 if edge <SPAN CLASS="MATH">(4, 3)</SPAN> <tex2html_verbatim_mark> is removed. Path <!-- MATH
 $< 3, 5, 1 >$
 --><SPAN CLASS="MATH">&lt; 3, 5, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 3 to vertex 1 if edge <SPAN CLASS="MATH">(3, 2)</SPAN> <tex2html_verbatim_mark> is removed. Path <!-- MATH
 $< 2, 5, 1 >$
 --><SPAN CLASS="MATH">&lt; 2, 5, 1 &gt;</SPAN> <tex2html_verbatim_mark> is the detour from vertex 2 to vertex 1 if edge <SPAN CLASS="MATH">(2, 1)</SPAN> <tex2html_verbatim_mark> is removed. The detour-critical edge in <SPAN CLASS="MATH"><I>P</I><SUB>G</SUB>(4, 1)</SPAN> <tex2html_verbatim_mark> is not edge <SPAN CLASS="MATH">(4, 3)</SPAN> <tex2html_verbatim_mark> or edge <SPAN CLASS="MATH">(2, 1)</SPAN> <tex2html_verbatim_mark> but edge <SPAN CLASS="MATH">(3, 2)</SPAN> <tex2html_verbatim_mark> since <SPAN CLASS="MATH"><I>d</I><SUB>G-(3, 2)</SUB>(3, 1) - <I>d</I><SUB>G</SUB>(3, 1) = 600 - 200 = 400</SPAN> <tex2html_verbatim_mark> is greater than <SPAN CLASS="MATH"><I>d</I><SUB>G-(4, 3)</SUB>(4, 1) - <I>d</I><SUB>G</SUB>(4, 1) = 500 - 300 = 200</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>G-(2, 1)</SUB>(2, 1) - <I>d</I><SUB>G</SUB>(2, 1) = 200 - 100 = 100</SPAN> <tex2html_verbatim_mark>.<P>The algorithm for finding detours, as well as determining the detour-critical edges, is important from the viewpoint of network management. Due to a sudden edge failure from some vertex, the message must be retransmitted through a detour from the vertex adjacent to the faulty edge.<P>Suppose that we have several networks. Each network is connected and contains at most <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices, where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. Assume now that you are hired to serve as a network administrator and have to determine the maximum distance increment caused by a detour-critical edge of a given shortest path for each network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line contains an integer indicating the number of test cases. Each test case starts with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2574.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines represent the adjacency matrix of a network. An <EM>adjacency matrix</EM> of a network <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices, denoted by <SPAN CLASS="MATH"><I>A</I>(<I>G</I>) = [<I>w</I><SUB>u, v</SUB>]</SPAN> <tex2html_verbatim_mark>, is an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix such that <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB> &gt; 0</SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB> = 0</SPAN> <tex2html_verbatim_mark> otherwise, where <SPAN CLASS="MATH"><I>w</I><SUB>u, v</SUB></SPAN> <tex2html_verbatim_mark> in a nonnegative integer. Note that any two elements in each line of an adjacency matrix are separated by a space. The last line of each test case represents the sequence of vertices in a given shortest path in which there is also a space between two vertices. Note that the first and the last vertices denote the source and the destination vertices, respectively. For example, the adjacency matrix of the graph in Figure 4 is shown in test case 3 of the sample input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the maximum distance increment caused by the detour-critical edge of the given shortest path in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3
0 10 20
10 0 10
20 10 0
3 2 1
4
0 10 10 30
10 0 30 0
10 30 0 10
30 0 10 0
4 3 1 2
6
0 100 0 0 100 200
100 0 100 0 100 400
0 100 0 100 500 0
0 0 100 0 500 300
100 100 500 500 0 0
200 400 0 300 0 0
4 3 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
20
30
400
</PRE><P>
______________________________________________________
2575||||||false||||||
<P>Let <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> be an array of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $1 < N \le 50000$
 --><SPAN CLASS="MATH">1 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is even, integers. We use <SPAN CLASS="MATH"><I>A</I>[<I>i</I>]</SPAN> <tex2html_verbatim_mark> to denote the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th element of the array. Hence the array contains elements <SPAN CLASS="MATH"><I>A</I>[0], <I>A</I>[1],..., <I>A</I>[<I>N</I> - 1]</SPAN> <tex2html_verbatim_mark>. Each element of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is a nonnegative integer in the range of 0 through 9972. Given two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, let (<SPAN CLASS="MATH"><I>x</I> mod <I>y</I></SPAN> <tex2html_verbatim_mark>) be the integer that is the remainder of <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> dividing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. It happens that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I>[<I>i</I>] = (<I>a</I>1 <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>a</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>a</I><SUB>3</SUB>) mod 9973</DIV><P><tex2html_verbatim_mark></P>for some integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. We know <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN> <tex2html_verbatim_mark>.<P>For example, if <SPAN CLASS="MATH"><I>N</I> = 6</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, then we have the following:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=7 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>31</TD></TR></TBODY></TABLE></DIV><P><P><BR>There are three additional arrays <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. Each of the three arrays has <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark>, integers. We know <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>S</I>[<I>i</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>E</I>[<I>i</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>. It happens that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I>[<I>i</I>] = (<I>s</I><SUB>1</SUB> <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>s</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>s</I><SUB>3</SUB>) mod(<I>N</I>/2)</DIV><P><tex2html_verbatim_mark></P>and<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>E</I>[<I>i</I>] = <I>S</I>[<I>i</I>] + [(<I>e</I><SUB>1</SUB> <TT>*</TT> <I>i</I><SUP>2</SUP> + <I>e</I><SUB>2</SUB> <TT>*</TT> <I>i</I> + <I>e</I><SUB>3</SUB>) mod(<I>N</I>/2)].</DIV><P><tex2html_verbatim_mark></P><P>Assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>s</I><SUB>i</SUB>, <I>e</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$">50000</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN> <tex2html_verbatim_mark>. We also know<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I>[<I>i</I>] = min{<I>A</I>[<I>S</I>[<I>i</I>]], <I>A</I>[<I>S</I>[<I>i</I>] + 1],..., <I>A</I>[<I>E</I>[<I>i</I>]]}</DIV><P><tex2html_verbatim_mark></P>for each <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2575img1.png ALT="$ \le$"><I>M</I> - 1</SPAN> <tex2html_verbatim_mark>. Your task is to find the smallest <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> such that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I>[<I>j</I>] = max{<I>R</I>[0], <I>R</I>[1],..., <I>R</I>[<I>M</I> - 1]}.</DIV><P><tex2html_verbatim_mark></P><P>For example, if <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is given as the above example, <SPAN CLASS="MATH"><I>M</I> = 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>e</I><SUB>3</SUB> = 1</SPAN> <tex2html_verbatim_mark>, then we have the following:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>i</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>S[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R[i]</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR></TBODY></TABLE></DIV><P><P><BR>Hence max <SPAN CLASS="MATH">{<I>R</I>[0], <I>R</I>[1], <I>R</I>[2]} = 3</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I>[0]</SPAN> <tex2html_verbatim_mark> has the smallest index with its value equaling 3. Thus we output 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of test cases <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>. Then the <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> test cases are listed one by one. Each test case is listed as follows in one line with a space between two integers: <SPAN CLASS="MATH"><I>N</I>, <I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>, <I>M</I>, <I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>, <I>s</I><SUB>3</SUB>, <I>e</I><SUB>1</SUB>, <I>e</I><SUB>2</SUB>, <I>e</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the smallest value <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>R</I>[<I>j</I>] = max{<I>R</I>[0], <I>R</I>[1], <I>R</I>[2],..., <I>R</I>[<I>M</I> - 1]}</SPAN> <tex2html_verbatim_mark> in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
6 1 1 1 3 1 1 1 1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
</PRE><P>
______________________________________________________
2576||||||false||||||
<P>Referring Figure 5, a tag tree is a hierarchical representation of a 2-dimensional array ( <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is an integer and <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>) of nonnegative values, where successively reduced resolutions form a tree. Note that, for an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> array, the indices of this array are from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. The value <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> at every created node of the tree is the minimum value of its four children <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I>, 2<I>j</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I>, 2<I>j</I> + 1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I> + 1, 2<I>j</I>)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>q</I><SUB>l+1</SUB>(2<I>i</I> + 1, 2<I>j</I> + 1)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>l</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$"><I>k</I></SPAN> <tex2html_verbatim_mark>, is the level index and <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are the indices of the 2-dimensional array. The 2-dimensional array at the lowest level is the input array.<P><DIV ALIGN="CENTER"><IMG WIDTH="851" HEIGHT="344" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="\epsfbox{p2576a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 5: A tag tree.</DIV><P>The tag tree will be coded into a sequence of bits using the rules described below. Once a tag tree is constructed, we associate each node with an <EM>upgrading</EM> value, <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>, which is initialized to zero. The upgrading value of a node is updated while the node is coded. Coding starts at the top node, i.e., the one with the level index 0, and a child cannot be coded until its parent is coded. While coding a node, a zero bit is output to indicate that its upgrading value <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is less than its <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and then <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is increased by one. A one bit is output to indicate that <SPAN CLASS="MATH"><I>q</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>l</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> are equal.<P>After a node is coded, the upgrading values of all its descendent nodes which have smaller upgrading values are changed to the upgrading value of the coded node. The coding process will be continued until all nodes in the tag tree are coded.<P>For example, in the following coding is started from the top node which has <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0) = 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) = 0</SPAN> <tex2html_verbatim_mark>. Since <!-- MATH
 $c_{0}(0, 0) < q_{0}(0, 0)$
 --><SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) &lt; <I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, we output a zero bit. Next, we increase <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> by 1 and find that <SPAN CLASS="MATH"><I>c</I><SUB>0</SUB>(0, 0) = <I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, so we output a one bit. Thus, the output bits result from coding top node are 01. Once <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> is coded, the upgrading values of all its descendent nodes with smaller upgrading values are changed to 1 as in Figure 6(a).<P><DIV ALIGN="CENTER"><IMG WIDTH="909" HEIGHT="455" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="\epsfbox{p2576b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 6: An example of coding a tag tree.</DIV><P>We mark the coded nodes in Figure 6(b)-(f) by an ``<SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark>". Next, we code <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>. We have <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>(0, 0) = <I>q</I><SUB>1</SUB>(0, 0) = 1</SPAN> <tex2html_verbatim_mark>. A one bit is output and <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> is coded. The associated upgrading values of its descendant nodes are updated again according to the updating rule (see Figure 6(b)). We continue coding <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>. A one bit is output for the node because <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB>(0, 0) = <I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> (see Figure 6(c)). So, till now, we code <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> with 0111.<P>Next, that we code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> which is 3. It is not necessary to code its ancestors again. Its ancestors <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>0</SUB>(0, 0)</SPAN> <tex2html_verbatim_mark> have already been coded. Thus, we can code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> directly. Its output code will be 001 since <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> is increased twice before equal to <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> (see Figure 6(d)).<P>Continue this example. Assume that we are going to code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(2, 0)</SPAN> <tex2html_verbatim_mark> which is 2. We have to code its parent <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB>(1, 0)</SPAN> <tex2html_verbatim_mark> first since it is not coded yet. Its output code is 01 and the related upgrading values are updated as in Figure 6(e). Back to code <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB>(2, 0)</SPAN> <tex2html_verbatim_mark>, only a one bit is output (see Figure 6(f)).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2576img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, indicating the number of test cases. In each test case, the first line contains an integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> indicating that the array size is <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark>. Then, the following <SPAN CLASS="MATH">2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> lines represent a <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> array. The rows of this <SPAN CLASS="MATH">2<SUP>k</SUP> <TT>x</TT> 2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> array are listed line by line. Each row contains <SPAN CLASS="MATH">2<SUP>k</SUP></SPAN> <tex2html_verbatim_mark> nonnegative integers separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The number of bits used to code the input array in one line for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
1 3 2 3
2 2 2 4
2 2 2 2
2 3 4 4
2
2 1 1 4
1 3 2 3
1 1 3 2
2 1 3 5
3
4 1 3 2 5 2 1 2
1 1 3 4 1 1 3 2
3 3 2 1 2 4 1 2
4 2 4 1 2 3 4 1
1 2 3 2 4 4 1 2
3 2 3 2 4 4 2 4
4 5 1 1 1 1 3 3
3 1 2 3 2 3 4 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
37
38
155
</PRE><P>
______________________________________________________
2577||||||false||||||
<P>Isomorphism is the problem of testing whether two graphs are really the same. Suppose we are given a collection of graphs and must perform some operation on each of them. If we can identify which of the graphs are duplicate, they can be discarded so as to avoid redundant work.<P>First we have to explain what is meant when we say two graphs are the same. Two labeled graphs <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB> = (<I>V</I><SUB>1</SUB>, <I>E</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB> = (<I>V</I><SUB>2</SUB>, <I>E</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> are identical when we can find a mapping <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> of the vertices of <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to the vertices of <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> if and only if <SPAN CLASS="MATH">(<I>f</I> (<I>x</I>), <I>f</I> (<I>y</I>))</SPAN> <tex2html_verbatim_mark> is an edge of <SPAN CLASS="MATH"><I>G</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Such a mapping is called an <EM>isomorphism</EM>.<P>No efficient algorithm is known for the general graph isomorphism problem, but the problem is easier to determine whether two trees are isomorphic to each other. In Figure 7, it is not hard to verify that tree <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is isomorphic to tree <SPAN CLASS="MATH"><I>T</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, but <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is not isomorphic to <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="874" HEIGHT="174" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="\epsfbox{p2577.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 7: Three nonrooted root trees.</DIV><P>You are given a collection of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> trees <SPAN CLASS="MATH"><I>C</I> = {<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark> such that each <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> has exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes. The objective of the problem is to partition these trees into isomorphic (equivalent) classes such that any two trees within the same isomorphic class are isomorphic to each other.<P>A naive method of enumerating all possible mapping functions would require generating all possible <SPAN CLASS="MATH"><I>n</I>!</SPAN> <tex2html_verbatim_mark> different mappings. What resulted is a very time-consuming <SPAN CLASS="MATH"><I>O</I>(<I>n</I>!)</SPAN> <tex2html_verbatim_mark> time algorithm just to test two trees. You need to figure out a somehow clever way for solving the problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>A collection of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-node) trees <SPAN CLASS="MATH"><I>C</I> = {<I>T</I><SUB>1</SUB>, <I>T</I><SUB>2</SUB>,..., <I>T</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark>. The inputs are just a list of integers. The first 2 integers (in a single line) represent the number of trees, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, and the size of each tree, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> can be as large as 150 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> can be as large as 100. After the two integers, there will be <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines representing the edge sets for each tree <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>; each line contains exactly <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> pairs of integers, representing the <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> (directed) edges of each tree. Thus, there are totally <SPAN CLASS="MATH">2<I>n</I> - 2</SPAN> <tex2html_verbatim_mark> integers for each tree, and the total input will be <SPAN CLASS="MATH">2<I>k</I>(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark> integers except the first two parameters. Each tree is indexed by their appearance ordering; that is, the first line represents the tree <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, the second line is <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB>,...</SPAN> <tex2html_verbatim_mark>, etc, and the last (<SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>th) line is just <SPAN CLASS="MATH"><I>T</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For the given collection of trees, partition these trees into isomorphic (equivalent) classes such that any two trees within the same isomorphic class are isomorphic to each other. For each isomorphic class, output the indices of these isomorphic trees in a line. Suppose that there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> isomorphic classes, you need to print out <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. For example, a line<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>t</I><SUB>1</SUB> = <I>t</I><SUB>2</SUB> = <SUP>... </SUP>= <I>t</I><SUB>l</SUB>;</DIV><P><tex2html_verbatim_mark></P>represents an isomorphic class of size <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> such that two trees <SPAN CLASS="MATH"><I>T</I><SUB>t<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I><SUB>t<SUB>j</SUB></SUB></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="$ \le$"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2577.jpg ALT="$ \le$"><I>l</I></SPAN> <tex2html_verbatim_mark>, are isomorphic to each other. For each line, output indices of those isomorphic trees in <EM>increasing order</EM>; that is, <!-- MATH
 $t_{1} < t_{2} < \cdots < t_{l}$
 --><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB> &lt; <I>t</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>t</I><SUB>l</SUB></SPAN> <tex2html_verbatim_mark> . Further, print out these <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> isomorphic classes by their increasing lexical ordering; that is, by the ordering of their first indices. For example, suppose that there are 4 isomorphic classes <SPAN CLASS="MATH">{4, 2, 7}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{5, 1, 3}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{8, 9}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{6}</SPAN> <tex2html_verbatim_mark>.<P><P><BR>The output shall be<P><PRE>
1 = 3 = 5 ;
2 = 4 = 7 ;
6 ;
8 = 9 ;
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 7
7 2 7 1 7 6 2 3 1 4 6 5
7 2 7 1 2 3 1 4 1 5 5 6
4 3 3 2 4 1 1 7 5 6 4 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 = 3 ;
2 ;
</PRE><P>
______________________________________________________
2578||||||false||||||
<P>Trees are used to represent the evolutionary relationship of species. An <EM>evolutionary tree</EM> is a edge-weighted tree with each leaf representing one species. The distance between two leaves on the tree represents the dissimilarity of these two species. An important issue in computational biology is to construct the evolutionary tree from the observed dissimilarities.<P>Let <SPAN CLASS="MATH"><I>N</I> = {1..<I>n</I>}</SPAN> <tex2html_verbatim_mark>. An <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> matrix <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is a metric over <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> if it is symmetric, nonnegative, and <SPAN CLASS="MATH"><I>M</I>[<I>i</I>, <I>j</I>] + <I>M</I>[<I>j</I>, <I>k</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \le$"><I>M</I>[<I>i</I>, <I>k</I>]</SPAN> <tex2html_verbatim_mark> for any <SPAN CLASS="MATH"><I>i</I>, <I>j</I>, <I>k</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \in$"> <I>N</I></SPAN> <tex2html_verbatim_mark> (i.e., triangle inequality). A metric is a <EM>tree metric</EM> if it can be realized by a tree, i.e., there exists an edge-weighted tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> such that<P><OL><LI>the leaf set is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>; </LI><LI>the weight of each edge is nonnegative; </LI><LI>and <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>i</I>, <I>j</I>) = <I>M</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark> for any <SPAN CLASS="MATH"><I>i</I>, <I>j</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$ \in$"> <I>N</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is the shortest path length between <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> on the tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> . </LI></OL><P>For example, the following matrix is a tree metric. The corresponding tree is given in Figure 8.<P><P><BR><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>M</I> = <IMG WIDTH="20" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$\displaystyle \left(\vphantom{ \begin{tabular}{ccccc}
0 &amp; 5 &amp; 9 &amp; 12 &amp; 8 \\  ...
... \\
12 &amp; 11 &amp; 5 &amp; 0 &amp; 4 \\
8 &amp; 7 &amp; 1 &amp; 4 &amp; 0 \\
\end{tabular} }\right.$"><TABLE COLS=5><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 <tex2html_col_mark> 5 <tex2html_col_mark> 9 <tex2html_col_mark> 12 <tex2html_col_mark> 8 <tex2html_row_mark> 5 <tex2html_col_mark> 0 <tex2html_col_mark> 8 <tex2html_col_mark> 11 <tex2html_col_mark> 7 <tex2html_row_mark> 9 <tex2html_col_mark> 8 <tex2html_col_mark> 0 <tex2html_col_mark> 5 <tex2html_col_mark> 1 <tex2html_row_mark> 12 <tex2html_col_mark> 11 <tex2html_col_mark> 5 <tex2html_col_mark> 0 <tex2html_col_mark> 4 <tex2html_row_mark> 8 <tex2html_col_mark> 7 <tex2html_col_mark> 1 <tex2html_col_mark> 4 <tex2html_col_mark> 0 <tex2html_row_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TABLE><IMG WIDTH="20" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="$\displaystyle \left.\vphantom{ \begin{tabular}{ccccc}
0 &amp; 5 &amp; 9 &amp; 12 &amp; 8 \\  ...
... \\
12 &amp; 11 &amp; 5 &amp; 0 &amp; 4 \\
8 &amp; 7 &amp; 1 &amp; 4 &amp; 0 \\
\end{tabular} }\right)$"></DIV><P><tex2html_verbatim_mark></P><P><P><BR>The <EM>size</EM> of a tree is defined to be the total weight of the tree edges. For a tree metric, it has been shown that the tree size is unique, i.e., it is impossible to find two trees of different sizes realizing the same tree metric. Your task is to design a program to compute the tree sizes of the given tree metrics. The following simple example may be helpful. For the case of only two species, the tree has only one edge and the tree<P><DIV ALIGN="CENTER"><IMG WIDTH="371" HEIGHT="203" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2578img1.png ALT="\epsfbox{p2578.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 8: An evolution tree.</DIV><P>size is just the distance between the two species. Let us consider the case of three species <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Let <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> be the corresponding tree. Since <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> has three leaves, there is an internal node <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. By definition, the path length <SPAN CLASS="MATH"><I>d</I><SUB>T</SUB>(<I>a</I>, <I>b</I>) = <I>M</I>[<I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark>. Since <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is a vertex on the path between <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, all we need to do is to determine the weight (length) of edge <SPAN CLASS="MATH">(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. Let <SPAN CLASS="MATH"><I>w</I>(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> denote the weight of edge <SPAN CLASS="MATH">(<I>x</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>. We have<P><BR><DIV ALIGN="CENTER" CLASS="mathdisplay"><TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%"><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>w</I>(<I>x</I>, <I>c</I>) + <I>w</I>(<I>x</I>, <I>a</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>a</I>, <I>c</I>],</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT"><I>w</I>(<I>x</I>, <I>c</I>) + <I>w</I>(<I>x</I>, <I>b</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>b</I>, <I>c</I>],</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR><TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT">and <I>w</I>(<I>x</I>, <I>a</I>) + <I>w</I>(<I>x</I>, <I>b</I>)</TD><TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD><TD ALIGN="LEFT" NOWRAP WIDTH="50%"><I>M</I>[<I>a</I>, <I>b</I>].</TD><TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">&nbsp;</TD></TR></TABLE></DIV><BR CLEAR="ALL"><P>Therefore, <SPAN CLASS="MATH"><I>w</I>(<I>x</I>, <I>c</I>) = (<I>M</I>[<I>a</I>, <I>c</I>] + <I>M</I>[<I>b</I>, <I>c</I>] - <I>M</I>[<I>a</I>, <I>b</I>])/2</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several test cases. The first line of each test case is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $2 < n < 30$
 --><SPAN CLASS="MATH">2 &lt; <I>n</I> &lt; 30</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines represent the upper triangle of the tree metric, but the diagonal is not included. Each line is for one row, and elements are separated by spaces. All the elements are nonnegative integers less than 100. The last case is followed by a ``<TT>0</TT>" to indicate the end of input. You may assume that the test data are all tree metrics, and it is not necessary to check them. Furthermore, the size of a tree is the sum of all integers in the test case except the integers in the first line of the test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the tree size in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5
5 9 12 8
8 11 7
5 1
4
4
15 36 60
31 55
36
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
15
71
</PRE><P>
______________________________________________________
2579||||||false||||||
<P>
In a mobile Packet Radio (PR) network, intermediate PR's are used to repeat a message so that it can be transferred from a source to its destination. Each PR has a limited broadcasting range whose boundary is a circle. Each PR moves at a constant speed in the plane. The speed of a moving object in the plane is given by a vector <!-- MATH
 $(v_{1}, v_{2})$
 -->
<SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN>
<tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> is the speed in the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>-coordinate direction, and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> is the speed in the <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>-coordinate direction. One unit of time is a second, one unit of length is a meter. For example, if an object is at position <SPAN CLASS="MATH">(1, 2)</SPAN>
<tex2html_verbatim_mark> at time 0, and the speed of the object is <SPAN CLASS="MATH">(- 2, 3)</SPAN>
<tex2html_verbatim_mark>, then after 1 second the object is at position <!-- MATH
 $(1+(-2) \times 1, 2+3 \times 1) = (-1, 5)$
 -->
<SPAN CLASS="MATH">(1 + (- 2) <TT>x</TT> 1, 2 + 3 <TT>x</TT> 1) = (- 1, 5)</SPAN>
<tex2html_verbatim_mark>, and after 2 seconds the object is at position <!-- MATH
 $(1 + (-2) \times 2, 2 + 3 \times 2) = (-3, 8)$
 -->
<SPAN CLASS="MATH">(1 + (- 2) <TT>x</TT> 2, 2 + 3 <TT>x</TT> 2) = (- 3, 8)</SPAN>
<tex2html_verbatim_mark>.

<P>
Once a PR broadcasts a message, the message reaches all the PR's within its broadcasting range (including the broadcasting PR itself) immediately (i.e., with 0 time delay). Once a PR receives a message, it can either ignore the message, or broadcast the message, according to instructions. If the PR broadcasts the message, it will do it exactly 1 second after receiving it.

<P>
Given a set of PR's, and a request to transfer a message from a source PR to a destination PR, you are asked to design a program to find a quickest way to transfer the message from the source to its destination. Suppose the request is made at time <SPAN CLASS="MATH"><I>t</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark>. Then the source PR can broadcast the message at time <SPAN CLASS="MATH"><I>t</I><SUB>0</SUB> + 1</SPAN>
<tex2html_verbatim_mark>. Each broadcasting is counted as 1 step. In particular, if a PR broadcasts the message <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> times, then it is counted as <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> steps. Your program should calculate how many steps are needed (in an quickest way) to transfer the message from the source PR to its destination PR.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of the input file contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, which represents the number of test cases.

<P>
Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \le m \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2579img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, which represents the number of PR's in this test case. The next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines are information of these <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> PR's. The PR's are numbered <!-- MATH
 $1, 2, \ldots , m$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>m</I></SPAN>
<tex2html_verbatim_mark>, and the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th line are information of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>th PR. The information for each PR is a sequence of 5 real numbers: <!-- MATH
 $a, b, c, d, e$
 -->
<SPAN CLASS="MATH"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I></SPAN>
<tex2html_verbatim_mark>, and each of the 5 numbers is in the range from -100000 to 100000 and has at most 8 digits after the decimal point. The meaning of the reals are as follows: At time 0, the PR lies at point <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN>
<tex2html_verbatim_mark>. The speed of the PR is <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN>
<tex2html_verbatim_mark>. The broadcasting range of the PR is a disk of radius <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark>. After the <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines, which contain information of the PR's, the next line contains three integers <SPAN CLASS="MATH"><I>u</I>, <I>v</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>. It means that the request is to transfer a message from the <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark>th PR to the <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>th PR, and the request is made at time <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>. There is a space between any two numbers in the same line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
If the message can be transferred to its destination in <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> steps, then the output is the integer <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. If the message can never be transferred to its destination, then the output is the letter <TT>E</TT>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
2
0 0 1 1 5
1000 0 -1 1 10
1 2 0
3
0 0 1 1 15
1000 500 -1 0 20
-100 -100 0 1 25
1 3 3
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
498
E
</PRE> 

<P>

______________________________________________________
2580||||||false||||||
<P>A <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN> <tex2html_verbatim_mark> threshold scheme is a method which allows a secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> to be divided into <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark> in such a way that any <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, or more shadows can recover the secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, but <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark> or fewer shadows can not. Threshold schemes have the advantage of distributing an important privilege in many applications, such as access control, launching a missile, opening a bank vault, or even opening a deposit box. A well-known threshold scheme, Shamir's <SPAN CLASS="MATH">(<I>m</I>, <I>n</I>)</SPAN> <tex2html_verbatim_mark> threshold scheme, works as follows:<P><P><BR>Without loss of generality, we assume that <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is a positive integer which is smaller than <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a prime number. To divide <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, we pick a random <SPAN CLASS="MATH"><I>m</I> - 1</SPAN> <tex2html_verbatim_mark> degree polynomial <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = <I>a</I><SUB>m-1</SUB><I>x</I><SUP>m-1</SUP> + <I>a</I><SUB>m-2</SUB><I>x</I><SUP>m-2</SUP> +...+ <I>a</I><SUB>1</SUB><I>x</I> + <I>K</I>(<I>mod</I>, <I>P</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>m-2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>a</I><SUB>m-1</SUB></SPAN> <tex2html_verbatim_mark> are random integers which are larger than or equal to 0, and less than <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH"><I>a</I><SUB>m-1</SUB> <IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \neq$"> 0</SPAN> <tex2html_verbatim_mark>. These <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> shadows are computed by <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB> = <I>f</I> (1)(<I>mod</I>, <I>P</I>),..., <I>S</I><SUB>i</SUB> = <I>f</I> (<I>i</I>)(<I>mod</I>, <I>P</I>),..., <I>S</I><SUB>n</SUB> = <I>f</I> (<I>n</I>)(<I>mod</I>, <I>P</I>)</SPAN> <tex2html_verbatim_mark>. It is obvious that any <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> shadows can uniquely determine the <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> and hence obtain the secret information <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Consider, for example, a rich man with nine sons kept his property in a strong room from stealing. The strong room was controlled by a digital master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 < K < 65521$
 --><SPAN CLASS="MATH">0 &lt; <I>K</I> &lt; 65521</SPAN> <tex2html_verbatim_mark>. When he was alive, he used Shamir's <SPAN CLASS="MATH">(5, 9)</SPAN> <tex2html_verbatim_mark> threshold scheme with <SPAN CLASS="MATH"><I>P</I> = 65521</SPAN> <tex2html_verbatim_mark> to share the master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> with his nine sons. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th son was given the shadow <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB> = <I>f</I> (<I>i</I>)(<I>mod</I>, 65521)</SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$">9</SPAN> <tex2html_verbatim_mark>.<P><P><BR>After the rich man died, all of his sons met and decided whether they should open their father's strong room or not. They inputted their shadows to a computer in which a program is responsible for recovering the master key. If one agrees to open, he inputs his correct shadow; otherwise, he inputs a forged shadow (a random number) instead of the correct shadow. Assume that the number of forged shadows is less than or equal to 2. Now, you are asked to design a program for computing the master key and showing who agrees to open.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2580img1.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>, which represents the number of test cases. Then, the cases are listed line by line. In each line, there are nine integers, separated by a space, which are the shadows inputted to the program in the order of <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>&nbsp;<I>S</I><SUB>2</SUB>&nbsp;<I>S</I><SUB>3</SUB>&nbsp;<I>S</I><SUB>4</SUB>&nbsp;<I>S</I><SUB>5</SUB>&nbsp;<I>S</I><SUB>6</SUB>&nbsp;<I>S</I><SUB>7</SUB>&nbsp;<I>S</I><SUB>8</SUB>&nbsp;<I>S</I><SUB>9</SUB></SPAN> <tex2html_verbatim_mark>, respectively, of test case <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I> = 1, 2,..., <I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Print the master key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and who agrees to open in increasing order, separated by a space, in line <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>t</I> = 1,..., <I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
15581 8818 43370 1705 557 63321 54532 7470 58639
49653 16589 16052 43258 50121 10785 52661 63302 18008
38759 25341 45629 54400 5123 42161 29892 11356 11692
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
22331 1 2 3 4 5 6 7 8 9
11220 2 4 5 6 7 8 9
55555 1 3 4 5 6 7 8 9

______________________________________________________
2581||||||false||||||
Classmates stand in a circle facing inward, each with the direction <EM>left</EM>
or <EM>right</EM> in mind. One of the
students has a ball and begins by tossing it to another student. (It
doesn't really matter which one.)
When one catches the ball and is thinking <EM>left</EM>, she throws it back
across the circle one place to the
left (from her perspective) of the person who threw her the ball. Then
she switches from thinking <EM>left</EM>
to thinking <EM>right</EM>. Similarly, if she is thinking <EM>right</EM>, she throws the
ball to the right of the person who
threw it to her and then switches from thinking <EM>right</EM> to thinking <EM>left</EM>.

<P>
There are two exceptions to this rule: If one catches the ball from the
classmate to her immediate left
and is also thinking <EM>left</EM>, she passes the ball to the classmate to her
immediate right, and then switches to
thinking <EM>right</EM>. Similarly, if she gets the ball from the classmate to her
immediate right and is thinking
<EM>right</EM>, she passes the ball to the classmate to her immediate left, and
then switches to thinking <EM>left</EM>.
(Note that these rules are given to avoid the n of tossing the ball to
oneself.)

<P>
No matter what the initial pattern of left and right thinking is and who
first gets tossed the ball,
everyone will get tossed the ball eventually! In this problem, you will
figure out how long it takes.

<P>
You'll be given the initial directions of n classmates (numbered clockwise),
and the classmate to whom
classmate 1 initially tosses the ball. (Classmate 1 will always have the
ball initially.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple problem instances. Each problem instance will be of the form

<P>

<P>
<BR>

<!-- MATH
 $n\ k\ t_1\ t_2\ t_3 \dots t_n$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>k</I>&nbsp;<I>t</I><SUB>1</SUB>&nbsp;<I>t</I><SUB>2</SUB>&nbsp;<I>t</I><SUB>3</SUB>...<I>t</I><SUB>n</SUB></SPAN>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $2 \le  n \le  30$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2581img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2581img1.gif
 ALT="$ \le$">30</SPAN>) is the number of classmates, numbered 1 through <SPAN CLASS="MATH"><I>n</I></SPAN>
clockwise around the circle,
<SPAN CLASS="MATH"><I>k</I></SPAN> (<SPAN CLASS="MATH">&gt; 1</SPAN>) is the classmate to whom classmate 1 initially tosses the ball, and
<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> (<!-- MATH
 $i = 1, 2, \dots , n$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN>) are each
either `<TT>L</TT>' or `<TT>R</TT>', indicating the initial direction thought by classmate
<SPAN CLASS="MATH"><I>i</I></SPAN>. (<SPAN CLASS="MATH"><I>n</I> = 0</SPAN> indicates end of input.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, you should generate one line of output of the form:

<P>

<P>
<BR>

<TT>Classmate <SPAN CLASS="MATH"><I>m</I></SPAN> got the ball last after <SPAN CLASS="MATH"><I>t</I></SPAN> tosses.</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> are for you to determine. You may assume that <SPAN CLASS="MATH"><I>t</I></SPAN> will be no
larger than 100,000.

<P>

<P>
<BR>

<B>Note</B> that classmate number 1 initially has the ball and tosses it to classmate <SPAN CLASS="MATH"><I>k</I></SPAN>.
Thus, number 1 has
not yet been tossed the ball and so does not switch the direction he is thinking.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 2 L L L L
4 3 R L L R
10 4 R R L R L L R R L R
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Classmate 3 got the ball last after 4 tosses.
Classmate 2 got the ball last after 4 tosses.
Classmate 9 got the ball last after 69 tosses.
</PRE>

<P>

______________________________________________________
2582||||||false||||||
After ruling a large chunk of the Milky Way for millennia, the Cosmic OBsolescent
OLigarchy is finally
breaking up into a collection of independent monarchies. COBOL is a very
organized empire and takes
the shape of a gigantic cube with dimensions <SPAN CLASS="MATH"><I>n</I></SPAN> by <SPAN CLASS="MATH"><I>m</I></SPAN> by <SPAN CLASS="MATH"><I>k</I></SPAN> parsecs.
(COBOL is also very secretive, so
only a few know the exact values of <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN>.) To facilitate the control
of the empire it is partitioned
into <SPAN CLASS="MATH"><I>nmk</I></SPAN> smaller dominions, each 1 cubic parsec in size. These dominions are
numbered as follows:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2582.eps}$
 -->
<IMG
 WIDTH="569" HEIGHT="570" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="\epsfbox{p2582.eps}">
</DIV>

<P>
Each independent monarchy is a connected collection of one or more dominions
(a dominion is connected
to another if they share a face) and over a period of several imperial months,
one monarchy per month
will secede from the empire. Each secession begins at the first day of the month.
One concern of
COBOL is that during the breakup, various parts of the remaining empire may become
disconnected
from one another, which could hamper the administration of what's left of the empire.
Your job is to
determine the number of months of the breakup during which the empire is disconnected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. The first line will contain a positive
integer indicating
the number of problem instances to follow. The first line of each problem instance
will contain four
integers: <!-- MATH
 $n\ m\ k\ l$
 -->
<SPAN CLASS="MATH"><I>n</I>&nbsp;<I>m</I>&nbsp;<I>k</I>&nbsp;<I>l</I></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> are as described above,
with <!-- MATH
 $1 \le  n, m, k \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$"><I>n</I>, <I>m</I>, <I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$">30</SPAN>, and <SPAN CLASS="MATH"><I>l</I></SPAN> is the number
of independent monarchies which the empire is being divided into. Following this
will be <SPAN CLASS="MATH"><I>l</I></SPAN> lines defining
the monarchies. Each will have the form <!-- MATH
 $p\ d_1\ d_2\ d_3 \dots d_p$
 -->
<SPAN CLASS="MATH"><I>p</I>&nbsp;<I>d</I><SUB>1</SUB>&nbsp;<I>d</I><SUB>2</SUB>&nbsp;<I>d</I><SUB>3</SUB>...<I>d</I><SUB>p</SUB></SPAN>, where <SPAN CLASS="MATH"><I>p</I></SPAN> is
the number of dominions making
up the monarchy (<!-- MATH
 $1 \le  p \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2582.gif
 ALT="$ \le$">20</SPAN>), and <!-- MATH
 $d_1,\dots , d_p$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>,..., <I>d</I><SUB>p</SUB></SPAN> are the dominions.
The monarchies are listed in the order
in which they will secede from the empire.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output for each problem instance should consist of a single integer on a line,
indicating the number of
months which the empire was disconnected.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 2 3 9
2 4 5
3 6 8 10
1 7
1 2
1 11
1 9
1 1
1 0
1 3
2 2 3 3
4 0 1 2 3
4 4 5 6 7
4 8 9 10 11
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
0
</PRE>

<P>

______________________________________________________
2583||||||false||||||
Given a string of digits, insert commas to create a sequence of strictly increasing
numbers so as to
minimize the magnitude of the last number. For this problem, leading zeros are
allowed in front of a number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple test cases. Each case will consist of one line,
containing a string of digits
of maximum length 80. A line consisting of a single `<TT>0</TT>' terminates input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance, output the comma separated strictly increasing sequence,
with no spaces between
commas or numbers. If there are several such sequences, pick the one which has
the largest first value;
if there's a tie, the largest second number, etc.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3456
3546
3526
0001
100000101
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3,4,5,6
35,46
3,5,26
0001
100,000101
</PRE>

<P>

______________________________________________________
2584||||||false||||||
We are all familiar with pre-order, in-order and post-order traversals of binary
trees. A common problem
in data structure classes is to find the pre-order traversal of a binary tree
when given the in-order and
post-order traversals. Alternatively, you can find the post-order traversal when
given the in-order and
pre-order. However, in general you cannot determine the in-order traversal of
a tree when given its
pre-order and post-order traversals. Consider the four binary trees below:

<P>
<PRE>
                    a         a       a         a
                   /         /         \         \
                  b         b           b         b
                 /           \         /           \
                c             c       c             c
</PRE>

<P>
All of these trees have the same pre-order and post-order traversals. This phenomenon
is not restricted
to binary trees, but holds for general m-ary trees as well.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. Each instance will consist of a
line of the form

<P>

<P>
<BR>

<!-- MATH
 $m\ s_1\ s_2$
 -->
<SPAN CLASS="MATH"><I>m</I>&nbsp;<I>s</I><SUB>1</SUB>&nbsp;<I>s</I><SUB>2</SUB></SPAN>

<P>

<P>
<BR>
indicating that the trees are <SPAN CLASS="MATH"><I>m</I></SPAN>-ary trees, <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is the pre-order traversal and
<SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> is the post-order traversal.
All traversal strings will consist of lowercase alphabetic characters. For all input
instances, <!-- MATH
 $1 \le  m \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2584img1.gif
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2584img1.gif
 ALT="$ \le$">20</SPAN>
and the length of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN> will be between 1 and 26 inclusive. If the length
of <SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN> is <SPAN CLASS="MATH"><I>k</I></SPAN> (which is the
same as the length of <SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>, of course), the first <SPAN CLASS="MATH"><I>k</I></SPAN> letters of the alphabet will
be used in the strings. An input line of `<TT>0</TT>' will terminate the input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, you should output one line containing the number of
possible trees which
would result in the pre-order and post-order traversals for the instance. All output
values will be within
the range of a 32-bit signed integer. For each problem instance, you are
guaranteed that there is at least one tree with the given pre-order and post-order traversals.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2 abc cba
2 abc bca
10 abc bca
13 abejkcfghid jkebfghicda
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4
1
45
207352860
</PRE>

<P>

______________________________________________________
2585||||||false||||||
In a knockout tournament there are <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> players. One loss and a player is out of the
tournament. Winners
then play each other with the new winners advancing until there is only one winner left.
If we number
the players <!-- MATH
 $1, 2, 3, \dots, 2^n$
 -->
<SPAN CLASS="MATH">1, 2, 3,..., 2<SUP>n</SUP></SPAN>, with the first round pairings <SPAN CLASS="MATH">2<I>k</I> - 1</SPAN> vs <SPAN CLASS="MATH">2<I>k</I></SPAN>,
for <!-- MATH
 $k = 1, 2, \dots, 2^{n-1}$
 -->
<SPAN CLASS="MATH"><I>k</I> = 1, 2,..., 2<SUP>n - 1</SUP></SPAN>, then we could
give the results of the tournament in a complete binary tree. The winners are
indicated in the interior
nodes of the tree. Below is an example of a tournament with <SPAN CLASS="MATH"><I>n</I> = 3</SPAN>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2585.eps}$
 -->
<IMG
 WIDTH="578" HEIGHT="278" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2585.gif
 ALT="\epsfbox{p2585.eps}">
</DIV>

<P>
After the tournament, some reporters were arguing about the relative ranking of the
players, as determined by the tournament results. It's assumed that if player A beats
player B who in turn beats player
C, that player A will also beat player C; that is, winning is transitive. Now there
is no doubt who the
best player is. The question is what is the highest ranking a player can reasonably
claim as a result of
the tournament and what is the worst ranking a player can have, as a result of the
tournament? For
example, in the above tournament player 2, having lost to the eventual winner, could
claim to be the
2nd best player in the field, but could well be the worst (ranked 8th). Player 5
could claim to be as high
as 3rd (having lost to someone who could be 2nd) but no worse than 7th (having beaten
one player in he 1st round).

<P>
You are to determine the highest and lowest possible rankings of a set of
players in the field, given the results of the tournament.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple input instances. The input for each instance consists of
three lines. The first
line will contain a positive integer <SPAN CLASS="MATH"><I>n</I> &lt; 8</SPAN>, indicating there are <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN> players in
the tournament, numbered
1 through <SPAN CLASS="MATH">2<SUP>n</SUP></SPAN>, paired in the manner indicated above. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> indicates end
of input. The next
line will contain the results of each round of the tournament (listed left-to-right)
starting with the 1st
round. For example, the tournament above would be given by

<P>

<P>
<BR>

<TT>1 3 5 8 1 8 1</TT>

<P>

<P>
<BR>
The final line of input for each instance will be a positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> followed
by integers <!-- MATH
 $k_1, \dots, k_m$
 -->
<SPAN CLASS="MATH"><I>k</I><SUB>1</SUB>,..., <I>k</I><SUB>m</SUB></SPAN>, where each <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> is a player in the field.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN>, issue one line of output of the form:

<P>

<P>
<BR>

<TT>Player <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> can be ranked as high as <SPAN CLASS="MATH"><I>h</I></SPAN> or as low as <SPAN CLASS="MATH"><I>l</I></SPAN>.</TT>

<P>

<P>
<BR>
where you supply the appropriate numbers. These lines should appear in the same
order as the <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> did
in the input. Output for problem instances should be separated with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1 3 5 8 1 8 1
2 2 5
4
2 3 6 7 9 11 14 15 3 6 9 15 6 9 6
4 1 15 7 6
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Player 2 can be ranked as high as 2 or as low as 8.
Player 5 can be ranked as high as 3 or as low as 7.

Player 1 can be ranked as high as 4 or as low as 16.
Player 15 can be ranked as high as 3 or as low as 13.
Player 7 can be ranked as high as 2 or as low as 15.
Player 6 can be ranked as high as 1 or as low as 1.
</PRE>

<P>

______________________________________________________
2586||||||false||||||
<P>
The designers of the new NentindoBoxStation game system want to provide interactive
input from many
different sources. Using a special sensor-lined ``electronic cocoon" users should be
able to do things such
as control simulated laser cannons by moving their eyebrows, accelerate/decelerate
by wiggling their
ears, steer in three-dimensional space by rotating their ankles ... the possibilities
are endless.

<P>
The connections between the sensors in the cocoon and the simulated actions in
the computer are to
be made using a special square plug with <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> pins (the value of <SPAN CLASS="MATH"><I>n</I></SPAN> has not yet
been determined). Each
pin can carry the output from one sensor, although for some applications not all
pins will be active.
The plug fits into a square socket containing <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> holes that is attached to the
various game inputs;
again, for some games, not all input holes will be used. The socket can be
flipped over and rotated to
achieve different matchings between sensor pins and game inputs. Pins and socket
holes are numbered
consecutively in row major order (as shown below for the value <SPAN CLASS="MATH"><I>n</I> = 4</SPAN>).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2586.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2586.gif
 ALT="\epsfbox{p2586.eps}">
</DIV>

<P>
Clearly pin 1 can be connected only to holes 1', 4', 13', or 16' (depending on
how the plug is rotated
with respect to the socket). Pin 2 can be connected only to holes
2', 3', 5', 8', 9', 12', 14', or 15' (if we
consider all rotations and connections in both the back and front of the plug).

<P>
Most games require extra wiring to achieve connections because there is no way
to match pins directly
to their corresponding sockets (for instance, connecting pin 1 to hole 11' in the
figure). This wiring
will be achieved with a special game-specific ``wiring block" that will be placed
between the plug and
the socket. The lengths of these wires will depend on the orientation of the
socket with respect to the
plug. Given a list of connections that must be made, you are going to help the
designers determine the
<!-- MATH
 $minimum average wire length$
 -->
<SPAN CLASS="MATH"><I>minimumaveragewirelength</I></SPAN> that is needed for the connections in the wiring block.
Wires always run
parallel to the grid lines, so the amount of wire between a pin in the plug and a
hole in the socket is 1
plus the length of a shortest grid path between the nodes (the extra ``1" is due
to the thickness of the
wiring block itself). Thus, one unit of wire is the minimum required
(when a pin is positioned directly
over the hole it is supposed to connect to).

<P>
For instance, if we are given the set (1,3'), (5,7'), (2,6') for the plug and socket
above, the average
distance for this set of pairs is 2.6667 if we put the plug into the front of the
socket without rotating
the socket, but is only 2.3333 if we rotate the socket 180 degrees and then
flip it horizontally, placing the plug in the back of the socket.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a set of scenarios. Each scenario consists of a positive
integer <SPAN CLASS="MATH"><I>n</I></SPAN>, the side length of
the plug and socket (less than or equal to 100) on a line by itself, followed by a
positive integer <SPAN CLASS="MATH"><I>m</I></SPAN> (less
than or equal to <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN>) on a line by itself, followed by <SPAN CLASS="MATH"><I>m</I></SPAN> lines, each containing
a pair of positive integers
in the range <!-- MATH
 $1, \dots, n^2$
 -->
<SPAN CLASS="MATH">1,..., <I>n</I><SUP>2</SUP></SPAN>. You may assume that no two pairs will have either a
common first element or
a common second element. The first integer represents a pin position in the plug,
the second is a hole
position in the socket. The final scenario is followed by `<TT>0</TT>' on a line by itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario, output the scenario number (starting with 1), followed by the
smallest average distance achievable between the <SPAN CLASS="MATH"><I>m</I></SPAN> pin/socket pairs after rotations
and reflections are considered (assuming
an appropriate routing box is used), in a line of the form:

<P>

<P>
<BR>

<TT>Scenario <SPAN CLASS="MATH"><I>n</I></SPAN>: smallest average = <SPAN CLASS="MATH"><I>avg</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>avg</I></SPAN> is the average is rounded, and displayed, to four decimal places.
Separate lines of output by a single blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
3
1 3
5 7
2 6
2
3
1 4
2 2
4 1
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Scenario 1: smallest average = 2.3333

Scenario 2: smallest average = 1.0000
</PRE>

<P>

______________________________________________________
2587||||||false||||||
In the game show ``The Price is Right", a number of players (typically 4) compete
to get on stage by
guessing the price of an item. The winner is the person whose guess is the closest
one not exceeding the
actual price. Because of the popularity of the one-person game show
``Who Wants to be a Millionaire",
the American Contest Management (ACM) would like to introduce a one-person version
of the ``The Price is Right". In this version, each contestant is allowed
<SPAN CLASS="MATH"><I>G</I></SPAN> (<!-- MATH
 $1 \le  G \le  30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$"><I>G</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$">30</SPAN>) guesses and <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH
 $0 \le  L  \le 30$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/2587img1.gif
 ALT="$ \le$">30</SPAN>)
lifelines. The contestant makes a number of guesses for the actual price. After each
guess, the contestant
is told whether it is correct, too low, or too high. If the guess is correct, the
contestant wins. Otherwise,
he uses up a guess. Additionally, if his guess is too high, a lifeline is also lost.
The contestant loses
when all his guesses are used up or if his guess is too high and he has no lifelines
left. All prices are positive integers.

<P>
It turns out that for a particular pair of values for <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, it is possible
to obtain a guessing strategy
such that if the price is between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> (inclusive) for some <SPAN CLASS="MATH"><I>N</I></SPAN>, then the
player can guarantee a win.
The ACM does not want every contestant to win, so it must ensure that the actual
price exceeds <SPAN CLASS="MATH"><I>N</I></SPAN>.
At the same time, it does not want the game to be too difficult or there will
not be enough winners to
attract audience. Thus, it wishes to adjust the values of <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> depending on
the actual price. To
help them decide the correct values of <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, the ACM has asked you to solve
the following problem.
Given <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, what is the largest value of <SPAN CLASS="MATH"><I>N</I></SPAN> such that there is a strategy to
win as long as the price is between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN> (inclusive)?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a number of cases. Each case is specified by one line containing
two integers <SPAN CLASS="MATH"><I>G</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN>, separated by one space. The end of input is specified by a
line in which <SPAN CLASS="MATH"><I>G</I> = <I>L</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print a line of the form:

<P>

<P>
<BR>

<TT>Case <SPAN CLASS="MATH"><I>c</I></SPAN>: <SPAN CLASS="MATH"><I>N</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>c</I></SPAN> is the case number (starting from 1) and <SPAN CLASS="MATH"><I>N</I></SPAN> is the number computed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 0
3 1
10 5
7 7
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: 3
Case 2: 6
Case 3: 847
Case 4: 127
</PRE>

<P>

______________________________________________________
2588||||||false||||||
The International Betting Machine company has just issued a new type of slot machine.
The machine
display consists of a set of identical circles placed in a triangular shape. An
example with four rows is
shown below. When the player pulls the lever, the machine places a random letter
in the center of each
circle. The machine pays off whenever any set of identical letters form the vertices
of an equilateral
triangle. In the example below, the letters `<TT>a</TT>' and `<TT>c</TT>' satisfy this condition.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2588.eps}$
 -->
<IMG
 WIDTH="256" HEIGHT="236" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/25/p2588.gif
 ALT="\epsfbox{p2588.eps}">
</DIV>

<P>
In order to prevent too many payoffs, the electronics in the machine ensures that no
more than 3 of any
letter will appear in any display configuration.

<P>
IBM is manufacturing several models of this machine, with varying number of rows in
the display, and
they are having trouble writing code to identify winning configurations.
Your job is to write that code.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of multiple problem instances. Each instance will start with an
integer <SPAN CLASS="MATH"><I>n</I></SPAN> indicating
the number of rows in the display. The next line will contain <!-- MATH
 $n(n + 1)/2$
 -->
<SPAN CLASS="MATH"><I>n</I>(<I>n</I> + 1)/2</SPAN> letters of
the alphabet (all
lowercase) which are to be stored in the display row-wise, starting from the top.
For example, the display above would be specified as

<P>
<PRE>
4
abccddadca
</PRE>

<P>
The value of <SPAN CLASS="MATH"><I>n</I></SPAN> will be between 1 and 12, inclusive. A line with a single `<TT>0</TT>'
will terminate input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each problem instance, output all letters which form equilateral triangles
on a single line, in alphabetical order. If no such letters exist,
output `<TT>LOOOOOOOOSER!</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
abccddadca
6
azdefccrhijrrmznzocpq
2
abc
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ac
crz
LOOOOOOOOSER!
</PRE>

<P>

______________________________________________________
2589||||||false||||||
<P>
In the game of ``twenty questions"  I think of an item (like a
fish) from a set of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> items, and you get to ask me at most twenty
questions that can only be answered ``yes" or ``no" to identify the item.  For example, you might ask ``Is it
living?"  If I answer ``yes", then you might ask, ``Does it have fur?"  If I
answer ``no", then you might then ask, ``Does it have fins?"  This continues until you either guess the
item (in which case you win), or youve asked twenty questions without identifying
the item (in which case I win).

<P>
With just 20 questions you
could identify any one of 524,288 items, assuming you can distinguish among
them by asking 19 ``yes/no" questions and then with your 20<SPAN CLASS="MATH"><SUP>th</SUP></SPAN>
<tex2html_verbatim_mark>
question ask, ``Is it X?"  Of course it
might take fewer than 20 questions if you have a good idea about the identity
of the item, but in this problem well assume all the questions are used.

<P>
Suppose you could ask
questions that could be answered with more than just a ``yes" or ``no".  For example, suppose you could ask, ``Does it
weight less than, equal to, or greater than 10 pounds?"  This question has three possible
answers.  Then how many questions would you need to ask in order to distinguish among <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> items?

<P>
In this problem you will
be told how many different answers can be given to each of your questions, and
the number of items in the set of possible choices for the item.  All you need to do is determine the maximum
number of questions that must be asked to identify the item.  This assumes that your questions are chosen
in such a way as to divide the remaining candidates for the item into suitably
sized groups.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple cases to consider.  For each case there will be two integers in the input.  The
first integer, <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>,  is the number of possible answers to each question (no larger than 10).  
The second integer, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, is the number
of items in the set of possible choices (no larger than 2,147,483,647).  A pair of zeroes will follow the last case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case,
display a single line that looks like this:

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <TT>items,</TT> <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> <TT>answers per question,</TT> <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <TT>questions</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> are the values from the input, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the maximum number of questions required.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 524288
3 524288
4 524288
3 9
10 1000
0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
524288 items, 2 answers per question, 20 questions
524288 items, 3 answers per question, 13 questions
524288 items, 4 answers per question, 11 questions
9 items, 3 answers per question, 3 questions
1000 items, 10 answers per question, 4 questions
</PRE> 

<P>

______________________________________________________
2590||||||false||||||
<P>Most modern computers use one or more levels of cache memory between the processor and the main memory to minimize the time the processor has to wait for information from main memory. Each cache level is characterized as having some number of memory blocks, each of which has a fixed size (measured in bytes, and always a power of 2); the total size of a cache level is just the number of blocks in that cache level times the size of a block. The address of the lowest-numbered byte in each block is always a integral multiple of the block size, and the bytes in a block have contiguous addresses. For example, with a block size of 16, the bytes in a block might possibly be numbered 16 though 31, or 32 through 47, or 160 through 175.<P><DIV ALIGN="CENTER"><IMG WIDTH="217" HEIGHT="358" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2590.jpg ALT="\epsfbox{p2590.eps}"> <tex2html_verbatim_mark></DIV><P>The processor in this problem only reads single bytes, and it does so by issuing a request that specifies the address of the desired byte. If the byte is in the cache closest to the processor (known as the ``level 1 cache"), then that cache delivers the byte to the processor; the length of time required for this operation is called the ``level 1 access time". If the byte desired by the processor is not in the level 1 cache, but is in the level 2 cache (which is just below the level 1 cache), then the (level 1 size) block containing that byte is delivered from the level 2 cache to the level 1 cache, and then the desired byte is delivered from the level 1 cache to the processor. The total time required in this case is the time required by the level 2 cache to deliver the block to the level 1 cache (naturally called the ``level 2 access time"), plus the level 1 access time for the single byte. This pattern continues through all lower cache levels (if present) to the main memory, if necessary. Thus, if a byte requested by the processor isnt in any of the cache levels, the total access time required is the sum of the access times of each cache level plus that of the main memory. The figure to the left illustrates the flow of information in a system with two cache levels.<P>Each cache is initially empty. When a block is retrieved from a lower-level cache or main memory, it is placed in an empty block in the cache. When no empty blocks are available, and a new block is requested, it will replace an existing block. The particular block it replaces is that block that has been least recently used.<P>In this problem you will be given the number of caches in a system (between 1 and 3), the block size and total size of each cache, and the access time for each cache and the main memory. Times will be in integral numbers of nanoseconds (nsec). You will then be given a list of the addresses of bytes requested by the processor, and are to compute the time the processor must wait for all of the bytes to be delivered.<P>As a simple (but unreaslistic) example, suppose the system has two caches. The level 1 cache has 16 byte blocks, a total size of 32 bytes (that is, 2 blocks), and an access time of 4 nanoseconds. The level 2 cache has 32 byte blocks, a total size of 64 bytes (2 blocks), and an access time of 10 nanoseconds. Main memory has an access time of 50 nanoseconds. Suppose the processor requests, in order, bytes from locations 10, 20, 30, 40, and 50. (Cache blocks are numbered here for reference.)<P><UL><LI>Since both levels are initially empty, 32 bytes from main memory locations 0 through 31 will be placed in level 2 block 0 (50 nsec), then 16 bytes from that block (addresses 0 through 15) will be placed in level 1 block 0 (10 nsec). Finally, the byte with address 10 will be delivered to the processor (4 nsec). Total time to access the first byte is 64 nsec. </LI><LI>The byte with address 20 isnt found in level 1, but is found in level 2 in block 0. The 16 bytes containing address 20 (16 to 31) are placed in level 1 block 1 (10 nsec), and the byte with address 20 is delivered to the processor (4 nsec), for a total time of 14 nsec. Note that both blocks in the level 1 cache are now in used. </LI><LI>Next, the byte with address 30 is sought. Since it is found in the level 1 cache, that byte is simply delivered to the processor (4 nsec). </LI><LI>Now address 40 is issued by the processor. The byte at this location is not in either cache level, so the corresponding 32 byte block (addresses 32 to 63) is delivered to the level 2 cache and placed there in block 1 (which was previously unused), taking 50 nsec. Then the 16 bytes containing address 40 (32 to 47) are delivered to the level 1 cache (10 nsec more). These 16 bytes are placed in block 0 of the level 1 cache, since it is the least recently used (block 1 of the level 1 cache was used to satisfy the processors request for address 30). Finally, the byte is delivered to the processor, for a total time of 64 nsec. </LI><LI>Finally address 50 is requested. Found in the level 2 cache in block 1, the appropriate 16 bytes (48 to 63) are delivered to the level 1 cache (10 nsec). These bytes are placed in block 1 of the level 1 cache, since block 0 was just used. The selected byte is delivered to the processor (4 nsec), for a total time requirement of 14 nsec. </LI></UL><P>The total time for the bytes at this sequence of addresses to be delivered to the processor is 64 + 14 + 4 + 64 + 14 = 160 nsec.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case, the input begins with an integer that specifies the number of cache levels (between 1 and 3). For each cache level, starting with level 1, the input then contains integers giving the block size, total size, and access time for the cache level. Each cache level has mo more than 100 blocks, and a block size that is no larger than the next (lower level) cache. Next there appears an integer giving the access time for the main memory. Finally, there appears an integer specifying the number of addresses requested by the processor (no more than 1,000) followed by those addresses in the order they were requested; each address is in the range 0 to 65535. A single `<TT>0</TT>' follows the input for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display a single line containing the case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the total time required for all of the bytes requested by the processor to be delivered.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
  16 32 4
  32 64 10
  50
  5 10 20 30 40 50

2
  8 48 4
  32 64 10
  50
  5 10 20 30 40 50

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: total time = 160 nanoseconds
Case 2: total time = 170 nanoseconds
</PRE><P>
______________________________________________________
2591||||||false||||||
<P>Given two binary search trees, A and B, with nodes identified by (that is, having keys equal to) positive, non-zero integers, and the use of commands ``delete <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" and ``add <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" (defined below), what is the smallest number of commands that can be used to transform tree A into tree B?<P>Recall that in a binary search tree, the keys of all nodes in the left subtree of a node with key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> must be less than <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. Similarly, the keys of all nodes in the right subtree of a node with key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> must be greater than <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. There are no duplicate nodes.<P>The ``delete <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" command will delete the tree (or subtree) with its root at the node with the key <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. Deleting the root of the entire tree leaves an empty tree. The ``add <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>" command will add a new node identified by the integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. This node will naturally be a leaf node.<P>Since we seek to transform tree A into tree B, it follows that commands will be applied only to tree A; tree B is ``read only".<P>It is easy to see that it should never require more than <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> commands to achieve the transformation of A into B, since deletion of the root node of tree A followed by the addition of one node for each of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes in B (in the proper order) will achieve the desired goal. Equally easy to determine is the minimum number of commands required: if A and B are identical, then zero commands are required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case, the input contains the description of tree A followed by the description of tree B. Each tree description consists of an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that specifies the number of nodes in the tree, following by the keys of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes in an order such that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ``add" commands would create the tree. The last case is followed by the integer `<TT>-1</TT>'. No node will have a key larger than 10<SPAN CLASS="MATH"><SUP>9</SUP></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be no larger than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display a single line containing the input case number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the number of commands required to transform tree A into tree B, formatted as shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5 2 7 4 6 5 3 7 1 4 9
0 0
1 100 0
0 1 100
3 100 49 37 2 200 152
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5 commands.
Case 2: 0 commands.
Case 3: 1 command.
Case 4: 1 command.
Case 5: 3 commands.
</PRE><P>
______________________________________________________
2592||||||false||||||
<P>A fence builder has been given a strange task. Provided with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (between 3 and 100) pieces of straight fencing, each having an arbitrary length, the builder is to enclose as large a region as possible. The customer wants to know the area of the region that can be enclosed by the fence before it is built. There is only one constraint on the construction: each piece of fencing is connected only at its endpoints to exactly two other different pieces of fencing. That is, after completion, the fence will look like a (possibly irregular) polygon with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> sides. The customer has guaranteed the builder that the fencing provided will allow for a region with a non-zero area to be enclosed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases in the input. For each case, the input begins with the number of pieces of fencing (an integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>). There then follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> positive, non-zero real numbers giving the lengths of the fence pieces. A single integer zero follows the last case in the input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) and the maximum area that can be enclosed by the provided fencing materials. Show three fractional digits in each answer. Use the format shown below in displaying the results.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2.0 2.0 2.0
4 1.0 1.0 1.0 1.0
4 5.0 5.0 3.0 11.0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: maximum area = 1.732
Case 2: maximum area = 1.000
Case 3: maximum area = 21.000
</PRE><P>
______________________________________________________
2593||||||false||||||
<P>Life has been found on Phobos, one of the satellites of Mars! Unfortunately, the life forms there arent quite as advanced as those on Earth, and they dont have modern communications (at least by Earth standards). The Advanced Communication Management Company (ACM) has decided to build a central office and connect the Phobosians homes for communication (telephone, television, Internet, and so forth). They naturally want to minimize their capital outlay in this effort, and they need to decide how to lay fiber optic cable (essentially on the surface) so the smallest amount is used. Since ACM uses digital broadband technology, it is only necessary that there be a cable path that connects every subscriber and the central office. That is, there does not necessarily need to be a separate cable from the central office to each subscribers home.<P><DIV ALIGN="CENTER"><IMG WIDTH="535" HEIGHT="358" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2593.jpg ALT="\epsfbox{p2593.eps}"> <tex2html_verbatim_mark></DIV><P>We know the precise location of each Phobosians home and the planned ACM central office on the surface. These are given using longitude and latitude. Longitude is measured from an arbitrary meridian on the surface of Phobos, and has values in the range -180 degrees to +180 degrees. Latitude is measured from the equator, and has values in the range -90 degrees to +90 degrees. For planning purposes we assume Phobos is perfectly spherical, exactly 16.7 miles in diameter. The figure to the left illustrates one possible location (+80<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN> <tex2html_verbatim_mark> longitude, +30<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN> <tex2html_verbatim_mark> latitude).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be one or more sets of input data. Each set will contain, in order, an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> no larger than 100, but at least 2, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of real numbers, each pair giving the unique longitude and latitude, in degrees, of a Phobosians home or the central office. A single integer zero will follow the last data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input data set print a single line containing the data set number <SPAN CLASS="MATH">(1, 2,...)</SPAN> <tex2html_verbatim_mark> and the number of miles of cable required to connect all the Phobosians homes and the central office; show two fractional digits in the distance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
0 0    0 90    0 -90

3
0 0    0 90    90 0

3
0 0    90 0    45 0

6
-10 10   -10 -10   0 0   90 0   80 20 100 -10

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 26.23 miles
Case 2: 26.23 miles
Case 3: 13.12 miles
Case 4: 21.16 miles
</PRE><P>
______________________________________________________
2594||||||false||||||
<P>A psychologist tests <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> different individuals. The score for each individual is a pair of real numbers, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, that the psychologist treats as points in a plane. The psychologist then wants to separate the individuals into at least 2 groups, with at least 2 individuals in each group, based on the proximity of their scores. The decision is made to use the Euclidian distance between two scores as a measure of their proximity. That is, for two scores <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, their proximity is defined by the value of the expression<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><IMG WIDTH="194" HEIGHT="51" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2594img1.png ALT="$\displaystyle \sqrt{{(x_{1}-x_{2})^{2}+(y_{1}-y_{2})^{2}}}$">.</DIV><P><tex2html_verbatim_mark></P><P>To place the individuals in groups, the psychologist decides to use the following steps. (1) The two individuals whose scores are closest together are placed in group 1; call them A and B. (2) The next two individuals (not in group 1) with the closest scores are placed in group 2; call them C and D. (Clearly at least four individuals must be tested.) (3) The next ungrouped individual, called E, to be included in a group is the one closest to any individual already in a group or any other ungrouped individual. If E is closer to A or B than to C, D, or any other ungrouped individual, then E joins group 1. Likewise, if E is closer to C or D than to A, B, or any other ungrouped individual, then E joins group 2. Finally, if E is closer to another ungrouped individual, say F, than A, B, C, or D, then a new group is formed from E and F. If the shortest distance to an existing group is within 0.001 of the shortest distance to an ungrouped individual, or doesnt uniquely identify the group in which E should be placed, then E is placed in the existing group created earliest that has a member closest to E. This step (3) is repeated for all remaining ungrouped individuals.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases. For each case there appears an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> specifying the number of individuals tested; <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be at least 4, but no larger than 100. There will then follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> pairs of real <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> values, one for each individual. The first pair is for individual 1, the second pair is for individual 2, and so forth.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, first display the case number (theyre numbered sequentially starting with 1) on a line by itself. Then display the identity of the individuals in each group, one line per group. Use the format shown in the samples below. Specifically, output lines must be no longer than 79 characters, indentation (as shown in the samples) is required, and commas are required between the individual identity numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
  0.0 0.0 0.0 3.0 4.0 0.0 3.0 5.0
6
  0.0 0.0 0.0 3.0 4.0 0.0 3.0 5.0 2.0 6.0 3.0 1.0
25
  1 0 1 1 100 100 100 101 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9
  1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 1 19 1 20 1 21 1 22
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
  Group 1: 1, 2
  Group 2: 3, 4
Case 2:
  Group 1: 3, 6
  Group 2: 4, 5
  Group 3: 1, 2
Case 3:
  Group 1: 1, 2, 5, 6, 7, 8, 9, 10, 11, 12,13, 14, 15, 16, 17, 18, 19, 20,
           21, 22, 23, 24, 25
  Group 2: 3, 4
</PRE><P>
______________________________________________________
2595||||||false||||||
<P>Integers in bases larger than 10 are usually represented using letters to represent the digits which have values larger than 9. For example, hexadecimal (base 16) integers are written using the digits 0 through 9 (to represent themselves) and the letters A through F to represent the digits with values 10 through 15, respectively. In a similar manner, the remaining letters in the alphabet could be used to represent the digits with values 16 through 35. This allows for easy display of values in any base from 2 through 36.<P>In rummaging through a collection of files on an old reel of magnetic tape, a computer archeologist came across a file containing a sequence of what appeared to be arithmetic formulas. The expressions were of the form<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>number</I> - 1&nbsp;<I>operator</I>&nbsp;<I>number</I> - 2&nbsp; = &nbsp;<I>number</I> - 3</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>number</I> - 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>number</I> - 2</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>number</I> - 3</SPAN> <tex2html_verbatim_mark> are formed from the digits `<TT>0</TT>-<TT>9</TT>' and the letters `<TT>A</TT>-<TT>Z</TT>', and <EM>operator</EM> is one of `<TT>+</TT>' or `<TT>-</TT>' presumably meaning addition or subtraction. The archeologist would like to know if these expressions really do represent valid expressions, and if so, in what base the numbers were written. The assumption is made that the ``digits" `<TT>A</TT>' through `<TT>Z</TT>' (upper case only) do represent digits with values 10 through 35, none of the numbers are negative, and none of the numbers contain more than 50 digits.<P>You volunteer to help. At the outset, you know that examining a single number is insufficient to determine its base. For example, the number 77 could be written using any base greater than 7. If, however, you should see the expression<P>77 + 22 = 99<P>then you can easily tell than 10 is the smallest base that could have been used. On the other hand, if the expression was<P>77 + 22 = 121<P>then you can determine that the numbers were written in base 8. Your problem is to write a program that will assist the archeologist in determining the smallest base used to represent the numbers in each expression, and to also identify those expressions that couldnt have been expressed using a number base in the range 2 to 36.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases. For each case there will be a single line containing an expression. Blanks may appear before or after any of the numbers, the operator, or the equal sign, but they are not required. An empty line (that is, one containing only zero or more blanks) will follow the expression for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (starting with 1) and the smallest base that could have been used if the expression is correct. If the expression could not be correct using any of the possible bases, then display the case number and the statement `<TT>expression is invalid.</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
77 + 22 = 99
115 + 26 = 143
2K3 - 1A1 = 1J2
2N + M = 3I
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: minimum base is 10
Case 2: minimum base is 8
Case 3: expression is invalid.
Case 4: minimum base is 27
</PRE><P>
______________________________________________________
2596||||||false||||||
<P>A deterministic finite automaton has a finite set of states, with directed edges leading from one state to another. Each edge is labeled with a symbol. In this problem, we are only concerned about automata (the plural of automaton) that use the binary digits 0 and 1 as symbols. Each edge is thus labeled with 0 or 1. One state is identified as the start state, and one or more states are identified as final states.<P>A finite automaton is usually represented by a graph. For example, consider the finite automaton represented by the graph shown below; the states are shown as circles, and are named 1 and 2 for ease of identification. In this automaton, state 1 is the start state, and state 2 is the final state.<P><DIV ALIGN="CENTER"><IMG WIDTH="243" HEIGHT="140" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/p2596.jpg ALT="\epsfbox{p2596.eps}"> <tex2html_verbatim_mark></DIV><P>Each automaton in this problem accepts or rejects a string as follows. Beginning in the start state, for each symbol (0 or 1) in the input string (working from left to right in sequence), the automaton follows the one edge labeled with the input symbol from the current state to the next state. After making the transition associated with the last symbol in the input string, if the automaton is in a final state, then the input is accepted. Otherwise (that is, if the automaton is not in a final state), the input is rejected.<P>For the string 0101 and the automaton shown above, we start in state 1 (the start state). Since the first input symbol is 0, the edge labeled 0 from state 1 back to state 1 is followed, leaving us in state 1. The next input symbol, 1, causes a transition to state 2. The next symbol, 0, moves us back to state 1. The last input symbol, 1, causes the last transition, from state 1 to state 2. Since state 2 is a final state, the automaton accepts the string 0101. Note that the string 010 would have been rejected, since the automaton would have been in state 1 (which is not a final state) at the end of the input. This automaton happens to accept all binary strings that end with 1.<P>In this problem you will be given one or more automata and an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. For each of these, you are to find the number of binary strings having each length less than or equal to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that are accepted by the automaton. For example, for <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark> with the automaton above, the output would specify 0 strings of length 0 (since state 1 is not a final state), 1 string of length 1 (1), 2 strings of length 2 (01 and 11), and 4 strings of length 3 (001, 011, 101, and 111).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple input cases. For each case the input begins with three integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (no larger than 10) specifies the maximum length of the strings that are sought. <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> (no larger than 100) specifies the number of states in the automaton. <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> (no larger than 10) specifies the number of final states. Following these three integers are <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> pairs of integers. Each pair specifies the labels on the edges from the states, in order, starting with state 1. The first integer in each pair specifies the state to which the edge labeled 0 connects; the second integer specifies the state to which the edge labeled 1 connects. Finally, the last <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> integers identify the final states. State 1 will always be the start state. The input for the last case is followed by three zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display the case number (they are numbered sequentially, and start with 1). Then display the number of strings of each length (from 0 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>) accepted by the automaton, using a separate line for each length. The output must be identical in format to that shown in the examples below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 1
1 1
1 1
2

3 2 1
1 2
1 2
2

10 7 1
2 2
3 3
4 4
5 5
6 6
7 7
7 7
6

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
    Length = 0, 0 strings accepted.
    Length = 1, 0 strings accepted.
    Length = 2, 0 strings accepted.
    Length = 3, 0 strings accepted.
Case 2:
    Length = 0, 0 strings accepted.
    Length = 1, 1 string accepted.
    Length = 2, 2 strings accepted.
    Length = 3, 4 strings accepted.
Case 3:
    Length = 0, 0 strings accepted.
    Length = 1, 0 strings accepted.
    Length = 2, 0 strings accepted.
    Length = 3, 0 strings accepted.
    Length = 4, 0 strings accepted.
    Length = 5, 32 strings accepted.
    Length = 6, 0 strings accepted.
    Length = 7, 0 strings accepted.
    Length = 8, 0 strings accepted.
    Length = 9, 0 strings accepted.
    Length = 10, 0 strings accepted.

______________________________________________________
2597||||||false||||||
<P>A polynomial of degree <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> has the following form: <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB><I>x</I><SUP>n</SUP> + <I>a</I><SUB>n-1</SUB><I>x</I><SUP>n-1</SUP> +...+ <I>a</I><SUB>1</SUB><I>x</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>, <I>a</I><SUB>1</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are numeric constants called the coefficients of the polynomial and <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB><IMG WIDTH="18" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/25/2597img1.png ALT="$ \ne$"> 0</SPAN> <tex2html_verbatim_mark>.<P>For example, <SPAN CLASS="MATH">5<I>x</I><SUP>4</SUP> -7<I>x</I><SUP>3</SUP> + 3<I>x</I> + 1</SPAN> <tex2html_verbatim_mark> is a polynomial of degree 4 with integer coefficients.<P>For purposes of this problem, all polynomials will have integer coefficients.<P>You are to create a polynomial package with operations to add, subtract, multiply, evaluate, and find the derivative of a single variable polynomial of degree <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Commands are as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>evaluate <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark></TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>evaluate the polynomial on the next line</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>at the value <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by any number of polynomials to be</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>summed, on successive lines.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>subtract</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by <SPAN CLASS="MATH"><I>polynomial</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>polynomial</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> on</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>successive lines. The program will compute</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>polynomial</I><SUB>1</SUB> - <I>polynomial</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>multiply</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by any number of multiplicands on</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>successive lines</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>derivative</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>followed by a line that contains a polynomial</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>last</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A signal that the previous problem was the last one.</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The program terminates and no additional output is</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>produced.</TD></TR></TABLE></DIV><P>A blank line will always separate successive commands in the input. For the purposes of this problem you may assume that the input to your program will always be valid. No guarantees are given regarding spacing of the polynomial terms. The caret `<code>^</code>' will be used to represent exponentiation within a polynomial. The variable in the polynomial will always be <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and the terms of the polynomial will always be given in decreasing order. If an <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is equal to 1, the coefficient 1 may not be included in the data line (e.g. <code>x^2+x+7</code>). The input to your program will always be lowercase.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output from your program will include the example number followed by a colon and the answer. Spacing is not important. Coefficients that are 1 should not be shown (except in the case <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB> = 1</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
evaluate 4 
3x^2+5 

add 
2x^3+7x^2+2x 
4x^9+10x^2 
x+2 

subtract 
5x^4 + 3x^2  + 5 
2x^6  -  2  x^2 + 3 

multiply 
2x + 1 
3x^2 + x 
x 

derivative 
5x^4+3x^3+2x+5 

last
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1: 53 
2: 4x^9 + 2x^3+17x^2+3x+2 
3: -2x^6+5x^4+5x^2+2 
4: 6x^4+5x^3+x^2 
5: 20x^3+9x^2+2
</PRE><P>
______________________________________________________
2598||||||false||||||
<P>Space ships in the <SPAN CLASS="MATH">25<SUP>th</SUP></SPAN> <tex2html_verbatim_mark> century are driven by ``warp" drive. Unfortunately, if two warp drives operate simultaneously within 10 light years of each other both space ships blow up leaving a really nasty mess that has to be cleaned up. You are to implement software for space traffic control (STC) to insure the safe operation of space ships using warp drive. All space ships must file a flight plan with STC. STC reviews each request in the order it was received and issues flight clearance to the space ship if its operation will not interfere with any previously cleared space ships. If the space ship interferes with another cleared space ship then clearance is denied and the space ship is not allowed to operate. A space ship that starts moving at the exact same instance when another space ship stops operation does not cause a problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of clearance requests followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> clearance requests, one per line. A clearance request consists of a string space ship name followed by <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> coordinates of the origination point in space-time followed by <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> coordinates of the destination coordinates. All distances are in light years and time is given in minutes. <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is always greater than <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. The proposed flight plan starts at <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> at time <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and moves at constant velocity to <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, arriving at <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to consider the clearance requests in order and to print for each one the name of the space ship followed by the word `<TT>granted</TT>' if the flight will never come within 10 light years of any previously cleared flight or the word `<TT>denied</TT>' if the proposed flight plan will come within 10 light years of another operating space ship.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9
ship1 0 0 0 0 15 0 0 1 
ship2 0 15 0 0 0 0 0 1 
ship3 0 0 0 0 14 0 0 1 
ship4 0 14 0 0 0 0 0 1 
ship5 0 0 0 0 14 0 0 1 
ship6 0 14 0 0 0 0 0 1 
ship7 0 14 0 0 0 15 0 1  
ship8 0 0 0 0 0 0 0 1 
ship9 11 0 0 0 11 0 0 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ship1 granted 
ship2 granted 
ship3 granted 
ship4 denied 
ship5 granted 
ship6 denied 
ship7 granted 
ship8 granted 
ship9 granted
</PRE><P>
______________________________________________________
2599||||||false||||||
<P>A biological computing system uses strings consisting of the letters `A', `G', `C', and `U' to represent numbers. The strings are converted to the corresponding number by processing the letters in the string from left to right in groups of three letters. The three letter groups in the string are translated to the digits in the number as shown in the table given below.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Triplet</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Digit</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GCA, GCC, GCG, GCU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UGC, UGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAC, GAU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GAA, CAG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>GGA, GGC, GGG, GGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AUG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AAC, AAU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>AGA, AGG, CGA, CGC, CGG, CGU</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UGG</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>UAA, UAG, UGA</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Stop</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR>The number of characters in an input string is always a multiple of three and will always end with `UAA', `UAG', or `UGA'. For example, the string `GCAUGUUGGUAA' translates to the string `129'. Note that there is not a one-to-one relationship between a number and the strings that encode it. For example, the strings `GCAUGUUGGUAA', `GCCUGCUGGUAG', and `GCUUGCUGGUGA' all encode the number 129.<P>Researchers in the laboratory can isolate several copies of a string, and the number that it encodes, but because of the extraction process, each of the copies of the string is chopped up into an arbitrary number of fragments of arbitrary length. Not all of the copies are chopped up in the same way. The process guarantees that it will always be possible to reconstitute a complete string from the fragments it produces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that will accept as input a number and an arbitrary number of fragments of copies of a string that encodes the number (the word `<TT>end</TT>' signifies the end of the input).<P>The input file has several test cases, separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case in the input file, the program will produce as output a list of fragments required to reconstruct the string that encodes the number. Each line of the output will contain a fragment, and the index of the first and last character in the fragment that identifies the portion of the fragment to use to reconstruct the string. The indices are zero-based (i.e., the first letter in the fragment is at index 0). The fragments must be listed in the order they appear in the reconstituted string.<P>Separate the output of two diferent cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
129 
GCUUGCUGGUGA 
end 

129 
GCUUGCU 
GCUGGUGA 
GCU 
end 

129 
GCUUGC 
CUG 
CUG 
UG 
GU 
GA 
end
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
GCUUGCUGGUGA 0 11 

GCUUGCU 0 6 
GCUGGUGA 3 7 

GCUUGC 0 5 
UG 0 1 
GU 0 1 
GA 0 1
</PRE><P>
______________________________________________________
2600||||||false||||||
<P>We say that integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0 &lt; <I>x</I> &lt; <I>p</I></SPAN> <tex2html_verbatim_mark>, is a primitive root modulo odd prime <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> if and only if the set <SPAN CLASS="MATH">{(<I>x</I><SUP>i</SUP> mod<I>p</I>)| 1 = <I>i</I> = <I>p</I> - 1}</SPAN> <tex2html_verbatim_mark> is equal to <SPAN CLASS="MATH">1,..., <I>p</I>-1</SPAN> <tex2html_verbatim_mark>. For example, the consecutive powers of 3 modulo 7 are 3, 2, 6, 4, 5, 1, and thus 3 is a primitive root modulo 7.<P>Write a program which given any odd prime <!-- MATH
 $3= p < 65536$
 --><SPAN CLASS="MATH">3 = <I>p</I> &lt; 65536</SPAN> <tex2html_verbatim_mark> outputs the number of primitive roots modulo <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file has several lines with an odd primer number <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> per line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line in the input, the output of your program should consist of a line containing a single number that gives the number of primitive roots.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
23
31
79
107
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
8 
24 
52
</PRE><P>
______________________________________________________
2601||||||false||||||
<P>
The United States Constitution requires that the number of representatives each state has 
in the House of Representatives must be proportional to the population of the various 
states.  However, this causes a problem because you cannot have fractional 
representatives. 

<P>
For example, assume there are only three states with populations of 12431, 9471, and 
10282 and the House has only 10 representatives (the numbers are deliberately small).  
Then the first state should have 3.86 representatives, the second state 2.94 
representatives, and the third state should have 3.19 representatives.  In this case, the 
solution is obviously is to round these to 4, 3, and 3 respectively and fortunately that adds 
up to 10 representatives. However, rounding does not always give the correct number of 
representatives and it also has other undesirable properties. 

<P>
One method that has been used is this:  choose a number of representatives so that the 
sum of the absolute values of the deviations is as small as possible, subject to the 
Constitutional requirement that each state must have at least one representative.  The 
deviation is the number of representatives given (integer) minus the number of 
representatives calculated by proportion (decimal).  Deviations are calculated as 
accurately as necessary.  The deviations for the data above would be 0.14, 0.06, and -0.19 
to two decimal places.  If two or more solutions give exactly the same sum of the 
absolute values of the deviations, either is acceptable. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to your program will contain several cases, each of them consists of three lines. The
first line will give the number 
of states, the second line specifies the number of representatives in the House, and the 
third line gives the populations of each state.  The third line of input will consist of a 
series of numbers (state populations) separated by white space.  The population for state 
1 is given first, followed by the population for state 2, and so on up to the population for 
state <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (where <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of states).

<P>
Populations will be no more than 32,767.  The number of states will not exceed 50.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input test case, your program will produce one line of output for each state that gives the
state number followed by the number of representatives for that state.  The states must be listed in 
numerical order.   

<P>
If the number of representatives is less than the number of states, your program should print the 
message `<TT>The number of representatives is too small</TT>' and terminate without producing 
any additional output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
10 
12431 9471 10282 
5 
3 
10 20 50 9 12
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 4 
2 3 
3 3 
The number of representatives is too small
</PRE>      

<P>

______________________________________________________
2602||||||false||||||
<P>You are a proud owner of a rectangular piece of land in the city of Flatland. The edges of all pieces of property in Flatland are arranged to be horizontal and vertical in the coordinate system. The city identifies the boundaries of your property by specifying the coordinates of the top left and bottom right corners of your property. To make things simple the coordinates are always specified using positive integer values.<P>The city is in the process of expanding and has decided to build a number of roads. Roads in flatland are straight lines extending forever. The location of a road is given by specifying the coordinates of any two distinct points on the road. The city has published a list of the roads it wishes to build and will build the roads, one at a time, in the order they are listed.<P>If a road crosses your property the city will divide a portion of your property into two rectangles. The rectangles can overlap and they must share three edges with your current land as shown in the diagrams below:<P><DIV ALIGN="CENTER"><IMG WIDTH="826" HEIGHT="207" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2602.jpg ALT="\epsfbox{p2602.eps}"> <tex2html_verbatim_mark></DIV><P>After the town has subdivided your property into rectangles you will be allowed to retain ownership of one of the rectangles, but you must turn over the ownership of the rest of your property to the good citizens of Flatland. The process of dividing the property into rectangles will be repeated every time another road is built.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that accepts as input one line that contains four numbers that give the coordinates of a piece of property in flatland. This line will be followed by a series of lines that give the coordinates of the roads the town is planning to build, in the order they will be built. The last line of input will consist of four negative ones.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program will produce as output the coordinates of the successive rectangles you should retain so that in the end you retain the maximum possible area.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 0 5 5 
0 1 5 1 
-1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 1 5 5
</PRE><P>
______________________________________________________
2603||||||false||||||
<P>
Every year after all of the crops have been harvested the Swabian people celebrate the 
end of summer and the start of winter with Octoberfest.  The Swabian people love 
puzzles and have developed an interesting game that is used to distribute beer down a 
table.  An arbitrary number of mugs of different sizes are lined up on a table.  The first 
mug on the table is filled to capacity and all the other mugs are emptied.  The goal of the 
game is to determine the shortest number of moves required to transfer a specified 
amount of beer from the first mug on the table to some other mug on the table (note that 
the destination mug may be the first mug). 

<P>
During one move the contents of one mug is poured into another.  You may pour some, 
or all of the beer, into another mug regardless of its size, however you must fill the mug.  
Therefore it is possible, and may be desirable, to overfill a mug resulting in a nasty spill.  
So, for example, pouring the entire contents of a mug that contains 3 units of beer into a 
mug that holds 2 units of beer will result in 1 unit of beer spilling on the floor.  It is also 
possible to pour only 2 units of beer from the first mug into the second leaving 1 unit of 
beer in the first and 2 units of beer in the second.  You are not allowed to pour only 1 unit 
of beer from the first mug into the second.  Beer is poured in whole units only. 

<P>
There are two variations to the game.  In the first variation it is possible during a move to 
refill the first mug on the table.  Note that a refill counts as a move.  The second variation 
does not allow refills. 

<P>

<P>
<BR>
Write a program that will print out a shortest sequence of moves required to transfer the 
beer in the first mug on a table to some other mug. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several test cases, each of them consists of three lines.

<P>
The first line of input will contain 
either the word `<TT>yes</TT>' or `<TT>no</TT>' to indicate whether or not refills are allowed.  
The second 
line will contain a series of numbers separated by white space.  Each number gives the 
capacity of a mug on the table.  The mugs are numbered starting at 1, so the first number 
gives the capacity of the first mug, the second number gives the capacity of the second 
mug and so on.  The third line will contain two numbers.  The first number specifies the 
mug the beer is to be transferred to and the second number specifies the amount of beer 
that should be in that mug at the end of the game. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, the output of your program will consist of one line for each move in the game.
The line will contain one number for each mug on the table.  The number gives the amount of beer 
in the corresponding mug at the end of a turn.  The letter `<TT>r</TT>' will be printed at the end of 
a line to indicate if the first mug was refilled during that move.  Taken together the lines 
will give a shortest sequence of moves required to move the beer from the first mug to 
the mug specified in the input.  

<P>
If it is impossible to move the beer as indicated, your 
program should simply print the message `<TT>not possible</TT>'. 

<P>
Separate the output of two consecutive cases by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
no 
10 4 6 
3 2 
yes 
2 7 4 
3 4  
no 
2 3 8 
3 4
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 0 0 
4 0 6 
4 4 2 

2 0 0 
0 0 2 
2 0 2 r 
0 0 4 

not possible
</PRE> 

<P>

______________________________________________________
2604||||||false||||||
<P>The countries on the planet of Fozbot have decided to adopt the language Babble as the official language of the planet. The leaders of this planet have decided that in the year 2010 all Fozbotians will be required to speak only the language Babble.<P><P><BR>Sentences in all languages spoken on the planet, including Babble, are written as a single line terminated by a new line character. A sentence consists of a sequence of words, where a word is defined as a sequence of lower case letters (a, b, c, ... z) delimited by one or more white space characters (spaces, tabs, or a new line character). Each country has been assigned the task of defining a set of rules that define how words in their native language can be translated to words in Babble. A translation rule can take one of two forms:<P><P><BR><TT><SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH"><I>j</I>[<I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><I>c</I><SUB>3</SUB>...<I>c</I><SUB>n</SUB>]</SPAN> <tex2html_verbatim_mark> -&gt; <SPAN CLASS="MATH"><I>k</I>[<I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>m</SUB>]</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are words in a language, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are characters in a language, and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> are integers greater than zero.<P><P><BR>The first rule specifies that any occurrences of <SPAN CLASS="MATH"><I>word</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> may be replaced by <SPAN CLASS="MATH"><I>word</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. For example, the rule `<TT>gray -&gt; grau</TT>' specifies that any occurrences of the word `<TT>gray</TT>' may be translated to the word `<TT>grau</TT>'. Note that the quotes are not part of the rule or the words they have been used to separate the rule from the text in this document.<P><P><BR>The second rule states that <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> consecutive occurrences of letters <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB><I>c</I><SUB>2</SUB><I>c</I><SUB>3</SUB>...<I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> can be replaced by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> consecutive occurrences of the letters <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB><I>d</I><SUB>2</SUB><I>d</I><SUB>3</SUB>...<I>d</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>. For example, the rule `<TT>2[ab]-&gt;1[xyz]</TT>' would allow `<TT>ab</TT>', `<TT>aa</TT>', `<TT>bb</TT>', or `<TT>ba</TT>' to be replaced by `<TT>x</TT>', `<TT>y</TT>', or `<TT>z</TT>'. It is valid for one set of characters, but not both, to be omitted. For example, `<TT>2[ab]-&gt;1[]</TT>' and `<TT>1[]-&gt;3[xyz]</TT>' are valid rules. The first rule states that `<TT>aa</TT>', `<TT>ab</TT>', `<TT>ba</TT>', or `<TT>bb</TT>' may be replaced by nothing (i.e., they can be removed).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>You are to write a program that accepts two sentences on separate lines followed by a series of translation rules (each on a separate line). The last translation rule will be followed by a line that contains a single `<TT>.</TT>'. Your program will determine if it is possible to translate the first sentence to the second using the rules given.<P>The input file consists of several test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output is as follows:<P>If translation is possible your program will print the first sentence on a single line followed by steps required to perform the translation. Each line will contain the number of the rule used, followed by a colon, followed by the result of applying the rule to the current string. The rules are numbered based on their order in the input. The first rule is rule 1, the next is rule 2, and so on. If a translation is not possible your program will print `<TT>No translation possible</TT>'.<P>Separate the output of two different cases by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ich bin da 
i am here 
ich  -&gt; i 
3[bin]  -&gt; 2[am] 
1[a] -&gt; 3[here] 
1[d] -&gt; 1[h] 
.
Elefanten sind grau 
it worked 
2[en] -&gt; [] 
Elefan -&gt; I 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ich bin da 
1: i bin da 
3: i bin dere  
4: i bin here 
2: i am here 

No translation possible
</PRE>
______________________________________________________
2605||||||false||||||
<P>
WhereNow Vacations agency provides a vacation brokerage service, connecting travelers with unsold spots on similarly-priced vacations to a variety of locations.  Each week, travel agencies provide WhereNow with a list of the locations still needing travelers as well as the number of travelers needed for each location.  We will refer to each such traveler opening as an `unsold seat.'  WhereNow accepts no more than 35 unsold seats (combined total, across all agencies) in a given week.

<P>
During the same week, frugal travelers log into the WhereNow Vacations web site to pay a deposit and indicate which locations (at least 1, but up to 10) they'd be willing to travel to.  If WhereNow is unable to match a customer to a vacation in one of their requested locations, his or her deposit will be refunded with interest. Travelers' flexibility as to where they will travel is rewarded with ultra bargain-basement prices.  The site accepts deposits from no more than 20 customers per week.  

<P>
Normally, the owner allows the computer to customers to the most appropriate available vacations as part of the weekend batch processing.  To keep a human touch in WhereNow's service, however, she would like a ``3pm Early Warning" report run each Friday afternoon.  The report's sole purpose will be to indicate if it will not be possible to match all of this week's customers with a vacation package.  (On the rare event this occurs the owner will review the requests that Friday evening and handle the matching personally.)  

<P>
You will write a program to provide this report.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain multiple weeks' tour and customer information as shown in the sample below.

<P>

<UL>
<LI>The first line of the file indicates the number of weeks to process, followed by a blank line before the first week's data.  
</LI>
<LI>The first line of a week's data contains the number of open seats available for the first week.  All weeks will have at least one open seat.
</LI>
<LI>The next line of input lists each available tour location and the number of unsold seats for each location.  
</LI>
<LI>The subsequent line indicates the number of customers, followed by one line per customer.  All weeks will have at least one customer.
</LI>
<LI>Each customer's line of information begins with a count of how many countries the customer is willing to visit followed by the list of country names.  
</LI>
<LI>A blank line separates each week's input.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output will consist of one line per week, with each week separated by a blank line.  Print each week's number and whether all customers will be able to be matched with a vacation as shown in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2

6
Zimbabwe 1 Egypt 2 England 3
5
3 Egypt Zimbabwe Mexico 
1 France
1 Zimbabwe
2 France Egypt
2 Zimbabwe Egypt

4
France 1 Mexico 3
3
3 France Jamaica Brazil
3 England Mexico France
3 Mexico Canada France
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Week #1:  Warning!  

Week #2:  All is well.
</PRE> 

<P>

______________________________________________________
2606||||||false||||||
<P>Write a program that evaluates a set of poker dice ``hands" and displays the ordered results.<P>Here are the evaluation rules, taken from <SPAN CLASS="textbf">Hoyle's Rules of Games</SPAN>, ed. by Albert H. Morehead and Geoffrey Mott-Smith (The New American Library of World Literature, 1963), pp. 227-28.<P><UL><LI>Five dice are used. These <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> [are] standard dice, marked with numbers [1 through 6] <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> . </LI><LI>Theoretically any number may play, but actually the game is played by groups of two to five people, usually in a restaurant or bar to decide which pays the check. </LI><LI>Each player has three rolls. His object is to make the best possible poker hand, ranking: Five of a kind, high; four of a kind; full house; three of a kind; two pair; pair; high "card." Aces (1s) rank above sixes <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> Straights do not count. </LI><LI><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> </LI></UL><P>Here are the evaluation rules for potentially ambiguous <SPAN ID="txt53">poker hands</SPAN>, taken from a playing card included in a ``Mohawk"-brand deck of poker cards:<P><UL><LI>Full house: three of a kind and two of a kind. Ex.: 8, 8, 8, and 6, 6. Hand with the highest three cards wins over any other full house. </LI><LI>Two Pair: Ex.: Q, Q, and 10, 10. Hand with the highest pair wins. If there is a tie, hand with the highest remaining (or fifth) card wins. </LI><LI>One Pair: if two are playing, hand with the highest value wins. Ex.: two 4's beats two 3's. Highest remaining card in-hand breaks a tie. </LI></UL><P>With poker dice it is possible for hands to tie. If multiple hands tie, they are given the <EM>same</EM> position number, and the position of the next lower hand shows a gap. If, for instance, there are three players and there is a tie for first, the final position vector would be 1, 1, 3 : there are two winners; there is no second-place player; and there is a third-place player.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Program input is read from a file that observes the following specifications:<P><UL><LI>The first record contains the number of games, which is greater than or equal to 1. This record is followed by one or more blank lines. </LI><LI>The rest of the records specify the details for each game, as follows: </LI><LI>The first game record contains the number of players, which will be between 2 and 10 inclusive. </LI><LI>Subsequent game records contain information on those individual hands; specifically: </LI><LI>five integers giving the face values of the five dice, separated by blanks </LI><LI>one <EM>or more</EM> blanks </LI><LI>the remainder of the line contains the player's name, with an unspecified amount of embedded white space. <B>Warning:</B> the player's name must not <EM>begin</EM> with any white-space characters. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Program output will be a table of results for each game, labeled by game number, beginning at 1, formatted as seen below. Each line of results will begin with the player's position (right aligned in two spaces), followed by 6 spaces, followed by the face values of the dice (with one space between each value), followed by 3 spaces and the players name. Separate game tables by a blank line for readability. <B>Note:</B> While the sample output displays each hand's dice in input order, your output may list each hand's dice in any order.<P>Each game table is to be sorted by player position (from first place to last place). In case of ties, the entries are to be alphabetized by the players' names.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2

8
3 5 1 1 2  John Doe
3 2 2 2 3  Michelle Midlen
2 2 3 3 2  Jane Roe
1 3 4 5 6  Aaron Aardvark
3 4 4 4 1  Zoltan Zwingli
3 5 1 2 2  Jeffrey Walter
3 3 2 2 3  Al Gore Rythm
6 5 4 3 2  Macguiver
4
1 2 3 4 5  John Doe
2 2 2 2 4  Michelle Midlen
3 3 4 4 1  Jane Roe
6 6 3 3 2  Aaron Aardvark
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game #1:
 1      3 3 2 2 3   Al Gore Rythm
 2      2 2 3 3 2   Jane Roe
 2      3 2 2 2 3   Michelle Midlen
 4      3 4 4 4 1   Zoltan Zwingli
 5      3 5 1 1 2   John Doe
 6      3 5 1 2 2   Jeffrey Walter
 7      1 3 4 5 6   Aaron Aardvark
 8      6 5 4 3 2   Macguiver

Game #2:
 1      2 2 2 2 4   Michelle Midlen
 2      6 6 3 3 2   Aaron Aardvark
 3      3 3 4 4 1   Jane Roe
 4      1 2 3 4 5   John Doe
</PRE><P>
______________________________________________________
2607||||||false||||||
<P>The USS N-terprise is trapped in a two-dimensional space. This space contains points of deadly Alpha Chi Mu (ACM) radiation. If living tissue is exposed to more than 42 rads of ACM radiation, for more than 20 seconds, it will die. The effect of the rads is cumulative, with the exposure at each point being added to the total exposure as they travel through this space. If the cumulative rads remains at or below 42 until they escape, they will survive. They could also survive if they were exposed to more than 42 rads, but this exposure lasted no more than 20 seconds.<P>You must write a computer program that, given a starting location, plots a course through this space, without killing everyone on board, and that also minimizes the total exposure to the ACM radiation. If multiple paths out of the space have the same radiation exposure, choose the shortest. If multiple paths out of space have the same radiation exposure and the same length, any one will satisfy the problem.<P>Due to the Interspacial Borealis Mechanism (IBM), the N-terprise is restricted in its ability to travel in this area. The N-terprise can only move in 4 directions in this space (<TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>). The N-terprise cannot ``skip over" any locations, but must move along the plane of this space. Further, its speed is such that it takes 10 seconds to pass each point in the plane.<P>Sensors have mapped the space, including measuring values of the radiation at each. A ``map" of the space is an <SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN> grid, <SPAN CLASS="MATH"><I>n</I> &gt; 0</SPAN>. Amounts of the deadly ACM radiation are listed at each map point as integer values, greater than or equal to 0. The total amount of radiation at each map point is the sum of the radiation at that point, plus a percentage of the amounts at the neighboring points. (A neighboring point is a coordinate, if it exists, to the <TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>, <TT>NW</TT>, <TT>NE</TT>, <TT>SW</TT> and <TT>SE</TT> of the current location.) The radiation effect is more pronounced at the four cardinal neighbors (<TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>), at 50%. The other four coordinates contribute 25% of their actual effect.<P>When the N-terprise is first trapped in this region of space, they were instantaneously placed somewhere on the map, thus they begin accumulating rads with the effect as computed for this starting point. (That is, they did not ``travel" to their starting point, accumulating rads along the way.)<P>Note that this is truly ``flat" space, in that the map does not ``wrap" - there are truly edges to this space. That is how the N-terprise will escape: by going to an ``edge" point and proceeding out of the space.<P>For example, given a 3 <SPAN CLASS="MATH"><TT>x</TT></SPAN> 3 space (coordinates begin at 0,0 in the upper left corner):<P><PRE>
2 4 5
6 3 2
4 5 7
</PRE><P>The total exposure to the ACM radiation at point 1,1 would be 16 (3 + (.5*4) +(.5*2) + (.5*6) + (.5*5) + (.25*2) + (.25*5) + (.25*7) + (.25*4)). The time of exposure at this point is 10 seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file will consist of a series of ``maps". Each map begins with a single integer, <SPAN CLASS="MATH"><I>n</I></SPAN>, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2607img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2607img1.png ALT="$ \le$">80</SPAN>, which gives the dimensions of the space. (The space is square.) This will be followed by two integers denoting the starting position of the N-terprise. (Remember that numbering begins at 0 0 in the upper left corner.) Following the starting position will be n rows of n integers, each of which denotes the amount of radiation at that point. Data ends when the given map size (<SPAN CLASS="MATH"><I>n</I></SPAN>) is 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Output is as shown below. Successful paths out are shown with the coordinates of the path beginning at the starting point of the N-terprise and ending with the last point before they escape the space, showing the cumulation of the ACM rads along the path. For maps that contain no safe path out of the space, the only output, after the heading, is `<TT>We're dead, Jim!</TT>'. Note the blank line between maps.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
1 1
2  4  5
6  3  2
4  5  7
3
1 1
60 70 80
90 50 100
110 120 130
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
MAP #1:
1,1: 16.00
0,1: 27.00

MAP #2:
1,1: 335.00
0,1: 547.50
</PRE><P>
______________________________________________________
2608||||||false||||||
<P>
In his August 1986 column for <EM>Isaac Asimov's Science Fiction Magazine</EM> (p.100), Martin Gardner presented an interesting problem:

<P>

<P>
<BR>
<EM>Now for a curious little combinatorial puzzle involving the twelve numbers on the face of a clock.  Can you rearrange the numbers (keeping them in a circle) so no triplet of adjacent numbers has a sum higher than 21?  This is the smallest value that the highest sum of a triplet can have.</EM>

<P>
<EM>I know of no procedure for finding such a permutation, but there must be a way to write a computer program that will print all such permutations in a reasonable time.</EM>

<P>

<P>
<BR>
For our purposes, we will not print all such permutations, but simply count them.  Also, to allow for a variety of cases, we will accept as input (1) how many numbers (<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>) there are on our ``clock face" (meaning that we will have numbers in the range from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>), and (2) the largest allowed triplet sum.  Hence, for the problem as posed by Martin Gardner, the input would be

<P>

<P>
<BR>

<TT>12 21</TT>

<P>

<P>
<BR>
A number of clock faces will be equivalent based on rotations of a circular permutation - for 
instance, ``123", ``231", and ``312" are all equivalent, differing only in the starting point.  
Consequently you are to eliminate this duplication.  There are also permutations whose equivalence is 
based on mirror images (such as ``123" and ``321").  Eliminate that duplication as well.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Write a program that will accept a number of problems from input file.  The first file entry will 
specify the number of problems posed in the file.  Subsequent entries will be pairs of numbers: (1) 
how many entries there are on a ``clock face" (up to 13), and (2)the largest allowed triplet sum. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The program will report the number of <EM>unique</EM> circular permutations (eliminating permutations 
equivalent on rotation and/or reflection) meeting the constraint that no triplet found in the 
circular permutation sums to more than the specified maximum triplet sum.

<P>

<P>
<BR>

<B>Note:</B>  judging will be based on number pairs that either have no permutations meeting the criterion or have the minimum non-zero number of permutations meeting it.

<P>
Specifically, the program will read one integer, followed by pairs of integers from the file, as 
described above.  It will output to the screen its results (echoing back the input data and giving 
the number of unique permutations meeting the constraint) as three lines of text.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
6 11
12 21
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Permutation size:    6
Maximum triplet sum: 11
Valid permutations:  1

Permutation size:    12
Maximum triplet sum: 21
Valid permutations:  261
</PRE> 

<P>

______________________________________________________
2609||||||false||||||
<P>
It is the 23rd century. You are currently employed at the leading interstellar hospital, where scientists are conducting genetic research on all of the various species encountered during space travel. Each species has a specific number of nucleic acids that make up their genes. For instance, humans have 4. Some species have as many as 8, some as few as 1. 

<P>
One interesting characteristic of some species is that they have ``duplicate" nucleic acids. That is, in most cases, a species with 4 nucleic acids would have them identified as `<TT>abcd</TT>', but some species with 4 would have them labeled `<TT>abcc</TT>'.

<P>
Scientists at the hospital are able to determine the nucleic acids that make up each species' genes, but need a listing of all UNIQUE permutations, in order to search the genome for specific targets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>

<P>
Write a program that reads in a series of strings, one per line, and then displays the total number of UNIQUE permutations followed by an ASCII-ordered listing of the permutations. Input will be terminated by a string containing a single, lower-case `<TT>x</TT>'.

<P>
Output format is as shown below.

<P>
Each string represents the nucleic acids which make up the genes of one species. Each nucleic acid will be represented by a letter of the alphabet. Note that a gene named `<TT>A</TT>' is NOT a duplicate of a gene named `<TT>a</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
abc
abb
Bab
x
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
There are 6 permutations for abc:
abc
acb
bac
bca
cab
cba
There are 3 permutations for abb:
abb
bab
bba
There are 6 permutations for Bab:
Bab
Bba
aBb
abB
bBa
baB
</PRE> 


______________________________________________________
2610||||||false||||||
<P>
Modern grocery stores now often have a ``U-Scan" checkout lane - allowing the customer to scan and check out his/her own groceries, without the need of a human checker. These lanes require that change be provided automatically, after the customer enters his/her cash. You are to write a program that computes the bills and coins to be dispensed, minimizing the total number of bills and coins. (That is, for change totaling $5.50, you should not dispense 5 ones and 50 pennies, but a $5 bill and a 50-cent piece.)

<P>

<P>
<BR>
The bills and coins available for you to dispense are as follows:

<P>
$50 bill,

<P>
$20 bill,

<P>
$10 bill,

<P>
$5 bill,

<P>
$1 bill,

<P>
50-cent coin,

<P>
25-cent coin,

<P>
10-cent coin,

<P>
5-cent coin,

<P>
1-cent coin.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file  will consist of two numbers per line, each constituting a transaction. The first number is the amount of the purchase, and the second one is the amount tendered by the customer. You may assume that the amount tendered is greater than or equal to the amount of purchase. Input will be terminated by a line with both numbers being 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output for each transaction will be a series of lines showing the amount of change returned and detailing the number of bills and coins that will be dispensed as change, in descending order of monetary amount, one unit per line. If a bill/coin is not needed in the change returned, no output is produced for that bill/coin. (In other words, do not display `<TT>0 $1 bills</TT>'.) Proper use of plurals is required, as shown below. Separate transactions by a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
42.15 50.00
2.07 5.00
99.99 100.00
0.0 0.0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
TRANSACTION #1:
$7.85
1 $5 bill
2 $1 bills
1 50-cent coin
1 25-cent coin
1 10-cent coin

TRANSACTION #2:
$2.93
2 $1 bills
1 50-cent coin
1 25-cent coin
1 10-cent coin
1 5-cent coin
3 1-cent coins

TRANSACTION #3:
$0.01
1 1-cent coin

______________________________________________________
2611||||||false||||||
<P>A very well-known toy/pastime, called Rubik's cube, consists of a cube as shown in Figure 1a, where letters stand for colors (e.g. `<TT>B</TT>' for blue, `<TT>R</TT> for red,...). The goal of the game is to rotate the faces of the cube in such a way that at the end each face has a different color, as shown in Figure 1b. Notice that,<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611a.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1: RubikCube</DIV><P>when a face is rotated, the configuration of colors in all the adjacent faces changes. Figure 2 illustrates a rotation of one of the faces. Given a scrambled configuration, reaching the final position can be quite challenging, as you may know.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611b.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 2: Rotation Example</DIV><P>But your grandpa has many years of experience, and claims that, given any configuration of the Rubik cube, he can come up with a sequence of rotations leading to a winning configuration.<P>In order to show all faces of the cube we shall represent the cube as in Figure 3a. The six colors are Yellow, Red, Blue, Green, White and Magenta (represented by their first letters).<P>You will be given an initial configuration and a list of rotations. A rotation will be represented by an integer number, indicating the face to be rotated and the direction of the rotation (a positive value means clockwise rotation, negative value means counter-clockwise rotation). Faces of the cube are numbered as shown in Figure 3b. You must write a program that checks whether the list of rotations will lead to a winning configuration.<P><DIV ALIGN="CENTER"><IMG ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2611a.gif ALT="\epsfbox{p2611c.eps}"> </DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 3: Representation of the cube</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of the input is an integer which indicates the number of tests. Each test description consists of ten lines of input. The first nine lines of a test will describe an initial configuration, in the format shown in Figure 3a. The next line will contain a list of rotations, ending with the value `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should print one line. If your grandpa is correct, print `<TT>Yes, grandpa!</TT>', otherwise print `<TT>No, you are wrong!</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
      G Y Y
      G Y Y
      G Y Y
W W W Y R R M M M G G B
W W W Y R R M M M G G B
W W W Y R R M M M G G B
      R B B
      R B B
      R B B
-1 0
      G Y Y
      G Y Y
      G Y Y
W W W Y R R M M M G G B
W M W Y R R M W M G G B
W W W Y R R M M M G G B
      R B B
      R B B
      R B B
-1 0
      M W M
      W W G
      W W Y
G Y Y M M B M B G W R B
B Y Y M M B M G G W R R
Y M G W B B R R G R R W
      R Y Y
      G B Y
      R G B
+4 +6 -2 +3 -4 +2 -3 -6 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes, grandpa!
No, you are wrong!
Yes, grandpa!
</PRE><P>
______________________________________________________
2612||||||false||||||
<P>The court of King Xeon 2.4 is plagued with intrigue and conspiracy. A document recently discovered by the King's Secret Service is thought to be part of some mischievous scheme. The document contains simply a set of sentences which state the truth or falsehood of each other. Sentences have the form ``Sentence X is true/false" where <SPAN CLASS="MATH"><I>X</I></SPAN> identifies one sentence in the set. The King's Secret Service suspects the sentences in fact refer to another, yet uncovered, document.<P>While they try to establish the origin and purpose of the document, the King ordered you to find whether the set of sentences it contains is consistent, that is, if there is a valid truth assignment for the sentences. If the set is consistent, the King wants you to determine the maximum number of sentences which can be made true in a valid truth assignment for the document.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several instances of documents. Each document starts with a line containing a single integer, <SPAN CLASS="MATH"><I>N</I></SPAN>, which indicates the number of sentences in the document ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> 1000</SPAN>). The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a sentence. Sentences are numbered sequentially, in the order they appear in the input (the first is sentence 1, the second is sentence 2, and so on). Each sentence has the form `<TT>Sentence X is true.</TT>' or `<TT>Sentence X is false.</TT>', where <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>X</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2612img1.gif ALT="$ \leq$"> <I>N</I></SPAN>. The value <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> indicates the end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each document in the input your program should output one line. If the document is consistent, your program should print the maximum number of sentences in a valid truth assignment for the document. Otherwise your program should print the word `<TT>Inconsistent</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE>
1
Sentence 1 is false.
1
Sentence 1 is true.
5
Sentence 2 is false.
Sentence 1 is false.
Sentence 3 is true.
Sentence 3 is true.
Sentence 4 is false.
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Inconsistent
1
3
</PRE><P>
______________________________________________________
2613||||||false||||||
<P>Indiana Jones is in a deserted city, annihilated during a war. Roofs of all houses have been destroyed and only portions of walls are still standing. The ground is so full of mines that the only safe way to move around the city is walking over the remaining walls. The mission of our hero is to save a person who is trapped in the city. In order to move between two walls which are not connected Indiana Jones thought of taking with him a wooden board which he could place between the two walls and then cross from one to the other.<P><DIV ALIGN="CENTER"><IMG WIDTH="548" HEIGHT="297" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="\epsfbox{p2613.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 1: City map with route used by Indiana Jones</DIV><P>Initial positions of Indiana Jones and the trapped person are both on some section of the walls. Besides, walls are either in the direction South-North or West-East.<P>You will be given a map of the city remains. Your mission is to determine the minimum length of the wooden board Indiana Jones needs to carry in order to get to the trapped person.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. Each test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of wall sections remaining in the city ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif ALT="$ \leq$"> 1000</SPAN>). Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describes a wall section. The first wall section to appear is the section where Indiana Jones stands at the beginning. The second section to appear is the section where the trapped person stands. Each wall section description consists of three integers <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> <!-- MATH
 $(Â­10000 \leq X, Y, L \leq 10000)$
 -->
<SPAN CLASS="MATH">(Â­10000 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \leq$"> <I>X</I>, <I>Y</I>, <I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \leq$"> 10000)</SPAN>,
where <SPAN CLASS="MATH"><I>X</I></SPAN> an <SPAN CLASS="MATH"><I>Y</I></SPAN> define either the southernmost point of a wall section (for South-North
sections) or the westernmost point (for West-East wall sections). The value of <SPAN CLASS="MATH"><I>L</I></SPAN>
determines the length and direction of the wall: if <SPAN CLASS="MATH"><I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2613.gif
 ALT="$ \geq$"> 0</SPAN>, the section is West-East,
with length <SPAN CLASS="MATH"><I>L</I></SPAN>; if <SPAN CLASS="MATH"><I>L</I> &lt; 0</SPAN>, the section is North-South, with length <SPAN CLASS="MATH">| <I>L</I>|</SPAN>.
The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input your program should produce one line of output,
containing a real value representing the length of the wooden board Indiana Jones
must carry. The length must be printed as a real number with two-digit precision,
and the last decimal digit must be rounded. The input will not contain test cases
where differences in rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
14
1 1 5
6 8 2
7 2 -2
5 3 3
2 5 2
2 3 2
2 3 -2
4 3 -2
0 7 1
1 8 2
3 6 -2
4 7 2
6 6 1
6 6 -2
3
-10 0 20
-5 1 10
50 50 100
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.41
1.00
</PRE>

<P>

______________________________________________________
2614||||||false||||||
<P>
Pedro travelled to Europe to take part in the International Olympiad in Informatics
and is coming back home. Since all his friends asked him to bring them some gift,
he bought two big bags of chocolates (one of Mindt and one of Lilka). Each of these
two bags contains a certain number of small chocolates. Buying those two bags was
much less expensive than buying smaller, individual boxes of chocolates. At home,
Pedro has some empty chocolate boxes that he kept from other trips. Pedro intends
to distribute the chocolates he just bought into these smaller boxes, to give them
to his friends.

<P>
As soon as Pedro begins filling the small boxes, he realizes he has a big problem:
since he has two different brands of chocolates, if he mixes chocolates of different
brands into one small box, the friend who receives this small box will discover
Pedro's trick to save money, and will not be pleased with him.

<P>
You must help poor Pedro distribute the chocolates into the small boxes in such a way
that every small box is completely full, and contains only one brand of chocolates.
A number of chocolates may however be left unassigned to any box (Pedro will keep
these chocolates to himself).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several instances of the problem. Each instance consists of
three lines. The first line contains two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>L</I></SPAN> that indicate respectively
the number of chocolates Mindt and Lilka Pedro bought (<SPAN CLASS="MATH">0 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> <I>M</I></SPAN>, <!-- MATH
 $L \leq 1000$
 -->
<SPAN CLASS="MATH"><I>L</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> 1000</SPAN>).
The next line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> representing the number of small boxes Pedro
has (<!-- MATH
 $N \leq M+L)$
 -->
<SPAN CLASS="MATH"><I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2614img1.gif
 ALT="$ \leq$"> <I>M</I> + <I>L</I>)</SPAN>. The third line contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers indicating the capacity
<SPAN CLASS="MATH"><I>C</I><SUB>i</SUB> &gt; 0</SPAN> of box number <SPAN CLASS="MATH"><I>i</I></SPAN> (that is, the number of chocolates needed to fill that box).
The end of input is indicated by <SPAN CLASS="MATH"><I>M</I> = <I>L</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each instance of the input your program must produce one line of output. If it
is possible to distribute the chocolates as defined in the problem statement, print
the number of boxes to be filled with Mindt chocolate, followed by a space,
followed by the list of box numbers, in ascending order. Each box number in the
list should be followed by a space. If it is impossible to distribute the chocolates,
print `<TT>Impossible to distribute</TT>'. If more than one solution exists, print any one.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
12 9
4
5 2 8 5
100 120
5
21 32 110 54 3
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 1 2 4
Impossible to distribute
</PRE>

<P>

______________________________________________________
2615||||||false||||||
<P>Nails and Rubber Bands. That is the suggestive name of a game played by a group of children (all of them offspring of geometry teachers). The children fix a number of nails on a plank of wood, randomly placed. Then they choose one of the nails to be the Origin, and a number <SPAN CLASS="MATH"><I>B</I></SPAN> of rubber bands. The challenge is to use the <SPAN CLASS="MATH"><I>B</I></SPAN> rubber bands to wrap the nails so that:<P><DL COMPACT><DT>(i).</DT><DD>each rubber band wraps a subset of the nails</DD><DT>(ii).</DT><DD>all nails are inside some wrapping</DD><DT>(iii).</DT><DD>wrappings do not overlap each other except at the Origin nail, which is touched by all rubber bands</DD><DT>(iv).</DT><DD>rubber bands must form wrappings which are convex polygons with at least three corners</DD><DT>(v).</DT><DD>the total area inside the wrappings is the smallest among all possible ways of wrapping the nails.</DD></DL><P>An instance of the game is shown in Figure 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="423" HEIGHT="335" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="\epsfbox{p2615.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1: A game with 19 nails and 2 rubber bands</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should solve several instances of the game. Each game description starts with a line containing two integers <SPAN CLASS="MATH"><I>B</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>, indicating respectively the number of rubber bands and the number of nails ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="$ \leq$"> <I>B</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif ALT="$ \leq$"> 50</SPAN> and <SPAN CLASS="MATH">2<I>B</I> + 1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> <I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> 101</SPAN>).
The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines describe the position of the nails, each line containing two
integers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> (<!-- MATH
 $Â­10000 \leq X, Y \leq 10000$
 -->
<SPAN CLASS="MATH">Â­10000 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> <I>X</I>, <I>Y</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2615.gif
 ALT="$ \leq$"> 10000</SPAN>). The origin is the first nail
in the input. The end of input is indicated by <SPAN CLASS="MATH"><I>B</I> = <I>N</I> = 0</SPAN>.

<P>
In all instances in the input:

<P>

<UL>
<LI>no two nails are in the same point
</LI>
<LI>no three nails are in the same line
</LI>
<LI>the origin nail does not belong to the convex hull of all nails (that is, if you
use one rubber band to wrap all nails, it does not touch the origin nail)
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each game in the input your program should output one line, describing the smallest
total area inside the wrappings. The area must be printed as a real number with two-digit
precision, and the last decimal digit must be rounded. The input will not contain test
cases where differences in rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 5
0 0
9 4
-8 8
-10 -2
4 -8
2 6
0 0
3 6
-5 7
-4 -6
10 -10
3 5
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
92.00
74.00
</PRE>

<P>

______________________________________________________
2616||||||false||||||
<P>Nowadays, unfortunately, SPAM messages are becoming more and more common. Some of them may have a multiplicative effect since they ask you to forward them to all your friends. Some SPAM messages wish good luck, others promise you will become rich, and others just remind you how important it is to tell your friends that you care for their friendship. Here is an example of a SPAM:<P><PRE>
  From: Alice
  To: Bob, Mary, Julia, Paul

  Hi, this is a good luck email. I wish you become a millionaire,
  but that is up to you. If you
  * send this email to 10 or more people you will be a millionaire
  * send this email to 5 or more people you will be rich
  * send this email to less than 5 people you will be poor
  As I said, it is up to you. Write your email and be rich! :-)

  Alice
</PRE><P>People usually react in two different ways when they receive a SPAM:<P><UL><LI>They discard the message immediately without even reading it (they hate SPAM) </LI><LI>They forward the message to everyone they know (they love SPAM) </LI></UL><P>For this problem, we will assume everyone loves SPAM, but one never forwards the same message twice. Each SPAM message has a different effect based on the number of friends you forward the message to. For example: a SPAM message could tell that you will be poor if you send the message to 5 friends, but you will be the rich if you send to 10, and you will be the richest man in the world if you send it to 20 friends, and so on.<P>We will consider only SPAM messages similar to the example above. More specifically, a SPAM message will define two threshold values <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> and three attributes <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN>. A person acquires one of the three attributes depending on the number of messages forwarded for that specific SPAM. If a person forwards <SPAN CLASS="MATH"><I>T</I></SPAN> messages and <SPAN CLASS="MATH"><I>T</I> &lt; <I>T</I><SUB>1</SUB></SPAN> then her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, if <!-- MATH
 $T_1 \leq T < T_2$
 --><SPAN CLASS="MATH"><I>T</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>T</I> &lt; <I>T</I><SUB>2</SUB></SPAN> then her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN>, otherwise her/his attribute is <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN>.<P>You will be given the names of a group of people, and for each person in the group, the set of friends she/he knows the email address. You will also be given a set of distinct SPAM messages, and for each SPAM message its threshold values and attributes, and the information about which person started it. You have to write a program that determines, for each person in the given group, which attributes she/he acquired, based on all the SPAM they forward.<P>You may assume that the SPAM originator will have at least one friend (in other words, she/he will send at least one message), and a person will not send messages to herself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. The first line of a test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of persons in the group ( <SPAN CLASS="MATH">2 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> 20</SPAN>). In the input, a person is identified by an integer from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a list of friends of each person (the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line contains the list of friends of person number <SPAN CLASS="MATH"><I>i</I></SPAN>). The list of friends of person <SPAN CLASS="MATH"><I>i</I></SPAN> describes the friends person <SPAN CLASS="MATH"><I>i</I></SPAN> knows the email address, and consists of a list of integers <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>F</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I></SPAN>, <SPAN CLASS="MATH"><I>F</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \neq$"> <I>i</I></SPAN>) terminated by the value `<TT>0</TT>' (zero). Following the list of friends comes the description of the SPAM messages (there will be at most 100 messages). Each description appears in a different line. The description consists of an integer <SPAN CLASS="MATH"><I>P</I></SPAN> identifying the person who is the SPAM originator ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>P</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2616img1.gif ALT="$ \leq$"> <I>N</I></SPAN>); two integers <SPAN CLASS="MATH"><I>T</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>T</I><SUB>2</SUB></SPAN> representing the threshold values; and the three attributes <SPAN CLASS="MATH"><I>A</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>A</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>A</I><SUB>3</SUB></SPAN> (each attribute is a word of no more than 20 letters). The SPAM list ends with a line containing only the value 0 (zero). The following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contain each a name, which is single word with no more than 20 letters. The name in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line is the name of person number <SPAN CLASS="MATH"><I>i</I></SPAN>. The end of input is indicated by <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>. <P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should output a list of names followed by the attributes they acquired. Your program should write the persons names in the order they appear in the input, followed by `<TT>:</TT>' and by a space, followed by their attributes according to the SPAM they sent. Attributes should be written in the order they appear in the input; each attribute should be followed by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample input</A>&nbsp;</FONT></H2><P><PRE>
5
2 3 0
1 3 5 4 0
5 0
0
4 1 0
1 2 4 poor rich millionaire
5 3 10 sad normal happy
0
Bob
Paul
Mary
Alice
Julia
6
2 0
1 3 0
1 2 4 0
1 2 3 5 0
1 2 3 4 0
1 3 4 0
1 2 4 red green blue
1 2 4 dumb normal smart
6 3 5 ugly bad good
0
Peter
Paul
Victoria
John
Julia
Anne
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Bob: rich sad
Paul: millionaire normal
Mary: poor sad
Alice: poor sad
Julia: rich sad
Peter: red dumb ugly
Paul: green normal ugly
Victoria: green normal bad
John: blue smart bad
Julia: blue smart bad
Anne: red dumb bad
</PRE><P>
______________________________________________________
2617||||||false||||||
<P>Cheap small industrial scanners can only acquire images on gray scale, which are images where the pixels have intensity values in the integer range <SPAN CLASS="MATH">[0...255]</SPAN>. A company that builds automatic vending machines wants to use these small scanners to validate the tokens used in its machines. Tokens are small square chips of metal with holes strategically pierced. Tokens with different holes are used for different values.<P><DIV ALIGN="CENTER"><IMG WIDTH="321" HEIGHT="278" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="\epsfbox{p2617.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Fig. 1: Token for a vending machine</DIV><P>A scanner will produce an image of the token introduced by the client and a computer program will validate it. In the scanner image, metal appears as dark pixels (values near 0) and holes appear as light pixels (values near 255). There are two problems that must be solved in the validation process. The first problem is that, since the token is square, a client can introduce it in the machine slot in several possible ways. The second problem is due to the poor quality of the image generated by those cheap scanners, which will contain <EM>noise</EM> (errors). To validate the token, the machine will compare the scanner output to a <EM>standard image</EM> of the token, previously produced using a high quality scanner.<P>You must write a program which, given the standard image of a token and an image produced by the machine scanner, determines the confidence degree that the token introduced is a valid one. The confidence degree is the percentage of pixels in the scanner image whose intensity value differ by 100 or less from corresponding pixels in the standard image. As the token may have been introduced in several ways, we are interested in the highest possible confidence degree, considering all possible token positions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program should process several test cases. Each test case specifies the size of the token image and the pixel values for the standard and scanned images. The first line of a test case contains an integer <SPAN CLASS="MATH"><I>L</I></SPAN> that indicates the size, in pixels, of the image ( <SPAN CLASS="MATH">1 <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="$ \leq$"> <I>L</I> <IMG WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2617.gif ALT="$ \leq$"> 400</SPAN>). The next <SPAN CLASS="MATH"><I>L</I></SPAN> lines will contain <SPAN CLASS="MATH"><I>L</I></SPAN> integers each, representing the pixel values for the rows of the standard image. Following that, the next <SPAN CLASS="MATH"><I>L</I></SPAN> lines will contain the pixel values for the rows of the scanned image.<P>The end of input is indicated by <SPAN CLASS="MATH"><I>L</I> = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program should output a single line containing the confidence degree for the corresponding image. The confidence degree must be printed as a real number with two-digit precision, and the last decimal digit must be rounded. The input will not contain test cases where differences in rounding are significant.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
250 251 249 250
251 120 245 248
248 5 190 247
5 5 180 246
0 1 240 240
250 2 250 254
244 251 255 253
230 250 250 252
3
250 250 250
150 0 150
250 2 250
253 150 253
0 2 248
251 150 250
5
255 255 255 255 255
255 0 255 0 0
255 0 0 255 255
255 255 0 255 255
255 255 255 255 0
255 0 255 255 0
255 0 255 255 255
255 255 0 0 255
255 0 0 255 255
154 154 255 255 255
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
93.75
100.00
92.00
</PRE><P>
______________________________________________________
2618||||||false||||||
<P>
Mr. Jones is an exemplary husband. Every Saturday morning Mrs. Jones gives him a
list of goods to be bought from the supermarket and he buys exactly what he has
been asked for, always choosing the brands with lowest prices. But Mr. Jones hates
going to the supermarket on a Saturday, since its aisles are packed with shoppers.
He wants to change the way he does his shopping. Instead of going to and fro to buy
the products on his wife's list, he will try to get the goods on the list going
through each aisle only once, picking up the products in the exact order given
in the list. So he asked you to write a program to help him with his new style of shopping.

<P>
Given the information about products available in the supermarket together with
their prices in the order in which they appear in Mr. Jones' way and the list of
products given by his wife, your program must determine the least cost that he would pay.

<P>
Mr. Jones buys the products in the order in which they appear in Mrs. Jones' list
and he never goes back as he walks down the aisles. Therefore, if he buys the <SPAN CLASS="MATH"><I>i</I></SPAN>-th
product on his way as the <SPAN CLASS="MATH"><I>j</I></SPAN>-th item on the list, the next product to be bought
is the <SPAN CLASS="MATH">(<I>j</I> + 1)</SPAN>-th item of the list --and it must be bought from the products
that come after <SPAN CLASS="MATH"><I>i</I></SPAN> in his path. The figure below shows an example where products
are identified by integers. Note that different brands of the same product may
appear separately. In the example Mr. Jones must buy products 1,1,2,20 (notice
that product 1 appears twice in the list). For the example, the least cost for
Mr. Jones following his constraints is 21.30. Notice that with this new way of
shopping it may be impossible for Mr. Jones to buy all the goods on Mrs. Jones
list; in that case, your program should warn Mr. Jones.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2618.eps}$
 -->
<IMG
  ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="\epsfbox{p2618.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program should process data for several shopping sessions. The first line in
the description of a shopping session contains two integers <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>N</I></SPAN>; <SPAN CLASS="MATH"><I>M</I></SPAN>
indicates the number of items in Mrs. Jones' list (<!-- MATH
 $1 \leq M \leq 100$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>M</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100</SPAN>) and <SPAN CLASS="MATH"><I>N</I></SPAN>
represents the total number of products available in the supermarket
(<!-- MATH
 $1 \leq N \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>N</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>). The next line contains <SPAN CLASS="MATH"><I>M</I></SPAN> integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> representing
the list of products in Mrs. Jones' list (<!-- MATH
 $1 \leq X_i \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>X</I><SUB>i</SUB> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>, <!-- MATH
 $1 \leq i \leq M$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>i</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>M</I></SPAN>).
Then <SPAN CLASS="MATH"><I>N</I></SPAN> lines follow, representing the supermarket products in the order in which
they appear in Mr. Jones' way. Each of those lines contains an integer <SPAN CLASS="MATH"><I>K</I></SPAN> and a
real <SPAN CLASS="MATH"><I>P</I></SPAN> which represent respectively a product identifier and its price
(<!-- MATH
 $1 \leq K \leq 100000$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> <I>K</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2618.gif
 ALT="$ \leq$"> 100000</SPAN>). The end of input is indicated by <SPAN CLASS="MATH"><I>M</I> = <I>N</I> = 0</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each shopping session in the input, your program should produce one line of
output, containing the least cost that Mr. Jones would pay. If it is not possible
to buy all the goods for the session, print the word <TT>impossible</TT>. The cost
must be printed as a real number with two-digit precision, and the last decimal
digit must be rounded. The input will not contain test cases where differences in
rounding are significant.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 8
1 1 2 20
2 0.29
1 0.30
20 0.15
1 1.00
5 0.05
2 10.00
20 20.00
20 10.00
2 5
1 2
3 1.00
4 1.00
2 0.01
1 1.00
2 1.50
2 3
1 2
2 0.05
1 10.00
1 3.00
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
21.30
2.50
Impossible
</PRE>

<P>

______________________________________________________
2619||||||false||||||
<p align="left">Consider a set of <b>n</b> different elements that can be permuted in <b>n</b>! different ways. Such permutations can be first, ordered lexicographically and then they can numbered. For example, the set {a, b, c} admits six permutations that can be ordered as follows:</p><div align="center"><table width="53" border="0" cellspacing="0" cellpadding="0"><tr><td><div align="center">1</div></td><td><div align="center">abc</div></td></tr><tr><td><div align="center">2</div></td><td><div align="center">acb</div></td></tr><tr><td colspan="2"><div align="center">...</div></td></tr><tr><td><div align="center">6</div></td><td><div align="center">cba</div></td></tr></table></div><p align="left">This example shows the 1<sup><font size="-1">st</font></sup> , 2<sup><font size="-1">nd</font></sup> and 6<sup><font size="-1">th</font></sup> permutation. Write a program that can compute the <b>k</b><font size="-1"><sup>th</sup></font> permutation of a set of <b>n</b> elements. The elements of such a set are that character <b>c</b> and the <b>n</b>-<i>1</i> ASCII characters that follow it.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The program must read a text file where each line is of the form: <b>k</b> <b>n</b> <b>c</b>, where <b>k</b> and <b>n</b> are integers: 0 &lt; <b>n</b> &#8804; 20, 0 &lt; <b>k</b> &#8804; <b>n</b>!, and <b>c</b> is an ASCII character.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each line of the file read by the program, give the corresponding permutation.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
1 3 a
2 3 a
6 3 A
1 4 a
1 4 C
24 4 1
1 20 a
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
abc
acb
CBA
abcd
CDEF
4321
abcdefghijklmnopqrst
</PRE><P>
______________________________________________________
2620||||||false||||||
<p align="left">A small boy named Tommy has some toy centipedes that are a series of 1 centimeter segments. Tommy assembles his centipedes to any length he likes and places them on a 30&times;30 centimeter board that allows the centipedes to travel in 1 centimeter wide tracks that criss-cross the board. The centipedes travel only parallel to either the <b>x</b> or <b>y</b> axis on the board. Centipede segments of the same centipede advance at the same time and centipedes advance in cyclic numerical order (all of centipede <i>0</i> first, then <i>1</i>, etc.). When more than one segment of two or more centipedes occupy the same <b>x</b>, <b>y</b> coordinate, there is a centipede collision. Anytime a collision occurs, all segments arriving at the collision site are retained at this point like a black hole. All remaining segments on a centipede detach from the segment involved in the collision and continue their march until another collision occurs or an existing collision site is encountered or until the segments fall off the edge of the board. Anytime a segment enters a collision site, it becomes part of the collision.<br>Since Tommy left home without his centipede set, his mother has hired you to write a simulation program for his entertainment. Your program will simulate his board with a text printout of his grids. For example, Tommy may simulate 5 centipedes on his board that start out as shown on the grid on the left and finish as shown on the grid on the right (note the example grid is only 10&times;10 whereas Tommy's is 30&times;30).</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2620a.gif></p><p align="left"><br>Where:<br><i>0</i> represents a centipede segment traveling from top to bottom,<br><i>1</i> represents a centipede segment traveling from left to right,<br><i>2</i> represents a centipede segment traveling from bottom to top,<br><i>3</i> represents a centipede segment traveling from bottom to top,<br><i>4</i> represents a centipede segment traveling from right to left, and<br><i>X</i> represents a collision site involving 2 or more segments.</p><p align="left">Your program will simulate up to 10 centipedes that travel on a 30&times;30 board. Tommy has 100 segments that he may use in his simulation. Of course, no centipede can be longer than 30 segments.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>Input to your program will consist of a series of simulation sets. The first line of each input set will be a single integer (0 &lt; <b>n</b> &lt; 11) representing the number of centipedes in the simulation. (Centipedes are numbered <i>0</i> through <b>n</b> -<i>1</i> in the same order as the input.) The next <b>n</b> lines will each represent one centipede and will contain a single direction character followed by 3 integers. The direction character can be '<i>U</i>', '<i>D</i>', '<i>L</i>', or '<i>R</i>' for &quot;<i>Up</i>&quot;, &quot;<i>Down</i>&quot;, &quot;<i>Left</i>&quot;, or &quot;<i>Right</i>&quot; respectively and indicate the direction of travel. The next integer (0 &lt; <b>L</b>&lt; 31) indicates the length of the centipede in segments. The second and third integers indicate the <b>x</b>, <b>y</b> coordinates of the lead segment (0 &#8804; <b>x</b>, <b>y</b> &lt; 30). The next <b>L</b> -<i>1</i> segments of the centipede occupy the <b>L</b> -<i>1</i> board positions extending in the opposite direction from the direction of travel starting adjacent to the lead segment. You can be assured that no centipede segment will originate off the board nor will the original configuration involve any collisions. The input ends when <b>n</b> = -<i>1</i>.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>For each input simulation set, you should print (exactly) the following lines as the first two lines of output (starting in column 4):<br>000000000011111111112222222222<br>012345678901234567890123456789</p><p><br>The next 30 lines represent the state of the board after the simulation has completed (all centipede segments have entered a collision site or fallen off the edge of the board). Columns 1 and 2 should contain the row number (rows are numbered 29 down to 00) with leading zeroes. Columns between 4 and 33 (inclusive) represent the contents of the board cells. Board cells can contain either an <i>X</i> or a period. A period represents an empty cell and <i>X</i> represents a cell that contains 2 or more centipede segments involved in a collision. The last line of each output set is a blank line. Follow the Sample Output for the exact format of the expected output.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
10
R 9 11 23
U 8 11 17
U 5 15 15
U 5 15 8
D 9 23 13
U 6 23 6
R 9 8 9
L 13 17 0
U 12 13 11
L 5 20 9
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
   000000000011111111112222222222
   012345678901234567890123456789
29 ..............................
28 ..............................
27 ..............................
26 ..............................
25 ..............................
24 ..............................
23 ...........X...X..............
22 ..............................
21 ..............................
20 ..............................
19 ..............................
18 ..............................
17 ..............................
16 ..............................
15 ..............................
14 ..............................
13 ..............................
12 ..............................
11 ..............................
10 ..............................
09 .............X.X.......X......
08 ..............................
07 ..............................
06 ..............................
05 ..............................
04 ..............................
03 ..............................
02 ..............................
01 ..............................
00 ..............................
</PRE><P>
______________________________________________________
2621||||||false||||||
<p>&nbsp;</p><p align="left">You have a programmable mobil cyclop robot with a camera mounted on itself . It has the ability to identify different areas in a building, using the numbers assigned to each one of them in a four-neighborhood (by example, if the robot is in area 8, it can visualize his neighbors areas 7, 4, 9 and 14). You have to design a program for the robot, in such a way that the robot can find the shortest length path, between any two data points without visiting twice any area. The length of the path is calculated with the number of visited areas, including the starting and the final areas. In case of no possible path, the program should show the message: &#147;<i>There is not possible path</i>&#148;.<br>Taking into account that the maximum number of areas is 99 and the minimum 2.</p><p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2621a.gif width="641" height="560"></p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><p>The input file contains several tests. The first line of each test contains an integer <b>n</b> representing the number of areas. The next <b>n</b> lines will have positive integers. The first one representing the area and the others, the neighborhoods. The last line will have two integers representing the start and final areas. A -<i>1</i> indicates that there will be no further tests on the file..</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><p>An integer representing the length of the shortest path or the string &#148;<i>There is not possible path</i>&#148;.</p><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
21
1 4
2 5
3 6
4 1 8
5 2 10
6 3 12
7 8
8 4 7 9 14
9 8 10
10 5 9 11
11 10 12
12 6 11 13 15
13 12
14 8 17
15 12 19
16 17
17 14 16 18 21
18 17 19
19 15 18 20
20 19
21 17
21 3
-1 
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
8
</PRE><P>
______________________________________________________
2622||||||false||||||
          <p align="left">Juan lives in the mountains. He waits all the year for 
            the town&#146;s party, because tradesmen from all over the country 
            will come to show and sell their merchandise like baskets, mud pots 
            and a lot of craftsmanship. This year he is planning to buy some baskets. 
            All the baskets are round, having diameter, thickness and colors that 
            make them different from each other. Nevertheless, the problem is 
            how are they going to be carried, because the only truck he owns is 
            small. He also has time restrictions because the stands do not have 
            their own parking space, so he is planning to park in front of the 
            chosen stand, buy the selected basket (only one) and quickly put it 
            in the truck.<br>
            To do this, Juan has decided to cross the stand&#146;s street walking 
            with the idea of looking for the merchandise and choose the baskets 
            he would like to buy. He had planned to measure the diameters of all 
            the baskets he would like to buy and write them in his notebook. In 
            this way when he had walked all the stand&#146;s street, he would 
            have gotten all the diameter information to decide where he is going 
            to stop his truck to buy. Each basket he buys must keep inside the 
            previous one bought making a stack like is shown in the figure (which 
            means they are in strict decending order when put into stack). Suppose 
            the basket&#146;s thickness despicable and no baskets rearrangements 
            can be made because the time restriction.<br>
            In his walk by the stand&#146;s street, Juan had picked up the following 
            diameters of baskets he would like to buy. The diameters are: </p>
          <p align="center"><img src="http://livearchive.onlinejudge.org/external/26/p2622a.gif></p>
          <p align="left">In his walk by the stand&#146;s street, Juan had picked 
            up the following diameters of baskets he would like to buy. The diameters 
            are :</p>
          <p align="center">Walking Path through the stands selecting baskets 
            and picking up the data<br>
            <img src="http://livearchive.onlinejudge.org/external/26/p2622a.gif><br>
            Truck Path through the stands buying pieces </p>
          <p align="left">To this diameters list Juan has realized that the maximum 
            amount of baskets he can buy is 7.</p>


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>


          <p> Input contains several cases. Each test case consists of a line 
            containing a single integer <b>n</b> (<b>n</b> &lt; 10000), representing 
            the amount of baskets in the list. In the next <b>n</b> lines, integers 
            representing the diameters of each one of the <b>n</b> baskets. A 
            line containing a &#150;<i>1</i> follows the last test case.</p>




<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

          <p>An integer representing the maximum amount of baskets Juan can buy.</p>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
12
200
1300
1800
1000
100
2000
2500
2900
1100
3000
1200
2400
5
200
300
500
100
3000
4
1000
700
500
200
-1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
7
4
1
</PRE>

<P>

______________________________________________________
2623||||||false||||||
          <p align="left">Efficient Developments ships a product which requires 
            some database features. Since the company can&#146;t assume an existing 
            DBM installed in the client system and their distribution must be 
            as small as possible. Their solution is to create a Simple Transaction 
            Manager.<br>
            This Simple Transaction Manager must be able to retain information 
            through its executions and to avoid several client processes to access 
            the same data at the same time. Client process will be identified, 
            on the test file, as a three uppercase letter string followed by a 
            colon, the command the client is requesting with its corresponding 
            parameters, if any. The commands that can be issue to the STM are:<br>
            STARTSERVER<br>
            SHUTDOWN<br>
            CRASH<br>
            STARTTRANSACTION<br>
            COMMIT<br>
            ROLLBACK<br>
            READ Record<br>
            UPDATE Record Value<br>
            CREATEDATABASE Size<br>
            <br>
            The database has at most 500 registers but it must support to read 
            a four digits size number (such as 0500) in what can be thought of 
            as a single table. All values and all record keys have the four digits, 
            left zero padded numbers are used.<br>
            In order to access the server, it must be running. The server will 
            support only one transaction per client at the same time, and all 
            records accessed (read or write) while the transaction is open will 
            be locked for the other clients. When an operation which requires 
            a running server is performed against an stopped server (all except 
            crash, createdatabase and startserver) the response: &#147;ERROR: 
            NO SERVER UP&#148; is generated.<br>
            The database can only be created when the server is not running.<br>
            The server cannot be started while running, nor shutted down if it 
            not running.<br>
            The database must be started before it can be shutted down. <br>
            To shutdown a database there must be no pending transactions.<br>
            The server can be &#147;crashed&#148; at any time: it is stopped, 
            regardless of its status or pending transactions.<br>
            When a transaction is committed, changes are made permanent. The information 
            should exist between calls to the STM. A CREATEDATABASE statement 
            will destroy all existing data and initialize all records to &#147;0000&#148;. 
            A record update outside a transaction is permanent. When a Transaction 
            is rolledback, all updates to records within that transaction are 
            discarded.</p>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

          <p> Input contains several cases. Each case consists of a succession 
            of commands to be processed, on per line. Tests are separated by one 
            empty space. Process all cases until you reach end of file.</p>





<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

          <p align="left"> The STM outputs to a file, the client who issued a 
            command, and the command output:<br>
            Please see sample output files.<br>
            The following table shows the possible message the STM systems should 
            produce. </p>
          <div align="center">
            <table width="600" border="1" cellspacing="0" cellpadding="0">
              <tr> 
                <td> 
                  <div align="center"><i>Command</i></div>
                </td>
                <td> 
                  <div align="center"><i>Success</i></div>
                </td>
                <td> 
                  <div align="center"><i>Error Message</i></div>
                </td>
                <td> 
                  <div align="center"><i>Error Message</i></div>
                </td>
              </tr>
              <tr> 
                <td height="38">STARTSERVER</td>
                <td height="38">OK</td>
                <td height="38">ERROR:<br>
                  SERVER UP</td>
                <td height="38">&nbsp;</td>
              </tr>
              <tr> 
                <td>SHUTDOWN</td>
                <td>OK</td>
                <td>ERROR: <br>
                  NO SERVER UP<br>
                </td>
                <td>ERROR: <br>
                  OPEN TRANSACTIONS</td>
              </tr>
              <tr> 
                <td>CRASH</td>
                <td>OK</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>STARTTRANSACTION</td>
                <td>OK</td>
                <td>ERROR: <br>
                  A TRANSACTION<br>
                  IS ALREADY OPEN</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>COMMIT</td>
                <td>OK</td>
                <td>ERROR: <br>
                  NO OPEN TRANSACTION</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>ROLLBACK</td>
                <td>OK</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>READ Record</td>
                <td>Value</td>
                <td>ERROR:<br>
                  RECORD IS LOCKED</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>UPDATE Record Value</td>
                <td>OK</td>
                <td>ERROR:<br>
                  RECORD IS LOCKED</td>
                <td>&nbsp;</td>
              </tr>
              <tr> 
                <td>CREATEDATABASE Size</td>
                <td>Value</td>
                <td>ERROR:<br>
                  SERVER UP</td>
                <td>&nbsp;</td>
              </tr>
            </table>
          </div>



<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
YYY: CREATEDATABASE 500
XXX: STARTSERVER
AAA: READ 0001
AAA: UPDATE 0001 1222
AAA: STARTTRANSACTION
AAA: UPDATE 0001 1500
BBB: STARTTRANSACTION
AAA: READ 0001
BBB: UPDATE 0315 0123
CCC: STARTTRANSACTION
DDD: UPDATE 0316 0456
CCC: STARTTRANSACTION
CCC: READ 0001
BBB: COMMIT
XXX: SHUTDOWN
CCC: UPDATE 0317 0789
CCC: COMMIT
XXX: CRASH
AAA: UPDATE 0001 1300
DDD: READ 0245

AAA: READ 0001
BBB: READ 0315
DDD: READ 0316
CCC: READ 0317
DDD: READ 0245

XXX: STARTSERVER
AAA: READ 0001
BBB: READ 0315
DDD: READ 0316
CCC: READ 0317
DDD: READ 0245
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YYY: OK
XXX: OK
AAA: 0000
AAA: OK
AAA: OK
AAA: OK
BBB: OK
AAA: 1500
BBB: OK
CCC: OK
DDD: OK
CCC: ERROR: A TRANSACTION IS ALREADY OPEN
CCC: ERROR: RECORD IS LOCKED
BBB: OK
XXX: ERROR: OPEN TRANSACTIONS
CCC: OK
CCC: OK
XXX: OK
AAA: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP

AAA: ERROR: NO SERVER UP
BBB: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP
CCC: ERROR: NO SERVER UP
DDD: ERROR: NO SERVER UP

XXX: OK
AAA: 1222
BBB: 0123
DDD: 0456
CCC: 0789
DDD: 0000
</PRE>

<P>

______________________________________________________
2624||||||false||||||
<P>
If Pythagoras knew what Mathematics teachers and contest-question makers kept doing to his theorem, he'd probably be rolling in his grave.  Then again, that would mean that he would probably have to have ears that could hear all the way from Croton, and he probably wouldn't have minded, being a sect leader and all.  (And being dead for over fifteen centuries would mean that all these discussions of the Pythagorean Theorem would fall on very dead ears.)  In fact, to some now, numbers still meant everything.  

<P>
Other than the fact that he had almost killed himself over irrational numbers, Pythagoras probably never foresaw anyone daring to ask this question: given a line segment of integral length, how many non-congruent right triangles can have this segment as a side, assuming that all three sides of the triangle are of integral length?

<P>
Since Pythagoras probably never foresaw the computer, who could blame him?  Perhaps you can blame this problem's writer, because this question is what he poses you. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains integers, one integer per line.  The first integer will signify the number of cases, and will 
be from 1 to 20.  Each of the lines following will contain one case, which is one integer, the integral length 
of a particular segment in length units. The value of the given segment length is not greater than 100. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output consists of lines, each line consisting of a pair of integers, the integers indicating the lengths of 
the other two sides of the right triangle in length units.  All the lengths are counting numbers, and the pairs 
of integers must be sorted with the larger number first.  In between cases, one blank line should be inserted. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                             

<P>
<PRE>
2                                                         
20                                                        
12
</PRE>                                                         

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>                                                         

<P>
<PRE>
101, 99                                                           
52, 48                                                           
29, 21                                                           
25, 15                                                           
16, 12  
 
37, 35 
20, 16 
15, 9 
13, 5
</PRE>  

<P>

______________________________________________________
2625||||||false||||||
<P>You must write a program that chooses the second word and its position on a 5-by-5 board that will yield in the highest score.<P>The first word, five letters long and consisting only of lower-case letters, will be placed horizontally with the first letter at square (2,0) marked by the asterisk on Figure 1. Assume that <SPAN CLASS="MATH">(<I>R</I>, <I>C</I>)</SPAN> <tex2html_verbatim_mark> refers to the square in row <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and column <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>; and, the upper left square is (0,0).<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>T</TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 1. Structure of the 5-by-5 board.</DIV><P><P><BR>The second word should be chosen from the following three-letter words: <SPAN CLASS="textit"><SPAN CLASS="textbf">get, the, top, has, shy, max, axe, boy, hog</SPAN></SPAN>. It should be placed on the board at a right angle to the first word and must use one of the letters of the first word.<P>Scoring of the second word is based on following rules:<P><UL><LI>All letters are worth 1 point except `<SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>' (2 points), `<SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>' (2 points), `<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>' (4 points), and `<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>' (5 points). </LI><LI>Squares on Figure 1 that are marked with D earn double letter points while those marked with T earn triple letter points. For example, placing `<SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>' on the (1,3) square equals 8 points; placing `<SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>' on the (4,2) square equals 6 points. </LI><LI>The score for the word is the sum of points earned by the three squares occupied by the three-letter word. </LI></UL><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>t</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>h</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>s</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>e</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>y</TD><TD></TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Figure 2.</DIV><P><P><BR>In Figure 2, for example, given that the five-letter word is the word `these', then the three-letter word should be `shy' placed in square (1,1) earning 11 points.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each line contains the five-letter word for each test case. Only lowercase letters shall be used.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For every case in the input file, the output contains a single line containing the five-letter word, the three-letter word, the row position of the first letter of the three-letter word, the column position of the three-letter word and the score earned by the three-letter word delimited by colons. In test cases where it is not possible to place a three-letter word then the output should be one line containing the five-letter word and the message `<TT>No play.</TT>' delimited by a colon. In cases where the three-letter word that earns the highest score is not unique then the output should be a single line containing the five-letter word and the message `<TT>Not unique.</TT>' delimited by a colon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
these                         
cloud                         
nnnnn
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
these:shy:1:1:11 
cloud:boy:1:2:6 
nnnnn:No play.
</PRE><P>
______________________________________________________
2626||||||false||||||
<P>``Read Out Loud" is a sequence generator where the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>th term is obtained from the <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark>st term by reading aloud the <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark>st term. This sequence has applications with molecular and atomic chemistry, with the length of each element in the sequence having an asymptotic rate of growth of around 1.3.<P><P><BR>For example, if the first element of the Read Out Loud sequence is ``1"; then:<UL><LI>The second element is ``11" since we read the first element as ``One 1". </LI><LI>The third element is ``21" since we read the second element as ``Two 1". </LI><LI>The fourth element is ``1211" since we read the third element as ``One 2 Two 1". </LI><LI>The fifth element is ``111221" since we read the fourth element as ``One 1 One 2 Two 1". </LI><LI>The sixth element is ``312211" since we read the fifth element as ``Three 1 Two 2 One 1". </LI></UL><P>Here is the same sequence in linear form:<P><SPAN CLASS="MATH">1, 11, 21, 1211, 111221, 312211...</SPAN> <tex2html_verbatim_mark><P><P><BR>Your goal is to write a ``Read Out Loud" sequence generator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case consists of a single line containing the first term of the ``Read Out Loud" sequence, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and a term number, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Both numbers are non-negative integers, delimited by a white space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, the output is a single line containing the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>th term of the ``Read Out Loud" sequence based on the first term <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 6                                                               
9 7                                                               
14344 6                                                            
6386469 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
312211 
311311222119 
31131122211411131221232112132114
6386469
</PRE><P>
______________________________________________________
2627||||||false||||||
<P>
In the Journal of Recreational Mathematics for July 1968, L.D. Yarbrough introduced a new variant on the 
classic problem of the knight's tour. In addition to the rule that a knight touring a chessboard cannot visit 
the same cell twice (except for a final re-entrant move that in certain tours allows the knight to return to the 
starting square), the knight is also not permitted to cross its own path. (The path is taken to be a series of 
straight lines joining the centers of the beginning and ending squares of each leap).  

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2627a.eps}$
 -->
<IMG
 WIDTH="345" HEIGHT="281" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2627a.jpg
 ALT="\epsfbox{p2627a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The Knight moves in an L shape in any direction. It either moves two squares sideways and then one 
square up or down, or two squares up or down, and then one square sideways. The figure above illustrates 
valid squares (shaded) where the knight, K, can move. 

<P>

<P>
<BR>
A Knight tour starts from any square on the board and visits the most number of unique squares within the board without crossing its own path. In the figure below (where the chess board is 3-by-3), the Knight, 
starting on square K, can move to square 1 and then square 2, without crossing its path. Square 3 might be the next valid knight move but it crosses the path from K to square 1. Hence, the length of the uncrossed knight's tour is 2. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2627b.eps}$
 -->
<IMG
 WIDTH="153" HEIGHT="127" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2627a.jpg
 ALT="\epsfbox{p2627b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Given a square board of order <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, determine the longest uncrossed knight's tour. The starting point can be any point within the square. The square is divided into two axes, X (horizontal, increasing to the right) and 
Y (vertical, increasing downwards) with (0,0) on the upper-left corner of the square. Board squares are 
defined as an ordered pair <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN>
<tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> refers to the row while <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark> refers to the column. The maximum order 
of the square is 8. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input shall be in the form of: 

<P>
<PRE><TT>
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <SPAN  CLASS="textit">Order of the square board (always integral)</SPAN> 
<BR><TT>.</TT> 		 
<BR><TT>.</TT> 		 
<BR><TT>.</TT> 		 
<BR><TT>END</TT> 		     <SPAN  CLASS="textit">End of input data</SPAN> 
</TT></PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The order of the square board followed by the length of the tour and the path the knight took presented in 
the format shown below. See sample output format. Note that the solutions may not necessarily be unique. 
In cases of non-unique solutions, show only one. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                            

<P>
<PRE>
3                                       
4                                       
END
</PRE>                                      

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Order: 3                                          
Length: 2  
Path: (0,0), (1,2), (2,0) 
Order: 4 
Length: 5 
Path: (0,1), (2,0), (3,2), (1,3), (2,1), (0,2)
</PRE> 

<P>

______________________________________________________
2628||||||false||||||
<P>
Love is a many-splendored thing, or so they say. Many stories present such entangled love relations that it 
sickens anyone who tries to understand it. If one would study such entanglings (though one couldn't think 
of a reason why one would want to), a person can be in any of the 7 possible states: (assuming omniscience 
of all concerned)  

<P>
<DL COMPACT>
<DT>1.</DT>
<DD>Happy: if A loves B and only B, and B loves A and only A, <SPAN  CLASS="textit">then both A and B are happy</SPAN>.  
</DD>
<DT>2.</DT>
<DD>Loveless: if A loves no one, <SPAN  CLASS="textit">then A is loveless</SPAN>.  
</DD>
<DT>3.</DT>
<DD>Martyr: if A loves B and only B, and B loves A and one or more others, <SPAN  CLASS="textit">then A is a martyr</SPAN>.  
</DD>
<DT>4.</DT>
<DD>Philanderer: if A loves B and is loved back by B, and A also loves one or more others, <SPAN  CLASS="textit">then A is a        philanderer</SPAN>.  
</DD>
<DT>5.</DT>
<DD>Broken-hearted: if A loves B, and B is happy (see definition #1) or a philanderer (see definition #4), a martyr (see definition #3) or a narcissist (see definition #7), <SPAN  CLASS="textit">then A is broken-hearted</SPAN>.  
</DD>
<DT>6.</DT>
<DD>Hoping: if A loves B, and B is not loved back by the others B loves, and B does not love A, <SPAN  CLASS="textit">then A is hoping</SPAN>. 
</DD>
<DT>7.</DT>
<DD>Narcissist: if A loves oneself, <SPAN  CLASS="textit">then A is a narcissist</SPAN>.  
</DD>
</DL>

<P>
Precedence is decreasing from top to bottom (i.e. broken-heartedness takes precedence over hoping, and being a philanderer takes precedence over broken-heartedness). This means that a person cannot be in more than one state. 

<P>
Given a certain configuration of love relations, determine the people who are in each state.  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains one or more test cases. In each test case, the first line contains the number of people, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, and number of relations, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, involved. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines are the names of the people involved. The <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines following these shows the love relations. Love relation definitions are in the form `<TT><SPAN CLASS="MATH">&lt; <I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark> loves <SPAN CLASS="MATH">&lt; <I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark></TT>'. The number of people involved will not exceed 100. The input will be terminated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I> = 0</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
The output for each case displays the states of each person, which will be of the form:  

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH">&lt; <I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $<state \ of \ name1>$
 -->
<SPAN CLASS="MATH">&lt; <I>state</I>&nbsp;<I>of</I>&nbsp;<I>name</I>1 &gt;</SPAN>
<tex2html_verbatim_mark></TT> 
<BR><TT><SPAN CLASS="MATH">&lt; <I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $<state \ of \ name2>$
 -->
<SPAN CLASS="MATH">&lt; <I>state</I>&nbsp;<I>of</I>&nbsp;<I>name</I>2 &gt;</SPAN>
<tex2html_verbatim_mark></TT> 
<BR>. 
<BR>. 
<BR>.

<P>

<P>
<BR>
An empty line should separate the output for each test case. Output is to be sorted alphabetically ascending by name by set of output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>                                               

<P>
<PRE>
8,8                                                        
A                                                          
B                                                          
C                                                          
D                                                          
E                                                          
F                                                          
G                                                          
H                                                          
A loves B                                                  
B loves A  
B loves C  
C loves D  
D loves C  
E loves D  
F loves G  
H loves H 
1,1 
A 
A loves A 
0,0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A is Martyr 
B is Philanderer 
C is Happy 
D is Happy 
E is Broken-hearted 
F is Hoping 
G is Loveless 
H is Narcissist 
 
A is Narcissist
</PRE>  

<P>

______________________________________________________
2629||||||false||||||
<P>In graph theory, a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is a set of vertices <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> and a set of edges <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>. The edge set <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> contains ordered pairs of vertices <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are in the vertex set <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>. The presence of an edge <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> in the edge set denotes that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><P><BR>In an <SPAN CLASS="textbf">undirected</SPAN> graph, the presence of the edge <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> denotes that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and that <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is also adjacent to <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. An edge is a <SPAN CLASS="textbf">loop</SPAN> if both its vertices are identical (i.e. <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>). A <SPAN CLASS="textbf">simple</SPAN> graph contains no loops. A <SPAN CLASS="textbf">path</SPAN> is a set of vertices and edges <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>e</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>, <I>e</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>, <I>e</I><SUB>3</SUB>,...<I>e</I><SUB>n</SUB>, <I>v</I><SUB>(n+1)</SUB>)</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>...<I>v</I><SUB>(n+1)</SUB></SPAN> <tex2html_verbatim_mark> are in the vertex set <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> of a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB>...<I>e</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are in the edge set <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>e</I><SUB>1</SUB> = (<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I><SUB>2</SUB> = (<I>v</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>),..., <I>e</I><SUB>n</SUB> = (<I>v</I><SUB>n</SUB>, <I>v</I><SUB>n+1</SUB>)</SPAN> <tex2html_verbatim_mark>. A graph is <B>connected</B> if there exists a path from vertex <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> to another vertex <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> for any two distinct vertices <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> in the vertex set of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR>Given a simple, undirected and connected graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, determine the maximum number of edges that can be removed from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> given that <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> should remain connected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains one or more test cases. For each case, the first line contains the number of vertices, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and the number of edges, <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark>, in the graph. The following <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> lines contain vertex pairs <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, which denote the edges connecting the vertices, labeled as <SPAN CLASS="MATH">1, 2, 3,..., <I>n</I></SPAN> <tex2html_verbatim_mark>. The input will be terminated by <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program should return the maximum number of edges that can be removed from graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, one line per output. Leading or trailing white space characters are not allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4,6                                                               
1,2                                                               
1,3  
1,4  
2,3  
2,4  
3,4 
3,3 
1,2 
1,3 
2,3 
0,0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1
</PRE><P>
______________________________________________________
2630||||||false||||||
<P>Aviabotics Inc. is a company that specializes in smart electronic toys. For this coming Christmas season, Aviabotics plans to rollout its latest electronic pet parrot toy named Yappie.<P><P><BR>Yappie basically repeats English sentences that it hears, as real parrots would do. For the cheaper version of the toy, only the following English grammar rules are allowed:<P><OL><LI>Subject + Verb To Be (i.e., IS or ARE) + Adjective or Adjective Verb<P><PRE><TT>
		 Examples: 		 A perfume is fragrant. 
<BR>
Belle is smiling. 
<BR>
The rock band members are adulated. 
</TT></PRE><P></LI><LI>Subject + Intransitive Verb<P><PRE><TT>
		 Examples: 		 The cat purrs. 
<BR>
The snake swallows.  
<BR>
A dog barks. 
</TT></PRE><P></LI><LI>Subject + Transitive Verb + Object<P><PRE><TT>
		 Examples: 		 The python swallows the cow. 
<BR>
The butcher cuts the meat. 
<BR>
The cat eats the rat. 
</TT></PRE><P></LI><LI>Subject or Object may contain an adjective and/or an adjective phrase that starts with THAT.<P><PRE><TT>
		 Example: 		 The black cat that purrs eats the rat that stinks.  
<BR>
</TT></PRE><P></LI><LI>The articles THE, A, AN may or may not be used. </LI></OL><P>When a person speaks multiple sentences, Yappie tries to combine statements as much as it can. Sentence combination takes place according to the following rules in decreasing priority:<P><DL><DT><STRONG>Rule 1.</STRONG></DT><DD>Statements of the form Subject-IS/ARE-Adjective are added into the statement of the form Subject-Transitive Verb-Object. (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The python is humongous. 
<BR>
The cow is spotted. 
<BR>
The python swallows the cow. 
<BR>
Yappie's Response: The humongous python swallows the spotted cow. 
</TT></PRE><P></DD><DT><STRONG>Rule 2.</STRONG></DT><DD>Statements of the form Subject-IS/ARE-Adjective are added into the statement of the form Subject-Intransitive Verb. (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The computer is old. 
<BR>
The computer crashes. 
<BR>
The computer is idiot. 
<BR>
Yappie's Response: The old idiot computer crashes. 
</TT></PRE><P></DD><DT><STRONG>Rule 3.</STRONG></DT><DD>When all statements with common Subject or Object are only of the form Subject-IS/ARE- Adjective, they are all combined into Subject-IS/ARE-Adjective with the last adjective preceded by ``AND". (The order of the adjectives in the combined statement follows the order of the statements from where they come from).<P><PRE><TT>
Example: 		 		 The cat is furry. 
<BR>
The cat is fat. 
<BR>
The cat is dirty. 
<BR>
Yappie's Response: The cat is furry, fat, and dirty. 
</TT></PRE><P></DD><DT><STRONG>Rule 4.</STRONG></DT><DD>When statements are of the form Subject-Transitive Verb-Object, they are combined such that one statement becomes the main sentence, and the other modifies the common Subject or Object by ``THAT". (The first statement that appears becomes the main sentence).<P><PRE><TT>
Example: 		 		 The big fish eats the medium fish. 
<BR>
The medium fish eats the small fish. 
<BR>
The small fish bites the big fish. 
<BR>
Yappie's Response:  The big fish eats the medium fish that eats the small fish that bites 
<BR>
the big fish. 
</TT></PRE><P></DD><DT><STRONG>Rule 5.</STRONG></DT><DD>Statements of the form Subject-Intransitive Verb are combined into any other statement form by using THAT<P><PRE><TT>
Example: 		 		 The dog bites the cat. 
<BR>
The cat purrs. 
<BR>
The dog barks. 
<BR>
Yappie's Response:  The dog that barks bites the cat that purrs. 
</TT></PRE><P></DD><DT><STRONG>Rule 6.</STRONG></DT><DD>Combinations of statements not stated above are simply repeated.<P><PRE><TT>
Example: 		 		 The snake slithers. 
<BR>
The snake swallows. 
<BR>
Yappie's Response: 		 		 The snake slithers. 
<BR>
The snake swallows. 
</TT></PRE><P></DD></DL><P>Write a program firmware that can be embedded in Yappie's memory, in time for the Christmas season.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains only one test case. A series of any number of statements each of which can be either of two types. The first type starts with the keyword `<TT>VERBS</TT>' followed by a colon (`<TT>:</TT>') and a list of transitive or intransitive verbs other than ``IS" or ``ARE". The verbs are delimited by a comma (`<TT>,</TT>'). The second type contains one or more ordinary English statements, terminated by periods (`<TT>.</TT>'), whose format is as described in the 5 grammar rules. The input always terminates with the word ``END".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>A combined sentence or a group of combined sentences (in any order) whose form follows the results of applying the 6 indicated combination rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
VERBS: bites,crashes,purrs 
VERBS: barks 
The dog is long-eared. 
The cat is furry. The computer is idiot. Snakes slither. 
The rat is small. 
VERBS: slither 
The cat is fat. 
The rat is gray. 
The dog bites the cat. The rat is stinking. 
The cat purrs. The computer crashes. 
The dog barks. 
The rat is stinking. 
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The long-eared dog that barks bites the furry fat cat that purrs. 
The idiot computer crashes. 
The rat is small, gray, and stinking. 
Snakes slither.
</PRE><P>
______________________________________________________
2631||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="819" HEIGHT="367" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/p2631.jpg ALT="\epsfbox{p2631.eps}"> <tex2html_verbatim_mark></DIV><P>Two polygons are similar if you can obtain the second polygon by a combination of scaling, rotating and flipping operations on the first polygon.<P>Your task is to determine if two given polygons are similar.<P>You are given two polygons whose sides are all horizontal and vertical lines. You are to determine if the two polygons are similar.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains one or more test cases. Each case contains two polygon definitions. A polygon definition is the number of the vertices of the polygon in the first line, followed by an ordered pair <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> of the vertices for the following lines. Format for each test case is shown below:<P><P><BR><!-- MATH
 $<number \ of \ vertices \ (n) \ of \ polygon \ 1>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>vertices</I>&nbsp;(<I>n</I>)&nbsp;<I>of</I>&nbsp;<I>polygon</I>&nbsp;1 &gt;</SPAN> <tex2html_verbatim_mark><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>2</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR>.<BR>.<BR>.<BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>n</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><!-- MATH
 $<number \ of \ vertices \ (m) \ of \ polygon \ 2>$
 --><SPAN CLASS="MATH">&lt; <I>number</I>&nbsp;<I>of</I>&nbsp;<I>vertices</I>&nbsp;(<I>m</I>)&nbsp;<I>of</I>&nbsp;<I>polygon</I>&nbsp;2 &gt;</SPAN> <tex2html_verbatim_mark><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>1</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>2</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><BR>.<BR>.<BR>.<BR><TT><SPAN CLASS="MATH">&lt; <I>x</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I><SUB>m</SUB> &gt;</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Input is terminated by `<TT>0</TT>'.<P><P><BR>You can assume that the polygon resulting from connecting the vertices in sequence has only horizontal and vertical lines, and that the polygon formed is simple (i.e. it has no intersecting or overlapping edges).<P>All vertex coordinates are integers, ranging from -30000 to +30000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output `<TT>YES</TT>' if the polygons are similar; `<TT>NO</TT>', if otherwise -- one line per test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6                                                           
0,0                                                         
0,2  
1,2  
1,1  
2,1  
2,0  
6  
0,0  
0,2  
-1,2  
-1,1  
-2,1  
-2,0  
4  
0,0  
1,0  
1,1  
0,1  
4  
0,0  
2,0  
2,1  
0,1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
NO
</PRE><P>
______________________________________________________
2632||||||false||||||
<P>
From her San Francisco flat, Zoe just received an email from her brother, Echo, who lives in Manila. She wanted to send an urgent reply but knows that Echo is often doing his rounds in the hospital. She needs a service to convert email to a message that can be sent via short-messaging service (SMS) to Echo's mobile phone. You need to write a program that shall convert email to SMS. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains one or more cases and each one is of the form: 

<P>

<P>
<BR>

<TT>TO</TT> 
<BR><!-- MATH
 $<email \ address>$
 -->
<SPAN CLASS="MATH">&lt; <I>email</I>&nbsp;<I>address</I> &gt;</SPAN>
<tex2html_verbatim_mark> 
<BR>. 
<BR>. 
<BR>. 
<BR><TT>MESSAGE</TT> 
<BR><SPAN CLASS="MATH"><I>text</I></SPAN>
<tex2html_verbatim_mark> 
<BR><TT>END</TT>

<P>

<P>
<BR>
where <!-- MATH
 $<email \ address>$
 -->
<SPAN CLASS="MATH">&lt; <I>email</I>&nbsp;<I>address</I> &gt;</SPAN>
<tex2html_verbatim_mark> refers to a recipient of the message and <SPAN CLASS="MATH"><I>text</I></SPAN>
<tex2html_verbatim_mark> refers to the message itself. 

<P>
There can be more than one recipient for each case. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each case, show the equivalent SMS message(s). Each SMS message is of the form: 

<P>

<P>
<BR>

<!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH"><I>message</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
where <!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> is the destination cellphone number, <SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark> is the SMS Center, which is the email address domain, and <SPAN CLASS="MATH"><I>message</I></SPAN>
<tex2html_verbatim_mark> is a fifty (50) character message.

<P>

<P>
<BR>
Note that each SMS message can only accommodate fifty (50) characters of data, exclusive of the 
<!-- MATH
 $cellphone \ number$
 -->
<SPAN CLASS="MATH"><I>cellphone</I>&nbsp;<I>number</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>smsc</I></SPAN>
<tex2html_verbatim_mark>. Email messages are subdivided into smaller messages of fifty (50) 
characters each before sending it via SMS. Words, however, cannot be split. 

<P>
An empty line separates the output of the test cases. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
TO 
&lt;+639199202002@manilatel.com&gt; 
MESSAGE 
Hello Echo! Please tell Oz to send me money asap. 
I need it to pay for plane fare from NY to London on a 
Concorde. Tell me when he already wired it. Thanks. 
END 
TO 
&lt;+669178408040@thaitel.com&gt; 
&lt;+852435123100@telhk.com&gt; 
&lt;+639199292299@cebutel.net&gt; 
MESSAGE 
Happy New Year! 
END
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
+639199202002 
manilatel.com 
Hello Echo! Please tell Oz to send me money asap. 
+639199202002 
manilatel.com 
I need it to pay for plane fare from NY to London 
+639199202002 
manilatel.com 
on a Concorde. Tell me when he already wired it. 
+639199202002 
manilatel.com 
Thanks. 

+669178408040 
thaitel.com 
Happy New Year! 
+852435123100 
telhk.com 
Happy New Year! 
+639199292299 
cebutel.net 
Happy New Year!
</PRE>  


______________________________________________________
2633||||||false||||||
From our previous contest, we know that Kamran the Believer inherited many of his grandpa's belongings. Apparently,
his grandpa had been a mathematician in his life with interests in puzzle solving, since he has made Kamran solve
another programming problem!

<P>
Grandpa had a big garden with many valuable walnut trees. He has written in his will that Kamran can inherit one
piece of square shaped land of a given size in the garden, such that its sides be parallel to the x and y axes.
Taking advantage of the fact that no other restrictions have been mentioned in the will, Kamran wants to choose
the land in which the most number of trees lie. Kamran is too wealthy now and thus too lazy to spend time and solve
another algorithmic problem. He has hired you to solve this problem for him.

<P>
You are given the location of all trees in the big garden and the size of the land to choose. You are to write a
program to find out where to choose the land so that the most number of trees lie in it. You may consider trees
as points in the plane and the land as a square. You are to find the position of the square such that it includes
as many points as possible. Note that the points on the border of the square are considered to be inside it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le n \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">100</SPAN>), the
number of trees, and an integer <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $1 \le r \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>r</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">1000</SPAN>), the length of the land's side, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each
containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>
(<!-- MATH
 $0 \le x, y \le 100,000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2633img1.gif
 ALT="$ \le$">100, 000</SPAN>) representing the coordinates of a walnut tree. Note that all coordinates are pairwise distinct.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the maximum number of trees that Kamran can own.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
3 1
1 2
2 1
4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
2
</PRE>

<P>

______________________________________________________
2634||||||false||||||
cAfshung-Pizza chain, a door-to-door pizza delivery service for Hamedung, a Sildavya district, needs your help for
fastest possible pizza delivery plan. With a GIS device that shows all streets of the Hamedung, each delivery boy
can find a fast route to deliver the pizza to the place of order. The Elyasung Company that sells and supports
this GIS device needs your help to reprogram the device to provide even a faster route plan.

<P>

<P>
<BR>
Hamedung is a rectangular shape district with many two-way streets that are all rectilinear.  To show the map,
the GIS device uses text characters as shown in the sample test data. In this format, each one kilometer of a
street is shown by a dash (<TT>-</TT>) or a pipe (<TT><code>|</code></TT>) showing that the street is either in west-east or
in north-south
direction.  A plus (<TT>+</TT>) on the map indicates a sharp 90 degree turn (with length zero) on that position without
any traffic light. All such turns are marked with `<TT>+</TT>'. An intersection is shown by an integer <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> on that position.
<SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> is the timing of the traffic light at that intersection which can be either three or four way. To have a smooth
and accident-free district, the municipality of Hamedung has forced that every traffic light has only one green
light and two or three red lights for three or four intersections respectively. One of the lights in that
intersection remains green for <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> minutes (i.e., during <!-- MATH
 $[x, x + \tau)$
 -->
<SPAN CLASS="MATH">[<I>x</I>, <I>x</I> + <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$">)</SPAN> time for some <SPAN CLASS="MATH"><I>x</I></SPAN>) and others are red. In
the next <SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \tau$"></SPAN> minutes, one other direction turns green as if the green light turns counter clockwise. This rule
is observed in all intersections.

<P>

<P>
<BR>
The time is set to zero at the beginning when the delivery boy starts moving. At this time, all traffic signals
are set such that only the southern light (or the northern light if no southern light exists) of each intersection
is set to green, and other lights at this intersection are set to red.

<P>
Note that the only positions that the driver can change his direction are: a turn (<TT>+</TT>), or an intersection
(represented by a digit). As an example, if we have a pattern like `<TT>-<code>|</code>-</TT>' in the map, the driver cannot cross
the pipe if he is moving from left to right or right to left, neither can he turn left or right, since there
is no intersection at this location.

<P>

<P>
<BR>
Given the complete map described above, the location of an Afshung-Pizza branch, marked by <TT>S</TT>, and the location
of the final delivery place, marked by <TT>D</TT>, you are to write a program for GIS device to automatically find the
fastest possible route to deliver pizza from <TT>S</TT> to <TT>D</TT>. Note the following assumptions:

<P>

<UL>
<LI><TT>S</TT> and <TT>D</TT> are parts of a street (replacing either a <TT>-</TT> or <TT><code>|</code></TT>)
</LI>
<LI><TT>S</TT> and <TT>D</TT> are not adjacent to any intersection or turn.
</LI>
<LI><TT>S</TT> and <TT>D</TT> are not adjacent to each other.
</LI>
<LI>Intersections and/or turns are at least one kilometer apart.
</LI>
<LI>`<TT>S</TT>', `<TT>D</TT>', `<TT>+</TT>', and each digit have zero kilometer length.
</LI>
<LI>Speed of delivery boy is one kilometer per minute.
</LI>
<LI>Traffic that faces a green light can move in all directions. No straight move or turns are allowed at red light.
</LI>
<LI>There is no traffic jam or other obstacles on the way.
</LI>
<LI>Asterisk characters (<TT>*</TT>) show the border of the district.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by the
input data for each test case. The first line of each test case contains two integer numbers: <SPAN CLASS="MATH"><I>N</I></SPAN> (<!-- MATH
 $1 \le N \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">100</SPAN>) the
number of rows of the map, and <SPAN CLASS="MATH"><I>M</I></SPAN> (<!-- MATH
 $2 \le M \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2634img1.gif
 ALT="$ \le$">100</SPAN>) the number of columns of the map. Followed by the first line,
there will be <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing a string of length <SPAN CLASS="MATH"><I>M</I></SPAN>, consisting of `<TT>-</TT>', `<TT><code>|</code></TT>', `<TT>+</TT>',
 `', `<TT>*</TT>', `<TT>S</TT>', `<TT>D</TT>' or
digits from `<TT>1</TT>' to `<TT>9</TT>'. Also, assume that the total number of intersections and turns (<TT>+</TT>) is at most 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line in the output per test case containing a single number, the minimum time to drive
from <TT>S</TT> to <TT>D</TT>, if there exists, otherwise the word `<TT>impossible</TT>' (with lower-case letters).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
10 10
**********
*-D-3---+*
*   |   |*
*   | +-+*
*   |-|  *
*---4-1- *
*   | |  *
*   | |  *
*S--2-+  *
**********
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
15
</PRE>

<P>

______________________________________________________
2635||||||false||||||
The Ministry of housing is planning a huge construction project of several housing complexes. Each complex
includes several apartments to be sold to government employees at reasonable prices. The ministry has located
several big mÃ—n pieces of land that can potentially be used for such construction project; one complex in each
land. The lands are all rectangular, each with <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> number of <!-- MATH
 $1 \times 1$
 -->
<SPAN CLASS="MATH">1&#215;1</SPAN> square blocks.
All housing complexes are <!-- MATH
 $h \times w$
 -->
<SPAN CLASS="MATH"><I>h</I>&#215;<I>w</I></SPAN> rectangles covering exactly <!-- MATH
 $h \times w$
 -->
<SPAN CLASS="MATH"><I>h</I>&#215;<I>w</I></SPAN> blocks of each containing land.

<P>

<P>
<BR>
The problem is that there are originally some old buildings, each covering exactly one block of a land, making
it impossible to locate enough free space for all the complexes in order to start the project. Therefore, the
ministry has to buy some of these buildings, and demolish them to free the needed space. The old buildings
belong to certain number of people. These people are angry of the possibility that their building may be bought
and demolished, especially because the government usually pays much less for their buildings compared to the
open market prices.

<P>

<P>
<BR>
In response to the protests, the ministry announces a ``fair" decision that if it buys some buildings in one
land, it will only choose those that belong only to one owner, and will buy all of them at reasonable price.
And, it promises not to buy buildings belonging to the same owner in other lands. Note that with this constraint,
there may be some lands in which building a complex is impossible. Trying to keep its promises, the ministry has
asked you to write a program to see how many housing complexes can be constructed at most with these conditions.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains five integers <SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $1 \le k \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">30</SPAN>), the
number of lands, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $1 \le m, n \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>m</I>, <I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">50</SPAN>), the number of rows and columns in each land respectively, and <SPAN CLASS="MATH"><I>h</I></SPAN>
and <SPAN CLASS="MATH"><I>w</I></SPAN> (<!-- MATH
 $1 \le h, w \le 50$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$"><I>h</I>, <I>w</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2635img1.gif
 ALT="$ \le$">50</SPAN>), the number of rows and columns a complex occupies. After the first line, there are
<!-- MATH
 $k \times m$
 -->
<SPAN CLASS="MATH"><I>k</I>&#215;<I>m</I></SPAN> lines in the input, representing <SPAN CLASS="MATH"><I>k</I></SPAN> lands, each by an <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> matrix. Each line contains a string of
length <SPAN CLASS="MATH"><I>n</I></SPAN> with no leading or trailing spaces. Each character in the strings represents a block in the land and may be an
upper case alphabetic character `<TT>A</TT>'..`<TT>Z</TT>', indicating the owner of the block, or the character `<TT>0</TT>'
indicating the block is free.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the maximum number of housing complexes that can be
constructed for that test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
3 4 3 3 2
A0B
000
0A0
00B
AA0
00B
0B0
000
A0A
000
B00
B00
3 4 3 3 2
A0B
000
0A0
00B
AA0
00B
0B0
000
A0A
000
0B0
B00
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
2
</PRE>

<P>

______________________________________________________
2636||||||false||||||
It is said that court intrigues started with people lying about other people, and then lying about other
people's lying, and so it went. The intriguers constantly looked for scapegoat who inevitably proved to
be someone with the least power, though not always the least morality.

<P>
We have faced a similar problem, but this time, in our malfunctioning spacecraft! There are a number of units
in the spacecraft. The units are so reliable that it would surprise us very much if more than one unit were
faulty. If more than one is faulty, we would lose the probe, so we are sure that exactly one unit is faulty
in our spacecraft.

<P>

<P>
<BR>
We know that each unit checks exactly two others, and each unit will be checked by at least one other unit.
A good unit will give accurate diagnosis of the units it checks. For example, if unit X is good and it says
that Y is faulty and Z is good, then, in fact, Y is faulty and Z is good. However, a bad unit is unreliable.
So, if unit X is faulty and makes the same statements, then Y may or may not be good, and Z may or may not be
good either. Note that a unit cannot check itself.

<P>
Now suppose that you have the reports from all units and your duty is to find which unit is indeed faulty.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $3 \le n \le 100$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2636img1.gif
 ALT="$ \le$">100</SPAN>), the
number of units, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines each describing a unit and the result of its checks. The line starts with
a positive integer number which shows the identification number of the unit. After the id number, there are two
pairs of checked unit id's and check results. A check result is a single character which is either `<TT>Y</TT>' or `<TT>N</TT>',
showing whether the result of checking is good or faulty respectively. As an example, the fourth line in the Sample Input
section shows that <EM>unit 16 has checked unit 8 saying it is good, and has checked unit 32 saying it is faulty</EM>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing either the id number of the faulty unit, or the word
`<TT>impossible</TT>' (with lower-case letters), if it is impossible to find the faulty unit from the input data.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
5
2 16 Y 32 N
16 8 Y 32 N
32 8 N 4 Y
8 4 Y 2 Y
4 2 Y 16 Y
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
32
</PRE>

<P>

______________________________________________________
2637||||||false||||||
The RB Company is one of the pioneering companies in making electronic boards. This company has recently
faced a difficult problem to solve in designing its special power boards. Each power board is a flat plastic
plate with special red and/or blue colored plugs on it. The blue plugs are recognized as null poles, and the
red ones are phase poles. This company's special design requires that all the blue plugs should be
inter-connected with straight lines to make a simple blue polygon. All vertices of the resulting polygon
should be blue plugs, and any blue plug should be a vertex of this polygon. With similar conditions, all
the red plugs should make a red polygon. You may assume that no three plugs of the same color are co-linear,
i.e. lie on one line.

<P>

<P>
<BR>
The design problem is that safety precautions require that there should be no red and blue polygon intersections;
otherwise a disastrous explosion would be inevitable. This happens when the two polygons have non-empty intersection.
The RB engineers have realized that some configurations of red and blue plugs makes it impossible to have
non-intersecting red and blue polygons. They consider such configurations disastrous. Your task is to write
a program to help the RB engineers recognize and reject the disastrous configurations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 5$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$">5</SPAN>), the number of test cases, followed
by the input data for each test case. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>r</I></SPAN> (<!-- MATH
 $3 \le b, r < 10$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2637img1.gif
 ALT="$ \le$"><I>b</I>, <I>r</I> &lt; 10</SPAN>),
the number of blue and red plugs respectively, followed by <SPAN CLASS="MATH"><I>b</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing
the coordinates of a blue plug followed by <SPAN CLASS="MATH"><I>r</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> representing the coordinates
of a red plug. Note that all coordinates are pairwise distinct and are in range 0 to 100,000 inclusive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing `<TT>YES</TT>' if there exist non-intersecting polygons or `<TT>NO</TT>'
otherwise.
The output is considered to be case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
4 4
2 2
4 2
2 4
1 1
2 5
2 6
3 3
1 3
3 3
1 1
3 1
2 3
2 2
1 4
3 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YES
NO
</PRE>

<P>

______________________________________________________
2638||||||false||||||
``Sigh! Where are those good old bloody days?" Pondered Bob, the old shark, the former slayer of the deep blue
waters, with his tears joining the infinite water of the ocean. Butchering for years, Bob's teeth has lost their
regular shape, and the poor old shark is now in trouble closing his jaws. He wants to program his PDA to help him
find the shape of his teeth when his jaws are closed and we want to help him write this program!

<P>
We name the sequence of Bob's lower teeth as LT and the sequence of his upper teeth as UT. For the sake of simplicity,
consider LT as a sequence of adjacent equilateral triangles (i.e., with equal sides). All bases of the triangles
lie on the same horizontal straight line. UT has a similar structure, except that the triangles are upside-down (Figure 1).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p2638.eps}$
 -->
<IMG
ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="\epsfbox{p2638.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 1. Snapshot of Bob's teeth!

</DIV>

<P>
Assume the left endpoint of the base of the leftmost tooth in LT has the coordinates <SPAN CLASS="MATH">(0, 0)</SPAN>, so the bases of
all triangles in LT lie on the <SPAN CLASS="MATH"><I>x</I></SPAN> axis. We name the left end point of the base of the leftmost tooth in UT,
the <EM>reference point</EM>. Initially, the coordinates of the reference point is given such that:

<P>

<UL>
<LI>The tip of no two teeth in LT and UT have the same <SPAN CLASS="MATH"><I>x</I></SPAN> coordinates,
</LI>
<LI>UT is above LT, i.e. the <SPAN CLASS="MATH"><I>y</I></SPAN> coordinate of the reference point is greater than zero,
</LI>
<LI>LT and UT do not overlap at any point.
</LI>
</UL>

<P>
Given a placement of UT and LT conforming to the above conditions, UT starts falling downward such that the base
of the triangles remain horizontal during its fall, i.e. UT does not rotate. UT continues to fall, until it
touches some point in LT. At this time, UT slides downward (to the left or right) over LT until it cannot slide
any further. During this motion, LT is fixed and UT never rotates. Note that UT may have an initial position such
that it slides downward either from left or right, and falls below LT (Imagine the old shark in that state!).
Also it is possible that the tips of some upper teeth finally pass the line <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> (the Dracula-style!).
Your program should determine whether UT falls down from left or right, or otherwise, finds the final position
of the reference point after it stops moving.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>), the number of test cases, followed by
the input data for each test case. The first line of each test case contains integer <SPAN CLASS="MATH"><I>L</I></SPAN> (<!-- MATH
 $1 \le L \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>) the number of
triangles in LT, followed by <SPAN CLASS="MATH"><I>L</I></SPAN> lines each describing a triangle in LT, containing one integer number
<SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH
 $1 \le b \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">100</SPAN>),
the side of the triangle. The next line of the input consists of three numbers <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN>, and <SPAN CLASS="MATH"><I>U</I></SPAN>. The first two numbers
are the initial <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> coordinates of the reference point and are arbitrary real numbers. <SPAN CLASS="MATH"><I>U</I></SPAN> is the number of
triangles in UT (<!-- MATH
 $1 \le U \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>U</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">10</SPAN>). After this line, there are <SPAN CLASS="MATH"><I>U</I></SPAN> lines each describing a triangle in LT, containing
one integer number <SPAN CLASS="MATH"><I>b</I></SPAN> (<!-- MATH
 $1 \le b \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$"><I>b</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/p2638.jpg
 ALT="$ \le$">100</SPAN>), the side of the triangle.

<P>
In order to avoid floating-point arithmetic errors, you may assume that the input has the property that during
the motion of UT, the distance between tips of any two triangles in LT and UT is never less than 0.1.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing a pair of real numbers, rounded to three digits after decimal
point, which are <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the reference point after UT stops moving. If UT falls down from left
of LT, the output line should contain the word `<TT>WM</TT>', and if it falls down from the right of LT, it should be `<TT>MW</TT>'.
The output is considered to be case-sensitive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
10
10
2 20 2
10
10
1
10
50 50 1
10
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
5.000 8.660
MW
</PRE>

<P>

______________________________________________________
2639||||||false||||||
It had been a year since Swamp County Computing established a functional programming group. Your
(non-functional programming) group is going to throw a surprise party for the anniversary. Now the functional
folks really like skew binary numbers for some reason. ``Easy to increment and decrement!" they say. Your task
is to write a program to convert decimal integers to skew binary in the format they like. This will help in making
banners and other party material.

<P>

<P>
<BR>
Number representations are made up of a list of digits. Call the lowest order digit the rank 0 digit, the next,
rank 1, etc. For example, in decimal representation, digits are 0-9,  the rank 0 digit has weight 1, the rank 1
digit has weight 10, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">10<SUP>i</SUP></SPAN>. In binary representation, the digits are 0 and 1, and
the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit has weight <SPAN CLASS="MATH">2<SUP>i</SUP></SPAN>. In skew binary representation, the digits are 0, 1, and 2, and the rank <SPAN CLASS="MATH"><I>i</I></SPAN> digit
has weight <SPAN CLASS="MATH">2<SUP>i + 1</SUP> - 1</SPAN>.

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER RULES=GROUPS>
<COL ALIGN=CENTER><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
Rank  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  Weight </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
1    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
2    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
3    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 15 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
4    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 31 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
5    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 63 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
6    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 127 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
7    </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 255 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \vdots$"></SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \vdots$"></SPAN></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
Allowing the digit 2 in the skew binary means there may be several ways to represent a given number. However the
convention is that the digit 2 may only appear as the lowest rank non-zero digit. This makes the representation unique.

<P>
In this problem, you should use a special way to write skew binary numbers as a list of ranks of non-zero digits
in the number. The digit 2 is represented by the rank of the digit appearing twice in the list. Note that this
means that <EM>only</EM> the first two ranks in the list may be equal.

<P>
Each rank is a decimal integer, and is separated from the next rank by a comma (`<TT>,</TT>'). A list is started by a `<TT>[</TT>'
and ended by a `<TT>]</TT>'. For example, the decimal number 5, which has the skew representation 12, should be written
as <TT>[0,0,1]</TT>. Decimal 0 is an empty list: <TT>[]</TT>.

<P>
Input consists of decimal numbers, one per line,

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains a single integer <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $1 \le t \le 10$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \le$"><I>t</I><IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/26/2639img1.gif
 ALT="$ \le$">10</SPAN>), the number of test cases, followed
by <SPAN CLASS="MATH"><I>t</I></SPAN> lines, each containing a single decimal number with no leading or trailing white space. Each number will
be in the range 0 ...100663270 (inclusive).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
There should be one line per test case containing the input decimal number, with no leading zeros or spaces,
a single space, and the skew binary equivalent in list format with no leading or trailing spaces. Within the
list each rank should have no extra leading zeros or leading or trailing spaces.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
0
1
2
3
4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0 []
1 [0]
2 [0,0]
3 [1]
4 [0,1]
</PRE>

<P>

______________________________________________________
2640||||||false||||||
<P>Your chemistry lab instructor is a very enthusiastic graduate student who clearly has forgotten what their undergraduate Chemistry 101 lab experience was like. Your instructor has come up with the brilliant idea that you will monitor the temperature of your mixture every minute for the entire lab. You will then plot the rate of change for the entire duration of the lab.<P>Being a promising computer scientist, you know you can automate part of this procedure, so you are writing a program you can run on your laptop during chemistry labs. (Laptops are only occasionally dissolved by the chemicals used in such labs.) You will write a program that will let you enter in each temperature as you observe it. The program will then calculate the difference between this temperature and the previous one, and print out the difference. Then you can feed this input into a simple graphing program and finish your plot before you leave the chemistry lab.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input is a series of temperatures, one per line, ranging from -10 to 200. The temperatures may be specified up to two decimal places. After the final observation, the number 999 will indicate the end of the input data stream. All data sets will have at least two temperature observations.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Your program should output a series of differences between each temperature and the previous temperature. There is one fewer difference observed than the number of temperature observations (output nothing for the first temperature). Differences are always output to two decimal points, with no leading zeroes (except for the ones place for a number less than 1, such as 0.01) or spaces.<P>After the final output, print a line with `<TT>End of Output</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10.0
12.05
30.25
20
999
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2.05
18.20
-10.25
End of Output
</PRE><P>
______________________________________________________
2641||||||false||||||

<P>
The recent improvements in robotics have allowed archaeologists to
explore previously unknown areas of the pyramids in Egypt.  You have
been commissioned to write a program to help one of these robots
navigate.  To deal with some of the winding passages and the thick
stone that absorbs radio waves, the robot will need its own
autonomous navigation.  You must develop a way for the robot to
navigate itself out of mazes it may find itself in using only its
vision of nearby walls.

<P>
Your solution will be a program that selects a path to navigate the
robot out of a maze.  The challenging part of this problem is that
your program must be interactive.  At each step the program will be
given a description of the spaces surrounding the robot.  Your program
must then decide the direction in which to move, send the command to
the robot, and read in the description of the spaces around the robot
after the move.

<P>
For convenience, the maze is a Cartesian grid.  Each space on the grid
is empty space (` '), a stone wall (<code>X</code>), or a space outside the
maze (<code>O</code>) (the letter, not the digit).  The description of the
space your robot receives will be a 3x3 grid, with your robot in the
center denoted by a <code>+</code>.  The maze is at most <!-- MATH
 $100\times 100$
 -->
<SPAN CLASS="MATH">100&#215;100</SPAN>
squares.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Example</A>&nbsp;</FONT>
</H2>
As an example, consider the following maze that your robot is
currently in (your robot will not receive this as input):
<PRE>
OOOOOOOOOO
OXXXXXXXXO
OXXXX XXXO
O      +XO
OXXXX XXXO
OXXXXXXXXO
OOOOOOOOOO
</PRE>
The first input your program receives is the area surrounding its
starting location:
<PRE>
XXX
 +X
XXX
</PRE>
Your program issues a direction to move, by outputting one of
<code>N</code>, <code>S</code>, <code>E</code>, or <code>W</code> followed by a newline.  You
may only move in one of these four directions.  Your program outputs
its movement and then receives the next set of surrounding squares (your
program's output is indicated by <code>&gt;</code> and its input indicated by
<code>&lt;</code>.  You should not expect or generate these characters.  They
are for illustration in this example only.)
<PRE>
&gt;W
&lt; XX
&lt; +
&lt; XX
&gt;W
&lt;X X
&lt; +
&lt;X X
</PRE>

<P>
Your program must continue until it issues the instruction that moves
the robot onto an <code>O</code> square.  There will be a valid path from
your robot's start position to an O square.  An invalid move into a
wall (<code>X</code>) will result in an ``Incorrect Output'' judgment.

<P>
Your robot may be started at any empty position inside the maze.


______________________________________________________
2642||||||false||||||
<P>It's a simple requirement your company has, really--every document should be spell-checked before it's sent out to a customer. Unfortunately, while word processing documents are easily spell-checked, your employees have not been checking email every time they send out a message. So you've come up with a little improvement. You are going to write a program that will check email on its way out. You will spell-check each message, and if you find any spelling errors, it will be returned to the sender for correction.<P>When you announced this plan, one of your coworkers fell off their chair laughing, saying that you couldn't possibly anticipate every name, technical acronym, and other terms that might appear in an email. Undaunted, however, you are going to test-run your code with an online dictionary and some sample emails you have collected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of two sections, the dictionary and the emails. The first line of input specifies the number of words in the dictionary, followed by that many lines, with one word per line. There is no whitespace before, after, or in any words, although there may be apostrophes or hyphens in the words, which are considered part of the word (i.e.&nbsp;``<TT>bobs</TT>'' is different than ``<TT>bob's</TT>''. There will be no duplicate words. All words will be in lower case.<P>Following that are the emails. The first line of this section has the number of emails in the input. Following that line begins the first email. It has been preprocessed, so it consists of one word per line, with no punctuation (other than apostrophes and hyphens) or whitespace, and all words are in lower case. The last word in the email is followed by a line with only `<TT>-1</TT>'. Each email will have at least one word.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each email, you must either print:<P><P><BR><TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is spelled correctly.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>X</I></SPAN> begins with 1 and counts up. Or, if a word is found that is not in the dictionary, print out:<P><P><BR><TT>Email <SPAN CLASS="MATH"><I>X</I></SPAN> is not spelled correctly.</TT><P><P><BR>followed by a list of unknown words in the order that you find them, one per line. If an unknown word is found multiple times, it should be printed multiple times.<P>There are no spaces between datasets. Following the output for the final dataset, print a line stating `<TT>End of Output</TT>'<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6
alice
am
bitterly
i
leaving
you
1
dear
bob
i
am
leaving
you
bitterly
alice
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Email 1 is not spelled correctly.
dear
bob
End of Output
</PRE><P>
______________________________________________________
2643||||||false||||||
<P>Many techniques for compressing digital graphics focus on identifying and describing regions of a single uniform character. Here is a simple technique for compressing black-and-white images (which could be easily extended to color). The basic idea is to repeatedly split the original picture in half, either vertically or horizontally, until each of the resulting sub-pictures contains only a single color.<P>A rectangular digital graphic is described by a ``compression-expression,'' defined as follows:<P><BLOCKQUOTE>Each compression-expression begins with a two-bit tag, which may be followed by additional compression-expressions depending upon the tag value. The tag values are interpreted as follows:</BLOCKQUOTE><P><DL><DT><STRONG>00</STRONG></DT><DD>A square region that consists entirely of black pixels. This region may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending upon context.<P></DD><DT><STRONG>11</STRONG></DT><DD>A square region that consists entirely of white pixels. This region may be a single pixel, a 2<SPAN CLASS="MATH">&#215;</SPAN>2 square, a 3<SPAN CLASS="MATH">&#215;</SPAN>3 square, etc., depending upon context.<P></DD><DT><STRONG>10</STRONG></DT><DD>A horizontal split. This is followed by two compression expressions. The picture produced by a split is formed by taking the pictures denoted by each of those two expressions and placing them along-side one another, the first picture to the left and the second to the right.<P>Horizontal splits are only possible between two pictures of the same height.<P></DD><DT><STRONG>01</STRONG></DT><DD>A vertical split. This is followed by two compression expressions. The picture produced by a split is formed by taking the pictures denoted by each of those two expressions and placing them along-size one another, the first picture on the top and the second underneath it.<P>Vertical splits are only possible between two pictures of the same width.</DD></DL><P>When interpreting splits, it may be necessary to change the scale of the components to make them compatible. For example, given a 2:6 picture A (i.e., 2 pixels wide, 6 pixels high) and a 3:4 picture B:<UL><LI>A vertical split involving these two is possible only if we scale A by a factor of 3, making it 6:18, and scale B by a factor of 2, making it 6:8. The resulting combined picture would have size 6:26.<P></LI><LI>A horizontal split involving these two is possible only if we scale A by a factor of 2, making it 4:12, and scale B by a factor of 3, making it 9:12. The resulting combined picture would have size 13:12. </LI></UL><P>For example, using <code>X</code>'s and ` 's to denote black and white pixels, respectively, the expression `<TT>00</TT>' denotes the picture<P><PRE>
     ---
     |X|
     ---
</PRE>and the expression `<TT>1000010011</TT>' denotes<PRE>
    -----
    |XXX|
    |XX |
    -----
</PRE><P>Examination of this format will show that for any given compression-expression, there is some smallest picture that can be denoted by that expression, but the same expression can also denote pictures twice the size of the smallest one, three times the size, etc.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of the input will contain a compression-expression, presented as a single line containing an arbitrary number of <TT>0</TT>'s and <TT>1</TT>'s. The input ends following the line with the final compression-expression.<P>All input sets used in this problem will be valid compression-expressions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each line of input, your should print the smallest black-and-white picture denoted by that expression, drawn in <code>X</code>'s (black) and ` 's (white), as above, and framed in <code>-</code> and <code>|</code> characters as shown in the examples. There should be no characters or whitespace outside your frame except for the newlines terminating each line.<P>There should be no blank lines in your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
00
10001011100100101110111101111000100011
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
---
|X|
---
----------------
|XXXX    XXX   |
|XXXX    XXX   |
|XXXX    XXX   |
|XXXX       XX |
----------------
</PRE><P>
______________________________________________________
2644||||||false||||||
<P>
After a successful military campaign, the King decided to reward his
two most able commanders with a title and a portion of the newly
conquered territory. Each of the newly appointed Barons will be
allowed to construct a castle in the new territory and to collect
taxes from the surrounding lands.

<P>
The King has commissioned a map of the new territory, marked off in a
grid. Each square on the grid is approximately the distance a man on
horseback could ride in one day. Each Baron will choose a square in
which to build his castle. As the senior commander, you will choose first.

<P>
For the sake of this selection, castles will be presumed to lie at the
center of the selected square. The two castles must be built in
squares whose centers are more than three days' ride from one another.

<P>
Each Baron will be allowed to collect taxes from the peasants in any
square whose center is 6 days' ride or less from that Baron's castle
and that is closer to that Baron's castle than to the other Baron's.
Squares that are equidistant from the two castles do not contribute
taxes to either castle.

<P>
Tensions had been rising between you and your fellow commander
throughout the military campaign. You are certain that, eventually,
the two of you will be fighting for control of the entire
territory. Until then, the collection of taxes is crucial to your
military build-up. You must make sure that you collect more tax money
than your rival, and that you outstrip him by as much as possible.

<P>
Your advisor has studied the records kept by the scribes of the former
King of this territory, and so has been able to estimate the tax
revenue that can be expected from each square. Based on this, you want
to select the site for your own castle that guarantees the best
possible advantage taxes no matter what space your rival baron may
select.

<P>

<P>
<BR>

<B>NOTE:</B> Distances are Euclidean (distance between the center of two
squares as the crow flies).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
   The first line of the input will contain an integer indicating the number of test cases to process. Each test case will be preceded by a blank line.
   The first line of each test case will contain two integers, <SPAN CLASS="MATH"><I>w</I></SPAN>, and <SPAN CLASS="MATH"><I>h</I></SPAN>,
   denoting the width and height (in numbers of squares) of the
   map. <SPAN CLASS="MATH"><I>w</I></SPAN> and <SPAN CLASS="MATH"><I>h</I></SPAN> will be in the range 1-50, inclusive.

<P>
This is followed by <!-- MATH
 $w \times h$
 -->
<SPAN CLASS="MATH"><I>w</I>&#215;<I>h</I></SPAN> integers distributed across an
   arbitrary number of subsequent lines. Each of these represents the
   expected tax collection (in gold pieces per year) for one map
   square. They occur in the order:
     <!-- MATH
 \begin{displaymath}
(0,0) (1, 0), \ldots, (w-1, 0) (0,1) (1, 1), \ldots, (w-1,h-1)
\end{displaymath}
 -->
<P></P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
(0, 0)(1, 0),...,(<I>w</I> - 1, 0)(0, 1)(1, 1),...,(<I>w</I> - 1, <I>h</I> - 1)
</DIV><P></P>
Each item will be in the range 0-40, inclusive. A value of 0
   denotes water or land that is otherwise uninhabitable--castles cannot
   be built on those squares.

<P>
All maps used as input in this problem will be large enough to
   guarantee that both castles can be placed on a non-zero square, no
   matter where the first one is placed (i.e., you cannot crowd your
   rival entirely off the map).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
   Output from for each dataset consists of a single line of the form:

<P>

<P>
<BR>

<TT>Place your castle at: <SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN></TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are two integers, separated by a single space,
   denoting the optimal placement of your castle, indexed from 0.

<P>
If there is more than one location on the map that may be chosen to
   achieve the same maximal advantage over your rival, any one of those
   positions will be an acceptable answer. Print a blank line between test cases.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

7 7
3 4 1 0 0 0 0
2 1 1 0 0 0 0
1 1 1 1 0 0 0
1 1 1 0 1 1 1
0 0 0 1 1 1 2
0 0 0 0 1 2 1
0 0 0 0 1 3 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Place your castle at: 3 4
</PRE>

<P>

______________________________________________________
2645||||||false||||||
<P>
It's said that ``Necessity is the mother of invention,'' but some people
think that ``Laziness'' is a more likely parent.

<P>
Hubert Greenthumb hated digging fence posts. But he knew that, without
a fence around his garden, deer from the nearby woods would eat his
vegetables before he could harvest them.

<P>
Being something of a tinkerer, he retired to his workshop with a small
garden tractor, some out-of-date computer chips, and a couple of robot
arms he had picked up at a bankruptcy auction from a failed ``.com''
high-tech company. After two days of work, he emerged as the proud
inventor of the Greenthumb Automatic Garden Fence Layer
(pat. pending).

<P>
To his skeptical wife (who observed that he could easily have built
the fence in half the time it took to construct this machine), he
explained that he needed only to program in the desired fence shape,
and the machine would proceed to chug around the yard, laying down a
fence in 1-foot sections until the job had been completed.

<P>
Hubert proceeded to key in instructions to enclose a square area, 25
feet on a side, of his 100' by 100' yard. He set the machine to
operating and went inside for a celebratory drink.

<P>
When he emerged, he discovered that the machine had laid down fence in
an elaborate, possibly random walk about his lawn. Unwilling to
actually admit that anything had gone wrong, he announced his
intention to plant within the garden actually laid out by the machine,
as if he had wanted it that way all along. Any section of the yard
that was no longer accessible to the deer (enclosed by the fence)
would be considered as garden space.

<P>
``Fine,'' sighed his wife, ``but we'll need to know just how many square
feet of garden we have so that we can buy an appropriate amount of
seeds.''  Hubert gamely began to trace out the fence laid down by the
machine. ``Let's see, it went North for 5 feet, then West for 3 feet, ...''

<P>
Note: Hubert's yard can be divided into a grid of <!-- MATH
 $100 \times 100$
 -->
<SPAN CLASS="MATH">100&#215;100</SPAN> feet, with
each grid box being 1 foot by 1 foot.  The robot moves along the edges
of the boxes.  As the robot moves, it builds a fence from vertex to
vertex of the grid (intersections of the lines).

<P>

<P>
<BR>

<B>Note:</B> Because the robot moves along the edges of the grid, you can
ignore the amount of space the fence occupies.  For example, if the
robot moves North one, East one, South one, and West one, it has
enclosed one square foot of garden space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input will contain the number of data sets.  The
are no blank lines before or after each data set.

<P>
The first line of each data set will contain three integers (<SPAN CLASS="MATH"><I>X</I></SPAN> <SPAN CLASS="MATH"><I>Y</I></SPAN> <SPAN CLASS="MATH"><I>Z</I></SPAN>),
indicating the <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> position of the starting point on the grid, and
the number of moves the robot makes.  (<SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> are all
non-negative integers, <SPAN CLASS="MATH"><I>X</I></SPAN> is the number of feet from the western edge,
<SPAN CLASS="MATH"><I>Y</I></SPAN> is the number of feet from the southern edge of the yard).  (<SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
range from 0 to 100, inclusive.)

<P>
The next <SPAN CLASS="MATH"><I>Z</I></SPAN> lines will contain a character <SPAN CLASS="MATH"><I>D</I></SPAN> and an integer <SPAN CLASS="MATH"><I>F</I></SPAN>,
separated by a space.  The character will indicate the direction
(<code>N</code>, <code>S</code>, <code>E</code>, <code>W</code>) and the integer will indicate
how far in that direction the robot traveled.

<P>
The path will never leave the 100' by 100' yard. The path may or may
not be closed. It may cross itself or retrace its steps (walk along
lines in the grid it previously laid fence).  It automatically stops
building fence until it moves onto an edge without fence on it.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, output a single line of the form

<P>

<P>
<BR>

<TT>Data Set <SPAN CLASS="MATH"><I>N</I></SPAN>: <SPAN CLASS="MATH"><I>Q</I></SPAN> square feet.</TT>

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>N</I></SPAN> is the data set number (from 1) and <SPAN CLASS="MATH"><I>Q</I></SPAN> is the number of square
feet that are enclosed so they may be used for the garden.

<P>
After the last line of output, print `<TT>End of Output</TT>' on a line by
itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
0 0 8
N 25
E 25
N 25
E 25
S 25
W 25
S 25
W 25
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Data Set 1: 1250 square feet.
End of Output
</PRE>

<P>

______________________________________________________
2646||||||false||||||
<P>The Cantor set was discovered by Georg Cantor. It is one of the simpler fractals. It is the result of an infinite process, so for this program, printing an approximation of the whole set is enough.<P>The following steps describe one way of obtaining the desired output for a given order Cantor set:<OL><LI>Start with a string of dashes, with length <SPAN CLASS="MATH">3<SUP>order</SUP></SPAN> </LI><LI>Replace the middle third of the line of dashes with spaces. You are left with two lines of dashes at each end of the original string. </LI><LI>Replace the middle third of each line of dashes with spaces. Repeat until the lines consist of a single dash. </LI></OL><P>For example, if the order of approximation is 3, start with a string of 27 dashes:<PRE>
    ---------------------------
</PRE>Remove the middle third of the string:<PRE>
    ---------         ---------
</PRE>and remove the middle third of each piece:<PRE>
    ---   ---         ---   ---
</PRE>and again:<PRE>
    - -   - -         - -   - -
</PRE>The process stops here, when the groups of dashes are all of length 1. You should not print the intermediate steps in your program. Only the final result, given by the last line above, should be displayed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each line of input will be a single number between 0 and 12, inclusive, indicating the order of the approximation. The input stops when end-of-file is reached.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>You must output the approximation of the Cantor set, followed by a newline. There is no whitespace before or after your Cantor set approximation. The only characters that should appear on your line are `<code>-</code>' and ` '. Each set is followed by a newline, but there should be no extra newlines in your output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
0
1
3
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
-
- -
- -   - -         - -   - -
- -   - -
</PRE><P>
______________________________________________________
2647||||||false||||||
<P>The Chambers Construction Company has a major contract to deliver a tile floor on schedule for its largest customer (Moneybags to Spare Inc). Unfortunately, the clerk who ordered tiles won the lottery just after ordering the tiles for this room, and did not write down where to place each tile to make the room fit. Normally this would not be a problem, except the tiles that were ordered are not all squares. They are each made up of 4 square segments, but will take on all possible shapes shown here:<PRE>
XXXX    XX      XX       XX     X       XXX      X
        XX       XX     XX      XXX     X       XXX
</PRE>Given that the project is under an extremely tight schedule, it is not possible to reorder the tiles in a more standard manner. Instead when the 9 tiles come in, you will need to figure out how to place the tiles (or if there is no way to set the pieces correctly). The tiles in the box are ordered from A to I. The room that needs to be tiled is 6 segments on each side.<P><P>A middle-manager at CCC has come up with an algorithm that they will give to the tiler to tile the room. The tiler has come to you to write a program to determine what pattern will be successful without having to try all of them with the physical tiles. The tiler will always start with the top left corner of the room. After placing the first tile, they will work their way from left to right and from top to bottom, placing the next tile such that it will fill the leftmost open space on the top line with an open space.<P>For instance, if the layout currently had the following tiles (A and B) placed:<PRE>
AABBBZ
 AA B
</PRE>The next tile to place would be placed such that position Z is filled.<P>To make matters easiest, the tiler will always place the earliest tile in the box that could successfully fill that position. For instance, if either tile B or C could fill that position, the tiler will choose B. Furthermore, they will always place the tile as they are oriented above if possible. They will then attempt to rotate the tile 90 degrees clockwise and place it (possibly doing this 3 times).<P><P><BR><B>NOTE:</B> Remember the tiles may be rotated, but they may not be flipped.<P><P><BR>A tile may not extend outside the 6<SPAN CLASS="MATH">&#215;</SPAN>6 room, or overlap with another tile. A room is considered successfully tiled if the given set of tiles completely tile the room using the above algorithm.<P>The tiler will continue laying tiles according to this algorithm until finishing the room, or discovering that the room cannot be finished using the previous choices. If the room cannot be finished, the tiler will backtrack, considering the remaining rotations of the previous tile, and then the remaining tile. The tiler will continue to backtrack, one tile at a time, until all combinations have been tried or the room cannot be successfully tiled.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Input</A>&nbsp;</FONT></H2>The first line of input will indicate how many data sets are included. (<SPAN CLASS="MATH"><I>N</I></SPAN>)<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines will each contain 9 numbers. These numbers indicate the shape of each tile The first entry on the line will correspond to tile A, the second to tile B, ..., the 9th for tile I. Each number will reflect the layout of a tile as specified above (the left most layout is 1, the rightmost is 7).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, the first line of output should indicate the index of the data set, starting with 1. (`<TT>Data Set 1</TT>')<P>The next line of input will indicate the floor may or may not be tiled successfully. (`<TT>The floor may be tiled.</TT>' or `<TT>The floor may not be tiled.</TT>').<P>The next 6 lines would then display the graph of floor illustrating the final layout. To make it easy to understand, each tile set should be marked A-I corresponding to the order they were in the input line. Each line will have exactly 6 characters indicating the tile segment, followed by a newline.<P>A blank line should appear after each data set.<P>The line stating `<TT>End of Output</TT>' should appear after the last data set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
2 2 2 2 2 2 2 2 3
1 1 2 1 1 2 1 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001005000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data Set 1
The floor may not be tiled.

Data Set 2
The floor may be tiled.
AAAABD
CCEGBD
CCEGBD
FFEGBD
FFEGII
HHHHII

End of Output
</PRE><P>
______________________________________________________
2648||||||false||||||
<P>Determine water allocations.<P>Capitalists prefer to know who owns things, and water is no exception. Nature recycles a random amount of water each year and places it in various sources (lakes, rivers, and underground aquifers). Contracts for various portions of that water are written.<P>Unfortunately, there may not be enough water available in a drought year to fulfill each contract. The resolution to this is via priorities. The highest priority contracts are fulfilled before the next tier of priorities. If there is insufficient water to fulfill the requirements of all the contracts of a given priority, what remains of the water source is divided proportionally among all the contracts of that priority.<P><P><BR>For example, suppose a water source has 1,000,000 (one million) cubic feet of water available in a given year. That water source has the following requirements:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Name</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Priority</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Requirement</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>500,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>B</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>250,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>C</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>700,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>300,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>E</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100,000</TD></TR></TABLE></DIV><P><P><BR>The allocation for that year would be that contract A and B get full allotments. Contracts C and D divide the remainder proportionally: C's contract represents 70% of the contracts with priority 2, and D's contract represents the other 30%. Thus C would obtain 70% of the remaining 250,000 cubic feet of water, or 175,000 cubic feet of water, and D would be allocated the remainder (30% of 250,000 cubic feet, or 75,000 cubic feet). The lower priority contract E would be allocated no water.<P>In this problem you are to calculate water allocations for various sources.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of one or more allocation problems. Each allocation problem will have a first line describing the source, followed by one or more lines describing the contracts on that source.<P>The first line of an allocation problem has the form<P><P><BR><TT>" <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark>", <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> will be a string of no more than 80 printable ASCII characters. It will be enclosed by double quotes but not contain any double quotes. The <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark> will be an integer no more than 1 trillion: 1000000000000. White space may appear on the line, and, unless inside the quoted name, should be ignored. If <SPAN CLASS="MATH"><I>SOURCE</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> is <TT>"END"</TT>, then this indicates no more allocation problems are present in the input file and your program should not process any further data.<P>Following a line indicating another source, there will be zero or more allocations of that source. These are lines of the form<P><P><BR><TT>" <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark>", <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> will be a string of no more than 80 printable ASCII characters. It will be enclosed by double quotes but not contain any double quotes. The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark> will be a positive integer with magnitude no larger than 1000. The <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark> will be a non-negative integer no more than 1 trillion. White space may appear on the line, and, unless inside the double quotes, should be ignored. If <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_NAME$"></SPAN> <tex2html_verbatim_mark> is <TT>"END"</TT>, then this indicates no more contracts are present for this source.<P>Note that <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="109" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_PRIORITY$"></SPAN> <tex2html_verbatim_mark> will be a non-decreasing sequence for each allocation problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output file has a format similar to the input file. The differences are that<P><UL><LI>No additional whitespace is allowed. </LI><LI>In the place of <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="97" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_VOLUME$"></SPAN> <tex2html_verbatim_mark>, you should instead report <SPAN CLASS="MATH"><I>CONTRACT</I><IMG WIDTH="84" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2648img1.png ALT="$ \_AWARD$"></SPAN> <tex2html_verbatim_mark>, which is the actual volume awarded to the contract (truncated to its integer part). </LI><LI>The end of a list of contracts is indicated by the line<P><P><BR><TT>"END",0,0</TT> </LI><LI>The end of the list of allocation problems is indicated by the line<P><P><BR><TT>"END",0</TT> </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
"Le River",1000000
  "People",1,500000
  "Farms",1,250000
  "Mine",2,700000
  "Golf Course",2,300000
  "Car Wash",3,100000
  "END",0,0
"Le Lake",1000000
  "A",1,500000
  "B",1,250000
  "D",2,300000
  "E",3,100000
  "END",-1,0
"END",0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
"Le River",1000000
"People",1,500000
"Farms",1,250000
"Mine",2,175000
"Golf Course",2,75000
"Car Wash",3,0
"END",0,0
"Le Lake",1000000
"A",1,500000
"B",1,250000
"D",2,250000
"E",3,0
"END",0,0
"END",0
</PRE><P>
______________________________________________________
2649||||||false||||||
<P>Determine the right or left handedness of some dice.<P>Imagine looking at a six-sided die so two sides face east-west, two face north-south, and the last two sides face up-down. You could write down the number of dots on each side in the order: east, west, north, south, up, down.<P>Normal dice are labeled so that the sum of opposing sides sum to seven. This constraint is sufficient to reduce dice into two categories, ``Left handed" and ``Right handed." Left handed dice can be oriented so that the east face is 1, the north face is 2, and the <SPAN CLASS="textit">down</SPAN> face is 3. Right handed dice can be oriented so that the east face is 1, the north face is 2, and the <SPAN CLASS="textit">up</SPAN> face is 3.<P>In this problem, given the face values of a sequence of dice, you are to determine the handedness of the dice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain a sequence of one or more face descriptions of a dice. These will be written as six digits (not separated by white space) on a single line. The numbers will represent (in order) the face values of the east, west, north, south, up, and down faces of the given dice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Other than the standard leader and trailer, the output file simply has the word `<TT>left</TT>' or `<TT>right</TT>' for each dice in the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
162534
162543
526134
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
right
left
left
</PRE><P>
______________________________________________________
2650||||||false||||||
<P>Be a match maker.<P>The dating service MatchMaker.com has a list of men and a list of women. The number of men is equal to the number of women. In addition to their names, MatchMaker.com keeps track of two attributes about each of their clients: the person's IQ (intelligence quotient) and the person's height. MatchMaker.com wishes to match each man with a woman in an optimal way, so that the deviations of the two attributes in the resulting man / woman pairs are minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will consist of one or more data sets of the form<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(1)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(2)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>WOMAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(<I>N</I>)&nbsp;<I>WOMAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(1)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(2)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>MAN</I><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="33" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_IQ$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="92" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_HEIGHT$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> will be a positive integer not larger than 13. The <SPAN CLASS="MATH"><I>NAME</I></SPAN> <tex2html_verbatim_mark> of men and women will consist of no more than 11 lower case alphanumeric characters (a-z, 0-9). The <SPAN CLASS="MATH"><I>IQ</I></SPAN> <tex2html_verbatim_mark> will be an integer in the range 10..199. The <SPAN CLASS="MATH"><I>HEIGHT</I></SPAN> <tex2html_verbatim_mark> will be an integer in the range 145..189. One or more blank spaces will separate the <SPAN CLASS="MATH"><I>NAME</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>IQ</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>HEIGHT</I></SPAN> <tex2html_verbatim_mark> values, but there will be no leading or trailing white space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> man-woman pairs in the input data set, there will be <SPAN CLASS="MATH"><I>N</I> + 2</SPAN> <tex2html_verbatim_mark> lines of output in the format:<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(1)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(1)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(2)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(2)</SPAN> <tex2html_verbatim_mark><BR>.<BR>.<BR>.<BR><SPAN CLASS="MATH"><I>WOMAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>MAN</I><IMG WIDTH="60" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_PAIR$"><IMG WIDTH="72" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_NAME$">(<I>N</I>)&nbsp;<I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$">(<I>N</I>)</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark><P><P><BR>Each woman-man pair name is separated by exactly one blank space. The <SPAN CLASS="MATH"><I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> is defined as the absolute value of the difference in IQ, plus the absolute value of the difference in height of the pair.<P>The <SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> is the sum of the <SPAN CLASS="MATH"><I>PAIR</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark>. The crucial constraint on the output is that the pairing should minimize the <SPAN CLASS="MATH"><I>TOTAL</I><IMG WIDTH="127" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/26/2650img1.png ALT="$ \_DEVIATION$"></SPAN> <tex2html_verbatim_mark> compared to all possible man-woman pairings. Note that there may be more than one such minimal configuration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
mindy    70 145
jennifer 80 155
kathy    90 165
allison 100 175
alice   105  156
jenna   110  158
mary    115  160
john   110   175
jack   85    170
steve  115   170
bill   105   149
bob     80   155
thomas  75   179
mike   120   168
3
mindy 100   180
jenny 120   155
kathy 105   168
jack 104    169
bob  119    156
bill  99    179
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>    

<P>
<PRE>
7
mindy thomas 39
jenna mike 20
allison john 10
kathy jack 10
mary steve 10
alice bill 7
jennifer bob 0
96
3
jenny bob 2
kathy jack 2
mindy bill 2
6
</PRE><P>