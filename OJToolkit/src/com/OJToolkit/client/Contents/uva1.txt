100||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The 3n + 1 problem</TITLE>
<META NAME="description" CONTENT="The 3n + 1 problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The 3<I>n</I> + 1 problem</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Problems in Computer Science are often classified as belonging to a
certain class of problems (e.g., NP, Unsolvable, Recursive).  In this
problem you will be analyzing a property of an algorithm whose
classification is not known for all possible inputs.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Consider the following algorithm:
<PRE><TT> 
		1. 		 input <I>n</I>
<P>
		2. 		 print <I>n</I>
<P>
		3. 		 if <I>n</I> = 1 then STOP
<P>
		4. 		 		 if <I>n</I> is odd then  <IMG WIDTH=95 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/1/100img1.gif"   > 
<P>
		5. 		 		 else  <IMG WIDTH=74 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/1/100img1.gif"   > 
<P>
		6. 		 GOTO 2
<P>
</TT></PRE>
<P>
Given the input 22, the following sequence of numbers will be printed
22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
<P>
It is conjectured that the algorithm above will terminate (when a 1 is
printed) for any integral
input value.  Despite the simplicity of the algorithm,
it is unknown whether this conjecture is true.  It has been verified,
however, for all integers <I>n</I> such that 0 &lt; <I>n</I> &lt; 1,000,000 (and, in fact,
for many more numbers than this.)
<P>
Given an input <I>n</I>, it is possible to determine
the number of numbers printed (including
 the 1).  For a given <I>n</I> this is
called the <EM>cycle-length</EM> of <I>n</I>.  In the example above, the cycle
length of 22 is 16.
<P>
For any two numbers <I>i</I> and <I>j</I> you are to determine the maximum cycle
length over all numbers between <U> <I>i</I> and
<I>j</I>.
<P>
</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input will consist of a series of pairs of integers <I>i</I> and <I>j</I>, one pair of
integers per line.  All integers will be less than 1,000,000 and greater
than 0.
<P>
You should process all pairs of integers and for each
pair determine the maximum cycle length over all integers between and
including <I>i</I> and <I>j</I>.
<p>You can assume that no operation overflows a 32-bit integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each pair of input integers <I>i</I> and <I>j</I> you should output <I>i</I>, <I>j</I>,
and the maximum cycle length for integers between and including
<I>i</I> and <I>j</I>.  These three numbers
should be separated by at least one space with all three numbers on one
line and with one line of output for each line of input.  The integers
<I>i</I> and <I>j</I> must appear in the output in the same order in which they
appeared in the input and should be
followed by the maximum cycle length (on the same line).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
1 10
100 200
201 210
900 1000
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
1 10 20
100 200 125
201 210 89
900 1000 174
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
101||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Blocks Problem</TITLE>
<META NAME="description" CONTENT="The Blocks Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Blocks Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Background</A>&nbsp;</FONT>
</H2>
Many areas of Computer Science use simple, abstract domains 
for both analytical and empirical studies.  For example, an early AI
study of planning and robotics (STRIPS) used a block world in which a
robot arm performed tasks involving the manipulation of blocks.  

<P>
In this
problem you will model a simple block world under certain rules and
constraints.  Rather than determine how to achieve a specified state,
you will ``program'' a robotic arm to respond to a limited set of commands.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
The Problem</A>&nbsp;</FONT>
</H2>
The problem is to parse a series of commands that instruct a robot arm
in how to manipulate blocks that lie on a flat table.  Initially there
are <I>n</I> blocks on the table (numbered from 0 to <I>n</I>-1)
with block <I>b</I><SUB><I>i</I></SUB> adjacent to block <I>b</I><SUB><I>i</I>+1</SUB>
for all 
<!-- MATH: $0 \leq i < n-1$ -->
<IMG
 WIDTH="106" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/101img1.gif" 
 ALT="$0 \leq i < n-1$">
as shown in the diagram below:

<DIV ALIGN="CENTER"><A NAME="74">&#160;</A>
<TABLE WIDTH="50%">
<TR><TD><IMG
 WIDTH="433" HEIGHT="52"
 SRC="http://uva.onlinejudge.org/external/1/101img1.gif" 
 ALT="\begin{figure}
\centering
\setlength{\unitlength}{0.0125in} %
\begin{picture}
(2...
...raisebox{0pt}[0pt][0pt]{$\bullet
\bullet \bullet$ }}}
\end{picture}
\end{figure}"></TD></TR>
</TABLE>
<STRONG>Figure:</STRONG>
Initial Blocks World
</DIV>
<BR>

<P>
The valid commands for the robot arm that manipulates blocks are:
<UL>
<LI>move <I>a</I> onto <I>b</I> 

<P>
where <I>a</I> and <I>b</I> are block numbers, puts block <I>a</I> onto block <I>b</I> after
returning any blocks that are stacked on top of blocks <I>a</I> and <I>b</I> to
their initial positions.  

<P>
<LI>move <I>a</I> over <I>b</I>

<P>
where <I>a</I> and <I>b</I> are block numbers, puts block <I>a</I> onto the top of the
stack containing block <I>b</I>, after returning any blocks that are stacked
on top of block <I>a</I> to their initial positions.

<P>
<LI>pile <I>a</I> onto <I>b</I>

<P>
where <I>a</I> and <I>b</I> are block numbers, moves the pile of blocks consisting
of block <I>a</I>,  and any blocks that are stacked above block <I>a</I>, onto
block <I>b</I>.  All blocks on top of block <I>b</I> are moved to their initial
positions prior to the pile taking place.  The blocks stacked above block
<I>a</I> retain their order when moved.

<P>
<LI>pile <I>a</I> over <I>b</I>

<P>
where <I>a</I> and <I>b</I> are block numbers, puts the pile of blocks consisting
of block <I>a</I>, and any blocks that are stacked above  block <I>a</I>, onto
the top of the stack containing block <I>b</I>.  The blocks stacked above block
<I>a</I> retain their original order when moved.  

<P>
<LI>quit

<P>
terminates manipulations in the block world.
</UL>

<P>
Any command in which <I>a</I> = <I>b</I> or in which <I>a</I> and <I>b</I>
are in the same stack of blocks is an illegal command.  All illegal
commands should be ignored and should have no
affect on the configuration of blocks. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
The Input</A>&nbsp;</FONT>
</H2>
The input begins with an integer <I>n</I> on a line by itself representing
the number of blocks in the block world.  You may assume that 
<!-- MATH: $0 < n <
25$ -->
0 &lt; <I>n</I> &lt;
25.

<P>
The number of blocks is followed by a sequence of block commands, one
command per line.  Your
program should process all commands until the <TT>quit</TT> command is
encountered.

<P>
You may assume that all commands will be of the form specified above.
There will be no syntactically incorrect commands.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
The Output</A>&nbsp;</FONT>
</H2>

<P>
The output should consist of the final state of the blocks world.  Each
original block position numbered <I>i</I> 
(
<!-- MATH: $0 \leq i < n$ -->
<IMG
 WIDTH="76" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/101img1.gif" 
 ALT="$0 \leq i < n$">
where <I>n</I> is the number of blocks) should appear
followed immediately by a colon.
If there is at least a block
on it, the colon must be followed by one space, followed by a list of 
blocks that appear stacked in that position with each block number 
separated from other block numbers by a space. Don't put any trailing 
spaces on a line. 

<P>
There should be one line of output for each block position
(i.e., <I>n</I> lines of output where <I>n</I> is the 
integer on the first line of input).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
10
move 9 onto 1
move 8 over 1
move 7 over 1
move 6 over 1
pile 8 over 6
pile 8 over 5
move 2 over 1
move 4 over 9
quit
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
 0: 0
 1: 1 9 2 4
 2:
 3: 3
 4:
 5: 5 8 7 6
 6:
 7:
 8:
 9:
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-04-06</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
102||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ecological Bin Packing</TITLE>
<META NAME="description" CONTENT="Ecological Bin Packing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ecological Bin Packing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Bin packing, or the placement of objects of certain weights into
different bins subject to certain constraints, is an historically
interesting problem.  Some bin packing problems are NP-complete but are
amenable to dynamic programming solutions or to approximately optimal
heuristic solutions.
<P>
In this problem you will be solving a bin packing problem that deals
with recycling glass.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Recycling glass requires that the glass be separated by color into one
of three categories: brown glass, green glass, and clear glass.  In this
problem you will be given three recycling bins, each containing a
specified number of brown, green and clear bottles.  In order to be
recycled, the bottles will need to be moved so that each bin contains
bottles of only one color.
<P>
The problem is to minimize the number of bottles that are moved.  You
may assume that the only problem is to minimize the number of movements
between boxes.
<P>
For the purposes of this problem, each bin has infinite
capacity and the only constraint is moving the bottles so that each
bin contains bottles of a single color. The total number of bottles will never exceed 2^31.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a series of lines with each line containing 9
integers.  The first three integers on a line represent the number of
brown, green, and clear bottles (respectively) in bin number 1, the
second three represent the number of brown, green and clear bottles
(respectively) in bin number 2, and the last three integers
represent the number of brown, green, and clear bottles
(respectively)
in bin number 3.  For example, the line
10 15 20 30 12 8 15 8 31
<P>
indicates that there are 20 clear bottles in bin 1, 12 green bottles in
bin 2, and 15 brown bottles in bin 3.
<P>
Integers on a line will be separated by one or more spaces.  Your
program should process all lines in the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input there will be one line of output indicating what color
bottles go in what bin to minimize the number of bottle movements.
You should also print the minimum number of bottle movements.
<P>
The output should consist of a string of the
three upper case characters 'G', 'B',
'C' (representing the colors green, brown, and clear) representing the
color associated with each bin.
<P>
The first character of the string
represents
the color associated with the first bin, the second character of the
string represents the color associated with the second bin, and the
third character represents the color associated with the third bin.
<P>
The integer indicating the minimum number of bottle movements
should follow the string.
<P>
If more than one order of brown, green, and clear bins
yields the minimum number of movements
then the alphabetically first string representing a minimal
configuration should be printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 2 3 4 5 6 7 8 9
5 10 5 20 10 5 10 20 10</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>BCG 30
CBG 50</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
103||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stacking Boxes</TITLE>
<META NAME="description" CONTENT="Stacking Boxes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stacking Boxes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Some concepts in Mathematics and Computer Science are simple in one or
two dimensions but
become more complex when extended to arbitrary dimensions.  Consider
solving differential equations in several dimensions and analyzing the
topology of an <I>n</I>-dimensional hypercube.  The former is much more
complicated than its one dimensional relative while the latter bears a
remarkable resemblance to its ``lower-class'' cousin.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Consider an <I>n</I>-dimensional ``box'' given by its dimensions.  In two
dimensions the box (2,3) might represent a box with length 2 units and
width 3 units.  In three dimensions the box (4,8,9) can represent a box
 <IMG WIDTH=68 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  (length, width, and height).  In 6 dimensions it
is, perhaps, unclear what the box (4,5,6,7,8,9) represents; but we can
analyze properties of the box such as the sum of its dimensions.
<P>
In this problem you will
analyze a property of a group of <I>n</I>-dimensional boxes.
You are to determine the longest <EM>nesting string</EM> of boxes, that
is a sequence of boxes  <IMG WIDTH=91 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  such that each box  <IMG WIDTH=11 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > 
nests in box  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  ( <IMG WIDTH=75 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > .
<P>
A box D = ( <IMG WIDTH=96 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) 
nests in a box E = ( <IMG WIDTH=93 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > )
if there is some rearrangement of the  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  
such that when rearranged
each dimension is less than the corresponding dimension in box E. 
This loosely corresponds to turning box D to see if it will fit in box
E. However, since any rearrangement suffices, box D can be contorted, not just
turned (see examples below).
<P>
For example, the box D = (2,6) nests in the box E = (7,3) since D can be
rearranged as (6,2) so that each dimension is less than the
corresponding dimension in E.  The box D = (9,5,7,3) does NOT nest in the
box E = (2,10,6,8) since no rearrangement of D results in a box that
satisfies the nesting property, but F = (9,5,7,1) does nest in box E since
F can be rearranged as (1,9,5,7) which nests in E.
<P>
Formally, we define nesting as follows:
box D = ( <IMG WIDTH=96 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) <EM>nests</EM> in  box E = ( <IMG WIDTH=93 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) if there is a permutation  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline62" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  of  <IMG WIDTH=44 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  such that 
( <IMG WIDTH=151 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) ``fits'' in ( <IMG WIDTH=93 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) i.e., if  <IMG WIDTH=68 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline70" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  for all  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline72" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a series of box sequences.  Each box sequence
begins with a line consisting of the the number of boxes <I>k</I>
in the sequence
followed by the dimensionality of the boxes, <I>n</I> (on the same line.)
<P>
This line is followed by <I>k</I> lines, one line per box
with the <I>n</I> measurements of each box on
one line separated by one or more spaces.  The  <IMG WIDTH=18 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline82" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  line in the
sequence ( <IMG WIDTH=69 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline84" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   > ) gives the measurements for the  <IMG WIDTH=18 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline82" SRC="http://uva.onlinejudge.org/external/1/103img1.gif"   >  box.
<P>
There may be several box sequences in
the input file. Your program should process all of them and determine,
for each sequence, which of the <I>k</I> 
boxes determine the longest nesting
string and the length of that nesting string (the number of
boxes in the string).
<P>
In this problem the maximum dimensionality is 10 and the minimum
dimensionality is 1.  The maximum number of boxes in a sequence is 30.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each box sequence in the input file, output the length of the
longest nesting string on one line followed on the next line
by a list of the boxes
that comprise this string in order. 
The ``smallest'' or ``innermost'' box of the nesting string should be
listed first, the next box (if there is one) should be listed second,
etc.
<P>
The boxes should be
numbered according to the order in which they appeared in the input file
(first box is box 1, etc.).
<P>
If there is more than one longest nesting string then any one
of them can be output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 2
3 7
8 10
5 2
9 11
21 18
8 6
5 2 20 1 30 10
23 15 7 9 11 3
40 50 34 24 14 4
9 10 11 12 13 14
31 4 18 8 27 17
44 32 13 19 41 19
1 2 3 4 5 6
80 37 47 18 21 9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>5
3 1 2 4 5
4
7 2 5 6</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
104||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Arbitrage</TITLE>
<META NAME="description" CONTENT="Arbitrage">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Arbitrage</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
The use of computers in the finance industry has been marked with
controversy lately as programmed trading -- designed to take advantage
of extremely small fluctuations in prices -- has been outlawed at many
Wall Street firms.  The ethics of computer programming is a fledgling
field with many thorny issues.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
<EM>Arbitrage</EM> is the trading of one currency for another with the
hopes of taking advantage of small differences in conversion rates among
several currencies in order to achieve a profit.  
For example, if $1.00 in U.S. currency buys 0.7 British pounds
currency, &#163;1 in British currency buys 9.5 French francs, and 1
French franc buys 0.16 in U.S. dollars, then an arbitrage trader can
start with $1.00 and earn  <IMG WIDTH=209 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/1/104img1.gif"   > 
dollars thus earning a profit of 6.4 percent.
<P>
You will write a program that determines whether a sequence of currency
exchanges can yield a profit as described above.
<P>
To result in successful arbitrage, a sequence of
exchanges must begin and end with the same currency, but any starting
currency may be considered.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input file consists of one or more conversion tables.  You must
solve the arbitrage problem for each of the tables in the input file.
<P>
Each table is
preceded by an integer <I>n</I> on a line by itself giving the dimensions of the
table.  The maximum dimension is 20; the minimum dimension is 2.
<P>
The table then follows in row major order but with the diagonal
elements of the table missing (these are assumed to have value 1.0).
Thus the first row of the table represents the conversion rates between
country 1 and <I>n</I>-1 other countries, i.e., the amount of currency of
country <I>i</I> ( <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/1/104img1.gif"   > ) that can be purchased with one unit of
the currency of country 1.
<P>
Thus each table consists of <I>n</I>+1 lines in the input file: 1 line
containing <I>n</I> and <I>n</I> lines representing the conversion table.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each table in the input file you must determine whether a sequence
of exchanges exists that results in a profit of more than 
1 percent (0.01).  If a sequence exists you
must print the sequence of exchanges that results in a profit.  If there
is more than one sequence that results in a profit of more
than 1 percent you must print a 
sequence of minimal length, i.e., one of the sequences that uses the
fewest exchanges of currencies to yield a profit.   
<P>
<P>
Because the IRS (United States Internal Revenue Service) notices lengthy
transaction sequences, all profiting sequences must consist of <I>n</I> or
fewer transactions where <I>n</I> is the dimension of the table giving
conversion rates. The sequence 1 2 1 represents two conversions.
<P>
If a profiting sequence exists you must print 
the sequence of exchanges that
results in a profit.  The sequence is printed as a sequence of integers
with the integer <I>i</I> representing the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/1/104img1.gif"   >  line of the conversion
table (country <I>i</I>).  The first integer in the sequence is the country 
from which the profiting sequence starts.  This integer also ends the
sequence.
<P>
If no profiting sequence of <I>n</I> or fewer transactions
exists, then the line
<PRE>no arbitrage sequence exists</PRE>
should be printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
1.2 .89
.88 5.1
1.1 0.15
4
3.1    0.0023    0.35
0.21   0.00353   8.13 
200    180.559   10.339
2.11   0.089     0.06111
2
2.0
0.45</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 1
1 2 4 1
no arbitrage sequence exists</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
105||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Skyline Problem</TITLE>
<META NAME="description" CONTENT="The Skyline Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Skyline Problem</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
With the advent of high speed graphics workstations, CAD 
(computer-aided design) and other areas (CAM, VLSI design) have made
increasingly effective use of computers.  One of the problems with
drawing images is the elimination of hidden lines -- lines obscured by
other parts of a drawing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
You are to design a program to assist an architect in drawing the
skyline of a city given the locations of the buildings in the city.  To
make the problem tractable, all buildings are rectangular in shape and
they share a common bottom (the city they are built in is very flat).  
The city is also viewed as two-dimensional.  A
building is specified by an ordered triple  <IMG WIDTH=81 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline149" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  where 
 <IMG WIDTH=15 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline151" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  and  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline153" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  are left and right coordinates, respectively, of building
<I>i</I> and  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline157" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  is the height of the building.  In the diagram below
buildings are shown on the left with triples
(1,11,5), (2,6,7), (3,13,9), (12,7,16), (14,3,25), (19,18,22),
(23,13,29), (24,4,28)
<P>
the skyline, shown on the right, is represented by the sequence:
(1, 11, 3, 13, 9, 0, 12, 7, 16, 3, 19, 18, 22, 3, 23, 13, 29, 0)
<P>
<P> <IMG WIDTH=535 HEIGHT=173 ALIGN=BOTTOM ALT="figure26" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of building triples.  All coordinates of
buildings are positive integers less than 10,000 and there will be at least one
and at most 5,000 buildings in the input file.  Each building triple is on
a line by itself in the input file.  All integers in a triple are
separated by one or more spaces.  The triples will be sorted by  <IMG WIDTH=15 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline151" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   > ,
the left <I>x</I>-coordinate of the building, so the building
with the smallest left <I>x</I>-coordinate is
first in the input file.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
The output should consist of the vector that describes the skyline as
shown in the example above.  In the skyline vector  <IMG WIDTH=215 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline183" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   > , the  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline185" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  such that <I>i</I> is an even number
represent a horizontal line (height).  The  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline185" SRC="http://uva.onlinejudge.org/external/1/105img1.gif"   >  such that <I>i</I> is an odd
number represent a vertical line (<I>x</I>-coordinate).  The skyline vector
should represent the ``path'' taken, for example, by a bug starting at
the minimum <I>x</I>-coordinate and traveling horizontally and vertically over
all the lines that define the skyline.  Thus the last entry in the
skyline vector will be a 0. The coordinates must be separated by a blank space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 11 5
2 6 7
3 13 9
12 7 16
14 3 25
19 18 22
23 13 29
24 4 28</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 11 3 13 9 0 12 7 16 3 19 18 22 3 23 13 29 0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
106||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Fermat vs. Pythagoras</TITLE>
<META NAME="description" CONTENT="Fermat vs. Pythagoras">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Fermat vs. Pythagoras</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Computer generated and assisted proofs and verification occupy a small
niche in the realm of Computer Science.  The first proof of the
four-color problem was completed with the assistance of a computer
program and current efforts in verification have succeeded in verifying
the translation of high-level code down to the chip level.
<P>
This problem deals with computing quantities relating to part of
Fermat's Last Theorem: that there are no integer solutions of  <IMG WIDTH=94 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   >  for <I>n</I> &gt; 2.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a positive integer <I>N</I>, you are to write a program that computes two
quantities regarding the solution of
<P> <IMG WIDTH=296 HEIGHT=19 ALIGN=BOTTOM ALT="displaymath22" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   > <P>
where <I>x</I>, <I>y</I>, and <I>z</I> are constrained to be positive integers
less than or equal to <I>N</I>.   You
are to compute the number of triples (<I>x</I>,<I>y</I>,<I>z</I>) such that <I>x</I><per><</per><I>y</I><per><</per>
<I>z</I>, and they are relatively prime, i.e., have no common divisor larger than
1.  You are also to compute the number of values  <IMG WIDTH=78 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   >  such that
<I>p</I> is not part of any triple (not just relatively prime triples).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of positive
integers, one per line.  Each integer
in the input file will be less than or equal to 1,000,000.  Input is
terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each integer <I>N</I> in the input file print two integers separated by a
space.  The first integer is the number of relatively prime triples
(such that each component of the triple is  <IMG WIDTH=33 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   > ).  The second number
is the number of positive
integers  <IMG WIDTH=33 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   >  that are not part of any triple whose
components are all  <IMG WIDTH=33 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/1/106img1.gif"   > .  There should be one output line for each
input line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10
25
100</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 4
4 9
16 27</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
107||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Cat in the Hat</TITLE>
<META NAME="description" CONTENT="The Cat in the Hat">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Cat in the Hat</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
(An homage to Theodore Seuss Geisel)
<P> 
The Cat in the Hat is a nasty creature,<BR> 
But the striped hat he is wearing has a rather nifty feature.
<P>
With one flick of his wrist he pops his top off.
<P>
Do you know what's inside that Cat's hat?<BR> 
A bunch of small cats, each with its own striped hat.
<P>
Each little cat does the same as line three,<BR> 
All except the littlest ones, who just say ``Why me?''
<P>
Because the littlest cats have to clean all the grime,<BR> 
And they're tired of doing it time after time!
  <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
A clever cat walks into a messy room which he needs to clean.  Instead
of doing the work alone, it decides to have its helper cats do the
work.  It keeps its (smaller) helper cats inside
its hat.  Each helper cat also has helper cats in its own hat,
and so on.  Eventually, the cats reach a smallest size. These smallest
cats have no additional cats in their hats.
These unfortunate smallest cats have to do the cleaning.
<P>
The number of cats inside each (non-smallest)
cat's hat is a constant, <I>N</I>.  The
height of these cats-in-a-hat is  <IMG WIDTH=30 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/1/107img1.gif"   >  times the height of the cat
whose hat they are in.
<BLOCKQUOTE> The smallest cats are of height one; <BR> 
these are the cats that get the work done.
</BLOCKQUOTE>
All heights are positive integers.
<P>
Given the height of the initial cat and the number of worker cats (of
height one), find the number of cats that are not doing any work (cats
of height greater than one) and also determine the sum of all the cats'
heights (the height of a stack of all cats standing one on top of another).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of cat-in-hat specifications.  Each
specification is a single line consisting of two positive integers,
separated by
white space.  The first integer is the height of the initial cat, and
the second integer is the number of worker cats.
<P>
A pair of 0's on a line indicates the end of input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each input line (cat-in-hat specification),
print the number of cats that are not
working, followed by a space, followed by the height of the stack of cats.
There should be one output line for each input line other than the ``0 0''
that terminates input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>216 125
5764801 1679616
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>31 671
335923 30275911</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
108||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Maximum Sum</TITLE>
<META NAME="description" CONTENT="Maximum Sum">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Maximum Sum</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
A problem that is simple to solve in one dimension is often much more
difficult to solve in more than one dimension.  Consider satisfying a
boolean expression in conjunctive normal form in which each conjunct
consists of exactly 3 disjuncts.  This problem (3-SAT) is NP-complete.
The problem 2-SAT is solved quite efficiently, however. In contrast, some problems belong to the same complexity class
regardless of the dimensionality of the problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a 2-dimensional array of positive and negative integers, find
the sub-rectangle with the largest sum.  The sum of a rectangle is the
sum of all the elements in that rectangle.  In this problem the
sub-rectangle with the largest sum is referred to as the <EM>maximal
sub-rectangle</EM>. A sub-rectangle is any contiguous
sub-array of size  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   >  or greater located within the
whole array. As an example, the maximal sub-rectangle of the array:
<P> <IMG WIDTH=322 HEIGHT=78 ALIGN=BOTTOM ALT="displaymath35" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   > <P>
<P>
is in the lower-left-hand corner:
<P> <IMG WIDTH=274 HEIGHT=56 ALIGN=BOTTOM ALT="displaymath37" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   > <P>
<P>
and has the sum of 15.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Input and Output</A></FONT></H2>
<P>
The input consists of an  <IMG WIDTH=52 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   >  array of integers.
The input begins with a single positive integer <I>N</I> on a line by itself
indicating the size of the square two dimensional array.  This is
followed by  <IMG WIDTH=21 HEIGHT=14 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   >  integers separated by white-space (newlines and
spaces).  These  <IMG WIDTH=21 HEIGHT=14 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/1/108img1.gif"   >  integers make up the array in row-major order
(i.e., all numbers on the first row, left-to-right, then all numbers on
the second row, left-to-right, etc.).  <I>N</I> may be as large as 100.  The
numbers in the array will be in the range [-127, 127].
<P>
<P>
The output is the sum of the maximal sub-rectangle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
0 -2 -7  0 9  2 -6  2
-4  1 -4  1 -1
8  0 -2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>15</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
109||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>SCUD Busters</TITLE>
<META NAME="description" CONTENT="SCUD Busters">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">SCUD Busters</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Some problems are difficult to solve but have a simplification that is
easy to solve.  Rather than deal with the difficulties of constructing a
model of the Earth (a somewhat oblate spheroid),
consider a pre-Columbian flat world that is a 500 kilometer  <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   >  500
kilometer square.
<P>
In the model used in this problem, the flat world consists of several
warring kingdoms.  Though warlike, the people of the world are strict
isolationists; each kingdom is surrounded by a high (but thin) wall
designed to both protect the kingdom and to isolate it.  To avoid fights
for power, each kingdom has its own electric power plant.
<P>
When the urge to fight becomes too great, the people of a kingdom often
launch missiles at other kingdoms.  Each SCUD missile (Sanitary
Cleansing Universal Destroyer) that
lands within the walls of a kingdom destroys that kingdom's power plant
(without loss of life).
<P>
</U></U></U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given coordinate locations of several kingdoms (by specifying
the locations of houses and
the location of the power plant in a kingdom) and missile landings you
are to write a program that determines the total area of all kingdoms
that are without power after an exchange of missile fire.
<P>
In the simple world of this problem kingdoms do not overlap.
Furthermore, the walls surrounding each kingdom are considered to be of
zero thickness.  The wall surrounding a kingdom is the minimal-perimeter
wall that completely surrounds all the houses and the power station
that comprise a kingdom;
the area of a kingdom is the area enclosed by the minimal-perimeter thin
wall.
<P>
There is exactly one power station per
kingdom.
<P>
There may be empty space between kingdoms.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of kingdom specifications followed by a sequence
of missile landing locations.
<P>
A kingdom is specified by a number <I>N</I> ( <IMG WIDTH=96 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   > ) on a
single line which
indicates the number of sites in this kingdom.  The next
line contains the <I>x</I> and <I>y</I> coordinates of the power station,
followed by <I>N</I>-1 lines of <I>x</I>, <I>y</I> pairs indicating the locations of
homes served by this power station.  A value of -1 for <I>N</I> indicates
that there are no more kingdoms.  There will be at least one kingdom
in the data set.
<P>
Following the last kingdom specification will be the coordinates of
one or more missile attacks, indicating the location of a missile
landing.  Each missile location is on a line by itself.  You are to
process missile attacks until you reach the end of the file.
<P>
Locations are specified in kilometers using coordinates on a 500 km by
500 km grid.  All coordinates will be integers between 0 and 500
inclusive.  Coordinates are specified as a pair of integers separated
by white-space on a single line.  The input file will consist of up to
20 kingdoms, followed by any number of missile attacks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
The output consists of a single number representing the total area of
all kingdoms without electricity after all missile attacks have been
processed.  The number should be printed with (and correct to) two
decimal places.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>12
3 3
4 6
4 11
4 8
10 6
5 7
6 6
6 3
7 9
10 4
10 9
1 7
5
20 20
20 40
40 20
40 40
30 30
3
10 10
21 10
21 13
-1
5 5
20 12</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>70.50</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001007000000000000000">A Hint</A></FONT></H2>
<P>
You may or may not find the following formula useful.
<P>
Given a polygon described by the vertices  <IMG WIDTH=94 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   >  such that  <IMG WIDTH=55 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   > , the signed area of the polygon is given by
<P> <IMG WIDTH=354 HEIGHT=45 ALIGN=BOTTOM ALT="displaymath59" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   > <P>
where  the x, y
coordinates of  <IMG WIDTH=85 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   > ; the edges of the polygon are from  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   >  to
 <IMG WIDTH=29 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline69" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   >  for  <IMG WIDTH=103 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline71" SRC="http://uva.onlinejudge.org/external/1/109img1.gif"   > .
<P>
If the points describing the polygon are given
in a counterclockwise direction, the value of <I>a</I> will be positive,
and if the points of the polygon are listed in a clockwise direction,
the value of <I>a</I> will be negative.
<P>
</BODY>
</HTML>

______________________________________________________
110||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.48)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Meta-Loopless Sorts</TITLE>
<META NAME="description" CONTENT="Meta-Loopless Sorts">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Meta-Loopless Sorts</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Background</A>&nbsp;</FONT>
</H2>
Sorting holds an important place in computer science.  Analyzing and
implementing various sorting algorithms forms an important part of the
education of most computer scientists, and sorting accounts for a significant
percentage of the world's computational resources.  Sorting
algorithms range from the bewilderingly popular Bubble sort, to
Quicksort, to parallel sorting algorithms and sorting networks.  In this
problem you will be writing a program that creates a sorting program
(a meta-sorter).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
The Problem</A>&nbsp;</FONT>
</H2>
The problem is to create several programs whose output is a standard
Pascal program that
sorts <SPAN CLASS="MATH"><I>n</I></SPAN> numbers where <SPAN CLASS="MATH"><I>n</I></SPAN> is the only input to the program you will write.
The Pascal programs generated by your program must have the following
properties:

<P>

<UL>
<LI>They must begin with <TT>program sort(input,output);</TT>

<P>
</LI>
<LI>They must declare storage for
exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <TT>integer</TT> variables.  The names of the
variables must come from the first <SPAN CLASS="MATH"><I>n</I></SPAN> letters of the alphabet (a,b,c,d,e,f).

<P>
</LI>
<LI>A single <TT>readln</TT>
statement must read in values for all the integer variables.

<P>
</LI>
<LI>Other than <TT>writeln</TT> statements, the only statements in the
program are <TT>if then else</TT> statements.  The boolean conditional for
each <TT>if</TT> statement must consist of one strict inequality (either <SPAN CLASS="MATH">&lt;</SPAN>
or <SPAN CLASS="MATH">&gt;</SPAN>) of two integer variables.  Exactly <SPAN CLASS="MATH"><I>n</I>!</SPAN> <TT>writeln</TT> statements
must appear in the program.

<P>
</LI>
<LI>Exactly three semi-colons must appear in the programs

<OL>
<LI>after the
program header: <TT>program sort(input,output);</TT>

<P>
</LI>
<LI>after the variable declaration: <TT>...: integer;</TT>

<P>
</LI>
<LI>after the <TT>readln</TT> statement: <TT>readln(...);</TT>
</LI>
</OL>

<P>
</LI>
<LI>No redundant comparisons of integer variables should be made.
For example, during program execution,
once it is determined that <SPAN CLASS="MATH"><I>a</I> &lt; <I>b</I></SPAN>, variables <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN>
should not be compared again.

<P>
</LI>
<LI>Every <TT>writeln</TT> statement must appear on a line by itself.

<P>
</LI>
<LI>The programs must compile.  Executing the program with input
consisting of any
arrangement of any <SPAN CLASS="MATH"><I>n</I></SPAN> distinct integer values should result in the input
values being printed in sorted order.
</LI>
</UL>

<P>
For those unfamiliar with Pascal syntax, the example at the end of this
problem completely defines the small subset of Pascal needed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
The Input</A>&nbsp;</FONT>
</H2>The input consist on a number in the first line indicating the number M of programs to make, followed by a blank line.
Then there are M test cases, each one consisting on a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> on a line by itself with <!-- MATH
 $1 \leq n
\leq 8$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/110img1.png" 
 ALT="$ \leq$"> <I>n</I> <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/110img1.png" 
 ALT="$ \leq$"> 8</SPAN>. There will be a blank line between test cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
The Output</A>&nbsp;</FONT>
</H2>
The output is M compilable standard
Pascal programs meeting the criteria specified above.
Print a blank line between two consecutive programs.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<pre>
1

3
</pre>
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
program sort(input,output);
var
a,b,c : integer;
begin
  readln(a,b,c);
  if a &lt; b then
    if b &lt; c then
      writeln(a,b,c)
    else if a &lt; c then
      writeln(a,c,b)
    else
      writeln(c,a,b)
  else
    if a &lt; c then
      writeln(b,a,c)
    else if b &lt; c then
      writeln(b,c,a)
    else
      writeln(c,b,a)
end.
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2001-05-25
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
111||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>History Grading</TITLE>
<META NAME="description" CONTENT="History Grading">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">History Grading</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Many problems in Computer Science involve maximizing some measure
according to constraints.
<P>
Consider a history exam in which students are asked to put several
historical events into chronological order.  Students who order all the
events correctly will receive full credit, but how should partial credit
be awarded to students who incorrectly rank one or more of the
historical events?
<P>
Some possibilities for partial credit include:
<OL><LI> 1 point for each event whose rank matches its correct rank<LI> 1 point for each event in the longest (not necessarily contiguous)
sequence of events which are in the correct order relative to each other.
</OL>
<P>
For example, if four events are correctly ordered 1 2 3 4 then the
order 1 3 2 4 would receive a score of 2 using the first method (events
1 and 4 are correctly ranked) and a score of 3 using the second method
(event sequences 1 2 4 and 1 3 4 are both in the correct order relative
to each other).
<P>
In this problem you are asked to write a program to score such questions
using the second method.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given the correct chronological order of <I>n</I> events  <IMG WIDTH=73 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   >  as
 <IMG WIDTH=84 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   >  where  <IMG WIDTH=77 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   >  denotes the ranking of
event <I>i</I> in the correct chronological order and a sequence of student
responses  <IMG WIDTH=85 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   >  where  <IMG WIDTH=78 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   >  denotes the
chronological rank given by the student to event <I>i</I>; determine the
<U> length </U> of the longest (not necessarily contiguous) sequence
of events in the student responses that are in the correct chronological
order relative to each other.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The first line of the input will consist of one integer <I>n</I> indicating
the number of events with  <IMG WIDTH=82 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   > .  The second line will
contain <I>n</I> integers, indicating the correct chronological order of <I>n</I>
events.  The remaining lines will each consist of <I>n</I> integers with each
line representing a student's chronological ordering of the n events.
All lines will contain <I>n</I> numbers in the range  <IMG WIDTH=52 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/1/111img1.gif"   > , with each number
appearing exactly once per line, and with each number separated from
other numbers on the same line by one or more spaces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each student ranking of events your program should print the score
for that ranking.  There should be one line of output for each student
ranking.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input 1</A></FONT></H2>
<P>
<PRE>4
4 2 3 1
1 3 2 4
3 2 1 4
2 3 4 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output 1</A></FONT></H2>
<P>
<PRE>1
2
3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001007000000000000000">Sample Input 2</A></FONT></H2>
<P>
<PRE>
10
3 1 2 4 9 5 10 6 8 7
1 2 3 4 5 6 7 8 9 10
4 7 2 3 10 6 9 1 5 8
3 1 2 4 9 5 10 6 8 7
2 10 1 3 8 4 9 5 7 6
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001008000000000000000">Sample Output 2</A></FONT></H2>
<P>
<PRE>
6
5
10
9
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
112||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tree Summing</TITLE>
<META NAME="description" CONTENT="Tree Summing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Tree Summing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
LISP was one of the earliest high-level programming languages and, with
FORTRAN, is one of the oldest languages currently being used.  Lists,
which are the fundamental data structures in LISP, can easily be adapted
to represent other important data structures such as trees.
<P>
This problem deals with determining whether binary trees represented as
LISP S-expressions possess a certain property.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a binary tree of integers, you are to write a program that
determines whether there exists a root-to-leaf path whose
nodes sum to a specified integer.  For example, in the tree shown below
there are exactly four root-to-leaf paths.
The sums of the paths are 27, 22, 26, and 18.
<P> <IMG WIDTH=290 HEIGHT=226 ALIGN=BOTTOM ALT="picture25" SRC="http://uva.onlinejudge.org/external/1/112img1.gif"   > <P>
<P>
Binary trees are represented in the input file as LISP S-expressions
having the following form.
<PRE><TT> 
<EM>empty tree</EM> 		 ::= 		 ()
<P>
<EM>tree</EM> 		 ::= 		 <EM>empty tree</EM>  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline118" SRC="http://uva.onlinejudge.org/external/1/112img1.gif"   >  (integer <EM>tree</EM> <EM>tree</EM>)
<P>
</TT></PRE>
<P>
The tree diagrammed above is represented by the expression
(5 (4 (11 (7 () ()) (2 () ()) ) ())  (8 (13 () ()) (4 ()  (1 () ()) ) )  )
<P>
Note that with this formulation all leaves of a tree are of the form
(integer () () )
<P>
Since an empty tree has no root-to-leaf paths, any query as to whether a
path exists whose sum is a specified integer in an empty tree
must be answered negatively.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of test cases in the
form of integer/tree pairs.  Each test case
consists of an integer followed by one or more spaces followed by a
binary tree formatted as an S-expression as described above.  All
binary tree S-expressions will be valid, but expressions may be
spread over several lines and may contain spaces.
There will be one or more test cases in an  input file, and input is
terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
There should be one line of output for each test case (integer/tree
pair) in the input file.  For each pair <I>I</I>,<I>T</I> (<I>I</I> represents the
integer, <I>T</I> represents the tree) the output is the string <EM>yes</EM> if
there is a root-to-leaf path in <I>T</I> whose sum is <I>I</I> and <EM>no</EM> if
there is no path in <I>T</I> whose sum is <I>I</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>22 (5(4(11(7()())(2()()))()) (8(13()())(4()(1()()))))
20 (5(4(11(7()())(2()()))()) (8(13()())(4()(1()()))))
10 (3 
     (2 (4 () () )
        (8 () () ) )
     (1 (6 () () )
        (4 () () ) ) )
5 ()</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>yes
no
yes
no</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
113||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Power of Cryptography</TITLE>
<META NAME="description" CONTENT="Power of Cryptography">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Power of Cryptography</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Current work in cryptography involves (among other things) large prime
numbers and computing powers of numbers modulo functions of these
primes.  Work in this area has resulted in the practical use of results
from number theory and other branches of mathematics once considered to
be of only theoretical interest.
<P>
This problem involves the efficient computation of integer roots of
numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given an integer  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  and an integer  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  you are to write a
program that determines  <IMG WIDTH=22 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   > , the positive  <IMG WIDTH=26 HEIGHT=18 ALIGN=BOTTOM ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  root
of <I>p</I>.  In this problem, given such integers <I>n</I> and <I>p</I>, <I>p</I> will
always be of the form  <IMG WIDTH=17 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  for an integer <I>k</I> (this integer is what
your program must find).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of integer pairs <I>n</I> and <I>p</I> with each
integer on a line by itself.  For all such pairs  <IMG WIDTH=91 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   > ,
 <IMG WIDTH=100 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  and there exists an integer <I>k</I>,  <IMG WIDTH=88 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline62" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  such that  <IMG WIDTH=50 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each integer pair <I>n</I> and <I>p</I> the value  <IMG WIDTH=22 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   >  should be printed,
i.e., the number <I>k</I> such that  <IMG WIDTH=50 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/113img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
16
3
27
7
4357186184021382204544</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>4
3
1234</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
114||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Simulation Wizardry</TITLE>
<META NAME="description" CONTENT="Simulation Wizardry">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Simulation Wizardry</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Simulation is an important application area in computer science
involving the development of computer models to provide insight into
real-world events.  There are many kinds of simulation including (and
certainly not limited to) discrete event simulation and clock-driven
simulation.  Simulation often involves approximating observed behavior
in order to develop a practical approach.
<P>
This problem involves the simulation of a simplistic <EM>pinball</EM>
machine. In a pinball machine, a steel ball rolls around a surface,
hitting various objects (<EM>bumpers</EM>) and accruing points until the
ball ``disappears'' from the surface.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
You are to write a program that simulates an idealized pinball machine.
This machine has a flat surface that has some obstacles (bumpers and
walls). The surface is modeled as an  <IMG WIDTH=46 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/1/114img1.gif"   >  grid with the origin
in the lower-left corner. Each bumper occupies a grid point.  The grid
positions on the edge of the surface are walls.  Balls are shot (appear)
one at a time on the grid, with an initial position, direction, and
lifetime.  In this simulation, all positions are integral, and the
ball's direction is one of: up, down, left, or right. The ball bounces
around the grid, hitting bumpers (which accumulates points) and walls
(which does not add any points).  The number of points accumulated by
hitting a given bumper is the <EM>value</EM> of that bumper.  The speed
of all balls is one grid space per timestep.  A ball ``hits'' an
obstacle during a timestep when it would otherwise move on top of the
bumper or wall grid point. A hit causes the ball to ``rebound'' by
turning right (clockwise) 90 degrees, without ever moving on top of the
obstacle and without changing position (only the direction changes as a
result of a rebound).  Note that by this definition sliding along a wall
does not constitute ``hitting'' that wall.
<P>
A ball's lifetime indicates how many time units the ball will live
before disappearing from the surface. The ball uses one unit of lifetime
for each grid step it moves. It also uses some units of lifetime for
each bumper or wall that it hits. The lifetime used by a hit is the <EM>
cost</EM> of that bumper or wall.  As long as the ball has a positive
lifetime when it hits a bumper, it obtains the full score for that
bumper. Note that a ball with lifetime one will ``die'' during its next
move and thus cannot obtain points for hitting a bumper during this last
move.  Once the lifetime is non-positive (less than or equal to zero),
the ball disappears and the game continues with the next ball.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
Your program should simulate one game of pinball.  There are several
input lines that describe the game. The first line gives integers <I>m</I>
and <I>n</I>, separated by a space. This describes a cartesian grid where  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/1/114img1.gif"   >  and  <IMG WIDTH=73 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/1/114img1.gif"   >  on which the game is ``played''.
It will be the case that 2 &lt; <I>m</I> &lt; 51 and 2 &lt; <I>n</I> &lt; 51.  The next line
gives the integer cost for hitting a wall. The next line gives the
number of bumpers, an integer  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/1/114img1.gif"   > . The next <I>p</I> lines give the <I>x</I> 
position, <I>y</I> position, value, and cost, of each bumper, as four
integers per line separated by space(s).  The <I>x</I> and <I>y</I> positions of all 
bumpers will be in the range of the grid.  The value and cost may be
any integer (i.e., they may be negative; a negative cost <EM>adds</EM>
lifetime to a ball that hits the bumper).  The remaining lines of the
file represent the balls. Each line represents one ball, and contains
four integers separated by space(s): the initial <I>x</I> and <I>y</I> position
of the ball, the direction of movement, and its lifetime. The position
will be in range (and not on top of any bumper or wall).  The direction
will be one of four values: 0 for increasing <I>x</I> (right), 1 for
increasing <I>y</I> (up), 2 for decreasing <I>x</I> (left), and 3 for decreasing
<I>y</I> (down).  The lifetime will be some positive integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
There should be one line of output for each ball giving an integer
number of points accumulated by that ball in the same order as the balls
appear in the input. After all of these lines, the total points for all
balls should be printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4 4
0
2
2 2 1 0
3 3 1 0
2 3 1 1
2 3 1 2
2 3 1 3
2 3 1 4
2 3 1 5</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0
0
1
2
2
5</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
115||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Climbing Trees</TITLE>
<META NAME="description" CONTENT="Climbing Trees">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Climbing Trees</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Expression trees, B and B* trees, red-black trees, quad trees, PQ 
trees; trees play a significant role in many domains of computer 
science. Sometimes the name of a problem may indicate that trees are 
used when they are not, as in the Artificial Intelligence planning 
problem traditionally called the <EM>Monkey and Bananas problem</EM>.  
Sometimes trees may be used in a problem whose name gives no 
indication that trees are involved, as in the <EM>Huffman code</EM>.
<P>
<P>
This problem involves determining how pairs of people who may be part of
a ``family tree'' are related.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a sequence of <EM>child-parent</EM> pairs, where a pair consists of
the child's name followed by the (single) parent's name, and a list of
query pairs also expressed as two names, you are to write a program to
determine whether the query pairs are related. If the names comprising a
query pair are related the program should determine what the
relationship is.  Consider academic advisees and advisors as exemplars
of such a single parent genealogy (we assume a single advisor, i.e., no
co-advisors).
<P>
<P>
In this problem the child-parent pair  <IMG WIDTH=27 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline76" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  denotes that <I>p</I> is
the child of <I>q</I>.  In determining relationships between names we use the
following definitions:
<UL><LI> <I>p</I> is a <EM>0-descendent</EM> of <I>q</I> (respectively <EM>0-ancestor</EM>)
if and only if the child-parent pair  <IMG WIDTH=27 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline76" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  (respectively  <IMG WIDTH=26 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline88" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > ) appears
in the input sequence of child-parent pairs.<LI> <I>p</I> is a <EM>k-descendent</EM> of <I>q</I> (respectively <EM>k-ancestor</EM>)
if and only if the child-parent pair  <IMG WIDTH=27 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline94" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  (respectively  <IMG WIDTH=25 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline96" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > ) appears
in the input sequence and <I>r</I> is a (<I>k</I>-1)-descendent of <I>q</I>
(respectively <I>p</I> is a (<I>k</I>-1)-ancestor of <I>r</I>).
</UL>
<P>
For the purposes of this problem the relationship between a person <I>p</I>
and a person <I>q</I> is expressed as exactly one of the following four relations:
<OL><LI> child -- grand child, great grand child, great great grand child,
<EM>etc.</EM>
<P>
By definition <I>p</I> is the ``child'' of <I>q</I> if and only if the pair  <IMG WIDTH=27 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline76" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > 
appears in the input sequence of child-parent pairs (i.e., p is a
0-descendent of q); <I>p</I> is the ``grand
child'' of <I>q</I> if and only if <I>p</I> is a 1-descendent of <I>q</I>;
and
<P> <IMG WIDTH=427 HEIGHT=38 ALIGN=BOTTOM ALT="displaymath33" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > <P>
if and only if <I>p</I> is an (<I>n</I>+1)-descendent of <I>q</I>.<LI> parent -- grand parent, great grand parent, great great grand
parent, <EM>etc.</EM>
<P>
By definition <I>p</I> is the ``parent'' of <I>q</I> if and only if the pair  <IMG WIDTH=26 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline88" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > 
appears in the input sequence of child-parent pairs (i.e., <I>p</I> is a
0-ancestor of <I>q</I>); <I>p</I> is the ``grand
parent'' of <I>q</I> if and only if <I>p</I> is a 1-ancestor of <I>q</I>; and
<P> <IMG WIDTH=433 HEIGHT=38 ALIGN=BOTTOM ALT="displaymath40" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > <P>
if and only if <I>p</I> is an (<I>n</I>+1)-ancestor of <I>q</I>.<LI> cousin --  <IMG WIDTH=24 HEIGHT=19 ALIGN=BOTTOM ALT="tex2html_wrap_inline158" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  cousin,  <IMG WIDTH=21 HEIGHT=17 ALIGN=BOTTOM ALT="tex2html_wrap_inline160" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  cousin,  <IMG WIDTH=26 HEIGHT=18 ALIGN=BOTTOM ALT="tex2html_wrap_inline162" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > 
cousin, <EM>etc.</EM>; cousins may be once removed, twice removed, three times
removed, <EM>etc.</EM>
<P>
By definition <I>p</I> and <I>q</I> are ``cousins'' if and only if they are
related (i.e., there is a path from <I>p</I> to <I>q</I> in the implicit
undirected parent-child tree).  Let <I>r</I> represent the least common
ancestor of <I>p</I> and <I>q</I> (i.e., no descendent of <I>r</I> is an ancestor of
both <I>p</I> and <I>q</I>), where <I>p</I> is an <I>m</I>-descendent of <I>r</I> and <I>q</I> is an
<I>n</I>-descendent of <I>r</I>.
<P>
Then, by definition, cousins <I>p</I> and <I>q</I> are `` <IMG WIDTH=25 HEIGHT=18 ALIGN=BOTTOM ALT="tex2html_wrap_inline200" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  
cousins'' if and only if  <IMG WIDTH=120 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline202" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > , and, also by definition, <I>p</I> 
and <I>q</I> are ``cousins removed <I>j</I> times'' if and only if  <IMG WIDTH=102 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline210" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > .<LI> sibling --  <IMG WIDTH=24 HEIGHT=19 ALIGN=BOTTOM ALT="tex2html_wrap_inline158" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   > 
cousins removed 0 times are ``siblings'' (they have the same parent).
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of parent-child pairs of names, one pair per line.
Each name in a pair consists of lower-case alphabetic characters or
periods (used to separate first and last names, for example).  Child
names are separated from parent names by one or more spaces.
Parent-child pairs are terminated by a pair whose first component is the
string ``<EM>no.child</EM>''. 
Such a pair is NOT to be considered as a parent-child
pair, but only as a delimiter to separate the parent-child
pairs from the query pairs.  There will be no circular relationships,
i.e., no name <I>p</I> can be <EM>both</EM> an ancestor and a descendent of
the same name <I>q</I>.
<P>
<P>
The parent-child pairs are followed by a sequence of query pairs in the
same format as the parent-child pairs, i.e., each name in a query pair is
a sequence of lower-case alphabetic characters and periods, and names are
separated by one or more spaces.  Query pairs are terminated by end-of-file.
<P>
<P>
There will be a maximum of 300 different names overall
(parent-child and query pairs).  All names will be fewer than 31
characters in length.  There will be no more than 100 query pairs.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each query-pair  <IMG WIDTH=27 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline76" SRC="http://uva.onlinejudge.org/external/1/115img1.gif"   >  
of names the output should indicate the relationship
<I>p</I> <EM>is-the-relative-of</EM> <I>q</I> by the appropriate string of the form
<UL><LI> child, grand child, great grand child, great great ...great
grand child<LI> parent, grand parent, great grand parent, great great ...great
grand parent<LI> sibling<LI> <I>n</I> cousin removed <I>m</I><LI> no relation
</UL>
If an <I>m</I>-cousin is removed 0 times then only <EM>m cousin</EM> should be
printed, i.e., <EM>removed 0</EM> should NOT be printed.  Do not print 
<EM>st, nd, rd, th</EM> after the numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>alonzo.church oswald.veblen
stephen.kleene alonzo.church
dana.scott alonzo.church
martin.davis alonzo.church
pat.fischer hartley.rogers
mike.paterson david.park
dennis.ritchie pat.fischer
hartley.rogers alonzo.church
les.valiant mike.paterson
bob.constable stephen.kleene
david.park hartley.rogers
no.child no.parent
stephen.kleene bob.constable
hartley.rogers stephen.kleene
les.valiant alonzo.church
les.valiant dennis.ritchie
dennis.ritchie les.valiant
pat.fischer michael.rabin</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>parent
sibling
great great grand child
1 cousin removed 1
1 cousin removed 1
no relation</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
116||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Unidirectional TSP</TITLE>
<META NAME="description" CONTENT="Unidirectional TSP">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Unidirectional TSP</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Problems that require minimum paths through some domain appear in many
different areas of computer science.  For example, one of the
constraints in VLSI routing problems is minimizing wire length. The
Traveling Salesperson Problem (TSP) -- finding whether all the cities in
a salesperson's route can be visited exactly once with a specified limit
on travel time -- is one of the canonical examples of an NP-complete
problem; solutions appear to require an inordinate amount of time to
generate, but are simple to check.
<P>
This problem deals with finding a minimal path through a grid of
points while traveling only from left to right.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given an  <IMG WIDTH=46 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline352" SRC="http://uva.onlinejudge.org/external/1/116img1.gif"   >  matrix of integers, you are to write a
program that computes a path of minimal weight.  A path starts anywhere
in column 1 (the first column) and consists of a sequence of steps
terminating in column <I>n</I> (the last column).  A step consists of
traveling from column <I>i</I> to column <I>i</I>+1 in an adjacent (horizontal or
diagonal) row.  The first and last rows (rows 1 and <I>m</I>) of a matrix
are considered adjacent, i.e., the matrix ``wraps'' so that it represents
a horizontal cylinder.  Legal steps are illustrated below.
<P> <IMG WIDTH=67 HEIGHT=99 ALIGN=BOTTOM ALT="picture25" SRC="http://uva.onlinejudge.org/external/1/116img1.gif"   > <P>
<P>
The <EM>weight</EM> of a path is the sum of the integers in
each of the <I>n</I> cells of the matrix that are visited.
<P>
For example, two slightly different  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline366" SRC="http://uva.onlinejudge.org/external/1/116img1.gif"   > 
matrices are shown below (the only difference is the numbers in the bottom
row).
<P>
<P> <IMG WIDTH=534 HEIGHT=175 ALIGN=BOTTOM ALT="picture37" SRC="http://uva.onlinejudge.org/external/1/116img1.gif"   > <P>
<P>
The minimal path is illustrated for each matrix.  Note that the path for
the matrix on the right takes advantage of the adjacency property of
the first and last rows.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of matrix specifications.  Each matrix
specification consists of the row and column dimensions in that order on
a line followed by  <IMG WIDTH=37 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline376" SRC="http://uva.onlinejudge.org/external/1/116img1.gif"   >  integers where <I>m</I> is the row dimension
and <I>n</I> is the column dimension.  The integers appear in the input in
row major order, i.e., the first <I>n</I> integers constitute the first row of
the matrix, the second <I>n</I> integers constitute the second row and so on.
The integers on a line will be separated from other integers by one or
more spaces.  Note: integers are not restricted to being positive.
There will be one or more matrix specifications in an
input file. Input is terminated by end-of-file.
<P>
For each specification the number of rows will be between 1 and 10
inclusive; the number of columns will be between 1 and 100 inclusive.
No path's weight will exceed integer values representable
using 30 bits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
Two lines should be output for each matrix specification in the input
file, the first line represents a minimal-weight path, and the second
line is the cost of a minimal path.  The path consists of a sequence of
<I>n</I> integers (separated by one or more spaces)
representing the rows that constitute the minimal path.  If
there is more than one path of minimal weight the path that is
<i>lexicographically</i> smallest should be output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 6
3 4 1 2 8 6
6 1 8 2 7 4
5 9 3 9 9 5
8 4 1 3 2 6
3 7 2 8 6 4
5 6
3 4 1 2 8 6
6 1 8 2 7 4
5 9 3 9 9 5
8 4 1 3 2 6
3 7 2 1 2 3
2 2
9 10 9 10</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 3 4 4 5
16
1 2 1 5 4 5
11
1 1
19</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
117||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Postal Worker Rings Once</TITLE>
<META NAME="description" CONTENT="The Postal Worker Rings Once">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Postal Worker Rings Once</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Graph algorithms form a very important part of computer science and have
a lineage that goes back at least to Euler and the famous <EM>Seven
Bridges of K&#246;nigsberg</EM> problem.  Many optimization problems involve
determining efficient methods for reasoning about graphs.
<P>
<P>
This problem involves determining a route for a postal worker so that
all mail is delivered while the postal worker walks a minimal distance,
so as to rest weary legs.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a sequence of streets (connecting given intersections) you are to
write a program that determines the minimal cost tour that traverses
every street at least once.  The tour must begin and end at the same
intersection.
<P>
<P>
The ``real-life'' analogy concerns a postal worker who parks a truck at
an intersection and then walks all streets on the postal delivery route
(delivering mail) and returns to the truck to continue with the next
route.
<P>
<P>
The cost of traversing a street is a function of the length of the
street (there is a cost associated with delivering mail to houses and
with walking even if no delivery occurs).
<P>
<P>
In this problem the number of streets that meet at a given intersection
is called the <EM>degree</EM> of the intersection.  There will be at most
two intersections with odd degree. All other intersections will have
even degree, i.e., an even number of streets meeting at that intersection.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of one or more postal routes.  A route
is composed of a sequence of street names (strings), one per line, and
is terminated by the string ``<EM>deadend</EM>'' which is NOT part of the
route.  The first and last letters of each street name specify the two
intersections for that street, the length of the street name indicates
the cost of traversing the street.  All street names will consist of
lowercase alphabetic characters.
<P>
<P>
For example, the name <EM>foo</EM>
indicates a street with intersections <I>f</I> and <I>o</I> of length 3, and the
name <EM>computer</EM> indicates a street with intersections <I>c</I> and <I>r</I> of
length 8.  No street name will have the same first and last letter and
there will be at most one street directly connecting any two
intersections.  As specified, the number of intersections with odd
degree in a postal route will be at most two.  In each postal route
there will be a path between all intersections, i.e., the intersections
are connected.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each postal route the output should consist of the cost of the
minimal tour that visits all streets at least once.  The minimal tour
costs should be output in the order corresponding to the input postal routes.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>one
two
three
deadend
mit
dartmouth
linkoping
tasmania
york
emory
cornell
duke
kaunas
hildesheim
concord
arkansas
williams
glasgow
deadend</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>11
114</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
118||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mutant Flatworld Explorers</TITLE>
<META NAME="description" CONTENT="Mutant Flatworld Explorers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mutant Flatworld Explorers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Robotics, robot motion planning, and machine learning are areas that
cross the boundaries of many of the subdisciplines that comprise
Computer Science: artificial intelligence, algorithms and complexity,
electrical and mechanical engineering to name a few.  In addition,
robots as ``turtles'' (inspired by work by Papert, Abelson,
and diSessa) and as ``beeper-pickers'' (inspired by work by Pattis) have
been studied and used by students as an introduction to programming for
many years.
<P>
This problem involves determining the position of a robot exploring a
pre-Columbian flat world.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given the dimensions of a rectangular grid and a sequence of robot
positions and instructions, you are to write a program that determines
for each sequence of robot positions and instructions the final position
of the robot.
<P>
A robot <EM>position</EM> consists of a grid coordinate (a pair of
integers: x-coordinate followed by y-coordinate) and an orientation
(N,S,E,W for north, south, east, and west).  A robot <EM>instruction</EM>
is a string of the letters '<EM>L</EM>', '<EM>R</EM>', and '<EM>F</EM>' which
represent, respectively, the instructions:
<UL><LI> <EM>Left</EM>: the robot turns left 90 degrees and remains on the
current grid point.<LI> <EM>Right</EM>: the robot turns right 90 degrees and remains on the
current grid point.<LI> <EM>Forward</EM>: the robot moves forward one grid point in the
direction of the current orientation and mantains the same orientation.
</UL>
<P>
The direction <EM>North</EM> corresponds to the direction from grid point
(<I>x</I>,<I>y</I>) to grid point (<I>x</I>,<I>y</I>+1).
<P>
Since the grid is rectangular and bounded, a robot that moves ``off'' an
edge of the grid is lost forever.  However, lost robots leave a robot
``scent'' that prohibits future robots from dropping off the world at
the same grid point.  The scent is left at the last grid position the
robot occupied before disappearing over the edge.  An instruction to
move ``off'' the world from a grid point from which a robot has been
previously lost is simply ignored by the current robot.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The first line of input is the upper-right coordinates of the rectangular
world, the lower-left coordinates are assumed to be 0,0.
<P>
The remaining input consists of a sequence of robot positions and
instructions (two lines per robot).  A position consists of two integers
specifying the initial coordinates of the robot and an orientation
(N,S,E,W), all separated by white space on one line.  A robot
instruction is a string of the letters 'L', 'R', and 'F' on one line.
<P>
Each robot is processed sequentially, i.e., finishes executing the robot
instructions before the next robot begins execution.
<P>
Input is terminated by end-of-file.
<P>
You may assume that all initial robot positions are within the bounds of
the specified grid.  The maximum value for any coordinate is 50.  All
instruction strings will be less than 100 characters in length.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each robot position/instruction in the input, the output should
indicate the final grid position and orientation of the robot.  If a
robot falls off the edge of the grid the word ``LOST'' should be printed
after the position and orientation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 3
1 1 E
RFRFRFRF
3 2 N
FRRFLLFFRRFLL
0 3 W
LLFFFLFLFL</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 1 E
3 3 N LOST
2 3 S</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
119||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Greedy Gift Givers</TITLE>
<META NAME="description" CONTENT="Greedy Gift Givers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Greedy Gift Givers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
This problem involves determining, for a group of gift-giving friends,
how much more each person gives than they receive (and vice versa for
those that view gift-giving with cynicism).
<P>
<P>
In this problem each person sets aside some money for gift-giving and
divides this money evenly among all those to whom gifts are given.
<P>
<P>
However, in any group of friends, some people are more giving than
others (or at least may have more acquaintances) and some people have
more money than others.
<P>
<P>
Given a group of friends, the money each person in the group spends on
gifts, and a (sub)list of friends to whom each person gives gifts; you
are to write a program that determines how much more (or less) each
person in the group gives than they receive.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of gift-giving groups.  
A group consists of several lines:
<UL><LI> the number of people in the group,<LI> a list of the names of each person in the group,<LI> a line for each person in the group consisting of
the name of the person,
the amount of money spent on gifts, the number of people to whom
gifts are given, and the names of those to whom gifts are given.
</UL>
<P>
All names are lower-case letters, there are no more than 10 people in a
group, and no name is more than 12 characters in length.  Money is a
non-negative integer less than 2000.
<P>
<P>
The input consists of one or more groups and is terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each group of gift-givers, the name of each person in the group
should be printed on a line followed by the net gain (or loss) received
(or spent) by the person.  Names in a group should be printed in the
same order in which they first appear in the input.
<P>
<P>
The output for each group should be separated from other groups by a
blank line.  All gifts are integers.  Each person gives the same integer
amount of money to each friend to whom any money is given, and gives as
much as possible.  Any money not given is kept and is part of a person's
``net worth'' printed in the output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
dave laura owen vick amr
dave 200 3 laura owen vick
owen 500 1 dave
amr 150 2 vick owen
laura 0 2 amr vick
vick 0 0
3
liz steve dave
liz 30 1 steve
steve 55 2 liz dave
dave 0 2 steve liz</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>dave 302
laura 66
owen -359
vick 141
amr -150

liz -3
steve -24
dave 27</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
120||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stacks of Flapjacks</TITLE>
<META NAME="description" CONTENT="Stacks of Flapjacks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stacks of Flapjacks</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Stacks and Queues are often considered the bread and butter of data
structures and find use in architecture, parsing, operating systems, and
discrete event simulation.  Stacks are also important in the theory of
formal languages.
<P>
This problem involves both butter and sustenance in the form of pancakes
rather than bread in addition to a finicky server who flips pancakes
according to a unique, but complete set of rules.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a stack of pancakes, you are to write a program that indicates how
the stack can be sorted so that the largest pancake is on the bottom
and the smallest pancake is on the top.  The size of a pancake is given
by the pancake's diameter.  All pancakes in a stack have different
diameters.
<P>
Sorting a stack is done by a sequence of pancake ``flips''.  A flip
consists of inserting a spatula between two pancakes in a stack and
flipping (reversing) 
 the pancakes on the spatula (reversing the sub-stack).  A
flip is specified by giving the position of the pancake on the bottom of
the sub-stack to be flipped (relative to the whole stack).  The pancake
on the bottom of the whole stack has position 1 and the pancake on the
top of a stack of <I>n</I> pancakes has position <I>n</I>.
<P>
A stack is specified by giving the diameter of each pancake in the
stack in the order in which the pancakes appear.
<P>
For example, consider the three stacks of pancakes below 
(in which pancake 8 is the top-most pancake of the left stack):
<PRE>         8           7           2
         4           6           5
         6           4           8
         7           8           4
         5           5           6
         2           2           7</PRE>
The stack on the left can be transformed to the stack in the middle 
via <EM>flip(3)</EM>.  The middle stack can be transformed into the right
stack via the command <EM>flip(1)</EM>.
<P>
</U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of stacks of pancakes.  Each stack will
consist of between 1 and 30 pancakes and each pancake will have an
integer diameter between 1 and 100.  The input is terminated by
end-of-file.  Each stack is given as a single line of input with the top
pancake on a stack appearing first on a line, the bottom pancake
appearing last, and all pancakes separated by a space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each stack of pancakes, the output should echo the original stack on
one line, followed by some sequence of flips that results in the stack
of pancakes being sorted so that the largest diameter pancake is on the
bottom and the smallest on top.  For each stack the sequence of flips
should be terminated by a 0 (indicating no more flips necessary).  Once
a stack is sorted, no more flips should be made.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 2 3 4 5
5 4 3 2 1
5 1 2 3 4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 3 4 5
0
5 4 3 2 1
1 0
5 1 2 3 4
1 2 0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
121||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pipe Fitters</TITLE>
<META NAME="description" CONTENT="Pipe Fitters">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pipe Fitters</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Filters, or programs that pass ``processed'' data through in some
changed form, are an important class of programs in the UNIX operating
system.  A pipe is an operating system concept that permits data to
``flow'' between processes (and allows filters to be chained together
easily.)
<P>
This problem involves maximizing the number of pipes that can be fit
into a storage container (but it's a pipe fitting
problem, not a bin packing problem).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
A company manufactures pipes of uniform diameter.  All pipes are stored
in rectangular storage containers, but the containers come in several
different sizes.  Pipes are stored in rows within a container so that
there is no space between pipes in any row (there may be some space at
the end of a row), i.e., all pipes in a row are tangent, or touch.
Within a rectangular cross-section, pipes are stored in either a <EM>
grid</EM> pattern or a <EM>skew</EM> pattern as shown below: the two left-most
cross-sections are in a grid pattern, the two right-most cross-sections are
in a skew pattern.
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture26" SRC="http://uva.onlinejudge.org/external/1/121img1.gif"   > <P>
<P>
Note that although it may not be apparent from the diagram, there is no
space between adjacent pipes in any row.  The pipes in any row are
tangent to (touch) the pipes in the row below (or rest on the bottom of the
container).  When pipes are packed into a container, there may be
``left-over'' space in which a pipe cannot be packed.  Such left-over
space is packed with padding so that the pipes cannot settle during
shipping.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of cross-section dimensions of storage
containers.  Each cross-section is given as two real values on one line
separated by white space.  The dimensions are expressed in units of pipe
diameters.  All dimensions will be less than  <IMG WIDTH=15 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline133" SRC="http://uva.onlinejudge.org/external/1/121img1.gif"   > .  
Note that a cross section with dimensions  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline135" SRC="http://uva.onlinejudge.org/external/1/121img1.gif"   >  can also be viewed as a cross section with dimensions  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline137" SRC="http://uva.onlinejudge.org/external/1/121img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each cross-section in the input, your program should print the
maximum number of pipes that can be packed into that cross section.
The number of pipes is an integer -- no fractional
pipes can be packed.  The maximum number is followed by the word
``grid'' if a grid pattern results in the maximal number of pipes or
the word ``skew'' if a skew pattern results in the maximal number of
pipes.  If the pattern doesn't matter, that is the same number of pipes
can be packed with either a grid or skew pattern, then the word ``grid''
should be printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 3
2.9 10
2.9 10.5
11 11</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>9 grid
29 skew
30 skew
126 skew</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
122||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Trees on the level</TITLE>
<META NAME="description" CONTENT="Trees on the level">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Trees on the level</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Trees are fundamental in many branches of computer science.  Current state-of-the art parallel computers such
as Thinking Machines' CM-5 are based on <EM>fat trees</EM>.  Quad- and
octal-trees are fundamental to many algorithms in computer graphics.
<P>
This problem involves building and traversing binary trees.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a sequence of binary trees, you are to write a program that prints
a level-order traversal of each tree.  In this problem each node of a
binary tree contains a positive integer and all binary trees have
have fewer than 256 nodes.
<P>
In a <EM>level-order</EM> traversal of a tree, the data in all nodes at a
given level are printed in left-to-right order and all nodes at level
<I>k</I> are printed before all nodes at level <I>k</I>+1.
<P>
For example, a level order traversal of the tree 
<P> <IMG WIDTH=290 HEIGHT=226 ALIGN=BOTTOM ALT="picture28" SRC="http://uva.onlinejudge.org/external/1/122img1.gif"   > <P>
<P>
is: 5, 4, 8, 11, 13, 4, 7, 2, 1.
<P>
In this problem a binary tree is specified by a sequence of pairs
(<I>n</I>,<I>s</I>) where <I>n</I> is the value at the node whose path from the root is
given by the string <I>s</I>.  A path is given be a sequence of <EM>L</EM>'s and
<EM>R</EM>'s where <EM>L</EM> indicates a left branch and <EM>R</EM> indicates a
right branch.  In the tree diagrammed above, the node containing 13 is
specified by (13,RL), and the node containing 2 is specified by (2,LLR).
The root node is specified by (5,) where the empty string indicates the
path from the root to itself.  A binary tree is considered to be
<EM>completely specified</EM> if every node on all root-to-node paths in
the tree is given a value exactly once.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of binary trees specified as described above.
Each tree in a sequence consists of several pairs (<I>n</I>,<I>s</I>) as described
above separated by whitespace.  The last entry in each tree is ().  No
whitespace appears between left and right parentheses.
<P>
All nodes contain a positive integer.  Every tree in the input will
consist of at least one node and no more than 256 nodes.  Input is
terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each completely specified binary tree in the input file, the level
order traversal of that tree should be printed.  If a tree is not
completely specified, i.e., some node in the tree is NOT given a value
or a node is given a value more than once, then the string ``not
complete'' should be printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>(11,LL) (7,LLL) (8,R)
(5,) (4,L) (13,RL) (2,LLR) (1,RRR) (4,RR) ()
(3,L) (4,R) ()</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>5 4 8 11 13 4 7 2 1
not complete</PRE>
<P>

<PRE>
</PRE> </DL>
</BODY>
</HTML>

______________________________________________________
123||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Searching Quickly</TITLE>
<META NAME="description" CONTENT="Searching Quickly">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Searching Quickly</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Searching and sorting are part of the theory and practice of computer
science.  For example, binary search provides a good example of an
easy-to-understand algorithm with sub-linear complexity.  Quicksort is
an efficient  <IMG WIDTH=74 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/1/123img1.gif"   >  [average case] comparison based sort.
<P>
KWIC-indexing is an indexing method that permits efficient ``human
search'' of, for example, a list of titles.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a list of titles and a list of ``words to ignore'', you are to
write a program that generates a KWIC (Key Word In Context) index of the
titles.  In a KWIC-index, a title is listed once for each keyword that
occurs in the title.  The KWIC-index is alphabetized by keyword.
<P>
Any word that is not one of the ``words to ignore'' is a potential
keyword.
<P>
For example, if words to ignore are
``<code>the, of, and, as, a</code>'' and the list
of titles is:
<PRE>Descent of Man
The Ascent of Man
The Old Man and The Sea
A Portrait of The Artist As a Young Man</PRE>
<P>
A KWIC-index of these titles might be given by:
<P>
<PRE>                      a portrait of the ARTIST as a young man 
                                    the ASCENT of man 
                                        DESCENT of man 
                             descent of MAN 
                          the ascent of MAN 
                                the old MAN and the sea 
    a portrait of the artist as a young MAN 
                                    the OLD man and the sea 
                                      a PORTRAIT of the artist as a young man 
                    the old man and the SEA 
          a portrait of the artist as a YOUNG man</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of lines, the string <code>::</code> is used to
separate the list of words to ignore from the list of titles.  Each of
the words to ignore appears in lower-case letters on a line by itself
and is no more than 10 characters in length.  Each title appears on a
line by itself and may consist of mixed-case (upper and lower) letters.
Words in a title are separated by whitespace.  No title contains more
than 15 words.
<P>
There will be no more than 50 words to ignore, no more than than 200
titles, and no more than 10,000 characters in the titles and words to
ignore combined.  No characters other than 'a'-'z', 'A'-'Z', and white
space will appear in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
The output should be a KWIC-index of the titles, with each title
appearing once for each keyword in the title, and with the KWIC-index
alphabetized by keyword.  If a word appears more than once in a title,
each instance is a potential keyword.
<P>
The keyword should appear in all upper-case
letters. All other words in a title should be in lower-case letters.
Titles in the KWIC-index with the same keyword should appear in the same
order as they appeared in the input file.  In the case where multiple
instances of a word are keywords in the same title, the keywords should
be capitalized in left-to-right order.
<P>
Case (upper or lower) is irrelevant when determining if a word is to be
ignored.
<P>
The titles in the KWIC-index need NOT be justified or aligned by
keyword, all titles may be listed left-justified.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>is
the
of
and
as
a
but
::
Descent of Man
The Ascent of Man
The Old Man and The Sea
A Portrait of The Artist As a Young Man
A Man is a Man but Bubblesort IS A DOG</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>a portrait of the ARTIST as a young man 
the ASCENT of man 
a man is a man but BUBBLESORT is a dog 
DESCENT of man 
a man is a man but bubblesort is a DOG 
descent of MAN 
the ascent of MAN 
the old MAN and the sea 
a portrait of the artist as a young MAN 
a MAN is a man but bubblesort is a dog 
a man is a MAN but bubblesort is a dog 
the OLD man and the sea 
a PORTRAIT of the artist as a young man 
the old man and the SEA 
a portrait of the artist as a YOUNG man</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
124||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Following Orders</TITLE>
<META NAME="description" CONTENT="Following Orders">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
  
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Following Orders</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Order is an important concept in mathematics and in computer science.
For example, Zorn's Lemma states:  ``a partially ordered set in which
every chain has an upper bound contains a maximal element.''
Order is also important in reasoning about the fix-point semantics of
programs.
<P>
<P>
This problem involves neither Zorn's Lemma nor fix-point semantics, but
does involve order.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given a list of variable constraints of the form
<code>x &lt; y</code>, you are to write a program that prints all
orderings of the variables that are consistent with the constraints.
<P>
<P>
For example, given the constraints <code>x &lt; y</code>  and <code>x &lt; z</code> there
are two orderings of the variables x, y, and z that are consistent with these
constraints: <code> x y z</code> and <code>x z y</code>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input consists of a sequence of constraint specifications.  A
specification consists of two lines: a list of variables on one line
followed by a list of constraints on the next line.  A constraint is
given by a pair of variables, 
where <code>x y</code> indicates that <code>x &lt; y</code>.
<P>
<P>
All variables are single character, lower-case letters.  There will be
at least two variables, and no more than 20 variables in a specification.
There will be at least one constraint, and no more than 50 constraints
in a specification.  There will be at least one, and no more than 300
orderings consistent with the contraints in a specification.
<P>
<P>
Input is terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each constraint specification, all orderings consistent with
the constraints should be printed.   
Orderings are printed in lexicographical (alphabetical) order, one per
line.
<P>
<P>
Output for different constraint specifications is separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>a b f g
a b b f
v w x y z
v y x v z v w v</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>abfg
abgf
agbf
gabf

wxzvy
wzxvy
xwzvy
xzwvy
zwxvy
zxwvy</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
125||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Numbering Paths</TITLE>
<META NAME="description" CONTENT="Numbering Paths">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Numbering Paths</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
Problems that process input and generate a simple ``yes'' or ``no''
answer are called decision problems.  One class of decision problems,
the NP-complete problems, are not amenable to general efficient
solutions.  Other problems may be simple as decision problems, but
enumerating all possible ``yes'' answers may be very difficult (or at
least time-consuming).
<P>
This problem involves determining the number of routes available to
an emergency vehicle operating in a city of one-way streets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">The Problem</A></FONT></H2>
<P>
Given the intersections connected by one-way streets in a city, you are
to write a program that determines the number of different routes
between each intersection.  A route is a sequence of one-way streets
connecting two intersections.
<P>
Intersections are identified by non-negative integers.  A one-way
street is specified by a pair of intersections.  For example,  <IMG WIDTH=28 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   > 
indicates that there is a one-way street from intersection  <I>j</I> to
intersection <I>k</I>.  Note that two-way streets can be modeled by
specifying two one-way streets:  <IMG WIDTH=28 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   >  and  <IMG WIDTH=26 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   > .
<P>
Consider a city of four intersections connected by the following one-way
streets:
<PRE>    0  1
    0  2
    1  2
    2  3</PRE>
There is one route from intersection 0 to 1, two routes from 0 to 2 (the
routes are  <IMG WIDTH=79 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   >  
and  <IMG WIDTH=43 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   > ), 
two routes from 0 to 3, one route from 1 to 2, one route from 1 to 3, one route from 2 to 3, and no other routes.
<P>
It is possible for an infinite number of different routes to exist.  For
example if the intersections above are augmented by the street  <IMG WIDTH=25 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   > ,
there is still only one route from 0 to 1, but there are infinitely many
different routes from 0 to 2.  This is because the street from 2 to 3
and back to 2 can be repeated yielding a different sequence of streets
and hence a different route.  Thus the route  <IMG WIDTH=186 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   >  is a different
route than  <IMG WIDTH=114 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
The input is a sequence of city specifications.  Each specification
begins with the number of one-way streets in the city followed by that
many one-way streets given as pairs of intersections.  Each pair 
 <IMG WIDTH=28 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/1/125img1.gif"   >  represents a one-way street from intersection <I>j</I> to intersection <I>k</I>.
In all cities, intersections are numbered sequentially from 0 to the
``largest'' intersection.  All integers in the input are separated by
whitespace.  The input is terminated by end-of-file.
<P>
There will never be a one-way street from an intersection to itself.
No city will have more than 30 intersections.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each city specification, a square matrix of the number of different routes
from intersection <I>j</I> to intersection <I>k</I> is printed.  If the matrix is
denoted <I>M</I>, then <I>M</I>[<I>j</I>][<I>k</I>] is the number of different routes from
intersection <I>j</I> to intersection <I>k</I>.  The matrix <I>M</I> should be printed
in row-major order, one row per line.  Each matrix should be preceded by
the string ``<code>matrix for city</code> <I>k</I>'' (with <I>k</I> appropriately
instantiated, beginning with 0).
<P>
If there are an infinite number of different paths between two
intersections a -1 should be printed.  <B>DO NOT</B> worry about
justifying and aligning the output of each matrix.  All entries in a
row should be separated by whitespace.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>7 0 1 0 2 0 4 2 4 2 3 3 1 4 3
5 
0 2 
0 1 1 5 2 5 2 1
9
0 1 0 2 0 3
0 4 1 4 2 1
2 0
3 0
3 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>matrix for city 0
0 4 1 3 2
0 0 0 0 0
0 2 0 2 1
0 1 0 0 0
0 1 0 1 0
matrix for city 1
0 2 1 0 0 3
0 0 0 0 0 1
0 1 0 0 0 2
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
matrix for city 2
-1 -1 -1 -1 -1
0 0 0 0 1
-1 -1 -1 -1 -1
-1 -1 -1 -1 -1
0 0 0 0 0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
126||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Errant Physicist</TITLE>
<META NAME="description" CONTENT="The Errant Physicist">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Errant Physicist</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The well-known physicist Alfred E Neuman is working on problems that 
involve multiplying polynomials of x and y.  For example, he may need to 
calculate
<P>
<P> <IMG WIDTH=385 HEIGHT=20 ALIGN=BOTTOM ALT="displaymath50" SRC="http://uva.onlinejudge.org/external/1/126img1.gif"   > <P>
<P>
getting the answer
<P>
<P> <IMG WIDTH=485 HEIGHT=19 ALIGN=BOTTOM ALT="displaymath51" SRC="http://uva.onlinejudge.org/external/1/126img1.gif"   > <P>
<P>
Unfortunately, such problems are so trivial that the great man's mind keeps 
drifting off the job, and he gets the wrong answers.  As a consequence, 
several nuclear warheads that he has designed have detonated prematurely, 
wiping out five major cities and a couple of rain forests.
<P>
<P>
You are to write a program to perform such multiplications and save the 
world.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The file of input data will contain pairs of lines, with each line containing 
no more than 80 characters.  The final line of the input file contains a 
<TT>#</TT> as 
its first character.  Each input line contains a polynomial written without 
spaces and without any explicit exponentiation operator.  Exponents are 
positive non-zero unsigned integers.  Coefficients are also integers, but may 
be negative.  Both exponents and coefficients are less than or equal to 100 
in magnitude.  Each term contains at most one factor in x and one in y.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program must multiply each pair of polynomials in the input, and print 
each product on a pair of lines, the first line containing all the exponents, 
suitably positioned with respect to the rest of the information, which is in 
the line below.
<P>
<P>
The following rules control the output format:
<OL>
<LI> Terms in the output line must be sorted in decreasing order of powers 
of x and, for a given power of x, in increasing order of powers of y.
<LI> Like terms must be combined into a single term.  For example, 
40x<sup>2</sup>y<sup>3</sup>
- 38x<sup>2</sup>y<sup>3</sup> is replaced by 2x<sup>2</sup>y<sup>3</sup>.
<LI> Terms with a zero coefficient must not be displayed.<LI> Coefficients of 1 are omitted, except for the case of a constant term 
of 1.
<LI> Exponents of 1 are omitted.
<LI> Factors of x<sup>0</sup>  and y<sup>0</sup> are omitted.
<LI> Binary pluses and minuses (that is the pluses and minuses connecting 
terms in the output) have a single blank column both before and after.
<LI> If the coefficient of the first term is negative, it is preceded by a 
unary minus in the first column, with no intervening blank column.  
Otherwise, the coefficient itself begins in the first output column.
<LI> The output can be assumed to fit into a single line of at most 80 
characters in length.
<LI> There should be no blank lines printed between each pair of output 
lines.
<LI> The pair of lines that contain a product should be the same
length--trailing blanks should appear after the last non-blank character
of the shorter line to achieve this.
</OL>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
-yx8+9x3-1+y
x5y+1+x3
1
1
#
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
  13 2    11      8      6    5     5 2     3    3
-x  y  - x  y + 8x y + 9x  - x y + x y  + 8x  + x y - 1 + y 

1
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
127||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>``Accordian'' Patience</TITLE>
<META NAME="description" CONTENT="``Accordian'' Patience">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">``Accordian'' Patience</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to simulate the playing of games of ``Accordian'' patience, the rules 
for which are as follows:
<P>
<BLOCKQUOTE> Deal cards one by one in a row from left to right, not overlapping.  Whenever 
the card matches its immediate neighbour on the left, or matches the third 
card to the left, <B>it</B> may be moved onto that card.  Cards match if they 
are of the same suit or same rank.  After making a move, look to see if it 
has made additional moves possible.  Only the top card of each pile may be 
moved at any given time.  Gaps between piles should be closed up as soon as 
they appear by moving all piles on the right of the gap one position to the 
left.  Deal out the whole pack, combining cards towards the left whenever 
possible.  The game is won if the pack is reduced to a single pile.
</BLOCKQUOTE>
<P>
Situations can arise where more than one play is possible.  Where two cards 
may be moved, you should adopt the strategy of always moving the leftmost 
card possible.  Where a card may be moved either one position to the left or 
three positions to the left, move it three positions.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input data to the program specifies the order in which cards are dealt from 
the pack.  The input contains pairs of lines, each line 
containing 26 cards separated by single space characters.  The final line 
of the input file contains a <TT>#</TT> as its first character.  Cards are represented 
as a two character code.  The first character is the face-value (A=Ace,
2-9, T=10, J=Jack, Q=Queen, K=King) and the second character is the suit 
(C=Clubs, D=Diamonds, H=Hearts, S=Spades).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
One line of output must be produced for each pair of lines (that between
them describe a pack of 52 cards) in the input.  Each line of output shows 
the number of cards in each of the piles remaining after playing ``Accordian 
patience'' with the pack of cards as described by the corresponding pairs of 
input lines.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
QD AD 8H 5S 3H 5H TC 4D JH KS 6H 8S JS AC AS 8D 2H QS TS 3S AH 4H TH TD 3C 6S
8C 7D 4C 4S 7S 9H 7C 5D 2S KD 2D QH JD 6D 9D JC 2C KH 3D QC 6C 9S KC 7H 9C 5C
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC AD 2D 3D 4D 5D 6D 7D 8D TD 9D JD QD KD
AH 2H 3H 4H 5H 6H 7H 8H 9H KH 6S QH TH AS 2S 3S 4S 5S JH 7S 8S 9S TS JS QS KS
#
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
6 piles remaining: 40 8 1 1 1 1
1 pile remaining: 52
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
128||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Software CRC</TITLE>
<META NAME="description" CONTENT="Software CRC">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Software CRC</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You work for a company which uses lots of personal computers.  Your boss, 
Dr Penny Pincher, has wanted to link the computers together for some time 
but has been unwilling to spend any money on the Ethernet boards you have 
recommended.  You, unwittingly, have pointed out that each of the PCs has 
come from the vendor with an asynchronous serial port at no extra cost.  Dr 
Pincher, of course, recognizes her opportunity and assigns you the task of 
writing the software necessary to allow communication between PCs.
<P>
<P>
You've read a bit about communications and know that every transmission is 
subject to error and that the typical solution to this problem is to append 
some error checking information to the end of each message.  This 
information allows the receiving program to detect when a transmission error
has 
occurred (in most cases).  So, off you go to the library, borrow the biggest 
book on communications you can find and spend your weekend (unpaid 
overtime) reading about error checking.
<P>
<P>
Finally you decide that CRC (cyclic redundancy check) is the best error 
checking for your situation and write a note to Dr Pincher detailing the 
proposed error checking mechanism noted below.
<P>
<BLOCKQUOTE> 
<B>CRC Generation</B>
<P>
The message to be transmitted is viewed as a long positive binary number.  
The first byte of the message is treated as the most significant byte of the 
binary number.  The second byte is the next most significant, etc.  This 
binary number will be called ``m'' (for message).  Instead of transmitting 
``m'' you will transmit a message, ``m2'', consisting of ``m'' followed by a 
two-byte CRC value.
<P>
The CRC value is chosen so that ``m2'' when divided by a certain 16-bit value 
``g'' leaves a remainder of 0.  This makes it easy for the receiving program 
to determine whether the message has been corrupted by transmission 
errors.  It simply divides any message received by ``g''.  If the remainder of 
the division is zero, it is assumed that no error has occurred.
<P>
You notice that most of the suggested values of ``g'' in the book are odd, but 
don't see any other similarities, so you select the value 34943 for ``g'' (the 
generator value).
</BLOCKQUOTE><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
You are to devise an algorithm for calculating the CRC value corresponding 
to any message that might be sent.  To test this algorithm you will write a 
program which reads lines (each line being all characters up to, but not 
including the end of line character) as input, and for each line calculates the 
CRC value for the message contained in the line, and writes the numeric 
value of the CRC bytes (in hexadecimal notation) on an output line.  Each 
input line will contain no more than 1024 ASCII characters.  The input is 
terminated by a line that contains a <TT>#</TT> in column 1. Note that each CRC printed should be in the range 0 to 34942 (decimal).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
this is a test

A
#
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
77 FD 
00 00
0C 86
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
129||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Krypton Factor</TITLE>
<META NAME="description" CONTENT="Krypton Factor">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Krypton Factor</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You have been employed by the organisers of a Super Krypton Factor Contest 
in which contestants have very high mental and physical abilities.  In one 
section of the contest the contestants are tested on their ability to recall a 
sequence of characters which has been read to them by the Quiz Master.  
Many of the contestants are very good at recognising patterns.  Therefore, in 
order to add some difficulty to this test, the organisers have decided that 
sequences containing certain types of repeated subsequences should not be 
used.  However, they do not wish to remove all subsequences that are 
repeated, since in that case no single character could be repeated.  This in 
itself would make the problem too easy for the contestants.  Instead it is 
decided to eliminate all sequences containing an occurrence of two 
adjoining identical subsequences.  Sequences containing such an occurrence 
will be called ``easy''.  Other sequences will be called ``hard''.
<P>
For example, the sequence ABACBCBAD is easy, since it contains an 
adjoining repetition of the subsequence CB.  Other examples of easy 
sequences are:
<P>
<UL><LI> BB<LI> ABCDACABCAB<LI> ABCDABCD
</UL>
<P>
Some examples of hard sequences are:
<P>
<UL><LI> D<LI> DC<LI> ABDAB<LI> CBABCBA
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
In order to provide the Quiz Master with a potentially unlimited source of 
questions you are asked to write a program that will read input lines that 
contain integers <I>n</I> and <I>L</I> (in that order), where <I>n</I> &gt; 0 and <I>L</I> is in the 
range  <IMG WIDTH=83 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/129img1.gif"   > , and for each input line prints out the <I>n</I>th hard 
sequence (composed of letters drawn from the first <I>L</I> letters in the 
alphabet), in increasing alphabetical order (alphabetical ordering here corresponds to the normal ordering encountered in a dictionary), 
followed (on the next line) by the length of that sequence.  The first 
sequence in this ordering is A.  You may assume that for given <I>n</I> and <I>L</I> 
there do exist at least <I>n</I> hard sequences.
<P>
For example, with <I>L</I> = 3, the first 7 hard sequences are:
<P>
<BLOCKQUOTE> 
A <BR> 
AB <BR> 
ABA <BR> 
ABAC <BR> 
ABACA <BR> 
ABACAB <BR> 
ABACABA
</BLOCKQUOTE>
<P>
As each sequence is potentially very long, split it into groups of four (4) 
characters separated by a space.  If there are more than 16 such groups, 
please start a new line for the 17th group.
<P>
Therefore, if the integers 7 and 3 appear on an input line, the output lines 
produced should be
<P>
<PRE>ABAC ABA
7</PRE>
<P>
Input is terminated by a line containing two zeroes.  Your program may 
assume a maximum sequence length of 80.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>30 3
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>ABAC ABCA CBAB CABA CABC ACBA CABA
28</PRE>
<P>

<PRE>
</PRE> </DL>
</BODY>
</HTML>

______________________________________________________
130||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Roman Roulette</TITLE>
<META NAME="description" CONTENT="Roman Roulette">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Roman Roulette</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The historian Flavius Josephus relates how, in the Romano-Jewish conflict 
of 67 A.D., the Romans took the town of Jotapata which he was commanding.  
Escaping, Jospehus found himself trapped in a cave with 40 companions.  The 
Romans discovered his whereabouts and invited him to surrender, but his 
companions refused to allow him to do so.  He therefore suggested that they 
kill each other, one by one, the order to be decided by lot.  Tradition has it 
that the means for effecting the lot was to stand in a circle, and, beginning 
at some point, count round, every third person being killed in turn.  The 
sole survivor of this process was Josephus, who then surrendered to the 
Romans.  Which begs the question: had Josephus previously practised quietly 
with 41 stones in a dark corner, or had he calculated mathematically that he 
should adopt the 31st position in order to survive?
<P>
Having read an account of this gruesome event you become obsessed with 
the fear that you will find yourself in a similar situation at some time in 
the future.  In order to prepare yourself for such an eventuality you decide 
to write a program to run on your hand-held PC which will determine the 
position that the counting process should start in order to ensure that you 
will be the sole survivor.
<P>
In particular, your program should be able to handle the following variation 
of the processes described by Josephus.  <I>n</I> &gt; 0 people are initially 
arranged in a circle, facing inwards, and numbered from 1 to <I>n</I>.  The 
numbering from 1 to <I>n</I> proceeds consecutively in  a clockwise direction.  
Your allocated number is 1.  Starting with person number <I>i</I>, counting 
starts in a clockwise direction, until we get to person number <I>k</I> (<I>k</I> &gt; 0), 
who is promptly killed.  We then proceed to count a further <I>k</I> people in a 
clockwise direction, starting with the person immediately to the left of the 
victim.  The person number <I>k</I> so selected has the job of burying the 
victim, and then returning to the position in the circle that the victim had 
previously occupied.  Counting then proceeds from the person to his 
immediate left, with the <I>k</I>th person being killed, and so on, until only one 
person remains.
<P>
For example, when <I>n</I> = 5, and <I>k</I> = 2, and <I>i</I> = 1, the order of execution is 
2, 5, 3, and 1.  The survivor is 4.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Your program must read input lines containing values for <I>n</I> and <I>k</I> (in 
that order), and for each input line output the number of the person with 
which the counting should begin in order to ensure that you are the sole 
survivor.  For example, in the above case the safe starting position is 3.  
Input will be terminated by a line containing values of 0 for <I>n</I> and <I>k</I>.
<P>
Your program may assume a maximum of 100 people taking part in this 
event.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 1
1 5
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1
1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
131||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Psychic Poker Player</TITLE>
<META NAME="description" CONTENT="The Psychic Poker Player">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Psychic Poker Player</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In 5-card draw poker, a player is dealt a hand of five cards (which may be 
looked at).  The player may then discard between zero and five of his or her 
cards and have them replaced by the same number of cards from the top of 
the deck (which is face down).  The object is to maximize the value of the 
final hand.  The different values of hands in poker are given at the end of 
this problem.
<P>
Normally the player cannot see the cards in the deck and so must use 
probability to decide which cards to discard.  In this problem, we imagine 
that the poker player is psychic and knows which cards are on top of the 
deck.  Write a program which advises the player which cards to discard so 
as to maximize the value of the resulting hand.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines, each containing the initial
five cards in the hand then the first five cards on top of the deck.
Each card is represented as a two-character code.  The first character
is the face-value (A=Ace, 2-9, T=10, J=Jack, Q=Queen, K=King) and the
second character is the suit (C=Clubs, D=Diamonds, H=Hearts,
S=Spades).  Cards will be separated by single spaces.  Each input line
will be from a single valid deck, that is there will be no duplicate
cards in each hand and deck.
<P>
Each line of input should produce one line of output, consisting of
the initial hand, the top five cards on the deck, and the best value
of hand that is possible.  Input is terminated by end of file.
<P>
<P>
Use the sample input and output as a guide. Note that the order of the cards in the player's hand is irrelevant, but the 
order of the cards in the deck is important because the discarded cards must 
be replaced from the top of the deck.  Also note that examples of all types 
of hands appear in the sample output, with the hands shown in decreasing 
order of value.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>TH JH QC QD QS QH KH AH 2S 6S
2H 2S 3H 3S 3C 2D 3D 6C 9C TH
2H 2S 3H 3S 3C 2D 9C 3D 6C TH
2H AD 5H AC 7H AH 6H 9H 4H 3C
AC 2D 9C 3S KD 5S 4D KS AS 4C
KS AH 2H 3C 4H KC 2C TC 2D AS
AH 2C 9S AD 3C QH KS JS JD KD
6C 9C 8C 2D 7C 2H TC 4C 9S AH
3D 5S 2H QD TD 6S KH 9H AD QH</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Hand: TH JH QC QD QS Deck: QH KH AH 2S 6S Best hand: straight-flush
Hand: 2H 2S 3H 3S 3C Deck: 2D 3D 6C 9C TH Best hand: four-of-a-kind
Hand: 2H 2S 3H 3S 3C Deck: 2D 9C 3D 6C TH Best hand: full-house
Hand: 2H AD 5H AC 7H Deck: AH 6H 9H 4H 3C Best hand: flush
Hand: AC 2D 9C 3S KD Deck: 5S 4D KS AS 4C Best hand: straight
Hand: KS AH 2H 3C 4H Deck: KC 2C TC 2D AS Best hand: three-of-a-kind
Hand: AH 2C 9S AD 3C Deck: QH KS JS JD KD Best hand: two-pairs
Hand: 6C 9C 8C 2D 7C Deck: 2H TC 4C 9S AH Best hand: one-pair
Hand: 3D 5S 2H QD TD Deck: 6S KH 9H AD QH Best hand: highest-card</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
132||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bumpy Objects</TITLE>
<META NAME="description" CONTENT="Bumpy Objects">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bumpy Objects</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/132img1.gif"   > <P>
<P>
Consider objects such as these.  They are polygons, specified by the
coordinates of a centre of mass and their vertices.  In the figure,
centres of mass are shown as black squares.  The vertices will be
numbered consecutively anti-clockwise as shown.
<P>
<P>
An object can be rotated to stand stably if two vertices can be found
that can be joined by a straight line that does not intersect the
object, and, when this line is horizontal, the centre of mass lies
above the line and strictly between its endpoints.  There are
typically many stable positions and each is defined by one of these
lines known as its base line.  A base line, and its associated stable
position, is identified by the highest numbered vertex touched by that
line.
<P>
<P>
Write a program that will determine the stable position that has the
lowest numbered base line.  Thus for the above objects, the desired
base lines would be 6 for object 1, 6 for object 2 and 2 for the
square.  You may assume that the objects are possible, that is they
will be represented as non self-intersecting polygons, although they
may well be concave.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Successive lines of a data set will contain: a string of less than 20
characters identifying the object; the coordinates of the centre of
mass; and the coordinates of successive points terminated by two
zeroes (0 0), on one or more lines as necessary.  There may be
successive data sets (objects).  The end of data will be defined by
the string '<TT>#</TT>'.
<P>
<P>
Output will consist of the identification string followed by the
number of the relevant base line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>Object2
4 3
3 2  5 2  6 1  7 1  6 3  4 7  1 1  2 1  0 0
Square 
2 2
1 1  3 1  3 3  1 3  0 0
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Object2             6
Square              2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
133||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Dole Queue</TITLE>
<META NAME="description" CONTENT="The Dole Queue">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Dole Queue</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In a serious attempt to downsize (reduce) the dole queue, The New
National Green Labour Rhinoceros Party has decided on the following
strategy.  Every day all dole applicants will be placed in a large
circle, facing inwards.  Someone is arbitrarily chosen as number 1,
and the rest are numbered counter-clockwise up to N (who will be
standing on 1's left).  Starting from 1 and moving counter-clockwise,
one labour official counts off k applicants, while another official
starts from N and moves clockwise, counting m applicants.  The two who
are chosen are then sent off for retraining; if both officials pick
the same person she (he) is sent off to become a politician.  Each
official then starts counting again at the next available person and
the process continues until no-one is left.  Note that the two victims
(sorry, trainees) leave the ring simultaneously, so it is possible for
one official to count a person already selected by the other official.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Write a program that will successively read in (in that order) the
three numbers (N, k and m; k, m &gt; 0, 0 &lt; N &lt; 20) and determine
the order in which the applicants are sent off for retraining.  Each
set of three numbers will be on a separate line and the end of data
will be signalled by three zeroes (0 0 0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each triplet, output a single line of numbers specifying the order
in which people are chosen.  Each number should be in a field of 3
characters.  For pairs of numbers list the person chosen by the
counter-clockwise official first.  Separate successive pairs (or
singletons) by commas (but there should not be a trailing comma).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>10 4 3
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<TT> <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 4 <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 8, <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 9 <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 5, <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 3 <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 1, <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 2 <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 6, <IMG WIDTH=13 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 10, <IMG WIDTH=29 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > 7
</TT>
<P>
where <TT> <IMG WIDTH=13 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/133img1.gif"   > </TT> represents a space.
<P>
</BODY>
</HTML>

______________________________________________________
134||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Loglan-A Logical Language</TITLE>
<META NAME="description" CONTENT="Loglan-A Logical Language">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Loglan-A Logical Language</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Loglan is a synthetic speakable language designed to test some of the fundamental problems of 
linguistics, such as the Sapir Whorf hypothesis.  It is syntactically unambiguous, culturally neutral 
and metaphysically parsimonious.  What follows is a gross over-simplification of an already very 
small grammar of some 200 rules.
<P>
<P>
Loglan sentences consist of a series of words and names, separated by spaces, and are terminated by a 
period (.).  Loglan words all end with a vowel; names, which are derived extra-linguistically, end with 
a consonant.  Loglan words are divided into two classes--little words which specify the structure of a 
sentence, and predicates which have the form CCVCV or CVCCV where C represents a consonant 
and V represents a vowel (see examples later).
<P>
<P>
The subset of Loglan that we are considering uses the following grammar:
<P>

<P> <IMG WIDTH=681 HEIGHT=298 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/1/134img1.gif"   > <P>

<P>
Write a program that will read a succession of strings and determine
whether or not they are correctly formed Loglan sentences.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Each Loglan sentence will start on a new line and will be terminated
by a period (.).  The sentence may occupy more than one line and words
may be separated by more than one whitespace character.  The input will be terminated
by a line containing a single `<TT>#</TT>'.  You can assume that all words will
be correctly formed.
<P>
Output will consist of one line for each sentence containing 
either `<TT>Good</TT>' or `<TT>Bad!</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>la mutce bunbo mrenu bi ditca.
la fumna bi le mrenu.
djan ga vedma le negro ketpi.
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Good
Bad!
Good</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
135||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>No Rectangles</TITLE>
<META NAME="description" CONTENT="No Rectangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">No Rectangles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Consider a grid such as the one shown.  We wish to mark <I>k</I>
intersections in each of <I>n</I> rows and <I>n</I> columns in such a way that
no 4 of the selected intersections form a rectangle with sides
parallel to the grid.  Thus for <I>k</I> = 2 and <I>n</I> = 3, a possible
solution is:
<P>
<P> <IMG WIDTH=92 HEIGHT=92 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/135img1.gif"   > <P>
<P>
It can easily be shown that for any given value of <I>k</I>,  <IMG WIDTH=76 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline78" SRC="http://uva.onlinejudge.org/external/1/135img1.gif" >  is a lower bound on the value 
of <I>n</I>, and it can be shown further that <I>n</I> need never be larger than this.
<P>
Write a program that will find a solution to this problem for <I>k</I><=32, <I>k</I>-1 will be 0, 1 or prime.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of some values for <i>k</i>, one of each line. For each value of <i>k</i>, output
will consist of <i>n</i> lines of <i>k</i> points indicating the selected points on that line. Print a
blank line between two values of <i>k</i>.

<!--There is no
input to this program.  Output will consist of <I>n</I> lines of <I>k</I> points indicating the selected points on that line.
<P>
<P>
Example: if the problem had called for a solution to the problem for <I>k</I>=2, <I>n</I>=3; then the output 
could look like this:-->

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>
2
1
</pre>

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>
1 2
1 3
2 3

1
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
136||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ugly Numbers</TITLE>
<META NAME="description" CONTENT="Ugly Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ugly Numbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Ugly numbers are numbers whose only prime factors are 2, 3 or 5.  The sequence
<P>
<P>
1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, ...
<P>
<P>
<P>
shows the first 11 ugly numbers.  By convention, 1 is included.
<P>
<P>
Write a program to find and print the 1500'th ugly number.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
There is no
input to this program.  Output should consist of a single line as
shown below, with &lt;number&gt; replaced by the number computed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample output</A></FONT></H2>
<P>
<TT>The 1500'th ugly number is &lt;number&gt;.</TT>
<P>
</BODY>
</HTML>

______________________________________________________
137||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Polygons</TITLE>
<META NAME="description" CONTENT="Polygons">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Polygons</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given two convex polygons, they may or may not overlap.  If they do
overlap, they will do so to differing degrees and in different ways. 
Write a program that will read in the coordinates of the corners of two
convex polygons and calculate the `exclusive or' of the two areas,
that is the area that is bounded by exactly one of the polygons.  The
desired area is shaded in the following diagram:
<P>
<P> <IMG WIDTH=464 HEIGHT=207 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/137img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of pairs of lines each containing the number of
vertices of the polygon, followed by that many pairs of integers
representing the x,y coordinates of the corners in a clockwise
direction. All the coordinates will be positive integers less than 100.
For each pair of polygons (pair of lines in the data file), your
program should print out the desired area correct to two decimal places.
The input will end with a line containing a zero (0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a single line containing the desired area written
as a succession of eight (8) digit fields with two (2) digits after the 
decimal point.  There will not be enough cases to need more than one line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>3  5 5  8 1  2 3
3  5 5  8 1  2 3
4  1 2  1 4  5 4  5 2
6  6 3  8 2  8 1  4 1  4 2  5 3
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<TT> <IMG WIDTH=68 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/137img1.gif"   > 0.00 <IMG WIDTH=52 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/1/137img1.gif"   > 13.50</TT>
<P>
where  <IMG WIDTH=13 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/1/137img1.gif"   >  represents a single space.
<P>
</BODY>
</HTML>

______________________________________________________
138||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Street Numbers</TITLE>
<META NAME="description" CONTENT="Street Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Street Numbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A computer programmer lives in a street with houses numbered
consecutively (from 1) down one side of the street.  Every evening she walks
her dog by leaving her house and randomly turning left or right and
walking to the end of the street and back.  One night she adds up the street
numbers of the houses she passes (excluding her own).  The next time she
walks the other way she repeats this and finds, to her astonishment,
that the two sums are the same.  Although this is determined in part
by her house number and in part by the number of houses in the street,
she nevertheless feels that this is a desirable property for her house to
have and decides that all her subsequent houses should exhibit it.
<P>
<P>
Write a program to find pairs of numbers that satisfy this condition.
To start your list the first two pairs are: (house number, last number):
<P>
<PRE>         6         8
        35        49</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
There is no input for this program.  Output will consist of 10 lines
each containing a pair of numbers, each printed right justified in a field of 
width 10 (as shown above).
<P>
</BODY>
</HTML>

______________________________________________________
139||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Telephone Tangles</TITLE>
<META NAME="description" CONTENT="Telephone Tangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Telephone Tangles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A large company wishes to monitor the cost of phone calls made by its
personnel.  To achieve this the PABX logs, for each call, the number
called (a string of up to 15 digits) and the duration in minutes.
Write a program to process this data and produce a report specifying
each call and its cost, based on standard Telecom charges.
<P>
<P>
International (IDD) numbers start with two zeroes (00) followed by a country
code (1-3 digits) followed by a subscriber's number (4-10 digits).
National (STD) calls start with one zero (0) followed by an area code
(1-5 digits) followed by the subscriber's number (4-7 digits).  The
price of a call is determined by its destination and its duration.
Local calls start with any digit other than 0 and are free.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will be in two parts.  The first part will be a table of IDD and STD
codes, localities and prices as follows:
<P>
<BLOCKQUOTE> Code <IMG WIDTH=13 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/139img1.gif"   > Locality name$price in cents per minute
</BLOCKQUOTE>
<P>
where  <IMG WIDTH=13 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/139img1.gif"   >  represents a space.  Locality names are 25 characters
or less.  This section is terminated by a line containing 6 zeroes (000000).
<P>
<P>
The second part contains the log and will consist of a series of
lines, one for each call, containing the number dialled and the
duration.  The file will be terminated a line containing a single <TT>#</TT>.
The numbers will not necessarily be tabulated, although there will be
at least one space between them.  Telephone numbers will not be
ambiguous.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of the called number, the country or area called, the
subscriber's number, the duration, the cost per minute and the total cost
of the call, as shown below.  Local calls are costed at zero.  If the number
has an invalid code, list the area as ``<TT>Unknown</TT>'' and the cost as -1.00.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>088925 Broadwood$81
03 Arrowtown$38
0061 Australia$140
000000
031526        22
0061853279  3
0889256287213   122
779760 1
002832769 5
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<TT>
<P> <IMG WIDTH=450 HEIGHT=115 ALIGN=BOTTOM ALT="tabular28" SRC="http://uva.onlinejudge.org/external/1/139img1.gif"   > <P>
</TT>
<P>
</BODY>
</HTML>

______________________________________________________
140||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bandwidth</TITLE>
<META NAME="description" CONTENT="Bandwidth">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bandwidth</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a graph (V,E) where V is a set of nodes and E is a set of arcs
in VxV, and an <EM>ordering</EM> on the elements in V, then the <EM>
bandwidth</EM> of a node <I>v</I> is defined as the maximum distance in the
ordering between <I>v</I> and any node to which it is connected in the
graph. The bandwidth of the ordering is then defined as the maximum of
the individual bandwidths. For example, consider the following graph:
<P>
<P> <IMG WIDTH=190 HEIGHT=146 ALIGN=BOTTOM ALT="picture25" SRC="http://uva.onlinejudge.org/external/1/140img1.gif"   > <P>
<P>
This can be ordered in many ways, two of which are illustrated below:
<P>
<P> <IMG WIDTH=582 HEIGHT=66 ALIGN=BOTTOM ALT="picture47" SRC="http://uva.onlinejudge.org/external/1/140img1.gif"   > <P>
<P>
For these orderings, the bandwidths of the nodes (in order) are 6, 6,
1, 4, 1, 1, 6, 6 giving an ordering bandwidth of 6, and 5, 3, 1, 4, 3,
5, 1, 4 giving an ordering bandwidth of 5.
<P>
<P>
Write a program that will find the ordering of a graph that minimises
the bandwidth.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of graphs. Each graph will appear on a
line by itself. The entire file will be terminated by a line
consisting of a single <TT>#</TT>.  For each graph, the input will consist of
a series of records separated by `;'. Each record will consist of a
node name (a single upper case character in the the range `A' to `Z'),
followed by a `:' and at least one of its neighbours. The graph will
contain no more than 8 nodes.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each graph, listing the ordering
of the nodes followed by an arrow (-&gt;) and the bandwidth for that
ordering. All items must be separated from their neighbours by exactly
one space. If more than one ordering produces the same bandwidth, then
choose the smallest in lexicographic ordering, that is the one that
would appear first in an alphabetic listing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A:FB;B:GC;D:GC;F:AGH;E:HD
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>A B C F G D H E -&gt; 3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
141||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Spot Game</TITLE>
<META NAME="description" CONTENT="The Spot Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Spot Game</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The game of Spot is played on an NxN board as shown below for N = 4.
During the game, alternate players may either place a black counter
(spot) in an empty square or remove one from the board, thus producing
a variety of patterns. If a board pattern (or its rotation by
90 degrees or 180 degrees) is repeated during a game, the player
producing that pattern loses and the other player wins. The game
terminates in a draw after 2N moves if no duplicate pattern is
produced before then.
<P>
Consider the following patterns:
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/141img1.gif"   > <P>
<P>
If the first pattern had been produced earlier, then any of the
following three patterns (plus one other not shown) would terminate
the game, whereas the last one would not.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of games, each consisting of the size
of the board, N (2  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline180" SRC="http://uva.onlinejudge.org/external/1/141img1.gif"   >  N  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline180" SRC="http://uva.onlinejudge.org/external/1/141img1.gif"   >  50) followed, on separate lines, by
2N moves, whether they are all necessary or not. Each move will
consist of the coordinates of a square (integers in the range 1..N)
followed by a blank and a character `+' or `-' indicating the addition
or removal of a spot respectively. You may assume that all moves are
legal, that is there will never be an attempt to place a spot on an
occupied square, nor to remove a non-existent spot. Input
will be terminated by a zero (0).
<P>
<P>
Output will consist of one line for each game indicating which player
won and on which move, or that the game ended in a draw.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>2
1 1 +
2 2 +
2 2 -
1 2 +
2
1 1 +
2 2 +
1 2 +
2 2 -
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Player 2 wins on move 3
Draw</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
142||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mouse Clicks</TITLE>
<META NAME="description" CONTENT="Mouse Clicks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mouse Clicks</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A typical windowing system on a computer will provide a number of
icons on the screen as well as some defined regions. When the mouse
button is clicked, the system has to determine where the cursor is and
what is being selected. For this problem we assume that a mouse click
in (or on the border of) a region selects that region, otherwise it
selects the closest visible icon (or icons in the case of a tie).
<P>
<P>
Consider the following screen:
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/142img1.gif"   > <P>
<P>
A mouse click at `a' will select region A. A mouse click at `b' will
select icon 1. A mouse click at `c' will select icons 6 and 7. A mouse
click at `d' is ambiguous. The ambiguity is resolved by assuming that
one region is in front of another. In the data files, later regions
can be assumed to be in front of earlier regions. Since regions are
labelled in order of appearance (see later) `d' will select C. Note
that regions always overlap icons so that obscured icons need not be
considered and that the origin (0,0) is at the top left corner.
<P>
<P>
Write a program that will read in a series of region and icon
definitions followed by a series of mouse clicks and return the
selected items. Coordinates will be given as pairs of integers in the
range 0..499 and you can assume that all icons and regions lie wholly
within the screen. Your program must number all icons (even invisible
ones) in the order of arrival starting from 1 and label regions
alphabetically in the order of arrival starting from `A'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines. Each line will identify the
type of data: I for icon, R for region and M for mouse click. There
will be no separation between the specification part and the event
part, however no icon or region specifications will follow the first
mouse click. An I will be followed by the coordinates of the centre of
the icon, R will be followed by the coordinates of the top left and
bottom right corners respectively and M will be followed by the
coordinates of the cursor at the time of the click. There will always
be at least one visible icon and never more than 25 regions and 50
icons. The entire file will be terminated by a line consisting of a
single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each mouse click, containing the
selection(s) for that click. Regions will be identified by their
single character identifier, icon numbers will be written out right
justified in a field of width 3, and where there is more than one
icon number they will appear in increasing numerical order.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>I       216     28
R       22      19      170     102
I       40      150
I       96      138
I       36      193
R       305     13      425     103
I       191     184
I       387     200
R       266     63      370     140
I       419     134
I       170     102
M       50      50
M       236     30
M       403     167
M       330     83
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>A
  1
  6  7
C</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
143||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Orchard Trees</TITLE>
<META NAME="description" CONTENT="Orchard Trees">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Orchard Trees</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
An Orchardist has planted an orchard in a rectangle with trees
uniformly spaced in both directions. Thus the trees form a rectangular
grid and we can consider the trees to have integer coordinates. The
origin of the coordinate system is at the bottom left of the following
diagram:
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/143img1.gif"   > <P>
<P>
Consider that we now overlay a series of triangles on to this grid.
The vertices of the triangle can have any real coordinates in the
range 0.0 to 100.0, thus trees can have coordinates in the range 1 to
99. Two possible triangles are shown.
<P>
<P>
Write a program that will determine how many trees are contained
within a given triangle. For the purposes of this problem, you may
assume that the trees are of point size, and that any tree (point)
lying exactly on the border of a triangle is considered to be in the
triangle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines. Each line will contain 6 real
numbers in the range 0.00 to 100.00 representing the coordinates of a
triangle. The entire file will be terminated by a line containing 6
zeroes (0 0 0 0 0 0).
<P>
<P>
Output will consist of one line for each triangle, containing the
number of trees for that triangle right justified in a field of width
4.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>1.5 1.5  1.5 6.8  6.8 1.5
10.7 6.9  8.5 1.5  14.5 1.5
0 0 0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  15
  17</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
144||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Student Grants</TITLE>
<META NAME="description" CONTENT="Student Grants">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Student Grants</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Government of Impecunia has decided to discourage tertiary
students by making the payments of tertiary grants a long and
time-consuming process. Each student is issued a student ID card which
has a magnetically encoded strip on the back which records the payment
of the student grant. This is initially set to zero. The grant has
been set at $40 per year and is paid to the student on the working
day nearest to his birthday. (Impecunian society is still somewhat
medieval and only males continue with tertiary education.) Thus on any
given working day up to 25 students will appear at the nearest office
of the Department of Student Subsidies to collect their grant.
<P>
<P>
The grant is paid by an Automatic Teller Machine which is driven by a
reprogrammed  <IMG WIDTH=43 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/1/144img1.gif"   > 
chip originally designed to run the state slot machine. The ATM was
built in the State Workshops and is designed to be difficult to rob.
It consists of an interior vault where it holds a large stock of $1
coins and an output store from which these coins are dispensed. To
limit possible losses it will only move coins from the vault to the
output store when that is empty. When the machine is switched on in
the morning, with an empty output store, it immediately moves 1 coin
into the output store. When that has been dispensed it will then move
2 coins, then 3, and so on until it reaches some preset limit k. It
then recycles back to 1, then 2 and so on.
<P>
<P>
The students form a queue at this machine and, in turn, each student
inserts his card. The machine dispenses what it has in its output
store and updates the amount paid to that student by writing the new
total on the card. If the student has not received his full grant, he
removes his card and rejoins the queue at the end. If the amount in
the store plus what the student has already received comes to more
than $40, the machine only pays out enough to make the total up to
$40. Since this fact is recorded on the card, it is pointless for the
student to continue queuing and he leaves. The amount remaining in the
store is then available for the next student.
<P>
<P>
Write a program that will read in values of N (the number of students,
1  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/1/144img1.gif"   >  N  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/1/144img1.gif"   >  25) and k (the limit for that machine, 1  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/1/144img1.gif"   >  k  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/1/144img1.gif"   > 
40) and calculate the order in which the students leave the queue.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines each containing a value for N
and k as integers. The list will be terminated by two zeroes (0 0).
<P>
<P>
Output will consist of a line for each line of input and will contain
the list of students in the order in which they leave the queue.
Students are ordered according to their position in the queue at the
start of the day. All numbers must be right justified in a field of
width 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>5 3
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  1  3  5  2  4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
145||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Gondwanaland Telecom</TITLE>
<META NAME="description" CONTENT="Gondwanaland Telecom">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Gondwanaland Telecom</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Gondwanaland Telecom makes charges for calls according to distance and
time of day. The basis of the charging is contained in the following
schedule, where the charging step is related to the distance:
<P>
<P> <IMG WIDTH=478 HEIGHT=154 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/1/145img1.gif"   > <P>
<P>
All charges are in dollars per minute of the call. Calls which
straddle a rate boundary are charged according to the time spent in
each section. Thus a call starting at 5:58 pm and terminating at 6:04
pm will be charged for 2 minutes at the day rate and for 4 minutes at
the evening rate. Calls less than a minute are not recorded and no
call may last more than 24 hours.
<P>
<P>
Write a program that reads call details and calculates the
corresponding charges.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input lines will consist of the charging step (upper case letter
'A'..'E'), the number called (a string of 7 digits and a hyphen in the
approved format) and the start and end times of the call, all
separated by exactly one blank. Times are recorded as hours and
minutes in the 24 hour clock, separated by one blank and with two
digits for each number. Input will be terminated by a line consisting
of a single <TT>#</TT>.
<P>
<P>
Output will consist of the called number, the time in minutes the call
spent in each of the charge categories, the charging step and the
total cost in the format shown below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A 183-5724 17 58 18 04
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<TT>
<P> <IMG WIDTH=239 HEIGHT=29 ALIGN=BOTTOM ALT="tabular47" SRC="http://uva.onlinejudge.org/external/1/145img1.gif"   > <P>
</TT>
<P>
</BODY>
</HTML>

______________________________________________________
146||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>ID Codes</TITLE>
<META NAME="description" CONTENT="ID Codes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">ID Codes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
It is 2084 and the year of Big Brother has finally arrived, albeit a
century late. In order to exercise greater control over its citizens
and thereby to counter a chronic breakdown in law and order, the
Government decides on a radical measure--all citizens are to have a
tiny microcomputer surgically implanted in their left wrists. This
computer will contains all sorts of personal information as well as a
transmitter which will allow people's movements to be logged and
monitored by a central computer. (A desirable side effect of this
process is that it will shorten the dole queue for plastic surgeons.)
<P>
<P>
An essential component of each computer will be a unique
identification code, consisting of up to 50 characters drawn from the
26 lower case letters. The set of characters for any given code is
chosen somewhat haphazardly. The complicated way in which the code is
imprinted into the chip makes it much easier for the manufacturer to
produce codes which are rearrangements of other codes than to produce
new codes with a different selection of letters.  Thus, once a set of
letters has been chosen all possible codes derivable from it are used
before changing the set.
<P>
<P>
For example, suppose it is decided that a code will contain exactly 3
occurrences of `<TT>a</TT>', 2 of `<TT>b</TT>' and 1 of `<TT>c</TT>', then three of the allowable 60 codes under these conditions are:
<P>
<PRE>      abaabc
      abaacb
      ababac</PRE>
<P>
These three codes are listed from top to bottom in alphabetic order.
Among all codes generated with this set of characters, these codes
appear consecutively in this order.
<P>
<P>
Write a program to assist in the issuing of these identification
codes. Your program will accept a sequence of no more than 50 lower
case letters (which may contain repeated characters) and print the
successor code if one exists or the message `No Successor' if the
given code is the last in the sequence for that set of characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines each containing a string
representing a code. The entire file will be terminated by a line
consisting of a single <TT>#</TT>.
<P>
<P>
Output will consist of one line for each code read containing the
successor code or the words `<TT>No Successor</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>abaacb
cbbaa
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>ababac
No Successor</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
147||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Dollars</TITLE>
<META NAME="description" CONTENT="Dollars">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Dollars</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
New Zealand currency consists of $100, $50, $20, $10, and $5
notes and $2, $1, 50c, 20c, 10c and 5c coins. Write a program that
will determine, for any given amount, in how many ways that amount may
be made up. Changing the order of listing does not increase the count.
Thus 20c may be made up in 4 ways: 1 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline25" SRC="http://uva.onlinejudge.org/external/1/147img1.gif"   > 20c, 2 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline25" SRC="http://uva.onlinejudge.org/external/1/147img1.gif"   > 10c, 10c+2 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline25" SRC="http://uva.onlinejudge.org/external/1/147img1.gif"   > 5c, and 4 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline25" SRC="http://uva.onlinejudge.org/external/1/147img1.gif"   > 5c.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of real numbers no greater than $300.00
each on a separate line. Each amount will be valid, that is will be a
multiple of 5c. The file will be terminated by a line containing zero
(0.00).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a line for each of the amounts in the input,
each line consisting of the amount of money (with two decimal places
and right justified in a field of width 6), followed by the number of
ways in which that amount may be made up, right justified in a field
of width 17.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>0.20
2.00
0.00</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  0.20                4
  2.00              293</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
148||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Anagram checker</TITLE>
<META NAME="description" CONTENT="Anagram checker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Anagram checker</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
It is often fun to see if rearranging the letters of a name gives an
amusing anagram. For example, the letters of `WILLIAM SHAKESPEARE'
rearrange to form `SPEAK REALISM AWHILE'.
<P>
<P>
Write a program that will read in a dictionary and a list of phrases
and determine which words from the dictionary, if any, form anagrams
of the given phrases. Your program must find all sets of words in the
dictionary which can be formed from the letters in each phrase. Do not
include the set consisting of the original words. If no anagram is
present, do not write anything, not even a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of two
parts. The first part is the dictionary, the second part is the set of
phrases for which you need to find anagrams. Each part of the file
will be terminated by a line consisting of a single <TT>#</TT>. The dictionary
will be in alphabetic order and will contain up to 2000 words, one
word per line. The entire file will be in upper case, and no
dictionary word or phrase will contain more than 20 letters. You
cannot assume the language being used is English.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines. Each line will consist of
the original phrase, a space, an equal sign (=), another space, and
the list of words that together make up an anagram of the original
phrase, separated by exactly one space. These words must appear in
alphabetic sequence.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>ABC
AND
DEF
DXZ
K
KX
LJSRT
LT
PT
PTYYWQ
Y
YWJSRQ
ZD
ZZXY
# 
ZZXY ABC DEF
SXZYTWQP KLJ YRTD
ZZXY YWJSRQ PTYYWQ ZZXY
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>SXZYTWQP KLJ YRTD = DXZ K LJSRT PTYYWQ
SXZYTWQP KLJ YRTD = DXZ K LT PT Y YWJSRQ
SXZYTWQP KLJ YRTD = KX LJSRT PTYYWQ ZD
SXZYTWQP KLJ YRTD = KX LT PT Y YWJSRQ ZD</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
149||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Forests</TITLE>
<META NAME="description" CONTENT="Forests">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Forests</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The saying ``You can't see the wood for the trees'' is not only a
cliche, but is also incorrect. The real problem is that you can't see
the trees for the wood. If you stand in the middle of a ``wood'' (in NZ
terms, a patch of bush), the trees tend to obscure each other and the
number of distinct trees you can actually see is quite small. This is
especially true if the trees are planted in rows and columns (as in a
pine plantation), because they tend to line up. The purpose of this
problem is to find how many distinct trees you can see from an
arbitrary point in a pine plantation (assumed to stretch ``for ever'').
<P>
<P> <IMG WIDTH=475 HEIGHT=333 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/149img1.gif"   > <P>
<P>
You can only see a distinct tree if no part of its trunk is obscured by
a nearer tree--that is if both sides of the trunk can be seen, with a
discernible gap between them and the trunks of all trees closer to you.
Also, you can't see a tree if it is apparently ``too small''. For
definiteness, ``not too small'' and ``discernible gap'' will mean that
the angle subtended at your eye is greater than 0.01 degrees (you are
assumed to use one eye for observing). Thus the two trees marked
<IMG WIDTH=13 HEIGHT=13 ALIGN=BOTTOM ALT="picture169" SRC="http://uva.onlinejudge.org/external/1/149img1.gif"   > 
obscure at least the trees marked
<IMG WIDTH=13 HEIGHT=13 ALIGN=BOTTOM ALT="picture175" SRC="http://uva.onlinejudge.org/external/1/149img1.gif"   > 
from the given view point.
<P>
<P>
Write a program that will determine the number of trees visible under
these assumptions, given the diameter of the trees, and the coordinates
of a viewing position. Because the grid is infinite, the origin is
unimportant, and the coordinates will be numbers between 0 and 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing three
real numbers of the form 0.nn. The first number will be the trunk
diameter--all trees will be assumed to be cylinders of exactly this
diameter, with their centres placed exactly on the points of a
rectangular grid with a spacing of one unit. The next two numbers will
be the x and y coordinates of the observer. To avoid potential
problems, say by being too close to a tree, we will guarantee that
 <IMG WIDTH=255 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline260" SRC="http://uva.onlinejudge.org/external/1/149img1.gif"   > .  To avoid problems with trees
being too small you may assume that  <IMG WIDTH=115 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline262" SRC="http://uva.onlinejudge.org/external/1/149img1.gif"   > . The file will
be terminated by a line consisting of three zeroes.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of the number of trees of the given size,
visible from the given position.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>0.10 0.46 0.38
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>128</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
150||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Double Time</TITLE>
<META NAME="description" CONTENT="Double Time">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Double Time</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In 45 BC a standard calendar was adopted by Julius Caesar--each
year would have 365 days, and every fourth year have an extra
day--the 29th of February. However this calendar was not quite accurate
enough to track the true solar year, and it became noticeable that the
onset of the seasons was shifting steadily through the year. In 1582
Pope Gregory XIII ruled that a new style calendar should take effect.
From then on, century years would only be leap years if they were
divisible by 400. Furthermore the current year needed an adjustment to
realign the calendar with the seasons. This new calendar, and the
correction required, were adopted immediately by Roman Catholic
countries, where the day following Thursday 4 October 1582 was Friday
15 October 1582. The British and Americans (among others) did not
follow suit until 1752, when Wednesday 2 September was followed by
Thursday 14 September. (Russia did not change until 1918, and Greece
waited until 1923.) Thus there was a long period of time when history
was recorded in two different styles.
<P>
<P>
Write a program that will read in a date, determine which style it is
in, and then convert it to the other style.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a
series of lines, each line containing a day and date (such as Friday 25
December 1992). Dates will be in the range 1 January 1600 to 31
December 2099, although converted dates may lie outside this range.
Note that all names of days and months will be in the style shown,
that is the first letter will be capitalised with the rest lower case.
The file will be terminated by a line containing a single `<TT>#</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of a date in the other style. Use the
format and spacing shown in the example and described above. Note that
there must be exactly one space between each pair of fields. To
distinguish between the styles, dates in the old style must have an
asterisk (`*') immediately after the day of the month (with no
intervening space). Note that this will not apply to the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>Saturday 29 August 1992
Saturday 16 August 1992
Wednesday 19 December 1991
Monday 1 January 1900
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Saturday 16* August 1992
Saturday 29 August 1992
Wednesday 1 January 1992
Monday 20* December 1899</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
151||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Power Crisis</TITLE>
<META NAME="description" CONTENT="Power Crisis">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Power Crisis</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
During the power crisis in New Zealand this winter (caused by a
shortage of rain and hence low levels in the hydro dams), a
contingency scheme was developed to turn off the power to areas of the
country in a systematic, totally fair, manner. The country was divided
up into <I>N</I> regions (Auckland was region number 1, and Wellington number
13). A number, <I>m</I>, would be picked `at random', and the power would
first be turned off in region 1 (clearly the fairest starting point)
and then in every m'th region after that, wrapping around to 1 after
<I>N</I>, and ignoring regions already turned off. For example, if <I>N</I> = 17 and
<I>m</I> = 5, power would be turned off to the regions in the
order:1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7.
<P>
<P>
The problem is that it is clearly fairest to turn off Wellington last
(after all, that is where the Electricity headquarters are), so for a
given <I>N</I>, the `random' number <I>m</I> needs to be carefully chosen so that
region 13 is the last region selected.
<P>
<P>
Write a program that will read in the number of regions and then
determine the smallest number <I>m</I> that will ensure that Wellington
(region 13) can function while the rest of the country is blacked out.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a
series of lines, each line containing the number of regions (<I>N</I>) with
 <IMG WIDTH=104 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/1/151img1.gif"   > . The file will be terminated by a line consisting of
a single 0.
<P>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of the number <I>m</I> according to the above
scheme.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>17
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>7</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
152||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tree's a Crowd</TITLE>
<META NAME="description" CONTENT="Tree's a Crowd">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Tree's a Crowd</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Dr William Larch, noted plant psychologist and inventor of the phrase
``Think like a tree--Think Fig'' has invented a new classification
system for trees. This is a complicated system involving a series of
measurements which are then combined to produce three numbers (in the
range [0, 255]) for any given tree. Thus each tree can be thought of
as occupying a point in a 3-dimensional space. Because of the nature
of the process, measurements for a large sample of trees are likely to
be spread fairly uniformly throughout the whole of the available
space. However Dr Larch is convinced that there are relationships to
be found between close neighbours in this space. To test this
hypothesis, he needs a histogram of the numbers of trees that have
closest neighbours that lie within certain distance ranges.
<P>
<P>
Write a program that will read in the parameters of up to 5000 trees
and determine how many of them have closest neighbours that are less
than 1 unit away, how many with closest neighbours 1 or more but less
than 2 units away, and so on up to those with closest neighbours 9 or
more but less than 10 units away. Thus if  <IMG WIDTH=12 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/1/152img1.gif"   >  is the
distance between the i'th point and its nearest neighbour(s) and
 <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/1/152img1.gif"   > , with <I>j</I> and <I>k</I> integers and <I>k</I> = <I>j</I>+1, then
this point (tree) will contribute 1 to the j'th bin in the histogram
(counting from zero). For example, if there were only two points 1.414
units apart, then the histogram would be 0, 2, 0, 0, 0, 0, 0, 0, 0, 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a
series of lines, each line consisting of 3 numbers in the range [0,
255]. The file will be terminated by a line consisting of three
zeroes.
<P>
<P>
Output will consist of a single line containing the 10 numbers
representing the desired counts, each number right justified in a
field of width 4.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>10 10 0
10 10 0
10 10 1
10 10 3
10 10 6
10 10 10
10 10 15
10 10 21
10 10 28
10 10 36
10 10 45
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>   2   1   1   1   1   1   1   1   1   1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
153||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Permalex</TITLE>
<META NAME="description" CONTENT="Permalex">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Permalex</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a string of characters, we can permute the individual characters
to make new strings. If we can impose an ordering on the characters
(say alphabetic sequence), then the strings themselves can be ordered
and any given permutation can be given a unique number designating its
position in that ordering. For example the string `acab' gives rise to
the following 12 distinct permutations:
<P>
<P> <IMG WIDTH=233 HEIGHT=78 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/1/153img1.gif"   > <P>
<P>
Thus the string `acab' can be characterised in this sequence as 5.
<P>
<P>
Write a program that will read in a string and determine its position
in the ordered sequence of permutations of its constituent characters.
Note that numbers of permutations can get very large; however we
guarantee that no string will be given whose position is more than
 <IMG WIDTH=185 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/1/153img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines, each
line containing one string. Each string will consist of up to 30 lower
case letters, not necessarily distinct. The file will be terminated by
a line consisting of a single <TT>#</TT>.
<P>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of the position of the string in its
sequence, right justified in a field of width 10.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>bacaa
abc
cba
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>
        15
         1
         6
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
154||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Recycling</TITLE>
<META NAME="description" CONTENT="Recycling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Recycling</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Kerbside recycling has come to New Zealand, and every city from
Auckland to Invercargill has leapt on to the band wagon. The bins come
in 5 different colours--red, orange, yellow, green and blue--and
5 wastes have been identified for recycling--Plastic, Glass,
Aluminium, Steel, and Newspaper. Obviously there has been no
coordination between cities, so each city has allocated wastes to bins
in an arbitrary fashion. Now that the government has solved the minor
problems of today (such as reorganising Health, Welfare and
Education), they are looking around for further challenges. The
Minister for Environmental Doodads wishes to introduce the
``Regularisation of Allocation of Solid Waste to Bin Colour Bill'' to
Parliament, but in order to do so needs to determine an allocation of
his own. Being a firm believer in democracy (well some of the time
anyway), he surveys all the cities that are using this recycling
method. From these data he wishes to determine the city whose
allocation scheme (if imposed on the rest of the country) would cause
the least impact, that is would cause the smallest number of changes in
the allocations of the other cities. Note that the sizes of the cities
is not an issue, after all this is a democracy with the slogan ``One
City, One Vote''.
<P>
<P>
Write a program that will read in a series of allocations of wastes to
bins and determine which city's allocation scheme should be chosen.
Note that there will always be a clear winner.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a
series of blocks. Each block will consist of a series of lines and
each line will contain a series of allocations in the form shown in
the example. There may be up to 100 cities in a block. Each block will
be terminated by a line starting with `e'. The entire file will be
terminated by a line consisting of a single <TT>#</TT>.
<P>
<P>
Output will consist of a series of lines, one for each block in the
input. Each line will consist of the number of the city that should be
adopted as a national example.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>r/P,o/G,y/S,g/A,b/N
r/G,o/P,y/S,g/A,b/N
r/P,y/S,o/G,g/N,b/A
r/P,o/S,y/A,g/G,b/N
e
r/G,o/P,y/S,g/A,b/N
r/P,y/S,o/G,g/N,b/A
r/P,o/S,y/A,g/G,b/N
r/P,o/G,y/S,g/A,b/N
ecclesiastical
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>1
4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
155||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>All Squares</TITLE>
<META NAME="description" CONTENT="All Squares">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">All Squares</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Geometrically, any square has a unique, well-defined centre point. On
a grid this is only true if the sides of the square are an odd number
of points long. Since any odd number can be written in the form 2k+1,
we can characterise any such square by specifying k, that is we can say
that a square whose sides are of length 2k+1 has size k. Now define a
pattern of squares as follows.
<P>
<OL><LI> The largest square is of size k (that is sides are of length 2k+1) and is
centred in a grid of size 1024 (that is the grid sides are of length
2049).<LI> The smallest permissible square is of size 1 and the largest is of
size 512, thus  <IMG WIDTH=89 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/1/155img1.gif"   > .<LI> All squares of size <I>k</I> &gt; 1 have a square of size k div 2 centred on
each of their 4 corners. (Div implies integer division, thus 9 div 2 =
4).<LI> The top left corner of the screen has coordinates (0,0), the bottom
right has coordinates (2048, 2048).
</OL>
<P>
Hence, given a value of k, we can draw a unique pattern of squares
according to the above rules. Furthermore any point on the screen will
be surrounded by zero or more squares. (If the point is on the border
of a square, it is considered to be surrounded by that square). Thus
if the size of the largest square is given as 15, then the following
pattern would be produced.
<P>
<P> <IMG WIDTH=443 HEIGHT=441 ALIGN=BOTTOM ALT="picture25" SRC="http://uva.onlinejudge.org/external/1/155img1.gif"   > <P>
<P>
Write a program that will read in a value of k and the coordinates of
a point, and will determine how many squares surround the point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a
series of lines. Each line will consist of a value of k and the
coordinates of a point. The file will be terminated by a line
consisting of three zeroes (0 0 0).
<P>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of the number of squares containing the
specified point, right justified in a field of width 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>500 113 941
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  5</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
156||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ananagrams</TITLE>
<META NAME="description" CONTENT="Ananagrams">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ananagrams</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Most crossword puzzle fans are used to <EM>anagrams</EM>--groups
of words with the same letters in different orders--for example
OPTS, SPOT, STOP, POTS and POST. Some words however do not have this
attribute, no matter how you rearrange their letters, you cannot form
another word. Such words are called <EM>ananagrams</EM>, an example is
QUIZ.
<P>
<P>
Obviously such definitions depend on the domain within which we are
working; you might think that ATHENE is an ananagram, whereas any
chemist would quickly produce ETHANE. One possible domain would be the
entire English language, but this could lead to some problems. One
could restrict the domain to, say, Music, in which case SCALE becomes
a <EM>relative ananagram</EM> (LACES is not in the same domain) but NOTE
is not since it can produce TONE.
<P>
<P>
Write a program that will read in the dictionary of a restricted
domain and determine the relative ananagrams. Note that single letter
words are, ipso facto, relative ananagrams since they cannot be
``rearranged'' at all. The dictionary will contain no more
than 1000 words.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines. No line will be more than 80
characters long, but may contain any number of words. Words consist of
up to 20 upper and/or lower case letters, and will not be broken
across lines. Spaces may appear freely around words, and at least one
space separates multiple words on the same line. Note that words that
contain the same letters but of differing case are considered to be
anagrams of each other, thus tIeD and EdiT are anagrams. The file will
be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines. Each line will consist of a
single word that is a relative ananagram in the input dictionary.
Words must be output in lexicographic (case-sensitive) order. There
will always be at least one relative ananagram.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>ladder came tape soon leader acme RIDE lone Dreis peat
 ScAlE orb  eye  Rides dealer  NotE derail LaCeS  drIed
noel dire Disk mace Rob dries
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Disk
NotE
derail
drIed
eye
ladder
soon</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
157||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Route Finding</TITLE>
<META NAME="description" CONTENT="Route Finding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Route Finding</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many cities provide a comprehensive public transport system, often
integrating bus routes, suburban commuter train services and
underground railways. Routes on such systems can be categorised
according to the stations or stops along them. We conventionally think
of them as forming lines (where the vehicle shuttles from one end of
the route to the other and returns), loops (where the two ends of the
``branch'' are the same and vehicles circle the system in
both directions) and connections, where each end of the route connects
with another route. Obviously all of these can be thought of as very
similar, and can connect with each other at various points along their
routes. Note that vehicles can travel in both directions along all
routes, and that it is only possible to change between routes at
connecting stations.
<P>
<P>
To simplify matters, each route is given a designation letter from the
set `<TT>A</TT>' to `<TT>Z</TT>', and each station along a
route will be designated by another letter from the set 
`<TT>a</TT>'  to `<TT>z</TT>'. Connecting stations will have more than
one designation. Thus an example could be:
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture31" SRC="http://uva.onlinejudge.org/external/1/157img1.gif"   > <P>
<P>
A common problem in such systems is finding a route between two
stations. Once this has been done we wish to find the
``best'' route, where ``best'' means ``shortest
time''.
<P>
<P>
Write a program that will read in details of such a system and then
will find the fastest routes between given pairs of stations. You can
assume that the trip between stations always takes 1 unit of time and
that changing between routes at a connecting station takes 3 units of
time.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of two parts. The first will consist of a
description of a system, the second will consist of pairs of stations.
The description will start with a number between 1 and 26 indicating
how many routes there are in the system. This will be followed by that
many lines, each describing a single route. Each line will start with
the route identifier followed by a `<TT>:</TT>' followed by the stations along
that route, in order. Connections will be indicated by an `<TT>=</TT>' sign
followed by the complete alternative designation. All connections will
be identified at least once, and if there are more than two lines
meeting at a connection, some or of all the alternative designations
may be identified together.  That is, there may be sequences such as
`<TT>...hc=Bg=Cc=Abd...</TT>'. If
the route forms a loop then the last station will be the same as the
first. This is the only situation in which station letters will be
repeated. The next portion of the input file will consist of a sequence
of lines each containing two stations written contiguously. The file
will be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each pair of stations
in the input. Each line will consist of the time for the fastest route
joining the two stations, right justified in a field of width 3,
followed by a colon and a space and the sequence of stations
representing the shortest journey. Follow the example shown below. Note
that there will always be only one fastest route for any given pair of
stations and that the route must start and finish at the named stations
(not at any synonyms thereof), hence the time for the route must
include the time for any inter-station transfers.
<P>
<P>
The example input below refers to the diagram given above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>4
A:fgmpnxzabjd=Dbf
D:b=Adac=Ccf
B:acd=Azefg=Cbh
C:bac
AgAa
AbBh
BhDf
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  5: Agfdjba
  9: Abaz=Bdefgh
 10: Bhg=Cbac=Dcf</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
158||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Calendar</TITLE>
<META NAME="description" CONTENT="Calendar">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Calendar</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Most of us have a calendar on which we scribble details of important
events in our lives--visits to the dentist, the Regent 24 hour
book sale, Programming Contests and so on. However there are also the
fixed dates: partner's birthdays, wedding anniversaries and the
like; and we also need to keep track of these. Typically we need to be
reminded of when these important dates are approaching--the
more important the event, the further in advance we wish to have our
memories jogged.
<P>
<P>
Write a program that will provide such a service. The input will
specify the year for which the calendar is relevant (in the range 1901
to 1999). Bear in mind that, within the range specified, all years
that are divisible by 4 are leap years and hence have an extra day
(February 29th) added. The output will specify ``today's'' date, a
list of forthcoming events and an indication of their relative
importance.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input
will contain an integer representing the year (in the range 1901
to 1999). This will be followed by a series of lines representing
anniversaries or days for which the service is requested.
<P>
An anniversary line will consist of the letter `<TT>A</TT>'; three
integer numbers (<I>D</I>, <I>M</I>, <I>P</I>) representing the date, the month and the
importance of the event; and a string describing the event, all
separated by one or more spaces. P will be a number between 1 and 7
(both inclusive) and represents the number of days before the event
that the reminder service should start. The string describing the
event will always be present and will start at the first non-blank
character after the priority.
<P>
A date line will consist of the letter
`<TT>D</TT>' and the date and month as above.
<P>
All anniversary
lines will precede any date lines. No line will be longer than 255
characters in total. The file will be terminated by a line consisting
of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of blocks of lines, one for each date
line in the input. Each block will consist of the requested date
followed by the list of events for that day and as many following days
as necessary.
<P>
The output should specify the date of the event (<I>D</I> and
<I>M</I>), right justified in fields of width 3, and the relative
importance of the event. Events that happen today should be flagged as
shown below, events that happen tomorrow should have P stars, events
that happen the day after tomorrow should have P-1 stars, and so on.
If several events are scheduled for the same day, order them by
relative importance (number of stars).
<P>
If there is still a conflict,
order them by their appearance in the input stream. Follow the format
used in the example below. Leave 1 blank line between blocks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>1993
A 23 12 5 Partner's birthday
A 25 12 7    Christmas
A 20 12 1 Unspecified Anniversary
D 20 12
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Today is: 20 12
 20 12 *TODAY* Unspecified Anniversary
 23 12 ***     Partner's birthday
 25 12 ***     Christmas</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
159||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Word Crosses</TITLE>
<META NAME="description" CONTENT="Word Crosses">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Word Crosses</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A <EM>word cross</EM> is formed by printing a pair of words, the first
horizontally and the second vertically, so that they share a common
letter. A <EM>leading word cross</EM> is one where the common letter is
as near as possible to the beginning of the horizontal word, and, for
this letter, as close as possible to the beginning of the vertical
word. Thus DEFER and PREFECT would cross on the first 'E' in each
word, PREFECT and DEFER would cross on the 'R'. <EM>Double leading
  word crosses</EM> use two pairs of words arranged so that the two
horizontal words are on the same line and each pair forms a leading
word cross.
<P>
<P>
Write a program that will read in sets of four words and form them (if
possible) into double leading word crosses.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing four
words (two pairs). A word consists of 1 to 10 upper case letters, and
will be separated from its neighbours by at least one space. The file
will be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of double leading word crosses as
defined above. Leave exactly three spaces between the horizontal
words. If it is not possible to form both crosses, write the message
`<TT>Unable to make two crosses</TT>'. Leave 1 blank line
between output sets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>MATCHES CHEESECAKE PICNIC EXCUSES
PEANUT BANANA VACUUM  GREEDY
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE> C
 H
 E
 E
 S
 E          E
 C          X
MATCHES   PICNIC
 K          U
 E          S
            E
            S

Unable to make two crosses</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
160||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Factors and Factorials</TITLE>
<META NAME="description" CONTENT="Factors and Factorials">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Factors and Factorials</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The factorial of a number <I>N</I> (written <I>N</I>!) is defined as the product of
all the integers from 1 to <I>N</I>. It is often defined recursively as
follows:
<P>
<P> <IMG WIDTH=272 HEIGHT=13 ALIGN=BOTTOM ALT="displaymath27" SRC="http://uva.onlinejudge.org/external/1/160img1.gif"   > <P>
<P>
<P> <IMG WIDTH=319 HEIGHT=18 ALIGN=BOTTOM ALT="displaymath28" SRC="http://uva.onlinejudge.org/external/1/160img1.gif"   > <P>
<P>
Factorials grow very rapidly--5! = 120, 10! = 3,628,800. One way of
specifying such large numbers is by specifying the number of times
each prime number occurs in it, thus 825 could be specified as (0 1 2
0 1) meaning no twos, 1 three, 2 fives, no sevens and 1 eleven.
<P>
<P>
Write a program that will read in a number <I>N</I> ( <IMG WIDTH=95 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/160img1.gif"   > ) and
write out its factorial in terms of the numbers of the primes it
contains.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing a single
integer <I>N</I>. The file will be terminated by a line consisting of a
single 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of blocks of lines, one block for each
line of the input. Each block will start with the number N, right
justified in a field of width 3, and the characters `<TT>!</TT>',
space, and `<TT>=</TT>'. This will
be followed by a list of the number of times each prime number occurs
in <I>N</I>!.
<P>
These should be right justified in fields of width 3 and each
line (except the last of a block, which may be shorter) should contain
fifteen numbers. Any lines after the first should be indented. Follow
the layout of the example shown below exactly.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>5
53
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  5! =  3  1  1
 53! = 49 23 12  8  4  4  3  2  2  1  1  1  1  1  1
        1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
161||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Traffic Lights</TITLE>
<META NAME="description" CONTENT="Traffic Lights">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Traffic Lights</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
One way of achieving a smooth and economical drive to work is to
`catch' every traffic light, that is have every signal
change to green as you approach it. One day you notice as you come
over the brow of a hill that every traffic light you can see has just
changed to green and that therefore your chances of catching every
signal is slight. As you wait at a red light you begin to wonder how
long it will be before all the lights again show green, not
necessarily all turn green, merely all show green simultaneously, even
if it is only for a second.
<P>
<P>
Write a program that will determine whether this event occurs within a
reasonable time. Time is measured from the instant when they all
turned green simultaneously, although the initial portion while they
are all still green is excluded from the reckoning.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of scenarios. Data for each scenario
will consist of a series of integers representing the cycle times of
the traffic lights, possibly spread over many lines, with no line
being longer than 100 characters. Each number represents the cycle
time of a single signal.  The cycle time is the time that traffic may
move in one direction; note that the last 5 seconds of a green cycle
is actually orange. Thus the number 25 means a signal that (for a
particular direction) will spend 20 seconds green, 5 seconds orange
and 25 seconds red. Cycle times will not be less than 10 seconds, nor
more than 90 seconds.  There will always be at least two signals in a
scenario and never more than 100. Each scenario will be terminated by
a zero (0). The file will be terminated by a line consisting of three
zeroes (0 0 0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each scenario in the
input. Each line will consist of the time in hours, minutes and
seconds that it takes for all the signals to show green again after at
least one of them changes to orange. Follow the format shown in the
examples. Time is measured from the instant they all turn green
simultaneously. If it takes more than five hours before they all show
green simultaneously, the message ``<TT>Signals fail to synchronise
in 5 hours</TT>'' should be written instead.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>19 20   0
30
  25    35 0
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>00:00:40
00:05:00</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
162||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Beggar My Neighbour</TITLE>
<META NAME="description" CONTENT="Beggar My Neighbour">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Beggar My Neighbour</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
``Beggar My Neighbour'' (sometimes known as ``Strip
Jack Naked'') is a traditional card game, designed to help teach
beginners something about cards and their values. A standard deck is
shuffled and dealt face down to the two players, the first card to the
non-dealer, the second to the dealer, and so on until each player has
26 cards. The dealer receives the last card. The non-dealer starts the
game by playing the top card of her deck (the second last card dealt)
face up on the table. The dealer then covers it by playing her top
card face up. Play continues in this fashion until a
``face'' card (Ace, King, Queen or Jack) is played. The next
player must then ``cover'' that card, by playing one
card for a Jack, two for a Queen, three for a King and four for an
Ace. If a face card is played at any stage during this sequence, play
switches and the other player must cover that card. When this sequence
has ended, the player who exposed the last face card takes the entire
heap, placing it face down under her existing deck. She then starts
the next round by playing one card face up as before, and play
continues until one player cannot play when called upon to do so,
because they have no more cards.
<P>
<P>
Write a program that will simulate playing this game. Remember that a
standard deck (or pack) of cards contains 52 cards. These are divided
into 4 suits--Spades ( <IMG WIDTH=12 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/1/162img1.gif"   > ), Hearts ( <IMG WIDTH=12 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/1/162img1.gif"   > ),
Diamonds ( <IMG WIDTH=12 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/1/162img1.gif"   > ) and Clubs ( <IMG WIDTH=13 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/1/162img1.gif"   > ). Within each
suit there are 13 cards--Ace (A), 2-9, Ten (T), Jack
(J), Queen (Q) and King (K).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a
series of decks of cards. Each deck will give the cards in order as
they would be dealt (that is in the example deck below, the non-dealer
would start the game by playing the H2). Decks will occupy 4 lines
with 13 cards on each. The designation of each card will be the suit
(S, H, D, C) followed by the rank (A, 2-9, T, J, Q, K). There
will be exactly one space between cards. The file will be terminated
by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each deck in the
input. Each line will consist of the number of the winning player (1
is the dealer, 2 is the first to play) and the number of cards in the
winner's hand (ignoring any on the stack), right justified in a field
of width 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>HA H3 H4 CA SK S5 C5 S6 C4 D5 H7 HJ HQ
D4 D7 SJ DT H6 S9 CT HK C8 C9 D6 CJ C6
S8 D8 C2 S2 S3 C7 H5 DJ S4 DQ DK D9 D3
H9 DA SA CK CQ C3 HT SQ H8 S7 ST H2 D2
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>1 44</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
163||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>City Directions</TITLE>
<META NAME="description" CONTENT="City Directions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">City Directions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
When driving through a city, an intersection usually offers one the
choice of going straight on or turning left or right through
90 degrees. However some cities have diagonal roads, thus at
intersections involving these one may be able to turn through
45 degrees (``half'') or through 135 degrees (``sharp'').
<P>
<P>
Consider such a city with Avenues running north-south, Streets running
east-west and Boulevards running diagonally. The central Avenue and
Street are labelled Zero (A0 and S0). Other roads are labelled
relative to these, thus A3W is the third avenue to the west of A0.
There are 6 Boulevards--two passing through the centre of the
city, and 4 others, one in each quadrant. The diagram below shows the
northwest quadrant of a small version of such a city.
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture27" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   > <P>
<P>
The roads marked in grey are considered to be throughways. These are
elevated for most of their length, thus it is possible to cross them
easily, however they always intersect each other at a circle, which is
shared by all other roads that meet at that intersection. You may only
enter or leave them by turning left (sharp left in the case of
boulevards). You may not stop on them for any reason. There are no
restrictions on turns for other roads.
<P>
<P>
This system allows a very simple method of determining one's
current position and a way of arriving at one's destination.
Position can be specified in terms of the last intersection you passed
through (the numbers of the Avenue and Street that meet there) and
your current heading, which can be one of: north (N), northeast (NE),
east (E), southeast (SE), south (S), southwest (SW), west (W) and
northwest (NW). Directions can then be given in terms of how many
intersections to pass through and which turns to make. However, the
locals have an infuriating habit of giving incorrect or invalid
directions, although it cannot be determined whether this is
deliberate or accidental. Directions should (but don't always)
conform to the following simple grammar:
<P>
<BLOCKQUOTE> &lt;command&gt; ::= &lt;turn_command&gt;  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline231" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   >  &lt;straight_command&gt; <BR> 
&lt;turn_command&gt; ::= TURN [HALF  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline231" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   >  SHARP] {LEFT  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline231" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   >  RIGHT} <BR> 
&lt;straight_command&gt; ::= GO [STRAIGHT] n  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline249" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   >  n  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline249" SRC="http://uva.onlinejudge.org/external/1/163img1.gif"   >  99
</BLOCKQUOTE>
<P>
Write a program that will simulate driving through such a city, by
tracking your position and heading as you follow a set of directions
(commands). Each quadrant of the city will be 50 blocks by 50 blocks,
thus the entire city will be 100 blocks by 100 blocks, the outer
throughways will be labelled Fifty and the major and minor boulevards
will cross at roads labelled Twentyfive. You will be told your
starting position and heading and then given a series of directions.
If a direction does not follow the above grammar, or would involve an
illegal or impossible turn then ignore it. At no stage will directions
take you out of the confines of the city.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a
series of scenarios.
<P>
Each scenario will consist of a position and a
heading and will be followed by a series of directions (commands),
each on a separate line. If either of the roads involved is one of the
central roads (A0, S0), they will be labelled <TT>N</TT> or <TT>E</TT> as appropriate.
Note that you may assume that you have just left the intersection
specified. The <code>GO &lt;n&gt;</code> command means that you pass through <code>&lt;n&gt;</code>
intersections.
<P>
Each scenario will be terminated by a line consisting
of the word <TT>STOP</TT>.
<P>
The file will be terminated by a line consisting of
the word <TT>END</TT> only.
<P>
<P>
Input data will follow the format shown below,
except that more than one space may occur where only one is shown. No
line will be longer than 80 characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each scenario. Each
line will consist of a position and a heading in the same format as
the input. If the final stopping place is illegal, report
`<TT>Illegal stopping place</TT>' as the answer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A2W S1N E
TURN SHARP LEFT
GO 1
TURN RIGHT
TURN LEFT
TURN SHARP LEFT
GO 1
TURN LEFT
STOP
A2W S1N W
GO STRAIGHT 2
TURN LEFT
GO ON 2
TURN HALF LEFT
TURN LEFT
GO 2
STOP
END</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>A3W S1N E
Illegal stopping place</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
164||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>String Computer</TITLE>
<META NAME="description" CONTENT="String Computer">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">String Computer</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Extel have just brought out their newest computer, a string processing
computer dubbed the X9091. It is hoped that it will have some value in
cryptography and related fields. (It is rumoured that the Taiwanese
are working on a clone that will correct Stage 1 essays, but we will
ignore such vapourware). This computer will accept input strings and
produce output strings from them, depending on the programs loaded
into them at the time. The chip is the ultimate in RISC
technology--it has only three transformation instructions:
<P>
<UL><LI> Delete a character at a particular position.<LI> Insert a character at a particular position.<LI> Change the character at a particular position to a different character.
</UL>
<P>
Programs for this machine are written in a form of machine code where
each instruction has the format <TT>ZXdd--Z</TT> represents the code for the
instruction (<TT>D</TT>, <TT>I</TT> or <TT>C</TT>), <TT>X</TT> is a character and <TT>dd</TT>
represents a two
digit number. A program is terminated by a special halt instruction
consisting of the letter `<TT>E</TT>'. Note that each instruction works on the
string in memory at the time the instruction is executed.
<P>
To see how this all works consider the following example. It is
desired to transform the string `<TT>abcde</TT>' to the string `<TT>bcgfe</TT>'. This
could be achieved by a series of Change commands, but is not minimal.
The following program is better.
<P>
<P> <IMG WIDTH=610 HEIGHT=103 ALIGN=BOTTOM ALT="tabular32" SRC="http://uva.onlinejudge.org/external/1/164img1.gif"   > <P>
Write a program that will read in two strings (the input string and
the target string) and will produce a <EM>minimal</EM> X9091 program necessary
to transform the input string into the target string. Since there may
be multiple solutions, only one should be produced. Any solution that
satisfies these criteria will be accepted.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing two
strings separated by exactly one space. The strings will consist of no
more than 20 lower case characters. The file will be terminated by a
line consisting of a single <TT>#</TT>.
<P>
Output will consist of a series of lines, one for each line of the
input. Each will consist of a program in X9091 language.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>abcde bcgfe
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Da01Cg03If04E</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
165||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stamps</TITLE>
<META NAME="description" CONTENT="Stamps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stamps</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The government of Nova Mareterrania requires that various legal
documents have stamps attached to them so that the government can
derive revenue from them. In terms of recent legislation, each class
of document is limited in the number of stamps that may be attached to
it. The government wishes to know how many different stamps, and of
what values, they need to print to allow the widest choice of values
to be made up under these conditions. Stamps are always valued in
units of $1.
<P>
<P>
This has been analysed by government mathematicians who have derived a
formula for <I>n</I>(<I>h</I>,<I>k</I>), where <I>h</I> is the number of stamps that may be
attached to a document, <I>k</I> is the number of denominations of stamps
available, and <I>n</I> is the largest attainable value in a continuous
sequence starting from $1. For instance, if <I>h</I>=3, <I>k</I>=2 and the
denominations are $1 and $4, we can make all the values from $1 to
$6 (as well as $8, $9 and $12). However with the same values of <I>h</I>
and <I>k</I>, but using $1 and $3 stamps we can make all the values from
$1 to $7 (as well as $9). This is maximal, so <I>n</I>(3,2) = 7.
<P>
<P>
Unfortunately the formula relating <I>n</I>(<I>h</I>,<I>k</I>) to <I>h</I>, <I>k</I> and the values of
the stamps has been lost--it was published in one of the government
reports but no-one can remember which one, and of the three
researchers who started to search for the formula, two died of boredom
and the third took a job as a lighthouse keeper because it provided
more social stimulation.
<P>
The task has now been passed on to you. You doubt the existence of a
formula in the first place so you decide to write a program that, for
given values of <I>h</I> and <I>k</I>, will determine an optimum set of stamps and
the value of <I>n</I>(<I>h</I>,<I>k</I>).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of several lines, each containing a value for <I>h</I> and
<I>k</I>. The file will be terminated by two zeroes (0 0). For technical
reasons the sum of <I>h</I> and <I>k</I> is limited to 9. (The President lost his
little finger in a shooting accident and cannot count past 9).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a line for each value of <I>h</I> and <I>k</I> consisting of
the <I>k</I> stamp values in ascending order right justified in fields 3
characters wide, followed by a space and an arrow (<code>-&gt;</code>) and the value
of <I>n</I>(<I>h</I>,<I>k</I>) right justified in a field 3 characters wide.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>3 2
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  1  3 -&gt;  7</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
166||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Making Change</TITLE>
<META NAME="description" CONTENT="Making Change">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Making Change</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given an amount of money and unlimited (almost) numbers of coins (we
will ignore notes for this problem) we know that an amount of money
may be made up in a variety of ways. A more interesting problem arises
when goods are bought and need to be paid for, with the possibility
that change may need to be given. Given the finite resources of most
wallets nowadays, we are constrained in the number of ways in which we
can make up an amount to pay for our purchases--assuming that we
can make up the amount in the first place, but that is another story.
<P>
<P>
The problem we will be concerned with will be to minimise the number
of coins that change hands at such a transaction, given that the
shopkeeper has an adequate supply of all coins. (The set of New
Zealand coins comprises 5c, 10c, 20c, 50c, $1 and $2.) Thus if we
need to pay 55c, and we do not hold a 50c coin, we could pay this as
2*20c + 10c + 5c to make a total of 4 coins. If we tender $1 we will
receive 45c in change which also involves 4 coins, but if we tender
$1.05 ($1 + 5c), we get 50c change and the total number of coins
that changes hands is only 3.
<P>
<P>
Write a program that will read in the resources available to you and
the amount of the purchase and will determine the minimum number of
coins that change hands.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line defining a
different situation. Each line will consist of 6 integers representing
the numbers of coins available to you in the order given above,
followed by a real number representing the value of the transaction,
which will always be less than $5.00. The file will be terminated by
six zeroes (0 0 0 0 0 0). The total value of the coins will always be
sufficient to make up the amount and the amount will always be
achievable, that is it will always be a multiple of 5c.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each situation
defined in the input. Each line will consist of the minimum number of
coins that change hands right justified in a field 3 characters wide.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>2 4 2 2 1 0  0.95
2 4 2 0 1 0  0.55
0 0 0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  2
  3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
167||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Sultan's Successors</TITLE>
<META NAME="description" CONTENT="The Sultan's Successors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Sultan's Successors</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Sultan of Nubia has no children, so she has decided that the
country will be split into up to <I>k</I> separate parts on her death and
each part will be inherited by whoever performs best at some test. It
is possible for any individual to inherit more than one or indeed all
of the portions. To ensure that only highly intelligent people
eventually become her successors, the Sultan has devised an ingenious
test. In a large hall filled with the splash of fountains and the
delicate scent of incense have been placed <I>k</I> chessboards. Each
chessboard has numbers in the range 1 to 99 written on each square and
is supplied with 8 jewelled chess queens. The task facing each
potential successor is to place the 8 queens on the chess board in
such a way that no queen threatens another one, and so that the
numbers on the squares thus selected sum to a number at least as high
as one already chosen by the Sultan. (For those unfamiliar with the
rules of chess, this implies that each row and column of the board
contains exactly one queen, and each diagonal contains no more than
one.)
<P>
<P>
Write a program that will read in the number and details of the
chessboards and determine the highest scores possible for each board
under these conditions. (You know that the Sultan is both a good chess
player and a good mathematician and you suspect that her score is the
best attainable.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of <I>k</I> (the number of boards), on a line by itself,
followed by <I>k</I> sets of 64 numbers, each set consisting of eight lines
of eight numbers. Each number will be a positive integer less than
100. There will never be more than 20 boards.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of <I>k</I> numbers consisting of your <I>k</I> scores, each
score on a line by itself and right justified in a field 5 characters
wide.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>1
 1  2  3  4  5  6  7  8
 9 10 11 12 13 14 15 16
17 18 19 20 21 22 23 24
25 26 27 28 29 30 31 32
33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48
48 50 51 52 53 54 55 56
57 58 59 60 61 62 63 64</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  260</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
168||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Theseus and the Minotaur</TITLE>
<META NAME="description" CONTENT="Theseus and the Minotaur">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Theseus and the Minotaur</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Those of you with a classical education may remember the legend of
Theseus and the Minotaur. This is an unlikely tale involving a bull
headed monster, an underground maze full of twisty little passages all
alike, love-lorn damsels and balls of silk. In line with the
educational nature of this contest, we will now reveal the true story.
<P>
<P>
The maze was actually a series of caverns connected by reasonably
straight passages, some of which could only be traversed in one
direction. In order to trap the Minotaur, Theseus smuggled a large
supply of candles into the Labyrinth, as he had discovered that the
Minotaur was afraid of light. Theseus wandered around somewhat
aimlessly until he heard the Minotaur approaching along a tunnel. At
this point he lit a candle and set off in pursuit. The Minotaur
retreated into the cavern it had just left and fled by another
passage. Theseus followed, slowly gaining, until he reached the <I>k</I>'th
cavern since lighting the candle. Here he had enough time to place the
lighted candle in the middle of the cavern, light another one from it,
and continue the chase. As the chase progressed, a candle was left in
each <I>k</I>'th cavern passed through, thereby limiting the movement of the
Minotaur. Whenever the Minotaur entered a cavern, it would check the
exits in a particular order, fleeing down the first that did not lead
directly to a lit cavern. (Remember that as Theseus was carrying a lit
candle, the Minotaur never exited a cavern by the tunnel used to enter
it.) Eventually the Minotaur became trapped, enabling Theseus to
defeat it.
<P>
<P>
Consider the following Labyrinth as an example, where in this case the
Minotaur checks the exits from a cavern in alphabetical order:
<P>
<P> <IMG WIDTH=411 HEIGHT=131 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/168img1.gif"   > <P>
<P>
Assume that Theseus is in cavern C when he hears the Minotaur
approaching from A, and that for this scenario, the value of <I>k</I> is 3.
He lights a candle and gives chase, pursuing it through A, B, D
(leaves a candle), G, E, F (another candle), H, E, G (another), H, E
(trapped).
<P>
<P>
Write a program that will simulate Theseus's pursuit of the Minotaur.
The description of a labyrinth will identify each cavern by an upper
case character and will list the caverns reachable from that cavern in
the order that the Minotaur will attempt them, followed by the
identifiers for the caverns which the Minotaur and Theseus were in
when contact was first made, followed by the value of <I>k</I>. If a
cavern has no exit it may or may not be in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines. Each line will describe a
scenario in the format shown below (which describes the above
example). No line will contain more than 255 characters. The file will
be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each Labyrinth. Each line will
identify the lit caverns, in the order in which the candles were left,
and the cavern in which the Minotaur was trapped, following the format
shown in the example below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A:BCD;B:AD;D:BG;F:H;G:DEH;E:FGH;H:EG;C:AD. A C 3
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>D F G /E</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
169||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Xenosemantics</TITLE>
<META NAME="description" CONTENT="Xenosemantics">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Xenosemantics</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Contact with extra-terrestrial intelligence has been made at last!! A
stream of messages has been discovered, apparently emanating from
Procyon IV. After intensive study by the world's best
xenosemanticists, the following definite conclusions on the format of
the messages have been reached. The messages are streams of bits
divided into groups of 8. Somewhat coincidentally the meaningful parts
of the message map onto the lower case alphabet, although other
characters sometimes intervene. Letters are organised into words
separated by spacer letters. The spacer letter varies within a
message, but a word which is delimited by a particular spacer pair
does not contain that spacer letter within it. In addition the message
is conceptually bounded by a pair of `joker' letters or `wild spacers'
that can match any letter. For example, a message segment <TT>
xwrxwtx</TT> contains 3 words--<TT>wr</TT>, <TT>wt</TT>, and <TT>rx</TT>; <TT>wrxwt</TT> is
not a word in this segment of the message. If this segment appeared at
the start of a message then <TT>xw</TT> and <TT>xwrxw</TT> could also be
words. The words <TT>wr</TT> and <TT>rx</TT> overlap, while <TT>wt</TT> does
not overlap any words in this message segment. While a word contains
the same letters each time it appears in one message, the order of the
letters may vary in different occurrences of the same word. Each
message contains many words which are not ``true'' words in that they
carry no meaning (like err.., umm.., etc in English). Every true word
in the message contains at least two and no more than 250 letters,
overlaps with another true word, and is repeated somewhere in the
message (possibly with the letters in a different order). In the
example above, <TT>wr</TT> and <TT>rx</TT> would both be true words if <TT>
wr</TT> or <TT>rw</TT>, and <TT>rx</TT> or <TT>xr</TT>, occurred as words elsewhere
in the message. The word <TT>wt</TT> would be a true word if <TT>wt</TT> or
<TT>tw</TT> occurred elsewhere in the message, overlapping another true
word.
<P>
<P>
Write a program that will read in messages and print out a list of the
different true words contained in each message (using the spelling
which occurs first), in the order the words first appear in the
message. If the first appearances of two words overlap, then the word
that finishes first precedes the other. Remember that both the start
and the end of the message count as spacer letters. Your program must
be able to process messages of up to 1000 letters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of one or more messages. Each message will consist
of one or more lines. Each line will be no more than 60 characters
long and will contain a mixture of lower case letters and other
characters. If the last character of a line is a dash (<TT>-</TT>) then the
message continues on the next line. All characters other than lower
case `<TT>a</TT>' to `<TT>z</TT>' form no part of the message. The file will be
terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of the true words for each message, in the correct
order as specified above, one word per line. Terminate the list for
each message by a line consisting of a single *.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>dyj@ttdi%sdort^jdyt*rFnn  trlnsvkGHoalexotrjxzasvs-
ozgpsi&lt;&gt;:pkelaovo,.;'slnxt'][-prsjlntrjo
aaaaaaa
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>dyj
ortj
lnsvkoalexot
*
*</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
170||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Clock Patience</TITLE>
<META NAME="description" CONTENT="Clock Patience">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Clock Patience</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Card sharp Albert (Foxy) Smith is writing a book on patience games. To
double check the examples in the book, he is writing programs to find
the optimal play of a given deal. The description of Clock Patience
reads as follows: ``The cards are dealt out (face down) in a circle,
representing a clock, with a pile in each hour position and an extra
pile in the centre of the clock. The first card goes face down on one
o'clock, the next on two, and so on clockwise from there, with each
thirteenth card going to the center of the clock. This results in
thirteen piles, with four cards face down in each pile.
<P>
<P> <IMG WIDTH=146 HEIGHT=155 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/170img1.gif"   > <P>
<P>
The game then starts. The top card of the `king' pile (the last card
dealt) is exposed to become the current card. Each move thereafter
consists of placing the current card face up beneath the pile
corresponding to its value and exposing the top card of that pile as
the new current card. Thus if the current card is an Ace it is placed
under the `one' pile and the top card of that pile becomes the current
card. The game ends when the pile indicated by the current card has no
face down cards in it. You win if the entire deck is played out, i.e.
exposed.''
<P>
<P>
Write a program that will read in a number of shuffled decks, and play
the game.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input will consist of decks of cards arranged in four
lines of 13 cards, cards separated by a single blank. Each card is
represented by two characters, the first is the rank (A, 2, 3, 4, 5,
6, 7, 8, 9, T, J, Q, K) followed by the suit (H, D, C, S). The input
will be terminated by a line consisting of a single <TT>#</TT>. The deck is
listed from bottom to top, so the first card dealt is the last card
listed.
<P>
<P>
The output will consist of one line per deck. Each line will contain
the number of cards exposed during the game (2 digits, with a leading
zero if necessary), a comma, and the last card exposed (in the format
used in the input).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>TS QC 8S 8D QH 2D 3H KH 9H 2H TH KS KC
9D JH 7H JD 2S QS TD 2C 4H 5H AD 4D 5D
6D 4S 9S 5S 7S JS 8H 3D 8C 3S 4C 6S 9C
AS 7C AH 6H KD JC 7D AC 5C TC QD 6C 3C
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>44,KD</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
171||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Car Trialling</TITLE>
<META NAME="description" CONTENT="Car Trialling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Car Trialling</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Car trialling requires the following of carefully worded instructions.
When setting a trial, the organiser places traps in the instructions
to catch out the unwary.
<P>
<P>
Write a program to determine whether an instruction obeys the
following rules, which are loosely based on real car trialling
instructions. <B>BOLD-TEXT</B> indicates text as it appears in the
instruction (case sensitive),  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >  separates options of which
exactly one must be chosen, and .. expands, so <B>A</B>..<B>D</B>
is equivalent to <B>A</B> <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   > <B>B</B> <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   > <B>C</B> <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   > <B>D</B> .
<P>
instruction = navigational   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   time-keeping   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   navigational <B>AND</B> time-keeping
<P>
navigational = directional   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   navigational <B>AND THEN </B>directional
<P>
directional = how direction   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   how direction where
<P>
how = <B>GO</B>   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>GO</B> when   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>KEEP</B>
<P>
direction = <B>RIGHT</B>   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>LEFT</B>
<P>
when = <B>FIRST </B>  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>SECOND</B>   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>THIRD</B>
<P>
where = <B>AT</B> sign
<P>
sign = <B><TT>&quot;</B></TT>signwords<B><TT>&quot;</B></TT>
<P>
signwords = s-word   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   signwords s-word
<P>
s-word = letter   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   s-word letter
<P>
letter = <B>A</B>..<B>Z</B>   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>.</B>
<P>
time-keeping = record   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   change
<P>
record = <B>RECORD TIME</B>
<P>
change = cas <B>TO</B> nnn <B>KMH</B>
<P>
cas = <B>CHANGE AVERAGE SPEED</B>   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   <B>CAS</B>
<P>
nnn = digit   <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/1/171img1.gif"   >   nnn digit
<P>
digit = <B>0</B>..<B>9</B>
Note that <EM>s-word</EM> and <EM>nnn</EM> are sequences of letters and digits
respectively, with no intervening spaces. There will be one or more
spaces between items except before a period (.), after the opening
speech marks or before the closing speech marks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each input line will consist of not more than 75 characters. The input
will be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output will consist of a series of sequentially numbered lines,
either containing the valid instruction, or the text <TT>Trap!</TT> if the
line did not obey the rules. The line number will be right justified
in a field of 3 characters, followed by a full-stop, a single space,
and the instruction, with sequences of more than one space reduced to
single spaces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>KEEP LEFT AND THEN GO RIGHT
CAS TO 20 KMH
GO FIRST       RIGHT AT &quot;SMITH ST.&quot;  AND   CAS TO 20 KMH
GO 2nd RIGHT
GO LEFT AT &quot;SMITH STREET AND RECORD TIME
KEEP RIGHT AND THEN RECORD TIME
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  1. KEEP LEFT AND THEN GO RIGHT
  2. CAS TO 20 KMH
  3. GO FIRST RIGHT AT &quot;SMITH ST.&quot; AND CAS TO 20 KMH
  4. Trap!
  5. Trap!
  6. Trap!</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
172||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Calculator Language</TITLE>
<META NAME="description" CONTENT="Calculator Language">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Calculator Language</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Calculator Language (CL) supports assignment, positive and negative
integers and simple arithmetic. The allowable characters in a CL
statement are thus:
<P>
<P>
<P> <IMG WIDTH=240 HEIGHT=189 ALIGN=BOTTOM ALT="tabular20" SRC="http://uva.onlinejudge.org/external/1/172img1.gif"   > <P>
<P>
<P>
All operators have the same precedence and are right associative, thus
15 - 8 - 3 = 15 - (8 - 3) = 10. As one would expect, brackets will
force the expression within them to be evaluated first. Brackets may
be nested arbitrarily deeply. An expression never has two operators
next to each other (even if separated by a bracket), an assignment
operator is always immediately preceded by a variable and the leftmost
operator on a line is always an assignment. For readability, spaces
may be freely inserted into an expression, except between a negative
sign and a number. A negative sign will not appear before a variable.
All variables are initialised to zero (0) and retain their values
until changed explicitly.
<P>
<P>
Write a program that will accept and evaluate expressions written in
this language. Each expression occupies one line and contains at least
one assignment operator, and maybe more.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing a
correct CL expression. No line will be longer than 100 characters. The
file will be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of a list of the final values of all
variables whose value changes as a result of the evaluation of that
expression. If more than one variable changes value, they should be
listed in alphabetical order, separated by commas. If a variable
changes value more than once in an expression, only the final value is
output. A variable is said to change value if its value after the
expression has been evaluated is different from its value before the
expression was evaluated. If no variables change value, then print the
message `<TT>No Change</TT>'. Follow the format shown below exactly.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A = B = 4
C = (D = 2)*_2
C = D = 2 * _2
F = C - D
E = D * _10
Z = 10 / 3
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>A = 4, B = 4
C = -4, D = 2
D = -4
No Change
E = 40
Z = 3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
173||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Network Wars</TITLE>
<META NAME="description" CONTENT="Network Wars">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Network Wars</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
It is the year 2126 and comet Swift-Tuttle has struck the earth as
predicted. The resultant explosion emits a large cloud of high energy
neutrons that eliminates all human life. The accompanying
electro-magnetic storm causes two unusual events: many of the links
between various parts of the electronic network are severed, and some
postgraduate AI projects begin to merge and mutate, in much the same
way as animal life did several million years ago. In a very short time
two programs emerge, Paskill and Lisper, which move through the
network marking each node they visit: Paskill activates a modified
Prolog interpreter and Lisper activates the `Hello World' program.
However `Hello World' has mutated into an endless loop that so ties up
the node that no other program, not even Lisper, can re-enter that
node and the Prolog interpreter immediately reverse compiles (and
destroys) any program that enters. However, Paskill knows which nodes
it has visited and never tries to re-enter them. Thus if Lisper
attempts to enter a node already visited by Paskill it will be
annihilated; neither can enter a node already visited by Lisper, if
either (or both) cannot move both will halt and if they ever arrive at
a node simultaneously they annihilate each other. Both programs move
through the network at the same speed.
<P>
<P>
Write a program to simulate these events. All nodes in the the network
are labelled with a single uppercase letter as shown below. When
moving to the next node, Paskill searches alphabetically forwards from
the current node, whereas Lisper searches alphabetically backwards
from the current node, both wrapping round if necessary. Thus, (in the
absence of the other) if Paskill enters the network below at A, it
would visit the nodes in the order A, B, C, D, G, H, E, F; if Lisper
enters the network at H it would visit them in the order H, G, E, F.
Simulation stops when one or more of the above events occurs. If more
than one event occurs, mention Paskill first.
<P>
<P> <IMG ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/173img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines. Each line will describe a
network and indicate the starting nodes for the two programs. A
network is described as a series of nodes separated by `<TT>;</TT>' and
terminated by a period (`<TT>.</TT>').  Each node is described by its
identifier, a `<TT>:</TT>' and one or more of the nodes connected to it. Each
link will be mentioned at least once, as will each node, although not
all nodes will be `described'. After the period will appear the labels
of the starting nodes--first Paskill and then Lisper. No line will
contain more than 255 characters. The file will be terminated by a
line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each network. Each line will
specify the terminating event and the node where it occurs. The
terminating event is one or two of the following:
<P>
<UL><LI> Lisper destroyed in node ?<LI> {Paskill/Lisper} trapped in node ?<LI> Both annihilated in node ?
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A:BD;C:BD;F:E;G:DEH;H:EG. A H
E:AB. A B
B:ACD. B D
A:B;B:C;D:E. A D
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Paskill trapped in node D Lisper trapped in node F
Both annihilated in node E
Lisper destroyed in node B
Lisper trapped in node E</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
174||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Strategy</TITLE>
<META NAME="description" CONTENT="Strategy">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Strategy</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A well known psychology experiment involves people playing a game in
which they can either trade with each other or attempt to cheat the
other player. If both players TRADE then each gains one point. If one
TRADEs and the other CHEATs then the TRADEr loses 2 points and the
CHEATer wins 2. If both CHEAT then each loses 1 point.
<P>
<P>
There are a variety of different strategies for playing this game,
although most people are either unable to find a winning strategy, or,
having decided on a strategy, do not stick to it. Thus it is fairer to
attempt to evaluate these strategies by simulation on a computer. Each
strategy is simulated by an automaton. An automaton is characterised
by a program incorporating the strategy, a memory for previous
encounters and a count reflecting the score of that automaton. The
count starts at zero and is altered according to the above rules after
each encounter. The memory is able to determine what happened on up to
the last two encounters with each other contender.
<P>
<P>
Write a program that will read in details of up to 10 different
strategies, play each strategy against each other strategy 10 times
and then print out the final scores. Strategies will be in the form of
simple programs obeying the following grammar:
<P>
<BLOCKQUOTE> 
&lt;program&gt; ::= &lt;statement&gt;. <BR> 
&lt;statement&gt; ::= &lt;command&gt;  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  &lt;ifstat&gt; <BR> 
&lt;ifstat&gt; ::= IF &lt;condition&gt; THEN &lt;statement&gt; ELSE &lt;statement&gt; <BR> 
&lt;condition&gt; ::= &lt;cond&gt;  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  &lt;cond&gt; &lt;op&gt; &lt;condition&gt; <BR> 
&lt;op&gt; ::= AND  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  OR <BR> 
&lt;cond&gt; ::= &lt;memory&gt; {=  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  #} {&lt;command&gt;  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  NULL} <BR> 
&lt;memory&gt; ::= {MY  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  YOUR} LAST {1  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  2} <BR> 
&lt;command&gt; ::= TRADE  <IMG WIDTH=2 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/1/174img1.gif"   >  CHEAT
</BLOCKQUOTE>
<P>
Note that LAST1 refers to the previous encounter between these two
automata, LAST2 to the encounter before that and that `MY' and `YOUR'
have the obvious meanings. Spaces and line breaks may appear anywhere
in the program and are for legibility only. The symbol `<TT>#</TT>' means `is
not equal to'. NULL indicates that an encounter has not ocurred.  The
following are valid programs:
<P>
<PRE>CHEAT.
IF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.
IFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE
ELSECHEAT.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of programs. Each program will be no
longer than 255 characters and may be split over several lines for
convenience. There will be no more than 10 programs. The file will be
terminated by a line containing only a single `<TT>#</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each line of input. Each line will
consist of the final score of the relevant program right justified in
a field of width 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>CHEAT.
IF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.
IFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE
ELSECHEAT.
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  1
-12
-13</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
175||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Keywords</TITLE>
<META NAME="description" CONTENT="Keywords">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Keywords</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many researchers are faced with an ever increasing number of journal
articles to read and find it difficult to locate papers of relevance
to their particular lines of research. However, it is possible to
subscribe to various services which claim that they will find articles
that fit an `interest profile' that you supply, and pass them on to
you. One simple way of performing such a search is to determine
whether a pair of keywords occurs `sufficiently' close to each other
in the title of an article. The threshold is determined by the
researchers themselves, and refers to the number of words that may
occur between the pair of keywords. Thus an archeologist interested in
cave paintings could specify her profile as ``<TT>0 rock art</TT>'', meaning
that she wants all titles in which the words ``<TT>rock</TT>'' and ``<TT>art</TT>''
appear with 0 words in between, that is next to each other. This would
select not only ``<TT>Rock Art of the Maori</TT>'' but also ``<TT>Pop Art, Rock,
and the Art of Hang-glider Maintenance</TT>''.
<P>
<P>
Write a program that will read in a series of profiles followed by a
series of titles and determine which of the titles (if any) are
selected by each of the profiles. A title is selected by a profile if
at least one pair of keywords from the profile is found in the title,
separated by no more than the given threshold. For the purposes of
this program, a word is a sequence of letters, preceded by one or more
blanks and terminated by a blank or the end of line marker.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of no more than 50 profiles followed by no more
than 250 titles. Each profile and title will be numbered in the order
of their appearance, starting from 1, although the numbers will not
appear in the file.
<P>
<UL><LI> Each profile will start with the characters
``<TT>P:</TT>'', and will consist of a number representing a threshold,
followed by two or more keywords in lower case.<LI> Each title will start
with the characters ``<TT>T:</TT>'', and will consist of a string of characters
terminated by ``<TT>|</TT>''. The character ``<TT>|</TT>'' will not occur
anywhere in a title except at the end. No title will be longer than
255 characters, and if necessary it will flow on to more than one
line. No line will be longer than eighty characters and each
continuation line of a title will start with at least one blank. Line
breaks will only occur between words.
<P>
<P>
All non-alphabetic characters
are to be ignored, thus the title ``<TT>Don't Rock -- the Boat as
Metaphor in 1984</TT>'' would be treated as ``<TT>Dont Rock the Boat as
Metaphor in</TT>'' and ``<TT>HP2100X</TT>'' will be treated as ``<TT>HPX</TT>''. The file
will be terminated by a line consisting of a single
<TT>#</TT>.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each profile in the
input. Each line will consist of the profile number (the number of its
appearance in the input) followed by ``<TT>:</TT>'', a blank space, and the numbers of the
selected titles in numerical order, separated by commas and with no
spaces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>P: 0 rock art
P: 3 concepts conceptions
P: 1   art rock   metaphor concepts
T: Rock Art of the Maori|
T: Jazz and Rock - Art Brubeck and Elvis Presley|
T: Don't Rock --- the Boat as Metaphor in 1984, Concepts
   and (Mis)-Conceptions of an Art Historian.|
T: Carved in Rock, The Art and Craft of making promises
   believable when your `phone bills have gone
   through the roof|
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>1: 1,2
2: 
3: 1,2,3,4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
176||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>City Navigation</TITLE>
<META NAME="description" CONTENT="City Navigation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">City Navigation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Most US cities are constructed according to a very simple plan--they
have Avenues running north and south, and Streets running east and
west, enclosing square blocks. Avenues and Streets are numbered, with
numbers increasing westward and southward. There are 50 driveways on
each side of a block, numbered 00 to 98 on one side and 01 to 99 on
the other. House numbers increase in the same directions as Street and
Avenue numbers. If you are travelling in the direction of increasing
numbers then odd numbers are on your right. Thus the house at 1288
16th Street (S16 1288) is located on 16th Street, west of 12th Avenue
and east of 13th Avenue, and is on the right-hand side going east. The
residence described as A11 1543 lies on 11th Avenue, south of 15th
Street and north of 16th Street, and is on the right-hand side going
south. Both of these are marked on the following typical street map:
<P>

<img src=176img1.gif>

<P>
Quiet suburbs are formed by the simple expedient of making some
Avenues and Streets discontinuous as shown above. Note that Avenues
and Streets keep the same name, even when there are places where they
simply don't exist. It is difficult to get lost in such a city, as the
address tells you exactly where to go. However, if you don't know the
pattern of missing portions, you can spend a lot of time going into
dead-end roads.
<P>
<P>
Write a program that will firstly read in a description of the
`missing' areas in a city and then a series of pairs of addresses,
where an address is assumed to specify a driveway not necessarily a
residence. For each pair of addresses the program must calculate the
distance between them, by the shortest legal route. The distance is
the number of driveways you pass (on your side of the road) excluding
the source and destination. You may make the following assumptions:
<P>
<UL><LI> You drive on the right hand side of the road.<LI> You may not cross a lane of traffic except at an intersection,
that is you must turn right when entering or leaving a driveway.<LI> Driveways are located in the centres of their sections.<LI> U-turns are illegal except at the end of cul de sacs.<LI> Streets and Avenues are numbered from 00 to 49 and there are no roads
beyond these bounds; however there are driveways on both sides of the
bounding roads.<LI> Sections on corners have two driveways.<LI> A route exists between any pair of driveways.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will be divided into two portions: a ``missing road'' portion
and an address portion, each terminated by a line consisting of a
single `<TT>#</TT>'. The ``missing road'' portion consists of a series of lines
with each line containing a road identifier and a pair of house
numbers. A road identifier is an `<TT>A</TT>' or an `<TT>S</TT>' (specifying an Avenue
or a Street) followed by a number in the range 00 to 49. A house
number is an even number in the range 0000 to 4898. The area between
and including the specified numbers on the identified road is
inaccessible. Note that the line goes directly across the street, thus
if number 1612 is inaccessible, then so is 1613. Inaccessible portions
run from the borders of sections not from driveways. There will be
exactly one space separating parts of the input.
<P>
<P>
The address portion consists of a series of lines each line containing
two addresses. An address is a road identifier (as above) followed by
a number in the range 0000 to 4899. There will be exactly one space
separating parts of the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output consists of a series of lines, one for each line in the address
portion of the input file. Each line contains the distance between the
two houses specified in the input (the number of driveways passed)
written as an integer, left justified.
<P>
<P>
<P>
<B>Note:</B> The following sample data matches the diagram on previous page. (Note
the intersection of A13 and S17).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>A11 1612 1720
A12 1508 1636
S16 1152 1250
S17 1048 1134
S17 1272 1326
#
S16 1288 A11 1543
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>213</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
177||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Paper Folding</TITLE>
<META NAME="description" CONTENT="Paper Folding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Paper Folding</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
If a large sheet of paper is folded in half, then in half again, etc,
with all the folds parallel, then opened up flat, there are a series
of parallel creases, some pointing up and some down, dividing the
paper into fractions of the original length. If the paper is only
opened ``half-way'' up, so every crease forms a 90 degree angle, then
(viewed end-on) it forms a ``dragon curve''. For example, if four
successive folds are made, then the following curve is seen (note that
it does not cross itself, but two corners touch):
<P>
<P> <IMG WIDTH=160 HEIGHT=97 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/1/177img1.gif"   > <P>
<P>
Write a program to draw the curve which appears after <I>N</I> folds. The
exact specification of the curve is as follows:
<P>
<UL><LI> The paper starts flat,
with the ``start edge'' on the left, looking at it from above.<LI> The right
half is folded over so it lies on top of the left half, then the right
half of the new double sheet is folded on top of the left, to form a
4-thick sheet, and so on, for <I>N</I> folds.<LI> Then every fold is opened from
a 180 degree bend to a 90 degree bend.<LI> Finally the bottom edge of the
paper is viewed end-on to see the dragon curve.
</UL>
<P>
From this view, the
only unchanged part of the original paper is the piece containing the
``start edge'', and this piece will be horizontal, with the ``start edge''
on the left. This uniquely defines the curve. In the above picture,
the ``start edge'' is the left end of the rightmost bottom horizontal
piece (marked `<TT>s</TT>'). Horizontal pieces are to be displayed with the
underscore character ``<TT>_</TT>'', and vertical pieces with the ``<TT>|</TT>'' character.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series
of lines, each with a single number <I>N</I> ( <IMG WIDTH=87 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/177img1.gif"   > ). The end of
the input will be marked by a line containing a zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of dragon curves, one for each value
of <I>N</I> in the input. Your picture must be shifted as far left, and as
high as possible. Note that for large <I>N</I>, the picture will be greater
than 80 characters wide, so it will look messy on the screen. The
pattern for each different number of folds is terminated by a line
containing a single `<TT>^</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>2
4
1
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>|_
 _|
^
   _   _
  |_|_| |_
   _|    _|
|_|
^
_|
^</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
178||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Shuffling Patience</TITLE>
<META NAME="description" CONTENT="Shuffling Patience">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Shuffling Patience</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many children enjoy playing cards, especially some of the simpler
forms of patience or solitaire, yet many of them find it difficult to
shuffle the cards adequately. The following `patience' game assists
this as well as aiding card recognition and boosting simple arithmetic
skills. The essence is to `cover' exposed pairs or triples of cards
that have a specific relationship to each other.
<P>
<P>
A deck of cards consists of 52 cards, in four suits of 13 ranks. The
suits are spades, hearts, clubs, diamonds and the ranks run from ace
(face value one), 2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen and king.
During play up to 16 piles in a 4 by 4 grid may be created if
necessary, although usually fewer are needed. Deal cards, face up, in
this 4  <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/178img1.gif"   >  4 grid. Before playing each card check whether a pair or triple
of cards already played can be covered. A pair of cards can be covered
if they are of rank ace to ten and their face values add to 11. A
triple of cards can be covered if they form the set {jack, queen,
king}. If no pairs or triples exist, a new pile is started.
<P>
<P>
Where more than one pair and/or triple exists, only one is covered
before reassessing. Cards are always covered in the same order they
were dealt, that is left to right, top to bottom. The first card covered
shall be the eligible card nearest the start of play. The second card
covered (and also the third for a triple) is its partner nearest the
start of play. Thus if the first part of a deck consists of: <TT>TS QC 8S
8D QH 2D 3H KH 9H...</TT>, then the first seven cards will be played as
follows:
<P>
<P>
<P> <IMG WIDTH=172 HEIGHT=38 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/1/178img1.gif"   > <P>
<P>
<P>
The next two cards (<TT>KH 9H</TT>) will then cover the pair 8S and 3H
respectively. Note that covering pairs or triples is considered an
indivisible operation, and thus further covering operations are not
considered until it is complete.
<P>
<P>
Write a program to simulate the playing of this game. Your program
must read in one or more decks of cards, simulate the play and
determine how many cards are on each pile at the end. If it is not
possible to remain within the stipulated 16 piles, terminate that deal
with a message as described below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a
series of decks of cards, each deck specified as 4 lines each
containing 13 cards. Each card will be specified by two characters, a
rank (<TT>A, 2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K</TT>) followed by a suit (<TT>S, H,
C, D</TT>). Cards will be in the order in which they will be played. The
file will be terminated by a line consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one line for each deck in
the input. Each line shall start with the deck number, followed by a
colon. If it is not possible to play a deck within the specified 4  <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/178img1.gif"   >  4
grid, then write a space followed by the message `<TT>Overflowed on card
no</TT>' followed by the number of the card about to be dealt. If it is
possible to play the entire deck, then write out the non-zero numbers
that represent the numbers of cards in each pile when the deck is
fully dealt.
<P>
<P>
<B>All</B> numbers are to be right justified in a field 3
characters wide.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>TS QC 8S 8D QH 2D 3H KH 9H 2H TH KS KC
9D JH 7H JD 2S QS TD 2C 4H 5H AD 4D 5D
6D 4S 9S 5S 7S JS 8H 3D 8C 3S 4C 6S 9C
AS 7C AH 6H KD JC 7D AC 5C TC QD 6C 3C
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  1:  8  6  7  4  3  5  4  4  2  5  4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
179||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Code Breaking</TITLE>
<META NAME="description" CONTENT="Code Breaking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Code Breaking</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Periodic permutation is a simple encryption technique which involves
choosing a period, <I>k</I>, and a permutation of the first <I>k</I> numbers. To
encrypt a message, split the message into groups of <I>k</I> characters
(padding if necessary) and apply the given permutation. Decryption
involves taking groups of <I>k</I> characters and performing the inverse
permutation. Thus for <I>k</I> = 4, a permutation could be 2431. This would
encrypt `<TT>Mary</TT>' to `<TT>yMra</TT>' and `<TT>Maryan</TT>' to `<TT>yMra?a?n</TT>'.
Once one knows
the permutation, one can apply its inverse to other encrypted messages
(cyphertext) to recover the original text (plaintext).
<P>
<P>
Write a program that will read (plaintext, cyphertext1, cyphertext2)
triples, and for each (plaintext, cyphertext1) pair determine whether
or not a periodic permutation encryption method has been used. If it
has, determine the value of <I>k</I> and the permutation function and apply
the reverse permutation to cyphertext2 to recover the corresponding
plaintext.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of (plaintext, cyphertext1,
cyphertext2) triples. Lines will be no more than 80 characters long.
The first two strings (of length <I>n</I>) represent the first <I>n</I> characters
of the plaintext and cyphertext. There is no implication that <I>n</I> is a
multiple of <I>k</I>. The file will be terminated by a line consisting of a
single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each triple in the
input. If a permutation cycle has been found, apply the inverse
permutation to cyphertext2, padding it if necessary with `<TT>?</TT>'. If no
periodic permutation can be found (with period less than or equal to
the length of the plain and cyphertext1 strings) that transforms the
plaintext into the cyphertext, then print cyphertext2 unchanged. If
more than one periodic permutation could have mapped the plain text to
the cyphertext1, then apply the periodic permutation that has the
smallest value for <I>k</I>. There will never be more than one shortest
permutation function that matches the data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>Mary had a little lamb!!
aMyrh daa l tilt ealbm!!
hTsii  s aetts
Foobar
blargg
No cycle
abc
bca
abcd
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>This is a test
No cycle
cab?d?</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
180||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Eeny Meeny</TITLE>
<META NAME="description" CONTENT="Eeny Meeny">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Eeny Meeny</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In darkest &lt;name of continent/island deleted to prevent offence&gt;
lived a tribe called the ``Eeny Meenys''. They got this name from
their way of choosing a chief for a year. It appears that a newspaper
reporter visited the tribe and managed to get across a few ideas of
civilisation, but apparently came to an unfortunate end before
finishing the job. Thus the tribe no longer had a permanent chief; the
chief's term was exactly one year. At the end of that time, they ate
the current chief, and chose another chief. Their method of choosing a
chief was the ``Eeny meeny miny mo'' method. All eligible tribal
members (women were also eligible--one of the blessings of
civilisation the tribe had adopted) stood in a circle, a starting
place was chosen, and the chief medicine man (who was ineligible for
chieftainship) went around counting out `E', `e', `n', `y', `M', `e',
`e', `n', `y', `M',`i', `n', `y', `M', `o!', `E', `e', `n', `y', `M',
`e', `e', `n', `y', `M', `i', `n', `y', `M', `o!', .... At every
`o!', the person indicated was pushed out of the circle which then
closed up and the count restarted with his neighbour (the one who
would have been `E' anyway). This process continued until only one was
left--the new chief.
<P>
<P>
While the chance of glory for a year makes the job of chief highly
attractive to tribal members, you (possessing a computer decades
before they were invented) find the brevity of the glory unappealing.
You have managed to find out that the count this year will start with
Mxgobgwq (a very large person), so you would like to know where not to
stand. You don't know the direction, nor how many eligible people
there are, but you can estimate the number (it is certainly less or equal than
1000000).
<P>
<P>
Write a program that will determine the `first' (i.e. closest to
Mxgobgwq) safe position to stand, regardless of the actual number of
people and the direction of count (clockwise or anti-clockwise).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line containing the
upper and lower estimates of the number of eligible people (both
numbers inclusive). The file will be terminated by a line containing
two zeroes (0 0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each line of the
input. Each line will consist of a single number giving the number of
the position closest to Mxgobgwq that will not be chosen as chief for
any number in the given range and for either direction of elimination.
If no position is safe then print <TT>&quot;Better estimate needed&quot;</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>80 150
40 150
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>1
Better estimate needed</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
181||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Hearts</TITLE>
<META NAME="description" CONTENT="Hearts">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Hearts</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
There are 52 playing cards in a pack, divided into suits, and, within
suits, into denominations. The suits are (in order, lowest to highest)
Clubs, Diamonds, Hearts and Spades, abbreviated C, D, H and S. The 13
denominations (or face values) are (from lowest to highest): 2, 3, 4,
5, 6, 7, 8, 9, 10 (T), Jack (J), Queen (Q), King (K) and Ace(A). A
higher card will beat a lower card in the same suit, but will not
usually beat any other card in a different suit. An exception to this
is the `trump' suit--if a suit is designated to be a trump suit (by
whatever means the rules of the game allow), then <B>any</B> card of that
suit will beat <B>any</B> card of any other suit.
<P>
<P>
A simplified version of an old card game called Hearts is played as
follows. The dealer deals cards clockwise, one by one, face downward,
to four other players and himself, starting with the player on his
left, who thus gets the first card, followed by the sixth, and so on,
while the dealer gets the fifth card, followed by the tenth, and so
on. When each player has 10 cards there will be two left--these are
exposed and the suit of the one of higher denomination determines the
trump suit. If there is a tie, then the highest ranking suit becomes
the trump suit.
<P>
<P>
A `game' consists of 10 `tricks', each containing 5 cards, one from
each player. For each trick, one player `leads', i.e. plays a card
face up on the table, the rest of the players then `follow', in
clockwise order. The player to the dealer's left leads to the first
trick, thereafter the winner of each trick leads to the next trick. A
player must follow suit if possible, i.e. play a card of the same suit
as the one lead. If he cannot, then he must trump it (play a card of
the designated trump suit). If he cannot trump it (because he has no
cards in the trump suit), he discards a card. If a trick is trumped,
then the person playing the highest trump wins the trick, otherwise
the person playing the highest card of the correct suit wins it.
<P>
<P>
Strategies are as follows:
<P>
<OL><LI> Leader: The leader always plays the highest card in his hand. If
  there is a tie and one of the cards is a trump card, then he leads
  the trump, otherwise he plays the highest ranking suit.<LI> Follower: If possible he must play the highest card in his
  hand of the correct suit. If he has no cards in that suit then he
  plays the highest trump he has. If he cannot trump it he plays the
  highest card in his hand, breaking ties as previously specified.
</OL>
<P>
When all the tricks have been played, each player examines the tricks
he has taken and scores the face value of any Heart he has (Jack
counts 11, Queen counts 12, King counts 13 and Ace counts 14). This
score is recorded.
<P>
<P>
Write a program to simulate the playing of this game.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of decks of cards, each deck spread
over four lines as shown below. The file will be terminated by a line
consisting of a single <TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of lines, one for each deck in the
input. Each line will consist of 5 numbers reflecting the scores of
the individual players, starting with the dealer and proceeding
clockwise through the rest of the players. Each score will consist of
a number right justified in a field of width 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>TS QC 8S 8D QH 2D 3H KH 9H 2H TH KS KC
9D JH 7H JD 2S QS TD 2C 4H 5H AD 4D 5D
6D 4S 9S 5S 7S JS 8H 3D 8C 3S 4C 6S 9C
AS 7C AH 6H KD JC 7D AC 5C TC QD 6C 3C
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE> 22  0 68  0 14</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
182||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bonus Bonds</TITLE>
<META NAME="description" CONTENT="Bonus Bonds">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bonus Bonds</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The government of Impecunia does not levy any taxes, instead it raises
money by the (sometimes forced) sale of Bonus Bonds. Originally the
Bonds were numbered using a 7 digit number prefixed by a one digit
code in the range 1 to 9 representing the region of Impecunia in which
the bond was sold. However the scheme has proved so popular that the
numbering scheme has been extended by a further two digits. To retain
compatibility with the previous scheme, the 8th digit from the right
(the third from the left) still designates the region of sale. At the
same time, a `central' region was created and has been given the
designation 0. For security reasons no bond may be numbered with a
number consisting entirely of zeroes, thus, although the original
bonds all started from zero (since the region code was non-zero), the
bonds from the central region start from 0000000001.
<P>
<P>
Each month, the winning numbers are drawn for each region
independently. The equipment generates a stream of single digits and
it would appear to be simple enough to collect these together in
groups of ten and compare the results with the list of Bond-holders.
However, the equipment is a little antiquated and is liable to various
breakdowns, thus it is desirable to only generate numbers that lie
within the allocated range and with the same distributions of digits
at each position as would be found by examining all the bonds sold for
that region. Thus if we wish to draw <I>N</I> numbers for a given region, the
equipment is set to generate 10 streams of <I>N</I> digits, one for each
position. The first winning number is then made up by taking the first
digit from each stream, the second winning number is composed of the
second digit in each stream, and so on. For each stream, the equipment
is adjusted so that the distribution of digits it generates closely
matches the actual distributions of digits in that position on the
allocated Bonds. The state auditors generate a table of these
distributions so that the two may be compared.
<P>
<P>
Write a program that will generate the table for the state auditors
for any given draw. For each region, the program will read the serial
number of the <B>next bond to be sold in that region</B> so that it can
calculate the distributions. Since the output is voluminous, your
program will only need to print the digit distribution for a
particular digit position.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of lines, each line consisting of a ten
digit number representing the <B>next</B> bond number to be sold in a
particular region and an integer in the range 1 to 10 representing the
desired character position. It is possible that some regions will
appear more than once in the input stream, and that others will not
appear at all. The file will be terminated by a line consisting of
0000000000 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of tables, one for each line of the
input. Each table will consist of ten rows, one for each digit in the
range 0 to 9. Each row will consist of a single number giving the
numbers of times that digit appears in the sequence numbers at the
desired position. Each number will be right justified in a field of
width 11. Separate tables by one blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>4810000000 1
0000000000 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>  100000000
  100000000
  100000000
  100000000
   80000000
          0
          0
          0
          0
          0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
183||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bit Maps</TITLE>
<META NAME="description" CONTENT="Bit Maps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bit Maps</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The bitmap is a data structure that arises in many areas of computing.
In the area of graphics, for example, a bitmap can represent an image
by having a 1 represent a black pixel and a 0 represent a white pixel.
<P>
<P>
Consider the following two ways of representing a rectangular bit map.
In the first, it is simply represented as a two dimensional array of
<TT>1</TT>s and <TT>0</TT>s. The second is based on a decomposition technique. First,
the entire bit map is considered. If all bits within it are 1, a <TT>1</TT> is
output. If all bits within it are 0, a <TT>0</TT> is output. Otherwise, a <TT>D</TT> is
output, the bit map is divided into quarters (as described below), and
each of those is processed in the same way as the original bit map.
The quarters are processed in top left, top right, bottom left, bottom
right order. Where a bit map being divided has an even number of rows
and an even number of columns, all quarters have the same dimensions.
Where the number of columns is odd, the left quarters have one more
column than the right. Where the number of rows is odd the top
quarters have one more row than the bottom. Note that if a region
having only one row or one column is divided then two halves result,
with the top half processed before the bottom where a single column is
divided, and the left half before the right if a single row is
divided.
<P>
<P>
Write a program that will read in bitmaps of either form and transform
them to the other form.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of bit maps. Each bit map begins with a
line giving its format (``<TT>B</TT>'' or ``<TT>D</TT>'') and its dimensions (rows and
columns). Neither dimension will be greater than 200. There will be at
least one space between each of the items of information. Following
this line will be one or more lines containing the sequence of ``<TT>1</TT>'',
``<TT>0</TT>'' and ``<TT>D</TT>'' characters that represent the bit map, with no intervening
spaces. Each line (except the last, which may be shorter) will contain
50 characters. A ``<TT>B</TT>'' type bitmap will be written left to right, top to
bottom. The file will be terminated by a line consisting of a single
<TT>#</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of a series of bitmaps, one for each bit map of the input. Output of each bit map begins on a new line and will be in the same format as the input. The width and height are to be output right justified in fields of width four.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>B 3  4
001000011011
D  2   3
DD10111
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>D   3   4
D0D1001D101
B   2   3
101111</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
184||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Laser Lines</TITLE>
<META NAME="description" CONTENT="Laser Lines">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Laser Lines</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A computer chip manufacturer has discovered a new way to combine
opto-electronics and ordinary electronics by forming light-emitting
and receiving nodes on the surface of the chip. These can be used to
send messages to each other in a direct line-of-sight manner, thereby
speeding up operation considerably by allowing a much greater density
of information transfer. One difficulty is that the nodes must all be
able to send messages to each other; no node should block the
line-of-sight between two other nodes. The manufacturing method
ensures that the nodes will be positioned exactly on the points of a
lattice covering the chip, so their coordinates are given by integers
between 0 and 9999 (inclusive) except that for technical reasons no
node can appear at point (0, 0).
<P>
<P>
Write a program that will read in sets of coordinates of these nodes
and determine whether any of them lie on lines containing three or
more nodes. Because of the layout method used, it is envisaged that
there may well be several lines containing three nodes, but that
`longer' lines will be increasingly rare. However, no line will
contain more than 10 points.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of data sets, each set containing the
coordinates of between 3 and 300 points (both inclusive). Each set
will start on a new line.
<P>
The coordinates will be pairs of integers
in the range 0 to 9999 and each set will be terminated by a pair of
zeroes (0 0). Successive numbers will be separated by one or more
spaces; in addition a data set may be split into several lines, such
splits will only occur between coordinate pairs and never between the
elements of a coordinate pair. The entire file will also be terminated
by a pair of zeroes (0 0).
<P>
Note that there will be several test cases,
but only one will contain more than 100 points.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output, for each set, is either the message <TT>&quot;No lines were
  found&quot;</TT>, or the message <TT>&quot;The following lines were found:&quot;</TT>,
followed by the sets of points lying on straight lines, each set
ordered first by <I>x</I>, and if the <I>x</I>'s are equal, then by <I>y</I>.
<P>
All coordinates are in a field of width 4, and are separated by a comma;
the points are delimited by brackets, with no spaces between
successive points. The lines themselves are ordered in a similar
manner to the points on each line; i.e. by considering the first point
on each line, and if more than one line starts at that point, by
considering the second point on the line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>  5 5 8 7 14 11 4 8   20 15
12 6  18 21 0  0
5 5 8 8 14 13 0 0
5 5 25 17 20 23 10 11 20 14 15 11 0 0
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>The following lines were found: 
(   4,   8)(   8,   7)(  12,   6)
(   5,   5)(   8,   7)(  14,  11)(  20,  15)
(  12,   6)(  14,  11)(  18,  21)
No lines were found
The following lines were found: 
(   5,   5)(  10,  11)(  20,  23)
(   5,   5)(  15,  11)(  20,  14)(  25,  17)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
185||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Roman Numerals</TITLE>
<META NAME="description" CONTENT="Roman Numerals">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Roman Numerals</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The original system of writing numbers used by the early Romans was
simple but cumbersome. Various letters were used to represent
important numbers, and these were then strung together to represent
other numbers with the values decreasing monotonically from left to
right. The letters they used and the numbers that were represented are
given in the following table.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="LEFT">I</TD>
<TD ALIGN="RIGHT">1</TD>
<TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD ALIGN="LEFT">V</TD>
<TD ALIGN="RIGHT">5</TD>
</TR>
<TR><TD ALIGN="LEFT">X</TD>
<TD ALIGN="RIGHT">10</TD>
<TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD ALIGN="LEFT">L</TD>
<TD ALIGN="RIGHT">50</TD>
</TR>
<TR><TD ALIGN="LEFT">C</TD>
<TD ALIGN="RIGHT">100</TD>
<TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD ALIGN="LEFT">D</TD>
<TD ALIGN="RIGHT">500</TD>
</TR>
<TR><TD ALIGN="LEFT">M</TD>
<TD ALIGN="RIGHT">1000</TD>
<TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="RIGHT">&nbsp;</TD>
</TR>
</TABLE></DIV>

<P>
Thus 1993 was written as <TT>MDCCCCLXXXXIII</TT>. This system was then
superseded by a partially place-oriented system, whereby if the above
rule of decreasing values was broken, it meant that the immediately
preceding (lower) value was deemed to be `negative' and was subtracted
from the higher (out of place) value. In this system 1993 was usually
written as <TT>MCMXCIII</TT>. There is still some controversy as to which
letters could precede which other letters, but for the purposes of
this problem we will assume the following restrictions: 

<P>
<DL COMPACT>
<DT>1.
<DD>A letter from the left column can never appear more than three
times in a row, and there can never be more than one other
    occurrence of that letter.

<P>
<DT>2.
<DD>A letter from the right column can never appear more than
    once.

<P>
<DT>3.
<DD>Once a letter has been used in a `negative' position, all
    subsequent characters (apart from the one immediately following)
    may not be greater than that character.
</DL>

<P>
Thus we could write <TT>MXMIII</TT> for 1993 or <TT>CCXCIV</TT> for 294, however we
could not write <TT>ILV</TT> for 54, nor could we write <TT>LIL</TT> for 99. Note that
299 could be written as <TT>CCXCIX</TT> or <TT>CCIC</TT>

<P>

<P>
<BR>
Given a Roman sum, we can either interpret it as such or as an
encoding of an Arabic sum. Thus <TT>V+V=X</TT> could be interpreted as an
ambiguous encoding of an Arabic sum with <TT>V</TT> <IMG
 WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/185img1.gif" 
 ALT="$\in$">
{1, 2, 3, 4}
and <TT>X = 2 * V</TT>. Similarly, <TT>X+X=XX</TT> could be interpreted as a correct
Roman sum but an impossible Arabic encoding (apart from the trivial
encoding <TT>X</TT> = 0) and <TT>XX+XX=MXC</TT> as an incorrect Roman sum, but a valid
encoding with <TT>M</TT> = 1, <TT>X</TT> = 9, and <TT>C</TT> = 8.

<P>

<P>
<BR>
Write a program that will read in sums in Roman numerals and determine
whether or not they are correct as Roman sums and also whether they
are impossible, ambiguous or valid as Arabic encodings. Assume that
zero will never appear on its own or as a leading digit, and that no
two Roman numerals map onto the same Arabic digit.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a series of lines, each line consisting of an
apparent Roman sum, i.e. a valid Roman number, a plus sign (<TT>+</TT>),
another valid Roman number, an equal sign (<TT>=</TT>) and another valid Roman
number. No Roman number will contain more than 9 letters. The file
will be terminated by a line consisting of a single <TT>#</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will consist of a series of lines, one for each line of the
input, and each containing two words. The first word will be one of
(<TT>Correct, Incorrect</TT>) depending on whether the Roman sum is or is not
correct. The second word will be separated from the first by exactly
one space and will be one of the set (impossible, ambiguous, valid)
depending on the Arabic sum.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
V+V=X
X+X=XX
XX+XX=MXC
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Correct ambiguous
Correct impossible
Incorrect valid
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
186||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Trip Routing</TITLE>
<META NAME="description" CONTENT="Trip Routing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Trip Routing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your employer, the California Car Club (CCC), has decided to provide a 
trip routing service to its members. Your job is to write a program 
which reads a list of departure point-destination point pairs and 
calculates the shortest routes between them. For each trip, your 
program will print a report which itemises the names of each city 
passed through, with route names and leg distances.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will be in two parts.
<P>
<P>
The first part is a map in
the form of a list of highway segments. Each segment is designated 
by a line containing four fields which are separated by commas. The 
first two fields are 1-20 characters each, and are the names of the 
cities which are at each end of the highway segment. The third field 
is the 1-10 character name of the route. The fourth field is the number 
of miles between the two endpoints, expressed as a positive integer. 
The highway segment list will be terminated by an empty line.
<P>
<P>
The second part of the input is a list of departure point-destination
point pairs, one per line. The departure point is given first, followed 
by a comma and the destination point. Each of the cities is 
guaranteed to have appeared in the first part of the input data, and 
there will be a path that connects them. The list is terminated by the 
end of file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output should be a series of reports, one for each departure
point-destination point pair in the input. Each report should be in
exactly the same form as those in the example below.
There should be two blank lines
before each report (including the first one).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>San Luis Obispo,Bakersfield,CA-58,117
Bakersfield,Mojave,CA-58,65
Mojave,Barstow,CA-58,70
Barstow,Baker,I-15,62
Baker,Las Vegas,I-15,92
San Luis Obispo,Santa Barbara,US-101,106
San Luis Obispo,Santa Barbara,CA-1,113
Santa Barbara,Los Angeles,US-101,95
Bakersfield,Wheeler Ridge,CA-99,24
Wheeler Ridge,Los Angeles,I-5,88
Mojave,Los Angeles,CA-14,94
Los Angeles,San Bernardino,I-10,65
San Bernardino,Barstow,I-15,73
Los Angeles,San Diego,I-5,121
San Bernardino,San Diego,I-15,103

Santa Barbara,Las Vegas
San Diego,Los Angeles
San Luis Obispo,Los Angeles</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>From                 To                   Route      Miles
-------------------- -------------------- ---------- -----
Santa Barbara        Los Angeles          US-101        95
Los Angeles          San Bernardino       I-10          65
San Bernardino       Barstow              I-15          73
Barstow              Baker                I-15          62
Baker                Las Vegas            I-15          92
                                                     -----
                                          Total        387


From                 To                   Route      Miles
-------------------- -------------------- ---------- -----
San Diego            Los Angeles          I-5          121
                                                     -----
                                          Total        121


From                 To                   Route      Miles
-------------------- -------------------- ---------- -----
San Luis Obispo      Santa Barbara        US-101       106
Santa Barbara        Los Angeles          US-101        95 
                                                     -----
                                          Total        201</PRE>
<P>
<P>
<P>
<B>Note:</B> There will be no extraneous blanks in the input. There will be no
more than 100 cities in the map and no more than 200 highway
segments. The total distance in each best route is guaranteed to fit 
within a 16-bit integer.
<P>
</BODY>
</HTML>

______________________________________________________
187||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Transaction Processing</TITLE>
<META NAME="description" CONTENT="Transaction Processing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Transaction Processing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You have been called upon to write a program which performs one of 
the initial steps in posting transactions to a general ledger. The 
central principle of double-entry bookkeeping is that the sum of all 
debits must equal the sum of all credits. This is true for each 
transaction. For the purposes of your program, positive numbers 
represent debits and negative numbers represent credits. That is, 
2.00 is a two dollar debit, and -2.00 is a two dollar credit. The 
purpose of your program is to check that each transaction balances, 
and to report it if it doesn't.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input data to your program will come in two sections. The first 
section is a list of up to 100 accounts in the general ledger. It consists 
of lines in the format:
<P>
<PRE>nnnxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</PRE>
<P>
where <TT>nnn</TT> is a three-digit account number and 
<TT>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</TT> is a 1-30 character account name 
string. This section is terminated by a record starting with 000, 
which is not used as an account number.
<P>
<P>
The second section of the input data consists of 15-character records,
one per line in the format
<P>
<PRE>sssnnnxxxxxxxxx</PRE>
<P>
where <TT>sss</TT> is a three-digit sequence number, <TT>nnn</TT> is a three-digit 
account number, and <TT>xxxxxxxxx</TT> is a nine-digit amount in dollars and 
cents (without the decimal point). Each of these records is one entry 
of a transaction. A transaction consists of between two and ten 
entries with identical sequence numbers. Each transaction will be 
contiguous within the input data. This section of input data is 
terminated by a record which has a sequence number of 000.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Nothing is to be printed for transactions which balance. For 
transactions which do not balance, an exception report is to be 
printed in the form:
<P>
<PRE>*** Transaction sss is out of balance ***
nnn xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx vvvvvvv.vv
nnn xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx vvvvvvv.vv
.
.
.
999 Out of Balance                 vvvvvvv.vv</PRE>
<P>
where <TT>nnn</TT> is an account number, <TT>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</TT>
is the corresponding account name, and <TT>vvvvvvv.vv</TT> is the amount. 
Print a space between the above fields. The entries should be listed 
in the order that they were received in the input. The last entry in 
the report is one you will create to make the transaction balance, 
using the special account number 999 (the suspense account). Print a 
blank line after each exception report.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>111Cash 
121Accounts Receivable
211Accounts Payable
241Sales Tax Payable 
401Sales
555Office Supplies
000No such account
100111    11795
100121   -11795
101121      105
101241       -7 
101401     -100
102211   -70000
102555    40000
103111   -40000 
103555    40000
000000        0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>*** Transaction 101 is out of balance ***
121 Accounts Receivable                  1.05
241 Sales Tax Payable                   -0.07
401 Sales                               -1.00
999 Out of Balance                       0.02

*** Transaction 102 is out of balance ***
211 Accounts Payable                  -700.00
555 Office Supplies                    400.00
999 Out of Balance                     300.00</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
188||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Perfect Hash</TITLE>
<META NAME="description" CONTENT="Perfect Hash">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Perfect Hash</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Perfect Software, Inc. has obtained a government contract to examine 
text flowing through a high-speed network for the occurrence of 
certain words. Your boss, Wally Perfect, has designed a parallel 
processing system which checks each word against a group of small 
perfect hash tables.
<P>
<P>
A perfect hash function maps its input directly to a fully occupied
table. Your job is to construct the perfect hash functions from the
lists of words in each table. The hash function is of the form
 <IMG WIDTH=101 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > , where <I>C</I> is a positive integer you are
to discover, <I>w</I> is an integer representation of an input word, and <I>n</I> is
the length of the table. <I>C</I> must be as small as possible.  Note that 
 <IMG WIDTH=11 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline73" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   >  is the floor function and that  <IMG WIDTH=24 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   >  for 
some real number <I>R</I> is the largest integer that is  <IMG WIDTH=31 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline79" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > .
<P>
<P>
Here are Wally's notes on the subject:
<P>
Let  <IMG WIDTH=166 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline81" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   >  consist of positive
integers  <IMG WIDTH=150 HEIGHT=19 ALIGN=MIDDLE ALT="tex2html_wrap_inline83" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > .
The problem is to find the smallest positive
integer <I>C</I> such that
<P>
 <IMG WIDTH=198 HEIGHT=38 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   >  for all  <IMG WIDTH=102 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline89" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > .
<P>
<I>C</I> must be a multiple of at least one element of <I>W</I>.
<P>
If some
<P>
 <IMG WIDTH=198 HEIGHT=38 ALIGN=MIDDLE ALT="tex2html_wrap_inline95" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   >  for all  <IMG WIDTH=36 HEIGHT=29 ALIGN=MIDDLE ALT="tex2html_wrap_inline97" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > ,
<P>
then the next largest <I>C</I> that could resolve the conflict is 
at least
<P>
<P> <IMG WIDTH=407 HEIGHT=48 ALIGN=BOTTOM ALT="displaymath61" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > <P>
<P>
Since all such conflicts must be resolved, it is advantageous to choose 
the largest candidate from among the conflicts as the next <I>C</I> to test.
<P>
<P>
You are to convert each word to a number by processing each letter
from left to right. Consider `<TT>a</TT>' to be 1, `<TT>b</TT>' to be 2,  <IMG WIDTH=20 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline103" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > ,
`<TT>z</TT>' to be 26. Use 5
bits for each letter (shift left by 5 or multiply by 32). Thus `<TT>a</TT>' = 1,
`<TT>bz</TT>' =  <IMG WIDTH=128 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline105" SRC="http://uva.onlinejudge.org/external/1/188img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will be a series of word lists, one per line, 
terminated by the end-of-file. Each line consists of between two and 
thirteen words of at most five lower case letters each, separated 
from each other by at least one blank. There will always be at least 
one one-letter word.
<P>
<P>
For each list, you are to print the input line. On the next line, print
the <I>C</I> for the hash function determined by the list. Print a blank line 
after each <I>C</I>.
<P>
<P>
<I>C</I> will always fit in a 32-bit integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>this is a test of some words to try out
a bee see dee
the of and to a in that is i it with for as</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>this is a test of some words to try out
17247663

a bee see dee
4427

the of and to a in that is i it with for as
667241</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
189||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pascal Program Lengths</TITLE>
<META NAME="description" CONTENT="Pascal Program Lengths">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pascal Program Lengths</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your local computer user's group publishes a quarterly newsletter, 
and in each issue there is a small Turbo Pascal programming problem 
to be solved by the membership. Members submit their solutions to 
the problem to the newsletter editor, and the member submitting the 
shortest solution to the problem receives a prize.
<P>
<P>
The length of a program is measured in units. The unit count is
determined by counting all occurrences of reserved words, identifiers,
constants, left parentheses, left brackets, and the following
operators: <code>+, -, *, /, =, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;, @, ^</code>, and <code>:=</code>.
Comments are ignored, as are all other symbols not falling into one of
the categories mentioned above. The program with the lowest unit count
is declared the winner. Two or more programs with equal unit counts
split the prize for the quarter.
<P>
<P>
In an effort to speed the judging of the contest, your team has been
asked to write a program that will determine the length of a series of 
Pascal programs and print the number of units in each.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input to your program will be a series of Turbo Pascal programs. 
Each program will be terminated by a line containing tilde characters 
in the first two columns, followed by the name of the submitting 
member. Each of these programs will be syntactically correct and use 
the standard symbols for comments (braces) and subscripts (square 
brackets).
<P>
<P>
For each program, you are print a separate line containing the name
of the submitting member and the unit count of the program. Use a 
format identical to that of the sample below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>PROGRAM SAMPLEINPUT;

VAR
  TEMP : RECORD
    FIRST, SECOND : REAL;
    END;

BEGIN {Ignore this }
TEMP.FIRST := 5.0E-2;
READLN (TEMP.SECOND); 
WRITELN ('THE ANSWER IS', TEMP.FIRST * TEMP.SECOND : 7 : 3)
END.
~~A. N. Onymous</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Program by A. N. Onymous contains 29 units.</PRE>
<P>
<P>
<P>
<B>Note:</B> Here are some additional notes on Turbo Pascal
for those not familiar with the language:
<UL><LI> Identifiers start with an underscore (<TT>_</TT>) or a letter
(upper or lower case) which is followed by zero or more characters that
are underscores, letters or digits.<LI> The delimiter for the beginning and ending of a string constant 
is the single forward quote (<TT>'</TT>).  Each string is entirely on a
single source line (that is a string constant cannot begin on one line
and continue on the next).  If <TT>''</TT> appears within a string then
it represents a single <TT>'</TT> character that is part of the string.
A string constant consisting of a single <TT>'</TT> character is, therefore,
represented by <TT>''''</TT> in a Turbo Pascal program.
The empty string is allowed.<LI> The most general form of a numeric constant is illustrated by the 
constant <TT>10.56E-15</TT>.  The <TT>10</TT> is the integral part (1 or
more digits) and is always present.  The <TT>.56</TT> is the decimal part
and is optional.  The <TT>E-15</TT> is the exponent and it is also optional.
It begins with an upper or lower case <TT>E</TT>, which is followed by
a sign (<TT>+</TT> or <TT>-</TT>).  The sign is optional.<LI> Turbo Pascal supports hexadecimal integer constants which consist
of a $ followed by one or more hex digits (`0' to `9', `a' to `f',
`A' to `F').  For example, $a9F is a legal integer constant in Turbo
Pascal.<LI> The only comment delimiters that you should recognise are <TT>{}</TT>, and
not <TT>(**)</TT>.  Comments do not nest.<LI> `+' and `-' should be considered as operators wherever possible.
For example in <BR> <TT>x := -3</TT> the `-' and the `3' are separate tokens.<LI> Subranges of ordinal types can be expressed as <TT>
    lower..upper</TT>.  For example, <TT>1..10</TT> is a subrange involving
  the integers from 1 to 10.<LI> All tokens not mentioned anywhere above consist of
a single character.
</UL>
<P>
</BODY>
</HTML>

______________________________________________________
190||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Circle Through Three Points</TITLE>
<META NAME="description" CONTENT="Circle Through Three Points">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Circle Through Three Points</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your team is to write a program that, given the Cartesian coordinates 
of three points on a plane, will find the equation of the circle through 
them all. The three points will not be on a straight line.
<P>
The solution is to be printed as an equation of the form
<P>
<P> <IMG WIDTH=500 HEIGHT=20 ALIGN=BOTTOM ALT="equation20" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > <P>
<P>
and an equation of the form
<P>
<P> <IMG WIDTH=500 HEIGHT=20 ALIGN=BOTTOM ALT="equation25" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > <P>
<P>
Each line of input to your program will contain the <I>x</I> and <I>y</I> coordinates 
of three points, in the order  <IMG WIDTH=19 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > ,  <IMG WIDTH=18 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > ,  <IMG WIDTH=19 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > ,  <IMG WIDTH=18 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > ,
 <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > ,  <IMG WIDTH=19 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/1/190img1.gif"   > .  These coordinates 
will be real numbers separated from each other by one or more spaces.
<P>

<img src=190img9.gif>

<P>
Your program must print the required equations on two lines using the
format given in the sample below. Your computed values for <I>h</I>, <I>k</I>,
<I>r</I>, <I>c</I>, <I>d</I>, and <I>e</I> in Equations 1 and 2 above are to be printed
with three digits after the decimal point. Plus and minus signs in
the equations should be changed as needed to avoid multiple signs
before a number. Plus, minus, and equal signs must be separated from
the adjacent characters by a single space on each side. No other spaces
are to appear in the equations. Print a single blank line after each
equation pair.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>7.0 -5.0 -1.0 1.0 0.0 -6.0
1.0 7.0 8.0 6.0 7.0 -2.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>(x - 3.000)^2 + (y + 2.000)^2 = 5.000^2
x^2 + y^2 - 6.000x + 4.000y - 12.000 = 0

(x - 3.921)^2 + (y - 2.447)^2 = 5.409^2
x^2 + y^2 - 7.842x - 4.895y - 7.895 = 0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
191||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Intersection</TITLE>
<META NAME="description" CONTENT="Intersection">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Intersection</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to write a program that has to decide whether a given line segment
intersects a given rectangle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">An example:</A></FONT></H2>
<P>
<PRE><TT> 
line: 		 start point: 		 (4,9)
<P>
 		 end point: 		 (11,2)
<P>
rectangle: 		 left-top: 		 (1,5)
<P>
 		 right-bottom: 		 (7,1)
<P>
</TT></PRE>
<P>
<P><A NAME="32">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure27" SRC="http://uva.onlinejudge.org/external/1/191img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Line segment does not intersect rectangle<BR>
<P>
<P>
The line is said to intersect the rectangle if the line and the rectangle
have at least one point in common. The rectangle consists of four straight
lines and the area in between. Although all input values are integer numbers,
valid intersection points do not have to lay on the integer grid.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The input consists of <I>n</I> test cases. The first line of the input file
contains the number <I>n</I>. Each following line contains one test case
of the format:
<P>
<P> <IMG WIDTH=446 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath45" SRC="http://uva.onlinejudge.org/external/1/191img1.gif"   > <P>
<P>
where (<I>xstart</I>, <I>ystart</I>) is the start and (<I>xend</I>, <I>yend</I>)
the end point of the line and (<I>xleft</I>, <I>ytop</I>) the top left and
(<I>xright</I>, <I>ybottom</I>) the bottom right corner of the rectangle.
The eight numbers are separated by a blank. The terms  <IMG WIDTH=60 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline55" SRC="http://uva.onlinejudge.org/external/1/191img1.gif"   >  and
 <IMG WIDTH=97 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/1/191img1.gif"   >  do not imply any ordering of coordinates.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
For each test case in the input file, the output file should contain a line
consisting either of the letter &quot;<TT>T</TT>&quot; if the line segment intersects
the rectangle or the letter &quot;<TT>F</TT>&quot; if the line segment does not intersect
the rectangle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
4 9 11 2 1 5 7 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>F</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
192||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Synchronous Design</TITLE>
<META NAME="description" CONTENT="Synchronous Design">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Synchronous Design</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The designers of digital integrated circuits (IC) are very concerned about
the correctness of their designs because, unlike software, ICs cannot be
easily tested. Real tests are not possible until the design has been finalized
and the IC has been produced.
<P>
<P>
To simulate the behavior of a digital IC and to more or less guarantee that
the final chip will work, all of today's digital ICs are based
on a <i>synchronous design</i>.
<P>
<P><A NAME="27">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure22" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   > <BR>
<STRONG>Figure:</STRONG> The critical path (dashed line) takes 43ns to settle<BR>
<P>
<P>
In a synchronous design, an external clock signal triggers the IC to go
from a well defined and stable state to the next one. On the active edge
of the clock, all input and output signals and all internal nodes are stable
in either the high or low state. Between two consecutive edges of the clock,
the signals and nodes are allowed to change and may take any intermediate
state. The behavior of a synchronous network is predictable and will not
fail due to hazards or glitches introduced by irregularities of the real
circuit.
<P>
<P>
To analyze whether an IC has a synchronous design, we distinguish between
<I>synchronous</I> and  <IMG WIDTH=157 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   > . Flip flops are synchronous
nodes. On the active edge of the clock, the output of the flip flop changes
to the state of the input and holds that state throughout the next clock
cycle. Synchronous nodes are connected to the clock signal.
<P>
<P>
Simple gates like ANDs or ORs are asynchronous nodes. Their output changes
- with a short delay - whenever one of their inputs changes. During that
transition phase, the output can even go into some undefined or intermediate
state.
<P>
<P>
For simplicity, we assume that all inputs of the circuits are directly connected
to the output of a synchronous node outside the circuit and that all outputs
of the circuit are directly connected to the input of a synchronous node
outside the circuit.
<P>
For an IC to have a synchronous design, mainly two requirements must be
met:
<P>
<UL><LI> The  <IMG WIDTH=99 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   >  introduced between two synchronous nodes must
be smaller or equal than the clock period so there is enough time for nodes
to become stable. In figure 1, the round-ended boxes are asynchronous nodes
whereas the square boxes are synchronous nodes. The delay introduced on
the dashed path is 43ns and exceeds the given clock period of 30ns.<LI> There may be  <IMG WIDTH=76 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline69" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   >  composed exclusively of asynchronous nodes.
In the real circuit such cycles could oscillate. In figure 2, the dashed
path constitutes a cycle of asynchronous nodes. 
</UL>
<P>
Figure 3 shows a circuit with a synchronous design. It does not contain
cycles composed of asynchronous nodes and the longest path between two synchronous nodes is shorter than the clock period of 30ns.
<P>
<P><A NAME="36">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure31" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   > <BR>
<STRONG>Figure:</STRONG> The design contains a cycle (dashed line)<BR>
<P>
<P>
<P><A NAME="43">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure38" SRC="http://uva.onlinejudge.org/external/1/192img2.gif"   > <BR>
<STRONG>Figure:</STRONG> A synchronous design<BR>
<P>
<P>
Your are to write a program that decides for a given IC whether it has a
synchronous design or not. You are given a network of synchronous and asynchronous
nodes, a delay for each node, some inputs and outputs and the clock period.
<P>
You may safely assume that
<P>
<UL><LI> the delays introduced between any input and any output of the same node
are equal, i.e. equal to the delay given for that node,<LI> synchronous nodes have no delay at all,<LI> all connections between two nodes connect an output to an input. 
</UL>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several circuits. The first line gives the number
of circuits in the file.
<P>
<P>
For each circuit in the file, the first line contains the clock period for
the circuit, given as an integer number in nanoseconds. The next line gives
the number of nodes. The following lines each contain a node, described
by a letter and a integer number. The letter is '<TT>i</TT>' for an input, '<TT>o</TT>' for
an output, '<TT>a</TT>' for an asynchronous node and '<TT>s</TT>' for a synchronous node.
The number gives the delay introduced by the node as an integer number in
nanoseconds (only meaningful for an asynchronous node). Nodes are implicitly
numbered, starting at zero.
<P>
After the nodes, the number of connections for the circuit follows. Each
following line contains a pair of integer numbers denoting a connection
between the output and the input of two nodes. The connection links an output
of the node given by the first number and an input of the node given by
the second number.
<P>
<P>
The clock signal is not given in the input file. We assume that all synchronous
nodes are properly connected to the clock signal.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each circuit in the input file, your output file should contain a line
with one of the following messages:
<P>
<UL><LI> <TT>&quot;Synchronous design. Maximum delay: &lt;ss&gt;.&quot;</TT>
if the circuit has a synchronous design.
<P>
&lt;<I>ss</I>&gt; should be replaced
by the longest delay found on any path between two synchronous nodes.<LI> <TT>&quot;Circuit contains cycle.&quot;</TT> if the circuit contains
a cycle composed exclusively of asynchronous nodes.<LI> <TT>&quot;Clock period exceeded.&quot;</TT> if there is a path between
two synchronous nodes that is longer than the given clock period and there
are no cycles composed of asynchronous nodes. 
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
30
10
i 0
i 0
i 0
i 0
o 0
o 0
a 9
a 11
a 8
s 0
9
0 8
1 7
2 6
3 6
6 7
7 8
8 4
7 9
9 5</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Synchronous design. Maximum delay: 28.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
193||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Graph Coloring</TITLE>
<META NAME="description" CONTENT="Graph Coloring">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Graph Coloring</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to write a program that tries to find an optimal coloring for a
given graph. Colors are applied to the nodes of the graph and the only available
colors are black and white. The coloring of the graph is called optimal
if a maximum of nodes is black. The coloring is restricted by the rule that
no two connected nodes may be black.
<P>
<P><A NAME="27">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure22" SRC="http://uva.onlinejudge.org/external/1/193img1.gif"   > <BR>
<STRONG>Figure:</STRONG> An optimal graph with three black nodes<BR>
<P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The graph is given as a set of nodes denoted by numbers  <IMG WIDTH=44 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/1/193img1.gif"   > , 
 <IMG WIDTH=58 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/1/193img1.gif"   > ,
and a set of undirected edges denoted by pairs of node numbers  <IMG WIDTH=54 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/1/193img1.gif"   > ,
 <IMG WIDTH=60 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/1/193img1.gif"   > . The input file contains <I>m</I>
graphs. The number <I>m</I> is given on the first line. The first line of
each graph contains <I>n</I> and <I>k</I>, the number of nodes and the number
of edges, respectively. The following <I>k</I> lines contain the edges given
by a pair of node numbers, which are separated by a space.
<P>
<P>
The output should consists of 2<I>m</I> lines, two lines for each graph
found in the input file. The first line of should contain the maximum number
of nodes that can be colored black in the graph. The second line should
contain one possible optimal coloring. It is given by the list of black
nodes, separated by a blank.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
6 8
1 2
1 3
2 4
2 5
3 4
3 6
4 6
5 6</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3
1 4 5</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
194||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Triangle</TITLE>
<META NAME="description" CONTENT="Triangle">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Triangle</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A triangle is a basic shape of planar geometry. It consists of three straight
lines and three angles in between. Figure 1 shows how the sides and angles
are usually labeled.
<P>
<P><A NAME="27">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure22" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Triangle<BR>
<P>
<P>
A look into a book about geometry shows that many formulas for triangles
exist:
<P>
<P> <IMG WIDTH=303 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath48" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <P>
<P>
<P> <IMG WIDTH=329 HEIGHT=39 ALIGN=BOTTOM ALT="displaymath50" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <P>
<P>
<P> <IMG WIDTH=322 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath52" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <P>
<P>
<P> <IMG WIDTH=337 HEIGHT=17 ALIGN=BOTTOM ALT="displaymath54" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <P>
<P>
<P> <IMG WIDTH=364 HEIGHT=38 ALIGN=BOTTOM ALT="displaymath56" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > <P>
<P>
The values of <I>a</I>, <I>b</I>, <I>c</I>,  <IMG WIDTH=10 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > ,  <IMG WIDTH=10 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > ,
and  <IMG WIDTH=9 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   >  form a set of six parameters that fully define a triangle.
If a large enough subset of these parameters is given, the missing ones
can be calculated by using the formulas above.
<P>
<P>
You are to write a program that calculates the missing parameters for a
given subset of the six parameters of a triangle. For some sets of parameters,
it is not possible to calculate the triangle because either too few is known
about the triangle or the parameters would lead to an invalid triangle.
The sides of a valid triangle are greater than 0 and the angles are greater
than 0 and less than  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline70" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > . Your program should detect this case and output:
<TT>&quot;Invalid input.&quot;</TT> The same phrase should be output if
more than the minimal set needed to compute the triangle is given but the
parameters conflict with each other, e.g. all three angles are given but
their sum is greater than  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline70" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > .
<P>
<P>
Other sets of parameters can lead to more than one but still a finite number
of valid solutions for the triangle. In such a case, your program should
output: <TT>&quot;More than one solution.&quot;</TT>
<P>
In all other cases, your program should compute the missing parameters and
output all six parameters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains a number indicating the number
of parameter sets to follow. Each following line consists of six numbers,
separated by a single blank character. The numbers are the values for the
parameters <I>a</I>,  <IMG WIDTH=10 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > , <I>b</I>,  <IMG WIDTH=10 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > , <I>c</I>, and
 <IMG WIDTH=9 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   >  respectively. The parameters are labeled as shown in figure
1. A value of -1 indicates that the corresponding parameter is undefined
and has to be calculated. All floating-point numbers include at least eight
significant digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should output a line for each set of parameters found in the
input file. If a unique solution for a valid triangle can be found for the
given parameters, your program should output the six parameters <I>a</I>,
 <IMG WIDTH=10 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > , <I>b</I>,  <IMG WIDTH=10 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > , <I>c</I>,  <IMG WIDTH=9 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/1/194img1.gif"   > , separated by
a blank character. Otherwise the line should contain the phrase
<P>
<TT>&quot;More than one solution.&quot;</TT> or
<P>
<TT>&quot;Invalid input.&quot;</TT>
<P>
as explained above.
<P>
<P>The numbers in the output file should include at least six
significant digits. Your calculations should be precise enough
to get the six most significant digits correct (i.e. a relative
error of 0.000001 is allowed).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
4
47.9337906847 0.6543010109 78.4455517579 1.4813893731 66.5243757656 1.0059022695
62.72048064 2.26853639 -1.00000000 0.56794657 -1.00000000 -1.00000000
15.69326944 0.24714213 -1.00000000 1.80433105 66.04067877 -1.00000000
72.83685175 1.04409241 -1.00000000 -1.00000000 -1.00000000 -1.00000000</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
47.933791 0.654301 78.445552 1.481389 66.524376 1.005902
62.720481 2.268536 44.026687 0.567947 24.587225 0.305110
Invalid input.
Invalid input.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
195||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Anagram</TITLE>
<META NAME="description" CONTENT="Anagram">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Anagram</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to write a program that has to generate all possible words from
a given set of letters.
<P>
<P>
<P>
<B>Example:</B>
Given the word &quot;<TT>abc</TT>&quot;, your program should - by exploring all different
combination of the three letters - output the words &quot;<TT>abc</TT>&quot;, &quot;<TT>acb</TT>&quot;,
&quot;<TT>bac</TT>&quot;, &quot;<TT>bca</TT>&quot;, &quot;<TT>cab</TT>&quot; and &quot;<TT>cba</TT>&quot;.
<P>
<P>
In the word taken from the input file, some letters may appear more than
once. For a given word, your program should not produce the same word more
than once, and the words should be output in alphabetically ascending order.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several words. The first line contains a number
giving the number of words to follow. Each following line contains one word.
A word consists of uppercase or lowercase letters from A to Z. Uppercase
and lowercase letters are to be considered different.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each word in the input file, the output file should contain all different
words that can be generated with the letters of the given word. The words
generated from the same input word should be output in alphabetically ascending
order. An upper case letter goes before the corresponding lower case letter.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
aAb
abc
acba</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Aab
Aba
aAb
abA
bAa
baA
abc
acb
bac
bca
cab
cba
aabc
aacb
abac
abca
acab
acba
baac
baca
bcaa
caab
caba
cbaa</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
196||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Spreadsheet</TITLE>
<META NAME="description" CONTENT="Spreadsheet">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Spreadsheet</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In 1979, Dan Bricklin and Bob Frankston wrote VisiCalc, the first spreadsheet
application. It became a huge success and, at that time, was the killer
application for the Apple II computers. Today, spreadsheets are found on
most desktop computers.
<P>
<P>
The idea behind spreadsheets is very simple, though powerful. A spreadsheet
consists of a table where each cell contains either a number or a formula.
A formula can compute an expression that depends on the values of other
cells. Text and graphics can be added for presentation purposes.
<P>
<P>
You are to write a very simple spreadsheet application. Your program should
accept several spreadsheets. Each cell of the spreadsheet contains either
a numeric value (integers only) or a formula, which only support sums. After
having computed the values of all formulas, your program should output the
resulting spreadsheet where all formulas have been replaced by their value.
<P>
<P><A NAME="28">&#160;</A> <IMG WIDTH=298 HEIGHT=157 ALIGN=BOTTOM ALT="figure22" SRC="http://uva.onlinejudge.org/external/1/196img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Naming of the top left cells<BR>
<P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains the number of spreadsheets to
follow. A spreadsheet starts with a line consisting of two integer numbers,
separated by a space, giving the number of columns and rows. The following
lines of the spreadsheet each contain a row. A row consists of the cells
of that row, separated by a single space.
<P>
<P>
A cell consists either of a numeric integer value or of a formula. A formula
starts with an equal sign (<TT>=</TT>). After that, one or more cell names follow,
separated by plus signs (<TT>+</TT>). The value of such a formula is the sum of all
values found in the referenced cells. These cells may again contain a formula.
There are no spaces within a formula.
<P>
You may safely assume that there are no cyclic dependencies between cells.
So each spreadsheet can be fully computed.
<P>
<P>
The name of a cell consists of one to three letters for the column followed
by a number between 1 and 999 (including) for the row. The letters for the
column form the following series: A, B, C, ..., Z, AA, AB, AC, ..., AZ,
BA, ..., BZ, CA, ..., ZZ, AAA, AAB, ..., AAZ, ABA, ..., ABZ, ACA, ...,
ZZZ. These letters correspond to the number from 1 to 18278. The top left
cell has the name <TT>A1</TT>. See figure 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output of your program should have the same format as the input, except
that the number of spreadsheets and the number of columns and rows are not
repeated. Furthermore, all formulas should be replaced by their value.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
4 3
10 34 37 =A1+B1+C1
40 17 34 =A2+B2+C2
=A1+A2 =B1+B2 =C1+C2 =D1+D2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>10 34 37 81
40 17 34 91
50 51 71 172</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
197||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.48)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Cube</TITLE>
<META NAME="description" CONTENT="Cube">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Cube</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There was once a 3 by 3 by 3 cube built of 27 smaller cubes. It has fallen
apart into seven pieces: 

<P>

<P></P>
<DIV ALIGN="CENTER"><A NAME="55"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 1:</STRONG>
The seven pieces that once formed a cube</CAPTION>
<TR><TD><IMG
 WIDTH="559" HEIGHT="289" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/197img1.gif" 
 ALT="\begin{figure}\begin{center}
\mbox{}
\epsfbox{p197a.eps}\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV><P></P>

<P>
The seven pieces can be assembled in many ways to again form the cube. Figure
2 shows one of these possibilities. The first square stands for the front
plane, the next one for the middle plane and the last one for the back plane
of the cube. The letters in the cells stand for the name of piece filling
out the corresponding space in the cube. The name of the seven pieces can
be found in figure 1.

<P>

<P></P>
<DIV ALIGN="CENTER"><A NAME="82"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 2:</STRONG>
Two possibilities of assembling the cube</CAPTION>
<TR><TD><IMG
 WIDTH="295" HEIGHT="161" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/197img1.gif" 
 ALT="\begin{figure}\begin{center}
\begin{tabular}{\vert ccc\vert c\vert ccc\vert c\ve...
...c \\
\cline{1-3} \cline{5-7} \cline{9-11}
\end{tabular}\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV><P></P>

<P>
You are to write a program that outputs all possibilities of assembling
the cube but suppress solutions that are mere rotations of another solution.

<P>

<P>
<BR>

<B>Hint:</B>
Piece <SPAN CLASS="MATH"><I>a</I></SPAN> is the only part that, by rotation and translation, cannot
be transformed into itself. In order to avoid solutions that are mere rotations
of an already found solution, you may restrict transformations of piece
<SPAN CLASS="MATH"><I>a</I></SPAN> to translations. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file has several test cases. Each test case indicates
the initial position of piece `<TT>a</TT>'. You can translate it, but you
mustn't rotate it.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each solution found, your program should output a line containing the
solution as a string. The string is a linearized form of the cube. Each
letter stands for the piece filling out the corresponding space in the cube.
It is linearized as follows: 

<UL>
<LI>The string consists of substrings representing the front, middle and
back plane. 
</LI>
<LI>Each substring consists of substrings representing the top, middle and
bottom row. 
</LI>
<LI>Each row substring consists of letters representing the left, middle
and right cell. 
</LI>
</UL>
The solutions in figure 2 would be represented like this: 
<PRE>
adcaccaacddgbfgffedggbfebee
aababbadcffegfcddcfeeggedgc
</PRE>

<P>
It is very important that your program uses the naming convention given
in figure 1 and linearizes the cube as explained above.

<P>
Print a blank line after each test case. 

<P>

<P></P>
<DIV ALIGN="CENTER"><A NAME="97"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 3:</STRONG>
Positions of the cells in the string</CAPTION>
<TR><TD><IMG
 WIDTH="479" HEIGHT="340" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/1/197img1.gif" 
 ALT="\begin{figure}\begin{center}
\mbox{}
\epsfbox{p197b.eps}\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV><P></P>

<P>
Figure 3 again shows how the cells of the cube are linearized.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
aa.a..a....................
.........a..a..aa..........
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
aababbadcggeffcddcgeegfedfc
aababbadceffgdcgdceefedfggc
...
aababbadcffegfcddcfeeggedgc

adcaccaacfddfebgeeffdggbgeb
...
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2001-06-15
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
198||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Peter's Calculator</TITLE>
<META NAME="description" CONTENT="Peter's Calculator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Peter's Calculator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Unfortunately, Peter's Calculator broke down last week. Now Peter is left
with his computer, which has no calculator application, and paper and pencil,
which is too tiresome for an engineer. As one of Peter's friends, you are
asked to write him a calculator application. After talking to him, you figure
out the following: 
<UL><LI> Peter does only integer arithmetic. The operations he needs are addition,
subtraction and multiplication.<LI> He would like to use an arbitrary number of variables whose names are
not longer than 50 characters.<LI> His main way of doing calculations are to type in a few formulas and
to assign them to variables. Some formulas are complicated expressions,
which can refer to yet undefined variables, while other formulas consist
of a single number. Then Peter asks for the value of some variables, i.e.
he evaluates the formulas.<LI> Peters wants to redefine some variables and then to reevaluate formulas
that depend on these variables. 
</UL>
<P>
The input strictly adheres to the following syntax (given in EBNF):
<P>
<PRE>file = line { line } &lt;EOF&gt;.
line = [ assignment | print | reset ] &lt;CR&gt;.
assignment = var &quot;:=&quot; expression.
print = &quot;PRINT&quot; var.
reset = &quot;RESET&quot;.
expression = term { addop term }.
term = factor { mulop factor }.
factor = &quot;(&quot; expression &quot;)&quot; | var | number.
addop = &quot;+&quot; | &quot;-&quot;.
mulop = &quot;*&quot;.</PRE>
<P>
In the Extended Backus-Naur Formalism (EBNF), <TT>A = B C</TT> declares
that the grammatical construct <TT>A </TT> consists of a <TT>B </TT> followed
by a <TT>C </TT>. <TT>A = B | C </TT> means that <TT>A </TT> consists of a
<TT>B </TT> or, alternatively, of a <TT>C </TT>. <TT>A = [ B ] </TT> defines
construct <TT>A </TT> to be either a <TT>B </TT> or nothing and <TT>A = 
B  </TT> tells you that <TT>A </TT> consists of the concatenation of any
number of <TT>B</TT>'s (including none).
<P>
<P>
The production <TT>var </TT> stands for the name of a variable, which starts
with a letter followed by up to 49 letters or digits. Letters may be uppercase
or lowercase. The production <TT>number </TT> stands for a integer number.
The precise syntax for these productions are given below. The case of letters
is important for both variables and statements.
<P>
<PRE>var = letter { letter | digit }.
number = [ &quot;-&quot; ] digit { digit }.
letter = &quot;A&quot; | &quot;B&quot; | ... | &quot;Z&quot; | &quot;a&quot; | &quot;b&quot; | ... | &quot;z&quot;.
digit = &quot;0&quot; | &quot;1&quot; | ... | &quot;8&quot; | &quot;9&quot;.</PRE>
<P>
<P>
Between the parts of a grammatical construct but not within the names of
variables or integer numbers, any number of spaces may appear. <code>&lt;EOF&gt;</code>
stands for the end of the input file and <code>&lt;CR&gt;</code> stands for the new-line
character. All lines in the input file are shorter than 200 characters.
<P>
<P>
The value of a variable is said to be undefined: 
<UL><LI> if it has not yet been defined or it refers to a variable, which has
not yet been defined;<LI> if the definition of the variable contains a cycle. 
</UL>
<P>
Your are to write a program that implements Peter's calculator. It should
store all variable definitions and for each &quot;<TT>PRINT</TT>&quot; statement
evaluate the specified variable based on the latest variable definitions.
If your program encounters a &quot;<TT>RESET</TT>&quot; statement, it should delete
all stored variables so that all variables become undefined.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains calculations adhering to the syntax given above.
Each line contains either an assignment to a variable, a &quot;<TT>PRINT</TT>&quot;
statement, a &quot;<TT>RESET</TT>&quot; statement or nothing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each <TT>&quot;PRINT&quot;</TT> statement found in the input file, your program
should output a line containing the numerical value of the specified variable
or the word <TT>&quot;UNDEF&quot;</TT> if the variable is undefined.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>a := b + c
b := 3
c := 5
PRINT d
PRINT a
b := 8
PRINT a
RESET
PRINT a</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>UNDEF
8
13
UNDEF</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
199||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Partial differential equations</TITLE>
<META NAME="description" CONTENT="Partial differential equations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Partial differential equations</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In engineering sciences, partial differential equations play an important
and central role. For example, the temperature of a metal plate can be expressed
as a partial differential equation if the temperature on the boundaries
is known. This is called a boundary value problem.
<P>
Usually, it is not easy to solve these problems. Analytical solutions exist
only in very special cases. But there are some more or less &quot;good&quot;
numerical ways to solve boundary value problems.
<P>
<P>
We now will look at one method which works with finite difference approximations
for the derivatives of a function. For this approach, we do not look at
an analytical function <I>u</I>(<I>x</I>) but we are only interested in
the values of <I>u</I> at a finite set of discrete points  <IMG WIDTH=104 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline118" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . The distance between two adjacent
points,  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline120" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  and  <IMG WIDTH=30 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline122" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > , is constant:  <IMG WIDTH=100 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline124" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  (cf. figure 1).
<P>
<P><A NAME="31">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure26" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <BR>
<STRONG>Figure:</STRONG> <I>u</I>(<I>x</I>) at some discrete points  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline120" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <BR>
<P>
<P>
The finite difference approximation of a first derivative of the function
<I>u</I>(<I>x</I>) is
<P>
<P> <IMG WIDTH=500 HEIGHT=40 ALIGN=BOTTOM ALT="equation33" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
The second derivative is approximated by
<P>
<P> <IMG WIDTH=506 HEIGHT=42 ALIGN=BOTTOM ALT="equation39" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
This approximation works with 2-dimensional functions <I>u</I>(<I>x</I>,<I>y</I>) as well.
For simplicity we only work on square problems, i.e.
(<I>x</I>, <I>y</I>) is element of  <IMG WIDTH=89 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline136" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . Again, the area of the
function is discretized in a similar way:  <IMG WIDTH=225 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline138" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > ,
for some integer  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline140" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . We only look at the values of <I>u</I>(<I>x</I>,<I>y</I>) at the
discrete points  <IMG WIDTH=198 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline144" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > .
With this discretization, we have a function  <IMG WIDTH=23 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline146" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  as shown in figure 2:
<P>
<P><A NAME="111">&#160;</A> <IMG ALIGN=BOTTOM ALT="figure50" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Function  <IMG WIDTH=23 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline146" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  in the discretization area<BR>
<P>
<P>
<P>
On the boundary,  <IMG WIDTH=60 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline150" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  is given by 4 known functions:
<P>
<P> <IMG WIDTH=500 HEIGHT=84 ALIGN=BOTTOM ALT="equation57" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
The points  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline152" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  cover the inner points of the discretization
area, i.e. the area without the boundary. They are numbered from left to
right and from top to bottom like English text.
<P>
<P>
What we now want to do is to solve the poisson-equation in
the area  <IMG WIDTH=89 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline136" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > :
<P>
<P> <IMG WIDTH=500 HEIGHT=42 ALIGN=BOTTOM ALT="equation62" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
with the above boundary conditions. <I>f</I>(<I>x</I>,<I>y</I>) is a
given 2-dimensional function. With equation (2) and the above discretization,
the poisson-equation can be approximated at
<P>
<P> <IMG WIDTH=572 HEIGHT=36 ALIGN=BOTTOM ALT="equation66" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
where  <IMG WIDTH=21 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline158" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  is the function <I>f</I>(<I>x</I>,<I>y</I>), evaluated at the discrete
points  <IMG WIDTH=49 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline162" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > .
<P>
<P>
Formula (5) can be written in a more readable form, depending on the position
of the discrete points:
<P>
<P> <IMG WIDTH=546 HEIGHT=67 ALIGN=BOTTOM ALT="displaymath164" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
A similar equation, which we will use as an example below, is:
<P>
<P> <IMG WIDTH=546 HEIGHT=67 ALIGN=BOTTOM ALT="displaymath166" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
We call the  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline168" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  matrix on the left hand side <I>v</I> and
the  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline168" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  matrix on the right hand side <I>g</I>.
<P>
<P>
Now, equation (6b) can be formulated in
every point of the discrete area of figure 2:
<P>
<P> <IMG WIDTH=758 HEIGHT=86 ALIGN=BOTTOM ALT="equation92" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
and (7) is a linear equation system for the values of <I>u</I>(<I>x</I>,<I>y</I>) at the
points  <IMG WIDTH=69 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  and  <IMG WIDTH=17 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline180" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > .
<P>
<P>
By rearranging and adding the terms on each line, the linear equation system
can be formulated as:
<P>
<P> <IMG WIDTH=500 HEIGHT=18 ALIGN=BOTTOM ALT="equation101" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > <P>
<P>
where <I>a</I> is a  <IMG WIDTH=38 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  matrix and <I>b</I> is a vector with 4 elements. Vector
<I>z</I> represents the unknown values of <I>u</I>(<I>x</I>,<I>y</I>) at the
points  <IMG WIDTH=69 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  and  <IMG WIDTH=17 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline180" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > .
<P>
<P>
You are to write a program that creates the linear equation system (7) in
the form (8) for any two matrices <I>v</I> and <I>g</I> (6). As input, the
two matrices <I>v</I> and <I>g</I> and the functions  <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline204" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  , and <I>f</I>
are given. Also, a parameter <I>n</I> is given as the number of discretization
intervals. Thus,  <IMG WIDTH=43 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline210" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . As the result, your program should calculate the
matrix <I>a</I> and the vector <I>b</I>. For this more general case, there
are  <IMG WIDTH=58 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline216" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  inner points and <I>a</I> and <I>b</I> must
be sized accordingly.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of <I>m</I> tests. The number <I>m</I> is given
in the first line of the file. The first line of each test contains the
number <I>n</I> which gives the number of discretizations intervals as defined
above. You may assume that  <IMG WIDTH=82 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline228" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . Then the  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline168" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  matrices <I>v</I>
and <I>g</I> follow. The following four lines contain the functions  <IMG WIDTH=59 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline236" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline238" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > , each
given as a vector of order <I>n</I>+1, containing the values for 0, <I>h</I>,
2<I>h</I>, ..., 1. Finally, the function <I>f</I> is given as a <I>n</I>+1 by <I>n</I>+1
matrix. Like the vectors before, it contains the values for  <IMG WIDTH=149 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline252" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . Each row contains from left to right the
function values for increasing <I>x</I> values while each column contains
from top to bottom the function values for decreasing <I>y</I> values.
<P>
<P>
A vector occupies one line. Its values are given in ascending order, separated
by a space. A <I>n</I> by <I>n</I> matrix occupies <I>n</I> lines. Its rows
are given in ascending order as vectors, which occupy one line each. All
values found in the input file are integer values.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test found in the input file, your program should output the matrices
<I>a</I> and <I>b</I>. Matrix <I>a</I> is a  <IMG WIDTH=141 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline270" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > 
matrix (the discretization area (cf. figure 2) contains  <IMG WIDTH=58 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline216" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > 
inner points, which are unknown). The vector <I>b</I> is of order
 <IMG WIDTH=58 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline216" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   > . They should be output in the same format as the
vectors and matrices in the input file. Your output should only contain
integer values. Note that the expression  <IMG WIDTH=15 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline278" SRC="http://uva.onlinejudge.org/external/1/199img1.gif"   >  yields
an integer number and that all other calculations can also be done using
integer numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
3
1 0 2
0 -4 0
3 0 4
0 5 0
6 0 7
0 8 0
3 4 5 6
0 1 2 3
3 2 1 0
6 5 4 3
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>-36 0 0 36
0 -36 27 0
0 18 -36 0
9 0 0 -36
-35 -188 -189 -315</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
200||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rare Order</TITLE>
<META NAME="description" CONTENT="Rare Order">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rare Order</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A rare book collector recently discovered a book written in an unfamiliar
language that used the same characters as
the English language.  The book contained a short index, but the ordering
of the items in the index was different from
what one would expect if the characters were ordered the same way as in
the English alphabet.  The collector tried to
use the index to determine the ordering of characters (i.e., the collating
sequence) of the strange alphabet, then gave
up with frustration at the tedium of the task.
<P>
<P>
You are to write a program
to complete the collector's work.  In
particular, your program will take a set of strings that has been sorted
according to a particular collating sequence
and determine what that sequence is.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of an ordered list of strings of uppercase letters, one
string per line.  Each string contains at most
20 characters.  The end of the list is signalled by a line with the single
character `<TT>#</TT>'.  Not all letters are necessarily
used, but the list will imply a complete ordering among those letters
that are used.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your output should be a single line containing uppercase letters in the
order that specifies the collating sequence
used to produce the input data file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>XWY
ZX
ZXY
ZXW
YWWX
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>XZYW</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
201||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Squares</TITLE>
<META NAME="description" CONTENT="Squares">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Squares</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A children's board game consists of a square array of dots that contains
lines connecting some of the pairs of
adjacent dots.  One part of the game requires that the players count the
number of squares of certain sizes that are
formed by these lines.  For example, in the figure shown below, there
are 3 squares-2 of size 1 and 1 of size 2. (The
``size&quot; of a square is the number of lines segments required to form a side.)
<P>
<center>
 <IMG ALIGN=BOTTOM ALT="tex2html_wrap_inline240" SRC="http://uva.onlinejudge.org/external/2/201img1.gif"   >
</center>
<P>
Your problem is to write a program that automates the process of counting
all the possible squares.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file represents a series of game boards.  Each board consists of
a description of a square array of <i>n<sup>2</sup></i> dots
(where <i>2 <= n <= 9</i>) and some interconnecting horizontal and vertical
lines.  A record for a single board with <i>n<sup>2</sup></i> dots
and <I>m</I> interconnecting lines is formatted as follows:
<P>
<PRE><TT> 
	Line 1: 	<TT>n</TT> 	the number of dots in a single row or column of the array
<P>
	Line 2: 	<TT>m</TT> 	the number of interconnecting lines
<P>
	Each of the next m lines are of one of two types:
<P>
		<TT>H i j</TT>  indicates a horizontal line in row <I>i</I> which connects
<P>
			the dot in column <I>j</I> to the one to its right in column <I>j</I> + 1
<P>
	   or
<P>
		<TT>V i j</TT>  indicates a vertical line in column <I>i</I> which connects
<P>
			the dot in row <I>j</I> to the one below in row <I>j</I> + 1 
</TT></PRE>
<P>
Information for each line begins in column 1. The end of input is indicated
by end-of-file.  The first record of the sample input below represents the board of the square above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each record, label the corresponding output with ``<TT>Problem #1</TT>&quot;,
``<TT>Problem #2</TT>&quot;, and so forth.  Output for a record
consists of the number of squares of each size on the board, from the
smallest to the largest. lf no squares of any size
exist, your program should print an appropriate message indicating so.
Separate output for successive input records
by a line of asterisks between two blank lines, like in the sample below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
16
H 1 1
H 1 3
H 2 1
H 2 2
H 2 3
H 3 2
H 4 2
H 4 3
V 1 1
V 2 1
V 2 2
V 2 3
V 3 2
V 4 1
V 4 2
V 4 3
2
3
H 1 1
H 2 1
V 2 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Problem #1

2 square (s) of size 1
1 square (s) of size 2

**********************************

Problem #2

No completed squares can be found.
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
202||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Repeating Decimals</TITLE>
<META NAME="description" CONTENT="Repeating Decimals">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Repeating Decimals</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The decimal expansion of the fraction 1/33 is  <IMG WIDTH=31 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/202img1.gif"   > , where
the  <IMG WIDTH=18 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/2/202img1.gif"   >  is used to indicate that the cycle 03 repeats
indefinitely with no intervening digits.  In fact, the decimal expansion of
every rational number (fraction) has a
repeating cycle as opposed to decimal expansions of irrational numbers,
which have no such repeating cycles.
<P>
<P>
Examples of decimal expansions of rational numbers and their repeating cycles
are shown below.  Here, we use
parentheses to enclose the repeating cycle rather than place a bar over
the cycle.
<P>
<P> <IMG WIDTH=607 HEIGHT=125 ALIGN=BOTTOM ALT="tabular23" SRC="http://uva.onlinejudge.org/external/2/202img1.gif"   > <P>
<P>
Write a program that reads numerators and denominators of fractions and
determines their repeating cycles.
<P>
<P>
For
the purposes of this problem, define a repeating cycle of a fraction to be
the first minimal length string of digits to
the right of the decimal that repeats indefinitely with no intervening digits.
Thus for example, the repeating cycle of
the fraction 1/250 is 0, which begins at position 4 (as opposed to 0 which
begins at positions 1 or 2 and as opposed
to 00 which begins at positions 1 or 4).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each line of the input file consists of an integer numerator, which is
nonnegative, followed by an integer
denominator, which is positive.  None of the input integers exceeds 3000.
End-of-file indicates the end of input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each line of input, print the fraction, its decimal expansion through the
first occurrence of the cycle to the right
of the decimal or 50 decimal places (whichever comes first), and the length
of the entire repeating cycle.
<P>
In writing
the decimal expansion, enclose the repeating cycle in parentheses when possible.
If the entire repeating cycle does
not occur within the first 50 places, place a left parenthesis where the
cycle begins - it will begin within the first 50
places - and place ``<TT>...)</TT>&quot; after the 50th digit.
<P>
Print a blank line after every test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>76 25
5 43
1 397</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>76/25 = 3.04(0)
   1 = number of digits in repeating cycle

5/43 = 0.(116279069767441860465)
   21 = number of digits in repeating cycle

1/397 = 0.(00251889168765743073047858942065491183879093198992...)
   99 = number of digits in repeating cycle

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
203||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Running Lights Visibility Calculator</TITLE>
<META NAME="description" CONTENT="Running Lights Visibility Calculator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Running Lights Visibility Calculator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Ships underway on the high seas at night are required to display navigation
lights to identify their location and
direction of movement to other ships.  Most ships we required to display a
set of four running lights: one at the
stern (rear), one in the middle on the mast, and two at the bow (front).
<P>

<center><img src=203img4.gif></center>

<P>
In naval practice, the course of a ship is the direction the ship is
traveling as measured <I>clockwise</I> from true north.  For
example, a ship that is traveling due east is on a 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  course; one traveling
on a 315 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  course is traveling due west-northwest. The relative bearing
from ship <I>A</I> to ship <I>B</I> is the measure of the angle that the course of ship <I>A</I> makes
with the vector drawn from <I>A</I> to <I>B</I>, where the initial side of that angle
is incident with the course vector and the
terminal side is incident with the vector from <I>A</I> to <I>B</I>.
Thee measurement is taken clockwise.
<P>
<P>
If we assume that the bow of a ship is pointing to 0.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  or 360.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > , then the
running lights have ranges as shown in the
figure. Here, the stern (rear) of the ship is at 180.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > . The masthead light
shines all directions (0.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  - 360.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > ). The
stern light shines strictly between 110.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  and 250.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  (the angle at which
the stern light is beamed relative to the ship
satisfies the inequalities  <IMG WIDTH=181 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > ). The red running light
shines strictly between 245.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  and 2.5 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > ; the
green running light shines strictly between 357.5 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   >  and 115.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > . (Note the
overlap in the visible sectors between the
red and green running lights and stern light.) In addition, the nominal
maximum light visibility range for all lights is
10 nautical miles (<EM>nm</EM>).
For this problem, we'll suppose that the ship is a segment from prow
(where red and green light are placed at the same place, but red light is a bit to the starboard and green light is a bit to the port) to stern (where
the stern light is). The mast and the masthead light are at the middle of the ship.
<P>
<P>
Write a computer program that will repeatedly read in sets of data
describing the location, course and speed of your
own ship and other ships in the vicinity.  Based on this information,
the program will first calculate the relative
bearings from other ships to your ship and display the expected
configurations of visible lights from left to right as
viewed from your own ship. Ships separated more than 10 nm away will not be visible.
<P>
The program then recalculates the relative
bearings after a 3 minute time delay to determine which ships are on a
collision course with your own.  If another
ship is initially visible and if at the end of the 3 minute delay the
relative bearing from that ship to your own remains
almost the same (within 2 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > ) while the distance between the ships decreases,
then the program must issue a collision
warning. Assume that there will be no collisions of any type
(ship-to-ship or ship-to-land) in the 3 minute time period.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several data scenarios.  Each scenario is as follows.
<P>
<PRE><TT> 
		          Scenario ID (string - may contain blanks)
<P>
		          Number of other ships (integer)
<P>
		          Information on your own ship on two lines:
<P>
				              name of your ship (string - may contain blanks)
<P>
				              <I>x</I>-coordinate <I>y</I>-coordinate course speed (reals)
<P>
		          Other ship information on two lines per ship:
<P>
				              name of other ship (string - may contain blanks)
<P>
				              <I>x</I>-coordinate <I>y</I>-coordinate course speed (reals)
<P>
</TT></PRE>
<P>
All coordinates are on a cartesian grid with unit measurement of 1 nautical
mile.  Courses are measured from true
north, and each course satisfies  <IMG WIDTH=172 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline88" SRC="http://uva.onlinejudge.org/external/2/203img1.gif"   > . Speeds are in
knots (<EM>1 knot = 1 nm/hr</EM>).  The end of input is
indicated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output
<font size=3>(To help maintain floating point accuracy when converting degrees to
radians, use the predeclared constant <TT>pi</TT>).</font></A></FONT></H2>
<P>
Output consists of a single table per data set. A table shows the ID for each
other ship along with its initially
calculated relative bearing to your own ship, distance from your own ship, and
its light configurations (from left to
right) visible from your ship. If the lights are collinear with you print them
in alphabetical order. Collision
warnings, if any, should appear at the bottom of the table.  Each warning
should include the name of the other ship
and its distance from your own ship at the end of the 3 minute interval.
(Do not display the relative bearings,
distances, or running lights configurations for the end of that warning
interval.)
<P>
The output should be presented as on the sample output. The first and fourth
columns are aligned to the left. The second and the third columns are aligned
to the right. All real output should be written rounded with two digits to the right of
the decimal (ie, 0.005 should be printed as 0.01). All printed bearings should be in the range 0&le;bearing&lt;360.
That means that 359.995 should be printed as 0.00 instead of 360.00.
Use an accuracy of &epsilon; = 10<sup>-7</sup>. Print a line of 63 asterisks after each scenario.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Sample Test Data Set 1
4
Ownship
0.0 0.0 90.0 10.0
Windswept
10.0 10.0 135.0 8.0
Footloose
-5.0 6.0 275.0 6.0
Crasher 1
0.0 9.0 135 14.14
Aquavit
-2.0 -2.0 294.0 15.0
Sample Test Data Set 2
5
Ownship
0.0 0.0 90.0 1.0
Sturmtebergh
0.0 9.0 180.0 1.0
Aldimere
0.3140954 9.0 180.0 1.0
Borand
0.4278773 9.8 180.0 1.0
Cornelius
0.3140954 -9.0 0.0 1.0
Daeron
0.4278773 -9.8 0.0 1.0
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Scenario: Sample Test Data Set 1

Boat ID         Bearing      Distance   Lights (left to right)
---------------------------------------------------------------
Windswept         90.00       14.14     Lights not visible
Footloose        225.19        7.81     Masthead Stern
Crasher 1         45.00        9.00     Masthead Green
Aquavit          111.00        2.83     Stern Masthead Green
** Collision warning -->Crasher 1:  Distance =  8.50
***************************************************************
Scenario: Sample Test Data Set 2

Boat ID         Bearing      Distance   Lights (left to right)
---------------------------------------------------------------
Sturmtebergh       0.00        9.00     Green Masthead Red
Aldimere           2.00        9.01     Masthead Green Red
Borand             2.50        9.81     Masthead Green
Cornelius        358.00        9.01     Green Red Masthead
Daeron           357.50        9.81     Red Masthead
** Collision warning -->Sturmtebergh:  Distance =  8.95
** Collision warning -->Aldimere:  Distance =  8.95
** Collision warning -->Borand:  Distance =  9.76
** Collision warning -->Cornelius:  Distance =  8.95
** Collision warning -->Daeron:  Distance =  9.76
***************************************************************
</pre>
</BODY>
</HTML>

______________________________________________________
204||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Robot Crash</TITLE>
<META NAME="description" CONTENT="Robot Crash">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Robot Crash</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The DoD company has contracted to determine under what conditions a pair
of scanner robots can collide. The
robots are fired simultaneously from ``guns&quot; that are mounted near opposite
ends of a horizontal strip.  They travel in
straight lines until they hit a wall of the strip or until they are in the
same spot at the approximately the same time.
<P>
<center><img src=204img3.gif></center>
<P>
Whenever a robot hits a wall, it bounces off without loss of speed and in
a straight line so that the angle of incidence
equals the angle of reflection.
<P>
<center><img src=204img4.gif></center>
<P>
If the robots are in the same spot at approximately the same time, then
they ``collide.&quot;
<P>
<P>
Write a program to determine
whether robots collide and if so where.  To simplify the computer model of
the physical problem, assume the following.
<P>
<DL COMPACT><DT><STRONG>1)</STRONG>
<DD>  The horizontal strip is 2-dimensional, and it runs left-to-right. Its
    walls are straight lines.
<DT><STRONG>2)</STRONG>
<DD>  Each robot is a point mass. That is, the circumference of each robot is 0.
<DT><STRONG>3)</STRONG>
<DD>  A robot maintains the speed with which it was originally fired until it
    collides with the other robot or until it
    passes the gun from which the other robot was fired.
<DT><STRONG>4)</STRONG>
<DD>  There are 2 guns, one mounted to the left of the other on a horizontal strip.
    The initial angle of the left gun
    is between -85 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   >  and 85 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   > . The initial angle of the right gun is between
    95 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   >  and 180 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   >  or -95 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   >  and -180 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   > . (All
    angles are measured counterclockwise from the positive <I>x</I>-axis.)
<DT><STRONG>5)</STRONG>
<DD>  Robots collide when they pass through the same place within 0.5 second of
    each other.
<DT><STRONG>6)</STRONG>
<DD>  The horizontal strip is 10 units high. For any point (<I>x</I>,<I>y</I>) in the
    strip,  <IMG WIDTH=80 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/2/204img1.gif"   > .
<DT><STRONG>7)</STRONG>
<DD>  Robots speeds will be positive.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input for your program is a text file which contains data for several
different pairs of robots.  The lines of the text
file come in pairs.  The first line of a pair gives initial firing information
about the robot fired from the leftmost gun.
The second line of the pair gives initial firing information about the robot
fired from the rightmost gun.  Each line
contains 4 data items as follows:
<P>
<I>x</I>-coordinate&nbsp;&nbsp;&nbsp;&nbsp;<I>y</I>-coordinate&nbsp;&nbsp;&nbsp;&nbsp;angle in degrees&nbsp;&nbsp;&nbsp;&nbsp;speed (reals)
<P>
The end of input is indicated by end-of-file.  Assume that the input is
error-free.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output
<font size=3>(To help maintain floating point accuracy when converting degrees to
radians, use the predeclared constant <TT>pi</TT>).</font></A></FONT></H2>
<P>
For each robot problem, output from your program should consist of the number
of the problem (ex: <TT>Robot Problem #1</TT>, <TT>Robot Problem #2</TT>),
and a statement indicating whether or not the robots do collide. If they do
collide, your
program should also print the coordinates of the point of collision.
If there are multiple collisions, only print the first one.
If there are multiple collisions at the same time, only print the one with
smallest x-coordinate.
All real output should be printed with 2 digits to the right of the decimal.
<br>
Print a blank line after each robot problem.
<br>
<br>
NOTE: Assume that a=b only if |a-b| < &epsilon; = 10<sup>-7</sup>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0  4  0  3.3
40  5  125  5
1  6  -5  10
5  2  95  20
2  5  45  5
42 5  -135  5
0 6 20 3
0 5 180 4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Robot Problem #1: Robots do not collide.

Robot Problem #2: Robots collide at (4.68,5.68)

Robot Problem #3: Robots collide at (22.00,5.00)

Robot Problem #4: Robots do not collide.</PRE>
</BODY>
</HTML>

______________________________________________________
205||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Getting There</TITLE>
<META NAME="description" CONTENT="Getting There">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Getting There</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A frustrating part of arranging your own air travel trip is
selecting from among many possible flights that sequence
of flights which will take you from your origin to your
destination in the least possible time or for the least possible
cost.
<P>
<P>
It should be clear to any frequent air passenger that
in order to reach one city from another, the cost of the shorter
flight may be more than the cost of longer flights.
In other words, it may pay you well to cool your heels in an
airport waiting for a connecting flight rather than
take a more direct flight or one in which the connecting time is
shorter.  For example, consider the following flight schedule.
<P>
<PRE>            CenterCity      Homeville       5:20A  6:55A  12.50
            CenterCity      Greenville      5:45A  9:15A  35.00
            Homeville       Greenville      7:45A  9:35A  20.00</PRE>
<P>
In order to travel from CenterCity to Homeville, you
have two choices.  You can travel from Centerity to
Homeville, then from Homeville to Greenville, or you
can travel directly from CenterCity to Greenville.  The first
route costs $32.50 and has travel time 4:15;
the direct route costs $35.00 and has travel time 3:30.
If minimizing cost
is your objective, then you would choose the first route.
If you want to minimize time, you would select the second
route.
<P>
<P>
You are to write a program to optimize route selection
given the criteria of least cost or least time.  Your program
will read a list of flights and several trip requests
and will select from the list of flights the best sequence to satisfy
each trip request.  For each request, if more than one
route should satisfy the request, then your program should
select the route that also satisfies the other
objective.  For example, if cost is to be minimized and if two routes both
yield the minimum cost, then select the route which
yields the shortest travel time. There is only one valid solution for each input in the data set.
<P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data will consist of various test cases. Each case begins with line TRAVEL XXX, where XXX is ID number of the travel. ID number is a positive integer with leading zeroes. There will be less than 100 tests.
Each test is broken into two segments, the first describing the list of flights and the last containing the trip requests. The end of each part of the test is indicated by the line consisting of the single character `#'. 
<P>The flight segment of the test describes individual flights, one per line. Each line contains the origin city <i>(begins from column 1)</i>, the destination city <i>(begins from column 18)</i>, the departure time <i>(begins from column 34)</i>. the arrival time <i>(begins from column 42)</i>, and the cost <i>(columns 52 through 62)</i>. City names are left-justified in their respective fields, and may only contain upper and lower case characters. City names like <b>CITY</b> and <b>cItY</b> are same and lengths of city names will be less than 17 symbols. Times are in the form <i><b>HH:MMX</b></i>, where <i><b>HH</b></i> is the hour <i>(a leading zero may be replaced by a blank)</i>, <i><b>MM</b></i> is the minutes <i>(exactly two digits will appear)</i>, and <i><b>X</b></i> is <b>A</b> <i>(for AM)</i>, <b>P</b> <i>(for PM)</i>. The cost of the ticket is in dollars and cents, and includes a decimal point and two fractional digits. No tickets are free or cost more than $999.99. Departure times are always prior to arrival times. All individual flights represented by a line in the schedule take less than 24 hours. There will be at most 50 flights and at most 20 cities on the schedule. There will be no unnecessary blanks and spaces in the first part of a test.
<P>The trip request segment of the file immediately follows the list of flights. Each request appears on a line by itself, and specifies the origin city, the destination city, and whether to optimize cost or travel time. If it is desired to optimize travel time, the word <b>TIME</b> is displayed. If cost is to be optimized, then the word <b>COST</b> is displayed. There may be leading and trailing blanks in any line in the trip requests. The end-of-file indicates the end of the input file.<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For the first line of each test display <b>"Requests and optimal routes for travel Y"</b> without quotes where <b>Y</b> is an ID number of the test shown in the input and must be without leading zeroes.
<P>You can find all cases of the output format in the sample output and your output must be identical. All optimum routes will require less than 10 days and less than $1,000.00. Place one blank line between the outputs for successive trips and two blank lines between successive tests.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>TRAVEL 001
CenterCity       Homeville       5:20A   06:55A    12.50
CenterCity       Greenville      5:45A   9:15A     35.00
Homeville        Greenville      07:45A  9:35A     20.00
ArcherCity       Homeville       5:00A   6:00P     612.50
#
CenterCity       Greenville      COST
ArcherCity       Greenville      TIME
#
TRAVEL 992
GreenVille       Greenmile       10:30A  11:30A    5.00
GreenMile        GreenYARD       0:30P   3:00P     0.51
AA               BB              1:00A   1:01A     0.01
ZZZ              ZZZZ            0:03A   0:02A     0.50
ZZZZ             ZZZZZ           0:02A   0:01A     0.50
ZZZZZ            ZZZZZZ          0:01A   0:00A     0.50
#
GREENVILLE       GreeNVILLE      COST     
Greenville  Greenmile                  TIME       
GreenMile    GreenYard    TIME   
AA    Greenville          TIME
ZZZ ZZZZZZ TIME
#
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Requests and optimal routes for travel 1
------------------------------------------

From: Centercity           To: Greenville           Optimize: Cost
==================================================================
From                To                     Leave   Arrive     Cost
==================================================================
Centercity          Homeville              5:20A   6:55A    $12.50
Homeville           Greenville             7:45A   9:35A    $20.00
                                           -----------------------
                                                     4:15   $32.50

From: Archercity           To: Greenville           Optimize: Time
==================================================================
From                To                     Leave   Arrive     Cost
==================================================================
Archercity          Homeville              5:00A   6:00P   $612.50
Homeville           Greenville             7:45A   9:35A    $20.00
                                           -----------------------
                                               1 day 4:35  $632.50


Requests and optimal routes for travel 992
------------------------------------------

You are already in Greenville.

From: Greenville           To: Greenmile            Optimize: Time
==================================================================
From                To                     Leave   Arrive     Cost
==================================================================
Greenville          Greenmile              10:30A  11:30A    $5.00
                                           -----------------------
                                                     1:00    $5.00

From: Greenmile            To: Greenyard            Optimize: Time
==================================================================
From                To                     Leave   Arrive     Cost
==================================================================
Greenmile           Greenyard              0:30P   3:00P     $0.51
                                           -----------------------
                                                     2:30    $0.51

There is no route from Aa to Greenville.

From: Zzz                  To: Zzzzzz               Optimize: Time
==================================================================
From                To                     Leave   Arrive     Cost
==================================================================
Zzz                 Zzzz                   0:03A   0:02A     $0.50
Zzzz                Zzzzz                  0:02A   0:01A     $0.50
Zzzzz               Zzzzzz                 0:01A   0:00A     $0.50
                                           -----------------------
                                             2 days 23:57    $1.50</PRE>
</BODY>
</HTML>

______________________________________________________
206||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Meals on Wheels Routing System</TITLE>
<META NAME="description" CONTENT="Meals on Wheels Routing System">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Meals on Wheels Routing System</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Meals on Wheels program has the responsability
for providing hot meals to homebound senior citizens within
the city.  Volunteer drivers deliver the meals
in a timely manner to ensure that they are still
hot on arrival.  The list of
customers for meals and the number of
available drivers varies on a daily basis.
For each day, management tries to
assign drivers routes so that allocation of customers
is as even as possible among the routes.
<P>
<P>
An algorithm for developing the daily routes
involves sorting the addresses of the meal customers based on the
directions of their locations relative to the
Meals on Wheels headquarters and dividing this sorted list among the
available drivers. The Meals on Wheels
headquarters is considered to be located at
the origin on a cartesian grid of
square city blocks.  Each customer's
address has been converted into the number
of city blocks in the <I>x</I> and <I>y</I>
directions from the Meals on Wheels facility.
For example, a customer living at location (3,-2) would be living 3
blocks east and 2 blocks south of the Meals on Wheels headquarters.
<P>
<P>
Write a computer program to determine routing
for several different days.  For each day, your program will read in
the number of drivers (routes) and number
of customers followed by sets of names and locations for the customers.
Allocate customers to routes using the
following strategy.  
<UL><LI> Find the polar coordinate of
each customer's location.
Consider 0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/206img1.gif"   >  to be due east and 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/206img1.gif"   >  to be due north.<LI> Sort the sets of polar coordinates by angle and then divide the
customers as equally as possible among the available
routes starting at the angle of smallest measure.<LI> Routes with
customers at high degree angles should not have
more customers than those for customers of lower degree angles.<LI> If two customers are at the same angle, then
assign the customer nearer to the Meals on Wheels headquarters before
you assign the one further away.<LI> The difference in the number of customers assigned to
any two routes may not exceed one.
</UL>
<P>
Your program will determine not only the route
for each driver but also the total length of each route.  The length of
any route includes the sum of the distances
from the Meals on Wheels headquarters to the first customer, plus the
distances between subsequent customers, plus
the distance back to the headquarters from the last customer on the
route.  Note that a block may not be
traversed diagonally, and all city blocks are squares.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input consists of <I>multiple</I> data sets in which the
first line is a data set ID and the second line contains the number of
routes followed by the number of customers.
The remaining lines of the data set are arranged in pairs, one pair per
customer.  The first line of each pair is
the customer's name and the second line
contains the <I>x</I> and <I>y</I> coordinates of
where that customer lives. Assume that no two customers live on the same
position and that no customer lives in (0,0). So each data
set is arranged in the following manner.
<P>
<PRE><TT> 
	Line l:	data set ID  	 		(string - maximum length 50 characters)
<P>
	Line 2:	<I>n</I> <I>m</I> 				(number of routes   number of customers - positive integers)
<P>
    The next 2<I>m</I> lines come in pairs:
<P>
	Line 3:	customer name    		(string - maximum length 25)
<P>
	Line 4:	<I>x</I>-coordinate <I>y</I>-coordinate	(<I>x</I> and <I>y</I> coordinates for the preceding customer - integers)
<P>
</TT></PRE>
<P>
Assume the input is correct and the number of routes
does not exceed the number of customers.  The end of input is
indicated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each data set your output should include the data
set ID, the number of customers, the number of routes, the
routes of customers in order along with their corresponding
route lengths, and the total route length for all routes in
this data set. Print a row of asterisks between output for
successive data sets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
Sample Route List 1
4 10
able
1 2
baker
-3 6
charlie
-4 -5
donald
4 -7
eloise
3 4
frank
2 2
gertrude
5 9
horace
-2 -5
inez
5 -3
james
0 1
Sample Route List 2
1 1
charlie
1 1
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Sample Route List 1
Number of Customers: 10         Number of Routes: 4

Route ==> 1
Customer: frank
Customer: eloise
Customer: gertrude
Route Length ==> 28

Route ==> 2
Customer: able
Customer: james
Customer: baker
Route Length ==> 22

Route ==> 3
Customer: charlie
Customer: horace
Route Length ==> 18

Route ==> 4
Customer: donald
Customer: inez
Route Length ==> 24

Total Route Length ==> 92
***********************************
Sample Route List 2
Number of Customers: 1          Number of Routes: 1

Route ==> 1
Customer: charlie
Route Length ==> 4

Total Route Length ==> 4
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
207||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>PGA Tour Prize Money</TITLE>
<META NAME="description" CONTENT="PGA Tour Prize Money">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">PGA Tour Prize Money</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A PGA (Professional Golf Association) Tour event is a
golf tournament in which prize money is awarded to the best
players.  The tournament is broken into four rounds
of 18 holes apiece.  All players are eligible to play the first two
rounds.  Only those with the best scores from
those 36 holes ``make the first cut&quot; to play the final two rounds and
qualify for prize money.  Players with the
best 72-hole aggregate scores (the lowest scores) earn prize money.
<P>
<P>
You must write a program to determine how the total
prize money (called the tournament ``purse&quot;) is to be allocated
for a tournament.  Specifications are as follows.
<P>
<DL COMPACT><DT><STRONG>1)</STRONG>
<DD>   All players will play at least two 18-hole rounds
           (36 holes in all) unless they are disqualified for some
           reason.
<DT><STRONG>2)</STRONG>
<DD>   Any player who is disqualified stops playing at the
           time of the disqualification. Players who are disqualified
           during the first two rounds are ineligible to make the cut.
           Players who are disqualified during either of the
           last two rounds are ineligible to win prize money.
<DT><STRONG>3)</STRONG>
<DD>   At the end of the first two rounds, the field of
     players is cut to the 70 players with the lowest 36-hole scores
     plus ties.  So if 10 players are tied for 70th place,
     then 79 players make the 36-hole cut.  Players who do not
     make the 36-hole cut are eliminated from the
     playing field and do not win any prize money.
<DT><STRONG>4)</STRONG>
<DD>   The players who do make the 36-hole cut play an
     additional 36 holes (two 18-hole rounds) and are paid a
     percentage of the total prize money depending
     on their 72-hole aggregate score.  The lower the score, the
     more prize money a player wins.
<DT><STRONG>5)</STRONG>
<DD>   Players are paid percentages of the the tournament
     purse according to their final standings. For example, if
     the tournament purse were $1,000,000 and the
     winner's share were 18%, the winner would earn $180,000.
<DT><STRONG>6)</STRONG>
<DD>   There will be only one winner of this tournament.
     (In an actual golf tournament, when there is a tie for the
     low 72-hole score, there is be a play-off among
     the tied players.  We will ignore that situation.)
<DT><STRONG>7)</STRONG>
<DD>   There may be a tie for any or all of the positions
     between 2 and 70. If there is a tie among <I>n</I> players for
     position <I>k</I>, the money designated for positions <I>k</I>
     through <I>n</I> + <I>k</I> - 1 is pooled and allocated equally among the
     tied players.  For example, using the sample data
     given later, if there were a tie for second place between
     two golfers, they would each win $88,000
     [(10.8% + 6.8%)/2 = 8.8% * $1,000,000].  If there were a three-way tie, all three golfers would get $74,666.67
     [(10.8% + 6.8% + 4.8%)/3 = 7.46667% * $1,000,000].  The
     extra penny is ignored.
<DT><STRONG>8)</STRONG>
<DD>   If disqualification reduces the field to less
     than 70 players, the money for the last and any other places not
     covered is not allocated.  For example, if
     exactly 70 players make the cut but three of them are disqualified,
     then the tournament simply pays 67 places.
<DT><STRONG>9)</STRONG>
<DD>   Amateur golfers may play in professional
     tournaments but can win no money. Any prize money ``won&quot; by
     an amateur is allocated to the next lower position.
     For example, if an amateur has placed third in a
     tournament, then third place money goes to the
     fourth place finisher, and fourth place money goes to the
     fifth place finisher, etc.
<DT><STRONG>10)</STRONG>
<DD>  Only the low 70 non-amateur places and ties
     earn prize money. For example, if 75 players make the 36-hole cut, it is possible for 5 of them not
     to earn prize money, assuming none of the players making the cut
     are amateurs.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P><b>
The input begins with a single positive integer on a line by itself indicating 
the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.
</b>
<p>
<p>

The input file is broken into two segments. The amount
of the tournament purse and the percentages for all the 70
places are stored in the first segment of the input file.
This segment contains exactly 71 lines, which are formatted
as follows.
<P>
<PRE><TT> 
		 Line 1: 		 Total value of the purse
<P>
		 Line 2: 		 Percentage of the purse designated for first place
<P>
		 Line 3: 		 Percentage of the purse designated for second place
<P>
		 ...
<P>
		 Line71: 		 Percentage of the purse designated for 70<I>th</I> place
<P>
</TT></PRE>
<P>
All entries in the first 71 file lines can be read
as real numbers.  All percentages are given to four decimal places.
Assume the percentages are correct and sum to 100%.
A partial example of the first segment of the input file is shown in the sample input section below.
<P>
<P>
The second segment of the input file contains
the players' names and their respective scores for the four rounds.
There is a maximum of 144 players. A first line contains the number of players and then one more line for each one of them, with the format as follows (see a partial example in the sample input section).
<P>
<PRE><TT> 
		 Characters 1-20:   		   Player name
<P>
		 Characters 21&nbsp;23:  		   Round 1 score (first 18 holes)
<P>
		 Characters 24-26:  		   Round 2 score (second 18 holes)
<P>
		 Characters 27-29:  		   Round 3 score (third 18 holes)
<P>
		 Characters 30-32:  		   Round 4 score (fourth 18 holes)
<P>
</TT></PRE>
<P>
Any player who has an asterisk `*' at the end of
his last name is an amateur.  All players who are not disqualified
will have four 18-hole scores listed.
(Even though in an actual tournament,
players who do not make the cut do not
get to play the last two rounds of the
tournament, for the purposes of this program all players who are not
disqualified will have four 18-hole scores listed.)
A player who is disqualified during a round will have a score on
that round shown as `<TT>DQ</TT>'.  That player will
have no additional scores for the tournament.  Assume that at least 70
players will make the 36-hole cut.
The end of input is denoted by end-of-file.
<P>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
<b>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>

Output from this program consists of names of all
players who made the 36-hole cut, their finish positions (with the
letter ``<TT>T</TT>&quot; after the numeric value representing
the finish position if there is a money sharing for that position, that means two or more NON-AMATEUR players with the same score, and all of them earning money), scores for each
round, total scores, and the amounts of money won.
Print the money won by a player only if the player gets a prize (even if the prize is $0.00).

Disqualified players are listed at the bottom with scores of <TT>DQ</TT>
placed in the ``<TT>TOTAL</TT>&quot; column.
No player who failed to make the 36-hole cut is listed in the output.
Each column of output should be formatted and labelled appropriately.  The
dollar amounts should be correct to two decimal places.

In case of tie order the players by rounds completed and by total shots. If there's still a tie, order them in alphabetical order.

<p>
A partial example of the output file (not corresponding to the sample input) is show in the sample output section.
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>

<PRE>
1

1000000.00
18.0000
10.8000
6.8000
4.8000
...
0.2020
0.2000
140
WALLY WEDGE          70 70 70 70
SANDY LIE            80 DQ
SID SHANKER*         90 99 62 61
...
JIMMY ABLE           69 73 80 DQ
</PRE>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Player Name          Place     RD1  RD2  RD3  RD4  TOTAL     Money Won
-----------------------------------------------------------------------
WALLY WEDGE          1         70   70   70   70   280       $180000.00
HENRY HACKER         2T        77   70   70   70   287       $ 88000.00
TOMMY TWO IRON       2T        71   72   72   72   287       $ 88000.00
BEN BIRDIE           4         70   74   72   72   288       $ 48000.00
NORMAN NIBLICK*      4         72   72   72   72   288
...
LEE THREE WINES      71        99   99   99   98   395       $  2000.00
JOHNY MELAVO         72        99   99   99   99   396
JIMMY ABLE                     69   73   80        DQ
EDDIE EAGLE                    71   71             DQ
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
208||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Firetruck</TITLE>
<META NAME="description" CONTENT="Firetruck">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Firetruck</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Center City fire department collaborates with the transportation 
department to maintain maps of the city which reflects the current status of 
the city streets. On any given day, several streets are closed for repairs or 
construction.  Firefighters need to be able to select routes from the 
firestations to fires that do not use closed streets.
<P>
<P>
Central City is divided into non-overlapping fire districts, each 
containing a single firestation. When a fire is reported, a central dispatcher 
alerts the firestation of the district where the fire is located and gives a 
list of possible routes from the firestation to the fire. You must write a 
program that the central dispatcher can use to generate routes from the 
district firestations to the fires.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The city has a separate map for each fire district. Streetcorners of each 
map are identified by positive integers less than 21, with the firestation 
always on corner #1. The input file contains several test cases representing
different fires in different districts.
<P>
<UL><LI> The first line of a test case 
consists of a single integer which is the number of the streetcorner closest 
to the fire.<LI> The next several lines consist of pairs of positive integers 
separated by blanks which are the adjacent streetcorners of open streets. (For 
example, if the pair 4 7 is on a line in the file, then the street between 
streetcorners 4 and 7 is open. There are no other streetcorners between 4 and 
7 on that section of the street.)<LI> The final line of each test case consists of a pair of 0's.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, your output must identify the case by number (<TT>CASE #1</TT>,
<TT>CASE #2</TT>, etc). It must list each route on a separate line, with the
streetcorners written in the order in which they appear on the route. And it 
must give the total number routes from firestation to the fire.  Include only 
routes which do not pass through any streetcorner more than once.  (For 
obvious reasons, the fire department doesn't want its trucks driving around in 
circles.)
<P>
Output from separate cases must appear on separate lines.
<P>
<P>
The 
following sample input and corresponding correct output represents two test 
cases.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6
1 2
1 3
3 4
3 5
4 6
5 6
2 3
2 4
0 0
4
2 3
3 4
5 1
1 6
7 8
8 9
2 5
5 7
3 1
1 8
4 6
6 9
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>CASE 1:
1 2 3 4 6
1 2 3 5 6
1 2 4 3 5 6
1 2 4 6
1 3 2 4 6
1 3 4 6
1 3 5 6
There are 7 routes from the firestation to streetcorner 6.
CASE 2:
1 3 2 5 7 8 9 6 4
1 3 4
1 5 2 3 4
1 5 7 8 9 6 4
1 6 4
1 6 9 8 7 5 2 3 4
1 8 7 5 2 3 4
1 8 9 6 4
There are 8 routes from the firestation to streetcorner 4.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
209||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Triangular Vertices</TITLE>
<META NAME="description" CONTENT="Triangular Vertices">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Triangular Vertices</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Consider the points on an infinite grid of equilateral triangles as shown 
below:
<P>
<center><img src=209img1.gif></center>
<P>
Note that if we number the points from left to right and top to bottom, 
then groups of these points form the vertices of certain geometric shapes. For 
example, the sets of points {1,2,3} and {7,9,18} are the vertices of 
triangles, the sets {11,13,26,24} and {2,7,9,18} are the vertices of 
parallelograms, and the sets {4,5,9,13,12,7} and {8,10,17,21,32,34} are the 
vertices of hexagons.
<P>
<P>
Write a program which will repeatedly accept a set of points on this 
triangular grid, analyze it, and determine whether the points are the vertices 
of one of the following ``acceptable&quot; figures: triangle, parallelogram, or
hexagon. In order for a figure to be acceptable, it must meet the following 
two conditions:
<P>
<PRE><TT> 
		1)	Each side of the figure must coincide with an edge in the grid.
<P>
and 		2)	All sides of the figure must be of the same length.
<P>
</TT></PRE><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of an unknown number of point sets. Each point set 
will appear on a separate line in the file. There are at most six points in a 
set and the points are limited to the range 1..32767.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each point set in the input file, your program should deduce from the 
number of points in the set which geometric figure the set potentially 
represents; e.g., six points can only represent a hexagon, etc. The output 
must be a series of lines listing each point set followed by the results of 
your analysis.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 2 3
11 13 29 31
26 11 13 24
4 5 9 13 12 7
1 2 3 4 5
47
11 13 23 25</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 3 are the vertices of a triangle
11 13 29 31 are not the vertices of an acceptable figure
26 11 13 24 are the vertices of a parallelogram
4 5 9 13 12 7 are the vertices of a hexagon
1 2 3 4 5 are not the vertices of an acceptable figure
47 are not the vertices of an acceptable figure
11 13 23 25 are not the vertices of an acceptable figure</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
210||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Concurrency Simulator</TITLE>
<META NAME="description" CONTENT="Concurrency Simulator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Concurrency Simulator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Programs executed concurrently on a uniprocessor system appear to be 
executed at the same time, but in reality the single CPU alternates between 
the programs, executing some number of instructions from each program before 
switching to the next. You are to simulate the concurrent execution of up to 
ten programs on such a system and determine the output that they will produce.
<P>
<P>
The program that is currently being executed is said to be running, while 
all programs awaiting execution are said to be ready.  A program consists of a 
sequence of no more than 25 statements, one per line, followed by an end 
statement. The statements available are listed below.
<P>
<P>
<P>
 <IMG WIDTH=347 HEIGHT=124 ALIGN=BOTTOM ALT="tex2html_wrap66" SRC="http://uva.onlinejudge.org/external/2/210img1.gif"   > 
 <IMG WIDTH=375 HEIGHT=163 ALIGN=BOTTOM ALT="tex2html_wrap68" SRC="http://uva.onlinejudge.org/external/2/210img1.gif"   > 
<P>
<P>
Each statement requires an integral number of time units to execute. The 
running program is permitted to continue executing instructions for a period 
of time called its quantum. When a programÃ•s time <I>quantum</I> expires, another ready program will be selected to run. Any instruction currently being 
executed when the time quantum expires will be allowed to complete.
<P>
<P>
Programs are queued first-in-first-out for execution in a <I>ready queue</I>. The initial order of the ready queue corresponds to the original order of the 
programs in the input file. This order can change, however, as a result of the 
execution of <B>lock</B> and <B>unlock</B> statements.
<P>
<P>
The <B>lock</B> and <B>unlock</B> statements are used whenever a program wishes to 
claim mutually exclusive access to the variables it is manipulating. These 
statements always occur in pairs, bracketing  one or more other statements. A 
<B>lock</B> will always precede an <B>unlock</B>, and these statements will never be 
nested. Once a program successfully executes a <B>lock</B> statement, no other 
program may successfully execute a <B>lock</B> statement until the locking program 
runs and executes the corresponding <B>unlock</B> statement. Should a running 
program attempt to execute a <B>lock</B> while one is already in effect, this 
program will be placed at the end of the <I>blocked queue</I>. Programs blocked in 
this fashion lose any of their current time quantum remaining. When an <B>unlock</B> 
is executed, any program at the head of the blocked queue is moved to the head 
of the ready queue. The first statement this program will execute when it runs 
will be the <B>lock</B> statement that previously failed. Note that it is up to the 
programs involved to enforce the mutual exclusion protocol through correct 
usage of <B>lock</B> and <B>unlock</B> statements. (A renegade program with no 
<B>lock</B>/<B>unlock</B> pair could alter any variables it wished, despite the proper use 
of <B>lock</B>/<B>unlock</B> by the other programs.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
<b>
The input begins with a single positive integer on a line by itself indicating 
the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.
</b>
<p>
<p>

The first line of the input file consists of seven integers separated by 
spaces.  These integers specify (in order): the number of programs which 
follow, the unit execution times for each of the five statements (in the order 
given above), and the number of time units comprising the time quantum. The 
remainder of the input consists of the programs, which are correctly formed 
from statements according to the rules described above.
<P>
All program statements begin in the first column of a line. Blanks 
appearing in a statement should be ignored.  Associated with each program is 
an identification number based upon its location in the input data (the first 
program has ID = <TT>1</TT>, the second has ID = <TT>2</TT>, etc.).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P><b>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>

Your output will contain of the output generated by the print statements as 
they occur during the simulation. When a print statement is executed, your 
program should display the program ID, a colon, a space, and the value of the 
selected variable. Output from separate print statements should appear on 
separate lines.
<P>
<P>
A sample input and correct output are shown below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
1

3 1 1 1 1 1 1
a = 4
print a
lock
b = 9
print b
unlock
print b
end
a = 3
print a
lock
b = 8
print b 
unlock
print b
end
b = 5
a = 17
print a
print b
lock
b = 21
print b
unlock
print b
end</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1: 3
2: 3
3: 17
3: 9
1: 9
1: 9
2: 8
2: 8
3: 21
3: 21</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
211||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Domino Effect</TITLE>
<META NAME="description" CONTENT="The Domino Effect">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Domino Effect</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A standard set of Double Six dominoes contains 28 pieces (called bones) 
each displaying two numbers from 0 (blank) to 6 using dice-like pips. The 28 
bones, which are unique, consist of the following combinations of pips:
<P>
<PRE>          Bone #   Pips    Bone #   Pips    Bone #   Pips    Bone #   Pips

             1    0 | 0       8    1 | 1      15    2 | 3      22    3 | 6
             2    0 | 1       9    1 | 2      16    2 | 4      23    4 | 4
             3    0 | 2      10    1 | 3      17    2 | 5      24    4 | 5
             4    0 | 3      11    1 | 4      18    2 | 6      25    4 | 6
             5    0 | 4      12    1 | 5      19    3 | 3      26    5 | 5
             6    0 | 5      13    1 | 6      20    3 | 4      27    5 | 6
             7    0 | 6      14    2 | 2      21    3 | 5      28    6 | 6</PRE>
<P>
All the Double Six dominoes in a set can he laid out to display a 7 x 8 
grid of pips.  Each layout corresponds at least one ``map&quot; of the dominoes. A
map consists of an identical 7 x 8 grid with the appropriate bone numbers 
substituted for the pip numbers appearing on that bone. An example of a 7 x 8 
grid display of pips and a corresponding map of bone numbers is shown below.
<P>
<PRE>                 7 x 8 grid of pips             map of bone numbers

                 6  6  2  6  5  2  4  1         28 28 14  7 17 17 11 11
                 1  3  2  0  1  0  3  4         10 10 14  7  2  2 21 23
                 1  3  2  4  6  6  5  4          8  4 16 25 25 13 21 23
                 1  0  4  3  2  1  1  2          8  4 16 15 15 13  9  9
                 5  1  3  6  0  4  5  5         12 12 22 22  5  5 26 26
                 5  5  4  0  2  6  0  3         27 24 24  3  3 18  1 19
                 6  0  5  3  4  2  0  3         27  6  6 20 20 18  1 19</PRE>
<P>
Write a program that will analyze the pattern of pips in any 7 x 8 layout 
of a standard set of dominoes and produce a map showing the position of all 
dominoes in the set. If more than one arrangement of dominoes yield the same 
pattern, your program should generate a map of each possible layout.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain several of problem sets.  Each set consists of 
seven lines of eight integers from 0 through 6, representing an observed 
pattern of pips. Each set is corresponds to a legitimate configuration of 
bones (there will be at least one map possible for each problem set). There is 
no intervening data separating the problem sets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Correct output consists of a problem set label (beginning with Set <TT>#1</TT>)
followed by an echo printing of the problem set itself. This is followed by a 
map label for the set and the map(s) which correspond to the problem set. 
(Multiple maps can be output in any order.) After all maps for a problem set 
have been printed, a summary line stating the number of possible maps appears.
<P>
At least three lines are skipped between the output from different problem 
sets while at least one line separates the labels, echo printing, and maps 
within the same problem set.
<P>
<P>
A sample input file of two problem sets along 
with the correct output are shown.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 4 3 6 5 3 4 6
0 6 0 1 2 3 1 1
3 2 6 5 0 4 2 0
5 3 6 2 3 2 0 6
4 0 4 1 0 0 4 1
5 2 2 4 4 1 6 5
5 5 3 6 1 2 3 1
4 2 5 2 6 3 5 4
5 0 4 3 1 4 1 1
1 2 3 0 2 2 2 2
1 4 0 1 3 5 6 5
4 0 6 0 3 6 6 5
4 0 1 6 4 0 3 0
6 5 3 6 2 1 5 3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Layout #1:

   5   4   3   6   5   3   4   6
   0   6   0   1   2   3   1   1
   3   2   6   5   0   4   2   0
   5   3   6   2   3   2   0   6
   4   0   4   1   0   0   4   1
   5   2   2   4   4   1   6   5
   5   5   3   6   1   2   3   1

Maps resulting from layout #1 are:

    6  20  20  27  27  19  25  25
    6  18   2   2   3  19   8   8
   21  18  28  17   3  16  16   7
   21   4  28  17  15  15   5   7
   24   4  11  11   1   1   5  12
   24  14  14  23  23  13  13  12
   26  26  22  22   9   9  10  10

There are 1 solution(s) for layout #1.



Layout #2:

    4   2   5   2   6   3   5   4
    5   0   4   3   1   4   1   1
    1   2   3   0   2   2   2   2
    1   4   0   1   3   5   6   5
    4   0   6   0   3   6   6   5
    4   0   1   6   4   0   3   0
    6   5   3   6   2   1   5   3

Maps resulting from layout #2 are:

   16  16  24  18  18  20  12  11
    6   6  24  10  10  20  12  11
    8  15  15   3   3  17  14  14
    8   5   5   2  19  17  28  26
   23   1  13   2  19   7  28  26
   23   1  13  25  25   7   4   4
   27  27  22  22   9   9  21  21

   16  16  24  18  18  20  12  11
    6   6  24  10  10  20  12  11
    8  15  15   3   3  17  14  14
    8   5   5   2  19  17  28  26
   23   1  13   2  19   7  28  26
   23   1  13  25  25   7  21   4
   27  27  22  22   9   9  21   4

There are 2 solution(s) for layout #2.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
212||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Use of Hospital Facilities</TITLE>
<META NAME="description" CONTENT="Use of Hospital Facilities">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Use of Hospital Facilities</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
County General Hospital is trying to chart its course through the troubled
waters of the economy and shifting population demographics.  To support the
planning requirements of the hospital, you have been asked to develop a
simulation program that will allow the hospital to evaluate alternative
configurations of operating rooms, recovery rooms and operations guidelines.
Your program will monitor the usage of operating rooms and recovery room beds
during the course of one day.
<P>
County General Hospital has several operating rooms and recovery room beds.
Each surgery patient is assigned to an available operating room and following
surgery the patient is assigned to one of the recovery room beds.  The amount
of time necessary to transport a patient from an operating room to a recovery
room is fixed and independent of the patient. Similarly, both the amount of
time to prepare an operating room for the next patient and the amount of time
to prepare a recovery room bed for a new patient are fixed.
<P>
<P>
All patients are officially scheduled for surgery at the same time, but the
order in which they actually go into the operating rooms depends on the order
of the patient roster. A patient entering surgery goes into the lowest
numbered operating room available. For example, if rooms 2 and 4 become
available simultaneously, the next patient on the roster not yet in surgery
goes into room 2 and the next after that goes into room 4 at the same time.
After surgery, a patient is taken to the available recovery room bed with the
lowest number. A recovery room bed is only 
available if the preparation is already finished when the patient leaves 
surgery. If two patients emerge from surgery at the same time, the patient with 
the lower surgery room number will be the first assigned to a recovery 
room bed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains data for several simulation runs. Each run is separated by a blank line.  All numeric data
in the input file are integers, and successive integers on the same line are
separated by blanks.  The first line of each run is the set of hospital
configuration parameters to be used for this run.  The parameters are, in
order:
<PRE><TT> 
		   Number of operating rooms  (maximum of 10)
<P>
		   Number of recovery room beds  (maximum of 30)
<P>
		   Starting hour for 1st surgery of day (based on a 24-hour clock)
<P>
		   Minutes to transport patient from operating room to recovery room
<P>
		   Minutes to prepare operating room for next patient
<P>
		   Minutes to prepare recovery room bed for next patient
<P>
		   Number of surgery patients for the day   (maximum of 100)
<P>
</TT></PRE>
This initial configuration data will be followed by pairs of lines of
patient data as follows:
<PRE><TT> 
		 Line 1:  Last name of patient (maximum of 8 characters)
<P>
		 Line 2:  Minutes required for surgery Minutes required in the recovery room
<P>
</TT></PRE>
<P>
Patient records in the input file are ordered according to the patient roster,
which determines the order in which patients are scheduled for surgery.  The
number of recovery room beds specified in any configuration will be sufficient
to handle patients arriving from surgery (No queuing of patients for recovery
room beds will be required). Computed times will not extend past 24:00.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Correct output shows which operating room and which recovery room bed is
used by each patient, and the time period that the patient uses the room and
bed along with a summary of the utilization of hospital facilities for that
day.  The output file consists of several sets of two tables each describing the results
of the simulation run.  The first table is in columnar form with appropriate
column labels to show the number of each patient (in the order the patient
roster), the patient's last name, the operating room number, the time surgery
begins and ends, the recovery bed number and the time the patient enters and
leaves the recovery room bed.
<P>
The second table will also be in columnar form with appropriate column
labels summarizing the utilization of operating rooms and recovery room beds.
This summary indicates the facility type (room or bed), the facility number,
the number of minutes used and percentage of available time utilized.
Available time is defined as the time in minutes from the starting time for
1<I>st</I> surgery of day to the ending time of the last patient in a recovery room
bed.
Print a blank line after each run. Follow the output format shown on sample output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>5 12 07 5 15 10 16
Jones
28 140
Smith
120 200
Thompson
23 75
Albright
19 82
Poucher
133 209
Comer
74 101
Perry
93 188
Page
111 223
Roggio
69 122
Brigham
42 79
Nute
22 71
Young
38 140
Bush
26 121
Cates
120 248
Johnson
86 181
White
92 140</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE> Patient          Operating Room          Recovery Room
 #  Name     Room#  Begin   End      Bed#  Begin    End
 ------------------------------------------------------
 1  Jones      1    7:00    7:28      3    7:33    9:53
 2  Smith      2    7:00    9:00      1    9:05   12:25
 3  Thompson   3    7:00    7:23      2    7:28    8:43
 4  Albright   4    7:00    7:19      1    7:24    8:46
 5  Poucher    5    7:00    9:13      5    9:18   12:47
 6  Comer      4    7:34    8:48      4    8:53   10:34
 7  Perry      3    7:38    9:11      2    9:16   12:24
 8  Page       1    7:43    9:34      6    9:39   13:22
 9  Roggio     4    9:03   10:12      9   10:17   12:19
10  Brigham    2    9:15    9:57      8   10:02   11:21
11  Nute       3    9:26    9:48      7    9:53   11:04
12  Young      5    9:28   10:06      3   10:11   12:31
13  Bush       1    9:49   10:15     10   10:20   12:21
14  Cates      3   10:03   12:03      8   12:08   16:16
15  Johnson    2   10:12   11:38      4   11:43   14:44
16  White      5   10:21   11:53      7   11:58   14:18

Facility Utilization
Type  # Minutes  % Used
-------------------------
Room  1     165   29.68
Room  2     248   44.60
Room  3     258   46.40
Room  4     162   29.14
Room  5     263   47.30
Bed   1     282   50.72
Bed   2     263   47.30
Bed   3     280   50.36
Bed   4     282   50.72
Bed   5     209   37.59
Bed   6     223   40.11
Bed   7     211   37.95
Bed   8     327   58.81
Bed   9     122   21.94
Bed  10     121   21.76
Bed  11       0    0.00
Bed  12       0    0.00

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
213||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Message Decoding</TITLE>
<META NAME="description" CONTENT="Message Decoding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Message Decoding</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Some message encoding schemes require that an encoded message be sent in 
two parts.  The first part, called the header, contains the characters of the 
message.  The second part contains a pattern that represents the message.  You 
must write a program that can decode messages under such a scheme.
<P>
<P>
The heart of the encoding scheme for your program is a sequence of ``key&quot; 
strings of 0's and 1's as follows:
<P>
<P> <IMG WIDTH=597 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath26" SRC="http://uva.onlinejudge.org/external/2/213img1.gif"   > <P>
<P>
The first key in the sequence is of length 1, the next 3 are of length 2, the 
next 7 of length 3, the next 15 of length 4, etc.  If two adjacent keys have 
the same length, the second can be obtained from the first by adding 1 (base 
2).  Notice that there are no keys in the sequence that consist only of 1's.
<P>
<P>
The keys are mapped to the characters in the header in order.  That is, the 
first key (0) is mapped to the first character in the header, the second key 
(00) to the second character in the header, the <I>k</I>th key is mapped to the <I>k</I>th 
character in the header.  For example, suppose the header is:
<P>
<P>
   AB#TANCnrtXc
<P>
<P>
<P>
Then 0 is mapped to A, 00 to B, 01 to #, 10 to T, 000 to A, ..., 110 to X, and
0000 to c.
<P>
<P>
The encoded message contains only 0's and 1's and possibly carriage 
returns, which are to be ignored.  The message is divided into segments.  The 
first 3 digits of a segment give the binary representation of the length of 
the keys in the segment.  For example, if the first 3 digits are 010, then the 
remainder of the segment consists of keys of length 2 (00, 01, or 10).  The 
end of the segment is a string of 1's which is the same length as the length 
of the keys in the segment.  So a segment of keys of length 2 is terminated by 
11.  The entire encoded message is terminated by 000 (which would signify a 
segment in which the keys have length 0).  The message is decoded by 
translating the keys in the segments one-at-a-time into the header characters 
to which they have been mapped.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several data sets.  Each data set consists of a 
header, which is on a single line by itself, and a message, which may extend 
over several lines.  The length of the header is limited only by the fact that 
key strings have a maximum length of 7 (111 in binary).   If there are 
multiple copies of a character in a header, then several keys will map to that 
character.  The encoded message contains only 0's and 1's, and it is a 
legitimate encoding according to the described scheme.  That is, the message 
segments begin with the 3-digit length sequence and end with the appropriate 
sequence of 1's.  The keys in any given segment are all of the same length, 
and they all correspond to characters in the header.  The message is 
terminated by 000.
<P>
<P>
Carriage returns may appear anywhere within the message 
part. They are <I>not</I> to be considered as part of the message.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each data set, your program must write its decoded message on a 
separate line.  There should not be blank lines between messages.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>TNM AEIOU
0010101100011
1010001001110110011
11000
$#**\
0100000101101100011100101000</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>TAN ME
##*\$</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
214||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Code Generation</TITLE>
<META NAME="description" CONTENT="Code Generation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Code Generation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your employer needs a backend for a translator for a very SIC machine 
(Simplified Instructional Computer, apologies to Leland Beck). Input to the 
translator will be arithmetic expressions in postfix form and the output will 
be assembly language code.
<P>
<P>
The target machine has a single register and the following instructions, 
where the operand is either an identifier or a storage location.
<P>
<PRE><TT> 
		 L  		  load the operand into the register
<P>
		 A  		  add the operand to the contents of the register
<P>
		 S  		  subtract the operand from the contents of the register
<P>
		 M  		  multiply the contents of the register by the operand
<P>
		 D  		  divide the contents of the register by the operand
<P>
		 N  		  negate the contents of the register
<P>
		 ST 		  store the contents of the register in the operand location
<P>
</TT></PRE>
<P>
An arithmetic operation replaces the contents of the register with the 
expression result.  Temporary storage locations are allocated by the assembler 
for an operand  of the form ``<TT>$n</TT>&quot; where <TT>n</TT> is a single digit.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several legitimate postfix expressions, each on 
a separate line.  Expression operands are single letters and operators are the 
normal arithmetic operators (<TT>+</TT>, <TT>-</TT>, <TT>*</TT>, <TT>/</TT>) and unary negation (<TT>@</TT>).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output must 
be assembly language code that meets the following requirements:
<P>
<OL><LI> One instruction per line with the instruction mnemonic separated from
the operand (if any) by one blank.<LI> One blank line must separate the assembly code for successive
expressions.<LI> The original order of the operands must be preserved in the assembly
code.<LI> Assembly code must be generated for each operator as soon as it is
encountered.<LI> As few temporaries as possible should be used (given the above
restrictions).<LI> For each operator in the expression, the minimum number of instructions
must be generated (given the above restrictions).     
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>AB+CD+EF++GH+++
AB+CD+-</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>L A
A B
ST $1
L C
A D
ST $2
L E
A F
A $2
ST $2
L G
A H
A $2
A $1

L A
A B
ST $1
L C
A D
N
A $1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
215||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Spreadsheet Calculator</TITLE>
<META NAME="description" CONTENT="Spreadsheet Calculator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Spreadsheet Calculator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A spreadsheet is a rectangular array of cells. Cells contain data or 
expressions that can be evaluated to obtain data. A ``simple&quot; spreadsheet is
one in which data are integers and expressions are mixed sums and 
differences of integers and cell references. For any expression, if each 
cell that is referenced contains an integer, then the expression can be 
replaced by the integer to which the expression evaluates. You are to write 
a program which evaluates simple spreadsheets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input consists of a sequence of simple spreadsheets. Each spreadsheet begins 
with a line specifying the number of rows and the number of columns. No 
spreadsheet contains more than 20 rows or 10 columns. Rows are labeled by 
capital letters A through T. Columns are labeled by decimal digits 0 through 
9. Therefore, the cell in the first row and first column is referenced as 
A0; the cell in the twentieth row and fifth column is referenced as T4.
<P>
<P>
Following the specification of the number of rows and columns is one line of 
data for each cell, presented in row-major order. (That is, all cells for 
the first row come first, followed by all cells for the second row, etc.)
<P>
Each cell initially contains a signed integer value or an expression 
involving unsigned integer constants, cell references, and the operators + 
(addition) and - (subtraction).
<P>
If a cell initially contains a signed
integer, the corresponding input line will begin with an optional minus sign 
followed by one or more decimal digits.
<P>
If a cell initially contains an 
expression, its input line will contain one or more cell references or 
unsigned integer constants separated from each other by + and - signs. Such
a line must begin with a cell reference. No expression contains more than 75 
characters. No line of input contains leading blanks. No expression contains 
any embedded blanks. However, any line may contain trailing blanks.
<P>
<P>
The end of the sequence of spreadsheets is marked by a line specifying 0 
rows and 0 columns.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each spreadsheet in the input, you are to determine the value of each 
expression and display the resulting spreadsheet as a rectangular array of 
numbers with the rows and columns appropriately labeled. In each display, 
all numbers for a column must appear right-justified and aligned with the 
column label.
<P>
<P>
Operators are evaluated left to right in each expression; 
values in cells are always less than 10000 in absolute value. Since 
expressions may reference cells that themselves contain expressions, the 
order in which cells are evaluated is dependent on the expressions 
themselves.
<P>
<P>
If one or more cells in a spreadsheet contain expressions with circular 
references, then the output for that spreadsheet should contain only a list 
of the unevaluated cells in row-major order, one per line, with each line 
containing the cell label, a colon, a blank, and the cell's original
expression.
<P>
<P>
A blank line should appear following the output for each spreadsheet.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 2
A1+B1
5
3
B0-A1
3 2
A0
5
C1
7
A1+B1
B0+A1
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>      0     1
A     3     5
B     3    -2

A0: A0
B0: C1
C1: B0+A1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
216||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Getting in Line</TITLE>
<META NAME="description" CONTENT="Getting in Line">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Getting in Line</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Computer networking requires that the computers in the network be linked.
<P>
<P>
This problem considers a ``linear&quot; network in which the computers are chained
together so that each is connected to exactly two others except for the two 
computers on the ends of the chain which are connected to only one other 
computer. A picture is shown below. Here the computers are the black dots 
and their locations in the network are identified by planar coordinates 
(relative to a coordinate system not shown in the picture).
<P>
Distances 
between linked computers in the network are shown in feet.
<P>
<center><img src=216img1.gif></center>
<P>
For various reasons it is desirable to minimize the length of cable used.
<P>
<P>
Your problem is to determine how the computers should be connected into such 
a chain to minimize the total amount of cable needed. In the installation 
being constructed, the cabling will run beneath the floor, so the amount of 
cable used to join 2 adjacent computers on the network will be equal to the 
distance between the computers plus 16 additional feet of cable to connect 
from the floor to the computers and provide some slack for ease of 
installation.
<P>
<P>
The picture below shows the optimal way of connecting the computers shown
above, and the total length of cable required for this configuration is 
(4+16)+ (5+16) + (5.83+16) + (11.18+16) = 90.01 feet.
<P>
<center><img src=216img2.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of a series of data sets. Each data set will 
begin with a line consisting of a single number indicating the number of 
computers in a network. Each network has at least 2 and at most 8 computers. 
A value of 0 for the number of computers indicates the end of input.
<P>
After 
the initial line in a data set specifying the number of computers in a 
network, each additional line in the data set will give the coordinates of a 
computer in the network. These coordinates will be integers in the range 0 
to 150. No two computers are at identical locations and each computer will 
be listed once.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each network should include a line which tells the number of 
the network (as determined by its position in the input data), and one line 
for each length of cable to be cut to connect each adjacent pair of 
computers in the network. The final line should be a sentence indicating the 
total amount of cable used.
<P>
<P>
<B>In listing the lengths of cable to be cut,
traverse the network from one end to the other</B>. (It makes no difference at
which end you start.) Use a format similar to the one shown in the sample 
output, with a line of asterisks separating output for different networks 
and with distances in feet printed to 2 decimal places.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6
5 19
55 28
38 101
28 62
111 84
43 116
5
11 27
84 99
142 81
88 30
95 38
3
132 73
49 86
72 111
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>**********************************************************
Network #1
Cable requirement to connect (5,19) to (55,28) is 66.80 feet.
Cable requirement to connect (55,28) to (28,62) is 59.42 feet.
Cable requirement to connect (28,62) to (38,101) is 56.26 feet.
Cable requirement to connect (38,101) to (43,116) is 31.81 feet.
Cable requirement to connect (43,116) to (111,84) is 91.15 feet.
Number of feet of cable required is 305.45.
**********************************************************
Network #2
Cable requirement to connect (11,27) to (88,30) is 93.06 feet.
Cable requirement to connect (88,30) to (95,38) is 26.63 feet.
Cable requirement to connect (95,38) to (84,99) is 77.98 feet.
Cable requirement to connect (84,99) to (142,81) is 76.73 feet.
Number of feet of cable required is 274.40.
**********************************************************
Network #3
Cable requirement to connect (132,73) to (72,111) is 87.02 feet.
Cable requirement to connect (72,111) to (49,86) is 49.97 feet.
Number of feet of cable required is 136.99.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
217||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Radio Direction Finder</TITLE>
<META NAME="description" CONTENT="Radio Direction Finder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Radio Direction Finder</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A boat with a directional antenna can determine its present position with 
the help of readings from local beacons. Each beacon is located at a known 
position and emits a unique signal. When a boat detects a signal, it rotates 
its antenna until the signal is at maximal strength. This gives a relative 
bearing to the position of the beacon. Given a previous beacon reading (the 
time, the relative bearing, and the position of the beacon), a new beacon 
reading is usually sufficient to determine the boat's present position. You
are to write a program to determine, when possible, boat positions from 
pairs of beacon readings.
<P>
<P>
For this problem, the positions of beacons and boats are relative to a 
rectangular coordinate system. The positive <I>x</I>-axis points east; the positive
<I>y</I>-axis points north. The course is the direction of travel of the boat and
is measured in degrees clockwise from north. That is, north is 0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > , east is
90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > , south is 180 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > , and west is 270 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > . The relative bearing of a beacon is
given in degrees clockwise relative to the course of the boat. A boat's
antenna cannot indicate on which side the beacon is located. A relative 
bearing of 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   >  means that the beacon is toward 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   >  or 270 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > .
<P>
 <IMG WIDTH=460 HEIGHT=335 ALIGN=BOTTOM ALT="tex2html_wrap66" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > 
 <IMG WIDTH=256 HEIGHT=57 ALIGN=BOTTOM ALT="tex2html_wrap68" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > <H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of several datasets. The first line of each dataset is an integer specifying the number of beacons (at 
most 30). Following that is a line for each beacon. Each of those lines 
begins with the beacon's name (a string of 20 or fewer alphabetic
characters), the <I>x</I>-coordinate of its position, and the <I>y</I>-coordinate of its
position. These fields are single-space separated.
<P>
<P>
Coming after the lines of beacon information is an integer specifying a
number of boat scenarios to follow. A boat scenario consists of three lines, 
one for velocity and two for beacon readings.
<P>
<P>
<P> <IMG WIDTH=720 HEIGHT=120 ALIGN=BOTTOM ALT="tabular28" SRC="http://uva.onlinejudge.org/external/2/217img1.gif"   > <P>
<P>
<P>
All times are given in minutes since midnight measured over a single 24-hour 
period. The speed is the distance (in units matching those on the 
rectangular coordinate system) over time. The second line of a scenario 
gives the first beacon reading as the time of the reading (an integer), the 
name of the beacon, and the angle of the reading as measured from the boat's
course. These 3 fields have single space separators. The third line gives 
the second beacon reading. The time for that reading will always be at least 
as large as the time for the first reading.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each scenario, your program should print the scenario number (<TT>Scenario 
1</TT>, <TT>Scenario 2</TT>, etc.) and a message indicating the position (rounded to 2 
decimal places) of the boat as of the time of the <I>second</I> beacon reading. If
it is impossible to determine the position of the boat, the message should 
say ``<TT>Position cannot be determined</TT>.&quot; Sample input and corresponding correct
output are shown below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
First 2.0 4.0
Second 6.0 2.0
Third 6.0 7.0
Fourth 10.0 5.0
2
0.0 1.0
1 First 270.0
2 Fourth 90.0
116.5651 2.2361
4 Third 126.8699
5 First 319.3987
4
First 2.0 4.0
Second 6.0 2.0
Third 6.0 7.0
Fourth 10.0 5.0
1
0.0 1.0
1 First 270.0
2 Fourth 90.0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Scenario 1: Position cannot be determined
Scenario 2: Position is (6.00, 5.00)
Scenario 3: Position cannot be determined
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
218||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Moth Eradication</TITLE>
<META NAME="description" CONTENT="Moth Eradication">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Moth Eradication</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Entomologists in the Northeast have set out traps to determine the influx of 
Jolliet moths into the area. They plan to study eradication programs that 
have some potential to control the spread of the moth population.
<P>
<P>
The study calls for organizing the traps in which moths have been caught 
into compact regions, which will then be used to test each eradication 
program. A region is defined as the polygon with the minimum length 
perimeter that can enclose all traps within that region. For example, the 
traps (represented by dots) of a particular region and its associated 
polygon are illustrated below.
<P>
<center><img src=218img2.gif></center>
<P>
You must write a program that can take as input the locations of traps in a 
region and output the locations of traps that lie on the perimeter of the 
region as well as the length of the perimeter.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain records of data for several regions. The first 
line of each record contains the number (an integer) of traps for that 
region. Subsequent lines of the record contain 2 real numbers that are the 
<I>x</I>- and <I>y</I>-coordinates of the trap locations. Data within a single record will
not be duplicated. End of input is indicated by a region with 0 traps.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for a single region is displayed on at least 3 lines:
<P>
<P>
<P> <IMG WIDTH=696 HEIGHT=234 ALIGN=BOTTOM ALT="tabular26" SRC="http://uva.onlinejudge.org/external/2/218img1.gif"   > <P>
<P>
<P>
<P>
One blank line must separate output from consecutive input records.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
1 2
4 10
5 12.3
6
0 0
1 1
3.1 1.3
3 4.5
6 2.1
2 -3.2
7
1 0.5
5 0
4 1.5
3 -0.2
2.5 -1.5
0 0
2 2
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Region #1:
(1.0,2.0)-(4.0,10.0)-(5.0,12.3)-(1.0,2.0)
Perimeter length = 22.10

Region #2:
(0.0,0.0)-(3.0,4.5)-(6.0,2.1)-(2.0,-3.2)-(0.0,0.0)
Perimeter length = 19.66

Region #3:
(0.0,0.0)-(2.0,2.0)-(4.0,1.5)-(5.0,0.0)-(2.5,-1.5)-(0.0,0.0)
Perimeter length = 12.52</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
219||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Department of Redundancy Department</TITLE>
<META NAME="description" CONTENT="Department of Redundancy Department">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Department of Redundancy Department</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
When designing tables for a relational database, a functional dependency 
(FD) is used to express the relationship between the different fields. A 
functional dependency is concerned with the relationship of values of one 
set of fields to those of another set of fields.
<P>
<P>
The notation <TT>X-&gt;Y</TT> is used
to denote that when supplied values to the field(s) in set <TT>X</TT>, the assigned
value for each field in set <TT>Y</TT> can be determined. For example, if a database
table is to contain fields for
the <I>social security number</I> (<TT>S</TT>), <I>name</I> (<TT>N</TT>),
<I>address</I> (<TT>A</TT>), and <I>phone</I> (<TT>P</TT>) and each person has
been assigned a unique value
for <TT>S</TT>, the <TT>S</TT> field functionally determines
the <TT>N</TT>, <TT>A</TT> and <TT>P</TT> fields. This is
written as <TT>S-&gt;NAP</TT>.
<P>
<P>
Develop a program that will identify each redundant FD in each input group 
of FDs. An FD is redundant if it can be derived using other FDs in the 
group.
<P>
For example, if the group contains the FDs <TT>A-&gt;B</TT>, <TT>B-&gt;C</TT>,
and <TT>A-&gt;C</TT>, then
the third FD is redundant since the field set <TT>C</TT> can be derived using the
first two. (The <TT>A</TT> fields determine values for the <TT>B</TT> fields, which in turn
determine values for the fields in <TT>C</TT>.) In the
group <TT>A-&gt;B</TT>, <TT>B-&gt;C</TT>, <TT>C-&gt;A</TT>, <TT>A-&gt;C</TT>,
<TT>C-&gt;B</TT>, and <TT>B-&gt;A</TT>, all the FDs are redundant.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains an arbitrary number of groups of FDs. Each group is 
preceded by a line containing an integer no larger than 100 specifying the 
number of FDs in that group. A group with zero FDs indicates the end of the 
input.
<P>
Each FD in the group appears on a separate line containing two non-empty lists of field names separated by the characters <TT>-</TT> and <TT>&gt;</TT>. The lists of
field names contain only uppercase alphabetic characters. Functional 
dependency lines contain no blanks or tabs. There are no trivially redundant 
FDs (for example, <TT>A-&gt;A</TT>).
<P>
For identification purposes, groups are numbered
sequentially, starting with 1; the FDs are also numbered sequentially, 
starting with 1 in each group.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each group, in order, your program must identify the group, each 
redundant FD in the group, and a sequence of the other FDs in the group 
which were used to determine the indicated FD is redundant. If more than one 
sequence of FDs can be used to show another FD is redundant, any such 
sequence is acceptable, even if it is not the shortest proof sequence. Each 
FD in an acceptable proof sequence must, however, be necessary.
<P>
If a group 
of FDs contains no redundancy, display <TT>No redundant FDs.</TT>
<P>
There should be a blank line after every test case
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
A-&gt;BD
BD-&gt;C
A-&gt;C
6
P-&gt;RST
VRT-&gt;SQP
PS-&gt;T
Q-&gt;TR
QS-&gt;P
SR-&gt;V
5
A-&gt;B
A-&gt;C
B-&gt;D
C-&gt;D
A-&gt;D
3
A-&gt;B
B-&gt;C
A-&gt;D
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Set number 1
     FD 3 is redundant using FDs: 1 2

Set number 2
     FD 3 is redundant using FDs: 1
     FD 5 is redundant using FDs: 4 6 2

Set number 3
     FD 5 is redundant using FDs: 1 3
          --OR--
     FD 5 is redundant using FDs: 2 4

Set number 4
     No redundant FDs.
     
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
220||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Othello</TITLE>
<META NAME="description" CONTENT="Othello">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Othello</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Othello is a game played by two people on an 8 x 8 board, using disks that 
are white on one side and black on the other. One player places disks with 
the white side up and the other player places disks with the black side up. 
The players alternate placing one disk on an unoccupied space on the board. 
In placing a disk, the player <B>must</B> bracket at least one of the other color
disks. Disks are bracketed if they are in a straight line horizontally, 
vertically, or diagonally, with a disk of the current player's color at each
end of the line. When a move is made, <B>all</B> the disks that were bracketed are
changed to the color of the player making the move. (It is possible that 
disks will be bracketed across more than one line in a single move.)
<P>
 <IMG ALIGN=BOTTOM ALT="tex2html_wrap73" SRC="http://uva.onlinejudge.org/external/2/220img1.gif"   > 
 <IMG WIDTH=196 HEIGHT=166 ALIGN=BOTTOM ALT="tex2html_wrap75" SRC="http://uva.onlinejudge.org/external/2/220img1.gif"   > 
<P>
Write a program to read a series of Othello games. The first line of the 
input is the number of games to be processed. Each game consists of a board 
configuration followed by a list of commands. The board configuration 
consists of 9 lines. The first 8 specify the current state of the board. 
Each of these 8 lines contains 8 characters, and each of these characters 
will be one of the following:
<P>
<PRE><TT> 
		    `<TT>-</TT>' 		 indicating an unoccupied square
<P>
		    `<TT>B</TT>' 		 indicating a square occupied by a black disk
<P>
		    `<TT>W</TT>' 		 indicating a square occupied by a white disk
<P>
</TT></PRE>
<P>
The ninth line is either a `<TT>B</TT>' or a `<TT>W</TT>' to indicate which is the current
player. You may assume that the data is legally formatted.
<P>
<P>
The commands are to list all possible moves for the current player, make a 
move, or quit the current game. There is one command per line with no blanks 
in the input. Commands are formatted as follows:
<P>
<DL ><DT><STRONG><B>List all possible moves for the current player.</B></STRONG>
<DD> The command
is an `<TT>L</TT>' in
the first column of the line. The program should go through the board and 
print all legal moves for the current player in the format (<I>x</I>,<I>y</I>) where <I>x</I>
represents the row of the legal move and <I>y</I> represents its column. These
moves should be printed in row major order which means:
<P>
<DL COMPACT><DT><STRONG>1)</STRONG>
<DD> all legal moves in row number <I>i</I> will be printed before any legal
         move in row number <I>j</I> if <I>j</I> is greater than <I>i</I>
<DT><STRONG>and 2)</STRONG>
<DD> if there is more than one legal move in row number <I>i</I>, the moves
         will be printed in ascending order based on column number.
<P>
 </DL>
<P>
All legal moves should be put on one line. If there is no legal move
because it is impossible for the current player to bracket any pieces, 
the program should print the message ``<TT>No legal move.</TT>&quot;
<P>
<DT><STRONG><B>Make a move.</B></STRONG>
<DD> The command is an `<TT>M</TT>' in the first column of the line,
followed by 2 digits in the second and third column of the line. The 
digits are the row and the column of the space to place the piece of the 
current player's color, <I>unless the current player has no legal move</I>. If
the current player has no legal move, the current player is first changed 
to the other player and the move will be the move of the new current 
player. You may assume that the move is then legal. You should record the 
changes to the board, including adding the new piece and changing the 
color of all bracketed pieces. At the end of the move, print the number 
of pieces of each color on the board in the
format ``<TT>Black - xx  White - yy</TT>&quot; where <TT>xx</TT> is the number
of black pieces on the board and <TT>yy</TT> is the
number of white pieces on the board. After a move, the current player 
will be changed to the player that did not move.
<P>
<DT><STRONG><B>Quit the current game.</B></STRONG>
<DD> The command will be a `<TT>Q</TT>' in the first column of the
line. At this point, print the final board configuration using the same 
format as was used in the input. This terminates input for the current 
game.
<P>
 </DL>
<P>
You may assume that the commands will be syntactically correct. Put one 
blank line between output from separate games and no blank lines anywhere 
else in the output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
--------
--------
--------
---WB---
---BW---
--------
--------
--------
W
L
M35
L
Q
WWWWB---
WWWB----
WWB-----
WB------
--------
--------
--------
--------
B
L
M25
L
Q</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>(3,5) (4,6) (5,3) (6,4)
Black -  1 White -  4
(3,4) (3,6) (5,6)
--------
--------
----W---
---WW---
---BW---
--------
--------
--------

No legal move.
Black -  3 White - 12
(3,5)
WWWWB---
WWWWW---
WWB-----
WB------
--------
--------
--------
--------</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
221||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Urban Elevations</TITLE>
<META NAME="description" CONTENT="Urban Elevations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Urban Elevations</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
An elevation of a collection of buildings is an orthogonal projection of the 
buildings onto a vertical plane. An external elevation of a city would show 
the skyline and the faces of the ``visible&quot; buildings of the city as viewed
from outside the city from a certain direction. A southern elevation shows 
no sides; it shows the perfectly rectangular faces of buildings or parts of 
faces of buildings not obstructed on the south by taller buildings. For this 
problem, you must write a program that determines which buildings of a city 
are visible in a southern elevation.
<P>
<P>
For simplicity, assume all the buildings for the elevation are perfect 
rectangular solids, each with two sides that run directly east-west and two 
running directly north-south. Your program will find the buildings that 
appear in a southern elevation based on knowing the positions and heights of 
each city building. That data can be illustrated by a map of the city as in 
the diagram on the left below. The southern elevation for that city is 
illustrated in the diagram on the right.
<P>
<center><img src=221img3.gif>
<dd><font color=#0080C0>(The shadow buildings are visible in a southern elevation)</font></center>
<P>
<H2><FONT COLOR=#0070E8><A NAME=" >Input</A></FONT></H2>
Input for your program consists of the numeric description of maps of 
several cities. The first line of each map contains the number of buildings 
in the city (a non-negative integer less than 101). Each subsequent line of 
a map contains data for a single building - 5 real numbers separated by
spaces in the following order:
<P>
<PRE><TT> 
		 <I>x</I>-coordinate of the southwest corner
<P>
		 <I>y</I>-coordinate of the southwest corner
<P>
		 width of the building (length of the south side)
<P>
		 depth of the building (length of the west side)
<P>
		 height of the building
<P>
</TT></PRE>
<P>
Each map is oriented on a rectangular coordinate system so that the positive 
<I>x</I>-axis points east and the positive <I>y</I>-axis points north. Assume that all
input for each map corresponds to a legitimate map (the number of buildings 
is the same as the number of subsequent lines of input for the map; no two 
buildings in a single map overlap). Input is terminated by the number 0 
representing a map with no buildings.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Buildings are numbered according to where their data lines appear in the 
map's input data - building #1 corresponding to the first line of building
data, building #2 data to the next line, and building #<I>n</I> to the <I>n</I>th line of
building data for that map. (Buildings on subsequent maps also begin their 
numbering with 1.)
<P>
<P>
For each map, output begins with line identifying the map (<TT>map #1</TT>, <TT>map #2</TT>,
etc.) On the next line the numbers of the visible buildings as they appear 
in the southern elevation, ordered south-to-north, west-to-east. This means 
that if building <I>n</I> and building <I>m</I> are visible buildings and if the southwest
corner of building <I>n</I> is west of the southwest corner of building <I>m</I>, then
number <I>n</I> is printed before number <I>m</I>. If building <I>n</I> and building <I>m</I> have the
same <I>x</I>-coordinate for their southwest corners and if building <I>n</I> is south of
building <I>m</I>, then the number <I>n</I> is printed before the number <I>m</I>.
<P>
<P>
For this
program, a building is considered visible whenever the part of its southern 
face that appears in the elevation has strictly positive area. One blank 
line must separate output from consecutive input records.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>14
160 0 30 60 30
125 0 32 28 60
95 0 27 28 40
70 35 19 55 90
0 0 60 35 80
0 40 29 20 60
35 40 25 45 80
0 67 25 20 50
0 92 90 20 80
95 38 55 12 50
95 60 60 13 30
95 80 45 25 50
165 65 15 15 25
165 85 10 15 35
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>For map #1, the visible buildings are numbered as follows:
5 9 4 3 10 2 1 14</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
222||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Budget Travel</TITLE>
<META NAME="description" CONTENT="Budget Travel">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Budget Travel</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
An American travel agency is sometimes asked to estimate the minimum cost
of traveling from one city to another by automobile. The travel agency
maintains lists of many of the gasoline stations along the popular routes.
The list contains the location
and the current price per gallon of gasoline for each station on the list.
<P>
<P>
In order to simplify the process of estimating this cost, the agency uses
the following rules of thumb about the behavior of automobile drivers.
<P>
<UL><LI> A driver never stops at a gasoline station when the gasoline tank
contains more than half of its capacity unless the car cannot get to the
following station (if there is one) or the destination with the amount of
gasoline in the tank.<LI> A driver always fills the gasoline tank completely at every gasoline
station stop.<LI> When stopped at a gasoline station, a driver will spend $2.00 on
snacks and goodies for the trip.<LI> A driver needs no more gasoline than necessary to reach a gasoline
station or the city limits of the destination. There is no need for a ``safety
margin.&quot;<LI> A driver always begins with a full tank of gasoline.<LI> The amount paid at each stop is rounded to the nearest cent
(where 100 cents make a dollar).
</UL>
<P>
You must write a program that estimates the minimum amount of money that a
driver will pay for gasoline and snacks to make the trip.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Program input will consist of several data sets corresponding to different
trips. Each data set consists of several lines of information. The first
2 lines give information about the origin and destination. The remaining
lines of the data set represent the gasoline stations along the route,
with one line per gasoline station. The following shows the exact format
and meaning of the input data for a single data set.
<P>
<DL ><DT><STRONG>Line 1:</STRONG>
<DD> One real number - the distance from the origin to the destination
<DT><STRONG>Line 2:</STRONG>
<DD> Three real numbers followed by an integer
<P>
<UL><LI> The first real number is the gallon capacity of the automobile's fuel tank.<LI> The second is the miles per gallon that the automobile can travel.<LI> The third is the cost in dollars of filling the automobiles tank in the origination city.<LI> The integer (less than 51) is the number of gasoline stations along the route.
</UL>
<P>
<DT><STRONG>Each remaining line:</STRONG>
<DD> Two real numbers
<P>
<UL><LI> The first is the distance in miles from the origination city to the gasoline station.<LI> The second is the price (in cents) per gallon of gasoline sold at that station.
</UL> 
 </DL>
<P>
All data for a single data set are positive. Gasoline stations along a route
are arranged in nondescending order of distance from the origin. No gasoline
station along the route is further from the origin than the distance from
the origin to the destination.
There are always enough stations appropriately placed along the each route
for any car to be able to get from the origin to the destination.
<P>
<P>
The end of data is indicated by a line containing a single
negative number.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input data set, your program must print the data set number and a
message indicating the minimum total cost of the gasoline and snacks
rounded to the nearest cent. That total cost must include the initial cost of
filling the tank at the origin.
Sample input data for 2 separate data sets and the corresponding correct
output follows.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>475.6
11.9 27.4 14.98 6
102.0 99.9
220.0 132.9
256.3 147.9
275.0 102.9
277.6 112.9
381.8 100.9
516.3
15.7 22.1 20.87 3
125.4 125.9
297.9 112.9
345.2 99.9
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Data Set #1
minimum cost = $27.31
Data Set #2
minimum cost = $38.09</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
223||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Classifying Lots in a Subdivision</TITLE>
<META NAME="description" CONTENT="Classifying Lots in a Subdivision">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Classifying Lots in a Subdivision</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A subdivision consists of plots of land with each plot having a polygonal
boundary. A surveyor has surveyed the plots, and has given the location of
all boundary lines. That is the only information available, however, and
more information is desired
about the plots in the subdivision. Specifically,
planners wish to classify the lots by the number of boundary line segments
(<I>B</I>=3,4,5,...) on the perimeter of the lots.
<P>
<P>
Write a program that will take as input the surveyor's data and produce
as output the desired information about the nature of the lots in the
subdivision.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several data sets. Each data set begins with a
line containing the number of line segments ( <IMG WIDTH=96 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/223img1.gif"   > ) in the survey.
The following <I>N</I> lines each contain four integers representing the Cartesian
(<I>x</I>,<I>y</I>) coordinate pairs for
the <I>N</I> points of a boundary line segment. The input file is terminated with a 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each data set, provide output listing the number of lots in each
classification of boundary line segment counts (<I>B</I>=3,4,5,...). Do not include in
your output those cases in which the classification has no members. The
output for each data set will begin with a line containing an
appropriately labeled data set number. Output for successive data sets
will be separated by a blank line.
<P>
<P>
Figures 1 and 2 show two hypothetical subdivisions. In Figure 1 there are 12
boundary line segments, and in Figure 2 there are 27. The sample input file
below contains the data for these two test cases. The plot in the upper left
hand corner of Figure 2 has one line running from (16,16) to (17,18) and
another from (17,18) to (19,22). Thus this lot has a perimeter comprised
of 5 boundary line segments, though geometrically the lot is a 4-sided
region. Similarly the perimeter of the plot in the upper left hand corner
of Figure 1 is comprised of 6 boundary line segments, though the lot is
pentagonal in shape.
<P>
<P>
<P>
 <IMG ALIGN=BOTTOM ALT="tex2html_wrap53" SRC="http://uva.onlinejudge.org/external/2/223img1.gif"   > 
 <IMG ALIGN=BOTTOM ALT="tex2html_wrap55" SRC="http://uva.onlinejudge.org/external/2/223img1.gif"   > 
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>12
10 41 15 41
15 41 20 41
10 36 15 36
15 36 17 36
10 31 15 31
15 31 20 31
10 41 10 36
10 36 10 31
15 41 17 34
17 34 17 36
15 36 15 31
20 41 20 31
27
10 22 19 22
19 22 23 22
23 22 28 22
28 22 37 22
10 16 16 16
17 16 23 16
23 16 24 16
24 15 28 15
28 15 31 15
10 10 17 10
17 10 24 10
24 10 31 10
31 10 37 10
10 22 10 16
10 16 10 10
17 18 17 16
17 16 17 10
24 16 24 15
24 15 24 10
23 22 23 16
28 22 28 15
31 15 31 10
37 22 37 17
37 17 37 10
16 16 17 18
17 18 19 22
31 15 37 17
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1
Number of lots with perimeter consisting of 4 surveyor's lines = 1
Number of lots with perimeter consisting of 6 surveyor's lines = 1
Number of lots with perimeter consisting of 7 surveyor's lines = 1
Total number of lots = 3

Case 2
Number of lots with perimeter consisting of 4 surveyor's lines = 1
Number of lots with perimeter consisting of 5 surveyor's lines = 4
Number of lots with perimeter consisting of 6 surveyor's lines = 3
Total number of lots = 8</PRE>
<P>
<P>
<P>
<EM><B>Assumptions:</B>
<PRE><TT> 
1. 	Each data set corresponds to a rectangular subdivision
	(as in Figures 1 and 2). The boundaries
<P>
	of the rectangular subdivision are
	parallel to the x and y axes.
<P>
2. 	All coordinates in the input file are positive integers in the
	range 1 to 10000.
<P>
3. 	Boundary line segments in the input file do not extend past
	corners of lots. For example,
<P>
	in Figure 1 the surveyor must survey from the
	point (10,41) to (15,41) and
<P>
	from (15,41) to (20,41) rather than surveying
	the entire line (10,41) to (20,41).
<P>
4. 	At least one boundary line segment in each lot lies on the
	subdivisions bounding rectangle.
<P>
</TT></PRE>
</EM>
<P>
</BODY>
</HTML>

______________________________________________________
224||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Kissin' Cousins</TITLE>
<META NAME="description" CONTENT="Kissin' Cousins">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Kissin' Cousins</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Oxford English Dictionary defines cousin as follows:
<BLOCKQUOTE> <B>cous'in</B> (kuzn), n. (Also <I>first cousin</I>) child of
one's uncle or aunt;
<I>my second (third...) cousin</I>, my parents first (second...) cousins
child; <I>my
first cousin once (twice...) removed</I>, my first cousin's child (grandchild...),
also my parent's (grandparent's...) first cousin.
</BLOCKQUOTE>
<P>
Put more precisely, any two persons whose closest common ancestor is (<I>m</I>+1)
generations away from one person and (<I>m</I>+1)+<I>n</I> generations away from the other
are <I>m</I>th cousins <I>n</I>ce removed. Normally,  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline86" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  and  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline88" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > , but being
used to computers counting from
0, in this problem we require  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline90" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  and  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline88" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > . This extends the normal
definition so that siblings are zeroth cousins. We write such a relationship
as <TT>cousin</TT>-<I>m</I>-<I>n</I>.
<P>
<P>
If one of the persons is an ancestor of the other, <I>p</I> generations away
where  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline100" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > , they have a relationship <TT>descendant</TT>-<I>p</I>.
<P>
<P>
A relationship <TT>cousin</TT>- <IMG WIDTH=20 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline104" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > - <IMG WIDTH=16 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline106" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  is <I>closer</I> than a
relationship <TT>cousin</TT>- <IMG WIDTH=20 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline108" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > - <IMG WIDTH=16 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline110" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > 
if  <IMG WIDTH=66 HEIGHT=19 ALIGN=MIDDLE ALT="tex2html_wrap_inline112" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  or (<i>m1=m2</i>  and  <IMG WIDTH=57 HEIGHT=19 ALIGN=MIDDLE ALT="tex2html_wrap_inline116" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > ). A relationship
<TT>descendant</TT>- <IMG WIDTH=16 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline118" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  is <I>closer</I>
than a relationship <TT>descendant</TT>- <IMG WIDTH=16 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline120" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   >  if  <IMG WIDTH=56 HEIGHT=20 ALIGN=MIDDLE ALT="tex2html_wrap_inline122" SRC="http://uva.onlinejudge.org/external/2/224img1.gif"   > .
A <TT>descendant</TT>-<I>p</I> relationship is
always closer than a <TT>cousin</TT>-<I>m</I>-<I>n</I> relationship.
<P>
<P>
Write a program that accepts definitions of simple relationships between
individuals and displays the closest <TT>cousin</TT> or <TT>descendant</TT>
relationship, if any, which exists between arbitrary pairs of individuals.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input consists of several datasets. Each line in the datasets begin with one of the
characters <TT>#</TT>, <TT>R</TT>, <TT>F</TT> or <TT>E</TT>.
<P>
<P>
<P>
`<TT>#</TT>' lines are comments. Ignore them.
<P>
<P>
<P>
`<TT>R</TT>' lines direct your program to record a relationship between two
different individuals. The first 5 characters following the `<TT>R</TT>' constitute
the name of the first person; the next 5 characters constitute the name of
the second. Case is significant.
Following the names, possibly separated from them by blanks, is a non-negative
 integer, <I>k</I>, defining the relationship. If <I>k</I> is 0, then the named individuals
 are siblings. If <I>k</I> is 1, then the first named person is a child of the second.
 If <I>k</I> is 2, then
 the first named person is a grandchild of the second, and so
 forth. Ignore anything on the line following the integer.
<P>
<P>
<P>
`<TT>F</TT>' lines are queries; your program is to find the closest relationship,
if any, which exists between the two different persons whose 5 character
names follow the <TT>F</TT>. Ignore anything on the line following the second
name. A query should be answered
only with regard to `<TT>R</TT>' lines which precede the query in the input.
<P>
<P>
<P>
There will be one `<TT>E</TT>' line to mark the end of the dataset. Two consecutive <TT>E</TT>'s will mark the end of the input. Ignore
anything on or after these lines.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each `<TT>F</TT>' line, your program is to report the closest relationship that
exists between the two persons named <I>aaaaa</I> and <I>bbbbb</I> in one of the following
formats:
<P>
<I>aaaaa</I> <TT>and</TT> <I>bbbbb</I> <TT>are descendant</TT>-<I>p</I>.
<P>
<I>aaaaa</I> <TT>and</TT> <I>bbbbb</I> <TT>are cousin</TT>-<I>m</I>-<I>n</I>.
<P>
with <I>m</I>, <I>n</I> and <I>p</I> replaced by integers calculated as defined above. If no
relationship exists between the pair, your program is to output the following:
<P>
<I>aaaaa</I> <TT>and</TT> <I>bbbbb</I> <TT>are not related.</TT>
<p> Print a blank line after each dataset.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE># A Comment!
RFred Joe  1 Fred is Joe's son
RFran Fred 2
RJake Fred 1
RBill Joe  1
RBill Sue  1
RJean Sue  1
RJean Don  1
RPhil Jean 3
RStan Jean 1
RJohn Jean 1
RMary Don  1
RSusanMary 4
RPeg  Mary 2
FFred Joe
FJean Jake
FPhil Bill
FPhil Susan
FJake Bill
FDon  Sue
FStan John
FPeg  John
FJean Susan
FFran Peg
FJohn Avram
RAvramStan  99
FJohn Avram
FAvramPhil
E
E
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Fred  and Joe   are descendant-1.
Jean  and Jake  are not related.
Phil  and Bill  are cousin-0-3.
Phil  and Susan are cousin-3-1.
Jake  and Bill  are cousin-0-1.
Don   and Sue   are not related.
Stan  and John  are cousin-0-0.
Peg   and John  are cousin-1-1.
Jean  and Susan are cousin-0-4.
Fran  and Peg   are not related.
John  and Avram are not related.
John  and Avram are cousin-0-99.
Avram and Phil  are cousin-2-97.</PRE>
<P>
<I><B>Assumption:</B>
<P>
A person is not an ancestor of himself/herself.</I>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Diagram of the Sample Input</A></FONT></H2>
<P>
<center><img src=224img15.gif></center>
</BODY>
</HTML>

______________________________________________________
225||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Golygons</TITLE>
<META NAME="description" CONTENT="Golygons">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Golygons</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Imagine a country whose cities have all their streets laid out in a regular
grid. Now suppose that a tourist with an obsession for geometry is planning
expeditions to several such cities.
<P>
<P>
Starting each expedition from the
central cross-roads of a city, the intersection labelled (0,0), our
mathematical visitor wants to set off north, south, east or west, travel one
block, and view the sights at the intersection (0,1) after going
north, (0,-1) after going south, (1,0) after going east or (-1,0) after
 going west. Feeling ever more enthused by the regularity of the city, our
 mathematician would like to walk a longer segment before stopping next,
 going two blocks.
<P>
What's more, our visitor doesn't want to carry on in the
 same direction as before, nor visit the same point twice,
 nor wishes to double back, so will make a 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/2/225img1.gif"   >  turn either left or right.
 The next segment should be three blocks, again followed by a right-angle
 turn, then four, five, and so on with ever-increasing lengths until finally,
 at the end of the day, our
 weary traveller returns to the starting point, (0,0).
<P>
<P>
The possibly self-intersecting figure described by these geometrical
travels is called a golygon.
<P>
<P>
Unfortunately, our traveller will making these visits in the height of
 summer when road works will disrupt the stark regularity of the cities'
 grids. At some intersections there will be impassable obstructions. Luckily,
 however, the country's limited
 budget means there will never be more than 50 road works blocking the streets
of any particular city. In an attempt to gain accountability to its citizens,
the city publishes the plans of road works in advance. Our mathematician has
obtained a copy of these plans and will ensure that no golygonal trips get
mired in molten tar.
<P>
<P>
Write a program that constructs all possible golygons for a city.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Since our tourist wants to visit several cities, the input file will begin
with a line containing an integer specifying the number of cities to be
visited.
<P>
<P>
For each city there will follow a line containing a positive integer not
greater than 20 indicating the length of the longest edge of the golygon.
That will be the length of the last edge which returns the traveler to (0,0).
Following this on a new line will be an integer from 0 to 50 inclusive
which indicates how many intersections are blocked. Then there will be
this many pairs of integers, one pair per line, each pair indicating the
<I>x</I> and <I>y</I> coordinates of one blockage.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each city in the input, construct all possible golygons. 
Each golygon must be represented by a sequence of characters from the set
{n,s,e,w} on a line of its own, and they should be output in lexicographics
order.
Following the list of golygons should be a line
indicating how many solutions were
found. This line should be formatted as shown in the example output. A
blank line should appear following the output for each city.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
8
2
-2 0
6 -2
8
2
2 1
-2 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>wsenenws
Found 1 golygon(s).

Found 0 golygon(s).</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Diagram of the 1st City</A></FONT></H2>
<P>
<center><img src=225img2.gif></center>
<P>
</BODY>
</HTML>

______________________________________________________
226||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>MIDI Preprocessing</TITLE>
<META NAME="description" CONTENT="MIDI Preprocessing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">MIDI Preprocessing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
MIDI (Musical Instrument Digital Interface) is a standard for communication
involving computers and synthesized music instruments. Part of the standard
defines commands, which when transmitted to a synthesizer, begin and end the
sounding of a particular note. In this problem we will consider processing
 simple MIDI ``programs.&quot; In the following example, three simultaneous
 notes (a chord, with note numbers 60, 70 and 80) are played for 10 time
 units immediately followed by a single note (number 62)
 for 2 time units.
<P>
<PRE>       0 ON 60
       0 ON 70
       0 ON 80
       10 OFF 60
       10 OFF 80
       10 OFF 70
       10 ON 62
       12 OFF 62</PRE>
<P>
Much existing music cannot be directly translated to this program form.
Sometimes a note is already ``on&quot; when the written music indicates that it
is to be sounded again. For example:
<P>
<PRE>       0 ON 60
       10 ON 60
       12 OFF 60
       20 OFF 60</PRE>
<P>
A synthesizer will interpret this program to sound note 60 for 12 time units,
not 20 as indicated. We will not hear the separate sounding of the note at
time 10, since turning on a note that is already sounding will be ignored.
By analogy, consider turning a light on and off. If it's on,
turning it on again is ineffective. Likewise, the first time that a light
is turned off, it is off!
<P>
<P>
When a note already on is to be sounded again, the program can be ``fixed&quot; by
inserting an <TT>OFF</TT> command for that note 1 time unit before the second <TT>ON</TT>
command. Since there are already at least two <TT>OFF</TT> commands in such
circumstances, only the last of these should be retained; the other
should be eliminated from the program. The ``fixed&quot; program will cause the
synthesizer to behave as if the same note had been played twice in rapid
succession.
<P>
<P>
Another problem exists in programs that turn a note on and off at the same
time. Depending on the ordering of the events in the program, either the
note will be prematurely ended (if the <TT>OFF</TT> command appears after the <TT>ON</TT>), or
the second sounding of the note will not be heard. For example:
<P>
<PRE>       0 ON 60         0 ON 60
       10 ON 60        10 OFF 60
       10 OFF 60       10 ON 60
       20 OFF 60       20 OFF 60</PRE>
<P>
In the example on the left, the note will be turned off at time 10. The
 example on the right doesn't leave the note off long enough to allow a
 human listener to detect the ``punctuation&quot; in the sound. In both cases
 the correction is the same: move the
 <TT>OFF</TT> command so it is executed by the synthesizer 1 time unit before
 the corresponding <TT>ON</TT> command.
<P>
<P>
If an <TT>OFF</TT> command inserted 1 time unit before an <TT>ON</TT> as a result of
the ``fix&quot; occurs at exactly the same time as the preceding <TT>ON</TT>, the second <TT>ON</TT>
and the <TT>OFF</TT> that occurs at the same time should be eliminated.
<P>
<P>
Write a program that will accept an arbitrary number of MIDI programs
and ``fix&quot; them as described above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each program contains an arbitrary number of lines. Each line contains,
in order, the time that the command is sent to the synthesizer
(a non-negative integer), a command (either <TT>ON</TT> or <TT>OFF</TT>), and a note
(an integer in the range 1 to 127). These items
are separated by one or more blanks. Each program except the last is
terminated with a line containing only the integer -1. The last program is
terminated by a line containing only the integer -2.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is to be a ``fixed&quot; MIDI program in the same format as the input.
<P>
<P>
<P>
<EM><B>Assumptions</B>
<PRE><TT> 
1. 		 The <TT>ON</TT> and <TT>OFF</TT> commands will always be in upper case letters.
<P>
2. 		 The times associated with programs are in non-decreasing order.
<P>
3. 		 All notes are initially <TT>OFF</TT>.
<P>
4. 		 If different notes are to be turned on or off simultaneously, the
		 order in which the corresponding commands appear is unimportant.
<P>
5. 		 Each <TT>ON</TT> command will have a matching <TT>OFF</TT> command following it in
		 the program.
<P>
6.		 For ONE time and ONE tone, there is a maximum of 1 command ON 
		 and one command OFF.
<P>
</TT></PRE>
</EM>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0 ON 60
10 ON 60
12 OFF 60
20 OFF 60
-1
0 ON 60
5 ON 70
10 ON 60
10 OFF 60
15 OFF 70
15 ON 70
20 OFF 60
20 OFF 70
-1
0 ON 60
1 OFF 60
1 ON 60
10 OFF 60	
-2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0 ON 60
9 OFF 60
10 ON 60
20 OFF 60
-1
0 ON 60
5 ON 70
9 OFF 60
10 ON 60
14 OFF 70
15 ON 70
20 OFF 60
20 OFF 70
-1
0 ON 60
10 OFF 60
-2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
227||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Puzzle</TITLE>
<META NAME="description" CONTENT="Puzzle">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Puzzle</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A children's puzzle that was popular 30 years ago consisted of a 5x5 frame
which contained 24 small squares of equal size. A unique letter of the
alphabet was printed on each small square. Since there were only 24 squares
within the frame, the frame
also contained an empty position which was the same size as a small square.
A square could be moved into that empty position if it were immediately to
the right, to the left, above, or below the empty position. The object of the
puzzle was to slide squares into the empty position so that the frame
displayed the letters in alphabetical order.
<P>
<P>
The illustration below represents a puzzle in its original configuration and
in its configuration after the following sequence of 6 moves:
<P>
<PRE><TT> 
		 1) 		 The square above the empty position moves.
<P>
		 2) 		 The square to the right of the empty position moves.
<P>
		 3) 		 The square to the right of the empty position moves.
<P>
		 4) 		 The square below the empty position moves.
<P>
		 5) 		 The square below the empty position moves.
<P>
		 6) 		 The square to the left of the empty position moves.
<P>
</TT></PRE>
<P>
<P>
<center><img src=227img1.gif></center>
<P>
Write a program to display resulting frames given their initial configurations
and sequences of moves.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input for your program consists of several puzzles. Each is described by its
initial configuration and the sequence of moves on the puzzle. The first 5
lines of each puzzle description are the starting configuration. Subsequent
lines give the sequence of moves.
<P>
<P>
The first line of the frame display corresponds to the top line of squares
in the puzzle. The other lines follow in order. The empty position in a frame
is indicated by a blank. Each display line contains exactly 5 characters,
beginning with the character on the leftmost square (or a blank if
the leftmost square is actually the empty frame position). The display lines
will correspond to a legitimate puzzle.
<P>
<P>
The sequence of moves is represented by a sequence of As, Bs, Rs, and Ls to
denote which square moves into the empty position. A denotes that the square
above the empty position moves; B denotes that the square below the empty
position moves; L denotes that the square to the left of the empty
position moves; R denotes that the square to the right of the empty position
moves. It is possible that there is an illegal move, even when it is
represented by one of the 4 move characters. If an illegal move occurs, the
puzzle is considered to have no final configuration. This sequence of moves
may be spread over several lines, but it always ends in the digit 0. The
end of data is denoted by the character Z.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each puzzle begins with an appropriately labeled number
(<TT>Puzzle #1</TT>, <TT>Puzzle #2</TT>, etc.). If the puzzle has no final configuration, then
a message to that effect should follow. Otherwise that final configuration
should be displayed.
<P>
<P>
Format each line for a final configuration so that there is a single blank
character between two adjacent letters. Treat the empty square the same
as a letter. For example, if the blank is an interior position, then it will
appear as a sequence of 3
blanks - one to separate it from the square to the left, one for the
empty position itself, and one to separate it from the square to the right.
<P>
<P>
Separate output from different puzzle records by one blank line.
<P>
<P>
<P>
<B>Note:</B>
The first record of the sample input corresponds to the puzzle illustrated above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>TRGSJ
XDOKI
M VLN
WPABE
UQHCF
ARRBBL0
ABCDE
FGHIJ
KLMNO
PQRS 
TUVWX
AAA
LLLL0
ABCDE
FGHIJ
KLMNO
PQRS 
TUVWX
AAAAABBRRRLL0
Z</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Puzzle #1:
T R G S J
X O K L I
M D V B N
W P   A E
U Q H C F

Puzzle #2:
  A B C D
F G H I E
K L M N J
P Q R S O
T U V W X

Puzzle #3:
This puzzle has no final configuration.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
228||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Resource Allocation</TITLE>
<META NAME="description" CONTENT="Resource Allocation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Resource Allocation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A software development firm is willing to hire new programmers and to spend
more money for hardware and software systems in order to increase productivity
in its programming divisions. For lack of a better idea, management has
defined increased productivity for a division as ``incremental lines
of code&quot; that the division produces. The company needs a resource allocation
model to determine how the money and new programmers should be divided
among the divisions in order to maximize the total productivity increase.
<P>
<P>
Each programming division is limited in how effectively it can utilize any
 new resources. For example, one particular division will be able to use
 0, 3, 5, or 6 new programmers effectively. (The personnel organization within
 that division prevents it
 from being able to use 1, 2, 4, 7 or more new programmers.) This gives 4
options for allocating new programmers to that division. There are only 3
different options for allocation of additional money to that division.
Therefore, there are 12 possible allocation scenarios in this
example. For each scenario, the company has estimated the incremental lines
of code that would be produced by that division.
<P>
<P>
You must write a program that recommends a precise allocation of resources
among the divisions. For each division, your program must determine how many
new programmers and how much money should be allocated. Allocation of new
programmers and money must be made to maximize the total productivity
increase - the sum of incremental lines of code over all divisions. The total
number of programmers allocated cannot exceed the total number of programmers
that the company is willing to hire. The total amount of money cannot exceed
the total amount budgeted for the entire company. In the case where there
are multiple optimal solutions, your program may recommend any one of them.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input for your program consists of several allocation problems. All input
data are non-negative integers. The first 3 lines of input for each
problem consists of:
<P>
<PRE><TT> 
<I>d</I> 	number of programming divisions ( <IMG WIDTH=80 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   >  except when <I>d</I> is
	the end-of-file sentinel)
<P>
<I>p</I> 	total number of new programmers
<P>
<I>b</I> 	total amount of money budgeted for new computing resources
<P>
</TT></PRE>
<P>
Following those 3 lines are input records for each programming division.
The first record is for division #1, the second for division #2, etc.
Each division record is organized as follows:
<P>
<PRE><TT> 
<I>n</I> 		 	number of new programmer options ( <IMG WIDTH=82 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   > )
<P>
<IMG WIDTH=78 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   >  	   list of new programmer options (numbers are separated by blanks)
<P>
<I>k</I> 		 	number of new budget options ( <IMG WIDTH=81 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   > )
<P>
<IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   >  	    cost of each new budget option (separated by blanks)
<P>
<IMG WIDTH=40 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   > table of integers	 the (<I>i</I>, <I>j</I>) table entry is the incremental lines of code
				produced for allocation of  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/2/228img1.gif"   >  new programmers and  <IMG WIDTH=12 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/2/228img1.gif" ><br>
				additional budget
<P>
</TT></PRE>
<P>
It is possible to allocate 0 new programmers to any division and $0 for new
hardware and software - resulting in no increase in productivity for that
division. This ``null&quot; allocation will be explicitly shown.
<P>
<P>
Each allocation problem begins on a new line. The end of input is signified
by an allocation ``problem&quot; with 0 divisions. No input lines follow that
line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each problem begins with a line identifying the problem that is
solved (<TT>problem #1</TT>, <TT>problem #2</TT>, etc.). This is followed by a blank line
then 3 lines that tell the total amount of money to be spent, the total
number of new programmer to be
hired, and the total anticipated new productivity for an optimal resource
allocation.
<P>
<P>
Output for each division comes next. The first line identifies the division
by number. The remaining 3 lines indicate the division's budget, the
number of new programmers for the division, and the expected incremental lines
of code to be produced. One blank line appears between output for successive
divisions. Two blank lines appear between output for successive problems.
The exact formatting of the output is not critical, but all output must be
easy to read and well-identified.
<P>
<P>
<P>
<B>Note:</B>
A sample input file which contains one complete allocation problem is shown
below. In this problem, there are 3 programming divisions. The company is
willing to hire up to 10 new programmers and spend up to $90,000 on new
computing resources. For division #1, the expenditure of $50,000
on new computing resources and allocation of 6 new programmers would
result in the production of 40,000 incremental lines of code.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
10
90000
4
0 2 5 6
4
0 20000 50000 70000
    0   10000    20000    50000
60000   20000    10000    40000
20000   10000    30000    40000
30000   10000    40000    30000
5
0 1 3 4 8
3
0 40000 80000
    0   50000   30000
50000   40000   60000
20000   30000   50000
80000   90000   50000
30000   40000   70000
3	
0  4  6	
5	
0  50000  30000  40000  50000	
    0  30000  50000  60000  30000	
10000  20000  30000  40000  50000	
20000  30000  40000  50000  60000	
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Optimal resource allocation problem #1

Total budget: $80000
Total new programmers: 6
Total productivity increase: 210000

Division #1 resource allocation:
Budget:  $0
Programmers: 2
Incremental lines of code: 60000

Division #2 resource allocation:
Budget:  $40000
Programmers: 4
Incremental lines of code: 90000

Division #3 resource allocation:
Budget:  $40000
Programmers: 0
Incremental lines of code: 60000</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
229||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.47)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Scanner</TITLE>
<META NAME="description" CONTENT="Scanner">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Scanner</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A body scanner works by scanning a succession of horizontal slices through
the body; the slices are imaged one at a time. The image slices can be
reassembled to form a three dimensional model of the object. Write a
program to construct a two dimensional image slice using data captured
during the scan.

<P>

<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p229.eps}$
 -->
<IMG
 SRC="http://uva.onlinejudge.org/external/2/229img1.gif" 
 ALT="\epsfbox{p229.eps}">
</DIV>

<P>
The scanner consists of four arrays of sensors arranged around
a <!-- MATH
 $10\times15$
 -->
<SPAN CLASS="MATH">10&#215;15</SPAN> matrix. Array 1 consists of 10 sensors pointing to the right,
array 2 has 24 sensors pointing diagonally to the top right, array 3
has 15 sensors pointing to the top and array 4 has 24 sensors pointing
to the top left. Each sensor records the thickness of that portion of the
object directly in front of that sensor.

<P>
Readings from the arrays of sensors are recorded in counterclockwise
order. Within an array of sensors, data are also recorded counterclockwise.
A complete scan consists of 73 readings.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file begins with a line with an integer indicating the number
of image slices to follow. For each image slice, there are separate lines
with 10, 24, 15, and 24 integers representing sensor data from sensor
arrays 1 through 4 respectively. The order of the readings is indicated
in the diagram.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each slice, your program should print 10 lines of 15 cells. To
indicate that the cell represents a part of the object, print a hash
character (<TT>#</TT>) for the cell; to indicate that the cell is not a part of
the object, print a period (<TT>.</TT>). Between successive output image slices,
print a blank line. 

<P>
It is possible for the result of a scan to be ambiguous, in that
case you will have to output a blank picture as shown in the sample output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input (First one describing object above)</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
10 10 6 4 6 8 13 15 11 6
0 1 2 2 2 2 4 5 5 6 7 6 5 6 6 5 5 6 6 3 2 2 1 0
2 4 5 5 7 6 7 10 10 10 7 3 3 5 5
0 0 1 3 4 4 4 4 3 4 5 7 8 8 9 9 6 4 4 2 0 0 0 0
10 10 6 4 6 8 13 15 11 6
0 1 2 2 2 2 4 5 5 6 7 6 5 6 6 5 5 6 6 3 2 2 1 0
2 4 5 5 7 6 7 10 10 10 7 3 3 5 5
0 0 1 3 4 4 4 4 3 2 5 7 8 8 9 9 6 4 4 2 0 0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
.##########....
.##########....
....######.....
......####.....
.......####..##
.......########
#####..########
###############
..#########..##
....######.....

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2002-07-02
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
230||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Borrowers</TITLE>
<META NAME="description" CONTENT="Borrowers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Borrowers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<BLOCKQUOTE> I mean your <I>borrowers of books</I> - those mutilators of collections, spoilers of
the symmetry of shelves, and creators of odd volumes.
<P>
- (Charles Lamb, <I>Essays of Elia</I> (1823) `The Two Races of Men')
</BLOCKQUOTE>
<P>
Like Mr. Lamb, librarians have their problems with borrowers too. People don't
put books back where they should. Instead, returned books are kept at the main 
desk until a librarian is free to replace them in the right places on the 
shelves. Even for librarians, putting the right book in the right place can be 
very time-consuming. But since many libraries are now computerized, you can 
write a program to help.
<P>
<P>
When a borrower takes out or returns a book, the computer keeps a record of
the title. Periodically, the librarians will ask your program for a list of 
books that have been returned so the books can be returned to their correct 
places on the shelves. Before they are returned to the shelves, the returned 
books are sorted by author and then title using the ASCII collating sequence. 
Your program should output the list of returned books in the same order as 
they should appear on the shelves. For each book, your program should tell the 
librarian which book (including those previously shelved) is already on the 
shelf before which the returned book should go.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
First, the stock of the library will be listed, one book per line, in no 
particular order. Initially, they are all on the shelves. No two books have 
the same title. The format of each line will be:
<P>
``<I>title</I>&quot; <TT>by</TT> <I>author</I>
<P>
The end of the stock listing will be marked by a line containing only the 
word:
<P>
<TT>END</TT>
<P>
Following the stock list will be a series of records of books borrowed and 
returned, and requests from librarians for assistance in restocking the 
shelves. Each record will appear on a single line, in one of the following 
formats:
<P>
<TT>BORROW</TT> ``<I>title</I>&quot;
<P>
<TT>RETURN</TT> ``<I>title</I>&quot;
<P>
<TT>SHELVE</TT>
<P>
The list will be terminated by a line containing only the word:
<P>
<TT>END</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Each time the <TT>SHELVE</TT> command appears, your program should output a series of
instructions for the librarian, one per line, in the format:
<P>
<TT>Put</TT> `` <IMG WIDTH=38 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/2/230img1.gif"   > &quot; <TT>after</TT> `` <IMG WIDTH=39 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/2/230img1.gif"   > &quot;
<P>
or, for the special case of the book being the first in the collection:
<P>
<TT>Put</TT> ``<I>title</I>&quot; <TT>first</TT>
<P>
After the set of instructions for each <TT>SHELVE</TT>, output a line containing only 
the word:
<P>
<TT>END</TT>
<P>
<P>
<P>
<B>Assumptions &amp; Limitations:</B>
<EM>
<P>
1. A title is at most 80 characters long.
<P>
2. An author is at most 80 characters long.
<P>
3. A title will not contain the double quote <TT>(&quot;)</TT> character.
</EM>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>&quot;The Canterbury Tales&quot; by Chaucer, G.
&quot;Algorithms&quot; by Sedgewick, R.
&quot;The C Programming Language&quot; by Kernighan, B. and Ritchie, D.
END
BORROW &quot;Algorithms&quot;
BORROW &quot;The C Programming Language&quot;
RETURN &quot;Algorithms&quot;
RETURN &quot;The C Programming Language&quot;
SHELVE
END</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Put &quot;The C Programming Language&quot; after &quot;The Canterbury Tales&quot;
Put &quot;Algorithms&quot; after &quot;The C Programming Language&quot;
END</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
231||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Testing the CATCHER</TITLE>
<META NAME="description" CONTENT="Testing the CATCHER">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Testing the CATCHER</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A military contractor for the Department of Defense has just completed a 
series of preliminary tests for a new defensive missile called the CATCHER 
which is capable of intercepting multiple incoming offensive missiles. The 
CATCHER is supposed to be a remarkable defensive missile. It can move forward, 
laterally, and downward at very fast speeds, and it can intercept an offensive 
missile without being damaged. But it does have one major flaw. Although it 
can be fired to reach any initial elevation, it has no power to move higher 
than the last missile that it has intercepted.
<P>
<P>
The tests which the contractor completed were computer simulations of 
battlefield and hostile attack conditions. Since they were only preliminary, 
the simulations tested only the CATCHER's vertical movement capability. In
each simulation, the CATCHER was fired at a sequence of offensive missiles 
which were incoming at fixed time intervals. The only information available to 
the CATCHER for each incoming missile was its height at the point it could be 
intercepted and where it appeared in the sequence of missiles. Each incoming 
missile for a test run is represented in the sequence only once.
<P>
<P>
The result of each test is reported as the sequence of incoming missiles and 
the total number of those missiles that are intercepted by the CATCHER in that 
test.
<P>
<P>
The General Accounting Office wants to be sure that the simulation test 
results submitted by the military contractor are attainable, given the 
constraints of the CATCHER. You must write a program that takes input data 
representing the pattern of incoming missiles for several different tests and 
outputs the maximum numbers of missiles that the CATCHER can intercept for 
those tests. For any incoming missile in a test, the CATCHER is able to 
intercept it if and only if it satisfies one of these two conditions:
<P>
<DL COMPACT><DT><DD> The incoming missile is the first missile to be intercepted in this
test.
<DT><STRONG>-<I>or</I>-</STRONG>
<DD>
<DT><DD> The missile was fired after the last missile that was intercepted and it
is not higher than the last missile which was intercepted.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for any test consists of a sequence of one or more non-negative 
integers, all of which are less than or equal to 32,767, representing the 
heights of the incoming missiles (the test pattern). The last number in each 
sequence is <TT>-1</TT>, which signifies the end of data for that particular test and
is not considered to represent a missile height. The end of data for the 
entire input is the number <TT>-1</TT> as the first value in a test; it is not
considered to be a separate test.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each test consists of a test number (<TT>Test #1</TT>, <TT>Test #2</TT>, etc.) and
the maximum number of incoming missiles that the CATCHER could possibly 
intercept for the test. That maximum number appears after an identifying 
message. There must be at least one blank line between output for successive 
data sets.
<P>
<P>
<P>
<B>Note:</B> The number of missiles for any given test is not limited. If your
solution is based on an inefficient algorithm, it <B>may not</B> execute in the
allotted time.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>389
207
155
300
299
170
158
65
-1
23
34
21
-1
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Test #1:
  maximum possible interceptions: 6

Test #2:
  maximum possible interceptions: 2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
232||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Crossword Answers</TITLE>
<META NAME="description" CONTENT="Crossword Answers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Crossword Answers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A crossword puzzle consists of a rectangular grid of black and white squares 
and two lists of definitions (or descriptions).
<P>
One list of definitions is for 
``words&quot; to be written left to right across white squares in the rows and the
other list is for words to be written down white squares in the columns. (A 
word is a sequence of alphabetic characters.)
<P>
To solve a crossword puzzle, one 
writes the words corresponding to the definitions on the white squares of the 
grid.
<P>
<P>
The definitions correspond to the rectangular grid by means of sequential 
integers on ``eligible&quot; white squares. White squares with black squares
immediately to the left or above them are ``eligible.&quot; White squares with no
squares either immediately to the left or above are also ``eligible.&quot; No other
squares are numbered. All of the squares on the first row are numbered.
<P>
The 
numbering starts with 1 and continues consecutively across white squares of 
the first row, then across the eligible white squares of the second row, then 
across the eligible white squares of the third row and so on across all of the 
rest of the rows of the puzzle. The picture below illustrates a rectangular 
crossword puzzle grid with appropriate numbering.
<P>
<center><img src=232img3.gif></center>
<P>
An ``across&quot; word for a definition is written on a sequence of white squares in
a row starting on a numbered square that does not follow another white square 
in the same row.
<P>
The sequence of white squares for that word goes across the 
row of the numbered square, ending immediately before the next black square in 
the row or in the rightmost square of the row.
<P>
<P>
A ``down&quot; word for a definition is written on a sequence of white squares in a
column starting on a numbered square that does not follow another white square 
in the same column.
<P>
The sequence of white squares for that word goes down the 
column of the numbered square, ending immediately before the next black square 
in the column or in the bottom square of the column.
<P>
Every white square in a 
correctly solved puzzle contains a letter.
<P>
<P>
You must write a program that takes several solved crossword puzzles as input 
and outputs the lists of across and down words which constitute the solutions.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each puzzle solution in the input starts with a line containing two integers <I>r</I>
and <I>c</I> ( <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/2/232img1.gif"   >  and  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/2/232img1.gif"   > ), where <I>r</I> (the first number) is the number of
rows in the puzzle and <I>c</I> (the second number) is the number of columns.
<P>
The <I>r</I>
rows of input which follow each contain <I>c</I> characters (excluding the end-of-line) which describe the solution. Each of those <I>c</I> characters is an alphabetic
character which is part of a word or the character ``*&quot;, which indicates a
black square.
<P>
The end of input is indicated by a line consisting of the single 
number 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each puzzle consists of an identifier for the puzzle (<TT>puzzle #1:</TT>,
<TT>puzzle #2:</TT>, etc.) and the list of across words followed by the list of down
words. Words in each list must be output one-per-line in increasing order of 
the number of their corresponding definitions.
<P>
The heading for the list of 
across words is ``<TT>Across</TT>&quot;. The heading for the list of down words is ``<TT>Down</TT>&quot;.
<P>
In the case where the lists are empty (all squares in the grid are black), the 
<TT>Across</TT> and <TT>Down</TT> headings should still appear.
<P>
Separate output for successive input puzzles
by a blank line. 
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
2 2
AT
*O
6 7
AIM*DEN
*ME*ONE
UPON*TO
SO*ERIN
*SA*OR*
IES*DEA
0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
puzzle #1:
Across
  1.AT
  3.O
Down
  1.A
  2.TO

puzzle #2:
Across
  1.AIM
  4.DEN
  7.ME
  8.ONE
  9.UPON
 11.TO
 12.SO
 13.ERIN
 15.SA
 17.OR
 18.IES
 19.DEA
Down
  1.A
  2.IMPOSE
  3.MEO
  4.DO
  5.ENTIRE
  6.NEON
  9.US
 10.NE
 14.ROD
 16.AS
 18.I
 20.A
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
233||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Package Pricing</TITLE>
<META NAME="description" CONTENT="Package Pricing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Package Pricing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Green Earth Trading Company sells 4 different sizes of energy-efficient 
fluorescent light bulbs for use in home lighting fixtures. The light bulbs are 
expensive, but last much longer than ordinary incandescent light bulbs and 
require much less energy. To encourage customers to buy and use the energy-
efficient light bulbs, the company catalogue lists special packages which 
contain a variety of sizes and numbers of the light bulbs. The price of a 
package is always substantially less than the total price of the individual 
bulbs in the package. Customers typically want to buy several different sizes 
and numbers of bulbs. You are to write a program to determine the least 
expensive collection of packages that satisfy any customer's request.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several datasets. Each dataset is divided into two parts. The first one describes the packages 
which are listed in the catalogue. The second part describes individual 
customer requests. The 4 sizes of light bulbs are identified in the input file 
by the characters ``<TT>a</TT>&quot;, ``<TT>b</TT>&quot;, ``<TT>c</TT>&quot;, and ``<TT>d</TT>&quot;.
<P>
<P>
The first part of the dataset begins with an integer <I>n</I> ( <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/233img1.gif"   > )
indicating the number of packages described in the catalogue. Each of the <I>n</I>
lines that follows is a single package description. A package description 
begins with a catalogue number (a positive integer) followed by a price (a 
real number), and then the sizes and corresponding numbers of the light bulbs 
in the package. Between 1 and 4 different sizes of light bulbs will be listed 
in each description. The listing format for these size-number pairs is a 
blank, a character (``<TT>a</TT>&quot;, ``<TT>b</TT>&quot;, ``<TT>c</TT>&quot;, or ``<TT>d</TT>&quot;) representing a size, another blank,
and then an integer representing the number of light bulbs of that size in the 
package. These size-number pairs will not appear in any particular order, and 
there will be no duplicate sizes listed in any package. The following line 
describes a package with catalogue number 210 and price $76.95 which contains
3 size ``<TT>a</TT>&quot; bulbs, 1 size ``<TT>c</TT>&quot; bulb, and 4 size ``<TT>d</TT>&quot; bulbs.
<PRE>        210 76.95 a 3 c 1 d 4</PRE>
<P>
<P>
The second part of the dataset begins with a line containing a single
positive integer <I>m</I> representing the number of customer requests. Each of the
remaining <I>m</I> lines is a customer request. A listing of sizes and corresponding
numbers of light bulbs constitutes a request. Each list contains only the 
size-number pairs, formatted the same way that the size-number pairs are 
formatted in the catalogue descriptions. Unlike the catalogue descriptions, 
however, a customer request may contain duplicate sizes. The following line 
represents a customer request for 1 size ``<TT>a</TT>&quot; bulb, 2 size ``<TT>b</TT>&quot; bulbs, 2 size
``<TT>c</TT>&quot; bulbs, and 5 size ``<TT>d</TT>&quot; bulbs.
<PRE>        a 1 d 5 b 1 c 2 b 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each request, print the customer number (1 through <I>m</I>, 1 for the first
customer request, 2 for the second,  <IMG WIDTH=20 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/2/233img1.gif"   > , <I>m</I> for the  <IMG WIDTH=26 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/2/233img1.gif"   >  customer), a colon, the
total price of the packages which constitute the least expensive way to fill 
the request, and then the combination of packages that the customer should 
order to fill that request.
<P>
<P>
Prices should be shown with exactly two significant digits to the right of the 
decimal. The combination of packages must be written in ascending order of 
catalogue numbers. If more than one of the same type package is to be ordered, 
then the number ordered should follow the catalogue number in parentheses. You 
may assume that each customer request can be filled. In some cases, the least 
expensive way to fill a customer request may contain more light bulbs of some 
sizes than necessary to fill the actual request. This is acceptable. What 
matters is that the customers receive <I>at least</I> what they request.
<p>Print a blank line after each dataset.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
10 25.00 b 2
502 17.95 a 1
3 13.00 c 1
55 27.50 b 1 d 2 c 1
6 52.87 a 2 b 1 d 1 c 3
6
d 1
b 3
b 3 c 2
b 1 a 1 c 1 d 1 a 1
b 1 b 2 c 3 c 1 a 1 d 1
b 3 c 2 d 1 c 1 d 2 a 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1:   27.50 55
2:   50.00 10(2)
3:   65.50 3 10 55
4:   52.87 6
5:   90.87 3 6 10
6:  100.45 55(3) 502</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
234||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Switching Channels</TITLE>
<META NAME="description" CONTENT="Switching Channels">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Switching Channels</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
CPN (The Couch Potato Network) owns several cable channels. They would like to 
arrange the timing of programmes so viewers can switch channels without 
missing the end of one programme or the beginning of another. To do this they 
have identified certain times, called ``alignment points,&quot; where ideally one
programme should end and another should begin. Some of these alignment points 
are more important than others. For example, the time when the nightly news 
begins is an important alignment point. Since many viewers watch the news, 
they would be less likely to watch a CPN programme whose ending time causes 
them to miss the beginning of the news, or which starts before the news 
finishes. Your task is to write a solution which determines the best order in 
which programmes can be shown on one channel.
<P>
<P>
A ``miss&quot; time is the absolute value of the difference between the time of an
alignment point and the nearest time of the beginning or end of a programme. 
The ``total miss time&quot; at a particular level of importance is the sum of all
the miss times for alignment points at that level of importance. One programme 
order is better than another if it has a lower total miss time at some level 
of importance and the same total miss time at all higher levels of importance 
(if any).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your solution must accept multiple input data sets. Each set will begin with 
an integer, <I>p</I> ( <IMG WIDTH=71 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/2/234img1.gif"   > ), specifying the number of programmes to be ordered.
When a data set beginning with 0 is encountered, your solution should 
terminate. Following <I>p</I> on the same line will be <I>p</I> integers specifying the
lengths of the programmes in minutes. There is no significance to the order in 
which these are given.
<P>
<P>
The next line of input specifies the alignment points. The total number of 
such points, <I>a</I> ( <IMG WIDTH=71 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/2/234img1.gif"   > ), appears first followed by <I>a</I> pairs of integers. The
first integer in each pair, <I>i</I> ( <IMG WIDTH=68 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/234img1.gif"   > ), gives the importance of the alignment
point. Alignment points marked 1 are most important; those marked 2 are of 
secondary importance, etc. The second integer in each pair, <I>t</I>, specifies the
time when the alignment point occurs. No two alignment points in the same data 
set will have the same value of <I>t</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your solution must output three lines for each data set. The first line 
identifies the data set being processed and should be in the form:
<P>
<TT>Data set</TT> <I>n</I>
<P>
where <I>n</I> is the number of the data set (1 for the first data set, 2 for the
second, etc.). On the following line, your solution should output the lengths 
of the programmes in the order in which they should be shown to achieve the 
best synchronization with the alignment points. On the third line, output the 
total number of minutes by which the alignment points were missed (the sum of 
all total miss times).
<P>
<P>
There may be more than one best programme order for an input data set. Any one
of these best orders is acceptable.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4  30 45 45 15
3  1 60  2 90  3 15
6  10 15 13 18 25 33
4  1 30  2 15  2 45  1 60
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>  Data set 1
  Order: 15 45 30 45 
  Error: 0
Data set 2
  Order: 15 13 33 25 18 10
  Error: 19</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
235||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Typesetting</TITLE>
<META NAME="description" CONTENT="Typesetting">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Typesetting</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Proportional fonts are so called because characters require varying amounts of 
space on the printed line. The size in which text is ``set,&quot; usually measured
in points, also affects the space required for each character. In this problem 
you are given a number of paragraphs of text to set. Each paragraph may 
include special ``words&quot; to select the font and point size.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input contains several datasets. Each dataset starts with the font width table. These data give the widths of 10-
point characters in six different fonts. The first line contains the number of 
characters in the table, <I>N</I> ( <IMG WIDTH=95 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/2/235img1.gif"   > ). Each of the next <I>N</I> lines contain a
character in column 1 and then 6 integers representing the width of that 
character in each of the 6 different fonts. Widths are given in an arbitrary 
measurement called ``units.&quot; The width of each 10-point character will be
greater than zero units, and less than 256 units. Character widths scale 
linearly with point size. Thus if a 10-point ``A&quot; is 12 units wide, a 20-point
``A&quot; is 24 units wide.
<P>
<P>
The remainder of the dataset consists of paragraphs to be typeset. Each 
paragraph begins with a line containing two integers, <I>L</I> and <I>W</I>. <I>L</I> is the number
of input lines of text for the paragraph (these immediately follow the first 
line), and <I>W</I> is the width allowed for each typeset line, in units. The initial
font at the beginning of each paragraph is always font 1, and the initial 
point size in which characters are to be set is 10. Fonts are numbered 1 
through 6, corresponding to columns 1 through 6 in the font width table. An 
empty paragraph (one for which <I>L</I> is 0) will mark the end of the dataset. No
output is to be produced for this empty paragraph.
<P>
<P>
The words in each paragraph are sequences of no more than 8 non-blank 
characters separated by spaces (that is, blanks - no tab characters will appear
in the input). Spaces at the ends of input lines are irrelevant, and spaces 
between words are significant only to the extent that they separate words. 
Each character in each word will appear in the width table. Case is 
significant for all characters in the input data.
<P>
<P>
The special tokens ``<TT>*f1</TT>&quot;, ``<TT>*f2</TT>&quot;, ``<TT>*f3</TT>&quot;, ``<TT>*f4</TT>&quot;,
``<TT>*f5</TT>&quot;, and ``<TT>*f6</TT>&quot; are used to
select a particular font to be used in setting the text that follows it. The 
token ``<TT>*s</TT><I>N</I>&quot;, where <I>N</I> is an integer in the range 1 to 99 indicates
that <I>N</I> point
characters are to be used in setting the following text. These tokens will 
always be separated from words and other tokens by at least one blank. Note 
that style and size changes made in one paragraph do not carry over to the 
next paragraph, and that many such changes may appear in a single paragraph.
<P>
<P>
For each paragraph, try to set as many words per line as possible, ensuring 
that each word is followed by at least the width of a blank (which will always 
appear in the font width table) with the same point size and style as the 
characters in the preceding word, except for the last word on the line. The 
last word in a typeset line must not have any following space.
<P>
<P>
When scaling fonts, round the scaled character widths to the nearest integer, 
rounding upward in cases where the rounded value is half way between two 
consecutive integers. Thus, if a particular 10 point character occupies 9 
units of space, a 15 point character would occupy 14 units of space, as would 
a 16 point character. A 14 point character, however, would occupy only 13 
units of space.
<P>Input will end with a test case where N=0.
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each paragraph, first display the paragraph number (1, 2, ...). Then, for
each typeset line in the paragraph, display the line number, the first and 
last words on that line, and the total number of units of white space that 
follow the last character printed on the line. (This is just the number of 
units of space available on the line not occupied by characters or spaces 
between characters.)
<P>
<P>
If a single word exceeds the width of a line, set it on a line by itself. In 
the output for that line, show only that single word, and a negative amount of 
white space equal to the excess width of the word.
<P>Print a blank line between datasets.
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
A 10 20 30 12 22 32
B 1 2 3 4 5 6
C 9 10 8 3 5 2
  2 4 6 3 5 7
2 80
*f2  AAA BBB CCC
  ABC *s15 CBA AABC CACA
3 100
AAA
AAA BBB CCC
ABC CBA AABC CACA
0 0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Paragraph 1
Line 1: AAA ... BBB (10 whitespace)
Line 2: CCC ... ABC (14 whitespace)
Line 3: CBA ... CBA (32 whitespace)
Line 4: AABC ... AABC (2 whitespace)
Line 5: CACA (-10 whitespace)
Paragraph 2
Line 1: AAA ... CCC (4 whitespace)
Line 2: ABC ... AABC (26 whitespace)
Line 3: CACA ... CACA (62 whitespace)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
236||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>VTAS - Vessel Traffic Advisory Service</TITLE>
<META NAME="description" CONTENT="VTAS - Vessel Traffic Advisory Service">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">VTAS - Vessel Traffic Advisory Service</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In order to promote safety and efficient use of port facilities, the 
Association of Coastal Merchants (ACM) has developed a concept for a Vessel 
Traffic Advisory Service (VTAS) that will provide traffic advisories for 
vessels transiting participating ports.
<P>
<P>
The concept is built on a computer program that maintains information about 
the traffic patterns and reported movements of vessels within the port over 
multiple days. For each port, the traffic lanes are defined between waypoints. 
The traffic lanes have been designated as directional to provide traffic 
separation and flow controls. Each port is represented by a square matrix 
containing the distances (in nautical miles) along each valid traffic lane. 
The distances are defined from each row waypoint to each column waypoint. A 
distance of 0 indicates that no valid traffic lane exists between the two 
waypoints.
<P>
<P>
Vessel traffic enters the port at a waypoint and transits the traffic lanes. A 
vessel may begin its transit at any of the waypoints and must follow a valid 
connected route via the valid traffic lanes. A vessel may end its transit at 
any valid waypoint.
<P>
<P>
The service provided by the VTAS to transiting vessels includes:
<UL><LI> Projection of arrival times at waypoints<LI> Notification of invalid routes<LI> Projected encounters with other vessels on each leg of the
transit. An ``encounter&quot; occurs when two vessels are between common waypoints
(either traffic lane) at a common time<LI> Warning of close passing with another vessel in the vicinity of a
waypoint (within 3 minutes of projected waypoint arrival) 
</UL>
<P>
Reported times will be rounded to the nearest whole minute. Time is maintained 
based on a 24 hour clock (i.e. 9 am is 0900, 9 PM is 2100, midnight is 0000). 
Speed is measured in knots which is equal to 1 nautical mile per hour.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file for the computer program includes several datasets, each containing a Port Specification to 
provide the description of the traffic patterns within the port and a Traffic 
List which contains the sequence of vessels entering the port and their 
intended tracks. The end of each dataset is indicated by a Vessel Name beginning 
with an ``*&quot;.
<PRE><TT> 
	Port Specification: 	Number of Waypoints in Port (an integer <I>N</I>)
<P>
		 		Waypoint ID List (<I>N</I> single-character designators)
<P>
				Waypoint Connection Matrix (<I>N</I> rows of <I>N</I> real values specifying
<P>
		 			the distances between waypoints in nautical miles)
<P>
	Traffic List: 		Vessel Name (alphabetic characters)
<P>
		 		Time at first waypoint (on 24-hour clock) &amp; Planned Transit Speed (in knots)
<P>
		 		Planned Route (ordered list of waypoints)
<P>
</TT></PRE><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each dataset shall provide for each vessel as it enters the port a listing 
indicating the arrival of the vessel and its planned speed followed by a table 
containing the waypoints in its route and projected arrival at each waypoint. 
Following this table will be appropriate messages indicating:
<UL><LI> Notification of Invalid Routes<LI> Projected Encounters on each leg<LI> Warning of close passing at waypoints
</UL>
<P>
All times are to be printed as four-digit integers with leading zeros when 
necessary. Print a blank line after each dataset.
<P>
<P>
<P>
<B>Assumptions &amp; Limitations:</B>
<P>
<EM>
<P>
1. Vessel names are at most 20 characters long.
<P>
2. There are at most 20 waypoints in a port and at most 20 waypoints in any route.
<P>
3. There will be at most 20 vessels in port at any time.
<P>
4. A vessel will complete its transit in at most 12 hours.
<P>
5. No more than 24 hours will elapse between vessel entries.
</EM>
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<TT>
6 <BR> 
ABCDEF <BR> 
0 3 0 0 0 0 <BR> 
3 0 0 2 0 0 <BR> 
0 3 0 0 0 0 <BR> 
0 0 0 0 3 0 <BR> 
0 0 2 0 0 4 <BR> 
0 0 0 0 4 0 <BR> 
Tug <BR> 
2330 12 <BR> 
ABDEF <BR> 
WhiteSailboat <BR> 
2345 6 <BR> 
ECBDE <BR> 
TugWBarge <BR> 
2355 5 <BR> 
DECBA <BR> 
PowerCruiser <BR> 
   0 15 <BR> 
FECBA <BR> 
LiberianFreighter <BR> 
   7 18 <BR> 
ABDXF <BR> 
ChineseJunk <BR> 
  45 8 <BR> 
ACEF <BR> 
*****
</TT>
<P>
 <IMG ALIGN=BOTTOM ALT="tex2html_wrap52" SRC="http://uva.onlinejudge.org/external/2/236img2.gif"   > <H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Tug entering system at 2330 with a planned speed of 12.0 knots
          Waypoint:    A    B    D    E    F
          Arrival:   2330 2345 2355 0010 0030

WhiteSailboat entering system at 2345 with a planned speed of 6.0 knots
          Waypoint:    E    C    B    D    E
          Arrival:   2345 0005 0035 0055 0125

TugWBarge entering system at 2355 with a planned speed of 5.0 knots
          Waypoint:    D    E    C    B    A
          Arrival:   2355 0031 0055 0131 0207
Projected encounter with Tug on leg between Waypoints D &amp; E
** Warning ** Close passing with Tug at Waypoint D

PowerCruiser entering system at 0000 with a planned speed of 15.0 knots
          Waypoint:    F    E    C    B    A
          Arrival:   0000 0016 0024 0036 0048
Projected encounter with Tug on leg between Waypoints F &amp; E
Projected encounter with WhiteSailboat on leg between Waypoints C &amp; B
** Warning ** Close passing with WhiteSailboat at Waypoint B

LiberianFreighter entering system at 0007 with a planned speed of 18.0 knots
**&gt; Invalid Route Plan for Vessel: LiberianFreighter   

ChineseJunk entering system at 0045 with a planned speed of 8.0 knots
**&gt; Invalid Route Plan for Vessel: ChineseJunk</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
237||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Monitoring Wheelchair Patients</TITLE>
<META NAME="description" CONTENT="Monitoring Wheelchair Patients">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Monitoring Wheelchair Patients</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<table><tr>
 <td>
 A researcher at a rehabilitation facility is studying the use that a patient
 makes of a motorized wheelchair in a restricted area at the facility. The
 chair's motor is connected to the axle by a chain drive. Therefore both wheels
 turn at the same speed and the chair can travel only in a straight line.
 The patient can stop the chair, rotate the wheels, and thereby change the
 direction only while the wheelchair is stopped. To help monitor its usage, the chair is equipped with a compass, a clock, and a speedometer. A recording device
 records each time interval that the chair is in motion, the average speed
 during the time interval, and the compass bearing during the time interval.
 The compass is a standard compass in which 0<sup>o</sup> is north, 90<sup>o</sup>
 is east, and so forth.
 
 <td><IMG ALIGN=BOTTOM ALT="tex2html_wrap52" SRC="http://uva.onlinejudge.org/external/2/237img2.gif" >
</table>
<P>
A map of the restricted area is shown. The restricted area is the area of the lawn <i>inside</i> a 200 ft by 400
ft rectangle. Patients enter the restricted area from the 
door of a building located on the southern edge of the restricted area. The 
door is at the center of the 400 ft southern boundary, as shown in the figure.
<P>
<P>
The recording device turns itself on when the patient enters the restricted 
area through the door and monitors the patient's movements for up to 1 hour.
Time is measured in seconds from 0 to 3600, with time 0 being the time the 
patient initially enters the restricted area through the door. The device 
records 4 numbers to describe the motion of the wheelchair during any interval 
when the motor is in operation. The first two numbers give the time the motion 
begins and ends; the third number gives the speed during the time interval; 
and the fourth number gives the compass bearing during the time interval. 
(During each time interval the wheelchair maintains constant speed and 
bearing.) For example, the recorded line
<P>
<PRE>          10.6    15.9    2.8     274</PRE>
<P>
would indicate that between times  <IMG WIDTH=68 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/2/237img2.gif"   >  and  <IMG WIDTH=68 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/237img2.gif"   >  seconds the
wheelchair was traveling at speed of 2.8 ft/sec with compass bearing 
(direction) 274 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/2/237img2.gif"   > . Times are recorded to 0.1 sec, speeds are recorded to 0.1
ft/sec, and bearings are recorded to a whole number of degrees.
<P>
<P>
Your job is to analyze the data from the wheelchair's recording device.
Specifically, you must determine the following:
<P>
<DL COMPACT><DT><STRONG>1)</STRONG>
<DD> Did the patient leave the restricted area after going through the door? If so, determine
the first time that the patient left the restricted area and determine at what 
point on the perimeter of the restricted area the wheelchair crossed out of 
the restricted area. If the patient did not leave the restricted area, what 
was the distance from the door to the farthest point the patient reached 
within the area?
<DT><STRONG>2)</STRONG>
<DD> What was the total distance that the patient traveled?
<P>
 </DL>
<P>
For the purpose of answering these questions, use coordinates with the 
location (0,0) corresponding to the southwest corner of the restricted area 
and the location (400,200) corresponding to the northeast corner. Since the 
recorder switches on when the patient passes through the door, the position of 
the patient at time <I>t</I> = 0.0 is always (200,0). Patients will be traveling
north when they enter the restricted area.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data consists of several data sets. The first line of each data set 
has an integer which is the number of lines recorded by the device. Each 
subsequent line in the data set consists of the four numbers recorded by the 
device during a particular time interval. The end of data is indicated by a 
data set whose first line consists of the number 0.
<P>
<P>
In the first data set of the sample input, the patient entered through the 
door (at time 0.0) and for the first 5 seconds was traveling due north at 3 
ft/sec. From time <I>t</I> = 7 to <I>t</I> = 9 he traveled at a speed of 2 ft/sec with a
compass bearing of 30 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/2/237img2.gif"   > . He then stopped, changed his bearing to 60 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/2/237img2.gif"   > , and then
traveled at 4 ft/sec from time <I>t</I> = 10 to time <I>t</I> = 100. Ten seconds later (at
time <I>t</I> = 110) he headed due north at 2 ft/sec until <I>t</I> = 200.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each data set begins with an identification of that case. The 
output indicates whether the patient departed from the restricted area and if 
so the time and point of departure on the perimeter. If not, the maximum
distance the patient reached from the door is provided. For each case, the 
total distance that the patient traveled is provided. Format your output so 
that the same labeling information is included as shown in the sample output, 
with a line of asterisks separating the cases.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
0.0	5.0	3.0	0
7.0	9.0	2.0	30
10.0	100.0	4.0	60
110.0	200.0	2.0	0
3
0.0	20.0	2.0	0
500.0	600.0	1.0	270
3000.0	3100.0	1.0	0
7
0.0	5.3	2.1	0
19.8	35.6	2.7	346
42.0	78.4	2.3	15
1181.4	1192.1	1.7	117
2107.0	2193.6	2.1	295
2196.3	2201.2	2.0	298
2704.3	2709.2	1.5	208
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case Number 1
Left restricted area at point (400.0,132.8) and time 67.2 sec.
Total distance traveled was 559.0 feet
***************************************
Case Number 2
No departure from restricted area
Maximum distance patient traveled from door was 172.0 feet
Total distance traveled was 240.0 feet
***************************************
Case Number 3
Left restricted area at point (67.0,200.0) and time 2191.4 sec.
Total distance traveled was 354.7 feet
***************************************</PRE>
<P>
<P>
<P>
<B>Assumptions and requirements</B>
<EM>
<P>
1. Within each data set, time intervals will be listed in chronological
order, with the first time interval always having time 0.0 as the time of 
entry into the restricted area. All times will be given with one decimal place 
accuracy and will be in the range 0.0 to 3600.0 inclusive. For each time 
interval specified, the duration of the time interval will be positive, i.e. 
the second time specified will be greater than the first.
<P>
2. Speeds will be in the range 0.1 to 9.9 ft/sec.
<P>
3. Compass bearings will be given as a whole number of degrees and will be
in the range 0 to 359 inclusive. The initial compass bearing for the first 
line of data in each data set will be 0.
<P>
4. Within each line of data, numbers will be separated by at least one
blank space.
<P>
5. All numerical results will be displayed with one decimal place of
accuracy as shown in the sample output.
<P>
6. If the patient goes out of the restricted area, his location may include
negative coordinates. However, you don't have to worry about the wheelchair 
crashing through the walls of the building.
</EM>
<P>
</BODY>
</HTML>

______________________________________________________
238||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Jill's Bike</TITLE>
<META NAME="description" CONTENT="Jill's Bike">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR>
<TD><B><FONT SIZE=5 COLOR=#C0FFFF><A NAME="SECTION0001000000000000000000">Jill's Bike</A></FONT></B>
</TABLE></CENTER></H1>
<P>
Jill Bates hates climbing hills. Jill rides a bicycle everywhere she goes, but
she always wants to go the easiest and shortest way possible. The good news is
that she lives in Greenhills, which has all its roads laid out in a strictly
rectangular grid - east-west roads are <I>streets</I>; north-south roads
are <I>avenues</I>
and the distance between any two adjacent grid points is the same. The bad
news is that Greenhills is very hilly and has many one-way roads.
<P>
<P>
In choosing a route between where she starts and where she ends, Jill has
three rules:
<OL><LI> Avoid any travel of more than 10 meters between adjacent grid points.<LI> Never go the wrong way on a one-way road.<LI> Always travel the shortest possible route.
</OL>
<P>
Your program should help Jill find an acceptable route.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains less than 50 data sets in the following form:
<P>
<UL><LI> The first line of each set contains two integers, separated by one or more spaces.
  The first integer <I>n</I> represents the number of streets, and the second integer
  <I>m</I> represents the number of avenues,  <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline59" SRC="http://uva.onlinejudge.org/external/2/238img1.gif"   > ,  <IMG WIDTH=86 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/2/238img1.gif"   > .<LI> The next <I>n</I> lines contain the altitudes of grid points. Each line
  represents a street and contains a sequence of <I>m</I> integers separated by one
  or more spaces. These integers represent the altitude in meters of the grid
  points along that street. Even if a particular street and avenue have no
  intersection, the altitude is still given for that grid point.<LI> One or more lines follow that define the one-way roads. Each road is
  represented by two pairs of integers, separated by one or more spaces, in
  the form:
<P>
  <I>street avenue street avenue</I>
<P>
  The first street and avenue define the starting point of the road and
  the second pair define the ending point. Since Greenhills is a strict grid,
  if the two points are not adjacent in the grid, the road passes through all
  the intervening grid points. For example,
<P>
  <TT>5 7 5 10</TT>
<P>
  represents roads 5-7 to 5-8, 5-8 to 5-9, and 5-9 to 5-10. Road
  definitions are terminated by a line containing four zeroes in the above
  format.<LI> Finally, one or more lines will follow that contain pairs of grid points
  between which Jill wants to find an optimal path, in the form:
<P>
  <I>street avenue street avenue</I>
<P>
  As before, the integer pairs are separated by one or more spaces. The end
  of the input set is defined by a line containing four zeroes, formatted as
  before.
</UL>
<P>
You may assume that all street and avenue numbers are within the bounds
defined by the first line of set, and that all road definitions are strictly
north-south or east-west.
The end of input file is defined by EOF.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each path query in the input file, output a sequence of grid points, from
the starting grid point to the ending grid point, which meets Jill's three
rules. Output grid points as `<I>street-avenue</I>' separated by the
word `<TT>to</TT>'. If
there is more than one path that meets Jill's criteria, any such path will be
acceptable. If no route satisfies all the criteria, or if the starting and
ending grid points are the same, output an appropriate message to that effect.
Output a blank line between each output for query.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<TT>
3 4 <BR>
10 15 20 25 <BR>
19 30 35 30 <BR>
10 19 26 20 <BR>
1 1 1 4 <BR>
2 1 2 4 <BR>
3 4 3 3 <BR>
3 3 1 3 <BR>
1 4 3 4 <BR>
2 4 2 1 <BR>
1 1 2 1 <BR>
0 0 0 0 <BR>
1 1 2 2 <BR>
2 3 2 3 <BR>
2 2 1 1 <BR>
0 0 0 0
</TT>
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Diagram of the Sample Input</A></FONT></H2>
<P>
<center><img src=238img5.gif></center>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1-1 to 1-2 to 1-3 to 1-4 to 2-4 to 2-3 to 2-2

To get from 2-3 to 2-3, stay put!

There is no acceptable route from 2-2 to 1-1.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
239||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tempus et mobilius. Time and motion</TITLE>
<META NAME="description" CONTENT="Tempus et mobilius. Time and motion">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000"><I>Tempus et mobilius.</I> Time and motion</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<table><tr>
 <td><IMG WIDTH=469 HEIGHT=309 ALIGN=BOTTOM ALT="tex2html_wrap42" SRC="http://uva.onlinejudge.org/external/2/239img1.gif"   > 
 <td><IMG WIDTH=285 HEIGHT=231 ALIGN=BOTTOM ALT="tex2html_wrap44" SRC="http://uva.onlinejudge.org/external/2/239img1.gif"   > 
</table>
<P>
Unfortunately, most commercially available ball clocks do not incorporate a 
date indication, although this would be simple to do with the addition of 
further carry and indicator tracks. However, all is not lost! As the balls 
migrate through the mechanism of the clock, they change their relative 
ordering in a predictable way. Careful study of these orderings will therefore 
yield the time elapsed since the clock had some specific ordering. The length 
of time which can be measured is limited because the orderings of the balls 
eventually begin to repeat. Your program must compute the time before 
repetition, which varies according to the total number of balls present.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Operation of the Ball Clock</A></FONT></H2>
<P>
Every minute, the least recently used ball is removed from the queue of balls 
at the bottom of the clock, elevated, then deposited on the minute indicator 
track, which is able to hold four balls. When a fifth ball rolls on to the 
minute indicator track, its weight causes the track to tilt. The four balls 
already on the track run back down to join the queue of balls waiting at the 
bottom in reverse order of their original addition to the minutes track. The 
fifth ball, which caused the tilt, rolls on down to the five-minute indicator 
track. This track holds eleven balls. The twelfth ball carried over from the 
minutes causes the five-minute track to tilt, returning the eleven balls to 
the queue, again in reverse order of their addition. The twelfth ball rolls 
down to the hour indicator. The hour indicator also holds eleven balls, but 
has one extra fixed ball which is always present so that counting the balls in 
the hour indicator will yield an hour in the range one to twelve. The twelfth 
ball carried over from the five-minute indicator causes the hour indicator to 
tilt, returning the eleven free balls to the queue, in reverse order, before 
the twelfth ball itself also returns to the queue.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The input defines a succession of ball clocks. Each clock operates as 
described above. The clocks differ only in the number of balls present in the 
queue at one o'clock when all the clocks start. This number is given for each 
clock, one per line and does not include the fixed ball on the hours 
indicator. Valid numbers are in the range 27 to 7000. A zero signifies the end 
of input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
For each clock described in the input, your program should report the number 
of balls given in the input and the number of days (24-hour periods) which 
elapse before the clock returns to its initial ordering. Output will always
fit in a 64-bit integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>30
45
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>30 balls cycle after 15 days.
45 balls cycle after 378 days.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
240||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Variable Radix Huffman Encoding</TITLE>
<META NAME="description" CONTENT="Variable Radix Huffman Encoding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Variable Radix Huffman Encoding</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Huffman encoding is a method of developing an optimal encoding of the symbols 
in a <I>source alphabet</I> using symbols from a <I>target alphabet</I> when the frequencies
of each of the symbols in the source alphabet are known. Optimal means the 
average length of an encoded message will be minimized. In this problem you 
are to determine an encoding of the first <I>N</I> uppercase letters (the source
alphabet,  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  through  <IMG WIDTH=22 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline89" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > , with frequencies  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  through  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline93" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > ) into the
first <I>R</I> decimal digits (the target alphabet,  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline97" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  through  <IMG WIDTH=21 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline99" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > ).
<P>
<P>
Consider determining the encoding when <I>R</I>=2. Encoding proceeds in several
passes. In each pass the two source symbols with the lowest frequencies, say 
 <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  and  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline105" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > , are grouped to form a new ``combination letter&quot; whose frequency is
the sum of  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  and  <IMG WIDTH=14 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline109" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > . If there is a tie for the lowest or second lowest
frequency, the letter occurring earlier in the alphabet is selected. After 
some number of passes only two letters remain to be combined. The letters 
combined in each pass are assigned one of the symbols from the target 
alphabet.
<P>
<P>
The letter with the lower frequency is assigned the code 0, and the 
other letter is assigned the code 1. (If each letter in a combined group has 
the same frequency, then 0 is assigned to the one earliest in the alphabet. 
For the purpose of comparisons, the value of a ``combination letter&quot; is the
value of the earliest letter in the combination.) The final code sequence for 
a source symbol is formed by concatenating the target alphabet symbols 
assigned as each combination letter using the source symbol is formed.
<P>
The 
target symbols are concatenated in the reverse order that they are assigned so 
that the first symbol in the final code sequence is the last target symbol 
assigned to a combination letter.
<P>
<P>
The two illustrations below demonstrate the 
process for <I>R</I>=2.
<P>
<P> <IMG WIDTH=745 HEIGHT=212 ALIGN=BOTTOM ALT="tabular23" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > <P>
<P>
When <I>R</I> is larger than 2, <I>R</I> symbols are grouped in each pass. Since each pass
effectively replaces <I>R</I> letters or combination letters by 1 combination letter,
and the last pass must combine <I>R</I> letters or combination letters, the source
alphabet must contain <I>k</I>*(<I>R</I>-1)+<I>R</I> letters, for some integer <I>k</I>.
<P>
Since <I>N</I>
may not be this large, an appropriate number of fictitious letters with zero
frequencies must be included. These fictitious letters are not to be included 
in the output. In making comparisons, the fictitious letters are later than 
any of the letters in the alphabet.
<P>
<P>
Now the basic process of determining the Huffman encoding is the same as for 
the <I>R</I>=2 case. In each pass, the <I>R</I> letters with the lowest frequencies are
grouped, forming a new combination letter with a frequency equal to the sum of 
the letters included in the group. The letters that were grouped are assigned 
the target alphabet symbols 0 through <I>R</I>-1. 0 is assigned to the letter in the
combination with the lowest frequency, 1 to the next lowest frequency, and so 
forth. If several of the letters in the group have the same frequency, the one 
earliest in the alphabet is assigned the smaller target symbol, and so forth.
<P>
<P>
The illustration below demonstrates the process for <I>R</I>=3.
<P>
<P> <IMG WIDTH=383 HEIGHT=190 ALIGN=BOTTOM ALT="tabular63" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will contain one or more data sets, one per line. Each data set 
consists of an integer value for <I>R</I> (between 2 and 10), an integer value for <I>N</I>
(between 2 and 26), and the integer frequencies  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   >  through  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline93" SRC="http://uva.onlinejudge.org/external/2/240img1.gif"   > , each of which
is between 1 and 999.
<P>
The end of data for the entire input is the number 0 for 
<I>R</I>; it is not considered to be a separate data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each data set, display its number (numbering is sequential starting with 
1) and the average target symbol length (rounded to two decimal places) on one 
line. Then display the <I>N</I> letters of the source alphabet and the corresponding 
Huffman codes, one letter and code per line. 
<br>Print a blank line after each test case.
<br>
The examples below illustrate the 
required output format.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 5 5 10 20 25 40
2 5 4 2 2 1 1
3 7 20 5 8 5 12 6 9
4 6 10 23 18 25 9 12
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Set 1; average length 2.10
    A: 1100
    B: 1101
    C: 111
    D: 10
    E: 0

Set 2; average length 2.20
    A: 11
    B: 00
    C: 01
    D: 100
    E: 101

Set 3; average length 1.69
    A: 1
    B: 00
    C: 20
    D: 01
    E: 22
    F: 02
    G: 21

Set 4; average length 1.32
    A: 32
    B: 1
    C: 0
    D: 2
    E: 31
    F: 33</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
241||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Sail Race</TITLE>
<META NAME="description" CONTENT="Sail Race">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Sail Race</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Atlantic Coastal Mariners (ACM) sailing club is building a race planning 
tool to estimate durations of sailboat races with various race courses, wind 
directions, and types of sailboats. You must write a program to help with that 
task.
<P>
<P>
A race course is defined by marks with up to 10 marks per race course. A 
sailboat must sail to all marks in the specified order. The marks are 
identified as <I>x</I>- and <I>y</I>-coordinates on a hypothetical grid with a single unit
equal to one nautical mile (nm). The positive <I>y</I>-axis is oriented due north and
the positive <I>x</I>-axis is oriented due east. The race course is in open waters
without any navigational limitations.
<P>
<P>
For purposes of this planning tool, the only driving force controlling a 
sailboat is the wind. The wind determines the sailboat's speed of advance and 
limits its direction of travel. The wind is constant for the duration of each 
race and is specified in terms of the direction from which the wind is blowing 
and its speed in nautical miles per hour (kts). Wind direction is specified as 
a compass bearing in degrees measured clockwise from 000.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  as north.
<P>
<P>
Sailboats cannot steer any closer to the wind than a given ``point angle&quot; off
the wind direction. In order to make progress closer to the wind direction, 
the sailboat must tack back and forth across the wind, steering no closer to 
the wind than its point angle. Each time the sailboat tacks or passes a mark 
it incurs a tack penalty. For this simulation, each sailboat will travel each 
leg of a race (the portion of a race between successive marks) with the 
minimum number of tacks and the minimum possible distance. If tacking back and
forth is necessary, the first tack will be
to the right of the straight direction. Courses and 
directions are specified as compass bearings in degrees measured clockwise 
from 000.0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  as north.
<P>
<P>
The speed of a sailboat is determined by the sailboat design, wind speed, and 
direction steered relative to the wind. In the figure, the wind direction is 
45 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  and the point angle is 40 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   > . This means then that this sailboat cannot
steer between 5 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  and 85 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  because it cannot point that closely into the wind.
<P>
<table><tr>
 <td><IMG ALIGN=BOTTOM ALT="tex2html_wrap105" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   > 
 <td><IMG ALIGN=BOTTOM ALT="tex2html_wrap109" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >
</table>
<P>
For this problem, the ratio of sailboat speed to wind speed is one of three 
ratios, selected as shown in the table below according to the angle off the 
wind :
<P>
<P> <IMG WIDTH=563 HEIGHT=82 ALIGN=BOTTOM ALT="tabular46" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   > <P>
<P>
For instance, if the boat is steering at an angle off the wind which is
between the reach angle and downwind angle then
<P>
boat speed = reach speed ratio  <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline103" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   >  wind speed
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your solution must accept multiple input data sets. Each data set represents a 
different race course to be evaluated for a single sailboat. The data set 
begins with a line with 4 numbers: wind direction (real), wind speed (real), 
tack penalty (real), and number of marks <I>n</I> (integer). The next line contains
six real numbers: point angle, point speed ratio, reach angle, reach speed 
ratio, downwind angle, downwind speed ratio.
<P>
<P>
The subsequent <I>n</I> lines of the data set represent the <I>n</I> race marks in the order
in which they must be reached. Each line begins with a 2-character mark id 
followed by the <I>x</I>-coordinate then <I>y</I>-coordinate of the mark.
<P>
<P>
The end of input is denoted by a line of four 0's.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for your program consists of various data calculated for each input 
data set. Values should be presented with the following precisions and units.
<P>
<P> <IMG WIDTH=465 HEIGHT=38 ALIGN=BOTTOM ALT="tabular57" SRC="http://uva.onlinejudge.org/external/2/241img1.gif"   > <P>
<P>
Output for each race begins with a header containing the number of the data 
set (1 for the first, 2 for the second, etc.) and the number of legs. The next 
line is the total length of the race course, measured as the sum of distances 
between successive marks.
<P>
<P>
For each leg of the course, the leg number, beginning and ending mark id's, 
course from the beginning to end marks of the leg, and the leg distance is 
presented. This is followed by a listing of the tacks necessary to complete 
the leg. The tacks for each race are numbered sequentially, with tack numbers 
beginning with 1 for each race. For each tack, the tack number, the projected 
sailboat speed, the course steered, and the length of that tack are presented.
<P>
<P>
The summary output for each data set includes the total number of tacks, the 
total distance traveled for the race, the estimated race duration, and the 
total tack penalty time incurred by the sailboat after leaving the first mark.
<P>
<P>
The exact format of the output is shown below. Print a blank line after each input data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>45 10 .1 6
45 0.5 90 0.75 135 0.67
M1 15 10
M2 25 20
M3 22 30
M4 5 25
M5 10 15
M6 10 10
0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Race 1 has 5 legs
The race layout is 58.48 nm long

Leg 1 from Mark M1 to M2: direction = 45.0, distance = 14.14 nm
Tack 1: speed = 5.0, direction = 90.0, distance = 10.00 nm
Tack 2: speed = 5.0, direction = 0.0, distance = 10.00 nm 

Leg 2 from Mark M2 to M3: direction = 343.3, distance = 10.44 nm
Tack 3: speed = 5.0, direction = 343.3, distance = 10.44 nm

Leg 3 from Mark M3 to M4: direction = 253.6, distance = 17.72 nm
Tack 4: speed = 6.7, direction = 253.6, distance = 17.72 nm

Leg 4 from Mark M4 to M5: direction = 153.4, distance = 11.18 nm
Tack 5: speed = 7.5, direction = 153.4, distance = 11.18 nm

Leg 5 from Mark M5 to M6: direction = 180.0, distance = 5.00 nm
Tack 6: speed = 6.7, direction = 180.0, distance = 5.00 nm

Race 1 was 64.34 nm long with 6 tack legs 
Estimated Race Duration is 11.47 hours with 0.50 hours of Tack Penalty

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
242||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stamps and Envelope Size</TITLE>
<META NAME="description" CONTENT="Stamps and Envelope Size">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stamps and Envelope Size</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Philatelists have collected stamps since long before postal workers were 
disgruntled. An excess of stamps may be bad news to a country's postal 
service, but good news to those that collect the excess stamps. The postal 
service works to minimize the number of stamps needed to provide seamless 
postage coverage. To this end you have been asked to write a program to assist 
the postal service.
<P>
<P>
Envelope size restricts the number of stamps that can be used on one envelope. 
For example, if 1 cent and 3 cent stamps are available and an envelope can 
accommodate 5 stamps, all postage from 1 to 13 cents can be ``covered&quot;:
<P>
<P> <IMG WIDTH=453 HEIGHT=296 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/2/242img1.gif"   > <P>
<P>
Although five 3 cent stamps yields an envelope with 15 cents postage, it is 
not possible to cover an envelope with 14 cents of stamps using at most five 1 
and 3 cent stamps. Since the postal service wants maximal coverage without 
gaps, the maximal coverage is 13 cents.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of each data set contains the integer <I>S</I>, representing the
maximum of stamps that an envelope can accommodate. The second line contains 
the integer <I>N</I>, representing the number of sets of stamp denominations in the
data set. Each of the next <I>N</I> lines contains a set of stamp denominations. The
first integer on each line is the number of denominations in the set, followed 
by a list of stamp denominations, in order from smallest to largest, with each 
denomination separated from the others by one or more spaces. There will be at 
most <I>S</I> denominations on each of the <I>N</I> lines. The maximum value of <I>S</I> is 10, the
largest stamp denomination is 100, the maximum value of <I>N</I> is 10.
<P>
<P>
The input is terminated by a data set beginning with zero (<I>S</I> is zero).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output one line for each data set giving the maximal no-gap coverage followed 
by the stamp denominations that yield that coverage in the following format:
<P>
<P>
<P>
<TT>max coverage = &lt;value&gt; : &lt;denominations&gt;</TT>
<P>
<P>
If more than one set of denominations in a set yields the same maximal no-gap 
coverage, the set with the fewest number of denominations should be printed 
(this saves on stamp printing costs). If two sets with the same number of 
denominations yield the same maximal no-gap coverage, then the set with the 
lower maximum stamp denomination should be printed. For example, if five 
stamps fit on an envelope, then stamp sets of 1, 4, 12, 21 and 1, 5, 12, 28 
both yield maximal no-gap coverage of 71 cents. The first set would be printed 
because both sets have the same number of denominations but the first set's 
largest denomination (21) is lower than that of the second set (28). If 
multiple sets in a sequence yield the same maximal no-gap coverage, have the 
same number of denominations, and have equal largest denominations, then print
the set with the lewer second-maximum stamp denomination, and so on.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
2
4 1 4 12 21
4 1 5 12 28
10
2
5 1 7 16 31 88
5 1 15 52 67 99
6
2
3 1 5 8
4 1 5 7 8
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>max coverage =  71 :  1  4 12 21
max coverage = 409 :  1  7 16 31 88
max coverage =  48 :  1  5  7  8</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
243||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Theseus and the Minotaur (II)</TITLE>
<META NAME="description" CONTENT="Theseus and the Minotaur (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Theseus and the Minotaur (II)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Those of you with a classical education may remember the legend of Theseus and 
the Minotaur. This is an unlikely tale involving a bull-headed monster, 
lovelorn damsels, balls of silk and an underground maze full of twisty little 
passages all alike. In line with the educational nature of this contest, we 
will now reveal the true story.
<P>
<P>
The maze was a series of caverns connected by passages. Theseus managed to
smuggle into the labyrinth with him a supply of candles and a small tube of 
phosphorescent paint with which he could mark his way, or, more specifically, 
the exits he used. He knew that he would be lowered into a passage between two 
caverns, and that if he could find and kill the Minotaur he would be set free. 
His intended strategy was to move cautiously along a passage until he came to 
a cavern and then turn right (he was left-handed and wished to keep his sword 
away from the wall) and feel his way around the edge of the cavern until he 
came to an exit. If this was unmarked, he would mark it and enter it; if it 
was marked he would ignore it and continue around the cavern. If he heard the 
Minotaur in a cavern with him, he would light a candle and kill the Minotaur, 
since the Minotaur would be blinded by the light. If, however, he met the 
Minotaur in a passage he would be in trouble, since the size of the passage 
would restrict his movements and he would be unable to either light a candle 
or fight adequately. When he entered a cavern that had been previously entered 
by the Minotaur he would light a candle and leave it there and then turn right 
(as usual) but take the last exit used by the Minotaur.
<P>
<P>
In the meantime, the Minotaur was also searching for Theseus. He was bigger 
and slower-moving but he knew the caverns well and hence, unlikely as it may 
seem, every time he emerged from a passage into a cavern, so did Theseus, 
albeit usually in a different one. The Minotaur turned left when he entered a 
cavern and traveled clockwise around it until he came to an unmarked (by him) 
exit, at which point he would mark it and take it. If he sensed that the 
cavern he was about to enter had a candle burning in it, he would turn and 
flee back up the passage he had just used, arriving back at the previous 
cavern to complete his `turn.' If this happens and Theseus is coming from that cavern they will meet in the passage.
<P>
<P>
Consider the following labyrinth as an example
<P>
<center><img src=243img1.gif></center>
<P>
Assume that Theseus starts off between A and C going toward C, and that the 
Minotaur starts off between F and H going toward H. After entering C, Theseus 
will move to D, whereas the Minotaur, after entering H will move to G. Theseus 
will then move towards G while the Minotaur will head for D and Theseus will 
be killed in the corridor between D and G. If, however, Theseus starts off as 
before and the Minotaur starts off between D and G then, while Theseus moves 
from C to D to G, the Minotaur moves from G to E to F. When Theseus enters G 
he detects that the Minotaur has been there before him and heads for E, and 
not for H, reaching it as the Minotaur reaches H. The Minotaur is thwarted in 
his attempt to get to G and turns back, arriving in H just as Theseus, still 
`following' the Minotaur arrives in F. The Minotaur tries E and is again
thwarted and arrives back at H just as Theseus arrives in hot pursuit. Thus 
the Minotaur is slain in H.
<P>
<P>
Write a program that will simulate Theseus' pursuit of the Minotaur.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of a series of labyrinths. Each labyrinth will contain a 
series of cavern descriptors, one per line. Each line will contain a cavern 
identifier (a single upper case character) followed by a colon (:) and a list 
of caverns reachable from it (in counterclockwise order). No cavern will be 
connected to itself. The cavern descriptors will not be ordered in any way. 
The description of a labyrinth will be terminated by a line starting with a @ 
character, followed by two pairs of cavern identifiers. The first pair 
indicates the passage in which Theseus starts, and the second in which the 
Minotaur starts. The travel in a starting passage is toward the cavern whose 
identifier is the second character in the pair. The file will be terminated by 
a line consisting of a single <TT>#</TT>.
<P>
<P>
A final encounter is possible for each input data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output will consist of one line for each labyrinth. Each line will specify who 
gets killed and where. Note that if the final encounter takes place in a 
passage it should be specified from Theseus' point of view. Follow the format 
shown in the example below exactly, which describes the situations referred to 
above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>A:BCD
D:BACG
F:HE
G:HED
B:AD
E:FGH
H:FEG
C:AD
@ACFH
A:BCD
D:BACG
F:HE
G:HED
B:AD
E:FGH
H:FEG
C:AD
@ACDG
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Theseus is killed between D and G
The Minotaur is slain in H</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
244||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Train Time</TITLE>
<META NAME="description" CONTENT="Train Time">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Train Time</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
City transportation planners are developing a light rail transit system to 
carry commuters between the suburbs and the downtown area. Part of their task 
includes scheduling trains on different routes between the outermost stations 
and the metro center hub.
<P>
<P>
Part of the planning process consists of a simple simulation of train travel. 
A simulation consists of a series of scenarios in which two trains, one 
starting at the metro center and one starting at the outermost station of the 
same route, travel toward each other along the route. The transportation 
planners want to find out where and when the two trains meet. You are to write 
a program to determine those results.
<P>
<P>
This model of train travel is necessarily simplified. All scenarios are based 
on the following assumptions.
<OL><LI> All trains spend a fixed amount of time at each station.<LI> All trains accelerate and decelerate at the same constant rate. All trains
   have the same maximum possible velocity.<LI> When a train leaves a station, it accelerates (at a constant rate) until
   it reaches its maximum velocity. It remains at that maximum velocity until 
   it begins to decelerate (at the same constant rate) as it approaches the 
   next station. Trains leave stations with an initial velocity of zero (0.0) 
   and they arrive at stations with terminal velocity zero. Adjacent stations 
   on each route are far enough apart to allow a train to accelerate to its 
   maximum velocity before beginning to decelerate.<LI> Both trains in each scenario make their initial departure at the same time.<LI> There are at most 31 stations along any route.
   <LI>The meeting time of both trains will never be at the departure of one of the trains from a station.
   
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
All input values are real numbers. Data for each scenario are in the following 
format.
<P>
<P>
<P> <IMG WIDTH=714 HEIGHT=190 ALIGN=BOTTOM ALT="tabular23" SRC="http://uva.onlinejudge.org/external/2/244img1.gif"   > <P>
<P>
<P>
The series of runs is terminated by a data set which begins with the number -1.0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each scenario, output consists of the following labeled data.
<P>
<OL><LI> The number of the scenario (numbered consecutively, starting with
   <TT>Scenario #1</TT>).<LI> The time when the two trains meet in terms of minutes from starting
   time. All times must be displayed to one decimal place. Also, if the 
   trains meet in a station, output the station number where they meet.<LI> The distance in miles between the metro center hub and the place where
   the two trains meet. Distances must be displayed to three decimal places.
</OL>
Print a blank line between consecutive test cases.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>15.0 0.0
5280.0
10560.0
5.0
3.5 7.0 0.0
5280.0
10560.0
2.0
3.4 7.0 0.0
5280.0
10560.0
2.0
-1.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Scenario #1:
   Meeting time: 7.8 minutes
   Meeting distance: 7.500 miles from metro center hub

Scenario #2:
   Meeting time: 4.0 minutes
   Meeting distance: 3.500 miles from metro center hub, in station 1

Scenario #3:
   Meeting time: 4.1 minutes
   Meeting distance: 3.400 miles from metro center hub, in station 1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
245||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Uncompress</TITLE>
<META NAME="description" CONTENT="Uncompress">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Uncompress</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A simple scheme for creating a compressed version of a text file can be used 
for files which contain no digit characters. The compression scheme requires 
making a list of the words in the uncompressed file. When a non-alphabetic 
character is encountered in the uncompressed file, it is copied directly into 
the compressed file. When a word is encountered in the uncompressed file, it 
is copied directly into the compressed file only if this is the first 
occurrence of the word. In that case, the word is put at the front of the 
list. If it is not the first occurrence, the word is not copied to the 
compressed file. Instead, its position in the list is copied into the 
compressed file and the word is moved to the front of the list. The numbering 
of list positions begins at 1.
<P>
<P>
Write a program that takes a compressed file as input and generates a 
reproduction of the original uncompressed file as output. You can assume that 
no word contains more than 50 characters and that the original uncompressed 
file contains no digit characters.
<P>
<P>
For the purposes of this problem, a word is defined to be a maximal sequence 
of upper- and lower-case letters. Words are case-sensitive - the
word <TT>abc</TT> is not the same as the word <TT>Abc</TT>. For example,
<P>
<P> <IMG WIDTH=495 HEIGHT=55 ALIGN=BOTTOM ALT="tabular23" SRC="http://uva.onlinejudge.org/external/2/245img1.gif"   > <P>
<P>
<P>
There is no upper limit on the number of different words in the input file.
The end of the input file is signified by the number 0 on a line by itself. 
The terminating 0 merely indicates the end of the input and should not be part 
of the output produced by your program.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Dear Sally,

   Please, please do it--1 would 4
Mary very, 1 much.  And 4 6
8 everything in 5's power to make
14 pay off for you.

   -- Thank 2 18 18--
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Dear Sally,

   Please, please do it--it would please
Mary very, very much.  And Mary would
do everything in Mary's power to make
it pay off for you.

   -- Thank you very much--</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
246||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>10-20-30</TITLE>
<META NAME="description" CONTENT="10-20-30">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">10-20-30</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A simple solitaire card game called 10-20-30 uses a standard deck of 52
playing cards in which suit is irrelevant. The value of a face card (king,
queen, jack) is 10. The value of an ace is one. The value of each of the
other cards is the face value of the card (2, 3, 4, etc.). Cards are dealt
from the top of the deck. You begin by dealing out seven cards, left to
right forming seven piles. After playing a card on the rightmost pile, the
next pile upon which you play a card is the leftmost pile.
<P>
<P>
For each card placed on a pile, check that pile to see if one of the
following three card combinations totals 10, 20, or 30.
<P>
<PRE><TT> 
		 1. 		 the first two and last one,
<P>
		 2. 		 the first one and the last two, or
<P>
		 3. 		 the last three cards.
<P>
</TT></PRE>
<P>
If so, pick up the three cards and place them on the bottom of the deck. For
this problem, always check the pile in the order just described. Collect the
cards in the order they appear on the pile and put them at the bottom of the
deck. Picking up three cards may expose three more cards that can be picked
up. If so, pick them up. Continue until no more sets of three can be picked
up from the pile.
<P>
<P>
For example, suppose a pile contains 5 9 7 3 where the 5 is at the first
card of the pile, and then a 6 is played. The first two cards plus the last
card (5 + 9 + 6) sum to 20. The new contents of the pile after picking up
those three cards becomes 7 3. Also, the bottommost card in the deck is now
the 6, the card above it is the 9, and the one above the 9 is the 5.
<P>
<center><img src=246img1.gif></center>
<P>
If a queen were played instead of the six, 5 + 9 + 10 = 24, and 5 + 3 + 10 =
18, but 7 + 3 + 10 = 20, so the last three cards would be picked up, leaving
the pile as 5 9.
<P>
<center><img src=246img2.gif></center>
<P>
If a pile contains only three cards when the three sum to 10, 20, or 30,
then the pile &quot;disappears&quot; when the cards are picked up. That is, subsequent
play skips over the position that the now-empty pile occupied. You win if
all the piles disappear. You lose if you are unable to deal a card. It is
also possible to have a draw if neither of the previous two conditions ever
occurs.
<P>
<P>
Write a program that will play games of 10-20-30 given initial card decks as
input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each input set consists of a sequence of 52 integers separated by spaces
and/or ends of line. The integers represent card values of the initial deck
for that game. The first integer is the top card of the deck. Input is
terminated by a single zero (0) following the last deck.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input set, print whether the result of the game is a win, loss, or
a draw, and print the number of times a card is dealt before the game
results can be determined. (A draw occurs as soon as the state of the game
is repeated.) Use the format shown in the ``Sample Output&quot;
section.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 6 5 10 10 4 10 10 10 4 5 10 4 5 10 9 7 6 1 7 6 9 5 3 10 10 4 10 9 2 1
10 1 10 10 10 3 10 9 8 10 8 7 1 2 8 6 7 3 3 8 2
4 3 2 10 8 10 6 8 9 5 8 10 5 3 5 4 6 9 9 1 7 6 3 5 10 10 8 10 9 10 10 7
2 6 10 10 4 10 1 3 10 1 1 10 2 2 10 4 10 7 7 10
10 5 4 3 5 7 10 8 2 3 9 10 8 4 5 1 7 6 7 2 6 9 10 2 3 10 3 4 4 9 10 1 1
10   5 10 10 1 8 10 7 8 10 6 10 10 10 9 6 2 10 10
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Win : 66
Loss: 82
Draw: 73</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
247||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Calling Circles</TITLE>
<META NAME="description" CONTENT="Calling Circles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Calling Circles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
If you've seen television commercials for long-distance phone companies
lately, you've noticed that many companies have been spending a lot of money
trying to convince people that they provide the best service at the lowest
cost. One company has ``calling circles.&quot; You provide a list of people that
you call most frequently. If you call someone in your calling circle (who is
also a customer of the same company), you get bigger discounts than if you
call outside your circle. Another company points out that you only get the
big discounts for people in your calling circle, and if you change who you
call most frequently, it's up to you to add them to your calling circle.
<P>
<P>
LibertyBell Phone Co. is a new company that thinks they have the calling
plan that can put other companies out of business. LibertyBell has calling
circles, but they figure out your calling circle for you. This is how it
works. LibertyBell keeps track of all phone calls. In addition to yourself,
your calling circle consists of all people whom you call and who call you,
either directly or indirectly.
<P>
For example, if Ben calls Alexander,
Alexander calls Dolly, and Dolly calls Ben, they are all within the same
circle. If Dolly also calls Benedict and Benedict calls Dolly, then Benedict
is in the same calling circle as Dolly, Ben, and Alexander. Finally, if
Alexander calls Aaron but Aaron doesn't call Alexander, Ben, Dolly, or
Benedict, then Aaron is not in the circle.
<P>
<P>
You've been hired by LibertyBell to write the program to determine calling
circles given a log of phone calls between people.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain one or more data sets. Each data set begins with
a line containing two integers, <I>n</I> and <I>m</I>. The first integer, <I>n</I>, represents
the number of different people who are in the data set. The maximum value
for <I>n</I> is 25. The remainder of the data set consists of <I>m</I> lines, each
representing a phone call. Each call is represented by two names, separated
by a single space. Names are first names only (unique within a data set),
are case sensitive, and consist of only alphabetic characters; no name is
longer than 25 letters.
<P>
For example, if Ben called Dolly, it would be
represented in the data file as
<P>
<PRE>Ben Dolly</PRE>
<P>
Input is terminated by values of zero (0) for <I>n</I> and <I>m</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input set, print a header line with the data set number, followed
by a line for each calling circle in that data set. Each calling circle line
contains the names of all the people in any order within the circle,
separated by comma-space (a comma followed by a space). Output sets are
separated by blank lines.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 6
Ben Alexander
Alexander Dolly
Dolly Ben
Dolly Benedict
Benedict Dolly
Alexander Aaron
14 34
John Aaron
Aaron Benedict
Betsy John
Betsy Ringo
Ringo Dolly
Benedict Paul
John Betsy
John Aaron
Benedict George
Dolly Ringo
Paul Martha
George Ben
Alexander George
Betsy Ringo
Alexander Stephen
Martha Stephen
Benedict Alexander
Stephen Paul
Betsy Ringo
Quincy Martha
Ben Patrick
Betsy Ringo
Patrick Stephen
Paul Alexander
Patrick Ben
Stephen Quincy
Ringo Betsy
Betsy Benedict
Betsy Benedict
Betsy Benedict
Betsy Benedict
Betsy Benedict
Betsy Benedict
Quincy Martha
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Calling circles for data set 1:
Ben, Alexander, Dolly, Benedict
Aaron

Calling circles for data set 2:
John, Betsy, Ringo, Dolly
Aaron
Benedict
Paul, George, Martha, Ben, Alexander, Stephen, Quincy, Patrick</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
248||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cutting Corners</TITLE>
<META NAME="description" CONTENT="Cutting Corners">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cutting Corners</A>&nbsp;</FONT></B></TABLE></CENTER></H1>
<P>
Bicycle messengers who deliver documents and small items to businesses have
long been part of the guerrilla transportation services in several major
U.S. cities. The cyclists of Boston are a rare breed of riders. They are
notorious for their speed, their disrespect for one-way streets and traffic
signals, and their brazen disregard for cars, taxis, buses, and pedestrians.
<P>
<P>
Bicycle messenger services are very competitive. Billy's Bicycle Messenger
Service is no exception. To boost its competitive edge and to determine its
actual expenses, BBMS is developing a new scheme for pricing deliveries that
depends on the shortest route messengers can travel. You are to write a
program to help BBMS determine the distances for these routes.
<P>
<P>
The following assumptions help simplify your task:
<P>
<UL><LI> Messengers can ride their bicycles anywhere at ground level except
     inside buildings.<LI> Ground floors of irregularly shaped buildings are modeled by the union
     of the interiors of rectangles. By agreement any intersecting
     rectangles share interior space and are part of the same building.<LI> The defining rectangles for two separate buildings never touch,
     although they can be quite close. (Bicycle messengers- skinny to a
     fault-can travel between any two buildings. They can cut the sharpest
     corners and run their skinny tires right down the perimeters of the
     buildings.)<LI> The starting and stopping points are never inside buildings.<LI> There is always some route from the starting point to the stopping
     point.
</UL>
<P>
Your program must be able to process several scenarios. Each scenario
defines the buildings and the starting and stopping points for a delivery
route. The picture below shows a bird's-eye view of a typical scenario.
<P>
<center><img src=248img4.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>
<P>
The input file represents several scenarios. Input for each scenario
consists of lines as follows:
<P>
<PRE><TT> 
First line: <I>n</I>
<P>
		    The number of rectangles describing the buildings in the scenario.  <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/2/248img1.gif"   > 
<P>
Second line:  <IMG WIDTH=82 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/2/248img1.gif"   > 
<P>
		     The <I>x</I>- and <I>y</I>-coordinates of the starting and stopping points of the route.
<P>
Remaining <I>n</I> lines:  <IMG WIDTH=127 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/2/248img1.gif"   > 
<P>
		     The <I>x</I>- and <I>y</I>-coordinates of three vertices of a rectangle.
<P>
</TT></PRE>
<P>
The <I>x</I>- and <I>y</I>-coordinates of all input data are real numbers between 0 and
1000 inclusive. Successive coordinates on a line are separated by one or
more blanks. The integer -1 follows the data of the last scenario.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>
<P>
Output should number each scenario (<TT>Scenario #1</TT>, <TT>Scenario #2</TT>, etc.) and give
the distance of the shortest route from starting to stopping point as
illustrated in the Sample Output below. The distance should be written with
two digits to the right of the decimal point. Output for successive
scenarios should be separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2>
<P>
<PRE>5
6.5   9     10  3
1     5     3   3     6  6
5.25  2     8   2     8  3.5
6     10    6   12    9  12
7     6     11  6     11 8
10    7     11  7     11 11
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2>
<P>
<PRE>Scenario #1
   route distance: 7.28</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
249||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bang the Drum Slowly</TITLE>
<META NAME="description" CONTENT="Bang the Drum Slowly">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bang the Drum Slowly</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many years ago the ``primary memory&quot; of most computer systems was a magnetic
drum. Read/write heads were placed so they could access data from the
magnetic outer surface as the drum rotated along its horizontal axis. The
following illustration gives the basic idea:
<P>
<center><img src=249img1.gif></center>
<P>
As the drum rotated, the data word under the read/write head(s) could be
accessed. The drum continued to rotate after an instruction was fetched.
After the execution of an instruction, the word ready to be accessed by the
read/write head(s) was typically many words away. To minimize the delay that
would occur if instructions to be executed sequentially were placed in
consecutive words on the drum, designers of these machines frequently
included the next instruction's drum address as a field in the instruction
(that is, each instruction included an explicit ``next instruction&quot; address).
Then ``optimizing&quot; assemblers could fill in the next instruction field with
the address of the first available word ready to be read by the drum as soon
as the current instruction was completed.
<P>
<P>
In this problem we want to determine the average execution times of simple
programs without loops. We will consider only a single read/write head on a
single track. Assume that the words on that track have sequential addresses
numbered 1 through <I>n</I>. All instructions require the same length of time to
execute, specifically the same time as it takes the drum to rotate past t
words. t does not include the time to read the instruction from the drum,
nor does it include the additional rotational delay that might be required
if the next instruction isn't at the ``optimum&quot; address. However, these
factors must be included in calculating the average execution time.
<P>
<P>
There are three types of instructions: terminal, conditional and
unconditional. Terminal instructions don't have a ``next instruction&quot;
address, since they terminate the execution of a program. Conditional
instructions have two ``next instruction&quot; addresses, and unconditional
instructions have only one ``next instruction&quot; address.
<P>
<P>
The execution time of a program run is the time taken from beginning to read
the first instruction until the terminal instruction has executed. To
calculate the average execution time of a program, every possible run time
is weighted (multiplied) by the probability of the run. We assume equal
probability of taking each path of a branch in a conditional instruction.
The sum of all weighted run times is the average execution time of the
program.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a number of test cases. The input for each test case
begins with a line containing integer values for <I>n</I> (1 &lt; <I>n</I> &lt; 50) 
and <I>t</I> (0 &lt; <I>t</I>&lt; <I>n</I>). 
This line is followed by a sequence of lines each of which contains
integers representing an instruction address and zero, one, or two branch
addresses. Specifically, for each instruction there is a location (between 1
and <I>n</I>), the number of ``next instruction&quot; addresses (0 for a terminal
instruction, 1 for an unconditional instruction, and 2 for a conditional
instruction), and that many branch addresses. The last instruction is
followed by 0 on a line by itself. The input set is terminated by values of
0 for both <I>n</I> and <I>t</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, print the case number (they are numbered sequentially
starting with 1) and the average execution time for the program. Execution
times must be accurate to and displayed with four fractional digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10 5
1 0
0
10 5
1 1 6
6 0
0
10 5
1 1 7
7 0
0
10 5
1 2 7 8
7 0
8 0
0
10 6
8 0
7 1 3
3 0
1 2 7 8
0
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1. Execution time = 6.0000
Case 2. Execution time = 21.0000
Case 3. Execution time = 12.0000
Case 4. Execution time = 12.5000
Case 5. Execution time = 26.5000</PRE>
<P>
<P>
<P>
<B>Assumptions:</B>
<EM>
<UL><LI> At the beginning of each test case the drum is positioned so that the
     instruction at location 1 is about to be read.<LI> Each program begins execution with the word in location 1.<LI> The time to read an instruction is one time unit.<LI> There will always be at least one terminal instruction, but there may
     be several.
</UL>
</EM>
<P>
</BODY>
</HTML>

______________________________________________________
250||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pattern Matching Prelims</TITLE>
<META NAME="description" CONTENT="Pattern Matching Prelims">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pattern Matching Prelims</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Some algorithms for optical character recognition compare a scanned image
with templates of ``perfect&quot; characters. Part of the difficulty with such
comparisons is deciding where to start the comparison. This is because the
characters in the scanned image are subject to noise and distortion,
resulting in changes in size, position, and orientation.
<P>
A procedure that is
sometimes used to deal with changes in position matches the ``center of
gravity&quot; of the scanned character and the templates against which it is
compared. In this problem you are to determine the ``centers of gravity&quot; of
scanned images of characters.
<P>
<P>
For our purposes, a scanned image will be a rectangular array of real
numbers, each of which represents the gray-scale value of a point in a
scanned image. Each gray-scale value will be between 0 (representing a
totally white region) and 1 (representing a totally black region). The array
will have no more than 25 rows and 25 columns.
<P>
<P>
The center of gravity is a particular element of an array. Suppose a center
of gravity is in the ith row and jth column. Then the difference between the
sum of the elements of the two array portions above and below the ith row is
minimal. Likewise, the difference of the sums of the elements in the two
array portions to the left and to the right of the jth column is minimal.
<P>
<P>
Consider the array shown below, which might have resulted from scanning a
lower case ``o.&quot; The center of gravity for this array is uniquely in row 3,
column 3. The difference of the sum of the elements in each array portion
formed by ignoring the third row is 0.1 (the sums are 5.55 and 5.65). The
difference of the sum of each array portion formed by ignoring the third
column is 0.0 (the sums are both 5.60).
<P>
<center><img src=250img1.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of a sequence of scanned character images. Input for
each image will begin with two integers specifying the number of rows and
columns in the scanned data. This will be immediately followed by the
scanned gray-scale data given in row-major order. A pair of zeroes will
follow the data for the last input image.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input character image, display its number (they are sequentially
numbered starting with 1) and the row and column corresponding to the center
of gravity. If there is more than one center of gravity, the one with the
largest row and column should be displayed. The sample that follows
illustrates a reasonable output format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1

5 10
0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1
0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2
0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3
0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4
0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.6

0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: center at (3, 3)
Case 2: center at (4, 6)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
251||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Nondeterministic Trellis Automata</TITLE>
<META NAME="description" CONTENT="Nondeterministic Trellis Automata">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Nondeterministic Trellis Automata</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A nondeterministic trellis automaton (NTA) is a kind of parallel machine
composed of identical finite-state processors arranged in an infinite
triangular trellis. The top, or apex, of the triangle is a single processor.
The next row has two processors and each successive row of an NTA has one
more processor than the row above it. Each processor in an NTA is connected
to two children in the row below it. Computation in an NTA occurs bottom up;
the state of each processor in a row is based on the state of the
processor's children and a transition table. The input to an NTA is the
initial configuration of one row of processors. The input is specified by a
string that gives the initial state of each processor in a row so that an
<I>n</I>-character string specifies the initial configuration for a row of <I>n</I>
processors. Computation proceeds up the NTA to the apex by
nondeterministically calculating the state of each processor in a row based
on the transition table and the state of the processor's children in the row
below.
<P>
<P>
Some states are identified as accepting states. Some transitions are
computed nondeterministically. An input is <I>accepted</I> if some computation puts
the apex processor into an accepting state. An input is <I>rejected</I> if no
computation puts the apex processor into an accepting state. For example,
the table below shows transitions for a 3-state NTA. States are labeled by
characters ``<TT>a</TT>&quot;, ``<TT>b</TT>&quot;, and ``<TT>c</TT>&quot;; the only accepting state is ``<TT>c</TT>&quot;.
<P>
<center><img src=251img2.gif></center>
<P>
The diagram below shows two computations for the input ``<TT>bba</TT>&quot;. The
computation on the left rejects the input since the state of the apex is
``<TT>a</TT>&quot;; but the computation on the right accepts the input since the state of
the apex is ``<TT>c</TT>&quot;. Since some computation results in an accepting state for
the apex, the input ``<TT>bba</TT>&quot; is accepted by the NTA. The input ``<TT>bbb</TT>&quot; would be
rejected by this NTA since the only computation results in the state ``<TT>a</TT>&quot; for
the apex.
<P>
<center><img src=251img3.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The states (and inputs) of an NTA are consecutive lowercase letters. Thus
the states for a 5-state NTA are ``<TT>a</TT>&quot;, ``<TT>b</TT>&quot;, ``<TT>c</TT>&quot;, ``<TT>d</TT>&quot;, and ``<TT>e</TT>&quot;. Accepting
states are grouped at the end of the letters so that if a 5-state NTA has
two accepting states, the accepting states are ``<TT>d</TT>&quot; and ``<TT>e</TT>&quot;.
<P>
<P>
The input for your program is a sequence of NTA descriptions and initial
configurations. An NTA description is given by the number of states <I>n</I>
followed by the number of accepting states on one line separated by
whitespace. The  <IMG WIDTH=41 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline59" SRC="http://uva.onlinejudge.org/external/2/251img1.gif"   >  transition table follows in row-major order; each
transition string is given on a separate line. Each NTA description is
followed by a sequence of initial configurations, one per line. A line of
``<TT>#</TT>&quot; terminates the sequence of initial configurations for that NTA. An NTA
description in which the number of states is zero terminates the input for
your program.
<P>
<P>
NTAs will have at most 15 states, initial configuration will be at most 15
characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each NTA description, print the number of the NTA (NTA 1, NTA 2, etc. ).
For each initial configuration of an NTA print the word ``accept&quot; or ``reject&quot;
followed by a copy of the initial configuration. Print a blank line between NTA descriptions.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 1
a
a
c
ca
a
b
c
b
a
bba
aaaaa
abab
babbba
a
baaab
abbbaba
baba
bcbab
#
3 2
ab
a
c
a
ab
b
c
b
ab
abc
cbc
#
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>NTA 1
accept bba
reject aaaaa
reject abab
accept babbba
reject a
accept baaab
accept abbbaba
accept baba
reject bcbab

NTA 2
reject abc
accept cbc</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
252||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Trucking</TITLE>
<META NAME="description" CONTENT="Trucking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Trucking</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Allied Container Movers (ACM) is a trucking company that provides overnight
freight delivery. ACM has a distribution network with several intermediate
container processing centers (ICPCs). At an ICPC, an incoming trailer is
unloaded at a stripping door. Freight destined for that center is simply
acknowledged as received. Onward shipments are distributed to relay doors
based on their next destinations, where they are loaded onto waiting
trailers.
<P>
<P>
Each ICPC has several stripping doors for unloading incoming trailers. When
the number of trailers to be stripped exceeds the number of stripping doors,
incoming trailers are queued until a door is available. A single trailer may
have freight for several different ICPCs. Trailers with freight destined
only for the local ICPC receive a lower priority for access to a stripping
door than trailers with relay freight. In a similar fashion, trailers with
relay freight having a closer final destination have lower priority than
trailers with relay freight having a distant final destination. The time to
unload a container and, if necessary, reload all its shipments onto one or
more relay trailers is always 2 hours regardless of the size and number of
shipments. A relay trailer is immediately routed to its next destination
when it is full or when all shipments for the day expected for that
destination have been loaded onto the trailer. Shipments are measured as a
percent of a trailer volume and may be subdivided to the nearest percent in
order to fill the trailer. There is no delay between a trailer departing and
another trailer becoming available at the relay or stripping doors. There is
never a shortage of trailers for onward distribution.
<P>
<P>
In order to help ACM assess the efficiency of their network, you must write
a program to determine the average time a trailer waits for access to a
stripping door and identify those shipments which will not arrive in their
entirety at their intermediate or final destinations on time.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input contains several datasets. Each dataset describes a possibly disjoint subset of the network's ICPCs and
traffic patterns that must be analyzed.
The first line of the dataset contains an integer <I>n</I> which specifies the number
of ICPC descriptions to be processed,  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > . This is
followed by <I>n</I>
descriptions, each describing one ICPC. Each description begins with a line
containing three integers, <I>c s d</I>, where <I>c</I> is the center
number,  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > ,
<I>s</I> is the number of stripping doors at
center <I>c</I>,  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > , and <I>d</I> is
the number of relay doors at center <I>c</I>,  <IMG WIDTH=80 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > .
There then follow <I>d</I>
lines, one for each relay door. Each of these lines contains three integers,
<I>r v l</I>, where <I>r</I> is the relay center's
number,  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > , <I>v</I> is the total
volume of shipments to that center for the day expressed as a percentage of
trailer volume,  <IMG WIDTH=89 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   >  and <I>l</I> is the latest acceptable time for
shipments to arrive at center <I>r</I>, expressed as minutes since the start of the
day,  <IMG WIDTH=94 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > . (<I>v</I> &gt; 100 indicates that more than a single trailer must
be used.)
<P>
<P>
The second part of the dataset describes some of the day's traffic. This part
begins with one integer <I>m</I> on a line by itself indicating the number of
trailer arrival records that follow,  <IMG WIDTH=95 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline73" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > . Each record begins with
a line containing three integers, <I>a c s</I>, where <I>a</I> is the trailer's arrival
time expressed as minutes since the start of the day,  <IMG WIDTH=98 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline79" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > , at
center number <I>c</I>, and <I>s</I> is the number of shipments in the
trailer,  <IMG WIDTH=79 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > .
Then all <I>s</I> shipments are described by <I>s</I> lines of 5
integers, <I>i o r v t</I>,
representing the shipment identification code <I>i</I>,  <IMG WIDTH=77 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline95" SRC="http://uva.onlinejudge.org/external/2/252img1.gif"   > ,
the origin and next relay center
numbers <I>o</I> and <I>r</I> respectively, the volume of the shipment <I>v</I> as
a percentage
of trailer volume and the time <I>t</I> taken to travel from center <I>c</I> to
destination <I>r</I> measured in minutes. <I>t</I> is zero if <I>c</I>
equals <I>r</I>. Arrival records
are in order of ascending values of <I>a</I>. No two records have the same pair
(<I>a</I>,<I>c</I>). All center numbers used as values for <I>c</I> and <I>r</I> will have an
appropriate corresponding definition in the first part of the dataset, though
the center numbers used for <I>o</I> need not.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each of the n ICPCs in each dataset, your program must write out a line describing the
average wait time for stripping doors in the appropriate one of these two
forms:
<P>
<P>
<P>
<TT>The average wait for a stripping door at ICPC <I>c</I> is ###.# minutes.</TT>
<P>
<TT>There is no wait for a stripping door at ICPC <I>c</I>.</TT>
<P>
<P>
The average wait time is affected only by trailers which wait at least one
minute for a stripping door.
<P>
<P>
Your program should then list all the shipments any part of which will not
arrive at their intermediate or final destinations by any of the latest
arrival times given along the route. This report should appear in columns
headed as shown:
<P>
<PRE>The late shipments are:
Id Origin Destination Volume</PRE>
<P>Print a blank line after each dataset.
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input:</A></FONT></H2>
<P>
<PRE>2
0 1 1
    8  40  600
8 3 4
    6 115 1200
    2  95 1260
   10 100 1440
    4  55 1380
7
500 0 1
   17  11  8  40   80
700 8 3
   24  11  8  45    0
   18  11  6  40  120
   23  11 10  15  600
720 8 1
   16   3  8 100    0
750 8 2
    4  15  2  50  180
    7  15  6  50  120
760 8 4
   14   3  4  20  300
   27   3  2  20  180
   33   3 10  35  600
   16   3  6  25  120
780 8 2
   12   9  2  25  180
   15   9  4  35  300
800 8 1
   19  18 10  50  600</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output:</A></FONT></H2>
<P>
<PRE>There is no wait for a stripping door at ICPC 0.
The average wait for a stripping door at ICPC 8 is 63.3 minutes.

The late shipments are:
Id Origin Destination Volume
17     11           8     40
23     11          10     15
33      3          10     35
19     18          10     50</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
253||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cube painting</TITLE>
<META NAME="description" CONTENT="Cube painting">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cube painting</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
We have a machine for painting cubes.  It is supplied with
three different colors: blue,
red and green.  Each face of the cube gets one
of these colors.  The cube's faces are
numbered as in Figure 1.
<P>
<P> <IMG WIDTH=255 HEIGHT=240 ALIGN=BOTTOM ALT="picture21" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > <P>
<P>
<P>
Figure 1.
<P>
Since a cube has 6 faces, our machine can
paint a face-numbered cube in  <IMG WIDTH=64 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline126" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > 
different ways.  When ignoring the face-numbers,
the number of different paintings is
much less, because a cube can be rotated.  See example below.
We denote a painted cube by a string of 6 characters,
where each character is a <TT>b</TT>, <TT>r</TT>,
or <TT>g</TT>. The   <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline128" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   >  character ( <IMG WIDTH=68 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline130" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > ) from
the left gives the color of face <I>i</I>. For example,
Figure 2 is a picture of <TT>rbgggr</TT> and Figure 3
corresponds to <TT>rggbgr</TT>.  Notice that both
cubes are painted in the same way: by
rotating it around the vertical axis by 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline134" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > , the
one changes into the other.
<P>
 <IMG WIDTH=257 HEIGHT=282 ALIGN=BOTTOM ALT="tex2html_wrap138" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > 
 <IMG WIDTH=257 HEIGHT=282 ALIGN=BOTTOM ALT="tex2html_wrap140" SRC="http://uva.onlinejudge.org/external/2/253img1.gif"   > <H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input of your program is a textfile that
ends with the standard end-of-file marker.
Each line is a string of 12 characters.
The first 6 characters of this string are the
representation of a painted cube, the
remaining 6 characters give you the representation
of another cube.  Your program determines whether
these two cubes are painted in the
same way, that is, whether by any combination
of rotations one can be turned into the
other. (Reflections are not allowed.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is a file of boolean.
For each line of input, output contains <TT>TRUE</TT> if the
second half can be obtained from the first
half by rotation as describes above, <TT>FALSE</TT>
otherwise.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>rbgggrrggbgr
rrrbbbrrbbbr
rbgrbgrrrrrg</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>TRUE
FALSE
FALSE</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
254||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Towers of Hanoi</TITLE>
<META NAME="description" CONTENT="Towers of Hanoi">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Towers of Hanoi</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In 1883, Edouard Lucas invented, or perhaps reinvented, one of the most popular
puzzles of all times - the Tower of Hanoi, as he called it - which is still
used today in many computer science textbooks to demonstrate how to write a 
recursive algorithm or program. First of all, we will make a list of the rules
of the puzzle:
<P>
<UL><LI> There are three pegs: <I>A</I>, <I>B</I> and <I>C</I>.<LI> There are <I>n</I> disks. The number <I>n</I> is constant while working the puzzle.<LI> All disks are different in size.<LI> The disks are initially stacked on peg <I>A</I> so that they increase in size
from the top to the bottom.<LI> The goal of the puzzle is to transfer the entire tower from the <I>A</I> peg
to one of the others pegs.<LI> One disk at a time can be moved from the top of a stack either to an 
empty peg or to a peg with a larger disk than itself on the top of its stack.
</UL>
<P>
A good way to get a feeling for the puzzle is to write a program which will 
show a copy of the puzzle on the screen and let you simulate moving the disks
around. The next step could be to write a program for solving the puzzle in
a efficient way. You don't have to do neither, but only know the actual 
situation after a given number of moves by using a determinate algorithm.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">The Algorithm</A></FONT></H2>
<P>
It is well known and rather easy to prove that the minimum number of moves
needed to complete the puzzle with <I>n</I> disks is  <IMG WIDTH=46 HEIGHT=22 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/254img1.gif"   > . A simple algorithm
which allows us to reach this optimum is as follows: for odd moves, take the
smallest disk (number 1) from the peg where it lies to the next one in the
circular sequence  <IMG WIDTH=104 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/2/254img1.gif"   > ; for even moves, make the only possible 
move not involving disk 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of a series of lines. Each line will contain two
integers <I>n</I>, <I>m</I>: <I>n</I>, lying within the range [0,100], will denote the number
of disks and <I>m</I>, belonging to [0,   <IMG WIDTH=46 HEIGHT=22 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/254img1.gif"   > ], will be the number of the last
move. The file will end at a line formed by two zeros.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
The output will consist again of a series of lines, one for each line of the
input. Each of them will be formed by three integers indicating the number of
disks in the pegs <I>A</I>, <I>B</I> and <I>C</I> respectively, when using the algorithm 
described above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 5
64 2
8 45
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 1 1
62 1 1
4 2 2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
255||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Correct Move</TITLE>
<META NAME="description" CONTENT="Correct Move">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Correct Move</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
We have a square board with 64 places, numbered
from 0 to 63, see Figure 1. There
are two pieces: A king and a queen.
The pair of king's place and queen's place is called
the <I>state</I>.  A state is <I>legal</I> if the pieces
are not at the same place.  The king and queen
move alternatingly.  The king can move one
step in a horizontal or vertical direction, as
long as it does not arrive at the place
of the queen.  The queen can move one ore more
steps in a horizontal or vertical direction,
as long as it does not encounter the king.  All
these moves are called <I>legal</I>.  Please note
that the pieces may not move diagonally.
<P>
<P> <IMG WIDTH=292 HEIGHT=277 ALIGN=BOTTOM ALT="tabular24" SRC="http://uva.onlinejudge.org/external/2/255img1.gif"   > <P>
<P>
<P>
Figure 1.
<P>
For example, suppose we have a state with
a king at place 17 and a queen at place 49,
as in Figure 2. The legal moves of
the king are to places 9, 16, 18, and 25 and the
queen can legally move to place
25, 33, 41, 48, 50, 51, 52, 53, 54, 55, or 57.  We impose,
however, an extra restriction: A piece
may not move to a place where the other one can
also move to.  Legal moves satisfying this
restriction are called <I>allowed</I>.  In Figure 2, all
possible places the king and the queen
can move to by an <I>allowed</I> move, are denoted
with a circle ( <IMG WIDTH=7 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline187" SRC="http://uva.onlinejudge.org/external/2/255img1.gif"   > ) and a dot ( <IMG WIDTH=7 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline189" SRC="http://uva.onlinejudge.org/external/2/255img1.gif"   > ), respectively.
In Figure 3, the king cannot move, it is
locked in.
<P>
 <IMG WIDTH=268 HEIGHT=304 ALIGN=BOTTOM ALT="tex2html_wrap215" SRC="http://uva.onlinejudge.org/external/2/255img1.gif"   >  \
 <IMG WIDTH=269 HEIGHT=304 ALIGN=BOTTOM ALT="tex2html_wrap217" SRC="http://uva.onlinejudge.org/external/2/255img1.gif"   > 
<P>
This problem requires you to write a program
that does some checking related to the movement of the queen.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for your program resides in a
textfile that ends with the standard end-of-file
marker.  Each line ends with the standard
end-of-line marker and contains a sequence of
three integers in the range O..63, separated
by one space.  The first two integers denote
the place of the king and the queen,
respectively.  Together they form a state.  The third
integer denotes a new place for the queen.
You may think of it as computed by some
function <TT>movequeen</TT>.  Your program determines whether:
<P>
<UL><LI> the given state is legal<LI> the queen's move is legal<LI> the queen's move is allowed.
</UL>
<P>
Furthermore, if these requirements are met,
your program determines whether the move
of the queen results in a state where the king is locked in.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is also a textflle.  For each
input line, your program produces one output
line with one of the following messages:
<P>
<UL><LI> <TT>Illegal state</TT><LI> <TT>Illegal move</TT><LI> <TT>Move not allowed</TT><LI> <TT>Continue</TT><LI> <TT>Stop</TT>
</UL>
<P>
`<TT>Illegal state</TT>' indicates that the given
state is not legal, i.e. the pieces are at the
same place.
<P>
`<TT>Illegal move</TT>' means that the given state is
legal, but the queen's move is illegal.
<P>
`<TT>Move not allowed</TT>' applies if both the
given state and the queen's move are legal, but
the queen's move is not allowed.
<P>
Both `<TT>Continue</TT>' and `<TT>Stop</TT>' mean that the
given state is legal and the queen's move
is allowed.  If the king can do an allowed
move in the resulting state, the message is
`<TT>Continue</TT>', otherwise the king is locked in and you reply `<TT>Stop</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE> 17 17 49
 17 49 56
 17 49 9
 17 49 17
 17 49 25
 17 49 33
 17 49 41
 17 49 49
 56 48 49</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Illegal state
Illegal move
Illegal move
Illegal move
Move not allowed
Continue
Continue
Illegal move
Stop</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
256||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Quirksome Squares</TITLE>
<META NAME="description" CONTENT="Quirksome Squares">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Quirksome Squares</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The number 3025 has a remarkable quirk: if
you split its decimal representation in two strings
of equal length (30 and 25) and square the
sum of the numbers so obtained, you obtain the
original number:
<P>
<P> <IMG WIDTH=316 HEIGHT=20 ALIGN=BOTTOM ALT="displaymath26" SRC="http://uva.onlinejudge.org/external/2/256img1.gif"   > <P>
<P>
The problem is to determine all numbers with
this property having a given even number of
digits.
<P>
<P>
For example, 4-digit numbers run
from 0000 to 9999.  Note that leading zeroes should be
taken into account.  This means that 0001
which is equal to  <IMG WIDTH=74 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/2/256img1.gif"   >  is a quirksome number
of 4 digits.  The number of digits
may be 2,4,6 or 8. Although maxint is only 32767 and
numbers of eight digits are asked for,
a well-versed programmer can keep his numbers in the
range of the integers.  However efficiency should be given a thought.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input of your program is a textflle containing
numbers of digits (taken from 2,4,6,8),
each number on a line of its own.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is a textfile consisting of lines containing the
quirksome numbers (ordered according to the
input numbers and for each input number in
increasing order).
<P>
<P>
<P>
<B>Warning:</B>
Please note that the number of digits in
the output is equal to the number in the corresponding
input line : leading zeroes may not be suppressed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>00
01
81
00
01
81</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
257||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Palinwords</TITLE>
<META NAME="description" CONTENT="Palinwords">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Palinwords</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A palindrome is a string of characters which
can be read forward and backward and still
result in the same word, e.g. `<TT>mumdadmum</TT>'.
So by definition the empty string, all strings
containing 1 character, and all strings
containing 2 equal characters are palindromes.
The length of a palindrome is the number of
characters in the palindrome.
<P>
A <I>palinword</I> is a string of characters that
contains at least 2 different palindromes each
with a length of at least 3. (Here the
position is immaterial: the same palindrome occurring
in another position is not considered as
different.) Neither of these 2 palindromes may be
embedded in the other palindrome (for example
the palindrome `<TT>mum</TT>' is embedded in the
palindrome `<TT>amuma</TT>', and `<TT>aaa</TT>' is embedded
in `<TT>aaaa</TT>') but they may partially overlap.  Also
see the examples below.
<P>
<P>
Your program's task is to copy only the
palinwords from the input file to the output file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for your program is a textfile.
Each line in this file is empty or consists of one or
more words (uppercase letters `<TT>A</TT>'
through `<TT>Z</TT>' only) separated by one or more spaces (each
line in the input file contains at most 255 characters in all).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file is a textfile and must have
one palinword per line in order of occurrence
in the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>MOEILIJKHEDEN INVOER
VERNEDEREN
AMUMA AMAMA MUMMUM
AMATRAMA AAAA
ABATRABAR
DUMMY
WORDS</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MOEILIJKHEDEN
VERNEDEREN
AMAMA
MUMMUM</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
258||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mirror Maze</TITLE>
<META NAME="description" CONTENT="Mirror Maze">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mirror Maze</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In a galaxy far far away from our's, there
lived a team of scientists who invented a device
that could kill all computervirusses that do
terrible things to MS-DOS computers.  This device
could do its job in the entire universe
because it used a magic laser beam.  But, just like in all
great devices, this device had a strange
component in it.  This component is a two-dimensional
maze with black holes and mirrors in it.
Nobody knew the reason for this component but the
scientists said it was a crucial component.
<P>
<P>
This maze has two openings in it.
One of these openings is in front of the magic laser.  All
the mirrors in the maze have two reflecting sides.
These mirrors always make an angle of 45
degrees with the laser beam but they can be
rotated over 90 degrees, so each mirror can be
in 2 states only.  The laser beam will be
totally absorbed by a black hole. The laser beam may
cross itself (with an angle of 90 degrees) in an empty place of the maze.
<P>
<P>
In this problem you are given several
mazes (one at a time) in which you have to position
the mirrors in such a way that the
laser beam can travel from one entrance to the other.
The border of each maze is marked by
black holes (except for two places which are the two
entrances of the maze).  The mirrors in
the given mazes will probably not have a correct angle
to reflect a laser beam from one entrance
of the maze to the other.  The mirrors in the given
mazes can be positioned in such a way
that a laser beam can travel through the maze.
<P>
<P>
Your program must read the mazes from
the input file and position the mirrors in it in such
a way that a laser beam that enters
through one entrance exits through the other.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for your program is a textflle.
This file contains severas mazes.  A specification of a
single maze is given by the following description:
<P>
<UL><LI> First a line that contains two positive
  integers (say <I>M</I> and <I>N</I>) separated by one space
  which specify the number of columns and
  the number of rows (in that order) of the maze
  to come.  These integers can have a value from 3 to 50 inclusive.<LI> On the next <I>N</I> lines follows the maze
  with the mirrors and black holes.  Mirrors are given
  by a <code>\</code> (backslash) or a <TT>/</TT> (divide).
   Here <code>\</code> and <TT>/</TT> correspond to the 2 states of a mirror.
   Black holes are given by <TT>*</TT> (star).
   Empty places in the maze are given by dots.
</UL>
<P>
The last line of the input file is given by `<TT>-1 -1</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file is a textfile which
contains the resulting mazes.  The mazes in the output
file must be separated from each other by one empty line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4 5
****
*\/*
*./.
*..*
*.**
4 4
*.**
*.\*
*\\*
**.*
-1 -1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>****
*/\*
*.\.
*..*
*.**

*.**
*.\*
*\\*
**.*</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
259||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Software Allocation</TITLE>
<META NAME="description" CONTENT="Software Allocation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Software Allocation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A computing center has ten different
computers (numbered 0 to 9) on which applications can
run.  The computers are not multi-tasking,
so each machine can run only one application at
any time.  There are 26 applications,
named A to Z. Whether an application can run on a
particular computer can be found in a job description (see below).
<P>
<P>
Every morning, the users bring in their
applications for that day.  It is possible that two
users bring in the same application; in
that case two different, independent computers will be
allocated for that application.
<P>
<P>
A clerk collects the applications, and for
each different application he makes a list of computers
on which the application could run.
Then, he assigns each application to a computer.
Remember: the computers are <I>not</I> multi-tasking,
so each computer must handle at most one
application in total. (An application takes
a day to complete, so that sequencing i.e. one
application after another on the same machine is not possible.)
<P>
A job description consists of
<P>
<OL><LI> one upper case letter <TT>A...Z</TT>, indicating the application.<LI> one digit <TT>1...9</TT>, indicating the number of users who brought in the application.<LI> a blank (space character.)<LI> one or more different digits <TT>0...9</TT>, indicating the computers
      on which the application can run.<LI> a terminating semicolon `<TT>;</TT>'.<LI> an end-of-line.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for your program is a textfile.
For each day it contains one or more job descriptions,
separated by a line containing only the
end-of-line marker.  The input file ends with the
standard end-of-file marker.  For each
day your program determines whether an allocation of
applications to computers can be done,
and if so, generates a possible allocation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is also a textfile.  For each
day it consists of one of the following:
<P>
<UL><LI> ten characters from the set {`<TT>A</TT>'...`<TT>Z</TT>' , `<TT>_</TT>'},
indicating the applications allocated to
computers 0 to 9 respectively if an allocation
was possible.  An underscore `<TT>_</TT>' means
that no application is allocated to the corresponding computer.<LI> a single character `<TT>!</TT>', if no allocation was possible.
</UL>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>A4 01234;
Q1 5;
P4 56789;

A4 01234;
Q1 5;
P5 56789;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>AAAA_QPPPP
!</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
260||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Il Gioco dell'X</TITLE>
<META NAME="description" CONTENT="Il Gioco dell'X">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Il Gioco dell'X</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The game `Il Gioco dell' X' is played
on a <I>N</I> by <I>N</I> board ( <IMG WIDTH=46 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline133" SRC="http://uva.onlinejudge.org/external/2/260img1.gif"   > ).  The object of both
players, say Black and White, is to join
opposite sides of the board by placing in turn their
pawns on the board in such a way that a
path is made from one side to the other by adjacent
(neighboring) pawns of their own color.
Although the board is  <IMG WIDTH=52 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline135" SRC="http://uva.onlinejudge.org/external/2/260img1.gif"   >  it is not a square
but rather diamond-shaped.  Let us denote
the field on the board in row <I>i</I> and column <I>j</I> by
 <IMG WIDTH=138 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline141" SRC="http://uva.onlinejudge.org/external/2/260img1.gif"   > .  The neighbors of (<I>i</I>, <I>j</I>) are:
<P>
<PRE>                       ( i-1 , j-1 ) , ( i-1 ,  j  ) 
                       (  i  , j-1 ) , (  i  , j+1 ) 
                       ( i+1 ,  j  ) , ( i+l , j+1 )</PRE>
<P>
provided these fields do not fall outside the board.
<P>
Black tries to join row 1 with row <I>N</I>, while White
tries to join column 1 with column <I>N</I>.
<P>
lt is a Deep Mathematical Result that this
game cannot end in a draw (that is, without
winner).  As we will present to you only
full boards, there will always be a winner.  It may,
however, be difficult to see who has won,
so some computer assistance would be appreciated.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Examples:</A></FONT></H2>
<P>
Example 1 Example 2
<P>
<P> <IMG WIDTH=688 HEIGHT=220 ALIGN=BOTTOM ALT="picture23" SRC="http://uva.onlinejudge.org/external/2/260img1.gif"   > <P>
<P>
In example 1 White has won, and in example 2 Black has won.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The input is a textfile containing a
number of games.  Each game is given by: one line
containing an integer <I>N</I>, being the number
of rows. (<I>N</I> can he any number between 2 and
200).  This line is followed by <I>N</I> lines,
each consisting of a row of <I>N</I> characters from the set
{`<TT>b</TT>',`<TT>w</TT>'} denoting the pawns of Black
and White respectively.  The numbers of black and white
pawns will differ by at most one.  Note that
all positions on the board are filled with pawns.
The list of games ends with a single zero
on a line of its own. (Of course, this is not a game
for which a winner has to be determined.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
The output will be a textfile containing
one line for each game.  This line should contain
the number of the game (starting at 1)
followed by a space, and followed by an uppercase `<TT>B</TT>'
if Black did win, or followed by an uppercase `<TT>W</TT>' if White did win.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
bbwb
wwbw
bbwb
bwww
4
bbwb
wwbw
bwwb
wwbb
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 W
2 B</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
261||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Window Property</TITLE>
<META NAME="description" CONTENT="The Window Property">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Window Property</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Suppose you are given a sequence of symbols
but you can see only <I>k</I> ( <IMG WIDTH=40 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/2/261img1.gif"   > ) consecutive symbols
at a time.  Then we say the length of
the window is <I>k</I>. Moving this window along the sequence
can give you a lot of different patterns.
Of all possible sequences of <I>n</I> different symbols only
a minority has the property that the
windows of length <I>k</I> show only <I>k</I>+1 different patterns.
<P>
We say that a sequence of symbols has the
<I>window property</I> if for all natural <I>k</I> the number
of different patterns you can see through
a window of length <I>k</I> is at most <I>k</I>+1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Examples</A></FONT></H2>
<P>
<PRE><TT> 
		 <TT>ABAABABAB</TT>   		    has the window property.
<P>
		 <TT>ABCABCABC</TT>   		    does not have the window property (check <I>k</I>=1).
<P>
		 <TT>011010</TT>      		    has the window property.
<P>
		 <TT>0110100101</TT>  		    does not have the window property.
<P>
</TT></PRE>
<P>
In the third example the patterns axe :
<P>
<PRE><TT> 
		        length 1 		 : 		 <TT>0, 1.</TT>
<P>
		        length 2 		 : 		 <TT>01, 11, 10.</TT>
<P>
		        length 3 		 : 		 <TT>011, 110, 101, 010.</TT>
<P>
		        length 4 		 : 		 <TT>0110, 1101, 1010.</TT>
<P>
		        length 5 		 : 		 <TT>01101, 11010.</TT>
<P>
		        length 6 		 : 		 <TT>011010.</TT>
<P>
</TT></PRE>
<P>
The sequence in the last example is an
extension of the sequence in the third example.  So
the first 6 symbols form a sequence
with the window property.  The seventh symbol adds the
pattern '00' to the set of patterns of
length 2 displayed in the windows preceding the window
containing '00'.  So the sequence
formed by the first 7 symbols does not have the window
property.  Accordingly we call the seventh
symbol the first offending symbol.  By the way we
count from left-to-right as our computers seem to do.
<P>
The problem is to determine whether a
given sequence has the window property and if not,
to find the position of the first offending
symbol - this is that symbol such that the sequence
preceding it has the window property but
adding the symbol destroys this property (counting
of the symbols starts at one).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The input is a textfile where each
line is a non-empty sequence of (ASCII) characters to
be checked for the window property.
No sequence will be longer than one hundred symbols.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
The output file should be a textfile containing
for each line of the input a line with the
result of the check for the window property
in the following way: `<TT>YES</TT>' (uppercase) if the line
enjoys the window property, otherwise `<TT>NO:</TT>' (in uppercase)
followed by the position of the offending symbol.
Each line should be terminated by an end-of-line marker.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>ababcababa
0010100100
0010101001</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>NO:5
YES
YES</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
262||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Transferable Voting</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Transferable Voting" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Transferable 
  Voting</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>In Fredonia, elections are conducted using a transferable vote system. When 
they enter the polling booth, Fredonians are presented with a list of candidates 
like 
<P>
<P>
<P>1. Tammy Fay Bakker 
<P>2. Jimmy Hoffa 
<P>3. Al Capone 
<P>4. Bonnie Parker 
<P>5. Elmer Fudd 
<P>
<P>A vote is cast by typing the numbers of the candidates in the preferred 
order. Thus a Fredonian who likes Jimmy Hoffa best, with Elmer Fudd second, but 
who does not care about the other three candidates, would type: 
<P><PRE>2 5</PRE>
<P>Each integer corresponds to the number preceding a valid candidate on the 
list. No number should appear more than once on a single ballot. Ballots which 
do not meet these rules are called <I>spoiled ballots</I>. Unspoiled ballots are 
called valid ballots. Your program should count these spoiled ballots. The 
outcome of the election should be the same as if the spoiled ballots had never 
been cast. 
<P>When polling is complete, the outcome of the election is calculated as 
follows. 
<P>
<UL>
  <LI>First, all the first-preference votes (on valid ballots) are counted.
  <LI>After this count, if the number of votes for any candidate is more than 
  half of the number of valid ballots, that candidate is declared the winner.
  <LI>Otherwise, the candidate(s) with the fewest number of votes is (are) 
  eliminated. Ballot papers on which an eliminated candidate is mentioned are 
  effectively modified by deleting that candidate, thereby ``promoting" any 
  lower-preference non-eliminated candidates. (A valid ballot from which all 
  candidates have been eliminated remains a valid ballot.)
  <LI>If, after the elimination, there are any remaining candidates, the 
  first-preference votes are counted again to determine a winner.
  <LI>If, after the elimination, no candidates are left, the election is 
  declared indecisive. </LI></UL>
<P>
<P>You are to write a program to calculate the outcome of Fredonian elections. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>The input consists of a list of candidates and a list 
of ballots separated by a blank line (a newline by itself on an otherwise empty 
line). The list of candidates is an ordered list of up to 20 candidates, one per 
line. Each candidate's name can be up to 20 characters long. The first 
candidate's name will be preceded by the string ``<TT>1. </TT>";, the second by 
``<TT>2. </TT>" , etc. The list of ballots consists of at most 1000 ballots. 
There are no blank ballots: each ballot has at least one integer. Each ballot 
consists of a sequence of integers, which are separated by single spaces, and is 
terminated by a newline. The list of ballots is terminated by an end-of-file. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A></FONT></H2>
<P>For each test case, the output must follow the description below. The outputs 
of two consecutive cases will be separated by a blank line.<BR>Your program 
should produce the following output. As each candidate is eliminated, a message 
to that e ect must be printed. If more than one candidate is eliminated in the 
same round (because they each had the minimum number of first-preference votes 
at that stage) then their eliminations should be output in the order in which 
the candidates originally were input. An elimination is recorded like this: 
<P><PRE>John Minor with 3 votes is eliminated.</PRE>
<P>Next your program should either declare the winner, like 
<P><PRE>The winner of the election is Clint Eastwood.</PRE>
<P>or declare that the election was indecisive by printing 
<P><PRE>The election was indecisive.</PRE>
<P>Finally, you should print a count of the valid ballots and the spoiled 
ballots. For example, 
<P><PRE>There were 457 valid ballots and 3 spoiled ballots.</PRE>
<P>After this last line there should be no blank line. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
input</A></FONT></H2><PRE><P>2<BR><P>

1. Betty Boop<BR>
2. Elmer Fudd<BR>
3. Olive Oyl<BR><P>

1 2 3<BR>
1 2 3<BR>
1 2 3<BR>
2 1 3<BR>
2 1 3<BR>
2 1 3<BR>
3 1 2<BR>
3 1 2<BR>
3 1 2<BR><P>

1. Bill Clinton<BR>
2. Barbara Bush<BR>
3. Margaret Thatcher<BR>
4. John Minor<BR>
5. Clint Eastwood<BR>
6. Jesse Ventura<BR>
7. Sonny Bono<BR>
8. Cher<BR><P>

2 4 6 8<BR>
1 2 3<BR>
5 7<BR>
8<BR>
6 6<BR>
5<BR>
5<BR>
5<BR>
5 7 2<BR>
8<BR>
3 2 5<BR></P></PRE>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
output</A></FONT></H2><PRE>Betty Boop with 3 votes is eliminated.<BR>
Elmer Fudd with 3 votes is eliminated.<BR>
Olive Oyl with 3 votes is eliminated.<BR>
The election was indecisive.<BR>
There were 9 valid ballots and 0 spoiled ballots.<BR>

John Minor with 0 votes is eliminated.<BR>
Jesse Ventura with 0 votes is eliminated.<BR>
Sonny Bono with 0 votes is eliminated.<BR>
Bill Clinton with 1 votes is eliminated.<BR>
Barbara Bush with 1 votes is eliminated.<BR>
Margaret Thatcher with 1 votes is eliminated.<BR>
The winner of the election is Clint Eastwood.<BR>
There were 10 valid ballots and 1 spoiled ballots.<BR>


</PRE></BODY></HTML>

______________________________________________________
263||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Number Chains</TITLE>
<META NAME="description" CONTENT="Number Chains">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Number Chains</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a number, we can form a number chain by
<P>
<OL><LI> arranging its digits in descending order<LI> arranging its digits in ascending order<LI> subtracting the number obtained in (2) from the number obtained (1)
to form a new number<LI> and repeat these steps unless the new number has already appeared in
the chain 
</OL>
<P>
Note that 0 is a permitted digit. The number of distinct numbers in the
chain is the <I>length</I> of the chain. You are to write a program that reads
numbers and outputs the number chain and the length of that chain for each
number read.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input consists of a sequence of positive numbers, all less than  <IMG WIDTH=23 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/2/263img1.gif"   > ,
each on its own line, terminated by 0. The input file contains at most 5000
numbers.
<P>
<P>
The output consists of the number chains generated by the input numbers,
followed by their lengths exactly in the format indicated below. After each
number chain and chain length, including the last one, there should be a
blank line. No chain will contain more than 1000 distinct numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>123456789
1234
444
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Original number was 123456789
987654321 - 123456789 = 864197532
987654321 - 123456789 = 864197532
Chain length 2

Original number was 1234
4321 - 1234 = 3087
8730 - 378 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
Chain length 4

Original number was 444
444 - 444 = 0
0 - 0 = 0
Chain length 2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
264||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Count on Cantor</TITLE>
<META NAME="description" CONTENT="Count on Cantor">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Count on Cantor</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
One of the famous proofs of modern mathematics is Georg Cantor's demonstration
that the set of rational numbers is enumerable. The proof works by using
an explicit enumeration of rational numbers as shown in the diagram below.
<P>
<P> <IMG WIDTH=365 HEIGHT=104 ALIGN=BOTTOM ALT="displaymath27" SRC="http://uva.onlinejudge.org/external/2/264img1.gif"   > <P>
<P>
In the above diagram, the first term is 1/1, the second term is 1/2, the
third term is 2/1, the fourth term is 3/1, the fifth term is 2/2, and so
on.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
You are to write a program that will read a list of numbers in the range
from 1 to  <IMG WIDTH=24 HEIGHT=16 ALIGN=BOTTOM ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/2/264img1.gif"   >  and will print for each number the corresponding term in
Cantor's enumeration as given below. No blank line should appear after the
last number.
<P>
<P>
The input list contains a single number per line and will be
terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>3
14
7</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>TERM 3 IS 2/1
TERM 14 IS 2/4
TERM 7 IS 1/4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
265||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Dining Diplomats</TITLE>
<META NAME="description" CONTENT="Dining Diplomats">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Dining Diplomats</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You have been hired to arrange the seating of diplomats at a dinner party.
Your employer has invited 9 diplomats from several countries around the
world. Each diplomat will speak from one to five languages. Diplomats not
speaking a common language can not talk to each other. Furthermore, some
of the countries represented will not have diplomatic relations with other
nations represented, so these diplomats will not be speaking to each other
either. Your task is to determine the seating arrangement at the dinner
table for your employer and the 9 guests such that each person can speak
to the person seated on each side.
<P>
The table to be used for dinner is round, and seats 10 people. Your employer
will be seated at the first position at the table. The other positions will
be numbered clockwise from 2 to 10. The person seated to the left of your
employer is in seat number 2, the person seated to the right of your employer
is in seat number 10.
<P>
Persons seated next to each other must speak a common language. A person
may speak to the person on the left in one common language, and speak to
the person on the right in another language. The governments of the guests
seated next to each other must have formally recognized each other.
<P>
The government of your employer has diplomatic relations with the governments
of all of his guests. The government of a guest may or may not have diplomatic
relations with the governments of all the other guests.
<P>
Two diplomats from the same country will have diplomatic relations with
the same list of countries. A country will always have diplomatic relations
with itself. Diplomats from the same country may or may not speak any languages
in common.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to the program will contain several data sets. Each data set will be a list of ten people, one per line, ended by
a blank line. The first line will represent your employer, the other lines
will represent the guest diplomats. Each line consists of a sequence of
words, where words are separated by a single space. Each word is a sequence
of capitals. The first word consists of 3 characters and represents the
code for the guest's country. The second word contains 1 to 5 characters
and represents the languages that the guest speaks. Each language that the
guest speaks is represented by a single letter. Finally, there is a list
of up to 9 three-character words representing the codes of the countries
of the other guests that this guest's government has diplomatic relations
with.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output of each data set is a table of the seating arrangement. It contains
one diplomat per line. Each line starts with the seat number followed by
three words, all separated by single spaces. The first word is the language
code for the person seated on the left. The second word is the country code
for the diplomat. The third word is the language code for the person seated
on the right. The seating arrangement should be printed in the order 1 to
10, and no blank line should appear after line 10. More than one solution
may exist, but you need find only one. If no solution is found, output the
sentence
<P>
<PRE>NO SOLUTION EXISTS</PRE>
<P>
Print a blank line after each data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
USA EF CHN GBR USR FRA FRG JPN ISR POR KOR
CHN CFE USA GBR FRA FRG
GBR ER USA CHN USR FRA FRG JPN ISR POR KOR
USR RF USA GBR FRA FRG
FRA F USA CHN GBR USR FRG JPN ISR POR
FRG ERG USA CHN GBR USR FRA JPN ISR POR
JPN JHG USA GBR FRA FRG JPN ISR POR KOR
ISR HER USA GBR FRA FRG JPN KOR
POR PGE USA GBR FRA FRG JPN
KOR KEC USA GBR USR JPN ISR

TLC ADBE TQA DAO FHH NUW FAB PSR FEQ QPA KCW
TQA EB TLC DAO PSR FEQ KCW
DAO B TLC TQA FHH FAB PSR FEQ QPA KCW
FHH B TLC DAO PSR KCW
NUW DBE TLC
FAB D TLC DAO PSR FEQ QPA
PSR AC TLC TQA DAO FHH FAB QPA
FEQ CB TLC TQA DAO FAB QPA
QPA D TLC DAO FAB PSR FEQ KCW
KCW AE TLC TQA DAO FHH QPA

</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
1 F USA E
2 E CHN E
3 E GBR E
4 E KOR E
5 E ISR H
6 H JPN G
7 G POR E
8 E FRG R
9 R USR F
10 F FRA F

NO SOLUTION EXISTS

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
266||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stamping Out Stamps</TITLE>
<META NAME="description" CONTENT="Stamping Out Stamps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stamping Out Stamps</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The mail clerk for Sirius Cybernetics just received a new postal scale which
will display the cost (in cents) to send a given parcel. The postal scale
is medium duty, and will only handle parcels requiring up to $29.99 in postage.
She has requested you to write a program that will convert the postage into
the number of stamps needed to cover the required postage such that the
cost is minimized.
<P>
The mailroom stocks up to ten different types of stamps, and only ten stamps
will fit on any given parcel.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
For each dataset, your program would read in a number N, indicating the number of different stamps. The next line contains the list of stamp values stocked by the mailroom
(all separated by single spaces) followed by a sequence of amounts to convert
(one amount per line) ended by a 0. If it is impossible to reach the given amount exactly,
you are to exceed the amount by as little as possible. If there are many
sets of stamps that cover the amount for the same cost, you should pick
the set with the least number of stamps. If there's still a tie, choose the stamps as expensive as possible.

A value of N=0 indicates the end of the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each dataset should consist of the given stamp values on a single line 
(in increasing order) followed by a blank line, then, for each amount given, 
the amount that needs to be covered on a single line, followed by the stamps needed 
for the coverage on the next line (in non-increasing order), followed by a blank line.
(So the last line of stamp values in the output is followed by one
blank line, used to separate different datasets). All numbers are separated by single spaces. If no
solution exists, print
<P>
<PRE>NO SOLUTION EXISTS</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
7
2 7 14 17 22 63 98
72
86
143
5
0
6
16 7 6 5 4 3
18
0
0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
STAMP VALUES 2 7 14 17 22 63 98

AMOUNT 72
STAMPS USED 63 7 2

AMOUNT 86
STAMPS USED 63 14 7 2

AMOUNT 143
STAMPS USED 63 63 17

AMOUNT 5
STAMPS USED 2 2 2

STAMP VALUES 3 4 5 6 7 16

AMOUNT 18
STAMPS USED 7 7 4
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
267||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Of(f) Course!</TITLE>
<META NAME="description" CONTENT="Of(f) Course!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Of(f) Course!</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
F<font size=-1><small>AT</small></font> C<font size=-1><small>HANCE</small></font> Airlines has had several of their aircraft stray off course within
the last few months. After the last error nearly put an aircraft over the
enemy's airspace, an investigation has shown that their navigation techniques
do not take the wind speed and direction into account properly.
<P>
In order
to make life easier on their novice navigators, the airline has contracted
with your team to produce a program that will provide the pilot with the
proper heading for the aircraft, given a desired course and wind velocity.
<P>
<P>
For each flight segment, you will be given the desired course, the true air
speed (the speed relative to the air) of the aircraft, the wind speed, and
the direction the wind is blowing from. The pilot needs the heading to which
she should steer the aircraft and the effective ground speed (the speed
at which the aircraft is moving over the desired course relative to the
ground).
<P>
<P>
All speeds will be given in knots, and all directions will be given
in degrees ( <IMG WIDTH=104 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/2/267img1.gif"   > , with 0 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/2/267img1.gif"   >  = north, 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/2/267img1.gif"   >  = east, 180 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/2/267img1.gif"   >  = south, 270 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/2/267img1.gif"   >  = west).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will consist of a series of flight segments, one per
line terminated by an end-of-file. Each line will consist of the wind speed,
the wind direction, the desired course, and the true air speed, all given
as free-format floating point numbers separated from each other by a single
space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should produce for every line segment in the input file, including
the last one, six lines followed by a blank line. Each of the six lines
is labeled as in the example below. The first four lines reproduce the input
numbers. The remaining two lines show the heading and effective ground speed
calculated for each segment.
<P>
<P>
Use a format analogous to the sample below.
Each number must be accurate to 1/100th.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>15.0 290.0 260.0 100.0
15.0 270.0 135.0 200.0
28.0 290.0 5.0 195.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>WIND SPEED 15.00
WIND DIRECTION 290.00
DESIRED COURSE 260.00
TRUE AIRSPEED 100.00
AIRCRAFT HEADING 264.30
GROUND SPEED 86.73

WIND SPEED 15.00
WIND DIRECTION 270.00
DESIRED COURSE 135.00
TRUE AIRSPEED 200.00
AIRCRAFT HEADING 138.04
GROUND SPEED 210.33

WIND SPEED 28.00
WIND DIRECTION 290.00
DESIRED COURSE 5.00
TRUE AIRSPEED 195.00
AIRCRAFT HEADING 357.03
GROUND SPEED 185.87</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
268||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Double Trouble</TITLE>
<META NAME="description" CONTENT="Double Trouble">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Double Trouble</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The secret service of Hudonia has always had a strong appetite for strange
numbers. This appetite seemed strongest when Hudonia was in trouble. The
numbers they were looking for had the following property. Whenever you would
right-rotate the number (that is, take away the last digit and put it in
front of the number), you would end up with double the original number.
Numbers possessing this property were called double-trouble numbers. For
example, <I>X</I> = 421052631578947368 is a double-trouble number, since 2<I>X</I> = 842105263157894736
which is a right rotation of <I>X</I>.
<P>
<P>
The number <I>X</I> is a double-trouble number in the number system with base 10.
Any number system with base  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/2/268img1.gif"   > , however, has many such double-trouble
numbers. In the binary number system (base <I>p</I> = 2), for example, we have
the double-trouble numbers 01 and 0101. Notice that the leading zeros are
necessary here in order to obtain the proper number after right rotation.
<P>
<P>
The secret service seemed to like the smallest double-trouble numbers in
a number system most. For example, in the binary number system the smallest
double-trouble number is 01. In the decimal (<I>p</I> = 10) number system, the
smallest double-trouble number is 052631578947368421. Being a patriotic
Hudonian, you are asked to write a program that computes for a given base
p of a number system the smallest double-trouble number in that system.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consist of a sequence of numbers, one per line, ended by
end-of-file. Each number is less than 200.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file consists of,
for each number <I>p</I> in the input file, the smallest double-trouble number
(including any necessary leading zeros) in the number system with base <I>p</I>.
The double-trouble numbers are given in the format analogous to the example
below and in the same order as in the input file.
<P>
No blank line should appear at the end of the output.
Digits in a base-<I>p</I> number system are given in
decimal representation, and each digit (including the last one) is followed
by a single space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>2
10
35</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>For base 2 the double-trouble number is
0 1
For base 10 the double-trouble number is
0 5 2 6 3 1 5 7 8 9 4 7 3 6 8 4 2 1
For base 35 the double-trouble number is
11 23</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
269||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds ->

<HTML>
<HEAD>
<TITLE>Counting Patterns</TITLE>
<META NAME="description" CONTENT="Counting Patterns">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>
<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Counting Patterns</A></FONT>&nbsp;</B></TABLE></CENTER></H1>

<P>
Let <I>n</I> and <I>k</I> be numbers with <I>n</I> &gt; 0 and <IMG WIDTH=40 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/269img1.gif" > .
 A <I>configuration</I> of the <I>n</I>-<I>k</I>-puzzle is an <I>n</I>-tuple with elements in the range 
<IMG WIDTH=57 HEIGHT=22 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/269img1.gif"   > such that their sum is zero. Configurations are considered equivalent when they can be obtained from each other by (a) cyclic permutation of the tuple over one or more positions, (b) reversal of the tuple, (c) sign reversal of all elements, or (d) combinations of (a), (b), and (c). Equivalence classes are called <I>patterns</I>.

<P>
<P>

For instance, (0, 1, 1, -2) is a configuration of the 4-2-puzzle. Some equivalent configurations are: (a) (1, -2, 0, 1), (b) (-2, 1, 1, 0), (c) (0, -1, -1, 2), and (d) (-1, -1, 0, 2). Below is given a list of (the lexicographically largest) representatives of the 14 patterns of the 4-2-puzzle.

<P>
<P>
<IMG WIDTH=412 HEIGHT=104 ALIGN=BOTTOM ALT="displaymath46" SRC="http://uva.onlinejudge.org/external/2/269img1.gif"   >

<P>
<P>

Your program computes the number of patterns for a sequence of <I>n</I>-<I>k</I>-puzzles.
And output the list of patterns (represented by the largest one in the patterns), from lower order to higher one.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a sequence of pairs of integers <I>n</I> and <I>k</I>, which are separated by a single space. Each pair appears on a single line. The input is terminated by an end-of-file. The value for <I>n</I> + <I>k</I> is at most 12.
Make sure that your algorithm is fantastic enough.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output contains a sequence of blocks, the fisrt line contain a single integer(x), representing the number of patterns for the corresponding <I>n</I>-<I>k</I>-puzzles in the input, and follow x lines, each one contain one pattern(from lower order to higher one). Print one blank line between two consecutive blocks. No blank line should appear at the end of the output.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2><P>
<PRE>
8 0
4 2
</PRE>

<P>
<H2>
<FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P><PRE>
1
(0,0,0,0,0,0,0,0)

14
(0,0,0,0)
(1,-1,1,-1)
(1,0,-1,0)
(1,0,0,-1)
(1,1,-1,-1)
(2,-2,2,-2)
(2,-1,0,-1)
(2,-1,1,-2)
(2,0,-2,0)
(2,0,-1,-1)
(2,0,0,-2)
(2,1,-2,-1)
(2,1,-1,-2)
(2,2,-2,-2)
</PRE><P>

<P>
<H2>

</BODY>
</HTML>
______________________________________________________
270||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Lining Up</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Lining Up" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Lining 
Up</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>``How am I ever going to solve this problem?" said the pilot. 
<P>
<P>Indeed, the pilot was not facing an easy task. She had to drop packages at 
specific points scattered in a dangerous area. Furthermore, the pilot could only 
fly over the area once in a straight line, and she had to fly over as many 
points as possible. All points were given by means of integer coordinates in a 
two-dimensional space. The pilot wanted to know the largest number of points 
from the given set that all lie on one line. Can you write a program that 
calculates this number? 
<P>
<P>Your program has to be efficient! 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>The input consists of <I>N</I> pairs of integers, 
where 1 &lt; <I>N</I> &lt; 700. Each pair of integers is separated by one blank 
and ended by a new-line character. The list of pairs is ended with an 
end-of-file character. No pair will occur twice. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A></FONT></H2>
<P>For each test case, the output must follow the description below. The outputs 
of two consecutive cases will be separated by a blank line. <BR>The output 
consists of one integer representing the largest number of points that all lie 
on one line. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
Input</A></FONT></H2>
<P><PRE>1

1 1
2 2
3 3
9 10
10 11</PRE>
<P>
<H2><FONT color=#0070e8><A name=SECTION0001004000000000000000>Sample 
Output</A></FONT></H2>
<P><PRE>3</PRE>
<P></P></BODY></HTML>

______________________________________________________
271||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Simply Syntax</TITLE>
<META NAME="description" CONTENT="Simply Syntax">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Simply Syntax</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In the land of Hedonia the official language is Hedonian. A Hedonian professor
had noticed that many of her students still did not master the syntax of
Hedonian well. Tired of correcting the many syntactical mistakes, she decided
to challenge the students and asked them to write a program that could check
the syntactical correctness of any sentence they wrote. Similar to the nature
of Hedonians, the syntax of Hedonian is also pleasantly simple. Here are
the rules:
<P>
<DL COMPACT><DT>0.
<DD> The only characters in the language are the characters <TT>p</TT>
through <TT>z</TT> and <TT>N</TT>, <TT>C</TT>, <TT>D</TT>, <TT>E</TT>, and <TT>I</TT>.
<P>
<DT>1.<DD> Every character from <TT>p</TT> through <TT>z</TT> is a correct sentence.
<P>
<DT>2.<DD> If <I>s</I> is a correct sentence, then so is <TT>N</TT><I>s</I>.
<P>
<DT>3.<DD> If <I>s</I> and <I>t</I> are correct sentences, then so are
<TT>C</TT><I>st</I>, <TT>D</TT><I>st</I>, <TT>E</TT><I>st</I> and <TT>I</TT><I>st</I>.
<P>
<DT>4.<DD> Rules 0. to 3. are the only rules to determine the syntactical correctness
of a sentence.
<P>
 </DL>
<P>
You are asked to write a program that checks if sentences satisfy the syntax
rules given in Rule 0. - Rule 4.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a number of sentences consisting only of characters
<TT>p</TT> through <TT>z</TT> and <TT>N</TT>, <TT>C</TT>, <TT>D</TT>, <TT>E</TT>, and <TT>I</TT>. Each sentence is ended by a new-line
character. The collection of sentences is terminated by the end-of-file
character. If necessary, you may assume that each sentence has at most 256
characters and at least 1 character.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output consists of the answers <TT>YES</TT> for each well-formed sentence and
<TT>NO</TT> for each not-well-formed sentence. The answers are given in the same
order as the sentences. Each answer is followed by a new-line character,
and the list of answers is followed by an end-of-file character.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Cp
Isz
NIsz
Cqpq</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>NO
YES
YES
NO</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
272||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>TeX Quotes</TITLE>
<META NAME="description" CONTENT="TeX Quotes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">TeX Quotes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
TeX is a typesetting language developed by Donald Knuth. It takes source
text together with a few typesetting instructions and produces, one hopes,
a beautiful document. Beautiful documents use `` and &quot;
to delimit quotations, rather than the mundane <TT>&quot;</TT> which is what is provided
by most keyboards. Keyboards typically do not have an oriented double-quote,
but they do have a left-single-quote <TT>`</TT> and a right-single-quote <TT>'</TT>. Check
your keyboard now to locate the left-single-quote key <TT>`</TT> (sometimes called
the ``backquote key&quot;) and the right-single-quote key <TT>'</TT> (sometimes
called the ``apostrophe&quot; or just ``quote&quot;). Be careful
not to confuse the left-single-quote <TT>`</TT> with the ``backslash&quot; key
<code>\</code>. TeX lets the user type two left-single-quotes <TT>``</TT> to create a left-double-quote ``
and two right-single-quotes <TT>''</TT> to create a right-double-quote ''. Most typists,
however, are accustomed to delimiting their quotations with the un-oriented
double-quote <TT>&quot;</TT>.
<P>
<P>
If the source contained
<P>
<TT>&quot;To be or not to be,&quot; quoth the bard, &quot;that is the question.&quot;</TT>
<P>
then the typeset document produced by TeX would not contain the desired
form:
<P>
<P>
<P>
``To be or not to be,&quot; quoth the bard, ``that is the question.&quot;
<P>
<P>
In order to produce the desired form, the source file must
contain the sequence:
<P>
<TT>``To be or not to be,'' quoth the bard, ``that is the question.''</TT>
<P>
<P>
You are to write a program which converts text containing double-quote (<TT>&quot;</TT>)
characters into text that is identical except that double-quotes have been
replaced by the two-character sequences required by TeX for delimiting quotations
with oriented double-quotes. The double-quote (<TT>&quot;</TT>) characters should
be replaced appropriately by either <TT>``</TT> if the <TT>&quot;</TT> opens a quotation and
by <TT>''</TT> if the <TT>&quot;</TT> closes a quotation. Notice that the question of nested
quotations does not arise: The first <TT>&quot;</TT> must be replaced by <TT>``</TT>, the
next by <TT>''</TT>, the next by <TT>``</TT>, the next by <TT>''</TT>, the next by <TT>``</TT>, the next by <TT>''</TT>, and so on.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input will consist of several lines of text containing an even number of
double-quote (<TT>&quot;</TT>) characters. Input is ended with an end-of-file character.
The text must be output exactly as it was input except that:
<P>
<UL><LI> the first <TT>&quot;</TT> in each pair is replaced by two <TT>`</TT> characters: <TT>``</TT> and<LI> the second <TT>&quot;</TT> in each pair is replaced by two <TT>'</TT> characters: <TT>''</TT>.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>&quot;To be or not to be,&quot; quoth the Bard, &quot;that
is the question&quot;.
The programming contestant replied: &quot;I must disagree.
To `C' or not to `C', that is The Question!&quot;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>``To be or not to be,'' quoth the Bard, ``that
is the question''.
The programming contestant replied: ``I must disagree.
To `C' or not to `C', that is The Question!''</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
273||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Jack Straws</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Jack Straws" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Jack 
  Straws</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>In the game of Jack Straws, a number of plastic or wooden ``straws" are 
dumped on the table and players try to remove them one-by-one without disturbing 
the other straws. Here, we are only concerned with if various pairs of straws 
are connected by a path of touching straws. You will be given a list of the 
endpoints for some straws (as if they were dumped on a large piece of graph 
paper) and then will be asked if various pairs of straws are connected. Note 
that touching is connecting, but also two straws can be connected indirectly via 
other connected straws. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>A test case consists of multiple lines of input. The 
first line will be an integer <I>n</I> (1 &lt; <I>n</I> &lt; 13) giving the 
number of straws on the table. Each of the next <I>n</I> lines contain 4 
<I>positive integers</I>, <IMG height=17 alt=tex2html_wrap_inline34 
src="http://uva.onlinejudge.org/external/2/273img1.gif"  width=15 align=middle> , <IMG height=17 
alt=tex2html_wrap_inline36 src="http://uva.onlinejudge.org/external/2/273img1.gif"  width=14 align=middle> , 
<IMG height=17 alt=tex2html_wrap_inline38 src="http://uva.onlinejudge.org/external/2/273img1.gif"  width=15 
align=middle> and <IMG height=17 alt=tex2html_wrap_inline40 
src="http://uva.onlinejudge.org/external/2/273img1.gif"  width=14 align=middle> , giving the coordinates, 
<IMG height=27 alt=tex2html_wrap_inline42 src="http://uva.onlinejudge.org/external/2/273img1.gif"  width=114 
align=middle> of the endpoints of a single straw. All coordinates will be less 
than 100. (Note that the straws will be of varying lengths.) The first straw 
entered will be known as straw #1, the second as straw #2, and so on. The 
remaining lines of input (except for the final line) will each contain two 
positive integers, <I>a</I> and <I>b</I>, both between 1 and <I>n</I>, 
inclusive. You are to determine if straw <I>a</I> can be connected to straw 
<I>b</I>. When <I>a</I> = 0 = <I>b</I>, the input is terminated. 
<P>
<P>There will be no illegal input and there are no zero-length straws. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A></FONT></H2>
<P>For each test case, the output must follow the description below. The outputs 
of two consecutive cases will be separated by a blank line. <BR>You should 
generate a line of output for each line containing a pair <I>a</I> and <I>b</I>, 
except the final line where <I>a</I> = 0 = <I>b</I>. The line should say simply 
``<TT>CONNECTED</TT>", if straw <I>a</I> is connected to straw <I>b</I>, or 
``<TT>NOT CONNECTED</TT>", if straw <I>a</I> is not connected to straw <I>b</I>. 
For our purposes, a straw is considered connected to itself. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
Input</A></FONT></H2>
<P><PRE>1

7
1 6 3 3 
4 6 4 9 
4 5 6 7 
1 4 3 5 
3 5 5 5 
5 2 6 3 
5 4 7 2 
1 4 
1 6 
3 3 
6 7 
2 3 
1 3 
0 0</PRE>
<P>
<H2><FONT color=#0070e8><A name=SECTION0001004000000000000000>Sample 
Output</A></FONT></H2>
<P><PRE>CONNECTED 
NOT CONNECTED 
CONNECTED 
CONNECTED 
NOT CONNECTED 
CONNECTED</PRE>
<P></P></BODY></HTML>

______________________________________________________
274||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cat and Mouse</TITLE>
<META NAME="description" CONTENT="Cat and Mouse">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cat and Mouse</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In a house with many rooms live a cat and a mouse. The cat and the mouse
each have chosen one room as their ``home&quot;. From their ``home&quot;
they regularly walk through the house. A cat can go from room A to room
B if and only if there is a cat door from room A to room B. Cat doors can
only be used in one direction. Similarly a mouse can go from room A to room
B if and only if there is a mouse door from room A to room B . Also mouse
doors can be used in only one direction. Furthermore, cat doors cannot be
used by a mouse, and mouse doors cannot be used by a cat.
<P>
Given a map of the house you are asked to write a program that finds out
<P>
<OL><LI> if there exist walks for the cat and mouse where they meet each other
in some room, and<LI> if the mouse can make a walk through at least two rooms, end in its
``home&quot; room again, and along the way cannot ever meet the cat.
(Here, the mouse may not ever meet the cat, whatever the cat does.) 
</OL>
<P>
<center>
<P> <IMG WIDTH=381 HEIGHT=141 ALIGN=BOTTOM ALT="picture25" SRC="http://uva.onlinejudge.org/external/2/274img1.jpg"   > <P>
</center>
<P>
For example, in the map, the cat can meet the mouse in rooms 1, 2, and 3.
Also, the mouse can make a walk through two rooms without ever meeting the
cat, viz., a round trip from room 5 to 4 and back.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
<b>
The input begins with a single positive integer on a line by itself indicating 
the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.
</b>
<p>
<p>
The input consists of integers and defines the configuration of the house.
The first line has three integers separated by blanks: the first integer
defines the number of rooms, the second the initial room of the cat (the
cat's ``home&quot;), and the third integer defines the initial room
of the mouse (the mouse's ``home&quot;). Next there are zero or more
lines, each with two positive integers separated by a blank. These lines
are followed by a line with two <TT>-1</TT>'s separated by a blank. The pairs of
positive integers define the cat doors. The pair A B represents the presence
of a cat door from room A to room B . Finally there are zero or more lines,
each with two positive integers separated by a blank. These pairs of integers
define the mouse doors. Here, the pair A B represents the presence of a
mouse door from room A to room B .
<P>
<P>
The number of rooms is at least one and at most 100. All rooms are numbered
consecutively starting at 1. You may assume that all positive integers in
the input are legal room numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
<b>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>
The output consists of two characters separated by a blank and ended by
a new-line character. The first character is <TT>Y</TT> if there exist walks for
the cat and mouse where they meet each other in some room. Otherwise, it
is <TT>N</TT>. The second character is <TT>Y</TT> if the mouse can make a walk through at
least two rooms, end in its ``home&quot; room again, and along the way
cannot ever meet the cat. Otherwise, it is <TT>N</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input <font size=3>(From example above)</font></A></FONT></H2>
<P>
<PRE>
1

5 3 5
1 2
2 1
3 1
4 3
5 2
-1 -1
1 3
2 5
3 4
4 1
4 2
4 5
5 4
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Y Y</PRE>
</BODY>
</HTML>

______________________________________________________
275||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Expanding Fractions</TITLE>
<META NAME="description" CONTENT="Expanding Fractions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Expanding Fractions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In this problem you are to print the decimal expansion of a quotient of
two integers. As you well know, the decimal expansions of many integer quotients
result in decimal expansions with repeating sequences of digits. You must
identify these. You will print the decimal expansion of the integer quotient
given, stopping just as the expansion terminates or just as the repeating
pattern is to repeat itself <I>for the first time</I>. If there is a repeating
pattern, you will say how many of the digits are in the repeating pattern.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
There will be multiple input instances, each instance consists of two positive
integers on a line. The first integer represents the numerator of the fraction
and the second represents the denominator. In this problem, the numerator
will always be less than the denominator and the denominator will be less
than 1000. Input terminates when numerator and denominator are both zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input instance, the output should consist of the decimal expansion
of the fraction, <I>starting with the decimal point</I>. If the expansion terminates,
you should print the complete decimal expansion. If the expansion is infinite,
you should print the decimal expansion up to, but not including the digit
where the repeated pattern first repeats itself.
<P>
<P>
For instance, 4/11 = .3636363636...,
should be printed as <TT>.36</TT>. (Note that the shortest repeating pattern should
be found. In the above example, <TT>3636</TT> and <TT>363636</TT>, among others, are repeating
patterns, but the shortest repeating pattern is <TT>36</TT>.)
<P>
Since some of these
expansions may be quite long, multiple line expansions should each contain
exactly 50 characters on each line (except the last line, which, of course,
may be shorter) - that includes the beginning decimal point.
<P>
On the line immediately following the last line of the decimal expansion
there should be a line saying either ``<TT>This expansion terminates.</TT>&quot;,
or ``<TT>The last <I>n</I> digits repeat forever.</TT>&quot;, where <I>n</I> is the number
of digits in the repeating pattern.
<P>
<P>
Output for each input instance (including the last input instance) should
be followed by a blank line.
<P>
<P>
<P>
<B>Helpful hint:</B>
The number of digits before the pattern is repeated will never be more than
the value of the denominator.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 7
345 800
112 990
53 122
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>.428571
The last 6 digits repeat forever.

.43125
This expansion terminates.

.113
The last 2 digits repeat forever.

.4344262295081967213114754098360655737704918032786
885245901639
The last 60 digits repeat forever.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
276||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Egyptian Multiplication</TITLE>
<META NAME="description" CONTENT="Egyptian Multiplication">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Egyptian Multiplication</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In 1858, A. Henry Rhind, a Scottish antiquary, came into possession of a
document which is now called the Rhind Papyrus. Titled ``Directions
for Attaining Knowledge into All Obscure Secrets&quot;, the document provides
important clues as to how the ancient Egyptians performed arithmetic.
<P>
<P>
There is no zero in the number system. There are separate characters denoting
ones, tens, hundreds, thousands, ten-thousands, hundred-thousands, millions
and ten-millions. For the purposes of this problem, we use near ASCII equivalents
for the symbols:
<P>
<UL><LI> <TT>|</TT> for one (careful, it's a vertical line, not 1)<LI> <TT>n</TT> for ten<LI> <TT>9</TT> for hundred<LI> <TT>8</TT> for thousand<LI> <TT>r</TT> for ten-thousand
</UL>
<P>
(The actual Egyptian hieroglyphs were more picturesque but followed the
general shape of these modern symbols. For the purpose of this problem,
we will not consider numbers greater than 99,999.)
<P>
<P>
Numbers were written as a group of ones preceded in turn by groups of tens,
hundreds, thousands and ten-thousands. Thus our number 4,023 would be rendered:
<TT>||| nn 8888</TT>. Notice that a zero digit is indicated by a group consisting
of none of the corresponding symbol. The number 40,230 would thus be rendered:
<TT>nnn 99 rrrr</TT>. (In the Rhind Papyrus, the groups are drawn more picturesquely,
often spread across more than one horizontal line; but for the purposes
of this problem, you should write numbers all on a single line.)
<P>
<P>
To multiply two numbers <I>a</I> and <I>b</I>, the Egyptians would work with two columns
of numbers. They would begin by writing the number <TT>|</TT> in the left column
beside the number <I>a</I> in the right column. They would proceed to form new
rows by doubling the numbers in both columns. Notice that doubling can be
effected by copying symbols and normalizing by a carrying process if any
group of symbols is larger than 9 in size. Doubling would continue as long
as the number in the left column does not exceed the other multiplicand
<I>b</I>. The numbers in the first column that summed to the multiplicand <I>b</I> were
marked with an asterisk. The numbers in the right column alongside the asterisks
were then added to produce the result.
<P>
<P>
Below, we show the steps corresponding
to the multiplication of 483 by 27:
<P>
<PRE>| *                             ||| nnnnnnnn 9999
|| *                            |||||| nnnnnn 999999999
||||                            || nnn 999999999 8
|||||||| *                      |||| nnnnnn 99999999 888
|||||| n *                      |||||||| nn 9999999 8888888
The solution is:  | nnnn 888 r</PRE>
<P>
(The solution came from adding together:
<PRE>||| nnnnnnnn 9999
|||||| nnnnnn 999999999
|||| nnnnnn 99999999 888
|||||||| nn 9999999 8888888.)</PRE>
<P>
You are to write a program to perform this Egyptian multiplication.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will consist of several pairs of nonzero numbers written in the Egyptian
system described above. There will be one number per line; each number will
consist of groups of symbols, and each group is terminated by a single space
(including the last group). Input will be terminated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each pair of numbers, your program should print the steps described
above used in Egyptian multiplication. Numbers in the left column should
be flush with the left margin. Each number in the left and right column will
be represented by groups of symbols, and each group is terminated by a single
space (including the last group). If there is an asterisk in the left column,
it should be separated from the end of the left number by a single space.
Up to the 34th character position should then be filled with spaces. Numbers
in the right column should begin at the 35th character position on the line
and end with a newline character.
<P>
<P>
Test data will be chosen to ensure that
no overlap can occur. After showing each of the doubling steps, your program
should print the string: ``<TT>The solution is: </TT>&quot; followed by the product
of the two numbers in Egyptian notation (modulus 100000).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
||
||
||| 
|||| 
nnnnnn 9 
||| n 
n 
9 
||| 
8

</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
|                                 || 
|| *                              |||| 
The solution is: ||||
|                                 ||| 
||                                |||||| 
|||| *                            || n 
The solution is: || n 
| *                               nnnnnn 9 
||                                nn 999 
|||| *                            nnnn 999999 
|||||||| *                        nnnnnnnn 99 8 
The solution is: nnnnnnnn 88 
|                                 n 
||                                nn 
|||| *                            nnnn 
||||||||                          nnnnnnnn 
|||||| n                          nnnnnn 9 
|| nnn *                          nn 999 
|||| nnnnnn *                     nnnn 999999 
The solution is: 8 
|                                 ||| 
||                                |||||| 
||||                              || n 
|||||||| *                        |||| nn 
|||||| n                          |||||||| nnnn 
|| nnn *                          |||||| nnnnnnnnn 
|||| nnnnnn *                     || nnnnnnnnn 9 
|||||||| nn 9 *                   |||| nnnnnnnn 999 
|||||| nnnnn 99 *                 |||||||| nnnnnn 9999999 
|| n 99999 *                      |||||| nnn 99999 8 
The solution is: 888
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
277||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Cabinets</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content=Cabinets name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Cabinets</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>Well-Built Cabinet Distributors, Inc. recently received an electronic catalog 
of cabinets from their leading manufacturer, Woodcraft. Unfortunately, the 
format of the data is not consistent with that expected by Well-Built's 
inventory software. For this problem, you will construct a program that 
reformats the Woodcraft catalog for use by the inventory software. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>Input will be formatted as from a comma-delimited 
ASCII file. Your program must read all input from the standard input file. Each 
line in the input has a maximum length of 64 characters and contains the 
following fields: 
<P>
<P>
<P><IMG height=126 alt=tabular21 src="http://uva.onlinejudge.org/external/2/277img1.gif"  width=587 
align=bottom> 
<P>
<P>
<P>The records are presented in ascending order by Style Code. You may assume 
that all fields will be consistent with the lengths given, and that all fields 
will contain appropriate characters. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A></FONT></H2>
<P>For each test case, the output must follow the description below. The outputs 
of two consecutive cases will be separated by a blank line.<BR>Output will 
consist of a reformatted catalog. The reformatted catalog file will be a 
comma-delimited ASCII file. The first record in the file must be the following: 
<P><PRE>Item Id,Item Desc,Item Price</PRE>
<P>Each remaining record in the file will have a maximum length of 50 characters 
and contain the following fields: 
<P>
<P>
<P><IMG height=82 alt=tabular28 src="http://uva.onlinejudge.org/external/2/277img1.gif"  width=553 
align=bottom> 
<P>
<P>
<P>The <TT>Item Id</TT> is formed by concatenating the Style Code and the 
Description. If the Style Code is less than three characters long, it must be 
left-filled with zeros to three characters. If the Item Id exceeds 13 
characters, then the record is rejected. 
<P>
<P>The <TT>Item Desc</TT> is formed by concatenating the Style Name, a hyphen, 
and the Extension. If the Style Name is missing, use the Style Name from the 
first record of the corresponding Style Code group. If this first record has no 
Style Name either, then reject the record. If the Extension is not present, then 
Item Desc is the same as Style Name (no hyphen). If Item Desc exceeds 30 
characters, then it must be truncated on the right. 
<P>
<P>The <TT>Item Price</TT> is formed by formatting the Unit Price as dollars and 
cents. If Unit Price is not present, then Item Price = 0.00. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
Input</A></FONT></H2>
<P><PRE>1

23,CHAMPAGNE,BASE36,3" RECESSED TOE KICK,8900
23,,BASE54,,11000
25,LAUREL,CNR24LT,,15000 
107,COLONIAL,BASE54WSIDEJAM
202,SAGEBRUSH,OVRHD54P,USE WITH HDWARE KIT #3207 
221,ALVEA MODERN,BASE36
221,ALVEA MODERN,OVRHD54WCAP</PRE>
<P>
<H2><FONT color=#0070e8><A name=SECTION0001004000000000000000>Sample 
Output</A></FONT></H2>
<P><PRE>Item Id,Item Desc,Item Price
023BASE36,CHAMPAGNE-3" RECESSED TOE KICK,89.00
023BASE54,CHAMPAGNE,110.00 
025CNR24LT,LAUREL,150.00
202OVRHD54P,SAGEBRUSH-USE WITH HDWARE KIT ,0.00 
221BASE36,ALVEA MODERN,0.00</PRE>
<P></P></BODY></HTML>

______________________________________________________
278||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Chess</TITLE>
<META NAME="description" CONTENT="Chess">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Chess</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Almost everyone knows the problem of putting eight queens on an  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/2/278img1.gif"   > 
chessboard such that no Queen
can take another Queen. Jan Timman (a famous Dutch chessplayer) wants to
know the maximum
number of chesspieces of one kind which can be put on an  <IMG WIDTH=46 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/2/278img1.gif"   >  board
with a certain size such that no
piece can take another. Because it's rather difficult to find a solution
by hand, he asks your help to solve the problem.
<P>
<P>
He doesn't need to know the answer for every piece. Pawns seems rather uninteresting and he doesn't
like Bishops anyway. He only wants to know how many Rooks, Knights, Queens or Kings can be
placed on one board, such that one piece can't take any other.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input contains the number of problems. A problem is stated on one line and consists
of one character from the following set <TT>r</TT>, <TT>k</TT>, <TT>Q</TT>, <TT>K</TT>, meaning respectively the chesspieces Rook, Knight,
Queen or King. The character is followed by the integers <I>m</I> ( <IMG WIDTH=87 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/2/278img1.gif"   > )
and <I>n</I> ( <IMG WIDTH=83 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/2/278img1.gif"   > ), meaning
the number of rows and the number of columns or the board.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each problem specification in the input your program should output the maximum number of
chesspieces which can be put on a board with the given formats so they are not in position to take any
other piece.
<P>
<P>
<P>
<B>Note:</B>
The bottom left square is 1, 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
r 6 7
k 8 8</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>6
32</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
279||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<html>

<head>
<title>Spin</title>
<meta NAME="description" CONTENT="Spin">
<meta NAME="keywords" CONTENT="htmlatex">
<meta NAME="resource-type" CONTENT="document">
<meta NAME="distribution" CONTENT="global">
<link REL="STYLESHEET" HREF="htmlatex.css">
</head>

<body LANG="EN" BGCOLOR="#FFFFFF">

<h1 align="center"><br CLEAR="ALL">
</h1>
<div align="center"><center>

<table BGCOLOR="#0060F0">
  <tr>
    <td><b><font SIZE="5" COLOR="#C0FFFF">&nbsp;<a NAME="SECTION0001000000000000000000">Spin</a></font>&nbsp;</b></td>
  </tr>
</table>
</center></div>

<table>
  <tr>
    <td><img WIDTH="585" HEIGHT="449" ALIGN="BOTTOM" ALT="tex2html_wrap62" SRC="http://uva.onlinejudge.org/external/2/279img1.gif" > </td>
    <td><img WIDTH="190" HEIGHT="402" ALIGN="BOTTOM" ALT="tex2html_wrap64" SRC="http://uva.onlinejudge.org/external/2/279img1.gif" > </td>
  </tr>
</table>

<p>A disk can be rotated between horizontal and vertical only if it is positioned over the
indentation marked `0' <em>and</em> the disk on its right is vertical . The right-most
disk can always rotate if it is in position `0' since it has no disk on its right. </p>

<p>The aim is to free the slide by moving it so its left edge aligns with the `Win' mark: </p>

<p align="center"><img SRC="http://uva.onlinejudge.org/external/2/279img1.gif" > </p>

<p>Your task is to write a program which will take several part-solved puzzles and compute
the number of steps needed to move the slide to position `Win' for each puzzle. </p>

<h2><font COLOR="#0070E8"><a NAME="SECTION0001001000000000000000">Input</a></font></h2>

<p>There will be several puzzles in the input file. The first line of the file will
contain an integer <i>n</i> specifying the number of puzzles. There will then be <i>n</i>
lines, each of the form: </p>

<p><em>length orientations position</em> </p>

<p>where <i>length</i>(length &lt; 30) is an integer indicating the number of disks on the
slide, <i>orientations</i> is a string of <i>length</i> characters from the set {<tt>h</tt>,<tt>v</tt>}
giving the orientation of each disk from left to right, and <i>position</i> is an integer
from 0 to <i>length</i> specifying the numbered mark which aligns with the left edge of
the slide. </p>

<h2><font COLOR="#0070E8"><a NAME="SECTION0001002000000000000000">Output</a></font></h2>

<p>For each puzzle, your program should output one integer on a line which counts the
minimum number of steps needed to win the puzzle. A step is either a movement of the
slide, one unit left or right, or the rotation of a disk. </p>

<h2><font COLOR="#0070E8"><a NAME="SECTION0001003000000000000000">Sample Input</a></font></h2>

<pre>2
2 vv 2
7 vhhhvhh 4</pre>

<h2><font COLOR="#0070E8"><a NAME="SECTION0001004000000000000000">Output for the Sample
Input</a></font></h2>

<pre>7
357</pre>

<h2><font COLOR="#0070E8"><a NAME="SECTION0001005000000000000000">Diagram of the 1st
Puzzle</a></font></h2>

<p align="center"><img SRC="http://uva.onlinejudge.org/external/2/279img1.gif" > </p>
</body>
</html>

______________________________________________________
280||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Vertex</TITLE>
<META NAME="description" CONTENT="Vertex">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Vertex</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that searches a directed graph for vertices which are inaccessible from a given starting
vertex.
<P>
<P>
A directed graph is represented by <I>n</I> vertices where  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/2/280img1.gif"   > ,
numbered consecutively  <IMG WIDTH=44 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/2/280img1.gif"   >  , and a
series of edges <I>p</I> <TT>-&gt;</TT> <I>q</I> which connect the pair of nodes <I>p</I> and <I>q</I> in
one direction only.
<P>
<P>
A vertex <I>r</I> is reachable from a vertex <I>p</I> if there is an edge <I>p</I> <TT>-&gt;</TT> <I>r</I>, or if there exists some vertex <I>q</I> for
which <I>q</I> is reachable from <I>p</I> and <I>r</I> is reachable from <I>q</I>.
<P>
<P>
A vertex <I>r</I> is inaccessible from a vertex <I>p</I> if <I>r</I> is not reachable from <I>p</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for this program consists of several directed graphs and starting nodes.
<P>
<P>
For each graph, there is first one line containing a single integer <I>n</I>.
This is the number of vertices in the graph.
<P>
<P>
Following, there will be a group of lines, each containing a set of integers. The group is terminated by
a line which contains only the integer 0. Each set represent a collection of edges. The first integer in
the set, <I>i</I>, is the starting vertex, while the next group of integers,
 <IMG WIDTH=44 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline73" SRC="http://uva.onlinejudge.org/external/2/280img1.gif"   > , define the series of edges
<I>i</I> <TT>-&gt;</TT>  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline77" SRC="http://uva.onlinejudge.org/external/2/280img1.gif"   >  <TT>-&gt;</TT> <I>k</I>, and the last integer on the line is always 0.
Each possible start vertex <I>i</I>,  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline83" SRC="http://uva.onlinejudge.org/external/2/280img1.gif"   >  will
appear once or not at all. Following each graph definition, there will be a one line containing list of
integers. The first integer on the line will specify how many integers follow. Each of the following
integers represents a start vertex to be investigated by your program. The next graph then follows. If
there are no more graphs, the next line of the file will contain only the integer 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each start vertex to be investigated, your program should identify all the vertices which are
inaccessible from the given start vertex. Each list should appear on one line, beginning with the
count of inaccessible vertices and followed by the inaccessible vertex numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
1 2 0
2 2 0
3 1 2 0
0
2 1 2
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2 1 3
2 1 3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
281||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rubik's Cube</TITLE>
<META NAME="description" CONTENT="Rubik's Cube">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rubik's Cube</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Rubik's cube has been the source of many fruitless hours of human puzzling. Now it affords a
chance for some computer puzzling too! In case you have been on Mars for the past decade, a Rubik's
cube is covered with 54 facelets, 9 facelets on each of its six sides. Each facelet may be a certain
colour. Most cubes have their facelets painted in the six colours red, yellow, green, blue, white and
magenta, but any six colours can be used. People adept at playing with the cubes soon come to
recognise patterns which lead to a solution. They are able to do this regardless of the orientation of the
puzzle, or of the set of six colours used for its faces.
<P>
<P>
You are to write a program to assist with this task of pattern recognition. Your program will be given
the colours of the facelets of a pair of Rubik's cubes, and it must determine whether the two cubes are
`the same'.
<P>
<P>
Two cubes are the same if one cube can be made to appear identical with the other by some
combination of the following operations:
<P>
<UL><LI> Rotating the cube <EM>as a whole</EM> in steps of 90 <IMG WIDTH=5 HEIGHT=6 ALIGN=BOTTOM ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/2/281img1.gif"   >  about one of the six axes running through the centres
of its opposite faces<LI> Repainting all the facelets of a particular colour with some other colour which does not currently
appear on any facelet of that cube.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input begins with an integer, <I>n</I>, indicating the number of pairs of cubes your program must
process. <I>n</I> pairs of cubes then appear. Each pair is represented as two flattened cubes shown side by
side, in the  <IMG WIDTH=47 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/2/281img1.gif"   >  character form shown in the example input below. Any twelve letters taken from the
set {<TT>A</TT>  <IMG WIDTH=19 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/2/281img1.gif"   >  <TT>Z</TT>}, {<TT>a</TT>  <IMG WIDTH=19 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/2/281img1.gif"   >  <TT>z</TT>} may appear in place of the letters used in the example. A set of exactly six distinct
letters will be used for the first cube, and another set of six letters, distinct from each other but not
necessarily distinct from the first set, will be used for the second cube. A blank line separates each pair
of cubes from the next.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each pair of cubes in the input, your program should output one line; if the two cubes are the same
by the above definition, your program should output:
<P>
<PRE>same</PRE>
<P>
If not, it should say:
<P>
<PRE>different</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
. . . B B B . . . . . . | . . . b b b . . . . . .
. . . B B B . . . . . . | . . . b b b . . . . . .
. . . B B B . . . . . . | . . . b b b . . . . . .
L L L T T T R R R U U U | l l l t t t r r r u u u
L L L T T T R R R U U U | l l l t t t r r r u u u
L L L T T T R R R U U U | l l l t t t r r r u u u
. . . F F F . . . . . . | . . . f f f . . . . . .
. . . F F F . . . . . . | . . . f f f . . . . . .
. . . F F F . . . . . . | . . . f f f . . . . . .</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>same</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
282||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rename</TITLE>
<META NAME="description" CONTENT="Rename">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rename</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In MS-DOS there exists a `<TT>rename</TT>' command that allows you to change the name of a file. There is an
equivalent command in Unix called `<TT>mv</TT>'. Both commands take arguments in the same way:
<P>
<PRE>rename oldname newname
mv oldname newname</PRE>
<P>
However, the two commands treat the wild-card character `<TT>*</TT>' quite differently. In MS-DOS, you can say:
<P>
<PRE>rename old* new*</PRE>
<P>
and you will find that any filenames you have that previously began with
the three characters `<TT>old</TT>' have
those characters replaces by `<TT>new</TT>'. Try the equivalent under Unix and
you will probably get an error
message <TT>:-(</TT> `<TT>mv</TT>' will only take the simple two argument, no wild-card form.
<P>
<P>
To rectify this discrepancy, your program must convert a `<TT>rename</TT>' command
in to a series of `<TT>mv</TT>'s'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each dataset starts with a list of filenames. These appear one per line. The list is terminated by a line containing
the word `<TT>end</TT>'. Following the list of filenames is the sequence of `<TT>rename</TT>' commands. Each
command appears on one line in the form:
<P>
<P>
<P>
<TT>rename</TT> <EM>wildfrom</EM> <EM>wildto</EM>
<P>
<P>
<P>
<I>from</I> and <I>to</I> will both contain one wild-card character, `<TT>*</TT>'.
After the last `<TT>rename</TT>' command will be a line containing only the word `<TT>end</TT>'. There won't be two files with the same name.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each rename command in the input, you program should first echo the rename command itself, in
the same form as the input:
<P>
<P>
<P>
<TT>rename</TT> <EM>wildfrom</EM> <EM>wildto</EM>
<P>
<P>
Following that, your program should output the set of `<TT>mv</TT>' commands needed to perform the
equivalent renaming. Each `<TT>mv</TT>' should appear on its own line in the form:
<P>
<P>
<P>
<TT>mv</TT> <EM>from</EM> <EM>to</EM>
<P>
<P>
The order of the mv-commands in the output should be the order of the filenames in the input. Print a blank line after each dataset.
<p>
<B>Notes:</B>
The real MS-DOS `<TT>*</TT>' has some odd properties which do not concern us here. For example, an MS-DOS `<TT>*</TT>' will match at most eight characters, none of which is a period `<TT>.</TT>'. No such restrictions apply
to our idealised `<TT>*</TT>' which will match any number of any printable character. MS-DOS treats upper and
lower case letters the same. Unix treats the two cases as distinct, as should your program. MS-DOS limits filenames to 12 characters, including a `<TT>.</TT>' fixed at the 9th position. Some versions of Unix
limit filenames to 14 characters. This is the limit your program should assume. Each `<TT>rename</TT>' command should be performed on the original list of filenames, not on the results of the previous command.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>abFile001.c
abFile001.cxx
abprog001.c
abfile.c
abFile.c
abFileprog.c
end
rename abFile*.c bprog*.cxx
end
acm.c
end
rename ac*.c ib*.cpp
end
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>rename abFile*.c bprog*.cxx
mv abFile001.c bprog001.cxx
mv abFile.c bprog.cxx
mv abFileprog.c bprogprog.cxx

rename ac*.c ib*.cpp
mv acm.c ibm.cpp

<PRE>
<P>
</BODY>
</HTML>

______________________________________________________
283||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Compress</TITLE>
<META NAME="description" CONTENT="Compress">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Compress</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Nowadays everyone is using compression methods to reduce the space occupied by data. In some cases
this is done in such a way you hardly notice it, for example tapestreamers, modems and harddisk
doubling programs. In other cases you have to do it yourself by using <EM>pack</EM>, <EM>arj</EM>, <EM>zip</EM>, <EM>zoo</EM> or <EM>arc</EM>.
<P>
<P>
Most compression-methods are very complicated, but for this problem only the following simplified
method is used. An ASCII-character consists of eight bits, which allows the encoding of 256 different
characters. It's possible to recode the characters with a new sequence of bits. These sequences may
have a different length. When you choose to give the characters which are often used a shorter
sequence of bits than the characters which are seldom used the total text size will be reduced.
<P>
<P>
Recoding characters gives one other problem, which occurs when you try to get the text back. In a
standard ASCII text you know the first character begins at the 1st and ends at the 8th bit, the second
begins at the 9th and ends at the 16th bit and so on. When using a variable length coding you don't
know where a character begins. For example when an `<TT>a</TT>' is coded as `11' and an `<TT>e</TT>' as `1111', given
the bit-sequence `111111' you don't know if it means `<TT>ae</TT>', `<TT>ea</TT>' or `<TT>aaa</TT>'.
<P>
<P>
The last problem is solved when the next principle is used. Suppose you want to give some characters a
code length of 3 (and you haven't given any character a code yet). In that case you've got 8 (2 to the
power 3) possibilities. Seven codes can be immediately allocated to characters. The last one depends on
how many more characters you have left to code. If you only have one left to code, the last code
will do, but if you have to code more than one, you must use the last code to indicate that an extension
follows. The extension has the same structure. This has to be continued until all different characters in
the text are given a code.
<P>
<P>
For example you've the characters `<TT>a</TT>', `<TT>e</TT>', `<TT>i</TT>', `<TT>o</TT>', `<TT>u</TT>' and `<TT>y</TT>'. You choose to give the first three
characters a code with length 2 and the rest an equal length. So `<TT>a</TT>' becomes `00', `<TT>e</TT>' becomes `01' and
`<TT>i</TT>' becomes `10'. The other characters have to be an extension of `11'. Then `<TT>o</TT>' becomes `1100', `<TT>u</TT>'
becomes `1101' and `<TT>y</TT>' becomes `1110'. The code `1111' is free now. If 7 characters instead of 6
characters should be given a code this last code would be sufficient. If more than 7 characters should be
given a code, the last code would be extended and so on.
<P>
<P>
You only have to code the characters which occur in the text. You don't have to give the code table
itself.
<P>
<P>
You must write a program that reduces a given text by recoding each character and give the minimum
total filelength in bits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains the number of problems. A problem starts with the number of
lines <I>n</I> (>=0) to follow, followed by <I>n</I> lines. A line consists of characters and
the characters `<TT>A</TT>'..`<TT>Z</TT>', `<TT>a</TT>'..`<TT>z</TT>',
<TT>space</TT>, `<TT>.</TT>', `<TT>,</TT>' , `<TT>-</TT>' and `<TT>$</TT>' are allowed. The character `<TT>$</TT>' will always be at the end of a line and cannot
occur anywhere else. This character has to coded instead of the real end of line mark.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each problem in the input your program should output the minimal number of bits to code the given
text.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
3
Hello Contestant,$
Please write a program which gives$
the text Hello world.$
1
To be or not to be, that is the question.$</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>335
167</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
284||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Logic</TITLE>
<META NAME="description" CONTENT="Logic">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Logic</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Consider a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/2/284img1.gif"   >  grid. Cells in this grid can contain one of
five logic operations (AND, OR, NOT,
Input, Output). These can be joined together to form a logic circuit.
Given a description of a circuit
and a set of boolean values, build the logic circuit and execute the input
stream against it.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input contains a single integer <I>n</I>, which specifies the number of circuits to be
processed. There will then be <I>n</I> groups of circuit descriptions and test values.
<P>
<P>
A circuit is made up of a number of operations. Each line describing an operation begins with three
characters: the co-ordinates for a cell, 0-9 on the <I>X</I>-axis then 0-9 on the <I>Y</I>-axis, followed by a single
character to represent the operation of that cell (`<TT>&amp;</TT>' for AND, `<TT>|</TT>' for OR,
`<TT>!</TT>' for NOT, `<TT>i</TT>' for Input and `<TT>o</TT>'
for Output). Optionally following each triple is a set of co-ordinate
pairs which represent the <I>x</I> and <I>y</I>
co-ordinates of cells that take the output of this cells operation as an input for theirs. This (possibly
empty) output list is terminated by `<TT>..</TT>'. The list of operations is terminated by a line containing the
word `<TT>end</TT>'.
<P>
<P>
Next, for each circuit, comes the set of test values. The first line contains
an integer <I>t</I> which gives the number of test cases your program must run. Next, there are <I>t</I> lines, each line containing a
sequence of `<TT>0</TT>' and `<TT>1</TT>' characters symbolising the input values for one test case. The number of inputs will always correspond to the number of inputs defined by the circuit description. The input
values are to be applied to the inputs in the order in which the input
operations were defined in the circuit description.
<P>
<P>
The next circuit description, if any, will then follow.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each circuit, your program should output one line for each test case given in the input. The line
should contain one `<TT>0</TT>' or `<TT>1</TT>' character for each output defined by the circuit description in the order in
which the outputs were defined.
<P>
<P>
Your program should output a blank line after each set of test cases.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
00i 11 13 ..
02i 11 13 ..
11&amp; 21 ..
21o ..
13| 23 ..
23o ..
end
4
00
01
10
11</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>00
01
01
11</PRE>
<P>
<P>
<P>
<B>Notes:</B>
<UL><LI> i, o and ! operations will always have exactly one input.<LI> &amp; and <TT>|</TT> operations will always have exactly two inputs.<LI> Even if an operation can feed others, it does not have to.<LI> No recursive circuits.
</UL>
<P>
<P>
<P>
<B>Hint:</B>
Sample input specifies a circuit consiting of an `AND' and an `OR' operation
in parallel both fed from the same two inputs:
<P>
<PRE>               +---------\
3              |          |OR #----------OUT(2)
               |     +---/
               |     |
2     IN(2)----------+
               |     |
               +---------\
1                    |    |AND#----------OUT(1)
                     +---/
                     |
0      IN(1)---------+

         0                 1              2</PRE>
<P>
In grid terms this is two inputs at 0,0 and 1,0. The first input feeds the <TT>AND</TT> operation at 1,1 and the
<TT>OR</TT> operation at 1,3. The second input operation feeds the second input for the same <TT>AND</TT> and <TT>OR</TT>
operations. The <TT>AND</TT> operation then feeds an output operation at 2,1. The <TT>OR</TT> operation also feeds an output operation, this one at 2,4.
<P>
</BODY>
</HTML>

______________________________________________________
285||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Crosswords</TITLE>
<META NAME="description" CONTENT="Crosswords">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1>
<CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF><A NAME="SECTION0001000000000000000000">Crosswords</A></FONT></B></TABLE></CENTER></H1>
<P>
This problem deals with crosswords, as they are known from every newspaper. A cross-word is words arranged horizontally and vertically in a rectangle. Two words can share
one character where they are crossing. The problem is to decide whether the crossword
is solved correctly or not.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input file contains several test cases. Each test has any number of lines of the format:
<TT><b>word</b> <b>x</b> <b>y</b> <b>d</b></TT>.<br>
<TT><b>word</b>, <b>x</b>, <b>y</b></TT> and <TT><b>d</b></TT> are
in standard text
format. <TT><b>x</b></TT> and <TT><b>y</b></TT> mean the coordinate of the starting point of
the <tt><b>word</b></tt> and <TT><b>d</b></TT> is the
direction in which the <tt><b>word</b></tt> is written. <tt><b>x</b></tt> and <tt><b>y</b></tt> are positive integers less than 100. The length the <tt><b>word</b></tt> is less than 10. Between <tt><b>word</b> <b>x</b> <b>y</b> <b>d</b></tt> there is exactly one space and <tt><b>word</b></tt> begins from the first column. The coordinate system starts at
the upper
left of the rectangle with the coordinates <i>(1,1)</i>. The direction is given
by a single
character where <TT><b>u</b></TT> means upwards, <TT><b>r</b></TT> means right, <TT><b>d</b></TT> means down and <TT><b>l</b></TT> means left.
Given crossword will always be correct.
<P>These lines are follwed by a <tt>#</tt> symbol, and then the test contains the ``solution&quot; in the following format:
The first line of the ``solution&quot; is the
minimal width <i>(minimal right edge coordinate)</i> of the crossword, and the second line is the minimal height <i>(minimal bottom coordinate)</i> of the crossword needed to make crossword.
The third line is all the
characters of the ``solution&quot; <i>(only lower case characters - a ... z)</i> listed from left to right, from top to bottom at the end of which stands single <tt>$</tt> symbol <i>(<tt>$</tt> is not a part of the ``solution&quot; and just indicates the end of the ``solution&quot; line)</i>. The <b>EOF</b> indicates the end of input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case output must be one of the following sentences:
<P>
<UL>
<LI> <TT>The solution is correct.</TT>
</UL>
<P>
or
<UL>
<LI> <TT>The solution is incorrect.</TT>
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>second 1 1 r
vis 1 3 r
file 2 4 u
castle 3 1 d
end 6 3 u
#
6
6
second la  nvis  e ft  l  e   $
sample 1 4 r
output 1 7 r
for 3 3 u
crossword 1 1 d
is 2 5 l
correct 1 1 r
#
7
9
correctr o    o f    sample  si     w      output r      d      $</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>The solution is correct.
The solution is correct.</PRE>
<P>
</BODY>
</HTML>
______________________________________________________
286||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Dead Or Not - That Is The Question</TITLE>
<META NAME="description" CONTENT="Dead Or Not - That Is The Question">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR>
<TD><B><FONT SIZE=5 COLOR=#C0FFFF><A NAME="SECTION0001000000000000000000">Dead Or Not - That Is The Question</A></FONT></B>
</TABLE></CENTER></H1>
<P>
On a standard checkerboard ( <b>8 x 8</b>  squares) the only black piece is
the king. The only
limitation to the number and kind of white pieces is the number of
squares left (63). This
means that apart from the black king there can be between zero and 63
white pieces on
the board.
<P>
<P>
Your objective is to determine whether the black king is under check and cannot move to the square which is not attacked<i>(checkmate)</i> or is not under check but there is no square to go which is not attacked <i>(draw)</i> or there exists a square where it can move <i>(game is not over)</i>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input consists of several lines. Each line of the input file contains the description of the boards state is a
64-character string with
each character representing a square on the board (row after row).
The black king will always present in this string. The white king will never be the neighbour of the black king on the board and only one white king will present on the board. The white pawns will never be on positions x1 <i>(x = a, b, c, d, e, f, g, h)</i>.  The possible values for each character are:
<P><PRE>
<table width="400" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="150"><b>&lt;space&gt;</b></td>
<td><b>no figure on this square</b></td>
</tr>
<tr>
<td width="150"><b>K</b></td>
<td><b>black king</b></td>
</tr>
<tr>
<td width="150"><b>p</b></td>
<td><b>white pawn</b></td>
</tr>
<tr>
<td width="150"><b>r</b></td>
<td><b>white rook</b></td>
</tr>
<tr>
<td width="150"><b>n</b></td>
<td><b>white knight</b></td>
</tr>
<tr>
<td width="150"><b>b</b></td>
<td><b>white bishop</b></td>
</tr>
<tr>
<td width="150"><b>q</b></td>
<td><b>white queens</b></td>
</tr>
<tr>
<td width="150"><b>k</b></td>
<td><b>white king</b></td>
</tr>
</table>
</PRE>
<P>
<P>
<UL>
<LI> <b>PAWN</b>: one of the chessmen of least value having the power to move only forward ordinarily one square at a time, to capture only diagonally forward, and be promoted to any piece except a king upon reaching the eighth rank
<LI> <b>ROOK</b>: either of two pieces of the same color in a set of chessmen having the power  move along the ranks or files across any number of unoccupied squares. Also called castle
<LI> <b>KNIGHT</b>: either of two pieces of the same color in a set of chessmen having an L-shaped move of two squares in one row and one square in a perpendicular row over squares that may be occupied
to
<LI> <b>BISHOP</b>: either of two pieces of each color in a set of chessmen having the power to move diagonally across any number of adjoining unoccupied squares
<LI> <b>QUEEN</b>: the most privileged piece of each color in a set of chessmen having the power to move in any direction across any number of unoccupied squares
<LI> <b>KING</b>: the principal piece of each color in a set of chessmen having the power to move ordinarily one square in any direction and to capture opposing men but being obliged never to enter or remain in check
</UL>
<P>
Suppose the chessboard starts at the lower left corner with the field a/1. Therefore
white is playing upwards (Starting at a-h/1-8).
 <b>EOF</b> indicates the end of the input file.
<P>
The output consists of : <TT>&quot;checkmate&quot;</TT> or <TT>&quot;draw&quot;</TT> or <tt>&quot;game is not over&quot;</tt> without quotes.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>knnnnnnnpppppppppppppppprrrrrrrrrrrrrrrrnnnbqbqbnKnbqbqbnnnbqbqb
nrnrbqnnnpbnbbnqrkbrbprpnrpprqprqpnpnnbprbrqrqnnnnprpppKnqrrbqqq
nrrqbqbrnrpprpbpnbnprqnnnnbrppqqpqpnKqnpnpqrrprrnnbqqnrbqknbqqnn
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>draw
checkmate
game is not over</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
287||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Text Comparsion</TITLE>
<META NAME="description" CONTENT="Text Comparsion">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Text Comparsion</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that will compare two texts. The two texts are assumed do be
different versions of the same text. Three different things can happen to a text between two versions:
<P>
<UL><LI> Text could be deleted<LI> Text could be inserted<LI> Text could be changed
</UL>
<P>
Any combination of the three can occur at once. A move, for example will look as a deletion at one place and an insert at another. You should
list all changes that happened from the old to the new version.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several datasets, each containing two lines with <TT>text1</TT> and <TT>text2</TT> strings.
They contain the two versions of
the text to compare. String <TT>text2</TT> should be regarded as the older version, and string <TT>text1</TT> as the newer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The outputfile contain all deletions, insertions
and changes that happended to the text between the two versions
in the following format:
<P>
<UL><LI> deletion: Position of the first character deleted,
the word ``<TT>deleted</TT>'' and the number
of characters deleted and the text that has been deleted.<LI> insertion: Position of the first character of the text inserted,
the word ``<TT>inserted</TT>''
since the last version, the number of characters inserted an the text inserted.<LI> change: Position of the first character changed,
the word ``<TT>changed</TT>'', the number of
characters changed, the original text and what it has been changed to.
</UL>
<P>
The position of the first character always refers to the position in
the <I>older</I> version (i.e.
the position within <TT>text2</TT>). The first character in a file
is numbered zero (0). The
program should <I>not</I> be case-sensitive. Print a blank line after each dataset.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>       0         1         2         3         4         5         6
       0123456789012345678901234567890123456789012345678901234567890
text1: This is a joke. This is not life. Don't consider it anyway...
text2: This is not a joke. This is life. Consider it thoroughly...</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>pos 8 deleted 4 chars &quot;not &quot;
pos 28 inserted 4 chars &quot;not &quot;
pos 34 inserted 6 chars &quot;don't &quot;
pos 46 changed 10 chars from &quot;thoroughly&quot; to &quot;anyway&quot;</PRE>
<P>
<P>
<P>
<B>Note:</B> The numbers for position characters and the headings of lines are not included in the input file.
<P>
</BODY>
</HTML>

______________________________________________________
288||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Arithmetic Operations With Large Integers</TITLE>
<META NAME="description" CONTENT="Arithmetic Operations With Large Integers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Arithmetic Operations With Large Integers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
This problem is about calculations with large numbers. Large means numbers with at
most one thousand digits. The operations are limited to addition, substraction, multiplication and raising to a higher power.
<P>
There are no limitations to the operants of addition, substraction and multiplication. The
base in raising to higher powers is positive and smaller than ten. The exponent is positive.
<P>
<P>
The inputfile consists of a valid expression with any number of operations. There are no
parentheses, but the normal arithmetic priority rules are still valid.
<P>
An example of a valid expression is: <TT>12345678 * 129876 + 2**1993</TT>.
An invalid expression
is: <TT>12345678 * 129876 + 12**1993</TT> because the base is greater than nine.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>

The input contains several test cases, each one on a different line. Each test case contains numbers and operands in the following
way: <TT>n op n { op n }</TT> . <TT>n</TT> is a
positive decimal number with at most one thousand digits,
stored as an ASCII-text. <TT>op</TT>
is one of the following: <TT>+, -, *, **</TT> (<TT>**</TT>
means ``raising to higher powers''). There can be
at most one hundred operations per test case. There are no spaces 
or other illegal characters in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>

The output contains the exact result of the evaluated expressions 
given in the input. Print each test case in a different line.
Each test case won't have more than three thousand characters.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>12345678*129876+2**1993</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
896977105683011347056900938420064050017435704756793125373158388145129891712\\
789307700515223684770523373785909874208955291755561688174261977676508872005\\
197801086953040197752187505381087095625350558038492109870986287356370809737\\
409093338414265941143390397695285610643740694879918793932122262001282984143\\
224073001319601441082075018589725061828585163552941409601583724270514300953\\
188533095947591884905338415676554651534516617357655143781579373852994152663\\
198702360093129335607684294312805938140290754926427776409574872859496315224\\
893901812925850900592061583009183090068756428459147015355107518672556877720
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
289||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>A Very Nasty Text Formatter</TITLE>
<META NAME="description" CONTENT="A Very Nasty Text Formatter">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">A Very Nasty Text Formatter</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
This problem deals with pretty-printing of an arbitrary text.
You are given a text (see also
EBNF below) composed of some paragraphs. Each paragraph is initiated by
an integer <I>n</I>.
You are expected to output this paragraph in such a way that every row
is &lt;CR&gt;-terminated and is except for the last one
exactly <I>n</I> characters long (&lt;CR&gt; not counted).
<P>
<P>
This justified output should be done by inserting some extra spaces between the words of
a row. 
Divide the spaces left as equally as possible among the spaces between words. In case you can't divide them equally, the leftmost
spaces between words should be longer than the rightmost ones.
In some cases, you may be forced to hyphenate a word to achieve justified output.
Do this hyphenation where you want because you do not have to follow any linguistic
rules. You should do as few hyphenations as possible.
However, if it is impossible to justify a line of the text, output it
left-justified.
The assumptions that
you can make are
<P>
<OL><LI> The text follows the EBNF.
<LI> 3 &lt; <I>n</I> &lt; 1000.
<LI> There are no words longer than thousand characters.
</OL>
<P>
<P>
<P>
<B>Note 1:</B> The text is built following this EBNF
<PRE>    text = paragraph {paragraph} &lt;eof&gt;.
    paragraph = n &quot; &quot; word {&quot; &quot; word} &lt;CR&gt;.
    n = digit {digit}.
    word = letter {letter} [mark].
    digit = &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | ... | &quot;8&quot; | &quot;9&quot;.
    letter = &quot;A&quot; | &quot;B&quot; | ... | &quot;Y&quot; | &quot;Z&quot; | &quot;a&quot; | &quot;b&quot; | ... | &quot;y&quot; | &quot;z&quot;.
    mark = &quot;.&quot; | &quot;,&quot; | &quot;;&quot; | &quot;:&quot;.</PRE>
<B>Note 2:</B> 
The explicit &lt;CR&gt;'s and &lt;eof&gt;'s have been added on the sample input and output to make it readable. They won't exist on the input and
output files.

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>20 This is an example of a paragraph which is prettyprinted on a row with a
length of twenty.&lt;CR&gt;
15 This is an example of a paragraph which is prettyprinted on a row with a 
length of fifteen.&lt;CR&gt;
10 This is an example of a paragraph which is prettyprinted on a row with a
length of ten.&lt;CR&gt;
5 This is an example of a paragraph which is prettyprinted on a row with a
length of five.&lt;CR&gt;
&lt;eof&gt;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
This  is  an example&lt;CR&gt;
of a paragraph which&lt;CR&gt;
is  prettyprinted on&lt;CR&gt;
a  row with a length&lt;CR&gt;
of twenty.&lt;CR&gt;
This    is   an&lt;CR&gt;
example   of  a&lt;CR&gt;
paragraph which&lt;CR&gt;
is prettyprint-&lt;CR&gt;
ed   on  a  row&lt;CR&gt;
with  a  length&lt;CR&gt;
of fifteen.&lt;CR&gt;
This is an&lt;CR&gt;
example of&lt;CR&gt;
a paragra-&lt;CR&gt;
ph   which&lt;CR&gt;
is pretty-&lt;CR&gt;
printed on&lt;CR&gt;
a row with&lt;CR&gt;
a   length&lt;CR&gt;
of ten.&lt;CR&gt;
This&lt;CR&gt;
is an&lt;CR&gt;
exam-&lt;CR&gt;
ple&lt;CR&gt;
of  a&lt;CR&gt;
para-&lt;CR&gt;
graph&lt;CR&gt;
which&lt;CR&gt;
is p-&lt;CR&gt;
rett-&lt;CR&gt;
ypri-&lt;CR&gt;
nted&lt;CR&gt;
on  a&lt;CR&gt;
row&lt;CR&gt;
with&lt;CR&gt;
a le-&lt;CR&gt;
ngth&lt;CR&gt;
of f-&lt;CR&gt;
ive.&lt;CR&gt;
&lt;eof&gt;</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
291||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The House Of Santa Claus</TITLE>
<META NAME="description" CONTENT="The House Of Santa Claus">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The House Of Santa Claus</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In your childhood you most likely had to solve the riddle of the house of Santa Claus. Do
you remember that the importance was on drawing the house in a stretch without lifting
the pencil and not drawing a line twice? As a reminder it has to
look like shown in Figure 1.
<P>
<P><A NAME="30">&#160;</A> <IMG WIDTH=161 HEIGHT=180 ALIGN=BOTTOM ALT="figure20" SRC="http://uva.onlinejudge.org/external/2/291img1.gif"   > <BR>
<STRONG>Figure:</STRONG> The House of Santa Claus<BR>
<P>
<P>
Well, a couple of years later, like now, you have to ``draw'' the
house again but on the
computer. As one possibility is not enough, we require <I>all</I> the
possibilities when starting
in the lower left corner. Follow the example in Figure 2 while defining
your stretch.
<P>
<P><A NAME="51">&#160;</A> <IMG WIDTH=158 HEIGHT=179 ALIGN=BOTTOM ALT="figure33" SRC="http://uva.onlinejudge.org/external/2/291img1.gif"   > <BR>
<STRONG>Figure:</STRONG> This Sequence would give the Outputline 153125432<BR>
<P>
<P>
All the possibilities have to be listed in the outputfile by increasing order, meaning that <TT>1234...</TT> is listed before <TT>1235...</TT> .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Output</A></FONT></H2>
<P>
So, an outputfile could look like this:
<P>
<PRE>12435123
13245123
...
15123421</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
292||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Presentation Error</TITLE>
<META NAME="description" CONTENT="Presentation Error">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Presentation Error</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
One of the main burdens of the Jury of the Scholastic Programming Contest is not to
decide whether a submitted program is incorrect, but how to classify the error. In the past,
we had <TT>'Failed Testcase', 'Wrong Answer', 'Wrong Output Format'</TT>
and <TT>'Too much/Too Little Output'</TT> to worry about.
<P>
<P>
The interpretation of these messages depended largely on the jury member involved. For
instance, while some believe that <TT>'Wrong Answer'</TT> indicates that all
answers are wrong, and
<TT>'Failed Testcase'</TT> applies when at least one answer is right,
others feel that <TT>'Wrong Answer'</TT>
should be used if more than one answer is wrong, and <TT>'Failed Testcase'</TT>
only if exactly one test went wrong.
<P>
<P>
Fortunately, all these worries are gone, since now we only need to distinguish between
<TT>'Wrong Answer', 'Presentation Error'</TT> and <TT>'Accepted'</TT> (all other
messages are the result of
compilation errors, run-time errors, and non-terminating programs).
<P>
<P>
To eliminate any subjectivity in deciding between a <TT>Presentation Error</TT>
and a <TT>Wrong Answer</TT>, the Jury of this year's Programming Contest
has defined an exact procedure to
determine whether a program produces a <TT>'Wrong Answer'</TT>,
a <TT>'Presentation Error'</TT>, or should be <TT>Accepted</TT>.
<P>
<P>
In the description of the rules, we distinguish between JuryOut and SubmitOut, as the
output intended by the Jury, and the output submitted, respectively. The JuryOut contains
parts which are considered essential in the output of a correct algorithm. Those essentials
are placed between `[' and `]'. Those brackets are not part of the output, thus they should
not appear in SubmitOut. The algorithm to decide
between <TT>'Accepted', 'Wrong Answer'</TT> and
<TT>'Presentation Error'</TT> is as follows:
<P>
<OL><LI> From each line in both outputs, all trailing white space (blanks and tabs) should be
removed. After that, all trailing empty lines should be removed.<LI> If after step 1, JuryOut and SubmitOut are identical, the algorithm
returns <TT>'Accepted'</TT>.<LI> All letters in both outputs are changed to uppercase (including those between square
brackets).<LI> We name the essentials  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   >  through  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   > .<LI> If each of the strings  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   >  through  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   >  occurs as a string in
SubmitOut, and  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   >  comes after
(without overlapping)  <IMG WIDTH=33 HEIGHT=23 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   > ,
for all  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/2/292img1.gif"   > , then the algorithm
returns <TT>'Presentation Error'</TT>.<LI> The algorithm returns <TT>'Wrong Answer'</TT>.
</OL>
<P>
As we (the Jury) need to have such a program (and we need it NOW), your job is to write
it for us.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input contains on the first line the number of test cases (N). Each test case has on
its first line the number (J) of lines in JuryOut, and the number (S) of SubmitOut lines,
separated by a single space. Then follow the J lines of JuryOut and the S lines of SubmitOut.
Both JuryOut and SubmitOut are no longer than 10 lines. A line is at most 80 characters
long. Essentials are non-empty strings that do not cross line boundaries. The first and last
characters of an essential are not white space. Essentials will not be nested.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
The output has to be <TT>'Accepted', 'Wrong Answer'</TT>,
or <TT>'Presentation Error'</TT> on a single line for each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>4
1 2
Just one line?
Just one line?

2 2
The first characters of the alphabet are:
[abcde]
Here they come:
a b c d e
1 1
That's it: [abcde]
That's it: AbCdE
1 1
[2] and [3] make [5]
I guess 2 and 3 are less than 50.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>Accepted
Wrong Answer
Presentation Error
Presentation Error</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
293||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bits</TITLE>
<META NAME="description" CONTENT="Bits">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bits</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
It is not always easy to transfer data from one computer system to the other. You need
proper standards for data encoding, and may also need to compress data to save bandwidth
and thus reduce costs.
<P>
<P>
To assist the designer in making implementation choices related to the available band-width, a tool is required that computes the size of each message in bits. The tool has to read and interpret the format of each message to do so.
<P>
<P>
A message can best be described by giving the underlying grammar, which uses the following terminals:
<P>
<P>
<P> <IMG WIDTH=440 HEIGHT=60 ALIGN=BOTTOM ALT="tabular20" SRC="http://uva.onlinejudge.org/external/2/293img1.gif"   > <P>
<P>
<P>
A message is defined by the following grammar:
<P>
<P>
<P> <IMG WIDTH=399 HEIGHT=190 ALIGN=BOTTOM ALT="tabular26" SRC="http://uva.onlinejudge.org/external/2/293img1.gif"   > <P>
<P>
<P>
Note that the message grammar is specified according to the following notational conventions:
<P>
<P>
<P> <IMG WIDTH=354 HEIGHT=82 ALIGN=BOTTOM ALT="tabular71" SRC="http://uva.onlinejudge.org/external/2/293img1.gif"   > <P>
<P>
<P>
Any two tokens may be separated by an arbitrary amount of white space (blanks, tabs an
newlines). White space does not occur within tokens.
<P>
<P>
The (minimal) amount of bits needed to transmit a message can be computed using the
following rules:
<P>
<P>
<P> <IMG WIDTH=672 HEIGHT=103 ALIGN=BOTTOM ALT="tabular74" SRC="http://uva.onlinejudge.org/external/2/293img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input contains on the first line the number of test cases (N). Each test case will contain
message according to the grammar above. Messages may be separated by an arbitrary amount
of white space. You may assume that the input is syntactically correct.
For each range `<I>L</I>..<I>H</I>',
it holds that  <IMG WIDTH=49 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline109" SRC="http://uva.onlinejudge.org/external/2/293img1.gif"   > . A string consists of a positive number of characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each message, output the
sentence: <TT>'A &quot;</TT><I>id</I><TT>&quot; message requires</TT> <I>S</I> <TT>bits.'</TT>,
where id is the identifier of the message and <I>S</I> its size in bits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>3
year : [1970..2030]
team : {
        name : string(14)
        members : array [1..3] of {
                sex : ( male, female )
                name : string(20)
                age : [16..30]
        }
        position : [1..40]
}
jurynames : array [1..3] of string(20)</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>A &quot;year&quot; message requires 6 bits.
A &quot;team&quot; message requires 539 bits.
A &quot;jurynames&quot; message requires 420 bits.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
294||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Divisors</TITLE>
<META NAME="description" CONTENT="Divisors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Divisors</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Mathematicians love all sorts of odd properties of numbers. For instance, they consider
945 to be an interesting number, since it is the first odd number for which the sum of its
divisors is larger than the number itself.
<P>
<P>
To help them search for interesting numbers, you are to write a program that scans a
range of numbers and determines the number that has the largest number of divisors in the
range. Unfortunately, the size of the numbers, and the size of the range is such that a too
simple-minded approach may take too much time to run. So make sure that your algorithm
is clever enough to cope with the largest possible range in just a few seconds.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line of input specifies the number <I>N</I> of ranges, and each of the <I>N</I> following lines
contains a range, consisting of a lower bound <I>L</I> and an upper bound <I>U</I>, where <I>L</I> and <I>U</I> are included in the range. <I>L</I> and <I>U</I> are chosen such
that  <IMG WIDTH=190 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/2/294img1.gif"   >  and  <IMG WIDTH=145 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/2/294img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each range, find the number <I>P</I> which has the largest number of divisors (if several numbers
tie for first place, select the lowest), and the number of positive divisors <I>D</I> of <I>P</I> (where
<I>P</I> is included as a divisor). Print the text <TT>'Between <I>L</I> and <I>H</I>, <I>P</I> has a maximum of <I>D</I>
divisors.'</TT>, where <I>L</I>, <I>H</I>, <I>P</I>, and <I>D</I> are the numbers as defined above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example input</A></FONT></H2>
<P>
<PRE>3
1 10
1000 1000
999999900 1000000000</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example output</A></FONT></H2>
<P>
<PRE>Between 1 and 10, 6 has a maximum of 4 divisors.
Between 1000 and 1000, 1000 has a maximum of 16 divisors.
Between 999999900 and 1000000000, 999999924 has a maximum of 192 divisors.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
295||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Fatman</TITLE>
<META NAME="description" CONTENT="Fatman">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Fatman</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Some of us may be so fortunate to be thin enough to squeeze through the tiniest hole,
others are not. Getting from A to B in a crowded supermarket (even without a cart) can be
tough and may require sophisticated navigation: there may seem to be enough room on the
one side, but then you may run into trouble with that lady further down...
<P>
<P>
Let's consider this in an abstract fashion: given an aisle of a certain width, with infinitely small obstacles scattered around, just how fat can a person be and still be able to get from the left side to the right side. Assume that seen from above a (fat) person looks like a circle and the person is incompressible (a person with diameter <I>d</I> cannot go between two obstacles having distance less than <I>d</I>).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line of input specifies the number of test cases your program has to process. The
input for each test case consists of the following lines:
<P>
<UL><LI> One line with the integer length <I>L</I> ( <IMG WIDTH=92 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/2/295img1.gif"   > ) and integer
width <I>W</I> ( <IMG WIDTH=99 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/2/295img1.gif"   > )
of the aisle, separated by a single space.<LI> One line with the number of obstacles <I>N</I> ( <IMG WIDTH=95 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/2/295img1.gif"   > ) in the aisle.<LI> <I>N</I> lines, one for each obstacle, with its integer
coordinates <I>X</I> and <I>Y</I> (<IMG WIDTH=177 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline55" SRC="http://uva.onlinejudge.org/external/2/295img1.gif"   >) separated by a single space.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case given in the input, print a line
saying <TT>'Maximum size in test case <I>N</I> is <I>M</I>.'</TT>,
where <I>M</I> is rounded to the nearest fractional part of exactly four
digits. <I>M</I> is the
maximum diameter of a person that can get through the aisle specified
for that test case. <I>N</I> is the current test case number, starting at one.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>1
8 5
8
2 1
1 3
3 2
4 4
5 3
6 4
7 2
7 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>Maximum size in test case 1 is 2.2361.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Additional Data</A></FONT></H2>
<P>
The Example Input looks like:
<P>
<center><img src=295img5.gif></center>
</BODY>
</HTML>

______________________________________________________
296||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Safebreaker</TITLE>
<META NAME="description" CONTENT="Safebreaker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Safebreaker</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
We are observing someone playing the game of Mastermind. The object of this game
is to find a secret code by intelligent guess work, assisted by some clues. In this case the
secret code is a 4-digit number in the inclusive range from 0000 to 9999,
say ``3321''. The
player makes a first random guess, say ``1223'' and then, as for each of the future guesses,
gets a clue telling him how good his guess is. A clue consists of two numbers: the number
of correct digits (in this case 1: the ``2'' at the third position) and the additional number of
digits guessed correctly but in the wrong place (in this case 2:
the ``1'' and the ``3''). The clue would in this case be: ``1/2''.
<P>
<P>
Write a program that given a set of guesses and corresponding clues, tries to find the secret code.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line of input specifies the number of test cases (<I>N</I>) your program has to process.
Each test case consists of a first line containing the number of
guesses <I>G</I> ( <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/2/296img1.gif"   > ), and
<I>G</I> subsequent lines consisting of exactly 8 characters: a code of four digits, a blank, a digit
indicating the number of correct digits, a `<TT>/</TT>' and a digit indicating the number of correct but
misplaced digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, the output contains a single line saying either:
<P>
<UL><LI> <TT>impossible</TT> if there is no code consistent with all guesses.<LI> <I>the secret code</I> if there is exactly one code consistent with all guesses.<LI> <TT>indeterminate</TT> if there is more than one code which is consistent with all guesses.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>4
6
9793 0/1
2384 0/2
6264 0/1
3383 1/0
2795 0/0
0218 1/0
1
1234 4/0
1
1234 2/2
2
6428 3/0
1357 3/0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>3411
1234
indeterminate
impossible</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
297||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Quadtrees</TITLE>
<META NAME="description" CONTENT="Quadtrees">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Quadtrees</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A quadtree is a representation format used to encode images. The fundamental idea
behind the quadtree is that any image can be split into four quadrants. Each quadrant may
again be split in four sub quadrants, etc. In the quadtree, the image is represented by a
parent node, while the four quadrants are represented by four child nodes, in a predetermined
order.
<P>
<P>
Of course, if the whole image is a single color, it can be represented by a quadtree consisting
of a single node. In general, a quadrant needs only to be subdivided if it consists of pixels of
different colors. As a result, the quadtree need not be of uniform depth.
<P>
<P>
A modern computer artist works with black-and-white images of  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/2/297img1.gif"   > 
units, for a total
of 1024 pixels per image. One of the operations he performs is adding two images together,
to form a new image. In the resulting image a pixel is black if it was black in at least one of
the component images, otherwise it is white.
<P>
<P>
This particular artist believes in what he calls the <I>preferred fullness</I>:
for an image to be
interesting (i.e. to sell for big bucks) the most important property is the number of filled
(black) pixels in the image. So, before adding two images together, he would like to know
how many pixels will be black in the resulting image. Your job is to write a program that,
given the quadtree representation of two images, calculates the number of pixels that are
black in the image, which is the result of adding the two images together.
<P>
<P>
In the figure, the first example is shown (from top to bottom) as image, quadtree, pre-order string (defined below) and number of pixels. The quadrant numbering is shown at the
top of the figure.
<P>
<center><img src=297img2.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line of input specifies the number of test cases (<I>N</I>) your program has to process.
<P>
The input for each test case is two strings, each string on its own line. The string is the
pre-order representation of a quadtree, in which the letter '<TT>p</TT>' indicates a parent node, the
letter '<TT>f</TT>' (full) a black quadrant and the letter '<TT>e</TT>' (empty) a white quadrant. It is guaranteed
that each string represents a valid quadtree, while the depth of the tree is not more than 5
(because each pixel has only one color).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print on one line the text '<TT>There are <I>X</I> black pixels.</TT>', where <I>X</I> is the number of black pixels in the resulting image.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>3
ppeeefpffeefe
pefepeefe
peeef
peefe
peeef
peepefefe</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>There are 640 black pixels.
There are 512 black pixels.
There are 384 black pixels.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
298||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Race Tracks</TITLE>
<META NAME="description" CONTENT="Race Tracks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Race Tracks</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many boring math classes have been spent playing Race Tracks, where two players have
to maneuver their cars on a race track drawn on a piece of paper, while their cars can only
accelerate by a limited (positive or negative) amount per move.
<P>
<P>
A variant of Race Tracks involves Hoppers. Hoppers are people on a jump stick who can
jump from one square to the other, without touching the squares in between (a bit like a
knight in chess). Just like the aforementioned cars, they can pick up speed and make bigger
hops, but their acceleration per move is limited, and they also have a maximum speed.
<P>
<P>
Let's be a bit more formal: our variant of Race Tracks is played on a rectangular grid,
where each square on the grid is either empty or occupied. While hoppers can fly over any
square, they can only land on empty squares. At any point in time, a hopper has a velocity
(<I>x</I>,<I>y</I>), where <I>x</I> and <I>y</I> are the speed (in squares) parallel to the grid. Thus, a speed of (2,1)
corresponds to a knight jump, (as does (-2,1) and 6 other speeds).
<P>
<P>
To determine the hops a hopper can make, we need to know how much speed he can
pick up or lose: either -1, 0, or 1 square in both directions. Thus, while having speed (2,1),
the hopper can change to speeds (1,0), (1,1), (1,2), (2,0), (2,1), (2,2), (3,0), (3,1) and (3,2).
It is impossible for the hopper to obtain a velocity of 4 in either direction, so the <I>x</I> and <I>y</I> component will stay between -3 and 3 inclusive.
<P>
<P>
The goal of Hopping Race Tracks is to get from start to finish as quickly as possible (i.e. in
the least number of hops), without landing on occupied squares. You are to write a program
which, given a rectangular grid, a start point S, and a finish point F, determines the least
number of hops in which you can get from S to F. The hopper starts with initial speed (0,0)
and he does not care about his speed when he arrives at F.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input specification</A></FONT></H2>
<P>
The first line contains the number of test cases (<I>N</I>) your program has to process. Each test
case consists of a first line containing the width <I>X</I> ( <IMG WIDTH=87 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > )
and height <I>Y</I> ( <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > )
of the grid. Next is a line containing four integers separated by blanks, of which the first two
indicate the start point  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   >  and the last two indicate the end
point  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   >  ( <IMG WIDTH=227 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > ).
The third line of each test case contains an integer <I>P</I> indicating the
number of obstacles in the grid. Finally, the test case consists of <I>P</I> lines, each specifying an obstacle.
<P>
<P>
Each obstacle consists of four integers:  <IMG WIDTH=64 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline59" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > ,
( <IMG WIDTH=259 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > ),
meaning that all squares (<I>x</I>,<I>y</I>) with  <IMG WIDTH=89 HEIGHT=23 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   > 
and  <IMG WIDTH=86 HEIGHT=23 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/2/298img1.gif"   >  are occupied.
<P>
<P>
The start point will never be occupied.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output specification</A></FONT></H2>
<P>
The string '<TT>No solution.</TT>' if there is no way the hopper can reach the finish point from the
start point without hopping on an occupied square.
Otherwise, the text '<TT>Optimal solution takes N hops.</TT>',
where <I>N</I> is the number of hops needed to get from start to finish point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example input</A></FONT></H2>
<P>
<PRE>2
5 5
4 0 4 4
1
1 4 2 3
3 3
0 0 2 2
2
1 1 0 2
0 2 1 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example output</A></FONT></H2>
<P>
<PRE>Optimal solution takes 7 hops.
No solution.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
299||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Train Swapping</TITLE>
<META NAME="description" CONTENT="Train Swapping">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Train Swapping</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
At an old railway station, you may still encounter one of the last
remaining ``train swappers''. A train swapper is an employee of
the railroad, whose sole job it is to rearrange the
carriages of trains.
<P>
Once the carriages are arranged in the optimal order, all the train driver has to do, is
drop the carriages off, one by one, at the stations for which the load is meant.
<P>
<P>
The title ``train swapper'' stems from the first person who performed this task, at a station
close to a railway bridge. Instead of opening up vertically, the bridge rotated around a pillar
in the center of the river. After rotating the bridge 90 degrees, boats could pass left or right.
<P>
The first train swapper had discovered that the bridge could be operated with at most two
carriages on it. By rotating the bridge 180 degrees, the carriages switched place, allowing him
to rearrange the carriages (as a side effect, the carriages then faced the opposite direction,
but train carriages can move either way, so who cares).
<P>
Now that almost all train swappers have died out, the railway company would like to
automate their operation. Part of the program to be developed, is a routine which decides
for a given train the least number of swaps of two adjacent carriages necessary to order the
train. Your assignment is to create that routine.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input contains on the first line the number of test cases (<I>N</I>). Each test case consists of
two input lines. The first line of a test case contains an integer <I>L</I>, determining the length of
the train ( <IMG WIDTH=83 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/2/299img1.gif"   > ). The second line of a test case contains a permutation of the numbers
1 through <I>L</I>, indicating the current order of the carriages. The carriages should be ordered
such that carriage 1 comes first, then 2, etc. with carriage <I>L</I> coming last.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case output the
sentence: '<TT>Optimal train swapping takes <I>S</I> swaps.</TT>' where <I>S</I> is an integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example Input</A></FONT></H2>
<P>
<PRE>3
3
1 3 2
4
4 3 2 1
2
2 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example Output</A></FONT></H2>
<P>
<PRE>Optimal train swapping takes 1 swaps.
Optimal train swapping takes 6 swaps.
Optimal train swapping takes 1 swaps.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
300||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Maya Calendar</TITLE>
<META NAME="description" CONTENT="Maya Calendar">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Maya Calendar</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
During his last sabbatical, professor M. A. Ya made a surprising discovery
about the old Maya calendar.
From an old knotted message, professor discovered that the Maya civilization
used a 365 day long year, called
<I>Haab</I>, which had 19 months. Each of the first 18 months was 20 days long,
and the names of the months
were <I>pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac,
kankin, muan, pax, koyab, cumhu</I>.
Instead of having names, the days of the months were denoted by numbers
starting from 0 to 19. The last
month of Haab was called <I>uayet</I> and had 5 days denoted by numbers
0, 1, 2, 3, 4. The Maya believed that
this month was unlucky, the court of justice was not in session, the trade
stopped, people did not even sweep the floor.
<P>
<P>
For religious purposes, the Maya used another calendar in which the year
was called <I>Tzolkin</I> (holly
year). The year was divided into thirteen periods, each 20 days long. Each
day was denoted by a pair
consisting of a number and the name of the day. They used 20 names:
<I>imix, ik, akbal, kan, chicchan, cimi,
manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac,
ahau</I> and 13 numbers; both in cycles.
<P>
<P>
Notice that each day has an unambiguous description. For example, at the
beginning of the year the days were described as follows:
<P>
<P>
<I>1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat,
9 muluk, 10 ok, 11 chuen, 12 eb, 13
ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau</I>, and again
in the next period <I>8 imix, 9 ik, 10 akbal...</I>
<P>
<P>
Years (both Haab and Tzolkin) were denoted by numbers 0, 1, ..., where the
number 0 was the beginning of the world. Thus, the first day was:
<P>
<P>
<P>
Haab: <code>0. pop 0</code>
<P>
Tzolkin: <code>1 imix 0</code>
<P>
<P>
Help professor M. A. Ya and write a program for him to convert the dates from
the Haab calendar to the Tzolkin calendar.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The date in Haab is given in the following format:
<P>
<P>
<P>
<EM>NumberOfTheDay. Month Year</EM>
<P>
<P>
The first line of the input file contains the number of the input dates in
the file. The next <I>n</I> lines contain
<I>n</I> dates in the Haab calendar format, each in separate line. The year
is smaller then 5000.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The date in Tzolkin should be in the following format:
<P>
<P>
<P>
<EM>Number NameOfTheDay Year</EM>
<P>
<P>
The first line of the output file contains the number of the output dates.
In the next <I>n</I> lines, there are
dates in the Tzolkin calendar format, in the order corresponding to the
input dates.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
10. zac 0
0. pop 0
10. zac 1995</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3
3 chuen 0
1 imix 0
9 cimi 2801</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
301||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Transportation</TITLE>
<META NAME="description" CONTENT="Transportation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Transportation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Ruratania is just entering capitalism and is establishing new enterprising
activities in many fields including transport.
The transportation company TransRuratania is starting a new express train
from city A
to city B with several stops in the stations on the way. The stations
are successively numbered, city A station
has number 0, city B station number <I>m</I>. The company runs an experiment
in order to improve passenger
transportation capacity and thus to increase its earnings. The train has
a maximum capacity <I>n</I> passengers.
The price of the train ticket is equal to the number of stops (stations)
between the starting station and the
destination station (including the destination station). Before the
train starts its route from the city A, ticket
orders are collected from all onroute stations. The ticket order from the
station S means all reservations of
tickets from S to a fixed destination station. In case the company cannot
accept all orders because of the
passenger capacity limitations, its rejection policy is that it either
completely accept or completely reject single orders from single stations.
<P>
<P>
Write a program which for the given list of orders from single stations
on the way from A to B determines
the biggest possible total earning of the TransRuratania company. The
earning from one accepted order is
the product of the number of passengers included in the order and the
price of their train tickets. The total
earning is the sum of the earnings from all accepted orders.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file is divided into blocks. The first line in each block contains
three integers: passenger
capacity <I>n</I> of the train, the number of the city B station and the number
of ticket orders from all stations.
The next lines contain the ticket orders. Each ticket order consists of
three integers: starting station,
destination station, number of passengers. In one block there can be maximum
22 orders. The number of
the city B station will be at most 7. The block where all three numbers in
the first line are equal to zero denotes the end of the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file consists of lines corresponding to the blocks of the input
file except the terminating
block. Each such line contains the biggest possible total earning.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10 3 4
0 2 1
1 3 5
1 2 7
2 3 10
10 5 4
3 5 10
2 4 9
0 2 5
2 5 8
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>19
34</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
302||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>John's trip</TITLE>
<META NAME="description" CONTENT="John's trip">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">John's trip</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Little Johnny has got a new car. He decided to drive around the town to
visit his friends. Johnny
wanted to visit all his friends, but there was many of them. In each street
he had one friend. He started
thinking how to make his trip as short as possible. Very soon he realized
that the best way to do it was to
travel through each street of town only once. Naturally, he wanted to
finish his trip at the same place he
started, at his parents' house.
<P>
The streets in Johnny's town were named by integer numbers from 1 to <I>n</I>,
<I>n</I> &lt; 1995. The junctions
were independently named by integer numbers from 1 to <I>m</I>,  <IMG WIDTH=54 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/3/302img1.gif"   > .
All junctions in the town had different numbers. Each street was
connecting exactly two (not necessarily different) junctions.
No two streets in the town had the same number. He immediately started to
plan his round trip. If there
was more than one such round trip, he would have chosen the one which,
when written down as a sequence
of street numbers is lexicographically the smallest.
<P>
But Johnny was not
able to find even one such round trip.
Help Johnny and write a program which finds the desired shortest round
trip. If the round trip does
not exist the program should write a message. Assume that Johnny lives at
the junction ending the 1st street input
with smaller number. All streets in the town are two way. There
exists a way from each street to
another street in the town. The streets in the town are very narrow and
there is no possibility to turn back the car once he is in the street.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input file consists of several blocks. Each block describes one town.
Each line in the block contains
three integers <I>x</I>, <I>y</I>, <I>z</I>, where <I>x</I> &gt; 0 and <I>y</I> &gt; 0 are the numbers of
junctions which are connected by the street
number <I>z</I>. The end of the block is marked by the line containing <I>x</I> = <I>y</I> = 0.
At the end of the input file there is an empty block, <I>x</I> = <I>y</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file consists of 2 line blocks corresponding to the blocks of
the input file. The first line of
each block contains the sequence of street numbers (single members of the
sequence are separated by space)
describing Johnny's round trip. If the round trip cannot be found the
corresponding output block contains
the message ``<TT>Round trip does not exist.</TT>''. The second line of each
block is empty.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 2 1
2 3 2
3 1 6
1 2 5
2 3 3
3 1 4
0 0
1 2 1
2 3 2
1 3 3
2 4 4
0 0
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 3 5 4 6

Round trip does not exist.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
303||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pipe</TITLE>
<META NAME="description" CONTENT="Pipe">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pipe</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The GX Light Pipeline Company started to prepare bent pipes for the new
transgalactic light pipeline.
During the design phase of the new pipe shape the company ran into the
problem of determining how far
the light can reach inside each component of the pipe. Note that the
material which the pipe is made from
is not transparent and not light reflecting.
<P>
<center><img src=303img10.gif></center>
<P>
Each pipe component consists of many straight pipes connected tightly together.
For the programming
purposes, the company developed the description of each component as a
sequence of points  <IMG WIDTH=199 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   > , where
 <IMG WIDTH=142 HEIGHT=19 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   >  . These are the upper points of the pipe contour.
The bottom points
of the pipe contour consist of points with <I>y</I>-coordinate decreased by 1.
To each upper point  <IMG WIDTH=44 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   >  there
is a corresponding bottom point  <IMG WIDTH=74 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   >  (see picture above). The
company wants to find, for each pipe
component, the point with maximal <I>x</I>-coordinate that the light will reach.
The light is emitted by a segment source with endpoints  <IMG WIDTH=78 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   > 
and  <IMG WIDTH=48 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   >  (endpoints are emitting light too). Assume that the light is
not bent at the pipe bent points and the bent points do not stop the light beam.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several blocks each describing one pipe component.
Each block starts with the
number of bent points  <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   >  on separate line. Each of the next <I>n</I>
lines contains a pair of real values  <IMG WIDTH=35 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   > 
separated by space. The last block is denoted with <I>n</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains lines corresponding to blocks in input file.
To each block in the input file there
is one line in the output file. Each such line contains either a real value,
written with precision of two decimal
places, or the message <TT>Through all the pipe.</TT>. The real value is the
desired maximal <I>x</I>-coordinate of the
point where the light can reach from the source for corresponding pipe
component. If this value equals to
 <IMG WIDTH=17 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline57" SRC="http://uva.onlinejudge.org/external/3/303img1.gif"   > , then the message <TT>Through all the pipe.</TT> will appear in the
output file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
0 1
2 2
4 1
6 4
6
0 1
2 -0.6
5 -4.45
7 -5.57
12 -10.8
17 -16.55
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>4.67
Through all the pipe.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
304||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Department</TITLE>
<META NAME="description" CONTENT="Department">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Department</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Department of Security has a new headquarters building. The building has
several floors, and on
each floor there are rooms numbered <I>xxyy</I> where <I>yy</I> stands for the room
number and <I>xx</I> for the floor number,
0 &lt; <I>xx</I>, <I>yy</I> &lt; 10. The building has `pater-noster' elevator, i.e. elevator
build up from several cabins running
all around. From time to time the agents must visit the headquarters. During
their visit they want to visit
several rooms and in each room they want to stay for some time. Due to the
security reasons, there can be
only one agent in the same room at the same time, The same rule applies to
the elevators. The visits are
planned in the way ensuring they can be accomplished within one day. Each
agent visits the headquarters at most once a day.
<P>
Each agent enters the building at the 1st floor, passes the reception and
then starts to visit the rooms
according to his/her list. Agents always visit the rooms by the increasing
room numbers. The agents form
a linear hierarchy according to which they have assigned their one letter
personal codes. The agents with
higher seniority have lexicographically smaller codes. No two agents have
the same code.
<P>
If more then one agent want to enter a room, or an elevator, the agents have
to form a queue. In each
queue, they always stand according to their codes. The higher the seniority
of the agent, the closer to the
top of the queue he stands. Every 5 s (seconds) the first agent in the queue
in front of the elevator enters
the elevator. After visiting the last room in the headquarters each agent
uses if necessary elevator to the first floor and exits the building.
<P>
The times necessary to move from a certain point in the headquarters to
another are set as follows:
Entering the building, i.e. passing the reception and reaching the elevator,
or a room on the first floor takes
30 s. Exiting the building, i.e. stepping out of the elevator or a room on
the first floor and passing the
reception takes also 30 s. On the same floor, the transfer from the elevator
to the room (or to the queue in
front of the room), or from the room to the elevator (or to the queue in
front of the elevator), or from one
room to another (or to the queue in front of the room) takes 10 s. The
transfer from one floor to the next
floor above or below in an elevator takes 30 s. Write a program that
determines time course of agent's visits in the headquarters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains the descriptions of  <IMG WIDTH=41 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/304img1.gif"   >  visits of different
agents. The first line of the description
of each visit consists of agent's one character code <I>C</I>, <I>C</I> = <TT>A, ..., Z</TT>,
and the time when the agent enters
the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds).
The next lines (there
will be at least one) contain the room number, and the length of time intended
to stay in the room, time
is in seconds. Each room is in a separate line. The list of rooms is sorted
according to the increasing room
number. The list of rooms ends by the line containing 0. The list of the
descriptions of visits ends by the line containing the character dot.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output contains detailed records of each agent's visit in the headquarters.
For each agent, there
will be a block. Blocks are ordered in the order of increasing agent's codes.
The first line of a block contains the code of
agent. Next lines contain the starting and ending time (in format HH:MM:SS)
and the descriptions of his/her
activity. Time data will be separated by one blank character. Description
will be separated from time by
one blank character. Description will have a form <TT>Entry, Exit</TT> or Message.
The Message can be one of
the following: <TT>Waiting in elevator queue, Waiting in front of room</TT>
<EM>RoomNumber</EM>, <TT>Transfer from
room</TT> <EM>RoomNumber</EM> <TT>to room</TT> <EM>RoomNumber</EM>, <TT>Transfer from elevator to room</TT>
<EM>RoomNumber</EM>, <TT>transfer
from</TT> <EM>RoomNumber</EM> <TT>to elevator</TT>, <TT>Stay in room</TT> <EM>RoomNumber</EM>, <TT>Stay in elevator</TT>.<BR>Print a blank line after each block.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>A 10:00:00
0101 100
0110 50
0202 90
0205 50
0
B 10:01:00
0105 100
0201 5
0205 200
0
.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>A
10:00:00 10:00:30 Entry
10:00:30 10:02:10 Stay in room 0101
10:02:10 10:02:20 Transfer from room 0101 to room 0110
10:02:20 10:03:10 Stay in room 0110
10:03:10 10:03:20 Transfer from room 0110 to elevator
10:03:20 10:03:50 Stay in elevator
10:03:50 10:04:00 Transfer from elevator to room 0202
10:04:00 10:05:30 Stay in room 0202
10:05:30 10:05:40 Transfer from room 0202 to room 0205
10:05:40 10:07:40 Waiting in front of room 0205
10:07:40 10:08:30 Stay in room 0205
10:08:30 10:08:40 Transfer from room 0205 to elevator
10:08:40 10:09:10 Stay in elevator
10:09:10 10:09:40 Exit

B
10:01:00 10:01:30 Entry
10:01:30 10:03:10 Stay in room 0105
10:03:10 10:03:20 Transfer from room 0105 to elevator
10:03:20 10:03:25 Waiting in elevator queue
10:03:25 10:03:55 Stay in elevator
10:03:55 10:04:05 Transfer from elevator to room 0201
10:04:05 10:04:10 Stay in room 0201
10:04:10 10:04:20 Transfer from room 0201 to room 0205
10:04:20 10:07:40 Stay in room 0205
10:07:40 10:07:50 Transfer from room 0205 to elevator
10:07:50 10:08:20 Stay in elevator
10:08:20 10:08:50 Exit

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
305||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Joseph</TITLE>
<META NAME="description" CONTENT="Joseph">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Joseph</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Joseph's problem is notoriously known. For those who are not familiar with
the original problem:
from among <I>n</I> people, numbered 1, 2, ..., <I>n</I>, standing in circle every <I>m</I>th
is going to be executed and only
the life of the last remaining person will be saved. Joseph was smart enough
to choose the position of the
last remaining person, thus saving his life to give us the message about
the incident. For example when
<I>n</I> = 6 and <I>m</I> = 5 then the people will be executed in the order
5, 4, 6, 2, 3 and 1 will be saved.
<P>
<P>
Suppose that there are <I>k</I> good guys and <I>k</I> bad guys. In the circle the
first <I>k</I> are good guys and the last
<I>k</I> bad guys. You have to determine such minimal <I>m</I> that all the bad guys
will be executed before the first good guy.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of separate lines containing <I>k</I>. The last line in
the input file contains 0. You can suppose that 0 &lt; <I>k</I> &lt; 14.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file will consist of separate lines containing <I>m</I> corresponding
to <I>k</I> in the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
4
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>5
30</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
306||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cipher</TITLE>
<META NAME="description" CONTENT="Cipher">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cipher</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Bob and Alice started to use a brand-new encoding scheme. Surprisingly it
is not a Public Key Cryptosystem, but their encoding and decoding
is based on secret keys. They chose the secret key at their last
meeting in Philadelphia on February 16th, 1996. They chose as a secret
key a sequence of <I>n</I> distinct integers,  <IMG WIDTH=72 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/3/306img1.gif"   >  , greater than
zero and less or equal to <I>n</I>. The encoding is based on the following principle.
The message is written down below the key, so that characters in the message
and numbers in the key are
correspondingly aligned. Character in the message at the position <I>i</I> is
written in the encoded message at the position  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/306img1.gif"   > , where  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/306img1.gif"   > 
is the corresponding number in the key. And then the encoded message is
encoded in
the same way. This process is repeated <I>k</I> times. After <I>k</I>th encoding they
exchange their message.
<P>
The length of the message is always less or equal than <I>n</I>. If the message
is shorter than <I>n</I>, then spaces
are added to the end of the message to get the message with the length <I>n</I>.
<P>
<P>
Help Alice and Bob and write program which reads the key and then a sequence
of pairs consisting of
<I>k</I> and message to be encoded <I>k</I> times and produces a list of encoded messages.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several blocks. Each block has a number
 <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/3/306img1.gif"   >  in the first line. The
next line contains a sequence of <I>n</I> numbers pairwise distinct and each
greater than zero and less or equal
than <I>n</I>. Next lines contain integer number <I>k</I> and one message of ascii
characters separated by one space.
The lines are ended with eol, this eol does not belong to the message. The
block ends with the separate line
with the number 0. After the last block there is in separate line the number 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output is divided into blocks corresponding to the input blocks. Each block
contains the encoded input
messages in the same order as in input file. Each encoded message in the
output file has the lenght <I>n</I>. After each block there is one empty line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
10
4 5 3 7 2 8 1 6 10 9
1 Hello Bob
1995 CERC
0
0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
BolHeol  b
C RCE     
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
307||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Sticks</TITLE>
<META NAME="description" CONTENT="Sticks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Sticks</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
George took sticks of the same length and cut them randomly until all parts
became at most 50 units
long. Now he wants to return sticks to the original state, but he forgot
how many sticks he had originally and
how long they were originally. Please help him and design a program which
computes the smallest possible
original length of those sticks. All lengths expressed in units are integers
greater than zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains blocks of 2 lines. The first line contains the
number of sticks parts after cutting.
The second line contains the lengths of those parts separated by the
space. The last line of the file contains zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains the smallest possible length of original sticks,
one per line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>9
5 2 1 5 2 1 5 2 1
4
1 2 3 4
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>6
5</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
308||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tin Cutter</TITLE>
<META NAME="description" CONTENT="Tin Cutter">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Tin Cutter</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In a Tin Cutting factory there is a machine for cutting parts from tin plates. It has an
extraordinarily sharp knife able to make horizontal or vertical segment cuts in the tin plates. Each
cutting process consists of a sequence of such cuts. Each segment cut is given by its endpoints that
are always located inside the tin plate. During the cutting process some parts of tin plate can fall
out and so some holes in the plate can emerge.
<P>
<P>
Factory management needs to predict the number of holes in the plate at the end of the
given sequence of cuts. Write a program that answers this question. Single segment cuts are not
considered to be holes.
<P>
<P>
Here there are examples of some situations that can arise after cutting:
<P>
<center><img src=308img5.gif></center>
<P>
two holes two holes one hole one hole
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of blocks of lines. Each block except the last
describes one cutting
process. In the first line of the block there is a number  <IMG WIDTH=64 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/308img1.gif"   > 
indicating the number of segment
cuts in the cutting process. These cuts are defined by the following <I>N</I>
lines. The line defining one
segment cut has the form  <IMG WIDTH=78 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/308img1.gif"   >  where  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/308img1.gif"   >  and  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/308img1.gif"   > 
are the co-ordinates of the end
points of the segment cut. They are separated by one space. The co-ordinates
are integers and
always define horizontal or vertical segment (i.e. segment parallel
with <I>x</I> or <I>y</I> axis).
<P>
<P>
The last block consists of just one line containing 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains the lines corresponding to the blocks in the input
file. Each such line
contains the number of holes that remain in the tin plate after the
execution of the corresponding
cuts.
<P>
<P>
There is no line in the output file corresponding to the
last ``null'' block of the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
0 1 1 1
1 1 1 0
1 0 0 0
0 0 0 1
2
0 1 2 1
1 2 1 0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1
0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
309||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>FORCAL</TITLE>
<META NAME="description" CONTENT="FORCAL">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">FORCAL</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
FORCAL is the programming language well known to programmers who are
interested in
compiler construction and especially to students attending Dr. C. Ompiler
class. The FORCAL syntax is defined as follows:
<UL><LI> The only data type is integer.<LI> All identifiers are implicitly declared and are not longer than
32 characters. Identifiers are
composed of letters, digits and underscores. At least one character of
the identifier is not a digit.<LI> Literals are strings of at most 8 digits.<LI> Comments begin with -- and end at the end of the line in which they start.<LI> Statement types are
<PRE><TT> 
Assignment:
<P>
	<IMG WIDTH=5 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/309img1.gif"   > identifier <IMG WIDTH=4 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/309img1.gif"   >  :=  <IMG WIDTH=5 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/309img1.gif"   > expression <IMG WIDTH=4 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/309img1.gif"   > 
<P>
	where expressions are constructed from identifiers, literals, operators +, -,
<P>
	and parentheses as follows:
<P>
	1) all identifiers and literals are expressions,
<P>
	2) if <I>a</I>, <I>b</I> are expressions then <I>a</I> + <I>b</I>, <I>a</I> - <I>b</I>, +<I>a</I>, -<I>a</I>, (<I>a</I>) are expressions.
<P>
Input/Output:
<P>
	<B>read</B>(List of identifiers);
<P>
	<B>write</B>(List of expressions)
<P>
	(Items in the list are separated by comma)
<P>
</TT></PRE><LI> <B>begin</B>, <B>end</B>, <B>read</B>, and <B>write</B> are reserved words.<LI> Each statement is terminated by a semicolon.<LI> FORCAL is not case-sensitive, for example <B>BegIN</B> is the same keyword as <B>beGin</B>.
</UL>
<P>
<P>
FORCAL tokens are defined to be: the identifiers or the literals or the
symbols <TT>+ - ( ) := ; ,</TT> or the reserved words.
<P>
<P>
<P>
<B>NOTES:</B>
<UL><LI> the assign operator is to be considered one FORCAL token,<LI> spaces, tabs, end-of-lines are allowed between the tokens,<LI> no part of any comment is a token,<LI> successive tokens that are either identifiers, literals or reserved
words must be separated by a space or tab or end-of-line,<LI> no token is allowed to contain a space or a tab or end-of-line.
</UL>
<P>
<P>
Help the students of Dr. C. Ompiler to write a program which reads lines of
text an recognizes the FORCAL tokens in them.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several blocks of lines. Each block contains lines
of text and is terminated by one empty line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file consists of blocks corresponding to the blocks in the input
file. In the lines of
each block there are successively stored the FORCAL tokens recognized by
the program (just one
token on each line). Each token must be written on the output line in
exactly the same form as
it appears in the input text. If the program encounters a string that is
neither a FORCAL token,
nor comment, nor space, tab, end-of-line, it is to write the string
<TT>TOKEN ERROR</TT> on a new line and
continues by processing the next block in the input file. The program writes
one empty line after each block of the output file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>A1:= A + (-B);

A123 A123 )
01.2 A B
C

:= A beGIn

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>A1
:=
A
+
(
-
B
)
;

A123
A123
)
01
TOKEN ERROR

:=
A
beGIn

TOKEN ERROR
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
310||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>L-system</TITLE>
<META NAME="description" CONTENT="L-system">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">L-system</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A D0L (Deterministic Lindenmayer system without interaction) system consists
of a finite set  <IMG WIDTH=11 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > 
of symbols (the alphabet), a finite set <I>P</I> of productions and a starting
string  <IMG WIDTH=11 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > . The productions in
<I>P</I> are of the form  <IMG WIDTH=45 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > , where  <IMG WIDTH=42 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  and
 <IMG WIDTH=52 HEIGHT=29 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  (<I>u</I> is called the right side of the production),  <IMG WIDTH=21 HEIGHT=14 ALIGN=BOTTOM ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > 
is the set of all strings of symbols from  <IMG WIDTH=11 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  excluding the empty string.
Such productions represent
the transformation of the symbol <I>x</I> into the string <I>u</I>. For each
symbol  <IMG WIDTH=42 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > , <I>P</I> contains exactly
one production of the form  <IMG WIDTH=45 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > . Direct derivation from
string  <IMG WIDTH=15 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  to  <IMG WIDTH=15 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  consists of replacing
each occurrence of the symbol  <IMG WIDTH=42 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  in  <IMG WIDTH=15 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  by the string on
the right side of the production for
that symbol. The language of the D0L system consists of all strings
which can be derived from
the starting string  <IMG WIDTH=11 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  by a sequence of the direct derivations.
<P>
<P>
Suppose that the alphabet consists of two symbols <TT><B>a</B></TT> and <TT>b</TT>.
So the set of productions includes
two productions of the form <TT>a</TT> <IMG WIDTH=30 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline76" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > , <TT>b</TT> <IMG WIDTH=30 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline78" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > ,
where <I>u</I> and  <IMG WIDTH=82 HEIGHT=33 ALIGN=MIDDLE ALT="tex2html_wrap_inline82" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > , and the starting string
 <IMG WIDTH=85 HEIGHT=33 ALIGN=MIDDLE ALT="tex2html_wrap_inline84" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > . Can you answer whether there exists a string
in the language of the D0L system of
the form <I>xzy</I> for a given string <I>z</I>? (<I>x</I> and <I>y</I> are some strings
from  <IMG WIDTH=18 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline94" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > ,  <IMG WIDTH=18 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline94" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  is the set of all strings of
symbols from  <IMG WIDTH=11 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   > , including the empty string.). Certainly you can.
Write the program which will solve this problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file of the program consists of several blocks of lines. Each
block includes four lines.
There are no empty lines between any successive two blocks. The first
line of a block contains
the right side of the production for the symbol <TT>a</TT>. The second one
contains the right side of the
production for the symbol <TT>b</TT> and the third one contains the starting
string  <IMG WIDTH=11 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  and the fourth line
the given string <I>z</I>. The right sides of the productions, the given
string <I>z</I> and the starting string  <IMG WIDTH=11 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/310img1.gif"   >  are at most 15 characters long.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each block in the input file there is one line in the output file
containing <TT>YES</TT> or <TT>NO</TT> according to the solution of the given problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>aa
bb
ab
aaabb
a
b
ab
ba</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>YES
NO</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
311||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Packets</TITLE>
<META NAME="description" CONTENT="Packets">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Packets</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A factory produces products packed in square packets of the same height <I>h</I>
and of the sizes
 <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > ,  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > ,  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > ,  <IMG WIDTH=38 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > ,  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > ,
  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > . These products are always delivered to customers in the square
parcels of the same height <I>h</I> as the products have and of the size
 <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > . Because of the expenses it
is the interest of the factory as well as of the customer to minimize the
number of parcels necessary
to deliver the ordered products from the factory to the customer. A good
program solving the
problem of finding the minimal number of parcels necessary to deliver the
given products according
to an order would save a lot of money. You are asked to make such a program.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several lines specifying orders. Each line
specifies one order. Orders
are described by six integers separated by one space representing successively
the number of packets
of individual size from the smallest size  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   >  to the biggest size
 <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/311img1.gif"   > . The end of the input file is
indicated by the line containing six zeros.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains one line for each line in the input file. This line
contains the minimal
number of parcels into which the order from the corresponding line of the
input file can be packed.
There is no line in the output file corresponding to the last ``null'' line
of the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0 0 4 0 0 1
7 5 1 0 0 0
0 0 0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2
1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
312||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Crosswords (II)</TITLE>
<META NAME="description" CONTENT="Crosswords (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Crosswords (II)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A crossword can be stored as a matrix  <IMG WIDTH=46 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/3/312img1.gif"   >  of zeros and ones.
Zero represents white squares
and one represents black squares. Some squares of the crossword are
numbered and assigned to
these numbers are the descriptions of the words that should be written
either ``across'' or ``down''
into the crossword. A square is numbered if it is a white square and
either (a) the square below it is
white and there is no white square immediately above, or (b) there is
no white square immediately
to its left and the square to its right is white. The squares are
numbered from left to right, from the top line to the bottom line.
<P>
From the matrix a crossword diagram can be drawn. In the diagram each
square is represented
by a box  <IMG WIDTH=38 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/3/312img1.gif"   >  characters. Black square and white squares 
(numbered and not numbered square) are represented as follows
(where <TT>nnn</TT> is the number of the square):
<P>
<PRE>++++++                        ++++++         ++++++
++++++                        +nnn +         +    +
++++++                        +    +         +    +
++++++                        ++++++         ++++++</PRE>
<P>
The remaining characters of the box are spaces. If black squares are given
at the edges,
they should be removed from the diagram (see the example). Only use spaces
as necessary filling
characters. Don't use any unnecessary spaces at the end of the line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several blocks of lines each representing a
crossword. Each block
starts with the line containing two integers <I>m</I> &lt; 25 and <I>n</I> &lt; 25 separated
by one space. In each of
the next <I>m</I> lines there are <I>n</I> numbers 0 or 1, separated by one space.
The last block will be empty, <I>m</I> = <I>n</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains the corresponding crossword diagram for each except
the last block.
After each diagram there is one empty line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6 7
1 0 0 0 0 1 1
0 0 1 0 0 0 0
0 0 0 0 1 0 0
0 1 0 0 1 1 1
0 0 0 1 0 0 0
1 0 0 0 0 0 1
5 3
1 0 1
0 0 0
1 1 1
0 0 0
1 0 1
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>     +++++++++++++++++++++
     +001 +    +002 +003 +
     +    +    +    +    +
++++++++++++++++++++++++++++++++++++
+004 +    ++++++005 +    +006 +007 +
+    +    ++++++    +    +    +    +
++++++++++++++++++++++++++++++++++++
+008 +    +009 +    +    +010 +    +
+    +    +    +    +    +    +    +
+++++++++++++++++++++    +++++++++++
+    ++++++011 +    +
+    ++++++    +    +
++++++++++++++++++++++++++++++++++++
+012 +013 +    ++++++014 +015 +    +
+    +    +    ++++++    +    +    +
++++++++++++++++++++++++++++++++++++
     +016 +    +    +    +    +
     +    +    +    +    +    +
     ++++++++++++++++++++++++++

     ++++++
     +001 +
     +    +
++++++++++++++++
+002 +    +    +
+    +    +    +
++++++++++++++++


++++++++++++++++
+003 +004 +    +
+    +    +    +
++++++++++++++++
     +    +
     +    +
     ++++++</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
313||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Intervals</TITLE>
<META NAME="description" CONTENT="Intervals">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Intervals</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In the ceiling in the basement of a newly open developers building a light
source has been
installed. Unfortunately, the material used to cover the floor is very
sensitive to light. It turned
out that its expected life time is decreasing dramatically. To avoid this,
authorities have decided
to protect light sensitive areas from strong light by covering them. The
solution was not very easy
because, as it is common, in the basement there are different pipelines under
the ceiling and the
authorities want to install the covers just on those parts of the floor that
are not shielded from the
light by pipes. To cope with the situation, the first decision was to simplify
the real situation and,
instead of solving the problem in 3D space, to construct a 2D model first.
<P>
Within this model, the <I>x</I>-axis has been aligned with the level of the floor.
The light is
considered to be a point light source with integer co-ordinates  <IMG WIDTH=46 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   > .
The pipes are represented
by circles. The center of the circle <I>i</I> has the integer co-ordinates
 <IMG WIDTH=63 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   >  and an integer radius  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   > .
As pipes are made from solid material, circles cannot overlap. Pipes cannot
reflect the light
and the light cannot go through the pipes. You have to write a program
which will determine the
non-overlapping intervals on the <I>x</I>-axis where there is, due to the pipes,
no light from the light source.
<P>
<center><img src=313img9.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of blocks of lines, each of which except the last
describes one situation
in the basement. The first line of each block contains a positive integer
number <I>N</I> &lt; 500 expressing
the number of pipes. The second line of the block contains two
integers  <IMG WIDTH=14 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   >  separated by one
space. Each of the next <I>N</I> lines of the block contains integers
 <IMG WIDTH=23 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   >  ,  <IMG WIDTH=21 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   >  and  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   > , where  <IMG WIDTH=94 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/3/313img1.gif"   > .
Integers in individual lines are separated by one space. The last block
consists of one line containing <I>n</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file consists of blocks of lines, corresponding to the blocks
in the file (except the
last one). One empty line must be put after each block in the output file.
Each of the individual
lines of the blocks in the output file will contain two real numbers, the
endpoints of the interval
where there is no light from the given point light source. The reals are
exact to two decimal places
and separated by one space. The intervals are sorted according to increasing
<I>x</I>-coordinate.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6
300 450
70 50 30
120 20 20
270 40 10
250 85 20
220 30 30
380 100 100
1
300 300
300 150 90
1
300 300
390 150 90
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0.72 78.86
88.50 133.94
181.04 549.93

75.00 525.00

300.00 862.50</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
314||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Robot</TITLE>
<META NAME="description" CONTENT="Robot">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Robot</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Robot Moving Institute is using a robot in their local store to transport
different items.
Of course the robot should spend only the minimum time necessary when
travelling from one place
in the store to another. The robot can move only along a straight line (track).
All tracks form a
rectangular grid. Neighbouring tracks are one meter apart. The store is a
rectangle  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  meters
and it is entirely covered by this grid. The distance of the track closest
to the side of the store is
exactly one meter. The robot has a circular shape with diameter equal
to 1.6 meter. The track
goes through the center of the robot. The robot always faces north, south,
west or east. The tracks
are in the south-north and in the west-east directions. The robot can
move only in the direction
it faces. The direction in which it faces can be changed at each track
crossing. Initially the robot
stands at a track crossing. The obstacles in the store are formed from
pieces occupying  <IMG WIDTH=68 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   > 
on the ground. Each obstacle is within a  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  square formed by the
tracks. The movement of the
robot is controlled by two commands. These commands are <TT>GO</TT> and <TT>TURN</TT>.
<P>
<P>
The <TT>GO</TT> command has one integer parameter  <IMG WIDTH=25 HEIGHT=21 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  <TT>{1,2,3}</TT>. After
receiving this command the robot moves <I>n</I> meters in the direction it faces.
<P>
<P>
The <TT>TURN</TT> command has one parameter which is either <TT>left</TT>
or <TT>right</TT>. After receiving this
command the robot changes its orientation by 90<sup>o</sup> in the direction indicated
by the parameter.
<P>
<P>
The execution of each command lasts one second.
<P>
Help researchers of RMI to write a program which will determine the minimal
time in which
the robot can move from a given starting point to a given destination.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of blocks of lines. The first line of each block
contains two integers
 <IMG WIDTH=58 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline53" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  and  <IMG WIDTH=55 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline55" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  separated by one space. In each of the next <I>M</I>
lines there are <I>N</I> numbers
one or zero separated by one space. One represents obstacles and zero
represents empty squares.
(The tracks are between the squares.) The block is terminated by a line
containing four positive
integers  <IMG WIDTH=80 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  each followed by one space and the word indicating
the orientation of the
robot at the starting point.  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   > ,  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  are the coordinates of the square
in the north-west corner of
which the robot is placed (starting point).  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   > ,  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline69" SRC="http://uva.onlinejudge.org/external/3/314img1.gif"   >  are the coordinates
of square to the north-west
corner of which the robot should move (destination point). The orientation
of the robot when it
has reached the destination point is not prescribed. We use
(row, column)-type coordinates, i.e.
the coordinates of the upper left (the most north-west) square in the
store are 0,0 and the lower
right (the most south-east) square are <I>M</I> - 1, <I>N</I> - 1. The orientation is
given by the words <TT>north</TT>
or <TT>west</TT> or <TT>south</TT> or <TT>east</TT>. The last block contains only
one line with <I>N</I> = 0 and <I>M</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file contains one line for each block except the last block in
the input file. The
lines are in the order corresponding to the blocks in the input file. The
line contains minimal
number of seconds in which the robot can reach the destination point from
the starting point. If
there does not exist any path from the starting point to the destination
point the line will contain -1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example</A></FONT></H2>
<P>
<center><img src=314img13.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>9 10
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 1 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 1 1 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0 1 0
7 2 2 7 south
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>12</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
315||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Network</TITLE>
<META NAME="description" CONTENT="Network">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Network</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A Telephone Line Company (TLC) is establishing a new telephone cable network.
They are
connecting several places numbered by integers from 1 to <I>N</I>. No two places
have the same number.
The lines are bidirectional and always connect together two places and in
each place the lines end
in a telephone exchange. There is one telephone exchange in each place.
From each place it is
possible to reach through lines every other place, however it need not be
a direct connection, it
can go through several exchanges. From time to time the power supply fails
at a place and then
the exchange does not operate. The officials from TLC realized that in such
a case it can happen
that besides the fact that the place with the failure is unreachable, this
can also cause that some
other places cannot connect to each other. In such a case we will say the
place (where the failure
occured) is critical. Now the officials are trying to write a program for
finding the number of all such critical places. Help them.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of several blocks of lines. Each block describes one
network. In the first
line of each block there is the number of places <I>N</I> &lt; 100. Each of the next
at most <I>N</I> lines contains
the number of a place followed by the numbers of some places to which there
is a direct line from
this place. These at most <I>N</I> lines completely describe the network,
i.e., each direct connection of
two places in the network is contained at least in one row. All numbers
in one line are separated
by one space. Each block ends with a line containing just 0. The last block
has only one line with <I>N</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output contains for each block except the last in the input file one
line containing the number of critical places.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
5 1 2 3 4
0
6
2 1 3
5 4 6 2
0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1
2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
316||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Stars</TITLE>
<META NAME="description" CONTENT="Stars">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Stars</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
On a clear moon-less night, you can see millions of stars glimmering in
the sky. Faced with this overwhelming number, the Greeks started
nearly 2,000 years ago to bring some order to the chaos. They identified
groups of stars, called constellations, and gave them names, mostly
from the Greek mythology, that are still in use today. Examples
are ``Ursa Minor'', ``Pisces'', ``Cancer'', and many others.
<P>
<P>
Given a sketch of the constellation, it is not easy for the amateur to
actually find the constellation in the sky. Moreover, simple constellations,
such as ``Triangulum'' (triangle,) which consists of only three stars, may
appear several times in the sky. Again, singling out the ``correct''
occurrence is not easy.
<P>
Traditionally, maps were printed for just this purpose. But in this
problem, we will see how the computer can help us find constellations
in the sky.
<P>
<P>
You will be given a star map; for simplicity this will be a collection
of points in the plane, each having a certain brightness associated with it.
Then, given a constellation, also as a set of points in the plane,
you are to determine:
<P>
<UL><LI> the number of occurrences of the constellation in the star map, and<LI>  the position of the brightest occurrence, if one exists. (The
rationale behind this is as follows: if a constellation seems to
appear several times in the sky, the brightest one is
most likely to be the real one, since it is the most eye-catching one.)
</UL>
<P>
An occurrence is a subset of stars from the map that forms a (possibly)
arbitrarily rotated and/or scaled copy of the stars in the constellation.
<P>
The brightness of an occurrence is the average brightness of the stars
it consists of, i.e. the sum of individual brightnesses divided by the
number of stars in the constellation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains the descriptions of several star maps. Each map
starts with a line containing a single integer <I>n</I>, specifying the
number of stars in the map ( <IMG WIDTH=99 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   > ).
The following <I>n</I> lines contain three integers each, namely the <I>x</I>-
and <I>y</I>-coordinates and the brightness of every star. The larger
the value, the brighter the star shines.
<P>
The next line contains a single integer <I>m</I>, the number of constellations
to follow ( <IMG WIDTH=82 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   > ). Each constellation description starts with a
line containing an integer  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   > , the number of stars in constellation <I>i</I>,
and a string  <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   > , the name of the constellation. ( <IMG WIDTH=18 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   >  will consist of
no more than 40 characters and contain no blanks.) The following  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/316img1.gif"   > 
lines then contain the coordinates of the constellation, again as <I>x</I>/<I>y</I>-pairs.
<P>
<P>
A blank line separates the star map from the next map. The input file
ends with an empty map (having <I>n</I> = 0), which should not be processed.
<P>
<P>
<P>
<B>N.B.:</B> Since all star coordinates are integer numbers, you can easily
rule out any rotated or scaled constellation whose points do not
fall on integer coordinates.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each star map first output the number of the map (<TT>`Map #1'</TT>,
<TT>`Map #2'</TT>, etc.) on a line of its own.
<P>
For each constellation, in the same order as in the input, output first
its name and how many times it occurs in the map on one line, as shown
in the output sample.
<P>
If there is at least one occurrence, output the position of the brightest
occurrence by listing the positions of the stars that form the brightest
occurrence. The star positions have to be printed in ascending <I>x</I>-order.
Positions having the same <I>x</I>-coordinates must be sorted
in ascending <I>y</I>-order. If there are several equally bright solutions,
output only one of them. Adhere to the format shown in the sample output.
<P>
Output a blank line before each constellation and a line of 5
dashes (<TT>`-----'</TT>) after every star map.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6
1 2 1
2 1 4
2 4 3
3 2 1
4 1 5
4 3 2
2
3 Triangulum
1 1
3 1
2 4
4 Cancer
1 3
4 3
6 1
7 5

0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Map #1

Triangulum occurs 2 time(s) in the map.
Brightest occurrence: (1,2) (4,1) (4,3)

Cancer occurs 0 time(s) in the map.
-----</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
317||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Hexagon</TITLE>
<META NAME="description" CONTENT="Hexagon">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Hexagon</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Consider a game board consisting of 19 hexagonal fields, as shown in
the figure below. We can easily distinguish three main directions in the
shape of the board: from top to bottom, from top-left to bottom-right,
and from top-right to bottom-left. For each of these primary
directions, the board can be viewed as a series of rows,
consisting of 3, 4, 5, 4, and 3 fields, respectively.
<P>
<center><img src=317img3.gif></center>
<P>
The game board has to be completely covered using a set of hexagonal
pieces. Each piece carries three numbers, one for every primary board
direction. Only three different numbers are used for each direction.
Every possible combination of three numbers for all three directions
is assigned to a piece, leading to a set of 27 unique pieces. (The board
in the above figure is still in the process of being covered.)
<P>
<P>
The score of a board is calculated as the sum of all 15 row scores (5
rows for each primary direction). The row scores are calculated as follows:
if all pieces in a row carry the same number for the direction of the row,
the row score is this number multiplied by the number of
pieces in the row. Otherwise (the pieces carry different numbers in
the row direction) the row score is zero. Note that the pieces may not be
rotated. For example, the score of the leftmost row in the figure
is  <IMG WIDTH=60 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/317img1.gif"   > , the score of the row to its right is  <IMG WIDTH=79 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/3/317img1.gif"   > .
<P>
<P>
While in the real game the pieces are chosen randomly and the set of
pieces is fixed, we are interested in the highest possible score for a
given set of numbers for each direction, when all pieces in a row carry the same number for the direction of the row. This means you have to choose
those 19 pieces that result in the highest score.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains an integer <I>n</I> which indicates
the number of test cases. Each test case consists of three lines containing
three integers each. Each of these three line contains the numbers for a
single primary direction. From these numbers the set of pieces is generated.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case output a line containing the number of the
case (<TT>`Test #1'</TT>, <TT>`Test #2'</TT>, etc.), followed by a line
containing the highest possible score for the given numbers. Add a
blank line after each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
9 4 3
8 5 2
7 6 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Test #1
308</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
318||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Domino Effect</TITLE>
<META NAME="description" CONTENT="Domino Effect">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Domino Effect</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Did you know that you can use domino bones for other things besides
playing Dominoes? Take a number of dominoes and build a row by standing
them on end with only a small distance in between. If you do it right,
you can tip the first domino and cause all others to fall down
in succession (this is where the phrase ``domino effect'' comes from).
<P>
<P>
While this is somewhat pointless with only a few dominoes, some people
went to the opposite extreme in the early Eighties. Using millions of
dominoes of different colors and materials to fill whole halls with elaborate
patterns of falling dominoes, they created (short-lived) pieces of art.
In these constructions, usually not only one but several rows of dominoes
were falling at the same time. As you can imagine, timing is an
essential factor here.
<P>
<P>
It is now your task to write a program that, given such a system of
rows formed by dominoes, computes when and where the last domino falls.
The system consists of several ``key dominoes'' connected by rows of
simple dominoes. When a key domino falls, all rows connected to the domino
will also start falling (except for the ones that have already fallen).
When the falling rows reach other key dominoes that have not fallen yet,
these other key dominoes will fall as well and set off the rows connected
to them. Domino rows may start collapsing at either end. It is even possible
that a row is collapsing on both ends, in which case the last domino falling
in that row is somewhere between its key dominoes. You can assume
that rows fall at a uniform rate.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains descriptions of several domino systems. The
first line of each description contains two integers: the number <I>n</I> of key
dominoes ( <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/3/318img1.gif"   > ) and the number <I>m</I> of rows between them.
The key dominoes are numbered from 1 to <I>n</I>. There is at most one row
between any pair of key dominoes and the domino graph is connected, i.e.
there is at least one way to get from a domino to any other domino
by following a series of domino rows.
<P>
The following <I>m</I> lines each contain three integers <I>a</I>, <I>b</I>, and <I>l</I>,
stating that there is a row between key dominoes <I>a</I> and <I>b</I> that
takes <I>l</I> seconds to fall down from end to end.
<P>
<P>
Each system is started by tipping over key domino number 1.
<P>
<P>
The file ends with an empty system (with <I>n</I> = <I>m</I> = 0), which should not
be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each case output a line stating the number of the case (<TT>`System #1'</TT>,
<TT>`System #2'</TT>, etc.). Then output a line containing the time when the
last domino falls, exact to one digit to the right of the decimal point,
and the location of the last domino falling, which is either at a key
domino or between two key dominoes. Adhere to the format shown in the
output sample. If you find several solutions, output only one of them.
Output a blank line after each system.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 1
1 2 27
3 3
1 2 5
1 3 5
2 3 5
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>System #1
The last domino falls after 27.0 seconds, at key domino 2.

System #2
The last domino falls after 7.5 seconds, between key dominoes 2 and 3.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
319||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pendulum</TITLE>
<META NAME="description" CONTENT="Pendulum">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pendulum</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Consider a pendulum hanging on a string from a hook on a wall. When
pushed, this pendulum will swing back and forth. Now imagine other hooks
on the wall, placed in the path of our pendulum's string. The pendulum
will bend around them, possibly even loop around them. In
general, it will follow a much more complex path than before. After
some time, the pendulum's motion will repeat, the pendulum will
follow a <I>periodic orbit</I>. What we would like you to do
is to compute the distance travelled by the pendulum as it completes
one cycle of the orbit.
<P>
<P>
More formally, we place a cartesian coordinate system on the wall.
The pendulum's string is affixed at the origin (0,0).
As usual, the <I>x</I>-axis points to the right and the <I>y</I>-axis points
upwards. The string of the pendulum has a length of <I>r</I>. The pendulum
is released at position (-<I>r</I>,0) and therefore starts swinging to
the right. Furthermore, there are <I>n</I> additional hooks
distributed over the plane which may influence the path of the pendulum.
<P>
<P>
In our ideal world, the following assumptions are true:
<P>
<UL><LI> The diameters of the hooks and of the string are zero.<LI> The pendulum loses no energy (e.g. by friction).<LI> The pendulum will never hit a hook, only its string will.<LI> The pendulum's string is made of some futuristic material that only
bends where it touches a hook but is otherwise rigid.
</UL>
<P>
Your program should simulate the movement of the pendulum and output
the spatial length of the periodic orbit that it finally enters. As you
may remember from physics: due to gravity, the pendulum will never
reach a height greater than the one it started from! That is,
it will never get above the <I>x</I>-axis. It will either reach its initial
height again or circle endlessly around a hook in the wall.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several test cases. Each case begins with a
line containing an integer <I>n</I> (the number of hooks,  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/319img1.gif"   > )
and a real <I>r</I> (the length of the pendulum's string).
The following <I>n</I> lines each contain two integers specifying the <I>x</I>-
and <I>y</I>-coordinate of the corresponding hook.
<P>
The file ends with a case having <I>r</I> = 0, which should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each case output a line containing the number of the
case (<TT>`Pendulum #1'</TT>, <TT>`Pendulum #2'</TT>, etc.).
<P>
Then print a line that contains the distance which the pendulum travels
for completing one cycle of its periodic orbit. Do not count the
distance travelled to reach the starting point of the orbit. (Adhere to
the format shown in the output sample.) The distance should be
exact to two digits to the right of the decimal point.
<P>
Output a blank line after each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 16.0
3 -4
-3 -4
1 18.0
5 -12
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Pendulum #1
Length of periodic orbit = 87.66

Pendulum #2
Length of periodic orbit = 31.42</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
320||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Border</TITLE>
<META NAME="description" CONTENT="Border">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Border</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to write a program that draws a border around a closed path
into a bitmap, as displayed in the following figure:
<P>
<center><img src=320img1.gif></center>
<P>
The path is closed and runs along the grid lines, i.e. between the squares
of the grid. The path runs counter-clockwise, so if following the path
is considered as going ``forward'', the border pixels are always to
the ``right'' of the path. The bitmap always covers 32 by 32
squares and has its lower left corner at (0,0). You can safely assume
that the path never touches the bounding rectangle of the bitmap and
never touches or crosses itself. Note that a bit gets set if it is on the
outside of the area surrounded by the path and if at least one of
its edges belongs to the path, but not if only one of its corners is in
the path. (A look at the convex corners in the figure should clarify
that statement.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains the number of test cases in
the file. Each test case that follows consists of two lines. The first line
of each case contains two integer numbers <I>x</I> and <I>y</I> specifying the
starting point of the path. The second line contains a string of
variable length. Every letter in the string symbolizes a move of length
one along the grid. Only the letters
<TT>`W'</TT> (``west''), <TT>`E'</TT> (``east''), <TT>`N'</TT> (``north''),
<TT>`S'</TT> (``south''), and <TT>`.'</TT> (``end of path'', no move)
appear in the string. The end-of-path character (<TT>`.'</TT>) is immediately
followed by the end of the line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, output a line with the number of the
case (<TT>`Bitmap #1'</TT>, <TT>`Bitmap #2'</TT>, etc.). For each row of the
bitmap from top to bottom, print a line where you print a character
for every bit in that row from left to right. Print an uppercase <TT>`X'</TT>
for set bits and a period <TT>`.'</TT> for unset bits. Output a blank
line after each bitmap.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
2 1
EENNWNENWWWSSSES.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Bitmap #1
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
................................
.XXX............................
X...X...........................
X..X............................
X...X...........................
.X..X...........................
..XX............................</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
321||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The New Villa</TITLE>
<META NAME="description" CONTENT="The New Villa">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The New Villa</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Mr. Black recently bought a villa in the countryside. Only one thing
bothers him: although there are light switches in most rooms, the lights
they control are often in other rooms than the switches themselves.
While his estate agent saw this as a feature, Mr. Black has come to
believe that the electricians were a bit absent-minded (to put
it mildly) when they connected the switches to the outlets.
<P>
One night, Mr. Black came home late. While standing in the hallway,
he noted that the lights in all other rooms were switched off.
Unfortunately, Mr. Black was afraid of the dark, so he never dared to enter
a room that had its lights out and would never switch off the lights
of the room he was in.
<P>
After some thought, Mr. Black was able to use the incorrectly wired
light switches to his advantage. He managed to get to his bedroom and to
switch off all lights except for the one in the bedroom.
<P>
<P>
You are to write a program that, given a description of a villa,
determines how to get from the hallway to the bedroom if only the hallway
light is initially switched on. You may never enter a dark room, and after
the last move, all lights except for the one in the bedroom must
be switched off. If there are several paths to the bedroom, you have
to find the one which uses the smallest number of steps,
where ``move from one room to another'', ``switch on a light''
and ``switch off a light'' each count as one step.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several villa descriptions. Each villa starts
with a line containing three integers <I>r</I>, <I>d</I>, and <I>s</I>. <I>r</I> is the number of
rooms in the villa, which will be at most 10. <I>d</I> is the number of
doors/connections between the rooms and <I>s</I> is the number of light switches
in the villa. The rooms are numbered from 1 to <I>r</I>; room number 1 is
the hallway, room number <I>r</I> is the bedroom.
<P>
This line is followed by <I>d</I> lines containing two integers <I>i</I> and <I>j</I> each,
specifying that room <I>i</I> is connected to room <I>j</I> by a door.
Then follow <I>s</I> lines containing two integers <I>k</I> and <I>l</I> each,
indicating that there is a light switch in room <I>k</I> that controls the
light in room <I>l</I>.
<P>
<P>
A blank line separates the villa description from the next one. The input
file ends with a villa having <I>r</I> = <I>d</I> = <I>s</I> = 0, which should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each villa, first output the number of the test
case (<TT>`Villa #1'</TT>, <TT>`Villa #2'</TT>, etc.) in a line of its own.
<P>
<P>
If there is a solution to Mr. Black's problem, output the shortest
possible sequence of steps that leads him to his bedroom and only leaves
the bedroom light switched on. (Output only one shortest sequence if you find
more than one.) Adhere to the output format shown in the sample below.
<P>
<P>
If there is no solution, output a line containing the statement
<TT>`The problem cannot be solved.'</TT>
<P>
<P>
Output a blank line after each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 3 4
1 2
1 3
3 2
1 2
1 3
2 1
3 2

2 1 2
2 1
1 1
1 2

0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Villa #1
The problem can be solved in 6 steps:
- Switch on light in room 2.
- Switch on light in room 3.
- Move to room 2.
- Switch off light in room 1.
- Move to room 3.
- Switch off light in room 2.

Villa #2
The problem cannot be solved.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
322||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ships</TITLE>
<META NAME="description" CONTENT="Ships">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ships</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Probably everyone who ever attended school knows the game where two
opposing players place a set of ships on a sheet of paper and try to
eliminate each other's ships by guessing their location.
<P>
<P>
In our version of the game, your opponent has distributed the following
seven ship patterns over a rectangular grid of squares:
<P>
<PRE>                      xx   xx     xx   x       x    x
                      xx    xx   xx    xxx   xxx   xxx   xxxx</PRE>
<P>
Each ship pattern covers exactly four squares. The patterns may be
rotated but not mirrored. All patterns are guaranteed to be placed
completely within the boundaries of the rectangle and not to overlap each
other, whereas touching another pattern or the border is allowed.
<P>
<P>
We assume that we are in the middle of the game and that several
squares have already been uncovered. You will be given a rectangular grid of
squares representing your current knowledge about the positions of your
enemy's ships. Every square is marked by one of the following characters:
<P>
<UL><LI> <TT>`x'</TT> if a ship covers the square<LI> <TT>`o'</TT> if no ship covers the square<LI> <TT>`.'</TT> if the square has not yet been uncovered
</UL>
<P>
Given that information, you are to decide whether you can determine all
remaining <TT>`x'</TT> squares with at most one miss, i.e. whether you
could uncover the <TT>`.'</TT> squares without
getting more than one <TT>`o'</TT> square before you had all <TT>`x'</TT>
squares uncovered. This means you
are allowed to hit a <TT>`o'</TT> if then the solution becomes unique.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several game situations. Every test case starts
with a line containing two integers <I>w</I> and <I>h</I>. These define width and
height of the game rectangle, where  <IMG WIDTH=102 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/322img1.gif"   > .
<P>
Each of the next <I>h</I> lines contains a string of <I>w</I> characters. Each of
these characters is either <TT>`x'</TT>, <TT>`o'</TT> or <TT>`.'</TT>, depending
on the state of the corresponding square.
<P>
<P>
A blank line separates each game from the next. The input file ends
with a game having <I>w</I> = 0 and <I>h</I> = 0. This game should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case you should first output a line containing the number
of the game, followed by a line containing either <TT>`yes.'</TT>
(if you can determine all <TT>`x'</TT> with at most one miss) or
<TT>`no.'</TT> (if you cannot determine all <TT>`x'</TT> without at least two misses).
<P>
<P>
Output a blank line after every game.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10 10
.x..x.....
oooooxoooo
oxooxxx...
xxoooooo..
xoooxooo..
ooxxxxoo..
oooooxxoox
ooooooxoox
ooooooooxx
oooooooooo

0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Game #1
yes.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
323||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Jury Compromise</TITLE>
<META NAME="description" CONTENT="Jury Compromise">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Jury Compromise</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In Frobnia, a far-away country, the verdicts in court trials are
determined by a jury consisting of members of the general public. Every time a
trial is set to begin, a jury has to be selected, which is done as follows.
First, several people are drawn randomly from the public. For
each person in this pool, defence and prosecution assign a grade
from 0 to 20 indicating their preference for this person. 0 means total
dislike, 20 on the other hand means that this person
is considered ideally suited for the jury.
<P>
<P>
Based on the grades of the two parties, the judge selects the jury.
In order to ensure a fair trial, the tendencies of the jury to favour
either defence or prosecution should be as balanced
as possible. The jury therefore has to be chosen in a way that
is satisfactory to both parties.
<P>
<P>
We will now make this more precise: given a pool of <I>n</I> potential jurors
and two values  <IMG WIDTH=12 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  (the defence's value) and  <IMG WIDTH=14 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > 
(the prosecution's value) for each potential juror <I>i</I>, you are to select
a jury of <I>m</I> persons. If  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  is a subset of { <IMG WIDTH=57 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > } with <I>m</I>
elements, then  <IMG WIDTH=130 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > 
and  <IMG WIDTH=129 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > 
are the total values of this jury for defence and prosecution.
<P>
For an optimal jury  <IMG WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > , the value  <IMG WIDTH=122 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > 
must be minimal. If there are several jurys with minimal
 <IMG WIDTH=122 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline64" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > ,
one which maximizes  <IMG WIDTH=104 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  should be selected
since the jury should be as ideal as possible for both parties.
<P>
<P>
You are to write a program that implements this jury selection
process and chooses an optimal jury given a set of candidates.
<P>
<P>
<P>
<B>Note:</B> If your solution is based on an inefficient algorithm, it
may not execute in the allotted time.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file contains several jury selection rounds. Each round starts
with a line containing two integers <I>n</I> and <I>m</I>. <I>n</I> is the number of
candidates and <I>m</I> the number of jury members.
These values will satisfy  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline78" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > ,  <IMG WIDTH=86 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline80" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  and of
course  <IMG WIDTH=48 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline82" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > . The following <I>n</I> lines contain the two integers  <IMG WIDTH=14 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > 
and  <IMG WIDTH=12 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  for  <IMG WIDTH=86 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline90" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   > . A blank line separates each round from
the next.
<P>
<P>
The file ends with a round that has <I>n</I> = <I>m</I> = 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each round output a line containing the number of the jury
selection round (<TT>`Jury #1'</TT>, <TT>`Jury #2'</TT>, etc.).
<P>
On the next line print the values  <IMG WIDTH=41 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline94" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  and  <IMG WIDTH=40 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline96" SRC="http://uva.onlinejudge.org/external/3/323img1.gif"   >  of your
jury as shown below and on another line print the numbers of the <I>m</I> chosen
candidates in ascending order. Output a blank
before each individual candidate number.
<P>
<P>
Output an empty line after each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4 2
1 2
2 3
4 1
6 2

0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Jury #1
Best jury has value 6 for prosecution and value 4 for defence:
 2 3

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
324||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Factorial Frequencies</TITLE>
<META NAME="description" CONTENT="Factorial Frequencies">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Factorial Frequencies</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     In an attempt  to   bolster   her   sagging   palm-reading   business,
Madam   Phoenix  has  decided  to  offer  several numerological  treats  to
her  customers.  She  has  been  able  to   convince    them    that    the
frequency    of occurrence of the digits in the decimal  representation  of
factorials  bear  witness  to  their  futures.  Unlike  palm-reading,  however,  she  can't   just   conjure   up   these  frequencies,  so  she  has
employed  you  to  determine these values.
<P>
<P>
     Recall that the definition of <I>n</I>! (that is, <I>n</I> factorial) is just  <IMG WIDTH=140 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/3/324img1.gif"   > . As she expects to use either the day of the week, the day of
the month, or  the  day  of  the  year  as  the  value  of  <I>n</I>,   you   must
be  able  to determine the number of  occurrences  of  each  decimal  digit
in  numbers  as  large  as  366  factorial  (366!), which has 781 digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
     The input data for the program is  simply  a  list  of  integers   for
which   the   digit  counts  are  desired.  All  of these input values will
be less than or equal to 366 and greater  than  0,  except  for  the   last
integer,   which will be zero.  Don't bother to process  this  zero  value;
just  stop  your  program  at  that  point.  The  output  format  isn't  too
critical,   but   you   should  make  your  program  produce  results  that
look  similar  to  those shown below.
<P>
<P>
     Madam Phoenix will be forever (or longer)  in  your  debt;  she  might
even  give  you  a  trip  if  you  do  your  job well!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
8
100
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3! --
   (0)    0    (1)    0    (2)    0    (3)    0    (4)    0
   (5)    0    (6)    1    (7)    0    (8)    0    (9)    0
8! --
   (0)    2    (1)    0    (2)    1    (3)    1    (4)    1
   (5)    0    (6)    0    (7)    0    (8)    0    (9)    0
100! --
   (0)   30    (1)   15    (2)   19    (3)   10    (4)   10
   (5)   14    (6)   19    (7)    7    (8)   14    (9)   20</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
325||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Identifying Legal Pascal Real Constants</TITLE>
<META NAME="description" CONTENT="Identifying Legal Pascal Real Constants">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Identifying Legal Pascal Real Constants</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     Pascal requires that real constants have either a decimal point, or an
exponent  (starting  with the letter <TT>e</TT>  or <TT>E</TT>, and officially called a scale
factor), or both, in addition to the usual collection  of  decimal  digits.
If   a decimal point is included it must have at least one decimal digit on
each side of it.  As expected,  a  sign  (+ or -) may precede  the   entire
number,  or  the  exponent,  or  both.  Exponents  may  not  include  fractional digits.  Blanks may precede or follow the real  constant,  but  they
may  not  be  embedded  within  it.  Note  that the Pascal syntax rules for
real constants make no assumptions about the range  of  real  values,   and
neither does this problem.
<P>
<P>
Your task in this problem is to identify legal Pascal real  constants.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Each line of the input data contains a candidate which you are to classify.
For each line of the input, display your  finding  as  illustrated  in  the
example  shown  below.  The input terminates with a line that contains only
an asterisk in column one.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1.2
   1.
  1.0e-55
  e-12
    6.5E
     1e-12
  +4.1234567890E-99999
   7.6e+12.5
99
*</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1.2 is legal.
1. is illegal.
1.0e-55 is legal.
e-12 is illegal.
6.5E is illegal.
1e-12 is legal.
+4.1234567890E-99999 is legal.
7.6e+12.5 is illegal.
99 is illegal.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
326||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Extrapolation Using a Difference Table</TITLE>
<META NAME="description" CONTENT="Extrapolation Using a Difference Table">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Extrapolation Using a Difference Table</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     A very old technique for extrapolating a sequence of values  is  based
on  the  use  of   a   difference  table.  The difference table used in the
extrapolation of a  sequence  of  4  values,  say  3,  6,   10,   and   15,
might  be displayed as follows:
<P>
<center><img src=326img1.gif></center>
<P>
The original sequence of values appears in the  first  column  of  the
table.  Each  entry  in  the  second  column of the table is formed by computing the difference between the adjacent entries in  the  first   column.
These  values  (in  the  second column) are called first differences.  Each
entry in the third column  is  similarly  the difference between the  adjacent 
entries in the second column; the third column entries  are  naturally
called second differences.  Computation  of  the  last   column   in   this
example   should   now   be   obvious   (but  beware that this value is not
always zero).  Note that the last column will always contain only a  single
value.   If  we begin with a sequence of <I>n</I> values, the completed difference
table  will  have  <I>n</I> columns,   with   the   single  value  in  column  <I>n</I>
representing the single <I>n</I>-1st difference.
<P>
<P>
To extrapolate using a difference table we assume the  <I>n</I>-1st   differences  
are  constant  (since  we  have  no additional information to refute
that assumption).  Given that  assumption,  we   can   compute   the   next
entry  in  the <I>n</I>-2nd difference column, the <I>n</I>-3rd difference column, and so
forth until  we  compute  the  next  entry in the first  column  which,  of
course,  is the next value in the  sequence.  The  table  below  shows  the
four additional entries (in boxes) added to the table to compute  the  next
entry   in   the   example   sequence,  which in this case is 21.  We could
obviously  continue  this  extraolation  process  as  far  as  desired   by
adding  additional  entries to the columns using the assumption that the 
<I>n</I>-1st differences are constant.
<P>
<center><img src=326img2.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
     The input for this problem will be a  set  of  extraolation  requests.
For  each   request   the   input   will  contain first an integer <I>n</I>, which
specifies the number of values in the sequence  to  be  extended.  When   <I>n</I>
is  zero your program should terminate.  If <I>n</I> is non-zero (it will never be
larger than 10), it will be  followed   by   <I>n</I>  integers  representing  the
given  elements  in  the  sequence.   The last item in the input  for  each
extrapolation request is <I>k</I>, the number of extrapolation operations to  perform; it will always be at least 1. In  effect,  you are to add <I>k</I> entries
to each column of the difference table, finally reporting the last value of
the  sequence computed by such extrapolation.  More precisely,  assume  the
first  <I>n</I>  entries  (the  given  values)  in  the sequence  are  numbered  1
through  <I>n</I>.
<P>
Your   program  is  to  determine  the  <I>n</I>+<I>k</I>th  value  in  the
sequence  by extrapolation of the original  sequence  <I>k</I>  times.
<P>
<P>
<P>
<B>Hint:</B>  no
upper  limit  is  given  for   <I>k</I>,  and  you  might  not  be able to acquire
enough memory to construct a complete difference table.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4 3 6 10 15 1
4 3 6 10 15 2
3 2 4 6 20
6 3 9 12 5 18 -4 10
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Term 5 of the sequence is 21
Term 6 of the sequence is 28
Term 23 of the sequence is 46
Term 16 of the sequence is -319268</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
327||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Evaluating Simple C Expressions</TITLE>
<META NAME="description" CONTENT="Evaluating Simple C Expressions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Evaluating Simple C Expressions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     The task in this problem is  to  evaluate  a  sequence  of  simple   C
expressions,   buy   you  need  not  know  C  to solve the problem! Each of
the expressions will appear on a line by itself and will contain  no   more
than   110  characters.   The  expressions to be evaluated will contain only
simple integer variables and  a  limited  set  of operators; there will  be
no  constants  in  the  expressions.   There are  26  variables  which  may
appear  in  our simple expressions, namely those with the names <TT>a</TT>   through
<TT>z</TT> (lower-case   letters  only).  At  the  beginning of evaluation of each
expression, these 26 variables will have the integer values 1  through  26,
respectively  (that  is,  <TT>a = 1</TT>, <TT>b = 2</TT>, ..., <TT>n = 14</TT>, <TT>o = 15</TT>, ..., <TT>z = 26</TT>). Each variable will appear at most once  in  an  expression,  and  many  variables may  not  be  used  at all.
<P>
<P>
     The operators that  may  appear  in   expressions   include   the   binary
(two-operand)   <TT>+</TT>   and   <TT>-</TT>,   with   the   usual interpretation.  Thus the
expression <TT>a + c - d + b</TT>  has  the  value  2  (computed  as  <TT>1 +
3 - 4  + 2</TT>). The only other operators that may  appear  in  expressions
are  <TT>++</TT>  and  <TT>--</TT>.  These  are  unary  (one-operand) operators, and may
appear  before  or  after  any  variable.  When  the  <TT>++</TT>  operator  appears
before  a variable, that variable's value is incremented  (by  one)  before
the  variable's   value   is  used  in  determining the value of the entire
expression.  Thus the value of the expression <TT>++c - b</TT>  is   2,
with   <TT>c</TT>  being incremented to 4 prior to evaluating the entire expression.
When the <TT>++</TT>  operator  appears  after  a  variable, that variable is incremented  (again,  by  one) after its value is used to  determine  the  value
of  the  entire expression.  Thus the value of the expression  <TT>c++ - b</TT>  is  1,  but  <TT>c</TT>  is  incremented  after  the complete expression is
evaluated; its value will still be 4. The <TT>--</TT> operator  can  also  be  used
before or  after a variable to decrement (by one) the variable; its  placement
before  or  after  the  variable  has  the  same significance  as  for
the  <TT>++</TT>  operator.   Thus  the expression <TT>--c + b--</TT>  has
the  value  4,  with variables <TT>c</TT> and <TT>b</TT> having the values 2 and  1  following the evaluation of the expression.
<P>
<P>
     Here's another, more algorithmic, approach  to   explaining   the <TT>++</TT>
and  <TT>--</TT>  operators.  We'll  consider  only the <TT>++</TT> operator, for brevity:
<P>
<OL><LI> Identify each variable that has a  <TT>++</TT>  operator  before  it.  Write  a simple   assignment  statement  that increments the value of each such
     variable, and remove  the  <TT>++</TT>  operator  from  before  that   variable in the expression.<LI> In a similar manner, identify each variable that  has  a  <TT>++</TT>  operator after  it.  Write  a  simple  assignment statement that increments the
     value  of  each  of  these,  and   remove   the   <TT>++</TT>   operator   from after  that variable in the expression.<LI> Now the expression  has  no  <TT>++</TT>  operators   before   or   after   any variables.   Write   the   statement   that  evaluates  the  remaining
     expression after those statements written in  step   1,   and   before
     those  written in step 2.<LI> Execute the statements generated in  step  1,  then  those   generated
     in   step   3,   and   finally   the  one generated in step 2, in that
     order.
</OL>
<P>
     Using this approach,  evaluating  the  expression  <TT>++a + b++</TT>  is
equivalent to computing
<P>
<UL><LI> <TT>a = a + 1</TT> (from step 1 of the algorithm)<LI> <TT>expression = a + b</TT> (from step 3)<LI> <TT>b = b + 1</TT> (from step 2)
</UL>
<P>
where  expression  would receive the value of the complete expression.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
     Your  program is to read expressions, one per line,  until  the end of the file is reached.  Display each expression exactly as it
was read, then display the value  of  the   entire   expression,   and   on
separate  lines,  the  value  of  each  variable  after  the expression was
evaluated.  Do not display  the  value  of  variables that were not used in
the expression.  The samples shown below illustrate the desired <EM>exact</EM> output format.
<P>
<P>
     Blanks are to be  ignored  in  evaluating  expressions,  and  you  are
assured  that  ambiguous expressions like <TT>a+++b</TT> (ambiguous because it could
be treated as <TT>a++ + b</TT>  or  <TT>a + ++b</TT>) will not appear in the input.  Likewise,  <TT>++</TT>  or <TT>--</TT> operators will never appear both before and after a single variable.  Thus expressions like <TT>++a++</TT> will not be in the input data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>a + b
b - z
a+b--+c++
c+f--+--a
   f-- + c-- + d-++e</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Expression: a + b
    value = 3
    a = 1
    b = 2
Expression: b - z
    value = -24
    b = 2
    z = 26
Expression: a+b--+c++
    value = 6
    a = 1
    b = 1
    c = 4
Expression: c+f--+--a
    value = 9
    a = 0
    c = 3
    f = 5
Expression:    f-- + c-- + d-++e
    value = 7
    c = 2
    d = 4
    e = 6
    f = 5</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
328||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Finite State Text-Processing Machine</TITLE>
<META NAME="description" CONTENT="The Finite State Text-Processing Machine">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Finite State Text-Processing Machine</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     A finite state machine (FSM) is essentially a  directed  graph.   Each
node  in  the graph is  called  a  state;  at any point during execution of
the FSM, one of the states is said to be the current state.  Each  directed
edge  between  two  states is called a transition.  When the conditions are
right, one  of  the  transitions  from  the current state is said to occur,
and  the current state changes to a new state as determined by the  transition.  Consider the following very simple example.
<P>
<center><img src=328img1.gif></center>
<P>
There are two states in this FSM, labelled A and B, and three  transitions,
labelled   1,   2   and  3.  If  the current state is A, and the conditions
for transition 1 are met, then the current state  becomes   B.   When   the
current  state  is  B,  and  the  conditions  for transition 2 are met, the
current state becomes  A  again.  If  the current state is B and the conditions for transition 3 are met, the current state remains B.
<P>
<P>
     In this problem the input will be  descriptions   of   several   FSMs.
Each   transition   in   these   FSMs  has  an associated set of characters
called the input set, and a string called the output  string.   A   transition    can  occur  when  the  current  input  data  character  is  in  the
transition's input set.  When the transition occurs,  the output string  is
printed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
     The input consists of a sequence of  pairs  {FSM  description,   input
for   the  FSM}.  A  FSM  is  described  by the following sequence of items
separated by whitespace (blanks, tabs, and end of line characters):
<P>
<UL><LI> An integer specifying the number of states in the FSM.  For  each   of
     these  states  there  will  be  the following items, in order:
<P>
<UL><LI>    A one to eight character name for the  state.   State  names  are
          case significant, and unique.<LI>    An integer specifying the number of transitions  that  leave  the
          current   state.   For  each  of  these transitions there will be
          the following data items, in order:
<P>
<UL><LI>    The set of input characters that enable the transition  (see
               below).<LI>    The name of the  new  current  state  when  this  transition
               occurs.<LI>    The output string (see below).
</UL></UL></UL>
<P>
     The input set and the output  string  are  given   as   sequences   of
printable  characters  with  no  embedded whitespace.  Several special constructions may  appear  in  these,  however.  When  <code>\b</code> appears it  is  to be  interpreted as a blank.  Treat <code>\n</code> as an end of line, and
<code>\\</code> as a single
backslash.  The construction <code>\0</code>  (that is, backslash
followed by zero) will
appear  only  as an output string, and means  to  print  nothing  when  the
transition occurs.  The construction <code>\c</code> appearing as an input
set  matches
anything.   That is,  if  none  of  the other transitions are enabled and a
transition has <code>\c</code> specified as its input set, then it is
enabled.  When  <code>\c</code>
appears in an output string, it means to print the current input character.
This  could  appear  several  times in the same output string.
<P>
<P>
     After the last item in the  description  of  a  FSM  has   been   read
begin  ``executing&quot;  the  FSM  using  the characters that start on the first
complete line  following  the  description.   The  beginning   state   will
always  be  called  <TT>START</TT>.   The final state will  always  be  called  <TT>END</TT>, but  will  not  appear  as  a  state  in  the description of  a  FSM.   All input is guaranteed to be correct.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
     For each input your program should display the FSM number (1, 2,  ...)
and, beginning on the next line, the output that results from those transitions that occur.  The examples below illustrate this.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Examples</A></FONT></H2>
<P>
     The first example FSM replaces each vowel in a single  line  of  input
with an asterisk.  The second example will delete each vowel that follows a
lower or upper case X, again processing only a single line of  input.   The
final  example  changes  the  case of each odd-numbered vowel in the input;
processing  stops  when  an  exclamation  point  is  encountered,  and  the
remainder of the input line is ignored.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
START 3
      AEIOUaeiou  START *
      \n          END   \n
      \c          START \c 
This is input for example one.
2
START 3
      \c    START \c
      Xx    SKIP  \c
      \n    END   \n
SKIP  4
      AEIOU START \0
      aeiou START \0
      Xx    SKIP  \c
      \n    END   \n
XaXxe     Test   XIo  iXixO
3
START 12
   \c START \c    !     FINIS \0
   A  TWO   a     E     TWO   e
   I  TWO   i     O     TWO   o
   U  TWO   u     a     TWO   A
   e  TWO   E     i     TWO   I
   o  TWO   O     u     TWO   U
TWO   4
  \c  TWO   \c    AEIOU START \c
   aeiou  START \c  !  FINIS  \0
FINIS 2
   \c  FINIS \0   \n    END   \n
This is some data for FSM number 3.
!    IGNORED
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Finite State Machine 1:
Th*s *s *np*t f*r *x*mpl* *n*.
Finite State Machine 2:
XXx     Test   Xo  iXx
Finite State Machine 3:
ThIs is sOme dAta fOr FSM numbEr 3.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
329||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>PostScript Emulation</TITLE>
<META NAME="description" CONTENT="PostScript Emulation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">PostScript Emulation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     PostScript(R) is  widely  used  as   a   page   description   language
for   laser   printers.   The  basic  unit  of measurement in PostScript is
the point, and there  are  assumed  to  be  exactly  72  points  per  inch.
The default coordinate system used at the beginning of a PostScript program
is  the  familiar  Cartesian  system, with the origin (the point with <I>x</I> and
<I>y</I> coordinates both equal to zero) at the lower left comer of the page.
<P>
<P>
     In this problem you are required to recognize a  small  part  of   the
PostScript   language.   Specifically,   the  commands listed below must be
recognized.  All  commands  will  be  given  in  lower-case  letters.  When
the  word number appears in  the  command  description,  a  floating  point
value,  with  an  optional  sign  and decimal point will be present in  the
input  data.   When two numbers appear  in  a  command,  the  first  refers
to the <I>x</I> coordinate, and the second to the <I>y</I> coordinate.  For   simplicity,
each   command  will  appear  on  a line by itself, and a single blank will
separate each component of the command.  The  end  of  line  character will
immediately  follow  each  command,  and  a  line with a single asterisk in
column  one  will  terminate  the input. You should preserve the order of
operations.
<P>
<DL ><DT><STRONG><EM>number</EM> <TT>rotate</TT></STRONG>
<DD> 
<P>
     <TT>number</TT> represents the  measure  of  an  angle.  This  command  rotates
     the   coordinate  system  that many degrees counterclockwise about the
     current origin.  This does not affect  any  lines  that  have  already
     been   drawn  on  the  page.  Example:  <TT>90 rotate</TT>  will  rotate   the
     axes   90   degrees counterclockwise,  so  the  positive  <I>y</I>  axis  now
     points to the left, and the positive <I>x</I> axis points up.
<P>
<DT><STRONG><EM>number number</EM> <TT>translate</TT></STRONG>
<DD> 
<P>
     Moves the origin of the coordinate system to the position   specified.
     The   values   are   interpreted  relative  to   the  current  origin.
     Example:  <TT>612 792 translate</TT>  would  move  the  origin  of  the coordinate system to the upper right comer of the page.  Now  only  points
     with  negative  <I>x</I>  and  <I>y</I> components will correspond to points on  the
     physical  page  (assuming  an  8.5&quot;  by  11&quot;  page  in  the &quot;portrait&quot;
     orientation).
<P>
<DT><STRONG><EM>number number</EM> <TT>scale</TT></STRONG>
<DD> 
<P>
     This command applies the scaling factors given to the <I>x</I> and <I>y</I>  coordinates.   In  effect,  the  actual  <I>x</I> and <I>y</I> sizes of objects are multiplied by the respective scale factors. Scaling will affect everything on that directions no matter you rotate later. Example:  <TT>3 2 scale</TT>   would
     cause  a line drawn from (0,0) to (72,72) to appear as if it was drawn
     from the lower left corner  of the page to a point three inches to the
     right  of the left edge of the paper and two inches  up  from the bottom edge of the paper, assuming the original coordinate system was
     in  effect just before the command.
<P>
<DT><STRONG><EM>number number</EM> <TT>moveto</TT></STRONG>
<DD> 
<P>
     The  current  point   is   moved   to   the   coordinates   specified.
     Example:   <TT>72 144 moveto</TT>   would move the current point to one inch
     from the left edge of the paper,  and  two  inches  up  from  the bottom edge, assuming the original coordinate system was in effect.
<P>
<DT><STRONG><EM>number number</EM> <TT>rmoveto</TT></STRONG>
<DD> 
<P>
     This command is like  <TT>moveto</TT>,  except  the  numbers   specified   give
     the   coordinates   of   the   new  current   point  relafive  to  the
     current  position.  Example:  <TT>144 -36 rmoveto</TT>   would   move   the
     current  point  set  by the previous example two inches further to the
     right and  one-half  inch  lower on the page.  Thus the coordinates of
     the   current  point  become  (216,108).  Notice  that  numbers can be
     negative!
<P>
<DT><STRONG><EM>number number</EM> <TT>lineto</TT></STRONG>
<DD> 
<P>
     Draws a line from the current position to   the   position   specified
     by   the   numbers.   The   current  position   becomes  the  position
     specified  in  the  command.  Example:   216    144    lineto    would
     draw  a  line  from  the  current position to the point (216,144), and
     leave the current point there.  If we assume the current position from
     the  previous  example,  this  would  be  a  line  from  (216,108)  to
     (216,144), or a half-inch vertical line.
<P>
<DT><STRONG><EM>number number</EM> <TT>rlineto</TT></STRONG>
<DD> 
<P>
     This is similar to <TT>lineto</TT>, but the coordinates given  in  the  command
     are   relative  to  the  current position.  Again, the end of the line
     that is drawn becomes the  new  current  position.   
Example:   <TT>0 144 rlineto</TT>  will  draw  a  
two  inch  horizontal line  from  the  current
     position  two  inches  to  the right.  Using the current position left
     in  the  previous  example,  this  draws  a  line  from  (216,144)  to
     (216,288), and leaves the current point at (216,288).
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
     Your task is to read one of these small  PostScript  programs  and  to
display  a  program  that   will  produce  the same  effect  without  using
the  <TT>rotate</TT>,   <TT>translate</TT>    or    <TT>scale</TT>    commands.    That    is,    each
<TT>moveto</TT>,  <TT>rmoveto</TT>,   <TT>lineto</TT>,   and   <TT>rlineto</TT>   command   in   the   original
(input)   program   should   appear   in   your output (most  likely   with
modified  numbers),  but  the  <TT>rotate</TT>,  <TT>translate</TT>  and  <TT>scale</TT>  commands  in
the input must not appear in the output.  Assume  the  original  coordinate
system is in effect at the  beginning  of execution.  The numbers used with
the commands in the program  you   produce   must   be   accurate   to   at
least two fractional digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>300 300 moveto
0 72 rlineto
2 1 scale
36 0 rlineto
1 -4 scale
0 18 rlineto
1 -0.25 scale
0.5 1 scale
300 300 translate
90 rotate
0 0 moveto
0 72 rlineto
2 1 scale
36 0 rlineto
1 -4 scale
0 18 rlineto
*</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>300 300 moveto
0 72 rlineto
72 0 rlineto
0 -72 rlineto
300 300 moveto
-72 0 rlineto
0 72 rlineto
72 0 rlineto</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Note</A></FONT></H2>
<P>
 The  figure  drawn  by  these  commands  is
 illustrated below.  Each of the lines is
 exactly one inch long.
<P>
<center><img src=329img1.gif></center>
<P>
</BODY>
</HTML>

______________________________________________________
330||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Inventory Maintenance</TITLE>
<META NAME="description" CONTENT="Inventory Maintenance">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Inventory Maintenance</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     Madam Phoenix is moving to the southwest to open
a  ``Fun  In  The  Sun&quot;  store  selling  sunglasses,  sunscreen,  and  other
such items. She's  decided  to  employ  you  to write an inventory program
for her new store.  Here's how it will work.
<P>
<P>
Each ``activity&quot; your program is to process will appear as  a  separate
line  in   the   input   file.  The  end  of  the input is marked by a line
containing an asterisk in column one; no  other  activity  lines  will   be
so   marked.   Activity  lines begin with a lower-case keyword  identifying
the  action  to  be  performed.  The  names  of  the items in her inventory
are  case  sensitive,  and each contains no  more  than  ten  non-blank
characters.  All fields in the activity lines are separated by blanks,  and
Madam   Phoenix   guarantees   you   that  there  will  be no errors in the
input.  Here are the various types of activity lines  your  program  is  to
process.
<P>
<DL ><DT><STRONG><TT>new</TT> <EM>item-name item-cost item-selling-price</EM></STRONG>
<DD> 
<P>
     This line adds a new item (not previously  carried   in   the   store)
     to   the   potential   inventory.  The <EM>item-cost</EM>   and   
<EM>item-selling-price</EM>   
are   given    as    normal    dollar     amounts,     without
     the  dollar  sign.   That  is,  they  will contain one or more decimal
     digits,  a  decimal  point,  and  two  more decimal digits.  Note that
     this  activity  line doesn't actually result in a change in the inventory,  but is used in anticipation of adding units of  the  new   item
     to  the  store's  offerings.   <EM>item-cost</EM>  is what  Madam  Phoenix  pays
     for  each  unit  of  the  item,  and   <EM>item-selling-price</EM>    is    the
     price  for  which  she  sells the item.  There will be  no  more  than
     100  total  item-names  ever  included  in the list  of  items.  
<EM>item-cost</EM> and <EM>item-selling-price</EM> will never be larger than 100.00.
<P>
<DT><STRONG><TT>delete</TT> <EM>item-name</EM></STRONG>
<DD> 
<P>
     If an item isn't selling well, Madam Phoenix  can   remove   it   from
     the   inventory   by   including  this line in the program input.  All
     units of <EM>item-name</EM> in the inventory are written off as a loss.
<P>
<DT><STRONG><TT>buy</TT> <EM>item-name quantity</EM></STRONG>
<DD> 
<P>
     When  Madam  Phoenix  buys  some  units  (at  the  <EM>unit-cost</EM>,   previously   indicated)   of   an    <EM>item-name</EM> to offer for sale,  she'll
     indicate  that  with  one  of  these  lines  in  the  pregrain  input.
     <EM>quantity</EM>   indicates   the   number  of  units  she   purchased.   The
     quantity   she   purchases   will never be larger than 5000 at a time,
     but  the  number  of  units in  the  inventory  may  be  as  large  as
     10,000.
<P>
<DT><STRONG><TT>sell</TT> <EM>item-name quantity</EM></STRONG>
<DD> 
<P>
     When one or more units of an item are sold, that fact is  recorded  by
     placing  one  of  these  lines  in the   input.   <EM>quantity</EM>   indicates
     the   number   of   units   sold   (at   the   <EM>item-selling-price</EM> previously   indicated).  Obviously,  the  quantity  sold  cannot  exceed
     the  number   of   items   in stock.
<P>
<DT><STRONG><TT>report</TT></STRONG>
<DD> 
<P>
     This line in the input requests a report.  This is the only input line
     for   which   output   is   expected.   Your   program   will  display
     columns,   with   suitable   headings,    showing    item-name,    the
     buying price, the selling price, the number of units in the inventory,
     and the  value  of  the  units  in  the inventory (that is,  the  product  of  the  number  of  units  in  the  inventory  and  the  buying
     price).  The lines in the report  should  be  sorted  in  alphabetical
     order   on  item  name.  Following  the  last  item the total value of
     all units in the inventory should be displayed.  Then finally, a  line
     should   appear  showing  the  total  profit since the last report was
     issued.  Profit is defined as total sales,   less   the  cost  of  the
     items  sold,  less  the  cost of items  written  off  (by  the  
<TT>delete</TT>
     activity). Print a blank line after every report. The  sample output shown  illustrates  the  desired   format   for  the  report.  All  numbers  in  the  report  must naturally
     be  exact.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>new Shade01 0.50 3.79
new Towel01 1.47 6.98
new Shade02 0.63 4.29
new BluBlock 1.00 4.98
buy BluBlock 100
sell BluBlock 2
buy Towel01 500
buy Shade01 100
buy Shade02 100
sell Towel01 1
sell Towel01 1
sell BluBlock 2
report
delete Shade01
sell BluBlock 5
new Shade03 0.51 1.98
buy Shade03 250
sell Towel01 5
sell Shade03 4
sell Shade02 10
report
*</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>                  INVENTORY REPORT
Item Name     Buy At      Sell At      On Hand        Value
---------     ------      -------      -------        -----
BluBlock        1.00         4.98           96        96.00
Shade01         0.50         3.79          100        50.00
Shade02         0.63         4.29          100        63.00
Towel01         1.47         6.98          498       732.06
------------------------
Total value of inventory                             941.06
Profit since last report                              26.94

                  INVENTORY REPORT
Item Name     Buy At      Sell At      On Hand        Value
---------     ------      -------      -------        -----
BluBlock        1.00         4.98           91        91.00
Shade02         0.63         4.29           90        56.70
Shade03         0.51         1.98          246       125.46
Towel01         1.47         6.98          493       724.71
------------------------
Total value of inventory                             997.87
Profit since last report                              39.93</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
331||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mapping the Swaps</TITLE>
<META NAME="description" CONTENT="Mapping the Swaps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mapping the Swaps</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Sorting an array can be done by swapping certain pairs of adjacent entries
in the array.  This is the fundamental technique used in the well-known
bubble sort.  If we list the identities of the pairs to be swapped, in the
sequence they are to be swapped, we obtain what might be called a swap map.
For example, suppose we wish to sort the array A whose elements are 3, 2,
and 1 in that order.  If the subscripts for this array are 1, 2, and 3,
sorting the array can be accomplished by swapping A2 and A3, then swapping A1
and A2, and finally swapping A2 and A3.  If a pair is identified in a swap
map by indicating the subscript of the first element of the pair to be
swapped, then this sorting process would be characterized with the swap map
2 1 2.
<P>
<P>
It is instructive to note that there may be many ways in which swapping of
adjacent array entries can be used to sort an array.  The previous array,
containing 3 2 1, could also be sorted by swapping A1 and A2, then swapping
A2 and A3, and finally swapping A1 and A2 again.  The swap map that describes
this sorting sequence is 1 2 1.
<P>
<P>
For a given array, how many different swap maps exist?  A little thought
will show that there are an infinite number of swap maps, since sequential
swapping of an arbitrary pair of elements will not change the order 
of the elements.  Thus the swap map 1 1 1 2 1 will also leave our array
elements in ascending order.  But how many swap maps of minimum size will
place a given array in order?  That is the question you are to 
answer in this problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data will contain an arbitrary number of test cases, followed by a
single 0.  Each test case will have a integer <I>n</I> that gives the size of an
array, and will be followed by the <I>n</I> integer values in the array.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, print a message similar to those shown in the
sample output below.  In no test case will <I>n</I> be larger than 5.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 9 7
2 12 50
3 3 2 1
3 9 1 5
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>There are 1 swap maps for input data set 1.
There are 0 swap maps for input data set 2.
There are 2 swap maps for input data set 3.
There are 1 swap maps for input data set 4.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
332||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rational Numbers from Repeating Fractions</TITLE>
<META NAME="description" CONTENT="Rational Numbers from Repeating Fractions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rational Numbers from Repeating Fractions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A rational number is any which can be written in the form <I>p</I>/<I>q</I>, where <I>p</I> and <I>q</I>
are integers.  All rational numbers less than 1 (that is, those for which <I>p</I>
is less than <I>q</I>) can be expanded into a decimal fraction, but this expansion
may require repetition of some number of trailing digits. For example, the
rational number 7/22 has the decimal expansion .3181818...  Note that the pair
of digits 1 and 8 repeat ad infinitum.  Numbers with such repeating decimal
expansions are usually written with a horizontal bar over the repeated
digits, like this:  <IMG WIDTH=31 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/332img1.gif"   > 
<P>
<P>
If we are given the decimal expansion of a rational fraction (with an
indication of which digits are repeated, if necessary), we can determine
the rational fraction (that is, the integer values of <I>p</I> and <I>q</I> in <I>p</I>/<I>q</I>) using the following algorithm.
<P>
Assume there are <I>k</I> digits immediately after the decimal point that are not
repeated, followed by a group of <I>j</I> digits which must be repeated. Thus for
7/22 we would have <I>k</I> = 1 (for the digit 3) and <I>j</I> = 2 (for the digits 1
and 8).  Now if we let <I>X</I> be the original number (7/22), we can compute the
numerator and denominator of the expression
<P>
<P> <IMG WIDTH=332 HEIGHT=41 ALIGN=BOTTOM ALT="displaymath67" SRC="http://uva.onlinejudge.org/external/3/332img1.gif"   > <P>
<P>
For  <IMG WIDTH=31 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/332img1.gif"   >  we obtain the following calculation for the
numerator of this fraction:
<P>
<P> <IMG WIDTH=422 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath71" SRC="http://uva.onlinejudge.org/external/3/332img1.gif"   > <P>
<P>
The denominator is just 1000 - 10, or 990.  It is important to note that the
expression in the numerator and the denominator of this expression will always
yield integer values, and these represent the numerator and denominator of the
rational number.  Thus the repeated fraction  <IMG WIDTH=31 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/332img1.gif"   >  is the decimal
expansion
of the rational number 315/990.  Properly reduced, this fraction is (as
expected) just 7/22.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for this problem will be a sequence of test cases, each test
case appearing on a line by itself, followed by a <TT>-1</TT>.  Each test case will
begin with an integer giving the value of <I>j</I>, one or more spaces, then
the decimal expansion of a fraction given in the form  <EM>0.ddddd</EM> (where <EM>d</EM> represents a decimal digit).  There may be as many as nine (9) digits in the
decimal expansion (that is, the value of <I>k</I>+<I>j</I> may be as large as 9).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each
test case, display the case number (they are numbered sequentially starting 
with 1) and the resulting rational number in the form <I>p</I>/<I>q</I>, properly reduced.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 0.318
1 0.3
2 0.09
6 0.714285
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: 7/22
Case 2: 1/3
Case 3: 1/11
Case 4: 5/7</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
333||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Recognizing Good ISBNs</TITLE>
<META NAME="description" CONTENT="Recognizing Good ISBNs">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Recognizing Good ISBNs</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Most books now published are assigned a code which uniquely identifies the
book.  The International Standard Book Number, or ISBN, is normally a
sequence of 10 decimal digits, but in some cases, the capital letter X may
also appear as the tenth digit.  Hyphens are included at various places in
the ISBN to make them easier to read, but have no other significance.  The
sample input and expected output shown below illustrate many valid, and a
few invalid, forms for ISBNs.
<P>
<P>
Actually, only the first nine digits in an ISBN are used to identify a book.
The tenth character serves as a check digit to verify that the preceding 9
digits are correctly formed.  This check digit is selected so that the value
computed as shown in the following algorithm is evenly divisible by 11.
Since the check digit may sometimes need to be as large as 10 to guarantee
divisibility by 11, a special symbol was selected by the ISBN designers to
represent 10, and that is the role played by X.
<P>
<P>
The algorithm used to check an ISBN is relatively simple.  Two sums, <I>s</I>1 and
<I>s</I>2, are computed over the digits of the ISBN, with <I>s</I>2 being the sum of the
partial sums in <I>s</I>1 after each digit of the ISBN is added to it.  The ISBN
is correct if the final value of <I>s</I>2 is evenly divisible by 11.
<P>
<P>
An example will clarify the procedure.  Consider the (correct) ISBN
0-13-162959-X (for Tanenbaum's Computer Networks).  First look at the
calculation of <I>s</I>1:
<P>
<PRE>       -----------------------------------------------------------------
       digits in the ISBN    0   1   3   1   6   2   9   5   9   10(X)
       partial sums          0   1   4   5  11  13  22  27  36   46
       -----------------------------------------------------------------</PRE>
<P>
The calculation of <I>s</I>2 is done by computing the total of the partial sums
in the calculation of <I>s</I>1:
<P>
<PRE>       -----------------------------------------------------------------
       s2 (running totals)   0   1   5  10  21  34  56  83  119  165
       -----------------------------------------------------------------</PRE>
<P>
We now verify the correctness of the ISBN by noting that 165 is, indeed,
evenly divisible by 11.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for this problem will contain one candidate ISBN per line of
input, perhaps preceded and/or followed by additional spaces.  No line will
contain more than 80 characters, but the candidate ISBN may contain illegal
characters, and more or fewer than the required 10 digits.  Valid ISBNs may
include hyphens at arbitrary locations.  The end of file marks the end of
the input data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output should include a display of the candidate ISBN and a statement
of whether it is legal or illegal.  The expected output shown below
illustrates the expected form.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0-89237-010-6
0-8306-3637-4      
  0-06-017758-6
    This_is_garbage
1-56884-030-6
    0-8230-2571-3
    0-345-31386-0
    0-671-88858-7
    0-8104-5687-7
    0-671-74119-5
    0-812-52030-0
    0-345-24865-1-150
0-452-26740-4
    0-13-139072-4
    0-1315-2447-X</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0-89237-010-6 is correct.
0-8306-3637-4 is correct.
0-06-017758-6 is correct.
This_is_garbage is incorrect.
1-56884-030-6 is correct.
0-8230-2571-3 is correct.
0-345-31386-0 is correct.
0-671-88858-7 is correct.
0-8104-5687-7 is correct.
0-671-74119-5 is correct.
0-812-52030-0 is correct.
0-345-24865-1-150 is incorrect.
0-452-26740-4 is correct.
0-13-139072-4 is correct.
0-1315-2447-X is correct.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
334||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Identifying Concurrent Events</TITLE>
<META NAME="description" CONTENT="Identifying Concurrent Events">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Identifying Concurrent Events</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
It is important in distributed computer systems to identify those events (at
identifiable points in time) that are concurrent, or not related to each
other in time.  A group of concurrent events may sometimes attempt 
to simultaneously use the same resource, and this could cause problems.
<P>
<P>
Events that are not concurrent can be ordered in time.  For example, if
event  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  can be shown to always precede event  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  in time, then  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  are
obviously not concurrent.  Notationally we indicate that  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  precedes  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  by writing  <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > .  Note that the precedes relation is transitive, as expected. Thus if  <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  and  <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > , then we can also note that  <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > .
<P>
<P>
Sequential events in a single computation are not concurrent.  For example,
if a particular computation performs the operations identified by events  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > ,
 <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline66" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  in that order, then clearly 
 <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  and  <IMG WIDTH=56 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline58" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > .
<P>
<P>
Computations in a distributed system communicate by sending messages.  If
event <EM>esend</EM> corresponds to the sending of a message by one computation, and
event <EM>erecv</EM> corresponds to the reception of that message by a different
computation, then we can always note that  <IMG WIDTH=110 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline72" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   > , since a message cannot be received before it is sent.
<P>
<P>
In this problem you will be supplied with lists of sequential events for an
arbitrary number of computations, and the identification of an arbitrary
number of messages sent between these computations.  Your task is to identify
those pairs of events that are concurrent.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
A number of test cases will be supplied.  For each test case the input will
include first an integer, <I>NC</I>, specifying the number of computations in the
test case.  For each of these <I>NC</I> computations there will be a single line
containing an integer  <IMG WIDTH=33 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline78" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  that specifies the number of sequential events in
the computation followed by  <IMG WIDTH=33 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline78" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  event names.  Event names will always contain
one to five alphanumeric characters, and will be separated from each other
by at least one blank.  Following the specification of the events in the last 
computation there will be a line with a single integer, <I>NM</I>, that specifies
the number of messages that are sent between computations.  Finally, on each
of the following <I>NM</I> lines there will be a pair of event names specifying the
name of the event associated with the sending of a message, and the event
associated with the reception of the message.  These names will have
previously appeared in the lists of events associated with computations, and
will be separated by at least one blank.  The last test case will be followed
by the single integer 0 on a line by itself.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, print the test case number (they are numbered sequentially
starting with 1), the number of pairs of concurrent events for the test case,
and any two pair of the concurrent event names.  If there is only one
concurrent pair of events, just print it.  And if there are no concurrent
events, then state that fact.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Example</A></FONT></H2>
<P>
Consider the following input data:
<P>
<PRE>2
2 e1 e2
2 e3 e4
1
e3 e1
0</PRE>
<P>
There are two computations.  In the first <TT>e1</TT>  <IMG WIDTH=15 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline86" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  <TT>e2</TT> and in the second <TT>e3</TT>  <IMG WIDTH=15 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline86" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  <TT>e4</TT>.
A single message is sent from <TT>e3</TT> to <TT>e1</TT>, which means <TT>e3</TT>   <IMG WIDTH=15 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline86" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  <TT>e1</TT>.  Using the
transitive property of the precedes relation we can additionally determine
that <TT>e3</TT>  <IMG WIDTH=15 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline86" SRC="http://uva.onlinejudge.org/external/3/334img1.gif"   >  <TT>e2</TT>.  This leaves the pairs (<TT>e1</TT>,<TT>e4</TT>) and (<TT>e2</TT>,<TT>e4</TT>) as concurrent events.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
2 e1 e2
2 e3 e4
1
e3 e1
3
3 one two three
2 four five
3 six seven eight
2
one four
five six
1
3 x y zee
0
2
2 alpha beta
1 gamma
1
gamma beta
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1, 2 concurrent events: 
(e1,e4) (e2,e4) 
Case 2, 10 concurrent events: 
(two,four) (two,five) 
Case 3, no concurrent events.
Case 4, 1 concurrent events: 
(alpha,gamma)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
335||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Processing MX Records</TITLE>
<META NAME="description" CONTENT="Processing MX Records">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Processing MX Records</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Mapping symbolic machine names, like bigone.stateu.edu, to the corresponding
Internet network address (like 24.99.100.33) is a major function of the
Domain Naming System, or DNS.  The pieces of a machine's symbolic name,
separated by periods, correspond to nodes in a tree when the name is read 
right to left. The pieces corresponding to internal nodes in the tree
correspond to domains.  The edu domain, for example, is the node under which
we find all college and university machines in the United States.  All
machines in Canada are found under the ca domain.
<P>
<P>
By providing one or more MX records (lines of text in a particular file), a
system manager can arrange for DNS to route mail bound for one machine to
another instead.  Rerouting is appropriate in many cases, but one frequent use
is to create addresses for fictitious machines with meaningful names.  For
example, it might be nice to allow mail to be addressed to info.stateu.edu,
but not have a specific machine named info on the stateu campus.  The mail
could be redirected to bigone.stateu.edu by using an appropriate MX record.
In this problem we'll deal with processing a simplified form of MX records.
<P>
<P>
An MX record has three fields, or sequences of non-blank characters.
These fields are separated by one or more blanks.  The first field, if
present, always begins in the first column on a line.  If the first field
is not present, then it is assumed to be the same as the first field from the
preceding line (or the one assumed for that line if it didn't have one). The
first and third fields are symbolic machine names, and will contain no 
more than 36 characters.  The second field is a non-negative integer
specifying a preference.  Let's look at an example.
<P>
<PRE>info.stateu.edu          0      bigone.stateu.edu
                        10      tiny.stateu.edu</PRE>
<P>
The first line says that all mail destined for <TT>info.stateu.edu</TT> should be
delivered to <TT>bigone.stateu.edu</TT>.  The preference in this MX record is 0,
versus 10 for the second MX record.  If <TT>bigone.stateu.edu</TT> is down, then mail for info would instead be redirected to tiny.  Smaller numbers indicate higher preference, and MX records need not be given in order of increasing
preference.
<P>
<P>
Wildcard MX records allow redirection of mail to many machines with a
single MX record.  For example,
<P>
<PRE>*.citycc.midville.edu    0      tiny.stateu.edu</PRE>
<P>
would redirect mail to any machine whose name has the symbolic suffix
<TT>.citycc.midville.edu</TT> to the machine <TT>tiny</TT> on the <TT>stateu</TT> campus.  For
simplicity, we will assume that the asterisk (<TT>*</TT>) representing a wildcard
record will appear only in the first part of a wildcarded symbolic name, and
that no more than three periods will occur in any symbolic name.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
What you will do in this problem is record MX records, process commands that
indicate when machines go up or down, and process requests to determine how
to redirect mail based on the recorded MX records.  The input begins with a
line containing an integer <I>N</I>, following by <I>N</I> lines, each of which contain
an MX record that is to be read and recorded.  (There is no explicit limit
on the value of <I>N</I>.) The remaining lines of input (after the <I>N</I>  MX records)
will each begin with the letter <TT>U</TT>, <TT>D</TT>, <TT>A</TT>, or <TT>X</TT> in column 1.  Following a <TT>U</TT>
or <TT>D</TT> will be one or more blanks and a machine name.  <TT>D</TT> means the machine
is now down (not operational), while <TT>U</TT> means it is now up.  All machines
are initially assumed to be up at the beginning of the input.  An <TT>A</TT> in 
column 1 will be followed by one or more spaces and a symbolic machine name.
That machine name is to be processed (at the time the line is read) using the
recorded MX records and the up/down status of machines to determine how mail
to that machine should be directed.  Of course some machines may not 
have their mail redirected, so be prepared to handle these cases.
<P>
<P>
Output for
these <TT>A</TT> lines is as shown in the samples.  Note the output style for machines which have no redirection indicated (that is, there are no applicable MX records). The end of input is indicated by a line containing <TT>X</TT> in column 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Notes</A></FONT></H2>
<P>
<OL><LI> No input line will contain more than 80 characters.<LI> MX records are not to be processed recursively.  Thus if mail to <TT>first.com</TT>
   is being redirected to <TT>second.com</TT> by one MX record, any additional MX
   records that might redirect mail from <TT>second.com</TT> to another machine are
   not examined during the processing of <TT>first.com</TT>.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
service.stateu.edu   10 tiny.stateu.edu
info.stateu.edu	0       bigone.stateu.edu
                        10      tiny.stateu.edu
service.stateu.edu   5     bigone.stateu.edu
*.smallu.edu    10      service.stateu.edu
A    alpha.cs.smallu.edu
A    info.stateu.edu
D    bigone.stateu.edu
A    info.stateu.edu
A    nowhere.com
X</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>alpha.cs.smallu.edu =&gt; service.stateu.edu
info.stateu.edu =&gt; bigone.stateu.edu
info.stateu.edu =&gt; tiny.stateu.edu
nowhere.com =&gt;</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
336||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>A Node Too Far</TITLE>
<META NAME="description" CONTENT="A Node Too Far">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">A Node Too Far</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
To avoid the potential problem of network messages (packets) looping around
forever inside a network, each message includes a Time To Live (TTL) field.
This field contains the number of nodes (stations, computers, etc.) that can
retransmit the message, forwarding it along toward its destination, before the 
message is unceremoniously dropped.  Each time a station receives a message
it decrements the TTL field by 1.  If the destination of the message is the
current station, then the TTL field's value is ignored.  However, if the
message must be forwarded, and the decremented TTL field contains zero, then
the message is not forwarded.
<P>
<P>
In this problem you are given the description of a number of networks, and
for each network you are asked to determine the number of nodes that are not
reachable given an initial node and TTL field value.  Consider the following
example network:
<P>
<center><img src=336img1.gif></center>
<P>
If a message with a TTL field of 2 was sent from node 35 it could reach
nodes 15, 10, 55, 50, 40, 20 and 60.  It could not reach nodes 30, 47, 25,
45 or 65, since the TTL field would have been set to zero on arrival of 
the message at nodes 10, 20, 50 and 60.  If we increase the TTL field's
initial value to 3, starting from node 35 a message could reach all except
node 45.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
There will be multiple network configurations provided in the input.  Each
network description starts with an integer <I>NC</I> specifying the number of
connections between network nodes.  An <I>NC</I> value of zero marks the end of the
input data.  Following <I>NC</I> there will be <I>NC</I> pairs of positive integers.
These pairs identify the nodes that are connected by a communication line.
There will be no more than one (direct) communication line between any pair
of nodes, and no network will contain more than 30 nodes.  Following each
network configuration there will be multiple queries as to how many nodes
are not reachable given an initial node and TTL field setting.  These queries
are given as a pair of integers, the first identifying the starting node 
and the second giving the initial TTL field setting.  The queries are
terminated by a pair of zeroes.
<P>
<P>
For each query display a single line showing the test case number (numbered
sequentially from one), the number of nodes not reachable, the starting
node number, and the initial TTL field setting.  The sample input and output
shown below illustrate the input and output format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>16
10 15   15 20   20 25   10 30   30 47   47 50   25 45   45 65
15 35   35 55   20 40   50 55   35 40   55 60   40 60   60 65
35  2   35  3    0  0

14
1 2   2 7   1 3   3 4   3 5   5 10   5 11
4 6   7 6   7 8   7 9   8 9   8  6   6 11
1 1   1 2   3 2   3 3   0 0  
  
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: 5 nodes not reachable from node 35 with TTL = 2.
Case 2: 1 nodes not reachable from node 35 with TTL = 3.
Case 3: 8 nodes not reachable from node 1 with TTL = 1.
Case 4: 5 nodes not reachable from node 1 with TTL = 2.
Case 5: 3 nodes not reachable from node 3 with TTL = 2.
Case 6: 1 nodes not reachable from node 3 with TTL = 3.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
337||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Interpreting Control Sequences</TITLE>
<META NAME="description" CONTENT="Interpreting Control Sequences">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Interpreting Control Sequences</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Virtually all text-mode terminals are special-purpose computer systems,
including a serial port (for communication with a modem or another computer
system), a keyboard, a CRT, and of course, a microprocessor, some RAM, and a
control program in ROM.
<P>
When a character arrives at the terminal, either from the keyboard or the
serial port, the terminal's software classifies it as either a display
character (which is to be displayed on the CRT) or as a character that 
introduces a control sequence.  A control sequence is used to direct the
terminal to do such things as clear the screen, move the cursor in a specified
manner, or perhaps change fonts.
<P>
In this problem assume you are writing the software for a small terminal with
a 10-row, 10-column display (perhaps for a point-of-sale terminal).  Rows and
columns are numbered 0 through 9.  The character that introduces a control
sequence is  <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > , the circumflex. The character (or in one case, the two
characters) immediately following the control sequence introducer will direct
your software in performing its special functions.  Here is the complete
list of control sequences you will need to interpret:
<P>
<DL ><DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>b</TT></STRONG>
<DD>
<P>
  Move the cursor to the beginning of the current line; the cursor row does not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>c</TT></STRONG>
<DD>
  Clear the entire screen; the cursor row and column do not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>d</TT></STRONG>
<DD>
  Move the cursor down one row if possible; the cursor column does not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>e</TT></STRONG>
<DD>
  Erase characters to the right of, and including, the cursor column on
    the cursor's row; the cursor row and column do not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>h</TT></STRONG>
<DD>
  Move the cursor to row 0, column 0; the image on the screen is not changed
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>i</TT></STRONG>
<DD>
  Enter insert mode (see below)
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>l</TT></STRONG>
<DD>
  Move the cursor left one column, if possible; the cursor row does
    not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>o</TT></STRONG>
<DD>
  Enter overwrite mode (see below)
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>r</TT></STRONG>
<DD>
  Move the cursor right one column, if possible; the cursor row does
    not change
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > <TT>u</TT></STRONG>
<DD>
  Move the cursor up one row, if possible; the cursor column does not change
<P>
<DT><STRONG> <IMG WIDTH=17 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > </STRONG>
<DD>
  Write a circumflex ( <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   > ) at the current cursor location, exactly as if it was not a special character; this is subject to the actions of the current
    mode (insert or overwrite)
<P>
<DT><STRONG> <IMG WIDTH=7 HEIGHT=7 ALIGN=BOTTOM ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/337img1.gif"   >  <TT>##</TT></STRONG>
<DD>
 Move the cursor to the row and column specified; # represents a decimal
    digit; the first # represents the new row number, and the second #
    represents the new column number
<P>
 </DL>
<P>
No illegal control sequences will ever be sent to the terminal.  The cursor
cannot move outside the allowed screen locations (that is, between row 0,
column 0 and row 9, column 9).
<P>
<P>
When a normal character (not part of a control sequence) arrives at the
terminal, it is displayed on the terminal screen in a manner that depends on
the terminal mode.  When the terminal is in overwrite mode (as it is when it
is first turned on), the received character replaces the character at the
cursor's location.  But when the terminal is in insert mode, the characters
to the right of and including the cursor's location are shifted right one
column, and the new character is placed at the cursor's location; the
character previously in the rightmost column of the cursor's row is lost.
Regardless of the mode, the cursor is moved right one column, if possible.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will contain multiple tests of your terminal software.  Each test
begins with a line containing an integer <I>N</I>.  Following this line there will
be <I>N</I> more lines of data, each character of which is to be treated as 
if it was input, in the order read, to your terminal software.  There will be
no tab characters in the input data, and ends of lines in the input are to be
ignored.  Note that blanks in the input data are normal characters to 
be displayed on your terminal's screen.  The last test will be followed by a
single line containing the integer 0.  No control sequence will be split
between two lines of the input data.
<P>
<P>
At the beginning of each test case you are to assume the terminal screen is
clear (that is, filled with blanks), that the terminal is in overwrite mode,
and that the cursor is in row 0, column 0 of the screen.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input test case, output a line with the case number (these are
numbered sequentially starting with 1) and the screen image the way it would
look at the end of processing the data in the test case.  Enclose the 
screen image in a &quot;box;&quot; see the sample below for illustration of the required
format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>7
This is bad^h^c
^05^^
^14/ \^d^b   /   \
^u^d^d^l^l^l^l^l^l^l^l^l
^r^r&lt; ACM &gt;^l^l^d/^b   \
^b^d    \ /
^d^l^lv
7
^i9^l8^l7^l6^l5^l4^l3^l2^l1^l0
^o^d^lThis is #1^d^bThis is #2
^d^bThis is #3^d^bThis is #4
^d^bThis is #5^d^bThis is #6
^d^bThis is #7^d^bThis is #8
^i^d^bThis is #9^d^bThis is #10
^54^e Hello^d^l^l^l^lWorld
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1
+----------+
|     ^    |
|    / \   |
|   /   \  |
|  &lt; ACM &gt; |
|   \   /  |
|    \ /   |
|     v    |
|          |
|          |
|          |
+----------+
Case 2
+----------+
|0123456789|
|This is #1|
|This is #2|
|This is #3|
|This is #4|
|This Hello|
|This World|
|This is #7|
|This is #8|
|This is #0|
+----------+</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
338||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Long Multiplication</TITLE>
<META NAME="description" CONTENT="Long Multiplication">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Long Multiplication</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In traditional ``long multiplication&quot; we determine the product
of two integers, <I>x</I> and <I>y</I>, by  multiplying <I>x</I> and the individual digits of
<I>y</I>, in turn, starting with the units digit.  The results of  these
multiplications are arranged appropriately and added, yielding the
completed product.
<P>
<P>
The representation of these operations is
usually done in a particular manner.  Consider the  multiplication of
123 by 95:
<P>
<PRE>                                123
                                 95
                                ---
                                615
                              1107
                              -----
                              11685</PRE>
<P>
The numbers to be multiplied, <I>x</I> and <I>y</I>, are each displayed on a
separate line, followed by a  horizontal line.  The results of
multiplying each digit of <I>y</I> by <I>x</I> are then displayed on separate lines, 
followed by another horizontal line, and then the final product.  In
this problem you are to  perform a sequence of such multiplications,
displaying the results in this traditional representation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each line of the input data, except the last, will contain two
integers, <I>x</I> and <I>y</I>, separated by  whitespace (one or more blanks and tab
characters).  Whitespace may also precede the first  integer and follow
the second integer.  Each integer will have no more than 10 digits. The last 
line of the input data contain only a zero, and marks the end of the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each pair of integers (that is, each input line except the
last), perform the multiplication of <I>x</I>  by <I>y</I>, displaying the results in
the form shown above and in the examples shown below.  Follow  the
output for each multiplication by a blank line.  

<!--If <I>y</I> contains only a
single significant digit, omit  the second horizontal line and the sum
(since in that case it would be superfluous).-->

If there are less than 2 lines of numbers between the horizontal lines, 
omit them (since in that case they would be
superfluous) as well as 
the second horizontal line, and just output the sum. Display 0 digits only
when they are significant.
<P>
<P>
The number of hyphens in the first horizontal line should be the
same as the number of digits in  the larger of <I>x</I> and <I>y</I>.  The number of
hyphens in the second horizontal line, if it is produced,  should be the
same as the number of digits in the product of <I>x</I> and <I>y</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>   4 7
135  46
    12345   862
0 123456789
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
 4
 7
 -
28

 135
  46
 ---
 810
540
----
6210

   12345
     862
   -----
   24690
  74070
 98760
--------
10641390

        0
123456789
---------
        0

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
339||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>SameGame Simulation</TITLE>
<META NAME="description" CONTENT="SameGame Simulation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">SameGame Simulation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The one-player game of SameGame is played on an <I>M</I> row by <I>N</I> column
rectangular grid.  In  each cell of the grid is placed a positive
integer in the range 0 through 9.  The goal of the game is  to remove
all the integers from the grid.  The player attempts this by repeatedly
selecting a cell for  removal. Each time a cell is selected for removal,
all the cells in the <I>connected region</I> (defined  below) containing the
same integer found in selected cell are removed, and all cells above
those  that were removed ``drop down&quot; (toward the bottom of the grid).
When all the cells in a column  have been removed, then columns to the
right of the removed column slide to the left.  The game  is over when
all cells are removed (a win), or when no more cells can be removed. 

<P>
<P>
A <I>connected region</I> consists of all cells that can be reached by
moving horizontally (left or right)  and/or vertically (up or down) from
any cell in the region, subject to the restriction that all cells in 
the connected region must contain the same value.
<P>
<P>
Cells will be
numbered starting with the lower left corner of the grid; this is cell
(1,1).  The cell  above it is cell (2,1), and the cell to its right is
cell (1,2).
<P>
<P>
 <IMG WIDTH=282 HEIGHT=18 ALIGN=BOTTOM ALT="tex2html_wrap47" SRC="http://uva.onlinejudge.org/external/3/339img1.gif"   > 
 <IMG WIDTH=80 HEIGHT=55 ALIGN=BOTTOM ALT="tex2html_wrap49" SRC="http://uva.onlinejudge.org/external/3/339img1.gif"   > 
<P>
<P>
The cells at (1,1), (2,5), (3,1), (3,2) and (3,3) may not be
successfully selected for removal, since  they arenÂ’'t parts of connected
regions (i.e., regions that contain at least two connected cells with 
the same value).  The cell at (2,1) is part of the connected region also
containing the cells at (2,2)  and (1,2).  Likewise, the connected
region containing the cell at (1,5) also contains the cells at  (1,4)
and (2,4), but not the cell at (3,3).  Starting with the original grid
shown above, the  following selections will result in a win:
<P>
<UL><LI>
<PRE>  
1 3 5     
2 2 3 5 1 
1 2 3 5 5</PRE><LI>
<PRE>    5     
1   3 5 1 
1 3 3 5 5</PRE><LI>
<PRE>1   5 1   
1 5 5 5</PRE><LI>
<PRE>1         
1 1</PRE>
</UL>
<P>
Finally, in step 5, selecting cell (1,1), (1,2) or (2,1) will
remove the remaining integers from the  grid.
<P>
<P>
In the input for
this problem your program will be presented with a sequence of grids,
each having  no more than 10 rows and 40 columns.  For each grid there
will also be given a sequence of cell  removal selections.  Apply these
selections, in order, to each grid, ignoring those that are not 
permitted (e.g. they select non-existant cells, or they select regions
with fewer than two cells).   Then display the resulting grid or, if
appropriate, the message <TT>&quot;Game Won&quot;</TT>.
<P>
</U></U></U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist entirely of non-negative integers
without regard to line structure.  Each grid  and sequence of removal
selections will begin with values for <I>M</I> and <I>N</I>.  If either of these
values  is zero, then the input is terminated.
<P>
<P>
Following <I>M</I> and <I>N</I>
will appear the  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline59" SRC="http://uva.onlinejudge.org/external/3/339img1.gif"   >  integers for the grid, in row major order. 
That is, the  values are given in order for cells (1,1), (1,2), ...,
(1,<I>N</I>), (2,1), ..., (<I>M</I>,<I>N</I>).  Following the grid data  will appear pairs of
integers, each pair indicating the row and column of a grid cell
selected for  removal.  The end of this sequence will be marked by a
pair of zeroes.
<P>
<P>
If a game is won, your  program must skip any remaining
pairs of integers (if any) through and including the pair of  zeroes to
reach the data for the next grid in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
 As noted
above, the output for each grid in the input data should be either the
grid that remains  after considering all selections, or the message
<TT>&quot;Game Won&quot;</TT>.  Precede the output for each grid  by its sequence in the input; the first grid is numbered 1.
<P>
<P>
Look at the samples below for the <EM>exact</EM> format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 5
1 2 3 5 5
2 2 3 5 1
1 3 5 2 2
3 5
2 2
1 2
1 2
1 1
0 0

3 5
1 2 3 5 5
2 2 3 5 1
1 3 5 2 2
2 2    1 2   1 4   1 2   
99 99 0 0

4 3
1 4 4
4 4 2
1 2 3
3 1 3
1 2 1 1 1 3 1 1 0 0
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Grid 1.
    Game Won

Grid 2.
              
    1   2     
    1 2 1     

Grid 3.
    Game Won</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
340||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Master-Mind Hints</TITLE>
<META NAME="description" CONTENT="Master-Mind Hints">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Master-Mind Hints</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
MasterMind is a game for two players.  One of them, <I>Designer</I>, selects a
secret code.  The other,  <I>Breaker</I>, tries to break it.  A code is no more
than a row of colored dots.  At the beginning of a  game, the players
agree upon the length <I>N</I> that a code must have and upon the colors that
may  occur in a code.
<P>
In order to break the code, Breaker makes a
number of guesses, each guess itself being a code.   After each guess
Designer gives a hint, stating to what extent the guess matches his
secret code.
<P>
<P>
In this problem you will be given a secret code
 <IMG WIDTH=57 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/3/340img1.gif"   >  and a guess  <IMG WIDTH=59 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/340img1.gif"   > , and are to determine the  hint. A hint consists of a pair of numbers determined as follows.
<P>
A <I>match</I> is a pair (<I>i</I>,<I>j</I>),  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/340img1.gif"   >  and  <IMG WIDTH=73 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/340img1.gif"   > , 
such that  <IMG WIDTH=49 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/340img1.gif"   > . 
Match (<I>i</I>,<I>j</I>) is called <I>strong</I> when  <I>i</I> = <I>j</I>, and is called <I>weak</I>
otherwise.  Two matches (<I>i</I>,<I>j</I>) and (<I>p</I>,<I>q</I>) are called <I>independent</I>
when <I>i</I> = <I>p</I> if  and only if <I>j</I> = <I>q</I>.  A set of matches is called <I>independent</I> when all of its members are pairwise  independent.
<P>
<P>
Designer chooses an independent set <I>M</I> of matches for which the total number of
matches and the  number of strong matches are both maximal.  The hint
then consists of the number of strong  followed by the number of weak
matches in <I>M</I>.  Note that these numbers are uniquely determined  by the
secret code and the guess.  If the hint turns out to be (<I>n</I>,0), then the
guess is identical to the  secret code.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of data for a number of games. 
The input for each game begins with an  integer specifying <I>N</I> (the length
of the code).    Following these will be the secret code,  represented
as <I>N</I> integers, which we will limit to the range 1 to 9.  There will then
follow an  arbitrary number of guesses, each also represented as <I>N</I>
integers, each in the range 1 to 9.   Following the last guess in each
game will be <I>N</I> zeroes; these zeroes are not to be considered as a 
guess.
<P>
<P>
Following the data for the first game will appear data for
the second game (if any) beginning with  a new value for <I>N</I>.  The last
game in the input will be followed by a single zero (when a value for  <I>N</I>
would normally be specified).  The maximum value for <I>N</I> will be 1000.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
 The output for each game should list the hints that
would be generated for each guess, in order,  one hint per line.  Each
hint should be represented as a pair of integers enclosed in parentheses
 and separated by a comma.  The entire list of hints for each game
should be prefixed by a heading  indicating the game number; games are
numbered sequentially starting with 1.  Look at the samples below for the <EM>exact</EM> format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
1 3 5 5
1 1 2 3
4 3 3 5
6 5 5 1
6 1 3 5
1 3 5 5
0 0 0 0
10
1 2 2 2 4 5 6 6 6 9
1 2 3 4 5 6 7 8 9 1
1 1 2 2 3 3 4 4 5 5
1 2 1 3 1 5 1 6 1 9
1 2 2 5 5 5 6 6 6 7
0 0 0 0 0 0 0 0 0 0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Game 1:
    (1,1)
    (2,0)
    (1,2)
    (1,2)
    (4,0)
Game 2:
    (2,4)
    (3,2)
    (5,0)
    (7,0)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
341||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Non-Stop Travel</TITLE>
<META NAME="description" CONTENT="Non-Stop Travel">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Non-Stop Travel</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
David hates to wait at stop signs, yield signs and traffic signals while
driving.  To minimize this  aggravation, he has prepared maps of the
various regions in which he frequently drives, and  measured the average
delay (in seconds) at each of the various intersections in these
regions.  He  wants to find the routes between specified points in these
regions which minimize his delay at  intersections (regardless of the
total distance he has to drive to avoid delays), and has enlisted  your
assistance in this effort.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
For each region, David provides you with a map.  The map
data first identifies some number of  intersections, <I>NI</I>.  The regions
never include more than 10 intersections.  The intersections in each 
region are numbered sequentially, starting with the number one (1).  For
each intersection, in turn,  the input then specifies the number of
streets leading away from the intersection, and for each  such street,
the number of the intersection to which the street leads, and the
average delay, in  seconds, that David encounters at that intersection. 
Following the data for the last intersection in  a region there appear
the numbers associated with the intersections where David wants to start
 and end his drive.  The entire input consists of a sequence of maps,
followed by the single integer  zero (0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each region, in order, print a single line of
output which contains the region number (they,  too, are sequentially
numbered, starting with 1), a list of the intersection numbers David
will  encounter in the route with minimum average delay, and the average
number of seconds he will be  delayed while travelling this route.  A
suitable format is shown in the example below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Notes</A></FONT></H2>
<P>
<OL><LI> There will always be a unique route with the minimum average delay
in each region.<LI> A street from intersection <I>I</I> to intersection <I>J</I> is one-way.  To
represent a two-way street from <I>I</I>  to <I>J</I>, the map must also include a
route from intersection <I>J</I> to intersection <I>I</I>.<LI> There will never be more than one route directly from intersection
<I>I</I> to intersection <I>J</I>.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Example</A></FONT></H2>
<P>
Suppose David wants to travel from intersection 2 to
intersection 4 in the region shown in the  following map:
<P>
<PRE>                +---------------+                   From To Delay
                |               V                     1   3   3
                1&lt;------2------&gt;3------&gt;4&lt;------5     1   4   6
                |       |               ^       ^     2   1   2
                |       +---------------|-------+     2   3   7
                |                       |             2   5   6
                +-----------------------+             3   4   5
                                                      5   4   7</PRE>
<P>
The input and output for this example is shown as the first case
in the Sample Input and  Sample Output shown on the next page.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
2  3 3   4 6
3  1 2   3 7   5 6
1  4 5
0
1  4 7
2 4

2
1   2 5
1   1 6
1 2

7
4   2 5   3 13   4 8   5 18
2   3 7   6 14
1   6 6
2   3 5   5 9
3   6 2   7 9    4 6
1   7 2
0
1 7

0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: Path = 2 1 4; 8 second delay
Case 2: Path = 1 2; 5 second delay
Case 3: Path = 1 2 3 6 7; 20 second delay</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
342||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>HTML Syntax Checking</TITLE>
<META NAME="description" CONTENT="HTML Syntax Checking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">HTML Syntax Checking</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
This problem requires you to write a program to syntactically validate
some simple text written  using HTML, the HyperText Markup Language in
which all documents available on the World  Wide Web are written. We'll
not consider the semantics, or meaning, of these documents, and will 
only consider simplified syntactical rules.  In these documents you'll
find ordinary text (with arbitrary line lengths) interspersed with
markup  tags.  The markup tags we consider will always occur in pairs. 
An example will illustrate this  point:
<P>
<PRE>     This is some ordinary text. &lt;ATAG&gt;  Here's some additional
     text. &lt;BOLD&gt;  This will be boldface. &lt;/BOLD&gt;  Still more 
     &lt;/ATAG&gt;</PRE>
<P>
There are two pair of markup tags in the example. The
meaning of <TT>ATAG</TT> and <TT>BOLD</TT> is  unimportant to us in this problem, but
typically a markup tag requests particular treatment of the  text to
which it applies.  The markup tags are easily identified because they
always appear in angle  brackets (that is, a less than symbol and a
greater than symbol).  The tags we'll consider will  always be written
as a sequence of no more than 10 upper-case alphabetic characters.  The
end of  the document region affected by the tag is indicated by a tag
with the same name preceded by a  forward slash, `<TT>/</TT>'  As illustrated,
the tagged regions may encompass more than one line of text.   Also as
shown in the example, the HTML tags must nest properly, just like
<TT>BEGIN...END</TT> pairs in  Pascal, or `<TT>{</TT>' and `<TT>}</TT>' in C/C++.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of a number of test cases.  Each will begin with
a separate line containing an  integer specifying the number of lines of
text in the test case, <I>NL</I>.  <I>NL</I> will never exceed 32767.   The end of
input is marked by a value of zero (0) for <I>NL</I>.
<P>
<P>
Following the
line specifying <I>NL</I> in each test case there will be <I>NL</I> lines of text
which are to be  checked for syntactic conformance.  Remember that there
is no maximum line length limit.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case,
output the test case number (they are numbered sequentially starting
with 1).   If the text is in conformance with the rules specified above,
then output the word ``<TT>OK</TT>&quot;.  If the  text is erroneous, then output one
of the following messages for the first error only:
<P>
<PRE>line #: bad character in tag name
line #: too many/few characters in tag name 
line #: expected &lt;/xxxxxxxxxx&gt; 
line #: no matching begin tag.</PRE>
<P>
The `<TT>#</TT>' in these messages is to
be replaced by the line number of the test case when the offending  tag
was detected.  Examples of when these messages are displayed are found
in the example input  and expected output immediately following.
<P>
<P>
If an error is detected, after producing the appropriate error
message your program must skip any  remaining lines in the erroneous
test case to reach the beginning of the next test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>6 
This is some ordinary text. 
&lt;BEGIN&gt; This is included in the BEGIN tag &lt;/BEGIN&gt;  
        &lt;START&gt;    Here's some stuff 
and so is this 
 
     more stuff. &lt;/START&gt; 
2 
   This has a null tag &lt;&gt; 
   And an extra line after the error 
5 
   This has some good stuff &lt;OKAY&gt; and some bad stuff later on. 
   &lt;GOOD&gt; All is still okay, but later on we'll have an error. 
   &lt;/GOOD&gt; We're still in the pink! &lt;THISISTOOLONG&gt; 
   This line will be skipped.  
   As will this one. 
1 
   This is an interesting error: &lt;ERROR 
2 
   This one is okay                               &lt;IN&gt; &lt;/IN&gt;

1
   Mismatch &lt;START&gt; &lt;/STOP&gt; 
1 
    Missing start symbol:   &lt;OK&gt;&lt;/OK&gt;&lt;/NOTOK&gt;   more garbage... 
1
&lt;ELEVENChars&gt;Both too long and invalid letter&lt;/ELEVENChars&gt;
1
&lt;ELEVENCHARs&gt;Both too long and invalid letter&lt;/ELEVENCHARs&gt;
1
&lt;ELEVENCHARS!&gt;Both too long and invalid letter&lt;/ELEVENCHARS!&gt;
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Test Case 1
OK
Test Case 2
line 1: too many/few characters in tag name.
Test Case 3
line 3: too many/few characters in tag name.
Test Case 4
line 1: bad character in tag name.
Test Case 5
OK
Test Case 6
line 1: expected &lt;/START&gt;
Test Case 7
line 1: no matching begin tag.
Test Case 8
line 1: bad character in tag name.
Test Case 9
line 1: bad character in tag name.
Test Case 10
line 1: too many/few characters in tag name.
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
343||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>What Base Is This?</TITLE>
<META NAME="description" CONTENT="What Base Is This?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">What Base Is This?</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In positional notation we know the position of a digit indicates
the weight of that digit toward the  value of a number.  For example, in
the base 10 number 362 we know that 2 has the weight  <IMG WIDTH=23 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/3/343img1.gif"   > , 6  has the
weight  <IMG WIDTH=23 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/3/343img1.gif"   > , and 3 has the weight  <IMG WIDTH=23 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/3/343img1.gif"   > , yielding the value 
 <IMG WIDTH=205 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/3/343img1.gif"   > , or  just 300 + 60 + 2.  The same mechanism is
used for numbers expressed in other bases.  While  most people assume
the numbers they encounter everyday are expressed using base 10, we know
 that other bases are possible.  In particular, the number 362 in base 9
or base 14 represents a  totally different value than 362 in base 10.
<P>
<P>
For this problem your program will presented with a sequence of
pairs of integers.  LetÂ’'s call the  members of a pair <I>X</I> and <I>Y</I>.  What
your program is to do is determine the smallest base for <I>X</I> and  the
smallest base for <I>Y</I> (likely different from that for <I>X</I>) so that <I>X</I> and <I>Y</I>
represent the same value.
<P>
<P>
Consider, for example, the integers 12 and 5.  Certainly these
are not equal if base 10 is used for  each.  But suppose 12 was a base 3
number and 5 was a base 6 number?  12 base 3 =  <IMG WIDTH=111 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/3/343img1.gif"   > ,
or 5 base 10, and certainly 5 in any base is equal to 5 base 10.  So 12
and 5 <I>can</I> be equal, if  you select the right bases for each of them!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
On each line of the input data there will be a pair of
integers, <I>X</I> and <I>Y</I>, separated by one or more  blanks; leading and
trailing blanks may also appear on each line, are are to be ignored. 
The bases  associated with <I>X</I> and <I>Y</I> will be between 1 and 36 (inclusive),
and as noted above, need not be the  same for <I>X</I> and <I>Y</I>.  In representing
these numbers the digits 0 through 9 have their usual decimal 
interpretations.  The uppercase alphabetic characters <TT>A</TT> through <TT>Z</TT>
represent digits with values 10  through 35, respectively.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each pair of integers in the input display a
message similar to those shown in the examples  shown below.  Of course
if the two integers cannot be equal regardless of the assumed base for 
each, then print an appropriate message; a suitable illustration is
given in the examples.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>12   5
    10     A
12 34
  123   456
  1    2
  10   2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>12 (base 3) = 5 (base 6)
10 (base 10) = A (base 11)
12 (base 17) = 34 (base 5)
123 is not equal to 456 in any base 2..36
1 is not equal to 2 in any base 2..36
10 (base 2) = 2 (base 3)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
344||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Roman Digititis</TITLE>
<META NAME="description" CONTENT="Roman Digititis">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Roman Digititis</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many persons are familiar with the Roman numerals for relatively
small numbers.  The symbols  ``<TT>i</TT>&quot;, ``<TT>v</TT>&quot;, ``<TT>x</TT>&quot;, ``<TT>l</TT>&quot;, and ``<TT>c</TT>&quot; represent the
decimal values 1, 5, 10, 50, and 100 respectively.  To  represent other
values, these symbols, and multiples where necessary, are concatenated,
with the  smaller-valued symbols written further to the right.  For
example, the number 3 is represented as  ``<TT>iii</TT>&quot;, and the value 73 is
represented as ``<TT>lxxiii</TT>&quot;.  The exceptions to this rule occur for numbers 
having units values of 4 or 9, and for tens values of 40 or 90.  For
these cases, the Roman  numeral representations are ``<TT>iv</TT>&quot; (4), ``<TT>ix</TT>&quot; (9),
``<TT>xl</TT>&quot; (40), and ``<TT>xc</TT>&quot; (90).  So the Roman numeral  representations for 24,
39, 44, 49, and 94 are ``<TT>xxiv</TT>&quot;, ``<TT>xxxix</TT>&quot;, ``<TT>xliv</TT>&quot;, ``<TT>xlix</TT>&quot;, and ``<TT>xciv</TT>&quot;, 
respectively.
<P>
<P>
The preface of many books has pages numbered with Roman
numerals, starting with ``<TT>i</TT>&quot; for the  first page of the preface, and
continuing in sequence.  Assume books with pages having 100 or  fewer
pages of preface.  How many ``<TT>i</TT>&quot;, ``<TT>v</TT>&quot;, ``<TT>x</TT>&quot;, ``<TT>l</TT>&quot;, and ``<TT>c</TT>&quot; characters are
required to number  the pages in the preface?  For example, in a five
page preface weÂ’ll use the Roman numerals ``<TT>i</TT>&quot;,  ``<TT>ii</TT>&quot;, ``<TT>iii</TT>&quot;, ``<TT>iv</TT>&quot;, and
``<TT>v</TT>&quot;, meaning we need 7 ``<TT>i</TT>&quot; characters and 2 ``<TT>v</TT>&quot; characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of a sequence of integers in the
range 1 to 100, terminated by a zero.  For  each such integer, except
the final zero, determine the number of different types of characters 
needed to number the prefix pages with Roman numerals.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each integer in the input, write one line
containing the input integer and the number of  characters of each type
required.  The examples shown below illustrate an acceptable format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
2
20
99
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1: 1 i, 0 v, 0 x, 0 l, 0 c
2: 3 i, 0 v, 0 x, 0 l, 0 c
20: 28 i, 10 v, 14 x, 0 l, 0 c
99: 140 i, 50 v, 150 x, 50 l, 10 c</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
345||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>It's Ir-Resist-Able!</TITLE>
<META NAME="description" CONTENT="It's Ir-Resist-Able!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">It's Ir-Resist-Able!</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A common component in electronic circuits is the resistor. Each resistor
has two terminals, and when current flows through a resistor, some of it is
converted to heat, thus ``resisting&quot;; the
flow of the current. The extent to which it does this is indicated by a
single positive numeric value, cleverly called the <I>resistance</I> of the
resistor. By the way, the units of resistance are
Ohms. Here's what a single resistor looks like in a diagram of an
electronic circuit:
<P>
<center><img src=345img4.gif></center>
<P>
When two resistors are connected in series, as shown below, then their
equivalent resistance is just the sum of the resistances of the individual
resistors. For example, if the two resistors
below had resistances of 100 and 200 Ohms, respectively, then the combined
resistance (from point A to point B) would be 300 Ohms. Of course, combining
three or more resistors in
series would yield a resistance equal to sum of all the individual
resistances.
<P>
<center><img src=345img5.gif></center>
<P>
Resistors may also be connected in parallel, like this:
<P>
<center><img src=345img6.gif></center>
<P>
If these two resistors had resistances of 100 and 150 Ohms, then the parallel
combination would yield an equivalent resistance between points A and B of
<P>
<P> <IMG WIDTH=433 HEIGHT=43 ALIGN=BOTTOM ALT="displaymath61" SRC="http://uva.onlinejudge.org/external/3/345img1.gif"   > <P>
<P>
Connecting three resistors in parallel uses the same rule, so a 100 Ohm,
150 Ohm, and 300 Ohm resistor in parallel would yield a combined resistance
of just 50 Ohms: that is,
<P> <IMG WIDTH=341 HEIGHT=43 ALIGN=BOTTOM ALT="displaymath63" SRC="http://uva.onlinejudge.org/external/3/345img1.gif"   > <P>
<P>
In this problem you're provided one or more descriptions of resistors and
their interconnections. Each possible interconnection point (the
terminals of a resistor) is identified by a unique
positive integer, its <I>label</I>. And each resistor is specified by giving
its two interconnection point labels and its resistance (as a real number).
<P>
For example, the input
<PRE>1 2 100</PRE>
<P>
would tell us that a 100 Ohm resistor was connected between points 1
and 2. A pair of resistors connected in series might be specified like this:
<PRE>1 2 100
2 3 200</PRE>
<P>
Here we've got our 100 Ohm resistor connected at points 1 and 2, and
another 200 Ohm resistor connected to points 2 and 3. Two resistors
in parallel would be similarly specified:
<PRE>1 2 100
1 2 150</PRE>
<P>
Once you know how the resistors are interconnected, and the resistance of
each resistor, it's possible to determine the equivalent resistance between
any two points using the simple rules
given above. In some cases, that is. Some interconnections of resistors
can't be solved using this approach: you won't encounter any of these in
this problem, however.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Notes</A></FONT></H2>
<P>
<OL><LI> Be aware that there may be input test cases with some resistors that don't
contribute to the overall resistance between the indicated points.
For example, in the last case shown in
the <I>Sample Input</I> section below, the resistor between points 1 and 2 is
unused. There must be some flow through a resistor if it is to contribute
to the overall resistance.<LI> No resistor will have its ends connected together. That is, the labels
associated with the ends of a resistor will always be distinct.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
There will be one or more cases to consider. Each will begin with a line
containing three integers <I>N</I>, <I>A</I>, and <I>B</I>. <I>A</I> and <I>B</I> indicate the labels of
points between which you are to determine
the equivalent resistance. <I>N</I> is the number of individual resistors, and will be no larger than 30. <I>N</I>, <I>A</I> and <I>B</I>
will all be zero in the line following the last case. Following
each `` <IMG WIDTH=53 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline83" SRC="http://uva.onlinejudge.org/external/3/345img1.gif"   > &quot; line will be <I>N</I> lines, each specifying
the labels of the points where a resistor is connected, and the resistance of
that resistor, given as a real number.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
For each input case, display a line that includes the case number
(they are numbered sequentially starting with 1) and the equivalent
resistance, accurate to two decimal places.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 1 3
1 2 100
2 3 200
2 1 2
1 2 100
1 2 150
6 1 6
1 2 500
1 3 15
3 4 40
3 5 100
4 6 60
5 6 50
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: 300.00 Ohms
Case 2: 60.00 Ohms
Case 3: 75.00 Ohms</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
346||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Getting Chorded</TITLE>
<META NAME="description" CONTENT="Getting Chorded">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Getting Chorded</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>The ``names&quot; of the notes on a standard 88-key piano keyboard start with A (the lowest note on the keyboard) and then proceed sequentially with A# (A-sharp), B, C, C#, D, D#, E, F, F#, G, and finally G#. After the first 12 notes are named, the pattern repeats, proceeding through the last key, which is named C. Some notes have other common names. A# may also be called Bb (B-flat), C# may be called Db, D# may be called Eb, F# may be called Gb, and G# may be called Ab. (There are still other names, like Cx, but we won't worry about those here!)
<P>Most music includes chords, or groups of notes played at the same time. Many of these chords are given standard names. For example, the notes C, E, and G sounded together are called a C Major chord. While the particular C, E and G in the chord are frequently close together on the keyboard, for our purposes here, any C, E, and G played at the same time will constitute a C Major chord. It is the spacing between the notes on the keyboard that distinguishes a Major chord from others. As you can see, there are exactly three notes skipped between the C and the E (namely C#, D and D#), and then only two skipped between the E and the G (namely F and F#). If we start with a different note, say F#, we can easily tell that the notes in an F# Major chord are F#, A#, and C# (skipping G, G#, and A between F# and A#, and skipping B and C between A# and C#).
<P>Another frequently encountered chord is the Minor chord. C Minor, for example, is played by sounding C, D#, and G. As you can see, C# and D are skipped between C and D#, and E, F and F# are skipped between D# and G. You should now be able to tell that the notes in an F# Minor chord are F#, A, and C#.
<P>In this problem you will be presented with a sequence of lines, each containing the names of three notes. You are to identify if these three notes, taken together, form a Major or Minor chord. If they do, you will display the name of the chord. If they don't you'll also report that fact. Remember that the notes need not appear in the usual sequence. Case will be ignored in the input, and the symbol b will be indicated by the letter <TT>b</TT>. A blank or blanks will appear between the notes on each line, and may also precede the first note on the line or follow the third note on the line.
<P>The output is to be in the same style as shown in the examples below; do not use <TT>b</TT> to name chords: use only <TT>#</TT> when necessary.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>C E G
C E F#
G C E
C Eb G
c# a f#
f g# C</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>C E G is a C Major chord.
C E F# is unrecognized.
G C E is a C Major chord.
C Eb G is a C Minor chord.
c# a f# is a F# Minor chord.
f g# C is a F Minor chord.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
347||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Run, Run, Runaround Numbers</TITLE>
<META NAME="description" CONTENT="Run, Run, Runaround Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Run, Run, Runaround Numbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
An <I>N</I>-digit runaround number is characterized as follows:
<P>
<UL><LI> It is an integer with exactly <I>N</I> digits, each of which is between 1 and 9, inclusively.<LI> The digits form a sequence with each digit telling where the next digit in
the sequence occurs. This is done by giving the number of digits to the
right of the digit where the next digit
in the sequence occurs. If necessary, counting wraps around from the
rightmost digit back to the leftmost.<LI> The leftmost digit in the number is the first digit in the sequence,
and the sequence must return to this digit after all digits in the number
have been used exactly once.<LI> No digit will appear more than once in the number.
</UL>
<P>
For example, consider the number 81362. To verify that this is a runaround
number, we use the steps shown below:
<P>
<OL><LI> Start with the leftmost digit, 8: <TT><U> 1 3 6 2</TT></U><LI> Count 8 digits to the right, ending on 6 (note the wraparound): <TT><U> 1 3 <U> 2</TT></U></U><LI> Count 6 digits to the right, ending on 2: <TT><U> 1 3 <U> <U></TT></U></U></U><LI> Count 2 digits to the right, ending on 1: <TT><U> <U> 3 <U> <U></TT></U></U></U></U><LI> Count 1 digit to the right, ending on 3: <TT><U> <U> <U> <U> <U></TT></U></U></U></U></U><LI> Count 3 digits to the right, ending on 8 (where we began): <TT><U> <U> <U> <U> <U></TT></U></U></U></U></U>
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
In this problem you will be provided with one or more input lines, each
with a single integer <I>R</I> having between 2 and 7 digits followed immediately
by the end of line. For each such
number, determine the smallest runaround number that is equal to or greater
than <I>R</I>. There will always be such a number for each of the input numbers.
Display the resulting number in the
format illustrated below. The last line of the input will contain only
the digit 0 in column 1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>12
123
1234
81111
82222
83333
911111
7654321
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: 13
Case 2: 147
Case 3: 1263
Case 4: 81236
Case 5: 83491
Case 6: 83491
Case 7: 913425
Case 8: 8124956</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
348||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Optimal Array Multiplication Sequence</TITLE>
<META NAME="description" CONTENT="Optimal Array Multiplication Sequence">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Optimal Array Multiplication Sequence</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given two arrays <I>A</I> and <I>B</I>, we can determine the array <I>C</I> = <I>A</I> <I>B</I>
using the standard definition of matrix multiplication:
<P>
<center><img src=348img13.gif></center>
<P>
The number of columns in the <I>A</I> array must be the same as the number of
rows in the <I>B</I> array. Notationally, let's say that <I>rows</I>(<I>A</I>) and <I>columns</I>(<I>A</I>)
are the number of rows and columns,
respectively, in the <I>A</I> array. The number of individual multiplications
required to compute the entire <I>C</I> array (which will have the same number
of rows as <I>A</I> and the same number of
columns as <I>B</I>) is then <I>rows</I>(<I>A</I>) <I>columns</I>(<I>B</I>) <I>columns</I>(<I>A</I>).
For example, if <I>A</I>  is a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array, and <I>B</I> is a  <IMG WIDTH=55 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline71" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array, it will take  <IMG WIDTH=93 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline73" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   > , or 3000 multiplications to compute the <I>C</I>  array.
<P>
<P>
To perform multiplication of more than two arrays we have a choice of how
to proceed. For example, if <I>X</I>, <I>Y</I>, and <I>Z</I> are arrays, then to
compute <I>X</I> <I>Y</I> <I>Z</I> we could either compute (<I>X</I> <I>Y</I>) <I>Z</I>
or <I>X</I> (<I>Y</I> <I>Z</I>). Suppose <I>X</I> is a  <IMG WIDTH=46 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline103" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array, <I>Y</I> is a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline67" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array, and <I>Z</I> is a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline111" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array. Let's look at the number of multiplications
required to compute the product using the two different sequences:
<P>
<P>
<P>
(<I>X</I> <I>Y</I>) <I>Z</I>
<P>
<UL><LI>  <IMG WIDTH=143 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline119" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  multiplications to determine the
product (<I>X Y</I>), a  <IMG WIDTH=46 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline123" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array.<LI> Then  <IMG WIDTH=143 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline125" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  multiplications to determine
the final result.<LI> Total multiplications: 4500.
</UL>
<P>
<P>
<P>
<I>X</I> (<I>Y</I> <I>Z</I>)
<P>
<UL><LI>  <IMG WIDTH=151 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline133" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  multiplications to determine the
product (<I>Y</I> <I>Z</I>), a  <IMG WIDTH=55 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline139" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  array.<LI> Then  <IMG WIDTH=142 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline141" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   >  multiplications to determine the
final result.<LI> Total multiplications: 8750.
</UL>
<P>
Clearly we'll be able to compute (<I>X</I> <I>Y</I>) <I>Z</I> using fewer individual
multiplications.
<P>
<P>
Given the size of each array in a sequence of arrays to be multiplied, you
are to determine an optimal computational sequence. Optimality, for this
problem, is relative to the number of individual multiplications required.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
For each array in the multiple sequences of arrays to be multiplied you
will be given only the dimensions of the array. Each sequence will consist
of an integer <I>N</I> which indicates the
number of arrays to be multiplied, and then <I>N</I> pairs of integers, each
pair giving the number of rows and columns in an array; the order in which
the dimensions are given is the same as
the order in which the arrays are to be multiplied. A value of zero
for <I>N</I> indicates the end of the input. <I>N</I> will be no larger than 10.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Assume the arrays are named  <IMG WIDTH=109 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline157" SRC="http://uva.onlinejudge.org/external/3/348img1.gif"   > . Your output for each input
case is to be a line containing a parenthesized expression clearly
indicating the order in which the arrays are to
be multiplied. Prefix the output for each case with the case number
(they are sequentially numbered, starting with 1). Your output should
strongly resemble that shown in the samples
shown below. If, by chance, there are multiple correct sequences, any
of these will be accepted as a valid answer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
1 5
5 20
20 1
3
5 10
10 20
20 35
6
30 35
35 15
15 5
5 10
10 20
20 25
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: (A1 x (A2 x A3))
Case 2: ((A1 x A2) x A3)
Case 3: ((A1 x (A2 x A3)) x ((A4 x A5) x A6))</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
349||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Transferable Voting (II)</TITLE>
<META NAME="description" CONTENT="Transferable Voting (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Transferable Voting (II)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Transferable Vote system for determining the winner of an election
requires that a successful candidate obtain an absolute majority of the
votes cast, even when there are more than
two candidates. To achieve this goal, each voter completes his or her
ballot by listing <I>all</I> the candidates in order of preference. Thus if
there are five candidates for a single position, each
voter's ballot must contain five choices, from first choice to fifth choice.
<P>
<P>
In this problem you are to determine the winner, if any, of elections
using the Transferable Vote system. If there are <I>c</I> candidates for the
single position, then each voter's ballot will
include <I>c</I> distinct choices, corresponding to identifying the voter's
first place, second place,  <IMG WIDTH=19 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/3/349img1.gif"   > , and <I>n</I>th place selections. Invalid
ballots will be discarded, but their presence will be noted.
A ballot is invalid if a voter's choices are not distinct (choosing the
same candidate as first and second choice isn't permitted) or if any of
the choices aren't legal (that is, in the range 1 to <I>c</I>).
<P>
<P>
For each election candidates will be assigned sequential numbers starting
with 1. The maximum number of voters in this problem will be 100, and
the maximum number of candidates will be 5.
<PRE>                               Table A                 Table B
                   -------------------------------    --------- 
                   Voter    First   Second  Third
                            Choice  Choice  Choice
                     1        1       2       4
                     2        1       3       2       1   3   2
                     3        3       2       1       3   2   1
                     4        3       2       1       3   2   1
                     5        1       2       3       1   2   3
                     6        2       3       1       3   1
                     7        3       2       1       3   2   1
                     8        3       1       1
                     9        3       2       1       3   2   1
                    10        1       2       3       1   2   3
                    11        1       3       2       1   3   2
                    12        2       3       1       3   1</PRE>
<P>
Consider a very small election. In Table A are the votes from the 12 voters
for the three candidates. Voters 1 and 8 cast invalid ballots; they will
not be counted. This leaves 10 valid
ballots, so a winning candidate will require at least 6 votes (the least
integer value greater than half the number of valid ballots) to win.
Candidates 1 and 3 each have 4 first choice votes,
and candidate 2 has two. There is no majority, so the candidate with the
fewest first choice votes, candidate 2, is eliminated. If there had been
several candidates with the fewest first
choice votes, any of them, selected at random, could be selected for
elimination.
<P>
<P>
With candidate 2 eliminated, we advance the second and third choice candidates
from those voters who voted for candidate 2 as their first choice. The result
of this action is shown in
Table B. Now candidate 3 has picked up 2 additional votes, giving a total
of 6. This is sufficient for election. Note that if voter 12 had cast the
ballot ``2 1 3&quot; then there would have been
a tie between candidates 1 and 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
There will be one or more elections to consider. Each will begin with a
line containing the number of candidates and the number of voters,
<I>c</I> and <I>n</I>. Data for the last election will be
followed by a line containing two zeroes.
<P>
<P>
Following the first line for each election will be <I>n</I> additional lines each
containing the choices from a single ballot. Each line will contain only
<I>c</I> non-negative integers separated by whitespace.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each election, print a line identifying the election number (they are
numbered sequentially starting with 1). If there were any invalid ballots,
print an additional line specifying the
number of such. Finally, print a line indicating the winner of the election,
if any, or indication of a tie; be certain to identify the candidates who
are tied. Look at the samples below for the <EM>exact</EM> output format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 12
1 2 4
1 3 2
3 2 1
3 2 1
1 2 3
2 3 1
3 2 1
3 1 1
3 2 1
1 2 3
1 3 2
2 3 1
3 12
1 2 4
1 3 2
3 2 1
3 2 1
1 2 3
2 3 1
3 2 1
3 1 1
3 2 1
1 2 3
1 3 2
2 1 3
4 15
4 3 1 2
4 1 2 3
3 1 4 2
1 3 2 4
4 1 2 3
3 4 2 1
2 4 3 1
3 2 1 4
3 1 4 2
1 4 2 3
3 4 1 2
3 2 1 4
4 1 3 2
3 2 1 4
4 2 1 4
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Election #1
   2 bad ballot(s)
   Candidate 3 is elected.
Election #2
   2 bad ballot(s)
   The following candidates are tied: 1 3
Election #3
   1 bad ballot(s)
   Candidate 3 is elected.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
350||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pseudo-Random Numbers</TITLE>
<META NAME="description" CONTENT="Pseudo-Random Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pseudo-Random Numbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Computers normally cannot generate really random numbers, but frequently
are used to generate sequences of pseudo-random numbers. These are generated
by some algorithm, but
appear for all practical purposes to be really random. Random numbers
are used in many applications, including simulation.
<P>
<P>
A common pseudo-random number generation technique is called the linear
congruential method. If the last pseudo-random number generated was <I>L</I>,
then the next number is generated
by evaluating ( <IMG WIDTH=143 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/3/350img1.gif"   > , where <I>Z</I> is a constant
multiplier, <I>I</I> is a constant increment, and <I>M</I> is a constant modulus.
For example, suppose <I>Z</I> is 7, <I>I</I> is 5, and <I>M</I> is 12. If the first
random number (usually called the <I>seed</I>) is 4, then we can determine the
next few pseudo-random numbers are follows:
<P>
<P> <IMG WIDTH=673 HEIGHT=152 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/3/350img1.gif"   > <P>
<P>
As you can see, the sequence of pseudo-random numbers generated by this
technique repeats after six numbers. It should be clear that the longest
sequence that can be generated using
this technique is limited by the modulus, <I>M</I>.
<P>
<P>
In this problem you will be given sets of values for <I>Z</I>, <I>I</I>, <I>M</I>, and the
seed, <I>L</I>. Each of these will have no more than four digits. For each such
set of values you are to determine the length
of the cycle of pseudo-random numbers that will be generated. But be
careful: the cycle might not begin with the seed!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each input line will contain four integer values, in order, for <I>Z</I>, <I>I</I>, <I>M</I>,
and <I>L</I>. The last line will contain four zeroes, and marks the end of the
input data. <I>L</I> will be less than <I>M</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input line, display the case number (they are sequentially numbered,
starting with 1) and the length of the sequence of pseudo-random numbers
before the sequence is repeated.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>7 5 12 4
5173 3849 3279 1511
9111 5309 6000 1234
1079 2136 9999 1237
0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: 6
Case 2: 546
Case 3: 500
Case 4: 220</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
351||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>``Cheapest'' Scores</TITLE>
<META NAME="description" CONTENT="``Cheapest'' Scores">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">``Cheapest'' Scores</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many games have scores associated with different types of events, and the
overall score is just the sum of the these individual event scores. Take,
for example, a hypothetical game called
<EM>Dunking</EM>. In this game, you can earn 2 points for a <EM>douser</EM> and 7 points
for a <EM>bucket</EM>. Immediately after a douser you can score an additional 3
points for a <EM>soaker</EM>, or an additional 6
points for a <EM>gusher</EM>. Note that you cannot get points for a soaker or a
gusher by themselves. Additionally, immediately following a soaker you can
get an additional point for a <EM>spray</EM>. The
table below gives all the scoring possibilities for Dunking:
<P>
<P> <IMG WIDTH=466 HEIGHT=130 ALIGN=BOTTOM ALT="tabular27" SRC="http://uva.onlinejudge.org/external/3/351img1.gif"   > <P>
<P>
<B>Note:</B>
An event sequence is defined as a number of consecutive scoring events
in which all but the first have a prerequisite event.  For
example, a <EM>douser/soaker/spray</EM> combination is one event sequence,
but three <EM>dousers</EM> in a row are three separate event sequences.
<P>
<P>
Given a particular score, what is the smallest number of event sequences
which will achieve that score? For Dunking, some scores are impossible
(like 1 and 3). Others can be obtained
in several ways: to get 8 points you could score one <EM>douser/gusher</EM>, a
<EM>douser/soaker/spray</EM> and a ``stand-alone&quot; <EM>douser</EM>, or four <EM>dousers</EM>. The one
<EM>douser/gusher</EM> is the optimum way to
achieve 8 points, since it requires only one ``event sequence.&quot;
<P>
<P>
In this problem you will be presented with the scoring schemes for
multiple games, and for each scheme, a set of potential scores to be
analyzed. For each game and score, you are to
determine if that score can be achieved, and if it can, the optimal manner
in which it can be achieved. Optimal, again, means achieving the score
with the smallest number of event sequences.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each game's scoring scheme will begin with a line containing an
integer  <IMG WIDTH=55 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/3/351img1.gif"   >  identifying the number of scoring events that are possible
for that game. The next <I>N</I> lines will contain the event
name (case significant, but no more than 16 characters), the integer
score associated with that event, and the name of an event that must
immediately precede it in the game, if required.
These items will be separated by whitespace (blanks and/or tabs). A value
of zero for <I>N</I> marks the end of the input data.
<P>
<P>
Following each scoring scheme will be a sequence of integers, each giving a
potential score. This sequence will terminate with zero, which is not to
be treated as a potential score.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each game/score pair, print a heading line similar to that shown in
the output shown below; it includes the game number (starting with 1), a
period, the score number (starting with 1
for each game), and the score in parentheses. On the following lines print,
with the <EM>exact</EM> format shown in the <EM>Sample Output</EM>,
the number of each type of scoring event required to obtain the specified
score, and the number of points
achieved by completing those events (in parentheses), or a message
indicating the score is impossible. Display a blank line after the output
for each, but last, game/score pair.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
douser      2
soaker      3     douser
spray       1	  soaker
gusher      6     douser
bucket      7
1
2
4
5
6
7
8
9
0
4
foul     0
freeshot 1 foul
goal     2
whopper  4
1
2
3
4
5
0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1.1 (1):
      This score is impossible.

Case 1.2 (2):
      1 douser (2)

Case 1.3 (4):
      2 dousers (4)

Case 1.4 (5):
      1 douser (2)
      1 soaker (3)

Case 1.5 (6):
      1 douser (2)
      1 soaker (3)
      1 spray (1)

Case 1.6 (7):
      1 bucket (7)

Case 1.7 (8):
      1 douser (2)
      1 gusher (6)

Case 1.8 (9):
      1 douser (2)
      1 bucket (7)

Case 2.1 (1):
      1 foul (0)
      1 freeshot (1)

Case 2.2 (2):
      1 goal (2)

Case 2.3 (3):
      1 foul (0)
      1 freeshot (1)
      1 goal (2)

Case 2.4 (4):
      1 whopper (4)

Case 2.5 (5):
      1 foul (0)
      1 freeshot (1)
      1 whopper (4)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
352||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Seasonal War</TITLE>
<META NAME="description" CONTENT="The Seasonal War">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Seasonal War</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The inhabitants of Tigerville and Elephantville are engaged in a seasonal war.
Last month, Elephantville
successfully launched and orbited a spy telescope called the Bumble Scope.
The purpose of the Bumble
Scope was to count the number of War Eagles in Tigerville. The Bumble Scope,
however, developed two
problems because of poor quality control during its construction. Its primary
lens was contaminated with bugs
which block part of each image, and its focusing mechanism malfunctioned so
that images vary in size and sharpness.
<P>
The computer programmers, who must rectify the Bumble Scope's problems are
being held hostage in a
Programming Contest Hotel in Alaland by elephants dressed like tigers.
The Bumble Scope's flawed images are
stored by pixel in a file called Bumble.in. Each image is square and each
pixel or cell contains either a 0 or a 1.
The unique Bumble Scope Camera (BSC) records at each pixel location a 1 if
part or all of a war eagle is
present and a 0 if any other object, including a bug, is visible. The
programmers must assume the following:
<P>
<DL COMPACT><DT><STRONG>a)</STRONG>
<DD> A war eagle is represented by at least a single binary one.
<P>
<DT><STRONG>b)</STRONG>
<DD> Cells with adjacent sides on common vertices, which contain binary
 ones, comprise one war
 eagle. A very large image of one war eagle might contain all ones.
<P>
<DT><STRONG>c)</STRONG>
<DD> Distinct war eagles do not touch  one another. This assumption is
probably flawed, but the  programmers are desperate.
<P>
<DT><STRONG>d)</STRONG>
<DD> There is no wrap-around. Pixels on the bottom are not adjacent to the
 top and the left
 is not adjacent to the right (unless, of course, there are only 2
 rows or 2 columns)
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Write a program that reads images of pixels from the input file (a text
file), correctly counts the number of war
eagles in the images and prints the image number and war eagle count for
that image on a single line in the
output file (also a text file).
<P>
<P>
Use the format in the sample output. Do this
for each image in the input file. Each image
will be preceded by a number indicating its square dimension. No dimension
will exceed 25.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>6
100100
001010 
000000
110000
111000
010100
8
01100101
01000001 
00011000 
00000010
11000011
10100010
10000001
01100000</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Image number 1 contains 3 war eagles. 
Image number 2 contains 6 war eagles.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
353||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pesky Palindromes</TITLE>
<META NAME="description" CONTENT="Pesky Palindromes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pesky Palindromes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A palindrome is a sequence of one or more characters that reads the same
from the left as it does from the right. For example, Z, TOT
and MADAM are palindromes, but ADAM is not.
<P>
<P>
Your job, should you choose to accept it, is to write a program that reads
a sequence of strings and for each string determines the
number of UNIQUE palindromes that are substrings.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file consists of a number of strings (one per line), of at
most 80 characters each, starting in column 1.
<P>
<P>
For each non-empty input line, the output consists of one line containing
the message:
<P>
<P>
<P>
<TT>The string '</TT><EM>input string</EM><TT>' contains </TT><EM>nnnn </EM><TT>palindromes.</TT>
<P>
<P>
<P>
where <EM>input string</EM> is replaced by the actual input string and <EM>nnnn</EM> is replaced by the number of UNIQUE palindromes that are substrings.
<P>
<P>
For input string ADAM, the UNIQUE palindromes are A, D, M and ADA so the
correct output would be
<P>
<P>
<P>
<TT>The string 'ADAM' contains 4 palindromes.</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>boy 
adam 
madam 
tot</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>The string 'boy' contains 3 palindromes. 
The string 'adam' contains 4 palindromes.
The string 'madam' contains 5 palindromes.
The string 'tot' contains 3 palindromes.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Note</A></FONT></H2>
<P>
The 3 unique palindromes in 'boy' are 'b', 'o' and 'y'.
<P>
The 4 unique palindromes in 'adam' are 'a', 'd', 'm', and 'ada'.
<P>
The 5 unique palindromes in 'madam' are 'm', 'a', 'd', 'ada', and 'madam'.
<P>
The 3 unique palindromes in 'tot' are 't', 'o' and 'tot'.
<P>
</BODY>
</HTML>

______________________________________________________
354||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Crazy Calculator</TITLE>
<META NAME="description" CONTENT="Crazy Calculator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Crazy Calculator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The two properties of arithmetic operators which determine the order in
which they are executed in an expression are their precedence
levels and their associativities. Precedence levels determine the order in
which operators with different precedence levels are executed.
Associativities determine the order in which a repeated operator is
executed. Left associative operators are evaluated left to right while
right associative operators are evaluated right to left. Different operators
with equal precedence levels are evaluated left to right.
Examples:
<P>
<UL><LI> If the precedence level of <TT>*</TT> is higher than that of <TT>+</TT>, the
expression 5*3+4 would evaluate to 19.<LI> If the precedence level of <TT>+</TT> is higher than that of <TT>*</TT>, the expression 5*3+4 would evaluate to 35.<LI> Left-associativity of <TT>-</TT> would cause the expression
3-2-1 to be interpreted as (3-2)-1 which evaluates to 0.<LI> Right-associativity of <TT>-</TT> would cause 3-2-1 to be interpreted as
3-(2-1) which evaluates to 2.
</UL>
<P>
In the Southeastern region of the planet ACM, a strange collection of
dialects has resulted in the use of non-standard operators for the
integer operations of plus, minus, times, and integer divide. The
operations are the usual binary operations, but the symbols used, their
precedences and their associativities, vary widely across the region.
Your team is to write a program that will implement a simple integer
calculator with operations &quot;<TT>+</TT>&quot;, &quot;<TT>-</TT>&quot;, &quot;<TT>*</TT>&quot;, and &quot;<TT>/</TT>&quot; where &quot;<TT>/</TT>&quot; denotes integer division. The catch is, your calculator has to deal with all of the local dialects.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself indicating the number of the cases following, each of them as described below. This line is followed by a blank line, and there is also a blank line between two consecutive inputs.<BR>
The input for each case will contain 4 lines that describe the local symbol set
followed by 1 or more lines each containing an expression using the
local symbol set to be evaluated. The first four lines each contain a
four character string  <IMG WIDTH=56 HEIGHT=16 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/3/354img1.gif"   >  beginning in column one, where:
<P>
<DL COMPACT><DT><STRONG></STRONG>
<DD>  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/3/354img1.gif"   >  denotes the standard operator that is being described
<P>
<DT><STRONG></STRONG>
<DD>  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/3/354img1.gif"   >  denotes the local symbol being used for that operator
<P>
<DT><STRONG></STRONG>
<DD>  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/3/354img1.gif"   >  is a digit denoting the local precedence of the operator (higher digit means higher precedence)
<P>
<DT><STRONG></STRONG>
<DD>  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline53" SRC="http://uva.onlinejudge.org/external/3/354img1.gif"   >  is a single letter denoting the local associativity of the
operator (<TT>L</TT> for left associativity, <TT>R</TT> for right).
<P>
 </DL>
<P>
The line
<P>
<PRE>-@1R</PRE>
<P>
means that the symbol <TT>@</TT> will be used to denote minus which will be right
associative and have precedence 1. The expression
5@3@1 under these circumstances will evaluate to 3.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input expression, your program must print one line containing
the expression with standard operators followed by a
space, an equal sign, and the result.<BR>
The outputs of two consecutive cases will be separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>1

+@1L
-+3R
*-2R
//2R
1@1
5@5+4
2@3-12/6/5+3
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>1+1 = 2
5+5-4 = 6
2+3*12/6/5-3 = 14
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Note</A></FONT></H2>
<P>
The last expression, parenthesized to show you the order of
execution is (2+((3*12)/(6/(5-3)))).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Notes from the testsetter</A></FONT></H2>
<UL>
<LI>operators were selected from the set <PRE>~@#$%^&amp;*()_+=-{}[]:;|&lt;&gt;,.?/</PRE>
  and the four operators for the arithmetic operations are unique.
  
<LI>numbers in the input have no leading zeros.

<LI>lines are max. 1024 characters long.

<LI>input numbers, answers and intermediate results all fit into 32-bit signed integers.
</UL>
<P></BODY>
</HTML>

______________________________________________________
355||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Bases Are Loaded</TITLE>
<META NAME="description" CONTENT="The Bases Are Loaded">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Bases Are Loaded</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program to convert a whole number specified in any base (2..16) to
a whole number in any other base (2..16). ``Digits&quot; above 9
are represented by single capital letters; e.g. 10 by A, 15 by F, etc.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each input line will consist of three values. The first value will be a
positive integer indicating the base of the number. The second value is
a positive integer indicating the base we wish to convert to. The third
value is the actual number (in the first base) that we wish to convert.
This number will have letters representing any digits higher than 9 and
may contain invalid ``digits&quot;. It will not exceed 10 characters. Each
of the input values on a single line will be separated by at least one space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Program output consists of the original number followed by the string ``<TT>base</TT>&quot;, followed by the original base number, followed by the
string ``<TT>=</TT>&quot; followed by the converted number followed by the string ``<TT>base</TT>&quot; followed by the new base. If the original number is invalid,
output the statement
<P>
<P>
<P>
<EM>original Value</EM> <TT>is an illegal base</TT> <EM>original Base</EM> <TT>number</TT>
<P>
<P>
<P>
where <EM>original Value</EM> is replaced by the value to be converted and <EM>original Base</EM> is replaced by the original base value.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>2 10 10101
5 3 126
15 11 A4C</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>10101 base 2 = 21 base 10 
126 is an illegal base 5 number 
A4C base 15 = 1821 base 11</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
356||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Square Pegs And Round Holes</TITLE>
<META NAME="description" CONTENT="Square Pegs And Round Holes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Square Pegs And Round Holes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A circle 2<I>n</I> - 1 units in diameter has been drawn centered on a 2<I>n</I> by 2<I>n</I>
chessboard. The construction for <I>n</I> = 3 is illustrated below.
<P>
<center><img src=356img2.gif></center>
<P>
Write a program that will determine the number of cells of the board
which contain a segment of the circle and the number of cells of
the board which lie entirely inside the circle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Each line of the input file will contain a positive integer no greater than 150.
For each input value <I>n</I>, write two statements on
consecutive lines of the output file in the format indicated in the sample
output. Print a blank line between successive outputs.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>3
4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>In the case n = 3, 20 cells contain segments of the circle. 
There are 12 cells completely contained in the circle.

In the case n = 4, 28 cells contain segments of the circle. 
There are 24 cells completely contained in the circle.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
357||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Let Me Count The Ways</TITLE>
<META NAME="description" CONTENT="Let Me Count The Ways">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Let Me Count The Ways</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
After making a purchase at a large department store, Mel's change was 17
cents. He received 1 dime, 1 nickel, and 2 pennies. Later that day, he was
shopping at a convenience store. Again his change was 17 cents. This time
he received 2 nickels and 7 pennies. He began to wonder ' &quot;How many
stores can I shop in and receive 17 cents change in a different configuration
of coins? After a suitable mental struggle, he decided the answer was 6.
He then challenged you to consider the general problem.
<P>
<P>
Write a program which will determine the number of different combinations
of US coins (penny: 1c, nickel: 5c, dime: 10c, quarter: 25c, half-dollar: 50c) which may be used to
produce a given amount of money.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of a set of numbers between 0 and 30000 inclusive, one
per line in the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output will consist of the appropriate statement from the selection below on a single line in the output file for each input value. The number <I>m</I> is the
number your program computes, <I>n</I> is the input value.
<P>
<P>
<P>
<TT>There are </TT> <I>m</I> <TT>ways to produce </TT> <I>n</I> <TT>cents change.</TT>
<P>
<TT>There is only 1 way to produce </TT> <I>n</I> <TT>cents change.</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>17 
11
4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>There are 6 ways to produce 17 cents change. 
There are 4 ways to produce 11 cents change. 
There is only 1 way to produce 4 cents change.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
358||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Don't Have A Cow, Dude</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Don't Have A Cow, Dude" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Don't Have A Cow, 
      Dude</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>Old MacDonald has a farm and on this farm he has a cow - and a fenced 
circular pasture with a radius of 100 yards. He plans to tie the cow to a post 
on the circunference of the pasture. He wants the cow to be able to eat one third 
of the grass in the pasture. How long should the rope be? 
<P>
<P>You must solve a generalization of this problem. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001001000000000000000>Input and 
Output</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>Write a program which will input two numbers, 
<I>R</I> (<EM>radius</EM> - an integer between 1 and 1000 inclusive) and 
<I>P</I> (<EM>part of</EM> - a real number between 0.0 and 0.5 inclusive) and 
solve old MacDonald's problem. How long a rope should old MacDonald use to allow 
the cow to eat <I>P</I> of the grass in the circular pasture of radius <I>R</I>. 
Express your answer correct to two decimal places. 
<P>
<P>For each test case, output a statement in the format shown in the sample 
output below. The number P and the answer shall be rounded to two decimal places.
The outputs of two consecutive cases will be separated by a blank line.<BR>
<p>Note: recommended value for PI is 2*acos(0), but any value within 1e-10 of
the exact value of PI will lead you to the expected answer.
<P>
<H2><FONT color=#0070e8><A name=SECTION0001002000000000000000>Sample 
input</A></FONT></H2>
<P><PRE>1

100 0.33</PRE>
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
output</A></FONT></H2>
<P><PRE>R = 100, P = 0.33, Rope = 13.24</PRE>
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001004000000000000000>Note</A></FONT></H2>
<P>The value 13.24 in the sample output is purposely not correct. It is included 
only to show you the correct format 
<P></P></BODY></HTML>

______________________________________________________
359||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Sex Assignments And Breeding Experiments</TITLE>
<META NAME="description" CONTENT="Sex Assignments And Breeding Experiments">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Sex Assignments And Breeding Experiments</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Everyone is familiar with the pictorial representation of family trees.
In these &quot;pictures&quot; one uses points and lines to represent family
structures and interfamily relationships. Thus, if M and F are the
parents of three children, two boys and one girl, we have the figure
below:
<P>
<center><img src=359img4.gif></center>
<P>
The next figure might represent the inter-family relationship of two
families
<P>
<center><img src=359img5.gif></center>
<P>
It is easy to conceive of a large number of such pictures. Some can represent
family trees and some cannot. You are to consider the
problem of characterizing those which can represent family trees. We will
actually work in a simpler context than that of human
relationships. Most human societies preclude family trees of the forms
shown below.
<P>
<center><img src=359img6.gif></center>
<P>
It is, however, quite complicated to give conditions which would eliminate
pictures of this sort. For simplicity, we suppose that we are
dealing with a population which is completely characterized by the condition
of bisexual reproduction (M &amp; F). If the picture or graph
is such that by a proper assignment of sexes to the members of the
population, the picture represents the results of a breeding
experiment which could theoretically take place, then we say the graph is
sexy. Otherwise the graph is not sexy. You must write a
program to examine an arbitrary directed graph and determine if it is sexy.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input will be a series of descriptions of graphs in the following form:
<P>
<P>
An integer <I>n</I> indicating the number of nodes in the graph, followed by
an integer <I>m</I> indicating the number of directed edges in the graph
will appear on the first line of input. The next <I>m</I> lines of the file
will each contain a pair <I>x</I>, <I>y</I> of integers in the range 1 - <I>n</I>. Each pair will represent a directed edge from node <I>x</I> to node <I>y</I>. Input is terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each graph in the input file, you will output the appropriate one of
the following statements.
<P>
<P>
<P>
<TT>Graph number </TT> <I>i</I> <TT>is sexy</TT>
<P>
<TT>Graph number </TT> <I>i</I> <TT>is not sexy</TT>
<P>
<P>
The number <I>i</I> represents the number of the graph in the input file.
<P>
<P>
We are adopting the convention that the existence of a directed edge
from <I>x</I> to <I>y</I> indicates that <I>x</I> is a parent of <I>y</I>. Further, each individual
usually has exactly two parents. No individual can have two parents of
the same sex or more than two parents. Breeding experiments do
not extend into the indefinite past. A point is always reached where
one or both of the parents of a member of the population are
unknown. The nodes with no parents would appear on the top level of
a sexy graph. Births of individuals are assumed to be sequential in
time. Thus the following graph is not sexy.
<P>
<center><img src=359img7.gif></center>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample input</A></FONT></H2>
<P>
<PRE>5 6 
1 3 
2 3 
1 4 
2 4 
1 5 
2 5 
3 3 
1 2 
2 3 
3 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample output</A></FONT></H2>
<P>
<PRE>Graph number 1 is sexy
Graph number 2 is not sexy</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
360||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Don't Get Hives From This One!</TITLE>
<META NAME="description" CONTENT="Don't Get Hives From This One!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Don't Get Hives From This One!</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Billy Bee has big ideas. He wants to use an abandoned level of the beehive as
a ``fun-house maze.&quot; The idea is to sell tickets and make big bucks. 
The sample below is ``rectangular&quot; and has eleven rows and twelve columns. Billy's maze
will also be rectangular, and similarly shaped, but might have different
dimensions.  The cells are identified by a sequence of numbers, starting
with 1, in the pattern shown. The maze comes from the fact that many
adjacent cells have
openings between them. There are also two openings to the outside:  an
entrance and an exit.
<P>
<center><img src=360img3.gif></center>
<P>
You can assume that the cells in the maze are oriented as shown above
(horizontal and slanted sides, but no vertical sides), and
that the second row of the maze starts below and to the right
of the first room in the maze.
<P>
<P>
Billy has already set up his maze, but he is not very smart
and can't solve it for himself. He has hired you to help him find a path
through his maze (or, if his maze has no solution, to inform
him of the fact). In your own quest for big bucks,
you decide to develop a computer program to solve such
``rectangular hexagonal mazes&quot; by the well known
<I>right-hand rule</I> and charge Billy Bee for
the development costs.  Then you'll turn around and sell the
software to Bill Gates, hoping you don't get stung in the process.
<P>
<P>
The righthand rule states that, when you enter a planar
maze, if you place your right hand on the entrance wall, and then walk
forth, never removing the hand from the wall, you will eventually
exit the maze through the exit door (or, if the exit is
inaccessible, you will exit through the entrance door).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain zero or more maze descriptions, immediately
following one another.
<P>
<P>
The first line of each maze description will contain
two positive integers,  <I>r</I> and <I>c</I>, (<i>r<=30, c<=30</i>)
separated by a space, indicating, respectively,
the number of rows and columns in the maze. Alternatively,
the line may contain just two zeroes, separated by a space,
indicating that there are no more mazes to read and solve.
<P>
The second line of each maze description will also contain
two positive integers, separated by a space, indicating
the room number and wall number, respectively, of the maze's
entrance. (Walls of each room are assumed to be numbered
clockwise, starting from <I>topwall</I>=1.)
<P>
The third line will identify the room number and wall
number of the maze's exit in the same manner.
The entrance and exit to the maze are different doors.
<P>
The remaining lines each describe a room in the
maze.  Each of these lines contains a room number,
followed by from one to six integers, each in the
range 1 to 6, inclusive, separated by single spaces.
The integers following the room numbers indicate the
walls containing openings,
and may be in any order, as may be the lines themselves.
Rooms will not be repeated in a data set. Rooms not listed in a data set
have no doors (for example, room 60 in the sample data).
<P>
The end of the maze description is indicated by a
line containing only the integer 0.  The line
after that either begins the next maze description, or
contains the two zeroes that indicate the end of data.
<P>
<P>
Your program may assume the data to be valid and consistent. The maze shown in the picture would be described using the following Sample Input data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
First, the program should list the sequence of rooms
encountered during the search for a solution,
twenty rooms per line (except possibly the final line),
with values on the same line separated by a single
space.  Note that the last room listed will either be
the exit room (if a solution was found)
or the entrance room (otherwise).
<P>
Second, the line immediately below the final line of the
search path should contain either the phrase <TT>SOLUTION FOUND</TT>
or else the phrase <TT>NO SOLUTION</TT>, corresponding to whether or not
a path from the entrance to the exit was found.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>11 12
1 1
5 1
1 1 4
56 1
57 1 3 5 6
58 3 5
3 3
11 3 6
12 4
13 1 2
14 4 6
15 6
16 1 2 6
17 3 4
18 5 6
19 4 5
20 3 4
21 5
22 4 5
23 2 6
24 1 4 5
25 2 4
26 1 5
27 2 6
28 2 5
29 1 4
30 2 4
31 1 2
32 1 3 5
33 2 5 4
34 1 3
4 4
5 1 3
7 5 3
8 3
9 6 3
10 5
36 1
37 1 4
38 2 4
39 2 6
41 1 6
42 1 3
43 5
44 4
45 1 4
48 5 6
49 1 2
50 1 5
51 3
53 3 4
54 2 5
55 2
59 2 6
63 2
64 2 6
65 1 6
0
0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 13 7 14 26 31 19 25 37 49 43 49 37 25 19 31 26 14 7 13
1
NO SOLUTION</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
361||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cops and Robbers</TITLE>
<META NAME="description" CONTENT="Cops and Robbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cops and Robbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to simulate a game of Cops and Robbers.  In this game,
cops, robbers, and other citizens are
represented as points in a two-dimensional plane. A citizen is said to be
<EM>safe</EM> if it is within a triangle formed by three cops.  A citizen
is said to be <EM>robbed</EM> if it is not safe and is within a triangle
formed by three robbers.  A citizen is <EM>neither safe nor robbed</EM> if
it satisfies neither of the above conditions.
For purposes of this problem, a triangle consists of three
points, and a point is within a triangle if
it is inside or on the boundary of the triangle.
<P>
<P>
In the following diagram, filled circles represent cops, filled
squares represent robbers, and filled triangles represent citizens.
Dashed lines indicate triangles formed by cops or robbers
<P>
<center><img src=361img2.gif></center>
<P>
In this example, citizens A and B are safe, citizen C is robbed,
and citizen D is neither.
<P>
<P>
Given a set of cops and robbers and several citizen queries,
<B>efficiently</B> determine whether each citizen is safe, robbed, or neither.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of several data sets.  The first line of each data
set contains three non-negative integers
<I>c</I>, <I>r</I>, and <I>o</I>:  the number of cops,
robbers, and other citizens, respectively.
<I>c</I>, <I>r</I>, and <I>o</I> will each be at most 200.  The next <I>c</I>
lines contain the (<I>x</I>, <I>y</I>) coordinates of each cop, one per line.
The next <I>r</I> lines contain the (<I>x</I>, <I>y</I>) coordinates
of each robber, one per line.  The next <I>o</I> lines contain
the (<I>x</I>, <I>y</I>) coordinates of each other citizen, one per line.
All coordinates are integers between -500 and 500
inclusive. 
<P>
<P>
Your program must stop processing
input when it encounters a data set in
which <I>c</I>, <I>r</I>, and <I>o</I> are all zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for each data set begins with a line identifying the data
set.  For each other citizen in the data set, output the line
<P>
<P>
<P>
<TT>Citizen at (</TT><I>x</I>,<I>y</I><TT>) is </TT><I>status</I><TT>.</TT>
<P>
<P>
<P>
where (<I>x</I>,<I>y</I>) is the location of the citizen from the input and <EM>status</EM>
is one of <TT>safe</TT>, <TT>robbed</TT> or <TT>neither</TT>.
Follow the format given in the Sample Output.  Leave a blank line after
the output from each data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 3 2
0 0
10 0
0 10
20 20
20 0
0 20
5 5
15 15
3 3 1
0 0
10 0
0 10
20 20
20 0
0 20
40 40
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Data set 1:
     Citizen at (5,5) is safe.
     Citizen at (15,15) is robbed.

Data set 2:
     Citizen at (40,40) is neither.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
362||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>18,000 Seconds Remaining</TITLE>
<META NAME="description" CONTENT="18,000 Seconds Remaining">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">18,000 Seconds Remaining</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A feature of many file transfer programs
is the ability to estimate the amount of time remaining in
the transfer.  These programs estimate the time remaining based on the number
of bytes left to be transferred and the rate of transfer in previous seconds.
You are to write a program to simulate this behavior.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will be a series of data sets, each set describing one file transfer.
The first line of each data set will be a single non-negative integer, telling
the size of the file in bytes.  The subsequent lines will be the number
of bytes transmitted in each second (all non-negative integers).  The sum
of the bytes transmitted will equal the number of bytes in the file.
<P>
<P>
The end of input will be indicated by a file size of 0 bytes.
This data set should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each data set should begin with a line with the number of
the data set and the size of the file being transferred.
Then, there should be update lines estimating how many seconds
remain, issued once every 5 seconds during the transfer.
<P>
<P>
To estimate the number of seconds remaining,
first determine the transfer rate (bytes/second) for the
previous 5 seconds.  If no bytes were transferred during this time, then
the transfer is <EM>stalled</EM>, and your
program should report this.  Otherwise, divide the number of bytes remaining
to be transferred by the transfer rate for the previous 5 seconds to estimate
the number of seconds remaining.
<P>
<P>
Report the number of seconds remaining as an integer.
Always round up in reporting how much time
is remaining (so if there are 12.2 seconds remaining, you should report
there are 13 seconds remaining).
<P>
<P>
At the end of the transfer, print a line telling how many seconds the transfer
took.  Use the format in the Sample Output.
<P>
<P>
There should be one blank line after the output from each data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>100
10
20
20
0
10
0
10
0
10
0
20
200
60
30
100
10
50
5
5
5
5
25
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Output for data set 1, 100 bytes:
   Time remaining: 4 seconds
   Time remaining: 5 seconds
Total time: 11 seconds

Output for data set 2, 200 bytes:
Total time: 4 seconds

Output for data set 3, 50 bytes:
   Time remaining: 1 seconds
   Time remaining: stalled
   Time remaining: stalled
   Time remaining: 0 seconds
Total time: 20 seconds</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
363||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Approximate Matches</TITLE>
<META NAME="description" CONTENT="Approximate Matches">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Approximate Matches</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a non-null string of text <I>S</I>, a non-null
string of text <I>P</I>, and an integer  <IMG WIDTH=40 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline60" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   > , find
all non-null substrings of <I>S</I> that match or ``approximately
match&quot; <I>P</I> with at most <I>k</I> mismatches.
The substring  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  is considered to <EM>match</EM> the string <I>P</I> if they are
identical (as you might expect), and <EM>approximately match</EM>
if the strings differ by no more than <I>k</I> mismatches, as defined next.
<P>
<P>
If a minimum of <I>m</I> characters have to be removed from  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  to make it
identical to <I>P</I>, then  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  approximately matches <I>P</I> with
<I>m</I> mismatches.  If a minimum of <I>n</I> characters
have to be removed from <I>P</I> to make it identical to
 <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   > , then  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  approximately matches <I>P</I> with <I>n</I>
mismatches.  If <I>m</I> characters have to be removed from  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  and <I>n</I>
characters have to be removed from <I>P</I> to make  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  and <I>P</I>
identical, then  <IMG WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline68" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   >  approximately matches
<I>P</I> with <I>m</I>+<I>n</I> mismatches (here <I>m</I>+<I>n</I> should be minimized).
<P>
<P>
Consider the string <I>S</I> =``<TT>The sky is blue</TT>&quot;.
<P>
<UL><LI> The substring ``<TT>The sky</TT>&quot; in <I>S</I> matches the
string ``<TT>The sky</TT>&quot;.<LI> The substring ``<TT>The sky</TT>&quot; in <I>S</I> approximately matches the
string ``<TT>The skye</TT>&quot; with one mismatch (the extra ``<TT>e</TT>&quot; in the string).)<LI> The substring ``<TT>sky is</TT>&quot; in <I>S</I> approximately matches the
string ``<TT>skis</TT>&quot; with two mismatches (the characters ``<TT>y</TT>&quot;
and ``<TT> </TT>&quot; in the substring).<LI> The substring ``<TT>sky is</TT>&quot; in <I>S</I> approximately matches the
string ``<TT>tennis</TT>&quot; with eight
mismatches (four characters are removed from ``<TT>sky is</TT>&quot; and
four are removed from ``<TT>tennis</TT>&quot;).
</UL>
<P>
As another example, the string ``<TT>scrapple</TT>&quot; approximately
matches the string ``<TT>apples</TT>&quot; with four
mismatches (by removing <TT>s</TT>, <TT>c</TT>, <TT>r</TT> from
``<TT>scrapple</TT>&quot; and <TT>s</TT> from ``<TT>apples</TT>&quot;).  Although there are
other ways to remove letters from these two strings to make the
results identical (for example removing all but the <TT>s</TT> from both strings),
four characters is the minimum number that can be removed.
<P>
<P>
Note that case is important in this problem; thus <TT>T</TT> does not
match <TT>t</TT>, but <TT>T</TT> approximately matches <TT>t</TT> with two mismatches.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each data set consists of three lines that contain <I>k</I>, <I>S</I>, and <I>P</I>,
respectively. <I>k</I> is an integer; <I>S</I> is a string of
length between 1 and 50 inclusive,
and <I>P</I> is a string of length between 1 and 20
inclusive.  Your program must stop processing data when it encounters
a negative value for <I>k</I><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each match with <I>i</I> mismatches ( <IMG WIDTH=69 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline144" SRC="http://uva.onlinejudge.org/external/3/363img1.gif"   > ), your program must
generate a line of one of the following forms (whichever is appropriate):
<P>
<P>
<P>
<I>Q</I> matches <I>P</I>
<P>
<I>Q</I> matches <I>P</I> with 1 mismatch
<P>
<I>Q</I> matches <I>P</I> with <I>i</I> mismatches
<P>
<P>
<P>
where <I>Q</I> is a substring of <I>S</I> that matches <I>P</I> or that approximately
matches <I>P</I> with <I>i</I> mismatches. If more than one substring in
<I>S</I> matches or approximately matches <I>P</I>,
they must be printed in the order they appear in <I>S</I> (from left to right).
Substrings that start at the same position must be listed in the order
of their size (shortest to longest). No value for <I>Q</I> may be listed more
than once. If there is no match, no output should be generated. Leave a blank
line after the output for
each data set (even if there is no output for the data set).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
He did not care about the carpet in the car.
car
2
ABC
BC
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE> car matches car with 1 mismatch
ca matches car with 1 mismatch
car matches car
care matches car with 1 mismatch
ar matches car with 1 mismatch
carp matches car with 1 mismatch
car. matches car with 1 mismatch

AB matches BC with 2 mismatches
ABC matches BC with 1 mismatch
B matches BC with 1 mismatch
BC matches BC
C matches BC with 1 mismatch
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
364||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Constitutional Computing</TITLE>
<META NAME="description" CONTENT="Constitutional Computing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Constitutional Computing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<BLOCKQUOTE> <EM>Representatives and direct Taxes shall be apportioned among the several States
which may be included in this Union, according to their respective
Numbers... The Number of Representatives shall
not exceed one for every thirty thousand, but
each State shall have at least one representative.</EM>
<P>
Article I, Section 2 of the U.S. Constitution
<P>
</BLOCKQUOTE>
<P>
When the writers of the U.S. Constitution wrote those words in Philadelphia
in 1787, they could not have foreseen the trouble
they would cause mathematicians.
There are numerous different interpretations
of how to ``apportion according to respective
Number&quot;.  For more than 100 years there
was debate as to how to do this apportionment, because
different apportionment methods tend to favor
different states.  Fortunately,
we have computers and can easily compare some
of the more popular apportionment methods.
Your program should compute the number
of representatives each state will get from the
methods and tell which if any of the apportionments
will give the state more representatives.
<P>
<P>
Suppose there were five states in the union:
Anxiety, Boredom, Confusion, Dismay, and Ecstasy,
with the following populations (given in thousands):
<P>
<P>
<P> <IMG WIDTH=120 HEIGHT=103 ALIGN=BOTTOM ALT="tabular24" SRC="http://uva.onlinejudge.org/external/3/364img1.gif"   > <P>
<P>
<P>
The total population of this country then is 630 thousand. For a house
of 30 representatives, each representative
should represent 21 thousand people (notice
we have relaxed the constitutional requirement
of at most one representative
for each 30,000), so the true apportionment of representatives would be:
<P>
<P>
<P> <IMG WIDTH=134 HEIGHT=103 ALIGN=BOTTOM ALT="tabular29" SRC="http://uva.onlinejudge.org/external/3/364img1.gif"   > <P>
<P>
<P>
Unfortunately, it is impossible to send half of a representative to Congress,
so there needs to be away of dividing the 30 seats, giving just a positive
integral number of representatives
to each state. (All states must have at least one representative.)
<P>
<P>
There are four major apportionment methods: the
Hamilton Method, the Jefferson Method, the Adams
method, and the Webster method.  The Hamilton method
starts with the true apportionment and gives
each state the whole number corresponding
to the true value, so Anxiety will get 2 representatives, Boredom will get
8, etc.  States with less than one representative
will get one representative.  Then, if there are any representatives left over,
they will go to the states in the order of
the fractional part, where the state with the largest fractional part
(in this case, Dismay with a fractional part of 0.57)
will get the first of the extra representatives,
and the second of the extra representatives
will go to the state with the second largest
fraction (Confusion, with a fractional part of 0.52), etc.
<P>
<P>
The other three methods will not necessarily use the
divisor given by dividing the total population by
the number of seats. Instead, they use different
divisors to give the desired number of representatives,
making sure each state has at least one representative.
The Jefferson Method will find a divisor so the sum
of the truncated quotients gives the desired number
of representatives.  19,750 is a possible
divisor for the example using the Jefferson method.
Dividing by 19,750 gives the following quotients and truncating
the quotients gives the number of representatives.
<P>
<P>
<P> <IMG WIDTH=393 HEIGHT=126 ALIGN=BOTTOM ALT="tabular34" SRC="http://uva.onlinejudge.org/external/3/364img1.gif"   > <P>
<P>
<P>
The Adams Method also looks for a divisor
to come up with the desired number of representatives, but will round
<B>up</B> instead of truncate.  One possible
divisor for the Adams Method with this example would be 23,000.  Dividing
by 23,000 gives the following quotients
and rounding up gives the number of representatives.
<P>
<P>
<P> <IMG WIDTH=393 HEIGHT=126 ALIGN=BOTTOM ALT="tabular40" SRC="http://uva.onlinejudge.org/external/3/364img1.gif"   > <P>
<P>
<P>
Finally, the Webster Method finds a divisor
so when the quotient is rounded (using
standard rounding rules, where fractional
parts of 0.5 or greater round up and fractional
parts of less than 0.5 round down), the sum
of the quotients is the desired number of representatives. In this case, a
divisor of 21,000 could be used for the Webster method, giving the same
number of representatives as the Hamilton method, but
<EM>this is not always the case</EM>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for this program will be zero or more data sets.  The first line
of each data set will be the number of states
in the set. There will be at most 50 states in the data. There will then be
one line for each state, giving the state
name (a string of exactly 5 characters starting
in column1), at least one blank, and the population (a positive integer).
After the information about the states
will be one or more integers, one per line,
representing the number of representatives.
You may assume this will always be greater than or equal to the number of
states, so each state is guaranteed to have at least
one representative.  The end of the number
of representatives is indicated by 0 as a number of representatives.
<P>
<P>
The end of input is indicated by a data set with 0 states.
This input set should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Before each set of data, give the number
of the data set.  For each number of representatives,
echo the number of representatives and for
each state, tell if there is an apportionment method that
gives the state more representatives than
the other methods.  You may assume the algorithms will
work for the input data as described above.
Use the format of the Sample Output below.
Leave a blank line after each number of representatives.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
Anxit   42
Bored  178
Confu  221
Dismy  117
Ecsta   72
30
5
0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Data set 1:
For 30 representatives:
Anxit is favored by no method.
Bored is favored by Jefferson.
Confu is favored by Hamilton and Jefferson and Webster.
Dismy is favored by Jefferson and Adams and Webster.
Ecsta is favored by Hamilton and Adams.

For 5 representatives:
Anxit is favored by no method.
Bored is favored by no method.
Confu is favored by no method.
Dismy is favored by no method.
Ecsta is favored by no method.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
365||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Welfare Reform</TITLE>
<META NAME="description" CONTENT="Welfare Reform">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Welfare Reform</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The federal government has recently passed
a reform mandating that all welfare recipients
must work to receive benefits.  In accordance
with this, parents will receive childcare
subsidies for children under 13
(i.e., the child must be younger than 13 on September 1 of this year).
<P>
The portion of childcare the parent must
pay (called the <EM>parent fee</EM>) is based on income and number
of children in the family.  The following chart
shows an example of how parent fees are determined:
<P>
<PRE>     Fee  | FAM01  FAM02  FAM03  FAM04  FAM05  FAM06  FAM07  FAM08  FAM09  FAM10
     -----|---------------------------------------------------------------------
     0.80 |     0      0      0      0      0      0      0      0      0      0
     1.60 |  3735   5040   6365   7650   8955  10260  11565  12870  14175  15480
     2.40 |  5604   7562   9550  11479  13437  15395  17353  19311  21270  23228
     3.20 |  7470  10030  12590  15150  17710  20270  22830  25390  27950  30510
     4.00 |  9338  12538  15739  18939  22139  25339  28540  31740  34940  38140
     4.80 | 11205  15045  18885  22725  26565  30405  34245  38085  41925  45765
     5.60 | 11579  15547  19515  23483  27451  31419  35387  39355  43323  47291
     6.40 | 11953  16049  20145  24240  28336  32432  36528  40624  44720  48815
     7.20 | 12327  16551  20774  24998  29222  33445  37669  41892  46116  50340
     8.00 | 12701  17052  21404  25755  30107  34458  38810  43161  47513  51864
     8.80 | 13075  17554  22033  26513  30992  35471  39950  44430  48909  53388
     9.60 | 13449  18056  22663  27270  31877  36484  41091  45698  50305  54912</PRE>
<P>
Here ``<TT>FAMxx</TT>&quot; means a family with <TT>xx</TT>
children.  Each entry in the chart represents
a base salary; successive rows in a column define a
salary range.  For example, in column
``<TT>FAM04</TT>&quot;, row 2 defines a salary range
from $7650 up to but not including $11479.  The
base parent fee for this salary range
is 1.60, corresponding to row 2 (the start
of the range).  The final row defines
the base parent fee for all salaries equal to or
above the entries in that row.  For example,
in column ``<TT>FAM01</TT>&quot;, any salary equal to or above $13449
has base parent fee 9.60.
<P>
<P>
From this chart, you determine the base parent
fee from the family size and income.  The base parent fee applies to the
youngest child under 13; the fee for each other child under
13 is half of the base parent fee.  For
example, a family with four children with an
income of $8000 would have a base parent
fee of 1.60.  The parent will pay 1.60
for the youngest child and 0.80 for every other
child under 13.  Remember that only children
younger than 13 will get the child care subsidy; thus there
is no parent fee for children 13 or
over.  Your task is to figure out the parent
fee for each child in a family.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file has two parts:  the first part contains the parent fee table
and the second part contains family records.
<P>
<P>
The parent fee table is specified using the first 12 lines of the input file.
Each line contains one non-negative real
number (the parent fee) and 10 non-negative
integers (the incomes for families with one
to ten children), separated by one or more spaces.  Note that the values
in this table may differ from those listed
in the example table above, but it is guaranteed
that the numbers in each column will increase as the table is
examined from top to bottom.
<P>
<P>
The family records begin on the next line.
The first line of the family records section
contains a positive integer <I>n</I>; there are <I>n</I> families
to process.  Each family record begins with the
parent's name (a string of 1 to 20 characters
on its own line).  The next line contains an
integer <I>k</I>, the number of children in the
family ( <IMG WIDTH=81 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/365img1.gif"   > ) and a non-negative integer
<I>s</I>, the family's income. The next <I>k</I> lines
contain the children's birthdays, one per
line.  Each birthday consists of three integers
of the form <EM>mm dd yy</EM> (<EM>mm</EM> = month, <EM>dd</EM> = day,
<EM>yy</EM>  = year); leading zeroes will not be
used for one digit months or days.
All birthdays will be valid and no child will be older than 25.
<P>
Children in the same family will not share birthdays.
<P>
<P>
Assume the first line of the input file contains 10 zeros for the incomes as 
shown in the sample below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each child, output the parent name,
child's age (on September 1, 1996), and parent
fee. Children should be listed in the order
they appear in the input.  Leave a blank line after
the output for each family.  Follow the format illustrated in the
Sample Output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0.80      0      0      0      0      0      0      0      0      0      0
1.60   3735   5040   6365   7650   8955  10260  11565  12870  14175  15480
2.40   5604   7562   9550  11479  13437  15395  17353  19311  21270  23228
3.20   7470  10030  12590  15150  17710  20270  22830  25390  27950  30510
4.00   9338  12538  15739  18939  22139  25339  28540  31740  34940  38140
4.80  11205  15045  18885  22725  26565  30405  34245  38085  41925  45765
5.60  11579  15547  19515  23483  27451  31419  35387  39355  43323  47291
6.40  11953  16049  20145  24240  28336  32432  36528  40624  44720  48815
7.20  12327  16551  20774  24998  29222  33445  37669  41892  46116  50340
8.00  12701  17052  21404  25755  30107  34458  38810  43161  47513  51864
8.80  13075  17554  22033  26513  30992  35471  39950  44430  48909  53388
9.60  13449  18056  22663  27270  31877  36484  41091  45698  50305  54912
3
Smith
5 28000
1 1 80
1 1 90
1 1 91
1 1 92
1 1 94
Jones
2 15000
12 20 87
3 22 96
Doe
3 9500
1 1 95
2 1 96
3 3 90</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Smith 16 0.00
Smith 6 2.80
Smith 5 2.80
Smith 4 2.80
Smith 2 5.60

Jones 8 2.00
Jones 0 4.00

Doe 1 0.80
Doe 0 1.60
Doe 6 0.80</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
366||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cutting Up</TITLE>
<META NAME="description" CONTENT="Cutting Up">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cutting Up</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Quilters often have to cut fabric into squares.  To do this, they have a
special tool (called a rotary cutter) that can cut through many layers
of fabric at a time.  The exact number of layers depends on the type of fabric
being cut.  In using a rotary cutter,
the problem is not how long the cut needs to be
(it is just as easy to make a cut one centimeter
long as it is to make a cut 20 centimeters
long), but how many cuts need to be made.
<P>
<P>
For example, to cut a 2 by 3 piece of fabric into 1 by
1 squares takes five cuts if only one layer of fabric may be cut at a time:
<P>
<center><img src=366img2.gif></center>
<P>
If two layers may be cut at a time, it will only
take three cuts (the two pieces of fabric can be placed on
top of each other after the first cut, so when the
second and third cuts are made, they
will also make the fourth and fifth cuts).
<P>
<P>
In cutting fabric, pieces may be placed on
top of each other.  Pieces do not need to be of
identical shapes to be put on top of
each other.  For example, if the fabric above had first been cut vertically,
a 1 by 2 piece could have been put on top of the 2 by
2 piece.  Fabric may be rearranged between
cuts.  Fabric can not be folded.  For
example, to cut a 1 by 3 piece of fabric into
squares will take 2 cuts, not 1 (if the fabric
were folded in half before cutting).
Quilters are thrifty people so they never have any waste: if a piece of fabric
is <I>m</I> by <I>n</I>, they will get <I>mn</I> pieces from it.
<P>
<P>
Write a program to determine the fewest cuts necessary to cut a piece
of fabric into squares.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of a number of lines.  Each line will have 3 integers
describing the fabric to be cut. The first is the maximum number
of layers that can be cut at a time (between 1 and 200) and the last two
are the dimensions (between 1 and 20 in each dimension).
<P>
<P>
A line consisting of the values 0 0 0 will mark the end of input.
This line should not be processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each line, echo the dimensions and give the smallest number of cuts
that are necessary to cut it entirely into 1 by 1 squares.  Use the format
given in the Sample Output below.
<P>
<P>
Leave a blank line after each line of output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 3 2
1 5 5
2 3 2
3 2 3
10 5 5
1 2 1
0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3 by 2 takes 5 cuts

5 by 5 takes 24 cuts

3 by 2 takes 3 cuts

2 by 3 takes 3 cuts

5 by 5 takes 6 cuts

2 by 1 takes 1 cuts</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
367||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Halting Factor Replacement Systems</TITLE>
<META NAME="description" CONTENT="Halting Factor Replacement Systems">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Halting Factor Replacement Systems</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A Factor Replacement System (FRS) transforms an input integer to another
integer by applying rules.  Each rule specifies how a set of prime
factors of the input integer are replaced by a second
set of prime factors.  Consider these rules:
<P>
<P>
<P> <IMG WIDTH=407 HEIGHT=37 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/3/367img1.gif"   > <P>
<P>
<P>
Rule 1 specifies that if the integer has one factor of two, one factor of three,
and two factors of five, then those factors
are removed and replaced with two factors of
seven.  Using this rule, the integer 450
(<IMG WIDTH=100 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/367img1.gif"   > )
becomes 147 ( <IMG WIDTH=62 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/3/367img1.gif"   > ), but the
integer 44 ( <IMG WIDTH=72 HEIGHT=28 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/3/367img1.gif"   > ) is unaltered. Rule 2 specifies
that a factor of two should be removed from the integer.
Thus 147 is unaltered
by this rule but 44 becomes 22 with one application of the rule.
<P>
<P>
The FRS rules are ordered.  For a given input,
the rules are examined in order to find a match. When
a match is found, the rule is applied once and the process
begins again with the first rule. An FRS halts
when no rules can be applied.  In the above example,
the FRS terminates on input
450 with output value 147 and on input 44 with output 11.
<P>
<P>
Given the rules of an FRS and several positive
integers, produce the result of applying the FRS to each integer.
It is guaranteed that the FRS will halt for each input integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each FRS description begins with a line containing
a non-negative integer <I>n</I> ( <IMG WIDTH=49 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/3/367img1.gif"   > ),
the number of rules. The next <I>n</I> lines contain the rules. Each rule consists
of two positive integers separated by at least one space;
the first integer is the left part of the rule and the second
integer is the right part of the rule, as described above.  The
next line contains a non-negative
integer <I>k</I>, the number of input integers.
Each of the next <I>k</I> lines contains a single integer to be input to the FRS.
<P>
<P>
Your program must stop processing input when it reaches an FRS in which
<I>n</I> is zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each data set, output a line indicating the
data set number.  For each input integer, output
a single line containing the input integer and the final FRS value, as shown
in the Sample Output. Leave a blank line after
the output from different FRS's.
<P>
<P>
Note that although all numbers used in the input file for rules and FRS
input values are 32 bit integers,
the output value from an FRS may exceed the maximum value that can be
represented by a 32 bit integer (or even a floating point number).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
150 49
2 1
2
450
44
2
9 4
3 1
1
27
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>FRS #1:
     450 becomes 147
     44 becomes 11

FRS #2:
     27 becomes 4</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
368||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Indexing Web Pages</TITLE>
<META NAME="description" CONTENT="Indexing Web Pages">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Indexing Web Pages</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program to create an index
of a small collection of World Wide Web pages.
Each ``page&quot; is a text file in a special format called HTML (HyperText
Markup Language).  The HTML format includes
regular text and special HTML commands, which are always enclosed in
anglebraces. For example, the string
<TT>&lt;A HREF=&quot;layout.htm&quot;&gt;</TT> is an HTML command
meaning that the following text should be highlighted; a user click on
the highlighted text would cause a web browser to fetch and display the
file <TT>layout.htm</TT>.
<P>
<P>
Your program's job is to read an HTML file called
<TT>index.htm</TT> and all the files referenced within
<TT>index.htm</TT> by the HREF command and all the files
referenced by those files, and so on until there are
no new files to read.  Your program
should also read the file <TT>webpage.in</TT> containing
a list of words and show a list of all the
files referenced from <TT>index.htm</TT> which
contain each word (see the Sample Output).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Assumptions</A></FONT></H2>
<P>
<OL><LI> Any opening angle bracket (the ``&lt;&quot; character)
will be followed sooner or later by a matching
closing angle bracket (the ``&gt;&quot; character).<LI> A word is any string of characters found in a file that:
<DL COMPACT><DT><STRONG>-</STRONG>
<DD> does not lie between matching angle brackets
<DT><STRONG>-</STRONG>
<DD> contains only letters (no spaces, hyphens, apostrophes, etc.)
<DT><STRONG>-</STRONG>
<DD> is not part of a longer word (e.g., in ``balloon&quot;, we would
not consider ``loon&quot; to be a word).
<P>
 </DL><LI> Words will have at most 25 characters.<LI> Words which differ only in case should be considered
to be the same.  Thus, ``Word&quot;, ``word&quot;, ``WORD&quot;, and ``wOrD&quot;
would be considered to be the same word.<LI> The only HTML command you need to worry about is the HREF command,
and you can assume that it will always be
in the form <TT>&lt;A HREF=&quot;filename&quot;&gt;</TT>, with no additional spaces
or other characters; that the name of the file is legal and in the same
directory as the file you are already reading; and that the name of the
file will not exceed twelve characters
in length.  Filenames will always end with ``<TT>.htm</TT>&quot;.<LI> HTML files may be mutually referential or self referential,
but there will be at most one hundred different files to read.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The initial HTML file you should start indexing
will be named <TT>index.htm</TT>.  Next the other files, including <TT>webpage.in</TT>, with a single blank line separating each listing. The words in <TT>webpage.in</TT> will be placed one word per line, with no additional spaces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
List each word in the standard input file, followed by a list of the file names
it is found in, in the following format:
<P>
<PRE>&quot;word&quot; can be found in the following pages:
     filename1
     filename2

&quot;word&quot; can be found in the following pages:
     filename3

&quot;word&quot; can not be found in any page.</PRE>
<P>
Where <TT>word</TT> is the word from the input
file, and <TT>filename1</TT>, <TT>filename2</TT>, and so on, are
the names of the files containing the word.  Each file name should be
indented five spaces: a single blank line should separate each listing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input (there are three files: <TT>index.htm</TT>, <TT>layout.htm</TT>,
and <TT>webpage.in</TT>)</A></FONT></H2>
<P>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Indexing Web Pages&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Write a program to create an index of a small collection
of World Wide Web pages.  Each &quot;page&quot; is a text file in a
special format called HTML (HyperText Markup Language).  The
HTML format includes regular text and special HTML commands,
which are always enclosed in angle braces.  For example, the
string &lt;A HREF=&quot;layout.htm&quot;&gt; is an HTML command meaning that
the following text should be highlighted; a user click on
the highlighted text would cause a web browser to fetch and
display the file layout.htm.&lt;/P&gt;
&lt;H1&gt;Following Links&lt;/H1&gt;
&lt;P&gt;Don't forget that links can be &lt;A HREF=&quot;index.htm&quot;&gt;
self-referential&lt;/A&gt;!&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;A bunch of gibberish and a word&gt;
Note that there is no rule that the file needs to be legal HTML
(if you know the rules), or that words really be wordseiwlaoieu;a. 
&lt;A HREF=&quot;index.htm&quot;&gt;Watch out for mutual references!
&lt;/HTML&gt;

file
index
html
HTML
recursion
word
is</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>&quot;file&quot; can be found in the following pages:
     index.htm
     layout.htm

&quot;index&quot; can be found in the following pages:
     index.htm

&quot;html&quot; can be found in the following pages:
     index.htm
     layout.htm

&quot;HTML&quot; can be found in the following pages:
     index.htm
     layout.htm

&quot;recursion&quot; can not be found in any page.

&quot;word&quot; can not be found in any page.

&quot;is&quot; can be found in the following pages:
     index.htm
     layout.htm</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
369||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Combinations</TITLE>
<META NAME="description" CONTENT="Combinations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Combinations</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Computing the exact number of ways that <I>N</I> things can be taken <I>M</I> at a
time can be a great challenge when <I>N</I> and/or <I>M</I> become very large.  Challenges
are the stuff of contests.  Therefore, you are to make just such a
computation given the following:
<P>
<P>
<P>
<B>GIVEN:</B>
<P> <IMG WIDTH=481 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath41" SRC="http://uva.onlinejudge.org/external/3/369img1.gif"   > <P>
<P>
Compute the <B>EXACT</B> value of:
<P>
<P> <IMG WIDTH=329 HEIGHT=41 ALIGN=BOTTOM ALT="displaymath43" SRC="http://uva.onlinejudge.org/external/3/369img1.gif"   > <P>
<P>
You may assume that the final value of <I>C</I> will fit in a 32-bit Pascal LongInt
or a C long.
<P>
<P>
For the record, the exact value of 100! is:
<P>
<PRE>     93,326,215,443,944,152,681,699,238,856,266,700,490,715,968,264,381,621,
        468,592,963,895,217,599,993,229,915,608,941,463,976,156,518,286,253,
        697,920,827,223,758,251,185,210,916,864,000,000,000,000,000,000,000,000</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
     The input to this program will be one or more lines each containing zero
or more leading spaces, a value for <I>N</I>, one or more spaces, and a value for <I>M</I>. The last line of the input file will contain a dummy <I>N</I>, <I>M</I> pair with both values equal to zero.  Your program should terminate when this line is read.
<P>
<P>
The output from this program should be in the form:
<P>
<P>
<P>
<I>N</I> <TT>things taken</TT> <I>M</I> <TT>at a time is</TT> <I>C</I> <TT>exactly.</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>     100  6
      20  5
      18  6
       0  0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>100 things taken 6 at a time is 1192052400 exactly.
20 things taken 5 at a time is 15504 exactly.
18 things taken 6 at a time is 18564 exactly.
<P>
</BODY>
</HTML>

______________________________________________________
370||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bingo</TITLE>
<META NAME="description" CONTENT="Bingo">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bingo</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The game of BINGO is another of the great American pastimes.  Our
version of BINGO is to be played on a square card containing a 5  <IMG WIDTH=19 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/3/370img1.gif"   >  matrix.
There are several test cases. The first five lines of the test case will each contain five integer values
separated by spaces in the range  <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/3/370img1.gif"   > ; these values are to be placed
in the corresponding row of the matrix from left to right.  Immediately
following the values for the card will be a series of lines each
containing one ``called&quot; number such that  <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/3/370img1.gif"   > ; the last line will
contain an invalid ``called&quot; number of zero (0).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
     For this problem, you are to write a program that accepts the integers
that are to be placed in the cells of a ``BINGO&quot; card.  Then you are to read
in the ``called&quot; values, which may or may not be the same as the numbers on
your BINGO card, one at a time until you either find a BINGO, or you run out
of called numbers.
<P>
<P>
A BINGO occurs when one of the following rules has been fulfilled:
<P>
<OL><LI> Each of the five elements in a row have either been matched by a
          called number, or are FREE,<LI> Each of the five elements in a column have either been matched by
          a called number, or are FREE,<LI> Each of the four corner elements have either been matched by a
          called number, or are FREE.<LI> Each of the five elements in either prime diagonal have been
          matched by a called number or are FREE.
</OL>
<P>
Any element in the matrix containing a zero (0) after the original load is
FREE, and is considered to have been matched.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
If you run out of called numbers before you
find a BINGO, you are to print out the following message immediately
following the last valid ``called&quot; number:
<P>
<PRE>No BINGO on this card.</PRE>
<P>
If you find a BINGO at some point in the input, you are to ignore the rest
input values, and print out a notification of the BINGO followed by a list of
comma separated triples in ROW ASCENDING order (and in COLUMN ASCENDING order if tie)
that represent the Row, Column, and Value of all of the elements making up the BINGO.
If there is more than a kind of BINGO at the same time, you should output all of them
ordered by the kind of BINGO, with no blank lines between them.
The output should have the following format:
<P>
<P>
<P>
BINGO #<I>N</I><BR>
<I>R</I>,<I>C</I>,<I>V</I><BR>
<I>R</I>,<I>C</I>,<I>V</I><BR>
...<BR>
<I>R</I>,<I>C</I>,<I>V</I><BR>
<P>
<P>
Where:
<P>
<I>N</I> = kind of BINGO as specified above
<P>
<I>R</I> = row subscript from 1 to 5, and
<P>
<I>C</I> = column subscript from 1 to 5, and
<P>
<I>V</I> = called number value that matched the cell contents, or the
               word FREE.
<P>
<P>
Print a blank line after each data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<PRE>
 1  2  3  4  5
11 12 13 14 15
21 22  0 24 25
31 32 33 34 35
91 92 93 94 95
21
22
24
25
99
0
 1  2  3  4  5
11 12 13 14 15
21 22  0 24 25
31 32 33 34 35
91 92 93 94 95
99
98
97
96
0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<PRE>
BINGO #1
3,1,21
3,2,22
3,3,FREE
3,4,24
3,5,25

No BINGO on this card.

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
371||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ackermann Functions</TITLE>
<META NAME="description" CONTENT="Ackermann Functions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ackermann Functions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     An Ackermann function has the characteristic that the length of the
sequence of numbers generated by the function cannot be computed directly
from the input value.  One particular integer Ackermann function is the
following:
<P> <IMG WIDTH=379 HEIGHT=40 ALIGN=BOTTOM ALT="displaymath32" SRC="http://uva.onlinejudge.org/external/3/371img1.gif"   > <P>
<P>
This Ackermann has the characteristic that it eventually converges on 1.  A
few examples follow in which the starting value is shown in square brackets
followed by the sequence of values that are generated, followed by the length
of the sequence in curly braces:
<P>
<PRE>     [10] 5 16 8 4 2 1 {6}
     [13] 40 20 10 5 16 8 4 2 1 {9}
     [14] 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 {17}
     [19] 58 29 88 44 22 ... 2 1 {20}
     [32] 16 8 4 2 1 {5}
     [1] 4 2 1 {3}</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Your program is to read in a series of pairs of values that represent the
first and last numbers in a closed sequence.  For each closed sequence pair
determine which value generates the longest series of values before it
converges to 1.  The largest value in the sequence will not be larger than
can be accomodated in a 32-bit Pascal LongInt or C long.  The last pair of
values will be 0, 0.  The output from your program should be as follows:
<P>
<P>
<P>
<TT>Between</TT> <I>L</I> <TT>and</TT> <I>H</I>, <I>V</I> <TT>generates the longest sequence of</TT>
 <I>S</I> <TT>values.</TT>
<P>
<P>
<P>
Where:
<P>
<I>L</I> = the lower boundary value in the sequence
<P>
<I>H</I> = the upper boundary value in the sequence
<P>
<I>V</I> = the first value that generates the longest sequence, 
                   (if two or more values generate the longest sequence 
                    then only show the lower value)
<I>S</I> = the length of the generated sequence.
<P>
<P>
In the event that two numbers in the interval should both produce equally
long sequences, report the first.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>  1 20
 35 55
  0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Between 1 and 20, 18 generates the longest sequence of 20 values.
Between 35 and 55, 54 generates the longest sequence of 112 values.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
372||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>WhatFix Notation</TITLE>
<META NAME="description" CONTENT="WhatFix Notation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
<!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">WhatFix Notation</A></FONT>&nbsp;</B></TABLE></CENTER></H1-->
<P>
There are three traversal methods commonly used in compilers and calculators:
<P>
<PRE>     prefix
     infix
     postfix</PRE>
<P>
For example, a single expression can be written in each form
<P>
<PRE>     infix:    a + b * c
     prefix:   + a * b c
     postfix:  a b c * +</PRE>
<P>
Note that prefix and postfix ARE NOT mirror images of each other!  The
advantage of prefix and postfix notations is that parentheses are unnecessary
to prevent ambiguity.
<P>
<P>
In our traversal the following symbols are operators with precedence rules
going from highest to lowest:
<P>
<P>
<P> <IMG WIDTH=193 HEIGHT=100 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/3/372img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
You are given two strings. The first string is the infix version of the
expression. The second string is the prefix version of the expression.
Determine the postfix version of the expression and print it out on a single
line.
<P>
<P>
All input will be single characters separated by a space. 

<P> <IMG WIDTH=193 HEIGHT=100 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/3/372img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Output</A></FONT></H2>
<P>

Output must be the
same, single characters separated by a space. There are no special sentinels
identifying the end of the data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>a + b - c
+ a - b c</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>INFIX   =&gt; a + b - c
PREFIX  =&gt; + a - b c
POSTFIX =&gt; a b c - +</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
373||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Romulan Spelling</TITLE>
<META NAME="description" CONTENT="Romulan Spelling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Romulan Spelling</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Romulans use a language that can be approximated with the English
alphabet and normal punctuation marks. Their spelling rules are even stranger
than English, however. In particular, they have a rule that states:
<P>
<P>
<P>
G before P except after E or when pronounced X as in npgukbor or wpguk.
<P>
<P>
Operationally, you can detect the X pronounciation by the string PGUK
appearing in the word. Also, the Romulan rules for capitalization are
different from ours, so capital letters can appear anywhere in a word.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Given a file containing lines of Romulan text, you are to output the text
with spelling corrected according to the G before P except after E rule given
above. No input line will contain more than 70 characters including spaces.
<P>
<P>
For example, the input file corresponding to the romulan translation of the
quote:
<P>
<P>
&quot;I received the wierd piece of pie from my neighbor sam who in turn recieved
the weird peice of pei from his nieghbor harry,&quot;
might well be ...
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
I rpEpgvpd tKp wgprd tgpEp of tgp from my npguKbor sam wKo gn turn
rpEgpvpd tKp wpgrd tpgEp of tpg from Kgs ngpuKbor Karry,
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
I rpEpgvpd tKp wgprd tgpEp of tgp from my npguKbor sam wKo gn turn
rpEpgvpd tKp wgprd tgpEp of tgp from Kgs npguKbor Karry,
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
374||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Big Mod</TITLE>
<META NAME="description" CONTENT="Big Mod">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Big Mod</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Calculate
<P>
<P> <IMG WIDTH=313 HEIGHT=17 ALIGN=BOTTOM ALT="displaymath25" SRC="http://uva.onlinejudge.org/external/3/374img1.gif"   > <P>
<P>
for large values of <I>B</I>, <I>P</I>, and <I>M</I> using an efficient algorithm. 
(That's right, this problem has a time dependency !!!.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
     Three integer values (in the order <I>B</I>, <I>P</I>, <I>M</I>) will be read one number per line.  <I>B</I> and <I>P</I> are integers in the range 0 to 2147483647 inclusive.  <I>M</I> is an integer in the range 1 to 46340 inclusive.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
     The result of the computation.  A single integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
18132
17

17
1765
3

2374859
3029382
36123</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>13
2
13195</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
375||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds --><HTML><HEAD><TITLE>Inscribed Circles and Isosceles Triangles</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Inscribed Circles and Isosceles Triangles" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution><LINK href="htmlatex.css" rel=STYLESHEET>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000>Inscribed Circles and Isosceles 
      Triangles</A></FONT>&nbsp;</B></TR></TBODY></TABLE></CENTER></H1>
<P>Given two real numbers 
<P>
<DL compact>
  <DT><STRONG><I>B</I></STRONG> 
  <DD>the width of the base of an isosceles triangle in inches 
  <DT><STRONG><I>H</I></STRONG> 
  <DD>the altitude of the same isosceles triangle in inches 
  <P></P></DD></DL>
<P>Compute to six significant decimal places 
<P>
<DL compact>
  <DT><STRONG><I>C</I></STRONG> 
  <DD>the sum of the circumferences of a series of inscribed circles stacked one 
  on top of another from the base to the peak; such that the lowest inscribed 
  circle is tangent to the base and the two sides and the next higher inscribed 
  circle is tangent to the lowest inscribed circle and the two sides, etc. In 
  order to keep the time required to compute the result within reasonable 
  bounds, you may limit the radius of the smallest inscribed circle in the stack 
  to a single precision floating point value of 0.000001. 
  <P></P></DD></DL>
<P>For those whose geometry and trigonometry are a bit rusty, the center of an 
inscribed circle is at the point of intersection of the three angular bisectors. 

<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A></FONT></H2>
<P>The input begins with a single positive integer on a line by itself 
indicating the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.<BR>The input will be a single line of text containing 
two positive single precision real numbers (<I>B</I> <I>H</I>) separated by 
spaces. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A></FONT></H2>
<P>For each test case, the output must follow the description below. The outputs 
of two consecutive cases will be separated by a blank line.<BR>The output should 
be a single real number with twelve significant digits, six of which follow the 
decimal point. The decimal point must be printed in column 7. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
Input</A></FONT></H2><PRE>1

0.263451 0.263451
</PRE>
<H2><FONT color=#0070e8><A name=SECTION0001004000000000000000>Sample 
Output</A></FONT></H2><PRE>     0.827648
</PRE></BODY></HTML>

______________________________________________________
376||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>More Triangles ... THE AMBIGUOUS CASE</TITLE>
<META NAME="description" CONTENT="More Triangles ... THE AMBIGUOUS CASE">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">More Triangles ... THE AMBIGUOUS CASE</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The ambiguous case in trigonometry calls for the solution of triangles when
given two sides and the angle opposite one of them.  You are to write a
program that accepts such data and reports all solutions.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for each case will consist of a single input line containing
three real numbers separated by an arbitrary number of spaces.  The first two
real numbers on each input line represent the lengths of two sides of a
triangle.  The third real number on each input line is an angle (measured in
degrees) which is opposite the second of the two given sides.  The stream of
input cases is terminated when all three pieces of data are zero.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program is to read the data and analyze the data for each case, and
produce a report of the results according to the format shown below.  Each
case report consists of the number of solutions for the case, and the
corresponding solutions (to two decimal places) when the number of solutions
is nonzero. If there are two solutions, you should print them in decreasing
order. Please assign a case number to each set of data starting with 1.

<p>No trailing spaces should be print. All numbers are aligned to the right.
Follow the column specification shown in sample output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2.00 2.00 30.00
2.00 3.00 130.00
1.00 1.00 90.00
698.64 217.77 5.52
0.00 0.00 0.00
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Case    A      B    THETA  # of    Side   Side
 #     side   side  (deg)  Triags    1      2
   1   2.00   2.00  30.00     1     3.46
   2   2.00   3.00 130.00     1     1.29
   3   1.00   1.00  90.00     0
   4 698.64 217.77   5.52     2   902.54 488.26

END OF REPORT for 4 cases
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
377||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Cowculations</TITLE>
<META NAME="description" CONTENT="Cowculations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Cowculations</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A primitive cow culture was discovered by noted anthropologist Dr. Bo
Vine.  Hundreds of computation tablets were unearthed in a pasture
somewhere near Dallas.  Dr. Vine managed to decipher the mystery of the
tablets when he realized they represented mathematical calculations.  He
says ``I've always suspected that cows are smarter than they lead us to
believe and here's the proof.  The big breakthrough was realizing that they
are not able to do math by cownting on their fingers, but they are able to
think on their feet.  But now I have hundreds of these tablets and I need
help in verifying my hypothesis.&quot;
<P>
<P>
Write a program that helps Dr. Vine verify his
hypothesis.  This problem statement describes how he thinks the tablets
should be interpreted.  Each tablet contains six lines and each line contains
a sequence of cow symbols.  The first two lines represent cow numbers,
the next three represent operations on those numbers and the sixth
represents the result. Cow numbers make use of four symbols: V U C and
D most closely represent the marks made by the cow hooves, so we will
use them to represent the symbols.  The numbers on the first two lines of a
tablet are always a sequence of 5 of these symbols, and the number on the
sixth line of a tablet is always a sequence of 8 of these symbols.
<P>
<P>
To interpret the cow calculations one must keep track of two numbers,
hereafter referred to as <EM>Num1</EM> and <EM>Num2</EM>.  Originally <EM>Num1</EM> is equal to the
number on line 1 of a tablet and <EM>Num2</EM> is equal to the number on line 2 of
a tablet.  However the value of <EM>Num2</EM> can change as a result of the
operations.  There are four possible operations, represented by the symbols
<TT>A</TT>, <TT>R</TT>, <TT>L</TT>, and <TT>N</TT>.
<P>
<P>
Operation  <TT>A</TT> causes <EM>Num2</EM> to become the ``sum&quot; of <EM>Num1</EM> and <EM>Num2</EM>, using this addition table:
<P>
<P>
<P> <IMG WIDTH=214 HEIGHT=109 ALIGN=BOTTOM ALT="tabular34" SRC="http://uva.onlinejudge.org/external/3/377img1.gif"   > <P>
<P>
<P>
The first symbol in a result box represents the result of the addition.  The
second symbol in a box represents a carry symbol.
<P>
<P>
For example: U  <TT>A</TT> V = U <code>   </code> and <code>   </code> C  <TT>A</TT> C = V with a carry of U
<P>
<P>
Examples of cow addition are:
<P>
<P>
<P>
VUCDV   <TT>A</TT>  VUCDV  =  VDUCV
<P>
DVVCU   <TT>A</TT>  CVUCU  = UUVCVC
<P>
<P>
Operation <TT>R</TT> causes <EM>Num2</EM> to have its symbols shifted right one position,
with the rightmost symbol being lost and a  V being placed into the
leftmost position.  For example VVCDU
would become VVVCD.  Operation <TT>L</TT> causes <EM>Num2</EM> to have its symbols
shifted left one position, with the leftmost symbol being kept and a  V
placed into the rightmost position.  For example VVCDU would become
VVCDUV.  <TT>N</TT> is the null operation.  It has no effect on <EM>Num2</EM>.
<P>
<P>
After the operations have been performed on <EM>Num1</EM> and <EM>Num2</EM> the final
value of <EM>Num2</EM> is hopefully the value marked on the sixth line of the
tablet.  If the final value of <EM>Num2</EM> does not make use of 8 symbols then it
is padded with V's on the left (VDCCC becomes VVVVDCCC).
<P>
<P>
Dr. Vine says ``I have already verified that all the tablets conform to the
hypothesis in terms of the format of the tablets, number of lines and
symbols, types of symbols, etc.  But I need to verify that the result of the
mathematical operation described on lines 1 through 5 is indeed on line 6.&quot;
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10 describing
how many tablets are represented. The next  <IMG WIDTH=44 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/3/377img1.gif"   >  lines represent the <I>N</I>
tablets as described in the problem statement.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
There should be <I>N</I>+2 lines of output. The first line of output
should read <TT>COWCULATIONS OUTPUT</TT>. There will then be one line of
output for each tablet that states either <TT>YES</TT> (the tablet follows Dr. Vine's
hypothesis) or <TT>NO</TT> (the tablet does not follow Dr. Vine's hypothesis).
The final line of output should read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
VVVVU
VVVVU
A
A
A
VVVVVVUV
VVCCV
VVDCC
L
R
A
VVVVUCVC
VVCCV
VVDCC
R
L
A
VVVVUCVV
VVUUU
VVVVU
A
N
N
VVVVVUCU
DDDDD
VVVVU
A
L
L
UVVVVVVV</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>COWCULATIONS OUTPUT
YES
YES
YES
NO
YES
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
378||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Intersecting Lines</TITLE>
<META NAME="description" CONTENT="Intersecting Lines">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Intersecting Lines</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
We all know that a pair of distinct points on a plane defines a line
and that a pair of lines on a plane will intersect in one of three
ways: 1) no intersection because they are parallel, 2) intersect in a
line because they are on top of one another (i.e. they are the same
line), 3) intersect in a point.  In this problem you will use your
algebraic knowledge to create a program that determines how and
where two lines intersect.
<P>
<P>
Your program will repeatedly read in four
points that define two lines in the <I>x</I>-<I>y</I> plane and determine how and
where the lines intersect.  All numbers required by this problem
will be reasonable, say between -1000 and 1000.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10
describing how many pairs of lines  are represented.  The next <I>N</I>
lines will each contain eight integers.  These integers represent the
coordinates of four points on the plane in the order  <IMG WIDTH=132 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   > .  Thus each of these input lines represents two lines on
the plane: the line through  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   >  and  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   >  and the line through
 <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   >  and  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   > .  The point  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   >  is always distinct from
 <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   > .  Likewise with  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   >  and  <IMG WIDTH=51 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/3/378img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
There should be <I>N</I>+2 lines of output.  The first line of
output should read <TT>INTERSECTING LINES OUTPUT</TT>.  There will
then be one line of output for each pair of planar lines represented
by a line of input, describing how the lines intersect: none, line, or
point.  If the intersection is a point then your program should
output the <I>x</I> and <I>y</I> coordinates of the point, correct to two decimal
places.  The final line of output should read ``<TT>END OF OUTPUT</TT>&quot;.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
0 0 4 4 0 4 4 0
5 0 7 6 1 0 2 3
5 0 7 6 3 -6 4 -3
2 0 2 27 1 5 18 5
0 3 4 0 1 2 2 5</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>INTERSECTING LINES OUTPUT
POINT 2.00 2.00
NONE
LINE
POINT 2.00 5.00
POINT 1.07 2.20
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
379||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Hi-Q</TITLE>
<META NAME="description" CONTENT="Hi-Q">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Hi-Q</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Hi-Q is a popular solitaire game that comes in a small box with a
playing board that has little holes in the shape of a cross and 32
little pegs that fit into the holes.  Starting with the centermost hole
open, players move the pegs by jumping one peg over another,
either in a horizontal or vertical direction and removing each peg
that is jumped over.  Diagonal jumps are not allowed.  The object
for players is to remove as many pegs from the board as possible. 
This problem involves writing a program that will automatically
play Hi-Q so that we can investigate how the game might unfold
based on various opening arrangements of pegs.
<P>
<P>
There is a peg board with the following
shape and with holes numbered from 1 to 33 as follows:
<P>
<PRE>                              1         2         3
                              4         5         6
          7         8         9        10        11        12        13
         14        15        16        17        18        19        20
         21        22        23        24        25        26        27        
                             28        29        30
                             31        32        33</PRE>
<P>
An instance of the game begins with some holes having pegs in
them and the rest of the holes being empty.   The game proceeds by
jumping one peg over another, either horizontally or vertically,
with the peg that is jumping landing in an empty hole, and the peg
being jumped over being removed from the board.  For example, if
9 is empty and 10 and 11 are not, then the peg in 11 can be
``moved&quot; to 9 with the peg in 10 being removed. After this move,
10 and 11 would both be empty but 9 would have a peg in it.
<P>
Given a specific board configuration your program will pick and
model a specific move, over and over, until no more moves are
available. Your program will then report the sum of the holes that
still have pegs in them.  At any point during the game there may be
more than one possible move available.  In such a case always
model the move with the target hole of the moving peg as large as
possible.  If there is more than one move available to the largest
possible target hole, then choose from those moves the one with
the larger source hole.
<P>
<P>
For example, if the board looks like this, with <TT>X</TT> representing a peg
and <TT>O</TT> representing a hole:
<P>
<PRE>                              O         O         O
                              O         O         O
          O         O         O         X         O         X         O
          O         O         O         X         O         X         O
          O         O         O         O         X         O         O
                              O         O         O
                              O         O         O</PRE>
<P>
then the following jumps would be made: 1: from 12 over 19 to 26
(26, 24, and 5 are the only possible targets and 26 is the largest), 2:
from 26 to 24 over 25 (5 and 24 are the only possible targets with
24 &gt; 5 plus 24 is the target for two possible moves, one from 26
and one from 10; the one from 26 is used since 26 &gt; 10), 3: from
17 to 29 (29 &gt; 5), and two pegs would be left, one in hole 10 and
one in hole 29.  Thus 39 would be reported as the result for this
instance.
<P>
<P>
<P>
<B>NOTE:</B> The above paragraph is wrong.  This was discovered shortly
 after the contest began, and the correction was broadcast to all
 teams. The second jump should be from 25 to 27. The third jump
 should be from 10 to 24. The two pegs left will be in holes 24
 and 27 and 51 should be reported as the result.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10
describing how many instances of the game are represented.  The
remaining lines will describe <I>N</I> instances of the game by listing the
holes which begin with pegs in them, in increasing order.  A 0 will
indicate the end of each  sequence of unique numbers between 1
and 33 that represents an instance of the game.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
There should be <I>N</I>+2 lines of output.  The first line of
output will read <TT>HI Q OUTPUT</TT>. There will then be one line of
output for each instance of the game, reporting the sum of the holes
that still have pegs in them for the final configuration of that
instance.. The final line of output should read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
10 12 17 19 25 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
16 17 18 19 20
21 22 23 24 25 26   27 28 29 30 31 32 33 0
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20
21 22 23 24 25 26 27 28 29 30 31 32 33 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>HI Q OUTPUT
51                                                          
0
561  
98
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
380||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Call Forwarding</TITLE>
<META NAME="description" CONTENT="Call Forwarding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Call Forwarding</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Thanks to computer technology the functionality of phone systems
has been greatly enhanced in the last ten years.  We have
automated menus, sophisticated answering machines, conference
call capabilities, group addressing and so on.  A common feature of
a company's phone system is the ability to set call forwarding. For
example, if Bob at the Nobody's Home Company (NHC) goes on
vacation, he sets things up so that all calls coming to him are
forwarded to his associate Jane.  This problem addresses how
phone systems might keep track of call forwarding.
<P>
<P>
The phones at the NHC all have four digit
extensions.  Employees can set call forwarding by entering the
appropriate information through their telephone interface.  If an
employee is going to be away they enter the following information:
their extension, the time they are leaving, how long they will be
away, and the extension that their calls should be forwarded to,
with the following constraints:
<P>
<UL><LI> All extensions consist of four digits.<LI> The extensions 0000 and 9999 are reserved for special use and
     will not be entered as information by an employee.<LI> Times are recorded in increments of 1 hour and are based on a
     clock that begins at 0000 at midnight every New Year's Eve. 
     Therefore, when describing the time they are leaving,
     employees always use an integer between 0000 and 8784
     (which is 366*24).  The call forwarding system is completely
     reset at the beginning of the year.<LI> A call forward set to start at time <I>X</I> for a duration of <I>Y</I> will be
     in effect from time <I>X</I> to time <I>X</I>+<I>Y</I> inclusive.
</UL>
<P>
Users are ``good&quot; about the requests they enter.  They follow the
format rules. They do not enter a request such that the duration of
the request would go past the end of the year. They do not enter
two requests for their extension that overlap in time.  Even though
the users enter correct, clear, non-overlapping information from
their own point of view, a degenerate situation can still occur in a
call forwarding system, if requests have been made in such a way
as to forward a call back to the original target of the call.  For
example if Bob forwards his calls to Sue, and Sue forwards her
calls to Joe, and Joe forwards his calls to Bob then when somebody
calls any of these three people their calls would be forwarded
forever.  To prevent this situation the call forwarding system uses
the ``dead end&quot; number 9999.  Any calls made to an extension
involved in such a degenerate situation will be forwarded to the
special 9999 extension.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10
describing how many call forwarding systems will be simulated by
your program.  Each call forwarding system will be represented by
0 to 100  `<EM>source time duration target</EM>' lines.  These lines represent
the requests by the users to set up a call forwarding from the
`<EM>source</EM>' to the  `<EM>target</EM>' starting at the  `<EM>time</EM>' for a length of `<EM>duration</EM>', and will be in the form  `<EM>dddd dddd dddd dddd</EM>'. A line with 0000 in the  `<EM>source</EM>' position indicates the end of this portion
of the input. The call forwarding requests are listed in the order
received. They will be followed by 1 or more  `<EM>time extension</EM>'
lines, in the form  `<EM>dddd dddd</EM>', in non-decreasing order by  `<EM>time</EM>'
representing calls made into the system at  `<EM>time</EM>' to  `<EM>extension</EM>'. A line with 9000 in the  `<EM>time</EM>' position indicates the end of this
portion of the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The first line of output must read <TT>CALL FORWARDING OUTPUT</TT>.  This will be followed by sections of information about
each of the call forwarding systems being simulated.  Each of these
sections should be headed by the line <TT>SYSTEM</TT> <I>N</I>, where <I>N</I> is the
number (1, 2, ...) of the system.  Within the section there should be
a line describing the result of each of the calls made into the
system, with the format ``<TT>AT</TT> <EM>dddd</EM> <TT>CALL TO</TT> <EM>dddd</EM> <TT>RINGS</TT> dddd&quot;. 
The final line of output should read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
1111 0100 0200 2222
1111 0301 0500 4444
2222 0200 0200 3333
3333 0250 1000 1111
7777 1000 2000 7777
0000
0050 1111
0150 1111
0200 1111
0225 2222
0270 1111
0320 1111
0320 3333
0900 3000
1250 3333
1250 7777
9000
0000
3000 1111
9000</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>CALL FORWARDING OUTPUT
SYSTEM 1
AT 0050 CALL TO 1111 RINGS 1111
AT 0150 CALL TO 1111 RINGS 2222
AT 0200 CALL TO 1111 RINGS 3333
AT 0225 CALL TO 2222 RINGS 3333
AT 0270 CALL TO 1111 RINGS 9999
AT 0320 CALL TO 1111 RINGS 4444
AT 0320 CALL TO 3333 RINGS 4444
AT 0900 CALL TO 3000 RINGS 3000
AT 1250 CALL TO 3333 RINGS 1111
AT 1250 CALL TO 7777 RINGS 9999
SYSTEM 2
AT 3000 CALL TO 1111 RINGS 1111
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
381||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Making the Grade</TITLE>
<META NAME="description" CONTENT="Making the Grade">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Making the Grade</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Mr. Chips has a simple grading scheme that lends itself to
automated computation.  You will write a program that will read in
his students' grades, bonus points, and attendance record, compute
the student's grades, and output the average grade point of the
class.
<P>
<P>
Mr. Chips grades as follows.  All tests are
based on 100 points and all test grades are between 0 and 100
points. If he has given more than 2 tests then he will drop the
lowest test grade for each student before computing student
averages.  After computing student averages he computes the
overall class average (<EM>mean</EM>) and standard deviation (<EM>sd</EM>). The
cutoff points for grades are: an average  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline53" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   >  one <EM>sd</EM> above the <EM>mean</EM> is an A, an average  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline53" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   >  the <EM>mean</EM> but &lt; one <EM>sd</EM> above the <EM>mean</EM> is a B,
an average  <IMG WIDTH=11 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline53" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   >  one <EM>sd</EM> below the <EM>mean</EM> but &lt; the <EM>mean</EM> is a C, and an
average &lt; one <EM>sd</EM> below the <EM>mean</EM> is a D.
<P>
For every two bonus
points accrued by a student Mr. Chips increases their computed
average by 3 percentage points. Thus, if students have one bonus
point, their averages are not bumped at all.  If they have 4 or 5
bonus points, their averages are bumped by 6 percentage points,
and so on. Bumping of averages based on bonus points takes place
after the grade cutoff points have been determined.
<P>
Finally, for
every 4 absences, students lose one letter grade (from A to B, B to
C, C to D, and D to F).  For example, if they have 9 absences they
will lose two letter grades. Students cannot get a grade lower than
F. If students have perfect attendance, they gain one letter grade;
although they cannot get a grade higher than an A.  During his
computations, Mr. Chips always rounds his results to the nearest
tenth. In summary, Mr. Chips drops a student's lowest test grade if
more than 2 tests have been administered, computes each student's
average, computes the class <EM>mean</EM> and <EM>sd</EM>, adjusts the students'
averages based on bonus points, determines the student's
unadjusted grades, and then adjusts the grades based on attendance.
<P>
<P>
The average grade point (<EM>avg grd pnt</EM>) of a class is determined by using 4 points
for each A, 3 points for each B, 2 points for each C, 1 point for
each D, and 0 points for each F.  The total points for the class are
added together and divided by the number of students in the class
(which is always at least 2).
<P>
<P>
The standard deviation <EM>sd</EM> of a list of numbers  <IMG WIDTH=74 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   > 
is:   
<P> <IMG WIDTH=338 HEIGHT=48 ALIGN=BOTTOM ALT="displaymath67" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   > <P>
<P>
If the calculated standard deviation is less than 1 then Mr. Chips
uses 1 in place of the standard deviation for grade calculation.
<P>
<P>
Suppose Mr. Chips has 5 students and has given 3 tests. The
following table shows the grades, number of bonuses and days
absent, plus the computed average (with lowest test dropped), the
adjusted average (with bonus), the unadjusted grade and the
adjusted grade (with attendance). The <EM>mean</EM> and <EM>sd</EM> used to
determine letter grade cutoffs are 69.0 and 20.1. For example, for
an unadjusted B, one's average must be greater than or equal to
69.0 and less than 89.1.The <EM>avg grd pnt</EM> is 2.2
<P>
<P>
<P> <IMG WIDTH=511 HEIGHT=122 ALIGN=BOTTOM ALT="tabular41" SRC="http://uva.onlinejudge.org/external/3/381img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10
describing how many of Mr. Chip's classes are represented in the
input.  The first line for each class contains two integers <I>S</I> and <I>T</I>. <I>S</I>
is the number of students in the class (1 &lt; <I>S</I> &lt; 31) and <I>T</I> is the
number of tests the students took (1 &lt; <I>T</I> &lt; 11).  The next <I>S</I> lines
will each represent one student in the class. A student line first lists
each of their <I>T</I> test scores as integers between 0 and 100 inclusive,
and then lists their bonus points and their number of absences.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
There should be <I>N</I>+2 lines of output.  The first line of
output should read <TT>MAKING THE GRADE OUTPUT</TT>.   There will
then be one line of output for each of Mr. Chip's classes showing
that class's average grade point. The final line of output should
read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
3 2
100 50 2 5
60 60 17 1
20 10 0 0
5 5
100  80  90  80  90   0   0
80 80 80 80 80   0 0
50 50 50 50 50 0 0
100 100 20 20 20 0 0
30 30 30 30 30 0 0
10  4
79   56   59   89    4    5
100   89   96   79    6    2
80   80   80   76    1    3
76   76   76   76    5    4
58   78   67   75    4    0
100   96  100   95    1    2
47   49   46   45    0    5
67   98   59   87    5    5
23   45   52   54    2    7
78   75   79   79    3    3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MAKING THE GRADE OUTPUT
3.0
3.2
2.4
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
382||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Perfection</TITLE>
<META NAME="description" CONTENT="Perfection">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Perfection</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
From the article Number Theory in the 1994 Microsoft Encarta: ``If
<EM>a</EM>, <EM>b</EM>, <EM>c</EM> are integers such that <I>a</I> = <I>bc</I>, a is called a multiple of <EM>b</EM> or of
<EM>c</EM>, and <EM>b</EM> or <EM>c</EM> is called a divisor or factor of <EM>a</EM>. If <EM>c</EM> is not  <IMG WIDTH=20 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/3/382img1.gif"   > , <EM>b</EM> is
called a proper divisor of <EM>a</EM>. Even integers, which include 0, are
multiples of 2, for example, -4, 0, 2, 10; an odd integer is an
integer that is not even, for example, -5, 1, 3, 9. A perfect number
is a positive integer that is equal to the sum of all its positive,
proper divisors; for example, 6, which equals 1 + 2 + 3, and 28,
which equals 1 + 2 + 4 + 7 + 14, are perfect numbers. A positive
number that is not perfect is imperfect and is deficient or abundant
according to whether the sum of its positive, proper divisors is
smaller or larger than the number itself. Thus, 9, with proper
divisors 1, 3, is deficient; 12, with proper divisors 1, 2, 3, 4, 6, is
abundant.&quot;
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Problem Statement</A></FONT></H2>
<P>
Given a number, determine if it is perfect,
abundant, or deficient.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
A list of <I>N</I> positive integers (none greater than 60,000),
with 1 &lt; <I>N</I> &lt; 100. A 0 will mark the end of the list.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
The first line of output should read <TT>PERFECTION OUTPUT</TT>.  The next <I>N</I> lines of output should list for each input
integer whether it is perfect, deficient, or abundant, as shown in the
example below.  Format counts: the echoed integers should be
right justified within the first 5 spaces of the output line, followed
by two blank spaces, followed by the description of the integer. 
The final line of output should read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>15 28 6 56 60000 22 496 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>PERFECTION OUTPUT
   15  DEFICIENT
   28  PERFECT
    6  PERFECT
   56  ABUNDANT
60000  ABUNDANT
   22  DEFICIENT
  496  PERFECT
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
383||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Shipping Routes</TITLE>
<META NAME="description" CONTENT="Shipping Routes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Shipping Routes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Slow Boat to China Shipping company needs a program to
help them quickly quote costs to prospective customers. The cost
of a shipment depends on the size of the shipment and on how
many shipping legs it requires.  A shipping leg connects two
warehouses, but since every pair of warehouses is not directly
connected by a leg, it might require more than one leg to send a
shipment from one warehouse to another.
<P>
<P>
A data set can represent from 1 to 30
warehouses. A two-letter code name will identify each warehouse
(capital letters only).  Shipping legs can exist between any two
distinct warehouses. All legs are bidirectional.
<P>
<P>
<P>
<B>The cost of a shipment is equal to the size of the shipment times
the number of shipping legs required times $100.</B>
<P>
<P>
The input to the program identifies the warehouse code names and
the existence of all shipping legs.  For a given shipping request,
consisting of the size of the shipment, the source warehouse and
the destination warehouse, the program will output the best
(cheapest) cost for the shipment, if it is possible to send shipments
from the requested source to the requested destination. Alternately,
the program must state that the request cannot be fulfilled.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line will contain an integer from 1 to 10 inclusive
that represents the number of  data sets in the input file.  Each data
set represents a new shipping configuration.
<P>
<P>
The first line of data in a data set will contain three integers, say
<I>M</I>, <I>N</I>, and <I>P</I>:  <I>M</I> is an integer from 1 to 30 inclusive representing
the number of warehouses in the data set;  <I>N</I> is an integer from 0 to
<I>M</I>*(<I>M</I>-1)/2 inclusive that represents the number of legs between
warehouses in the data set; <I>P</I> is an integer from 0 to 10 inclusive
that represents the number of shipping requests for which cost
information is required.
<P>
The second line of data in a data set contains <I>M</I> two-letter code
names for the <I>M</I> warehouses of the data sets.  Only capital letters
are used. A single blank separates code names.
<P>
<I>N</I> lines follow the line of code names, containing shipping leg
information in the format: ``<EM>XX YY</EM>&quot;, with <EM>XX</EM> and <EM>YY</EM> being 
the codes for two distinct warehouses in the set that have a 
direct link (a shipping leg) between them. There will be a single 
blank between the warehouse codes.
<P>
The <I>N</I> lines of shipping leg information are followed by <I>P</I> lines of
shipping requests, one request per line.  Each shipping request will
begin with an integer between 1 and 20 inclusive that represents
the size of the shipment.  The shipment size will be followed by a
pair of code names in the format ``<EM>AA  BB</EM>&quot;, with <EM>AA</EM> and <EM>BB</EM>
being the code for two distinct warehouses in the set which
represent the source and destination of the requested shipment.
<P>
<P>
The input will be valid and consistent.  A shipping leg will only be
represented once within a data set.  Data about legs will always
refer to warehouses that have been identified as belonging to the
data set.  See the example below for clarification of the input
format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The first line of output should read ``<TT>SHIPPING ROUTES OUTPUT</TT>&quot;. For each data set there should be a section of output
enumerating which data set the output section represents followed
by <I>P</I> lines of the required information. Each of the <I>P</I> lines should
list either the cheapest cost of the respective shipment or the phrase
``<TT>NO SHIPMENT POSSIBLE</TT>&quot;. The end of the output should be
noted also.  Produce output consistent with the example below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
6  7  5
AA CC QR FF DD AB
AA CC
CC QR
DD CC
AA DD
AA AB
DD QR
AB DD
5  AA AB
14 DD CC
1  CC DD
2  AA FF
13 AB QR
3 0 1
AA BB CC
5  AA CC</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>SHIPPING ROUTES OUTPUT

DATA SET  1

$500
$1400
$100
NO SHIPMENT POSSIBLE
$2600

DATA SET  2

NO SHIPMENT POSSIBLE

END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
384||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Slurpys</TITLE>
<META NAME="description" CONTENT="Slurpys">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Slurpys</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Recognizing strings based on a set of restrictions is a common
computational problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Problem Statement</A></FONT></H2>
<P>
A Slurpy is a string of characters that has certain
properties.  Your program will read in strings of characters and output
whether or not they are Slurpys.
<P>
<P>
A <B>Slump</B> is a character string that has the following properties:
<P>
<OL><LI> Its first character is either a 'D' or an 'E'.<LI> The first character is followed by a string of one or more 'F's.<LI> The string of one or more 'F's is followed by either a Slump or a 'G'.
     The Slump or 'G' that follows the F's ends the Slump.  For example 
     DFFEFFFG is a Slump since it has a 'D' for its first character,
     followed by a string of two F's, and ended by the Slump 'EFFFG'.<LI> Nothing else is a Slump.
</OL>
<P>
A <B>Slimp</B> is a character string that has the following properties:
<P>
<OL><LI> Its first character is an 'A'.<LI> If it is a two character Slimp then its second 
     and last character is an 'H'.<LI> If it is not a two character Slimp then it is in 
     one of these two forms:
<DL COMPACT><DT><STRONG>a)</STRONG>
<DD> 'A' followed by 'B' followed by a Slimp 
          followed by a 'C'.
<DT><STRONG>b)</STRONG>
<DD> 'A' followed by a Slump (see above) 
          followed by a 'C'.
<P>
 </DL><LI> Nothing else is a Slimp.
</OL>
<P>
A <B>Slurpy</B> is a character string that consists of a Slimp followed by a
Slump.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Examples</A></FONT></H2>
<P>
<P> <IMG WIDTH=711 HEIGHT=124 ALIGN=BOTTOM ALT="tabular32" SRC="http://uva.onlinejudge.org/external/3/384img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Input</A></FONT></H2>
<P>
The first line contains an integer <I>N</I> between 1 and 10 describing
how many strings of characters are represented.  The next <I>N</I> lines each
contain a string of 1 to 60 alpha characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Output</A></FONT></H2>
<P>
The first line of output should read <TT>SLURPYS OUTPUT</TT>.  Each
of the next N lines of output should consist of either <TT>YES</TT> or <TT>NO</TT>
depending on whether or not the corresponding input line is a Slurpy.  The
last line of output should read <TT>END OF OUTPUT</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
AHDFG
DFGAH</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>SLURPYS OUTPUT
YES
NO
END OF OUTPUT</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
385||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>DNA Translation</TITLE>
<META NAME="description" CONTENT="DNA Translation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">DNA Translation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Deoxyribonucleic acid (DNA) is composed of a sequence of nucleotide bases
paired together to
form a double-stranded helix structure. Through a series of complex
biochemical processes the
nucleotide sequences in an organism's DNA are translated into the proteins
it requires for life. The
object of this problem is to write a computer program which accepts a DNA
strand and reports
the protein generated, if any, from the DNA strand.
<P>
<P>
The nucleotide bases from which DNA is built are adenine, cytosine,
guanine, and thymine (hereafter referred to as <TT>A</TT>, <TT>C</TT>, <TT>G</TT>,
and <TT>T</TT>, respectively). These bases bond together in a chain to form
half of a DNA strand. The other half of the DNA strand is a similar
chain, but each nucleotide
is replaced by its complementary base. The bases <TT>A</TT> and <TT>T</TT> are
complementary, as are the bases
<TT>C</TT> and <TT>G</TT>. These two ``half-strands'' of DNA are then bonded
by the pairing of the complementary bases to form a strand of DNA.
<P>
<P>
Typically a DNA strand is listed by simply writing down the bases
which form the primary strand
(the complementary strand can always be created by writing the complements
of the bases in the primary strand).
For example, the sequence <TT>TACTCGTAATTCACT</TT> represents a DNA strand
whose complement would be <TT>ATGAGCATTAAGTGA</TT>. Note that <TT>A</TT> is
always paired with <TT>T</TT>, and <TT>C</TT> is always paired with <TT>G</TT>.
<P>
<P>
From a primary strand of DNA, a strand of ribonucleic acid (RNA) known
as messenger RNA
(mRNA for short) is produced in a process known as transcription.
The transcribed mRNA is
identical to the complementary DNA strand with the exception that
thymine is replaced by a
nucleotide known as uracil (hereafter referred to as <TT>U</TT>).
For example, the mRNA strand for the
DNA in the previous paragraph would be <TT>AUGAGCAUUAAGUGA</TT>.
<P>
<P>
It is the sequence of bases in the mRNA which determines the protein
that will be synthesized.
The bases in the mRNA can be viewed as a collection of codons,
each codon having exactly three
bases. The codon <TT>AUG</TT> marks the start of a protein sequence,
and any of the codons <TT>UAA</TT>, <TT>UAG</TT>,
or <TT>UGA</TT> marks the end of the sequence. The one or more codons
between the start and termination
codons represent the sequence of amino acids to be synthesized to
form a protein. For example,
the mRNA codon <TT>AGC</TT> corresponds to the amino acid serine (Ser),
<TT>AUU</TT> corresponds to isoleucine
(Ile), and <TT>AAG</TT> corresponds to lysine (Lys). So, the protein formed
from the example mRNA in
the previous paragraph is, in its abbreviated form, Ser-Ile-Lys.
<P>
<P>
The complete genetic code from which codons are translated into amino
acids is shown in the table
below (note that only the amino acid abbreviations are shown).
It should also be noted that the
sequence <TT>AUG</TT>, which has already been identified as the start
sequence, can also correspond to the
amino acid methionine (Met). So, the first <TT>AUG</TT> in a mRNA strand is
the start sequence, but
subsequent <TT>AUG</TT> codons are translated normally into the Met amino acid.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input for this program consists of strands of DNA sequences, one
strand per line, from which
the protein it generates, if any, should be determined and output.
The given DNA strand may
be either the primary or the complementary DNA strand, and it may
appear in either forward
or reverse order, and the start and termination sequences do
not necessarily appear at the ends
of the strand. For example, a given input DNA strand to form
the protein Ser-Ile-Lys could be
any of <TT>ATACTCGTAATTCACTCC</TT>, <TT>CCTCACTTAATGCTCATA</TT>, <TT>TATGAGCATTAAGTGAGG</TT>,
or <TT>GGAGTGAATTACGAGTAT</TT>. The input file will be terminated by a line
containing a single asterisk character.
<P>
<P> <IMG WIDTH=384 HEIGHT=394 ALIGN=BOTTOM ALT="tabular52" SRC="http://uva.onlinejudge.org/external/3/385img1.gif"   > <P>
<P>
<P>
You may assume the input to contain only valid, upper-case,
DNA nucleotide base letters (<TT>A</TT>, <TT>C</TT>, <TT>G</TT>,
and <TT>T</TT>). No input line will exceed 255 characters in length.
There will be no blank lines or spaces
in the input.
<p>
Some sequences, though valid DNA strands, do
not produce valid protein sequences;
the string ``<TT>*** No translatable DNA found ***</TT>'' should be output
when an input DNA strand does not translate into a valid protein. Also some sequences can be translated into several different proteines. In that case,
print any of them.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>ATACTCGTAATTCACTCC
CACCTGTACACAGAGGTAACTTAG
TTAATACGACATAATTAT
GCCTTGATATGGAGAACTCATTAGATA
AAGTGTATGTTGAATTATATAAAACGGGCATGA
ATGATGATGGCTTGA
*</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Ser-Ile-Lys
Cys-Leu-His
Ser-Tyr
*** No translatable DNA found ***
Leu-Asn-Tyr-Ile-Lys-Arg-Ala
Met-Met-Ala</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
386||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Perfect Cubes</TITLE>
<META NAME="description" CONTENT="Perfect Cubes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Perfect Cubes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
For hundreds of years Fermat's Last Theorem, which stated simply that
for <I>n</I> &gt; 2 there exist no
integers <I>a</I>, <I>b</I>, <I>c</I> &gt; 1 such that  <IMG WIDTH=94 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/3/386img1.gif"   >  , has remained
elusively unproven. (A recent proof is
believed to be correct, though it is still undergoing scrutiny.)
It is possible, however, to find integers
greater than 1 that satisfy the ``perfect cube'' equation
 <IMG WIDTH=127 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/3/386img1.gif"   >  (e.g. a quick calculation
will show that the equation  <IMG WIDTH=145 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/386img1.gif"   >  is indeed true).
This problem requires that you
write a program to find all sets of numbers {<I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>} which
satisfy this equation for  <IMG WIDTH=57 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/3/386img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Output</A></FONT></H2>
<P>
The output should be listed as shown below, one perfect cube per
line, in non-decreasing order of
<I>a</I> (i.e. the lines should be sorted by their a values). The values
of <I>b</I>, <I>c</I>, and <I>d</I> should also be listed
in non-decreasing order on the line itself. There do exist several
values of a which can be produced
from multiple distinct sets of <I>b</I>, <I>c</I>, and <I>d</I> triples. In these
cases, the triples with the smaller <I>b</I> values should be listed first.
<P>
<P>
The first part of the output is shown here:
<P>
<PRE>Cube = 6, Triple = (3,4,5)
Cube = 12, Triple = (6,8,10)
Cube = 18, Triple = (2,12,16)
Cube = 18, Triple = (9,12,15)
Cube = 19, Triple = (3,10,18)
Cube = 20, Triple = (7,14,17)
Cube = 24, Triple = (12,16,20)</PRE>
<P>
<P>
<P>
<B>Note:</B> The programmer will need to be concerned with an efficient
implementation. The official
time limit for this problem is 2 minutes, and it is indeed possible to
write a solution to this problem
which executes in under 2 minutes on a 33 MHz 80386 machine.
Due to the distributed nature of
the contest in this region, judges have been instructed to make
the official time limit at their site
the greater of 2 minutes or twice the time taken by the judge's
solution on the machine being used to judge this problem.
<P>
</BODY>
</HTML>

______________________________________________________
387||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>A Puzzling Problem</TITLE>
<META NAME="description" CONTENT="A Puzzling Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">A Puzzling Problem</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The goal of this problem is to write a program which will take from 1 to 5
puzzle pieces such as
those shown below and arrange them, if possible, to form a square.
An example set of pieces is shown here.
<P>
<center><img src=387img3.gif></center>
<P>
The pieces cannot be rotated or flipped from their original orientation
in an attempt to form a
square from the set. All of the pieces must be used to form the
square. There may be more than
one possible solution for a set of pieces, and not every arrangement
will work even with a set for
which a solution can be found. Examples using the above set of
pieces are shown here.
<P>
<center><img src=387img4.gif></center>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file for this program contains several puzzles (i.e. sets of
puzzle pieces) to be solved.
The first line of the file is the number of pieces in the first puzzle.
Each piece is then specified by
listing a single line with two integers, the number of rows and
columns in the piece, followed by
one or more lines which specify the shape of the piece.
The shape specification consists of `0' and
`1' characters, with the `1' characters indicating the solid shape
of the puzzle (the `0' characters
are merely placeholders). For example, piece `A' above would be
specified as follows:
<P>
<PRE>2 3
111
101</PRE>
<P>
The pieces should be numbered by the order they are encountered in the
puzzle. That is, the first
piece in a puzzle is piece #1, the next is piece #2, etc. All pieces
may be assumed to be valid and no larger than 4 rows by 4 columns.
<P>
<P>
The line following the final line of the last piece contains the
number of pieces in the next puzzle,
again followed by the puzzle pieces and so on. The end of the input file
is indicated by a zero in place of the number of puzzle pieces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should report a solution, if one is possible, in the
format shown by the examples
below. A 4-row by 4-column square should be created, with each piece
occupying its location in
the solution. The solid portions of piece #1 should be replaced
with `1' characters, of piece #2
with `2' characters, etc. The solutions for each puzzle should be
separated by a single blank line.
<P>
<P>
If there are multiple solutions, any of them is acceptable. 
For puzzles which have no possible solution simply
report ``<TT>No solution possible</TT>''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4
2 3
111
101
4 2
01
01
11
01
2 1
1
1
3 2
10
10
11
4
1 4
1111
1 4
1111
1 4
1111
2 3
111
001
5
2 2
11
11
2 3
111
100
3 2
11
01
01
1 3
111
1 1
1
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1112
1412
3422
3442

No solution possible

1133
1153
2223
2444</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
388||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Galactic Import</TITLE>
<META NAME="description" CONTENT="Galactic Import">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Galactic Import</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
With the introduction of the new ThrustoZoom gigadimensional drive, it has
become possible for
HyperCommodities, the import/export conglomerate from New Jersey, to
begin trading with even
the most remote galaxies in the universe. HyperCommodities wants to
import goods from some
of the galaxies in the Plural Z sector. Planets within these galaxies
export valuable products and
raw materials like vacuuseal, transparent aluminum, digraphite, and
quantum steel. Preliminary reports have revealed the following facts:
<P>
<UL><LI> Each galaxy contains at least one and at most 26 planets. Each
planet within a galaxy is identified by a unique letter from A to Z.<LI> Each planet specializes in the production and export of one good.
Different planets within the same galaxy export different goods.<LI> Some pairs of planets are connected by hyperspace shipping lines.
If planets A and B are
connected, they can trade goods freely. If planet C is connected to B
but not to A, then A
and C can still trade goods with each other through B, but B
keeps 5% of the shipment as a
shipping fee. (Thus A only receives 95% of what C shipped, and C
receives only 95% of what
A shipped.) In general, any two planets can trade goods as long as
they are connected by
some set of shipping lines, but each intermediate planet along the
shipping route keeps 5% of what it shipped (which is not
necessarily equal to 5% of the original shipment).<LI> At least one planet in each galaxy is willing to open a ThrustoZoom
shipping line to Earth. A
ThrustoZoom line is the same as any other shipping line within
the galaxy, as far as business
is concerned. For example, if planet K opens a ThrustoZoom line to Earth,
then the Earth
can trade goods freely with K, or it can trade goods with any planet
connected to K, subject to the usual shipping fees.
</UL>
<P>
HyperCommodities has assigned a relative value (a positive real
number less than 10) to each
planet's chief export. The higher the number, the more valuable the
product. More valuable
products can be resold with a higher profit margin in domestic
markets. The problem is to determine
which planet has the most valuable export when shipping fees
are taken into account.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of one or more galaxy descriptions. Each galaxy
description begins with a line
containing an integer <I>N</I> which specifies the number of planets in the galaxy. The next <I>N</I> lines contain descriptions of each planet, which consist of:
<P>
<OL><LI> The letter used to represent the planet.<LI> A space.<LI> The relative value of the planet's export, in the form <I>d</I>.<I>dd</I>.<LI> A space.<LI> A string containing letters and/or the character `<TT>*</TT>'; a letter
indicates a shipping line to that
planet, and a `<TT>*</TT>' indicates a willingness to open a ThrustoZoom
shipping line to Earth.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each galaxy description, output a single line which reads
``<TT>Import from</TT> P'' where P is the letter
of the planet with the most valuable export, once shipping fees have
been taken into account. (If
more than one planet have the same most valuable export value then
output the plant which is alphabetically first).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
F 0.81 *
5
E 0.01 *A
D 0.01 A*
C 0.01 *A
A 1.00 EDCB
B 0.01 A*
10
S 2.23 Q*
A 9.76 C
K 5.88 MI
E 7.54 GC
M 5.01 OK
G 7.43 IE
I 6.09 KG
C 8.42 EA
O 4.55 QM
Q 3.21 SO</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Import from F
Import from A
Import from A</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
389||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Basically Speaking</TITLE>
<META NAME="description" CONTENT="Basically Speaking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Basically Speaking</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Really Neato Calculator Company, Inc. has recently hired your team to
help design their
Super Neato Model I calculator. As a computer scientist you suggested
to the company that it
would be neato if this new calculator could convert among number bases.
The company thought
this was a stupendous idea and has asked your team to come up
with the prototype program for
doing base conversion. The project manager of the Super Neato
Model I calculator has informed
you that the calculator will have the following neato features:
<P>
<UL><LI> It will have a 7-digit display.<LI> Its buttons will include the capital letters A through F in
addition to the digits 0 through 9.<LI> It will support bases 2 through 16.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for your prototype program will consist of one base
conversion per line. There will be
three numbers per line. The first number will be the number in the
base you are converting from.
The second number is the base you are converting from. The third number
is the base you are
converting to. There will be one or more blanks surrounding (on
either side of) the numbers. There
are several lines of input and your program should continue to
read until the end of file is reached.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output will only be the converted number as it would appear on
the display of the calculator.
The number should be right justified in the 7-digit display.
If the number is to large to appear on
the display, then print ``<TT>ERROR</TT>'' (without the quotes) right
justified in the display.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1111000  2 10
1111000  2 16
2102101  3 10
2102101  3 15
  12312  4  2
     1A 15  2
1234567 10 16
   ABCD 16 15</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
    120
     78
   1765
    7CA
  ERROR
  11001
 12D687
   D071
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
390||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Letter Sequence Analysis</TITLE>
<META NAME="description" CONTENT="Letter Sequence Analysis">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Letter Sequence Analysis</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Cryptographic analysis makes extensive use of the frequency with
which letters and letter sequences
occur in a language. If an encrypted text is known to be in english,
for example, a great deal can
be learned from the fact that the letters E, L, N, R, S, and T are
the most common ones used in
written english. Even more can be learned if common letter pairs,
triplets, etc. are known.
<P>
For this problem you are to write a program which accepts as input
a text file of unspecified length
and performs letter sequence analysis on the text. The program will
report the five most frequent
letter sequences for each set of sequences from one to five letters.
That is it will report the individual
characters which occur with the five highest frequencies, the pairs of
characters which occur with
the five highest frequencies, and so on up to the letter sequences
of five characters which occur with the five highest frequencies.
<P>
The program should consider contiguous sequences of alphabetic
characters only, and case should
be ignored (e.g. an `a' is the same as an `A'). A report should be
produced using the format shown
in the example at the end of this problem description.
For each sequence length from one to five,
the report should list the sequences in descending order of frequency.
If there are several sequences
with the same frequency then all sequences should be listed in
alphabetical order as shown (list
all sequences in upper case). Finally, if there are less than
five distinct frequencies for a particular
sequence length, simply report as many distinct frequency lists as possible.
Print a blank line between two analises.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Examples</A></FONT></H2>
<P>
When a text file containing simply the line ``<TT>Peter Piper Picks Pickles!</TT>''
is used as input, the output should appear as shown here:
<P>
<PRE>Analysis for Letter Sequences of Length 1
-----------------------------------------
Frequency = 5, Sequence(s) = (P)
Frequency = 4, Sequence(s) = (E)
Frequency = 3, Sequence(s) = (I)
Frequency = 2, Sequence(s) = (C,K,R,S)
Frequency = 1, Sequence(s) = (L,T)

Analysis for Letter Sequences of Length 2
-----------------------------------------
Frequency = 3, Sequence(s) = (PI)
Frequency = 2, Sequence(s) = (CK,ER,IC,PE)
Frequency = 1, Sequence(s) = (ES,ET,IP,KL,KS,LE,TE)

Analysis for Letter Sequences of Length 3
-----------------------------------------
Frequency = 2, Sequence(s) = (ICK,PIC)
Frequency = 1, Sequence(s) = (CKL,CKS,ETE,IPE,KLE,LES,PER,PET,PIP,TER)

Analysis for Letter Sequences of Length 4
-----------------------------------------
Frequency = 2, Sequence(s) = (PICK)
Frequency = 1, Sequence(s) = (CKLE,ETER,ICKL,ICKS,IPER,KLES,PETE,PIPE)

Analysis for Letter Sequences of Length 5
-----------------------------------------
Frequency = 1, Sequence(s) = (CKLES,ICKLE,PETER,PICKL,PICKS,PIPER)</PRE>
<P>
<P>
When the first three paragraphs of this problem description are used
as input, the output should appear as shown here:
<P>
<PRE>Analysis for Letter Sequences of Length 1
-----------------------------------------
Frequency = 201, Sequence(s) = (E)
Frequency = 112, Sequence(s) = (T)
Frequency = 96, Sequence(s) = (S)
Frequency = 90, Sequence(s) = (R)
Frequency = 84, Sequence(s) = (N)

Analysis for Letter Sequences of Length 2
-----------------------------------------
Frequency = 37, Sequence(s) = (TH)
Frequency = 33, Sequence(s) = (EN)
Frequency = 27, Sequence(s) = (HE)
Frequency = 24, Sequence(s) = (RE)
Frequency = 23, Sequence(s) = (NC)

Analysis for Letter Sequences of Length 3
-----------------------------------------
Frequency = 24, Sequence(s) = (THE)
Frequency = 21, Sequence(s) = (ENC,EQU,QUE,UEN)
Frequency = 12, Sequence(s) = (NCE,SEQ,TER)
Frequency = 9, Sequence(s) = (CES,FRE,IVE,LET,REQ,TTE)
Frequency = 8, Sequence(s) = (ETT,FIV)

Analysis for Letter Sequences of Length 4
-----------------------------------------
Frequency = 21, Sequence(s) = (EQUE,QUEN)
Frequency = 20, Sequence(s) = (UENC)
Frequency = 12, Sequence(s) = (ENCE,SEQU)
Frequency = 9, Sequence(s) = (FREQ,NCES,REQU)
Frequency = 8, Sequence(s) = (ETTE,FIVE,LETT,TTER)

Analysis for Letter Sequences of Length 5
-----------------------------------------
Frequency = 21, Sequence(s) = (EQUEN)
Frequency = 20, Sequence(s) = (QUENC)
Frequency = 12, Sequence(s) = (SEQUE,UENCE)
Frequency = 9, Sequence(s) = (ENCES,FREQU,REQUE)
Frequency = 8, Sequence(s) = (ETTER,LETTE)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
391||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mark-up</TITLE>
<META NAME="description" CONTENT="Mark-up">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mark-up</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Mark-up languages are computer languages that assist in the formatting
of text files. Special
keywords are used to mark the text to allow control of fonts, page
styles, paragraph styles, etc.
TeX, troff, and HTML are examples of mark-up languages.
<P>
<P>
Spell checking can be difficult to adapt to these special texts.
In general, special processors or
spell checkers must be created in order to accommodate mark-up
languages. A special processor
would recognize the mark-up language and strip it from the text
so that the ``plain'' text could
then be processed by a spell checker. For this problem, you are to
write such a processor for a small
mark-up language so that the output of your program will be the
plain text without the mark-ups.
<P>
<P>
The mark-up language to consider is one which allows the modification
of fonts within the text.
Each markup command will be preceded by a <code>\</code> character.
If the letter following the <code>\</code> character
is not a recognized command from the table below then the character
following the <code>\</code> is printed as
part of the plain text. For instance, the mark-up <code>\\</code> can
be used to print a single <code>\</code>.
<P>
<DL COMPACT><DT><STRONG> <IMG WIDTH=7 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/391img1.gif"   > <TT>b</TT></STRONG>
<DD> toggle bold font on/off (default state is off)
<DT><STRONG> <IMG WIDTH=7 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/391img1.gif"   > <TT>i</TT></STRONG>
<DD> toggle italics font on/off (default state is off)
<DT><STRONG> <IMG WIDTH=7 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/391img1.gif"   > <TT>s</TT></STRONG>
<DD> set font size; the <TT>s</TT> is immediately followed by
an optional number; if the number is
missing then the command will restore the previous size
<DT><STRONG> <IMG WIDTH=7 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/3/391img1.gif"   > <TT>*</TT></STRONG>
<DD> toggle processing of mark-ups on/off; if processing
is toggled off then mark-ups are
considered to be literal text (default state is on)
<P>
 </DL>
<P>
The number following the <code>SPMamp</code>&amp; command can have a decimal point
so 12, 9.5, 11., and .5 should all be recognized as valid numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file will be plain text containing mark-ups from the language
above. At the start, processing of mark-ups should be on.
The file should be processed until the end-of-file is encountered.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>\s18.\bMARKUP sample\b\s

\*For bold statements use the \b command.\*

If you wish to \iemphasize\i something use the \\i command.

For titles use \s14BIG\s font sizes, 14 points usually works well.

Remember that all of the commands toggle except for the \\s command.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MARKUP sample

For bold statements use the \b command.

If you wish to emphasize something use the \i command.

For titles use BIG font sizes, 14 points usually works well.

Remember that all of the commands toggle except for the \s command.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
392||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Polynomial Showdown</TITLE>
<META NAME="description" CONTENT="Polynomial Showdown">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Polynomial Showdown</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given the coefficients of a polynomial from degree 8 down to 0, you
are to format the polynomial in a readable format with unnecessary
characters removed.  For instance, given the coefficients 0, 0, 0, 1,
22, -333, 0, 1, and -1, you should generate an output line which
displays <code>x^5 + 22x^4 - 333x^3 + x - 1</code>.
<P>
<P>
The formatting rules which must be adhered to are as follows:
<P>
<OL><LI> Terms must appear in decreasing order of degree.<LI> Exponents should appear after a caret ``<code>^</code>''.<LI> The constant term appears as only the constant.<LI> Only terms with nonzero coefficients should appear, unless all terms
have zero coefficients in which case the constant term should appear.<LI> The only spaces should be a single space on either side of the
binary + and - operators.<LI> If the leading term is positive then no sign should precede it;
a negative leading term should be preceded by a minus sign, as in
<code>-7x^2 + 30x + 66</code>.<LI> Negated terms should appear as a subtracted unnegated term (with
the exception of a negative leading term which should appear as
described above).  That is, rather than <code>x^2 + -3x</code>, the output
should be <code>x^2 - 3x</code>.<LI> The constants 1 and -1 should appear only as the constant
term.  That is, rather than <code>-1x^3 + 1x^2 + 3x^1 - 1</code>, the output
should appear as <code>-x^3 + x^2 + 3x - 1</code>.
<P>
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file will contain one or more lines of coefficients
delimited by one or more spaces.  There are nine coefficients per
line, each coefficient being an integer with a magnitude of less than
1000.  The output file should contain the formatted polynomials, one
per line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0    0    0    1   22 -333    0    1   -1
0    0    0    0    0    0  -55    5    0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>x^5 + 22x^4 - 333x^3 + x - 1
-55x^2 + 5x</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
393||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Doors</TITLE>
<META NAME="description" CONTENT="The Doors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Doors</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to find the length of the shortest path through a chamber
containing obstructing walls.  The chamber will always have sides at
<I>x</I>=0, <I>x</I>=10, <I>y</I>=0, and <I>y</I>=10.  The initial and final points of the
path are always (0,5) and (10,5).  There will also be from 0 to 18
vertical walls inside the chamber, each with two doorways.  The figure
below illustrates such a chamber and also shows the path of minimal
length.
<P>
<center><img src=393img1.gif></center>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input data for the illustrated chamber would appear as follows.
<P>
<PRE>2
4 2 7 8 9
7 3 4.5 6 7</PRE>
<P>
The first line contains the number of interior walls.  Then there is a
line for each such wall, containing five real numbers.  The first
number is the <I>x</I> coordinate of the wall (0&lt;<I>x</I>&lt;10), and the remaining four are
the <I>y</I> coordinates of the ends of the doorways in that wall.  The <I>x</I>
coordinates of the walls are in increasing order, and within each line
the <I>y</I> coordinates are in increasing order.  The input file will
contain at least one such set of data.  The end of the data comes when
the number of walls is -1.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should contain one line of output for each chamber.
The line should contain the minimal path length rounded to two decimal
places past the decimal point, and always showing the two decimal
places past the decimal point.  The line should contain no blanks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
5 4 6 7 8
2
4 2 7 8 9
7 3 4.5 6 7
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>10.00
10.06</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
394||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mapmaker</TITLE>
<META NAME="description" CONTENT="Mapmaker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mapmaker</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Cybersoft Computer Company (a leader in programming languages) has
hired you to work on a new programming language named A<code>--</code>.
Your task is to work on the array mapping tasks of the language.  You
will take an array reference such as <code>x[5,6]</code> and map it to an
actual physical address.  In preparation for doing this, you will
write a program that will read in several array declarations and
references and give the physical address of each reference.  The
physical address output by the program should be an integer number in
base 10.
<P>
<P>
The physical address of an array reference  <IMG WIDTH=112 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   >  is
calculated from the formula  <IMG WIDTH=234 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   > , where the constants  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   >  are calculated as specified
below.
<P>
<P>
<P> <IMG WIDTH=362 HEIGHT=145 ALIGN=BOTTOM ALT="tabular20" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   > <P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input file contains two positive integers.  The
first integer specifies <I>N</I>, the number of arrays defined in the data
file, and the second integer specifies <I>R</I>, the number of array
references for which addresses should be calculated.  The next <I>N</I>
lines each define an array, one per line, and the following <I>R</I> lines
contain one array reference per line for which an address should be
calculated.
<P>
<P>
Each line which defines an array contains, in the following order, the
name of the array (which is limited to 10 characters), a positive
integer which specifies the base address of the array, a positive
integer which specifies the size in bytes of each array element, and
<I>D</I>, the number of dimensions in the array (no array will have fewer
than 1 or more than 10 dimensions).  This is followed on the same line
by <I>D</I> pairs of integers which represent the lower and upper bounds,
respectively, of dimensions  <IMG WIDTH=48 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline90" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   >  of the array.
<P>
<P>
Each line which specifies an array reference contains the name of the
array followed by the integer indexes  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline92" SRC="http://uva.onlinejudge.org/external/3/394img1.gif"   >  where <I>D</I>
is the dimension of the array.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should contain the array references and the physical
addresses.  There should be one array reference and physical address
per line.  The formatting guidelines below <EM>must</EM> be adhered to.
<P>
<P>
For each line of output:
<P>
<OL><LI> Output the name of the array<LI> Output a left square bracket<LI> Output each index value (each pair of indexes should have a
single comma and space between them)<LI> Output a right square bracket, a space, an equal sign, and
another space<LI> Output the physical address
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 4
ONE       1500 2 2 0 3 1 5
TWO       2000 4 3 1 4 0 5 5 10
THREE     3000 1 1 1 9
ONE       2 4
THREE     7
TWO       2 0 6
TWO       3 3 9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>ONE[2, 4] = 1526
THREE[7] = 3006
TWO[2, 0, 6] = 2148
TWO[3, 3, 9] = 2376</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
395||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Board Silly</TITLE>
<META NAME="description" CONTENT="Board Silly">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Board Silly</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are a member of a team of programmers whose task is to write a
board game.  Your job is to write the part that examines a board
layout and enumerates all possible moves for a given player.  The game
you are writing is played on an 8 by 8 grid of squares (similar to a
chess or checker board but the squares are all the same color).  The
rows are labeled with the letters A through H from top to bottom.  The
columns are labeled with the numbers 1 through 8 from left to right.
<P>
<P>
At any particular time in the game, each player may have from 1 to 12
pieces on the board (there is only one type of piece for each player).
Valid moves are determined by the following rules:
<P>
<OL><LI> Pieces may be moved in a straight line, either left, right, up,
down or diagonally.<LI> The number of spaces a piece may be moved is determined by the
total number of pieces in the row, column or diagonal in which the
piece is being moved.  Pieces may only be moved by this exact number,
no more, no less.<LI> A player may jump over his own pieces.<LI> A player may not jump over his opponent's pieces.<LI> A player may capture an opponent's piece by landing on it.<LI> A player may not land on a space he already occupies.
<P>
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file consists of one or more board layouts followed by which
piece, either '<TT>X</TT>' or '<TT>O</TT>' (that's an ``oh'' not a zero), for which
moves should be displayed for.  Each board is specified as 8 lines of
8 characters each.  Each board position will contain an '<TT>X</TT>', an '<TT>O</TT>' or a period.  The '<TT>X</TT>' and '<TT>O</TT>' position represent the occupied positions,
and the periods represent empty board positions.  Immediately
following each board is line containing a single '<TT>X</TT>' or '<TT>O</TT>' character,
and it is for this piece that moves should be displayed.  The end of
the input is indicated by the end of the file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should contain one line for each possible move.  The
moves must be printed in alphabetical order.  Each line should specify the
origin and destination of each piece, in that order, separated by a
single dash character.  Each board location (origins and destinations)
should be specified as a row letter followed by a column number.  If
no moves are possible then the output should simply specify ``<TT>No moves
are possible</TT>''.  The output for each board should be separated by a
single blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>O.......
O......X
O.....XX
O....XXX
.O...XXX
........
..O..XXX
........
O
..OXO...
..OOO...
........
........
........
........
........
........
X</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>A1-A2
A1-C3
A1-E1
B1-A2
B1-B3
B1-D3
B1-F1
C1-B2
C1-C4
C1-D2
C1-G1
D1-C2
D1-D5
D1-F3
D1-H1
E2-D2
E2-D3
E2-E6
E2-F1
E2-F2
E2-G4
G3-F2
G3-F3
G3-H3
G3-H4

No moves are possible</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
396||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Top Dog</TITLE>
<META NAME="description" CONTENT="Top Dog">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Top Dog</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">The Problem</A></FONT></H2>
<P>
You are a top-secret, government-employed software engineer assigned
to TOP-DOG, the latest military intelligence program.  TOP-DOG handles
everything from mapping out enemy territory and position to parsing
highly encrypted messages from the Commander in Chief.
<P>
<P>
The operator of TOP-DOG needs to be able to transfer information from
remote computer work-stations onto diskette in case of hardware
problems or well-placed enemy fire.  All TOP-DOG information is stored
in the Oracattle database, but the only way to access the database is
through the Dispatcher, an infamous and powerful software layer that
only allows access to the database on a ``need-to-know'' basis.  You
are in charge of writing a piece of software which will get the
desired information from the Oracattle database and store it on a
``flat'' file which will later be sent out to disk.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input and Output</A></FONT></H2>
<P>
The input consists of one or more descriptions with a blank line between two 
consecutive ones. Each of them begin with a 
line containing the number of the description (1, 2, ...), and then three
sets of lines (<EM>pseudofiles</EM>) separated with a blank line.
<P>
<P>
The desired tables to be exported will be stored in the first set.  This <EM>pseudofile</EM> will simply contain the names of each table to
be exported on separate lines.  There will be no blank lines, and each
table name will be unique.  An example is shown in the second set of lines in
the sample input section.
<P>
<P>
For each table, you must search in the second <EM>pseudofile</EM> which will
contain all column names, types, and sizes (if VARCHAR) for each table
in the Oracattle database.  This is the only information which the
Dispatcher allows you access to without begging.  An example file can be found in the sample input section.
<P>
<P>
Note that, for security reasons, not every table in the first <EM>pseudofile</EM> 
will always be available in the second one.  Under each table
name is the column name (one unique word), data type, and size (for
VARCHAR), each separated by one space.  The <TT>#</TT> sign indicates there
are no more columns for the table.  There will never be consecutive <TT>#</TT>
signs immediately following each other, and each table will contain at
least one column name with the size.  The only four data types are
VARCHAR, INT, DATE, and LONGINT.
<P>
<P>
An Oracattle SQL statement must be built in order to query the
Dispatcher for the desired table data.  The Oracattle SQL statement
must be precisely built in order to keep the Dispatcher happy (we
wouldn't want the Dispatcher to be confused).  The statement begins
with ``<TT>SELECT</TT>'', followed by each column name and generic data type in
parenthesis, separated with commas, terminated with ``<TT>FROM</TT>'', the
table name, and a semicolon.  The generic data type is CHAR for
VARCHAR and DATE, and NUM for INT and LONGINT.  The generic name must
be used because the Dispatcher only understands data as CHAR or NUM
(it may be powerful, but it's not extremely intelligent).  These
<TT>SELECT</TT> statements must be put into the first <EM>pseudofile</EM> (set of lines) in the output file, just after the number of description. Look at the sample output section, for the exact format.
<P>
<P>
If a table name cannot be found in the second <EM>pseudofile</EM>, a ``<code>$TABLE
NOT FOUND&gt;</code>'' statement must be substituted for the <TT>SELECT</TT> statement
in the output file.  No blank lines are to be in this set of lines, and
only single spaces are to separate <TT>SELECT</TT>, column names, <TT>FROM</TT>, and the table name in the <TT>SELECT</TT> statements.  The entire <TT>SELECT</TT> statement must be on one line.
<P>
<P>
Since you currently do not have access to the Dispatcher, we will
assume that you have correctly built the first output <EM>pseudofile</EM> and that
the Dispatcher has processed it and created the table information in the third input <EM>pseudofile</EM>.  This set of lines contains the table name followed by the data
from each row in the Oracattle Database table.  ``<code>&lt;NULL&gt;</code>'' is
returned for rows with empty fields.  An example of this third set of lines is
shown in the sample input section.
<P>
<P>
Note that each line there may contain any number of spaces
between words unless it was declared as a NUM.  Also, all data is
returned by row and table name in the same order it was presented to
the Dispatcher.  If no data exists in the table, a <TT>#</TT> sign immediately
follows the table name (as in <TT>GROUPSPI</TT> in the example data).
<P>
<P>
You must now finally integrate all the information you have received
from the Dispatcher into a second output <EM>pseudofile</EM> (separated from the first one with a blank line).  This set of lines will contain
all data needed to describe the database tables.  This <EM>pseudofile</EM> will later
be imported using the Oracattle SqlImporter (OSI), a text to database
utility.  Lucky for you, all you need to do is get it
into the OSI format.  This can be a little tricky.  The first argument
to be supplied is the table name, followed by the number of columns in
parentheses, followed by the number of records (rows) in parentheses
(no spaces on this line).  Next comes the column name and then the
data in quotation marks (a single space should separate the column
name and it's data).  When the maximum length of the column data is
greater than 64, the size must also be supplied in parenthesis
immediately following the column name (no space in-between ).  This is
so OSI can allocate more memory for large data.  An example is shown in the sample output section.
<P>
<P>
No blank lines are to exist into this set of lines, and all data must
remain on the same line as the column name (no end-of-line characters
in-between quotation marks).  Once this file has been created, you are
all done!
<P>
<P>
There will be a maximum of 100 columns in a single table, but there
may exist any number of rows in a single table.  The maximum column
name and table name length is 25, and the maximum data length is 100.
All input <EM>pseudofiles</EM> will always contain data in an the expected format
(as described in these specifications), so there is no need for error
checking.  Remember, case is iMpOrTaNt- <code>&lt;NULL&gt;</code> is not the same as
<code>&lt;null&gt;</code>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
INTELSYS
GROUPSPI
SYSINTEL
DEPLOYREG

GROUPSPI
GRCODE INT
GRSUBNET VARCHAR 20
GRREGION VARCHAR 25
GRACTION VARCHAR 100
GRREF VARCHAR 100
#
INTELSYS
ISDATE DATE
ISNUM INT
ISGEN LONGINT
ISSUBGEN VARCHAR 25
#
SYSINTEL
SITRANS INT
SISUBLET LONGINT
SINUM INT
SIGEN VARCHAR 10
SIACTION VARCHAR 50
SINOTES VARCHAR 100
#
QUICKFI
QFDATE DATE
QFDATA VARCHAR 100
#

INTELSYS
122922T DEC 94
1
2
&lt;NULL&gt;
111111Z DEC 01
3
4
CONFIRMED
010101Z DEC 02
5
6
&lt;NOT CONFIRMED&gt;
020202Z DEC 03
7
8
CAN'T SAY
#
GROUPSPI
#
SYSINTEL
342
3498938
000
SCOUTA
PURGE DATABASE
UNABLE TO COMPLY WITH A2DD UNDER GENERAL BURK'S COMMAND
#</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>

<PRE>1
SELECT (CHAR) ISDATE, (NUM) ISNUM, (NUM) ISGEN, (CHAR) ISSUBGEN FROM INTELSYS;
SELECT (NUM) GRCODE, (CHAR) GRSUBNET, (CHAR) GRREGION, (CHAR) GRACTION, (CHAR) GRREF FROM GROUPSPI;
SELECT (NUM) SITRANS, (NUM) SISUBLET, (NUM) SINUM, (CHAR) SIGEN, (CHAR) SIACTION, (CHAR) SINOTES FROM SYSINTEL;
&lt;TABLE NOT FOUND&gt;

INTELSYS(4)(4)
ISDATE &quot;122922T DEC 94&quot;
ISNUM &quot;1&quot;
ISGEN &quot;2&quot;
ISSUBGEN &quot;&quot;
ISDATE &quot;111111Z DEC 01&quot;
ISNUM &quot;3&quot;
ISGEN &quot;4&quot;
ISSUBGEN &quot;CONFIRMED&quot;
ISDATE &quot;010101Z DEC 02&quot;
ISNUM &quot;5&quot;
ISGEN &quot;6&quot;
ISSUBGEN &quot;&lt;NOT CONFIRMED&gt;&quot;
ISDATE &quot;020202Z DEC 03&quot;
ISNUM &quot;7&quot;
ISGEN &quot;8&quot;
ISSUBGEN &quot;CAN'T SAY&quot;
GROUPSPI(5)(0)
SYSINTEL(6)(1)
SITRANS &quot;342&quot;
SISUBLET &quot;3498938&quot;
SINUM &quot;000&quot;
SIGEN &quot;SCOUTA&quot;
SIACTION &quot;PURGE DATABASE&quot;
SINOTES(100) &quot;UNABLE TO COMPLY WITH A2DD UNDER GENERAL BURK'S COMMAND&quot;</PRE>

<P>
</BODY>
</HTML>

______________________________________________________
397||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Equation Elation</TITLE>
<META NAME="description" CONTENT="Equation Elation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Equation Elation</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The author of an elementary school algebra text book has approached
you to write a program to solve simple algebra equations.  The author
wants to use a program to avoid human errors in preparing the
solutions manual.  The text book author will provide a text file of
the simple problems for your problem to solve.  All of the problems
will be in the form of an algebraic equality.  The specific syntax of
the problems will be an algebraic statement consisting of integer
constants and the four basic arithmetic operators, an equal sign, and
a variable.  For example:
<P>
<PRE>12 - 4 * 3 = x</PRE>
<P>
For the solutions manual the problem is not just to be solved, but solved
one step at a time.  For the above input line, the corresponding output 
would be:
<P>
<PRE>12 - 4 * 3 = x
12 - 12 = x
0 = x</PRE>
<P>
The simple problems your program is to solve are limited to integer
values with multiplication, division, addition and subtraction
operations.  Note that, as in the above example, the computation must
follow the standard order of precedence for arithmetic operations.
All multiplications and divisions are performed, from left to right,
before any additions and subtractions, and then all additions and
subtractions are performed from left to right.  You may assume that
all divisions will result in integer values.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of several equations to be solved.  Each
equation will contain from 1 to 20 operations with 2 to 21 integer
operands (there will, of course, always be one more operand than
operators).  Integer operators in the input may have a leading sign
(i.e. may be preceded by a unary operator).  Spaces in the input line
are optional; that is, spaces may be present between operators and
operands, or they may not.  The variable names will consist of 1 to 8
alphabetic characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Output for a problem should begin with the problem to be solved, then
followed by one line of output after each operation.  The spacing
between the numbers and operations in the output is not critical.
Having the correct answers and all the correct steps in the output is
important.
<P>
<P>
A typical input file will consist of multiple algebraic problems, each
on a separate line.  The output for each input problem should be
separated by a single blank line in the output.  The end of the file
marks the end of the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 * 4 + 4 - 1 / 1 = xyzzy
12 + 2 * 12 / 2 - 1 = y
2 * -3 + -6 - +4 = r
2*-3+-6-+4=r</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3 * 4 + 4 - 1 / 1 = xyzzy
12 + 4 - 1 / 1 = xyzzy
12 + 4 - 1 = xyzzy
16 - 1 = xyzzy
15 = xyzzy

12 + 2 * 12 / 2 - 1 = y
12 + 24 / 2 - 1 = y
12 + 12 - 1 = y
24 - 1 = y
23 = y

2 * -3 + -6 - 4 = r
-6 + -6 - 4 = r
-12 - 4 = r
-16 = r

2 * -3 + -6 - 4 = r
-6 + -6 - 4 = r
-12 - 4 = r
-16 = r</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
398||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>18-Wheeler Caravans (aka Semigroups)</TITLE>
<META NAME="description" CONTENT="18-Wheeler Caravans (aka Semigroups)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">18-Wheeler Caravans (aka Semigroups)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A <B>binary operation</B> on a set S is a function that assigns to each
ordered pair of elements of S a unique element of S.  We often use
some special symbol (such as * or +) to represent a binary
operation.  For example, if we use the symbol '<B><TT>#</TT></B>' to represent some
arbitrary binary operation on the set S = {<TT>a</TT>,<TT>b</TT>,<TT>c</TT>},
then <TT>a</TT><B><TT>#</TT></B><TT>b</TT> equals
some element of S (as does <TT>b</TT><B><TT>#</TT></B><TT>a</TT>,
<TT>a</TT><B><TT>#</TT></B><TT>a</TT>, <TT>a</TT><B><TT>#</TT></B><TT>c</TT>, and every other
possible permutation).
<P>
<P>
From the above definition, it would follow that the normal definitions
for addition, subtraction, and multiplication are all binary
operations when defined on the set of all integers.  However, division
(the mathematical kind - not ``integer division'') is not a binary
operation for the set of integers, since 1/2=0.5 which is not
an integer.
<P>
<P>
The use of the word ``ordered'' in the definition for binary operations
is important, for it allows the possibility that the element assigned
to <TT>a</TT><B><TT>#</TT></B><TT>b</TT> may be different from the one assigned
to <TT>b</TT><B><TT>#</TT></B><TT>a</TT>.  In the case
of integers, this is evident with the binary operation we know as
subtraction, since 5 - 3 is not equal to 3 - 5.  If in a particular
case, <TT>x</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>y</TT> = <TT>y</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>x</TT>
for all elements <TT>x</TT> and <TT>y</TT> in the set, we say
that the binary operation is <B>commutative</B>.  The standard addition
operation on the set of integers is commutative.
<P>
<P>
For the remainder of this problem we will only concern ourselves with
small sets (1 to 26 elements).  For small sets such as these, the
unique assignments that define an operation can be expressed by simply
writing down all possible assignments in a &quot;multiplication&quot; table.
For instance, the binary operation '<B><TT>#</TT></B>' on the
set S={<TT>a</TT>,<TT>b</TT>,<TT>c</TT>} might be defined by:
<P>
<PRE>                                   # | a b c
                                   ---------
                                   a | b c b
                                   b | a c b
                                   c | c b a</PRE>
<P>
The left column of the table represents the first number in an ordered
pair, and the top row represents the second.  Thus, in this example,
<TT>a</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>b</TT> = <TT>c</TT>,
<TT>b</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>a</TT> = <TT>a</TT>,
and <TT>c</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>c</TT> = <TT>a</TT>.  Notice that the body of
the table consists solely of elements from the set S, which must be
true for any binary operation.  Also notice that this operation is not
commutative, since <TT>b</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>a</TT> is not equal
to <TT>a</TT>&nbsp;<B><TT>#</TT></B>&nbsp;<TT>b</TT>.
<P>
<P>
A binary operation, <B><TT>#</TT></B>, on a set S is <B>associative</B> if
(<TT>x</TT><B><TT>#</TT></B><TT>y</TT>)<B><TT>#</TT></B><TT>z</TT> =
<TT>x</TT><B><TT>#</TT></B>(<TT>y</TT><B><TT>#</TT></B><TT>z</TT>) for all
elements <TT>x</TT>, <TT>y</TT>, and <TT>z</TT> in the
set X.  In the example with the table above, the operation is not
associative, since (<TT>a</TT><B><TT>#</TT></B><TT>b</TT>)<B><TT>#</TT></B><TT>c</TT> is
not equal to <TT>a</TT><B><TT>#</TT></B>(<TT>b</TT><B><TT>#</TT></B><TT>c</TT>).
If a binary operation, <B><TT>#</TT></B>, on a set is associative, then we say that
the pair &lt;S,<B><TT>#</TT></B>&gt; forms a <B>semigroup</B>.  If the binary operation
is commutative as well as associative, then we say that the semigroup
is commutative.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Write a program that will read the elements of sets together with
corresponding ``multiplication'' tables which denote possible binary
operations.  Your program should then determine if the set S with the
defined operation constitutes a semigroup.  If the set and
corresponding table do not form a semigroup, your program should
report that the pair do not form a semigroup and state why.  If the
set and operation pair do form a semigroup, your program should check
to see if the semigroup is also a commutative semigroup.
<P>
<P>
Thus, for each set and corresponding table one of the following four
results is possible:
<P>
<PRE>NOT A SEMIGROUP: x#y = z WHICH IS NOT AN ELEMENT OF THE SET
NOT A SEMIGROUP: (x#y)#z IS NOT EQUAL TO x#(y#z)
SEMIGROUP BUT NOT COMMUTATIVE (x#y IS NOT EQUAL TO y#x)
COMMUTATIVE SEMIGROUP</PRE>
<P>
In the first three results you should substitute actual elements of
the set that yield a counter-example to the definitions for a
semigroup and a commutative operation.  If more than one
counter-example exist, simply use one of your choice.
<P>
<P>
The first line of the input file contains a single integer, <I>n</I> where
 <IMG WIDTH=93 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline153" SRC="http://uva.onlinejudge.org/external/3/398img1.gif"   > .
<P>
<P>
The next line of the input file will contain <I>n</I> unique, lower case
letters of the alphabet.  These letters represent the elements of the
set.  Although each letter is unique (no duplicates), they are not
necessarily arranged in alphabetical order.
<P>
<P>
The next <I>n</I> lines contain the body of the ``multiplication'' table that
corresponds to the elements in the previous line.  Each of these lines
will contain <I>n</I> lower case letters.  For example, the first such line
corresponds to the first row of the body of the table.  We will assume
that the ordering of the rows and columns of the table coincide with
the ordering in the line that defines the elements of the set.
<P>
<P>
After the table, the input file will contain a line with a single
integer, <I>n</I> where  <IMG WIDTH=93 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline163" SRC="http://uva.onlinejudge.org/external/3/398img1.gif"   > .  If <I>n</I> &gt; 0 then there is
another set and corresponding table contained in the next <I>n</I>+1 lines
that should be reported.  If <I>n</I> = 0 then you have reached the end of
the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should contain the following for each set and table
found in the input file:
<P>
<OL><LI> List of the elements of S in same order as found in the input
file using the following format: <code>S = {a,b,c,d}</code><LI> A line that starts with a space followed by the characters
'<B><TT>#|</TT></B>' followed by the <I>n</I> elements of the set (no spaces or
commas).  For example: <code>#|abcd</code><LI> A line that begins with a space followed by the characters
'<code>-+</code>' followed by <I>n</I> more dashes '<code>-</code>'.  For example:
<code>-+----</code><LI> List of the <I>n</I> rows and columns of the ``multiplication'' table
in the same order as found in the input file.  The  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline177" SRC="http://uva.onlinejudge.org/external/3/398img1.gif"   >  line
of the table should begin with a space followed by the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline177" SRC="http://uva.onlinejudge.org/external/3/398img1.gif"   > 
element of the set followed by the '<B><TT>|</TT></B>' character followed by
the <I>n</I> characters in the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline177" SRC="http://uva.onlinejudge.org/external/3/398img1.gif"   >  row of the body of the table
(no spaces).  For example: <code>a|abcd</code><LI> One blank line.<LI> One line that reports what your program found to be true.  This
must be one of the four possible results listed above.<LI> A line of 30 dashes.<LI> One blank line to separate this report from subsequent reports. Nothing to be printed for the last report.
<P>
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
abc
abc
bca
cab
3
abc
abc
bca
cad
4
acdb
aaaa
aaca
aada
aaab
5
abcde
aaaaa
bbabb
cccbc
ddddd
eeeee
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>S = {a,b,c}
 #|abc
 -+---
 a|abc
 b|bca
 c|cab

COMMUTATIVE SEMIGROUP
------------------------------

S = {a,b,c}
 #|abc
 -+---
 a|abc
 b|bca
 c|cad

NOT A SEMIGROUP: c#c = d WHICH IS NOT AN ELEMENT OF THE SET
------------------------------

S = {a,c,d,b}
 #|acdb
 -+----
 a|aaaa
 c|aaca
 d|aada
 b|aaab

SEMIGROUP BUT NOT COMMUTATIVE (c#d IS NOT EQUAL TO d#c)
------------------------------

S = {a,b,c,d,e}
 #|abcde
 -+-----
 a|aaaaa
 b|bbabb
 c|cccbc
 d|ddddd
 e|eeeee

NOT A SEMIGROUP: (b#a)#c IS NOT EQUAL TO b#(a#c)
------------------------------</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
399||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Another Puzzling Problem</TITLE>
<META NAME="description" CONTENT="Another Puzzling Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Another Puzzling Problem</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You are to write a program to solve jigsaw puzzles.  The input file
will contain the dimension of the puzzle, the dimension of the pieces,
and the actual pieces of the puzzle.  The pieces will be made up of
ASCII characters.  You are to create an output file which consists of
the solved puzzle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input file consists of one or more puzzles. The first line contains a integer <I>N</I>, the number of puzzles. Then, the description of each puzzle, as follows:
<P>
<P>
The first line of the input file will contain three integers.  These
are the dimension of the puzzle (puzzles are always square), and the
height and width of the pieces, respectively.  The dimension of the
puzzle can range from 2 to 10, and the height and width of each puzzle
piece can range from 1 to 25. For example, the input ``<TT>2 2 3</TT>''
(without the quotes, of course) specifies a puzzle that is  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/3/399img1.gif"   > 
pieces in size, with individual pieces that are  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/3/399img1.gif"   >  characters
in size.  All pieces have the same height and width.
<P>
<P>
The rest of the description specifies the puzzle pieces in arbitrary order.
Each piece is specified by an image of the piece followed by a line
containing four integers ranging from -5 to +5.  These values
indicate the shape of the top, left, bottom and right edges of the
puzzle piece, respectively.  Values of 0 identify straight
(i.e. outer) edges.  Positive and negative edges of the same value are
pairs that interlock (e.g -5 interlocks with +5, -4 with +4,
etc.).  Puzzle pieces may not be rotated, and all pieces will be
unique (that is, no two pieces will have the same values for all four
edges).  A blank line separates each puzzle piece, and also different puzzles.
<P>
<P>
Note that spaces (ASCII character 32) are valid characters in a puzzle
piece.  If they appear at the end of a line (or are the only
characters on a line), then they <U></U>.
All pieces will be a rectangular block of characters (ASCII codes 32
to 127), even if spaces at the end of a line make it appear
differently.  In short, spaces should be treated no differently than
any other character.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should simply contain the solved puzzle in the proper
arrangement, two consecutives separated with a blank line. Each input puzzle will have one and only one solution.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
2 2 3
OOC
BCC
-2 2 0 0

AOO
AAB
5 0 0 -2

XXY
XOO
0 0 -5 -5

YZZ
OOZ
0 5 2 0

2 8 14
88,           
8888.         
:8888b        
  8888        
-.:888b       
' d8888       
 ,88888       
':88888       
0 3 -1 0

         o8%88
       o88%888
      8'-    -
     8'       
    d8.-=. ,==
    &gt;8 `~` :`~
    88        
    88b. `-~  
0 0 -5 -3

.:88888       
:::8888       
:' 8888b      
    8888b     
    ,%888b.   
    %%%8--'-. 
   _%-' ---  -
.-'   =  --.  
1 4 0 0

    888b ~==~ 
    88888o--:'
    `88888| ::
    8888^^'   
   d888       
  d88%        
 /88:.__ ,    
     '''::===.
5 0 0 -4</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>XXYYZZ
XOOOOZ
AOOOOC
AABBCC

         o8%8888,           
       o88%8888888.         
      8'-    -:8888b        
     8'         8888        
    d8.-=. ,==-.:888b       
    &gt;8 `~` :`~' d8888       
    88         ,88888       
    88b. `-~  ':88888       
    888b ~==~ .:88888       
    88888o--:':::8888       
    `88888| :::' 8888b      
    8888^^'       8888b     
   d888           ,%888b.   
  d88%            %%%8--'-. 
 /88:.__ ,       _%-' ---  -
     '''::===..-'   =  --.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
400||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Unix ls</TITLE>
<META NAME="description" CONTENT="Unix ls">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Unix ls</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The computer company you work for is introducing a brand new computer 
line and is developing a new Unix-like operating system to be 
introduced along with the new computer.  Your assignment is to write 
the formatter for the <TT>ls</TT> function.
<P>
<P>
Your program will eventually read input from a pipe (although for now 
your program will read from the input file).  Input to your program 
will consist of a list of (<I>F</I>) filenames that you will sort (ascending 
based on the ASCII character values) and format into (<I>C</I>) columns based 
on the length (<I>L</I>) of the longest filename.  Filenames will be between 1 
and 60 (inclusive) characters in length and will be formatted into 
left-justified columns.  The rightmost column will be the width of the 
longest filename and all other columns will be the width of the longest 
filename plus 2.  There will be as many columns as will fit in 60 
characters.  Your program should use as few rows (<I>R</I>) as possible with 
rows being filled to capacity from left to right.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain an indefinite number of lists of filenames.  
Each list will begin with a line containing a single integer
( <IMG WIDTH=95 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/4/400img1.gif"   > ).
There will then be <I>N</I> lines each containing one left-justified
filename and the entire line's contents (between 1 and 60 characters) 
are considered to be part of the filename.  Allowable characters are 
alphanumeric (<TT>a</TT> to <TT>z</TT>, <TT>A</TT> to <TT>Z</TT>, and <TT>0</TT> to <TT>9</TT>) and from the following
set <code>{ ._- }</code> (not including the curly braces).  There will be no illegal
characters in any of the filenames and no line will be completely 
empty.
<P>
Immediately following the last filename will be the <I>N</I> for the next set 
or the end of file.  You should read and format all sets in the input 
file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each set of filenames you should print a line of exactly 60 dashes 
(<TT>-</TT>) followed by the formatted columns of filenames.  The sorted 
filenames 1 to <I>R</I> will be listed down column 1; filenames <I>R</I>+1 to 2<I>R</I> 
listed down column 2; etc.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10
tiny
2short4me
very_long_file_name
shorter
size-1
size2
size3
much_longer_name
12345678.123
mid_size_name
12
Weaser
Alfalfa
Stimey
Buckwheat
Porky
Joe
Darla
Cotton
Butch
Froggy
Mrs_Crabapple
P.D.
19
Mr._French
Jody
Buffy
Sissy
Keith
Danny
Lori
Chris
Shirley
Marsha
Jan
Cindy
Carol
Mike
Greg
Peter
Bobby
Alice
Ruben</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>------------------------------------------------------------
12345678.123         size-1               
2short4me            size2                
mid_size_name        size3                
much_longer_name     tiny                 
shorter              very_long_file_name  
------------------------------------------------------------
Alfalfa        Cotton         Joe            Porky          
Buckwheat      Darla          Mrs_Crabapple  Stimey         
Butch          Froggy         P.D.           Weaser         
------------------------------------------------------------
Alice       Chris       Jan         Marsha      Ruben       
Bobby       Cindy       Jody        Mike        Shirley     
Buffy       Danny       Keith       Mr._French  Sissy       
Carol       Greg        Lori        Peter</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
401||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.48)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Palindromes</TITLE>
<META NAME="description" CONTENT="Palindromes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Palindromes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A regular palindrome is a string of numbers or letters that is the same 
forward as backward.  For example, the string <TT>"ABCDEDCBA"</TT> is a
palindrome because it is the same when the string is read from left to 
right as when the string is read from right to left. 

<P>

<P>
<BR>
A mirrored string is a string for which when each of the elements of 
the string is changed to its reverse (if it has a reverse) and the 
string is read backwards the result is the same as the original string.  
For example, the string <TT>"3AIAE"</TT> is a mirrored string because <TT>"A"</TT>
and <TT>"I"</TT> are their own reverses, and <TT>"3"</TT> and <TT>"E"</TT>
are each others' reverses.

<P>

<P>
<BR>
A mirrored palindrome is a string that meets the criteria of a regular 
palindrome and the criteria of a mirrored string.  The string <TT>"ATOYOTA"</TT>
is a mirrored palindrome because if the string is read backwards, the 
string is the same as the original and because if each of the 
characters is replaced by its reverse and the result is read backwards, 
the result is the same as the original string.  Of course, <TT>"A"</TT>, <TT>"T"</TT>,
<TT>"O"</TT>, and <TT>"Y"</TT> are all their own reverses.

<P>

<P>
<BR>
A list of all valid characters and their reverses is as follows. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=6>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN ID="txt62">Character</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN ID="txt63">Reverse</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <SPAN ID="txt64">Character</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN ID="txt65">Reverse</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <SPAN ID="txt66">Character</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN ID="txt67">Reverse</SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>A</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>A</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>M</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>M</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>Y</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>Y</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>B</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>N</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>Z</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>5</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>C</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>O</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>O</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>1</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>1</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>D</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>P</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>2</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>S</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>E</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>3</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>Q</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>3</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>E</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>F</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>R</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>4</TT> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
    <TT>G</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>S</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>2</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>5</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>Z</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>H</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>H</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>T</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>T</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>6</TT> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
    <TT>I</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>I</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>U</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>U</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>7</TT> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 
    <TT>J</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>L</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>V</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>V</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>8</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>8</TT> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
    <TT>K</TT>  </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>W</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>W</TT> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   <TT>9</TT> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>   
    <TT>L</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>J</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>X</TT>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <TT>X</TT> </TD><TD></TD><TD></TD></TR>
</TABLE>

</DIV>

<P>

<P><P>
<BR>

<B>Note</B> that O (zero) and 0 (the letter) are considered the same 
character and therefore <B>ONLY</B> the letter "0" is a valid character.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists of strings (one per line) each of which will consist of 
one to twenty valid characters.  There will be no invalid characters in 
any of the strings.  Your program should read to the end of file. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input string, you should print the string starting in column 1 
immediately followed by exactly one of the following strings. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>
<TT>STRING</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> <TT>CRITERIA</TT></TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>"<TT> -- is not a palindrome.</TT>" </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
if the string is not a palindrome 
and is not a mirrored string </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>"<TT> -- is a regular palindrome.</TT>" </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
if the string is a palindrome and 
is not a mirrored string </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>"<TT> -- is a mirrored string.</TT>" </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
if the string is not a palindrome 
and is a mirrored string </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>"<TT> -- is a mirrored palindrome.</TT>" </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
if the string is a palindrome and 
is a mirrored string </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<B>Note</B> that the output line is to include the <TT>-</TT>'s and spacing exactly as shown in the table above and demonstrated in the Sample Output below.  

<P>
In addition, after each output line, you must print an empty line. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
NOTAPALINDROME 
ISAPALINILAPASI 
2A3MEAS 
ATOYOTA
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
NOTAPALINDROME -- is not a palindrome.
 
ISAPALINILAPASI -- is a regular palindrome.
 
2A3MEAS -- is a mirrored string.
 
ATOYOTA -- is a mirrored palindrome.
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2001-04-16
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
402||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>M*A*S*H</TITLE>
<META NAME="description" CONTENT="M*A*S*H">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">M*A*S*H</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Corporal Klinger is a member of the 4077th Mobile Army Surgical 
Hospital in the Korean War; and he will do just about anything to get 
out.  The U.S. Army has made an offer for a lottery that will choose 
some number of lucky people (<I>X</I>) to return to the states for a
recruiting tour.  Klinger needs your help getting out.
<P>
<P>
The lottery is run by lining up all the members of the unit at 
attention and eliminating members by counting off the members from 1 to 
<I>N</I> where <I>N</I> is a number chosen by pulling cards off of the top of a deck.
Every time <I>N</I> is reached, that person falls out of the line, and
counting begins again at 1 with the next person in line.  When the end 
of the line has been reached (with whatever number that may be), the 
next card on the top of the deck will be taken, and counting starts 
again at 1 with the first person in the remaining line.  The last <I>X</I> 
people in line get to go home.
<P>
<P>
Klinger has found a way to trade a stacked deck with the real deck just 
before the selection process begins.  However, he will not know how 
many people will show up for the selection until the last minute.  Your 
job is to write a program that will use the deck Klinger supplies and 
the number of people in line that he counts just before the selection 
process begins and tell him what position(s) in the line to get in to 
assure himself of a trip home.
<P>
<P>
A simple example with 10 people, 2 lucky spots, and the numbers from 
cards 3, 5, 4, 3, 2 would show that Klinger should get in positions 1 
or 8 to go home.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
For each selection, you will be given a line of 22 integers.  The first 
integer ( <IMG WIDTH=87 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/4/402img1.gif"   > ) tells how many people will participate in the
lottery.  The second integer ( <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/4/402img1.gif"   > ) is how many lucky &quot;home&quot;
positions will be selected.  The next 20 integers are the values of the 
first 20 cards in the deck.  Card values are interpretted to integer 
values between 1 and 11 inclusive.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input line, you are to print the message ``<TT>Selection #A</TT>&quot; on a
line by itself where <TT>A</TT> is the number of the selection starting with 1
at the top of the input file.  The next line will contain a list of 
``lucky&quot; positions that Klinger should attempt to get into. If Klinger's deck
doesn't get the job done by the time the 20th card is used, print all remaining people
in line. The list of ``lucky&quot; positions is then followed by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10 2 3 5 4 3 2 9 6 10 10 6 2 6 7 3 4 7 4 5 3 2
47 6 11 2 7 3 4 8 5 10 7 8 3 7 4 2 3 9 10 2 5 3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Selection #1 
1 8 
 
Selection #2 
1 3 16 23 31 47</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
403||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Postscript</TITLE>
<META NAME="description" CONTENT="Postscript">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Postscript</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The year is 1976 and a small upstart company has just invented the 
first  (albeit crude) laser postscript printer.  They have hired you to 
write Release 1 of the the postscript printer's device driver.  Release 
1 is very limited (with only two very limited fonts) since some nay-
sayers in the industry believe that postscript printers will never take 
off.
<P>
<P>
The device driver reads in a series of commands which describe 
positions of text characters on the output page.  (Graphics will be in 
release 2.)  Each page is a 60 x 60 grid of characters.  Each grid 
position can contain only the following characters: 
<TT>ABCDEFGHIJKLMNOPQRSTUVWXYZ .*</TT>
<P>
The alphabetic characters above and the blank comprise the character 
set of the first font (C1).  The asterisk ( <TT>*</TT> ) is the base character 
from which the enlarged courier font (C5) is created.  Each C5 
character is defined on a 5 (rows)  <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline115" SRC="http://uva.onlinejudge.org/external/4/403img1.gif"   >  6 (columns) grid which contains 
either <TT>*</TT>'s or periods (<TT>.</TT>).  The C5 font characters are as follows.
<P>
<P>
<P>
<code>.***..  ****..  .****.  ****..  *****.  *****.  .****.  *...*.  *****.</code>
<P>
<code>*...*.  *...*.  *...*.  *...*.  *.....  *.....  *.....  *...*.  ..*...</code>
<P>
<code>*****.  ****..  *.....  *...*.  ***...  ***...  *..**.  *****.  ..*...</code>
<P>
<code>*...*.  *...*.  *.....  *...*.  *.....  *.....  *...*.  *...*.  ..*...</code>
<P>
<code>*...*.  ****..  .****.  ****..  *****.  *.....  .***..  *...*.  *****.</code>
<P>
<code>  A       B       C       D       E       F       G       H       I   </code>
<P>
<code> </code>
<P>
<code>..***.  *...*.  *.....  *...*.  *...*.  .***..  ****..  .***..  ****..</code>
<P>
<code>...*..  *..*..  *.....  **.**.  **..*.  *...*.  *...*.  *...*.  *...*.</code>
<P>
<code>...*..  ***...  *.....  *.*.*.  *.*.*.  *...*.  ****..  *...*.  ****..</code>
<P>
<code>*..*..  *..*..  *.....  *...*.  *..**.  *...*.  *.....  *..**.  *..*..</code>
<P>
<code>.**...  *...*.  *****.  *...*.  *...*.  .***..  *.....  .****.  *...*.</code>
<P>
<code>  J       K       L       M       N       O       P       Q       R   </code>
<P>
<code> </code>
<P>
<code>.****.  *****.  *...*.  *...*.  *...*.  *...*.  *...*.  *****.  ...... </code>
<P>
<code>*.....  *.*.*.  *...*.  *...*.  *...*.  .*.*..  .*.*..  ...*..  ...... </code>
<P>
<code>.***..  ..*...  *...*.  .*.*..  *.*.*.  ..*...  ..*...  ..*...  ...... </code>
<P>
<code>....*.  ..*...  *...*.  .*.*..  **.**.  .*.*..  ..*...  .*....  ...... </code>
<P>
<code>****..  .***..  .***..  ..*...  *...*.  *...*.  ..*...  *****.  ...... </code>
<P>
<code>  S       T       U       V       W       X       Y       Z     blank  </code>
<P>
<B>Note</B> that the sixth column of each character contains only periods.  
This is to define a natural spacing useful in strings.
<P>
<P>
Your device driver is to read formatting commands from an input stream 
and format characters from fonts C1 and C5 onto a  <IMG WIDTH=55 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline117" SRC="http://uva.onlinejudge.org/external/4/403img1.gif"   >  grid which
initially contains periods in every grid postion (a blank piece of 
paper).  Each format command may cause the contents of any of the cell 
positions to change with possible overrides to cell postions.  Note 
that blanks from either font and empty cell positions (containing 
periods) from the C5 font <B>do not</B> overwrite the contents of cells. It
is also possible that the commands cause formatting that would be 
placed off of either side or the bottom; such formatting is simply 
truncated.  Formatting continues until an end-of-page command is 
reached.
<P>
<P>
The input stream consists of a series of lines each containing exactly 
one command and its argument(s).  Each command begins in column 1 with 
a period and is followed by 0 to 4 arguments.  Possible input commands 
to your device driver are as follows.
<P>
<P> <IMG WIDTH=707 HEIGHT=157 ALIGN=BOTTOM ALT="tabular42" SRC="http://uva.onlinejudge.org/external/4/403img1.gif"   > <P>
<P>
All commands start in column 1 of the input line and arguments (if any) 
will be separated by at least one space.  Each command will have 
exactly the arguments as prescribed in the above table.  (Input 
ranges/values will be adhered to and there will be no extraneous or 
missing arguments.)
<P>
<UL><LI> The ``<TT>.P</TT>&quot;/place command places a string of font F whose top left corner
is at location (<I>R</I>,<I>C</I>) with the first character in the string and 
continues horizontally to the right across the page.<LI> The ``<TT>.L</TT>&quot;/left justify command places a string of font F whose top left
corner is at location (<I>R</I>, 1) with the first character in the string and 
continues horizontally to the right across the page.<LI> The ``<TT>.R</TT>&quot;/right justify command places a string of font F whose top
right corner is at location (<I>R</I>, 60) with the last character in the 
string and continues horizontally to the left across the page.<LI> The ``<TT>.C</TT>&quot;/center command horizontally centers a string of font F on the
page with the top row of string at row <I>R</I>.  If the centering cannot be 
exact on the grid (ie the string takes an odd number of cells 
horizontally), the string should be centered equally on either side of 
the 31st column.<LI> The ``<TT>.EOP</TT>&quot; command signals the end of page.  This command signals your
program to output/flush its internal buffer, and start formatting a new 
blank page with the next line of input.  You are guaranteed that &quot;.EOP&quot; 
is the last line/command of the input file. 
</UL>
<P>
Argument 1 indicates the font to be used in the command.  Argument 2 
indicates the row (<I>R</I>) in which text is to be placed.  If the font is 
C5, then text will be placed in rows <I>R</I> through <I>R</I>+4.  Argument 3 (if 
included) indicates the leftmost position of a string.  Argument 4 is a 
string of up to 60 valid characters (upper case letters or space if font is C5, or any printable character if font is C1) 
delimited by the `<code>|</code>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will consist of a series of commands and their 
arguments (exactly 1 per line).  You are to start with a ``blank&quot; piece
of paper and read the input file formatting and flushing paper until 
end of file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
With each ``<TT>.EOP</TT>&quot; command, you are to output the  <IMG WIDTH=55 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline117" SRC="http://uva.onlinejudge.org/external/4/403img1.gif"   >  grid
representing
the current format of the page.  In order to denote the end of page for 
the judges, you are to follow each outputted page with a blank line, a 
line of 60 dashes ( `<TT>-</TT>' ), and another blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>.C C5 3 |ACM| 
.C C1 10 |SOUTH CENTRAL REGION PROBLEM FOUR SAMPLE OUTPUT| 
.C C5 20 |OVERFLOW CENTERED LARGE FONT| 
.C C5 30 |CENTERED| 
.P C1 33 11 |LINE THAT OVERWRITES THROUGH CENTERED| 
.L C1 40 |SMALL FONT LINE IS LEFT JUSTIFIED ON ROW FORTY| 
.R C5 50 |RIGHT| 
.P C5 57 10 |BOTTOM AND RIGHT TRUNCATION| 
.EOP</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>............................................................ 
............................................................ 
......................***...****.*...*...................... 
.....................*...*.*...*.**.**...................... 
.....................*****.*.....*.*.*...................... 
.....................*...*.*.....*...*...................... 
.....................*...*..****.*...*...................... 
............................................................ 
............................................................ 
.......SOUTH.CENTRAL.REGION.PROBLEM.FOUR.SAMPLE.OUTPUT...... 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
.****.*****.*...*.*****.*****.****..*****.****........*..... 
*...*.*.....**..*.*.*.*.*.....*...*.*.....*...*.......*..... 
*.....***...*.*.*...*...***...****..***...*...*.......*..... 
*.....*.....*..**...*...*.....*..*..*.....*...*.......*..... 
.****.*****.*...*..***..*****.*...*.*****.****........*****. 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
.......****.*****.*...*.*****.*****.****..*****.****........ 
......*...*.*.....**..*.*.*.*.*.....*...*.*.....*...*....... 
......*.....***...*.*.*...*...***...****..***...*...*....... 
......*...LINE.THAT.OVERWRITES*THROUGH.CENTERED.*...*....... 
.......****.*****.*...*..***..*****.*...*.*****.****........ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
SMALL.FONT.LINE.IS.LEFT.JUSTIFIED.ON.ROW.FORTY.............. 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
............................................................ 
..............................****..*****..****.*...*.*****. 
..............................*...*...*...*.....*...*.*.*.*. 
..............................****....*...*..**.*****...*... 
..............................*..*....*...*...*.*...*...*... 
..............................*...*.*****..***..*...*..***.. 
............................................................ 
............................................................ 
.........****...***..*****.*****..***..*...*........***..*.. 
.........*...*.*...*.*.*.*.*.*.*.*...*.**.**.......*...*.**. 
.........****..*...*...*.....*...*...*.*.*.*.......*****.*.* 
.........*...*.*...*...*.....*...*...*.*...*.......*...*.*..

------------------------------------------------------------</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
404||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Radar Scopes</TITLE>
<META NAME="description" CONTENT="Radar Scopes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Radar Scopes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You have been hired to a team of software designers to write a new air-
traffic control system.  One of the functions of this new software is 
to automatically verify the functioning of the subject aircrafts' 
instrumentation and alert controllers to endangered, newly aloft, or 
possibly downed aircraft.  You are to write a prototype of this 
function.
<P>
<P>
Your program will be given a series of scenarios which include 2 radar 
sweeps each.  Each radar sweep will find 0 to 100 airplanes.  Each time 
a sweep encounters a plane, the data acquisition system captures an 
azimuth reading and distance (in miles) from the radar.  It will also 
retrieve (from the plane) a squawk number and a ground speed in 
miles/hour (actually an airspeed with wind corrections).  Based on the 
two radar sweeps, your program is to determine if a warning is required 
for any plane in the radar's domain.
<P>
<P>
You should assume a radar range (radius of the area covered) of 10 
miles and instantaneous sweeps that occur 5 seconds apart.
<P>
<P>
Based on the information about the radar and planes, you are to 
determine if the controllers should be warned of potential problems.
<P>
<P>
An ``equipment warning&quot; is issued if the average of the plane's two
indicated airspeeds is not within 10% of the airspeed
measured/calculated based on radar sweeps.
<P>
<P>
A ``new intrusion&quot; warning is issued if the second radar sweep indicates
a plane which was not present in the first sweep, but whose indicated 
airspeed + 10% is sufficient to have brought the plane onto the scope
(on the shortest path) between the two sweeps.  If the speed is not 
sufficient to account for a plane which was already aloft, then the 
assumption must be made that there is a ``new aloft&quot; warning to be
issued because a plane has just taken off within the domain of the 
radar.
<P>
<P>
A ``domain exited&quot; warning is issued if the first sweep of the radar
indicates a plane which is not seen in the second sweep but whose 
indicated airspeed + 10% is sufficient to have accounted for the plane
leaving the range of the radar (on the shortest path) within the two 
sweeps.  If the speed is not sufficient to allow the plane to leave the 
radar scope between the sweeps, a ``domain loss&quot; warning is issued
indicating that the plane has either landed or crashed with the 
controller's domain.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of each scenario contains a single integer ( <IMG WIDTH=101 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   > )
that indicates the number of planes detected in the first sweep.  The 
next  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   >  lines each contain the description of exactly one detected
plane in sweep 1.  Each description contains a squawk number, an 
azimuth, a distance, and a ground speed.  The squawk number is an 
integer between 1 and 5 digits in length.  The azimuth, distance and 
ground speed are all real numbers in the format <TT>XXX.XXX</TT> with leading 
and trailing zeroes as needed to fill all 6 places.
<P>
<P>
The squawk number (0&lt;<I>S</I>&lt;32767) is a globally unique integer that
identifies each plane and is used to match planes from sweeps 1 and 2.  
The azimuth ( <IMG WIDTH=172 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   > ) is the angle in degrees from North
(sweeping in a circle toward the East) where the plane was detected.  
Therefore, East is at 90 degrees; South is at 180 degrees; and West is 
at 270 degrees.  The distance ( <IMG WIDTH=174 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   > ) is the distance
from the radar to the plane (added distance due to altitude has been 
removed by the radar's sensing logic).  The ground speed 
( <IMG WIDTH=173 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   > ) is the speed at which the plane is moving (in any
direction) relative to the radar.
<P>
<P>
Immediately following the lines with the descriptions of planes in the 
first sweep is a line with a single integer ( <IMG WIDTH=102 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   > ) indicating the
number of planes detected in the second sweep.  The next  <IMG WIDTH=19 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline46" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   >  lines each
contain the description of exactly one detected plane in sweep 2.
<P>
<P>
The next scenario (if any) starts with  <IMG WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/4/404img1.gif"   >  on the next line.  You are to
read and process scenarios to the end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each scenario, you are to print ``<TT>Scenario # X</TT>&quot; where <I>X</I> is the
number of the scenario starting with 1 for the first scenario and 
incrementing by 1 for successive scenarios.  Each subsequent line 
contains exactly one report for each plane requiring a warning 
indication.  These lines are to be sorted based on the squawk number.  
Reports consist of the squawk number right-justified in columns 1 to 5 
and one of the following warnings ``<TT> -- equipment warning</TT>&quot;,
``<TT> -- new intrusion</TT>&quot;, ``<TT> -- new aloft</TT>&quot;,
``<TT> -- domain exited</TT>&quot;, or ``<TT> -- domain loss</TT>&quot;
starting in column 6.  (You must print the blanks and dashes exactly as 
shown in the strings above.)  There are no messages printed for planes 
for whom no warning applies.
<P>
<P>
After each scenario, print a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
4 
222   060.111   007.600   095.000 
1496  203.122   009.444   598.991 
111   000.000   005.100   999.999 
013   333.333   006.711   188.448 
4 
111   001.000   003.713   999.999 
777   263.122   009.933   477.633 
333   083.014   004.300   127.122 
222   040.713   009.813   098.125
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Scenario # 1 
  013 -- domain loss 
  222 -- equipment warning 
  333 -- new aloft 
  777 -- new intrusion 
 1496 -- domain exited

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
405||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Message Routing</TITLE>
<META NAME="description" CONTENT="Message Routing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Message Routing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The International Standards Organization has defined a Message Handling 
System (MHS) called <TT>X.400</TT>.  One of the functional units of a MHS, the 
MTA, handles routing of messages.  Routing is performed based on 
components of the Originator/Recipient name.  For the purposes of this 
problem, valid components of an O/R name (in order of widest scope to 
narrowest scope) are Country (C), Administrative Management Domain 
(ADMD), Private Management Domain (PRMD), and Organization Name (O).  
Each MTA uses its own routing table to forward messages on to the next 
MTA or delivering the message locally.
<P>
<P>
Your program is to simulate a collection of MTAs processing messages.  
Each time a message arrives (or is submitted) to an MTA, the MTA uses 
the O/R name of the message and the MTA's routing table to forward the 
message on to the appropriate MTA.  If the MTA finds that the message's 
final destination is itself, it will deliver the message locally.  Your 
program is to simulate this message-forwarding activity to trace the 
path of mail through the set of MTAs.
<P>
<P>
The routing function is accomplished by comparing the supplied fields 
of entries in the routing table against the O/R name components of the 
message.  Each routing table entry refers to exactly one MTA although  
MTAs may have multiple entries in the routing table.  The first routing 
table entry (starting from the top) whose fields match the 
corresponding O/R name components in the message is selected and the 
message is forwarded to that MTA.  It is possible for routing table 
entries to contain a wildcard (denoted by an asterisk); wildcard 
components always match the contents of the corresponding O/R name 
component in the message.
<P>
<P>
MTAs are also responsible for routing error detection and recovery.  If 
an MTA detects that it has received a message that it has handled 
before (a circular routing path is detected), it will place the message 
in the undeliverable queue and generate a non-delivery report.  In 
addition, if an MTA is unable to route a message (ie no routing table 
entry match the message's O/R name), it will place the message in the 
undeliverable queue and generate a routing error report.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will consist of a series of message routing 
scenarios.  Input for each scenario starts with a single line that 
contains a single integer ( <IMG WIDTH=90 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/405img1.gif"   > ) indicating the number of MTAs
in the scenario.  Subsequent lines will contain a description for each 
of the <I>M</I> MTAs.
<P>
<P>
Each MTA description starts with a line containing the name of the MTA 
(a left justified alphabetic string of 1 to 10 characters with no 
embedded spaces) in columns 1-10 and an integer ( <IMG WIDTH=71 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/4/405img1.gif"   > ) in column
12 indicating the number of entries in the MTA's routing table.  Each 
of the following <I>I</I> lines will then contain a valid name of an adjacent 
MTA in columns 1-10 followed by the Country, ADMD, PRMD, and 
Organization Name in columns 15-24, 30-39, 45-54, and 60-69 
respectively.  Each O/R name component will consist of 1 to 10 
alphabetic characters left-justified in their field with no embedded 
blanks.  Alternatively, an O/R name component may contain a single 
asterisk (<TT>*</TT>) in the first column in the field indicating a wild-card 
match in the field.
<P>
<P>
Following the description of the MTAs, there will be a single line 
containg a single integer (0&lt;<I>N</I>&lt;32768) indicating the number of messages
to be sent in the simulation.  Each of the subsequent <I>N</I> lines will 
contain the description of exactly one message.  Each message 
description contains a valid name of one of the MTAs described above 
left-justified in columns 1-10 followed by the Country, ADMD, PRMD, and 
Organization Name in columns 15-24, 30-39, 45-54, and 60-69 
respectively.  Each O/R name component will consist of 1 to 10 
alphabetic characters left-justified in their field with no embedded 
blanks and the MTA name is where the message is submitted and the 
simulation begins.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each scenario, you are to print ``<TT>Scenario # X</TT>&quot; where <I>X</I> is the
number of the scenario starting with 1 and incrementing for subsequent 
scenarios.  Each of the following <I>N</I> lines will contain the number of 
the message left-justified in column 1 
immediately followed by one of the following messages:
<P>
<P>
``<code> -- delivered to MTA_NAME</code>&quot;,
``<code> -- circular routing detected by MTA_NAME</code>&quot;, or
<P>
``<code> -- unable to route at MTA_NAME</code>&quot;.
<P>
<P>
In all three messages, <code>MTA_NAME</code> is replaced by the name of the MTA
generating the report.  Other than <code>MTA_NAME</code>, you are to print the
string exactly as above including spacing and dashes. After the list of message reports, you are to print a single blank line 
and continue processing with the next scenario.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 
NAULINS    3 
HOUSTON       US            SHIP            *              UHDOWNTOWN 
NAULINS       US            SHIP            *              UNO 
DALLAS        US            AIR             UT             * 
HOUSTON    4 
HOUSTON       US            *               UH             UHDT 
SANANTONIO    US            BUS             UT             UTSA 
DALLAS        US            AIR             UT             * 
NAULINS       US            SHIP            *              UNO 
DALLAS     7 
DALLAS        US            *               UT             UTD 
DALLAS        US            *               UT             UTA 
HOUSTON       US            *               UH             * 
SANANTONIO    US            AIR             UT             UTSA 
OKLAHOMA      US            BUS             *              OU 
NAULINS       US            AIR             *              UNO 
HOUSTON       US            SHIP            *              * 
OKLAHOMA   3 
OKLAHOMA      US            *               *              OU 
DALLAS        US            AIR             *              * 
SANANTONIO    US            BUS             *              * 
SANANTONIO 5 
HOUSTON       *             *               *              UNO 
HOUSTON       US            BUS             UH             * 
DALLAS        US            AIR             *              * 
SANANTONIO    US            *               UT             UTSA 
OKLAHOMA      US            BUS             *              * 
5 
SANANTONIO    US            AIR             COLLEGE        UNO 
OKLAHOMA      US            BUS             UH             UHDT 
DALLAS        US            SHIP            COLLEGE        UNO 
NAULINS       US            AIR             COLLEGE        OU 
HOUSTON       US            AIR             UT             UTSA</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Scenario # 1 
1 -- unable to route at HOUSTON 
2 -- delivered to HOUSTON 
3 -- delivered to NAULINS 
4 -- unable to route at NAULINS 
5 -- circular routing detected by DALLAS</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
406||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Prime Cuts</TITLE>
<META NAME="description" CONTENT="Prime Cuts">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Prime Cuts</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A prime number is a counting number ( <IMG WIDTH=69 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/4/406img1.gif"   > ) that is evenly
divisible only by 1 and itself. In this problem you are to write a
program that will cut some number of prime numbers from the list of
prime numbers between (and including) 1 and <I>N</I>. Your program will read
in a number <I>N</I>; determine the list of prime numbers between 1 and <I>N</I>; and
print the <I>C</I>*2 prime numbers from the center of the list if there are an
even number of prime numbers or (<I>C</I>*2)-1 prime numbers from the center of
the list if there are an odd number of prime numbers in the list.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each input set will be on a line by itself and will consist of 2
numbers. The first number ( <IMG WIDTH=105 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/4/406img1.gif"   > ) is the maximum number in the
complete list of prime numbers between 1 and <I>N</I>. The second number
( <IMG WIDTH=83 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/406img1.gif"   > ) defines the <I>C</I>*2 prime numbers to be printed from the center of
the list if the length of the list is even; or the (<I>C</I>*2)-1 numbers to be
printed from the center of the list if the length of the list is odd.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input set, you should print the number <I>N</I> beginning in column 1
followed by a space, then by the number <I>C</I>, then by a colon (<TT>:</TT>), and then
by the center numbers from the list of prime numbers as defined above.
If the size of the center list exceeds the limits of the list of prime
numbers between 1 and <I>N</I>, the list of prime numbers between 1 and <I>N</I>
(inclusive) should be printed. Each number from the center of the list
should be preceded by exactly one blank. Each line of output should be
followed by a blank line. Hence, your output should follow the exact
format shown in the sample output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>21 2
18 2
18 18
100 7</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>21 2: 5 7 11

18 2: 3 5 7 11

18 18: 1 2 3 5 7 11 13 17

100 7: 13 17 19 23 29 31 37 41 43 47 53 59 61 67</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
407||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.47)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gears on a Board</TITLE>
<META NAME="description" CONTENT="Gears on a Board">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="LaTeX2HTML v2K.1beta">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gears on a Board</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An engineering firm called ``Gears R Us" needs a program which can
evaluate the operation of gears on a board. The board is a two-dimensional
mounting plane which allows gears with two levels of teeth
(an inside radius closest to the board and an outside radius away from
the board). The gears rotate around the center of their diameter and
interact by turning an adjacent gear which it touches (either on the
inside or outside radiuss) with a equal tangential velocity. Angular
velocity is the same for both the inside and outside radius gears.

<P>

<P>
<BR>
``Gears R Us" uses square mounting boards which have a <!-- MATH
 $300 \times 300$
 -->
<SPAN CLASS="MATH">300&#215;300</SPAN> grid
of mounting holes on 1 cm centers. When viewing the board, the lower left
of the board is position <SPAN CLASS="MATH"><I>x</I> = 1</SPAN>, <SPAN CLASS="MATH"><I>y</I> = 1</SPAN>; the upper right of the board is
position <SPAN CLASS="MATH"><I>x</I> = 300</SPAN>, <SPAN CLASS="MATH"><I>y</I> = 300</SPAN>. The gears mount only on mounting holes and are
available with integer inside and outside radii between 1 and 100. The
``motor" gear is the only original source of energy of any board and is
actually a gear (powered from behind the board) subject to all the
restrictions described for gears above. The following diagram shows a
sample configuration.

<P>

<BR>
<center><IMG
 WIDTH="547" HEIGHT="437" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="\begin{picture}(10500,7000)(-2500,-1500)
% put(1902.000,2194.500)\{ arc\{1710.59...
...[l]{{\tt\char93 2} \\ ir = 8\\ or = 4\\ {\tt L 187.50}\\ (43,74)}}
\end{picture}">
</center><BR>

<P>
In the above example, the motor is at location <SPAN CLASS="MATH"><I>x</I> = 20</SPAN>, <SPAN CLASS="MATH"><I>y</I> = 100</SPAN>; the inside
and outside radii of the gears the motor drives are both 5 centimeters,
and the motor is rotating to the left (counter-clockwise) at 300 RPM's.
By observation and computation, you can see that the motor touches
(without overlapping) the inside radius of Gear <TT>#1</TT>. The inside radius
of Gear <TT>#1</TT> touches the inside radius of Gear <TT>#2</TT> and Gear <TT>#3</TT>.
The outside radius of Gear <TT>#3</TT> touches the outside radius of Gear <TT>#4</TT>;
the inside radius of Gear <TT>#4</TT> touches the inside radius of Gear <TT>#5</TT>.

<P>

<P>
<BR>
Given the data in the above example, it is possible to compute that Gear
<TT>#1</TT> rotates to the right (clockwise) at 83.33 RPM's; Gear <TT>#2</TT>
rotates to the left (counter-clockwise) at 187.50 RPM's; Gear <TT>#3</TT>
rotates to the left at 150.00 RPM's; Gear <TT>#4</TT> rotates to the right
at 281.25 RPM's; and Gear <TT>#5</TT> rotates to the left at 33.75 RPM's.

<P>

<P>
<BR>
Although this example does not include any off-nominal conditions,
``Gears R Us" needs your program to isolate two error conditions. The
first error occurs when two or more gears would overlap at either the
inner or outter radius. The second error condition occurs when any gear
is being driven at two or more different speeds. It is valid for two or
more gears to drive another gear at the same speed (and in the same
direction).

<P>

<P>
<BR>
It is possible for a warning condition to occur when 1 or more gears are
idle (ie rotation <SPAN CLASS="MATH">= 0.0</SPAN>). If this condition occurs, your program will
have to print a warning message as described below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to your program consists of an undetermined number of
configurations to be analyzed. Each set starts with a single line of
six integers. 

<P>

<P>
<BR>
The first two integers are the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the
motor (<!-- MATH
 $1 \le x , y \le 300$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">300</SPAN>); the next two integers are the inside and
outside radii of the motor gear respectively (<!-- MATH
 $1 \le ir , or \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$"><I>ir</I>, <I>or</I><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">100</SPAN>); the
fifth integer is the rotational velocity (<!-- MATH
 $1 \le \mbox{abs}(AV) \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">abs(<I>AV</I>)<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">1000</SPAN>) of the
motor in RPM's (negative representing counter-clockwise rotation and
positive representing clockwise rotation); the sixth integer is the
number of gears (<!-- MATH
 $1 \le NG \le 20$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$"><I>NG</I><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">20</SPAN>) excluding the motor that are mounted on
the board.

<P>

<P>
<BR>
Each of the following <SPAN CLASS="MATH"><I>NG</I></SPAN> lines contain exactly 4 integers
representing gears 1 through <SPAN CLASS="MATH"><I>NG</I></SPAN> respectively. The first two integers
represent the <SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN> coordinates (<!-- MATH
 $1 \le x , y \le 300$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">300</SPAN>) of the gear and the
second pair of integers represent the inside and outside radii of the
gear respectively (<!-- MATH
 $1 \le ir , or \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$"><I>ir</I>, <I>or</I><IMG
 WIDTH="20" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/407img1.png" 
 ALT="$ \le$">100</SPAN>).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input set, your program should print either a list of the gears
and the rotation value for each or one of two error messages. The first
line of each output set should be a line containing only ``<TT>Simulation #X</TT>"
where <SPAN CLASS="MATH"><I>X</I></SPAN> is the simulation number (starting with 1) and is left-justified starting in column 13.

<P>

<P>
<BR>
If there are no errors, lines 2 through <SPAN CLASS="MATH"><I>NG</I></SPAN>+1 of the output set should
contain the gear number right-justified in columns 1 and 2, a colon in
column 3, either a `<TT>L</TT>' for counter-clockwise rotation of the gear or a
`<TT>R</TT>' for clockwise rotation in column 5, and the magnitude of the
rotation always printed with two digits to the right of the decimal
point and are left-justified starting in column 7. If any gear has
rotation of magnitude zero, you should print the message
``<code>Warning -- Idle Gear</code>" in columns 5 through 24 instead of the rotation direction and
magnitude.

<P>

<P>
<BR>
If there is an error, your program should print only the first line
containing ``<TT>Simulation #X</TT>" and a second line containing only one of
two error messages left-justified in column 1. If there is an overlapping
of two or more gears at either in inner or outter radii, your program
should print the message ``<code>Error -- Overlapping Gears</code>". If there is any
gear which is being driven by two or more <B>different</B> vectors, your
program should print the message ``<code>Error -- Conflicting Gear Rotation</code>".
Your program should give precedence to the overlapping error condition.

<P>

<P>
<BR>
The last line of output for each output set should be an empty line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
20 100 5 5 -300 5
43 100 18 10
43 74 8 4
71 100 10 15
94 100 3 8
122 100 25 6
20 100 5 5 -300 5
43 100 18 10
43 74 8 4
71 100 10 10
89 100 3 8
105 100 25 6
20 100 5 5 -300 5
43 100 18 10
43 74 8 4
71 100 10 10
89 100 3 8
125 100 25 6
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Simulation #1
 1: R 83.33
 2: L 187.50
 3: L 150.00
 4: R 281.25
 5: L 33.75

Simulation #2
Error -- Overlapping Gears

Simulation #3
 1: R 83.33
 2: L 187.50
 3: L 150.00
 4: R 187.50
 5: Warning -- Idle Gear
</PRE>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2002-03-02
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
408||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Uniform Generator</TITLE>
<META NAME="description" CONTENT="Uniform Generator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Uniform Generator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Computer simulations often require random numbers. One way to generate
pseudo-random numbers is via a function of the form
<P>
<P> <IMG WIDTH=404 HEIGHT=18 ALIGN=BOTTOM ALT="displaymath29" SRC="http://uva.onlinejudge.org/external/4/408img1.gif"   > <P>
<P>
where `` <IMG WIDTH=13 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline31" SRC="http://uva.onlinejudge.org/external/4/408img1.gif"   > &quot; is the modulus operator.
<P>
Such a function will generate pseudo-random numbers (<I>seed</I>) between 0 and
<I>MOD</I>-1. One problem with functions of this form is that they will always
generate the same pattern over and over. In order to minimize this
effect, selecting the <I>STEP</I> and <I>MOD</I> values carefully can result in a
uniform distribution of all values between (and including) 0 and <I>MOD</I>-1.
<P>
<P>
For example, if <I>STEP</I> = 3 and <I>MOD</I> = 5, the function will generate the
series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. In this
example, all of the numbers between and including 0 and <I>MOD</I>-1 will be
generated every <I>MOD</I> iterations of the function. Note that by the nature
of the function to generate the same <I>seed</I>(<I>x</I>+1) every time <I>seed</I>(<I>x</I>)
occurs means that if a function will generate all the numbers between 0 and
<I>MOD</I>-1, it will generate pseudo-random numbers uniformly with
every <I>MOD</I> iterations.
<P>
If <I>STEP</I> = 15 and <I>MOD</I> = 20, the function generates the series
0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0).
This is a poor selection of <I>STEP</I> and <I>MOD</I> because no initial seed
will generate all of the numbers from 0 and <I>MOD</I>-1.
<P>
<P>
Your program will determine if choices of <I>STEP</I> and <I>MOD</I> will
generate a uniform distribution of pseudo-random numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each line of input will contain a pair of integers for <I>STEP</I>
and <I>MOD</I> in that order ( <IMG WIDTH=211 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline77" SRC="http://uva.onlinejudge.org/external/4/408img1.gif"   > ).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each line of input, your program should print the <I>STEP</I> value right-
justified in columns 1 through 10, the <I>MOD</I> value right-justified in
columns 11 through 20 and either ``<TT>Good Choice</TT>&quot; or ``<TT>Bad Choice</TT>&quot;
left-justified starting in column 25. The ``<TT>Good Choice</TT>&quot; message should
be printed when the selection of <I>STEP</I> and <I>MOD</I> will generate all
the numbers between and including 0 and <I>MOD</I>-1 when MOD numbers are
generated. Otherwise, your program should print the message ``<TT>Bad Choice</TT>&quot;.
After each output test set, your program should print exactly one blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 5
15 20
63923 99999</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
         3         5    Good Choice

        15        20    Bad Choice

     63923     99999    Good Choice

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
409||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Excuses, Excuses!</TITLE>
<META NAME="description" CONTENT="Excuses, Excuses!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Excuses, Excuses!</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Judge Ito is having a problem with people subpoenaed for jury duty
giving rather lame excuses in order to avoid serving. In order to
reduce the amount of time required listening to goofy excuses, Judge Ito
has asked that you write a program that will search for a list of
keywords in a list of excuses identifying lame excuses. Keywords can be
matched in an excuse regardless of case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will consist of multiple sets of data.
<P>
<UL><LI> Line 1 of
each set will contain exactly two integers. The first number ( <IMG WIDTH=87 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/4/409img1.gif"   > )
defines the number of keywords to be used in the search. The second
number ( <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/4/409img1.gif"   > ) defines the number of excuses in the set to be
searched.<LI> Lines 2 through <I>K</I>+1 each contain exactly one keyword.<LI> Lines
<I>K</I>+2 through <I>K</I>+1+<I>E</I> each contain exactly one excuse.<LI> All keywords in the
keyword list will contain only contiguous lower case alphabetic
characters of length <I>L</I> ( <IMG WIDTH=83 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/409img1.gif"   > ) and will occupy columns 1 through
<I>L</I> in the input line.<LI> All excuses can contain any upper or lower case
alphanumeric character, a space, or any of the following punctuation
marks [<code>SPMamp</code>&quot;.,!?&amp;] not including the square brackets and will not exceed 70
characters in length.<LI> Excuses will contain at least 1 non-space character.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input set, you are to print the worst excuse(s) from the list.
<P>
<UL><LI> The worst excuse(s) is/are defined as the excuse(s) which contains the
largest number of incidences of keywords.<LI> If a keyword occurs more than
once in an excuse, each occurrance is considered a separate incidence.<LI> A keyword ``occurs&quot; in an excuse if and only if it exists in the string
in contiguous form and is delimited by the beginning or end of the line
or any non-alphabetic character or a space.
</UL>
<P>
For each set of input, you are to print a single line with the number of
the set immediately after the string ``<TT>Excuse Set #</TT>&quot;. (See the Sample
Output). The following line(s) is/are to contain the worst excuse(s)
one per line exactly as read in. If there is more than one worst
excuse, you may print them in any order.
<P>
<P>
After each set of output, you should print a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 3
dog
ate
homework
canary
died
My dog ate my homework.
Can you believe my dog died after eating my canary... AND MY HOMEWORK?
This excuse is so good that it contain 0 keywords.
6 5
superhighway
crazy
thermonuclear
bedroom
war
building
I am having a superhighway built in my bedroom.
I am actually crazy.
1234567890.....,,,,,0987654321?????!!!!!!
There was a thermonuclear war!
I ate my dog, my canary, and my homework ... note outdated keywords?</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Excuse Set #1
Can you believe my dog died after eating my canary... AND MY HOMEWORK?

Excuse Set #2
I am having a superhighway built in my bedroom.
There was a thermonuclear war!</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
410||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Station Balance</TITLE>
<META NAME="description" CONTENT="Station Balance">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Station Balance</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The International Space Station contains many centrifuges in its labs.
Each centrifuge will have some number (<I>C</I>) of chambers each of which
can contain 0, 1, or 2 specimens. You are to write a program which
assigns all <I>S</I> specimens to the chambers such that no chamber contains
more than 2 specimens and the following expression for <I>IMBALANCE</I> is
minimized.
<P>
<P> <IMG WIDTH=390 HEIGHT=49 ALIGN=BOTTOM ALT="displaymath38" SRC="http://uva.onlinejudge.org/external/4/410img1.gif"   > <P>
<P>
where:
<DL ><DT><STRONG> <IMG WIDTH=35 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/4/410img1.gif"   > </STRONG>
<DD> is the Chamber Mass of chamber <I>i</I> and is computed by summing
the masses of the specimens assigned to chamber <I>i</I>.
<DT><STRONG><I>AM</I></STRONG>
<DD> is the Average Mass of the chambers and is computed by
dividing the sum of the masses of all specimens by the
number of chambers (<I>C</I>).
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to this program will be a file with multiple sets of input. The
first line of each set will contain two numbers. The first number
( <IMG WIDTH=76 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/4/410img1.gif"   > ) defines the number of chambers in the centrifuge and the
second number ( <IMG WIDTH=88 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/4/410img1.gif"   > ) defines the number of specimens in the
input set. The second line of input will contain S integers
representing the masses of the specimens in the set. Each specimen
mass will be between 1 and 1000 and will be delimited by the beginning
or end of the line and/or one or more blanks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input set, you are to print a line specifying the set number
(starting with 1) in the format &quot;<TT>Set #X</TT>&quot; where &quot;<TT>X</TT>&quot; is the set
number.
<P>
The next <I>C</I> lines will contain the chamber number in column 1, a
colon in column number 2, and then the masses of the specimens your program
has assigned to that chamber starting in column 4. The masses in your
output should be separated by exactly one blank.
<P>
<P>
Your program should
then print ``<TT>IMBALANCE = X</TT>&quot; on a line by itself where <TT>X</TT> is the
computed imbalance of your specimen assignments printed to 5 digits of
precision to the right of the decimal.
<P>
<P>
The final line of output for
each set should be a blank line. (Follow the sample output format.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 3
6 3 8
3 5
51 19 27 14 33
5 9
1 2 3 5 7 11 13 17 19</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Set #1
 0: 6 3
 1: 8
IMBALANCE = 1.00000

Set #2
 0: 51
 1: 19 27
 2: 14 33
IMBALANCE = 6.00000

Set #3
 0: 1 17
 1: 2 13
 2: 3 11
 3: 5 7
 4: 19
IMBALANCE = 11.60000</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
411||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Centipede Collisions</TITLE>
<META NAME="description" CONTENT="Centipede Collisions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Centipede Collisions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A small boy named Tommy has some toy centipedes that are a series of 1
centimeter segments. Tommy assembles his centipedes to any length he
likes and places them on a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline79" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   >  centimeter board that allows the
centipedes to travel in 1 centimeter wide tracks that criss-cross the
board.
<P>
<P>
The centipedes travel only parallel to either the <I>x</I> or <I>y</I> axis on
the board. Centipede segments of the same centipede advance at the same
time and centipedes advance in cyclic numerical order (all of centipede
0 first, then 1, etc.). When more than one segment of two or more
centipedes occupy the same <I>x</I>,<I>y</I> coordinate, there is a centipede
collision.
<P>
<P>
Anytime a collision occurs, all segments occupying the
collistion site stop and continue to occupy the collision site. All
remaining segments on a centipede detach from the segment involved in
the collision and continue their march until another collision occurs or
an existing collision site is encountered or until the segments fall off
the edge of the board. Anytime a segment enters a collision site, it
becomes part of the collision.
<P>
<P>
Since Tommy left home without his centipede set, his mother has hired
you to write a simulation program for his entertainment. Your program
will simulate his board with a text printout of his grids. For example,
Tommy may simulate 5 centipedes on his board that start out as shown on
the grid on the left and finish as shown on the grid on the right (note
the example grid is only  <IMG WIDTH=55 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   >  whereas Tommy's is  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline79" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   > .)
<P>
9<code>    . . . . . . . . . .</code> <code>    . . . . . . . . . .</code>
<P>
   8<code>    . . . . . . . . . .</code> <code>    . . . . . . . . . .</code>
<P>
   7<code>    1 1 1 1 1 . . . . .</code> <code>    . . . . . X . . . X</code>
<P>
   6<code>    . 0 . . . . . . . .</code> <code>    . . . . . . . . . .</code>
<P>
   5<code>    . 0 . . . . . . . 3</code> <code>    . . . . . . . . . .</code>
<P>
   4<code>    . 0 . . . 2 . . . 3</code> <code>    . . . . . . . . . .</code>
<P>
   3<code>    . 0 . . . 2 . . . 3</code> <code>    . . . . . . . . . .</code>
<P>
   2<code>    . . . . . 2 . . . 3</code> <code>    . . . . . . . . . .</code>
<P>
   1<code>    . . . . . 2 . . . 3</code> <code>    . . . . . . . . . .</code>
<P>
   0<code>    . . . . . 2 4 4 4 3</code> <code>    . X . . . . . . . .</code>
<P>
<I>Y</I><code>                       </code> <I>Y</I><code>                       </code>
<P>
/<I>X</I> /<I>X</I>
<P>
<PRE><TT> 
Where 		 <TT>0</TT> 		 represents a centipede segment traveling from top to bottom,
<P>
		 <TT>1</TT> 		 represents a centipede segment traveling from left to right,
<P>
		 <TT>2</TT> 		 represents a centipede segment traveling from bottom to top,
<P>
		 <TT>3</TT> 		 represents a centipede segment traveling from bottom to top,
<P>
		 <TT>4</TT> 		 represents a centipede segment traveling from right to left, and
<P>
		 <TT>X</TT> 		 represents a collision site involving 2 or more segments.
<P>
</TT></PRE>
<P>
<P>
Your program will simulate up to 10 centipedes that travel on a  <IMG WIDTH=54 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline79" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   > 
board. Tommy has 100 segments that he may use in his simulation. Of
course, no centipede can be longer than 30 segments.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program will consist of a series of simulation sets.
The first line of each input set will be a single integer ( <IMG WIDTH=87 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline101" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   > )
representing the number of centipedes in the simulation. (Centipedes
are numbered 0 through <I>N</I>-1 in the same order as the input.)
<P>
<P>
The next <I>N</I>
lines will each represent one centipede and will contain a single
direction character followed by 3 integers. The direction character can
be `<TT>U</TT>', `<TT>D</TT>', `<TT>L</TT>', or `<TT>R</TT>' for ``<TT>Up</TT>&quot;,
``<TT>Down</TT>&quot;, ``<TT>Left</TT>&quot;, or ``<TT>Right</TT>&quot;
respectively and indicate the direction of travel. The next integer
( <IMG WIDTH=83 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline107" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   > ) indicates the length of the centipede in segments. The
second and third integers indicate the <I>x</I>,<I>y</I> coordinates of the lead
segment ( <IMG WIDTH=104 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline111" SRC="http://uva.onlinejudge.org/external/4/411img1.gif"   > ). The next <I>L</I>-1 segments of the centipede occupy
the <I>L</I>-1 board positions extending in the opposite direction from the
direction of travel starting adjacent to the lead segment.
<P>
<P>
You can be
assured that no centipede segment will originate off the board nor will
the original configuration involve any collisions.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each input simulation set, you should print (exactly) the following
lines as the first two lines of output (starting in column 4).
<P>
<PRE>   0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</PRE>
<P>
The next 30 lines represent the state of the board after the simulation
has completed (all centipede segments have entered a collision site or
fallen off the edge of the board). Columns 1 and 2 should contain the
row number (rows are numbered 29 down to 00) with leading zeroes. Even
numbered columns between 4 and 62 (inclusive) represent the contents of
the board cells. Board cells can contain either an <TT>X</TT> or a period. A
period represents an empty cell and <TT>X</TT> represents a cell that contains 2
or more centipede segments involved in a collision. The last line of
each output set is a blank line.
<P>
<P>
Follow the Sample Output for the exact format of the expected output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>10
R 9 11 23
U 8 11 17
U 5 15 15
U 5 15 8
D 9 23 13
U 6 23 6
R 9 8 9
L 13 17 0
U 12 13 11
L 5 20 9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>   0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
29 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23 . . . . . . . . . . . X . . . X . . . . . . . . . . . . . .
22 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
09 . . . . . . . . . . . . . X . X . . . . . . . X . . . . . .
08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
00 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
412||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pi</TITLE>
<META NAME="description" CONTENT="Pi">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pi</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Professor Robert A. J. Matthews of the Applied Mathematics and Computer
Science Department at the
University of Aston in Birmingham, England has recently described howthe
positions of stars across the
night skymay be used to deduce a surprisingly accurate value of  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > .
This result followed from the application of certain theorems in number theory.
<P>
<P>
Here, we don'thave the night sky, but can use the same theoretical basis to
form an estimate for  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > :
<P>
<BLOCKQUOTE> Given any pair of whole numbers chosen from a large, random collection of
numbers, the
probability that the twonumbers have no common factor other than one (1) is
</BLOCKQUOTE>
<P> <IMG WIDTH=259 HEIGHT=35 ALIGN=BOTTOM ALT="displaymath47" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > <P>
<P>
For example, using the <I>small</I> collection of numbers:
2, 3, 4, 5, 6; there are 10 pairs that can be formed:
(2,3), (2,4), etc. Six of the 10 pairs: (2,3), (2,5), (3,4), (3,5), (4,5)
and (5,6) have no common factor other
than one. Using the ratio of the counts as the probability we have:
<P>
<P> <IMG WIDTH=302 HEIGHT=73 ALIGN=BOTTOM ALT="displaymath49" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > <P>
<P>
In this problem, you'll receive a series of data sets. Each data set
contains a set of pseudo-random positive
integers. For each data set, find the portion of the pairs which may be
formed that have nocommon factor
other than one (1), and use the method illustrated above to obtain an
estimate for  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > . Report this estimate for each data set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of data sets.
<P>
The first line of each data set contains a positive integer value, <I>N</I>,
greater than one (1) and less than 50.
<P>
There is one positive integer per line for the next <I>N</I> lines that constitute
the set for which the pairs are to be
examined. These integers are each greater than 0 and less than 32768.
<P>
Each integer of the input stream has its first digit as the first character
on the input line.
<P>
The set size designator, <I>N</I>, will be zero to indicate the end of data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
A line with a single real value is to be emitted for each input data set
encountered. This value is the estimate for  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   >  for the data set.
An output format like the sample below should be used. Answers must be rounded to six digits after the decimal point.
<P>
For some data sets, it may be impossible to estimate a value for  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/412img1.gif"   > .
This occurs when there are <I>no</I> pairs
without common factors. In these cases, emit the single-line message:
<P>
<P>
<P>
<TT>No estimate for this data set.</TT>
<P>
<P>
<P>
exactly, starting with the first character, <TT>&quot;N&quot;</TT>, as the first character
on the line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
2
3
4
5
6
2
13
39
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output <font size=3>(Your output for the float/real, using
your chosen language, may be default-formatted differently).</A></font></FONT></H2>
<P>
<PRE>3.162278
No estimate for this data set.</PRE>
</BODY>
</HTML>

______________________________________________________
413||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Up and Down Sequences</TITLE>
<META NAME="description" CONTENT="Up and Down Sequences">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Up and Down Sequences</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The <I>quality</I> of pseudo random-number generators used in some computations,
especially simulation, is a
significant issue. Proposed generation algorithms are subjected to many
tests to establish their quality, or,
more usually, their lack of it. One of the common tests is the <I>run test</I>.
<P>
In this test, sequences are tested for ``runs up&quot; and ``runs down.&quot;
<P>
We will examine series of data values for the ``Up&quot; and ``Down&quot; sequences
each series contains.
<P>
<P>
Within a series, an ``Up&quot; sequence continues as long as each data-value
received is not less than the previous data-value.
An ``Up&quot; sequence terminates when a data-value received is less than the
previous data-value received.
<P>
A ``Down&quot; sequence continues as long as each data-value received is not greater
than the previous data-value. A ``Down&quot; sequence terminates when a
data-value received is greater than the previous data-value received.
<P>
<P>
An ``Up&quot; sequence can be initiated by the termination of a ``Down&quot; sequence
and vice versa. (Sequences
initiated in this manner have length one at this initiation point.)
<P>
<P>
All the initial data-values are part of an ``Up&quot; sequence, and contribute
to its length, if the first deviation of the data-values is upwards.
<P>
All the initial data-values are part of a ``Down&quot; sequence, and contribute
to its length, if the first deviation of the data-values is downwards.
<P>
<P>
If the data-values received don't allow classification as either an ``Up&quot;
or a ``Down&quot; sequence, the data should be considered to have neither sequence.
<P>
<P>
Find the average length of both the ``Up&quot; and the ``Down&quot; sequences
encountered for each input line in the
data file. Report these average lengths as each input line is processed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each of the separate series to be examined is contained on a single line
of input.
<P>
<P>
Each series to be analyzed consists of at least one and no more than
30 unsigned, non-zero integers. Each
integer in a series has at least one digit and no more than four digits.
The integers are separated from each
other by a single blank character. Each of the series will be terminated
by a single zero (0) digit. This terminator should not be
considered as being part of the series being analyzed.
<P>
<P>
The <I>set</I> of series to be analyzed is terminated by a single zero (0)
digit as the input on a line. This terminator should not
be considered to be a series, and no output should be produced in response
to its encounter.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
A line with two real values is to be emitted for each input data set
encountered. It must begin with the message ``<TT>Nr values = <I>N</I>:  </TT>&quot;, where <I>N</I> is the number of input data in the line; and then to continue with the average values for runs.
<P>
First, the average ``Up&quot; run
length, then the average ``Down&quot; run length. Separate these values with
a space.
<P>
Answers must be rounded to six digits after the decimal point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 2 3 0
3 2 1 0
1 2 3 2 1 0
2 2 2 2 3 0
4 4 4 4 3 0
4 4 4 3 3 3 3 0
4 4 4 3 3 3 4 0
5 5 5 5 0
1 2 3 2 3 4 5 0
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output <font size=3>(Your output, using your chosen
language, may be default-formatted differently).</A></font></FONT></H2>
<P>
<PRE>Nr values = 3:  2.000000 0.000000
Nr values = 3:  0.000000 2.000000
Nr values = 5:  2.000000 2.000000
Nr values = 5:  4.000000 0.000000
Nr values = 5:  0.000000 4.000000
Nr values = 7:  0.000000 6.000000
Nr values = 7:  1.000000 5.000000
Nr values = 4:  0.000000 0.000000
Nr values = 7:  2.500000 1.000000</PRE>
</BODY>
</HTML>

______________________________________________________
414||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Machined Surfaces</TITLE>
<META NAME="description" CONTENT="Machined Surfaces">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Machined Surfaces</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
An imaging device furnishes digital images of two machined surfaces that
eventually will be assembled in
contact with each other. The roughness of this final contact is to be estimated.
<P>
<P>
A digital image is composed of the two characters, <TT>&quot;X&quot;</TT> and <TT>&quot; &quot;</TT>
(space). There are always 25 columns to an
image, but the number of rows, <I>N</I>, is variable. Column one (1) will always
have an <TT>&quot;X&quot;</TT> in it and will be
part of the left surface. The left surface can extend to the right from
column one (1) as contiguous <TT>X</TT>'s.
<P>
<P>
Similarly, column 25 will always have an <TT>&quot;X&quot;</TT> in it and will be part
of the right surface. The right surface
can extend to the left from column 25 as contiguous <TT>X</TT>'s.
<P>
Digital-Image View of Surfaces
<P>
<PRE><TT> 
		 Left     		                           Right
<P>

<P>
		 <code>XXXX                                              XXXXX</code>	 <IMG WIDTH=29 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/4/414img1.gif" >
<P>
		 <code>XXX                                             XXXXXXX</code>
<P>
		 <code>XXXXX                                              XXXX</code>
<P>
		 <code>XX                                               XXXXXX</code>
<P>
		 <code>.                                                     .</code>
<P>
		 <code>.                                                     .</code>
<P>
		 <code>.                                                     .</code>
<P>
		 <code>XXXX                                               XXXX</code>
<P>
		 <code>XXX                                              XXXXXX</code>	 <IMG WIDTH=37 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/4/414img1.gif"   > 
<P>
		  <IMG WIDTH=8 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/4/414img1.gif"   >  		   		                    <IMG WIDTH=8 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/4/414img1.gif"   > 
<P>
		 1         					    25
<P>
</TT></PRE>
<P>
In each row of the image, there can be zero or more space characters
separating the left surface from the right surface.
There will never be more than a single blank <I>region</I> in any row.
<P>
<P>
For each image given, you are to determine the total ``void&quot; that will
exist after the left surface has been
brought into contact with the right surface. The ``void&quot; is the total
count of the spaces that remains between
the left and right surfaces after theyhave been brought into contact.
<P>
<P>
The two surfaces are brought into contact by displacing them strictly
horizontally towards each other until a
rightmost <TT>&quot;X&quot;</TT> of the left surface of some row is immediately to the
left of the leftmost <TT>&quot;X&quot;</TT> of the right surface of that row.
There is no rotation or twisting of these two surfaces as they are brought
into contact; they remain rigid, and only move horizontally.
<P>
<P>
<P>
<B>Note:</B> The original image may show the two surfaces already in contact,
in which case no displacement enters into the contact roughness estimation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of digital images. Each image data set has
the following format:
<P>
<DL ><DT><STRONG>First line -</STRONG>
<DD> A single unsigned integer, <I>N</I>, with value greater than
zero (0) and less than 13. The
first digit of <I>N</I> will be the first character on a line.
<P>
<DT><STRONG>Next <I>N</I> lines -</STRONG>
<DD> Each line has exactly 25 characters; one or more <TT>X</TT>'s, then zero or more spaces, then one or more <TT>X</TT>'s.
<P>
 </DL>
<P>
The end of data is signaled by a null data set having a zero on the first
line of an image data set and no further data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each image you receive as a data set, you are to reply with the total
void (count of spaces remaining
after the surfaces are brought into contact). Use the default output for
a single integer on a line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input
<font size=3>(character <TT>&quot;B&quot;</TT> for ease of reading.
The actual input file will use the ASCII-space character, not <TT>&quot;B&quot;</TT>).</font></A></font></H2>
<P>
<PRE>4
XXXXBBBBBBBBBBBBBBBBXXXXX
XXXBBBBBBBBBBBBBBBXXXXXXX
XXXXXBBBBBBBBBBBBBBBBXXXX
XXBBBBBBBBBBBBBBBBBXXXXXX
2
XXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXX
1
XXXXXXXXXBBBBBBBBBBBBBBXX
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>4
0
0</PRE>
</BODY>
</HTML>

______________________________________________________
415||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Sunrise</TITLE>
<META NAME="description" CONTENT="Sunrise">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Sunrise</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Compute the fraction of the solar-disc area that is visible at specified
times after the onset of sunrise.
<P>
<P>
This is a two-body problem; there is a single planet and a single star.
<P>
<P>
Assume a perfectly spherical planet with a radius of 3950 miles. Ignore
any possible atmospheric effects on the results to be determined.
<P>
<P>
At a distance of 92,900,000 miles from the planet's center is an illuminating
class four star. For the determinations to be made in this problem,
ignore anyphenomena arising from the orbital motion of the planet
about the star and consider the illuminating star to be a planar disc. The
plane in which the disc lies is perpendicular to the line
between the planet center and the solar disc center. The solar disc has a
radius of 432,000 miles.
<P>
<center><img src=415img2.gif></center>
<P>
Assume the planet rotates uniformly, making one full rotation in precisely
24 hours.
<P>
<P>
The sun is centered directly over the planet's equator during the entire
revolution of the planet.
<P>
<P>
Let time be measured from when the first solar rays of the morning reach a
given reference point on the
equator. For each time value giveninthe input data stream, compute the
fraction of the solar disc area that
is illuminating this reference point on the equator.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input time data are given as floating point values measured in seconds.
There will be no time-data values less than zero,
and none greater than 600. Each line of input will have one floating-point
value that should be read using the default float/real input format.
<P>
<P>
Process the input data stream until the end-of-file is encountered.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Aline with a single real value is to be emitted for each input data value
received. This value is to be the
fraction of the solar disc (area) that is illuminating the reference point
at the given time. The default real/float output format should be used. 
Non-zero answers must be within 0.1% of the correct answer. If an answer
should be zero it must be reported as a value within the interval +/-0.001.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
0.0
600.0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output
<font size=3>(Your output, using your chosen language, may be default-formatted differently).</font></A></FONT></H2>
<P>
<PRE>
0.000
1.000
</PRE>
</BODY>
</HTML>

______________________________________________________
416||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>LED Test</TITLE>
<META NAME="description" CONTENT="LED Test">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">LED Test</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Many electronic devices have digital read-outs that are made using
light-emitting diode (LED) arrays. A
common digital display element uses seven, bar-shaped LED's, with the
seven LED bars (segments) arranged and identified as:
<center><img src=416img4.gif></center>
<P>
Digits are displayed by illuminating various combinations of the seven
segments in accordance with the following table:
<P>
<center><img src=416img5.gif></center>
<P>
For example, the digit three (3) would be displayed as the illumination of
the segments {<TT>a</TT>,<TT>b</TT>,<TT>c</TT>,<TT>d</TT>,<TT>g</TT>} as:
<P>
<center><img src=416img6.gif></center>
<P>
The problem below is abstracted from one occurring in the incoming-parts
inspection department, in a
microwave-oven manufacturing facility. The incoming seven-segment LED's are
checked for their proper
functioning by automated equipment running under programmable control.
<P>
<P>
<P>
<B>Note:</B> The solution to the problem below will not be a
complete nor necessarily useful test for the actual inspections that
would be conducted.
<P>
<P>
You are to create a program that will observe successive sets of illumination
conditions of the seven segments of a single-digit display,
and decide whether the sequence of illuminations could have been a valid
``count down&quot; sequence.
<P>
<P>
Unfortunately, for the LED your program is to observe, some of the segments
may be burned out at the start
of your test, and additional segments may burn out during the test. No
segments will everfail into the ON
mode; no burned out segments will recover. Nevertheless, you are expected
to be able to ``read&quot; through the
ambiguities this malfunctioning display presents, by watching the display
count down through one or more values.
<P>
</U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of data sets having the following format:
<P>
<DL ><DT><STRONG>First line -</STRONG>
<DD> A single unsigned integer, N, with value greater than zero (0)
and less than eleven (11). The integer is left-justified on the input line.
<P>
<DT><STRONG>Next <I>N</I> lines -</STRONG>
<DD> Each line has a string of seven (7) contiguous <TT>Y</TT>/<TT>N</TT> characters showing the light condition of
the segments of the LED display. These successive lines supposedly
represent a ``count down&quot; sequence.
The first of these seven characters, the illumination reading for the ``<TT>a</TT>&quot;
segment, will be the first character on a line.
<P>
 </DL>
<P>
The end of data is signaled by a null data set having a zero on the first
line and no further data.
<P>
<P>
There is no information about where the ``count down&quot; sequence begins for
a given data set. There is no
information that carries over from one data set to the next; each data set
represents a <I>different</I> LED being tested.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Foreach supposed ``count down&quot; sequence you receive as a data set, you are
to reply either:
<PRE>MATCH</PRE>
-or-
<PRE>MISMATCH</PRE>
<P>
depending on whether this sequence could possibly be a valid ``count down&quot;
sequence <I>somewhere</I> within
the sequence { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 } if an unknown number of
burned-out segments were present at the
beginning of the test, and, with possible burn-outs occurring during the
test. Your output must be at the beginning of the line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
YYYYNYY
2
NNNNNNN
NNNNNNN
2
YYYYYYY
YYYYYYY
3
YNYYYYY
YNYYNYY
NYYNNYY
3
YNYYYYN
YNYYNYN
NYYNNYN
3
YNYYYYN
YNYYNYN
NYYNYYN
4
YYYYYYY
NYYNNNN
NNYYYYN
NNNYNNN
3
NNNNNNN
YNNNNNN
NNNNYNN
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MATCH
MATCH
MISMATCH
MATCH
MATCH
MISMATCH
MATCH
MATCH</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
417||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Word Index</TITLE>
<META NAME="description" CONTENT="Word Index">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Word Index</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Encoding schemes are often used in situations requiring encryption or
information storage/transmission
economy. Here, we develop a simple encoding scheme that encodes particular
types of words with five or fewer (lower case) letters as integers.
<P>
<P>
Consider the English alphabet {<TT>a,b,c,...,z</TT>}. Using this alphabet, a set
of <I>valid</I> words are to be formed that
are in a strict lexicographic order. In this set of <I>valid</I> words, the
successive letters of a word are in a strictly
ascending order; that is, later letters in a valid word are always <I>after</I>
previous letters with respect to their
positions in the alphabet list {<TT>a,b,c,...,z</TT>}. For example,
<P>
<P>
<TT>abc aep gwz</TT>
<P>
<P>
<P>
are all <I>valid</I> three-letter words, whereas
<P>
<P>
<TT>aab are cat</TT>
<P>
<P>
<P>
are not.
<P>
<P>
For each <I>valid</I> word associate an integer which gives the position of
the word in the alphabetized list of words. That is:
<P>
<PRE>    a -&gt; 1
    b -&gt; 2
    .
    .
    z -&gt; 26
    ab -&gt; 27
    ac -&gt; 28
    .
    .
    az -&gt; 51
    bc -&gt; 52
    .
    .
    vwxyz -&gt; 83681</PRE>
<P>
Your program is to read a series of input lines. Each input line will have
a single word on it, that will be
from one to five letters long. For each word read, if the word is <I>invalid</I>
give the number 0. If the word read
is <I>valid</I>, give the word's position index in the above alphabetical list.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of single words, one per line. The words are
at least one letter long and no
more that five letters. Only the lower case alphabetic {<TT>a,b,...,z</TT>}
characters will be used as input. The first
letter of a word will appear as the first character on an input line.
<P>
<P>
The input will be terminated by end-of-file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is a single integer, greater than or equal to zero (0) and less
than or equal 83681. The first digit
of an output value should be the first character on a line. There is
one line of output for each input line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>z
a
cat
vwxyz</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>26
1
0
83681</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
418||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Molecules</TITLE>
<META NAME="description" CONTENT="Molecules">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Molecules</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In this abstraction from a molecular engineering problem associated with
developing a synthetic fuel, we
are given four, equal-length, molecular chains that are to form a super
molecule. In the simplified two-dimensional model used here, 
the super molecule is formed as an interlocking rectangular arrangement of
the four given molecular chain strands. The interlocking feature is the
sharing of a common molecule between pairs of chains.
<P>
<P>
To illustrate, suppose we have the four, length-twelve, molecular chains:
<P>
<PRE>                      O I M D I H E I A F N L
                      C H J D B J M H P J K D
                      L C B J O J G I E K B O
                      K A I N L H L O L B E J</PRE>
<P>
These can be placed in the interlocking arrangements:
<P>
<PRE>                            O           L
                            I           C
                            M           B
                      C H J D B J M H P J K D
                            I           O
                            H           J
                            E           G
                            I           I
                            A           E
                            F           K
                      K A I N L H L O L B E J
                            L           O</PRE>
<P>
-OR-
<P>
<PRE>                                    O     C
                                    I     H
                                    M     J
                                    D     D
                      L C B J O J G I E K B O
                                    H     J
                                    E     M
                                K A I N L H L O L B E J
                                    A     P
                                    F     J
                                    N     K
                                    L     D</PRE>
<P>
In this problem, we have some constraints on the arrangements being sought:
<P>
<DL COMPACT><DT><STRONG>1)</STRONG>
<DD> Any of the four chains can be placed in any of the super molecule's
four, general, horizontal or vertical slots, as in the illustrations above.
<DT><STRONG>2)</STRONG>
<DD> If a chain is placed in one of the two horizontal slots, it must
keep the same left-to-right orientation
it had in the original chain listing.
That is, <I>it can't be flipped end-for-end</I>.
<DT><STRONG>3)</STRONG>
<DD> If a chain is placed in one of the two vertical slots, its
left-to-right orientation in the original chain
listing must match its top-to-bottom orientation in the slot. It can't be
flipped end-for-end from this orientation.
<DT><STRONG>4)</STRONG>
<DD> The enclosed rectangular region at the center of the super molecule
must have as large an area as
possible, and the area cannot be zero. (The large-area constraint arises
from a fuel-volatility criterion for the arrangement.
The non-zero area constraint arises because neither the vertically nor the
horizontally oriented chains can lie immediately next to each other without
producing side-effects we're not considering.)
<P>
The area is measured as the count of vacant character positions within
the enclosed rectangle of the
super molecule. The area counts of the two super molecules illustrated above
are thirty (30) and four (4).
<DT><STRONG>5)</STRONG>
<DD> The fore and aft tails of each chain extending beyond the super
molecule's central interlocked rectangle must have a minimum length
of one chain element. That is, none of the four original chains
can have either its first or its last element as part of the
interlocking-rectangle boundary.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of data sets. Each data set consists of four
molecular chains of 12 fixed elements each.
These 12 elements are given as contiguous capital letters. The molecule
designators within
the chains will be restricted to the sixteen letters, <TT>A...P</TT>. The first
letter of a chain will appear as the first character on an input line.
<P>
<P>
The first molecule designator within the first chain of a data set will
be the letter <TT>&quot;Q&quot;</TT> to indicate the end of data.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
A line with a single integer is to be emitted for each input data set
encountered. This integer is the maximum area enclosed by any legitimate
arrangement of the four chains.
<P>
<P>
Use the output value zero (0) to indicate that no legitimate super molecule
could be formed for a givendata set.
<P>
<P>
The first digit of an output value should be the first character on a
line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>CDBADCBBEFEF
DACCBADAFEAB
EFBDCAADBDCD
ABCDABCDABCD
DACCBADAFEAB
EFBDCAADBDCD
ABCDABCDABCD
CDBADCBBEFEF
ABABABABABAB
CDCDCDCDCDCD
EEEEEEEEEEEE
FFFFFFFFFFFF
ABAAAAAAAABA
CBCCCCCCCCBC
DBDDDDDDDDBD
EBEEEEEEEEBE
ABBBBBBBBBBA
ACCCCCCCCCCA
ADDDDDDDDDDA
AEEEEEEEEEEA
BBBABBBABBBB
CCACCCACCCCC
DDDDADDADDDD
EEAEEAEEEEEE
Q</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>48
48
0
64
0
6</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
419||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Matching Meetings</TITLE>
<META NAME="description" CONTENT="Matching Meetings">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Matching Meetings</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
``Argh! I can't stand it anymore!'' exclaimed Dan Hanson, CS Department
administrative assistant, as he slammed down the phone.
<P>
``What's the matter, Dan?'' asked Valentine McKee, who happened to be in
the office making some copies.
<P>
``Professors and scheduling. I'm trying to schedule this SSC meeting but as
soon as I pick a
time and start making calls to confirm it, one of the committee members has
a conflict. I feel like this is going to go on forever!'' He Said.
<P>
``Maybe the computer can help,'' suggested Valentine. ``This is the computer
science department, after all,'' she Said.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input will be the ``current'' date.
<P>
<P>
All dates will be specified in the form: <TT>dayname month date</TT>, where:
<P>
<UL><LI> <TT>dayname</TT> is single character from the set <TT>{ M, T, W, R, F }</TT>
representing Monday, Tuesday, Wednesday, Thursday, and Friday, respectively.<LI> <TT>month</TT> is an integer such that  <IMG WIDTH=24 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   >  <TT>month</TT>  <IMG WIDTH=35 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   > .<LI> <TT>date</TT> is an integer such that  <IMG WIDTH=24 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   >  <TT>date</TT>  <IMG WIDTH=34 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   > .
</UL>
<P>
The next line of input will contain two integers, <I>n</I> and <I>t</I>. <I>n</I> specifies
how many meetings
should be scheduled, while <I>t</I> indicates how long each meeting will last.
<I>t</I> will be specified in increments of 15 minutes.
<P>
<P>
All times will be specified as zero padded 4 digit integers in military time.
The first two
digits indicate the <TT>hour</TT> (00 corresponds to midnight). The appointment
times in the input will
be in the range of  <IMG WIDTH=33 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   >  <TT>hour</TT>  <IMG WIDTH=34 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/4/419img1.gif"   > . The last two digits indicate
the minute, and will be in the
be from the set <TT>{ 00, 15, 30, 45 }</TT> .
<P>
<P>
You may assume that <TT>date</TT>, while formally bounded by 31, will not be
greater than the
number of days in the <TT>month</TT>. You may also assume that all years
will <EM>not</EM> be leap years.
<P>
<P>
The rest of the input will contain the schedules for at most 100 individuals.
Each schedule
will begin with a line specifying the individual's name, followed by a list
of appointments for
that individual, ending with the word ``<TT>done</TT>'' on a line by itself.
No individual will have more
than 100 appointments scheduled. Each appointment will be a date followed by
a start time
and an end time. No appointment will extend before 9am or after 5pm.
<P>
<P>
The last line of input will be the word ``<TT>done</TT>'' on a line by itself.
<P>
<P>
No appointment will be before the current date, or more than 1 year after
the current date.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should output the first <I>n</I> possible meeting times when all the
people from the
input can meet for the specified amount of time (<I>t</I>). Each line of output
should contain one
meeting date and time. Once a common meeting time is found, it should be
considered allocated
for all people, and cannot be used to schedule other meetings.
<P>
<P>
The meetings should be sorted by date and time, with the earliest meeting first.
<P>
<P>
If less than <I>n</I> meeting times are available, print all possible meeting
times followed by ``<TT>No more times available</TT>''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>M 8 21
2 60
Jack Casey
M 8 21 0900 1015
done
Jack Ross
M 8 21 1000 1100
M 8 21 1200 1700
done
Jack Swigert
M 8 21 1600 1700
T 8 22 0900 1000
done
done</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>M 8 21 1100
T 8 22 1000</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
420||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Supercomputer Selection, The Sequel</TITLE>
<META NAME="description" CONTENT="Supercomputer Selection, The Sequel">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Supercomputer Selection, The Sequel</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Valentine sighed as she sat down to lunch with her cousin, Martin Thiel,
in the BIT student union Diner.
<P>
``What's the matter, Valentine?'' Martin asked.
<P>
``My presentation to the SSC. They all really liked the graphical displays
of the criteria and
the selection process,'' Valentine grudgingly admitted. ``But, Prof.
Everett pointed out that the
criteria would change over time and since we will be using the machine
over several years, that we needed to take that into account as well.''
<P>
``Maybe you could make separate graphs for each year?'' suggested Martin.
<P>
``That's what I said to Prof. Everett, but she didn't think that would
be sufficient -- it would
only pick the best machine for a particular year.''
<P>
As Valentine silently pondered her problem, Jake Briggs, one of Valentine's
CS classmates,
joined Martin and Valentine at their table. ``What's up?'' he asked.
Valentine explained her dilemma.
<P>
``Simple, '' Jake mumbled through bites of his club sandwich. ``Make
three-dimensional shapes,
using time as the third axis. The computer with the largest volume wins.''
<P>
Valentine sketched out a perspective drawing of such a volume as well
as a detail of a single quadrant.
``What do we do here at the edges of the axes? There are four points.''
Valentine pointed to the points <TT>a</TT>, <TT>b</TT>, <TT>c</TT>, and <TT>d</TT>
in her drawing of the quadrant.
<P>
<center><img src=420img3.gif></center>
<P>
``Just use two planes, one determined by <TT>a</TT>, <TT>b</TT>, and <TT>c</TT>,
and the other determined by <TT>b</TT>, and <TT>c</TT>, and <TT>d</TT>.''
<P>
``Whoa! Problem!'' exclaimed Martin. ``Those volume things are way too
complicated for slideware. You'll just confuse everyone.''
<P>
``No problem,'' Jake said. ``We can use our virtual reality cave over in
the JFK building. It even has tactile feedback gloves. The committee
members can touch the volumes if they want.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input will contain two integers. The first integer, <I>n</I>,
specifies the number of
criteria that will be measured for each year. This value will be such
that <i>(1 <= n <= 100)</i>. The
second integer, y specifies how many years will be considered. The value
of y will be such that <i>(1 <= y <= 10)</i>.
<P>
<P>
The rest of the input will consist of sequences of possible configurations
of supercomputers; each line will contain n floating point values.
The supercomputer configurations will be
grouped in sets of <I>y</I> , i.e., the first <I>y</I> lines (after the initial line
of two integers) will be the yearly
configurations for the first computer. The next <I>y</I> lines will be the
yearly configurations for the second computer, etc.
<P>
<P>
The first number on the input line corresponds to the value on the first
axis, the second number corresponds to the value on the second axis, and so on.
<P>
<P>
The final line of input will contain <I>n</I> floating point zeros.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output should be the configuration number (indexed from 1) which gives
the configuration
with the greatest volume, along with the value of the volume. The volume is
to be given to two
decimal places. Assume that the polygons are spaced with unit time along
the time axis.
<P>
<P>
In case of a tie (i.e., multiple configurations are given that produce a
polygon of equal volume), output the one with the lowest configuration number.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5 2
1.2 2.3 3.4 4.5 5.6
0.2 3.3 4.4 5.6 4.5
10.0 11.0 12.0 13.0 14.0
9.0 12.0 11.0 14.0 13.0
0.0 0.0 0.0 0.0 0.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2 336.83</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
421||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Polygonal Puzzle</TITLE>
<META NAME="description" CONTENT="Polygonal Puzzle">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Polygonal Puzzle</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
To help model the three dimensional volumes that describe each supercomputer
choice over
time, Valentine McKee and Jake Briggs decided to construct some cardboard
mock-ups. Valentine began by cutting out polygons of each of the
supercomputer criteria for each year. As she
was bringing the cut-outs to Jake's lab, where they intended to turn
the flat polygons into the
actual volumes, Valentine bumped into Ren McCormack. Literally.
And she dropped all of her polygon cut-outs onto the ground.
<P>
``Ren! Why don't you look where you're going,'' Valentine sighed. ``I
dropped all of my
polygons. Now I'm going to have to start all over cutting these out.''
Valentine had labeled the
polygons prior to cutting them out, but unfortunately, the labeling was
not part of the actual
polygon and was lost when they were cut out. ``I don't know which is
which now.''
<P>
``Sorry.'' Ren looked downcast, then brightened. ``Hey, do you want to
go to the dance with me this weekend?''
<P>
``I don't think so, Ren,'' replied Valentine, ``I think I'll be cutting out
and sorting polygons all
weekend.'' Valentine stooped and began picking up the cut-outs. Ren
was a great dancer but
he also tended to show it off. The one time that Valentine had gone to
a dance with him, Ren
had completely embarrassed her with his antics.
<P>
``Can't you use a computer or something to help you sort those things out?''
Ren picked up
one of the polygons and squinted at it. (Ren was a theater major.)
<P>
Valentine thought for a moment. ``Nope,'' she said. ``I'm just going to have
to start over. Have
fun at the dance this weekend, though.'' To herself, she thought, ``Yes, I
can use a computer.
The only other thing I need is that camera that Jake already has in the lab
to help me see the Big Picture.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input will consist of two integers separated by a space.
The first integer specifies
the number of polygons to be sorted. The second integer specifies the number
of vertices for each polygon.
<P>
<P>
The rest of the input will consist of two lists of coordinates. The first is
a list of coordinates
describing the shape of each polygon in terms of the values on each of
its axes (i.e., the values
for <TT>r1</TT> through <TT>r6</TT> in the figure below).
<P>
<center><img src=421img4.gif></center>
<P>
The vertices of each polygon are distributed at equal angles around the
origin, with the first
vertex aligned at 12 o'clock. The vertices are given in clockwise order.
The polygons in this list
are unique with respect to rotation and dilation. That is, no polygon will
be exactly like any
other polygon (having the same vertices in the same locations), nor can any
polygon be rotated
about its center and/or uniformly scaled such that it will be exactly
like another polygon in the list.
<P>
<P>
The second list of polygon coordinates corresponds to the polygons in
the first list, but as
measured by a camera. The vertices of each polygon in this case will be
given as (<I>x</I>, <I>y</I>) pairs
with respect to the camera's viewpoint origin and are given in clockwise
order. The first vertex given is arbitrary, however.
<P>
<center><img src=421img5.gif></center>
<P>
Note that the camera's view of each polygon may include magnification or
de-magnification
(which may be different for each viewed polygon). Moreover, the camera
can only resolve the
polygon vertices to within plus or minus one pixel in its field of view,
so there may be some
jitter associated with the viewed vertex locations. For each polygon, the
maximum amount of
jitter at each vertex is guaranteed to be less than one percent of the
distance from the origin to the vertex farthest away from the origin.
<P>
<P>
All of the polygons viewed by the camera will be right-side up.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output is a list of instructions indicating how to rearrange the
scrambled polygons. That
is, for each polygon in the second list, the output should indicate the
polygon to which it
corresponds in the first list, the amount by which it must be rotated
in a clockwise direction to
align the vertices. Thus, one line of output consists of an integer
index <I>i</I> (indexing starts from
1), a floating point angle  (with ) given to
the nearest tenth of a degree.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 4
1 1 2 1
1 1 1 1
1 3 2 3 2 2 1 2
2.5 3.5 2 2 1 2 1 3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2 45.0
1 135.0</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
422||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Word-Search Wonder</TITLE>
<META NAME="description" CONTENT="Word-Search Wonder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Word-Search Wonder</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Pyrates Restaurant was starting to fill up as Valentine McKee walked in.
She scanned the
crowd for her sister, brother-in-law, and nephew. Seeing her sister waving
from the far end of
the restaurant, she made her way back to their booth. ``Hi, Valentine,'' her
sister and brother-in-law, Niki and Dennis Chapman, greeted her.
<P>
``Hi, guys,'' she replied. ``What are you doing, Wade?'' she asked her
nephew. He was busy
working on one of the restaurant's activity sheets with a crayon.
<P>
``I'm doing a word search game,'' Wade explained. ``I have to find all of
these words in this
big mess of letters. This is really hard.'' Wade looked intently at the
paper in front of him.
<P>
``Can I help?'' asked Valentine, looking across the table at the activity sheet.
<P>
``Sure. These are the words we're looking for. They're the names of different
kinds of Planes, Trains, and Automobiles.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of input will specify the length (in characters) of the
sides of the letter matrix (the
matrix of letters will be square). The length, <I>l</I>, will be in the
range  <IMG WIDTH=85 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/422img1.gif"   > . The next <I>l</I> lines of input will
be the matrix itself, each line will contain <I>l</I> uppercase letters.
<P>
A list of words will follow. Each word will be on a line by itself; there
will be 100 or fewer
words. Each word will be 100 or fewer characters long, and will only
contain uppercase letters.
<P>
The final line of input will contain a single zero character.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should attempt to find each word from the word list in the
puzzle. A word is
``found'' if all the characters in the word can be traced in a
single (unidirectional) horizontal,
vertical, or diagonal line in the letter matrix. Words may
not ``wrap around'' rows or columns,
but horizontal and diagonal words may proceed from right to
left (``backwards''). For each
word that is found, your program should print the coordinates of its
first and last letters in the
matrix on a single line, separated by a single space. Coordinates are
pairs of comma-separated
integers (indexed from 1), where the first integer specifies the row
number and the second integer specifies the column number.
<P>
If a word is not found, the string ``<TT>Not found</TT>'' should be output
instead of a pair of coordinates.
<P>
Each word from the input can be ``found'' at most once in the puzzle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
EDEEE
DISKE
ESEEE
ECEEE
EEEEE
DISC
DISK
DISP
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1,2 4,2
2,1 2,4
Not found</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
423||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>MPI Maelstrom</TITLE>
<META NAME="description" CONTENT="MPI Maelstrom">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">MPI Maelstrom</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
BIT has recently taken delivery of their new supercomputer, a 32 processor
Apollo Odyssey
distributed shared memory machine with a hierarchical communication
subsystem. Valentine McKee's research advisor, Jack Swigert,
has asked her to benchmark the new system.
<P>
``Since the Apollo is a distributed shared memory machine, memory access
and communication times are not uniform,'' Valentine told Swigert.
``Communication is fast between processors
that share the same memory subsystem, but it is slower between processors
that are not on the
same subsystem. Communication between the Apollo and machines in our
lab is slower yet.''
<P>
``How is Apollo's port of the Message Passing Interface (MPI) working out?''
Swigert asked.
<P>
``Not so well,'' Valentine replied. ``To do a broadcast of a message from
one processor to all
the other <I>n</I>-1 processors, they just do a sequence of <I>n</I>-1 sends.
That really serializes things and kills the performance.''
<P>
``Is there anything you can do to fix that?''
<P>
``Yes,'' smiled Valentine. ``There is. Once the first processor has sent
the message to another,
those two can then send messages to two other hosts at the same time.
Then there will be four hosts that can send, and so on.''
<P>
``Ah, so you can do the broadcast as a binary tree!''
<P>
``Not really a binary tree -- there are some particular features of our
network that we should
exploit. The interface cards we have allow each processor to simultaneously
send messages to
any number of the other processors connected to it. However, the messages
don't necessarily
arrive at the destinations at the same time -- there is a communication
cost involved. In general,
we need to take into account the communication costs for each link in
our network topologies
and plan accordingly to minimize the total time required to do a broadcast.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will describe the topology of a network connecting <I>n</I> processors.
The first line of
the input will be <I>n</I>, the number of processors, such that  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > .
<P>
<P>
The rest of the input defines an adjacency matrix, <I>A</I>. The adjacency matrix
is square and
of size  <IMG WIDTH=41 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline47" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > . Each of its entries will be either an integer or
the character <TT>x</TT>. The value of  <IMG WIDTH=36 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > 
indicates the expense of sending a message directly from node <I>i</I> to node <I>j</I>.
A value of <TT>x</TT> for
 <IMG WIDTH=36 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   >  indicates that a message cannot be sent directly from
node <I>i</I> to node <I>j</I>.
<P>
<P>
Note that for a node to send a message to itself does not require network
communication,
so  <IMG WIDTH=68 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline61" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   >  for  <IMG WIDTH=70 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline63" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > . Also, you may assume that the network
is undirected (messages can
go in either direction with equal overhead), so that  <IMG WIDTH=98 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline65" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > .
Thus only the entries on the
(strictly) lower triangular portion of <I>A</I> will be supplied.
<P>
<P>
The input to your program will be the lower triangular section of <I>A</I>.
That is, the second line
of input will contain one entry,  <IMG WIDTH=39 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline71" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > . The next line will contain
two entries,  <IMG WIDTH=39 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline73" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   >  and  <IMG WIDTH=39 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline75" SRC="http://uva.onlinejudge.org/external/4/423img1.gif"   > , and so on.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should output the minimum communication time required to
broadcast a message from the first processor to all the other processors.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
50
30 5
100 20 50
10 x x 10</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>35</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
424||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Integer Inquiry</TITLE>
<META NAME="description" CONTENT="Integer Inquiry">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Integer Inquiry</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
One of the first users of BIT's new supercomputer was Chip Diller. He
extended his exploration
of powers of 3 to go from 0 to 333 and he explored taking various sums
of those numbers.
<P>
``This supercomputer is great,'' remarked Chip. ``I only wish Timothy were
here to see these
results.'' (Chip moved to a new apartment, once one became available on
the third floor of the
Lemon Sky apartments on Third Street.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of at most 100 lines of text, each of which
contains a single VeryLongInteger.
Each VeryLongInteger will be 100 or fewer characters in length, and will
only contain digits (no VeryLongInteger will be negative).
<P>
<P>
The final input line will contain a single zero on a line by itself.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your program should output the sum of the VeryLongIntegers given in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>123456789012345678901234567890
123456789012345678901234567890
123456789012345678901234567890
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>370370367037037036703703703670</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
425||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Enigmatic Encryption</TITLE>
<META NAME="description" CONTENT="Enigmatic Encryption">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Enigmatic Encryption</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
One Saturday morning, Valentine McKee attempted to log into <TT>kevin.bit.edu</TT>,
the new BIT
supercomputer, to work on her new MPI implementation. After a few failed
login attempts,
Valentine put her head in her hands. ``I can't believe it! I've forgotten
my password!''
<P>
<P>
Valentine thought for a few minutes. She remembered choosing her password
as a combination of two words from the body of her thesis.
The password program on <TT>kevin</TT> had required
her to make the password between 5 and 8 characters long with at least
one ``special'' character
(non-alpha), so Valentine had also incorporated a numeral into the
password. ``Either 0, 2, 4,
or 8, between the two words,'' she recalled. Also, to save typing
effort, she had used only
lowercase for the letters. She could not recall, however, whether or not the
original words had
been all lowercase. She did recall that both words were longer than just
a single character.
<P>
<P>
Valentine started to read through the most recent printout of her
thesis, trying to jog her
memory of the password, but to no avail. Finally, she
said, ``My thesis is on line in my lab and I
have a record there of my encrypted password. I never thought I would
have to use it, though.''
<P>
<P>
She sighed as she invoked man <TT>crypt</TT> to determine how <TT>crypt()</TT>
processes passwords.
<P>
<P>

<P>
crypt ( 3C ) C Library Functions crypt ( 3C )
<P>
<P>
<P>
<B>NAME</B>
<BLOCKQUOTE> crypt - generate encryption
</BLOCKQUOTE>
<P>
SYNOPSIS
<BLOCKQUOTE> <B>char</B> *<B>crypt(const char</B> *<EM>key</EM>, <B>const char</B> *<EM>salt</EM>);
</BLOCKQUOTE>
<P>
DESCRIPTION
<UL><DT>
<DD>
<P>
<B>crypt( )</B> is the password encryption function. It is based on a
one-way encryption algorithm with variations intended (among other things)
to frustrate use of hardware implementations of a key search.
<P>
<P>
<P>
<EM>key</EM> is the input string to encrypt, for instance, a user's typed
password. Only the first eight characters
are used; the rest are ignored. <EM>salt</EM> is a two-character string chosen
from the set [<B>a-zA-Z0-9./</B>]; this
string is used to perturb the hashing algorithm in one of 4096 different
ways, after which the input string
is used as the key to repeatedly encrypt a constant string. The returned
value points to the encrypted
input string. The first two characters of the return value are
the <EM>salt</EM> itself.
</UL>
<P>
NOTES
<BLOCKQUOTE> 
The return value for <B>crypt( )</B> points to static data that are
overwritten by each call.
<P>
<P>
<P>
The <B>crypt( )</B> function is provided for you. You do not have to
write it yourself.
</BLOCKQUOTE>
<P>
ApollOS 1.3 Last change: 17 Apr 1970 1

<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Note for Pascal Programmers</A></FONT></H2>
<P>
Include the following in your program so that you can properly call the
<TT>pcrypt()</TT> procedure (a
wrapper to the C <TT>crypt()</TT> function). The <TT>pcrypt()</TT> procedure is a
library procedure that we will supply -- you do not have to write it.
<P>
<PRE>type
   key_type = array[1..8] of char;
   salt_type = array[1..2] of char;
   encrypt_type = array[1..32] of char;

procedure pcrypt( key : key_type;
                  salt : salt_type;
              var result : encrypt_type); external c;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input</A></FONT></H2>
<P>
The first line of input is the encrypted password. The next lines of
input are the contents of
Valentine's thesis. Each input line will consist of 80 or fewer characters
of printable ASCII
text and will be terminated by a newline. No lines will be empty. Words
are assumed to be
any contiguous set of alphabetic characters (upper or lower case),
separated by whitespace or punctuation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Output</A></FONT></H2>
<P>
The output of the program is Valentine's original password.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>h8E6dqt5lkL9o
The parallel algorithms were executed on the Connection Machine model
CM-2 --- a single-instruction multiple data (SIMD) parallel computer
which, in its largest configuration, contains 65,536 bit-serial
processors and 2048 Weitek floating-point units (FPU's).
The bit-serial processors are clustered together into groups of 16
within a single integrated circuit, and these IC's are connected
together in a 12-dimensional hypercube. Two IC's, or 32 processors,
share a single Weitek FPU. Note that a fully configured CM-2 contains
2048 times as much floating point hardware as a conventional computer
containing a single Weitek FPU (e.g., a SUN-4).</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>bit0note</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
426||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Fifth Bank of Swamp County</TITLE>
<META NAME="description" CONTENT="Fifth Bank of Swamp County">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Fifth Bank of Swamp County</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
In response to overwhelming customer complaints, the Fifth Bank of Swamp County
has finally decided to produce a listing of cleared checks at the end of each
customer's checking account statement.  The current statements list only the
transaction history, sorted by date, which includes all deposits, withdrawals
and fee assessments in addition to cleared checks.  The code to generate the
current statements was written by programmers with degrees in math; these
programmers have for years argued that all ''necessary and sufficient''
information is contained in the transaction history, and any further output is
unnecessary and wasteful.  In order to minimize the cost of the software
change, the bank has laid off the entire programming staff and has chosen
instead to outsource the job to part-time student labor as a weekend
project.
<P>
<P>
The cleared check summary will list all checks which cleared the bank during
the statement reporting period.  The summary will be sorted in ascending order
by check number, and will report the dollar amount of the check and date the 
check cleared.  To improve the usefulness of the list, any
out-of-sequence check numbers should have an asterisk (<TT>*</TT>) printed next to
them.  An out-of-sequence check number is one which, when sorted, does not
immediately succeed the previously cleared check number.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The first line of the input will contain an integer N indicating the number of
test case you need to test followed by a blank line.. Then there N set of test case. For each test
input&nbsp; to the check summary program consists of a check transaction history,
sorted in ascending order by date.  There will be one input line for each
check, consisting of the transaction date in <EM>yy/mm/dd</EM> format, white space, the check number (an integer between 1 and 9999), white space, and the amount
of the check in dollars and cents.<P>Consecutive test cases will separated by
one blank line.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each test case should be displayed in three columns, with all checks sorted in
column order (see the sample output).  Do not print any more rows than
necessary, and always fill the middle column before spilling over to the
last column.  Each column should be separated from the others by three spaces
and have the following format:
<P>
<PRE>nnnn* dddddd.cc yy/mm/dd</PRE>
<P>
where ``<TT>nnnn</TT>'' is the check number with leading zeroes suppressed, ``<TT>*</TT>'' is the optional out-of-sequence indicator (use a space if in sequence), 
and  ``<TT>dddddd.cc</TT>'' is the dollar and cent value of the check, with leading zeroes suppressed.  If the check is for less than one dollar, print a zero before the decimal point.
All checks for $1 million or more require special processing and are not
handled through the bank's normal check clearing process; such checks will not
appear on these statements.
<P>
Consecutive output is separated by single blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

93/10/01 998  .65
93/10/01 999 123.89
93/10/05 996 29.99
93/10/06 993 116.52
93/10/12 995 418.00
93/10/15 1001 15045.00
93/10/27 1000 840.85</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<PRE> 993     116.52 93/10/06    998*      0.65 93/10/01   1001   15045.00 93/10/15
 995*    418.00 93/10/12    999     123.89 93/10/01
 996      29.99 93/10/05   1000     840.85 93/10/27</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
427||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>FlatLand Piano Movers</TITLE>
<META NAME="description" CONTENT="FlatLand Piano Movers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">FlatLand Piano Movers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
FlatLand Piano Movers, as part of their Total Quality Management project, has
decided to focus on the job estimation process.  Part of this process involves
walking the proposed paths that are to be used to move a piano to see if it
will fit through corridors and around corners.  Now this is harder than it
might seem, since FlatLand is a 2-dimensional world.
<P>
<P>
FlatLand pianos are rectangles of various sizes. FlatLand building
codes require all turns in corridors to be right angle turns and
prohibit ``T'' intersections.
All dimensions are in furlongs. You can assume that each portion of
a corridor is long enough so that other corners or doors into rooms don't
have any effect on getting around a turn. You can also assume that
the piano is narrower than the width of any corridor.
Note that the piano actually
has to turn in the corner, since it can only be pushed or pulled on
one of its shorter sides (there are no square pianos).
<P>
<P>
Your team's job is to write a program for a palmtop computer that will
determine if a given piano will fit around a corner in a corridor.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of a series of lines up to 80 columns in width followed by
the end-of-file.  Each
line consists of a series of number pairs. The numbers of a pair are separated
by a comma and the pairs are separated by at least one space. The first pair
is the size of a piano, and the remaining pairs are the widths of corridors on
each side of the turns.  Consider the example:
<P>
<PRE>600,200 300,500 837,500 350,350</PRE>
<P>
This is a 600 by 200
piano. The first turn is from a 300 furlong wide corridor through a right
angle turn into a 500 furlong wide corridor.  The next turn is from an 837
furlong wide corridor into one 500 furlongs wide. The last turn is from a 350
furlong wide corridor into another 350 furlong wide corridor.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each piano, your program is to produce a yes-or-no answer for each turn.
If the piano will fit around the turn, print ``<TT>Y</TT>'';  if not,
print ``<TT>N</TT>''.  The results for each piano should be printed on a separate line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>600,200   300,500   837,500  350,350 
137,1200 600,500 600,400</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>YYN
YN</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
428||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Swamp County Roofs</TITLE>
<META NAME="description" CONTENT="Swamp County Roofs">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Swamp County Roofs</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Swamp County Environmental Office is concerned about the number of
structures in the county.  They have a theory that all the rain water
landing on roofs of buildings, parking lots, roads, and highways is going
down the sewage system instead of draining to the ecologically
sensitive and historically important swamp land the county is famous
for.
<P>
<P>
Your team has been hired to do the analysis of rain water captured by
building roofs.  The Planning Commission, which processes all building
permits, and hence knows the plans of every structure in the county, will
provide the data.  Their database contains a set of measurements for
the roofs of every building on every lot in the county.
<P>
<P>
The Engineering staff of the Planning Commission has determined that all
the roofs in the county can be represented by one or more
quadrilaterals.  Each quadrilateral has the following characteristics:
<P>
<UL><LI> length of baseline, in feet;<LI> length of ridgeline, in feet;<LI> distance between baseline and ridgeline, in feet;<LI> and inclination of the roof segment, in degrees.
</UL>
<P>
The baseline is always parallel to the ridgeline.  A roof segment is
always flat, but may be inclined.  The inclination of the segment occurs
along the baseline or ridgeline axis.  A roof segment that is inclined
90 degrees is a wall that is assumed to have negligible
thickness, and hence gathers no rain--such a segment will not appear in the
data.  Assume that the buildings are on level land, and that no
roof segment overlaps any other.  A roof segment may have either a baseline or
ridgeline length of zero (such a segment is actually a
triangle).  A lot may contain one or more buildings, but your program need only
compute the area covered by roofs on a lot-by-lot basis.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Each lot is represented by a series of numbers separated from each other
by white space
and/or new-lines.  The lot size, in square feet, is followed by a list
of roof segments.  Each roof segment will consist of the length of the
baseline, the length of the ridgeline, the distance between the
baseline and the ridgeline, and the inclination.  Each lot description 
including the last will end with a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each lot compute and print the following statistics:  the total
roof surface area of buildings in square feet,
the total floor space covered by roofs in square feet,
and the percentage of rain intercepted by roofs.  Print these values in
labeled columns, one lot per line, with two digits after the decimal point.
Print percent signs after the percentage of rain figures.
<P>
<P>
At the end of the run compute and print the following statistics:  the
total roof surface area of all roofs in the county,
the total floor space covered by roofs in the county,
the overall percentage of rain intercepted by roofs,
the average roof surface area on a lot, 
and the average floor space covered by roofs on a lot.  Skip a line after the
per-lot listing and print these values on separate lines with appropriate 
labels.
<P>
Print each value with two digits after the decimal point.  Print a
percent sign after the overall percentage of rain value.  Use a report format
similar to that of the sample output below.
<P>
<P>
One of the reasons Swamp County has remained so is the relative lack of
wind in the county--you may therefore assume that all rain falls vertically.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>100 10 10 10 60
10 10 10 60

200 5 10.5 5 30  10 10 7.5 45</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Roof Area     Floor Area     % Covered
---------     ----------     ---------
   200.00         100.00       100.00%
   113.75          86.59        43.30%
 
Total surface area of roofs      313.75
Total area covered by roofs      186.59
Percentage of total area covered by roofs   62.20%
Average roof surface area per lot          156.88
Average floor space covered per lot         93.30</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
429||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Word Transformation</TITLE>
<META NAME="description" CONTENT="Word Transformation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Word Transformation</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
A common word puzzle found in many newspapers and magazines is the <EM>word
transformation.</EM>  By taking a starting word and successively altering a single
letter to make a new word, one can build a sequence of words which changes the
original word to a given end word.  For instance, the word ``<TT>spice</TT>'' can be transformed in four steps to the word ``<TT>stock</TT>'' according to the following
sequence:   <TT>spice, slice, slick, stick, stock.</TT>  Each successive
word differs from the previous word in only a single character position while
the word length remains the same.
<P>
<P>
Given a dictionary of words from which to make transformations, plus a list of
starting and ending words, your team is to write a program to determine the
number of steps in the shortest possible transformation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The first line of the input is an integer N, indicating the number of test set
that your correct program should test followed by a blank line. Each test set will have two sections.  The first section will be
the dictionary of available words with one word per line, terminated by a line
containing an asterisk (<TT>*</TT>) rather than a word. There can be up to 200 words in the dictionary; all words will be alphabetic and in lower case, and no word will be longer than ten characters.  Words can appear in the dictionary in any order.
<P>
Following the dictionary are pairs of words, one pair per line, with the words
in the pair separated by a single space.  These pairs represent the starting
and ending words in a transformation. All pairs are guaranteed to have a transformation using the
dictionary given.  The starting and ending words will appear in the
dictionary.
<P>
Two consecutive input set will separated by a blank line.
<P>
The output should contain one line per word pair for each test set, and must include the
starting word, the ending word, and the number of steps in the shortest
possible transformation, separated by single spaces. Two consecutive output set
will be separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

dip
lip
mad
map
maple
may
pad
pip
pod
pop
sap
sip
slice
slick
spice
stick
stock
*
spice stock
may pod</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<PRE>spice stock 4
may pod 3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
430||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Swamp County Supervisors</TITLE>
<META NAME="description" CONTENT="Swamp County Supervisors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Swamp County Supervisors</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The smell of rebellion is rising over Swamp County. The county is 
geographically split into various bogs, each represented by a supervisor on the
Board of Supervisors.  Since the bogs have varying populations, each supervisor
has votes in proportion to the total population of the county, with a majority
of the total votes needed for an ordinance to pass. The smaller bogs
feel that they have no say on the Board because, in fact, the votes
of the largest bogs completely determine the outcome of a vote.
The smaller bogs might as well have zero votes.
<P>
<P>
Your team's job is to write some software to aid in finding a fairer 
voting plan.  The Board has agreed to consider a charter amendment that
would make the number of votes
needed to pass an ordinance a total other than that needed for a simple
majority.  Given the number of votes each bog holds, and the number of votes
necessary to win (which could be more or less than a majority of
the total votes), your program is to calculate the Banzhaf power index for
each bog.
<P>
Given the set of all possible votes, the Banzhaf power index for a bog
is the number of times it could change the outcome of the vote on an
ordinance from failure to passage.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program consists of a series of lines of at most 80 characters.
Each line consists of a series of numbers separated from each other by at
least one space.  The first number in a line is the minimum number of votes
needed for passage of an ordinance.  The rest of the numbers are the votes
held by each bog.
(For example, in the first line of the sample input below, the number of 
votes needed to pass an ordinance is 17.  There are six bogs, with votes of
1, 7, 3, 12, 9, and 1 respectively.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each case represented by an input line, your program is to
print the power index of each bog.
<P>
Output for each case should appear on a separate line, starting
in the first column, with each power index separated from the others by
single spaces.  The order of the power indexes on each line must correspond
to the input order of the votes for each bog.
<P>
<P>
Swamp County will never be divided into more than 27 bogs-there's a limit to
the number of lunches the lobbyists will buy.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>17 1 7 3 12 9 1
2000 214 306 298 274 270 261 246 404 241 240 240 238 224 333 210
12 1 7 3 12 9 1
2200 214 306 298 274 270 261 246 404 241 240 240 238 224 333 210</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2 14 2 18 14 2 
2666 3934 3806 3474 3418 3218 3094 4734 3022 3006 3006 2978 2798 4402 2622
1 5 5 19 11 1
2453 3593 3493 3183 3137 3051 2841 4817 2777 2763 2763 2741 2527 4035 2395</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
431||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Trial of the Millennium</TITLE>
<META NAME="description" CONTENT="Trial of the Millennium">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Trial of the Millennium</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In what is becoming known as the &quot;trial of the millennium,&quot; the Swamp County 
District Court is handling the highest profile case ever to reach the 
county court system.  Learning from the experience of people involved in the 
&quot;trial of the century,&quot; the Swamp County judiciary decided to adopt 
a few new rules to avoid gridlock in court proceedings.  Among 
the new rules is a cap on the total amount of time each side is 
allowed to present its case.
<P>
<P>
Each side will be allowed 8 hours for opening arguments, 240 hours for
evidence presentations, and 16 hours for closing arguments.  With this
ground rule set, the court hopes to be able to bring the case to the
jury in less than five months.  While this rule hopefully will
help to ensure a speedier trial, it presents a huge challenge to both 
the prosecution and the defense teams.  Both teams must figure out 
how to best utilize their allocated time slots by presenting the 
most convincing and comprehensible evidence to the jurors.
<P>
<P>
Your team has been contracted by the Swamp County District Attorney's Office to
develop a decision support system to help the prosecution team formulate
its strategies in selecting what material from its pool of evidence to
present.  Since the system may prove to be useful for future trials
that have presentation time limits imposed, the D. A.'s Office has requested 
that you make the system flexible enough to handle other cases.
<P>
<P>
The decision support system will select the material based on the 
score that the prosecution team assigns to each piece of evidence and the 
time cost associated with presenting it to the jury.  The more useful 
the piece of evidence is, the higher its score.  The prosecution team 
therefore has to come up with a set of evidence with the highest 
aggregate score.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
<b>
The input begins with a single positive integer on a line by itself indicating 
the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.
</b>
<p>
<p>
Input to the decision support system consists of the total allowed
time for evidence presentation on the first line followed by entries 
for all the evidence that the prosecutor has.  Each line presents one 
piece of evidence, with the first field showing its score, the 
second field indicating the estimated amount of time for its 
presentation, and the third field containing its general 
description.  Fields are separated from each other by spaces, and the third
field may contain embedded spaces.
<P>
<P>
The score is based on a 1-10 integer scale while the time cost is expressed 
in full hours.  
In any given trial, the amount of time allowed for evidence presentation of the prosecution team shall not exceed 240 hours. The 
total number of evidence items shall be less than or equal to 100, and the 
length of the evidence description shall be no greater than 68
characters.  Evidence items may appear in the list in any order.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
<b>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>
Output will be a list of evidence to be presented along with the cost 
and benefit each of them brings, the aggregate score, and the total
time for their presentation.  Label the columns and the totals, following the
format of the sample output below.
If no evidence can be presented in the time allowed, the program should print 
this single line message:
<P>
<P>
<P>
<TT>There is not enough time to present any evidence. Drop the charges.</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
1

240
5 4 Inspector supervising evidence collection at the crime scene
3 4 Crime scene photos
4 8 411 operator recording
3 8 Officer who arrested defendant in a previous incident
2 8 Victim's neighbor 2
1 8 Victim's neighbor 3
6 40 The victim's cousin
8 48 The defendant's current housemate
10 60 Coroner's report
5 16 SCSD Crime Lab technician 1
4 16 Taxi cab driver
2 16 SCSD Crime Lab technician 2
1 16 The defendant's personal trainer
5 24 Officer responsible for making the arrest
3 24 Victim's neighbor 1
2 24 The victim's supervisor at work
1 24 Pizza delivery person
3 1 A discarded plastic fork at the crime scene
5 32 The victim's brother
7 40 The victim's personal physician
1 1 An email the victim sent to his cousin the week before the incident
2 2 Bloody sock
6 64 Blood analysis results by chief criminalist of the SCSD Crime Lab</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
Score  Time  Description
-----  ----  -----------
  3      1   A discarded plastic fork at the crime scene
  1      1   An email the victim sent to his cousin the week before the incident
  2      2   Bloody sock
  5      4   Inspector supervising evidence collection at the crime scene
  3      4   Crime scene photos
  4      8   411 operator recording
  3      8   Officer who arrested defendant in a previous incident
  2      8   Victim's neighbor 2
  5     16   SCSD Crime Lab technician 1
  4     16   Taxi cab driver
  5     24   Officer responsible for making the arrest
  7     40   The victim's personal physician
  8     48   The defendant's current housemate
 10     60   Coroner's report

Total score: 62 points
 Total time: 240 hours</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
432||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Modern Art</TITLE>
<META NAME="description" CONTENT="Modern Art">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Modern Art</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The famous painter Mel Borp is working on a brilliant series of paintings that introduce a
new experimental style of Modern Art. At first glance, these paintings look deceptively simple,
since they consist only of triangles of different sizes that seem to be stacked on top of each other.
Painting these works, however, takes an astonishing amount of consideration, calculation, and
precision since all triangles are painted without taking the brush off the canvas. How exactly Mel
paints his works is a well-kept secret.
<P>
Recently, he started on the first painting of his new series.
It was a single triangle, titled  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline176" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > .
After that, he created  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > , the basis for his other works (see Figure 1).
<P>
<P><A NAME="151">&#160;</A> <IMG WIDTH=451 HEIGHT=180 ALIGN=BOTTOM ALT="figure24" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Early work:  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline176" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  (left) and  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  (right).<BR>
<P>
<P>
Then he decided to take his experimenting one step further, and he painted  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  and  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline186" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > .
Compare Figure 1 and Figure 2 to fully appreciate the remarkable progression in his work.
<P>
<P><A NAME="154">&#160;</A> <IMG WIDTH=451 HEIGHT=180 ALIGN=BOTTOM ALT="figure45" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > <BR>
<STRONG>Figure:</STRONG> Advanced work:  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  (left) and  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline186" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  (right).<BR>
<P>
<P>
Note that the shape of the painting can be deduced from its title,  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline192" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > , as follows:
<P>
<UL><LI>  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline176" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  is a single triangle (see Figure 1);<LI>  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  consists of a smaller, inverted triangle placed inside  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline176" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > 
, so that the result consists of four smaller triangles (see Figure 1);<LI> if <I>p</I> &gt; 0 and <I>q</I> &gt; 1, then the painting looks like  <IMG WIDTH=44 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline204" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > , except that an inverted triangle has been placed inside the bottom-right triangle of  <IMG WIDTH=44 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline204" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > , splitting it into four smaller triangles (compare for example  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline178" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  and  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  );<LI> if <I>p</I> &gt; 1 and <I>q</I> &gt; 0, the painting looks like  <IMG WIDTH=44 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline216" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > 
, except that an inverted triangle has been
placed inside the bottom-left triangle of  <IMG WIDTH=44 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline216" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > 
, splitting it into four smaller triangles;<LI> other values of <I>p</I> and <I>q</I>: it is not a valid title of a painting.
</UL>
<P>
The triangles of a painting look all the same (each triangle is an isosceles triangle with two
sides of the same length), but their height and width depend on the size of the canvas Mel used.
<P>
<P>
Mel wanted to end the series with  <IMG WIDTH=41 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline224" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > , the most complex painting he thought he would be
able to paint. But no matter how many times he tried, he could not get it right. Now he is
desperate, and he hopes you can help him by writing a program that prints, in order, the starting
and ending coordinates of the lines Mel has to paint. Of course, you will need to know how Mel
paints his works, so we will now reveal his secret technique.
<P>
<P>
As an example, take a look at  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  (see Figure 3):
<P>
<P><A NAME="174">&#160;</A> <IMG WIDTH=192 HEIGHT=234 ALIGN=BOTTOM ALT="figure78" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > <BR>
<STRONG>Figure:</STRONG>  <IMG WIDTH=28 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline184" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > .<BR>
<P>
<P>
Mel always starts at the top of the top triangle, drawing a line straight to the lower-left corner
of the lower left triangle (in this example, 1-2), continuing with a line to the lower-right corner of
that triangle (in this example, 2-3). Next, he works his way up by drawing a line to the top of that
triangle (in this example, 3-4). Now he has either reached the starting point again (finishing yet
another masterpiece) or he has reached the lower-left corner of another triangle (in this example,
1-4-5). In the latter case, he continues by drawing the bottom line of that triangle (4-5) and after
that he starts working on the triangle or triangles that is or are located underneath the lower-right
corner of that triangle, in the same way. So he continues with (5-3), (3-6), (6-7), (7-8), (8-6), (6-9),
and (9-1) as the finishing touch.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line of the input contains the number of test cases. Each test case consists of one line
containing four non-negative integers <I>p</I>, <I>q</I>, <I>x</I>, and <I>y</I>, separated by spaces.  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline192" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  is the title of the
painting and (<I>x</I>,<I>y</I>) are the coordinates of the top of the top triangle. Further,  <IMG WIDTH=66 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline242" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   >  and <I>x</I>,<I>y</I> &lt; 32768. All triangles have a nonzero area.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For every test case, the output contains the pairs of (<I>x</I>,<I>y</I>) integer coordinates of the starting and
ending points of all lines Mel has to draw for the painting  <IMG WIDTH=27 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline192" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > 
in the right order, in the format
<P> <IMG WIDTH=364 HEIGHT=18 ALIGN=BOTTOM ALT="displaymath250" SRC="http://uva.onlinejudge.org/external/4/432img1.gif"   > <P>
followed by a newline. The output for each test case must be followed by an empty line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
0 0 1 1
1 2 512 1024</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>(1,1)(0,0)
(0,0)(2,0)
(2,0)(1,1)

(512,1024)(0,0)
(0,0)(512,0)
(512,0)(256,512)
(256,512)(768,512)
(768,512)(512,0)
(512,0)(768,0)
(768,0)(640,256)
(640,256)(896,256)
(896,256)(768,0)
(768,0)(1024,0)
(1024,0)(512,1024)</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
433||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bank (Not Quite O.C.R.)</TITLE>
<META NAME="description" CONTENT="Bank (Not Quite O.C.R.)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bank (Not Quite O.C.R.)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Banks, always trying to increase their profit, asked their computer experts to come up with a system that can read bank cheques; this would make the processing of cheques cheaper. One of their ideas was to use optical character recognition (ocr) to recognize bank accounts printed using 7 line-segments.
<P>
Once a cheque has been scanned, some image processing software would convert the horizontal and vertical bars to ASCII bars `<code>|</code>' and underscores `<code>_</code>'.
<P>
The ASCII 7-segment versions of the ten digits look like this:
<P>
<center><img src=433img3.gif></center>
<P>
A bank account has a 9-digit account number with a checksum. For a valid account number,
the following equation holds: <i>(d<sub>1</sub>+2 * d<sub>2</sub> + 3 * d<sub>3</sub> + ... + 9 * d<sub>9</sub>) mod 11 = 0.</i>
Digits are numbered from right to left like this: d<sub>9</sub>d<sub>8</sub>d<sub>7</sub>d<sub>6</sub>d<sub>5</sub>d<sub>4</sub>d<sub>3</sub>d<sub>2</sub>d<sub>1</sub>.
<P>
<P>
Unfortunately, the scanner sometimes makes mistakes: some line-segments may be missing. Your task is to write a program that deduces the original number, assuming that:
<UL><LI> when the input represents a valid account number, it is the original number;<LI> at most one digit is garbled;<LI> the scanned image contains no extra segments.
</UL>
<P>
For example, the following input
<PRE>
    _  _     _  _  _  _  _
  | _| _||_||_ |_   ||_||_|
  | _  _|  | _||_|  ||_| _|
</PRE>
<P>
used to be ''123456789''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file starts with a line with one integer specifying the number of account numbers that
have to be processed. Each account number occupies 3 lines of 27 characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, the output contains one line with 9 digits if the correct account number can be
determined, the string ``<TT>failure</TT>'' if no solutions were found and ``<TT>ambiguous</TT>'' if more than one solution was found.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
4
    _  _     _  _  _  _  _
  | _| _||_||_ |_   ||_||_|
  | _  _|  | _||_|  ||_| _|
    _  _  _  _  _  _     _
|_||_|| || ||_   |  |  ||_ 
  | _||_||_||_|  |  |  | _|
 _  _  _  _  _  _  _  _  _
|_||_||_||_||_||_||_||_||_|
|_||_||_||_||_||_||_||_||_|
 _     _  _  _  _  _  _  _
|_|  ||_||_||_||_||_||_||_|
|_|  ||_||_||_||_||_||_||_|
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>123456789
ambiguous
failure
878888888</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
434||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Matty's Blocks</TITLE>
<META NAME="description" CONTENT="Matty's Blocks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Matty's Blocks</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Little Matty liked playing with his blocks very much. He always constructed his `buildings' in the same way: he made stacks of one or more blocks, and he put those stacks on a square table that was exactly <I>K</I> blocks wide (<I>K</I> = 8 for his largest table, so it could contain up to 8 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline101" SRC="http://uva.onlinejudge.org/external/4/434img1.gif"   > 8 block stacks). He didn't put the stacks randomly on the table. No, he always made a nice `square'
pattern. In most buildings, there was no pattern visible in the heights of the stacks. However, since Little Matty himself was only eight blocks tall, a single stack of blocks never consisted of more than eight blocks.
<P>
This is an example of one of his buildings. It was built on a table that could contain 4 <IMG WIDTH=9 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline101" SRC="http://uva.onlinejudge.org/external/4/434img1.gif"   > 4 block stacks.
<P>
<center><img src=434img2.gif></center>
<P>
He liked drawing too. To record his block buildings for future generations, he would draw them on paper. Since drawing a three-dimensional block building just was too hard for him, he made two drawings of a building: one straight from the front (you could only see the front of the blocks), and one from the right (you could only see the right side of the blocks). The drawings were in fact two-dimensional projections of the block building, showing only its outline on the front or on the right side.
<P>
These are the drawings he made of the building shown above.
<P>
<center><img src=434img4.gif></center>
<pre>
                          Front                                Right side
</pre>
<P>
He thought that such a pair of drawings would give enough information to be able to re-build the block building later (but he never tried it).
<P>
Years later, looking again at the drawings, he realized that this was not the case: from most pairs of drawings, he was able to construct more than one building that had the same outlines (front and right side) as the original one. He found out that from every (front, side)-pair of drawings that he had made, he could construct a `minimal' building, one that has the same outlines as the
original building and contains a minimal number of blocks <I>N</I> (so it was not possible to construct a building with the same outlines with less than <I>N</I> blocks). Furthermore, he could add more blocks to this minimal building, so that the outlines remained the same, up to the point that he had added <I>M</I> () blocks and he had a `maximal' building, one that still had the same outlines
as his minimal one, and adding one extra block would result in a building with a different outline (so there are no buildings with the same outlines that contain more than <I>N</I> + <I>M</I> blocks).
<P>
<P>
As an example, these are minimal and maximal buildings for the drawings shown above. In this case, <I>N</I> = 7 and <I>M</I> = 10.
<P>
<center><img src=434img3.gif></center>
<P>
<pre>
                 Minimal Building                            Maximal Building
</pre>
<P>
Matty started determining the <I>N</I> and <I>M</I> for every pair of drawings he had made, but soon he found this task to be tedious. Now he asks <EM>you</EM> to write a program that does the job for him!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input contains on the first line the number of test cases. Each test case starts with a line
containing only the size of the table <I>K</I>. The next pair of lines each contain the description of
one drawing. Each description consists of <I>K</I> non-negative integers separated by spaces. Each
number indicates the height of the corresponding projection of a stack of blocks in the drawing.
The description of the front drawing always precedes the description of the right side drawing.
From each pair of drawings at least one block building can be constructed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output specification</A></FONT></H2>
<P>
For each test case output the following line:
<P>
<TT>Matty needs at least <I>N</I> blocks, and can add at most <I>M</I> extra blocks.</TT>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
4
2 0 3 1
1 1 2 3
1
1
1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Matty needs at least 7 blocks, and can add at most 10 extra blocks.
Matty needs at least 1 blocks, and can add at most 0 extra blocks.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
435||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Block Voting</TITLE>
<META NAME="description" CONTENT="Block Voting">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Block Voting</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Different types of electoral systems exist. In a block voting system the members of a party do
not vote individually as they like, but instead they must collectively accept or reject a proposal.
Although a party with many votes clearly has more power than a party with few votes, the votes
of a small party can nevertheless be crucial when they are needed to obtain a majority. Consider
for example the following five-party system:
<P>
<P> <IMG WIDTH=130 HEIGHT=133 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/4/435img1.gif"   > <P>
<P>
Coalition {A,B} has 7 + 4 = 11 votes, which is not a majority. When party C joins coalition
{A,B}, however, {A,B,C} becomes a winning coalition with 7+4+2 = 13 votes. So even though C is a small party, it can play an important role.
<P>
As a measure of a party's power in a block voting system, John F. Banzhaf III proposed to use the <EM>power index</EM>. The key idea is that a party's power is determined by the number of minority
coalitions that it can join and turn into a (winning) majority coalition. Note that the empty
coalition is also a minority coalition and that a coalition only forms a majority when it has more
than half of the total number of votes. In the example just given, a majority coalition must have at least 13 votes.
<P>
In an ideal system, a party's power index is proportional to the number of members of that party.
<P>
<P>
Your task is to write a program that, given an input as shown above, computes for each party
its power index.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The first line contains a single integer which equals the number of test cases that follow. Each of
the following lines contains one test case.
<P>
The first number on a line contains an integer <I>P</I> in [1  <IMG WIDTH=20 HEIGHT=2 ALIGN=BOTTOM ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/4/435img1.gif"   >  20] which equals the number of parties for that test case. This integer is followed by <I>P</I> positive integers, separated by spaces. Each of these integers represents the number of members of a party in the electoral system. The <I>i</I>-th number represents party number <I>i</I>. No electoral system has more than 1000 votes.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, you must generate <I>P</I> lines of output, followed by one empty line. <I>P</I> is the number of parties for the test case in question. The <I>i</I>-th line (<I>i</I> in [ <IMG WIDTH=47 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/4/435img1.gif"   > ]) contains the sentence:
<P>
<TT>party <I>i</I> has power index <I>I</I></TT>
<P>
where <I>I</I> is the power index of party <I>i</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
5 7 4 2 6 6
6 12 9 7 3 1 1
3 2 1 1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>party 1 has power index 10
party 2 has power index 2
party 3 has power index 2
party 4 has power index 6
party 5 has power index 6

party 1 has power index 18
party 2 has power index 14
party 3 has power index 14
party 4 has power index 2
party 5 has power index 2
party 6 has power index 2

party 1 has power index 3
party 2 has power index 1
party 3 has power index 1

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
436||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Arbitrage (II)</TITLE>
<META NAME="description" CONTENT="Arbitrage (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Arbitrage (II)</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Arbitrage is the use of discrepancies in currency exchange rates to transform one unit of a currency
into more than one unit of the same currency. For example, suppose that 1 US Dollar buys 0.5
British pound, 1 British pound buys 10.0 French francs, and 1 French franc buys 0.21 US dollar.
Then, by converting currencies, a clever trader can start with 1 US dollar and buy 0.5 * 10.0 * 0.21
= 1.05 US dollars, making a profit of 5 percent.
Your job is to write a program that takes a list of currency exchange rates as input and then determines whether arbitrage is possible or not.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file will contain one or more test cases. On the first line of each test case there is an
integer <I>n</I> ( <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   > ), representing the number of different currencies. The next <I>n</I> lines each contain the name of one currency. Within a name no spaces will appear. The next line contains one integer <I>m</I>, representing the length of the table to follow. The last <I>m</I> lines each contain the name  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   >  of a source currency, a real number  <IMG WIDTH=17 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   >  which represents the exchange rate from  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   >  to  <IMG WIDTH=12 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   >  and a name  <IMG WIDTH=12 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/4/436img1.gif"   >  of the destination currency. Exchanges which do not appear in the table are impossible. Test cases are separated from each other by a blank line. Input is terminated by a value of zero (0) for <I>n</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print one line telling whether arbitrage is possible or not in the format &quot;<TT>Case</TT> <EM>case</EM><TT>: Yes</TT>&quot; respectively &quot;<TT>Case</TT> <EM>case</EM><TT>: No</TT>&quot;.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
USDollar
BritishPound
FrenchFranc
3
USDollar 0.5 BritishPound
BritishPound 10.0 FrenchFranc
FrenchFranc 0.21 USDollar

3
USDollar
BritishPound
FrenchFranc
6
USDollar 0.5 BritishPound
USDollar 4.9 FrenchFranc
BritishPound 10.0 FrenchFranc
BritishPound 1.99 USDollar
FrenchFranc 0.09 BritishPound
FrenchFranc 0.19 USDollar

0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: Yes
Case 2: No</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
437||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Tower of Babylon</TITLE>
<META NAME="description" CONTENT="The Tower of Babylon">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Tower of Babylon</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Perhaps you have heard of the legend of the Tower of Babylon. Nowadays many details of this tale
have been forgotten. So now, in line with the educational nature of this contest, we will tell you the
whole story:
<P>
The babylonians had <I>n</I> types of blocks, and an unlimited supply of blocks of each type. Each type-<I>i</I>
block was a rectangular solid with linear dimensions  <IMG WIDTH=68 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline32" SRC="http://uva.onlinejudge.org/external/4/437img1.gif"   > . A block could be reoriented so that
any two of its three dimensions determined the dimensions of the base and the other dimension was the height.
They wanted to construct the tallest tower possible by stacking blocks. The problem was that, in
building a tower, one block could only be placed on top of another block as long as the two base
dimensions of the upper block were both strictly smaller than the corresponding base dimensions of
the lower block. This meant, for example, that blocks oriented to have equal-sized bases couldn't be
stacked.
<P>
<P>
Your job is to write a program that determines the height of the tallest tower the babylonians can
build with a given set of blocks.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file will contain one or more test cases. The first line of each test case contains an integer <I>n</I>, representing the number of different blocks in the following data set. The maximum value for <I>n</I> is 30.
Each of the next <I>n</I> lines contains three integers representing the values  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/4/437img1.gif"   > ,  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/437img1.gif"   >  and  <IMG WIDTH=11 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/4/437img1.gif"   > .
<P>
Input is terminated by a value of zero (0) for <I>n</I>.
<P>
<P>
For each test case, print one line containing the case number (they are numbered sequentially
starting from 1) and the height of the tallest possible tower in the format &quot;<TT>Case</TT> <EM>case</EM><TT>: maximum height =</TT> <EM>height</EM>&quot;
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
10 20 30
2
6 8 10
5 5 5
7
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
7 7 7
5
31 41 59
26 53 58
97 93 23
84 62 64
33 83 27
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Case 1: maximum height = 40
Case 2: maximum height = 21
Case 3: maximum height = 28
Case 4: maximum height = 342</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
438||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Circumference of the Circle</TITLE>
<META NAME="description" CONTENT="The Circumference of the Circle">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Circumference of the Circle</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
To calculate the circumference of a circle seems to be an easy task - provided you know its diameter. But what if you don't?
<P>
<P>
You are given the cartesian coordinates of three non-collinear points in the plane.
<P>
Your job is to calculate the circumference of the unique circle that intersects all three points.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file will contain one or more test cases. Each test case consists of one line containing six
real numbers  <IMG WIDTH=137 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline26" SRC="http://uva.onlinejudge.org/external/4/438img1.gif"   > , representing the coordinates of the three points. The diameter of the
circle determined by the three points will never exceed a million. Input is terminated by end of file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print one line containing one real number telling the circumference of the circle
determined by the three points. The circumference is to be printed <EM>accurately rounded</EM> to two decimals. The value of  <IMG WIDTH=8 HEIGHT=8 ALIGN=BOTTOM ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/438img1.gif"   >  is approximately 3.141592653589793.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0.0 -0.5 0.5 0.0 0.0 0.5
0.0 0.0 0.0 1.0 1.0 1.0
5.0 5.0 5.0 7.0 4.0 6.0
0.0 0.0 -1.0 7.0 7.0 7.0
50.0 50.0 50.0 70.0 40.0 60.0
0.0 0.0 10.0 0.0 20.0 1.0
0.0 -500000.0 500000.0 0.0 0.0 500000.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3.14
4.44
6.28
31.42
62.83
632.24
3141592.65</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
439||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Knight Moves</TITLE>
<META NAME="description" CONTENT="Knight Moves">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Knight Moves</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A friend of you is doing research on the <EM>Traveling Knight Problem (TKP)</EM> where you are to find the shortest closed tour of knight moves that visits each square of a given set of <I>n</I> squares on a chessboard exactly once. He thinks that the most difficult part of the problem is determining the smallest number of knight moves between two given squares and that, once you have accomplished
this, finding the tour would be easy.
<P>
Of course you know that it is vice versa. So you offer him to write a program that solves the &quot;difficult&quot; part.
<P>
<P>
Your job is to write a program that takes two squares <I>a</I> and <I>b</I> as input and then determines the number of knight moves on a shortest route from <I>a</I> to <I>b</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file will contain one or more test cases. Each test case consists of one line containing two
squares separated by one space. A square is a string consisting of a letter (<TT>a-h</TT>) representing the
column and a digit (<TT>1-8</TT>) representing the row on the chessboard.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print one line saying &quot;<TT>To get from <I>xx</I> to <I>yy</I> takes <I>n</I> knight moves.</TT>&quot;.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>e2 e4
a1 b2
b2 c3
a1 h8
a1 h7
h8 a1
b1 c3
f6 f6</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>To get from e2 to e4 takes 2 knight moves.
To get from a1 to b2 takes 4 knight moves.
To get from b2 to c3 takes 2 knight moves.
To get from a1 to h8 takes 6 knight moves.
To get from a1 to h7 takes 5 knight moves.
To get from h8 to a1 takes 6 knight moves.
To get from b1 to c3 takes 1 knight moves.
To get from f6 to f6 takes 0 knight moves.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
440||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Eeny Meeny Moo</TITLE>
<META NAME="description" CONTENT="Eeny Meeny Moo">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Eeny Meeny Moo</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Surely you have made the experience that when too many people use the Internet simultaneously,
the net becomes very, very slow.
<P>
<P>
To put an end to this problem, the University of Ulm has developed a contingency scheme for times
of peak load to cut off net access for some cities of the country in a systematic, totally fair manner.
Germany's cities were enumerated randomly from 1 to <I>n</I>. Freiburg was number 1, Ulm was number
2, Karlsruhe was number 3, and so on in a purely random order.
<P>
<P>
Then a number <I>m</I> would be picked at random, and Internet access would first be cut off in city 1
(clearly the fairest starting point) and then in every <I>m</I>th city after that, wrapping around to 1 after <I>n</I>,
and ignoring cities already cut off. For example, if <I>n</I>=17 and <I>m</I>=5, net access would be cut off to the
cities in the order [1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7]. The problem is that it is clearly
fairest to cut off Ulm last (after all, this is where the best programmers come from), so for a given
n, the random number m needs to be carefully chosen so that city 2 is the last city selected.
<P>
<P>
Your job is to write a program that will read in a number of cities <I>n</I> and then determine the smallest integer <I>m</I> that will ensure that Ulm can surf the net while the rest of the country is cut off.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file will contain one or more lines, each line containing one integer <I>n</I> with  <IMG WIDTH=90 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/440img1.gif"   > , representing the number of cities in the country.
<P>
Input is terminated by a value of zero (0) for <I>n</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each line of the input, print one line containing the integer <I>m</I> fulfilling the requirement specified above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3
4
5
6
7
8
9
10
11
12
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2
5
2
4
3
11
2
3
8
16</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
441||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Lotto</TITLE>
<META NAME="description" CONTENT="Lotto">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Lotto</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In the German Lotto you have to select 6 numbers from the set {1,2,...,49}. 
<P>
A popular strategy to
play Lotto - although it doesn't increase your chance of winning - is to select a subset S containing
<I>k</I> (<I>k</I>&gt;6) of these 49 numbers, and then play several games with choosing numbers only from S.
<P>
<P>
For example, for <I>k</I>=8 and S = 1,2,3,5,8,13,21,34 there are 28 possible games: [1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ..., [3,5,8,13,21,34].
<P>
<P>
Your job is to write a program that reads in the number k and the set S and then prints all possible games choosing numbers only from S.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input file will contain one or more test cases.
<P>
Each test case consists of one line containing
several integers separated from each other by spaces. The first integer on the line will be the
number <I>k</I> (6 &lt; <I>k</I> &lt; 13). Then <I>k</I> integers, specifying the set S, will follow in ascending order.
<P>
Input will be terminated by a value of zero (0) for <I>k</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print all possible games, each game on one line.
<P>
The numbers of each game have to be sorted in ascending order and separated from each other by exactly one space. The games themselves have to be sorted lexicographically, that means sorted by the lowest number first, then
by the second lowest and so on, as demonstrated in the sample output below.
<P>
The test cases have to be separated from each other by exactly one blank line. Do not put a blank line after the last test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>7 1 2 3 4 5 6 7
8 1 2 3 5 8 13 21 34
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 2 3 4 5 6
1 2 3 4 5 7
1 2 3 4 6 7
1 2 3 5 6 7
1 2 4 5 6 7
1 3 4 5 6 7
2 3 4 5 6 7

1 2 3 5 8 13
1 2 3 5 8 21
1 2 3 5 8 34
1 2 3 5 13 21
1 2 3 5 13 34
1 2 3 5 21 34
1 2 3 8 13 21
1 2 3 8 13 34
1 2 3 8 21 34
1 2 3 13 21 34
1 2 5 8 13 21
1 2 5 8 13 34
1 2 5 8 21 34
1 2 5 13 21 34
1 2 8 13 21 34
1 3 5 8 13 21
1 3 5 8 13 34
1 3 5 8 21 34
1 3 5 13 21 34
1 3 8 13 21 34
1 5 8 13 21 34
2 3 5 8 13 21
2 3 5 8 13 34
2 3 5 8 21 34
2 3 5 13 21 34
2 3 8 13 21 34
2 5 8 13 21 34
3 5 8 13 21 34</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
442||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Matrix Chain Multiplication</TITLE>
<META NAME="description" CONTENT="Matrix Chain Multiplication">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Matrix Chain Multiplication</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Suppose you have to evaluate an expression like A*B*C*D*E where A,B,C,D and E are matrices.
Since matrix multiplication is associative, the order in which multiplications are performed is
arbitrary. However, the number of elementary multiplications needed strongly depends on the
evaluation order you choose.
<P>
<P>
For example, let A be a 50*10 matrix, B a 10*20 matrix and C a 20*5 matrix.
There are two different strategies to compute A*B*C, namely (A*B)*C and A*(B*C).
<P>
The first one takes 15000 elementary multiplications, but the second one only 3500.
<P>
<P>
Your job is to write a program that determines the number of elementary multiplications needed for
a given evaluation strategy.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
Input consists of two parts: a list of matrices and a list of expressions.
<P>
The first line of the input file contains one integer <I>n</I> ( <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/442img1.gif"   > ), representing the number of
matrices in the first part. The next <I>n</I> lines each contain one capital letter, specifying the name of the
matrix, and two integers, specifying the number of rows and columns of the matrix.
<P>
<P>
The second part of the input file strictly adheres to the following syntax (given in EBNF):
<P>
<PRE>SecondPart = Line { Line } &lt;EOF&gt;
Line       = Expression &lt;CR&gt;
Expression = Matrix | &quot;(&quot; Expression Expression &quot;)&quot;
Matrix     = &quot;A&quot; | &quot;B&quot; | &quot;C&quot; | ... | &quot;X&quot; | &quot;Y&quot; | &quot;Z&quot;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each expression found in the second part of the input file, print one line containing the word &quot;<TT>error</TT>&quot; if evaluation of the expression leads to an error due to non-matching matrices. Otherwise print one line containing the number of elementary multiplications needed to evaluate the expression in the way specified by the parentheses.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>9
A 50 10
B 10 20
C 20 5
D 30 35
E 35 15
F 15 5
G 5 10
H 10 20
I 20 25
A
B
C
(AA)
(AB)
(AC)
(A(BC))
((AB)C)
(((((DE)F)G)H)I)
(D(E(F(G(HI)))))
((D(EF))((GH)I))</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0
0
0
error
10000
error
3500
15000
40500
47500
15125</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
443||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Humble Numbers</TITLE>
<META NAME="description" CONTENT="Humble Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Humble Numbers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A number whose only prime factors are 2,3,5 or 7 is called a <EM>humble</EM> number. The sequence 1, 2, 3,
4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, ... shows the first 20 humble numbers.
<P>
<P>
Write a program to find and print the <I>n</I>th element in this sequence.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input Specification</A></FONT></H2>
<P>
The input consists of one or more test cases. Each test case consists of one integer <I>n</I> with  <IMG WIDTH=99 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/4/443img1.gif"   > . Input is terminated by a value of zero (0) for <I>n</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output Specification</A></FONT></H2>
<P>
For each test case, print one line saying &quot;<TT>The <I>n</I>th humble number is <I>number</I>.</TT>&quot;. Depending on the
value of <I>n</I>, the correct suffix &quot;<TT>st</TT>&quot;, &quot;<TT>nd</TT>&quot;, &quot;<TT>rd</TT>&quot;, or &quot;<TT>th</TT>&quot; for the ordinal number <I>n</I>th has to be used like it is shown in the sample output.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
2
3
4
11
12
13
21
22
23
100
1000
5842
0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>The 1st humble number is 1.
The 2nd humble number is 2.
The 3rd humble number is 3.
The 4th humble number is 4.
The 11th humble number is 12.
The 12th humble number is 14.
The 13th humble number is 15.
The 21st humble number is 28.
The 22nd humble number is 30.
The 23rd humble number is 32.
The 100th humble number is 450.
The 1000th humble number is 385875.
The 5842nd humble number is 2000000000.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
444||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Encoder and Decoder</TITLE>
<META NAME="description" CONTENT="Encoder and Decoder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Encoder and Decoder</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Being in charge of the computer department of the Agency of
International Espionage, you are asked to write a program that
will allow a spy to encode and decode their messages.
<P>
You can assume a spy's message is at most 80 characters long, and
it includes all the upper and lowercase letters of the alphabet
plus the space, and any of the following characters:
<P>
<PRE>!  ,  .  :  ;  ?</PRE>
<P>
The following is an ASCII table of the valid characters in a
message:
<P>
<PRE>     &quot;A&quot;  65   &quot;a&quot;  97   &quot; &quot;  32
     &quot;B&quot;  66   &quot;b&quot;  98   &quot;!&quot;  33
      .         .        &quot;,&quot;  44
      .         .        &quot;.&quot;  46
      .         .        &quot;:&quot;  58
     &quot;Y&quot;  89   &quot;y&quot;  121  &quot;;&quot;  59
     &quot;Z&quot;  90   &quot;z&quot;  122  &quot;?&quot;  63</PRE>
<P>
The algorithm that you should use to encode messages is to take
the ASCII value of each character in the message, starting with
the last character in the message and ending with the first
character in the message.  You should then add on to the coded
message this ASCII value written in reverse order.  For example,
if the ASCII value is 123, the encoded message should contain the
string &quot;<TT>321</TT>&quot;.  There should be no spaces separating the numbers
in the encoded message.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file consists of one or more lines with a normal (not encoded) or encoded message each.
<P>
<P>
Output file must have the same number of lines with the corresponding encoded message or the decoded one, respectively.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>abc
798999
Have a Nice Day !</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>998979
cba
332312179862310199501872379231018117927</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
445||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Marvelous Mazes</TITLE>
<META NAME="description" CONTENT="Marvelous Mazes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Marvelous Mazes</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your mission, if you decide to accept it, is to create a maze
drawing program.  A maze will consist of the alphabetic
characters <TT>A-Z</TT>, <TT>*</TT> (asterisk), and spaces.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Your program will get
the information for the mazes from the input file.  This file
will contain lines of characters which your program must
interpret to draw a maze.  Each row of the maze will be described
by a series of numbers and characters, where the numbers before a
character tell how many times that character will be used.  If
there are multiple digits in a number before a character, then
the number of times to repeat the character is the sum of the
digits before that character.
<P>
The lowercase letter &quot;<TT>b</TT>&quot; will be
used in the input file to represent spaces in the maze.  The
descriptions for different rows in the maze will be separated by
an exclamation point (<TT>!</TT>) or by an end of line.
<P>
<P>
Descriptions for
different mazes will be separated by a blank line in both input and output.  The input
file will be terminated by an end of file.
<P>
There is no limit to
the number of rows in a maze or the number of mazes in a file,
though no row will contain more than 132 characters.
<P>
Happy mazing!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1T1b5T!1T2b1T1b2T!1T1b1T2b2T!1T3b1T1b1T!3T3b1T!1T3b1T1b1T!5T1*1T
 
11X21b1X
4X1b1X</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>T TTTTT
T  T TT
T T  TT
T   T T
TTT   T
T   T T
TTTTT*T
 
XX   X
XXXX X</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
446||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Kibbles `n' Bits `n' Bits `n' Bits</TITLE>
<META NAME="description" CONTENT="Kibbles `n' Bits `n' Bits `n' Bits">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Kibbles `n' Bits `n' Bits `n' Bits</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A certain frazzled programmer is writing a program that receives
two numbers at a time in hexadecimal form, performs an addition
or subtraction on them, and outputs the result in decimal form.
However, the binary representation of the hexadecimal numbers
also needs to be output, in the exact format shown by the sample output below.
<P>
<P>
This programmer would gladly write the routine to do this
himself, but every time he tries to do anything in base 2, he
breaks out in hives.  So if you write this little routine for
him, he would be eternally grateful.
<P>
<P>
You may assume the following:
<UL><LI> The largest allowable hexadecimal number is <TT>FFF</TT>.<LI> When subtracting, the second number will always be smaller
     than the first, i.e. no negative results.<LI> The spacing in the input file will be uniform throughout,
     i.e. no spaces at the beginning of a line, and one space
     between each element.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input for this program will come from a file.  The format for
the file is as follows:
<P>
<P>
<P>
<I>N</I> (This is the number of expressions to compute)
<P>
<I>HEX</I>1 (+ or -) <I>HEX</I>2 (The first expression)
<P>
 .
<P>
 .
<P>
 .
<P>
<I>HEX</I>1 (+ or -) <I>HEX</I>2 (The <I>n</I>th expression)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output file should be in the following format:
<P>
<P>
<P>
<I>BINARY</I>1 (+ or -) <I>BINARY</I>2 = <I>DECIMAL</I> (first result)
<P>
 .
<P>
 .
<P>
 .
<P>
<I>BINARY</I>1 (+ or -) <I>BINARY</I>2 = <I>DECIMAL</I> (<I>n</I>th result)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
A + 3
AAA + BBB</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>0000000001010 + 0000000000011 = 13
0101010101010 + 0101110111011 = 5733</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
447||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Population Explosion</TITLE>
<META NAME="description" CONTENT="Population Explosion">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Population Explosion</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
You just received a call from NASA's chief scientist who is
working on a habitable structure to be built on the moon.  He has
designed various models of enclosed cities that people could live
in, but he is unsure as to how these models will stand up to
population growth.  Therefore, since your name has become
synonymous with &quot;He Can Program Anything From Neat, Flashy Space
Games That Entangle You For Hours To Highly Sophisticated Super
Spy Surveillance Satellite Image Enhancement Algorithms,&quot; he
immediately called you with his problem.  Here is what he said:
<P>
<P>
&quot;I need a program which will read in a set of data points that
represent the location of living quarters within the city.  I
then want the program to simulate the creation, growth, and death
of each living quarter per year based on the following rules:
<P>
<OL><LI> Every living quarter with two or three neighboring quarters
     survives the current year.<LI> Each living quarter with four or more neighbors dies due to
     over-population.  Each living quarter with one or less
     neighbors dies from isolation.<LI> Each empty location that is adjacent to exactly three
     neighbors - no more, no fewer - will have someone build new
     living quarters in that location for the next year.
</OL>
<P>
Note that each living quarter can have from zero to eight
adjacent neighbors (i.e. north, south, east, west, north-west,
north-east, south-west, and south-east) at any given time.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Each city model will have a maximum of 20 possible living
quarters in the north-south direction and 20 in the east-west
direction.  The top left corner will be designated location 1,1
(N-S position, E-W position) and the bottom right is therefore
20,20.  I want the program to read the data file and then output
the existing population map for each year.  Year 1 will
correspond to the initial configuration.  Therefore, the first
map in the file should be the initial configuration.  Mark empty
locations with a space and living quarters with a capital letter
<TT>O</TT>.
<P>
Please separate each year's output with a single line of 20
asterisks, and put a similar line both as the first and the last of the output file.  Any questions?&quot;
<P>
&quot;Yes, one,&quot; you replied, &quot;What will the input file look like?
<P>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<P>
&quot;Let the first line of each input specify the number of years to
run the simulation.  Then, following that will be the coordinates
for the initial locations.&nbsp;
<P>
&nbsp;The outputs of two consecutive cases will be separated by a blank line.
<P>
  Oh, by the way, I need this to be
completed within the next four hours.  Talk to you later.  Bye.&quot;
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

3
5 4
5 5
5 6
5 7</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>********************
 
 
 
 
   OOOO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
********************
 
 
 
    OO
    OO
    OO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
********************
 
 
 
    OO
   O  O
    OO
 
 
 
 
 
 
 
 
 
 
 
 
 
 
********************</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
448||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>OOPS!</TITLE>
<META NAME="description" CONTENT="OOPS!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">OOPS!</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You've been sitting in front of the terminal for three hours
savagely coding the Assembler assignment that's due tomorrow.
Your best friend, who finished the program last week and has been
rubbing it in for just as long, saunters up to your terminal and
offers, &quot;Coke break, slow poke?&quot;  You take the Coke he hands you
and you lean your head back, savoring the refreshing feeling of
the drink as it soothes your parched throat; too much coding
always made your throat raw.  &quot;Hey, can I look at how far you've
gotten?&quot; your friend asks.  &quot;Sure,&quot; you reply, taking another
long drink.  As you're enjoying your drink and thinking of what
&quot;The Real Thing&quot; really is, you hear a whispered &quot;oops&quot; from the
direction of your terminal.  &quot;What?!&quot; you demand.  Your friend
replies, backing away, &quot;I think I just deleted your source code.&quot;
<P>
<P>
&quot;Arrrgggghhh!&quot; you spurt as your friend runs from the computer
lab, mumbling prayers for divine protection.  You double check
and sure enough all you have left of your precious Assembler
assignment is the executable code from your last compile.  And
you were so close to finishing!  Do you take a zero?  No, that
last test was a killer.  Start over?  NOT!  Instead, your hands
fumble for your Assembler textbook....  Ah, here we go: a
description of the encoding scheme used by the computer's
assembler.  It doesn't look too bad and you remember most of the
hand disassembling you did in class (Thanks Dr. Baber)!  It's
decided then, you'll just have to write a quick disassembler to
convert the executable code back into your source code so that
you can finish your assignment before Cheers comes on.  You open
your textbook and begin reading:
<P>
<P> <IMG WIDTH=337 HEIGHT=429 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/4/448img1.gif"   > <P>
<P>
<TT>ADD</TT> [R,A,N],[R,A] means that the <TT>ADD</TT> instruction takes two
operands.  The first can be a register, an address, or a number,
and the second operand is either a register or an address.
<P>
<P>
Opcodes are 4 bits in length.  An operand is made up of two
fields: a mode and a value.  The mode is two bits and the value
is fourteen bits for a total of sixteen bits.  The possible
values for mode are:
<P>
<P> <IMG WIDTH=239 HEIGHT=100 ALIGN=BOTTOM ALT="tabular51" SRC="http://uva.onlinejudge.org/external/4/448img1.gif"   > <P>
<P>
The value field for a register operand (mode = 00) specifies the
number of the register.  For example, if the value field
contained a seven then that would specify register number 7,
written &quot;<TT>R7</TT>&quot;.  The valid registers are R0 through R1023.
<P>
<P>
The value field for an absolute operand (mode = 01) specifies the
absolute address that the operand is to be stored at.  For
example, if the value field contained the number 110, that would
denote address location 110, which is written &quot;<TT>$110</TT>&quot;.  Valid
addresses are $0 through $16383.
<P>
<P>
The value field for a PC-Relative operand (mode = 10) specifies
the offset of the address relative to the program counter.  (On
this computer, all PC-relative offsets are non-negative).  For
example, if the value field contained the number 45, that would
specify the address location (Program Counter) + 45, which is
written &quot;<TT>PC+45</TT>&quot;.  Valid offsets are from 0 to 16363.
<P>
<P>
The value field for a constant operand (mode = 11) specifies a
constant - a number between 0 and 16383.  For example, if the
value field contained the number 1276, then that would specify
the actual number 1276 and is written as &quot;<TT>1276</TT>&quot;.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Your task is to write a program which will read in a text file
that contains the hexadecimal listing of an executable program
and output the original source code, one assembler instruction
per line.  Each line in the text file will contain exactly 30
hexadecimal digits except for the last line which will contain
from 1 to 30 hexadecimal digits.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>4C00D00004C0020001000000001400
005FFFB801E</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MOV 13,R0
MOV 2,R1
ADD R0,R1
MOV R0,$8191
BR PC+30</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
449||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Majoring in Scales</TITLE>
<META NAME="description" CONTENT="Majoring in Scales">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Majoring in Scales</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Background</A></FONT></H2>
<P>
In western music, the twelve notes used in musical notation are
arranged in the following order:
<P>
<PRE>C/B#  C#/Db  D  D#/Eb  E/Fb  F/E#  F#/Gb  G  G#/Ab  A  A#/Bb  B/Cb</PRE>
<P>
Note that a slash in the above list indicates alternate notations
for the same note.
<P>
<P>
Any two notes that are adjacent to each other in the above list
are known as a semitone.  Any two notes that have one note
separating them in the list above are known as a tone.  A major
scale is made up of 8 notes.  It starts on one of the above notes
and moves in the progression tone-tone-semitone-tone-tone-tone-semitone.  For example, the major scale starting on <TT>Db</TT> is made up
of the following notes:
<P>
<PRE>Db Eb F Gb Ab Bb C Db</PRE>
<P>
The following rules also apply to major scales:
<P>
<OL><LI> The scale will contain each letter from <TT>A</TT> to <TT>G</TT> once and only once, with the exception of the first letter of the scale (which will be repeated as the last note of the scale).<LI> The scale may not contain a combination of both flat (<TT>b</TT>)
     notes and sharp (<TT>#</TT>) notes.
</OL>
<P>
For the purposes of this problem, we are only concerned with the
following major scales: <TT>C</TT>, <TT>Db</TT>, <TT>D</TT>, <TT>Eb</TT>, <TT>E</TT>, <TT>F</TT>, <TT>Gb</TT>, <TT>G</TT>, <TT>Ab</TT>, <TT>A</TT>, <TT>Bb</TT>, and <TT>B</TT>.
<P>
<P>
An interval is a distance between two notes on a scale.  It can
be either ascending or descending.  The names of the intervals
are derived by the distance between the two notes.  Two notes
adjacent to each other in a major scale are known as a major
second.  Two notes in a major scale with three notes separating
them are known as a major fifth.  An octave is a special interval
which spans from one occurrence of a note to the next occurrence
of it in the major scale.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Input and Output</A></FONT></H2>
<P>
Your program is to read an input file that contains major scale
intervals to calculate, and is to output the results to an output
file.  The data in the input file will consist of pairs of lines.
The first line of each pair will contain the major scale to be
used, and the second line of each pair will contain one or more
intervals to be calculated.  Each interval to be calculated will
be separated by a semicolon.  The interval to calculate will be
specified with a starting note, a direction (<TT>UP</TT> or <TT>DOWN</TT>), and the
interval itself (<TT>SECOND</TT>, <TT>THIRD</TT>, <TT>FOURTH</TT>, <TT>FIFTH</TT>, <TT>SIXTH</TT>, <TT>SEVENTH</TT>, or <TT>OCTAVE</TT>).  When specifying notes, the lowercase letter &quot;<TT>b</TT>&quot; will be used to represent a flat, and the symbol &quot;<TT>#</TT>&quot; will be used to
represent a sharp.  No spaces will immediately precede or follow
a semicolon, but one space will separate the note from the
direction as well as the direction from the interval.
<P>
<P>
The output file should be formatted as shown below, with a blank line after every test case.  Each pair of lines in
the input file will produce a line stating the key, followed by
the results of the calculated intervals, one interval per line.
If the starting note of the interval is not a part of the major
scale being used, the program should output &quot;<TT>invalid note for
this key</TT>&quot;.
<P>
<P>
The following example shows more clearly the format of the input
and output files:
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>C
F UP SECOND;G DOWN THIRD
E
F# DOWN FOURTH;Bb DOWN SEVENTH;B UP OCTAVE</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Key of C
F: UP SECOND &gt; G
G: DOWN THIRD &gt; E
 
Key of E
F#: DOWN FOURTH &gt; C#
Bb: invalid note for this key
B: UP OCTAVE &gt; B</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
450||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Little Black Book</TITLE>
<META NAME="description" CONTENT="Little Black Book">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Little Black Book</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Public Relations Office is looking for an easier way to
compile the information for their Black Book, a listing of all
faculty members.  Currently, each department types up a list of
their faculty and submits the list to PR.  PR then takes all the
lists and makes a combined list that is sorted alphabetically by
last name.  So far they have been doing this task by hand, which
takes far more time than the average PR employee has to spare!
<P>
<P>
What PR is looking for is a program that will take these faculty
listings and combine them in a certain format that PR can use for
inclusion in the Black Book.  All the lists are stored in text
files.  Each department's file is sorted by last name.  The
program should take these individually sorted files and combine
them into a single sorted file in the format shown below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain, on the first line, a
number (between 2 and 12) that reports the number of departments that
your program should sort and write to the output file.
Following the first line will be a series of sets of lines. The first line of each set contains a department title, and following lines contain the data to be sorted.
<P>
The information
reported is in this order: Title, First Name, Last Name, Street
Address, Home Phone, Work Phone, and Campus Mailbox. The information is delimited with commas.
<P>
A blank line separates two sets of lines. There are the same number of  department titles and sets of data as the number on the first line reports.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The format of each record held in the output file should be
as follows:
<P>
<P>
<TT>--------------------</TT>
<P>
<TT>&lt;</TT>Title<TT>&gt;</TT> <TT>&lt;</TT>FirstName<TT>&gt;</TT> <TT>&lt;</TT>LastName<TT>&gt;</TT>
<P>
<TT>&lt;</TT>HomeAddress<TT>&gt;</TT>
<P>
<TT>Department: &lt;</TT>Department<TT>&gt;</TT>
<P>
<TT>Home Phone: &lt;</TT>HomePhone<TT>&gt;</TT>
<P>
<TT>Work Phone: &lt;</TT>WorkPhone<TT>&gt;</TT>
<P>
<TT>Campus Box: &lt;</TT>CampusBox<TT>&gt;</TT>
<P>
<P>
The dashed line should be shown at the top of each record.  The
characters &quot;<TT>&lt;</TT>&quot; and &quot;<TT>&gt;</TT>&quot; show where a field should be placed.
Please pay attention to spacing.
<P>
You may assume that all input files will be in the proper syntax,
with no extra spaces.  PR therefore expects that the data they
are requesting will be in the proper syntax.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2
English Department
Dr.,Tom,Davis,Anystreet USA,555-2832,555-2423,823
Mrs.,Jessica,Lembeck,Center Street,555-2543,555-8584,928

Computer Science
Mr.,John,Euler,East Pleasure,555-1432,555-2343,126</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>----------------------------------------
Dr. Tom Davis
Anystreet USA
Department: English Department 
Home Phone: 555-2832
Work Phone: 555-2423
Campus Box: 823
----------------------------------------
Mr. John Euler
East Pleasure
Department: Computer Science 
Home Phone: 555-1432
Work Phone: 555-2343
Campus Box: 126
----------------------------------------
Mrs. Jessica Lembeck
Center Street
Department: English Department
Home Phone: 555-2543
Work Phone: 555-8584
Campus Box: 928</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
451||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Poker Solitaire Evaluator</TITLE>
<META NAME="description" CONTENT="Poker Solitaire Evaluator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Poker Solitaire Evaluator</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<p>The input will contain several test cases. First line of the input is the an
integer which indicate the number of test case followed by a blank line.&nbsp;Each
consecutive test case will also separated by a blank line.</p>
<P>
Each test case gets 25 cards, 5 cards per line. Each card consists
 of two characters. The first represents the rank of the card: `A', `2',
     `3', `4', `5', `6', `7', `8', `9', `X', `J', `Q', `K'.
     The second represents the suit of the card: `S', `H', `D', `C'.
<P>
<P>
     The cards are dealt into a  <IMG WIDTH=37 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/4/451img1.gif"   >  square.  Each row and column is
     evaluated to determine the highest hand type for which its 5 cards
     qualify.  The hand types, from low to high, are Nothing, Pair, Two
     Pair, Three of a Kind, Straight, Flush, Full House, Four of a Kind,
     Straight Flush.  A hand qualifies only once, and then only for its
     highest type.  For example, a Four of a Kind does not count as two
     pair or three of a kind.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case output a list of 9 integers, telling how many hands of each handtype were found.
from lowest to highest, being:
<P>
<OL><LI> <B>Nothing</B>: does not qualify as any of the following. Example: AC,
          3H, QS, JD, 7D.
<P>
<LI> <B>One Pair</B>: contains two cards of the same rank and does not
          qualify for any of the following. Example: 2C, 3H, 4H, 2H, KD.
<P>
<LI> <B>Two Pair</B>: contains two cards of one rank and two cards of another and does not qualify for any of the following. Example: 2C,
          3H, 4H, 2H, 4D.
<P>
<LI> <B>Three of a Kind</B>: contains three cards of the same rank and does
          not qualify for any of the following. Example: QS, KH, 2C, QD,
          QC.
<P>
<LI> <B>Straight</B>: the five cards of the hand may be sorted on rank so that an unbroken sequence of 5 ranks is formed and the hand does not
          qualify for any of the following. 
There can be cycle through Ace. That is AC, 2H, 4D, 3H, 5S forms a straight, as
does JH, XD,QC, KD, AS and QC, KD, AS, 2H, 3D.
<P>
<LI> <B>Flush</B>: the five cards are all of the same suit and the hand does
          not qualify for any of the following. Example: 5D, AD, KD, 7D,
          QD.
<P>
<LI> <B>Full House</B>: the hand contains three cards of one rank and two
          cards of another. Example: 3C, QS, QD, 3H, 3S.
<P>
<LI> <B>Four of a kind</B>: the hand contains four cards of the same rank.
          Example: AS, AD, AH, 7C, AC.
<P>
<LI> <B>Straight Flush</B>: the hand meets the criteria for being both a
          straight and a flush.
</OL>
<P>
Two consecutive output will separated by a blank line.
<P>
For the example below, the five rows evaluate to Straight Flush, Straight, Pair, Flush, Three of a Kind. The Five columns evaluate to Four of A Kind, Full House, Two Pair, Nothing, and Two Pair.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

AS 2S 3S 4S 5S
AC 2H 3H 5C 4C
AH 2D KC KH 5D
AD 3D KD 9D 8D
XH 3C XC XS 8C</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1, 1, 2, 1, 1, 1, 1, 1, 1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
452||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Project Scheduling</TITLE>
<META NAME="description" CONTENT="Project Scheduling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Project Scheduling</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
   A project management technique called Pert involves breaking a large
project into a number of tasks, estimating the time required to perform each
task, and determining which tasks can not be started until others have been
completed. The project is then summarized in chart form. For example, the
chart (which corresponds to the sample input below)
<P>
<center><img src=452img2.gif></center>
<P>
indicates that tasks A, B, C, D, E and F each take 5, 3, 2, 2, 4, and 2 days respectively, that task E cannot complete until C and D are both completed, but that D can be performed in parallel with B and C.
<P>
<P>
   Write a program that accepts a Pert chart and computes the amount
of time required to complete a project.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
<b>
The input begins with a single positive integer on a line by itself indicating 
the number of the cases following, each of them as described below. 
This line is followed by a blank line, and there is also a blank line between 
two consecutive inputs.
</b>
<p>
<p>


Input will be from 1 to 27 lines, each corresponding to a different task. Each line will contain:
<P>
<OL><LI> A single upper case letter serving as the name of a task. 

<!--On the final line of input, this will be blank and the rest of that line is ignored.-->
<LI> An integer indicating the number of days required to complete
          that task.<LI> 0-26 additional uppercase letters, each indicating another task
          that must complete before this one can begin.
</OL>
<P>
<P>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Output</A></FONT></H2>

<P>

<b>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</b>
<p>
<p>
The output is a single integer indicating the amount of time that will pass before all tasks can complete.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
2

A 5
B 3 A
D 2 A
C 2 B
F 2 CE
E 4 DC

A 5
B 3 A
D 2 A
C 2 B
F 2 CE
E 4 DC
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>16

16</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
453||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Intersecting Circles</TITLE>
<META NAME="description" CONTENT="Intersecting Circles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Intersecting Circles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The equation of a circle with radius <I>r</I> and center  <IMG WIDTH=49 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/4/453img1.gif"   >  is
<P> <IMG WIDTH=345 HEIGHT=20 ALIGN=BOTTOM ALT="displaymath31" SRC="http://uva.onlinejudge.org/external/4/453img1.gif"   > <P>
<P>
Write a program that compares two circles to see if they intersect and,
if they do, computes the points of intersection. (There can be 1, 2,
or and infinite number of such points).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input to this program will consist of a pair number of lines. Each two lines represent a intersection problem. Each line will
     contain 3 real numbers constituting the  <IMG WIDTH=15 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/4/453img1.gif"   > ,  <IMG WIDTH=14 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/4/453img1.gif"   >  and <I>r</I> parameters for one circle.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each problem, the output should be the words &quot;<TT>NO INTERSECTION</TT>&quot; if the circles do not intersect.
<P>
When they have an infinite number of intersection points, the output should be the words &quot;<TT>THE CIRCLES ARE THE SAME</TT>&quot;
<P>
If they do intersect at 1 or 2 points, the output should be a line with one or two pairs, respectively, of real numbers giving the <I>x</I> and <I>y</I> coordinates of any point of intersection. Pairs must be sorted first by their <I>x</I> coordinate and when these are equal by the <I>y</I> coordinate.
<P>
Each pair is to be printed in parenthesis with numbers accurately rounded to
three digits to the right of the decimal point, as the sample below.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0.0 0.0 1.0
3.0 0.0 1.0
0.0 0.0 1.0
0.0 0.0 1.0
0.0 0.0 1.0
1.0 0.0 1.0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>NO INTERSECTION
THE CIRCLES ARE THE SAME
(0.500,-0.866)(0.500,0.866)
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
454||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Anagrams</TITLE>
<META NAME="description" CONTENT="Anagrams">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Anagrams</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
An anagram is a word or phrase formed by rearranging the letters of
another word or phrase.  For example, ``<TT>carthorse</TT>&quot; is an anagram of ``<TT>orchestra</TT>&quot;.  Blanks within a phrase are ignored in forming anagrams.  Thus, ``<TT>orchestra</TT>&quot; and ``<TT>horse cart</TT>&quot; are also anagrams.
<P>
<P>
   Write a program that reads a list of phrases and prints all pairs of anagrams occurring in the list.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain a single integer at the first line of the input,
indicate the number of test case you need to test followed by a blank line. Each test case will consist of from 1 to 100 lines.  A completely empty or
     blank line signals the end of a test case. Each line constitutes one phrase.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Some number of lines (including possibly 0 if there are no anagrams in the list), each line containing two anagrammatic phrases
     separated by `<TT>=</TT>'.
<P>
<P>
Each anagram pair should be printed exactly once, and the order of
the two phrases within a printed pair must be lexicographic, as well as the first phrases and the second ones in case some first are equal.
<P>
Two consecutive output for two consecutive input is separated by a single blank
line.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

carthorse
horse
horse cart
i do not know u
ok i now donut
orchestra
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>carthorse = horse cart
carthorse = orchestra
horse cart = orchestra
i do not know u = ok i now donut</PRE>
</BODY>
</HTML>

______________________________________________________
455||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Periodic Strings</TITLE>
<META NAME="description" CONTENT="Periodic Strings">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Periodic Strings</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
   A character string is said to have period <I>k</I> if it can be formed by concatenating one or more repetitions of another string of length <I>k</I>. For example,
the string &quot;<TT>abcabcabcabc</TT>&quot; has period 3, since it is formed by 4 repetitions of the string &quot;<TT>abc</TT>&quot;. It also has periods 6 (two repetitions of &quot;<TT>abcabc</TT>&quot;) and 12 (one repetition of &quot;<TT>abcabcabcabc</TT>&quot;).
<P>
<P>
   Write a program to read a character string and determine its smallest
period.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
 <P>The first line oif the input file will contain a single integer N indicating
 how many test case that your program will test followed by a blank line. Each test case will contain a single character string of up to 80 non-blank characters.
 Two consecutive input will separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
An integer denoting the smallest period of the input string for each input. Two
consecutive output are separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

HoHoHo</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<PRE>2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
456||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Robotic Stacker</TITLE>
<META NAME="description" CONTENT="Robotic Stacker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
<!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Robotic Stacker</A></FONT>&nbsp;</B></TABLE></CENTER></H1-->
<P>
   A certain warehouse has ordered a robotic unit that can pick up, move
and place various size boxes. It was ordered to provide a capability of using
the warehouse floor space to the maximum extent by stacking boxes as high
as possible.  The first task is to stack simple boxes in a bin that is 1 foot
wide by 6 feet long and is 20 feet high. The boxes come into the warehouse
on a conveyor belt one at a time. The task is for the robot to pick up the
next box, move it from the conveyor area, and place it in the bin. The boxes
on the conveyor are packaged groups of boxes that are a cube of 1 foot to a
side. They are grouped in four sizes: one packaged box, two packaged boxes,
three packaged boxes in a row, and four packaged boxes in a row. As with
all new automated inovations, management wants to witness a simulated
stacking exercise before committing the robot to full autonomous operation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
   Write a complete program that accepts as input a list of boxes
by size (number in the packaged group). This list will look like this:
<P>
<PRE>4234443131..........</PRE>
<P>
   This means that the first package to be stacked has 4 boxes, the second
has 2 boxes, the third has 3, the fourth has 4 boxes, the fifth has 4 boxes
etc.
<P>
Your program must accept the input list sequentially and stack as many packages as it can. Packages must be stacked intact.... cannot be split apart into component boxes.
<P>
Assume that all packages stacked horizontally are fully supported throughout their length wherever they stack on top of an existing box. All packages must rest on top of an existing package or on the floor.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Output</A></FONT></H2>
<P>
The output, for each line of the input, must be a line with two integer numbers separated by a space: the (maximum) number of packages you stacked and the number of the 120 possible box locations which are empty at the end.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>44444444444444444444444444444444444444444444
333333333333333333333333333333333333333422221111</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>30 0
39 3</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
457||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Linear Cellular Automata</TITLE>
<META NAME="description" CONTENT="Linear Cellular Automata">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Linear Cellular Automata</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
A biologist is experimenting with DNA modification of
bacterial colonies being grown in a linear array of culture dishes. By
changing the DNA, he is able ``program&quot; the bacteria to respond to the
population density of the neighboring dishes. Population is measured
on a four point scale (from 0 to 3). The DNA information is
represented as an array <EM>DNA</EM>, indexed from 0 to 9, of population density
values and is interpreted as follows:
<P>
<UL><LI>   In any given culture dish, let <I>K</I> be the sum of that culture dish's
   density and the densities of the dish immediately to the left and
   the dish immediately to the right. Then, by the next day, that dish
   will have a population density of <EM>DNA[K]</EM>.<LI>   The dish at the far left of the line is considered to have a left
   neighbor with population density 0.<LI>   The dish at the far right of the line is considered to have a right
   neighbor with population density 0.
<P>
</UL>
<P>
Now, clearly, some DNA programs cause all the bacteria to die off
(e.g., [0,0,0,0,0,0,0,0,0,0]). Others result in immediate population
explosions (e.g., [3,3,3,3,3,3,3,3,3,3]).  The biologist is interested
in how some of the less obvious intermediate DNA programs might
behave.
<P>
<P>
Write a program to simulate the culture growth in a line of 40 dishes,
assuming that dish 20 starts with a population density of 1 and all
other dishes start with a population density of 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself
indicating the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.
<P>
For each input set your program will read in the DNA program (10 integer values) on one line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<p>For each test case, the output must follow the description below. The outputs
of two consecutive cases will be separated by a blank line.</p>
<P>
For each input set it should print the densities of the 40 dishes for each of the next 50
days. Each day's printout should occupy one line of 40 characters.
Each dish is represented by a single character on that line. Zero population
densities are to be printed as the character ` '. Population density 1
will be printed as the character `<TT>.</TT>'. Population density 2 will be
printed as the character `<TT>x</TT>'. Population density 3 will be printed as
the character `<TT>W</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

0 1 2 0 1 3 3 2 3 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>bbbbbbbbbbbbbbbbbbb.bbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbb...bbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbb.xbx.bbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbb.bb.bb.bbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbb.........bbbbbbbbbbbbbbbb
bbbbbbbbbbbbbb.xbbbbbbbx.bbbbbbbbbbbbbbb
bbbbbbbbbbbbb.bbxbbbbbxbb.bbbbbbbbbbbbbb
bbbbbbbbbbbb...xxxbbbxxx...bbbbbbbbbbbbb
bbbbbbbbbbb.xb.WW.xbx.WW.bx.bbbbbbbbbbbb
bbbbbbbbbb.bbb.xxWb.bWxx.bbb.bbbbbbbbbbb</PRE>
<PRE>&nbsp;</PRE>
<P>
<B>Note:</B> Whe show only the first ten lines of output (the total number of lines must be 50) and the spaces have been replaced with the character <TT>&quot;b&quot;</TT> for ease of reading.
The actual output file will use the ASCII-space character, not <TT>&quot;b&quot;</TT>.
<P>
</BODY>
</HTML>

______________________________________________________
458||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Decoder</TITLE>
<META NAME="description" CONTENT="The Decoder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Decoder</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a complete program that will correctly decode a set of
characters into a valid message. Your program should
read a given file of a simple coded set of characters and print the 
exact message that the characters contain. The code key for this 
simple coding is a one for one character substitution based upon a
<EM>single arithmetic manipulation</EM> of the printable portion of the 
ASCII character set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
For example: with the input file that contains:
<P>
<PRE>1JKJ'pz'{ol'{yhklthyr'vm'{ol'Jvu{yvs'Kh{h'Jvywvyh{pvu5
1PIT'pz'h'{yhklthyr'vm'{ol'Pu{lyuh{pvuhs'I|zpulzz'Thjopul'Jvywvyh{pvu5
1KLJ'pz'{ol'{yhklthyr'vm'{ol'Kpnp{hs'Lx|pwtlu{'Jvywvyh{pvu5</PRE>
<P>
your program should print the message:
<PRE>*CDC is the trademark of the Control Data Corporation.
*IBM is a trademark of the International Business Machine Corporation.
*DEC is the trademark of the Digital Equipment Corporation.</PRE>
<P>
Your program should accept all sets of characters that use the same
encoding scheme and should print the actual message of each set of
characters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1JKJ'pz'{ol'{yhklthyr'vm'{ol'Jvu{yvs'Kh{h'Jvywvyh{pvu5
1PIT'pz'h'{yhklthyr'vm'{ol'Pu{lyuh{pvuhs'I|zpulzz'Thjopul'Jvywvyh{pvu5
1KLJ'pz'{ol'{yhklthyr'vm'{ol'Kpnp{hs'Lx|pwtlu{'Jvywvyh{pvu5</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>*CDC is the trademark of the Control Data Corporation.
*IBM is a trademark of the International Business Machine Corporation.
*DEC is the trademark of the Digital Equipment Corporation.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
459||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Graph Connectivity</TITLE>
<META NAME="description" CONTENT="Graph Connectivity">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Graph Connectivity</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
Consider a graph <I>G</I> formed from a large number of nodes connected by
edges. <I>G</I> is said to be <EM>connected</EM> if a path can be found in 0 or
more steps between any pair of nodes in <I>G</I>.
For example, the graph below is not connected because there is no path
from <I>A</I> to <I>C</I>.
<P>
<P> <IMG WIDTH=128 HEIGHT=224 ALIGN=BOTTOM ALT="picture22" SRC="http://uva.onlinejudge.org/external/4/459img1.gif"   > <P>
<P>
This graph contains, however, a number of subgraphs that are
connected, one for each of the following sets of nodes:
{<I>A</I>}, {<I>B</I>}, {<I>C</I>}, {<I>D</I>}, {<I>E</I>}, {<I>A</I>,<I>B</I>}, {<I>B</I>,<I>D</I>}, {<I>C</I>,<I>E</I>}, {<I>A</I>,<I>B</I>,<I>D</I>}
<P>
A connected subgraph is <EM>maximal</EM> if there are no nodes and edges
in the original graph that could be added to the subgraph and still
leave it connected. There are two maximal connected subgraphs above,
one associated with the nodes {<I>A</I>, <I>B</I>, <I>D</I>} and the other with the nodes
{<I>C</I>, <I>E</I>}.
<P>
Write a program to determine the number of maximal connected subgraphs
of a given graph.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<P>
The first line of each input set contains a single uppercase
alphabetic character.  This character represents the largest node name
in the graph.
Each successive line contains a pair of uppercase alphabetic
characters denoting an edge in the graph. The sample input section contains a
possible input set for the graph pictured above.
<P>
Input is terminated by a blank line.
<P>For each test case, the output the number of maximal connected subgraphs. The
outputs of two consecutive cases will be separated by a blank line.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

E
AB
CE
DB
EC</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
460||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Overlapping Rectangles</TITLE>
<META NAME="description" CONTENT="Overlapping Rectangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Overlapping Rectangles</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
When displaying a collection of rectangular windows on a SUN screen, a
critical step is determining whether two windows overlap, and, if so,
where on the screen the overlapping region lies.
<P>
<P>
Write a program to perform this function.  Your program will accept as
input the coordinates of two rectangular windows. If the windows do
not overlap, your program should produce a message to that effect. If
they do overlap, you should compute the coordinates of the overlapping
region (which must itself be a rectangle).
<P>
<P>
All coordinates are expressed in &quot;pixel numbers&quot;, integer values
ranging from 0 to 9999. A rectangle will be described by two pairs of
(<I>X</I>,<I>Y</I>) coordinates. The first pair gives the coordinates of the lower
left-hand corner (<I>XLL</I>,<I>YLL</I>). The second pair gives the
coordinates of the upper right-hand coordinates (<I>XUR</I>, <I>YUR</I>).
You are guaranteed that <I>XLL</I> &lt; <I>XUR</I> and <I>YLL</I> &lt; <I>YUR</I>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
  Input will contain several test case. It begins with a single positive integer
  on a line by itself indicating the number of the cases following, each of them
  as described below. This line is followed by a blank line, and there is also a
  blank line between two consecutive inputs.
<P>
  Each test case consists of two lines. The first contains the integer numbers XLL, YLL,
XUR and YUR for the first window.  The second contains the same
numbers for the second window.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
 For each test case, the output must follow the description below. The outputs
 of two consecutive cases will be separated by a blank line.
<P>
 For each set of input if the two windows do not overlap, print the message ``<TT>No Overlap</TT>&quot;.  If the two windows do overlap, print 4 integer numbers
giving the  <I>XLL</I>, <I>YLL</I>, <I>XUR</I> and <I>YUR</I> for the region of overlap.
<P>
<P>
Note that two windows that share a common edge but have no other
points in common are considered to have ``<TT>No Overlap</TT>&quot;.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

0 20 100 120
80 0 500 60</PRE>
<P>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>80 20 100 60</PRE>
</BODY>
</HTML>

______________________________________________________
461||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Reservation Maker</TITLE>
<META NAME="description" CONTENT="The Reservation Maker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Reservation Maker</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that will assist the receptionist in seating customer
parties at tables and booths in a large restaurant.   Your program
should accept for the receptionist the arrival time, the size of the
party, whether the party desires a table or a booth, in the smoking
or nonsmoking sections of the restaurant.
<P>
<P>
For each request in a list
of requests, the program should provide a table number and the
approximate waiting time before the party can be seated.  The
restaurant has the following seating characteristics:
<P>
<P> <IMG WIDTH=452 HEIGHT=158 ALIGN=BOTTOM ALT="tabular21" SRC="http://uva.onlinejudge.org/external/4/461img1.gif"   > <P>
<P>
Each table of the table groups is portable and can be moved such that as
many as five tables of any group may be connected to seat a larger party
than any one table could seat.  This connection of tables is only possible
if the sequential number of the tables to be used are vacant.  Thus 2
four-person tables can be joined together to seat a party of 6; 3
four-person table can be joined to seat a party of 8, and so on.
<P>
Parties of 1 take 35 minutes, parties of 2 take 47 minutes at the
restaurant (service is very predictable), parties of 3 or 4 take 52 minutes,
while parties of 5 to 10 take 55 minutes.  Parties of greater than 10 take
 <IMG WIDTH=166 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/461img1.gif"   >  minutes.
<P>
<P>
Your program should always assign the lowest booth/table number available.
You should also process the requests in the order given and once an
assignment is made, not change it.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your program should accept a sequence of reservation requests (the
restaurant requires reservations).  Each reservation consists of one line
with an integer arrival time (in minutes past 8:00 p.m.), the party size
(at least 1), a blank, then an `<TT>S</TT>' or an `<TT>N</TT>' (smoking or nonsmoking), a blank, then a `<TT>B</TT>' or a `<TT>T</TT>' (booth or table).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each reservation request
which can be satisfied, your program should then print the list of table
numbers or the table/booth number and the number of minutes the party will
have to wait after their arrival.  If a request cannot be satisfied,
print `<TT>Impossible</TT>'.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>60 5 N B
0 4 N B
10 3 N B
10 2 N B
13 2 N B
0 6 N B
30 12 N T
60 8 S B</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1 0
2 0
3 0
4 0
1 0
2 47
11 12 13 14 15 0
Impossible</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
462||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Bridge Hand Evaluator</TITLE>
<META NAME="description" CONTENT="Bridge Hand Evaluator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Bridge Hand Evaluator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In the card game ``Bridge'', players must assess the strength of their
hands prior to bidding against one another. Most players use a
point-count scheme which employs the following rules:
<OL><LI> Each ace counts 4 points. Each king counts 3 points. Each queen
counts 2 points. Each jack counts one point.<LI> Subtract a point for any king of a suit in which the hand holds
no other cards.<LI> Subtract a point for any queen in a suit in which the hand holds
only zero or one other cards.<LI> Subtract a point for any jack in a suit in which the hand holds
only zero, one, or two other cards.<LI> Add a point for each suit in which the hand contains exactly two
cards.<LI> Add two points for each suit in which the hand contains exactly one
card.<LI> Add two points for each suit in which the hand contains no
cards. 
</OL>
<P>
A suit is <EM>stopped</EM> if it contains an ace, or if it contains a
king and at least one other card, or if it contains a queen and at
least two other cards.
<P>
<P>
During the opening assessment, the three most common possibilities are:
<P>
<UL><LI> If the hand evaluates to fewer than 14 points, then the player
must pass.<LI> One may open bidding in a suit if the hand evaluates to 14 or
more points. Bidding is always opened in one of the suits with the
most cards.<LI> One may open bidding in ``no trump'' if the hand evaluates to 16
or more points <EM>ignoring rules 5, 6, and 7</EM> and if all four suits
are stopped. A no trump bid is always preferred over a suit bid when
both are possible.
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input to your program consists of a series of lines, each line containing
 13 cards.  Each card
consists of two characters.  The first represents the rank of the
card: `A', `2', `3', `4', `5', `6', `7', `8', `9', `T', `J', `Q', `K'.
The second represents the suit of the card: `S', `H', `D', `C',
standing for ``spades'', ``hearts'', ``diamonds'', and ``clubs'',
respectively.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each line of the input, print one line containing the recommended bid, either ``<TT>PASS</TT>'', the first ``<TT>BID </TT><EM>suit</EM>'', where <EM>suit</EM> is ``S'', ``H'', ``D'', or ``C'' (sorted in this natural way if two or more are possible), or ``<TT>BID NO-TRUMP</TT>''.
<P>
<P>
For the first example below,
the evaluation starts with 6 points for the two kings, 4 for the ace,
6 for the three queens, and one for the jack. To this tally of 17
points, we add 1 point for having only two cards in spades, and
subtract 1 for having a queen in spaces with only one other card in
spades. The resulting 17 points is enough to justify opening in a
suit.
<P>
The evaluation for <EM>no-trump</EM> is 16 points, since we cannot count
the one point for having only two spades. We cannot open in no-trump,
however, because the hearts suit is not stopped.
<P>
Hence we must open bidding in a suit. The two longest suits are clubs
and diamonds, with four cards each, so the possible outputs are
``<TT>BID C</TT>'',  or ``<TT>BID D</TT>''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
KS QS TH 8H 4H AC QC TC 5C KD QD JD 8D
AC 3C 4C AS 7S 4S AD TD 7D 5D AH 7H 5H</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>BID D
BID NO-TRUMP</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
463||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Polynomial Factorization</TITLE>
<META NAME="description" CONTENT="Polynomial Factorization">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Polynomial Factorization</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A polynomial is of degree k if the largest power of the variable in
any term is no greter than k.  For example, 
<P> <IMG WIDTH=293 HEIGHT=17 ALIGN=BOTTOM ALT="displaymath25" SRC="http://uva.onlinejudge.org/external/4/463img1.gif"   > <P>
is of degree 2.  It is also of degree 3, 4, 5, ...
<P>
A polynomial with integer coefficients is &quot;prime&quot; if it cannot be
expressed as the product of two lower-degree polynomials with integer
coefficients.
<P>
<P>
Write a program to express a 4th degree polynomial with integer
coefficients as the product of one or more prime polynomials.
<P>
The sample below tell us that the polynomial  <IMG WIDTH=181 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/4/463img1.gif"   > 
has prime factors <I>x</I>-1, 2<I>x</I>+1 and  <IMG WIDTH=86 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="http://uva.onlinejudge.org/external/4/463img1.gif"   > .
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists on several test cases, one on each line. Each test case consists on 5 integers, representing the coefficients of a degree 4 polynomial in
decreasing order of the variable power from 4 to 0. The first number will never be negative or 0.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each test case, print the integer coefficients of each prime factor on a single line,
in decreasing order of variable power. The first coefficient of prime polynomials should be positive, except maybe in the last polynomial on the list. The polynomials must be printed in increasing order of degree, and when two or more degrees match they must be sorted by increasing value of coefficients from the greatest to the lowest degree. Extra factors should be added to the last polynomial on the list.
Print a blank line after each test case.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2 7 -1 -6 -2
2 0 0 0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 -1
2 1
1 4 2

1 0
1 0
1 0
2 0

</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
464||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Sentence/Phrase Generator</TITLE>
<META NAME="description" CONTENT="Sentence/Phrase Generator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Sentence/Phrase Generator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that generates English language phrases and sentences
conforming to the following rules:
<TT>
  <P> 
&lt;sentence&gt; ::= &lt;trans-sentence&gt; | &lt;sentence&gt; ::= &lt;intrans-sentence&gt; <BR> 
    &lt;trans-sentence&gt; ::= &lt;subject&gt; &lt;verb-phrase&gt; &lt;object&gt; &lt;prep-phrase&gt; <BR> 
    &lt;intrans-sentence&gt; ::= &lt;subject&gt; &lt;intrans-verb-phrase&gt;
                 &lt;prep-phrase&gt; <BR> 
    &lt;subject&gt; ::= &lt;noun-phrase&gt; <BR> 
    &lt;object&gt; ::= &lt;noun-phrase&gt; <BR> 
    &lt;noun-phrase&gt; ::= &lt;article&gt; &lt;modified-noun&gt; <BR> 
    &lt;modified-noun&gt; ::= &lt;noun&gt; | &lt;modifier&gt; &lt;noun&gt; <BR> 
    &lt;modifier&gt; ::= &lt;adjective&gt; | &lt;adverb&gt; &lt;adjective&gt; <BR> 
    &lt;verb-phrase&gt; ::= &lt;trans-verb&gt; | &lt;adverb&gt; &lt;trans-verb&gt; <BR> 
    &lt;intrans-verb-phrase&gt; ::= &lt;intrans-verb&gt; | &lt;adverb&gt;
             &lt;intrans-verb&gt; <BR> 
    &lt;prep-phrase&gt; ::= &lt;preposition&gt; &lt;noun-phrase&gt; | &lt;empty&gt; <BR> 
    &lt;noun&gt; ::= man | dog | fish | computer | waves <BR> 
    &lt;trans-verb&gt; ::= struck | saw | bit | took <BR> 
    &lt;intrans-verb&gt; ::= slept | jumped | walked | swam <BR> 
    &lt;article&gt; ::= the | a <BR> 
    &lt;adjective&gt; ::= green | small | rabid | quick <BR> 
    &lt;adverb&gt; ::= nearly | suddenly | restlessly <BR> 
    &lt;preposition&gt; ::= on | over | through <BR> 
    &lt;empty&gt; ::= &quot;&quot;
  <P>
<P>
</TT>
For example, the first two lines say that to generate a sentence, one
may generate a ``trans-sentence'' or an
``intrans-sentence''. A transitive sentence, according to the
third rule, consists of a ``subject'', followed by a ``verb-phrase'', followed
by an ``object'', followed by a ``prep-phrase''. Similarly, the
next-to-last rule indicates that a ``preposition'' can be any of the
three words <TT>on</TT>, <TT>over</TT>, or <TT>through</TT>.
<P>
<P>
Your program should read from the input a number of requests for
various kinds of phrases. Each request may be for any of the phrase
names appearing on the left hand side of the above rules. It should
then attempt to generate the requested phrase by applying these rules
until all of the <TT>&lt;...&gt;</TT> have been replaced with appropriate
words.
<P>
<P>
In many cases, you will face a choice of alternate rules for expanding
a phrase name. In these cases, you should make a choice as follows: 
Suppose that this is the  <IMG WIDTH=21 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline34" SRC="http://uva.onlinejudge.org/external/4/464img1.gif"   >  such choice that you have faced
since the start of execution of your program, and that you must choose
one of <I>n</I> rules for expanding a given kind of phrase.  Let the rules
for that phrase be numbered from  <IMG WIDTH=44 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/4/464img1.gif"   >  in the order of
appearance above, and then choose rule number  <IMG WIDTH=103 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/4/464img1.gif"   > .
<P>
</TT><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input will consist of an unspecified number of lines. Each line
will contain, left-justified, a phrase name corresponding to one of
the names appearing on the left-hand-side of the rules above (without
the surrounding brackets).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each phrase named in the output, print a single line containing
the expansion of that phrase according to the above rules. Each word
in the phrase should be separated from the others by a single space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>sentence
noun
sentence</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>the small dog restlessly jumped through the quick dog
fish
a dog took the quick computer</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
465||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Overflow</TITLE>
<META NAME="description" CONTENT="Overflow">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Overflow</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that reads an expression consisting of two
non-negative integer and an operator. Determine if either integer or
the result of the expression is too large to be represented as a
``normal'' signed integer (type <TT>integer</TT> if you are working
Pascal, type <TT>int</TT> if you are working in C).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
An unspecified number of lines. Each line will contain an integer, one
of the two operators <TT>+</TT> or <TT>*</TT>, and another integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each line of input, print the input followed by 0-3 lines
containing as many of these three messages as are appropriate: ``<TT>first
number too big</TT>'', ``<TT>second number too big</TT>'', ``<TT>result too big</TT>''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>300 + 3
9999999999999999999999 + 11</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>300 + 3
9999999999999999999999 + 11
first number too big
result too big</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
466||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Mirror, Mirror</TITLE>
<META NAME="description" CONTENT="Mirror, Mirror">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Mirror, Mirror</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
A square pattern of light and dark cells is shown in its original
state and a transformed state. Write a program that will recognize the
minimum transformation that has been applied to the original pattern
given the following list of possible transformations:
<P>
<DL ><DT><STRONG>90 Degree Rotation:</STRONG>
<DD> The pattern was rotated to the right 90 degrees.
  <DT><STRONG>180 Degree Rotation:</STRONG>
<DD> The pattern was rotated to the right 180 degrees.
  <DT><STRONG>270 Degree Rotation:</STRONG>
<DD> The pattern was rotated to the right 270 degrees.
  <DT><STRONG>Vertical Reflection:</STRONG>
<DD> The pattern was reflected through a
horizontal mirror positioned above the pattern.
  <DT><STRONG>Combination:</STRONG>
<DD> The pattern was subjected to a vertical
reflection <EM>followed</EM> by one of the rotations.
  <DT><STRONG>Preservation:</STRONG>
<DD> The original pattern was preserved (the new
pattern is identical to the original).
  <DT><STRONG>Improper:</STRONG>
<DD> The new pattern was not obtained via any of these treansformations.
<P>
 </DL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of an unknown number of pattern datasets
on the standard input. Each pattern dataset will consist of an integer
on a line by itself, which gives the dimensions of the square
containing the pattern (the size will range from 1 to 10). The
following lines will contain each line of the original and new
(transformed) patterns in a side-by-side format, separated by a space.
Light squares will be indicated by a dot (period), while dark squares
will be represented with an <TT>X</TT>.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output from your program will be a sentence describing the
relationship that the new pattern bears to the original.  Each
sentence will begin with a pattern ID number (starting with 1) and end
stating the relatinship representing the minimal amount of work
necessary to derive the new pattern from the original. For the purpose
of evaluating the amount of work needed, rotations are considered less
work than reflections, and smaller rotations are less work than larger
ones. Of course, ``preservation'' involves no work at all.
<P>
<P>
Note that only the above possibilities should be considered -- there
is no such thing as a ``360 degree rotation'' for this problem (such a
transformation would ``preserve'' the pattern), nor is there a
``horizontal reflection''. Also, remember that when a single rotation
or reflection is not sufficient, your program should next consider
rotated versions after a vertical reflection. Although a combination
transformation might yield the same new pattern as one of the single
transformations alone, the single transformation is the one you should
output (the minimal transformation).  Your output should be a complete
sentence, ending with a period.
<P>
<P>
Look at the sample output below for the exact format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
X...X ....X 
.X... ...X.
...X. .X...
..X.X ..X..
....X XX..X
6
....XX X....X
...X.. X.X...
XX..X. .X..X.
..X... ...X.X
...X.. ..X...
..X..X ..X...
2
X. X.
.X .X
4 
..X. ...X
XX.. ....
.... XX..
...X ..X.
5
X.... .X...
.X... ..X..
.X... ..X..
...X. ....X
....X X....
4
.X.. ..X.
.X.X X...
.... ..XX
..X. ....
2
.. XX
XX ..</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Pattern 1 was rotated 90 degrees.
Pattern 2 was rotated 270 degrees.
Pattern 3 was preserved.
Pattern 4 was reflected vertically.
Pattern 5 was improperly transformed.
Pattern 6 was reflected vertically and rotated 270 degrees.
Pattern 7 was rotated 180 degrees.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
467||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Synching Signals</TITLE>
<META NAME="description" CONTENT="Synching Signals">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Synching Signals</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
On your way to work wach morning you travel down a main traffic artery
regulated by a number of traffic signals. On some mornings, you have
noticed that all of the lights up ahead simultaneously turn green in
your direction. But on other mornings, it seems that a random
combination of red, yellow, and green is facing you.
<P>
<P>
After recently observing all of the lights ahead of you turn green
simultaneously, you began to wonder how long after any one of
them turns to yellow it would take before they
all would be displaying green in your direction again. Write a program
to figure out how long it will take such a set of traffic signals to
all be displaying green again,  given the cycle times for each traffic
signal in the set.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of an unknown number of
traffic signal datasets. Each signal dataset will consist of one line
of integers (separated by spaces) giving the total cycle time (in
seconds) for each signal. The <EM>cycle time</EM> is the total time that
a signal will stay green and yellow in one direction and red in the
opposite direction. In this problem, you may assume that a green
signal will turn yellow for the last 5 seconds of its cycle. If one
set of signals was given as:
<P> <IMG WIDTH=280 HEIGHT=13 ALIGN=BOTTOM ALT="displaymath27" SRC="http://uva.onlinejudge.org/external/4/467img1.gif"   > <P>
your program would need to recognize that there are three signals in
the set, that the first signal lasts 30 seconds, that the second
signal cycles every 25 seconds, and that the thirs signal takes 35
seconds to start a new cycle. Specifically, the first signal will be
red for 30 seconds in one direction, then green for 25 seconds, then
yellow for 5.
<P>
Each set of signals will involve at least two and as many as 10
signals. Each signal will have a minimum cycle time of 10 seconds and
a maximum cycle time of 90 seconds.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your output will consist of a summary line for each
set of signals.  Your program should assign an ID number to each set
of signals, beginning with set 1.  The output line will begin with
the signal set ID number and state the number of minutes ( <IMG WIDTH=35 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline29" SRC="http://uva.onlinejudge.org/external/4/467img1.gif"   > )
and seconds (&lt; 60)
it will take from when all of the signals simultaneously turn green
initially to the first time they will all be showing green again in
your direction after any of them has turned yellow. Note that this
time may or may not be a time when all of the signals in the set
simultaneously change back to green -- for this problem you need only
indicate how long it will be before all signals in the set are once
again simultaneously <EM>showing</EM> green in your direction after any
of them has turned to yellow, even if this condition will only exist
for a second or a very few seconds.
<P>
If the signals will never
simultaneously display green in your direction again within an hour,
you should print a message that states that the signals in the set are
not able to synchronize after one hour (note that an output of 60
minutes and 0 seconds should, however, be considered a successful
synchronization).
<P>
<P>
Look at the sample output below for the exact format.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>30 25 35
25 25 25 25 25
15 30
20 21 30 23 29 25 27 22
19 20</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Set 1 synchs again at 5 minute(s) and 0 second(s) after all turning green.
Set 2 synchs again at 0 minute(s) and 50 second(s) after all turning green.
Set 3 synchs again at 1 minute(s) and 0 second(s) after all turning green.
Set 4 is unable to synch after one hour.
Set 5 synchs again at 0 minute(s) and 40 second(s) after all turning green.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
468||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Key to Success</TITLE>
<META NAME="description" CONTENT="Key to Success">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Key to Success</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
Any one-to-one mapping, <I>f</I>, of any alphabet to itself can be
used to encode text by replacing each occurrence of any letter, <I>c</I>, with
<I>f</I>(<I>c</I>).
One such mapping could be the mapping of a letter to
three positions beyond the letter in the alphabet.
That is,  <IMG WIDTH=44 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   > ,  <IMG WIDTH=41 HEIGHT=13 ALIGN=BOTTOM ALT="tex2html_wrap_inline37" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   > ,  <IMG WIDTH=44 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   > ,  <IMG WIDTH=43 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   >  and so on.
<P>
With this mapping, 
``<TT>The car is blue</TT>'' will be encoded as ``<TT>Wkh fdu lv eoxh</TT>''.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<p>The input begins with a single positive integer on a line by itself
indicating the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.</p>
<P>
Your correct program should decodes the contents of each input set according
to the following guidelines:
<OL><LI> Only letters are encoded. Letters are mapped to letters.
Uppercase letters are different from their lowercase counter parts.<LI> The mapping that defines the encoding is one-to-one.  That
is, two different letters never map to the same letter of the
alphabet ( <IMG WIDTH=44 HEIGHT=10 ALIGN=BOTTOM ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   >  and  <IMG WIDTH=43 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/4/468img1.gif"   >  is impossible).<LI> There are two input lines -
the first one contains a text (not encoded) and
the second one contains an encoded text.
This text is to be decoded by your program.<LI> Both lines are written by the same person.<LI> 
It is to be assumed that any
person uses letters of the alphabet with the same <B>RELATIVE
FREQUENCY</B> from document to document and no two letters are
used with the same frequency.
That is, the most frequently used letter in the first line maps to the most frequently used letter in the second one; the second most frequently used letter maps to the second most frequently used letter and so on.
</OL>
<p>&nbsp;The outputs of two consecutive cases will be separated by a blank line.</p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Intput</A></FONT></H2>
<P>
<PRE>1

abacxbacac
qqqqqrrrrssstt</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>aaaaaccccbbbxx</PRE>
</BODY>
</HTML>

______________________________________________________
469||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Wetlands of Florida</TITLE>
<META NAME="description" CONTENT="Wetlands of Florida">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Wetlands of Florida</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
A construction company owns a large piece of real estate within the state
of Florida.
Recently, the company decided to develop this property.
Upon inspection of the property, however, it was revealed that the
land, at various locations, contained bodies of water.
This came as a shock to the owners of the company, for they were from
out of state and not familiar with wetlands of Florida.
The situation was very grave and the owners
not knowing that such bodies of water can be converted to beautiful lakes
that will increase the value of the land around them, were about to abandon the
construction project. Fortunately, this fact was brought to the owners'
attention by a smart FIU graduate who worked for the company and consequently
the construction project started.
<P>
<P>
The engineers divided the construction site by a grid into uniform square
cells such that each square cell entirely contained either
water or land. (How they did it, of course, is anybody's guess.)
Now, the question that the engineers are to answer is the following:
``Given the row and column number of a grid cell that contains water, what is the area of the
lake containing that cell.'' (an area is measured by number of grid cells it contains. Diagonal cells are considered to be adjacent.)
<P>
<P>
You are to write a program to answer this question!
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<p>The input begins with a single positive integer on a line by itself
indicating the number of the cases following, each of them as described below.
This line is followed by a blank line, and there is also a blank line between
two consecutive inputs.</p>
<P>
Each input set consists of  <IMG WIDTH=81 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline40" SRC="http://uva.onlinejudge.org/external/4/469img1.gif"   >  lines each containing
 <IMG WIDTH=86 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline42" SRC="http://uva.onlinejudge.org/external/4/469img1.gif"   >  character long sequence of ``<TT>L</TT>''s and ``<TT>W</TT>''s
followed by <I>k</I> &gt; 0 lines each containing a pair of integers <EM>i</EM> and <EM>j</EM>.
The first <I>n</I> lines will represent the  <IMG WIDTH=46 HEIGHT=18 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/4/469img1.gif"   >  grid covering the land where a ``<TT>W</TT>''/``<TT>L</TT>''
at the  <IMG WIDTH=19 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/4/469img1.gif"   >  character of the  <IMG WIDTH=19 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline52" SRC="http://uva.onlinejudge.org/external/4/469img1.gif"   >  line indicates water/land within the cell at row
<EM>r</EM> and column <EM>c</EM> of the grid.
The pairs of integers on the last <EM>k</EM> lines, each represent the row and column numbers of
some grid cell that contains water.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<p>For each test case, the output must follow the description below. The outputs
of two consecutive cases will be separated by a blank line.</p>
<P>
The output for each pair of integers, <EM>i</EM> and <EM>j</EM>, on the last <I>k</I> lines of input, 
consists of an integer, on a separate line, indicating the area of the lake containing the grid cell,
at row <EM>i</EM> and  column <EM>j</EM> of the grid.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<PRE>1

LLLLLLLLL
LLWWLLWLL
LWWLLLLLL
LWWWLWWLL
LLLWWWLLL
LLLLLLLLL
LLLWWLLWL
LLWLWLLLL
LLLLLLLLL
3 2
7 5</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
12
4
</PRE>
</BODY>
</HTML>

______________________________________________________
470||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Nasty Virus</TITLE>
<META NAME="description" CONTENT="Nasty Virus">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Nasty Virus</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Our programmers have been recently experiencing a strange phenomenon.
Some old FORTRAN programs that have been working for years suddenly stopped working!!
A close inspection of the situation revealed the existence of a nasty virus in our computer.
The virus wakes up every night, and adds random lines,
some of them valid FORTRAN statements, to all FORTRAN programs.
(The existing lines are not changed.)
Furthermore, it was discovered that:
<UL><LI> the virus may insert lines <B>ONLY BEFORE</B> the last line and after the first line;<LI> the virus may insert an assignment to a variable ``<I>v</I>'' in one of two ways:
<OL><LI> The original program does not contain any assignment to ``<I>v</I>'' - in this case the new assignment to ``<I>v</I>'' can be inserted anywhere in the original program. (before the last line)<LI>
The original program does contain one or more assignments to ``<I>v</I>'' - in this case the new assignment to ``<I>v</I>'' can be inserted only after the last assignment to ``<I>v</I>'' in the original program. (before the last line)
</OL></UL>
<P>
You are to write a program that will read one corrupted FORTRAN program and restores the program
to its original state.
<P>
<P>
Fortunately, the original FORTRAN programs compute values of certain functions by using
ONLY assignment statements where the right-hand side
expression of each assignment statement is an expression over the operators: <TT>+</TT>, <TT>*</TT>, <TT>/</TT>, <TT>-</TT> and
operands {<TT>a</TT>, <TT>b</TT>, ... <TT>y</TT>, <TT>z</TT>, <TT>0</TT>, <TT>1</TT>, ... <TT>9</TT>}.
<P>
Furthermore, our programs contained <B>NO USELESS</B> assignment statements
(an assignment to a variable, <I>v</I>, is useless if the value of <I>v</I> is not consequently used in the program) and the last assignment statement of the program computed the value of the desired
function.
<P>
Also, our smart programmers always start their program by a line of comment, &quot;<TT>C</TT><I>n</I>&quot;, where <I>n</I> is the number of lines (not counting the comment line itself) contained in the program.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input consists of one possible corrupted FORTRAN program containing only assignment statement as described above.
<P>
<P>
The output, consists of the corrupted FORTRAN program in its original state.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>C5
      x=5+6
      a=x+7
      LLWWLLWLL
      d=x+7
      if (x-a)10,3,2
      c=x+b
      e=2*x
      a=x*7
      kljhkjh kjhkjhk kjh
      y=x*a+c+d</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>C5
      x=5+6
      a=x+7
      d=x+7
      c=x+b
      y=x*a+c+d</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
471||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Magic Numbers</TITLE>
<META NAME="description" CONTENT="Magic Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Magic Numbers</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
Write a program that finds and displays all pairs of
integers  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  and  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >   such that:
<OL><LI> neither  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  nor  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  have any digits repeated; and<LI>  <IMG WIDTH=77 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline36" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   > , where <I>N</I> is a given integer;
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input file consist a integer at the beginning indicating the number of test
case followed by&nbsp; a blank line. Each test case consists of one line of input containing <I>N</I>. Two
input are separated by a blank line.
<P>
For each input the output consists of a sequence of zero or more lines each containing  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline28" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  <TT>/</TT>  <IMG WIDTH=13 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline30" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  <TT>=</TT> <I>N</I>, where
 <IMG WIDTH=37 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline48" SRC="http://uva.onlinejudge.org/external/4/471img1.gif"   >  and <I>N</I> are the integers described above. When there are two or more solutions, sort them by increasing numerator values.
Two consecutive output set will separated by a blank line.&nbsp;
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

1234567890</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1234567890 / 1 = 1234567890
2469135780 / 2 = 1234567890
4938271560 / 4 = 1234567890
6172839450 / 5 = 1234567890
8641975230 / 7 = 1234567890
9876543120 / 8 = 1234567890</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
472||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Simultaneous Equations</TITLE>
<META NAME="description" CONTENT="Simultaneous Equations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Simultaneous Equations</A></FONT>&nbsp;</B></TABLE></CENTER></H1-->
<P>
Write a program that will solve a <I>n</I> by <I>n</I> system of simultaneous equations where the coefficients
of the equations are complex numbers.
(Recall that a complex number is an imaginary number of the form  <IMG WIDTH=90 HEIGHT=30 ALIGN=MIDDLE ALT="tex2html_wrap_inline38" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   > , where <I>a</I> and
<I>b</I> are real numbers.)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Input contains several datasets, each separated by an empty line. Each dataset consists of  <IMG WIDTH=82 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline44" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   >  lines each containing
<I>n</I>+1 complex numbers in the form (<I>a</I>,<I>b</I>).
The  <IMG WIDTH=104 HEIGHT=32 ALIGN=MIDDLE ALT="tex2html_wrap_inline50" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   > , complex number at line <I>i</I> is the coefficient of the  <IMG WIDTH=22 HEIGHT=32 ALIGN=MIDDLE ALT="tex2html_wrap_inline54" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   >  unknown in
the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   >  equation and the last complex number at line <I>i</I> represents
the right-hand side of the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   >  equation.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for each dataset consists of <I>n</I> lines containing pairs of the form (<I>a</I>,<I>b</I>).
The pair on line <I>i</I> of output represents the  <IMG WIDTH=17 HEIGHT=15 ALIGN=BOTTOM ALT="tex2html_wrap_inline56" SRC="http://uva.onlinejudge.org/external/4/472img1.gif"   >  root of the input system of equations. Each pair is to be printed in parenthesis with numbers accurately rounded to one digit to the right of the decimal point, as the sample below. In case the input system of equations can not be uniquely solved, your program should produce the sentence ``<TT>No solution</TT>&quot; as output.
<P> Print a blank line between datasets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>(1,0) (2,0) (3,0) (14,0)
(2,0) (3,0) (4,0) (20,0)
(3,0) (4,0) (4,0) (23,0)

(1,0) (2,0) (3,0) (4,0)
(2,0) (4,0) (6,0) (8,0)
(3,0) (4,0) (5,0) (26,0)</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>(1.0,0.0)
(2.0,0.0)
(3.0,0.0)

No solution</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
473||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Raucous Rockers</TITLE>
<META NAME="description" CONTENT="Raucous Rockers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Raucous Rockers</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You just inherited the rights to <I>n</I> previously unreleased songs recorded by the popular group Raucous Rockers.
You plan to release a set of <I>m</I> compact disks with a selection
of these songs.
Each disk can hold a maximum of <I>t</I> minutes of music, and a song can not overlap from one disk
to another.
Since you are a classical music fan and have no way to judge the artistic
merits of these songs, you decide on the following criteria for making the selection:
<OL><LI> The  songs will be recorded on the set of disks in the order of the dates they were written.<LI>
The total number of songs included will be maximized.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input consists of several datasets. The first line of the input indicates the number of datasets, then there is a blank line and the datasets separated by a blank line. Each dataset consists of a line containing the values of <I>n</I>, <I>t</I> and <I>m</I>
(integer numbers) followed by a line containing a list of the length of <I>n</I> songs,  <IMG WIDTH=81 HEIGHT=23 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/473img1.gif"   >  ordered by
the date they were written (Each  <IMG WIDTH=11 HEIGHT=23 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/4/473img1.gif"   >  is between 1 and t minutes long, both inclusive, and  <IMG WIDTH=119 HEIGHT=27 ALIGN=MIDDLE ALT="tex2html_wrap_inline49" SRC="http://uva.onlinejudge.org/external/4/473img1.gif"   > .)
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
<B>The output</B> for each dataset consists of one integer indicating the number of songs that, following the
above selection criteria will fit on <I>m</I> disks. Print a blank line between consecutive datasets.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
2

10 5 3
3, 5, 1, 2, 3, 5, 4, 1, 1, 5

1 1 1
1
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
6

1
</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
474||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Heads / Tails Probability</TITLE>
<META NAME="description" CONTENT="Heads / Tails Probability">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Heads / Tails Probability</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The probability of <I>n</I> heads in a row tossing a fair coin is 2<SUP>-<I>n</I></SUP>. Calculate
the probability for any positive integer <I>n</I> (
<!-- MATH: $1 \le n \le 1000000$ -->
<IMG
 WIDTH="131" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/4/474img1.gif" 
 ALT="$1 \le n \le 1000000$">).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A list of valid values of <I>n</I> (one per line).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Print a table of <I>n</I> and 2<SUP>-<I>n</I></SUP> in the following for the given values
of <I>n</I>, using the following format:

<br><br>
<tt>2^-</tt><i>n</i><tt> = z.xxxe-</tt><i>y</i>
<br><br>

where <TT>z</TT> is a nonzero decimal digit, each <TT>x</TT> is a decimal digit and
each <i>y</i> is a decimal integer with no leading zeros or spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
100
10000
1000000
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2^-1 = 5.000e-1
2^-100 = 7.889e-31
2^-10000 = 5.012e-3011
2^-1000000 = 1.010e-301030
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-04-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
475||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Wild Thing</TITLE>
<META NAME="description" CONTENT="Wild Thing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Wild Thing</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Command interfaces to modern operating systems often include a number of <EM>metacharacters</EM>
which provide powerful features that allow a user to accomplish a lot of work without resorting to traditional programming. One of the most common metacharacters is a <EM>wildcard</EM> character.
<P>
Wildcard characters are used within filenames to permit the user to generically specify a
group of files that a command should act upon. A wildcard character itself matches zero or
more characters in the same position as the wildcard.
<P>
Suppose a user wanted to print all files ending in <TT>.c</TT>, delete all files beginning with <code>old_</code> , and copy <EM>all</EM> files (no matther what they are named) to a floppy disk. With wildcard metacharacters, all of this can be done using only three commands instead of using a separate command for each file involved. The metacharacter sequences for these commands would be
as follows:
<PRE>*.c
old_*
*</PRE>
<P>
Write a program that will accept an input pattern which may contain wildcard characters
and decide whether or not each of the filenames that follow it matches the pattern.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain a series of datasets. Each dataset will consist of a pattern line
followed by a list of filenames to compare against the pattern. For the purposes of this
program, a filename may consist of any group of one to twenty characters, not including
asterisks. None of these characters should receive special treatment (periods, for example,
should behave as any other characters matched).
<P>
The pattern line may include zero or more wildcard characters. A wildcard character
will be represented by an asterisk (<TT>*</TT>).
<P>
The list of filenames will appear one per line following the pattern line. There will be an
unknown number of filenames in the list.
<P>
All lines of input will be one to twenty characters in length, including the pattern line.
The input file will contain an unknown number of datasets, each separated by a blank line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for this program will be a short report showing the pattern and the filenames
from the subsequent list that match the pattern. Filenames that do not match the pattern
should not be printed out. The results from each input dataset should be separated by one
blank line.
<P>
<P>
See the example for the exact format. Notice that ``<TT>MATCHES FOR PATTERN: HELLO</TT>'' was not displayed, because there were no matches in its filename list.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>C*AT
COMFILE.DAT
COST.DATA
CAT
%XCAT
COAT
CATCH

*A*
MOUNTAIN.TXT
ALFRED
PROG1A
SECOND.ED
PROG1A.PAS

HELLO
NOTHING

B**N*
NIBBLE.BIT
BANANA
BNXJ.25
BORN
ABNORMAL.LIS
BRANDISH.SRD
BITNET</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>MATCHES FOR THE PATTERN: C*AT
COMFILE.DAT
CAT
COAT

MATCHES FOR THE PATTERN: *A*
MOUNTAIN.TXT
ALFRED
PROG1A
PROG1A.PAS

MATCHES FOR THE PATTERN: B**N*
BANANA
BNXJ.25
BORN
BRANDISH.SRD
BITNET</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
476||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Points in Figures: Rectangles</TITLE>
<META NAME="description" CONTENT="Points in Figures: Rectangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Points in Figures: Rectangles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a list of rectangles and a list of points in the <I>x</I>-<I>y</I>
plane, determine for each point which figures (if any) contain the point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
There will be <I>n</I>( <IMG WIDTH=34 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline220" SRC="http://uva.onlinejudge.org/external/4/476img1.gif"   > ) rectangles descriptions, one per line. The first character will designate the type of figure (``<TT>r</TT>'' for rectangle). This character will be followed by four real values designating the <I>x</I>-<I>y</I> coordinates of the upper left and lower right corners.
<P>
The end of the list will be signalled by a line containing an asterisk in column one.
<P>
<P>
The remaining lines will contain the <I>x</I>-<I>y</I> coordinates, one per line, of the points to be tested. The end of this list will be indicated by a point with coordinates 9999.9 9999.9; these values
should not be included in the output.
<P>
Points coinciding with a figure border are not considered inside.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each point to be tested, write a message of the form:
<PRE>Point i is contained in figure j</PRE>
for each figure that contains that point. If the point is not contained in any figure, write a
message of the form:
<PRE>Point i is not contained in any figure</PRE>
Points and figures should be numbered in the order in which they appear in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>r 8.5 17.0 25.5 -8.5
r 0.0 10.3 5.5 0.0
r 2.5 12.5 12.5 2.5
*
2.0 2.0
4.7 5.3
6.9 11.2
20.0 20.0
17.6 3.2
-5.2 -7.8
9999.9 9999.9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Point 1 is contained in figure 2
Point 2 is contained in figure 2
Point 2 is contained in figure 3
Point 3 is contained in figure 3
Point 4 is not contained in any figure
Point 5 is contained in figure 1
Point 6 is not contained in any figure</PRE>
<P>
<center><img src=476img2.gif></center>
<P>
Diagrama of sample input figures and data points
<P>
</BODY>
</HTML>

______________________________________________________
477||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Points in Figures: Rectangles and Circles</TITLE>
<META NAME="description" CONTENT="Points in Figures: Rectangles and Circles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Points in Figures: Rectangles and Circles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a list of figures (rectangles and circles) and a list of points in the <I>x</I>-<I>y</I> plane, determine for each point which figures (if any) contain the point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
There will be <I>n</I>( <IMG WIDTH=34 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline232" SRC="http://uva.onlinejudge.org/external/4/477img1.gif"   > ) figures descriptions, one per line. The first character will designate the type of figure (``<TT>r</TT>'', ``<TT>c</TT>'' for rectangle or circle, respectively). This character
will be followed by values which describe that figure.
<UL><LI> For a rectangle, there will be four real values designating the <I>x</I>-<I>y</I> coordinates of the upper left and lower right corners.<LI> For a circle, there will be three real values, designating the <I>x</I>-<I>y</I> coordinates of the center and the radius.
</UL>
<P>
The end of the list will be signalled by a line containing an asterisk in column one.
<P>
<P>
The remaining lines will contain the <I>x</I>-<I>y</I> coordinates, one per line, of the points to be tested. The end of this list will be indicated by a point with coordinates 9999.9 9999.9; these values
should not be included in the output.
<P>
Points coinciding with a figure border are not considered inside.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each point to be tested, write a message of the form:
<PRE>Point i is contained in figure j</PRE>
for each figure that contains that point. If the point is not contained in any figure, write a
message of the form:
<PRE>Point i is not contained in any figure</PRE>
Points and figures should be numbered in the order in which they appear in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>r 8.5 17.0 25.5 -8.5
c 20.2 7.3 5.8
r 0.0 10.3 5.5 0.0
c -5.0 -5.0 3.7
r 2.5 12.5 12.5 2.5
c 5.0 15.0 7.2
*
2.0 2.0
4.7 5.3
6.9 11.2
20.0 20.0
17.6 3.2
-5.2 -7.8
9999.9 9999.9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Point 1 is contained in figure 3
Point 2 is contained in figure 3
Point 2 is contained in figure 5
Point 3 is contained in figure 5
Point 3 is contained in figure 6
Point 4 is not contained in any figure
Point 5 is contained in figure 1
Point 5 is contained in figure 2
Point 6 is contained in figure 4</PRE>
<P>
<center><img src=477img2.gif></center>
<P>
Diagrama of sample input figures and data points
<P>
</BODY>
</HTML>

______________________________________________________
478||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Points in Figures: Rectangles, Circles, and Triangles</TITLE>
<META NAME="description" CONTENT="Points in Figures: Rectangles, Circles, and Triangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Points in Figures: Rectangles, Circles, and Triangles</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Given a list of figures (rectangles, circles, and triangles) and a list of points in the <I>x</I>-<I>y</I> plane, determine for each point which figures (if any) contain the point.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
There will be n(ÂŸ 10) figures descriptions, one per line. The first character will designate
the type of figure (``<TT>r</TT>'', ``<TT>c</TT>'', ``<TT>t</TT>'' for rectangle, circle, or triangle, respectively). This character will be followed by values which describe that figure.
<UL><LI> For a rectangle, there will be four real values designating the <I>x</I>-<I>y</I> coordinates of the
upper left and lower right corners.<LI> For a circle, there will be three real values, designating the <I>x</I>-<I>y</I> coordinates of the center
and the radius.<LI> For a triangle, there will be six real values designating the <I>x</I>-<I>y</I> coordinates of the
vertices.
</UL>
The end of the list will be signalled by a line containing an asterisk in column one.
<P>
<P>
The remaining lines will contain the <I>x</I>-<I>y</I> coordinates, one per line, of the points to be tested. The end of this list will be indicated by a point with coordinates 9999.9 9999.9; these values should not be included in the output.
<P>
Points coinciding with a figure border are not considered inside.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each point to be tested, write a message of the form:
<PRE>Point i is contained in figure j</PRE>
for each figure that contains that point. If the point is not contained in any figure, write a
message of the form:
<PRE>Point i is not contained in any figure</PRE>
Points and figures should be numbered in the order in which they appear in the input.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>r 8.5 17.0 25.5 -8.5
c 20.2 7.3 5.8
t -1.0 -1.0 10.1 2.2 .4 1.4
r 0.0 10.3 5.5 0.0
c -5.0 -5.0 3.7
t 20.3 9.8 10.0 -3.2 17.5 -7.7
r 2.5 12.5 12.5 2.5
c 5.0 15.0 7.2
t -10.0 -10.0 10.0 25.0 30.0 -10.0
*
2.0 2.0
4.7 5.3
6.9 11.2
20.0 20.0
17.6 3.2
-5.2 -7.8
9999.9 9999.9</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Point 1 is contained in figure 4
Point 1 is contained in figure 9
Point 2 is contained in figure 4
Point 2 is contained in figure 7
Point 2 is contained in figure 9
Point 3 is contained in figure 7
Point 3 is contained in figure 8
Point 3 is contained in figure 9
Point 4 is not contained in any figure
Point 5 is contained in figure 1
Point 5 is contained in figure 2
Point 5 is contained in figure 6
Point 5 is contained in figure 9
Point 6 is contained in figure 5
Point 6 is contained in figure 9</PRE>
<P>
<center><img src=478img2.gif></center>
<P>
Diagrama of sample input figures and data points
<P>
</BODY>
</HTML>

______________________________________________________
479||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Irrigation Flow Rates</TITLE>
<META NAME="description" CONTENT="Irrigation Flow Rates">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Irrigation Flow Rates</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Mishawaka Irrigation company builds custom designed pipeline irrigation systems for farmers and ranchers. One such irrigation system is shown below (it matches the first dataset in the example input, where flow rates are 200, 40 and 74):
<P>
<center><img src=479img2.gif></center>
<P>
For the above example, three wells provide water for the irrigation system and a variety of valve settings  are used to control the amount of water that is delivered to each of the three sprinkler systems. Furthermore, the flow of water occurs only in the
direction indicated by the arrows. Each valve can be set to the right (in which case all the
water is diverted to the right), or to the left (in which case all the water is diverted to the left).
<P>
Given a sprinkler system configuration and each well's corresponding flow rate (in gallons/minute), your program should determine, for different valve settings, the output flow rates that are being delivered to each sprinkler systems.
<P>
<P>
<P>
<B>NOTE:</B> You should program for generality (i.e., do not make any assumptions concerning the number of water wells, flow
valve settings, or sprinkler heads. Also do not make assumptions about the names of the components).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of multiple data sets; each data set is terminated by an asterisk (<TT>*</TT>)
on a line by itself. Each data set will consist of an irrigation network description (see table 1)
followed by one or more flow valve setting records (see table 2). Each flow valve setting record
consists of a sequence of <TT>L</TT>'s and <TT>R</TT>'s, one for each valve described in the irrigation network
description. The datasets are separated by lines containing only an asterisk (<TT>*</TT>) in column one.
<P>
End of data is marked by a terminal record containing the values of 9999 for #ofWells, #ofSprinklers, and #ofValves.
<P>
<P><A NAME="124">&#160;</A><BR>
<STRONG>Table:</STRONG> Input (in table form) for Irrigation Network Description<BR>
<P>
<P>
<P><A NAME="133">&#160;</A> <IMG WIDTH=110 HEIGHT=18 ALIGN=BOTTOM ALT="table126" SRC="http://uva.onlinejudge.org/external/4/479img4.gif"   > <BR>
<STRONG>Table:</STRONG> Input (in table form) for Valve Settings<BR>
<P><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each set of valve settings of each irrigation network, your program should output a
message of the following form:
<P>
<P>
<TT>Sprinkler #<I>i</I> flow is <I>n</I> gallons/min</TT>
<P>
<P>
Label the output for each irrigation network according to the order in which it was inputted (see the example below). Label the outputs for the valve settings in the order in which they were read in for each irrigation network. See the example for the exact format of the output headings and spacing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 3 7
200 40 73
W1 V1
W2 V2
W3 V3
S1
S2
S3
V1 S1 V4
V2 V4 V5
V3 V5 V7
V4 S1 V6
V5 V6 V7
V6 S1 V7
V7 S2 S3
R L R L R L R
L R L R L R L
*
2 4 5
100 200
WELL1 VALVE1
WELL2 VALVE2
SPR1
SPR2
SPR3
SPR4
VALVE1 VALVE3 VALVE4
VALVE2 VALVE4 VALVE5
VALVE3 SPR1 SPR2
VALVE4 SPR2 SPR3
VALVE5 SPR3 SPR4
R L R L R
L L L R L
L R L R L
*
9999 9999 9999</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Irrigation network #1
Valve settings #1
Sprinkler #1 flow is 240 gallons/min
Sprinkler #2 flow is 0 gallons/min
Sprinkler #3 flow is 73 gallons/min
Valve settings #2
Sprinkler #1 flow is 200 gallons/min
Sprinkler #2 flow is 113 gallons/min
Sprinkler #3 flow is 0 gallons/min
Irrigation network #2
Valve settings #1
Sprinkler #1 flow is 0 gallons/min
Sprinkler #2 flow is 300 gallons/min
Sprinkler #3 flow is 0 gallons/min
Sprinkler #4 flow is 0 gallons/min
Valve settings #2
Sprinkler #1 flow is 100 gallons/min
Sprinkler #2 flow is 0 gallons/min
Sprinkler #3 flow is 200 gallons/min
Sprinkler #4 flow is 0 gallons/min
Valve settings #3
Sprinkler #1 flow is 100 gallons/min
Sprinkler #2 flow is 0 gallons/min
Sprinkler #3 flow is 200 gallons/min
Sprinkler #4 flow is 0 gallons/min</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
480||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tempus Fugit</TITLE>
<META NAME="description" CONTENT="Tempus Fugit">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Tempus Fugit</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The owner of a successful small business is so busy that she requires all of her appointments
to be scheduled two weeks in advance. She has contacted you to write a program that
will help her automate this process. Her work week lasts from 9:00am to 5:00pm, Monday
through Friday. She leaves for lunch at 12:30pm and returns at 1:30pm each day.
<P>
During the week, she collects appointment requests for two weeks in advance in the order
that they were made. Your program will process the requests in the same order, effectively
giving priority to those requests that were made the earliest. After running your program,
she will confirm the scheduled appointments and reschedule those appointements that the
program could not arrange for her.
<P>
She asks that your program schedule her appointments in ten-minute blocks that begin
on the hour and at ten, twenty, thirty, forty, and fifty minutes past the hour. Any requests
that do not begin and/or end at these ten-minute points in time must be scheduled between
the ten-minute points which encompass them. For example, an appointment request for
10:15am to 10:30am would be scheduled from 10:10am to 10:30am.
<P>
She also wants your program to insert a ten minute break after each scheduled appointment so that no two appointments occur in immediate succession. The ten-minute break will
occupy the next ten-minute block in her schedule. Ten-minute breaks are not to be added
for appointments which can be scheduled to end at 12:30pm or 5:00pm. No appointment
is permitted to extend into the lunch period, or to be scheduled to begin during the lunch
period. She would like no more than four hours of appointments scheduled on any one day.
When computing the four-hour limit, use the adjusted length of the appointment (do not
use the original request and do not include the ten-minute breaks which follow the adjusted
appointment times). Thus, the appointment request for 10:15am to 10:30am contributes 20
minutes to the four-hour time limit for that day.
<P>
Finally, the owner tells you that if an appointment cannot be scheduled as requested, your
program should attempt to reschedule the appointment at the same time on each successive
day of the week, scheduling it on the first day that it fits: if an appointment cannot be
scheduled at 10:00am on Wednesday, your program should try to schedule it on Thursday at
10:00am, then at Friday at 10:00am if it cannot be scheduled on Thursday (do not attempt
to schedule the appointment earlier in the week or at different times of the day). If your
program cannot schedule the appointment in this manner, the name of the person requesting
the appointment should be added to the list of appointments that could not be scheduled.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of at most 25 appointment requests on a separate line in the
following format:
<P> <IMG WIDTH=355 HEIGHT=16 ALIGN=BOTTOM ALT="displaymath30" SRC="http://uva.onlinejudge.org/external/4/480img1.gif"   > <P>
where the name field occupies the first ten character positions of the request, the day field
occupies the next three character positions, and the remaining two fields each consist of
a pair of integers. The name field will contain ten alphanumeric characters and the day
field will contain one of the three character sequences: <TT>MON</TT>, <TT>TUE</TT>, <TT>WED</TT>, <TT>THU</TT>, or <TT>FRI</TT>.
Following the day will be two times: the starting time of an appointment request, and its
duration. Both times consist of two integers, hours followed by minutes. For example, the
appoint request:
<PRE>Johnstone TUE 09 15 1 30</PRE>
means that Johnstone requests an appointment for the Tuesday of that week starting at
9:15am for one hour and thirty minutes. Since the schedule is in ten-minute blocks, your
program would attempt to schedule the appointment for Tuesday from 9:10am to 10:50am
(adding 1 hour and 40 minutes to the total appointment time on Tuesday).
<P>
Your program
may assume that all fields in an appointment request will contain legitimate data and that
times will be expressed in terms of the maximal number of hours (9:15am will always be 9
15 rather than 8 75 and ninety minutes will always be 1 30 rather than 0 90).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
Your output will consist of a schedule for the week followed by a summary listing the names
of those people whose appointments could not be scheduled during this time. Days with no
scheduled appointments should be noted.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Johnstone TUE 09 15 1 30
Peterson MON 09 00 0 30
McKeever FRI 09 30 1 00
Garzarelli THU 10 45 0 20
Tucker MON 10 00 2 30
Davis MON 02 30 1 00
Corrigan MON 02 00 0 15
Trump WED 01 00 3 00
Logan THU 09 45 1 05
Schulman THU 11 10 0 30</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>APPOINTMENT SCHEDULE FOR THE WEEK
MONDAY
Peterson 9:00 to 9:30
Tucker 10:00 to 12:30
Davis 2:30 to 3:30
TUESDAY
Johnson 9:10 to 10:50
Corrigan 2:00 to 2:20
WEDNESDAY
No Appointments Scheduled
THURSDAY
Garzarelli 10:40 to 11:10
FRIDAY
McKeever 9:30 to 10:30
Schulman 11:10 to 11:40
APPOINTMENTS COULD NOT BE SCHEDULED FOR:
Trump
Logan</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
481||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>What Goes Up</TITLE>
<META NAME="description" CONTENT="What Goes Up">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">What Goes Up</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that will select the longest <EM>strictly</EM> increasing subsequence from a sequence of integers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain a sequence of integers (positive, negative, and/or zero). Each line of the
input file will contain one integer.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for this program will be a line indicating the length of the longest subsequence, a newline, a dash character ('<TT>-</TT>'), a newline, and then the subsequence itself printed with one integer per line. If the input contains more than one longest subsequence, the output file should print the one that occurs last in the input file.
<P>
<P>
Notice that the second 8 was not included -- the subsequence must be strictly increasing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>-7
10
9
2
3
8
8
1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>4
-
-7
2
3
8</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
482||||||false||||||

<!--Converted with LaTeX2HTML 2K.1beta (1.48)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Permutation Arrays</TITLE>
<META NAME="description" CONTENT="Permutation Arrays">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<META NAME="Generator" CONTENT="Microsoft FrontPage 4.0">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="htmlatex.css">

</HEAD>

<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER></h1>
<TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Permutation Arrays</A>&nbsp;</FONT></B></TABLE></CENTER>

<P>
In many computer problems, it is necessary to permute data arrays. That is, the data in an array
must be re-arranged in some specified order. One way to permute arbitrary data arrays is to specify
the permutations with an index array to point out the position of the elements
in the new array.
Let <SPAN CLASS="MATH"><I>x</I></SPAN> be an array that is to be permuted and let <SPAN CLASS="MATH"><I>x'</I></SPAN> be the permuted array.
Then, we have the relationship between <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>x'</I></SPAN> that <!-- MATH
 $x'_{p_i} = x_i$
 -->
<SPAN CLASS="MATH"><I>x'</I><SUB>p<SUB>i</SUB></SUB> = <I>x</I><SUB>i</SUB></SPAN>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<p>Each input set will contain two lines of numbers. The first line will be an index
array <SPAN CLASS="MATH"><I>p</I></SPAN> containing
the integers <SPAN CLASS="MATH">1...<I>n</I></SPAN>, where <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of integers in the list.
The numbers in the first line will have been permuted in some fashion.
The second line will contain a list numbers in floating point format.</p>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, the output must follow the description below. The outputs of
two consecutive cases will be separated by a blank line.
<p>The output for this program will be the list of floating point numbers from the input
set, ordered
according to the permutation array from the input file. The output numbers must be printed one
per line in the same format in which they each appeared in the input file.</p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1

3 1 2
32.0 54.7 -2
</PRE>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>54.7
-2
32.0</pre>

<P>


<P>
<BR><HR>
<ADDRESS>
Miguel Revilla
2001-05-21
</ADDRESS>
</BODY>
</HTML>

______________________________________________________
483||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Word Scramble</TITLE>
<META NAME="description" CONTENT="Word Scramble">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Word Scramble</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that will reverse the letters in each of a sequence of words while preserving the
order of the words themselves.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will consist of several lines of several words. Words are contiguous stretches of
printable characters delimited by white space.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output will consist of the same lines and words as the input file. However, the letters within each word must be reversed.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>I love you.
You love me.
We're a happy family.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>I evol .uoy
uoY evol .em
er'eW a yppah .ylimaf</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
484||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Department of Redundancy Department</TITLE>
<META NAME="description" CONTENT="The Department of Redundancy Department">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">The Department of Redundancy Department</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Write a program that will remove all duplicates from a sequence of integers and print the list of
unique integers occuring in the input sequence, along with the number of occurences of each.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input file will contain a sequence of integers (positive, negative, and/or zero). The input file may be arbitrarily long.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output for this program will be a sequence of ordered pairs, separated by newlines. The first element of the pair must be an integer from the input file. The second element must be the number of times that that particular integer appeared in the input file. The elements in each pair are to be
separated by space characters. The integers are to appear in the order in which they were contained in the input file.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3 1 2 2 1 3 5 3 3 2</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>3 4
1 2
2 3
5 1</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
485||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pascal's Triangle of Death</TITLE>
<META NAME="description" CONTENT="Pascal's Triangle of Death">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pascal's Triangle of Death</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In this problem, you are asked to generate Pascal's Triangle. Pascal's Triangle is useful in many
areas from probability to polynomials to programming contests. It is a triangle of integers with
``1'' on top and down the sides. Any number in the interior equals the sum of the two numbers
above it. For example, here are the first 5 rows of the triangle.
<P>
<P>
<TT>1</TT> <BR> 
<TT>1 1</TT> <BR> 
<TT>1 2 1</TT> <BR> 
<TT>1 3 3 1</TT> <BR> 
<TT>1 4 6 4 1</TT>
<P>
<P>
In ``Pascal's Triangle of Death,'' you are to generate a <B>left justified</B> Pascal's Triangle. When any
number in the triangle is exceeds or equals 10<sup>60</sup>, your program should finish printing the
current row and exit. The output should have each row of the triangle on a separate line with one
space between each element.
<P>
The final element of each line should be directly followed by a
newline. There is no space after the last number on each line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Sample Input</A></FONT></H2>
<P>
There is no input for this problem.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
.
.
.</PRE>
etc.
<P>
</BODY>
</HTML>

______________________________________________________
486||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>English-Number Translator</TITLE>
<META NAME="description" CONTENT="English-Number Translator">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">English-Number Translator</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In this problem, you will be given one or more integers in English. Your task is to translate these
numbers into their integer representation. The numbers can range from negative 999,999,999 to
positive 999,999,999. The following is an exhaustive list of English words that your program
must account for:
<PRE>negative, zero, one, two, three, four, five, six, seven, eight, nine, ten,
eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen,
twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety, hundred,
thousand, million</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Notes on input:
<OL><LI> Negative numbers will be preceded by the word negative.
<LI> The word ``hundred'' is not used when ``thousand'' could be. For example, 1500 is written
``one thousand five hundred'', <B>not</B> ``fifteen hundred''.
<!--LI> The words ``hundred,'' ``thousand,'' and ``million'' are always immediately preceded by a word
indicating the numbers one through nine, inclusive.-->
</OL>
<P>
<P>
The answers are expected to be on separate lines with a newline after each.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>six
negative seven hundred twenty nine
one million one hundred one</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>6
-729
1000101</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
487||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Boggle Blitz</TITLE>
<META NAME="description" CONTENT="Boggle Blitz">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Boggle Blitz</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
In the game of Boggle, you are presented with an  <IMG WIDTH=51 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline43" SRC="http://uva.onlinejudge.org/external/4/487img1.gif"   >  table of letters. The object is to find words
in the mix of letters. A word may be started anywhere in the table and is constructed by forming a chain of adjacent letters. Adjacent means diagonal, vertical or horizontal. A word cannot use any character from the table more than once.
<P>
<P>
Here is an example of a  <IMG WIDTH=38 HEIGHT=24 ALIGN=MIDDLE ALT="tex2html_wrap_inline45" SRC="http://uva.onlinejudge.org/external/4/487img1.gif"   >  table:
<TT>bile</TT> <BR> 
<TT>tglp</TT> <BR> 
<TT>aest</TT> <BR> 
<TT>here</TT>
<P>
<P>
The following is a partial list of legal words that can be found using the above rules:
<PRE>bill
gates
slept
here</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<P>
In ``Boggle Blitz'' you will be given an integer number, <I>N</I>, on a single line. <I>N</I> is the number of characters on each side of the table, giving a total of  <IMG WIDTH=21 HEIGHT=14 ALIGN=BOTTOM ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/4/487img1.gif"   >  characters. <I>N</I> can range from 1 to 20. <I>N</I>
lines of <I>N</I> characters each will follow giving you the arrangement of the table.
<P>
Your task is to find
all the legal words in the table. <TT>Be sure that your program is efficient!</TT>
<P>
In case you forgot to bring a dictionary, you are in luck because we are not using English words.
Instead, we have redefined ``word'' to mean an increasing (by ASCII value) chain of characters
from length 3 to length  <IMG WIDTH=21 HEIGHT=14 ALIGN=BOTTOM ALT="tex2html_wrap_inline51" SRC="http://uva.onlinejudge.org/external/4/487img1.gif"   > . ``<TT>ABCDE</TT>'' is a legal five letter word. ``<TT>MICROSOFT</TT>'' is <B>not legal</B>
because the sequence is not increasing. ``<TT>BILL</TT>'' is also illegal because <TT>L</TT> is not greater than <TT>L</TT>.
``<TT>BIL</TT>'', however, is legal.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Output</A></FONT></H2>
<P>
For each test case, the output must follow the description below. The outputs of
two consecutive cases will be separated by a blank line.
<P>
Your program should output the list of unique words sorted according to the following
criteria:
<OL><LI> Shorter words are before longer words<LI> Words are sorted
    lexigraphically by ASCII value
</OL>
<P>
Add no blank lines or spaces. If no legal words can be found, print nothing.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>2

3
one
top
dog

4
abcd
bcda
cdab
dabc</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>dop
dot
eno
enp
ent
eop
eot
gop
got
nop
not
enop
enot

abc
abd
acd
bcd
abcd</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
488||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Triangle Wave</TITLE>
<META NAME="description" CONTENT="Triangle Wave">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><CENTER></h1>
 <TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Triangle Wave</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
In this problem you are to generate a triangular wave form according to a specified pair of
Amplitude and Frequency.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<P>
Each input set will contain two integers, each on a separate line. The first integer is the Amplitude; the
second integer is the Frequency.
<P>
For each test case, the output must follow the description below. The outputs of
two consecutive cases will be separated by a blank line.
<P>
For the output of your program, you will be printing wave forms each separated by a blank line.
The total number of wave forms equals the Frequency, and the horizontal ``height'' of each wave
equals the Amplitude. The Amplitude will never be greater than nine.
<P>
The waveform itself should be filled with integers on each line which indicate the ``height'' of that
line.
<P>
<B>NOTE:</B> There is a blank line after each separate waveform, <B>excluding</B> the last one.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>

<PRE>1

3
2</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1
22
333
22
1

1
22
333
22
1</PRE>
</BODY>
</HTML>

______________________________________________________
489||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Hangman Judge</TITLE>
<META NAME="description" CONTENT="Hangman Judge">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Hangman Judge</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In ``Hangman Judge,'' you are to write a program that judges a series of Hangman games. For
each game, the answer to the puzzle is given as well as the guesses. Rules are the same as the
classic game of hangman, and are given as follows:
<OL><LI> The contestant tries to solve to puzzle by guessing one letter at a time.<LI> Every time a guess is correct, all the characters in the word that match the guess will be
``turned over.'' For example, if your guess is ``o'' and the word is ``book'', then both ``o''s in the
solution will be counted as ``solved.''<LI> Every time a wrong guess is made, a stroke will be added to the drawing of a hangman, which
needs 7 strokes to complete. Each unique wrong guess only counts against the contestant once.
<P>
<PRE>   ______   
   |  |     
   |  O     
   | /|\    
   |  |     
   | / \    
 __|_       
 |   |______
 |_________|</PRE><LI> If the drawing of the hangman is completed before the contestant has successfully guessed all
the characters of the word, the contestant loses.<LI> If the contestant has guessed all the characters of the word before the drawing is complete, the
contestant wins the game.<LI> If the contestant does not guess enough letters to either win or lose, the contestant chickens out.
</OL>
<P>
Your task as the ``Hangman Judge'' is to determine, for each game, whether the contestant wins,
loses, or fails to finish a game.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your program will be given a series of inputs regarding the status
of a game. All input will be in lower case. The first line of each section will contain a number to
indicate which round of the game is being played; the next line will be the solution to the puzzle;
the last line is a sequence of the guesses made by the contestant. A round number of <TT>-1</TT> would indicate the end of all games (and input).
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
The output of your program is to indicate which round of the game the contestant is currently playing as well as the result of the game. There are three possible results:
<P>
<PRE>You win.
You lose.
You chickened out.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1
cheese
chese
2
cheese
abcdefg
3
cheese
abcdefgij
-1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Round 1
You win.
Round 2
You chickened out.
Round 3
You lose.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
490||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rotating Sentences</TITLE>
<META NAME="description" CONTENT="Rotating Sentences">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rotating Sentences</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
In ``Rotating Sentences,'' you are asked to rotate a series of input sentences 90 degrees clockwise.
So instead of displaying the input sentences from left to right and top to bottom, your program
will display them from top to bottom and right to left.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
As input to your program, you will be given a maximum of 100 sentences, each not exceeding
100 characters long. Legal characters include: newline, space, any punctuation characters, digits,
and lower case or upper case English letters. (NOTE: Tabs are not legal characters.)
<P>
<P>
The output of the program should have the last sentence printed out vertically in the leftmost
column; the first sentence of the input would subsequently end up at the rightmost column.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Rene Decartes once said,
&quot;I think, therefore I am.&quot;</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>&quot;R
Ie
 n
te
h 
iD
ne
kc
,a
 r
tt
he
es
r
eo
fn
oc
re
e
 s
Ia
 i
ad
m,
.
&quot;</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
491||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Tile Topology</TITLE>
<META NAME="description" CONTENT="Tile Topology">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Tile Topology</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Your boss is re-tiling his bathroom and wishes to know how many unique ways there are to
arrange an arbitrary number of tiles on the wall. He has assigned you to figure this out, but won't
tell you how many tiles he has.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Design a program that accepts the number of tiles and returns the
number of unique different arrangements. An arrangement is unique if it cannot be rotated in two dimensions to match any other arrangement.
<P>
<P>
For example, if there were 3 tiles, there are 2 possible arrangements:
<P>
<center><img src=491img1.gif></center>
<P>
Note that the following arrangement does not count because it can be rotated on a plane into one of the previous shapes:
<P>
<center><img src=491img2.gif></center>
<P>
Also note that the following two arrangements are different because they cannot be rotated into
the same shape:
<P>
<center><img src=491img3.gif></center>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
492||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Pig-Latin</TITLE>
<META NAME="description" CONTENT="Pig-Latin">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Pig-Latin</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
You have decided that PGP encryptation is not strong enough for your email. You have decided to supplement
it by first converting your clear text letter into Pig Latin before encrypting it with PGP.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
You are to write a program that will take in an arbitrary number of lines of text and output it in Pig Latin.
Each line of text will contain one or more words. A ``word'' is defined as a consecutive sequence of letters
(upper and/or lower case). Words should be converted to Pig Latin according to the following rules (non-words should be output exactly as they appear in the input):
<OL><LI> Words that begin with a vowel (<TT>a</TT>, <TT>e</TT>, <TT>i</TT>, <TT>o</TT>, or <TT>u</TT>, and the capital versions of these) should just have the
string ``<TT>ay</TT>'' (not including the quotes) appended to it. For example, ``<TT>apple</TT>'' becomes ``<TT>appleay</TT>''.<LI> Words that begin with a consonant (any letter than is not <TT>A</TT>, <TT>a</TT>, <TT>E</TT>, <TT>e</TT>, <TT>I</TT>, <TT>i</TT>, <TT>O</TT>, <TT>o</TT>, <TT>U</TT> or <TT>u</TT>) should have the
first consonant removed and appended to the end of the word, and then appending ``<TT>ay</TT>'' as well. For
example, ``<TT>hello</TT>'' becomes ``<TT>ellohay</TT>''.<LI> Do not change the case of any letter.
</OL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>This is the input.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>hisTay isay hetay inputay.</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
493||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rational Spiral</TITLE>
<META NAME="description" CONTENT="Rational Spiral">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Rational Spiral</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Rational numbers can be expressed as the division of two integers. They are also countable. This means that
an order can be placed on them just like the natural numbers. But this ordering is not obvious, and is not
unique. Here is one way to do it: imagine a plane where the <I>X</I>-axis represents the denominator of a rational
number and the <I>Y</I>-axis represents the numerator. Starting at the origin, spiral clockwise away from it. Each
integer pair that you encounter will represent a rational number. See the figure below.
<P>
<center><img src=493img2.gif></center>
<P>
The first rational number that you will encounter is <IMG WIDTH=7 HEIGHT=29 ALIGN=MIDDLE ALT="tex2html_wrap_inline295" SRC="http://uva.onlinejudge.org/external/4/493img4.gif"   > . But wait,
this is not a rational number! Therefore, this pair must be skipped.
Each time that you pass the <I>Y</I>-axis, the denominator will be 0, which
generates an illegal rational number. You will have to skip all of these.
<P>
You will also encounter many repeats. For example 
<IMG WIDTH=18 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline297" SRC="http://uva.onlinejudge.org/external/4/493img4.gif"   > is the same number as <IMG WIDTH=18 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline299" SRC="http://uva.onlinejudge.org/external/4/493img4.gif"   >  . Only count the first
occurance of rational numbers in the spiral. Also be aware that numbers can be reduced, which can also cause
repeats. For example <IMG WIDTH=7 HEIGHT=29 ALIGN=MIDDLE ALT="tex2html_wrap_inline303" SRC="http://uva.onlinejudge.org/external/4/493img4.gif"   >   reduces to <IMG WIDTH=7 HEIGHT=31 ALIGN=MIDDLE ALT="tex2html_wrap_inline305" SRC="http://uva.onlinejudge.org/external/4/493img4.gif"   >  , so it is a repeat.
Be sure to skip all these too.
<P>
Given these rules, you can generate an ordered listing of all the rational numbers which does not skip or
repeat. Amazing, isn't it?
<P>
<P>
Your mission, should you choose to accept it, is to order the rational numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
There will be several lines
of input. Each line of input will have a single integer which represents which rational number to output. For
example, if a line of input is 4 then print out the 4<I>th</I> rational number. <B>Important</B>, the list starts with the
<EM>zeroth</EM> element.
<P>
<P>
For each line of input, print out the rational number in this form: numerator, followed by a space, followed
by a forward slash, followed by a space, followed by the denominator.
<P>
<P>
<B>Note:</B> if the rational number is
negative, the minus sign must be printed with the numerator. For example, do not print out <TT>4 / -1</TT> , print <TT>-4 / 1</TT>  even if you are at
the (<TT>denominator == -1, numerator == 4</TT>) location on the spiral.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>0
1
2
3
10</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>1 / 1
0 / 1
-1 / 1
-2 / 1
3 / 2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
494||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Kindergarten Counting Game</TITLE>
<META NAME="description" CONTENT="Kindergarten Counting Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Kindergarten Counting Game</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Everybody sit down in a circle. Ok. Listen to me carefully.
<P>
``Woooooo, you scwewy wabbit!''
<P>
Now, could someone tell me how many words I just said?
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Input to your program will consist of a series of lines, each line containing multiple words (at least one).
A ``word'' is defined as a consecutive sequence of letters (upper and/or lower case).
<P>
<P>
Your program should output a word count for each line of input. Each word count should be printed on
a separate line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>Meep Meep!
I tot I taw a putty tat.
I did! I did! I did taw a putty tat.
Shsssssssssh ... I am hunting wabbits. Heh Heh Heh Heh ...</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>2
7
10
9</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
495||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Fibonacci Freeze</TITLE>
<META NAME="description" CONTENT="Fibonacci Freeze">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Fibonacci Freeze</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
The Fibonacci numbers (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...) are defined by the recurrence:
<P> <IMG WIDTH=500 HEIGHT=68 ALIGN=BOTTOM ALT="eqnarray20" SRC="http://uva.onlinejudge.org/external/4/495img1.gif"   > <P>
<P>
Write a program to calculate the Fibonacci Numbers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input to your program would be a sequence of numbers smaller or equal than 5000, each on a separate line, specifying which
Fibonacci number to calculate.
<P>
<P>
Your program should output the Fibonacci number for each input value, one per line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>5
7
11</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>The Fibonacci number for 5 is 5
The Fibonacci number for 7 is 13
The Fibonacci number for 11 is 89</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
496||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Simply Subsets</TITLE>
<META NAME="description" CONTENT="Simply Subsets">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Simply Subsets</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
After graduating from the University of Notre Dame, you obtained a job
at Top Shelf Software, Inc., as an
entry-level computer engineer. On the first day, your manager sits down
with you and tasks you with the
following job: ``We want to see how well you understand computer programming
and the abstract science
behind it. As an evaluation for all of our new hires, we require them
to write a program to determine the
relationship between pairs of sets. I'm quite sure that you'll do well;
my confidence is high. Here's a list of
requirements for what the program should do. Good luck.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your program should accept an even number of lines of text. Each pair of
lines will represent two sets;
the first line represents set A, the second line represents set B.
Each line of text (set) will be a list of distinct integers.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
After each pair of lines has been read in, the sets should be compared
and one of the following responses should be output:
<UL><LI> <TT>A is a proper subset of B</TT><LI> <TT>B is a proper subset of A</TT><LI> <TT>A equals B</TT><LI> <TT>A and B are disjoint</TT><LI> <TT>I'm confused!</TT>
</UL><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>55 27
55 27
9 24 1995
9 24
1 2 3
1 2 3 4
1 2 3
4 5 6
1 2
2 3</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>A equals B
B is a proper subset of A
A is a proper subset of B
A and B are disjoint
I'm confused!</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
497||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Strategic Defense Initiative</TITLE>
<META NAME="description" CONTENT="Strategic Defense Initiative">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Strategic Defense Initiative</A></FONT>&nbsp;</B></TABLE></CENTER>
<P>
``Commander! Commander! Please wake up commander!''
<P>
``... mmmph. What time is it?''
<P>
``4:07 am, Commander. The following message just arrived on the emergency zeta priority classified
scrambler, marked your eyes only.''
<P>
You grudgingly take the letter, rub the sleep from your eyes, fleetingly wish that the 'Backer closed at an earlier hour, and start to read.
<P>
<PRE>``Dear StarWars SDI Commander,

    Bad news, buddy. Crazy Boris had a bit too much vodka last night
    and when he woke up this morning, instead of the snooze button
    on his alarm clock, he ... well, let me put it this way: we've got
    tons of nuclear missles flying this way. Unfortunately, all that
    we have is a chart of the altitudes at which the missles are
    flying, arranged by the order of arrivals. Go for it, buddy.
    Good luck.

                                           Secretary of Defense

    P.S. Hilly and Bill say hi.''</PRE>
<P>
To make things worse, you remeber that SDI has a fatal flaw due to the budget cuts. When SDI sends
out missles to intercept the targets, every missle has to fly higher than the previous one. In other
words, once you hit a target, the next target can only be among the ones that are flying at higher altitudes than
the one you just hit.
<P>
For example, if the missles are flying toward you at heights of 1, 6, 2, 3, and 5 (arriving in that order),
you can try to intercept the first two, but then you won't be able to get the ones flying at 2, 3, 5 because they
are lower than 6. Your job is to hit as many targets as possible. So you have to quickly write a program to
find the best sequence of targets that the flawed SDI program is going to destroy.
<P>
Russian war tactics are fairly strange; their generals are stickers for mathematical precision. Their missles
will always be fired in a sequence such that there will only be <EM>one</EM> solution to the problem posed above.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
The input begins with a single positive integer on a line by itself indicating
the number of the cases following, each of them as described below. This line is
followed by a blank line, and there is also a blank line between two consecutive
inputs.
<P>
each input to your program will consist of a sequence of integer altitudes, each on a separate line.
<P>
For each test case, the output must follow the description below. The outputs of
two consecutive cases will be separated by a blank line.
<P>
Output from your program should contain the total number of targets you can hit, followed by the altitudes
of those targets, one per line, in the order of their arrivals.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>1

1
6
2
3
5</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Max hits: 4
1
2
3
5</PRE>
</BODY>
</HTML>

______________________________________________________
498||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Polly the Polynomial</TITLE>
<META NAME="description" CONTENT="Polly the Polynomial">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Polly the Polynomial</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
Algebra! Remember algebra? There is a theory that as engineers progresses further and further in their studies, they lose basic math skills. This problem is designed to help you remember those <EM>basic</EM> algebra skills,
make the world a better place, etc., etc.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
<P>
Your program should accept an even number of lines of text. Each pair of lines will represent one problem. The first line will contain a list of integers { <IMG WIDTH=92 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline27" SRC="http://uva.onlinejudge.org/external/4/498img1.gif"   > } which represent a set of coefficients to a polynomial expression. The order of the polynomial is <I>n</I>. The coefficients should be paired with the terms
of the polynomial in the following manner:
<P> <IMG WIDTH=350 HEIGHT=18 ALIGN=BOTTOM ALT="displaymath31" SRC="http://uva.onlinejudge.org/external/4/498img1.gif"   > <P>
<P>
The second line of text represents a sequence of values for <I>x</I>, { <IMG WIDTH=102 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline35" SRC="http://uva.onlinejudge.org/external/4/498img1.gif"   > }.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Output</A></FONT></H2>
<P>
For each pair of lines, your program should evaluate the polynomial for all the values of <I>x</I> ( <IMG WIDTH=15 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="http://uva.onlinejudge.org/external/4/498img1.gif"   >  through  <IMG WIDTH=20 HEIGHT=17 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="http://uva.onlinejudge.org/external/4/498img1.gif"   > ) and output the resulting values on a single line.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>-2
5 0 1 6
1 -1
7 6 -1</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>-2 -2 -2 -2
6 5 -2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
499||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>What's The Frequency, Kenneth?</TITLE>
<META NAME="description" CONTENT="What's The Frequency, Kenneth?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">What's The Frequency, Kenneth?</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
<PRE>#include &lt;stdio.h&gt;

main()
{
  int i;
  char *suffix[]= { &quot;st&quot;, &quot;nd&quot;, &quot;rd&quot; };
  char *item[]= { &quot;Unix&quot; , &quot;cat&quot;, &quot;sed&quot;, &quot;awk&quot;, &quot;grep&quot;, &quot;ed&quot;, &quot;vi&quot;};
 
  printf(&quot;In the beginning, there was nothing.\n&quot;);
  for (i= 0; i &lt; 7; i++)
    printf(&quot;And on the %d%s day, God created %s. And it was good.\n&quot;,
           i + 1, (i &lt; 3) ? suffix[i] : &quot;th&quot;, item[i]);
}</PRE>
<P>
But then God saw that <TT>vi</TT> led people into temptation. Instead of choosing the righteous ways of <TT>make</TT>,
<TT>dbx</TT>, and <TT>RCS</TT>, people used long command lines, <TT>printf()</TT>, and tape backups.
<P>
So God decreed, ``I see that Engineers have thus defiled my <TT>vi</TT>. And so, I shall create <EM>emacs</EM>, an editor
more powerful than words. Further, for each instantiation <TT>vi</TT> hitherto, the Engineer responsible shalt perform
Penance. And lo, the Penance wilt be painful; there will be much wailing and gnushingof teeth. The Engineer
will read many lines of text. For each line of text, the Engineer must tell me which letters occur the most frequently.''
<P>
``I charge you all with My Golden Rule: 'Friends shalt not let friends use <TT>vi</TT>'.''
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Each line of output should contain a list of letters that all occured with the highest frequency in the corresponding input line, followed by the frequency.
<P>
The list of letters should be an alphabetical list of upper case letters followed by an alphabetical
list of lower case letters.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>When riding your bicycle backwards down a one-way street, if the
wheel falls of a canoe, how many ball bearings does it take to fill
up a water buffalo?
Hello Howard.</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>e 6
al 7
a 3
Hlo 2</PRE>
<P>
</BODY>
</HTML>

______________________________________________________
500||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Table</TITLE>
<META NAME="description" CONTENT="Table">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Table</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<img src=p500a.gif align=right>
A lot of text editors allows us to make tables with the help of
pseudographical characters but do not let edit them, i.e. after alternation of
the text in cells, to restore the marking of lines and columns you have to
align the whole table manually. You are offered to implement an editor
fragment carrying out an automatic table alignment.<p>

The table represents a rectangle divided into cells with vertical and
horizontal lines, linking its borders. Vertical and horizontal markers as well
as the rectangle itself are formed by pseudographical characters from figure
1.<p>

The text in table cells can be located in several lines. Text does not contain
control and pseudographical characters.<p>

While editing a table the text of cells is being changed and as a result
symbols `<IMG
 WIDTH="9" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/500img3.gif" 
 ALT="$\mid$">' (ASCII 179) can be shifted to
the left or to the right. The number of lines and columns of the table as
well as the number of lines in each cell is not being changed.

<P>
The text in each line of each cell should be separated from vertical markers
exactly with one space
on the left and no less than with one space on the right in the aligned table.
All spaces between words are significant. It is allowed only:

<P>
<UL>
<LI>to alter the number of leading and trailing spaces in cell lines;
<LI>to add and delete characters ``-" (ASCII 196) in horizontal table
markers.
</UL>

<P>
The table does not contain empty columns, i.e. each column contains at
least one cell with non-empty text.

<P>
It is required to format a given table making its width (the length of table
line) minimal.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>Input for each dataset contains an edited table. It consists of no more than 100
lines and line
length is no more then 255 characters. Lines themselves do not contain
leading and trailing spaces.
The datasets do not contain empty lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the output the aligned table. Output lines should not
contain
leading and trailing spaces. The output for each dataset should not contain empty lines.
The input data provides that
the width of the formatted table does not exceed 255 characters. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<pre>
1

<img src=p500b.gif>
</pre>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<img src=p500c.gif>
<P>

<P>
</BODY>
</HTML>

______________________________________________________
501||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Black Box</TITLE>
<META NAME="description" CONTENT="Black Box">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Black Box</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Our Black Box represents a primitive database. It can save an integer array
and has a special <I>i</I>
variable. At the initial moment Black Box is empty and <I>i</I> equals 0. This
Black Box processes a
sequence of commands (transactions). There are two types of transactions:

<P>
<UL>
<LI>ADD(<I>x</I>): put element <I>x</I> into Black Box;
<LI>GET: increase <I>i</I> by 1 and give an <I>i</I>-minimum out of all
integers containing in the Black Box.
</UL>

<P>
Keep in mind that <I>i</I>-minimum is a number located at <I>i</I>-th place after
Black Box elements sorting by non-descending.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Example</A>&nbsp;</FONT>
</H2>
Let us examine a possible sequence of 11 transactions:

<P>

<P>
<BR>

<TABLE CELLPADDING=3>
<TR><TD ALIGN="LEFT"><B> N</B></TD>
<TD ALIGN="LEFT"><B> Transaction</B></TD>
<TD ALIGN="LEFT"><B> i</B></TD>
<TD ALIGN="LEFT"><B> Black Box contents after transaction</B></TD>
<TD ALIGN="LEFT"><B> Answer</B></TD>
</TR>
<TR><TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="LEFT">(elements are arranged by non-descending)</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">1</TD>
<TD ALIGN="LEFT">ADD(3)</TD>
<TD ALIGN="LEFT">0</TD>
<TD ALIGN="LEFT">3</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">GET</TD>
<TD ALIGN="LEFT">1</TD>
<TD ALIGN="LEFT"><B> 3</B></TD>
<TD ALIGN="LEFT">3</TD>
</TR>
<TR><TD ALIGN="LEFT">3</TD>
<TD ALIGN="LEFT">ADD(1)</TD>
<TD ALIGN="LEFT">1</TD>
<TD ALIGN="LEFT">1, 3</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">4</TD>
<TD ALIGN="LEFT">GET</TD>
<TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">1, <B> 3</B></TD>
<TD ALIGN="LEFT">3</TD>
</TR>
<TR><TD ALIGN="LEFT">5</TD>
<TD ALIGN="LEFT">ADD(-4)</TD>
<TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">-4, 1, 3</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">6</TD>
<TD ALIGN="LEFT">ADD(2)</TD>
<TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">-4, 1, 2, 3</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">7</TD>
<TD ALIGN="LEFT">ADD(8)</TD>
<TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">-4, 1, 2, 3, 8</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">8</TD>
<TD ALIGN="LEFT">ADD(-1000)</TD>
<TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">-1000, -4, 1, 2, 3, 8</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="LEFT">9</TD>
<TD ALIGN="LEFT">GET</TD>
<TD ALIGN="LEFT">3</TD>
<TD ALIGN="LEFT">-1000, -4, <B> 1</B>, 2, 3, 8</TD>
<TD ALIGN="LEFT">1</TD>
</TR>
<TR><TD ALIGN="LEFT">10</TD>
<TD ALIGN="LEFT">GET</TD>
<TD ALIGN="LEFT">4</TD>
<TD ALIGN="LEFT">-1000, -4, 1, <B> 2</B>, 3, 8</TD>
<TD ALIGN="LEFT">2</TD>
</TR>
<TR><TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">ADD(2)</TD>
<TD ALIGN="LEFT">4</TD>
<TD ALIGN="LEFT">-1000, -4, 1, 2, 2, 3, 8</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
It is required to work out an efficient algorithm which treats a given
sequence of transactions. The
maximum number of ADD and GET transactions: 30000 of each type.

<P>

<P>
<BR>
Let us describe the sequence of transactions by two integer arrays:

<P>
<DL COMPACT>
<DT>1.
<DD>
<!-- MATH: $A(1), A(2), \dots, A(M)$ -->
<IMG
 WIDTH="167" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$A(1), A(2), \dots, A(M)$">:
a sequence of elements which are being
included into Black Box. A values
are integers not exceeding 2 000 000 000 by their absolute value,

<!-- MATH: $M \le 30000$ -->
<IMG
 WIDTH="90" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$M \le 30000$">
. For the Example we have 
<!-- MATH: $A=(3, 1, -4, 2, 8, -1000, 2)$ -->
<I>A</I>=(3, 1, -4, 2, 8, -1000, 2).
<P>
<DT>2.
<DD>
<!-- MATH: $u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$u(1), u(2), \dots, u(N)$">
: a sequence setting a number of elements which are being included into
Black Box at the moment of first, second, ... and <I>N</I>-transaction GET. For
the Example  we have 
<!-- MATH: $u=(1, 2, 6, 6)$ -->
<I>u</I>=(1, 2, 6, 6).
</DL>

<P>
The Black Box algorithm supposes that natural number sequence

<!-- MATH: $u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$u(1), u(2), \dots, u(N)$">
is sorted in
non-descending order, <IMG
 WIDTH="63" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$N \le M$">
and for each <I>p</I> (
<!-- MATH: $1 \le p \le N$ -->
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$1 \le p \le N$">)
an
inequality 
<!-- MATH: $p \le u(p) \le M$ -->
<IMG
 WIDTH="111" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$p \le u(p) \le M$">
is valid. It
follows from the fact that for the <I>p</I>-element of our <I>u</I> sequence we
perform a GET transaction giving
<I>p</I>-minimum number from our 
<!-- MATH: $A(1), A(2), \dots, A(u(p))$ -->
<IMG
 WIDTH="181" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$A(1), A(2), \dots, A(u(p))$">
sequence.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer K, then a blank line followed by K datasets. There is a blank line between datasets.

<p>Input for each dataset contains (in given order):

<!-- MATH: $M, N, A(1), A(2), \dots, A(M), u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="373" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/501img2.gif" 
 ALT="$M, N, A(1), A(2), \dots, A(M), u(1), u(2), \dots, u(N)$">.
All numbers are divided by spaces and (or) carriage return characters.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the output Black Box answers sequence for a given sequence of
transactions. The numbers can be separated with spaces and end-of-line characters. Print
a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

7 4
3 1 -4 2 8 -1000 2
1 2 6 6
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
3
1
2
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
502||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>DEL command</TITLE>
<META NAME="description" CONTENT="DEL command">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
DEL command</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It is required to find out whether it is possible to delete given files
from MS-DOS directory
executing the DEL command of MS-DOS operation system only once.
There are no nested subdirectories.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
A note</A>&nbsp;</FONT>
</H2>

<P>
DEL command has the following format: <TT>DEL</TT> <EM>wildcard</EM>

<P>

<P>
<BR>
The actual wildcard as well as a full file name can be made up either of
a name containing 1 up to 8
characters or of a name and extension, containing up to 3 characters.
The point character ``." separates the extension from the file name.
The extension can be empty and this is equivalent to a
name without any extension (in this case a wildcard ends with a point).
In a wildcard the characters
``?" and ``*" can be used. A question mark substitutes exactly one character
of the full file name
excluding a point, an asterisk any sequence of characters
(containing no points) even empty one.
An asterisk can appear only at the last position of the name and the extension.

<P>

<P>
<BR>
MS-DOS system can permit maybe other wildcards but they can not be used
in this task. File names
and extensions consist only of Latin capitals and digits.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>Input data for each dataset contains a list of full file names without empty lines
and spaces. Each
name is written in a separate line of input data file and preceded with
a control sign: ``-" for delete
or ``+" for keep. Full file names are not repeated. The list comprises
at least one file, and at least one
file is marked to be deleted. There are no more than 1000 files.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the first line of output the required DEL command
(only one
proposal) or <TT>IMPOSSIBLE</TT> if there is no solution.
A space should separate ``<TT>DEL</TT>" from wildcard.
Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

-BP.EXE
-BPC.EXE
+TURBO.EXE
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Possible output</A>&nbsp;</FONT>
</H2>
<PRE>
DEL ?P*.*
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
503||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Parallelepiped walk</TITLE>
<META NAME="description" CONTENT="Parallelepiped walk">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Parallelepiped walk</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<img src=p503.gif align=right>
Two points A(x<sub>1</sub>, y<sub>1</sub>, z<sub>1</sub>) and
B(x<sub>2</sub>, y<sub>2</sub>, z<sub>2</sub>) are placed on the
surface of parallelepiped P = {(x, y, z): 0 &lt;= x &lt;= L, 0 &lt;= y &lt;= W,
0 &lt;= z &lt;= H} with L*W*H dimensions (see figure). These two
points can be linked with various curves lying on the surface of
P. You are to find out the square of the shortest curve length.<p>

Parallelepiped dimensions L, W, H and coordinates of the points
are integers, 0 &lt;= L,W,H &lt;= 1000.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input data file consists of a series of lines with each line containing 9 integers (in indicated order): 
<!-- MATH: $L, W, H, x_1, y_1, z_1, x_2, y_2, z_2$ -->
<I>L</I>, <I>W</I>, <I>H</I>, <I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB>. The
numbers are separated with spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each line of input there will be one line of output, which should contain the square of the shortest curve length between points <I>A</I> and <I>B</I> on the surface of <I>P</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 5 2 3 1 2 3 5 0
300 600 900 300 550 0 0 550 900
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
36
970000
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
504||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Random number</TITLE>
<META NAME="description" CONTENT="Random number">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Random number</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A Black Box algorithm supposes that natural
number sequence 
<!-- MATH: $u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$u(1), u(2), \dots, u(N)$">
is sorted
in non-descending order, <IMG
 WIDTH="63" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$N \le M$">
and for each <I>p</I>
(
<!-- MATH: $1 \le p \le N$ -->
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$1 \le p \le N$">)
an inequality 
<!-- MATH: $p \le u(p) \le M$ -->
<IMG
 WIDTH="111" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$p \le u(p) \le M$">
is valid.

<P>

<P>
<BR>
Making tests for this algorithm we have met with the following problem.
For setting a random sequence
<IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{u(i)\}$">
a usual random data generator did not fit. As the sequence
itself had been imposed certain
restrictions, the method of choosing the next random element
(in the interval defined by
restrictions) did not give the random sequence as a whole.

<P>

<P>
<BR>
We have come to a conclusion that the problem can be solved in the following
way. If we arrange
all possible sequences in certain order (for example, in lexicographical
order) and assign each
sequence its number, after choice of the random number it is possible to
take the correspondent
sequence for the random one. At the first glance it seems enough to
make up a program generating
all these sequences in such order. Alas! Even having not great values
of <I>M</I> and <I>N</I> it would have
taken any powerful modern computer centuries to enumerate all such
sequences. It turned out it was
possible to avoid generating all sequences if we managed to create
required sequence according to
its number immediately. But even this statement does not cover all.
As the amount of sequences is
quite large, the number can be a long one, composed of hundreds decimal
digits, though our
random data generator could give only normal numbers. We decided to
produce a long random
number from a real random number distributed in [0,1]. Namely, present
the number in binary
notation: 
<!-- MATH: $0.b(1)b(2)\dots$ -->
<IMG
 WIDTH="101" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$0.b(1)b(2)\dots$">,
where all <I>b</I>(<I>i</I>) = 0 or 1. Let us set a
regulation to associate such real number
to an integer from [<I>A</I>,<I>B</I>] segment:

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Formula</A>&nbsp;</FONT>
</H2>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
G(A,B,0.b_1b_2\dots b_p) = \left\{ \begin{array}{ll}
A, & \mbox{if $p=0$ or $A=B$;} \\
\mbox{otherwise:} & \left\{ \begin{array}{ll}
G(A,(A+B) \mbox{ div } 2,0.b_2b_3\dots b_p, & \mbox{if $b_1=0$} \\
G((A+B) \mbox{ div } 2+1,B,0.b_2b_3\dots b_p, & \mbox{if $b_1=1$} \end{array} \right.
\end{array} \right.
\end{displaymath} -->


<IMG
 WIDTH="666" HEIGHT="76"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="\begin{displaymath}G(A,B,0.b_1b_2\dots b_p) = \left\{ \begin{array}{ll}
A, & \m...
...p, & \mbox{if $b_1=1$} \end{array} \right.
\end{array} \right.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
Here we suppose, that <IMG
 WIDTH="55" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$A \le B$">,
<IMG
 WIDTH="45" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$p \ge 0$">,
and ``div 2" is an integer
division by 2.

<P>

<P>
<BR>
Let <I>M</I>, <I>N</I> (
<!-- MATH: $1 \le N \le M \le 200$ -->
<IMG
 WIDTH="144" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$1 \le N \le M \le 200$">)
and a binary real number

<!-- MATH: $0.b(1)b(2)\dots b(p)$ -->
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$0.b(1)b(2)\dots b(p)$">
(
<!-- MATH: $1 \le p \le 400$ -->
<IMG
 WIDTH="95" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$1 \le p \le 400$">)
be given.
Write a program to find out the corresponding 
<!-- MATH: $u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$u(1), u(2), \dots, u(N)$">
sequence, i.e. to find a sequence
with 
<!-- MATH: $G(1, T, 0.b(1)b(2)\dots b(p))$ -->
<IMG
 WIDTH="197" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$G(1, T, 0.b(1)b(2)\dots b(p))$">
number in lexicographical order of all
possible <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{u(i)\}$">
for the given
<I>M</I> and <I>N</I> (<I>T</I> is the quantity of such sequences). Numeration begins with 1.
Keep in mind that in
lexicographical order <IMG
 WIDTH="47" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{l(i)\}$">
proceeds <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{h(i)\}$">
if after omitting equal
beginnings, the first number of
<IMG
 WIDTH="47" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{l(i)\}$">
tail is smaller than the first number or <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$\{h(i)\}$">
tail.
Following example illustrates the list of all possible
sequences for <I>M</I> = 4 and <I>N</I> = 3 in lexicographical order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
A note (it does not concern the solution of this task):</A>&nbsp;</FONT>
</H2>
The choice of random binary vector 
<!-- MATH: $0.b(1)b(2)\dots b(p)$ -->
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$0.b(1)b(2)\dots b(p)$">
does not give an
absolute uniform random
data generator if we use the Formula. However, taking into account the
fact that [<I>A</I>,<I>B</I>] interval is big
we shall obtain a distribution applicable in most cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Example</A>&nbsp;</FONT>
</H2>
<PRE>
1, 2, 3
1, 2, 4
1, 3, 3
1, 3, 4
1, 4, 4
2, 2, 3
2, 2, 4
2, 3, 3
2, 3, 4
2, 4, 4
3, 3, 3
3, 3, 4
3, 4, 4
4, 4, 4
</PRE>

<P>
(here <I>T</I>=14)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer K, then a blank line followed by K datasets. There is a blank line between datasets.

<p>The first line of each dataset contains <I>M</I> and <I>N</I>. The second line
contains binary real
number 
<!-- MATH: $0.b(1)b(2)\dots b(p)$ -->
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$0.b(1)b(2)\dots b(p)$">
(without leading, trailing and other spaces).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write into the output data file the corresponding sequence

<!-- MATH: $u(1), u(2), \dots, u(N)$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/504img1.gif" 
 ALT="$u(1), u(2), \dots, u(N)$">.
The
sequence numbers should be separated with spaces and end-of-line characters.
There should be up to 20 numbers in each line. If neccesary, the numbers will have leading blanks to occupy 3 characters.
Print a blank line between datasets.


<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

4 3
0.01101101011110010001101010001011010
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001007000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
  2   2   4
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
505||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Moscow time</TITLE>
<META NAME="description" CONTENT="Moscow time">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Moscow time</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In e-mail the following format for date and time setting is used:
<BR><P></P>

<center><b>EDATE::=Day_of_week, Day_of_month Month Year Time Time_zone</b></center>

<BR CLEAR="ALL">
<P></P>
Here <I>EDATE</I> is the name of date and time format, the text to the right
from ``::=" defines how date and time are written in this format.
Below the descriptions of <I>EDATE</I> fields are presented:

<P>
<DL>
<DT><STRONG>
<!-- MATH: $Day_{-}of_{-}week$ -->
<I>Day</I><SUB>-</SUB><I>of</I><SUB>-</SUB><I>week</I></STRONG>
<DD>The name of a day of the week.
Possible values: MON, TUE, WED, THU, FRI,
SAT, SUN. The name is followed by ``," character (a comma).
<DT><STRONG>
<!-- MATH: $Day_{-}of_{-}month$ -->
<I>Day</I><SUB>-</SUB><I>of</I><SUB>-</SUB><I>month</I></STRONG>
<DD>A day of the month. Set by two decimal digits.
<DT><STRONG><I>Month</I></STRONG>
<DD>The name of the month. Possible values: JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC.
<DT><STRONG><I>Year</I></STRONG>
<DD>Set by two or four decimal digits. If a year is set by two decimals it is assumed that
this is a number of the year of the XX century. For instance, 74 and 1974 set a year of 1974.
<DT><STRONG><I>Time</I></STRONG>
<DD>Local time in format <EM>hours:minutes:seconds</EM>, where hours, minutes and seconds are
made up of two decimal digits. The time keeps within the limits from 00:00:00 to
23:59:59.
<DT><STRONG>
<!-- MATH: $Time_{-}zone$ -->
<I>Time</I><SUB>-</SUB><I>zone</I></STRONG>
<DD>Offset of local time from Greenwich mean time.
It is set by the difference sign ``+"
or ``-"and by sequence of four digits. First two digits set the hours
and the last two the
minutes of offset value. The absolute value of the difference does not
exceed 24 hours. Time zone can also be presented by one of the following names:
<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="LEFT"><B> Name</B></TD>
<TD ALIGN="LEFT"><B> Digital value</B></TD>
</TR>
<TR><TD ALIGN="LEFT">UT</TD>
<TD ALIGN="LEFT">-0000</TD>
</TR>
<TR><TD ALIGN="LEFT">GMT</TD>
<TD ALIGN="LEFT">-0000</TD>
</TR>
<TR><TD ALIGN="LEFT">EDT</TD>
<TD ALIGN="LEFT">-0400</TD>
</TR>
<TR><TD ALIGN="LEFT">CDT</TD>
<TD ALIGN="LEFT">-0500</TD>
</TR>
<TR><TD ALIGN="LEFT">MDT</TD>
<TD ALIGN="LEFT">-0600</TD>
</TR>
<TR><TD ALIGN="LEFT">PDT</TD>
<TD ALIGN="LEFT">-0700</TD>
</TR>
</TABLE></DIV></DL>

<P>
Each two adjacent fields of <I>EDATA</I> are separated with exactly one space.
Names of day of the
week, month and time zone are written in capitals.
For instance, 10 a.m. of the Contest day in
St.Petersburg can be presented as
<PRE>
                          TUE, 03 DEC 96 10:00:00 +0300
</PRE>

<P>
Write a program which transforms the given date and time in <I>EDATE</I> format
to the corresponding
date and time in Moscow time zone. So called ``summer time" is not taken
into consideration. Your
program should rely on the predefined correctness of the given

<!-- MATH: $Day_{-}of_{-}week$ -->
<I>Day</I><SUB>-</SUB><I>of</I><SUB>-</SUB><I>week</I> and 
<!-- MATH: $Time_{-}zone$ -->
<I>Time</I><SUB>-</SUB><I>zone</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
A note</A>&nbsp;</FONT>
</H2>
<UL>
<LI>Moscow time is 3 hours later than Greenwich mean time (time zone +0300)
<LI>Months: January, March, May, July, August, October and December have 31 days. Months:
April, June, September and November have 30 days. February, as a rule, has 28 days, save for
the case of the leap year (29 days).
<LI>A year is a leap year if valid one out of two following conditions:
<UL>
<LI>its number is divisible by 4 and is not divisible by 100;
<LI>its number is divisible by 400.
</UL></UL>

<P>
For instance, 1996 and 2000 are the leap years, while 1900 and 1997 are not.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input data file contains date and time in <I>EDATE</I> format in each line.
Minimum permissible year in the input data is 0001, maximum 9998.
Input <I>EDATA</I> string does not contain leading and trailing spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output must contain a single line for each one in the input file
with date and time of Moscow time zone
in <I>EDATE</I> format. In output <I>EDATE</I> string a Year must be presented
with four decimal digits.
The output string should not include leading and trailing spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
SUN, 03 DEC 1996 09:10:35 GMT
WED, 28 FEB 35 23:59:00 +0259
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
SUN, 03 DEC 1996 12:10:35 +0300
THU, 01 MAR 1935 00:00:00 +0300
</PRE>

<P>
</BODY>
</HTML>

______________________________________________________
506||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>System Dependencies</TITLE>
<META NAME="description" CONTENT="System Dependencies">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
System Dependencies</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Components of computer systems often have dependencies--other components that
must be installed before they
will function properly. These dependencies are frequently shared by multiple
components. For example, both the
TELNET client program and the FTP client program require that the TCP/IP
networking software be installed before
they can operate. If you install TCP/IP and the TELNET client program, and
later decide to add the FTP client
program, you do not need to reinstall TCP/IP.

<P>

<P>
<BR>
For some components it would not be a problem if the components on which they
depended were reinstalled; it
would just waste some resources. But for others, like TCP/IP, some component
configuration may be destroyed if
the component was reinstalled.

<P>

<P>
<BR>
It is useful to be able to remove components that are no longer needed. When
this is done, components that only
support the removed component may also be removed, freeing up disk space,
memory, and other resources. But a
supporting component, not explicitly installed, may be removed only if all
components which depend on it are also
removed. For example, removing the FTP client program and TCP/IP would mean
the TELNET client program,
which was not removed, would no longer operate. Likewise, removing TCP/IP by
itself would cause the failure of
both the TELNET and the FTP client programs. Also if we installed TCP/IP to
support our own development, then
installed the TELNET client (which depends on TCP/IP) and then still later
removed the TELNET client, we would not want TCP/IP to be removed.

<P>

<P>
<BR>
We want a program to automate the process of adding and removing components.
To do this we will maintain a
record of installed components and component dependencies. A component can be
installed explicitly in response to a
command (unless it is already installed), or implicitly if it is needed for
some other component being installed.
Likewise, a component, not explicitly installed, can be explicitly removed
in response to a command (if it is not
needed to support other components) or implicitly removed if it is no
longer needed to support another component.
Installing an already implicitly-installed component won't make that component
become explicity installed.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will contain a sequence of commands (as described below), each on
a separate line containing no more than
eighty characters. Item names are case sensitive, and each is no longer than
ten characters. The command names
(<TT>DEPEND</TT>, <TT>INSTALL</TT>, <TT>REMOVE</TT> and <TT>LIST</TT>) always appear in uppercase starting in column one, and item
names are separated from the command name and each other by one or more spaces.
All appropriate <TT>DEPEND</TT>
commands will appear before the occurrence of any <TT>INSTALL</TT> command that uses them. There will be no circular
dependencies. The end of the input is marked by a line containing only the
word <TT>END</TT>.

<P>

<P><P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER" COLSPAN=1><EM> Command Syntax</EM></TD>
<TD ALIGN="CENTER" COLSPAN=1><EM> Interpretation/Response</EM></TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> DEPEND item1 item2 [item3 ...]</TT></TD>
<TD ALIGN="LEFT"><B> item1</B> depends on <B> item2</B> (and <B> item3</B> ...)</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> INSTALL item1</TT></TD>
<TD ALIGN="LEFT">install <B> item1</B> and those on which it depends</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> REMOVE item1</TT></TD>
<TD ALIGN="LEFT">remove <B> item1</B>, and those on which it depends, if
possible</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> LIST</TT></TD>
<TD ALIGN="LEFT">list the names of all currently-installed components</TD>
</TR>
</TABLE></DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Echo each line of input. Follow each echoed <TT>INSTALL</TT> or <TT>REMOVE</TT> line with the actions taken in response,
making certain that the actions are given in the proper order. Also identify
exceptional conditions (see Sample
Output, below, for examples of all cases). For the <TT>LIST</TT> command, display the names of the currently installed
components in the installation order. No output, except the echo, is produced for a <TT>DEPEND</TT> command or the line containing <TT>END</TT>. There
will be at most one dependency list per item.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input 1</A>&nbsp;</FONT>
</H2>
<PRE>
DEPEND   TELNET TCPIP NETCARD
DEPEND TCPIP NETCARD
DEPEND DNS TCPIP NETCARD
DEPEND  BROWSER   TCPIP  HTML
INSTALL NETCARD
INSTALL TELNET
INSTALL foo
REMOVE NETCARD
INSTALL BROWSER
INSTALL DNS
LIST
REMOVE TELNET
REMOVE NETCARD
REMOVE DNS
REMOVE NETCARD
INSTALL NETCARD
REMOVE TCPIP
REMOVE BROWSER
REMOVE TCPIP
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output 1</A>&nbsp;</FONT>
</H2>
<PRE>
DEPEND   TELNET TCPIP NETCARD
DEPEND TCPIP NETCARD
DEPEND DNS TCPIP NETCARD
DEPEND  BROWSER   TCPIP  HTML
INSTALL NETCARD
   Installing NETCARD
INSTALL TELNET
   Installing TCPIP
   Installing TELNET
INSTALL foo
   Installing foo
REMOVE NETCARD
   NETCARD is still needed.
INSTALL BROWSER
   Installing HTML
   Installing BROWSER
INSTALL DNS
   Installing DNS
LIST
   NETCARD
   TCPIP
   TELNET
   foo
   HTML
   BROWSER
   DNS
REMOVE TELNET
   Removing TELNET
REMOVE NETCARD
   NETCARD is still needed.
REMOVE DNS
   Removing DNS
REMOVE NETCARD
   NETCARD is still needed.
INSTALL NETCARD
   NETCARD is already installed.
REMOVE TCPIP
   TCPIP is still needed.
REMOVE BROWSER
   Removing BROWSER
   Removing HTML
   Removing TCPIP
REMOVE TCPIP
   TCPIP is not installed.
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input 2</A>&nbsp;</FONT>
</H2>
<PRE>
DEPEND A B
INSTALL A
INSTALL B
REMOVE A
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output 2</A>&nbsp;</FONT>
</H2>
<PRE>
DEPEND A B
INSTALL A
   Installing B
   Installing A
INSTALL B
   B is already installed.
REMOVE A
   Removing A
   Removing B
END
</PRE>


<P>
</BODY>
</HTML>

______________________________________________________
507||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Jill Rides Again</TITLE>
<META NAME="description" CONTENT="Jill Rides Again">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Jill Rides Again</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Jill likes to ride her bicycle, but since the pretty city of Greenhills
where she lives has grown, Jill often uses the
excellent public bus system for part of her journey. She has a folding bicycle
which she carries with her when she
uses the bus for the first part of her trip. When the bus reaches some
pleasant part of the city, Jill gets off and rides
her bicycle. She follows the bus route until she reaches her destination or
she comes to a part of the city she does
not like. In the latter event she will board the bus to finish her trip.

<P>

<P>
<BR>
Through years of experience, Jill has rated each road on an integer scale
of ``niceness.'' Positive niceness values
indicate roads Jill likes; negative values are used for roads she does not
like. There are not zero values. Jill plans where to leave the bus and
start bicycling, as well as where to stop bicycling and re-join the bus,
so that the sum of niceness values of the roads
she bicycles on is maximized. This means that she will sometimes cycle along
a road she does not like, provided
that it joins up two other parts of her journey involving roads she likes
enough to compensate. It may be that no
part of the route is suitable for cycling so that Jill takes the bus for its
entire route. Conversely, it may be that the
whole route is so nice Jill will not use the bus at all.

<P>

<P>
<BR>
Since there are many different bus routes, each with several stops at which
Jill could leave or enter the bus, she feels
that a computer program could help her identify the best part to cycle for
each bus route.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains information on several bus routes. The first line of
the file is a single integer <I>b</I> representing
the number of route descriptions in the file. The identifier for each
route (<I>r</I>) is the sequence number within the data
file, 
<!-- MATH: $1 \le r \le b$ -->
<IMG
 WIDTH="76" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/507img1.gif" 
 ALT="$1 \le r \le b$">.
Each route description begins with the number of stops on
the route: an integer <I>s</I>, 
<!-- MATH: $2 \le s \le 20,000$ -->
<IMG
 WIDTH="119" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/507img1.gif" 
 ALT="$2 \le s \le 20,000$">
on
a line by itself. The number of stops is followed by <I>s</I> - 1 lines, each
line <I>i</I> (
<!-- MATH: $1 \le i < s$ -->
<IMG
 WIDTH="74" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/507img1.gif" 
 ALT="$1 \le i < s$">)
is an integer <I>n</I><SUB><I>i</I></SUB> representing
Jill's assessment of the niceness of the road between the two stops <I>i</I> and <I>i</I>+1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each route <I>r</I> in the input file, your program should identify the beginning
bus stop <I>i</I> and the ending bus stop <I>j</I>
that identify the segment of the route which yields the maximal sum of
niceness, m= n<sub>i</sub>+n<sub>i+1</sub>+...+n<sub>j-1</sub>.
If more
than one segment is maximally nice, choose the one with the longest cycle
ride (largest <I>j</I>-<I>i</I>). To break ties in longest
maximal segments, choose the segment that begins with the earliest stop
(lowest <I>i</I>). For each route <I>r</I> in the input
file, print a line in the form:

<P>

<P>
<BR>

<TT>The nicest part of route </TT><I>r</I><TT> is between stops </TT><I>i</I><TT> and </TT><I>j</I>

<P>

<P>
<BR>
However, if the maximal sum is not positive, your program should print:

<P>

<P>
<BR>

<TT>Route </TT><I>r</I><TT> has no nice parts</TT>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
3
  -1
   6
10
   4
  -5
   4
  -3
   4
   4
  -4
   4
  -5
4
  -2
  -3
  -4
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
The nicest part of route 1 is between stops 2 and 3
The nicest part of route 2 is between stops 3 and 9
Route 3 has no nice parts
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
508||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Morse Mismatches</TITLE>
<META NAME="description" CONTENT="Morse Mismatches">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Morse Mismatches</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Samuel F. B. Morse is best known for the coding scheme that carries his name.
Morse code is still used in
international radio communication. The coding of text using Morse code is
straightforward. Each character (case is
insignificant) is translated to a predefined sequence of <EM>dits</EM> and <EM>dahs</EM> (the elements of Morse code). Dits are represented
as periods (``.'') and dahs are represented as hyphens or minus signs (``-'').
Each element is transmitted by sending a
signal for some period of time. A dit is rather short, and a dah is, in
perfectly formed code, three times as long as a
dit. A short silent space appears between elements, with a longer space
between characters. A still longer space
separates words. This dependence on the spacing and timing of elements
means that Morse code operators sometimes
do not send perfect code. This results in difficulties for the receiving
operator, but frequently the message can be decoded depending on context.

<P>

<P>
<BR>
In this problem we consider reception of words in Morse code without spacing
between letters. Without the spacing,
it is possible for multiple words to be coded the same. For example, if the
message ``dit dit dit'' were received, it
could be interpreted as ``EEE'', ``EI'', ``IE'' or ``S'' based on the coding
scheme shown in the sample input. To decide
between these multiple interpretations, we assume a particular context by
expecting each received word to appear in a dictionary.

<P>

<P>
<BR>
For this problem your program will read a table giving the encoding of letters
and digits into Morse code, a list of
expected words (<EM>context</EM>), and a sequence of words encoded in Morse code
(<EM>morse</EM>). These morse words may be flawed.
For each <EM>morse</EM> word, your program is to determine the matching word from
<EM>context</EM>, if any. If multiple words from
<EM>context</EM> match <EM>morse</EM>, or if no word matches perfectly, your program will display the best matching word and a mismatch indicator.

<P>

<P>
<BR>
If a single word from <EM>context</EM> matches <EM>morse</EM> perfectly, it will be displayed on a single line, by itself.

<!--If multiple
<EM>context</EM> words match <EM>morse</EM> perfectly, then select the matching word with the fewest characters. If this still results in
an ambiguous match, any of these matches may be displayed. -->If multiple <EM>context</EM> words exist for a given <EM>morse</EM>, the first
matching word will be displayed followed by an exclamation point (``!'').

<P>

<P>
<BR>
We assume only a simple case of errors in transmission in which elements may
be either truncated from the end of a
<EM>morse</EM> word or added to the end of a <EM>morse</EM> word. When no perfect matches for <EM>morse</EM> are found, display the word from
<EM>context</EM> that matches the longest prefix of <EM>morse</EM>, or has the fewest extra elements beyond those in <EM>morse</EM>. If multiple
words in <EM>context</EM> match using these rules, any of these matches may be displayed. Words that do not match perfectly
are displayed with a question mark (``?'') suffixed.

<P>

<P>
<BR>
The input data will only contain cases that fall within the preceding rules.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The Morse code table will appear first and consists of lines each containing
an uppercase letter or a digit C, zero or
more blanks, and a sequence of no more than six periods and hyphens giving
the Morse code for C. Blanks may
precede or follow the items on the line. A line containing a single
asterisk (``*''), possibly preceded or followed by
blanks, terminates the Morse code table. You may assume that there will be
Morse code given for every character that appears in the <EM>context</EM> section.

<P>

<P>
<BR>
The <EM>context</EM> section appears next, with one word per line, possibly preceded and followed by blanks. Each word in
<EM>context</EM> will contain no more than ten characters. No characters other than
upper case letters and digits will appear.
Thered will be at most 100 <EM>context</EM> words. A line containing only a single
asterisk (``*''), possibly preceded or
followed by blanks, terminates the <EM>context</EM> section.

<P>

<P>
<BR>
The remainder of the input contains morse words separated by blanks or
end-of-line characters. A line containing
only a single asterisk (``*''), possibly preceded or followed by blanks,
terminates the input. No <EM>morse</EM> word will have
more than eighty (80) elements.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input <EM>morse</EM> word, display the appropriate matching word from <EM>context</EM> followed by an exclamation mark
(``!'') or question mark (``?'') if appropriate. Each word is to appear on
a separate line starting in column one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
A       .-
B       -...
C       -.-.
D       -..
E       .
F       ..-.
G       --.
H       ....
I       ..
J       .---
K       -.-
L       .-..
M       --
N       -.
O       ---
P       .--.
Q       --.-
R       .-.
S       ...
T       -
U       ..-
V       ...-
W       .--
X       -..-
Y       -.--
Z       --..
0       ------
1       .-----
2       ..---
3       ...--
4       ....-
5       .....
6       -....
7       --...
8       ---..
9       ----.
*
AN
EARTHQUAKE
EAT
GOD
HATH
IM
READY
TO
WHAT
WROTH
*
.--.....--   .....--....
--.----..   .--.-.----..
.--.....--   .--.
..-.-.-....--.-..-.--.-.
..--   .-...--..-.--
----        ..--
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
WHAT
HATH
GOD
WROTH?
WHAT
AN
EARTHQUAKE
EAT!
READY
TO
EAT!
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
509||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>RAID!</TITLE>
<META NAME="description" CONTENT="RAID!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
RAID!</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
RAID (Redundant Array of Inexpensive Disks) is a technique which uses multiple
disks to store data. By storing the
data on more than one disk, RAID is more fault tolerant than storing data on
a single disk. If there is a problem with
one of the disks, the system can still recover the original data provided that
the remaining disks do not have corresponding problems.

<P>

<P>
<BR>
One approach to RAID breaks data into blocks and stores these blocks on all
but one of the disks. The remaining
disk is used to store the parity information for the data blocks. This scheme
uses <EM>vertical parity</EM> in which bits in a
given position in data blocks are exclusive ORed to form the corresponding
parity bit. The parity block moves
between the disks, starting at the first disk, and moving to the next one
in order. For instance, if there were five
disks and 28 data blocks were stored on them, they would be arranged as
follows:

<P>

<P><P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT" COLSPAN=1>Disk 1</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 2</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 3</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 4</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 5</TD>
</TR>
<TR><TD ALIGN="LEFT"><B> Parity for 1-4</B></TD>
<TD ALIGN="LEFT">Data block 1</TD>
<TD ALIGN="LEFT">Data block 2</TD>
<TD ALIGN="LEFT">Data block 3</TD>
<TD ALIGN="LEFT">Data block 4</TD>
</TR>
<TR><TD ALIGN="LEFT">Data block 5</TD>
<TD ALIGN="LEFT"><B> Parity for 5-8</B></TD>
<TD ALIGN="LEFT">Data block 6</TD>
<TD ALIGN="LEFT">Data block 7</TD>
<TD ALIGN="LEFT">Data block 8</TD>
</TR>
<TR><TD ALIGN="LEFT">Data block 9</TD>
<TD ALIGN="LEFT">Data block 10</TD>
<TD ALIGN="LEFT"><B> Parity for 9-12</B></TD>
<TD ALIGN="LEFT">Data block 11</TD>
<TD ALIGN="LEFT">Data block 12</TD>
</TR>
<TR><TD ALIGN="LEFT">Data block 13</TD>
<TD ALIGN="LEFT">Data block 14</TD>
<TD ALIGN="LEFT">Data block 15</TD>
<TD ALIGN="LEFT"><B> Parity for 13-16</B></TD>
<TD ALIGN="LEFT">Data block 16</TD>
</TR>
<TR><TD ALIGN="LEFT">Data block 17</TD>
<TD ALIGN="LEFT">Data block 18</TD>
<TD ALIGN="LEFT">Data block 19</TD>
<TD ALIGN="LEFT">Data block 20</TD>
<TD ALIGN="LEFT"><B> Parity for 17-20</B></TD>
</TR>
<TR><TD ALIGN="LEFT"><B> Parity for 21-24</B></TD>
<TD ALIGN="LEFT">Data block 21</TD>
<TD ALIGN="LEFT">Data block 22</TD>
<TD ALIGN="LEFT">Data block 23</TD>
<TD ALIGN="LEFT">Data block 24</TD>
</TR>
<TR><TD ALIGN="LEFT">Data block 25</TD>
<TD ALIGN="LEFT"><B> Parity for 25-28</B></TD>
<TD ALIGN="LEFT">Data block 26</TD>
<TD ALIGN="LEFT">Data block 27</TD>
<TD ALIGN="LEFT">Data block 28</TD>
</TR>
</TABLE></DIV>

<P>

<P>
<BR>
With this arrangement of disks, a block size of two bits and even parity, the
hexadecimal sample data 6C7A79EDFC
(01101100 01111010 01111001 11101101 11111100 in binary) would be stored as:

<P>

<P><P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT" COLSPAN=1>Disk 1</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 2</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 3</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 4</TD>
<TD ALIGN="LEFT" COLSPAN=1>Disk 5</TD>
</TR>
<TR><TD ALIGN="LEFT"><B> 00</B></TD>
<TD ALIGN="LEFT">01</TD>
<TD ALIGN="LEFT">10</TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">00</TD>
</TR>
<TR><TD ALIGN="LEFT">01</TD>
<TD ALIGN="LEFT"><B> 10</B></TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">10</TD>
<TD ALIGN="LEFT">10</TD>
</TR>
<TR><TD ALIGN="LEFT">01</TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT"><B> 01</B></TD>
<TD ALIGN="LEFT">10</TD>
<TD ALIGN="LEFT">01</TD>
</TR>
<TR><TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">10</TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT"><B> 11</B></TD>
<TD ALIGN="LEFT">01</TD>
</TR>
<TR><TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">11</TD>
<TD ALIGN="LEFT">00</TD>
<TD ALIGN="LEFT"><B> 11</B></TD>
</TR>
</TABLE></DIV>

<P>

<P>
<BR>
If a block becomes unavailable, its information can still be retrieved using
the information on the other disks. For
example, if the first bit of the first block of disk 3 becomes unavailable,
it can be reconstructed using the
corresponding parity and data bits from the other four disks. We know that
our sample system uses even parity:

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
0 \oplus 0 \oplus ? \oplus 1 \oplus 0 = 0
\end{displaymath} -->


<IMG
 WIDTH="152" HEIGHT="28"
 SRC="http://uva.onlinejudge.org/external/5/509img1.gif" 
 ALT="\begin{displaymath}0 \oplus 0 \oplus ? \oplus 1 \oplus 0 = 0\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
So the missing bit must be 1.

<P>

<P>
<BR>
An arrangement of disks is invalid if a parity error is detected, or if any
data block cannot be reconstructed because
two or more disks are unavailable for that block.

<P>

<P>
<BR>
Write a program to report errors and recover information from RAID disks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several disk sets.

<P>

<P>
<BR>
Each disk set has 3 parts. The first part of the disk set contains three
integers on one line: the first integer <I>d</I>,

<!-- MATH: $2 \le d \le 6$ -->
<IMG
 WIDTH="77" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/509img1.gif" 
 ALT="$2 \le d \le 6$">,
is the number of disks, the second integer <I>s</I>, 
<!-- MATH: $1 \le s \le 64$ -->
<IMG
 WIDTH="85" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/509img1.gif" 
 ALT="$1 \le s \le 64$">,
is the
size of each block in bits, and the third
integer <I>b</I>, 
<!-- MATH: $1 \le b \le 100$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/509img1.gif" 
 ALT="$1 \le b \le 100$">,
is the total number of data and parity blocks on
each disk. The second part of the disk set is a
single letter on a line, either ``<TT>E</TT>'' signifying even parity or ``<TT>O</TT>''
signifying odd parity. The third part of the disk set
contains <I>d</I> lines, one for each disk, each holding 
<!-- MATH: $s \times b$ -->
<IMG
 WIDTH="41" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/509img1.gif" 
 ALT="$s \times b$">
characters
representing the bits on the disk, with the most
significant bits first. Each bit will be specified as ``<TT>0</TT>'' or ``<TT>1</TT>'' if it holds valid data, or ``<TT>x</TT>'' if that bit is unavailable.
The end of input will be a disk set with <I>d</I> = 0. There will be no other data
for this set which should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each disk set in the input, display the number of the set and whether
the set is valid or invalid. If the set is valid,
display the recovered data bits in hexadecimal. If necessary, add extra ``0''
bits at the end of the recovered data so the
number of bits is always a multiple of 4. All output shall be appropriately
labeled.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5 2 5
E
0001011111
0110111011
1011011111
1110101100
0010010111
3 2 5
E
0001111111
0111111011
xx11011111
3 5 1
O
11111
11xxx
x1111
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Disk set 1 is valid, contents are: 6C7A79EDFC
Disk set 2 is invalid.
Disk set 3 is valid, contents are: FFC
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
510||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Optimal Routing</TITLE>
<META NAME="description" CONTENT="Optimal Routing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Optimal Routing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Acme Courier Message, Inc. (ACM) is planning to add a service for delivery of
documents and small parcels. ACM
will group parcels and documents in bags, which will be transported by car
among different stations for intermediate
handling and routing prior to final delivery. ACM is in the initial stages of
determining the workload requirements for transporting bags among stations.

<P>

<P>
<BR>
When a driver delivers a bag, she will (if possible) locate and pick up
another bag for delivery to another station,
continuing in this manner until there are no more deliverable bags. A
deliverable bag is one that can be picked up
and delivered to its destination by a driver prior to the end of her workday.
The total time for a driver's workday
begins with the time of pickup of her first bag and includes the time she
spends delivering bags, the time in transit,
and the time waiting at stations for deliverable bags. ACM would like its
drivers to spend the maximum amount of
time possible delivering the bags between stations within a normal workday.
In addition, ACM wants drivers' final
destinations to be the same as the stations where they started whenever
possible.

<P>

<P>
<BR>
You must write a program to determine optimal driver routes for several ACM
scenarios. Each scenario describes
bags and stations for a single workday. In this simple version, routes for
all drivers will originate from the same
station, which we call station A. Optimal routes are subject to the following
restrictions.

<P>
<DL COMPACT>
<DT>1.
<DD>A driver's normal workday will not exceed 10 hours.
<DT>2.
<DD>Drivers will travel from one station to another with one bag, if one is available for pickup. If there are no
deliverable bags at a station, the driver will proceed to another station that has a scheduled deliverable bag to
continue her route.
<DT>3.
<DD>If several different routes with a final destination of station A are possible, the one requiring the longest
cumulative delivery time is optimal. If there are more than one with the longest cumulative delivery time, the
one with the shortest total workday time is optimal.
<DT>4.
<DD>Whenever possible, the final destination of a driver is station A. However, if it is impossible to schedule a final
destination of station A, then the route requiring the longest cumulative delivery time is optimal. If there are
more than one with the longest cumulative delivery time, the one with the shortest total workday time is
optimal.
<DT>5.
<DD>Every bag that originates from station A will be delivered. (Some bags originating at other stations will not
necessarily be delivered.) No bag will be delivered more than once.
</DL>

<P>
The optimal route for the driver who picks up the first available deliverable
bag at station A is completely
determined before any consideration of subsequent drivers. The optimal route of
the second driver, who picks up the
next available deliverable bag at station A that has not already been
scheduled for delivery by the first driver, is
completely determined next. The optimal route determination continues in this
manner until all the bags that can be
delivered have been scheduled for delivery. Undeliverable bags will be identified
and reported. Throughout the entire
process, each driver will be routed according to the bags not already
scheduled earlier for delivery. In all scenarios the
time to travel from station A to any other station is 10 hours or less.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input for each scenario comes in two parts: a list of the bags and a table
of times required to drive between stations.
The first line in each scenario consists of an integer <I>n</I> representing the
number of bags to be delivered. The next <I>n</I>
lines describe each bag in the following format:

<P>

<P>
<BR>

<EM>id origin destination time</EM>

<P>

<P>
<BR>
where <EM>id</EM> is the bag identification number (integer), <EM>origin</EM> and <EM>destination</EM>
are the station labels for the bag's origin
and destination (uppercase letters), and <EM>time</EM> is when the bag is available
for transport. The format for <EM>time</EM> is <EM>hhmm</EM>,
where <EM>hh</EM> and <EM>mm</EM> are integers representing time on a 24-hour clock varying from 0001 to 2400. Data on a line are
separated by single blanks. Each station is labeled with a unique uppercase
letter. Bags may appear in any time order
in the list. The end of input is signified by a scenario for which the number
of bags is 0.

<P>
Input data for the table of driving times consist of lines of the form:

<P>

<P>
<BR>

<EM>station1 station2 time</EM>

<P>

<P>
<BR>
where <EM>station1</EM> and <EM>station2</EM> are uppercase letters and <EM>time</EM> is as described earlier. Transit times between stations are
listed for all stations which are included in the list of bags. Transit
times are bidirectional. Different scenarios are completely unrelated.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output for each scenario begins by identifying the scenario by number
(<TT>Scenario 1</TT>, <TT>Scenario 2</TT>, etc.). Following that
is a listing of each driver's optimal route. Each route begins with the
number of the driver (<TT>Driver 1</TT>, <TT>Driver 2</TT>, etc.)
and then a summary of the driver's route including all transits between
stations in the order in which the stations
were visited. For transits which deliver a bag, display the bag identification
number and its origin and destination
stations. For transits which do not deliver a bag, display the origin and
destinations stations.

<P>
Output for each driver is
summarized by the total delivery time and the total workday time in the form
<EM>hhmm</EM>, following the time format
specified in the input of time values. If two different routes for a driver
are optimal, then output may show either
one. The final section of output for a scenario will include a listing of all
undeliverable bags or a statement
indicating successful delivery of all bags. 

<P>

<P>
<BR>
Each section of a scenario and
each scenario should be separated by a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7
1 A B 0800
3 A C 0850
2 B C 0700
6 B D 1250
5 B C 1400
7 C A 1600
8 D C 1130
A B 0400
A C 0135
A D 0320
B C 0345
B D 0120
C D 0200
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario 1

Driver 1
  Bag #1 from station A to station B
  Bag #2 from station B to station C
  Bag #7 from station C to station A
  Total delivery time: 0920
  Total workday time: 0935

Driver 2
  Bag #3 from station A to station C
   --&gt;Transit without delivery from station C to station B
  Bag #5 from station B to station C
  Total delivery time: 0520
  Total workday time: 0905

Undelivered Bags:
  Bag #8 remains at station D
  Bag #6 remains at station B
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
511||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Do You Know the Way to San Jose?</TITLE>
<META NAME="description" CONTENT="Do You Know the Way to San Jose?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Do You Know the Way to San Jose?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1-->

<P>
The Internet now offers a variety of interactive map facilities, so that
users can see either an overview map of a large
geographic region or can ``zoom in'' to a specific street, sometimes even a
specific building, on a much more detailed
map. For instance, downtown San Jose might appear in a map of California, a
map of Santa Clara county, and a
detailed street map.

<P>

<P>
<BR>
Suppose you have a large collection of rectangular maps and you wish to
design a browsing facility that will process
a sequence of map requests for locations at various levels of map detail.
Locations are expressed using <EM>location
names</EM>. Each location name has a unique pair of real coordinates (<I>x</I>,<I>y</I>). Maps
are unique, labeled with identifying map
names, and defined by two pairs of real coordinates-- 
<!-- MATH: $(x_1 ,y_1)
(x_2 ,y_2 )$ -->
(<I>x</I><SUB>1</SUB> ,<I>y</I><SUB>1</SUB>)
(<I>x</I><SUB>2</SUB> ,<I>y</I><SUB>2</SUB> )--representing opposite corners of the map. All
map edges are parallel to the standard Cartesian <I>x</I> and <I>y</I> axes. A map and a
location can have the same name. The
<EM>aspect ratio</EM> of a map is the ratio of its height to its width (where width is measured in the <I>x</I> direction and height is measured in the <I>y</I> direction).

<P>

<P>
<BR>
The level of detail of a map can be approximated by using the rectangular area
represented by the map; i.e., assume
that a map covering a smaller area contains more detailed information. Maps can
overlap one another. If a location
(<I>x</I>,<I>y</I>) lies within two or more maps having equal areas, the preferred map (at
that level of detail) is the one in which
the location is nearest the center of the map. If the location is equidistant
from the centers of two overlapping maps
of the same area, then the preferred map (at that level of detail) is the one
whose aspect ratio is nearest to the aspect
ratio of the browser window, which is 0.75. If this still does not break the
tie, then the preferred map is the one in
which the location is furthest from the lower right corner of the map (this
heuristic is intended to minimize the need
for scrolling in the user's browser window). Finally, if there is still a tie,
then the preferred map is the one containing the smallest <I>x</I>-coordinate.

<P>

<P>
<BR>
The <EM>maximum detail level</EM> available for a given location is the maximal number of maps of different areas that
contain the location. Clearly, different locations can have different maximum
detail levels. The map at detail <I>i</I> for the
location is the map with the <I>i</I>th largest area among a maximal set of maps of
the distinct area containing the
location. Thus, the map at detail level 1 for the location will be the least
detailed (largest area) map containing the
location and the map at the maximum detail level will be the most detailed
(smallest area) map containing the location.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of a set of maps, locations, and requests; it is
organized as follows:

<P>
<UL>
<LI>The word ``<TT>MAPS</TT>'', in all uppercase letters and on a line by itself, introduces a set of one or more maps.
Following the set heading, each map is described by a single line consisting of a map name (an alphabetic string
with no leading, trailing, or embedded blanks) and two real coordinate pairs--
<!-- MATH: $x_1\mbox{ }y_1\mbox{ }x_2\mbox{ }y_2$ -->
<IMG
 WIDTH="89" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/511img1.gif" 
 ALT="$x_1\mbox{ }y_1\mbox{ }x_2\mbox{ }y_2$">--representing opposite
corners of the map.
<LI>The word ``<TT>LOCATIONS</TT>'', in all uppercase letters and on a line by itself, introduces a set of one or more
locations. Following this heading, each location is described by a line consisting of a location name (an alphabetic
string with no leading, trailing, or embedded blanks) and a real coordinate pair--
<!-- MATH: $x\mbox{ }y$ -->
<IMG
 WIDTH="30" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/511img1.gif" 
 ALT="$x\mbox{ }y$">--representing the center of the location.
<LI>The word ``<TT>REQUESTS</TT>'', in all uppercase letters and on a line by itself, introduces a set of zero or more requests.
Following this heading, each request is described by a line consisting of a location name (an alphabetic string with
no leading, trailing, or embedded blanks) followed by a positive integer representing the desired detail level for that
location.
<LI>The word ``<TT>END</TT>'', in all uppercase and on a line by itself, terminates the file.
</UL>

<P>
All map and location data preceding the requests are valid. There will be
no duplicate maps. The result of processing
a valid request is the name of the map containing the given location at the given
detail level (using the tie-breaking
rules described above). Invalid requests can result from requesting unknown
location names, locations that do not
appear in any map, or detail levels that exceed the number of maps of
different areas containing the location.

<P>

<P>
<BR>
The following example should illustrate all these definitions:

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each request must be echoed to the output. If the request is valid, display
the name of the map satisfying the request.
If the location is not on a map, display a message to that effect. If the
location is on the map but the detail level is
too large, display the name of the map of the smallest available area
(largest possible detail level).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
MAPS
BayArea -6.0 12.0 -11.0 5.0
SantaClara 4.0 9.0 -3.5 2.5
SanJoseRegion -3.0 10.0 11.0 3.0
CenterCoast -5.0 11.0 1.0 -8.0
SanMateo -5.5 4.0 -12.5 9.0
NCalif -13.0 -7.0 13.0 15.0
LOCATIONS
Monterey -4.0 2.0
SanJose -1.0 7.5
Fresno 7.0 0.1
SanFrancisco -10.0 8.6
SantaCruz -4.0 2.0
SanDiego 13.8 -19.3
REQUESTS
SanJose 3
SanFrancisco 2
Fresno 2
Stockton 1
SanDiego 2
SanJose 4
SantaCruz 3
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
SanJose at detail level 3 using SanJoseRegion
SanFrancisco at detail level 2 using BayArea
Fresno at detail level 2 no map at that detail level; using NCalif
Stockton at detail level 1 unknown location
SanDiego at detail level 2 no map contains that location
SanJose at detail level 4 using SantaClara
SantaCruz at detail level 3 no map at that detail level; using CenterCoast
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
512||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Spreadsheet Tracking</TITLE>
<META NAME="description" CONTENT="Spreadsheet Tracking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Spreadsheet Tracking</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Data in spreadsheets are stored in cells, which are organized in rows (<I>r</I>) and
columns (<I>c</I>). Some operations on
spreadsheets can be applied to single cells (<I>r</I>,<I>c</I>), while others can be
applied to entire rows or columns. Typical cell
operations include inserting and deleting rows or columns and exchanging cell
contents.

<P>

<P>
<BR>
Some spreadsheets allow users to mark collections of rows or columns for
deletion, so the entire collection can be
deleted at once. Some (unusual) spreadsheets allow users to mark collections
of rows or columns for insertions too.
Issuing an insertion command results in new rows or columns being inserted
before each of the marked rows or
columns. Suppose, for example, the user marks rows 1 and 5 of the spreadsheet
on the left for deletion. The
spreadsheet then shrinks to the one on the right.

<P>

<P>
<BR>

<table><tr><td>

<IMG
 WIDTH="392" HEIGHT="232" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{r\vert r\vert ...
...4 & 35 & 36 & 22 & 38 & 39 & 40 & 41
\\ \cline{2-10}
\end{tabular}\end{center}}$">

<td>

<IMG
 WIDTH="369" HEIGHT="189" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\begin{tabular}{r\vert r\vert...
...4 & 35 & 36 & 22 & 38 & 39 & 40 & 41
\\ \cline{2-10}
\end{tabular}\end{center}}$">

</table>

<br clear=all>
<P>
If the user subsequently marks columns 3, 6, 7, and 9 for deletion, the
spreadsheet shrinks to this.

<P>

<P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="RIGHT" COLSPAN=1><IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\searrow$"></TD>
<TD ALIGN="CENTER" COLSPAN=1>1</TD>
<TD ALIGN="CENTER" COLSPAN=1>2</TD>
<TD ALIGN="CENTER" COLSPAN=1>3</TD>
<TD ALIGN="CENTER" COLSPAN=1>4</TD>
<TD ALIGN="CENTER" COLSPAN=1>5</TD>
</TR>
<TR><TD ALIGN="RIGHT">1</TD>
<TD ALIGN="RIGHT">2</TD>
<TD ALIGN="RIGHT">24</TD>
<TD ALIGN="RIGHT">8</TD>
<TD ALIGN="RIGHT">22</TD>
<TD ALIGN="RIGHT">16</TD>
</TR>
<TR><TD ALIGN="RIGHT">2</TD>
<TD ALIGN="RIGHT">18</TD>
<TD ALIGN="RIGHT">19</TD>
<TD ALIGN="RIGHT">21</TD>
<TD ALIGN="RIGHT">22</TD>
<TD ALIGN="RIGHT">25</TD>
</TR>
<TR><TD ALIGN="RIGHT">3</TD>
<TD ALIGN="RIGHT">24</TD>
<TD ALIGN="RIGHT">25</TD>
<TD ALIGN="RIGHT">67</TD>
<TD ALIGN="RIGHT">22</TD>
<TD ALIGN="RIGHT">71</TD>
</TR>
<TR><TD ALIGN="RIGHT">4</TD>
<TD ALIGN="RIGHT">16</TD>
<TD ALIGN="RIGHT">12</TD>
<TD ALIGN="RIGHT">10</TD>
<TD ALIGN="RIGHT">22</TD>
<TD ALIGN="RIGHT">58</TD>
</TR>
<TR><TD ALIGN="RIGHT">5</TD>
<TD ALIGN="RIGHT">33</TD>
<TD ALIGN="RIGHT">34</TD>
<TD ALIGN="RIGHT">36</TD>
<TD ALIGN="RIGHT">22</TD>
<TD ALIGN="RIGHT">40</TD>
</TR>
</TABLE></DIV>

<P>
If the user marks rows 2, 3 and 5 for insertion, the spreadsheet grows to
the one on the left. If the user then marks
column 3 for insertion, the spreadsheet grows to the one in the middle.
Finally, if the user exchanges the contents of
cell (1,2) and cell (6,5), the spreadsheet looks like the one on the right.

<P>

<P>
<BR>

<table>
<tr><td>

<IMG
 WIDTH="223" HEIGHT="254" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\textstyle \parbox{.33\textwidth}{
\begin{center}
\begin{tabular}{r\vert r\vert...
...cline{2-6}
8 & 33 & 34 & 36 & 22 & 40
\\ \cline{2-6}
\end{tabular}\end{center}}$">

<td>

<IMG
 WIDTH="250" HEIGHT="254" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\textstyle \parbox{.33\textwidth}{
\begin{center}
\begin{tabular}{r\vert r\vert...
...ine{2-7}
8 & 33 & 34 & & 36 & 22 & 40
\\ \cline{2-7}
\end{tabular}\end{center}}$">
<td>
<IMG
 WIDTH="251" HEIGHT="254" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\textstyle \parbox{.32\textwidth}{
\begin{center}
\begin{tabular}{r\vert r\vert...
...ine{2-7}
8 & 33 & 34 & & 36 & 22 & 40
\\ \cline{2-7}
\end{tabular}\end{center}}$">
</table>
<br clear=all>
<P>
You must write tracking software that determines the final location of data
in spreadsheets that result from row,
column, and exchange operations similar to the ones illustrated here.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a sequence of spreadsheets, operations on those
spreadsheets, and queries about them. Each
spreadsheet definition begins with a pair of integers specifying its initial
number of rows (<I>r</I>) and columns (<I>c</I>),
followed by an integer specifying the number (<I>n</I>) of spreadsheet operations.
Row and column labeling begins with 1.
The maximum number of rows or columns of each spreadsheet is limited to 50.
The following n lines specify the
desired operations.

<P>

<P>
<BR>
An operation to exchange the contents of cell 
<!-- MATH: $(r_1, c_1)$ -->
(<I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB>) with the contents
of cell 
<!-- MATH: $(r_2, c_2)$ -->
(<I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB>) is given by:

<P>

<P>
<BR>

<TT>EX</TT> <I>r</I><SUB>1</SUB> <I>c</I><SUB>1</SUB> <I>r</I><SUB>2</SUB> <I>c</I><SUB>2</SUB>

<P>

<P>
<BR>
The four insert and delete commands--<TT>DC</TT> (delete columns), <TT>DR</TT> (delete rows),
<TT>IC</TT> (insert columns), and <TT>IR</TT> (insert rows) are given by:

<P>

<P>
<BR>

&lt;<I>command</I>&gt; <I>A</I> <I>x</I><SUB>1</SUB> <I>x</I><SUB>2</SUB> <IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$\dots$">
<I>x</I><SUB><I>A</I></SUB>

<P>

<P>
<BR>
where &lt;<I>command</I>&gt; is one of the four commands; <I>A</I> is a positive integer less
than 10, and 
<!-- MATH: $x_1, \dots, x_A$ -->
<IMG
 WIDTH="82" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/512img1.gif" 
 ALT="$x_1, \dots, x_A$">
are the labels of
the columns or rows to be deleted or inserted before. For each insert and
delete command, the order of the rows or
columns in the command has no significance. Within a single delete or insert
command, labels will be unique.

<P>

<P>
<BR>
The operations are followed by an integer which is the number of queries for
the spreadsheet. Each query consists of
positive integers <I>r</I> and <I>c</I>, representing the row and column number of a cell
in the original spreadsheet. For each
query, your program must determine the current location of the data that
was originally in cell (<I>r</I>, <I>c</I>). The end of
input is indicated by a row consisting of a pair of zeros for the spreadsheet
dimensions.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each spreadsheet, your program must output its sequence number (starting
at 1). For each query, your program
must output the original cell location followed by the final location of
the data or the word <TT>GONE</TT> if the contents of
the original cell location were destroyed as a result of the operations.
Separate output from different spreadsheets with a blank line.

<P>

<P>
<BR>
The data file will not contain a sequence of commands that will cause the
spreadsheet to exceed the maximum size.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7 9
5
DR   2  1 5
DC  4  3 6 7 9
IC  1  3
IR  2  2 4
EX 1 2 6 5
4
4 8
5 5
7 8
6 5
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Spreadsheet #1
Cell data in (4,8) moved to (4,6)
Cell data in (5,5) GONE
Cell data in (7,8) moved to (7,6)
Cell data in (6,5) moved to (1,2)
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
513||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Window Frames</TITLE>
<META NAME="description" CONTENT="Window Frames">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Window Frames</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Elements of graphical user interfaces include such things as buttons,
text boxes, scroll bars, drop-down
menus and scrollable list boxes. Each is considered to be a special kind
of object called a widget. Where
these widgets are placed, how much space they are allocated, and how they
change size constitutes the geometry of a window.

<P>

<P>
<BR>
One geometry management scheme uses special rectangular widgets called
<EM>frames</EM> to contain and thus
group other widgets. A frame is a <EM>parent</EM> if some or all of its own space
is allocated to additional
frames, which are its <EM>children</EM>. The frame which has no parent is called
the <EM>root frame</EM>; its size is
specified by the user (in the input data). This problem requires that you
determine the allocation of
space to, and the position of frames placed in root frames of various sizes.

<P>

<P>
<BR>
The <EM>cavity</EM> in a frame is the space in the frame that is not occupied by
its children. When a new child
frame is created, it is allocated an entire horizontal strip along the top
or bottom edge of the cavity
(this is called a <EM>horizontal child</EM>) or an entire vertical strip along
the right or left edge of the cavity
(this is called a <EM>vertical child</EM>). Thus, as a result of creating a new child,
the cavity becomes smaller,
but it remains rectangular. The process of placing children inside the
enclosing frame is called <EM>packing</EM>.
Children are positioned in the cavity according to the order in which they
are packed.

<P>

<P>
<BR>
The figure below shows the child frames of a parent frame. Frame 1 along the
right edge was packed
first, then frame 2 along the bottom edge, frame 3 along the left edge, and
finally frame 4 along the
right edge. The cavity, shown in white, contains available space for packing
subsequent child frames.

<P>
<DIV ALIGN="CENTER">

<img src=p513a.gif>
</DIV>

<P>
Each frame covers a rectangular grid of pixels. If the root frame covers <I>c</I>
columns and <I>r</I> rows of pixels,
then the pixel in the top left corner is at coordinate (0,0) and the pixel
in the lower right corner is at
coordinate 
<!-- MATH: $(c-1, r-1)$ -->
(<I>c</I>-1, <I>r</I>-1). The position of a frame is specified by the coordinates
of its upper left corner
pixel and its lower right corner pixel.

<P>

<P>
<BR>
Each frame has minimum dimensions determined by an input parameter d and
the minimum dimensions
of its children. A frame must be at least large enough to pack all of its
children. The minimum
dimensions of each frame are determined as follows:

<P>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT">Packing Side</TD>
<TD ALIGN="LEFT">Frame Type</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Minimum Width</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Minimum Height</TD>
</TR>
<TR><TD ALIGN="LEFT">Right or left</TD>
<TD ALIGN="LEFT">Vertical</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Maximum of <I>d</I> and the width 
<P>
necessary for the frame's 
<P>
children</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Maximum of 1 and the height 
<P>
necessary for the frame's 
<P>
children</TD>
</TR>
<TR><TD ALIGN="LEFT">Bottom or top</TD>
<TD ALIGN="LEFT">Horizontal</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Maximum of 1 and the width 
<P>
necessary for the frame's 
<P>
children</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=151>Maximum of <I>d</I> and the height 
<P>
necessary for the frame's 
<P>
children</TD>
</TR>
</TABLE></DIV>

<P>
When a frame is larger than the minimum dimensions
just specified, the additional interior space is
apportioned to its children and/or its cavity. Each frame has an expansion
flag (which is an input
parameter) that, when set, indicates a vertical frame can grow wider or a
horizontal frame can grow
taller. For example, a frame with its expansion flag set, allocated space
along the top of the cavity,
can grow taller, with the extra height extending downward.

<P>

<P>
<BR>
The distribution of additional horizontal space in a frame is handled as
follows. Let <I>x</I> be the number of
horizontal pixels by which the parent frame exceeds its minimum width.  If <I>n</I>,
the number of the
vertical children in the frame with their expansion flags set, is non-zero,
then the <I>x</I> pixels are
distributed among the n vertical children. If <I>q</I> is the quotient of <I>x</I> divided
by <I>n</I> and <I>r</I> is the remainder,
then each of the <I>n</I> vertical frames grows wider by <I>q</I> pixels and the first <I>r</I>
of them that were packed in
the frame grow wider by 1 pixel in addition to the <I>q</I>. If <I>n</I> is zero, then none of the vertical children grow
wider, and the <I>x</I> pixels are added to the width of the cavity. In either case,
the horizontal children in
the enlarged frame become wider, if necessary, in such a manner as to ensure
the single cavity remains rectangular.

<P>

<P>
<BR>
The distribution of additional vertical space in a parent frame to its
children and/or its cavity is
handled in a manner similar to that used to distribute additional horizontal
space, with the
appropriate change in direction of growth. Only the horizontal children with
their expansion flags set
grow taller to utilize the additional vertical pixels, and if none of the
horizontal children have their
expansion flags set, the additional pixels are added to the height of the
cavity. As expected, the
vertical children also become taller, if necessary, to ensure the rectangular
and uniqueness properties of the cavity.

<P>

<P>
<BR>
In the next illustration, the root frame on the left has been enlarged to
yield the one on the right.
Frames 6 and 7 are horizontal and vertical children, respectively, of frame 5.
Only frames 4, 6 and 7
have their expansion flags set. In the frame on the right, the additional
horizontal and vertical space
has been distributed to the children so as to result in the growth indicated
by the arrows. Note that
frame 7 does not change size because no room is available for expansion in
its parent, frame 5. Frame 6 does not change size for the same reason.

<P>
<DIV ALIGN="CENTER">

<img src=p513b.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a sequence of root frames, their descendants, and
different potential root frame sizes. Each item
in the sequence corresponding to a single root has the following format:

<P>
<PRE><TT>
<I>M</I> <I>N</I> <I>M</I> is the total number of frames excluding the root. <I>N</I> is the number of different  
root sizes (both are positive integers).
</TT></PRE>

<P>
followed by <I>M</I> lines of the form:

<P>
<PRE><TT>
<I>n</I> <I>p</I> <I>s</I> <I>d</I> <I>e</I> where: 		 <I>n</I> is the name of the frame (a positive integer);   
<I>p</I> is the name of the parent (where 0 is the root frame); 
<I>s</I> is one of the characters ``<TT>L</TT>'', ``<TT>R</TT>'', ``<TT>T</TT>'', and ``<TT>B</TT>'' indicating packing side; 
<I>d</I> is the minimum dimension (a positive integer); and 
<I>e</I> is 0 or 1, where 0 means the expansion flag is cleared, 1 means it is set;
</TT></PRE>

<P>
followed by <I>N</I> lines of the form:

<P>
<PRE><TT>
<I>c</I> <I>r</I> where <I>c</I> is the number of columns of pixels, and <I>r</I> is the number of rows of pixels  
in the root frame (both positive integers).
</TT></PRE>

<P>

<P>
<BR>
Root frames are not listed. Frame numbers for a given root are distinct.
Children of a frame will not appear in the
input before their parents. Frames are packed in the order in which they
appear in the input. The end of input is
signified by a line with <I>M</I> and <I>N</I> both 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Begin the output of each root by writing its record number (1 for the first,
2 for the second, etc.). For each size
corresponding to that root, write the size (rows <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/513img1.gif" 
 ALT="$\times$">
columns) and then
list the name of each frame along with the
coordinates of its upper left and lower right corners. List the frames in
the order in which they are packed in their
parents, with the root's first child and its descendants first, the second
child and its descendants second, and so on. If
the root size is too small to pack its frames, print the message ``is
too small'' instead of attempting to list the
frames. Separate output for different root sizes by a line of dashes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7 1
1 0 R 50 0
2 0 B 10 0
3 0 L 40 0
4 0 R 20 1
5 0 T 30 0
6 5 R 20 0
7 5 L 10 1
1000 1000
2 2
1 0 R 100 1
2 0 T 30 1
100 50
200 100
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Root Frame #1
--------------------------------------------
  Display: 1000 X 1000
   Frame: 1  (950,0)  (999,999)
   Frame: 2  (0,990)  (949,999)
   Frame: 3  (0,0)  (39,989)
   Frame: 4  (70,0)  (949,989)
   Frame: 5  (40,0)  (69,29)
   Frame: 6  (50,0)  (69,29)
   Frame: 7  (40,0)  (49,29)
--------------------------------------------

Root Frame #2
--------------------------------------------
  Display: 100 X 50 is too small
--------------------------------------------
  Display: 200 X 100
   Frame: 1  (1,0)  (199,99)
   Frame: 2  (0,0)  (0,99)
--------------------------------------------
</PRE>

<P>
</BODY>
</HTML>

______________________________________________________
514||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Rails</TITLE>
<META NAME="description" CONTENT="Rails">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Rails</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There is a famous railway station in PopPush City. Country there is incredibly hilly. The
station was built in last century. Unfortunately, funds were extremely limited that time. It was
possible to establish only a surface track. Moreover, it turned out that the station could be only a
dead-end one (see picture) and due to lack of available space it could have only one track.

<P>
<DIV ALIGN="CENTER">
<BR>
<IMG ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/p514.gif" 
 ALT="\begin{picture}(6774,3429)(0,-10)
\put(1789.500,1357.500){\arc{3645.278}{4.7247}...
...tFigFont{14}{16.8}{\rmdefault}{\mddefault}{\updefault}Station}}}}}
\end{picture}">
<BR>
</DIV>

<P>
The local tradition is that every train arriving from the direction A continues in the direction
B with coaches reorganized in some way. Assume that the train arriving from the direction A has

<!-- MATH: $N \leÂŸ 1000$ -->
<IMG
 WIDTH="79" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/p514.gif" 
 ALT="$N \leÂŸ 1000$">
coaches numbered in increasing order 
<!-- MATH: $1, 2, \dots, N$ -->
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/p514.gif" 
 ALT="$1, 2, \dots, N$">.
The chief for train reorganizations
must know whether it is possible to marshal coaches continuing in the direction B so that their
order will be 
<!-- MATH: $a_1. a_2, \dots, a_N$ -->
<IMG
 WIDTH="104" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/p514.gif" 
 ALT="$a_1. a_2, \dots, a_N$">.
Help him and write a program that decides whether it is possible to
get the required order of coaches. You can assume that single coaches can be disconnected from the
train before they enter the station and that they can move themselves until they are on the track
in the direction B. You can also suppose that at any time there can be located as many coaches as
necessary in the station. But once a coach has entered the station it cannot return to the track in
the direction A and also once it has left the station in the direction B it cannot return back to the
station.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block except the last describes one train and
possibly more requirements for its reorganization. In the first line of the block there is the integer
<I>N</I> described above. In each of the next lines of the block there is a permutation of  
<!-- MATH: $1, 2, \dots, N$ -->
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/p514.gif" 
 ALT="$1, 2, \dots, N$">
The
last line of the block contains just 0.

<P>
The last block consists of just one line containing 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the lines with permutations in the input
file. A line of the output file contains <TT>Yes</TT> if it is possible to marshal the coaches in the order
required on the corresponding line of the input file. Otherwise it contains <TT>No</TT>. In addition, there is
one empty line after the lines corresponding to one block of the input file. There is no line in the
output file corresponding to the last ``null'' block of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
1 2 3 4 5
5 4 1 2 3
0
6
6 5 4 3 2 1
0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Yes
No

Yes
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
515||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>King</TITLE>
<META NAME="description" CONTENT="King">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
King</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Once, in one kingdom, there was a queen and that queen was expecting a baby. The queen
prayed: ``If my child was a son and if only he was a sound king.'' After nine months her child was
born, and indeed, she gave birth to a nice son.

<P>
Unfortunately, as it used to happen in royal families, the son was a little retarded. After many
years of study he was able just to add integer numbers and to compare whether the result is greater
or less than a given integer number. In addition, the numbers had to be written in a sequence and
he was able to sum just continuous subsequences of the sequence.

<P>
The old king was very unhappy of his son. But he was ready to make everything to enable his
son to govern the kingdom after his death. With regards to his son's skills he decided that every
problem the king had to decide about had to be presented in a form of a finite sequence of integer
numbers and the decision about it would be done by stating an integer constraint (i.e. an upper
or lower limit) for the sum of that sequence. In this way there was at least some hope that his son
would be able to make some decisions.

<P>
After the old king died, the young king began to reign. But very soon, a lot of people became
very unsatisfied with his decisions and decided to dethrone him. They tried to do it by proving
that his decisions were wrong.

<P>
Therefore some conspirators presented to the young king a set of problems that he had to
decide about. The set of problems was in the form of subsequences 
<!-- MATH: $S_i = \{a_{s_i}, a_{s_i+1}, \dots, a_{s_i+n_i}\}$ -->
<IMG
 WIDTH="213" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$S_i = \{a_{s_i}, a_{s_i+1}, \dots, a_{s_i+n_i}\}$">
of
a sequence 
<!-- MATH: $S = \{a_1, a_2, \dots, a_n\}$ -->
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$S = \{a_1, a_2, \dots, a_n\}$">.
The king thought a minute and then decided, i.e. he set for the sum

<!-- MATH: $a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i}$ -->
<IMG
 WIDTH="194" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i}$">
of each subsequence <I>S</I><SUB><I>i</I></SUB> an integer constraint <I>k</I><SUB><I>i</I></SUB> (i.e. 

<!-- MATH: $a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i} < k_i$ -->
<IMG
 WIDTH="231" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i} < k_i$">
or 
<!-- MATH: $a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i} > k_i$ -->
<IMG
 WIDTH="231" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$a_{s_i} + a_{s_i+1} + \dots + a_{s_i+n_i} > k_i$">
resp.) and declared these constraints as his decisions.

<P>
After a while he realized that some of his decisions were wrong. He could not revoke the
declared constraints but trying to save himself he decided to fake the sequence that he was given.
He ordered to his advisors to find such a sequence <I>S</I> that would satisfy the constraints he set. Help
the advisors of the king and write a program that decides whether such a sequence exists or not.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block except the last corresponds to one set of
problems and king's decisions about them. In the first line of the block there are integers <I>n</I>, and
<I>m</I> where 
<!-- MATH: $0 < n \leÂŸ 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$0 < n \leÂŸ 100$">
is length of the sequence <I>S</I> and 
<!-- MATH: $0 < m \leÂŸ 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/515img1.gif" 
 ALT="$0 < m \leÂŸ 100$">
is the number of subsequences
<I>S</I><SUB><I>i</I></SUB>. Next <I>m</I> lines contain particular decisions coded in the form of quadruples 
<!-- MATH: $s_i, n_i, o_i, k_i$ -->
<I>s</I><SUB><I>i</I></SUB>, <I>n</I><SUB><I>i</I></SUB>, <I>o</I><SUB><I>i</I></SUB>, <I>k</I><SUB><I>i</I></SUB>, where <I>o</I><SUB><I>i</I></SUB>
represents operator &gt; (coded as <TT>gt</TT>) or operator &lt; (coded as <TT>lt</TT>) respectively. The symbols <I>s</I><SUB><I>i</I></SUB>, <I>n</I><SUB><I>i</I></SUB>
and <I>k</I><SUB><I>i</I></SUB> have the meaning described above. The last block consists of just one line containing <TT>0</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the blocks in the input file. A line contains
text <TT>successful conspiracy</TT> when such a sequence does not exist. Otherwise it contains text
<TT>lamentable kingdom</TT>. There is no line in the output file corresponding to the last ``null'' block of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 2
1 2 gt 0
2 2 lt 2
1 2
1 0 gt 0
1 0 lt 0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
lamentable kingdom
successful conspiracy
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
516||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Prime Land</TITLE>
<META NAME="description" CONTENT="Prime Land">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Prime Land</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Everybody in the Prime Land is using a prime base number system. In this system, each
positive integer <I>x</I> is represented as follows: Let 
<!-- MATH: $\{p_i\}_{i=0}^{\infty}$ -->
<IMG
 WIDTH="59" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/516img1.gif" 
 ALT="$\{p_i\}_{i=0}^{\infty}$">
denote the increasing sequence of all prime
numbers. We know that <I>x</I> &gt; 1 can be represented in only one way in the form of product of
powers of prime factors. This implies that there is an integer <I>k</I><SUB><I>x</I></SUB> and uniquely determined integers

<!-- MATH: $e_{k_x}, e_{k_x-1}, \dots, e_1, e_0$ -->

<font size=4>e<sub>k<sub>x</sub></sub>,
e<sub>k<sub>x</sub>-1</sub>,...,e<sub>1</sub>,e<sub>0</sub>,(<I>e</I><SUB><I>k</I><SUB><I>x</I></SUB></SUB> &gt;
0),</font> that 

<!-- MATH: $x = p_{k_x}^{e_{k_x}} \cdot p_{k_x-1}^{e_{k_x-1}} \cdot \dots \cdot p_1^{e_1} \cdot p_{0}^{e_0}$ -->
<IMG
 WIDTH="229" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/516img1.gif" 
 ALT="$x = p_{k_x}^{e_{k_x}} \cdot p_{k_x-1}^{e_{k_x-1}} \cdot \dots \cdot p_1^{e_1} \cdot p_{0}^{e_0}$">.
The sequence

<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
(e_{k_x}, e_{k_x-1}, \dots, e_1, e_0)
\end{displaymath} -->


<IMG
 WIDTH="160" HEIGHT="31"
 SRC="http://uva.onlinejudge.org/external/5/516img1.gif" 
 ALT="\begin{displaymath}(e_{k_x}, e_{k_x-1}, \dots, e_1, e_0)\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
is considered to be the representation of <I>x</I> in prime base number system.

<P>
It is really true that all numerical calculations in prime base number system can seem to us
a little bit unusual, or even hard. In fact, the children in Prime Land learn to add to subtract
numbers several years. On the other hand, multiplication and division is very simple.

<P>
Recently, somebody has returned from a holiday in the Computer Land where small smart
things called computers have been used. It has turned out that they could be used to make
addition and subtraction in prime base number system much easier. It has been decided to make
an experiment and let a computer to do the operation ``minus one''.

<P>
Help people in the Prime Land and write a corresponding program.

<P>
For practical reasons we will write here the prime base representation as a sequence of such <I>p</I><SUB><I>i</I></SUB>
and <I>e</I><SUB><I>i</I></SUB> from the prime base representation above for which <I>e</I><SUB><I>i</I></SUB> &gt; 0. We will keep decreasing order with regard to <I>p</I><SUB><I>i</I></SUB>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of lines (at least one) each of which except the last contains prime base
representation of just one positive integer greater than 2 and less or equal 32767. All numbers in
the line are separated by one space. The last line contains number 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains one line for each but the last line of the input file. If <I>x</I> is a positive
integer contained in a line of the input file, the line in the output file will contain <I>x</I> - 1 in prime
base representation. All numbers in the line are separated by one space. There is no line in the
output file corresponding to the last ``null'' line of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
17 1
5 1 2 1
509 1 59 1
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 4
3 2
13 1 11 1 7 1 5 1 3 1 2 1
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
517||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Word</TITLE>
<META NAME="description" CONTENT="Word">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Word</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Dr. R. E. Wright's class was studying modified L-Systems. Let us explain necessary details.
As a model let us have words of length <I>n</I> over a two letter alphabet <IMG
 WIDTH="46" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/517img1.gif" 
 ALT="$\{a, b\}$">.
The words are cyclic,
this means we can write one word in any of <I>n</I> forms we receive by cyclic shift, whereby the first
and the last letters in the word are considered to be neighbours.

<P>
Rewriting rules rewrite a letter at a position <I>i</I>, depending on letters at the positions 
<!-- MATH: $i - 2, i, i+1$ -->
<I>i</I> - 2, <I>i</I>, <I>i</I>+1.
We rewrite all letters of the word in one step. When we have a given starting word and a set of
rewriting rules a natural question is: how does the word look after s rewriting steps?

<P>
Help Dr. R. E. Wright and write a program which solves this task.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There are several blocks in the input file, each describing one system. There is an integer
number <I>n</I>, 
<!-- MATH: $2 < n < 16$ -->
2 &lt; <I>n</I> &lt; 16 the length of the input word in the first line. There is a word in the next
line. The word contains only lowercase letters <TT>a</TT> and <TT>b</TT>. There are four characters 
<!-- MATH: $c_1 c_2 c_3 c_4$ -->
<I>c</I><SUB>1</SUB> <I>c</I><SUB>2</SUB> <I>c</I><SUB>3</SUB> <I>c</I><SUB>4</SUB> in the
next eight lines. Each quadruple represents one rewriting rule with the following meaning: when
the letter at the position <I>i</I> - 2 is <I>c</I><SUB>1</SUB> and the letter at the position <I>i</I> is <I>c</I><SUB>2</SUB> and the letter at the position
<I>i</I> + 1 is <I>c</I><SUB>3</SUB> then the letter at the position <I>i</I> after rewriting will be <I>c</I><SUB>4</SUB>. Rewriting rules are correct and
complete. There is an integer number <I>s</I>, 
<!-- MATH: $0 \leÂŸ s \leÂŸ 2000000000$ -->
<IMG
 WIDTH="155" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/517img1.gif" 
 ALT="$0 \leÂŸ s \leÂŸ 2000000000$">,
in the last line of the block.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
There is one line corresponding to each block of the input file. The line contains a word which
we receive after <I>s</I> rewriting steps from the corresponding starting word using given rewriting rules.
As we mentioned above, the word can be written in any of <I>n</I> cyclic shifted forms. The output file
contains the lexicographically smallest word, assuming that <TT>a</TT> &lt; <TT>b</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
aaaaa
aaab
aabb
abab
abbb
baab
babb
bbab
bbbb
1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
bbbbb
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
518||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Time</TITLE>
<META NAME="description" CONTENT="Time">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Time</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Let a time point be given as 6 integers 
<!-- MATH: $y, m, d, h, min, s$ -->
<I>y</I>, <I>m</I>, <I>d</I>, <I>h</I>, <I>min</I>, <I>s</I> where 
<!-- MATH: $1970 <= y < 2030$ -->
1970 &lt;= <I>y</I> &lt; 2030, 
<!-- MATH: $0 < m < 13$ -->
0 &lt; <I>m</I> &lt; 13,

<!-- MATH: $0 < d < 32$ -->
0 &lt; <I>d</I> &lt; 32, 
<!-- MATH: $0 \leÂŸ h < 24$ -->
<IMG
 WIDTH="87" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/518img1.gif" 
 ALT="$0 \leÂŸ h < 24$">,

<!-- MATH: $0 \leÂŸ min < 60$ -->
<IMG
 WIDTH="109" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/518img1.gif" 
 ALT="$0 \leÂŸ min < 60$">,

<!-- MATH: $0 ÂŸ\le s < 60$ -->
<IMG
 WIDTH="85" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/518img1.gif" 
 ALT="$0 ÂŸ\le s < 60$">.
Write a program which computes how many
periods of a given length fit between two given time points. A period is given by a pair consisting of
a positive integer and a word expressing a time unit, i.e. <TT>year</TT> or <TT>month</TT> or <TT>day</TT> or <TT>hour</TT> or <TT>minute</TT>
or <TT>second</TT>. Every 4th year is a leap year, except every 100th which is not except every 400 year
which is. A length of the year varies according to leap years. The same is true for the month
February. Time units always start as usual, e.g., a year starts at 1st January, a month starts at its
1st day, a day starts at 0 hours 0 minutes 0 seconds, etc. A period ends after its last second.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block has three lines. The first line of a block
contains a time point <I>D</I><SUB>1</SUB> and the second line a time point <I>D</I><SUB>2</SUB>. <I>D</I><SUB>1</SUB> always precedes <I>D</I><SUB>2</SUB>. All numbers
in the lines are separated by one space. You can assume that the given descriptions of time points
are correct. The third line contains a time period. There is one space between the number and the
word in the period definition on this line. After each block, there is one empty line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the blocks in the input file. A line corresponding to a block contains one integer number expressing how many specified periods are
contained between the given time points.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1997 12 31 23 59 59
1998 1 1 0 0 0
1 second

2000 2 29 0 0 0
2000 2 29 23 59 59
1 day

2000 2 29 0 0 0
2000 3 1 0 0 0
24 hour

1996 12 31 20 30 0
1997 1 1 7 30 0
60 minute

1996 12 31 20 30 0
1997 1 1 7 30 0
1 hour
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
0
1
11
10
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
519||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Puzzle (II)</TITLE>
<META NAME="description" CONTENT="Puzzle">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Puzzle (II)</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Little Barborka has just started to learn how to solve a picture puzzle. She has started with
a small one containing 15 pieces. Her daddy tries to solve the puzzle too. To make it a little bit
harder for himself, he has turned all puzzle pieces upside down so that he cannot see pictures on
the pieces. Now he is looking for a solution of the puzzle. Normally the solution should exist but
he is not sure whether Barborka has not replaced some pieces of the puzzle by pieces of another
similar puzzle. Help him and write a program which reads a description of a set of puzzle pieces
and decides whether it is possible to assembly the pieces into a rectangle with given side lengths or
not.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block except the last describes one puzzle
problem. In the first line of the block there are integers <I>n</I> and <I>m</I>, 
<!-- MATH: $0 < n, m ÂŸ\le 6$ -->
<IMG
 WIDTH="102" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/519img1.gif" 
 ALT="$0 < n, m ÂŸ\le 6$">
separated by one
space. The integers <I>n</I>, <I>m</I> indicate the number of rows and columns in the puzzle respectively. The
description of individual puzzle pieces is in the following 
<!-- MATH: $n \times m$ -->
<IMG
 WIDTH="52" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/519img1.gif" 
 ALT="$n \times m$">
lines of the block. Each piece is a
rectangle 3 centimeters wide and 4 centimeters high with possible juts or cavities in the middle of
its sides. For each side of a puzzle piece just one of the following possibilities is true (see picture):

<P>
<UL>
<LI>there is no jut or cavity on the side, i.e., the side is flat - such sides can be used only on edges
of the final picture when assembling the puzzle,
<LI>there is one jut in the middle of the side,
<LI>there is one cavity in the middle of the side.
</UL>

<P>
<DIV ALIGN="CENTER">
<BR>
<IMG ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/519img1.gif" 
 ALT="\begin{picture}(2301,2118)(0,-10)
\put(585.000,912.000){\arc{450.000}{1.5708}{4....
...{\SetFigFont{14}{16.8}{\rmdefault}{\mddefault}{\updefault}jut}}}}}
\end{picture}">
<BR>
</DIV>

<P>
As is usual, two pieces can be placed side by side only if one has a jut and the other has a
cavity on corresponding sides. We will denote the flat sides by <TT>F</TT>, the sides with juts by <TT>O</TT> and the
sides with cavities by <TT>I</TT>. Each piece is described by four letters characterizing its top, right, bottom,
and left side. To make the task easier the pieces can be used only as they are described i.e. they cannot be turned.

<P>
After each block there is an empty line. The last block consists of just one line containing 0 0, i.e. two zeros separated by one space.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the blocks in the input file. A line contains
<TT>YES</TT> if the corresponding block in the input file describes a puzzle that can be correctly assembled.
Otherwise it contains <TT>NO</TT>. There is no line in the output file corresponding to the last ``null'' block of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 5
FOOF
FOOI
FOOI
FOOI
FFOI
IOOF
IOOI
IOOI
IOOI
IFOI
IOFF
IOFI
IOFI
IOFI
IFFI
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
YES
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
520||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Append</TITLE>
<META NAME="description" CONTENT="Append">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Append</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Consider the following encoding scheme used in one famous compresion algorithm. Suppose
we will code only sequences of lower case letters. Each such sequence of characters can be encoded
to a sequence of pairs 
<!-- MATH: $(p_i, r_i)$ -->
(<I>p</I><SUB><I>i</I></SUB>, <I>r</I><SUB><I>i</I></SUB>), where 
<!-- MATH: $p_i \geÂ– 0$ -->
<IMG
 WIDTH="51" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/520img1.gif" 
 ALT="$p_i \geÂ– 0$">
is an integer and <I>r</I><SUB><I>i</I></SUB> is either a character (if <I>p</I><SUB><I>i</I></SUB> = 0) or
an integer greater than zero and less or equal than <I>p</I><SUB><I>i</I></SUB> (if <I>p</I><SUB><I>i</I></SUB> &gt; 0).

<P>
We describe now the decoding procedure for our encoding scheme. Let 
<!-- MATH: $(p_1, r_1)$ -->
(<I>p</I><SUB>1</SUB>, <I>r</I><SUB>1</SUB>), 
<!-- MATH: $(p_2, r_2)$ -->
(<I>p</I><SUB>2</SUB>, <I>r</I><SUB>2</SUB>), <IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/520img1.gif" 
 ALT="$\dots$">
be
a code of a sequence. We get the sequence as follows: we take successively individual pairs of the
code. If <I>p</I><SUB><I>i</I></SUB> = 0 then <I>r</I><SUB><I>i</I></SUB> is a character and we simply add <I>r</I><SUB><I>i</I></SUB> to the end of already decoded sequence.
If <I>p</I><SUB><I>i</I></SUB> &gt; 0 then <I>r</I><SUB><I>i</I></SUB> is an integer, 
<!-- MATH: $0 < r_i \leÂŸ p_i$ -->
<IMG
 WIDTH="87" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/520img1.gif" 
 ALT="$0 < r_i \leÂŸ p_i$">,
and we add to already decoded sequence <I>r</I><SUB><I>i</I></SUB> letters from
this sequence starting at the position <I>p</I><SUB><I>i</I></SUB> places before the end.

<P>
For example, consider the sequence of pairs (0 <I>a</I>), (1, 1), (0, <I>b</I>), (3, 3), (3, 3), (3, 2), (0, <I>c</I>). Decoding (0, <I>a</I>) we get <I>a</I>. Decoding (1, 1) we get <I>aa</I>. (0, <I>b</I>) adds <I>b</I> getting <I>aab</I>. (3, 3) will add <I>aab</I>, so now we have <I>aabaab</I>. Next pair (3, 3) will again add <I>aab</I> so we have <I>aabaabaab</I>. (3, 2) will add <I>aa</I>, so
our sequence is 
<!-- MATH: $aabaabaabaa$ -->
<I>aabaabaabaa</I> and (0, <I>c</I>) adds <I>c</I>. So the decoded sequence is 
<!-- MATH: $aabaabaabaac$ -->
<I>aabaabaabaac</I>. Note that
in general for a given <I>w</I> it can exist more such sequences of pairs.

<P>
Let <I>u</I>, <I>v</I> be some sequences. By <I>uv</I> we will understand the sequence created by appending of
the sequence <I>v</I> to the end of sequence <I>u</I>. Let <I>C</I><SUB><I>w</I></SUB> be a sequence of pairs which encodes a sequence
of lowercase letters <I>w</I>. Suppose we have given a sequence of pairs <I>C</I><SUB><I>w</I></SUB>. The question is how many
possibilities does exist for expressing the sequence <I>C</I><SUB><I>w</I></SUB> in the form <I>C</I><SUB><I>u</I></SUB> <I>C</I><SUB><I>v</I></SUB> where <I>u</I>, <I>v</I> are sequences
satisfying the equation <I>w</I> = <I>uv</I> and neither <I>u</I> nor <I>v</I> is empty. Write a program that will answer
this question.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block describes one sequence of pairs <I>C</I><SUB><I>w</I></SUB> to some
<I>w</I> in such a way that the <I>i</I>-th line of the block contains either two integers <I>p</I><SUB><I>i</I></SUB>, <I>r</I><SUB><I>i</I></SUB>, (
<!-- MATH: $r_i \leÂŸ p_i < 1000$ -->
<IMG
 WIDTH="113" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/520img1.gif" 
 ALT="$r_i \leÂŸ p_i < 1000$">)
separated by one space or 0 followed by one space and one character. Each block ends with one empty line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the blocks in the input file. Each line
contains the number of possibilities of representation of the sequence <I>C</I><SUB><I>w</I></SUB> in the form <I>C</I><SUB><I>u</I></SUB> <I>C</I><SUB><I>v</I></SUB> where
<I>u</I>, <I>v</I> are sequences satisfying the equation <I>w</I> = <I>uv</I> and neither <I>u</I> nor <I>v</I> is empty.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 a
1 1
0 b
3 3
3 3
3 2
0 c
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
521||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gossiping</TITLE>
<META NAME="description" CONTENT="Gossiping">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gossiping</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There was a public bus transport in one town. All buses had circular lines. Each line had at
least two stops. Some lines had some stops in common. When two or more bus drivers met on
some stop they announced each other all news they knew, so that after leaving the stop they all
knew the same news. All drivers started driving their buses at the same time and at this time each
driver knew some news that was not known to any other driver. Each bus ran all the time along a
fixed bus line. Different buses running along the same bus line started possibly on different stops
of the bus line at the beginning.

<P>
The operation of buses was highly synchronized. The time necessary to get from one stop to
next stop was equal for all stops and all lines.

<P>
There were <I>n</I> lines (
<!-- MATH: $0 < n < 20$ -->
0 &lt; <I>n</I> &lt; 20), <I>d</I> drivers (and also <I>d</I> buses) (
<!-- MATH: $0 < d < 30$ -->
0 &lt; <I>d</I> &lt; 30) numbered by
integers from 1 to <I>d</I>, and <I>s</I> bus stops (
<!-- MATH: $0 < s < 50$ -->
0 &lt; <I>s</I> &lt; 50) numbered by integers from 1 to <I>s</I>.

<P>
The drivers' gossiping club would like to know whether each driver, in some time, would learn
all news from his colleagues. Write a program that will answer this question.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists of blocks of lines. Each block except the last describes one town. In the
first line of the block there are integers <I>n</I>, <I>d</I> and <I>s</I> described above separated by one space. The
next 2<I>n</I> lines contain descriptions of <I>n</I> bus lines (2 lines for each bus line) as follows: In the first line
there are stop numbers on the corresponding bus line separated by one space. The stops are listed
in the order the bus passes them. After passing the last stop listed on the line the bus goes again
to the first stop listed on the line. The second line describes on which stops the individual buses
operating on the bus line started at the beginning. The description consists of pairs <I>s</I><SUB><I>i</I></SUB>, <I>d</I><SUB><I>i</I></SUB>, where
<I>s</I><SUB><I>i</I></SUB> is a stop number on the bus line and <I>d</I><SUB><I>i</I></SUB> is the number of driver driving the bus. All numbers
<I>s</I><SUB><I>i</I></SUB>, <I>d</I><SUB><I>i</I></SUB> on the line are separated by one space. The last block consists of just one line containing <TT>0 0 0</TT>, i.e. three zeros separated by one space.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the lines corresponding to the blocks in the input file. A line contains
<TT>Yes</TT> if the corresponding block in the input file describes a situation where each driver will learn,
in some time, all news from his colleagues. Otherwise it contains <TT>No</TT>. There is no line in the output
file corresponding to the last ``null'' block of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3 5
1 2 3
1 1 2 2
2 3 4 5
2 3
0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Yes
</PRE>

<P>
</BODY>
</HTML>

______________________________________________________
522||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Schedule Problem</TITLE>
<META NAME="description" CONTENT="Schedule Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Schedule Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A project can be divided into several parts. Each part should be completed
continuously. This
means if a part should take 3 days, we should use a continuous 3 days to
complete it. There are four
types of constrains among these parts which are FAS, FAF, SAF and SAS.
A constrain between
parts is FAS if the second one should finish after the first one started.
FAF is finish after finish,
SAF is start after finish, and SAS is start after start. Assume there are
enough people involved in
the projects, which means we can do any number of parts concurrently.
You are to write a program
to give a schedule of a given project, which has the shortest time.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file consists a sequences of projects, with an empty line indicates
the of input.

<P>

<P>
<BR>
Each project consists the following lines:

<P>
<UL>
<LI>the count number of parts(one line)
<LI>times should be taken to complete these parts, each time occupies one line
<LI>a list of <TT>FAS</TT>, <TT>FAF</TT>, <TT>SAF</TT> or <TT>SAS</TT>
and two part number indicates a constrain of the two parts
<LI>a line only contains a '<TT>#</TT>' indicate the end of a project
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output should be a list of lines, each line includes a part number and
the time it should start. Time
should be a non-negative integer, and the start time of first part
should be 0. If there is no answer
for the problem, you should give a one-line output containing ``<TT>impossible</TT>".

<P>

<P>
<BR>
A blank line should appear following the output for each project.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
2
3
4
SAF 1 2
FAF 2 3
#
3
1
1
1
SAF 1 2
SAF 2 3
SAF 3 1
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
1 0
2 2
3 1

Case 2:
impossible
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
523||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Minimum Transport Cost</TITLE>
<META NAME="description" CONTENT="Minimum Transport Cost">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Minimum Transport Cost</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There are <I>N</I> cities in Spring country. Between each pair of cities there
may be one transportation
track or none. Now there is some cargo that should be delivered from one city
to another. The transportation fee consists of two parts:

<P>
<DL COMPACT>
<DT>1.
<DD>the cost of the transportation on the path between these cities, and
<DT>2.
<DD>a certain tax which will be charged whenever any cargo passing through
one city, except for the source and the destination cities.
</DL>

<P>
You must write a program to find the route which has the minimum cost.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

The data of path cost, city tax, source and destination cities are given
in each dataset, which is of the form:

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\begin{array}{cccc}
a_{11} & a_{12} & \dots & a_{1N} \\
a_{21} & a_{22} & \dots & a_{2N} \\
\dots & \dots & \ddots & \dots \\
a_{N1} & a_{N2} & \dots & a_{NN} \\
b_1 & b_2 & \dots & b_N \\
c & d & & \\
e & f & & \\
\dots & \dots & & \\
g & h & &
\end{array}
\end{displaymath} -->


<IMG
 WIDTH="160" HEIGHT="211"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="\begin{displaymath}\begin{array}{cccc}
a_{11} & a_{12} & \dots & a_{1N} \\
a_{2...
...& \\
e & f & & \\
\dots & \dots & & \\
g & h & &
\end{array}\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
where <I>a</I><SUB><I>ij</I></SUB> is the transport cost from city <I>i</I> to city <I>j</I>, 
<!-- MATH: $a_{ij} = -1$ -->
<I>a</I><SUB><I>ij</I></SUB> = -1 indicates there is no direct path between
city <I>i</I> and city <I>j</I>. <I>b</I><SUB><I>i</I></SUB> represents the tax of passing through city <I>i</I>. And
the cargo is to be delivered from
city <I>c</I> to city <I>d</I>, city <I>e</I> to city <I>f</I>, ..., and city <I>g</I> to city <I>h</I>. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each datase, you must output the sequence of cities
passed by and the total cost, which is of the form:

<P>

<P><P>
<BR>

<TT>From </TT><I>c</I><TT> to </TT><I>d</I><TT> :</TT>

<P>

<TT>Path:</TT> <I>c</I><TT>-&gt;</TT><I>c</I><SUB>1</SUB><TT>-&gt;</TT><IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="$\dots$"><TT>-&gt;</TT><I>c</I><SUB><I>k</I></SUB><TT>-&gt;</TT><I>d</I>

<P>

<TT>Total cost :</TT> <IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="$\dots$">

<P>

<P><P>
<BR>

<IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="$\dots$">

<P>

<P><P>
<BR>

<TT>From </TT><I>e</I><TT> to </TT><I>f</I><TT> :</TT>

<P>

<TT>Path:</TT> <I>e</I><TT>-&gt;</TT><I>e</I><SUB>1</SUB><TT>-&gt;</TT><IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="$\dots$"><TT>-&gt;</TT><I>e</I><SUB><I>k</I></SUB><TT>-&gt;</TT><I>f</I>

<P>

<TT>Total cost :</TT> <IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/523img1.gif" 
 ALT="$\dots$">

<P>
Print a blank line between datasets,
<p>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

0 3 22 -1 4
3 0 5 -1 -1
22 5 0 9 20
-1 -1 9 0 4
4 -1 20 4 0
5 17 8 3 1
1 3
3 5
2 4
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
From 1 to 3 :
Path: 1--&gt;5--&gt;4--&gt;3
Total cost : 21

From 3 to 5 :
Path: 3--&gt;4--&gt;5
Total cost : 16

From 2 to 4 :
Path: 2--&gt;1--&gt;5--&gt;4
Total cost : 17
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
524||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Prime Ring Problem</TITLE>
<META NAME="description" CONTENT="Prime Ring Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Prime Ring Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A ring is composed of n (even number) circles as shown in diagram. Put natural
numbers 
<!-- MATH: $1, 2, \dots, n$ -->
<IMG
 WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/524img1.gif" 
 ALT="$1, 2, \dots, n$">
into each circle separately, and the sum of numbers in two adjacent circles
should be a prime. 

<P>
<DIV ALIGN="CENTER">
<img src=p524.gif>
</DIV>

<P>

<P>
<BR>

<B>Note:</B> the number of first circle should always be 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<I>n (0 &lt; n &lt;= 16)</I> 

<!--
(
< MATH: $0 < n \le 20$ >
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/524img1.gif" 
 ALT="$0 < n \le 20$">)
-->

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output format is shown as sample below. Each row represents a series
of circle numbers in the
ring beginning from 1 clockwisely and anticlockwisely. The order of numbers
must satisfy the above requirements.

<P>

<P>
<BR>
You are to write a program that completes above process.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6
8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1:
1 4 3 2 5 6
1 6 5 2 3 4

Case 2:
1 2 3 8 5 6 7 4
1 2 5 8 3 4 7 6
1 4 7 6 5 8 3 2
1 6 7 4 3 8 5 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
525||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Milk Bottle Data</TITLE>
<META NAME="description" CONTENT="Milk Bottle Data">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Milk Bottle Data</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There is a box of the shape of an 
<!-- MATH: $N \times N$ -->
<IMG
 WIDTH="58" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/525img1.gif" 
 ALT="$N \times N$">
lattice. Each grid of the lattice may contain a milk bottle or
none. Mr. Smith wrote down the data of the box by making a record for each
row from left to right
and each column from top to bottom. In each record, `1' indicaes that there
is a bottle in the
corresponding grid and `0' does not. Unfortunately, the order of these
records is thrown into confusion, and some of these records have corrupted.

<P>

<P>
<BR>
Now it's up to you to provide a program to recover these data:
i.e. to give the original arrangement of the box and give real values for
those corrupted data.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains a line with a integer N indicating the number of test cases. A blank line follows. After that there are N test cases, where `2' denotes that the
corresponding character has
been corrupted. Each line in the file represents a record. You should output
the original
arrangement of the box, and show the record number for each column on the
top of the lattice, and
show the record number for each row to the left of the lattice.
There is a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, you are required to give only one possible result if there are many, and you
should give the 
indication `<TT>impossible</TT>' if there is no possibility of original arrangement.
Print a blank line between datasets.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>1

01210
21120
21001
12110
12101
12101
00011
22222
11001
10010
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
     9  8  6  2  7

4    1  0  1  1  0
10   1  0  0  1  0
1    0  1  1  1  0
3    0  1  0  0  1
5    1  1  1  0  1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
526||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>String Distance and Transform Process</TITLE>
<META NAME="description" CONTENT="String Distance and Transform Process">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
String Distance and Transform Process</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
String Distance is a non-negative integer that measures the distance
between two strings. Here we
give the definition. A transform list is a list of strings, where each
string, except for the last one, can
be changed to the string followed by adding a character, deleting a
character or replacing a
character. The length of a transform list is the count of strings
minus 1 (that is the count of
operations to transform these two strings). The distance between two strings
is the length of a
transform list from one string to the other with the minimal length. You
are to write a program to
calculate the distance between two strings and give the corresponding
transform list.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists a sequence of string pairs, each string pair consists two
lines, each string occupies
one line. The length of each string will be no more than 80.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each string pair, you should give an integer to indicate the length
between them at the first line,
and give a sequence of command to transform string1 to string 2. Each
command is a line lead by
command count, then the command. A command must be 

<P>

<P>
<BR>

<TT>Insert</TT> <I>pos</I>,<I>value</I>

<P>

<TT>Delete</TT> <I>pos</I>

<P>

<TT>Replace</TT> <I>pos</I>,<I>value</I>

<P>

<P>
<BR>
where <I>pos</I> is the position of the string and <I>pos</I> should be between 1 and
the current length of the
string (in <TT>Insert</TT> command, <I>pos</I> can be 1 greater than the length), and value is a character. Actually
many command lists can satisfy the request, but only one of them is required.

<p>Print a blank line between consecutive datasets.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
abcac
bcd
aaa
aabaaaa
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
1 Delete 1
2 Replace 3,d
3 Delete 4

4
1 Insert 1,a
2 Insert 2,a
3 Insert 3,b
4 Insert 7,a
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
527||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The partition of a cake</TITLE>
<META NAME="description" CONTENT="The partition of a cake">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The partition of a cake</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There is a 1000<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/527img1.gif" 
 ALT="$\times$">1000 square cake. We use knife to cut the cake. The problem is
after a series of cutting, how many partitions the cake will has.

<P>

<P>
<BR>

<B>Assumption:</B>
<DL COMPACT>
<DT>1.
<DD>The number of the cutting will be no more than 8.
<DT>2.
<DD>After the cutting, the length of any edge of the partition will no less than 1.
<DT>3.
<DD>The vertex coordinates of the cake are (0,0)(0,1000)(1000,1000)
(1000,0).
<DT>4.
<DD>The intersections of the cut line and the cake edge are two .
</DL>

<P>

<P>
<BR>
The following Graph is a sample partition. The number of the
partitions is 10.

<P>
<DIV ALIGN="CENTER">
<img src=p527.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.The first line of each dataset is the number of the cutting . The following lines
contain the information
of the cut lines. Each line has 4 integer number, which represent the
coordinate of the intersection
of the cut line and the cake edge.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset is the number of the partitions of the cake. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

3
0 0 1000 1000
500 0 500 1000
0 500 1000 500
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
528||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Problem of Train Setout</TITLE>
<META NAME="description" CONTENT="The Problem of Train Setout">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Problem of Train Setout</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
At a railway station there is only one out channel. There are two kinds
of trains : the express train
and ordinary train. The ordinary train should wait to setout until all
the express train have setout.
But if an ordinary train is just setouting, the incoming express train should
wait until the ordinary
train leaves. The leaving time of express train and ordinary train are <I>L</I><SUB><I>e</I></SUB>
and <I>L</I><SUB><I>o</I></SUB>. And the time
between the arriving of two express train is <I>A</I><SUB><I>e</I></SUB> and of ordinary train is <I>A</I><SUB><I>o</I></SUB>.
The total observation
time is <I>T</I>. You should work out a program to illustrate the number of trains
waiting to setout at any
time, and calculate the average time of the two kinds of trains waiting <I>W</I><SUB><I>e</I></SUB>,
<I>W</I><SUB><I>o</I></SUB>, and the average
time of the all trains waiting <I>W</I><SUB><I>t</I></SUB>, and the time every train waited <I>W</I>(<I>t</I>).
Assume that the setout
channel is empty at first and a express train comes first. And the output
channel will never be empty.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a line of five numbers that represent 
<!-- MATH: $A_e, A_o, L_e, L_o, T$ -->
<I>A</I><SUB><I>e</I></SUB>, <I>A</I><SUB><I>o</I></SUB>, <I>L</I><SUB><I>e</I></SUB>, <I>L</I><SUB><I>o</I></SUB>, <I>T</I>
respectively.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The first part of the output is an array of the waiting trains, one element
per line. There are three
numbers in a line. First is the time, second is the number of waiting express
trains, the third is the
number of waiting ordinary trains. At the end of the array, there is a 0.

<P>

<P>
<BR>
After the array , there is a line contains three numbers are 
<!-- MATH: $W_e, W_o, W_t$ -->
<I>W</I><SUB><I>e</I></SUB>, <I>W</I><SUB><I>o</I></SUB>, <I>W</I><SUB><I>t</I></SUB>.

<P>

<P>
<BR>
The last part of the output is
also an array, one element per line. There are two elements per line. The
first one is the train. If the
train is an express train, then the first element begins with <TT>E</TT>, followed
by the number of the express
train, (the number is according to the incoming order of the train); else
it begins with <TT>O</TT>, followed
by the number of the ordinary train. The second is the time the train
has waited.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 6 6 2 30
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0 0 0
3 1 0
6 1 1
9 2 1
12 2 2
15 3 2
18 3 3
21 4 3
24 4 4
27 5 4
30 5 5
0
6 12 8
0
E1 0
E2 3
E3 6
E4 9
E5 12
E6 15
E7 12
E8 9
E9 6
E10 3
E11 0
O1 24
O2 18
O3 12
O4 6
O5 0
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
529||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Addition Chains</TITLE>
<META NAME="description" CONTENT="Addition Chains">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Addition Chains</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An addition chain for <I>n</I> is an integer sequence 
<!-- MATH: $<a_0, a_1, a_2, \dots, a_m>$ -->
<IMG
 WIDTH="168" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/529img1.gif" 
 ALT="$<a_0, a_1, a_2, \dots, a_m>$">
with the following four properties:

<P>
<UL>
<LI><I>a</I><SUB>0</SUB> = 1
<LI><I>a</I><SUB><I>m</I></SUB> = <I>n</I>
<LI>a<SUB>0</SUB>&lt;a<SUB>1</SUB>&lt;a<SUB>2</SUB>&lt;...&lt;a<SUB>m-1</SUB>&lt;a<SUB>m</SUB>

<LI>For each <I>k</I> (
<!-- MATH: $1 \le k \le m$ -->
<IMG
 WIDTH="85" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/529img1.gif" 
 ALT="$1 \le k \le m$">)
there exist two (not neccessarily different) integers <I>i</I> and <I>j</I> (
<!-- MATH: $0 \le i, j \le k-1$ -->
<IMG
 WIDTH="121" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/529img1.gif" 
 ALT="$0 \le i, j \le k-1$">)
with 
<!-- MATH: $a_k =a_i +a_j$ -->
<I>a</I><SUB><I>k</I></SUB> =<I>a</I><SUB><I>i</I></SUB> +<I>a</I><SUB><I>j</I></SUB></UL>

<P>
You are given an integer <I>n</I>. Your job is to construct an addition chain for <I>n</I>
with minimal length. If
there is more than one such sequence, any one is acceptable.

<P>
For example, &lt;1,2,3,5&gt; and &lt;1,2,4,5&gt; are both valid solutions when you are asked for an addition chain for 5.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases. Each test case consists
of one line containing one
integer <I>n</I> (
<!-- MATH: $1 \le n \le 10000$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/529img1.gif" 
 ALT="$1 \le n \le 10000$">). Input is terminated by a value of zero (0) for <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, print one line containing the required integer sequence. Separate the numbers by one blank.

<P>

<P>
<BR>

<B>Hint:</B> The problem is a little time-critical, so use proper break conditions where necessary to reduce the search space.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
5
7
12
15
77
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1 2 4 5
1 2 4 6 7
1 2 4 8 12
1 2 4 5 10 15
1 2 4 8 9 17 34 68 77
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
530||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Binomial Showdown</TITLE>
<META NAME="description" CONTENT="Binomial Showdown">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Binomial Showdown</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In how many ways can you choose <I>k</I> elements out of <I>n</I> elements, not taking
order into account?

<P>
Write a program to compute this number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases.

<P>
Each test case consists of one line containing two integers <I>n</I> (<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/530img1.gif" 
 ALT="$n \ge 1$">)
and <I>k</I> (
<!-- MATH: $0 \le k \le n$ -->
<IMG
 WIDTH="80" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/530img1.gif" 
 ALT="$0 \le k \le n$">).

<P>
Input is terminated by two zeroes for <I>n</I> and <I>k</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, print one line containing the required number. This number will always fit into
an integer, i.e. it will be less than 2<SUP>31</SUP>.

<P>

<P>
<BR>

<B>Warning:</B> Don't underestimate the problem. The result will fit into an integer - but if all
intermediate results arising during the computation will also fit into an integer depends on your
algorithm. The test cases will go to the limit.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 2
10 5
49 6
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6
252
13983816
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
531||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Compromise</TITLE>
<META NAME="description" CONTENT="Compromise">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Compromise</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In a few months the European Currency Union will become a reality. However, to
join the club, the
Maastricht criteria must be fulfilled, and this is not a trivial task for the
countries (maybe except for
Luxembourg). To enforce that Germany will fulfill the criteria, our government
has so many
wonderful options (raise taxes, sell stocks, revalue the gold reserves,...)
that it is really hard to
choose what to do.

<P>

<P>
<BR>
Therefore the German government requires a program for the following task:

<P>

<P>
<BR>
Two politicians each enter their proposal of what to do. The computer
then outputs the longest
common subsequence of words that occurs in both proposals. As you can see,
this is a totally fair
compromise (after all, a common sequence of words is something what both
people have in mind).

<P>

<P>
<BR>
Your country needs this program, so your job is to write it for us.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain several test cases.

<P>
Each test case consists of two texts. Each text is given as a sequence of
lower-case words, separated
by whitespace, but with no punctuation. Words will be less than 30 characters
long. Both texts will
contain less than 100 words and will be terminated by a line containing a
single '<TT>#</TT>'.

<P>
Input is terminated by end of file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, print the longest common subsequence of words occuring
in the two texts. If
there is more than one such sequence, any one is acceptable. Separate the
words by one blank. After the last word, output a newline character.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
die einkommen der landwirte
sind fuer die abgeordneten ein buch mit sieben siegeln
um dem abzuhelfen
muessen dringend alle subventionsgesetze verbessert werden
#
die steuern auf vermoegen und einkommen
sollten nach meinung der abgeordneten
nachdruecklich erhoben werden
dazu muessen die kontrollbefugnisse der finanzbehoerden
dringend verbessert werden
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
die einkommen der abgeordneten muessen dringend verbessert werden
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
532||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dungeon Master</TITLE>
<META NAME="description" CONTENT="Dungeon Master">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dungeon Master</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are trapped in a 3D dungeon and need to find the quickest way out!
The dungeon is composed
of unit cubes which may or may not be filled with rock. It takes one minute
to move one unit north,
south, east, west, up or down. You cannot move diagonally and the maze is
surrounded by solid rock on all sides.

<P>

<P>
<BR>
Is an escape possible? If yes, how long will it take?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file consists of a number of dungeons. Each dungeon description
starts with a line
containing three integers <I>L</I>, <I>R</I> and <I>C</I> (all limited to 30 in size).

<P>

<P>
<BR>

<I>L</I> is the number of levels making up the dungeon.

<P>
<I>R</I> and <I>C</I> are the number of rows and columns making up the plan of each level.

<P>

<P>
<BR>
Then there will follow <I>L</I> blocks of <I>R</I> lines each containing <I>C</I> characters. Each character describes
one cell of the dungeon. A cell full of rock is indicated by a `<TT>#</TT>' and empty cells are represented by a
`<TT>.</TT>'. Your starting position is indicated by `<TT>S</TT>' and the exit by the letter '<TT>E</TT>'. There's a single blank
line after each level. Input is terminated by three zeroes for <I>L</I>, <I>R</I> and <I>C</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
Each maze generates one line of output. If it is possible to reach the exit, print a line of the form

<P>

<P>
<BR>

<TT>Escaped in </TT><I>x</I><TT> minute(s).</TT>

<P>

<P>
<BR>
where <I>x</I> is replaced by the shortest time it takes to escape.

<P>
If it is not possible to escape, print the line

<P>

<P>
<BR>

<TT>Trapped!</TT>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 4 5
S....
.###.
.##..
###.#

#####
#####
##.##
##...

#####
#####
#.###
####E

1 3 3
S##
#E#
###

0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Escaped in 11 minute(s).
Trapped!
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
533||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Equation Solver</TITLE>
<META NAME="description" CONTENT="Equation Solver">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Equation Solver</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Write a program that can solve linear equations with one variable.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain a number of equations, each one on a separate
line. All equations are
strings of less than 100 characters which strictly adhere to the following
grammar (given in EBNF):

<P>
<PRE>
    Equation   := Expression '=' Expression
    Expression := Term { ('+' | '-') Term }
    Term       := Factor { '*' Factor }
    Factor     := Number | 'x' | '(' Expression ')'
    Number     := Digit | Digit Number
    Digit      := '0' | '1' | ... | '9'
</PRE>

<P>
Although the grammar would allow to construct non-linear equations
like ``<I>x</I>*<I>x</I>=25", we guarantee
that all equations occuring in the input file will be linear in <I>x</I>. We
further guarantee that all
sub-expressions of an equation will be linear in <I>x</I> too. That means, there
won't be test cases like

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
x*x-x*x+x=0
\end{displaymath} -->


<I>x</I>*<I>x</I>-<I>x</I>*<I>x</I>+<I>x</I>=0
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
which is a linear equation but contains non-linear
sub-expressions (<I>x</I>*<I>x</I>).

<P>
Note that all numbers occuring in the input are non-negative integers,
while the solution for <I>x</I> is a real number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, print a line saying ``<TT>Equation #</TT><I>i</I> (where <I>i</I> is the number
of the test case) and a line with one of the following answers:

<P>
<UL>
<LI>If the equation has no solution, print ``<TT>No solution.</TT>".
<LI>If the equation has infinitely many solutions, print ``<TT>Infinitely many solutions.</TT>".
<LI>If the equation has exactly one solution, print ``<TT>x = </TT><I>solution</I>" where <I>solution</I> is replaced by the
appropriate real number (printed to six decimals).
</UL>

<P>

<P>
<BR>
Print a blank line after each test case, but the last one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
x+x+x=10
4*x+2=19
3*x=3*x+1+2+3
(42-6*7)*x=2*5-10
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Equation #1
x = 3.333333

Equation #2
x = 4.250000

Equation #3
No solution.

Equation #4
Infinitely many solutions.
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
534||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Frogger</TITLE>
<META NAME="description" CONTENT="Frogger">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Frogger</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Freddy Frog is sitting on a stone in the middle of a lake. Suddenly he notices
Fiona Frog who is
sitting on another stone. He plans to visit her, but since the water is
dirty and full of tourists'
sunscreen, he wants to avoid swimming and instead reach her by jumping.

<P>
Unfortunately Fiona's stone is out of his jump range. Therefore Freddy
considers to use other
stones as intermediate stops and reach her by a sequence of several
small jumps.

<P>
To execute a given sequence of jumps, a frog's jump range obviously must
be at least as long as the longest jump occuring in the sequence.

<P>
The <EM>frog distance</EM> (humans also call it <EM>minimax distance</EM>) between two stones therefore is defined as
the minimum necessary jump range over all possible paths between the
two stones.

<P>

<P>
<BR>
You are given the coordinates of Freddy's stone, Fiona's stone and all other stones in the lake. Your
job is to compute the 
frog distance between Freddy's and Fiona's stone.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases. The first line of
each test case will contain the
number of stones <I>n</I> (
<!-- MATH: $2 \le n \le 200$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/534img1.gif" 
 ALT="$2 \le n \le 200$">). The next <I>n</I> lines each contain two
integers <I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB> (
<!-- MATH: $0 \le x_i,y_i \le 1000$ -->
<IMG
 WIDTH="132" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/534img1.gif" 
 ALT="$0 \le x_i,y_i \le 1000$">)
representing the coordinates of stone #<I>i</I>. Stone #1 is Freddy's stone,
stone #2 is Fiona's stone,
the other <I>n</I>-2 stones are unoccupied. There's a blank line following each test
case. Input is terminated by a value of zero (0) for <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, print a line saying ``<TT>Scenario #</TT><I>x</I>" and a line
saying ``<TT>Frog Distance = </TT><I>y</I>" where <I>x</I>
is replaced by the test case number (they are numbered from 1) and <I>y</I> is
replaced by the appropriate
real number, printed to three decimals. Put a blank line after each
test case, even after the last one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
0 0
3 4

3
17 4
19 4
18 5

0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1
Frog Distance = 5.000

Scenario #2
Frog Distance = 1.414
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
535||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Globetrotter</TITLE>
<META NAME="description" CONTENT="Globetrotter">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Globetrotter</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
As a member of an ACM programming team you'll soon find yourself always
traveling around the
world: Z&#252;rich, Philadelphia, San Jos&#233;, Atlanta,... from 1999 on the
Contest Finals even will be on a
different continent each year, so one day you might get to Japan or Australia.

<P>
At the contest site it would be interesting to know how many miles you
are away from home. For
this sake, your job is to write a program to compute the geographical distance
between two given
locations on the Earth's surface.

<P>
We assume that the Earth is a perfect sphere with a radius of exactly 6378 km.
The geographical
distance between A and B is the length of the geodetic line segment
connecting A and B.

<P>
The geodetic line segment between two points on a sphere is the shortest
connecting curve lying
entirely in the surface of the sphere.

<P>
The value of pi (<IMG
 WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/535img1.gif" 
 ALT="$\pi$">)
is approximately 3.141592653589793.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will consist of two parts: a list of cities and a list of
queries.

<P>

<P>
<BR>

<B>City List</B>

<P>
The city list consists of up to 100 lines, one line per city.
Each line will contain a string <I>c</I><SUB><I>i</I></SUB> and two
real numbers <I>lat</I><SUB><I>i</I></SUB> and <I>long</I><SUB><I>i</I></SUB>, representing the city name, its latitude and
its longitude, respectively.

<P>
The city name will be shorter than 30 characters and will not contain
white-space characters.
The latitude will be between -90 (South Pole) and +90 (North Pole). The
longitude will be between
-180 and +180 where negative numbers denote locations west of the meridian
and positive numbers
denote locations east of the meridian. (The meridian passes through Greenwich,
London.)

<P>
The city list will be terminated by a line consisting of a single ``<TT>#</TT>".

<P>

<P>
<BR>

<B>Query List</B>

<P>
Each line will contain two city names <I>A</I> and <I>B</I>.

<P>
The query list will be terminated by the line ``<TT># #</TT>".

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each query, print a line saying ``<I>A</I> <TT>-</TT> <I>B</I>" where <I>A</I> and <I>B</I> are replaced by
the city names. Then print
a line saying ``<I>x</I> <TT>km</TT>" where <I>x</I> is replaced by the geographical distance (in km) between the two cities, rounded to the nearest integer.

<P>
If one of the cities in the query didn't occur in the city list, print a line saying ``<TT>Unknown</TT>" instead.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
Ulm 48.700 10.500
Freiburg 47.700 9.500
Philadelphia 39.883 -75.250
SanJose 37.366 -121.933
NorthPole 90 0
SouthPole -90 0
#
Ulm Philadelphia
Ulm SanJose
Freiburg Philadelphia
Freiburg SanJose
Ulm Freiburg
SanJose Philadelphia
Ulm LasVegas
Ulm Ulm
Ulm NorthPole
Ulm SouthPole
NorthPole SouthPole
# #
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Ulm - Philadelphia
6536 km
Ulm - SanJose
9367 km
Freiburg - Philadelphia
6519 km
Freiburg - SanJose
9412 km
Ulm - Freiburg
134 km
SanJose - Philadelphia
4023 km
Ulm - LasVegas
Unknown
Ulm - Ulm
0 km
Ulm - NorthPole
4597 km
Ulm - SouthPole
15440 km
NorthPole - SouthPole
20037 km
</PRE>

<P>

<P>
</BODY>
</HTML>

______________________________________________________
536||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Tree Recovery</TITLE>
<META NAME="description" CONTENT="Tree Recovery">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Tree Recovery</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Little Valentine liked playing with binary trees very much. Her favorite
game was constructing
randomly looking binary trees with capital letters in the nodes.

<P>
This is an example of one of her creations:

<P>
<PRE>
                                    D
                                   / \
                                  /   \
                                 B     E
                                / \     \
                               /   \     \ 
                              A     C     G
                                         /
                                        /
                                       F
</PRE>

<P>
To record her trees for future generations, she wrote down two strings
for each tree: a preorder
traversal (root, left subtree, right subtree) and an inorder traversal
(left subtree, root, right subtree).

<P>
For the tree drawn above the preorder traversal is <TT>DBACEGF</TT> and the
inorder traversal is <TT>ABCDEFG</TT>.

<P>
She thought that such a pair of strings would give enough information to
reconstruct the tree later (but she never tried it).

<P>

<P>
<BR>
Now, years later, looking again at the strings, she realized that
reconstructing the trees was indeed
possible, but only because she never had used the same letter twice
in the same tree.

<P>
However, doing the reconstruction by hand, soon turned out to be tedious.

<P>
So now she asks you to write a program that does the job for her!

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases.
Each test case consists of one line containing two strings preord and
inord, representing the
preorder traversal and inorder traversal of a binary tree. Both strings
consist of unique capital
letters. (Thus they are not longer than 26 characters.)

<P>
Input is terminated by end of file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each test case, recover Valentine's binary tree and print one line
containing the tree's postorder
traversal (left subtree, right subtree, root).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
DBACEGF ABCDEFG
BCAD CBAD
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ACBFGED
CDAB
</PRE>

<P>
</BODY>
</HTML>

______________________________________________________
537||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Artificial Intelligence?</TITLE>
<META NAME="description" CONTENT="Artificial Intelligence?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Artificial Intelligence?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Physics teachers in high school often think that problems given as text are more demanding than
pure computations. After all, the pupils have to read and understand the problem first!

<P>
So they don't state a problem like ``<TT>U=10V, I=5A, P=?</TT>" but rather like ``<TT>You have an electrical
circuit that contains a battery with a voltage of U=10V and a light-bulb. There's an electrical
current of I=5A through the bulb. Which power is generated in the bulb?</TT>".

<P>
However, half of the pupils just don't pay attention to the text anyway. They just extract from the
text what is given: U=10V, I=5A. Then they think: ``Which formulae do I know? Ah yes, P=U*I.
Therefore P=10V*5A=500W. Finished."

<P>
OK, this doesn't always work, so these pupils are usually not the top scorers in physics tests. But at
least this simple algorithm is usually good enough to pass the class. (Sad but true.)

<P>
Today we will check if a computer can pass a high school physics test. We will concentrate on the
<TT>P-U-I</TT> type problems first. That means, problems in which two of power, voltage and current are
given and the third is wanted.

<P>

<P>
<BR>
Your job is to write a program that reads such a text problem and solves it according to the simple
algorithm given above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input file will contain the number of test cases.

<P>
Each test case will consist of one line containing exactly two data fields and some additional
arbitrary words. A data field will be of the form <TT>I=</TT><I>x</I><TT>A</TT>, <TT>U=</TT><I>x</I><TT>V</TT> or <TT>P=</TT><I>x</I><TT>W</TT>, where <I>x</I> is a real number.

<P>
Directly before the unit (<TT>A</TT>, <TT>V</TT> or <TT>W</TT>) one of the prefixes <TT>m</TT> (milli), <TT>k</TT> (kilo) and <TT>M</TT> (Mega) may also
occur. To summarize it: Data fields adhere to the following grammar:

<P>
<PRE>
DataField ::= Concept '=' RealNumber [Prefix] Unit
Concept   ::= 'P' | 'U' | 'I'
Prefix    ::= 'm' | 'k' | 'M'
Unit      ::= 'W' | 'V' | 'A'
</PRE>

<P>
Additional assertions:

<P>
<UL>
<LI>The equal sign (`<TT>=</TT>') will never occur in an other context than within a data field.
<LI>There is no whitespace (tabs,blanks) inside a data field.
<LI>Either <TT>P</TT> and <TT>U</TT>, <TT>P</TT> and <TT>I</TT>, or <TT>U</TT> and <TT>I</TT> will be given.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print three lines:

<P>
<UL>
<LI>a line saying ``<TT>Problem #</TT><I>k</I>" where <I>k</I> is the number of the test case
<LI>a line giving the solution (voltage, power or current, dependent on what was given), written
without a prefix and with two decimal places as shown in the sample output
<LI>a blank line
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
If the voltage is U=200V and the current is I=4.5A, which power is generated?
A light-bulb yields P=100W and the voltage is U=220V. Compute the current, please.
bla bla bla lightning strike I=2A bla bla bla P=2.5MW bla bla voltage?
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Problem #1
P=900.00W

Problem #2
I=0.45A

Problem #3
U=1250000.00V
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
538||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Balancing Bank Accounts</TITLE>
<META NAME="description" CONTENT="Balancing Bank Accounts">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Balancing Bank Accounts</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Once upon a time there was a large team coming home from the ACM World Finals. The fifteen
travellers were confronted with a big problem:

<P>

<P>
<BR>
In the previous weeks, there had been many money transactions between them: Sometimes
somebody paid the entrance fees of a theme park for the others, somebody else paid the hotel room,
another one the rental car, and so on.

<P>
So now the big calculation started. Some people had paid more than others, thus the individual bank
accounts had to be balanced again. "Who has to pay whom how much?", that was the question.

<P>
As such a calculation is a lot of work, we need a program now that will solve this problem next
year.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases.

<P>
Each test case starts with a line containing two integers: the number of travellers <I>n</I> (
<!-- MATH: $2 \le n \le 20$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/538img1.gif" 
 ALT="$2 \le n \le 20$">)
and the number of transactions <I>t</I> (
<!-- MATH: $1 \le t \le 1000$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/538img1.gif" 
 ALT="$1 \le t \le 1000$">). On the next <I>n</I> lines the names of the travellers are
given, one per line. The names only consist of alphabetic characters and contain no whitespace. On
the following <I>t</I> lines, the transactions are given in the format 
<!-- MATH: $name_1 name_2 amount$ -->
<I>name</I><SUB>1</SUB> <I>name</I><SUB>2</SUB> <I>amount</I> where <I>name</I><SUB>1</SUB> is
the person who gave <I>amount</I> dollars to <I>name</I><SUB>2</SUB> . The amount will always be a non-negative integer
less than 10000.

<P>
Input will be terminated by two values of 0 for <I>n</I> and <I>t</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first print a line saying ``<TT>Case #</TT><I>i</I>" where <I>i</I> is the number of the test case.

<P>
Then, on the following lines, print a list of transactions that reverses the transactions given in the
input, i.e. balances the accounts again. Use the same format as in the input. Print a blank line after
each test case, even after the last one.

<P>

<P>
<BR>
Additional restrictions:

<P>
<UL>
<LI>Your solution must consist of <B>at most </B><I>n</I>-1<B> transactions</B>.
<LI>Amounts may not be negative, i.e. never output ``<TT>A B -20</TT>", output 
``<TT>B A 20</TT>" instead.
</UL>

<P>
If there is more than one solution satisfying these restrictions, anyone is fine.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1
Donald
Dagobert
Donald Dagobert 15
4 4
John
Mary
Cindy
Arnold
John Mary 100
John Cindy 200
Cindy Mary 40
Cindy Arnold 150
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case #1
Dagobert Donald 15

Case #2
Mary John 140
Cindy John 10
Arnold John 150
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
539||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Settlers of Catan</TITLE>
<META NAME="description" CONTENT="The Settlers of Catan">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Settlers of Catan</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Within <EM>Settlers of Catan</EM>, the 1995 German game of the year, players attempt to dominate an island
by building roads, settlements and cities across its uncharted wilderness.

<P>
You are employed by a software company that just has decided to develop a computer version of
this game, and you are chosen to implement one of the game's special rules:

<P>

<P>
<BR>
When the game ends, the player who built the longest road gains two extra victory points.

<P>

<P>
<BR>
The problem here is that the players usually build complex road networks and not just one linear
path. Therefore, determining the longest road is not trivial (although human players usually see it
immediately).

<P>

<P>
<BR>
Compared to the original game, we will solve a simplified problem here: You are given a set of
nodes (cities) and a set of edges (road segments) of length 1 connecting the nodes.
The longest road is defined as the longest path within the network that doesn't use an edge twice.
Nodes may be visited more than once, though.

<P>

<P>
<BR>
Example: The following network contains a road of length 12.

<P>
<PRE>
o        o -- o        o
 \      /      \      /
  o -- o        o -- o
 /      \      /      \
o        o -- o        o -- o
               \      /
                o -- o
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases.

<P>
The first line of each test case contains two integers: the number of nodes <I>n</I> (
<!-- MATH: $2 \le n \le 25$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/539img1.gif" 
 ALT="$2 \le n \le 25$">)
and the
number of edges <I>m</I> (
<!-- MATH: $1 \le m \le 25$ -->
<IMG
 WIDTH="92" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/539img1.gif" 
 ALT="$1 \le m \le 25$">). The next <I>m</I> lines describe the <I>m</I> edges. Each edge is given by the
numbers of the two nodes connected by it. Nodes are numbered from 0 to <I>n</I>-1. Edges are
undirected. Nodes have degrees of three or less. The network is not neccessarily connected.

<P>
Input will be terminated by two values of 0 for <I>n</I> and <I>m</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the length of the longest road on a single line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 2
0 1
1 2
15 16
0 2
1 2
2 3
3 4
3 5
4 6
5 7
6 8
7 8
7 9
8 10
9 11
10 12
11 12
10 13
12 14
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
12
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
540||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Team Queue</TITLE>
<META NAME="description" CONTENT="Team Queue">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Team Queue</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<EM>Queues</EM> and <EM>Priority Queues</EM> are data structures which are known to most computer scientists. The
<EM>Team Queue</EM>, however, is not so well known, though it occurs often in everyday life. At lunch time
the queue in front of the Mensa is a team queue, for example.

<P>

<P>
<BR>
In a team queue each element belongs to a team. If an element enters the queue, it first searches the
queue from head to tail to check if some of its <EM>teammates</EM> (elements of the same team) are already
in the queue. If yes, it enters the queue right behind them. If not, it enters the queue at the tail and
becomes the new last element (bad luck). Dequeuing is done like in normal queues: elements are
processed from head to tail in the order they appear in the team queue.

<P>

<P>
<BR>
Your task is to write a program that simulates such a team queue.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases. Each test case begins with the number of teams <I>t</I>
(
<!-- MATH: $1 \le t \le 1000$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/540img1.gif" 
 ALT="$1 \le t \le 1000$">). Then t team descriptions follow, each one consisting of the number of elements
belonging to the team and the elements themselves. Elements are integers in the range 0 - 999999.
A team may consist of up to 1000 elements.

<P>
Finally, a list of commands follows. There are three different kinds of commands:

<P>
<UL>
<LI><TT>ENQUEUE </TT><I>x</I> - enter element <I>x</I> into the team queue
<LI><TT>DEQUEUE</TT> - process the first element and remove it from the queue
<LI><TT>STOP</TT> - end of test case
</UL>

<P>
The input will be terminated by a value of 0 for t.

<P>

<P>
<BR>

<B>Warning:</B> A test case may contain up to 200000 (two hundred thousand) commands, so the
implementation of the team queue should be efficient: both enqueing and dequeuing of an element
should only take constant time.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first print a line saying ``<TT>Scenario #</TT><I>k</I>", where <I>k</I> is the number of the test case.
Then, for each <TT>DEQUEUE</TT> command, print the element which is dequeued on a single line. Print a
blank line after each test case, even after the last one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
3 101 102 103
3 201 202 203
ENQUEUE 101
ENQUEUE 201
ENQUEUE 102
ENQUEUE 202
ENQUEUE 103
ENQUEUE 203
DEQUEUE
DEQUEUE
DEQUEUE
DEQUEUE
DEQUEUE
DEQUEUE
STOP
2
5 259001 259002 259003 259004 259005
6 260001 260002 260003 260004 260005 260006
ENQUEUE 259001
ENQUEUE 260001
ENQUEUE 259002
ENQUEUE 259003
ENQUEUE 259004
ENQUEUE 259005
DEQUEUE
DEQUEUE
ENQUEUE 260002
ENQUEUE 260003
DEQUEUE
DEQUEUE
DEQUEUE
DEQUEUE
STOP
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Scenario #1
101
102
103
201
202
203

Scenario #2
259001
259002
259003
259004
259005
260001
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
541||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Error Correction</TITLE>
<META NAME="description" CONTENT="Error Correction">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Error Correction</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A boolean matrix has the <EM>parity property</EM> when each row and each column has an even sum, i.e.
contains an even number of bits which are set. Here's a 4 x 4 matrix which has the parity property:

<P>
<PRE>
1 0 1 0
0 0 0 0
1 1 1 1
0 1 0 1
</PRE>

<P>
The sums of the rows are 2, 0, 4 and 2. The sums of the columns are 2, 2, 2 and 2.

<P>

<P>
<BR>
Your job is to write a program that reads in a matrix and checks if it has the parity property. If not,
your program should check if the parity property can be established by changing only one bit. If
this is not possible either, the matrix should be classified as corrupt.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases. The first line of each test case contains one
integer <I>n</I> (<I>n</I>&lt;100), representing the size of the matrix. On the next <I>n</I> lines, there will be <I>n</I> integers
per line. No other integers than 0 and 1 will occur in the matrix. Input will be terminated by a value
of 0 for <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each matrix in the input file, print one line. If the matrix already has the parity property, print
``<TT>OK</TT>". If the parity property can be established by changing one bit, print ``<TT>Change bit </TT>(<I>i</I>,<I>j</I>)" where <I>i</I>
is the row and <I>j</I> the column of the bit to be changed. Otherwise, print ``<TT>Corrupt</TT>".

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1 0 1 0
0 0 0 0
1 1 1 1
0 1 0 1
4
1 0 1 0
0 0 1 0
1 1 1 1
0 1 0 1
4
1 0 1 0
0 1 1 0
1 1 1 1
0 1 0 1
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
OK
Change bit (2,3)
Corrupt
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
542||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>France '98</TITLE>
<META NAME="description" CONTENT="France '98">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
France '98</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Today the first round of the Soccer World Championship in France is coming to an end. 16
countries are remaining now, among which the winner is determined by the following tournament:

<P>
<PRE>
 1 Brazil -----+
               +-- ? --+
 2 Chile ------+       |
                       +-- ? --+
 3 Nigeria ----+       |       |
               +-- ? --+       |
 4 Denmark ----+               |
                               +-- ? --+
 5 Holland ----+               |       |
               +-- ? --+       |       |
 6 Yugoslavia -+       |       |       |
                       +-- ? --+       |
 7 Argentina --+       |               |
               +-- ? --+               |
 8 England ----+                       |
                                       +-- World Champion
 9 Italy ------+                       |
               +-- ? --+               |
10 Norway -----+       |               |
                       +-- ? --+       |
11 France -----+       |       |       |
               +-- ? --+       |       |
12 Paraguay ---+               |       |
                               +-- ? --+
13 Germany ----+               |
               +-- ? --+       |
14 Mexico -----+       |       |
                       +-- ? --+
15 Romania ----+       |
               +-- ? --+
16 Croatia ----+
</PRE>

<P>
For each possible match A vs. B between these 16 nations, you are given the probability that team
A wins against B. This (together with the tournament mode displayed above) is sufficient to
compute the probability that a given nation wins the World Cup. For example, if Germany wins
against Mexico with 80%, Romania against Croatia with 60%, Germany against Romania with 70%
and Germany against Croatia with 90%, then the probability that Germany reaches the semi-finals
is 80% * (70% * 60% + 90% * 40%) = 62.4%.

<P>

<P>
<BR>
Your task is to write a program that computes the chances of the 16 nations to become the World Champion '98.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain just one test case.

<P>
The first 16 lines of the input file give the names of the 16 countries, from top to bottom according
to the picture given above.

<P>
Next, there will follow a 16 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/542img1.gif" 
 ALT="$\times$">
16 integer matrix <I>P</I> where element <I>p</I><SUB><I>ij</I></SUB> gives the probability in percent
that country #<I>i</I> defeats country #<I>j</I> in a direct match. Country #<I>i</I> means the <I>i</I>-th country from top to
bottom given in the list of countries. In the picture above Brazil is #1 and Germany is #13, so

<!-- MATH: $p_{1,13} = 55$ -->
<I>p</I><SUB>1,13</SUB> = 55 would mean that in a match between Brazil and Germany, Brazil wins with a probability of 55%.

<P>
Note that matches may not end with a draw, i.e. 
<!-- MATH: $p_{ij} + p_{ji} = 100$ -->
<I>p</I><SUB><I>ij</I></SUB> + <I>p</I><SUB><I>ji</I></SUB> = 100 for all <I>i</I>,<I>j</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output 16 lines of the form ``
<!-- MATH: $XXXXXXXXXX$ -->
<I>XXXXXXXXXX</I> <TT>p=</TT><I>Y</I>.<I>YY</I>%", where 
<!-- MATH: $XXXXXXXXXX$ -->
<I>XXXXXXXXXX</I> is the country's
name, left-justified in a field of 10 characters, and <I>Y</I>.<I>YY</I> is their chance in percent to win the cup,
written to two decimal places. Use the same order of countries like in the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Brazil
Chile
Nigeria
Denmark
Holland
Yugoslavia
Argentina
England
Italy
Norway
France
Paraguay
Germany
Mexico
Romania
Croatia
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
35 50 35 45 40 35 35 50 30 40 25 40 25 40 35 35
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
40 55 40 50 45 40 40 55 35 45 30 45 30 45 40 40
45 60 45 55 50 45 45 60 40 50 35 50 35 50 45 45
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
35 50 35 45 40 35 35 50 30 40 25 40 25 40 35 35
55 70 55 65 60 55 55 70 50 60 45 60 45 60 55 55
45 60 45 55 50 45 45 60 40 50 35 50 35 50 45 45
60 75 60 70 65 60 60 75 55 65 50 65 50 65 60 60
45 60 45 55 50 45 45 60 40 50 35 50 35 50 45 45
60 75 60 70 65 60 60 75 55 65 50 65 50 65 60 60
45 60 45 55 50 45 45 60 40 50 35 50 35 50 45 45
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
50 65 50 60 55 50 50 65 45 55 40 55 40 55 50 50
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Brazil     p=8.54%
Chile      p=1.60%
Nigeria    p=8.06%
Denmark    p=2.79%
Holland    p=4.51%
Yugoslavia p=7.50%
Argentina  p=8.38%
England    p=1.56%
Italy      p=9.05%
Norway     p=3.23%
France     p=13.72%
Paraguay   p=3.09%
Germany    p=13.79%
Mexico     p=3.11%
Romania    p=5.53%
Croatia    p=5.53%
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
543||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Goldbach's Conjecture</TITLE>
<META NAME="description" CONTENT="Goldbach's Conjecture">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Goldbach's Conjecture</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In 1742, Christian Goldbach, a German amateur mathematician, sent a letter to Leonhard Euler in
which he made the following conjecture:
<P><i>Every number greater than 2 can be written as the sum of three prime numbers.</i>

<P>Goldbach cwas considering 1 as a primer number, a convention that is no longer followed. Later on, Euler re-expressed the conjecture as:

<P><i>Every even number greater than or equal to 4 can be expressed as the sum of two prime numbers.</i>

<P>

<P>
<BR>
For example:

<P>
<UL>
<LI>8 = 3 + 5. Both 3 and 5 are odd prime numbers.
<LI>20 = 3 + 17 = 7 + 13.
<LI>42 = 5 + 37 = 11 + 31 = 13 + 29 = 19 + 23.
</UL>

<P>
Today it is still unproven whether the conjecture is right. (Oh wait, I have the proof of course, but it
is too long to write it on the margin of this page.)

<P>

<P>
<BR>
Anyway, your task is now to verify Goldbach's conjecture as expressed by Euler for all even numbers less than a million.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases.

<P>
Each test case consists of one even integer <I>n</I> with 
<!-- MATH: $6 \le n < 1000000$ -->
<IMG
 WIDTH="131" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/543img2.gif" 
 ALT="$6 \le n < 1000000$">.

<P>
Input will be terminated by a value of 0 for <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print one line of the form <I>n</I> = <I>a</I> + <I>b</I>, where <I>a</I> and <I>b</I> are odd primes. Numbers and
operators should be separated by exactly one blank like in the sample output below. If there is more
than one pair of odd primes adding up to <I>n</I>, choose the pair where the difference <I>b</I> - <I>a</I> is maximized.

<P>
If there is no such pair, print a line saying ``<TT>Goldbach's conjecture is wrong.</TT>"

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8
20
42
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 = 3 + 5
20 = 3 + 17
42 = 5 + 37
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
544||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Heavy Cargo</TITLE>
<META NAME="description" CONTENT="Heavy Cargo">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Heavy Cargo</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<EM>Big Johnsson Trucks Inc.</EM> is a company specialized in manufacturing big trucks. Their latest model,
the <EM>Godzilla V12</EM>, is so big that the amount of cargo you can transport with it is never limited by the
truck itself. It is only limited by the weight restrictions that apply for the roads along the path you want to drive.

<P>

<P>
<BR>
Given start and destination city, your job is to determine the maximum load of the <EM>Godzilla V12</EM> so
that there still exists a path between the two specified cities.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases. The first line of each test case will contain two
integers: the number of cities <I>n</I> (
<!-- MATH: $2 \le n \le 200$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/544img1.gif" 
 ALT="$2 \le n \le 200$">)
and the number of road segments <I>r</I> (
<!-- MATH: $1 \le r \le 19900$ -->
<IMG
 WIDTH="112" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/544img1.gif" 
 ALT="$1 \le r \le 19900$">)
making up the street network.

<P>
Then <I>r</I> lines will follow, each one describing one road segment by naming the two cities connected
by the segment and giving the weight limit for trucks that use this segment. Names are not longer
than 30 characters and do not contain white-space characters. Weight limits are integers in the
range 0 - 10000. Roads can always be travelled in both directions.

<P>
The last line of the test case contains two city names: start and destination.

<P>
Input will be terminated by two values of 0 for <I>n</I> and <I>r</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print three lines:
<UL>
<LI>a line saying ``<TT>Scenario #</TT><I>x</I>" where <I>x</I> is the number of the test case
<LI>a line saying ``<I>y</I> <TT>tons</TT>" where <I>y</I> is the maximum possible load
<LI>a blank line
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 3
Karlsruhe Stuttgart 100
Stuttgart Ulm 80
Ulm Muenchen 120
Karlsruhe Muenchen
5 5
Karlsruhe Stuttgart 100
Stuttgart Ulm 80
Ulm Muenchen 120
Karlsruhe Hamburg 220
Hamburg Muenchen 170
Muenchen Karlsruhe
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Scenario #1
80 tons

Scenario #2
170 tons
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
545||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Heads</TITLE>
<META NAME="description" CONTENT="Heads">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Heads</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The probability of <I>n</I> heads in a row tossing a 
fair coin is 2<SUP>-<I>n</I></SUP> 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains an integer <I>r</I>. Then <i>r</i> lines containing each one an integer number <I>n</I>. The value
of <I>n</I> is as follows:
<!-- MATH: $0< n \le 9000$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/545img1.gif" 
 ALT="$0< n \le 9000$">.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
 Print <I>r</I> lines each with the value of 2<SUP>-<I>n</I></SUP> for the given 
values of <I>n</I>, using the format:

<P>

<P>
<BR>

<code>2^-</code><I>n</I><code> = x.xxxE-</code><I>y</I>

<P>

<P>
<BR>
where each <I>x</I> is a decimal digit and each <I>y</I> is a decimal integer 
with no leading zeroes or spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
8271
6000
1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2^-8271 = 1.517E-2490
2^-6000 = 6.607E-1807
2^-1 = 5.000E-1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
546||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Image Recognizer</TITLE>
<META NAME="description" CONTENT="Image Recognizer">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Image Recognizer</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Consider an Image represented by a matrix of digits,
each digit represents the brightness of a pixel, as shown below. In early
image processing, one could detect a particular feature in the image by
finding the location where the feature (template) best matches the image.

<P>
<PRE>
Image:  0 1 0 1 1 0 0         Template:  0 0 1 1 1 1
        0 0 0 0 1 1 1                    0 2 0 0 2 0
        0 1 2 0 1 2 0                    3 3 3 3 0 0
        0 3 3 2 3 3 0
        0 1 1 1 0 0 1
</PRE>

<P>
To do this, you have to calculate, for each point  <I>y</I> in the image where
the template can fit entirely within the image, the cross-correlation 

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
S_x i(x) t(x-y)
\end{displaymath} -->


<I>S</I><SUB><I>x</I></SUB> <I>i</I>(<I>x</I>) <I>t</I>(<I>x</I>-<I>y</I>)
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
where <I>i</I> and <I>t</I> are the image and template light function respectively and <I>x</I>
runs over all points in the image. The point with maximum
cross-correlation is accepted as the location of the feature in the image.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Develop a program that takes pairs of images - real images (I) and templates (T). For each pair, use the
algorithm above and deliver the point of location (which is the pixel
(<I>x</I>,<I>y</I>) in <I>i</I> where <I>t</I> has maximum cross-correlation) Give one answer per
line. The Image starts al location (0,0) which is the upper-left corner.
In the example below, the feature is detected at point of location (1,1).
Which is The only output line. I means image and T template.

<P>

<B>Notes:</B> The image and templates sizes are variable and never will be
greater than 50 by 50 points. The <I>x</I>-axis is horizontal and the <I>y</I>-axis is
vertical.  A character <TT>F</TT> in the input file indicates the end of pairs of
images. If a template fits equally in more than one place, the correct
answer will be the closest to the upper side, then the closest to the left side. You can take the
exact format from the example below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
I
0 1 0 1 1 0 0
0 0 0 0 1 1 1
0 1 2 0 1 2 0
0 3 3 2 3 3 0
0 1 1 0 0 0 1
T
0 0 1 1 1 1
0 2 0 0 2 0
3 3 3 3 0 0
F
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
(1,1)
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
547||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>DDF</TITLE>
<META NAME="description" CONTENT="DDF">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
DDF</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An integer <I>a</I> is a positive factor of an integer <I>b</I> if
<I>a</I> is greater than zero and there exist some integer <I>n</I> such that 
<!-- MATH: $a \times n = b$ -->
<IMG
 WIDTH="76" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/547img1.gif" 
 ALT="$a \times n = b$">.

<P>
Consider a sequence of integer 
<!-- MATH: $x_1, x_2, x_3, \dots, Â�x_n$ -->
<IMG
 WIDTH="130" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/547img1.gif" 
 ALT="$x_1, x_2, x_3, \dots, Â�x_n$">.
This sequence is a Decimal-Digit Factor Sequence (DDF) if each number in
the sequence is a positive integer where <I>x</I><SUB>1</SUB> &gt; 1 and for all positive
integers <I>i</I> &gt; 1, <I>x</I><SUB><I>i</I>+1</SUB> is the sum of the digits of all positive factors of
<I>x</I><SUB><I>i</I></SUB>.

<P>
The following is a DDF:

<P>
<PRE>
	17, 9, 13, 5, 6, ...
positive factor of 17 = 1, 17
	1 + (1 + 7) = 9
positive factor of 9 = 1, 3, 9
	1 + 3 + 9 = 13
positive factor of 13 = 1, 13
	1 + (1 + 3) = 5
positive factor of 5 = 1, 5
	1 + 5 = 6
</PRE>

<P>
It is known that any DDF beginning whit a number greater than or equal to
1000 repeats no number greater than or equal to 1000 and contains a number
less than 1000. In addition, every DDF beginning whit a number less than
1000 contains no number greater than 999. Thus, every DDF must eventually
repeat number less than 1000. It has also been show that every DDF
eventually repeats a single number. That is, for each DDF, there exists a
number <I>x</I><SUB><I>n</I></SUB>, called the last term, such that for all <I>j</I> &gt;<I>n</I>, <I>x</I><SUB><I>j</I></SUB> = <I>x</I><SUB><I>n</I></SUB>.

<P>
Write a program that will find the longest DDF. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
You have to read the input
file each line will have two numbers <I>m</I>, <I>n</I> which define the range were you
have to find the longest DDF. In non case <I>m</I> and <I>n</I> will be greater than
3000. Many DDF's will have the same last term, so you program should
report only the first one. If there are many DDF's with maximum lenght, you should report the one starting with the
smallest number. 
<br><br>
You can take the exact format from the example below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
200 500
100 150
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Input1: 200 500
Output1: 285 66 36 46 18 30 27 22 9 13 5 6 12 19 11 3 4 7 8 15 
Input2: 100 150
Output2: 102 36 46 18 30 27 22 9 13 5 6 12 19 11 3 4 7 8 15
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
548||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Tree</TITLE>
<META NAME="description" CONTENT="Tree">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Tree</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are to determine the value of the leaf node in a given binary tree
that is the terminal node of a path of least value from the root of the
binary tree to any leaf. The value of a path is the sum of values of nodes
along that path.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain a description of the binary tree given as the
inorder and postorder traversal sequences of that tree. Your program will
read two line (until end of file) from the input file. The first line will
contain the sequence of values associated with an inorder traversal of the
tree and the second line will contain the sequence of values associated
with a postorder traversal of the tree. All values will be different, greater than zero and less than 10000. You may assume that no binary tree will have more than 10000 nodes or less than 1 node. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each tree description you should
output the value of the leaf node of a path of least value. In the case of
multiple paths of least value you should pick the one with the least value 
on the terminal node.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 2 1 4 5 7 6
3 1 2 5 6 7 4
7 8 11 3 5 16 12 18
8 3 11 7 16 18 12 5
255
255
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
3
255
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
549||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Evaluating an Equations Board</TITLE>
<META NAME="description" CONTENT="Evaluating an Equations Board">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Evaluating an Equations Board</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Equations is a game that is played competitively in several parts (The
game as described below is only a subset of the actual game). You are to
write a program which evaluates an Equations board.

<P>

<P>
<BR>
The game equations is played with 13 cubes. Each cube will contain six of
the following symbols, one symbol on each side:

<P>
<PRE>
0 1 2 3 4 5 6 7 8 9 + - x
</PRE>

<P>

(Each symbol can be found on six of the cubes.) The symbols <TT>+</TT> ,<TT>-</TT>  and <TT>x</TT>
stand for the binary operations addition, subtraction, and multiplication,
respectively. 

<P>

<P>
<BR>
There are two sections to an Equation board: Resources and Goal. At the
beginning of a game of Equations, all of the cubes are rolled and placed
into Resources section. For all examples below, assume that the following
was rolled:

<P>
<PRE>
0 1 4 5 6 7 9 + + + - x x
</PRE>

<P>
One of the players then sets a goal by taking one or two of the digits in
the Resources section and placing them into the Goal section. (assume that
you cannot have a goal with a leading 0 such as 09.) For all the examples
below, the goal is 56.

<P>

<P>
<BR>
The central idea of the game is to make a solution which equals the goal
and uses a subset of the other cubes. There are two main restrictions to
the solution:

<P>
<DL COMPACT>
<DT>1.
<DD>it can use only one-digit numbers. For instance, <TT>49 + 7</TT> is not a
valid solution, since 49 is a two-digit number.
<P>
<DT>2.
<DD>Parentheses may be used wherever valid in standard arithmetic.
This means that <TT>7 x (9 - 1)</TT> is a valid solution for the above goal, using
the aboves cubes. However, the parenteheses cannot be used for implied
multiplication, so <TT>7 (9 - 1)</TT> is not a valid solution.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 
Your program will read two lines at a time (until end of file) from the
input file. This two lines represent the Resource and the Goal sections of
an Equations board. There will be no embedded, leading or trailing blanks
on each line; you may also assume that the two lines contain only the 13
symbols which are legal symbols in Equations.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each situation, the program should output ``<TT>no solution</TT>" when you
cannot make a solution which equals the goal using some or all cubes from
Resources, or should output ``<TT>solution</TT>" when you can make a solution that
uses some or all cubes in Resource.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
999999+++++
54
0149++-7+xx
56
0149++-7+--
56
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
solution
solution
no solution
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
550||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Multiplying by Rotation</TITLE>
<META NAME="description" CONTENT="Multiplying by Rotation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Multiplying by Rotation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<B>Warning: Not all numbers in this problem are decimal numbers!</B>

<P>

<P>
<BR>
Multiplication of natural numbers in general is a cumbersome operation. In some
cases however the product can be obtained by moving the last digit to the front.

<P>

<P>
<BR>
Example: 179487 * 4 = 717948

<P>

<P>
<BR>
Of course this property depends on the numbersystem you use, in the above
example we used the decimal representation. In base 9 we have a shorter example:

<P>

<P>
<BR>
17 * 4 = 71 (base 9)

<P>

<P>
<BR>
as (9 * 1 + 7) * 4 = 7 * 9 + 1

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for your program is a textfile. Each line consists of three numbers separated by a space:
the base of the number system, the least significant digit of the first factor, and the second factor.
This second factor is one digit only hence less than the base. The input file ends with the standard
end-of-file marker.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Your program determines for each input line the number of digits of the smallest first factor with
the rotamultproperty. The output-file is also a textfile. Each line contains the answer for the
corresponding input line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
10 7 4
9 7 4
17 14 12
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6
2
4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
551||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Nesting a Bunch of Brackets</TITLE>
<META NAME="description" CONTENT="Nesting a Bunch of Brackets">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Nesting a Bunch of Brackets</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In this problem we consider expressions containing brackets that are properly
nested. These expressions are obtained by juxtaposition of properly netsted
expressions in a pair of matching brackets, the left one an opening
and the right one a closing bracket.

<P>

<P>
<BR>

<TT>( a + $ ( b = ) ( a ) )</TT> is properly nested

<P>

<P><P>
<BR>

<TT>( a + $ ) b = ) ( a ( )</TT> is not

<P>

<P>
<BR>
In this problem we have several pairs of brackets, so we have to impose a
second condition on the expression: the matching brackets should be of the same
kind. Consequently <TT>(())</TT> is OK, but <TT>([))</TT> is not. The pairs of brackets are:

<P>
<PRE>
(   )
[   ]
{   }
&lt;   &gt;
(*   *)
</PRE>

<P>
The two characters `<TT>(*</TT>' should be interpreted as one symbol, not as an opening bracket `<TT>(</TT>' followed immediately by an asterisk, and similarly for `<TT>*)</TT>'. The combination `<TT>(*)</TT>' should be interpreted as `<TT>(*</TT>' followed by `<TT>)'</TT>.

<P>
Write a program that checks wheter expressions are properly nested. If the expression is not properly nested your program should determine the position of the offending bracket, that is the length of the shortest prefix of the expression that can not be extended to a properly nested expression. Don't forget `<TT>(*</TT>' counts as one, as does `<TT>*)</TT>'. The characters that are not brackets also count as one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a text-file. Each line contains an expression to be checked followed by and end-of-line marker. No line contains more than 3000 characters. The input ends with a standard end-of-file marker.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output is a textfile. Each line contains the result of the check of the corresponding inputline,
that is <TT>YES</TT> (in upper case), if the expression is OK, and (if it is not OK) <TT>NO</TT> followed by a space and the position of the error.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
(*a++(*)
(*a{+}*)
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
NO 6
YES
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
552||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Filling the Gaps</TITLE>
<META NAME="description" CONTENT="Filling the Gaps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Filling the Gaps</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
At the largest conference on coding and cryptography the following theorem
needed a proof or a counterexample: Suppose you are given a set of words
of equal length; each word consisting of <TT>0</TT>'s, <TT>1</TT>'s and/or <TT>*</TT>'s. Furthermore
suppose the pattern of <TT>*</TT>'s is different for all words in the set. By this
we mean: if you replace all <TT>0</TT>'s and <TT>1</TT>'s by say <TT>$</TT> you obtain different words.

<P>

<P>
<BR>
The claim is: if you replace the <TT>*</TT>'s by <TT>0</TT>'s and <TT>1</TT>'s in all possible ways, then you obtain a set that is at least as big as the set you started with.

<P>

<P>
<BR>
Example:

<P>
<TT>{ 10*, *0*, *00 }</TT> produces <TT>{ 100, 101, 000, 001 }</TT>

<P>
<TT>{ 100, 101, 10* }</TT> produces <TT>{ 100, 101 }</TT>

<P>

<P>
<BR>
Notice that the set in the latter example does not satisfy the condidtion
mentioned above, so it does not provide a counterexample.

<P>

<P>
<BR>
You program has to check for a number of cases:

<P>
<DL COMPACT>
<DT>1.
<DD>Whether the pattern of <TT>*</TT>'s is different for all words in the set and:
<DT>2.
<DD>Compute the number of words obtained by replacing the <TT>*</TT>'s by <TT>0</TT>'s and <TT>1</TT>'s.
</DL>

<P>
The words will not be longer than 15 symbols.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a text-file that presents a sequence of sets. Each set is
described as follows. The first line gives two integers: the length of the
words and the number of the words. Then follow the words, each on a separate
line. The end of the sequence of sets is indicated by a set with wordlength
0 and number of words equal to 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output is a textfile that contains one line for each set. if the pattern
of <TT>*</TT>'s is different for all the words in this set this line should contain
<TT>YES</TT> (in uppercase), followed by a space and the number of
obtained words, otherwise it should contain <TT>NO</TT> (uppercase) only.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 3
10*
*0*
*00
4 3
1100
1101
110*
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
YES 4
NO
YES 0
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
553||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Simply proportion</TITLE>
<META NAME="description" CONTENT="Simply proportion">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Simply proportion</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Wou will probably have made a document on a word processor. When the job was
done and you
wanted to print that document you sometimes have the option to print the
document with
proportional spacing. This means that gaps between letters and words are
filled with very small
spaces (as small as your printer can handle) in such a way that you do not
see a ragged appearance
of a line but instead the line is left and right justified on your printout.
This could also be done by
filling each line with normal spaces, but this usually produces big gaps
between words. In the following we call these small spaces <B>dots</B>.

<P>

<P>
<BR>
In the exercise you are asked to produce an algorithm that fills lines with
dots in such a manner that
the line has a certain length (measured in dots). We will provide you with
lines which contain
spaces and certain letters. Each character has a width that can be measured
in dots. In order to keep
this exercise simple we will only use a subset of letters. These letters are
the following:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="CENTER"><B> Character</B></TD>
<TD ALIGN="CENTER"><B> Width</B></TD>
</TR>
<TR><TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">18</TD>
</TR>
<TR><TD ALIGN="CENTER">B</TD>
<TD ALIGN="CENTER">17</TD>
</TR>
<TR><TD ALIGN="CENTER">I</TD>
<TD ALIGN="CENTER">10</TD>
</TR>
<TR><TD ALIGN="CENTER">M</TD>
<TD ALIGN="CENTER">20</TD>
</TR>
<TR><TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">16</TD>
</TR>
<TR><TD ALIGN="CENTER">Y</TD>
<TD ALIGN="CENTER">13</TD>
</TR>
<TR><TD ALIGN="CENTER">`space'</TD>
<TD ALIGN="CENTER">Variable</TD>
</TR>
</TABLE></DIV>

<P>
The minimum number of dots between letters in a word is 3. The number of dots
that separates letters in a word is given by the greatest <B>possible</B> number that is equal to or smaller than 1/3 of the minimum number of dots that separate words (rounded down to the nearest integer).
The minimum
number of dots for a single space is 10(there is no upper limit for the number
of dots in a space).

<P>

<P>
<BR>

<B>Note:</B> the begin and end of a line may not contain (empty) dots.

<P>

<P>
<BR>
It can (and according to Murphy's law it will) happen that you are left with
a number of dots that
can't be equally divided in the gaps between letters or words. These leftovers
must be equally
divided over the spaces between the words beginning from the end of the line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for your program is a text-file. Each input consists of two lines.
On the first line there is
an integer (say <I>N</I>) that tells you the desired length of the line (measured in
dots) that will be your
output. This integer has a maximum value of 5000. The second line consists of
the input that you
have to reformat to the desired length (each word is separated from the other
by one space). Each
line has at least two words on it and the maximum number of characters on
this line is 80. There are
no spaces after the last word. It is given that it is possible to fill the
given line with dots so that the
resulting line has a length of <I>N</I> dots. The last two lines of the input are
given by:

<P>
<PRE>
0
SYMIBA
</PRE>

<P>
Your program must not perform any action on this last input, it is simply
there to mark the end of the input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Your program must convert the given line to the desired length (<I>N</I> dots). The
output is a text-file.
Each line corresponds to the second line of each input pair with the number
of dots between the
letters and words. The spaces between letters and words are denoted in a
special manner. If there
are 3 dots between the letters <TT>A</TT> and <TT>B</TT> this is denoted by <TT>A/(3)B</TT> in your output. Your output may
not contain any spaces, all these spaces must be converted to dots.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
250
AIM SSY ABABA
200
SSSS AAAA
130
AA B AA
0
SYMIBA
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
A/(4)I/(4)M/(18)S/(4)S/(4)Y/(19)A/(4)B/(4)A/(4)B/(4)A
S/(7)S/(7)S/(7)S/(22)A/(7)A/(7)A/(7)A
A/(5)A/(15)B/(16)A/(5)A
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
554||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Caesar Cypher</TITLE>
<META NAME="description" CONTENT="Caesar Cypher">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Caesar Cypher</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One of the earliest encrypting systems is attributed to Julius Caesar: if the
letter to be encrypted is
the <I>N</I>th letter in the alphabet, replace it with the (<I>N</I>+<I>K</I>)th where <I>K</I> is some fixed integer (Caesar
used <I>K</I> = 3). We usually treat a space as zero and all arithemtic is then done
modulo 27. Thus for <I>K</I> = 1 the message `<TT>ATTACK AT DAWN</TT>' becomes `<TT>BUUBDLABUAEBXO</TT>'.

<P>

<P>
<BR>
Decrypting such a message is trivial since one only needs to try 26 different
values of <I>K</I>. This
process is aided by knowledge of the language, since then one can determine
when the decrypted
text forms recognisable words. If one does not know the language, then a
dictionary would be necessary.

<P>

<P>
<BR>
Write a program that will read in a dictionary and some encrypted text,
determine the value of <I>K</I>
that was used, and then decrypt the cyphertext to produce the original
message. The original
message contained only letters and spaces and has been encrypted using the
above method. The
most suitable value of <I>K</I> will be the one which produces the most matches with
the words in the dictionary.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a dictionary and the encrypted text. The dictionary will
consist of no more than
100 lines each containing a word in uppercase characters and not more than 20
characters in length.
The dictionary portion will be terminated by a line consisting of a single `<TT>#</TT>'.
The encrypted text
will follow immediately and will consist of a single line containing no more
than 250 characters.
Note that the dictionary will not necessarily contain all the words in the
original text, although it
will certainly contain a large portion of them. It may also contain words that
are not in the original
text. The dictionary will not appear in any particular order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will consist of the decrypted text. Lines should be as long as
possible, but not exceeding 60 characters and no word may cross a linebreak.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
THIS
DAWN
THAT
THE
ZORRO
OTHER
AT
THING
#
BUUBDLA PSSPABUAEBXO
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
ATTACK ZORRO AT DAWN
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
555||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Bridge Hands</TITLE>
<META NAME="description" CONTENT="Bridge Hands">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Bridge Hands</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Many games, such as Bridge, involve dealing a standard deck of 52 cards to 4
players, so each
receives 13 cards. Good players can then play with the hand as it is dealt,
but most ordinary players
will need to sort it, firstly by suit, and then by rank within suit.

<P>

<P>
<BR>
There is no fixed ranking of the suits for this purpose, but it is useful to
alternate the colours, so we
will presume the following ordering: CLUBS &lt; DIAMONDS &lt; SPADES &lt; HEARTS.
(Note that
from now on we will use the more conventional <TT>C</TT>, <TT>D</TT>, <TT>S</TT>, <TT>H</TT>). Within a suit Ace is high, so the
ordering is <TT>2 </TT>&lt;<TT> 3 </TT>&lt;<TT> 4 </TT>&lt;<TT> 5 </TT>&lt;<TT> 6 </TT>&lt;<TT> 7 </TT>&lt;<TT> 8 </TT>&lt;<TT> 9 </TT>&lt;<TT> T </TT>&lt;<TT> J </TT>&lt;<TT> Q </TT>&lt;<TT> K </TT>&lt;<TT> A</TT>.

<P>

<P>
<BR>
The players are usually designated North, South, East and West, and they sit
at the points of the
compass they name. One player is designated the dealer and he (or she) deals
one card to each
player starting with the player on his (her) left hand and proceeding
clockwise until he (she) deals the last card to himself (herself).

<P>
<DIV ALIGN="CENTER">
<img src=p555.gif>
</DIV>

<P>
Write a program that will read in a presentation of a deck of cards, deal them,
sort them, and then display the 4 sorted hands in the format shown below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a series of deals. Each deal will consist of the letter
representing the dealer (<TT>N</TT>,
<TT>E</TT>, <TT>S</TT>, <TT>W</TT>) followed by two lines representing the deck as shown below. The file
will be terminated by a line consisting of a single '<TT>#</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will consist of a series of sets of four lines, one set for each deal.
Each set will consist of
four lines displaying the sorted hands, in the order and format shown below.
Sets must follow each
other immediately, with no blank line between them.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
N
CQDTC4D8S7HTDAH7D2S3D6C6S6D9S4SAD7H2CKH5D3CTS8C9H3C3
DQS9SQDJH8HAS2SKD4H4S5C7SJC8DKC5C2CAHQCJSTH6HKH9D5HJ
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
S: C3 C5 C7 CT CJ D9 DT DJ S3 SK H2 H9 HT
W: C2 C4 CK D4 D5 D6 DQ DA S4 S8 ST SJ H8
N: C6 C8 C9 CA D8 S9 SA H4 H5 H6 H7 HJ HA
E: CQ D2 D3 D7 DK S2 S5 S6 S7 SQ H3 HQ HK
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
556||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Amazing</TITLE>
<META NAME="description" CONTENT="Amazing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Amazing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One of the apparently intelligent tricks that enthousiastic psychologists
persuade mice to perform is
solving a maze. There is still some controversy as to the exact strategies
employed by the mice
when engaged in such a task, but it has been claimed that the animal keepers
eavesdropping on
conversations between the mice have heard them say things like "I have
finally got Dr. Schmidt
trained. Everytime I get through the maze he gives me food".

<P>

<P>
<BR>
Thus when autonomous robots were first being built, it was decided that
solving such mazes would
be a good test of the 'intelligence' built into such machines by their
designers. However, to their
chagrin, the first contest was won by a robot that placed a sensor on the
right-hand wall of the maze
and sped through the maze maintaining contact with the right-hand wall at
all times. This led to a
change in the design of mazes, and also to the interest in the behaviour
of such robots. To test this
behaviour the mazes were modified to become closed boxes with internal walls.
The robot was
placed in the south west corner and set of pointing east. The robot then moved
through the maze,
keeping a wall on its right at all times. If it can not proceed, it will turn
left until it can proceed. All
turns are exact right angles. The robot stops when it returns to the starting
square. The mazes were
always set up so that the robot could move to at least one other square before
returning. The
researchers then determined how many squares were not visited and how many
were visited one,
twice, thrice and four times. A square is visited if a robot moves into and
out of it. Thus for the
following maze, the values (in order) are: 2, 3, 5, 1, 0.

<P>
<DIV ALIGN="CENTER">
<img src=p556.gif>
</DIV>

<P>
Write a program to simulate the behaviour of such a robot and collect the
desired values.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of a series of maze descriptions. Each maze description
will start with a line
containing the size of the maze (<I>b</I> and <I>w</I>), This will be followed by <I>b</I> lines, each consisting of <I>w</I>
characters, either '<TT>0</TT>' or '<TT>1</TT>'. Ones represent closed squares, zeroes represent open squares. Since the
maze is enclosed, the outer wall is not specified. The file will be terminated
by a line containing two zeroes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output will consist of a series of lines, one for each maze. Each line will
consist of 5 integer values
representing the desired values, each value right justified in a field of
width 3.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 5
01010
01010
00000
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
  2  3  5  1  0
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
557||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Burger</TITLE>
<META NAME="description" CONTENT="Burger">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Burger</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
When Mr. and Mrs. Clinton's twin sons Ben and Bill had their tenth birthday,
the party was held at the McDonald's restaurant at South Broadway 202,
New York. There were 20 kids at the party, including Ben and Bill.
Ronald McDonald had made 10 hamburgers and 10 cheeseburgers and when he
served the kids he started with the girl directly sitting left of Bill.
Ben was sitting to the right of Bill. Ronald flipped a (fair) coin to decide
if the girl should have a hamburger or a cheeseburger, head for
hamburger, tail for cheeseburger. He repeated this procedure with all the
other 17 kids before serving Ben and Bill last. Though, when coming to Ben
he didn't have to flip the coin anymore because there were no cheeseburgers
left, only 2 hamburgers.

<P>

<P>
<BR>
Ronald McDonald was quite surprised this happened, so he would like to know
what the probability is of this kind of events. Calculate the probability
that Ben and Bill will get the same type of burger using the procedure
described above. Ronald McDonald always grills the same number of hamburgers
and cheeseburgers.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input-file contains the number of problems  <I>n</I> ,
followed by <I>n</I> times:

<P>

<P>
<BR>
a line with an even number [2,4,6,...,100000],  which indicates the number of
guests present at the party including Ben and Bill.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of <I>n</I> lines with on each line the probability (4 decimals
precise) that Ben and Bill get the same type of burger.

<P>

<P>
<BR>

<B>Note:</B> a variance of 
<!-- MATH: $\pm 0.0001$ -->
<IMG
 WIDTH="67" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/557img1.gif" 
 ALT="$\pm 0.0001$">
is allowed in the output due to rounding
differences.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
6
10
256
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.6250
0.7266
0.9500
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
558||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Wormholes</TITLE>
<META NAME="description" CONTENT="Wormholes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Wormholes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In the year 2163, wormholes  were discovered. A wormhole is a subspace tunnel
through space and time connecting two star systems. Wormholes have a few
peculiar properties:

<P>
<UL>
<LI>Wormholes are <EM>one-way</EM>  only.

<P>
<LI>The time it takes to travel through a wormhole is negligible.

<P>
<LI>A wormhole has two end points, each situated in a star system.

<P>
<LI>A star system may have more than one wormhole end point within its boundaries.

<P>
<LI>For some unknown reason, starting from our solar system, it is always possible to end up in any star system by following a sequence of wormholes (maybe Earth is  the centre of the universe).

<P>
<LI>Between any pair of star systems, there is at most one wormhole in either direction.

<P>
<LI>There are no wormholes with both end points in the same star system.
</UL>

<P>
All wormholes have a constant time difference between their end points. For
example, a specific wormhole may cause the person travelling through it to
end up 15 years in the future. Another wormhole may cause the person to end
up 42 years in the past.

<P>

<P>
<BR>
A brilliant physicist, living on earth, wants to use wormholes to study the
Big Bang. Since warp drive has not been invented yet, it is not possible for
her to travel from one star system to another one directly. This <EM>can</EM>  be done using wormholes, of course.

<P>

<P>
<BR>
The scientist wants to reach a cycle of wormholes somewhere in the universe
that causes her to end up in the past. By travelling along this cycle a lot
of times, the scientist is able to go back as far in time as necessary to
reach the beginning of the universe and see the Big Bang with her
own eyes. Write a program to find out whether such a cycle exists.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file starts with a line containing the number of cases <I>c</I> to be
analysed. Each case starts with a line with two numbers <I>n</I> and <I>m</I> . These
indicate the number of star systems (
<!-- MATH: $1 \le n \le 1000$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/558img2.gif" 
 ALT="$1 \le n \le 1000$">)
and the number of
wormholes (
<!-- MATH: $0 \le m \le 2000$ -->
<IMG
 WIDTH="110" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/558img2.gif" 
 ALT="$0 \le m \le 2000$">)
. The star systems are numbered from 0  (our solar
system) through <I>n</I>-1 . For each wormhole a line containing three integer
numbers <I>x</I>, <I>y</I> and <I>t</I> is given. These numbers indicate that this wormhole
allows someone to travel from the star system numbered <I>x</I> to the star system
numbered <I>y</I>, thereby ending up <I>t</I> (
<!-- MATH: $-1000 \le t \le 1000$ -->
<IMG
 WIDTH="141" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/558img2.gif" 
 ALT="$-1000 \le t \le 1000$">)
years in the future.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of <I>c</I> lines, one line for each case, containing the word
<TT>possible</TT> if it is indeed possible to go back in time indefinitely, or <TT>not possible</TT> if this is not possible with the given set of star systems and
wormholes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
3 3
0 1 1000
1 2 15
2 1 -42
4 4
0 1 10
1 2 20
2 3 30
3 0 -60
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
possible
not possible
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
559||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Squares (II)</TITLE>
<META NAME="description" CONTENT="Squares (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Squares (II)</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The game of <EM>Squares</EM>  is not well known in our region, but there are some
fanatics who spend their whole day playing Squares, using boards as large
as they can find. However, recently the <EM>International Squares Federation</EM>
decided that the sides of a Squares board may not be larger than 1000 .

<P>

<P>
<BR>

<EM>Squares</EM>  is played by two players on a rectangular board, similar to a very big chess board. The fields are numbered from (1,1) at the bottom left
corner, to (1,<I>w</I>) at the bottom right corner and (<I>h</I>,<I>w</I>) at the top right
corner, where <I>h</I> and <I>w</I> are the height and width of the board. Usually, one of
the players decides the size of the board, and the other player makes the
first move.

<P>

<P>
<BR>
A move consists of choosing a free field. This field is extended to the right
and to the top of the board to form a square as large as possible without
intersecting already occupied fields. The fields of this new square then
belong to the player who
made the move, and are no longer free. The game is finished when there are
no free fields left. However, it is possible for the players to decide to
end the game earlier.

<P>

<P>
<BR>
The scoring rules are too complicated to explain here. The number of occupied
fields plays a role, but also the moment in the game at which those fields
were occupied by the player.

<P>

<P>
<BR>
For beginning players, the best strategy is to try to occupy as many fields
as possible in each move. More experienced players will sometimes occupy
smaller squares for strategic reasons.

<P>

<P>
<BR>
Write a program to support beginning players, which, given the size of the
board and the moves already made, indicates a field that must be chosen in
the next move to occupy a square that is as large as possible.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input starts with a line which indicates the number of games <I>g</I> to be
analysed.

<P>

<P>
<BR>
For each game, the input begins with a line with three numbers <I>h</I>, <I>w</I>,
 and <I>m</I>, separated by a space, where <I>h</I> and <I>w</I> are the height and width of
 the board (
<!-- MATH: $1 \le h \le 1000, 1 \le w \le 1000$ -->
<IMG
 WIDTH="215" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/559img1.gif" 
 ALT="$1 \le h \le 1000, 1 \le w \le 1000$">), and <I>m</I> is the number of moves already made (
<!-- MATH: $0 \le m \le 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/559img1.gif" 
 ALT="$0 \le m \le 100$">)
.

<P>

<P>
<BR>
For each move, the input file contains one line with the row and
column (
<!-- MATH: $1 \le r \le h, 1 \le c \le w$ -->
<IMG
 WIDTH="162" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/559img1.gif" 
 ALT="$1 \le r \le h, 1 \le c \le w$">)
of the field the player has chosen,
separated by a space. The move is legal according to the rules given
above, i.e., the field is free.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of g lines, one line for each game. If there is no legal
move possible, the text <TT>game over</TT> should be given. Otherwise, the line should
contain three numbers <I>r</I>, <I>c</I>, and <I>s</I>, separated by one space, where <I>r</I> and <I>c</I>
are the row and column where a maximal square with side <I>s</I> can be formed.
If there is more than one possible solution, the one with the smallest <I>r</I> is
given, and if that is not decisive, the one with the smallest <I>c</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
8 8 4
8 1
3 6
1 4
2 1
500 1000 2
1 1
1 501
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 2 4
game over
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
560||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Magic</TITLE>
<META NAME="description" CONTENT="Magic">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Magic</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A well known big computer factory is involved in a very secret project. The
 project is so secret that we cannot tell you the name of the manufacturer,
 but we can tell you something about the project. It is called: the
 Non-Deterministic Magic Holistic
 New Age Computer (NDMHNAC). It is a major breakthrough in thinking about
computing, in that it steps away from every traditional idea in Computer
Science and Hardware Design. One of the (many) abilities of NDMHNAC is to
execute calculations with very large numbers very fast.

<P>

<P>
<BR>
Unfortunately it has a small flaw. Its circuits are based on Magic, so its
calculations are disturbed by magic in the same way as traditional circuits
are disturbed by electromagnetic fields. As you know the numbers 3 and 7 have
strong magic. Therefore these numbers should be avoided, because they will
disturb, and eventually destroy the circuits of the machine. The algorithms
used internally in the machine never generate offending numbers. The only
problem is to ban offending numbers from input.

<P>

<P>
<BR>
To that purpose a conventional machine is used as a pre-processor. This
machine should transform offending numbers to admissible numbers. (You might
wonder how a computer can give a correct answer if you jumble its input. Now
this question shows how
much you are tied to traditional thinking in computer
science. A Non-Deterministic Magic Holistic New Age Computer will give
correct answers, even if the input is wrong! (Compare this to traditional
computers giving wrong answers, even if the input is correct!)).

<P>

<P>
<BR>
Numbers are arbitrarily large, non-negative integers, in decimal
representation. A number is offending if it has one of the following properties:
<UL>
<LI>it is divisible by 3, or by 7 (e.g.  6, 14, 21),
<LI>a 3 or 7 occurs in its decimal representation, (e.g.  13, 27, 37),
<LI>a digit is repeated 3 or 7 times consecutively in its decimal
representation. (e.g. 2411145, 10000000).
</UL>

<P>

(<B>NB:</B> the number 0 turns out not to be offending).

<P>

<P>
<BR>
Offending numbers are to be transformed into non-offending numbers, using
(repeatedly) the following rules:
<UL>
<LI>if a number is divisible by 3: divide it by 3
<LI>if a number is divisible by 7: divide it by 7
<LI>if a 3 occurs in the decimal representation: remove this 3 (remove
if possible leading zeros)
<LI>if a 7 occurs in the decimal representation: remove this 7 (remove
if possible leading zeros)
<LI>if a substring of 3 times the same digit occurs in the decimal
representation: remove it (remove if possible leading zeros)
<LI>if a substring of 7 times the same digit occurs in the decimal
representation: remove it (remove if possible leading zeros)
<LI>if eventually no digit is left, consider this as the number 0.
</UL>

<P>
A traditional programmer is hired to implement these rules. After reading
 the specification given above, he complains that it is highly ambiguous. For
 example, the third rule is about removing a 3. Should all occurrences of 3 be
 removed, or just any,
 or only the first one?  Moreover, should every rule be applied repeatedly, or
 should all rules be applied, and then all rules again, and in which order?
 Different interpretations of the specification may give rise to thousands
 of different answers.

<P>

<P>
<BR>
The designers of the new machine declare that they do not care, as long as a
 non-offending number is obtained. Seeing that the programmer feels really
 uncomfortable, they say: 'OK, just give us the largest possible answer'.
 The programmer got himself an other job.

<P>

<P>
<BR>
Write a program which, given a number, generates the largest non-offending
number that can be obtained by applying the rules given above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input-file contains the number of problems <I>n</I>. The
next <I>n</I> lines contain one number each. An input line is never longer than 21
characters (
<!-- MATH: $21 = 3 \times 7$ -->
<IMG
 WIDTH="84" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/560img2.gif" 
 ALT="$21 = 3 \times 7$">). An input line never starts with 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The outputfile consists of <I>n</I> lines with on each line the largest non-offending
number that can be obtained by applying the rules given above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
999
273
2331
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11
2
11
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
561||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Jackpot</TITLE>
<META NAME="description" CONTENT="Jackpot">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Jackpot</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An addicted gambler walks from his home to the casino every day to try his
luck.

<P>
He likes most games but the one he likes most is the slot machine, also known
as the jackpot or the one-armed-bandit. Because of his years of experience he
exactly knows which, and how many, symbols appear on the wheels of every slot
machine.

<P>

<P>
<BR>
Unfortunately all wheels have changed since last time he was in the casino.
The wheels are completely new, vary in size and are much larger than the
former ones. He wonders if there's a way to find out which slot machine would
give him the most profit. He suspects that a lot of calculations are
involved so he decides that this job can better be done by a computer.

<P>

<P>
<BR>
Can you build a program for this man which calculates the pay-rate of a
number of machines, if the complete wheels are known? There are three wheels
on each machine, all three wheels rotate independently of each other. Each
line of three times the same symbol pays an amount of money.
The display of the machine consists of three visible rows. The middle row pays
10 coins if three identical symbols are shown, both the upper and the lower
row pay 5 coins. In addition, the line from the upper left corner to the lower
right as well as the line from the lower left to the upper right corner can
result in a winning combination. They both pay 7 coins. The pay-rate is
defined as the average (or expected) amount of money paid by the machine on
each play.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line gives the number of slot machines <I>s</I>. Then for each slot
machine follows:

<P>

<P>
<BR>
a line with the numbers <I>x</I>, <I>y</I>, <I>z</I>, each separated by at least one space (
<!-- MATH: $3 \le x,y,z \le 200$ -->
<IMG
 WIDTH="129" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/561img1.gif" 
 ALT="$3 \le x,y,z \le 200$">).
<I>x</I> is the number of symbols on the first wheel, <I>y</I> the number of symbols on the second wheel and <I>z</I> the number of symbols on the last wheel.

<P>

<P>
<BR>
3 lines with the symbols on each wheel. A symbol is represented by one capital character. The first line contains the symbols of the first wheel, the second line contains the symbols of the second wheel and the third line contains the symbols of
 the third wheel.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of <I>s</I> lines with on each line the pay-rate of the corresponding slot machine, with exact 4 digits after the decimal point.

<P>

<P>
<BR>

<B>Note:</B> a variance of 
<!-- MATH: $\pm 0.0001$ -->
<IMG
 WIDTH="67" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/561img1.gif" 
 ALT="$\pm 0.0001$">
is allowed in the output due to rounding differences.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
3 4 6
AAB
BABA
BBAAAB
12 15 18
CCCCCCCCCCCC
CCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCC
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8.5000
34.0000
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
562||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dividing coins</TITLE>
<META NAME="description" CONTENT="Dividing coins">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dividing coins</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It's commonly known that the Dutch have invented copper-wire. Two Dutch men
were fighting over a nickel, which was made of copper. They were both so
eager to get it and the fighting was so fierce, they stretched the coin to
great length and thus created copper-wire.

<P>

<P>
<BR>
Not commonly known is that the fighting started, after the two Dutch tried to
 divide a bag with coins between the two of them. The contents of the bag
 appeared not to be equally divisible. The Dutch of the past couldn't stand
 the fact that a division
 should favour one of them and they always wanted a fair share to the very
last cent. Nowadays fighting over a single cent will not be seen anymore, but
being capable of making an equal division as fair as possible is something
that will remain important forever...

<P>

<P>
<BR>
That's what this whole problem is about. Not everyone is capable of seeing
instantly what's the most fair division of a bag of coins between two persons.
Your help is asked to solve this problem.

<P>

<P>
<BR>
Given a bag with a maximum of 100 coins, determine the most fair division
between two persons. This means that the difference between the amount each
person obtains should be minimised. The value of a coin varies from 1 cent
to 500 cents. It's not allowed to split a single coin.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A line with the number of problems <I>n</I>, followed by <I>n</I> times:
<UL>
<LI>a line with a non negative integer <I>m</I> (<IMG
 WIDTH="69" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/562img1.gif" 
 ALT="$m \le 100$">)
indicating the number of coins in the bag
<LI>a line with <I>m</I> numbers separated by one space, each number indicates the
 value of a coin.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of <I>n</I> lines. Each line contains the minimal positive
difference between the amount the two persons obtain when they divide the
coins from the corresponding bag.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
3
2 3 5
4
1 2 4 6
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
563||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Crimewave</TITLE>
<META NAME="description" CONTENT="Crimewave">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Crimewave</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Nieuw Knollendam is a very modern town. This becomes clear already when
looking at the layout of its map, which is just a rectangular grid of streets
and avenues. Being an important trade centre, Nieuw Knollendam also has a lot
of banks. Almost on every crossing a bank is found (although there are
 never two banks at the same crossing). Unfortunately this has attracted a
 lot of criminals. Bank hold-ups are quite common, and often on one day
 several banks are robbed. This has grown into a problem,
 not only to the banks, but to the criminals as well. After robbing a bank
the robber tries to leave the town as soon as possible, most of the times
chased at high speed by the police. Sometimes two running criminals pass the
same crossing, causing several risks: collisions, crowds of police at
one place and a larger risk to be caught.

<P>

<P>
<BR>
To prevent these unpleasant situations the robbers agreed to consult
together.  Every Saturday night they meet and make a schedule for the week
to come: who is going to rob which bank on which day? For every day they try
to plan the get-away routes,
such that no two routes use the same crossing. Sometimes they do not
succeed in planning the routes according to this condition, although they
believe that such a planning should exist.

<P>

<P>
<BR>
Given a grid of 
<!-- MATH: $(s \times a)$ -->
<IMG
 WIDTH="57" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$(s \times a)$">
and the crossings where the banks to be robbed are located, find out whether or not it is possible to plan a get-away route from every robbed bank to the city-bounds, without using a crossing more than once.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains the number of problems <I>p</I> to be solved.

<P>
<UL>
<LI>The first line of every problem contains the number <I>s</I> of streets
(
<!-- MATH: $1 \le s \le 50$ -->
<IMG
 WIDTH="85" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$1 \le s \le 50$">), followed by the number <I>a</I> of avenues (
<!-- MATH: $1 \le a \le 50$ -->
<IMG
 WIDTH="86" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$1 \le a \le 50$">),
followed by the number <I>b</I> (<IMG
 WIDTH="44" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$b \ge 1$">)
of banks to be robbed.

<P>
<LI>Then <I>b</I> lines follow, each containing the location of a bank in the form
of two numbers <I>x</I> (the number of the street) and <I>y</I> (the number of the avenue). Evidently 
<!-- MATH: $1 \le x \le s$ -->
<IMG
 WIDTH="78" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$1 \le x \le s$">
and 
<!-- MATH: $1 \le y \le a$ -->
<IMG
 WIDTH="78" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/563img1.gif" 
 ALT="$1 \le y \le a$">.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file consists of <I>p</I> lines. Each line contains the text <TT>possible</TT> or
<TT>not possible</TT>. If it is possible to plan non-crossing get-away routes, this
line should contain the word: <TT>possible</TT>. If this is not possible,
the line should contain the words <TT>not possible</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
6 6 10
4 1
3 2
4 2
5 2
3 4
4 4
5 4
3 6
4 6
5 6
5 5 5
3 2
2 3
3 3
4 3
3 4
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
possible
not possible
</PRE>

<P>
<DIV ALIGN="CENTER">
<img src=p563.gif>
</DIV>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
564||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gaston</TITLE>
<META NAME="description" CONTENT="Gaston">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gaston</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Gaston is an employee of a famous comic magazine. One of his
tasks (the one he dislikes most) is archiving mail. He
archives infrequently, so a large part of his desk
is taken up
by an enormous pile of unprocessed letters.  Sometimes, one of
the editors needs a particular letter and Gaston is faced with
the problem of finding that letter in the pile.

<P>
<DIV ALIGN="CENTER">
<img src=p564a.gif>
</DIV>

<P>

<P>
<BR>

Gaston realizes that he has a retrieval problem. Using sticks and threads, he
has designed a system for better retrieving unarchived letters. In the middle
of a stick, he attaches a letter. At both ends of the stick, a thread is attached
where another stick (with letter and threads) can be fastened.
He arranges the letters such that all letters under the left
 thread of a stick are alphabetically before the letter in the middle and the
 letters under the right thread are alphabetically after the
 letter in the middle. As this is
 true for every stick, this system creates a sorted tree, in which it is easy
 to find letters.

<P>

<P>
<BR>
When making a prototype, Gaston found out that he has a balancing problem. If
 there is a difference in weight between the ends of a stick, the stick is
 unbalanced, and the whole system collapses in an even bigger mess than before.
 Using some extra thread,
 Gaston invented an asymmetric fix in which a stick is still balanced if the
 left side contains one more letter than the right side. If the
 right side contains more letters, the stick is always unbalanced, so the
 fix is indeed asymmetric.

<P>
<BR>
Opinions about Gaston differ. He believes that he is a genius, but
others are not so certain. The editors point out that when a letter is added, there is a
fair chance that the tree gets out of balance and must be rearranged. We
want you to find out how often the tree (or a subtree) must be
rearranged, given a tree and a sequence of incoming letters.

<P>

<P>
<BR>
We have simplified the problem a bit. All letters have the same weight. Every
 letter has a unique (positive) number. The letters must be arranged according to
 their number. A stick is balanced if the left side contains the
 same number of letters as the right side or at most one more.

<P>

<P>
<BR>
A letter is added according to the following procedure: if its number is lower
than the number of the letter on the stick, it is added to the left thread.
If its number is higher, it is added to the right thread.
Following this procedure repeatedly, eventually a free thread is found.
The letter is then attached to a fresh stick (having a free thread on
both ends) which is tied to the free thread. Then, starting at the top, working
downwards, the balance of all sticks are checked. If a stick is
unbalanced, a balancing step is executed. Because a balancing step might
cause other sticks to become unbalanced, the whole tree is
checked again from top to bottom for unbalanced sticks. This is repeated until
no unbalanced sticks are found.

<P>

<P>
<BR>
A balancing step is defined as bringing one unbalanced stick <I>s</I> into 
 balance by removing a letter from the heavy side of the stick
 and adding one to the light side. This is done according
 to the following procedure:

<P>
<OL>
<LI>remove the letter <I>l</I><SUB><I>old</I></SUB> from the stick <I>s</I>

<P>
<LI>find an appropriate letter <I>l<SUB>new</SUB></I> from the heavy side and attach it to the stick <I>s</I>

<P>
<LI>add <I>l<SUB>old</SUB></I> on the other side of <I>s</I>.
</OL>

<P>
A balancing step can result in more sticks being unbalanced! Because 
<I>l</I><SUB><I>new</I></SUB> is removed from it's old position, an unbalanced
stick can be left behind. Also, adding the former letter can result in 
a new unbalanced stick. Getting these sticks balanced again is not a part of
this balancing step(!); they are done in future balancing steps.  Note
that each balancing step must be done carefully in order to ensure that
the tree remains sorted.

<P>

<P>
<BR>
The problem is to find out how many balancing steps are needed to keep
the tree balanced when new letters are added.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Notation</A>&nbsp;</FONT>
</H2>
At the end of a thread we may find:

<P>
<UL>
<LI>a stick, with a letter and a thread at both ends, or
<LI>nothing
</UL>

<P>
This leads to the following textual representation of a balance:

<P>
<UL>
<LI>if it is a stick: the number of the letter on it, followed by 
 what is attached to its left thread, followed by
 what is attached to its right thread.

<P>
<LI>if it is a loose thread: the number 0.
</UL>

<P>
Within a line, numbers are separated with at least one space. The
textual representation of a tree may run over several lines. Each line
contains at least one number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A line with the number <I>n</I> of problems, then <I>n</I> times:

<P>
<UL>
<LI>a description of a balance (see notation above)

<P>
<LI>on a separate line the number <I>b</I> of letters to be added, then, beginning on the next line

<P>
<LI><I>b</I> numbers, representing a letter <I>l</I> to be added (
<!-- MATH: $1 \le l \le 1000$ -->
<IMG
 WIDTH="100" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/564img2.gif" 
 ALT="$1 \le l \le 1000$">).
</UL>

<P>

<P>
<BR>
Within a line, the numbers of the letters to insert are separated by at least
one space. The numbers of the letters may run over several lines. Each line
contains at least one number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of <I>n</I> lines. Each line contains the number of balancing
steps needed to keep the tree balanced when the letters are added.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
3 2 0 0 
5 0 0
4
1 6 7 
9
400 250 0 0 0
2
511 100
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0
</PRE>

<P>
<DIV ALIGN="CENTER">
<img src=p564b.gif>
</DIV>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>


______________________________________________________
565||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Pizza Anyone?</TITLE>
<META NAME="description" CONTENT="Pizza Anyone?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Pizza Anyone?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are responsible for ordering a large pizza for you and your friends. Each
of them has told you
what he wants on a pizza and what he does not; of course they all understand
that since there is only
going to be one pizza, no one is likely to have all their requirements
satisfied. Can you order a pizza
that will satisfy at least one request from all your friends?

<P>

<P>
<BR>
The pizza parlor you are calling offers the following pizza toppings; you
can include or omit any of them in a pizza:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER"><B> Input Code</B></TD>
<TD ALIGN="LEFT"><B> Topping</B></TD>
</TR>
<TR><TD ALIGN="CENTER">A</TD>
<TD ALIGN="LEFT">Anchovies</TD>
</TR>
<TR><TD ALIGN="CENTER">B</TD>
<TD ALIGN="LEFT">Black Olives</TD>
</TR>
<TR><TD ALIGN="CENTER">C</TD>
<TD ALIGN="LEFT">Canadian Bacon</TD>
</TR>
<TR><TD ALIGN="CENTER">D</TD>
<TD ALIGN="LEFT">Diced Garlic</TD>
</TR>
<TR><TD ALIGN="CENTER">E</TD>
<TD ALIGN="LEFT">Extra Cheese</TD>
</TR>
<TR><TD ALIGN="CENTER">F</TD>
<TD ALIGN="LEFT">Fresh Broccoli</TD>
</TR>
<TR><TD ALIGN="CENTER">G</TD>
<TD ALIGN="LEFT">Green Peppers</TD>
</TR>
<TR><TD ALIGN="CENTER">H</TD>
<TD ALIGN="LEFT">Ham</TD>
</TR>
<TR><TD ALIGN="CENTER">I</TD>
<TD ALIGN="LEFT">Italian Sausage</TD>
</TR>
<TR><TD ALIGN="CENTER">J</TD>
<TD ALIGN="LEFT">Jalapeno Peppers</TD>
</TR>
<TR><TD ALIGN="CENTER">K</TD>
<TD ALIGN="LEFT">Kielbasa</TD>
</TR>
<TR><TD ALIGN="CENTER">L</TD>
<TD ALIGN="LEFT">Lean Ground Beef</TD>
</TR>
<TR><TD ALIGN="CENTER">M</TD>
<TD ALIGN="LEFT">Mushrooms</TD>
</TR>
<TR><TD ALIGN="CENTER">N</TD>
<TD ALIGN="LEFT">Nonfat Feta Cheese</TD>
</TR>
<TR><TD ALIGN="CENTER">O</TD>
<TD ALIGN="LEFT">Onions</TD>
</TR>
<TR><TD ALIGN="CENTER">P</TD>
<TD ALIGN="LEFT">Pepperoni</TD>
</TR>
</TABLE></DIV>

<P>
Your friends provide you with a line of text that describes their pizza
preferences. For example, the line

<P>
<PRE>
+O-H+P;
</PRE>

<P>
reveals that someone will accept a pizza with onion, or without ham, or
with pepperoni, and the line

<P>
<PRE>
-E-I-D+A+J;
</PRE>

<P>
indicates that someone else will accept a pizza that omits extra cheese, or
Italian sausage, or diced garlic, or that includes anchovies or jalapenos.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a series of pizza constraints.

<P>
A pizza constraint is a list of 1 to 12 topping constraint lists each on a
line by itself followed by a period on a line by itself.

<P>
A topping constraint list is a series of topping requests terminated by a
single semicolon.

<P>
An topping request is a sign character <TT>(+/-)</TT> and then an uppercase letter from <TT>A</TT> to <TT>P</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each pizza constraint, provide a description of a pizza that satisfies
it. A description is the string
``<TT>Toppings: </TT>" in columns 1 through 10 and then a series of letters, in
alphabetical order, listing the
toppings on the pizza. So, a pizza with onion, anchovies, fresh broccoli and
Canadian bacon would be described by:

<P>
<PRE>
Toppings: ACFO
</PRE>

<P>
If no combination toppings can be found which satisfies at least one request
of every person, your program should print the string

<P>
<PRE>
No pizza can satisfy these requests.
</PRE>

<P>
on a line by itself starting in column 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
+A+B+C+D-E-F-G-H;
-A-B+C+D-E-F+G+H;
-A+B-C+D-E+F-G+H;
.
+A+B+C+D;
+E+F+F+H;
+A+B-G;
+O+J-F;
+H+I+C;
+P;
+O+M+L;
+M-L+P;
.
+A+B+C+D;
+E+F+F+H;
+A+B-G;
+P-O;
+O+J-F;
+H+I+C;
+P;
+O;
+O+M+L;
-O-P;
+M-L+P;
.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Toppings:
Toppings: CELP
No pizza can satisfy these requests.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
566||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Adam's Genes</TITLE>
<META NAME="description" CONTENT="Adam's Genes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Adam's Genes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You've been hired by Gemini Labs, the world leader in human cloning, to write
decision support
software. At Gemini, all clones are derived from ``ADAM", a genetically perfect
human. Something
about his DNA makes him much easier to clone than normal humans. Not all the
clones of Adam
are the same, though, because geneticists introduce mutations, in the form
of recessive genes, to
learn more about genetics. For example, Bob might be a clone of Adam with
a recessive gene for
baldness added. Scientists would study Bob to see what subtle effects the
gene may have. Clones of
Bob would carry the recessive gene, as would clones of those clones, and so
on. All is well as long
as no clone derived from Bob is given a second recessive baldness gene. If
that were to happen, a
bald clone would be produced and the Cloning Board would shut Gemini down.

<P>

<P>
<BR>
The software you are to write takes cloning requests from the research staff
and evaluates them for
consistency and safety. A collection of requests is ``inconsistent" if it
includes a clone that is not
descended from Adam. A collection of requests is ``unsafe" if it produces a
clone with two identical recessive genes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Your program consumes a file of cloning requests, one per line. Here is
the format of a cloning request:

<P>
&lt;<I>request</I>&gt; = <code>clone_</code>&lt;<I>name</I>&gt;<code>_from_</code>
<!-- MATH: $<name><genelist>$ -->
&lt;<I>name</I>&gt;&lt;<I>genelist</I>&gt;

<P>

<!-- MATH: $<genelist>$ -->
&lt;<I>genelist</I>&gt; = <code>NULL | _mutating_</code>
<!-- MATH: $<gene><genes>$ -->
&lt;<I>gene</I>&gt;&lt;<I>genes</I>&gt;

<P>
&lt;<I>genes</I>&gt; = <code>NULL | _</code>
<!-- MATH: $<gene><genes>$ -->
&lt;<I>gene</I>&gt;&lt;<I>genes</I>&gt;

<P>
&lt;<I>gene</I>&gt; = 3 upper case alphabetical characters

<P>
&lt;<I>name</I>&gt; = 1 to 10 upper case alphabetical characters

<P>
<code> _</code> = one blank

<P>

<P>
<BR>
A typical cloning request is

<P>
<PRE>
clone BOB from ADAM mutating BLD HEM
</PRE>

<P>

<P>
<BR>

<B>Note:</B> there is always exactly one space between words; the last character on a line is immediately
followed by EOLN. There can be zero to ten mutations in a request. If there
are no mutations in the request, the keyword ``mutating" does not appear, e.g.,

<P>
<PRE>
clone BOB from ADAM
</PRE>

<P>
The input is guaranteed to satisfy the syntactic format specifications, and it
is guaranteed to contain
at most one cloning request per clone, i.e., ``<TT>clone BOB</TT>" will appear no more than once as the beginning of an input line. Furthermore, you are to process requests as though only those
definitions which precede it are in effect. Therefore, if you have the
following input segment

<P>
<PRE>
clone BOB from ADAM
clone MIKE from TIM
clone TIM from BOB
</PRE>

<P>
your output would include

<P>
<PRE>
clone MIKE from TIM has no connection to ADAM
</PRE>

<P>
because at the time MIKE was cloned, there was no connection to ADAM. If a clone is not consistent and safe, then all subsequent clones from that clone should be reported as having no connection to ADAM. For example, if you have the following input segment

<P>
<PRE>
clone BOB from ADAM mutating BLD
clone CHARLIE from BOB mutating BLD
clone DAVID from CHARLIE
</PRE>

<P>
your output would include

<P>
<PRE>
clone BOB from ADAM is consistent and safe
clone CHARLIE from BOB was at least twice mutated with BLD
clone DAVID from CHARLIE has no connection to ADAM
</PRE>

<P>
You are also guaranteed that no gene is listed twice in the same request.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Your program produces a file of the processed requests, one per line,
in the same order as they were consumed. The requests are modified
according to the following rules.
<DL COMPACT>
<DT>1.
<DD>If a clone is consistent and safe, the line should have the format
<P>

<TT>clone JOE from ADAM is consistent and safe</TT>
<DT>2.
<DD>If a clone is inconsistent, the line should indicate this as follows

<P>

<TT>clone </TT>&lt;<I>name</I>&gt;<TT> from </TT>&lt;<I>name</I>&gt;<TT> has no connection to ADAM</TT>

<P>
<DT>3.
<DD>If a clone is unsafe, the line should indicate this as follows

<P>

<TT>clone </TT>&lt;<I>name</I>&gt;<TT> from </TT>&lt;<I>name</I>&gt;<TT> was at least twice mutated with </TT>&lt;<I>gene</I>&gt;

<P>
where &lt;<I>gene</I>&gt; is the first gene to appear in the clone's mutation list that is
a second mutation
from Adam. You should print ONLY the first such doubly mutated gene.
</DL>

<P>
If a particular cloning request is inconsistent, there is no need to report
whether or not it is safe.

<P>
Your output should contain exactly one space between words and no leading or
trailing spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
clone JOE from ADAM
clone BOB from ADAM mutating HEM
clone SAM from BOB mutating BLD
clone ED from SAM mutating BLD
clone FRANK from ED mutating HEM
clone KAIN from ABEL
clone ABEL from KAIN
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
clone JOE from ADAM is consistent and safe
clone BOB from ADAM is consistent and safe
clone SAM from BOB is consistent and safe
clone ED from SAM was at least twice mutated with BLD
clone FRANK from ED has no connection to ADAM
clone KAIN from ABEL has no connection to ADAM
clone ABEL from KAIN has no connection to ADAM
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
567||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Risk</TITLE>
<META NAME="description" CONTENT="Risk">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Risk</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Risk is a board game in which several opposing players attempt to conquer
the world. The
gameboard consists of a world map broken up into hypothetical countries.
During a player's turn,
armies stationed in one country are only allowed to attack only countries
with which they share a
common border. Upon conquest of that country, the armies may move into
the newly conquered country.

<P>

<P>
<BR>
During the course of play, a player often engages in a sequence of conquests
with the goal of
transferring a large mass of armies from some starting country to a
destination country. Typically,
one chooses the intervening countries so as to minimize the total number of
countries that need to
be conquered. Given a description of the gameboard with 20 countries each
with between 1 and 19
connections to other countries, your task is to write a function that takes
a starting country and a
destination country and computes the minimum number of countries that must
be conquered to
reach the destination. You do not need to output the sequence of countries,
just the number of
countries to be conquered including the destination. For example, if
starting and destination
countries are neighbors, then your program should return one.

<P>

<P>
<BR>
The following connection diagram illustrates the first sample input.

<P>
<DIV ALIGN="CENTER">
<img src=p567.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to your program will consist of a series of country configuration
test sets. Each test set will
consist of a board description on lines 1 through 19. The representation
avoids listing every national
boundary twice by only listing the fact that country <I>I</I> borders country <I>J</I> when <I>I</I> &lt; <I>J</I>. Thus, the <I>I</I>th
line, where <I>I</I> is less than 20, contains an integer <I>X</I> indicating how many
``higher-numbered"
countries share borders with country <I>I</I>, then <I>X</I> distinct integers <I>J</I> greater
than <I>I</I> and not exceeding
20, each describing a boundary between countries <I>I</I> and <I>J</I>. Line 20 of the
test set contains a single
integer (
<!-- MATH: $1 \le N \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/567img1.gif" 
 ALT="$1 \le N \le 100$">)
indicating the number of country pairs that follow.
The next <I>N</I> lines each
contain exactly two integers (
<!-- MATH: $1 \le A,B \le 20; A \ne B$ -->
<IMG
 WIDTH="170" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/567img1.gif" 
 ALT="$1 \le A,B \le 20; A \ne B$">)
indicating the starting and ending countries for a possible conquest.

<P>

<P>
<BR>
There can be multiple test sets in the input file; your program should
continue reading and
processing until reaching the end of file. There will be at least one
path between any two given countries in every country configuration.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input set, your program should print the following message
``<TT>Test Set #</TT><I>T</I>" where <I>T</I> is the
number of the test set starting with 1 (left-justified starting in column 11).

<P>
The next <I>N</I><SUB><I>T</I></SUB> lines each
will contain the result for the corresponding test in the test set - that is,
the minimum number of
countries to conquer. The test result line should contain the start country
code <I>A</I> right-justified in
columns 1 and 2; the string ``<TT> to </TT>" in columns 3 to 6; the destination country code <I>B</I> right-justified in
columns 7 and 8; the string ``<TT>: </TT>" in columns 9 and 10; and a single integer indicating the minimum
number of moves required to traverse from country <I>A</I> to country <I>B</I> in the
test set left-justified
starting in column 11. Following all result lines of each input set, your
program should print a single blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 3
2 3 4
3 4 5 6
1 6
1 7
2 12 13
1 8
2 9 10
1 11
1 11
2 12 17
1 14
2 14 15
2 15 16
1 16
1 19
2 18 19
1 20
1 20
5
1 20
2 9
19 5
18 19
16 20
4 2 3 5 6
1 4
3 4 10 5
5 10 11 12 19 18
2 6 7
2 7 8
2 9 10
1 9
1 10
2 11 14
3 12 13 14
3 18 17 13
4 14 15 16 17
0
0
0
2 18 20
1 19
1 20
6
1 20
8 20
15 16
11 4
7 13
2 16
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Test Set #1
 1 to 20: 7
 2 to  9: 5
19 to  5: 6
18 to 19: 2
16 to 20: 2

Test Set #2
 1 to 20: 4
 8 to 20: 5
15 to 16: 2
11 to  4: 1
 7 to 13: 3
 2 to 16: 4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
568||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Just the Facts</TITLE>
<META NAME="description" CONTENT="Just the Facts">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Just the Facts</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
The expression <I>N</I>!, read as ``<I>N</I> factorial," denotes the product of the first
<I>N</I> positive integers, where <I>N</I> is nonnegative. So, for example,

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="RIGHT"><I>N</I></TD>
<TD ALIGN="RIGHT"><I>N</I>!</TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 0</TT></TD>
<TD ALIGN="RIGHT"><TT> 1</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 1</TT></TD>
<TD ALIGN="RIGHT"><TT> 1</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 2</TT></TD>
<TD ALIGN="RIGHT"><TT> 2</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 3</TT></TD>
<TD ALIGN="RIGHT"><TT> 6</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 4</TT></TD>
<TD ALIGN="RIGHT"><TT> 24</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 5</TT></TD>
<TD ALIGN="RIGHT"><TT> 120</TT></TD>
</TR>
<TR><TD ALIGN="RIGHT"><TT> 10</TT></TD>
<TD ALIGN="RIGHT"><TT> 3628800</TT></TD>
</TR>
</TABLE></DIV>

<P>
For this problem, you are to write a program that can compute the last
non-zero digit of any
factorial for (
<!-- MATH: $0 \le N \le 10000$ -->
<IMG
 WIDTH="119" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/568img1.gif" 
 ALT="$0 \le N \le 10000$">). For example, if your program is asked to
compute the last nonzero
digit of 5!, your program should produce ``<TT>2</TT>" because 5! = 120, and 2 is the last nonzero digit of 120.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to the program is a series of nonnegative integers not exceeding 10000,
each on its own line
with no other letters, digits or spaces. For each integer <I>N</I>, you should
read the value and compute the last nonzero digit of <I>N</I>!.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each integer input, the program should print exactly one line of
output. Each line of output
should contain the value <I>N</I>, right-justified in columns 1 through 5 with
leading blanks, not leading
zeroes. Columns 6 - 9 must contain ``<TT> -&gt; </TT>" (space hyphen greater space).
Column 10 must contain the single last non-zero digit of <I>N</I>!.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
2
26
125
3125
9999
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
    1 -&gt; 1
    2 -&gt; 2
   26 -&gt; 4
  125 -&gt; 8
 3125 -&gt; 2
 9999 -&gt; 8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
569||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Horse Shoe Scoring</TITLE>
<META NAME="description" CONTENT="Horse Shoe Scoring">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Horse Shoe Scoring</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The game of horseshoes is played by tossing horseshoes at a post that is
driven into the ground.
Four tosses generally make up a game. The scoring of a toss depends on
where the horseshoe lands
with respect to the post. If the center of the post is within the region
bounded by the interior of the
horseshoe and the imaginary line connecting the two legs of the horseshoe,
and the post is not
touching the horseshoe, it is a ``ringer" and worth five points. If any
part of the horseshoe is
touching the post, it is a ``toucher" and worth 2 points. If the toss is
neither a ringer nor a toucher and some part of the horseshoe will touch the post when it is pivoted around its point B, it is a
``swinger" and worth 1 point. Any horseshoe which does not fit any of the
scoring definitions scores zero points. See the figures below for examples of each of the scoring possibilities.

<P>
<DIV ALIGN="CENTER">
<img src=p569a.gif>
</DIV>

<P>
This program uses mathematical horseshoes that are semicircles with radius 10
centimeters. The
location of the horseshoe is the given by two points: the centerpoint of
the semicircle, measured in
centimeters relative to x and y axes, and the point that exactly bisects the
semicircle. The post is at
location (0,0) and is 2 centimeters in diameter. The top of the post is
level with the ground allowing
the horseshoe to lay on top of the post; therefore, a ``toucher" would mean
that any part of the
horseshoe lies within the circle with a radius of 1 centimeter centered
at (0, 0).

<P>

<P>
<BR>
Each ``turn" consists of four tosses. The purpose of your program is to
determine the score of the
``turn" by computing the sum of the point values for each of the four tosses.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to your program is a series of turns, and a turn consists of four
horseshoe positions. Each line
of input consists of two coordinate pairs representing the position of a
toss. Each coordinate
consists of a floating point (<I>X</I>,<I>Y</I>) coordinate pair (
<!-- MATH: $-100.0 \le X,Y \le 100.0$ -->
<IMG
 WIDTH="181" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/569img1.gif" 
 ALT="$-100.0 \le X,Y \le 100.0$">)
with up to 3 digits of
precision following the decimal point; the first and second numbers are
the <I>X</I> and <I>Y</I> coordinates of
the centerpoint of the horseshoe semicircle (Point A) and the third and
fourth numbers are the <I>X</I>
and <I>Y</I> coordinates of the point (B) which bisects the horseshoe semicircle. All coordinates are in centimeters.
You can be assured that
the distance between points A and B for each horseshoe will be 10 +- 0.000001
centimeters. The figure
below illustrates the meanings of the values on each line.

<P>
<DIV ALIGN="CENTER">
<img src=p569b.gif>

</DIV>

<P>
The first four lines of input define the horseshoe positions for the first
turn; lines 5 through 8 define
the second turn, etc. 
There are at most 9999 turns in the input file, and every turn contains four
horseshoe positions. Your program should continue reading input to the
end of file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The first line of output for your program should be the string ``<TT>Turn Score</TT>"
in columns 1 through
10. For each ``turn", your program should print the number of the turn
right-justified in columns 1-4
(turns are numbered starting with 1), a single space (ASCII character
32 decimal) in columns 5 through 8
, and the score for the turn right-justified in columns 9 and 10 with a
single leading blank for scores
0 to 9. Numbers that are right-justified should be preceded by blanks,
not zeroes, as the fill character.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
76.5 53.3 76.5 43.3
-5.1 1.0 4.9 1.0
5.1 0.7 5.1 -9.3
7.3 14.61 7.3 4.61
23.1 17.311 23.1 27.311
-23.1 17.311 -23.1 27.311
-23.1 -17.311 -23.1 -27.311
23.1 -17.311 23.1 -27.311
76.5 53.3 76.5 43.3
76.5 53.3 76.5 43.3
-1.0 -2.0 9.0 -2.0
1.0 -2.0 9.0 4.0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Turn Score
   1    11
   2     0
   3    10 
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
570||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Stats</TITLE>
<META NAME="description" CONTENT="Stats">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Stats</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
As with most team sports, certain statistics can be accumulated during play.
For this problem, you
are to write a program that reads play descriptions for a volleyball game
and produces a report of
player and team statistics for one of the teams.

<P>

<P>
<BR>
Your program will read in a series of input lines that describe a ``play" of
a volleyball game. Table 1
lists the types of plays that your program will use for input.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Key</TD>
<TD ALIGN="CENTER">Play</TD>
<TD ALIGN="CENTER" COLSPAN=1>Play Description</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> C</TT></TD>
<TD ALIGN="CENTER">CHECKIN</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>An indication of the beginning of a new game. The
beginning of any game will contain one ``CHECKIN" play
that lists all the players in the game from one team.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> H</TT></TD>
<TD ALIGN="CENTER">HIT</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>A hit that was successfully defended by the opponent.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> K</TT></TD>
<TD ALIGN="CENTER">KILL</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>A hit that was not successfully defended by the opponent.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> E</TT></TD>
<TD ALIGN="CENTER">ERR</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>An erroneous hit that went into the net or out of bounds.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> B</TT></TD>
<TD ALIGN="CENTER">BLOCK</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>A successful defense of a hit at the net.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> D</TT></TD>
<TD ALIGN="CENTER">DIG</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>A successful defense of a hit behind the net.</TD>
</TR>
<TR><TD ALIGN="CENTER"><TT> R</TT></TD>
<TD ALIGN="CENTER">REPORT</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Command to your program to generate a report. After
generating a report, your program should discard all
collected play records and begin processing anew on the rest
of the input file.</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
Table 1: Real-Time Plays
</DIV>

<P>
Each play (except CHECKIN and REPORT) has exactly one 2-digit player number
associated with
it. Player digit numbers are limited to 0 through 5 allowing referees to
indicate player numbers
using 0 to 5 fingers off of each hand.

<P>

<P>
<BR>
Your program is to compute the following statistics for each player that has
participated in any
game as well as statistics for the entire team. Descriptions of all
statistics that your program is to
compute from the collected plays are listed in Table 2.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="0">
<TR><TD ALIGN="CENTER">Label</TD>
<TD ALIGN="CENTER">Formula</TD>
<TD ALIGN="CENTER">Description</TD>
<TD ALIGN="CENTER">Sample</TD>
</TR>
<tr><td><hr><td><hr><td><hr><td><hr>
<TR><TD ALIGN="CENTER"><TT> Hit %</TT></TD>
<TD ALIGN="CENTER">
<!-- MATH: $(sum(KILL)-sum(ERR)) /$ -->
(<I>sum</I>(<I>KILL</I>)-<I>sum</I>(<I>ERR</I>)) /</TD>
<TD ALIGN="CENTER">Hitting percentage</TD>
<TD ALIGN="CENTER">0.461</TD>
</TR>
<TR><TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">
<!-- MATH: $(sum(KILL)+sum(ERR)+sum(HIT))$ -->
(<I>sum</I>(<I>KILL</I>)+<I>sum</I>(<I>ERR</I>)+<I>sum</I>(<I>HIT</I>))</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
</TR>
<tr><td><hr><td><hr><td><hr><td><hr>
<TR><TD ALIGN="CENTER"><TT> KPG</TT></TD>
<TD ALIGN="CENTER">
<!-- MATH: $sum(KILL) / \# Games$ -->
<IMG
 WIDTH="178" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/570img1.gif" 
 ALT="$sum(KILL) / \char93  Games$"></TD>
<TD ALIGN="CENTER">Kills per game</TD>
<TD ALIGN="CENTER">5.613</TD>
</TR>
<tr><td><hr><td><hr><td><hr><td><hr>
<TR><TD ALIGN="CENTER"><TT> BPG</TT></TD>
<TD ALIGN="CENTER">
<!-- MATH: $sum(BLOCK) / \# Games$ -->
<IMG
 WIDTH="199" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/570img1.gif" 
 ALT="$sum(BLOCK) / \char93  Games$"></TD>
<TD ALIGN="CENTER">Blocks per game</TD>
<TD ALIGN="CENTER">3.100</TD>
</TR>
<tr><td><hr><td><hr><td><hr><td><hr>
<TR><TD ALIGN="CENTER"><TT> DPG</TT></TD>
<TD ALIGN="CENTER">
<!-- MATH: $sum(DIG) / \# Games$ -->
<IMG
 WIDTH="167" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/570img1.gif" 
 ALT="$sum(DIG) / \char93  Games$"></TD>
<TD ALIGN="CENTER">Digs per game</TD>
<TD ALIGN="CENTER">2.050</TD>
</TR>
<tr><td><hr><td><hr><td><hr><td><hr>
</TABLE>

<P>

<P>
<BR>
Table 2: Computed Statistics
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to your program will consist of a series of input lines each with
exactly one play. Column 1
will contain one of the play keys from Table 1. If the play is a REPORT,
there is no additional input on the line.

<P>

<P>
<BR>
If the play is a CHECKIN, there will be a blank in column 2, followed by
a single integer (
<!-- MATH: $06 \le NP \le 15$ -->
<IMG
 WIDTH="115" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/570img1.gif" 
 ALT="$06 \le NP \le 15$">)
in columns 3 and 4 which indicates the
number of players participating in the game. The
remainder of the line contains a series of 2-digit (including leading zeros)
player numbers (each
with exactly 1 preceding blank) indicating the players who participated in
the game. You can be
confident that the CHECKIN is accurate and that no player will be mentioned
in any play in that game who does not appear on the preceding CHECKIN line.

<P>

<P>
<BR>
For the plays HIT, KILL, ERR, BLOCK, and DIG, there will be blank in
column 2 and exactly one
player number (including leading a leading zero as required) in columns 3 and 4.

<P>

<P>
<BR>

<B>Note:</B> Read the sample input below by columns

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each time your program reads in a ``REPORT" play, you should print a report
with the following format.

<P>

<P>
<BR>
The first two lines of each report must contain the following strings each starting in column 1.

<P>
<PRE>
Player  Hit Pct    KPG      BPG      DPG
-----------------------------------------
</PRE>

<P>
Your program should then print, for each player who has played in at least
one game, a single line in the following format:

<P>
<PRE>
55      s0.000   99.999   99.999   99.999
</PRE>

<P>
with the lines in ascending order of player number. In the player report line,
<TT>s</TT> is the sign of the
hitting percentages and is '<TT>+</TT>' if the hitting percentage <IMG
 WIDTH="63" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/570img1.gif" 
 ALT="$\ge 0.000$">
and is '<TT>-</TT>' otherwise. Note the
hitting percentage should be 0.000 if the user has not made any hits, kills,
nor errors.

<P>

<P>
<BR>
After printing a report for each player, your program should print a single
line containing the team statistics in the following format.

<P>
<PRE>
team    s0.000   99.999   99.999   99.999
</PRE>

<P>
You can be confident that no statistic's magnitude will exceed 99.999 in value.
After printing the team statistics, your program should print exactly one
blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
C 8 01 23
45 54 00    D 23        H 14        B 25        B 25        D 01
32 10 14    B 00        E 23        D 25        E 31        K 14
B 32        D 00        D 45        H 25        B 00        D 01
E 32        H 10        B 45        B 31        B 00        K 23
D 01        B 10        B 23        E 00        H 22        H 23
E 01        B 14        D 23        H 00        K 22        B 25
D 45        H 14        E 23        B 00        H 22        K 25
B 54        D 00        E 45        K 14        B 25        H 45
B 23        K 00        K 45        E 14        D 25        B 22
D 45        D 00        B 25        K 22        B 25        K 01
B 32        B 23        K 00        K 22        D 22        E 01
K 00        K 01        B 00        K 00        D 31        R
E 32        D 01        K 14        B 22        K 45        C 6 13 04
K 32        K 01        D 14        E 22        K 31        40 14 15 22
K 32        E 01        D 00        D 00        C 7 45      D 04
D 45        D 23        B 00        D 23        23 14 01    B 04
D 10        K 01        D 00        K 45        22 25 11    B 04
H 10        E 01        D 14        E 45        E 01        K 14
D 14        K 00        E 22        B 25        B 45        B 14
D 14        K 14        E 00        B 25        E 01        B 14
B 45        D 00        K 45        E 25        H 11        K 14
B 54        B 00        D 23        H 31        K 11        K 14
D 54        K 14        B 14        K 22        D 14        K 14
D 01        E 23        B 23        E 31        B 14        B 14
D 01        K 00        H 25        K 31        E 14        D 14
H 14        K 45        D 00        K 22        K 45        D 14
K 14        B 01        D 14        K 22        K 22        B 14
H 01        B 01        K 14        B 31        B 22        H 15
H 10        K 32        B 45        K 31        D 45        D 15
H 10        K 45        B 45        D 45        K 45        E 15
B 14        K 23        D 14        B 22        H 14        H 15
D 01        C 7 14      B 14        K 22        B 14        H 15
B 00        00 45 23    K 14        K 23        E 22        H 15
D 00        31 25 22    D 22        H 00        D 23        H 15
B 54        H 00        E 00        K 31        D 11        E 15
E 32        K 00        H 00        B 45        E 11        B 22
K 01        K 14        D 23        D 45        D 11        B 22
H 10        K 14        H 23        H 22        K 25        K 22
H 14        H 14        E 23        D 00        K 22        E 22
E 14        B 23        H 45        K 00        B 22        H 22
E 00        B 23        D 45        H 25        D 01        K 22
D 01        K 23        E 00        H 31        E 01        D 40
H 01        H 23        K 45        K 31        D 11        D 40
B 23        D 45        K 45        D 31        K 14        R
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Player  Hit Pct    KPG      BPG      DPG
-----------------------------------------
00      +0.176    4.000    4.000    5.000
01      -0.143    2.500    1.000    4.500
10      +0.000    0.000    1.000    1.000
11      +0.000    1.000    0.000    3.000
14      +0.400    3.667    2.000    2.333
22      +0.400    4.500    2.500    1.000
23      +0.000    1.333    2.333    2.333
25      +0.167    1.000    4.000    1.000
31      +0.333    5.000    2.000    2.000
32      +0.000    3.000    2.000    0.000
45      +0.571    3.333    2.000    3.000
54      +0.000    0.000    3.000    1.000
team    +0.225   19.333   16.667   17.667

Player  Hit Pct    KPG      BPG      DPG
-----------------------------------------
04      +0.000    0.000    2.000    1.000
13      +0.000    0.000    0.000    0.000
14      +1.000    4.000    4.000    2.000
15      -0.286    0.000    0.000    1.000
22      +0.250    2.000    2.000    0.000
40      +0.000    0.000    0.000    2.000
team    +0.200    6.000    8.000    6.000
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
571||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Jugs</TITLE>
<META NAME="description" CONTENT="Jugs">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Jugs</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In the movie ``Die Hard 3", Bruce Willis and Samuel L. Jackson were confronted
with the following
puzzle. They were given a 3-gallon jug and a 5-gallon jug and were asked to
fill the 5-gallon jug
with exactly 4 gallons. This problem generalizes that puzzle.

<P>

<P>
<BR>
You have two jugs, A and B, and an infinite supply of water. There are
three types of actions that
you can use: (1) you can fill a jug, (2) you can empty a jug, and (3) you
can pour from one jug to
the other. Pouring from one jug to the other stops when the first jug is
empty or the second jug is
full, whichever comes first. For example, if A has 5 gallons and B has 6
gallons and a capacity of 8,
then pouring from A to B leaves B full and 3 gallons in A.

<P>

<P>
<BR>
A problem is given by a triple (<I>Ca</I>,<I>Cb</I>,<I>N</I>), where <I>Ca</I> and <I>Cb</I> are the capacities of the jugs A and B,
respectively, and <I>N</I> is the goal. A solution is a sequence of steps that
leaves exactly <I>N</I> gallons in jug B. The possible steps are

<P>
<PRE>
fill A
fill B
empty A
empty B
pour A B
pour B A
success
</PRE>

<P>
where ``<TT>pour A B</TT>" means ``pour the contents of jug A into jug B", and
``<TT>success</TT>" means that the goal has been accomplished.

<P>

<P>
<BR>
You may assume that the input you are given does have a solution.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to your program consists of a series of input lines each defining one
puzzle. Input for each
puzzle is a single line of three positive integers: <I>Ca</I>, <I>Cb</I>, and <I>N</I>. <I>Ca</I> and <I>Cb</I> are the capacities of jugs
A and B, and <I>N</I> is the goal. You can assume 
<!-- MATH: $0 < Ca \le Cb$ -->
<IMG
 WIDTH="104" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/571img1.gif" 
 ALT="$0 < Ca \le Cb$">
and 
<!-- MATH: $N \le Cb \le 1000$ -->
<IMG
 WIDTH="123" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/571img1.gif" 
 ALT="$N \le Cb \le 1000$">
and that A and B are relatively prime to one another.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output from your program will consist of a series of instructions from the
list of the potential output
lines which will result in either of the jugs containing exactly <I>N</I> gallons of
water. The last line of
output for each puzzle should be the line ``success". Output lines start in
column 1 and there should be no empty lines nor any trailing spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 5 4
5 7 3
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
fill B
pour B A
empty A
pour B A
fill B
pour B A
success
fill A
pour A B
fill A
pour A B
empty B
pour A B
success
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
572||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Oil Deposits</TITLE>
<META NAME="description" CONTENT="Oil Deposits">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Oil Deposits</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The GeoSurvComp geologic survey company is responsible for detecting
underground oil deposits. GeoSurvComp works with one large rectangular
region of land at a time, and creates
a grid that divides the land into numerous square plots. It then analyzes
each plot separately,
using sensing equipment to determine whether or not the plot contains oil.

<P>
A plot containing
oil is called a pocket. If two pockets are adjacent, then they are part of
the same oil deposit. Oil
deposits can be quite large and may contain numerous pockets. Your job is to
determine how many different oil deposits are contained in a grid.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more grids. Each grid begins with a line
containing <I>m</I> and <I>n</I>, the
number of rows and columns in the grid, separated by a single space. If
<I>m</I> = 0 it signals the end
of the input; otherwise 
<!-- MATH: $1 \le m \le 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/572img1.gif" 
 ALT="$1 \le m \le 100$">
and 
<!-- MATH: $1 \le n \le 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/572img1.gif" 
 ALT="$1 \le n \le 100$">.
Following
this are <I>m</I> lines of <I>n</I> characters
each (not counting the end-of-line characters). Each character corresponds to
one plot, and is
either `<TT>*</TT>', representing the absence of oil, or `<TT>@</TT>', representing an oil pocket.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each grid, output the number of distinct oil deposits. Two different
pockets are part of the
same oil deposit if they are adjacent horizontally, vertically, or diagonally.
An oil deposit will not contain more than 100 pockets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 1
*
3 5
*@*@*
**@**
*@*@*
1 8
@@****@*
5 5
****@
*@@*@
*@**@
@@@*@
@@**@
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0
1
2
2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
573||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Snail</TITLE>
<META NAME="description" CONTENT="The Snail">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Snail</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A snail is at the bottom of a 6-foot well and wants to climb to the top.
The snail can climb 3 feet
while the sun is up, but slides down 1 foot at night while sleeping.
The snail has a fatigue factor
of 10%, which means that on each successive day the snail climbs
10% <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/573img1.gif" 
 ALT="$\times$">
3 = 0.3 feet less than
it did the previous day. (The distance lost to fatigue is always 10% of the
<EM>first</EM> day's climbing
distance.) On what day does the snail leave the well, <EM>i.e.</EM>, what is the first
day during which
the snail's height <EM>exceeds</EM> 6 feet? (A day consists of a period of sunlight
followed by a period of
darkness.) As you can see from the following table, the snail leaves the well
during the third day.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Day</TD>
<TD ALIGN="CENTER">Initial Height</TD>
<TD ALIGN="CENTER">Distance Climbed</TD>
<TD ALIGN="CENTER">Height After Climbing</TD>
<TD ALIGN="CENTER">Height After Sliding</TD>
</TR>
<TR><TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">0'</TD>
<TD ALIGN="CENTER">3'</TD>
<TD ALIGN="CENTER">3'</TD>
<TD ALIGN="CENTER">2'</TD>
</TR>
<TR><TD ALIGN="CENTER">2</TD>
<TD ALIGN="CENTER">2'</TD>
<TD ALIGN="CENTER">2.7'</TD>
<TD ALIGN="CENTER">4.7'</TD>
<TD ALIGN="CENTER">3.7'</TD>
</TR>
<TR><TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">3.7'</TD>
<TD ALIGN="CENTER">2.4'</TD>
<TD ALIGN="CENTER">6.1'</TD>
<TD ALIGN="CENTER">-</TD>
</TR>
</TABLE></DIV>

<P>
Your job is to solve this problem in general. Depending on the parameters
of the problem, the
snail will eventually either leave the well or slide back to the bottom of
the well. (In other words,
the snail's height will exceed the height of the well or become negative.)
You must find out which
happens first and on what day.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more test cases, each on a line by itself.
Each line contains four
integers <I>H</I>, <I>U</I>, <I>D</I>, and <I>F</I>, separated by a single space. If <I>H</I>
= 0 it signals the end of the input;
otherwise, all four numbers will be between 1 and 100, inclusive. <I>H</I> is the
height of the well in
feet, <I>U</I> is the distance in feet that the snail can climb during the day,
<I>D</I> is the distance in feet
that the snail slides down during the night, and <I>F</I> is the fatigue factor
expressed as a percentage.
The snail <EM>never</EM> climbs a negative distance. If the fatigue factor drops
the snail's climbing distance
below zero, the snail does not climb at all that day. Regardless of how far
the snail climbed, it always slides <I>D</I> feet at night.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
<BR>
For each test case, output a line indicating whether the snail succeeded
(left the well) or failed
(slid back to the bottom) and on what day. Format the output <EM>exactly</EM> as shown in the example.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6 3 1 10
10 2 1 50
50 5 3 14
50 6 4 1
50 6 3 1
1 1 1 1
0 0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
success on day 3
failure on day 4
failure on day 7
failure on day 68
success on day 20
failure on day 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
574||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Sum It Up</TITLE>
<META NAME="description" CONTENT="Sum It Up">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Sum It Up</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
Given a specified total <I>t</I> and a list of <I>n</I> integers, find all distinct sums
using numbers from the list that add up to <I>t</I>. For example,
if <I>t</I> = 4, <I>n</I> = 6, and the list is [4, 3, 2, 2, 1, 1], then there are
four different sums that equal 4: 4, 3+1, 2+2, and 2+1+1. (A number can be
used within a sum as
many times as it appears in the list, and a single number counts as a sum.)
Your job is to solve this problem in general.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will contain one or more test cases, one per line. Each test
case contains <I>t</I>, the total,
followed by <I>n</I>, the number of integers in the list, followed by <I>n</I> integers

<!-- MATH: $x_1, \dots, x_n$ -->
<IMG
 WIDTH="80" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/574img1.gif" 
 ALT="$x_1, \dots, x_n$">.
If <I>n</I> = 0 it
signals the end of the input; otherwise, <I>t</I> will be a positive integer less
than 1000, <I>n</I> will be an
integer between 1 and 12 (inclusive), and 
<!-- MATH: $x_1, \dots, x_n$ -->
<IMG
 WIDTH="80" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/574img1.gif" 
 ALT="$x_1, \dots, x_n$">
will be positive integers less than 100. All
numbers will be separated by exactly one space. The numbers in each list
appear in nonincreasing order, and there may be repetitions.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first output a line containing `<TT>Sums of </TT>', the total, and
a colon. Then output
each sum, one per line; if there are no sums, output the line `<TT>NONE</TT>'.
The numbers within each
sum must appear in nonincreasing order. A number may be repeated in the sum
as many times
as it was repeated in the original list. The sums themselves must be sorted
in decreasing order
based on the numbers appearing in the sum. In other words, the sums must be
sorted by their
first number; sums with the same first number must be sorted by their second
number; sums
with the same first two numbers must be sorted by their third number; and
so on. Within each
test case, all sums must be distinct; the same sum cannot appear twice.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 6 4 3 2 2 1 1
5 3 2 1 1
400 12 50 50 50 50 50 50 25 25 25 25 25 25
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Sums of 4:
4
3+1
2+2
2+1+1
Sums of 5:
NONE
Sums of 400:
50+50+50+50+50+50+25+25+25+25
50+50+50+50+50+25+25+25+25+25+25
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
575||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Skew Binary</TITLE>
<META NAME="description" CONTENT="Skew Binary">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Skew Binary</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
When a number is expressed in decimal, the <I>k</I>-th digit represents a multiple
of 10<SUP><I>k</I></SUP>. (Digits are
numbered from right to left, where the least significant digit is number 0.)
For example,
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
81307_{10} = 8 \times 10^4 + 1 \times 10^3 + 3 \times 10^2 + 0 \times 10^1 +
7 \times 10 0 = 80000 + 1000 + 300 + 0 + 7
= 81307.
\end{displaymath} -->


<IMG
 WIDTH="641" HEIGHT="29"
 SRC="http://uva.onlinejudge.org/external/5/575img1.gif" 
 ALT="\begin{displaymath}81307_{10} = 8 \times 10^4 + 1 \times 10^3 + 3 \times 10^2 + ...
...mes 10^1 +
7 \times 10 0 = 80000 + 1000 + 300 + 0 + 7
= 81307.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
When a number is expressed in binary, the <I>k</I>-th digit represents a multiple of
2<SUP><I>k</I></SUP>. For example,
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
10011_2 = 1 \times 2^4 + 0 \times 2^3 + 0 \times 2^2 + 1 \times 2^1 +
1 \times 2^0 = 16 + 0 + 0 + 2 + 1 = 19.
\end{displaymath} -->


<IMG
 WIDTH="553" HEIGHT="29"
 SRC="http://uva.onlinejudge.org/external/5/575img1.gif" 
 ALT="\begin{displaymath}10011_2 = 1 \times 2^4 + 0 \times 2^3 + 0 \times 2^2 + 1 \times 2^1 +
1 \times 2^0 = 16 + 0 + 0 + 2 + 1 = 19.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
In <B>skew binary</B>, the <I>k</I>-th digit represents a multiple of 
<!-- MATH: $2^{k+1} - 1$ -->
2<SUP><I>k</I>+1</SUP> - 1.
The only possible digits are 0 and
1, except that the least-significant nonzero digit can be a 2. For example,
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
10120_{skew} = 1 \times (2^5 - 1) + 0 \times (2^4-1) + 1 \times (2^3-1) +
2 \times (2^2-1) + 0 \times (2^1-1)
= 31 + 0 + 7 + 6 + 0 = 44.
\end{displaymath} -->


<IMG
 WIDTH="696" HEIGHT="31"
 SRC="http://uva.onlinejudge.org/external/5/575img1.gif" 
 ALT="\begin{displaymath}10120_{skew} = 1 \times (2^5 - 1) + 0 \times (2^4-1) + 1 \tim...
...2 \times (2^2-1) + 0 \times (2^1-1)
= 31 + 0 + 7 + 6 + 0 = 44.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
The first 10 numbers in skew binary are 0, 1, 2, 10, 11, 12, 20, 100, 101,
and 102. (Skew binary is
useful in some applications because it is possible to add 1 with at most
one carry. However, this
has nothing to do with the current problem.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more lines, each of which contains an integer <I>n</I>. If <I>n</I> = 0 it signals
the end of the input, and otherwise <I>n</I> is a nonnegative integer in skew binary.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each number,
output the decimal equivalent. The decimal value of <I>n</I> will be at
most 
<!-- MATH: $2^{31} - 1 = 2147483647$ -->
2<SUP>31</SUP> - 1 = 2147483647.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
10120
200000000000000000000000000000
10
1000000000000000000000000000000
11
100
11111000001110000101101102000
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
44
2147483646
3
2147483647
4
7
1041110737
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
576||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Haiku Review</TITLE>
<META NAME="description" CONTENT="Haiku Review">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Haiku Review</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
<EM>Haiku</EM> is an ancient form of Japanese poetry. A haiku is a three-line poem
with seventeen syllables,
where the first line must contain five syllables, the second line must
contain seven syllables, and
the third line must contain five syllables. The lines do not have to rhyme.
Here is an example,
where slashes separate the lines:

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
Computer programs/The bugs try to eat my code/I must not let them.
\end{displaymath} -->


<I>Computer programs</I>/<I>The bugs try to eat my code</I>/<I>I must not let them</I>.
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
You must write a program that will review a haiku and check that each line
contains the correct number of syllables.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains one or more lines, each of which contains a single haiku.
A haiku will contain
at least three words, and words will be separated by either a single space
or a slash (`<TT>/</TT>'). Slashes
also separate the three lines of a haiku, so each haiku will contain exactly
two slashes. (The three
lines of the haiku will be contained within one physical line of the file.)
A haiku will contain
only lowercase letters (`<TT>a</TT>'-`<TT>z</TT>'), forward slashes (`<TT>/</TT>'), and spaces, and will be no more than 200
characters long (not counting the end-of-line characters).

<P>
The haiku `<TT>e/o/i</TT>' signals the end of the input.

<P>
Each haiku is guaranteed to contain three lines, and each line will contain
at least one word.
Your job is to determine whether each line has the correct number of
syllables (5/7/5). For
the purposes of this problem, every contiguous sequence of one or more
vowels counts as one
syllable, where the vowels are <TT>a</TT>, <TT>e</TT>, <TT>i</TT>, <TT>o</TT>, <TT>u</TT>, and <TT>y</TT>. Every word will contain at least one syllable.

<P>

<P>
<BR>

(<B>Note</B> that this method of counting syllables does not always agree with
English conventions. In
the second example below, your program must consider the word `<TT>code</TT>' to
have two syllables
because the `<TT>o</TT>' and the `<TT>e</TT>' are not consecutive. However, in English the `<TT>e</TT>' is silent and so `<TT>code</TT>' actually has only one syllable.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each haiku, output a single line that contains `<TT>1</TT>' if the first line
has the wrong number of
syllables, `<TT>2</TT>' if the second line has the wrong number of syllables, `<TT>3</TT>' if the third line has the
wrong number of syllables, or `<TT>Y</TT>' if all three lines have the correct number of syllables. If the
haiku is not correct, you must output the number of the <EM>first</EM> line that
has the wrong number of syllables.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
happy purple frog/eating bugs in the marshes/get indigestion
computer programs/the bugs try to eat my code/i will not let them
a e i o u/this is seven syllables/a e i o u y
e/o/i
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Y
2
3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
577||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>WIMP</TITLE>
<META NAME="description" CONTENT="WIMP">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
WIMP</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A window manager takes care of the details of creating, displaying, moving,
and resizing a
collection of windows in a graphical user interface. It also handles input
events (like mouse
clicks) related to these window management tasks. Your project is to write
a WIndow Manager Program (WIMP).

<P>

<P>
<BR>
The WIMP controls a screen of size 
<!-- MATH: $1024 \times 1024$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/577img1.gif" 
 ALT="$1024 \times 1024$">
(measured in pixels),
with the upper left-hand
pixel at (0,0). The <I>x</I>-coordinates range from 0 at the left edge of the
screen to 1023 at the right
edge, and the <I>y</I>-coordinates range from 0 at the top of the screen to 1023
at the bottom. All
coordinates are integers. The user can create and manipulate rectangular
windows by moving
the mouse and clicking the mouse button. A window has 4 distinct areas:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT"><EM> Area</EM></TD>
<TD ALIGN="LEFT"><EM> Location and Size</EM></TD>
</TR>
<TR><TD ALIGN="LEFT">Close box</TD>
<TD ALIGN="LEFT">upper left hand corner of the window (
<!-- MATH: $25 \times 25$ -->
<IMG
 WIDTH="61" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/577img1.gif" 
 ALT="$25 \times 25$">
pixels)</TD>
</TR>
<TR><TD ALIGN="LEFT">Zoom box</TD>
<TD ALIGN="LEFT">upper right hand corner of the window (
<!-- MATH: $25 \times 25$ -->
<IMG
 WIDTH="61" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/577img1.gif" 
 ALT="$25 \times 25$">
pixels)</TD>
</TR>
<TR><TD ALIGN="LEFT">Motion bar</TD>
<TD ALIGN="LEFT">fills the top 25 pixels of the window, excluding zoom and close
boxes</TD>
</TR>
<TR><TD ALIGN="LEFT">Data area</TD>
<TD ALIGN="LEFT">remainder of the window</TD>
</TR>
</TABLE></DIV>

<P>
A window will always be at least 
<!-- MATH: $51 \times 26$ -->
<IMG
 WIDTH="61" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/577img1.gif" 
 ALT="$51 \times 26$">
so that all four areas are
nonempty. Each window is
assigned a unique integer identifier, starting at 0 (the first window
created has id 0, the second
one created has id 1, and so on). Identifiers are not reused.

<P>

<P>
<BR>
The WIMP accepts the following events:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT"><EM> Event</EM></TD>
<TD ALIGN="LEFT"><EM> Meaning</EM></TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> DN</TT> <I>x</I> <I>y</I></TD>
<TD ALIGN="LEFT">user pressed mouse button at location (<I>x</I>,<I>y</I>)</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> UP</TT> <I>x</I> <I>y</I></TD>
<TD ALIGN="LEFT">user released mouse button at location (<I>x</I>,<I>y</I>)</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> AT</TT> <I>x</I> <I>y</I></TD>
<TD ALIGN="LEFT">user moved mouse to location (<I>x</I>,<I>y</I>)</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> CR</TT> <I>l</I> <I>t</I> <I>r</I> <I>b</I></TD>
<TD ALIGN="LEFT">create new window with positions left, top, right, and bottom</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> RE</TT></TD>
<TD ALIGN="LEFT">redraw all windows from back to front</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> ZZ</TT></TD>
<TD ALIGN="LEFT">exit the WIMP</TD>
</TR>
</TABLE></DIV>

<P>
The values <I>x</I>, <I>y</I>, <I>l</I>, <I>t</I>, <I>r</I> and <I>b</I> are all nonnegative integers within the dimensions of the screen.

<P>
The <TT>CR</TT> event always generates a properly formed window. Because windows
can overlap, on a <TT>RE</TT> event they must be redrawn from back (least recently on top) to front (most recently on top). This ensures that they appear correctly
overlapped to the user.

<P>

<P>
<BR>
It is the job of the WIMP to keep track of all windows, even if some are
overlapping. The rules it uses are:

<P>
<DL COMPACT>
<DT>1.
<DD>A new window is <EM>always</EM> completely visible (`on top' of all other windows).
<P>
<DT>2.
<DD>A <TT>DN</TT> event anywhere on a visible part of a window selects that window and puts it on top, making the entire window visible. A <TT>DN</TT> event that is not in the visible part of any window does not affect the currently selected window.

<P>
<DT>3.
<DD>Closing and zooming both require a <TT>DN</TT> event followed by an <TT>UP</TT> event in the appropriate box. There may be one or more <TT>AT</TT> events in between. The <TT>DN</TT> and <TT>UP</TT> events must be in the
same box, but they don't have to be in the exact same location.

<P>
<DT>4.
<DD>Closing a window removes it from the screen.

<P>
<DT>5.
<DD>Zooming is a toggle that either makes the window occupy the entire screen, or returns the window to its initial size.

<P>
<DT>6.
<DD>A <TT>DN</TT> event in the motion bar allows the window to be relocated. The motion stops with an <TT>UP</TT> event. The window moves the same distance and direction that the mouse moved between the <TT>DN</TT> and <TT>UP</TT> events.

<P>
<DT>7.
<DD><TT>AT</TT> events while moving a window must output the window's current position. <TT>AT</TT> events
at any other time do not generate any output.
<DT>8.
<DD>Windows occupying the full screen cannot be moved.
<DT>9.
<DD>Windows can partially move off the visible screen.
<DT>10.
<DD><TT>AT</TT> events happen.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more lines, each of which contains a single
event. A <TT>ZZ</TT> event
signals the end of the input. The events are all part of the same session.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each user action,
output the corresponding message. On an <TT>RE</TT> event, the location of all windows must be output from back-to-front using the format shown.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT"><EM> Action</EM></TD>
<TD ALIGN="LEFT"><EM> Message</EM></TD>
</TR>
<TR><TD ALIGN="LEFT">Create window</TD>
<TD ALIGN="LEFT">`<TT> Created window </TT><I>n</I><TT>  at </TT><I>l</I>, <I>t</I>, <I>r</I>, <I>b</I>'</TD>
</TR>
<TR><TD ALIGN="LEFT">Select window</TD>
<TD ALIGN="LEFT">`<TT> Selected window </TT><I>n</I>'</TD>
</TR>
<TR><TD ALIGN="LEFT">Close window</TD>
<TD ALIGN="LEFT">`<TT> Closed window </TT><I>n</I>'</TD>
</TR>
<TR><TD ALIGN="LEFT">Move window</TD>
<TD ALIGN="LEFT">`<TT> Moved window </TT><I>n</I><TT>  to </TT><I>l</I>, <I>t</I>, <I>r</I>, <I>b</I>'</TD>
</TR>
<TR><TD ALIGN="LEFT">Zoom window</TD>
<TD ALIGN="LEFT">`<TT> Resized window </TT><I>n</I><TT>  to </TT><I>l</I>, <I>t</I>, <I>r</I>, <I>b</I>'</TD>
</TR>
<TR><TD ALIGN="LEFT">Redraw</TD>
<TD ALIGN="LEFT">`<TT> Window </TT><I>n</I><TT>  at </TT><I>l</I>, <I>t</I>, <I>r</I>, <I>b</I>'</TD>
</TR>
</TABLE></DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
CR 0 0 200 200
CR 50 50 250 250
RE
DN 195 5
AT 50 50
UP 198 6
AT 100 100
AT 1000 1000
DN 1020 10
UP 1020 10
RE
DN 100 100
UP 800 0
DN 0 700
UP 1023 1023
DN 50 10
AT 70 70
UP 100 100
DN 60 60
UP 60 60
RE
ZZ
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Created window 0 at 0, 0, 200, 200
Created window 1 at 50, 50, 250, 250
Window 0 at 0, 0, 200, 200
Window 1 at 50, 50, 250, 250
Selected window 0
Resized window 0 to 0, 0, 1023, 1023
Selected window 0
Resized window 0 to 0, 0, 200, 200
Window 1 at 50, 50, 250, 250
Window 0 at 0, 0, 200, 200
Selected window 0
Selected window 0
Moved window 0 to 20, 60, 220, 260
Moved window 0 to 50, 90, 250, 290
Selected window 1
Closed window 1
Window 0 at 50, 90, 250, 290
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
578||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Polygon Puzzler</TITLE>
<META NAME="description" CONTENT="Polygon Puzzler">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Polygon Puzzler</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
We define a <EM>simple polygon</EM> as an area enclosed by endpoint-connected line segments such that
no line segment intersects another (except for adjoining segments at their endpoints). A simple
polygon can thus be defined by an ordered list of its vertices (the endpoints of the enclosing
line segments). A <EM>planar polygon</EM> is a polygon whose vertices all lie in the same plane.

<P>
For this problem you are asked to compute the area of a simple planar polygon oriented in
three space. That is, although the vertices of the polygon lie in some two-dimensional plane,
the vertices are specified in three-dimensional Cartesian coordinates.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of several data sets. The first line of the data set will cointain
the number of vertex of the polygon. Then an ordered sequence of coordinates for the vertices of the polygon follow.
Each vertex will be in a line, and it will contain the three-dimensional cartesian coordinates for the single
vertex in the order <I>x</I>, <I>y</I>, <I>z</I>. The values for the <I>x</I>, <I>y</I>, <I>z</I> components will be separated by a single
space. Input values should be considered to be double precision floating point and may be
positive or negative.
No polygon will have less than 3 or more than 1024 vertices.
Input will finish with a polygon with 0 vertices. This test case shouldn't be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output should be the area of the polygons specified by the input and should be rounded to
the nearest 1/1000 (i.e., three places after the decimal point should be printed).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
-1.401117996399998e+00 1.509291958378880e-01 1.186959898555237e-01
1.918738650437130e-01 1.067473024933127e+00 9.075713530920345e-01
1.401117996399998e+00 -1.509291958378880e-01 -1.186959898555237e-01
-1.918738650437130e-01 -1.067473024933127e+00 -9.075713530920345e-01
4
0.000000000000000e+00 0.000000000000000e+00 0.000000000000000e+00
1.000000000000000e+00 0.000000000000000e+00 0.000000000000000e+00
1.000000000000000e+00 1.000000000000000e+00 0.000000000000000e+00
0.000000000000000e+00 1.000000000000000e+00 0.000000000000000e+00
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
4.000
1.000
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
579||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>ClockHands</TITLE>
<META NAME="description" CONTENT="ClockHands">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
ClockHands</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The medieval interest in mechanical contrivances is well illustrated by the development of
the mechanical clock, the oldest of which is driven by weights and controlled by a verge, an
oscillating arm engaging with a gear wheel. It dates back to 1386.

<P>
Clocks driven by springs had appeared by the mid-15th century, making it possible to con-
struct more compact mechanisms and preparing the way for the portable clock.

<P>
English spring-driven pendulum clocks were first commonly kept on a small wall bracket
and later on a shelf. Many bracket clocks contained a drawer to hold the winding key. The
earliest bracket clocks, made for a period after 1660, were of architectural design, with pillars
at the sides and a pediment on top.

<P>
In 17th- and 18th-century France, the table clock became an object of monumental design,
the best examples of which are minor works of sculpture.

<P>
The longcase clocks (also called grandfather clocks) are tall pendulum clock enclosed in a
wooden case that stands upon the floor and is typically from 6 to 7.5 feet (1.8 to 2.3 m) in height.
Later, the name ``grandfather clock'' became popular after the popular song "My Grandfather's
Clock," written in 1876 by Henry Clay Work.

<P>

<P>
<BR>
One of the first atomic clocks was an ammonia-controlled clock. It was built in 1949 at the
National Bureau of Standards, Washington, D.C.; in this clock the frequency did not vary by
more than one part in 10<SUP>8</SUP>

<P>
Nuclear clocks are built using two clocks. The aggregate of atoms that emit the gamma
radiation of precise frequency may be called the emitter clock; the group of atoms that absorb
this radiation is the absorber clock. One pair of these nuclear clocks can detect energy changes
of one part in 10<SUP>14</SUP> , being about 1,000 times more sensitive than the best atomic clock.

<P>
The cesium clock is the most accurate type of clock yet developed. This device makes use
of transitions between the spin states of the cesium nucleus and produces a frequency which
is so regular that it has been adopted for establishing the time standard.

<P>

<P>
<BR>
The history of clocks is fascinating, but unrelated to this problem. In this problem, you
are asked to find the angle between the minute hand and the hour hand on a regular analog
clock. Assume that the second hand, if there were one, would be pointing straight up at the
12. Give all angles as the smallest positive angles. For example 9:00 is 90 degrees; not -90 or
270 degrees.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a list of times in the form  <I>H</I><TT>:</TT><I>M</I>, each on their own line, with 
<!-- MATH: $1 \le H \le 12$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/579img1.gif" 
 ALT="$1 \le H \le 12$">
and

<!-- MATH: $00 \le M \le 59$ -->
<IMG
 WIDTH="105" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/579img1.gif" 
 ALT="$00 \le M \le 59$">.
The input is terminated with the time <TT>0:00</TT>. Note that <I>H</I> may be represented with
1 or 2 digits (for 1-9 or 10-12, respectively); <I>M</I> is always represented with 2 digits
(The input times are what you typically see on a digital clock).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output displays the smallest positive angle in degrees between the hands for each time.
The answer should between <TT>0</TT> degrees and <TT>180</TT> degrees for all input times. Display each angle
on a line by itself in the same order as the input. The output should be rounded to the nearest
1/1000, i.e., three places after the decimal point should be printed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
12:00
9:00
8:10
0:00
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
0.000
90.000
175.000
</PRE>

<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
580||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Critical Mass</TITLE>
<META NAME="description" CONTENT="Critical Mass">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Critical Mass</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
During the early stages of the Manhattan Project, the dangers of the new radioctive materials
were not widely known. Vast new factory cities were built to manufacture uranium and plu-
tonium in bulk. Compounds and solutions of these substances were accumulating in metal
barrels, glass bottles and cardboard box piles on the cement floors of store rooms. Workers
did not know that the substances they were handling could result in sickness, or worse, an
explosion. The officials who new the danger assumed that they could ensure safety by never
assembling any amount close to the critical mass estimated by the physicists. But mistakes
were made. The workers, ignorant of the the dangers, often did not track these materials care-
fully, and in some cases, too much material was stored together - an accident was waiting to
happen.

<P>

<P>
<BR>
Fortunately, the dangers were taken seriously by a few knowledgeable physicists. They
drew up guidelines for how to store the materials to eliminate the danger of critical mass
accumulations. The system for handling uranium was simple. Each uranium cube was marked
``<TT>U</TT>''. It was to be stacked with lead cubes (marked ``<TT>L</TT>'') interspersed. No more than two uranium
cubes could be next to each other on a stack. With this simple system, a potential for the
uranium reaching critical mass (three stacked next to each other) was avoided. The second
constraint is that no more than thirty cubes can be stacked on top of each other, since the
height of the storage room can only accommodate that many.

<P>

<P>
<BR>
One of the physicists was still not completely satisfied with this solution. He felt that a
worker, not paying attention or not trained with the new system, could easily cause a chain
reaction. He posed the question: consider a worker stacking the radioactive cubes and non
radioactive cubes at random on top of each other to a height of <I>n</I> cubes; how many possible
combinations are there for a disaster to happen?

<P>
For example, say the stack is of size 3. There is one way for the stack to reach critical mass
- if all three cubes are radioactive.

<P>

<P>
<BR>

<TT>1: UUU</TT>

<P>

<P>
<BR>
However, if the size of the stack is 4, then there are three ways:

<P>

<P>
<BR>

<TT>1: UUUL</TT>

<P>

<TT>2: LUUU</TT>

<P>

<TT>3: UUUU</TT>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input is a list of integers on separate lines. Each integer corresponds to the size of the
stack and is always greater than 0. The input is terminated with a integer value of <TT>0</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each stack, compute the total number of dangerous combinations where each cube position
in the linear stack can either be ``<TT>L</TT>'' for lead, or ``<TT>U</TT>'' for uranium. Output your answer as a single
integer on a line by itself.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
5
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
3
8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
581||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Word Search Wonder</TITLE>
<META NAME="description" CONTENT="Word Search Wonder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Word Search Wonder</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Word search is a game enjoyed by all ages. The basic idea is to find certain specified words
within a given matrix of letters.

<P>
One interesting means of constructing a word search matrix is to take some written text (in
upper case), strip out all but the characters <TT>A-Z</TT>, and format the resulting sequence of characters
into columns of <I>s</I> characters. That is, taking <I>s</I> = 9 and given the text

<P>

<P>
<BR>
Our revels now are ended. These our actors, 
<P>
As I foretold you, were all spirits and 
<P>
Are melted into air, into thin air: 
<P>
And, like the baseless fabric of this vision, 
<P>
The cloud-capp'd towers, the gorgeous palaces, 
<P>
The solemn temples, the great globe itself, 
<P>
Ye all which it inherit, shall dissolve 
<P>
And, like this insubstantial pageant faded, 
<P>
Leave not a rack behind. We are such stuff 
<P>
As dreams are made on, and our little life 
<P>
Is rounded with a sleep. 
<P>

<P>
<BR>
We obtain the following word-search matrix:

<P>
<PRE>
          ONERIYLNEIITSFODEGCESGLHEDNSNAEAWSEDRFEE
          UODAFOSDDNRHSTNCREEMTLFIRIDITNACETAELEDE
          RWTCOUPAITAEFHTASOSNHOYCISLNITVKAUMOIIWP
          RAHTRWIRNONBAIHPTUTTEBEHTSISAFEBRFSNTSI
          EREOEERETTDABSEPHSHEGEAISOKULANEEFAATRT
          VESRTRIMOHLSRVCDEPEMRIATHLEBPDOHSARNLOH
          EEESOETEAIIEIILTGASPETLIAVTSAETIUSEDEUA
          LNOALASLINKLCSOOOLOLASLNLEHTGDANCDMOLNS
          SDUSDLATRAEEOIUWRALETEWHLAIAELRDHRAUIDL
</PRE>

<P>
We can now search this matrix for words. For example, the word ``<TT>SAFE</TT>'' can be found starting
at lexicographic position 246 and running eastward in the text
(by lexicographic position we mean the numerical position with the search matrix when counting consecutively
and column-wise from the first character, which is position 0).
Since, running row-wise, we
are looking at every <I>s</I>'th character, the value of <I>s</I> is sometimes called a <EM>skip</EM> value.

<P>

<P>
<BR>
For this problem, you will be given search words, a search text, and a skip value. Your job
(well, really, your program's job) is to find the location of each of the search words within the
search text, formatted into a search matrix according to the given skip value.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer K, then a blank line followed by K datasets. There is a blank line between datasets.

<p>The first line of each dataset contains a single integer specifying the skip value to use in doing the
word search. The second line will contain a single integer <I>m</I> specifying the number of words to
search for. The next <I>m</I> lines will contain the words to search for, one word per line. The words
will be given in all uppercase. No word will be more than 32 characters in length. There will
be a maximum of 128 search words. After the search words will be a line containing a single
integer <I>n</I> giving the number of lines in the search text. The next <I>n</I> lines contain the search text.

<P>

<P>
<BR>
No line of search text will be more than 128 characters long. All characters in the text will be
upper case. There will be a maximum of 5452 lines.(The number of lines in Hamlet.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each line of output should contain a search word, the lexicographical location of the first character of the word in the search text, and its orientation (the direction in which the rest of
characters are oriented with respect to the first character). 

<P>
Valid directions are <TT>N</TT>, <TT>NE</TT>, <TT>E</TT>, <TT>SE</TT>, <TT>S</TT>,
<TT>SW</TT>, <TT>W</TT>, and <TT>NW</TT>, in that order of precedence, indicating text running in the corresponding directions within the word search
text matrix. If a word occurs more than once in the search matrix, you should print out only the
location with the lowest lexicographical position of the first
letter. The words in the output should be ordered as given in the input.
Each line of output should contain the search word, followed by a space, then the lexicographic
position of the word, followed by another space, and finally the direction that word runs in
the search text. If a word is not found in the search matrix, the line should contain the word
followed by a space and then the text
<TT>NOT FOUND</TT>

<P>Print a blank line between datasets.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

9
5
SAFE
TOES
SHAKE
SPEARE
GLOBE
11
OUR REVELS NOW ARE ENDED. THESE OUR ACTORS,
AS I FORETOLD YOU, WERE ALL SPIRITS, AND
ARE MELTED INTO AIR, INTO THIN AIR:
AND, LIKE THE BASELESS FABRIC OF THIS VISION,
THE CLOUD-CAPP'D TOWERS, THE GORGEOUS PALACES,
THE SOLEMN TEMPLES, THE GREAT GLOBE ITSELF,
YEA, ALL WHICH IT INHERIT, SHALL DISSOLVE,
AND, LIKE THIS INSUBSTANTIAL PAGEANT FADED,
LEAVE NOT A RACK BEHIND. WE ARE SUCH STUFF
AS DREAMS ARE MADE ON; AND OUR LITTLE LIFE
IS ROUNDED WITH A SLEEP.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
SAFE 246 E
TOES 85 SW
SHAKE NOT FOUND
SPEARE NOT FOUND
GLOBE 189 S
</PRE>

<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
582||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Randomly Wired Neural Nets</TITLE>
<META NAME="description" CONTENT="Randomly Wired Neural Nets">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Randomly Wired Neural Nets</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Introduction</A>&nbsp;</FONT>
</H2>
The following story (``AI Koan'') is from <EM>The Hacker's Dictionary:</EM>

<P>
<DL COMPACT>
<DT>
<DD>In the days when Sussman was a novice, Minsky once came to him as he sat hacking
at the PDP-6.
<DT>
<DD>``What are you doing?'', asked Minsky.
<DT>
<DD>``I am training a randomly wired neural net to play Tic-Tac-Toe'' Sussman replied.
<DT>
<DD>``Why is the net wired randomly?'', asked Minsky.
<DT>
<DD>``I do not want it to have any preconceptions of how to play'', Sussman said.
<DT>
<DD>Minsky then shut his eyes.
<DT>
<DD>``Why do you close your eyes?'', Sussman asked his teacher.
<DT>
<DD>``So that the room will be empty.''
<DT>
<DD>At that moment, Sussman was enlightened.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
A Graph Model</A>&nbsp;</FONT>
</H2>
Graphs are powerful tools for modeling connected entities of all kinds (including randomly
wired neural nets). In this problem, we wish to prune unnecessary nodes from a graph that is
modeling a particular kind of neural net. In particular, we wish to remove neurons from the
neural net that do not have any potential across them (or, equivalently, any flow through them)
when we introduce a potential across two given nodes of the network.

<P>

<P>
<BR>
Let 
<!-- MATH: $G = (V , E)$ -->
<I>G</I> = (<I>V</I> , <I>E</I>) be an undirected graph with |<I>V</I>|=<I>n</I> vertices and |<I>E</I>|=<I>m</I> edges. For two
given distinct vertices <I>v</I> and <I>w</I> of <I>G</I>, a path <I>P</I>(<I>v</I>,<I>w</I>) in <I>G</I> between <I>v</I> and <I>w</I> is called a <EM>simple
path</EM> between <I>v</I> and <I>w</I> if no vertex of <I>G</I> appears in <I>P</I>(<I>v</I>,<I>w</I>) more than once.

<P>

<P>
<BR>
It is straightforward to show that a neuron in a neural net will support flow if and only if
the corresponding edge in the graph model of the neural net lies on some simple path between
<I>v</I> and <I>w</I>. Thus, the set of all vertices of <I>G</I> that are on at least one simple path between <I>v</I> and <I>w</I>
represent the vertices that would be present in a model of the neural net with the unnecessary neurons removed.

<P>

<P>
<BR>
Your program is to print out a modified graph <I>G</I> such that each vertex in the graph is present on at least one simple path between <I>v</I> and <I>w</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a graph <I>G</I> described as an adjacency list and two distinguished vertices,
<I>v</I> and <I>w</I>. The first line of the input will contain two numbers separated by a space, indicating
the distinguished vertices, <I>v</I> and <I>w</I>. The second line will contain one number <I>n</I>, specifying the
number of vertices in <I>G</I>. The next <I>n</I> lines specify the adjacency list for the graph, one line for
each vertex, ordered from vertex 0 to vertex <I>n</I>-1. The line corresponding to vertex <I>q</I> (i.e., the
<I>q</I>th line in the adjacency list portion of the input file) consists of an integer <I>k</I> specifying the
degree of <I>q</I> (the number of edges connected to <I>q</I>), followed by <I>k</I> integers specifying the vertices
connected to vertex <I>q</I>. All of the numbers in one line will be separated by a single space.

<P>
The maximum number of vertices is 1024.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output of the program will consist of an ordered list of all vertices of <I>G</I> such that each of
the identified vertices is on some simple path in <I>G</I> between <I>v</I> and <I>w</I>.Lines 0 through <I>n</I> - 1
should specify the connectivity for the vertices 0 through <I>n</I>-1, respectively. If a given vertex is
not present in the modified graph, an <TT>X</TT> should be printed on that line. Otherwise, the vertices
(in the modified graph) to which the given vertex is connected should be printed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0 6
8
2 1 4
5 0 2 3 5 7
1 1
1 1
2 0 5
3 4 1 7
1 7
3 1 5 6
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1 4
0 5 7
X
X
0 5
4 1 7
7
1 5 6
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
583||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Prime Factors</TITLE>
<META NAME="description" CONTENT="Prime Factors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Prime Factors</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
Webster defines <EM>prime</EM> as:

<P>

<P>
<BR>

<B>prime</B> (prim) <I>n</I>.[<B>ME</B>, fr. <B>MF</B>, fem. of <EM>prin</EM> first, <B>L</B> <EM>primus</EM>; akin to <B>L</B> <EM>prior</EM>] <B>1</B> :first in time:
<B>original 2 a</B> : having no factor except itself and one <IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\langle$">3 is a &nbsp;  number <IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\rangle$">
<B>b</B> : having no common
factor except one <IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\langle$">
12 and 25 are relatively &nbsp;<IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\rangle$">
<B>3 a</B> : first in rank, authority or significance
: <B>principal b</B> : having the highest quality or value <IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\langle$">&nbsp; television time <IMG
 WIDTH="11" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$\rangle$">
[from <EM>Webster's New Collegiate Dictionary</EM>]

<P>

<P>
<BR>
The most relevant definition for this problem is 2a: An integer <I>g</I>&gt;1 is said to be <EM>prime</EM> if
and only if its only positive divisors are itself and one (otherwise it is said to be <EM>composite</EM>). For
example, the number 21 is composite; the number 23 is prime. Note that the decompositon of
a positive number <I>g</I> into its prime factors, i.e.,
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
g = f_1 \times f_2 \times \dots \times f_n
\end{displaymath} -->


<IMG
 WIDTH="166" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="\begin{displaymath}g = f_1 \times f_2 \times \dots \times f_n
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
is unique if we assert that <I>f</I><SUB><I>i</I></SUB> &gt; 1 for all <I>i</I> and 
<!-- MATH: $f_i \le f_j$ -->
<IMG
 WIDTH="57" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$f_i \le f_j$">
for <I>i</I>&lt;<I>j</I>.

<P>
One interesting class of prime numbers are the so-called <EM>Mersenne</EM> primes
which are of the form 2<SUP><I>p</I></SUP>- 1. Euler proved that 
<!-- MATH: $2^{31} - 1$ -->
2<SUP>31</SUP> - 1 is prime in
1772 -- all without the aid of a computer.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a sequence of numbers. Each line of input will contain one number <I>g</I>
in the range 
<!-- MATH: $-2^{31} < g <2^{31}$ -->
-2<SUP>31</SUP> &lt; <I>g</I> &lt;2<SUP>31</SUP>, but different of -1 and 1. The end of input
will be indicated by an input line having a value of zero.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each line of input, your program should print a line of output consisting of the input number
and its prime factors. For an input number 
<!-- MATH: $g>0, g = f_1 \times f_2 \times
\dots \times f_n$ -->
<IMG
 WIDTH="219" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$g>0, g = f_1 \times f_2 \times
\dots \times f_n$">,
where each <I>f</I><SUB><I>i</I></SUB> is a prime
number greater than unity (with 
<!-- MATH: $f_i \le f_j$ -->
<IMG
 WIDTH="57" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$f_i \le f_j$">
for <I>i</I>&lt;<I>j</I>), the format of the output line 
should be

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
g  \mbox{\tt\ = }  f_1  \mbox{\tt\ x }  f_2  \mbox{\tt\ x } \dots \mbox{\tt\ x }  f_n
\end{displaymath} -->


<IMG
 WIDTH="194" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="\begin{displaymath}g \mbox{\tt\ = } f_1 \mbox{\tt\ x } f_2 \mbox{\tt\ x } \dots \mbox{\tt\ x } f_n
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
When <I>g</I> &lt; 0, if  
<!-- MATH: $\mid g \mid = f_1 \times f_2 \times \dots \times f_n$ -->
<IMG
 WIDTH="185" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="$ \mid g \mid = f_1 \times f_2 \times \dots \times f_n$">,
the
format of the output line should be 
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
g \mbox{\tt\ = -1 x }  f_1  \mbox{\tt\ x }  f_2  \mbox{\tt\ x } \dots
\mbox{\tt\ x } f_n
\end{displaymath} -->


<IMG
 WIDTH="239" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/5/583img1.gif" 
 ALT="\begin{displaymath}g \mbox{\tt\ = -1 x } f_1 \mbox{\tt\ x } f_2 \mbox{\tt\ x } \dots
\mbox{\tt\ x } f_n
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
-190
-191
-192
-193
-194
195
196
197
198
199
200
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
-190 = -1 x 2 x 5 x 19
-191 = -1 x 191
-192 = -1 x 2 x 2 x 2 x 2 x 2 x 2 x 3
-193 = -1 x 193
-194 = -1 x 2 x 97
195 = 3 x 5 x 13
196 = 2 x 2 x 7 x 7
197 = 197
198 = 2 x 3 x 3 x 11
199 = 199
200 = 2 x 2 x 2 x 5 x 5
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-19</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
584||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Bowling</TITLE>
<META NAME="description" CONTENT="Bowling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Bowling</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
History</A>&nbsp;</FONT>
</H2>
Bowling has been traced to articles found in the tomb of an Egyptian child buried in 5200 BC.
The primitive implements included nine pieces of stone at which a stone ``ball'' was rolled, the
ball having first to roll through an archway made of three pieces of marble.

<P>
Another ancient discovery was the Polynesian game of ula maika, which also used pins and
balls of stone. The stones were to be rolled at targets 60 feet away, a distance which is still one
of the basic regulations of tenpins.

<P>
Bowling at tenpins probably originated in Germany, not as a sport but as a religious ceremony. Martin Luther is credited with settling on nine as the ideal number of pins.

<P>
Tracing history reveals the game moved through Europe, the Scandinavian countries and
finally to the United States, where the earliest known reference to bowling at pins in America
was made by author Washington Irving about 1818 in <EM>Rip Van Winkle</EM>.

<P>
Although the game was being played throughout the world, rules were different almost
everywhere, and even basic equipment was not the same. In fact, why and when the 10th pin
was added from the European game of ninepins to the American game of tenpins is still a
mystery.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Rules</A>&nbsp;</FONT>
</H2>
A single bowling game consists of ten <EM>frames</EM>. The object in each frame is to roll a ball at ten
bowling pins arranged in an equilateral triangle and to knock down as many pins as possible.

<P>
For each frame, a bowler is allowed a maximum of two <EM>rolls</EM> to knock down all ten pins. If
the bowler knocks them all down on the first attempt, the frame is scored as a <EM>strike</EM>. If the
bowler does not knock them down on the first attempt in the frame the bowler is allowed a
second attempt to knock down the remaining pins. If the bowler succeeds in knocking the rest
of the pins down in the second attempt, the frame is scored as a <EM>spare</EM>.

<P>

<P>
<BR>
The score for a bowling game consists of sum of the scores for each frame. The score for
each frame is the total number of pins knocked down in the frame, plus bonuses for strikes
and spares. In particular, if a bowler scores a strike in a particular frame, the score for that
frame is ten plus the sum of the next two rolls. If a bowler scores a spare in a particular frame,
the score for that frame is ten plus the score of the next roll. If a bowler scores a strike in the
tenth (final) frame, the bowler is allowed two more rolls. Similarly, a bowler scoring a spare in
the tenth frame is allowed one more roll.

<P>
The maximum possible score in a game of bowling (strikes in all ten frames plus two extra
strikes for the tenth frame strike) is 300.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a sequence of bowling game scores. Each line will contain the scores
for a single game, with the scores for each roll of the ball separated by a single space. The
score for a single roll will be represented by a single character -- either a number indicating
the number of pins knocked down, a '<TT>/</TT>' for a spare or a '<TT>X</TT>' for a strike.

<P>
The end of input is indicated by a single line containing the text <TT>Game Over</TT> (terminated with a newline).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Your program should output the total game score for each game in the input file. The game
scores should be left justified and each score should be printed on a separate line. The order
of the scores on the output should correspond to the order of the games on the input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 0 1 / 2 2 X 3 3 X 1 / 3 / X 1 2
1 0 1 / 2 2 X 3 3 X 1 / 3 / 1 / X 8 0
1 0 1 / 2 2 X 3 3 X 1 / 3 / 1 / 8 / 9
Game Over
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
108
121
120
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
585||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Triangles</TITLE>
<META NAME="description" CONTENT="Triangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Triangles</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It is always very nice to have little brothers or sisters. You can tease them, lock them in the
bathroom or put red hot chili in their sandwiches. But there is also a time when all meanness comes
back!

<P>

<P>
<BR>
As you know, in one month it is Christmas and this year you are honored to make the big star that
will be stuck on the top of the Christmas tree. But when you get the triangle-patterned silver paper
you realize that there are many holes in it. Your little sister has already cut out smaller triangles for
the normal Christmas stars. Your only chance is to find an algorithm that tells you for each piece of
silver paper the size of the largest remaining triangle.

<P>

<P>
<BR>
Given a triangle structure with white and black fields inside you must find the largest triangle area
of white fields, as shown in the following figure.

<P>
<DIV ALIGN="CENTER">
<img src=p585.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several triangle descriptions. The first line of each description contains an
integer <I>n</I> (
<!-- MATH: $1 \leÂŸ n \leÂŸ 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/585img1.gif" 
 ALT="$1 \leÂŸ n \leÂŸ 100$">), which gives the height of the triangle. The next <I>n</I> lines contain characters of
the set {<EM>space</EM>, <TT>#</TT>, <TT>-</TT>} representing the rows of the triangle, where `<TT>#</TT>' is a black and `<TT>-</TT>' a white field.
The spaces are used only to keep the triangle shape in the input by padding at the left end of the lines.
(Compare with the sample input. The first test case corresponds to the figure.)

<P>
For each triangle, the number of the characters `<TT>#</TT>' and `<TT>-</TT>' per line is odd and decreases from 2<I>n</I> - 1 down to 1.

<P>

<P>
<BR>
The input is terminated by a description starting with <I>n</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each triangle in the input, first output the number of the triangle, as shown in the sample output.
Then print the line ``<TT>The largest triangle area is </TT><I>a</I>.'', where <I>a</I> is the number of fields
inside the largest triangle that consists only of white fields. Note that the largest triangle can have its
point at the top, as in the second case of the sample input.

<P>

<P>
<BR>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
#-##----#
 -----#-
  ---#-
   -#-
    -
4
#-#-#--
 #---#
  ##-
   -
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Triangle #1
The largest triangle area is 9.

Triangle #2
The largest triangle area is 4.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
586||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Instant Complexity</TITLE>
<META NAME="description" CONTENT="Instant Complexity">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Instant Complexity</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Analyzing the run-time complexity of algorithms is an important tool for designing efficient programs that solve a problem. An algorithm that runs in linear time is usually much faster than an
algorithm that takes quadratic time for the same task, and thus should be preferred.

<P>

<P>
<BR>
Generally, one determines the run-time of an algorithm in relation to the `size' <I>n</I> of the input,
which could be the number of objects to be sorted, the number of points in a given polygon, and so
on. Since determining a formula dependent on <I>n</I> for the run-time of an algorithm is no easy task, it
would be great if this could be automated. Unfortunately, this is not possible in general, but in this
problem we will consider programs of a very simple nature, for which it is possible. Our programs
are built according to the following rules (given in BNF), where 
<!-- MATH: $< number >$ -->
&lt; <I>number</I> &gt; can be any non-negative integer:

<P>
<UL>
<LI>
<!-- MATH: $< Program >$ -->
&lt; <I>Program</I> &gt; ::= "<TT>BEGIN</TT>" 
<!-- MATH: $< Statementlist >$ -->
&lt; <I>Statementlist</I> &gt; "<TT>END</TT>"
<LI>
<!-- MATH: $< Statementlist >$ -->
&lt; <I>Statementlist</I> &gt; ::= 
<!-- MATH: $< Statement > | < Statement >$ -->
&lt; <I>Statement</I> &gt; | &lt; <I>Statement</I> &gt; 
<!-- MATH: $< Statementlist >$ -->
&lt; <I>Statementlist</I> &gt;
<LI>
<!-- MATH: $< Statement >$ -->
&lt; <I>Statement</I> &gt; ::= 
<!-- MATH: $< LOOP-Statement > | < OP-Statement >$ -->
&lt; <I>LOOP</I>-<I>Statement</I> &gt; | &lt; <I>OP</I>-<I>Statement</I> &gt;
<LI>
<!-- MATH: $< LOOP-Statement >$ -->
&lt; <I>LOOP</I>-<I>Statement</I> &gt; ::= 
<!-- MATH: $< LOOP-Header > < Statementlist >$ -->
&lt; <I>LOOP</I>-<I>Header</I> &gt; &lt; <I>Statementlist</I> &gt; "<TT>END</TT>"
<LI>
<!-- MATH: $< LOOP-Header >$ -->
&lt; <I>LOOP</I>-<I>Header</I> &gt; ::= "<TT>LOOP</TT>" 
<!-- MATH: $< number > |$ -->
&lt; <I>number</I> &gt; | "<TT>LOOP n</TT>"
<LI>
<!-- MATH: $< OP-Statement >$ -->
&lt; <I>OP</I>-<I>Statement</I> &gt; ::= "<TT>OP</TT>" 
<!-- MATH: $< number >$ -->
&lt; <I>number</I> &gt;</UL>

<P>
The run-time of such a program can be computed as follows: the execution of an OP-statement
costs as many time-units as its parameter specifies. The statement list enclosed by a LOOP-statement
is executed as many times as the parameter of the statement indicates, i.e., the given constant number
of times, if a number is given, and <I>n</I> times, if <TT>n</TT> is given. The run-time of a statement list is the sum of
the times of its constituent parts. The total run-time therefore generally depends on <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file starts with a line containing the number <I>k</I> of programs in the input. Following this are
<I>k</I> programs which are constructed according to the grammar given above. Whitespace and newlines
can appear anywhere in a program, but not within the keywords <TT>BEGIN</TT>, <TT>END</TT>, <TT>LOOP</TT> and <TT>OP</TT> or in an
integer value. The nesting depth of the LOOP-operators will be at most 10.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each program in the input, first output the number of the program, as shown in the sample
output. Then output the run-time of the program in terms of <I>n</I>; this will be a polynomial of degree ÂŸ<IMG
 WIDTH="40" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/586img2.gif" 
 ALT="$\le 10$">.
Print the polynomial in the usual way, i.e., collect all terms, and print it in the form
``<code>Runtime = </code><I>a</I><code>*n^10+</code><I>b</I><code>*n^9+ . . . +</code><I>i</I><code>*n^2+</code> <I>j</I><code>*n+k</code>'', where terms with zero coefficients are left
out, and factors of 1 are not written. If the runtime is zero, just print ``<TT>Runtime = 0</TT>''.

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
BEGIN
LOOP n
OP 4
LOOP 3
LOOP n
OP 1
END
OP 2
END
OP 1
END
OP 17
END
BEGIN
OP 1997 LOOP n LOOP n OP 1 END END
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Program #1
Runtime = 3*n^2+11*n+17

Program #2
Runtime = n^2+1997
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
587||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>There's treasure everywhere!</TITLE>
<META NAME="description" CONTENT="There's treasure everywhere!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
There's treasure everywhere!</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Finding buried treasures is simple: all you need is a map! The pirates in the Caribbean were
famous for their enormous buried treasures and their elaborate maps. The maps usually read like
``Start at the lone palm tree. Take three steps towards the forest, then seventeen step towards the small
spring, . . . blahblah . . . , finally six steps toward the giant rock. Dig right here, and you will find my
treasure!'' Most of these directions just boil down to taking the mentioned number of steps in one of
the eight principal compass directions (depicted in the left of the figure).

<P>
Obviously, following the paths given by these maps may lead to an interesting tour of the local
scenery, but if one is in a hurry, there is usually a much faster way: just march directly from your
starting point to the place where the treasure is buried. Instead of taking three steps north, one step
east, one step north, three steps east, two steps south and one step west (see figure), following the
direct route (dashed line in figure) will result in a path of about 3.6 steps.

<P>
You are to write a program that computes the location of and distance to a buried treasure, given
a `traditional' map.

<P>
<DIV ALIGN="CENTER">
<img src=p587.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several strings, each one on a line by itself, and each one consisting of at most
200 characters. The last string will be <TT>END</TT>, signaling the end of the input. All other strings describe
one treasure map each, according to the following format:

<P>
The description is a comma-separated list of pairs of lengths (positive integers less than 1000) and
directions (<TT>N</TT> (north), <TT>NE</TT> (northeast), <TT>E</TT> (east), <TT>SE</TT> (southeast), <TT>S</TT> (south), <TT>SW</TT> (southwest), <TT>W</TT> (west)
or <TT>NW</TT> (northwest)). For example, <TT>3W</TT> means 3 steps to the west, and <TT>17NE</TT> means 17 steps to the
northeast. A full stop (<TT>.</TT>) terminates the description, which contains no blanks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For every map description in the input, first print the number of the map, as shown in the sample
output. Then print the absolute coordinates of the treasure, in the format ``<TT>The treasure is
located at </TT>(<I>x</I>,<I>y</I>).''. The coordinate system is oriented such that the <I>x</I>-axis points east, and the
<I>y</I>-axis points north. The path always starts at the origin (0,0).

<P>
On the next line print the distance to that position from the point (0,0), in the format ``<TT>The
distance to the treasure is </TT><I>d</I>.''. The fractional values <I>x</I>, <I>y</I>, <I>d</I> must be printed exact to three digits to the right of the decimal point.

<P>
Print a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3N,1E,1N,3E,2S,1W.
10NW.
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Map #1
The treasure is located at (3.000,2.000).
The distance to the treasure is 3.606.

Map #2
The treasure is located at (-7.071,7.071).
The distance to the treasure is 10.000.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
588||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Video Surveillance</TITLE>
<META NAME="description" CONTENT="Video Surveillance">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Video Surveillance</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A friend of yours has taken the job of security officer at the Star-Buy Company, a famous depart-
ment store. One of his tasks is to install a video surveillance system to guarantee the security of the
customers (and the security of the merchandise of course) on all of the store's countless floors. As the
company has only a limited budget, there will be only one camera on every floor. But these cameras
may turn around to look in every direction.

<P>

<P>
<BR>
The first problem is to choose where to install the camera for every floor. The only requirement
is that every part of the room must be visible from there. In the following figure the left floor can be
completely surveyed from the position indicated by a dot, while for the right floor, there is no such
position, the given position failing to see the lower left part of the floor.

<P>
<DIV ALIGN="CENTER">
<img src=p588.gif>
</DIV>

<P>
Before trying to install the cameras, your friend first wants to know whether there is indeed a
suitable position for them. He therefore asks you to write a program that, given a ground plan, de-
termines whether there is a position from which the whole floor is visible. All floor ground plans
form rectangular polygons, whose edges do not intersect each other and touch each other only at the
corners.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several floor descriptions. Every description starts with the number <I>n</I> of vertices
that bound the floor (
<!-- MATH: $4 \leÂŸ n \leÂŸ 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/588img1.gif" 
 ALT="$4 \leÂŸ n \leÂŸ 100$">). The next <I>n</I> lines contain two integers each, the <I>x</I> and <I>y</I> coordinates
for the <I>n</I> vertices, given in clockwise order. All vertices will be distinct and at corners of the polygon.
Thus the edges alternate between horizontal and vertical.

<P>
A zero value for <I>n</I> indicates the end of the input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For every test case first output a line with the number of the floor, as shown in the sample output.
Then print a line stating ``<TT>Surveillance is possible.</TT>'' if there exists a position from which
the entire floor can be observed, or print ``<TT>Surveillance is impossible.</TT>'' if there is no such position.

<P>
Print a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
0 0
0 1
1 1
1 0
8
0 0
0 2
1 2
1 1
2 1
2 2
3 2
3 0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Floor #1
Surveillance is possible.

Floor #2
Surveillance is impossible.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
589||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Pushing Boxes</TITLE>
<META NAME="description" CONTENT="Pushing Boxes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Pushing Boxes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Imagine you are standing inside a two-dimensional maze composed of square cells which may or
may not be filled with rock. You can move north, south, east or west one cell at a step. These moves
are called <EM>walks</EM>.

<P>
One of the empty cells contains a box which can be moved to an adjacent free cell by standing
next to the box and then moving in the direction of the box. Such a move is called a <EM>push</EM>. The box
cannot be moved in any other way than by pushing, which means that if you push it into a corner you
can never get it out of the corner again.

<P>
One of the empty cells is marked as the target cell. Your job is to bring the box to the target cell
by a sequence of walks and pushes. As the box is very heavy, you would like to minimize the number
of pushes. Can you write a program that will work out the best such sequence?

<P>
<DIV ALIGN="CENTER">
<img src=p589.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains the descriptions of several mazes. Each maze description starts with a line
containing two integers <I>r</I> and <I>c</I> (both <IMG
 WIDTH="40" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/589img1.gif" 
 ALT="$\leÂŸ 20$">)
representing the number of rows and columns of the
maze.

<P>
Following this are <I>r</I> lines each containing <I>c</I> characters. Each character describes one cell of the
maze. A cell full of rock is indicated by a `<TT>#</TT>' and an empty cell is represented by a `<TT>.</TT>'. Your starting
position is symbolized by `<TT>S</TT>', the starting position of the box by `<TT>B</TT>' and the target cell by `<TT>T</TT>'.

<P>
Input is terminated by two zeroes for <I>r</I> and <I>c</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each maze in the input, first print the number of the maze, as shown in the sample output. Then,
if it is impossible to bring the box to the target cell, print ``<TT>Impossible.</TT>''.

<P>
Otherwise, output a sequence that minimizes the number of pushes. If there is more than one such
sequence, choose the one that minimizes the number of total moves (walks and pushes). If there is
still more than one such sequence, any one is acceptable.

<P>
Print the sequence as a string of the characters <TT>N</TT>, <TT>S</TT>, <TT>E</TT>, <TT>W</TT>, <TT>n</TT>, <TT>s</TT>, <TT>e</TT> and <TT>w</TT> where uppercase letters
stand for pushes, lowercase letters stand for walks and the different letters stand for the directions north, south, east and west.

<P>
Output a single blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 7
SB....T
1 7
SB..#.T
7 11
###########
#T##......#
#.#.#..####
#....B....#
#.######..#
#.....S...#
###########
8 4
....
.##.
.#..
.#..
.#.B
.##S
....
###T
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Maze #1
EEEEE

Maze #2
Impossible.

Maze #3
eennwwWWWWeeeeeesswwwwwwwnNN

Maze #4
swwwnnnnnneeesssSSS
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
590||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Always on the run</TITLE>
<META NAME="description" CONTENT="Always on the run">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Always on the run</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Screeching tires. Searching lights. Wailing sirens. Police cars everywhere. Trisha Quickfinger
did it again! Stealing the `Mona Lisa' had been more difficult than planned, but being the world's best
art thief means expecting the unexpected. So here she is, the wrapped frame tucked firmly under her
arm, running to catch the northbound metro to Charles-de-Gaulle airport.

<P>
But even more important than actually stealing the painting is to shake off the police that will soon
be following her. Trisha's plan is simple: for several days she will be flying from one city to another,
making one flight per day. When she is reasonably sure that the police has lost her trail, she will fly
to Atlanta and meet her `customer' (known only as Mr. P.) to deliver the painting.

<P>
Her plan is complicated by the fact that nowadays, even when you are stealing expensive art, you
have to watch your spending budget. Trisha therefore wants to spend the least money possible on her
escape flights. This is not easy, since airlines prices and flight availability vary from day to day. The
price and availability of an airline connection depends on the two cities involved and the day of travel.
Every pair of cities has a `flight schedule' which repeats every few days. The length of the period may
be different for each pair of cities and for each direction.

<P>
Although Trisha is a good at stealing paintings, she easily gets confused when booking airline
flights. This is where you come in.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains the descriptions of several scenarios in which Trisha tries to escape. Every
description starts with a line containing two integers <I>n</I> and <I>k</I>. <I>n</I> is the number of cities through which
Trisha's escape may take her, and <I>k</I> is the number of flights she will take. The cities are numbered 
<!-- MATH: $1, 2, \dots, n$ -->
<IMG
 WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$1, 2, \dots, n$">,
where 1 is Paris, her starting point, and <I>n</I> is Atlanta, her final destination. The numbers will
satisfy 
<!-- MATH: $2 \leÂŸ n \leÂŸ 10$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$2 \leÂŸ n \leÂŸ 10$">
and 
<!-- MATH: $1 \leÂŸ k \leÂŸ 1000$ -->
<IMG
 WIDTH="104" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$1 \leÂŸ k \leÂŸ 1000$">.

<P>
Next you are given <I>n</I>(<I>n</I> - 1) flight schedules, one per line, describing the connection between
every possible pair of cities. The first <I>n</I> - 1 flight schedules correspond to the flights from city 1 to all
other cities (
<!-- MATH: $2, 3, \dots, n$ -->
<IMG
 WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$2, 3, \dots, n$">), the next <I>n</I> - 1 lines to those from city 2 to all others (
<!-- MATH: $1, 3, 4, \dots, n$ -->
<IMG
 WIDTH="95" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$1, 3, 4, \dots, n$">), and so on.

<P>
The description of the flight schedule itself starts with an integer <I>d</I>, the length of the period in
days, with 
<!-- MATH: $1 \leÂŸ d \leÂŸ 30$ -->
<IMG
 WIDTH="86" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$1 \leÂŸ d \leÂŸ 30$">.
Following this are <I>d</I> non-negative integers, representing the cost of the flight
between the two cities on days 
<!-- MATH: $1, 2, \dots, d$ -->
<IMG
 WIDTH="77" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/590img1.gif" 
 ALT="$1, 2, \dots, d$">.
A cost of 0 means that there is no flight between the two cities on that day.

<P>
So, for example, the flight schedule ``<TT>3 75 0 80</TT>'' means that on the first day the flight costs 75,
on the second day there is no flight, on the third day it costs 80, and then the cycle repeats: on the
fourth day the flight costs 75, there is no flight on the fifth day, etc.

<P>
The input is terminated by a scenario having <I>n</I> = <I>k</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario in the input, first output the number of the scenario, as shown in the sample output. If
it is possible for Trisha to travel <I>k</I> days, starting in city 1, each day flying to a different city than the day
before, and finally (after <I>k</I> days) arriving in city <I>n</I>, then print ``<TT>The best flight costs </TT><I>x</I>.'',
where <I>x</I> is the least amount that the <I>k</I> flights can cost.

<P>
If it is not possible to travel in such a way, print ``<TT>No flight possible.</TT>''.

<P>
Print a blank line after each scenario.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 6
2 130 150
3 75 0 80
7 120 110 0 100 110 120 0
4 60 70 60 50
3 0 135 140
2 70 80
2 3
2 0 70
1 80
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario #1
The best flight costs 460.

Scenario #2
No flight possible.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
591||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Box of Bricks</TITLE>
<META NAME="description" CONTENT="Box of Bricks">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Box of Bricks</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds
stacks of different height. ``Look, I've built a wall!'', he tells his older sister Alice. ``Nah, you should
make all stacks the same height. Then you would have a real wall.'', she retorts. After a little con-
sideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all
stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum
number of bricks moved. Can you help?

<P>
<DIV ALIGN="CENTER">
<img src=p591.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several data sets. Each set begins with a line containing the number <I>n</I> of stacks
Bob has built. The next line contains <I>n</I> numbers, the heights <I>h</I><SUB><I>i</I></SUB> of the <I>n</I> stacks. You may assume

<!-- MATH: $1 ÂŸ\le n \leÂŸ 50$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/591img1.gif" 
 ALT="$1 ÂŸ\le n \leÂŸ 50$">
and 
<!-- MATH: $1 \leÂŸ h_i ÂŸ\le 100$ -->
<IMG
 WIDTH="101" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/591img1.gif" 
 ALT="$1 \leÂŸ h_i ÂŸ\le 100$">.

<P>
The total number of bricks will be divisible by the number of stacks. Thus, it is always possible
to rearrange the bricks such that all stacks have the same height.

<P>
The input is terminated by a set starting with <I>n</I> = 0. This set should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each set, first print the number of the set, as shown in the sample output. Then print the line
``<TT>The minimum number of moves is </TT><I>k</I>.'', where <I>k</I> is the minimum number of bricks that
have to be moved in order to make all the stacks the same height.

<P>
Output a blank line after each set.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
6
5 2 4 1 7 5
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Set #1
The minimum number of moves is 5.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
592||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Island of Logic</TITLE>
<META NAME="description" CONTENT="Island of Logic">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Island of Logic</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Island of Logic has three kinds of inhabitants: divine beings that always tell the truth, evil
beings that always lie, and human beings that are truthful during the day and lie at night. Every
inhabitant recognizes the type of every other inhabitant.

<P>
A social scientist wants to visit the island. Because he is not able to distinguish the three kinds
of beings only from their looks, he asks you to provide a communication analyzer that deduces facts
from conversations among inhabitants. The interesting facts are whether it is day or night and what
kind of beings the speakers are.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several descriptions of conversations. Each description starts with an integer
<I>n</I>, the number of statements in the conversation. The following <I>n</I> lines each contain one statement by
an inhabitant. Every statement line begins with the speaker's name, one of the capital letters <TT>A</TT>, <TT>B</TT>, <TT>C</TT>,
<TT>D</TT>, <TT>E</TT>, followed by a colon `<TT>:</TT>'. Next is one of the following kinds of statements:

<P>
<UL>
<LI><code>I am [not] ( divine | human | evil | lying ).</code>
<LI><I>X</I><code> is [not] ( divine | human | evil | lying ).</code>
<LI><code>It is ( day | night ).</code>
</UL>

<P>
Square brackets <TT>[]</TT> mean that the word in the brackets may or may not appear, round brackets <TT>()</TT>
mean that exactly one of the alternatives separated by <code>|</code> must appear. <I>X</I> stands for some name from <TT>A</TT>, <TT>B</TT>, <TT>C</TT>,
<TT>D</TT>, <TT>E</TT>. There will be no two consecutive spaces in any statement line, and at most 50 statements
in a conversation.

<P>
The input is terminated by a test case starting with <I>n</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each conversation, first output the number of the conversation in the format shown in the sample
output. Then print ``<TT>This is impossible.</TT>'', if the conversation cannot happen according to the
rules or ``<TT>No facts are deducible.</TT>'', if no facts can be deduced. Otherwise print all the facts
that can be deduced. Deduced facts should be printed using the following formats:

<P>
<UL>
<LI><I>X</I><code> is ( divine | human | evil ).</code>
<LI><code>It is ( day | night ).</code>
</UL>

<P>
<I>X</I> is to be replaced by a capital letter speaker name. Facts about inhabitants must be given first (in
alphabetical order), then it may be stated whether it is day or night.

<P>
The output for each conversation must be followed by a single blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1
A: I am divine.
1
A: I am lying.
1
A: I am evil.
3
A: B is human.
B: A is evil.
A: B is evil.
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Conversation #1
No facts are deducible.

Conversation #2
This is impossible.

Conversation #3
A is human.
It is night.

Conversation #4
A is evil.
B is divine.
</PRE>

<P>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Reasoning made easy</A>&nbsp;</FONT>
</H2>
To make things clearer, we will show the reasoning behind the third input example, where A says
``<TT>I am evil.</TT>''. What can be deduced from this? Obviously A cannot be divine, since she would be lying, similarly A cannot be evil, since she would tell the truth. Therefore, A must be human, moreover, since she is lying, it must be night. So the correct output is as shown.

<P>
In the fourth input example, it is obvious that A is lying since her two statements are contradictory.
So, B can be neither human nor evil, and consequently must be divine. B always tells the truth, thus
A must be evil. VoilÂ‘a!

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
593||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>MBone</TITLE>
<META NAME="description" CONTENT="MBone">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
MBone</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
MBone is an abbreviation for `Multicast Backbone'. It is the realization of a virtual network built
on top of the Internet protocol. In contrast to connection-oriented transmission of data (unicast) and
the transmission from a sender to all destinations in a network (broadcast) it provides the multicast
facility, a facility to send data to all hosts that have joined a so-called `multicast group'. All members
of a group are able to send data to and receive data from the group.

<P>
Your program is to simulate a simplified version of the MBone. In our setting MBone is a combination of multicast <EM>routers</EM> and <EM>hosts</EM>, each host belonging to one of the routers. A router and the
hosts that belong to it are called an <EM>island</EM>. Routers are connected via <EM>tunnels</EM> which are simple communication channels: data packets sent from one side through the tunnel are received on the other side.

<P>
In order to become a member of a multicast group, a host must send a protocol message to its
corresponding multicast router specifying the address of the group it wants to join. As a consequence
the host will receive all data packets sent to this group.

<P>
In order to send a data packet to a multicast group, a host sends the packet to the multicast router
within its island. Every multicast router duplicates all received packets and sends them through each
of its outgoing tunnels. After that it sends copies of the packet to all hosts on its island that have joined
the group specified in the packet.

<P>
The distribution range of a packet within MBone is restricted through an integer value called <EM>TTL</EM>
(Time To Live) which is assigned to every packet. If a packet is sent through a tunnel its TTL is
decremented by the <EM>threshold</EM> (an integer value) specified for each tunnel. A packet will not be sent over a tunnel if the TTL of the packet is lower than the threshold of the tunnel.

<P>
<DIV ALIGN="CENTER">
<img src=p593.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input to your program will consist of several descriptions of MBone networks. The first part
of each description defines the network topology, and the second part describes the activities on this
network. The first part starts with a line containing a single integer <I>m</I> (
<!-- MATH: $1 \leÂŸ m \leÂŸ 10$ -->
<IMG
 WIDTH="92" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/593img1.gif" 
 ALT="$1 \leÂŸ m \leÂŸ 10$">), the number of
islands in the network. A value of <I>m</I> = 0 indicates the end of input. The following lines contain the
descriptions for the <I>m</I> islands.

<P>
Each island description starts with a line containing the name of the multicast router (given as a
string of at most 20 non-blank characters) followed by an integer for the number of remaining lines in
the island description. These lines can be of two kinds:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="LEFT">Host belonging to island:</TD>
<TD ALIGN="LEFT"><code>H &lt;Host Address&gt;</code></TD>
</TR>
<TR><TD ALIGN="LEFT">Tunnel:</TD>
<TD ALIGN="LEFT"><code>T &lt;Threshold&gt; &lt;Dest. Name&gt;</code></TD>
</TR>
</TABLE></DIV>
 

<!-- MATH: $< Host Address >$ -->
&lt; <I>Host Address</I> &gt; and 
<!-- MATH: $< Threshold >$ -->
&lt; <I>Threshold</I> &gt; are positive integer values specifying the address of the
host and the threshold of the tunnel, respectively. 
<!-- MATH: $< Dest: Name >$ -->
&lt; <I>Dest</I>: <I>Name</I> &gt; is the name of the destination
router at the other end of the tunnel, which is always different from the current router.

<P>
The first line of the second part contains a single integer of at most 1000 indicating the number of
lines in the following activity description. Each one of these lines describes the activity of a host: join
a group, leave a group or send a packet to a group.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="LEFT">Join a group:</TD>
<TD ALIGN="LEFT"><code>J &lt;Host Address&gt; &lt;Group Address&gt;</code></TD>
</TR>
<TR><TD ALIGN="LEFT">Leave a group:</TD>
<TD ALIGN="LEFT"><code>L &lt;Host Address&gt; &lt;Group Address&gt;</code></TD>
</TR>
<TR><TD ALIGN="LEFT">Send a packet to a group:</TD>
<TD ALIGN="LEFT"><code>S &lt;Host Address&gt; &lt;Group Address&gt; &lt;Packet ID&gt; &lt;TTL&gt;</code></TD>
</TR>
</TABLE></DIV>
The 
<!-- MATH: $< Group Address >$ -->
&lt; <I>Group Address</I> &gt;, 
<!-- MATH: $< Packet ID >$ -->
&lt; <I>Packet ID</I> &gt; and &lt; <I>TTL</I> &gt; are positive integer values with the obvious
meaning. All names used for the routers and all host addresses used in a scenario, as well as all packet
IDs are unique. TTLs of packets will be at most 1000. There will be at most 50 hosts and 100 tunnels
in the network and at most 20 active groups (i.e, groups for which there is at least one member host)
at any time. No host will try to leave a group that it is not in, nor try to join a group it is in.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
In the output you have to print the packets received by the hosts in the network for each scenario. If
hosts receive multiple copies of a packet (routed via different paths), they keep only the copy with the
highest TTL (reaching them via the `shortest' path).

<P>
For each network description, first output the number of the network, as shown in the sample out-
put. Each one of the subsequent lines is of the format <code>&lt;Host Address&gt; &lt;Packet ID&gt; &lt;TTL&gt;</code>,
meaning that host <code>&lt;Host Address&gt;</code> received the packet having the ID <code>&lt;Packet ID&gt;</code> with the
remaining TTL <code>&lt;TTL&gt;</code>. The three entries of the line should be separated by single blank characters.
The output must be sorted in ascending order: first by the host address and second by the packet ID.

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
Nuremberg 3
T 8 Munich
H 3768
H 3669
Munich 6
H 721
H 722
H 723
T 6 Nuremberg
H 857
T 9 Ulm
Ulm 5
H 51225
H 51226
H 51227
T 15 Nuremberg
T 9 Munich
14
J 51227 26
J 3768 27
J 723 26
J 3768 26
S 3768 26 1000 17
J 857 26
S 3768 26 320 16
J 722 26
L 857 26
S 51227 26 1001 37
S 723 26 533 5
L 51227 26
L 3768 27
L 723 26
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Network #1
722 533 5
722 1001 28
723 320 8
723 533 5
723 1000 9
723 1001 28
857 320 8
3768 320 16
3768 1000 17
3768 1001 22
51227 1000 0
51227 1001 37
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1998-03-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
594||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>One Little, Two Little, Three Little Endians</TITLE>
<META NAME="description" CONTENT="One Little, Two Little, Three Little Endians">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
One Little, Two Little, Three Little Endians</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Writing programs that are completely portable across different operating systems, operating system 
versions and hardware platforms is a challenging task.  One of the difficulties encountered is a result of 
decisions made by hardware manufacturers about how they will store integer data in memory.  Because 
these representations can differ from machine to machine, sharing binary data often cannot be done 
without modifying the way in which the data is stored or the way in which it is handled by one or more 
of the platforms.

<P>

<P>
<BR>
Fortunately there is near-universal agreement among hardware manufacturers that addressable memory 
be ordered into 8-bit bytes.  For integer data values that require more than 8-bits, such as the typical 2-
byte, 4-byte, and 8-byte integer types available on most modern hardware, there is no such agreement 
and two incompatible storage schemes exist.  The first stores integers as groups of consecutive 8-bit 
bytes with the least significant byte occupying the lowest memory location within the group and the 
most significant byte occupying the highest memory location.  The second is just the reverse; the least 
significant byte is stored in the highest memory location within the group, and the most significant byte 
is stored in the lowest memory location.  The computing industry has dubbed these schemes Little 
Endian and Big Endian, respectively.  There is also near-universal agreement that signed integers are 
stored using "two's complement" representation, and you may assume that this is the case.

<P>

<P>
<BR>
When binary integer data is shared between a Little Endian and Big Endian machine, a data conversion 
must be performed which involves reversing the bytes of the data.  Once the bytes have been reversed 
the integer is then correctly interpreted by the hardware as the original value from the opposite-endian 
machine.  The object of this problem is to write a program that will read a list of integers and report the 
integers that the binary representations of the input integers would represent on an opposite-endian 
machine.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of a list integers.  The end of the input file marks the end of the list.  All input 
integers can be represented as a 32-bit signed integer value.  That is, the input integers will be in the 
range -2147483648 to 2147483647.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input integer a single line should be printed to the output file.  The line should contain the 
input integer followed by the phrase ``<TT>converts to</TT>" followed by one space followed the other-endian  value.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123456789
-123456789
1
16777216
20034556
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
123456789 converts to 365779719
-123456789 converts to -349002504
1 converts to 16777216
16777216 converts to 1
20034556 converts to -55365375
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
595||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Major Problem</TITLE>
<META NAME="description" CONTENT="A Major Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
A Major Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In western music the twelve notes used in musical notation are identified with the capital letters A 
through G, possibly followed by a sharp `#' or flat `b' character, and are arranged as shown below.  A 
slash is used to identify alternate notations of the same note.

<P>
<PRE>
C/B#   C#/Db   D   D#/Eb   E/Fb   F/E#   F#/Gb   G   G#/Ab   A   A#/Bb   B/Cb
</PRE>

<P>
Any two adjacent notes in the above list are separated by a <EM>semitone</EM>.  Any two notes that have exactly 
one note separating them in the above list are separated by a <EM>tone</EM>.  A <EM>major scale</EM> is composed of eight 
notes; it begins on one of the above notes and follows the progression tone-tone-semitone-tone-tone-
tone-semitone from left to right in the list above, wrapping from B/Cb to C/B# when necessary.  For 
example, the major scales starting on C and Db, respectively, are made up of the following notes:

<P>
<PRE>
C   D   E  F   G   A   B  C
Db  Eb  F  Gb  Ab  Bb  C  Db
</PRE>

<P>
The following rules also apply to major scales:

<P>
<DL COMPACT>
<DT>1.
<DD>The scale will contain each letter from A to G once and only once, with the exception of first letter 
of the scale which repeated as the last letter of the scale.
<DT>2.
<DD>The scale may not contain a combination of both flat and sharp notes.
</DL>

<P>
The note which begins a major scale is referred to as the key of the scale.  For example, the scales above 
are the scales for the major keys of C and Db, respectively.  Transposing notes from one scale to 
another is a simple matter of replacing a note in one scale with the note in the corresponding position of 
another scale.  For example, the note F in the major key of C would transpose to the note Gb in the 
major key of Db since both notes occupy the same position (fourth) in their respective scales.

<P>

<P>
<BR>
The object of this problem is to write a program that will transpose notes from one major scale to 
another.  An input file will contain several lines, each of which contains a source key, target key, and list 
of one or more notes to be transposed.  An output file should be generated which indicates the 
transposed notes, as well as indicating major scales that are not valid and notes that are not valid in a 
given major scale.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line of the input, except for the last, will contain two musical keys followed by a list of notes to be 
transposed from the major scale of the first key to the major scale of the second key.  Each list is 
terminated by a single asterisk character.  The final line of the input contains only a single asterisk.  All 
notes on a line and the terminating asterisk are delimited by a single space

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input line which defines a transposition problem, several lines will be produced in the output 
file.  If the source and target keys are valid, then the first output line for each input line should read 
``<TT>Transposing from </TT><I>X</I> <TT>to </TT><I>Y</I><TT>:</TT>" where <I>X</I> is the source key and <I>Y</I> is the target key.  
<B>If either the source or 
target key is not valid</B>,  output one line which reads ``<TT>Key of </TT><I>X</I>(or <I>Y</I>) <TT>is not a valid major key</TT>", 
where <I>X</I>(or <I>Y</I>) is the key that is not valid.  If both the source and target key are not valid, report 
only the source key. The remainder of the input for that line is to be skipped.  

<P>
<BR>
For input lines which contain valid source and target keys, the first output line will be followed by one 
output line for each note to be transposed.  If the note is a valid note in the major scale of the source 
key then the output line should read ``<I>M</I><TT> transposes to </TT><I>N</I>" where <I>M</I> is the note in the source key and <I>N</I> 
is the corresponding note in the target key.  If the input note is not a valid note in the major scale of the 
source key then the output line should read ``<I>M</I><TT> is not a valid note in the </TT><I>X</I><TT> major scale</TT>" where <I>M</I> is the 
input note and <I>X</I> is the source key.  Observe that for either valid or non-valid notes the output line 
begins with precisely two spaces.

<P>

<P>
<BR>
Print a blank line between the output data for each input line.  All output formatting 
rules described above must be observed precisely. 
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
C Db F *
Db C Gb *
C B# A B *
C D A A# B Bb C *
A# Bb C *
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Transposing from C to Db:
  F transposes to Gb

Transposing from Db to C:
  Gb transposes to F

Key of B# is not a valid major key

Transposing from C to D:
  A transposes to B
  A# is not a valid note in the C major scale
  B transposes to C#
  Bb is not a valid note in the C major scale
  C transposes to D

Key of A# is not a valid major key
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
596||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Incredible Hull</TITLE>
<META NAME="description" CONTENT="The Incredible Hull">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Incredible Hull</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1-->

<P>
A <EM>simple polygon</EM> is a polygon that contains no self-intersecting lines.  A <EM>convex polygon</EM> is a simple 
polygon with all internal angles less than 180 degrees.  For a set of two-dimensional objects, their 
<EM>convex hull</EM> is the convex polygon of least area that completely encloses all of the objects.  In the figure 
below, the three solid-lined objects on the left are enclosed in a dotted-line convex polygon, but that 
polygon is not their convex hull; on the right the same three objects are enclosed by their convex hull.

<P>
<DIV ALIGN="CENTER">
<img src=p596.gif>
</DIV>

<P>
Determining the convex hull of a set of objects is a fundamental problem in both computer graphics and
computational geometry.  The object of this problem is to write a program that will report the convex 
hull of a set of simple polygons.  An input file will define several such sets of polygons for which convex 
hulls should be reported in the output file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line of the input file will begin with either the letter `<TT>S</TT>', the letter `<TT>P</TT>', or the word `<TT>END</TT>'.  Lines 
starting with `<TT>S</TT>' begin a new set of polygons.  Lines starting with `<TT>P</TT>' define a polygon in the current 
set.  The word `<TT>END</TT>' will appear only as the last line of the input file.

<P>

<P>
<BR>
Each `<TT>S</TT>' starting a line will be followed by a single space and then a character string which identifies the 
set of polygons.  Each `<TT>P</TT>' starting a line will be followed by a single space and then  a list of integers 
delimited by single spaces.  The first integer specifies the number of vertices in the polygon, and the 
remaining integers specify, in counterclockwise order, the (<I>x</I>,<I>y</I>) coordinates of each polygon vertex.

<P>

<P>
<BR>
Each set of polygons will contain from 1 to 20 simple polygons.  Each polygon will contain from 3 to 
20 distinct vertices.  Each vertex will be an integer coordinate in the range (-1000,-1000) to 
(1000,1000).  No input polygon will have more than two adjacent collinear points, that is a point will 
not occur on an edge between two other points.

<P>

<P>
<BR>
It may be assumed that all input will be syntactically correct.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Two lines should be output for each set of polygons.  The first line should start with the character string 
from the input file which identifies the polygon set, followed by the characters ``<TT> convex hull:</TT>".  
The second line should list the coordinates of the vertices in the convex hull, each vertex being preceded 
by a single space and in the format ``(<I>x</I>,<I>y</I>)", where <I>x</I> and <I>y</I> are the integer coordinates of the vertex.  
The output of the convex hull vertices should begin with the vertex with the largest <I>x</I>-coordinate, ties 
being resolved by the selecting the smaller <I>y</I>-coordinate.  The vertices of the convex hull should be 
output in counterclockwise order.

<P>

<P>
<BR>
Any vertex that is part of an input polygon that is also part of the convex hull should appear in the 
output.  That is to say points should not be eliminated from the convex hull to prevent more than two 
adjacent points on the hull from being collinear.  For example, supposing that (10,1), (10,7) and (10,12) 
are consecutive points on the convex hull, the point (10,7) should not be removed but rather reported as 
part of the convex hull.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
S Sample 1
P 5 8 0 8 8 0 8 5 6 2 3
P 3 6 13 2 18 2 13
P 4 15 6 15 14 10 14 10 6
S Sample 2
P 8 1 2 -3 5 1 8 -3 12 -7 8 -3 5 -7 2 -3 -2
S Sample 3
P 4 150 100 150 150 100 150 100 100
P 4 180 130 180 180 130 180 130 130
S Sample 4
P 4 20 5 10 10 0 5 10 0
P 4 20 20 10 25 0 20 10 15
P 4 20 35 10 40 0 35 10 30
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Sample 1 convex hull:
 (15,6) (15,14) (2,18) (0,8) (2,3) (8,0)
Sample 2 convex hull:
 (1,2) (1,8) (-3,12) (-7,8) (-7,2) (-3,-2)
Sample 3 convex hull:
 (180,130) (180,180) (130,180) (100,150) (100,100) (150,100)
Sample 4 convex hull:
 (20,5) (20,20) (20,35) (10,40) (0,35) (0,20) (0,5) (10,0)
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
597||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Last Name First, Please</TITLE>
<META NAME="description" CONTENT="Last Name First, Please">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Last Name First, Please</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An administrative assistant is presented with the problem or renaming a group of files containing photos 
of employees.  The files are currently named with the employee's first name first, i.e., the photo of John 
Smith is named John Smith.jpg.  The names must be changed so that the last name appears first, i.e., 
Smith John.jpg.

<P>

<P>
<BR>
The files are listed in a window in alphabetical order by file name, and are renamed by selecting them 
with a mouse or cursor keys, then typing the new name, followed by the enter key.  Immediately after a 
file is renamed, the ordering of the files is updated in the window, and the file just renamed remains selected.

<P>

<P>
<BR>
For example, the list may originally display (with the first name selected) as

<P>
<DIV ALIGN="CENTER">
<img src=p597a.gif>
</DIV>

<P>
After renaming the selected file, the appearance of the list changes to this:

<P>
<DIV ALIGN="CENTER">
<img src=p597b.gif>
</DIV>

<P>
To save keystrokes, the administrative assistant decides to choose a file adjacent to the selected one,
either Nancy Schnell.jpg or Ruth Sandweiss.jpg, to rename next, thus requiring only a single cursor 
keystroke to select the next file.  Note that after a few files are renamed, it may be the case that the 
selected file is adjacent only to already-renamed files, so that a single cursor keystroke is not sufficient 
to select another file to rename.  The cursor key does not cause the selected file to "wrap around" from 
last to first name or vice.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain a list of at most 20 file names, one per line, terminated with carriage returns.  
No file name will contain more than 32 characters.  The first and last names will all be strings of letters, 
with only the first capitalized.  You may assume that the ``last name" is that portion of the file name 
between the first space character and the period.  In addition, you may assume that no two last names will be identical

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
If the files can be renamed, starting with the first file in the list, in such an order that only a single cursor 
keystroke is used between renamings, your output should be the file names, last names first,  in the 
order they are renamed.  If there is no such renaming, your output should be the phrase <TT>NO QUICK RENAMING POSSIBLE</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Christina Peter.jpg
Ganesh Ramanarayanan.jpg
Laurie Yorr.jpg
Lucy Kraus.jpg
Melanie Ayala.jpg
Nancy Schnell.jpg
Ruth Sandweiss.jpg
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NO QUICK RENAMING POSSIBLE
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
598||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Bundling Newspapers</TITLE>
<META NAME="description" CONTENT="Bundling Newspapers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Bundling Newspapers</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A statistical research company needs a program to produce instructions for an existing application that 
creates questionnaires about newspapers.  The application requires instructions that are comma-
delimited lists of newspapers, each list consisting of a subset of the set of newspapers in some 
metropolitan area.  Your program will read a list of newspapers and produce this output in a particular 
order, and for subsets of some range of sizes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.<P>
Each dataset consists of a first line describing the sizes of subsets to be output, followed by the names of 
the newspapers, one per line.  Each line is terminated by an end-of-line marker.
The newspaper names will contain at most 30 characters each, and 
there will be a maximum of 12 newspaper names.

<P>

<P>
<BR>
The first line will contain either a single asterisk in column one, one positive integer, or two positive 
integers, the first less than the second.  Any integers in this line will be no greater than the number of 
newspapers to follow.  The meaning of these is as follows:

<P>
<PRE><TT>
* 		 means show all subset sizes from 1 to the number of newspapers in the list 
<IMG
 WIDTH="27" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/598img1.gif" 
 ALT="$a \ b$">
means show all subset sizes from <I>a</I> to <I>b</I>, inclusive 
<I>n</I> means show only subsets of size n
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>

The output for each dataset should consist of the comma-delimited subsets of papers, one subset per line, grouped by 
subset size, and with a header line above each subset size group indicating the size. Print a blank line after
each subset size group. Within a subset size 
group, the order of the lines of output should be listed in such a way that if the names of the first, 
second and third newspapers listed in the input file were <I>A</I>, <I>B</I>, <I>C</I>, etc., respectively, the output lines 
would be in lexicographic order (in the example above, <I>A</I>, <I>B</I>; <I>A</I>, <I>C</I>; <I>A</I>, <I>D</I>; <I>B</I>, <I>C</I>; ...).
<p>Print a blank line between datasets.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

2 3
Times
Herald-Tribune
Post
New Advocate
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Size 2
Times, Herald-Tribune
Times, Post
Times, New Advocate
Herald-Tribune, Post
Herald-Tribune, New Advocate
Post, New Advocate

Size 3
Times, Herald-Tribune, Post
Times, Herald-Tribune, New Advocate
Times, Post, New Advocate
Herald-Tribune, Post, New Advocate
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
599||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Forrest for the Trees</TITLE>
<META NAME="description" CONTENT="The Forrest for the Trees">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Forrest for the Trees</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A <EM>graph</EM> G is a set of point V(G), together with a set of edges E(G), where each element 
of E(G) is an unordered pair of distinct points of V(G).

<P>

<P>
<BR>

<B>Example 1:</B> Let G be a graph where V(G) = 
<!-- MATH: $\{a, b, c, d\}$ -->
<IMG
 WIDTH="78" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/599img1.gif" 
 ALT="$\{a, b, c, d\}$">
and 
	E(G) = 
<!-- MATH: $\{ (a, b), ( b, c ), ( c, d), ( d, b) \}$ -->
<IMG
 WIDTH="195" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/599img1.gif" 
 ALT="$\{ (a, b), ( b, c ), ( c, d), ( d, b) \}$">.
The figure gives a depiction of G.

<P>
<DIV ALIGN="CENTER">
<img src=p599a.gif>
</DIV>

<P>
Notice that G contains the ``cycle" , 
<!-- MATH: $\{ ( b, c ), ( c, d), ( d, b) \}$ -->
<IMG
 WIDTH="150" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/599img1.gif" 
 ALT="$\{ ( b, c ), ( c, d), ( d, b) \}$">.
A graph devoid of cycles is 
called a <EM>tree</EM>.  A <EM>path</EM> in a graph G is an alternating sequence of points and edges, 
(beginning and ending with a point) such that all the points of the path are distinct.  In the 
graph of example 1, 
<!-- MATH: $\{a, (a, b), b, (b, c),  c, ( c, d), d\}$ -->
<IMG
 WIDTH="214" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/5/599img1.gif" 
 ALT="$\{a, (a, b), b, (b, c), c, ( c, d), d\}$">
is a path.

<P>

<P>
<BR>

<B>Fact:</B>  Every two points of a tree are joined by a unique path.

<P>

<P>
<BR>
A graph is called <EM>connected</EM> if every pair of points are joined by a path.  The graph of 
example 1 is connected.  If a graph is not connected then it is made up of ``subgraphs" 
which are.  Each one of these subgraphs is called a <EM>connected component</EM> of the graph G.

<P>

<P>
<BR>
A graph for which each connected component is a tree is called a <EM>forest</EM>, see figure below.

<P>
<DIV ALIGN="CENTER">
<img src=p599b.gif>
</DIV>

<P>
One extreme case worth mentioning is the case when one of the component trees has one 
point but no edges joined to it. This tree likes like an isolated dot. We will call this an <EM>acorn</EM>.  We are ready to define the problem.

<P>

<P>
<BR>

<EM>Problem:</EM> Given a forest you are to write a program that counts the number of trees and acorns.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<P>
The first line of the input file contains the number of test cases your program has to process. Each test case is a forest description consisting of two parts:
<DL COMPACT>
<DT>1.
<DD>A list of edges of the tree (one per line, given as an unordered pair of capital letters 
delimited by a row of asterisks).
<DT>2.
<DD>A list of points of the tree (these will be given on one line with a maximum of 26 corresponding to the capital letters, <TT>A - Z</TT>).
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case your program should print the number of trees and the number of acorns, in a sentence, for example:

<P>

``<TT>There are </TT><I>x</I><TT> tree(s) and </TT><I>y</I><TT> acorn(s).</TT>", where <I>x</I> and <I>y</I> are the numbers of trees and acorns, respectively.

<P>

<P>
<BR>

<B>Example 2:</B>  Let G be a graph whose edges and points are given by the first test case in the sample input. A depiction of this graph is given in figure following.

<P>
<DIV ALIGN="CENTER">
<img src=p599c.gif>
</DIV>

<P>

<P>
<BR>

<B>Notes:</B>  A forest may have no trees and all acorns, all trees and no acorns, or anything 
inbetween, so keep your eyes open and don't miss the forest for the trees!

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
(A,B)
(B,C)
(B,D)
(D,E)
(E,F)
(B,G)
(G,H)
(G,I)
(J,K)
(K,L)
(K,M)
****
A,B,C,D,E,F,G,H,I,J,K,L,M,N
(A,B)
(A,C)
(C,F)
**
A,B,C,D,F
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
There are 2 tree(s) and 1 acorn(s).
There are 1 tree(s) and 1 acorn(s).
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-01-11</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
600||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Duckpin Tournament</TITLE>
<META NAME="description" CONTENT="A Duckpin Tournament">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
A Duckpin Tournament</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In a Duckpin Tournament, the winner is decided by the player with the highest 
number of tournament points earned by playing a number of <EM>matches</EM>. Points are
awarded for winning a match and scoring the highest game during the match.  A 
<EM>duckpin match</EM> consists of a series of three <EM>lines</EM>, or games. The match winner is
the player with the highest series score, i.e., three game total.  The high game 
winner is the player with the highest score for a single line during the match.

<P>

<P>
<BR>
A <EM>line of duckpins</EM> is divided into ten <EM>frames</EM>.  In each frame a player has
three tries to knock down ten duckpins with a ball. If the player knocks down
all ten pins on the first try, a strike is awarded and the frame is concluded
(see exception below).
If the player knocks down all ten pins in two tries, a spare is awarded and the 
frame is concluded (see exception below). If during any of the three tries
a foul is committed by the player crossing the foul line, the frame is concluded
and only the pins knocked down prior to that try are counted for the frame.

<P>
The points earned
in a frame equal the number of pins knocked down plus any bonus points earned 
for a spare or a strike. The bonus points earned for a spare or strike equal the
number of pins knocked down on the next try following a spare or on the next two 
tries following a strike.  A foul following a spare or strike earns zero bonus
points unless the foul occurs on the second try following a strike; then only
the bonus points earned on the first try are counted.

<P>
A spare or a strike
normally concludes the frame.  However, if a spare or a strike occurs in the
tenth frame, the frame is concluded by the player immediately taking the
appropriate number of tries to earn the bonus points. The score for each frame
equals the number of points awarded for the frame plus the score in the
previous frame.

<P>

<P>
<BR>
Write a program to produce a scoring summary for one or more duckpin matches 
of one to four players.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for each match consists of an integer indicating
the number of players, a list of players' names (each name is a max. length of 10 
alpha characters), followed by lines of integers representing the number of pins 
knocked down by each player on the first, second, or third try in each game in the 
match.  The match is concluded by `<TT>#</TT>'.  The input is concluded when the number
of players for a match is zero.

<P>
Since each match consists of three games and each player gets three tries per 
frame in each game, the total number of lines of integers in the match will be nine 
times the number of players.  The players play in the order that the names were 
listed.  The order of the lines is:

<P>
<DL COMPACT>
<DT>1.
<DD>three lines for the first player in the first game
followed by three lines for each of the other players for the first game,
<DT>2.
<DD>three lines for the first player in the second game followed by three
lines for each of the other players for the second game,
<DT>3.
<DD>similarly for the third game with the match concluded by `<TT>#</TT>'.
</DL>

<P>
The line of integers representing the first try will have at least
ten integers but no more than twelve.  Since a second or third try may not be 
attempted in a frame, the second and third lines may have less than ten integers.

<P>
A negative integer indicates the number of pins knocked down however the player
fouled on the try.  

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output shows a frame by frame score for each player for each game in the 
match.  Each line of output consists of the player's name, left justified in a field ten 
characters wide, and ten integers, right justified with a field four characters wide.  
At the end of the match report the match and high game winner followed by a 
blank line. 
<p>
No two players will get the same high score.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
Tim     Jim     Bob
5 7 8 5 10 10 10 8 9 10 10 10                   (scores for Tim's first game)
5 2 1 4          1 0
  0 1 1          1 1
10 10 9 8 9 9 10 9 9 9 8                        (scores for Jim's first game)
      1 1 1 0    1 1 1
        1   1
7 6 8 9 -10 8 9 8 10 10 8 1                     (scores for Bob's first game)
3 2 2 1     1 1 1
  2         1   1
0 8 8 8 9 7 6 -6 7 9                            (scores for the second game)
6 1 2 1 0 1 3    3 0
3 0   1 1 1 0      0
5 7 10 9 8 9 10  7 8 9 7
5 3    1 2 1    -3 2 1                          (blank line shows no 3rd
                                                 tries were used in this game)
9 8 9 8 9 7 10 9 9 9
1 1 1 2 1 2    0 1 0
  1       1    1   1
5 6 7 8 9 10 10 -10 10 10 10 10                 (scores for the third game)
4 2 3 1 1
0 2   1
8 7 6 10 9 9 10 7 8 6
2 2 3    1 0    3 1 3
  1 0      1      1 1
9 8 9 9 9 8 10 10 10 8
1 2 1 1 1 2          1
                     1
#
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Tim         17  26  36  46  76 104 123 133 143 173
Jim         29  49  67  77  96 106 126 145 164 182
Bob         16  26  45  55  55  65  83  93 121 140
Tim          9  18  36  46  56  65  74  74  93 102
Jim         17  37  57  75  94 114 131 138 157 174
Bob         18  28  46  65  82  92 111 121 140 150
Tim          9  19  37  47  67  87  97  97 127 157
Jim         17  27  36  56  75  85 105 123 133 143
Bob         18  37  56  75  93 113 143 171 190 200
Jim has the high series score of 499.
Bob has the high game score of 200.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
601||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The PATH</TITLE>
<META NAME="description" CONTENT="The PATH">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The PATH</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
``PATH" is  a game played by two players on an <I>N</I> by <I>N</I> board, where <I>N</I> is a
positive integer.  (If <I>N</I> = 8, the board looks like a chess board.)  Two players
``WHITE" and ``BLACK" compete in the game to build a path of pieces played on
the board from the player's ``home" edge to the player's ``target" edge, opposite
the home edge.  WHITE uses white pieces and BLACK uses black pieces.

<P>

<P>
<BR>
For this problem you will play the ``referee" for  the game, analyzing boards
containing black and white pieces to determine whether either of the players has 
won the game or if one of the players can win by placing one of their pieces in 
an unfilled position.  WHITE's turn is next.

<P>

<P>
<BR>
A representation of a board on paper (and in a computer) is an N x N matrix of 
characters 'W', 'B', and 'U'; where W represents white pieces, B represents 
black pieces, and 'U' represents unfilled positions on the board.

<P>

<P>
<BR>
When we view a matrix representation of the board on paper, WHITE's home 
edge is the left edge of the board (the first column), and WHITE's target edge is 
the right edge (the last column).  BLACK's home edge is the top edge of the 
board (the first row), and BLACK's target edge is the bottom edge (the last row).  
Thus WHITE wants to build a path from left to right, and BLACK wants to build a 
path from top to bottom.

<P>

<P>
<BR>
Two locations on the board are ``adjacent" if one is immediately to the left, to the
right, above, or below the other.  Thus an interior location on the board is 
adjacent to four other locations.  For <I>N</I> &gt; 1, corner locations each have two
adjacent locations, and for <I>N</I> &gt; 2, other border locations have three adjacent
locations.

<P>

<P>
<BR>
A path is a sequence of distinct positions on the board, 
<!-- MATH: $L_0, L_1, \dots, L_k$ -->
<IMG
 WIDTH="110" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$L_0, L_1, \dots, L_k$">,
such that each pair <I>L</I><SUB><I>i</I></SUB> and <I>L</I><SUB><I>i</I>+1</SUB> are adjacent for 
<!-- MATH: $i=0, \dots, k-1$ -->
<IMG
 WIDTH="121" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$i=0, \dots, k-1$">.
A winning path for a player is a
path 
<!-- MATH: $L_0, L_1, \dots, L_k$ -->
<IMG
 WIDTH="110" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$L_0, L_1, \dots, L_k$">
filled with the player's pieces such that <I>L</I><SUB>0</SUB> is
a position on the
player's home edge and <I>L</I><SUB><I>k</I></SUB> is a position on the player's target edge.  It is clear
that if one player has a winning path then the other player is blocked from having 
a winning path.  Thus if all the squares contain pieces, either there are no 
winning paths or exactly one of the players has at least one winning path.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input is a series of game board data sets.  Each set begins with a line containing 
an integer specifying the size <I>N</I>, 0&lt;<I>N</I>&lt;81 of the (
<!-- MATH: $N \times N$ -->
<IMG
 WIDTH="58" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$N \times N$">)
game board.  This is
followed by a blank line and then by <I>N</I> lines, one for each row of the game
board, from the top row to the bottom row.  Each line begins with character and 
consists of <I>N</I> adjacent characters from the set `<TT>B</TT>', `<TT>W</TT>', `<TT>U</TT>'.  A blank line
separates each non-zero data set from the following data set.  The input is 
terminated by a single line containing a board size of zero.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
As referee, for each game board in a series of game boards your program
should report one of the five types of answers below:

<P>
<TT>White has a winning path.</TT>

<br>
<TT>Black has a winning path.</TT>

<br>
<TT>White can win in one move.</TT>  <EM> (White can place a piece in an unfilled position)</EM>

<br>
<TT>Black can win in one move.</TT>  <EM> (White can't win in one move AND Black can if White does't move)</EM>

<br>
<TT>There is no winning path.</TT>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7

WBBUUUU
WWBUWWW
UWBBBWB
BWBBWWB
BWWBWBB
UBWWWBU
UWBBBWW

3

WBB
WWU
WBB

0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
White has a winning path.
White can win in one move.
</PRE>

<P>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>

<B>Discussion:</B>

<P>
For the 
<!-- MATH: $7 \times 7$ -->
<IMG
 WIDTH="43" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$7 \times 7$">
board, the shortest winning path for WHITE covers 15 locations.  For
the 
<!-- MATH: $3 \times 3$ -->
<IMG
 WIDTH="43" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/601img1.gif" 
 ALT="$3 \times 3$">
board, WHITE appears to have a path from top to bottom, but remember,
WHITE wants a path from left to right.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
602||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>What Day Is It?</TITLE>
<META NAME="description" CONTENT="What Day Is It?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
What Day Is It?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The calendar now in use evolved from the Romans.  Julius Caesar codified a 
calendar system that came to be known as the Julian calendar.  In this system, 
all months have 31 days, except for April, June, September, and November, 
which have 30 days, and February, which has 28 days in non-leap years, and 29 
days in leap years.  Also, in this system, leap years happened every four years.  
That is because the astronomers of ancient Rome computed the year to be 
365.25 days 
long, so that after every four years, one needed to add an extra day to keep the 
calendar on track with the seasons.  To do this, they added an extra day 
(February 29) to every year that was a multiple of four.  

<P>

<P>
<BR>

<DL>
<DT><STRONG>Julian Rule:</STRONG>
<DD>Every year that is a multiple of 4 is a leap year, i.e. has an extra day (February 29).  
</DL>

<P>

<P>
<BR>
In 1582, Pope Gregory's astronomers noticed that the year was not 365.25 days 
long, but closer to 365.2425.  Therefore, the leap year rule would be revised to the following:

<P>

<P>
<BR>

<DL>
<DT><STRONG>Gregorian Rule:</STRONG>
<DD>Every year that is a  multiple of 4 is a leap year, unless it is a multiple of 100 that is not a multiple of 400.  
</DL>

<P>

<P>
<BR>
To compensate for how the seasons had shifted against the calendar up until 
that time, the calendar was actually shifted 10 days: the day following October 4, 1582 was declared to be October 15.

<P>

<P>
<BR>
England and its empire (including the United States) didn't switch to the 
Gregorian calendar system until 1752, when the day following September 2 was 
declared to be September 14.  (The delay was caused by the poor relationship 
between Henry VIII and the Pope.)

<P>

<P>
<BR>
Write a program that converts dates in the United States using a calendar of the 
time and outputs weekdays.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will be a series of positive integers
greater than zero, three integers per line, which represent dates, one date per 
line.  The format for a date is ``month day year" where month is a number
between 1 (which indicates January) and 12 (which indicates December), day is 
a number between 1 and 31, and year is positive number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output will be the
input date and name of the weekday on which the given date falls in the format 
shown in the sample.  An invalid date or nonexistent date for the calendar used 
in the United States at the time should generate an error message indicating a 
invalid date. The input will end with three zeroes. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11 15 1997
1 1 2000
7 4 1998
2 11 1732
9 2 1752
9 14 1752
4 33 1997
0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
November 15, 1997 is a Saturday
January 1, 2000 is a Saturday
July 4, 1998 is a Saturday
February 11, 1732 is a Friday
September 2, 1752 is a Wednesday 
September 14, 1752 is a Thursday
4/33/1997 is an invalid date.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
603||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Parking Lot</TITLE>
<META NAME="description" CONTENT="Parking Lot">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Parking Lot</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
At a certain college, a small parking lot is arranged in a rectangular shape, with 
20 spaces numbered 1, 2, 3..... 19, 20.  Traffic flow is one way in a counter-
clockwise direction.  The lot looks something like this:

<P>
<PRE>
         _______________________________
        |                                                      |
        |  20   19   18   17   16   15   14   13   12   11     |
Exit  &lt;&lt;&lt;&lt;      &lt;    &lt;    &lt;    &lt;    &lt;    &lt;    &lt;    &lt;    &lt;      |
        |  v                                            ^      |
Entrance  &gt;&gt;&gt;&gt;  &gt;    &gt;    &gt;    &gt;    &gt;    &gt;    &gt;    &gt;    &gt;      |
        |  1    2    3    4    5    6    7    8    9    10     |
        |_______________________________|
</PRE>

<P>
Note that the first position encountered upon entering is 1 and the last is 20.  
Cars may exit or continue to drive in a counter-clockwise direction.  The 
following assumptions apply to this problem:

<P>
<UL>
<LI>At the start, class is in session and the lot is full (all 20 spaces are occupied by
parked cars).

<P>
<LI>In addition to the (20) cars already parked in the lot, K autos are in the lot
waiting for positions to become available.  (
<!-- MATH: $1 \le K \le 20$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/603img1.gif" 
 ALT="$1 \le K \le 20$">)

<P>
<LI>Each waiting auto is positioned behind one of the occupied spaces.  When
a position empties, the space is filled either by the car waiting at that position or, 
if no car is waiting at that position, by the closest car, bearing in mind that the 
traffic flow is one way.  (There is sufficient room at each position for the car 
parked in that position to leave and the car waiting at that position to then park.)  

<P>
<LI>When an auto advances <I>N</I> positions to a free spot, all other cars advance
<I>N</I> positions.  Since the lot is circular, advancing 4 positions from position 18
means advancing to position 2.

<P>
<LI>None of the waiting cars exits.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Write a program that reads data from standard input. Input consist of a line indicating the number of datasets, a blank line, and the datasets separated by a blank line.  Each dataset is
in two parts.  The first part consists of integers, one per line beginning in column 
1, representing initial positions of waiting autos.  An integer 99 signals the end of 
this part of the data.  The second part consists of integers, in the same format, 
representing positions vacated.  

<P>
Positions are vacated in the order in which their numbers appear in the second
part of the data.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output of each dataset should consist a series of lines giving, for each initial 
(waiting) car position, the initial position and the final position of that car based 
on the description and assumptions stated above.  The output lines must appear 
in the same order as the order of the initial positions given in the input.
Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

6
19
17
13
1
99
1
3
20
16
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Original position 6 parked in 16
Original position 19 parked in 3
Original position 17 did not park
Original position 13 parked in 20
Original position 1 parked in 1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
604||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Boggle Game</TITLE>
<META NAME="description" CONTENT="The Boggle Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Boggle Game</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The language PigEwu has a very simple syntax. Each word in this language has exactly 4 letters. Also each word contains exactly two vowels (y is consider a vowel in PigEwu). For 
instance, "maar" and "even" are legitimate words, "arts" is not a legal word. 

<P>
In the game boggle, you are given a 4x4 array of letters and asked to find all words contained in it. A word 
in our case (PigEwu) will thus be a sequence of 4 distinct squares (letters) that form a legal word and such 
that each square touches (have a corner or edge in common) the next square.

<P>
For example: 

<P>
<PRE>
      A  S  S  D 
      S  B  E  Y
      G  F  O  I
      H  U  U  K
</PRE>

<P>
In this board a (partial) list of legal words include:

<P>
<PRE>
ASGU    SABO    FOIK    FOYD    SYDE    HUFO
</PRE>

<P>
BEBO is a legal word but it is not on this boggle board (there are no two B's here).

<P>
Write a program that reads a pair of Boggle boards and lists all PigEwu words that are common to both 
boards.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will include a few data sets. Each data set will be a pair of boards
as shown in the sample input.  All entries will be upper case letters. Two  consecutive entries on same board  
will be separated by one blank. The first row in the first board will be on the same line as the first row of the 
second board.  They will be separated by four spaces, the same will hold for the remaining 3 rows.  Board 
pairs will be separated by a blank line.  The file will be terminated by `<TT>#</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each pair of boggle boards, output an alphabetically-sorted list of all common words, each word on a separate line; or the 
statement "<tt>There are no common words for this pair of boggle boards.</tt>"
<br><br>
Separate the output for each pair of 
boggle boards with a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
D F F B    W A S U
T U G I    B R E T
O K J M    Y A P Q
K M B E    L O Y R

Z W A V    G S F U
U N C O    A H F T
Y T G I    G N A L
H G P M    B O O B

#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
There are no common words for this pair of boggle boards.

ANGO
AOGN
GNAO
GOAN
NAOG
NGOA
OANG
OGNA
</PRE>
<P>
<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
605||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Rotating Disk</TITLE>
<META NAME="description" CONTENT="The Rotating Disk">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Rotating Disk</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A neat puzzle consists of a circular track with <I>n</I> marbles numbered <IMG
 WIDTH="63" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/605img1.gif" 
 ALT="$1,\dots,n$">.
The marbles are arranged in a random order, and they can be moved around the
track without altering their relative order. In one section of the track there is a 
rotating disk. The disk contains 4 marbles. The disk can be rotated by 180 
degrees so that the inner order of the 4 marbles is reversed. Your mission, 
should you choose to accept it, is to write a program that will read the content of 
a puzzle and use the rotating disk to rearrange the marbles in natural order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The following example will demonstrate a description of a puzzle and display of
moves. The size of the track will vary from one data set to another. 

<P>
Each data set will be a permutation of the integers <IMG
 WIDTH="63" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/605img1.gif" 
 ALT="$1,\dots,n$">
on a single line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
In your output echo the initial track, followed by the rotations.
Mark the four rotated disks by placing * as the boundary as shown below. You must not
 display moves around the whole track. 
In case there are no
possiblity to put the disks in natural order, simply write the initial track
and the statement: "<tt>It is not possible to rearrange these disks in natural
order.</tt>"
<br><br>
The outputs of two consecutive cases will be separated by a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 1 2 3 7 10 4 6 5 9
1 2 3 5 4
6 5 4 3 1 2
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output:</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 1 2 3 7 10 4 6 5 9
8 1 2 3 7 10 *9 5 6 4*
4 8 1 2 3 7 *6 5 9 10*
4 *3 2 1 8* 7 6 5 9 10
4 3 2 1 *5 6 7 8* 9 10
*1 2 3 4* 5 6 7 8 9 10

1 2 3 5 4
It is not possible to rearrange these disks in natural order.

6 5 4 3 1 2
*3 4 5 6* 1 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
606||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Keeps Going and Going and ...</TITLE>
<META NAME="description" CONTENT="Keeps Going and Going and ...">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Keeps Going and Going and ...</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Lazy functional languages like Haskell and Miranda support features that are
not found in other
programming languages, including infinite lists. Consider the following
simple (and useful) recursive declaration:

<P>
<PRE>
letrec
  count n = cons n (count (n+1))
in
  count 0
</PRE>

<P>
The function <TT>cons</TT> <EM>cons</EM>tructs lists, so the above declaration creates the following structure:

<P>
<PRE>
cons 0 (count 1)
= cons 0 (cons 1 (count 2))
= cons 0 (cons 1 (cons 2 ...))
= [0,1,2,...]
</PRE>

<P>
Lazy languages can do this because they only evaluate expressions that are
actually used. If a
program creates an infinite list and only looks at items 2 and 3 in it,
the values in positions 0
and 1 are never evaluated and the list structure is only evaluated so far
as the fourth node.

<P>

<P>
<BR>
It is also possible to use more than one function to build an infinite list.
Here is a declaration
that creates the list <TT>["even","odd","even",...]</TT>:

<P>
<PRE>
letrec
  even = cons "even" odd
  odd = cons "odd" even
in
  even
</PRE>

<P>
There are also functions that manipulate infinite lists. The functions <TT>take</TT> and <TT>drop</TT> can be
used to remove elements from the start of the list, returning the (removed) front elements or
the remainder of the list, respectively. Another useful function is <TT>zip</TT>, which combines two lists
like the slider on a zipper combines the teeth. For example,

<P>
<PRE>
zip (count 0) (count 10) = [0,10,1,11,2,12,...]
</PRE>

<P>
Your task is to implement a subset of this functionality.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank lsne followed by
N datasets. There is a blank line between datasets.
<p>
The first line of each dataset consists of two positive integers, <I>n</I> and <I>m</I>. <I>n</I> is
the number of declarations to follow and <I>m</I> is the number of test cases.

<P>

<P>
<BR>
Each declaration takes the form <EM>name = expr</EM>. There are two forms for <EM>expr</EM> : <TT>zip</TT> <EM>name1 name2</EM>
and 
<!-- MATH: $x_0\ x_1 \dots x_i\ name3$ -->
<IMG
 WIDTH="145" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/606img1.gif" 
 ALT="$x_0\ x_1 \dots x_i\ name3$">.
In the first case, <EM>name</EM> is the result of zipping <EM>name1</EM> and <EM>name2</EM>
together. The other case defines the first <I>i</I> + 1 non-negative integers in the
list <EM>name</EM> (where <I>i</I> is at least 0) and <EM>name3</EM> is the name of the list that continues it (mandatory--all lists will be infinite).

<P>

<P>
<BR>
The test cases take the form 
<!-- MATH: $name\ s\ e$ -->
<IMG
 WIDTH="76" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/606img1.gif" 
 ALT="$name\ s\ e$">,
where <I>s</I> and <I>e</I> are non-negative
integers, <IMG
 WIDTH="44" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/606img1.gif" 
 ALT="$s \le e$">
and 
<!-- MATH: $e - s < 250$ -->
<I>e</I> - <I>s</I> &lt; 250.

<P>

<P>
<BR>
No line of input will be longer than 80 characters. Names consist of a single
capital letter.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the integers in positions <I>s</I> to <I>e</I> of the list <EM>name</EM>.
List elements are numbered starting with 0. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

5 3
S = 4 3 2 1 A
O = 1 O
E = 0 E
A = zip E O
Z = zip Z S
A 43455436 43455438
S 2 5
Z 1 10
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
0 1 0
2 1 0 1
4 4 3 4 2 3 1 4 0 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
607||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Scheduling Lectures</TITLE>
<META NAME="description" CONTENT="Scheduling Lectures">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Scheduling Lectures</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are teaching a course and must cover <I>n</I> (
<!-- MATH: $1 \le n \le 1000$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$1 \le n \le 1000$">)
topics. The
length of each lecture
is <I>L</I> (
<!-- MATH: $1 \le L \le 500$ -->
<IMG
 WIDTH="98" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$1 \le L \le 500$">)
minutes. The topics require 
<!-- MATH: $t_1, t_2, \dots, t_n$ -->
<IMG
 WIDTH="94" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$t_1, t_2, \dots, t_n$">
(
<!-- MATH: $1 \le t_i \le L$ -->
<IMG
 WIDTH="83" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$1 \le t_i \le L$">)
minutes each. For
each topic, you must decide in which lecture it should be covered. There are two scheduling
restrictions:

<P>
<DL COMPACT>
<DT>1.
<DD>Each topic must be covered in a single lecture. It cannot be divided
into two lectures. This reduces discontinuity between lectures.
<DT>2.
<DD>Topic <I>i</I> must be covered before topic <I>i</I> + 1 for all 
<!-- MATH: $1 \le i < n$ -->
<IMG
 WIDTH="76" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$1 \le i < n$">.
Otherwise, students may not have the prerequisites to understand topic <I>i</I> + 1.
</DL>

<P>
With the above restrictions, it is sometimes necessary to have free time at
the end of a lecture.
If the amount of free time is at most 10 minutes, the students will be happy
to leave early.
However, if the amount of free time is more, they would feel that their
tuition fees are wasted.
Therefore, we will model the dissatisfaction index (DI) of a lecture by the
formula:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
DI = \cases{0 & if $t=0$, \cr
-C & if $1 \le t \le 10$, \cr
(t-10)^2 & otherwise}
\end{displaymath} -->


<IMG
 WIDTH="247" HEIGHT="66"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="\begin{displaymath}DI = \cases{0 & if $t=0$, \cr
-C & if $1 \le t \le 10$, \cr
(t-10)^2 & otherwise}
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
where <I>C</I> is a positive integer, and <I>t</I> is the amount of free time at the end
of a lecture. The total dissatisfaction index is the sum of the DI for each
lecture.

<P>

<P>
<BR>
For this problem, you must find the minimum number of lectures that is
needed to satisfy the
above constraints. If there are multiple lecture schedules with the minimum
number of lectures,
also minimize the total dissatisfaction index.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a number of cases. The first line of each case contains
the integer <I>n</I>, or 0
if there are no more cases. The next line contains the integers <I>L</I> and <I>C</I>.
These are followed by <I>n</I> integers 
<!-- MATH: $t_1, t_2, \dots, t_n$ -->
<IMG
 WIDTH="94" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/607img1.gif" 
 ALT="$t_1, t_2, \dots, t_n$">.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print the case number, the minimum number of lectures used,
and the total
dissatisfaction index for the corresponding lecture schedule on three
separate lines. Output a blank line between cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
30 15
10
10
10
10
10
10
10
120 10
80
80
10
50
30
20
40
30
120
100
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1:
Minimum number of lectures: 2
Total dissatisfaction index: 0

Case 2:
Minimum number of lectures: 6
Total dissatisfaction index: 2700
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-04-06</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
608||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Counterfeit Dollar</TITLE>
<META NAME="description" CONTENT="Counterfeit Dollar">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Counterfeit Dollar</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the
coins are true silver
dollars; one coin is counterfeit even though its color and size make it
indistinguishable from the
real silver dollars. The counterfeit coin has a different weight from the
other coins but Sally does not know if it is heavier or lighter than the
real coins.

<P>

<P>
<BR>
Happily, Sally has a friend who loans her a very accurate balance scale.
The friend will permit
Sally three weighings to find the counterfeit coin. For instance, if
Sally weighs two coins against
each other and the scales balance then she knows these two coins are true.
Now if Sally weighs
one of the true coins against a third coin and the scales do not balance then
Sally knows the
third coin is counterfeit and she can tell whether it is light or heavy
depending on whether the
balance on which it is placed goes up or down, respectively.

<P>

<P>
<BR>
By choosing her weighings carefully, Sally is able to ensure that she will
find the counterfeit coin with exactly three weighings.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of input is an integer <I>n</I> (<I>n</I> &gt; 0) specifying the number
of cases to follow. Each case
consists of three lines of input, one for each weighing. Sally has
identified each of the coins with
the letters <TT>A-L</TT>. Information on a weighing will be given by two
strings of letters and then one
of the words ``<TT>up</TT>'', ``<TT>down</TT>'', or ``<TT>even</TT>''. The first string of
letters will represent the coins on the
left balance; the second string, the coins on the right balance.
(Sally will always place the same
number of coins on the right balance as on the left balance.) The word
in the third position will
tell whether the right side of the balance goes up, down, or remains even.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, the output will identify the counterfeit coin by its letter and tell whether it is
heavy or light. The solution will always be uniquely determined.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
ABCD EFGH even
ABCI EFJK up
ABIJ EFGH even
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
K is the counterfeit coin and it is light.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
609||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Metal Cutting</TITLE>
<META NAME="description" CONTENT="Metal Cutting">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Metal Cutting</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In order to build a ship to travel to Eindhoven, The Netherlands, various
sheet metal parts have
to be cut from rectangular pieces of sheet metal. Each part is a convex
polygon with at most
8 vertices. Each rectangular piece of sheet metal has width <I>n</I> and
height <I>m</I>, so that the four
corners of the sheet can be specified by the Cartesian coordinates
(0, 0), (0, <I>m</I>), (<I>n</I>, <I>m</I>) and (<I>n</I>, 0)
in clockwise order. The cutting machine available can make only
straight-line cuts completely
through the metal. That is, it cannot cut halfway through the sheet,
turn, and then cut some
more. You are asked to write a program to determine the minimum
total length of cuts this machine has to make in order to cut out the polygon.
The cuts must be along the edges of the poligon.
<P>

<P>
<BR>
For example, if 
<!-- MATH: $n = m = 100$ -->
<I>n</I> = <I>m</I> = 100, and the polygon has vertices
(80, 80), (70, 30), (20, 20) and (20, 80),
the following diagram shows the optimal cut (the thick lines).
The numbers show the order in which the cuts are made.

<P>
<DIV ALIGN="CENTER">

<img src=p609.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank line followed by
N datasets. There is a blank line between datasets.

<p>The first line of each dataset contains the two integers <I>n</I> and <I>m</I> where

<!-- MATH: $0 < n, m \le 500$ -->
<IMG
 WIDTH="119" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/609img1.gif" 
 ALT="$0 < n, m \le 500$">.
The next line
contains <I>p</I>, the number of vertices in the polygon, where 
<!-- MATH: $3 \le p \le 8$ -->
<IMG
 WIDTH="77" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/609img1.gif" 
 ALT="$3 \le p \le 8$">.
Each of the next <I>p</I> lines
contains two integers <I>x</I> and <I>y</I> where 0 &lt; <I>x</I> &lt; <I>n</I> and 0 &lt; <I>y</I> &lt; <I>m</I>, specifying
the vertices of the
polygon. The vertices are listed in clockwise order. You may assume
that the polygon does not
intersect itself, and that no three consecutive vertices are colinear.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, print the minimum total length of cuts required to cut out the given
polygon, accurate to 3 decimal places. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

100 100
4
80 80
70 30
20 20
20 80
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Minimum total length = 312.575
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
610||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Street Directions</TITLE>
<META NAME="description" CONTENT="Street Directions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Street Directions</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
According to the Automobile Collision Monitor (ACM), most fatal traffic
accidents occur on
two-way streets. In order to reduce the number of fatalities caused by
traffic accidents, the
mayor wants to convert as many streets as possible into one-way streets.
You have been hired
to perform this conversion, so that from each intersection, it is
possible for a motorist to drive
to all the other intersections following some route.

<P>

<P>
<BR>
You will be given a list of streets (all two-way) of the city.
Each street connects two intersections,
and does not go through an intersection. At most four streets
meet at each intersection, and
there is at most one street connecting any pair of intersections.
It is possible for an intersection
to be the end point of only one street. You may assume that it
is possible for a motorist to drive
from each destination to any other destination when every street is
a two-way street.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a number of cases. The first line of each case
contains two integers <I>n</I> and
<I>m</I>. The number of intersections is <I>n</I> (
<!-- MATH: $2 \leÂŸ n \leÂŸ 1000$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$2 \leÂŸ n \leÂŸ 1000$">), and the
number of streets is <I>m</I>. The
next <I>m</I> lines contain the intersections incident to each of the <I>m</I>
streets. The intersections are
numbered from 1 to <I>n</I>, and each street is listed once. If the
pair <IMG
 WIDTH="25" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$i\ j$">
is present, <IMG
 WIDTH="25" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$j\ i$">
will not be
present. End of input is indicated by <I>n</I> = <I>m</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print the case number (starting from 1) followed
by a blank line. Next, print
on separate lines each street as the pair <IMG
 WIDTH="25" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$i\ j$">
to indicate that
the street has been assigned the
direction going from intersection <I>i</I> to intersection <I>j</I>. For a
street that cannot be converted into
a one-way street, print both <IMG
 WIDTH="25" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$i\ j$">
and <IMG
 WIDTH="25" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/610img1.gif" 
 ALT="$j\ i$">
on two different lines.
The list of streets can be printed
in any order. Terminate each case with a line containing a
single `<TT>#</TT>' character.

<P>

<P>
<BR>

<B>Note:</B> There may be many possible direction assignments satisfying
the requirements. Any such assignment is acceptable.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7 10
1 2
1 3
2 4
3 4
4 5
4 6
5 7
6 7
2 5
3 6
7 9
1 2
1 3
1 4
2 4
3 4
4 5
5 6
5 7
7 6
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1

1 2
2 4
3 1
3 6
4 3
5 2
5 4
6 4
6 7
7 5
#
2

1 2
2 4
3 1
4 1
4 3
4 5
5 4
5 6
6 7
7 5
#
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
611||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Parallel Deadlock</TITLE>
<META NAME="description" CONTENT="Parallel Deadlock">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Parallel Deadlock</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A common problem in parallel computing is establishing proper communication
patterns so that
processors do not deadlock while either waiting to receive messages
from other processors, or
waiting for the sending of messages to other processors to complete.
That is, one processor will
not complete sending a message until it is received by the
destination processor. Likewise, a
receive cannot complete until a message is actually sent.

<P>

<P>
<BR>
There are two modes of communication: blocking and non-blocking.
A blocking send will not
complete until a matching receive is performed at the destination
processor. Likewise, a blocking
receive will not complete until the matching send is performed by
the source processor. Non-
blocking actions will ``return'' immediately (i.e., allow the
program to continue), but will not
actually complete until the matching action is performed at
the target. The matching action
of a send is a receive (either blocking or non-blocking),
and similarly, the matching action of a
receive is a send (either blocking or non-blocking).

<P>

<P>
<BR>
At the start of each timestep, each processor that is not blocked
starts to run its next instruction.
Processors that execute blocking instructions become blocked.
Messages can be received at the
end of the timestep in which they are sent, but may need to wait
several timesteps until the
recipient performs a matching receive. If the recipient of a
message is waiting to receive from
the sender, then the message is received in the same timestep.
Messages are received in the
order that they are sent. If all of the actions for a particular
blocking instruction complete at
the end of the timestep, then the processor that ran the
instruction will be unblocked before the next timestep.

<P>

<P>
<BR>
A correct program will terminate only when all of its actions
have completed. Pending non-blocking operations must be completed
before a program can terminate.

<P>

<P>
<BR>
Your program will take in a list of processors and actions (no
more than 100 for each processor),
and determine if each processor finishes its program. If a given
processor does not finish, it must
print out which other processors are preventing it from finishing.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank line followed by
N datasets. There is a blank line between datasets.
<p>
The first line of each dataset will be a single positive integer that tells how
many processors will be listed.
For each processor there will be one line containing the name of
the processor (a single capital
letter) followed by a positive integer, <I>N</I> . The following <I>N</I> lines
will contain the instructions that
comprise the program for that processor.

<P>

<P>
<BR>
An instruction is of the form ``<EM>Mode Action Target(s)</EM>'' where ``<EM>Mode</EM>'' can
be ``<TT>B</TT>'' or ``<TT>N</TT>'',
for blocking or non-blocking, respectively. ``<EM>Action</EM>'' can be ``<TT>S</TT>''
or ``<TT>R</TT>'', for send or receive,
respectively. ``<EM>Target(s)</EM>'' will be one or more processor names to
which the action is to be
addressed. No processor will be listed twice and a processor
will never attempt any sort of
communication with itself . A send to multiple targets will not
complete until matching receives
have been performed by all of the targets (and vice versa).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Given that instruction 1 occurs at <I>t</I> = 1, your program will output
for each dataset at which timestep each
processor finishes. If a processor does not finish, you must output
which processor are preventing
that processor from finishing. Processors should be listed in
alphabetical order, both for the
list of processors and the sets of processors that prevent a
processor from finishing. The list
of processors preventing termination should list processors at
most once and separate multiple processors with ``<TT>and</TT>''.
<p>Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4
I 5
B S B P C
N S B P C
N R B
B R P
B R C
B 2
B R I
B S I
P 3
N S I
N R I
B R I
C 4
N S I
B R I
B S P
B R I
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
B finishes at t=4
C never finishes because of P
I never finishes because of B and C
P finishes at t=5
</PRE>

<P>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>

<B>Notice</B> how C's final blocking receive would be matched by a send
on I if both instructions were
executed. However, it never gets executed because it is stuck
in the blocking send to P (that
has no matching receive on P), therefore causing deadlock on I.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
612||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>DNA Sorting</TITLE>
<META NAME="description" CONTENT="DNA Sorting">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
DNA Sorting</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One measure of ``unsortedness'' in a sequence is the number of
pairs of entries that are out of
order with respect to each other. For instance, in the letter
sequence ``<TT>DAABEC</TT>'', this measure
is 5, since <TT>D</TT> is greater than four letters to its right and <TT>E</TT>
is greater than one letter to its right.
This measure is called the number of inversions in the sequence.
The sequence ``<TT>AACEDGG</TT>'' has
only one inversion (<TT>E</TT> and <TT>D</TT>)--it is nearly sorted--while the
sequence ``<TT>ZWQM</TT>'' has 6 inversions
(it is as unsorted as can be--exactly the reverse of sorted).

<P>

<P>
<BR>
You are responsible for cataloguing a sequence of DNA strings (sequences
containing only the
four letters <TT>A</TT>, <TT>C</TT>, <TT>G</TT>, and <TT>T</TT>). However, you want to catalog them,
not in alphabetical order, but
rather in order of ``sortedness'', from ``most sorted''
to ``least sorted''. All the strings are of the same length.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by
M datasets. There is a blank line between datasets.

<p>The first line of each dataset contains two integers: a positive integer <I>n</I> (
<!-- MATH: $0 < n \le 50$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/612img1.gif" 
 ALT="$0 < n \le 50$">)
giving the length of the
strings; and a positive integer <I>m</I> (
<!-- MATH: $0 < m \le 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/612img1.gif" 
 ALT="$0 < m \le 100$">)
giving the number
of strings. These are followed
by <I>m</I> lines, each containing a string of length <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, output the list of input strings, arranged from ``most sorted'' to
``least sorted''. If two or more strings
are equally sorted, list them in the same order they are in the input file.

<P>
Print a blank line between consecutive test cases.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

10 6
AACATGAAGG
TTTTGGCCAA
TTTGGCCAAA
GATCAGATTT
CCCGGGGGGA
ATCGATGCAT
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
CCCGGGGGGA
AACATGAAGG
GATCAGATTT
ATCGATGCAT
TTTTGGCCAA
TTTGGCCAAA
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
613||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Numbers That Count</TITLE>
<META NAME="description" CONTENT="Numbers That Count">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Numbers That Count</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
``Kronecker's Knumbers'' is a little company that manufactures plastic
digits for use in signs
(theater marquees, gas station price displays, and so on).
The owner and sole employee, Klyde
Kronecker, keeps track of how many digits of each type he has
used by maintaining an inventory
book. For instance, if he has just made a sign containing
the telephone number ``5553141'',
he'll write down the number ``5553141'' in one column of
his book, and in the next column he'll
list how many of each digit he used: two 1s, one 3, one 4,
and three 5s. (Digits that don't
get used don't appear in the inventory.) He writes the inventory
in condensed form, like this:
``21131435''.

<P>

<P>
<BR>
The other day, Klyde filled an order for the number 31123314 and
was amazed to discover that
the inventory of this number is the same as the number--it has
three 1s, one 2, three 3s, and
one 4! He calls this an example of a ``self-inventorying number'',
and now he wants to find
out which numbers are self-inventorying, or lead to a self-inventorying
number through iterated
application of the inventorying operation described below.
You have been hired to help him in his investigations.

<P>

<P>
<BR>
Given any non-negative integer n, its inventory is another integer
consisting of a concatenation
of integers 
<!-- MATH: $c_1d_1c_2d_2 \dots c_kd_k$ -->
<IMG
 WIDTH="127" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/613img1.gif" 
 ALT="$c_1d_1c_2d_2 \dots c_kd_k$">
, where each <I>c</I><SUB><I>i</I></SUB> and <I>d</I><SUB><I>i</I></SUB>
is an unsigned integer, every <I>c</I><SUB><I>i</I></SUB> is positive, the
<I>d</I><SUB><I>i</I></SUB> satisfy 
<!-- MATH: $0 \le d_1 < d_2 < \dots < d_k \le 9$ -->
<IMG
 WIDTH="209" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/613img1.gif" 
 ALT="$0 \le d_1 < d_2 < \dots < d_k \le 9$">,
and, for each
digit <I>d</I> that appears anywhere in <I>n</I>, <I>d</I> equals
<I>d</I><SUB><I>i</I></SUB> for some <I>i</I> and <I>d</I> occurs exactly <I>c</I><SUB><I>i</I></SUB> times in the decimal
representation of <I>n</I>. For instance, to
compute the inventory of 5553141 we set
<I>c</I><SUB>1</SUB> = 2, <I>d</I><SUB>1</SUB> = 1, <I>c</I><SUB>2</SUB> = 1, <I>d</I><SUB>2</SUB> = 3, etc., giving 21131435.
The number 1000000000000 has inventory 12011 (``twelve 0s, one 1'').

<P>

<P>
<BR>
An integer <I>n</I> is called self-inventorying if <I>n</I> equals its inventory.
It is called self-inventorying after
<I>j</I> steps (<IMG
 WIDTH="45" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/613img1.gif" 
 ALT="$j \ge 1$">)
if <I>j</I> is the smallest number such that the
value of the <I>j</I>-th iterative application
of the inventory function is self-inventorying. For
instance, 21221314 is self-inventorying after 2
steps, since the inventory of 21221314 is 31321314, the
inventory of 31321314 is 31123314, and
31123314 is self-inventorying.

<P>

<P>
<BR>
Finally, <I>n</I> enters an inventory loop of length <I>k</I> (<IMG
 WIDTH="46" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/613img1.gif" 
 ALT="$k \geÂ– 2$">)
if <I>k</I> is
the smallest number such that for
some integer <I>j</I> (<IMG
 WIDTH="45" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/613img1.gif" 
 ALT="$j \ge 0$">), the value of the <I>j</I>-th iterative application
of the inventory function is
the same as the value of the (<I>j</I> + <I>k</I>)-th iterative application.
For instance, 314213241519 enters
an inventory loop of length 2, since the
inventory of 314213241519 is 412223241519 and the
inventory of 412223241519 is 314213241519, the original number
(we have <I>j</I> = 0 in this case).

<P>

<P>
<BR>
Write a program that will read a sequence of non-negative integers and,
for each input value,
state whether it is self-inventorying, self-inventorying after <I>j</I> steps,
enters an inventory loop of
length <I>k</I>, or has none of these properties after 15 iterative
applications of the inventory function.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A sequence of non-negative integers, each having at most 80 digits,
followed by the terminating value -1. There are no extra leading zeros.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each non-negative input value <I>n</I>, output the appropriate choice from
among the following
messages (where <I>n</I> is the input value, <I>j</I> is a positive
integer, and <I>k</I> is a positive integer greater than 1):

<P>

<P>
<BR>
<I>n</I><TT> is self-inventorying</TT>

<P><I>n</I><TT> is self-inventorying after </TT><I>j</I><TT> steps</TT>

<P><I>n</I><TT> enters an inventory loop of length </TT><I>k</I>

<P><I>n</I><TT> can not be classified after 15 iterations</TT>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
22
31123314
314213241519
21221314
111222234459
-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
22 is self-inventorying
31123314 is self-inventorying
314213241519 enters an inventory loop of length 2
21221314 is self-inventorying after 2 steps
111222234459 enters an inventory loop of length 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
614||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Mapping the Route</TITLE>
<META NAME="description" CONTENT="Mapping the Route">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Mapping the Route</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Finding a path through a maze is a popular problem for computers.
In this problem, a maze will consist of a rectangular array of
square cells, each
of which may have walls on the north,
south, east and/or west sides of the cell.
One cell will be identified as the starting point, and
another will be identified as the goal.
Your task is to find the unique route from the starting
point to the goal, label each cell in the path
with its sequence in the path, identify the cells that
were visited but that were not in the path, and display the maze.

<P>

<P>
<BR>
The algorithm you use to find a path through the maze must be the one described below.
Imagine a robot is positioned in the starting cell.
The robot first attempts to go west from that
cell, then north, then east, then south, in sequence.
The robot can move in the selected direction
if 
<DL COMPACT>
<DT>(a)
<DD>there is no wall preventing it from moving in that
direction, and 
<DT>(b)
<DD>it has not yet been in
the next cell in that direction.  
</DL>

<P>
When the robot
reaches the goal, its trip is over.  If the robot
reaches a cell at which no further progress is possible,
it retreats to the previous cell it occupied
and attempts to move in the next untried direction.

<P>

<P>
<BR>
Consider the simple maze shown on the left
below.  It is two cells high and three cells wide.
The starting cell is labeled `<TT>S</TT>' and the goal cell
is labeled `<TT>G</TT>'.  When the robot starts, it would
first try to move west (left), but finds a wall.  
It then tries to move north (up), and is again
blocked by a wall.  A wall also prevents it from moving
east (right), so it finally tries to move
south (down), and succeeds.  From the new cell
it will eventually move east.  Here it repeats its
movement algorithm.  Although no wall blocks its potential 
westward movement, it has already
'visited' the cell in that direction, so it next 
tries to move north, and is successful.  Unfortunately,
after moving north, it finds no way to extend its path,
and so it retreats to the previously occupied
cell.  Now it tries to move east, and is successful.
From that cell it will move north, and there it
finds the goal.  The maze that would be displayed
on the output is shown on the right below.
Note that the starting cell is labeled `<TT>1</TT>', each
cell in the path to the goal (including the one
containing the goal) is labeled with its sequence
number, and each cell that was visited but is not 
in the path is labeled with question marks.

<P>
<PRE>
                     +---+---+---+        +---+---+---+
                     | S |   | G |        |  1|???|  5|
                     +   +   +   +        +   +   +   +
                     |           |        |  2   3   4|
                     +---+---+---+        +---+---+---+
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
View the maze as an array of cells, with the northernmost row being
row 1, and the
westernmost column being column 1.  In the maze above, the starting
cell is row 1, column 1, and the goal cell is row 1, column 3.

<P>

<P>
<BR>
There will be one or more mazes to process in the input.  For each maze there will first
appear six integers.  The first two give the height (number of rows) and width (numer of
columns) of the maze (in cells).  The next two give the position (row and column number) of the
starting cell, and the last two give the position of the goal.  No maze will have more than 12 rows
or 12 columns, and there will always be a path from the starting point to the goal.

<P>

<P>
<BR>
Following the first six integers there will
appear one integer for each cell, in row major
order.  The value of each integer indicates 
whether a cell has a wall on its eastern side (1) and
whether it has a wall on its southern side (2).  For 
example, a cell with no eastern or southern
wall has a value of 0.  A cell with only a southern wall has
a value of 2.  A cell with both an
eastern and a southern wall has a value of 3.  The cells on the periphery of the maze
always have appropriate walls to prevent the robot from leaving the maze; 
these are not specified in the input data.

<P>

<P>
<BR>
The last maze in the input data will be followed by six zeroes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each maze, display the maze as shown in the example above and the
expected output below, appropriately labeled and prefixed by the maze number.
The mazes are numbered sequentially starting with 1. Print two blank lines after each dataset.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3 1 1 1 3
1 1 0
0 0 0

4 3 3 2 4 3
0 3 0
0 2 0
0 3 0
0 1 0

0 0 0 0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Maze 1

+---+---+---+
|  1|???|  5|
+   +   +   +
|  2   3   4|
+---+---+---+


Maze 2

+---+---+---+
|??? ???|???|
+   +---+   +
|  3   4   5|
+   +---+   +
|  2   1|  6|
+   +---+   +
|       |  7|
+---+---+---+
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
615||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Is It A Tree?</TITLE>
<META NAME="description" CONTENT="Is It A Tree?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Is It A Tree?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A tree is a well-known data structure that is either empty (null,
void, nothing) or
is a set of one or more nodes connected by directed edges between
nodes satisfying the following properties.

<P>
<UL>
<LI>There is exactly one node, called the root, to which no directed
edges point.
<LI>Every node except the root has exactly one edge pointing to it.
<LI>There is a unique sequence of directed edges from the root to each node.
</UL>

<P>
For example, consider the illustrations below, in which nodes are
represented by circles and
edges are represented by lines with arrowheads.  The first two of these are
trees, but the last is not.

<P>

<IMG
 WIDTH="176" HEIGHT="264" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/615img2.gif" 
 ALT="$\textstyle \parbox{.3\textwidth}{
\begin{center}
\mbox{}
\epsfxsize 1.5in
\epsfbox{p615a.eps}
\end{center}}$">
<IMG
 WIDTH="233" HEIGHT="290" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/615img2.gif" 
 ALT="$\textstyle \parbox{.4\textwidth}{
\begin{center}
\mbox{}
\epsfxsize 2in
\epsfbox{p615b.eps}
\end{center}}$">
<IMG
 WIDTH="176" HEIGHT="264" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/615img2.gif" 
 ALT="$\textstyle \parbox{.29\textwidth}{
\begin{center}
\mbox{}
\epsfxsize 1.5in
\epsfbox{p615c.eps}
\end{center}}$">

<P>
In this problem you will be given several descriptions of collections of nodes
connected by directed edges.  For each of these you are to determine if
the collection satisfies the definition of a tree or not.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a sequence of descriptions (test cases) followed by a
pair of negative integers.  Each test case will consist of a
sequence of edge descriptions
followed by a pair of zeroes  Each edge description will consist of a pair
of integers;
the first integer identifies the node from which the edge begins, and the
second integer identifies the node to which the edge is directed.
Node numbers will always be greater than zero.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case display the line ``<TT>Case </TT><I>k</I><TT> is a tree.</TT>"
or the line ``<TT>Case </TT><I>k</I><TT> is not a tree.</TT>", where <I>k</I>
corresponds to the test case number (they are sequentially numbered starting with 1).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 8  5 3  5 2  6 4
5 6  0 0

8 1  7 3  6 2  8 9  7 5
7 4  7 8  7 6  0 0

3 8  6 8  6 4
5 3  5 6  5 2  0 0
-1 -1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1 is a tree.
Case 2 is a tree.
Case 3 is not a tree.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
616||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Coconuts, Revisited</TITLE>
<META NAME="description" CONTENT="Coconuts, Revisited">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Coconuts, Revisited</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The short story titled <EM>Coconuts</EM>, by Ben Ames Williams,
appeared in the <EM>Saturday Evening Post</EM> on October 9, 1926.
The story tells about five men and a monkey who were shipwrecked on an
island.  They spent the first night gathering coconuts.  During the
night, one man woke up and decided to take his share of the coconuts.
He divided them into five piles.  One coconut was left over so he gave
it to the monkey, then hid his share and went back to sleep.

<P>

<P>
<BR>
Soon a second man woke up and did the same thing.  After dividing the
coconuts into five piles, one coconut was left over which he gave to
the monkey.  He then hid his share and went back to bed.  The third,
fourth, and fifth man followed exactly the same procedure.  The next
morning, after they all woke up, they divided the remaining coconuts
into five equal shares.  This time no coconuts were left over.

<P>

<P>
<BR>
An obvious question is ``how many coconuts did they originally gather?"
There are an infinite number of answers, but the lowest of these is
3,121.  But that's not our problem here.

<P>

<P>
<BR>
Suppose we turn the problem around.  If we know the number of coconuts
that were gathered, what is the maximum number of persons (and one
monkey) that could have been shipwrecked if the same procedure could
occur?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a sequence of integers, each representing
the number of coconuts gathered by a group of persons (and a monkey)
that were shipwrecked.  The sequence will be followed by a negative
number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each number of coconuts, determine the largest number of persons
who could have participated in the procedure described above.  Display
the results similar to the manner shown below, in the Sample Output.
There may be no solution for some of the input cases; if so, state
that observation.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
25
30
3121
-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
25 coconuts, 3 people and 1 monkey
30 coconuts, no solution
3121 coconuts, 5 people and 1 monkey
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
617||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Nonstop Travel</TITLE>
<META NAME="description" CONTENT="Nonstop Travel">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Nonstop Travel</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Fast Phil works the late shift and leaves his company's parking lot at
precisely 2:00 AM every morning.  His route home is by a straight road
which has one or more traffic signals.  Phil has always wondered if,
given the locations and cycles of each of the traffic signals, are
there velocities he can travel home without ever having to speed up or
slow down on account of a red light.  You are to write a program to
satisfy his curiosity.

<P>

<P>
<BR>
Your program should find all integer speeds (in miles per hour) which
can be used for Phil's trip home.  Each speed is a rate (in miles per
hour) he can maintain the moment he leaves the parking lot at 2:00 AM
until he arrives home (we assume Phil has a long driveway in which to
decelerate) such that he never passes through a red signal.  He is
allowed to pass throgh a signal at the exact moment it turns from
yellow to red, or at the exact moment a red signal turns green.  Since
Phil is a relatively law-abiding citizen, you need only consider
speeds less than or equal to 60 mph.  Likewise, Phil isn't interested
in travelling too slowly, so you should not consider speeds lower than
30 mph.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of one or more sets of data describing a set of
traffic signals, followed by the integer -1.  The first integer in
each set will contain the value <I>N</I> (specifying the number of
traffic signals).  <I>N</I> will be no larger than 6.  This value
will be followed by <I>N</I> sets of numbers, each containing values
(in order) for <I>L</I>, <I>G</I>, <I>Y</I> and <I>R</I>.
<I>L</I> is a positive real number indicating the location of a
traffic signal, in miles, from the parking lot.  <I>G</I>,
<I>Y</I> and <I>R</I> are the lengths of time (in seconds) of the
green, yellow, and red periods of the corresponding traffic signal's
cycle.  Phil has learned from an informant in the Highway Department
that all <I>N</I> traffic signals start their green period precisely
at 2:00 AM.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output should consist of the input case number (starting with 1)
followed by a list of all valid integer speeds Phil may drive to avoid
the red signals.  Consecutive integer speeds should be specified in
interval notation of the form <TT>L-H</TT>, where
<TT>L</TT> and <TT>H</TT> are the lowest and
highest speeds for the interval.  Intervals of the form
<TT>L-L</TT> (that is, an interval of length 1) shold
just be written as <TT>L</TT>.  Intervals should be
separated by commas.  If there are no valid speeds, you program should
display the phrase <TT>No acceptable speeds</TT>. The
Expected Output below illustrates this format.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
5.5  40 8 25

3
10.7  10 2 75
12.5  12 5 57
17.93 15 4 67

-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1: 30, 32-33, 36-38, 41-45, 48-54, 59-60
Case 2: No acceptable speeds.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
618||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Doing Windows</TITLE>
<META NAME="description" CONTENT="Doing Windows">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Doing Windows</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The screen of monitors on computer systems are rectangles.  The <EM>aspect ratio</EM>
of a screen is its width divided by its height.  This term can also be applied
to rectangular windows that may appear on the monitor's screen, where it is
defined
as the width of the window divided by its height.  For this problem we assume
the dimensions of a monitor's screen and its windows are measured in integral
numbers
of pixels, the individual dots (arranged in a rectangular grid) that comprise
and image.

<P>

<P>
<BR>
Suppose your windowing software only allows windows to be resized in such
a way that their aspect ratios are unmodified.  For example, a window with
a width
of 150 pixels and a height of 100 pixels (and an aspect ratio of 150/100,
or 1.5)
can be resized so its width is 225 pixels and its height is 150 pixels
(the aspect ratio
remains unchanged, at 225/150, or 1.5), but a width of 224 and a height
of 150 is not
allowed, since that would change the aspect ratio.  Each window can be
moved to an
arbitrary location on the screen, but the entire window must remain visible
on the screen.

<P>

<P>
<BR>
Given the size of a screen and the initial sizes of four different windows
(as integer values for width and height), is it possible to resize (and
relocate) the
four windows so they completely cover the screen without overlapping each
other?
That's the question you are to answer in this problem.

<P>

<P>
<BR>
For example, consider a square screen with four square windows.
The aspect ratio
for each of these is exactly 1.  We are permitted to resize each of
the four windows
so they would completely fill the screen without overlapping.
This case is illustrated by the first data set in the Sample Input, below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will consist of one or more data sets followed by a pair of zeroes.
Each data set will contain five pairs of integers.  The first pair

<!-- MATH: $(W_s, H_s)$ -->
(<I>W</I><SUB><I>s</I></SUB>, <I>H</I><SUB><I>s</I></SUB>) specifies the
width and height of the screen.  The four remaining pairs (<I>W</I><SUB><I>i</I></SUB>,
<I>H</I><SUB><I>i</I></SUB>, for <I>i</I> = 1 to 4) specify the initial sizes of the windows.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output should have one line for each input data set.  The line should contain
the input data set number (starting with 1) followed by the word <TT>Yes</TT>
if the screen can be completely covered by the (possibly resized and relocated) windows with no overlap, or <TT>No</TT> if it cannot be so covered.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
400 400   10 10  35 35   15 15   100 100
200 300   10 10  20 20   30 45   40 60
200 250   10 10  20 20   30 45   40 60

0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Set 1: Yes
Set 2: No
Set 3: Yes
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
619||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Numerically Speaking</TITLE>
<META NAME="description" CONTENT="Numerically Speaking">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Numerically Speaking</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A developer of crossword puzzles (and other similar word games) has decided
to develop a mapping between every possible word with from one to twenty
characters and unique integers.  The mapping is very simple, with the ordering
being done first by the length of the word, and then alphabetically.
Part of the list is shown below.
<PRE>
    a          1
    b          2
    ...
    z          26
    aa         27
    ab         28
    ...
    snowfall   157,118,051,752
    ...
</PRE>

<P>
Your job in this problem is to develop a program which can translate, bidirectionally,
between the unique word numbers and the corresponding words.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input to the program is a list of words and numbers, one per line starting
in column one, followed by a line containing a single asterisk in column one.
A number will consist only of decimal digits (<TT>0</TT> through <TT>9</TT>) followed immediately
by the end of line (that is, there will be no commas in input numbers).  A word
will consist of between one and twenty lowercase alphabetic characters (<TT>a</TT>
through <TT>z</TT>).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output is to contain a single line for each word or number in the input data.
This line is to contain the word starting in column one, followed by an appropriate
number of blanks, and the corresponding word number starting in column 23.  Word
numbers that have more than three digits must be separated by commas at thousands,
millions, and so forth.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
29697684282993
transcendental
28011622636823854456520
computationally
zzzzzzzzzzzzzzzzzzzz
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
elementary            29,697,684,282,993
transcendental        51,346,529,199,396,181,750
prestidigitation      28,011,622,636,823,854,456,520
computationally       232,049,592,627,851,629,097
zzzzzzzzzzzzzzzzzzzz  20,725,274,851,017,785,518,433,805,270
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-24</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
620||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Cellular Structure</TITLE>
<META NAME="description" CONTENT="Cellular Structure">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Cellular Structure</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A chain of connected cells of two types A and B composes a 
cellular structure of some microorganisms of species APUDOTDLS. 

<P>
If no mutation had happened during growth of an organism, 
its cellular chain would take one of the following forms:

<P>
<PRE><TT>
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/620img1.gif" 
 ALT="$\bullet$">
simple stage 		 O = A  
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/620img1.gif" 
 ALT="$\bullet$">
fully-grown stage 		 O = OAB 
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/620img1.gif" 
 ALT="$\bullet$">
mutagenic stage 		 O = BOA
</TT></PRE>

<P>
Sample notation O = OA means that if we added to chain of a healthy 
organism a cell A from the right hand side, we would end up also with 
a chain of a healthy organism. It would grow by one cell A.

<P>

<P>
<BR>
A laboratory researches a cluster of these organisms. 
Your task is to write a program which could find out a current stage 
of growth and health of an organism, given its cellular chain sequence.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A integer <I>n</I> being a number of cellular chains to test, and then
<I>n</I> consecutive lines containing chains of tested organisms.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each tested chain give (in separate lines) proper answers:

<P>
<PRE><TT>
		 <TT>SIMPLE</TT> 		 for simple stage
		 <TT>FULLY-GROWN</TT> 		 for fully-grown stage
		 <TT>MUTAGENIC</TT> 		 for mutagenic stage
		 <TT>MUTANT</TT> 		 any other (in case of mutated organisms)
</TT></PRE>

<P>
If an organism were in two stages of growth at the same time the 
first option from the list above should be given as an answer.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
A
AAB
BAAB
BAABA
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
SIMPLE
FULLY-GROWN
MUTANT
MUTAGENIC
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
621||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Secret Research</TITLE>
<META NAME="description" CONTENT="Secret Research">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Secret Research</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
At a certain laboratory results of secret research are thoroughly encrypted. 
A result of a single experiment is stored as an information of its completion:

<P>

<P>
<BR>

`positive result',
`negative result',
`experiment failed' or
`experiment not completed'

<P>

<P>
<BR>
The encrypted result constitutes a string of digits S, which may take 
one of the following forms:

<P>
<PRE><TT>
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/621img1.gif" 
 ALT="$\bullet$">
positive result 		 S = 1 or S = 4 or S = 78 
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/621img1.gif" 
 ALT="$\bullet$">
negative result 		 S = S35 
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/621img1.gif" 
 ALT="$\bullet$">
experiment failed 		 S = 9S4 
<IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/621img1.gif" 
 ALT="$\bullet$">
experiment not completed 		 S = 190S
</TT></PRE>

<P>
(A sample result S35 means that if we add digits 35 from the right hand 
side to a digit sequence then we shall get the digit sequence corresponding 
to a failed experiment)

<P>

<P>
<BR>
You are to write a program which decrypts given sequences of digits.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A integer <I>n</I> stating the number of encrypted results and then
consecutive <I>n</I> lines, each containing a sequence of digits given as ASCII strings.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each analysed sequence of digits the following lines should be sent 
to output (in separate lines):

<P>
<PRE><TT>
		 <TT>+</TT> 		  for a positive result
		 <TT>-</TT> 		  for a negative result
		 <TT>*</TT> 		  for a failed experiment
		 <TT>?</TT> 		  for a not completed experiment
</TT></PRE>

<P>
In case the analysed string does not determine the experiment result, 
a first match from the above list should be outputted.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
78
7835
19078
944
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
+
-
?
*
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
622||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Grammar Evaluation</TITLE>
<META NAME="description" CONTENT="Grammar Evaluation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Grammar Evaluation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Using the following grammar:

<P>
<PRE>
&lt;expression&gt; := &lt;component&gt; | &lt;component&gt; + &lt;expression&gt;
&lt;component&gt; := &lt;factor&gt; | &lt;factor&gt; + &lt;component&gt;
&lt;factor&gt; := &lt;positive integer&gt; | (&lt;expression&gt;)
</PRE>

<P>
write a program which analyses expressions conforming to 
the rules of this grammar and evaluates them, 
if the analysis has been successfully completed. 
It may be assumed that there is no overflow of float(C)/real(Pascal) 
numbers range.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A integer <I>n</I> stating the number of expressions, then
consecutive <I>n</I> lines, each containingan expression given as a character
string.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each line value of the expression or output message <TT>ERROR</TT>
if the expression does not follow the grammar.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
32
12+34
1*(2+3)+3
1(2+3)+3
qwe323
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
32
46
8
ERROR
ERROR
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
623||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>500!</TITLE>
<META NAME="description" CONTENT="500!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
500!</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In these days you can more and more often happen to see programs which perform
some useful calculations being executed rather then trivial screen savers.
Some of them check the system message queue and in case of finding it empty
(for examples somebody is editing a file and stays idle for some time) execute
its own algorithm.

<P>
As an examples we can give programs which calculate primary numbers.

<P>

<P>
<BR>
One can also imagine a program which calculates a factorial of given numbers.
In this case it is the time complexity of order <I>O</I>(<I>n</I>) which makes troubles,
but the memory requirements. Considering the fact that 500! gives 1135-digit
number no standard, neither integer nor floating, data type is applicable here.

<P>

<P>
<BR>
Your task is to write a programs which calculates a factorial of a given number.

<P>

<B>Assumptions:</B> Value of a number ``<I>n</I>" which factorial should be calculated of does not exceed 1000 (although 500! is the name of the problem, 500! is a small limit).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Any number of lines, each containing value ``<I>n</I>" for which you should provide
value of <I>n</I>!

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
2 lines for each input case. First should contain value ``<I>n</I>" followed by character `<TT>!</TT>'. The second
should contain calculated value <I>n</I>!.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
30
50
100
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
10!
3628800
30!
265252859812191058636308480000000
50!
30414093201713378043612608166064768844377641568960512000000000000
100!
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
624||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CD</TITLE>
<META NAME="description" CONTENT="CD">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
CD</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You have a long drive by car ahead. You have a tape recorder, but unfortunately
your best music is on CDs. You need to have it on tapes so the problem to solve
is: you have a tape <I>N</I> minutes long. How to choose tracks from CD to get most out
of tape space and have as short unused space as possible.

<P>

<P>
<BR>
Assumptions:
<UL>
<LI>number of tracks on the CD. does not exceed 20
<LI>no track is longer than <I>N</I> minutes
<LI>tracks do not repeat
<LI>length of each track is expressed as an integer number
<LI><I>N</I> is also integer
</UL>

<P>
Program should find the set of tracks which fills the tape best and print it
in the same sequence as the tracks are stored on the CD

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Any number of lines. Each one contains value <I>N</I>, (after space) number of tracks
and durations of the tracks. For example from first line in sample data: <I>N</I>=5,
number of tracks=3, first track lasts for 1 minute, second one 3 minutes, next
one 4 minutes

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Set of tracks (and durations) which are the correct solutions and
string ``<TT>sum:</TT>" and sum of duration times.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 3 1 3 4
10 4 9 8 4 2
20 4 10 5 7 4
90 8 10 23 1 2 3 4 5 7
45 8 4 10 44 43 12 9 8 2
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1 4 sum:5
8 2 sum:10
10 5 4 sum:19
10 23 1 2 3 4 5 7 sum:55
4 10 12 9 8 2 sum:45
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
625||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Compression</TITLE>
<META NAME="description" CONTENT="Compression">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Compression</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There are many various compression method with character string compression
among them. It is usually used for text compression, especially for program
source codes. Source code usually consists of repeating identifiers and
keywords. A simple compression method exchanges these repeating words with
their codes.

<P>

<P>
<BR>
Your task is to write a compression program using a below-defined method:

<P>
<UL>
<LI>keywords like: <EM>var, end, for, then, else, case, goto, const, label, while, begin, until, repeat, downto, function, procedure</EM> are coded as <TT>&amp;</TT><I>X</I> where <I>X</I> is equal to 0 for <EM>var</EM>, 1 for <EM>end</EM>, and so on up to 15 for <EM>procedure</EM>.
<LI>identifiers are replaced by <TT>&amp;</TT><I>X</I> where <I>X</I> is a number of the identifier + 15, so the first identifier in the text is given the code &amp;16.
<LI>identifiers are defined as any string of digits and letters (i.e. number, number33, 20001, 2Pi, h2o). Identifiers are separated by whitespaces (not alphanumeric)
<LI>identifiers which are shorter than 3 characters are not coded
<LI>to make decompression possible first occurrence of an identifier is not coded but the appropriate code is stored in memory
<LI>no identifier is longer than 39 characters
<LI>there are at most 2000 identifiers
<LI>character <TT>&amp;</TT> does not appear in the input source code
</UL>

<P>
Example: identifier '<TT>integer</TT>' from the source code listed below is given a
code &amp;(3+15) = &amp;18 because '<TT>var</TT>' is a keyword and '<TT>n</TT>' is too short to be coded, so both are not counted.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank line followed by N datasets. There is a blank line between datasets.

Each dataset contains an unlimited number of lines of source code (the last line being `<TT>end.</TT>').

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, print the compressed source code. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

program Test;
var n :integer;

function harmonic(number :integer):real;
var i :integer;
    result :real;
begin
  result := 0;
  for i := 1 to number do
  begin
    number := number + 1/i;
  end;
  harmonic := result;
end;

begin
  writeln('Get n:');
  readln(n);
  writeln('harmonic number for n: ');
  writeln(harmonic(n));
end.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
program Test;
&0 n :integer;

&14 harmonic(number :&18):real;
&0 i :&18;
    result :&21;
&10
  &22 := 0;
  &2 i := 1 to &20 do
  &10
    &20 := &20 + 1/i;
  &1;
  &19 := &22;
&1;

&10
  writeln('Get n:');
  readln(n);
  &23('&19 &20 &2 n: ');
  &23(&19(n));
&1.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
626||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Ecosystem</TITLE>
<META NAME="description" CONTENT="Ecosystem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Ecosystem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There are various food chains in any ecosystem, hawk, mouse and corn to name
one. Mice feed on corn, hawks eat mice and life goes on. Given the relations
between the species one can easily create food chains. 

<P>
One can also determine
whether a chain is a cyclic one with caterpillars, plants, fungi and bacteria,
as an example of cyclic chain. Caterpillars feed on plants, plants use organic
substances produced by bacteria and fungi by decomposition of dead bodies of
organisms such as caterpillars.
These constitute a 3-member cyclic food chain.

<P>

<P>
<BR>
Your task is to find 3-member cyclic food chains.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Unlimited number of tests. Each test consists of: number of observer
species (<I>n</I>), consecutive <I>n</I> lines containing coincidence matrix describing
food relations between species. There is 0 in the (<I>i</I>,<I>k</I>)-th element when <I>i</I>-th
species does not eat <I>k</I>-th species and respectively 1 when it does so.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Outputted cyclic chains, followed by word ``<TT>total:</TT>" and then number of cyclic
chains. The chain consists of three species separated by spaces, for
example 1 2 4 means that 1 eats 2, which eats 4, and 1 is a food for 4.
With such a rule the chain 1 2 4 is identical with 4 1 2 and 2 4 1 but
not with 4 2 1 (inverted sequence of prey and predator).

<P>
You should not print all identical chain (only that one with species sorted
with ascend or descend order). Chains should be sorted. This means that the
chains 1 2 4, 1 2 3 and 3 2 1 should be printed in the following order:

<P>
<PRE>
1 2 3
1 2 4
3 2 1
</PRE>

<P>Output a blank line after each test case.
<p>

<B>Assumptions:</B> number of species in one test belongs to a range [3, 100]

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0 1 0
0 0 1
1 0 0
3
0 0 1
1 0 0
0 1 0
3
0 1 1
1 0 1
1 1 0
4
0 1 1 1
1 0 1 1
1 1 0 1
1 1 1 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1 2 3
total:1

3 2 1
total:1

1 2 3
3 2 1
total:2

1 2 3
1 2 4
1 3 4
2 3 4
3 2 1
4 2 1
4 3 1
4 3 2
total:8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
627||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Net</TITLE>
<META NAME="description" CONTENT="The Net">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Net</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Taking into account the present interest in the Internet, a smart information
routing becomes a must. This job is done by routers situated in the nodes of
the network. Each router has its own list of routers which are visible for
him (so called ``routing table"). It is obvious that the information should be
directed in the way which minimizes number of routers it has to pass (so
called ``hop count").

<P>

<P>
<BR>
Your task is to find an optimal route (minimal hop count) for the given
network form the source of the information to its destination.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
First line contains number of routers in the network (<I>n</I>). Next <I>n</I> lines contain
description of the network. Each line contains router <I>ID</I>, followed by a hyphen
and comma separated list of <I>ID</I>s of visible routers. The list is sorted in
ascending order. Next line contains a number of routes (<I>m</I>) you should determine.
The consecutive <I>m</I> lines contain starting and ending routers for the route separated by a single space. 

<P>
Input data may contain descriptions of many networks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each network you should output a line with 5 hyphens and then, for each
route, a list of routers passed by information sent from starting to
destination routers. 

<P>
In case passing of information is impossible (no
connection exists) you should output a string ``<TT>connection impossible</TT>". In case
of multiple routes with the same `hop count' the one with lower <I>ID</I>s should be
outputted (in case of route form router 1 to 2 as 1 3 2 and 1 4 2 the 1 3 2 should be outputted).

<P>

<P><P>
<BR>

<B>Assumptions:</B> A number of routers is not greater than 300 and there are at least 2 routers in the network. Each routers ``sees" no more than 50 routers.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
1-2,3,4
2-1,3
3-1,2,5,6
4-1,5
5-3,4,6
6-3,5
6
1 6
1 5
2 4
2 5
3 6
2 1
10
1-2
2-
3-4
4-8
5-1
6-2
7-3,9
8-10
9-5,6,7
10-8
3
9 10
5 9
9 2
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
-----
1 3 6
1 3 5
2 1 4
2 3 5
3 6
2 1
-----
9 7 3 4 8 10
connection impossible
9 6 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
628||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0031)http://acm.uva.es/p/v6/628.html -->
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Passwords</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>cslab</o:Author>
  <o:LastAuthor>cslab</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2005-06-29T13:50:00Z</o:Created>
  <o:LastSaved>2005-06-29T13:53:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>366</o:Words>
  <o:Characters>2090</o:Characters>
  <o:Company>EWU</o:Company>
  <o:Lines>17</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2452</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:" ;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
code
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
pre
	{margin-top:0in;
	margin-bottom:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
p.math, li.math, div.math
	{mso-style-name:math;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-fareast-font-family:"Times New Roman";}
p.boldmath, li.boldmath, div.boldmath
	{mso-style-name:boldmath;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:" ;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
<meta content=Passwords name=description>
<meta content=htmlatex name=keywords>
<meta content=document name=resource-type>
<meta content=global name=distribution>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor=white lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1><span lang=EN style='mso-ansi-language:EN'><br clear=all style='mso-special-character:
line-break'>
<o:p></o:p></span></h1>

<div align=center>

<table class=MsoNormalTable border=0 cellpadding=0 style='mso-cellspacing:1.5pt;
 background:#0060F0'>
 <tr style='mso-yfti-irow:0;mso-yfti-lastrow:yes'>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><b><span style='font-size:18.0pt;color:#C0FFFF'>&nbsp;<a
  name=SECTION0001000000000000000000> Passwords</a>&nbsp;</span></b></p>
  </td>
 </tr>
</table>

</div>

<p><span lang=EN style='mso-ansi-language:EN'>Having several accounts on
several servers one has to remember many passwords. You can imagine a situation
when someone forgets one of them. He/she remembers only that it consisted of
words </span><tt><span lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>x</span></tt><span
lang=EN style='mso-ansi-language:EN'>, </span><tt><span lang=EN
style='font-size:10.0pt;mso-ansi-language:EN'>y</span></tt><span lang=EN
style='mso-ansi-language:EN'> and </span><tt><span lang=EN style='font-size:
10.0pt;mso-ansi-language:EN'>z</span></tt><span lang=EN style='mso-ansi-language:
EN'> as well as two digits: one at the very beginning and the other one at the
end of the password. <o:p></o:p></span></p>

<p><span lang=EN style='mso-ansi-language:EN'><br>
Your task is to write a program which will generate all possible password on
the basis of given dictionary and set of rules. For the example given above the
dictionary contains three words: </span><tt><span lang=EN style='font-size:
10.0pt;mso-ansi-language:EN'>x</span></tt><span lang=EN style='mso-ansi-language:
EN'>, </span><tt><span lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>y</span></tt><span
lang=EN style='mso-ansi-language:EN'>, </span><tt><span lang=EN
style='font-size:10.0pt;mso-ansi-language:EN'>z</span></tt><span lang=EN
style='mso-ansi-language:EN'>, and the rule is given as </span><tt><span
lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>0#0</span></tt><span
lang=EN style='mso-ansi-language:EN'> what stands for </span><code><span
lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>SPMamp</span></code><span
lang=EN style='mso-ansi-language:EN'>&lt;digit&gt;&lt;word_from_the_dictionary&gt;&lt;digit&gt;&amp;.
<o:p></o:p></span></p>

<h2><a name=SECTION0001001000000000000000><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>Input</span></a><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>&nbsp;</span><span lang=EN style='mso-ansi-language:EN'> <o:p></o:p></span></h2>

<p class=MsoNormal><span lang=EN style='mso-ansi-language:EN'>First line
contains a number of words in the dictionary (<i>n</i>). The words themselves
are given in <i>n</i> consecutive lines. The next line contains number of rules
(<i>m</i>). Similarly consecutive <i>m</i> lines contain rules. Each rule
consists of characters `</span><tt><span lang=EN style='font-size:10.0pt;
mso-ansi-language:EN'>#</span></tt><span lang=EN style='mso-ansi-language:EN'>'
and `</span><tt><span lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>0</span></tt><span
lang=EN style='mso-ansi-language:EN'>' given in arbitrary order. The character
`</span><tt><span lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>#</span></tt><span
lang=EN style='mso-ansi-language:EN'>' stands for word from the dictionary
whilst the character `</span><tt><span lang=EN style='font-size:10.0pt;
mso-ansi-language:EN'>0</span></tt><span lang=EN style='mso-ansi-language:EN'>'
stands for a digit. <o:p></o:p></span></p>

<p><span lang=EN style='mso-ansi-language:EN'>Input data may contain many sets
of dictionaries with rules attached two them. <o:p></o:p></span></p>

<h2><a name=SECTION0001002000000000000000><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>Output</span></a><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>&nbsp;</span><span lang=EN style='mso-ansi-language:EN'> <o:p></o:p></span></h2>

<p class=MsoNormal><span lang=EN style='mso-ansi-language:EN'>For each set
`dictionary + rules' you should output two hyphens followed by a linebreak and
all matching passwords given in consecutive lines. Passwords should be sorted
by rules what means that first all passwords matching the first rule and all
words must be given, followed by passwords matching the second rule and all
words, etc. Within set of passwords matching a word and a rule an ascending
digit order must be preserved. <o:p></o:p></span></p>

<p><span lang=EN style='mso-ansi-language:EN'><br>
<b>Assumptions:</b> A number of words in the dictionary is greater than 0 and
smaller or equal to 100 ( <!-- MATH: $0 < n \le 100$ --><img width=96
height=30 id="_x0000_i1025" src="http://uva.onlinejudge.org/external/6/628img1.gif" 
alt="$0 &lt; n \le 100$" align=middle border=0>). Length of the word is greater
than 0 and smaller than 256. A word may contain characters `</span><tt><span
lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>A</span></tt><span
lang=EN style='mso-ansi-language:EN'>'..`</span><tt><span lang=EN
style='font-size:10.0pt;mso-ansi-language:EN'>Z</span></tt><span lang=EN
style='mso-ansi-language:EN'>',`</span><tt><span lang=EN style='font-size:10.0pt;
mso-ansi-language:EN'>a</span></tt><span lang=EN style='mso-ansi-language:EN'>'..`</span><tt><span
lang=EN style='font-size:10.0pt;mso-ansi-language:EN'>z</span></tt><span
lang=EN style='mso-ansi-language:EN'>',`</span><tt><span lang=EN
style='font-size:10.0pt;mso-ansi-language:EN'>0</span></tt><span lang=EN
style='mso-ansi-language:EN'>'..`</span><tt><span lang=EN style='font-size:
10.0pt;mso-ansi-language:EN'>9</span></tt><span lang=EN style='mso-ansi-language:
EN'>'.A number of rules is smaller than 1000, and a rule is shorter that 256
characters. A character `</span><tt><span lang=EN style='font-size:10.0pt;
mso-ansi-language:EN'>0</span></tt><span lang=EN style='mso-ansi-language:EN'>'
may occur in the rule no more than 7 times, but it has to occur at least once.
The character `</span><tt><span lang=EN style='font-size:10.0pt;mso-ansi-language:
EN'>#</span></tt><span lang=EN style='mso-ansi-language:EN'>' is not mandatory
meaning there can be no such characters in the rule. <o:p></o:p></span></p>

<h2><a name=SECTION0001003000000000000000><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>Sample Input</span></a><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>&nbsp;</span><span lang=EN style='mso-ansi-language:EN'> <o:p></o:p></span></h2>

<pre><span lang=EN style='mso-ansi-language:EN'>2<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>1<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>#0<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>1<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>1<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>#0#<o:p></o:p></span></pre>

<h2><a name=SECTION0001004000000000000000><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>Sample Output</span></a><span lang=EN style='color:#0070E8;
mso-ansi-language:EN'>&nbsp;</span><span lang=EN style='mso-ansi-language:EN'> <o:p></o:p></span></h2>

<pre><span lang=EN style='mso-ansi-language:EN'>--<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root0<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root1<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root2<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root3<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root4<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root5<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root6<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root7<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root8<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>root9<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super0<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super1<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super2<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super3<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super4<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super5<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super6<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super7<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super8<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>2super9<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>--<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin0admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin1admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin2admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin3admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin4admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin5admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin6admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin7admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin8admin<o:p></o:p></span></pre><pre><span
lang=EN style='mso-ansi-language:EN'>admin9admin<o:p></o:p></span></pre>

<p><span lang=EN style='mso-ansi-language:EN'><o:p>&nbsp;</o:p></span></p>

<div class=MsoNormal align=center style='text-align:center'><span lang=EN
style='mso-ansi-language:EN'>

<hr size=2 width="100%" align=center>

</span></div>

<address><span lang=EN style='mso-ansi-language:EN'>Miguel A. Revilla <br>
2000-01-10 <o:p></o:p></span></address>

</div>

</body>

</html>

______________________________________________________
629||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Test</TITLE>
<META NAME="description" CONTENT="Test">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Test</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Statistical analysis quite often involves questions whether differences
between samples are meaningful. Lack of meaningful differences indicates that
the samples do not differ with respect to studied feature. The bigger the
number of samples the bigger are troubles we find ourselves in, because
it is much more difficult then to delimit sets of non-differing samples.

<P>

<P>
<BR>
Let's assume we have three samples P1, P2, P3. We also know that P1 differs
meaningfully from P2, but others do not differ. Thus we have two sets of
samples not different meaningfully. First one contains P1 and P3 (because
they it is not stated that they differ meaningfully) and respectively the
second one contains P2 and P3 (similar as earlier).

<P>
As you can see these
sets are not separate. It is going to be handy to denote the belonging to
the set with a character associated with it. In our case we
have: P1:<TT>a</TT> P2:<TT>b</TT> P3:<TT>ab</TT>.

<P>

<P>
<BR>

<B>Conclusions:</B>
<UL>
<LI>if all the samples did not differ then they would belong to the same set (set <TT>a</TT>).
<LI>if all the samples DID differ from each other then each belongs to separate, one-element set (P1:<TT>a</TT> P2:<TT>b</TT> P3:<TT>c</TT> etc.)
</UL>

<P>
Your task is to write a program which delimits sets without meaningful differences.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A number (<I>n</I>) of samples in the first line, in ``<I>n</I>" consecutive ones an incidence
matrix which describes the differences between samples is given. The actual
information in the matrix is given above the primary diagonal. Symbol `<TT>*</TT>'
depicts meaningful differences, symbol `<TT>-</TT>' depicts no meaningful differences.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each matrix ``<I>n</I>" lines (each representing one sample) enumerating sets
to which the sample belongs, and then a line with 5 hyphens.

<P>

<P>
<BR>

<B>Assumptions:</B>
Number of samples in one test does not exceed 10. The most numerous set
acquires the character ``<TT>a</TT>", the second in the line ``<TT>b</TT>" etc. In case of sets
having the same number of elements the first one goes the one which contains
a sample of lower number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
-*-
---
---
3
-**
--*
---
3
---
---
---
4
----
--**
---*
----
9
---*--*--
-----*---
------*--
---------
-------*-
--------*
---------
---------
---------
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
a
b
ab
-----
a
b
c
-----
a
a
a
-----
abc
a
b
c
-----
abgh
abcdef
abcdghij
cdefijkl
acegik
ghijkl
efkl
bdfhjl
abcdef
-----
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
630||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Anagrams (II)</TITLE>
<META NAME="description" CONTENT="Anagrams (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Anagrams (II)</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One of the preferred kinds of entertainment of people living in final stages
of XX century is filling in the crosswords. Almost every newspaper and
magazine has a column dedicated to entertainment but only amateurs have enough
after solving one crossword. Real professionals require more than one
crossword for a week. And it is so dull - just crosswords and crosswords -
while so many other riddles are waiting out there. For those are special,
dedicated magazines. There are also quite a few competitions to take part in,
even reaching the level of World Championships. Anyway - a lot.

<P>

<P>
<BR>
You were taken on by such a professional for whom riddle solving competing is
just a job. He had a brilliant idea to use a computer in work not just to
play games. Somehow anagrams found themselves first in the line. You are to
write a program which searches for anagrams of given words, using a given
vocabulary, tediously filled with new words by yours employer.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

The structure of each dataset is given below:

<P>
<PRE>
&lt;number of words in vocabulary&gt;
&lt;word 1&gt;
..............
&lt;word N&gt;
&lt;test word 1&gt;
................
&lt;test word k&gt;
END
</PRE>

<P>

<code>&lt;number of words in vocabulary&gt;</code> is an integer number <I>N</I> &lt; 1000. <code>&lt;word 1&gt;</code> up
to <code>&lt;word N&gt;</code> are words from the vocabulary. <code>&lt;test word 1&gt;</code> up to <code>&lt;test word k&gt;</code>
are the words to find anagrams for. All words are lowercase (word END means
end of data - it is NOT a test word). You can assume all words are not
longer than 20 characters.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each <code>&lt;test word&gt;</code> list the found anagrams in the following way:

<P>
<PRE>
Anagrams for: &lt;test word&gt;
&lt;No&gt;) &lt;anagram&gt;
...............
</PRE>

<P>

<code>&lt;No&gt;</code> should be printed on 3 chars.

<P>
In case of failing to find any anagrams your output should look like this:

<P>
<PRE>
Anagrams for: &lt;test word&gt;
No anagrams for: &lt;test word&gt;
</PRE>

<P>Print a blank line between datasets.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

8
atol
lato
microphotographics
rata
rola
tara
tola
pies
tola
kola
aatr
photomicrographics
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Anagrams for: tola
  1) atol
  2) lato
  3) tola
Anagrams for: kola
No anagrams for: kola
Anagrams for: aatr
  1) rata
  2) tara
Anagrams for: photomicrographics
  1) microphotographics
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
631||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Microzoft Calendar</TITLE>
<META NAME="description" CONTENT="Microzoft Calendar">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Microzoft Calendar</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It is now year 2003. Five years ago some computer companies and some media
were threatening people about problems which may occur at century break due
to inability of older programs to resolve properly the passing to year 2000.
Media restricted themselves to threatening. Software companies offered
several solutions, though they were all different from each other. To make
the situation even worse, all the solutions had the same, basic drawback -
they were simply patches on old system.

<P>

<P>
<BR>
Thank God there was a company, which did not accept partial solutions, and
all the time was doing its best to make the user's life easier. It was called
Microzoft - name not widely recognised in these ancient times. Its imaginative
boss felt that it was definitely time for a change. With the next version
of revolutionising operating system Doors MKB (Microzoft Knows Better) a new
calendar was introduced. It was thought to solve all the nasty problems.

<P>

<P>
<BR>
The year is divided into two periods: Gill and Bates. Each period is divided
into five months called: Sun, Water, Forest, Mountains and curiously enough -
Money. Each month has 36 days and consists of 6 weeks. Consecutive 6-days
long weeks are called: First, Second, Third, Fourth, Fifth and Sixth.
Remaining 5(6) days do not belong to any of those periods, months nor weeks
and are just to celebrate anniversaries of release of historic product
Doors MKB. Thus they are called: Feast 1, Feast 2 ... Feast 5/6. Dates
in Microzoft's calendar are written in the following way:

<P>

<P>
<BR>

<code>&lt;Period&gt;-&lt;Month&gt;-&lt;Week&gt;-&lt;Number of day in the week&gt;-&lt;Year&gt;</code>, for days 1..360

<P>
<code>&lt;Name of celebration day&gt;-&lt;Year&gt;</code>, for days 361..365/366

<P>

<P>
<BR>
The first day of the first year was 25th June 1998 (day of release of Doors MKB),
how it used to be called in old calendar. In the new one leap years happen when
their numbers are dividable without any rest by 4 and are not dividable without
rest by 100 or are dividable by 400 (That is the way it worked in the old
calendar too). For example 4, 8, 400 are leaping years, but 5, 98, 100 are not.
Dates before release have also a symbol bd (with stands for ``before Doors")
assigned.

<P>

<P>
<BR>
Obviously not all the people appreciated the new idea and it was not accepted
as a standard immediately. However five years of trials (and especially losses
caused by the year 2000) convinced mankind of the greatness of the new calendar.
More and more countries and companies switch to the new system. To ease those
in trouble Microzoft introduces a new pocket device called Microzoft Calendar
Converter. It is your task to program it.

<P>

<P>
<BR>
The schedule of weeks and months in the year is presented below:

<P>

<P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">Days in year</TD>
<TD ALIGN="CENTER">Week</TD>
<TD ALIGN="CENTER">Month</TD>
<TD ALIGN="CENTER">Period</TD>
</TR>
<TR><TD ALIGN="CENTER">1..6</TD>
<TD ALIGN="CENTER">First</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">7..12</TD>
<TD ALIGN="CENTER">Second</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">13..18</TD>
<TD ALIGN="CENTER">Third</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">19..24</TD>
<TD ALIGN="CENTER">Fourth</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">25..30</TD>
<TD ALIGN="CENTER">Fifth</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">31..36</TD>
<TD ALIGN="CENTER">Sixth</TD>
<TD ALIGN="CENTER">Sun</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">37..42</TD>
<TD ALIGN="CENTER">First</TD>
<TD ALIGN="CENTER">Water</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">43..48</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">Water</TD>
<TD ALIGN="CENTER">Gill</TD>
</TR>
<TR><TD ALIGN="CENTER">...........</TD>
<TD ALIGN="CENTER">......</TD>
<TD ALIGN="CENTER">.......</TD>
<TD ALIGN="CENTER">......</TD>
</TR>
<TR><TD ALIGN="CENTER">355..360</TD>
<TD ALIGN="CENTER">Sixth</TD>
<TD ALIGN="CENTER">Money</TD>
<TD ALIGN="CENTER">Bates</TD>
</TR>
<TR><TD ALIGN="CENTER">361..365/6</TD>
<TD ALIGN="CENTER">...........</TD>
<TD ALIGN="CENTER">.............</TD>
<TD ALIGN="CENTER">......</TD>
</TR>
</TABLE></DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
As input you get in consecutive lines dates given as a string written
according to one of the calendars. Dates in the old one are written as
<TT>YYYY-MM-DD</TT>. For simply you are only to write a converter from old to new
calendar. If you get the date in new calendar you simply write
``<TT>Enter date in old format</TT>". End of file is shown as with a line containing
only a string <TT>END</TT>. You can assume that year in old calendar is in range
from 1600 to 5000.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output should contain lines with converted dates (one date per line).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1998-06-25
Feast 2-12
1998-06-24
3476-06-21
2000-06-29
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Gill-Sun-First-1-1
Enter date in old format
Feast 5-1bd
Feast 3-1478
Gill-Sun-First-6-3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
632||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Compression (II)</TITLE>
<META NAME="description" CONTENT="Compression (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Compression (II)</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The fast growth of program sizes and amount of stored data raises the need
for efficient compression algorithms. They can significantly reduce the
amount of storage space. Also the ``Internet boom", still suppressed by slow
links has big influence on new developments in this field.

<P>

<P>
<BR>
One of the most modern methods is block sorting. Its first step performed on
the data is Burrows-Wheeler transform (BWT). The idea, used by the authors,
comes from well-established in image compression Fourier transform and it says:
transform the data to the form which is easier to compress and then
compress it using one of the well-known algorithms.

<P>

<P>
<BR>
Let's assume that as input we have a character string <I>S</I> of length <I>N</I>. The
first step of the transform is to generate from string <I>S</I>, <I>N</I>
strings <I>S</I><SUB>0</SUB>, <I>S</I><SUB>1</SUB>, ..., <I>S</I><SUB><I>N</I>-1</SUB> in the following way:

<P>
<UL>
<LI>string <I>S</I><SUB>0</SUB> is identical to <I>S</I>
<LI>string <I>S</I><SUB><I>k</I></SUB> is generated from string <I>S</I><SUB><I>k</I>-1</SUB> by moving the first character to the end.
</UL>

<P>

<P>
<BR>
The example that illustrates this algorithm is shown below:

<P>
<DIV ALIGN="CENTER">
S = PASCAL

<P>

<P>
<BR>

<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>0</SUB></B></TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>1</SUB></B></TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>2</SUB></B></TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>3</SUB></B></TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>4</SUB></B></TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>5</SUB></B></TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
</TR>
</TABLE></DIV>

<P>
In the second step all the strings are sorted to give:

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>4</SUB></B></TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>1</SUB></B></TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>3</SUB></B></TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>5</SUB></B></TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>0</SUB></B></TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> <I>S</I><SUB>2</SUB></B></TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">A</TD>
</TR>
</TABLE></DIV>

<P>
The results of the transform, which are used in further work are:

<P>
<UL>
<LI>last column of just created array (CPSALA in this case)
<LI>number of the row (starting from 0) in which S1 is placed
</UL>

<P>
It appears that such data are easier to perform an inverse transform and easier to compress by other methods than original input data.

<P>

<P>
<BR>
Your task is to write a program, which performs above-described BWT transform on input string.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>In the first line of each dataset comes an integer <I>N</I> &lt; 1997 which stands for string length.
Subsequent lines contain a string to transform. Each line (besides the last
one) contains exactly 50 characters.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, there should be position of <I>S</I><SUB>1</SUB> string in the first line. Subsequent lines
should contain a string to transform. Each line (besides the last one) should
contain exactly 50 characters. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

6
pascal
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1
cpsala
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
633||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Chess Knight</TITLE>
<META NAME="description" CONTENT="A Chess Knight">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
A Chess Knight</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Presumably everybody knows how a knight can move on a chessboard. One may
agree that its movements are quite monotonous, so to make them more
entertaining let's define a so called ``dynamic knight". A dynamic knight can
perform many different movements that may belong to three types:

<P>
<UL>
<LI>type K: two fields forward (in any direction) and one sidewise - like ``regular knight";
<LI>type B: two fields diagonally - more like a bishop;
<LI>type T: sort of teleportation to a field which is a mirror reflection with respect to any of two axes of symmetry of the chessboard (we take into consideration only axes of symmetry parallel to sides of the chessboard);
</UL>

<P>
The picture below shows all possible movements of a knight divided into three
types K, B and T. Obviously our knight, like the ``regular" one cannot move
outside the chessboard.

<P>
<DIV ALIGN="CENTER">
<img src=p633.gif>
</DIV>

<P>
For a dynamic knight it is not relevant whether the fields between the
starting field and ending one are occupied or not (again like for
the ``regular knight"). It only matters whether the ending field is empty.
Then the movement can be performed. There has to be a restriction
among so many capabilities of a dynamic knight. It cannot perform the
same sort of movements consecutively (just not to fall into routine).

<P>

<P>
<BR>
Having redefined a chess knight, why not to redefine a chessboard? Our
chessboard will be a square of size 
<!-- MATH: $2N \times 2N$ -->
<IMG
 WIDTH="75" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/633img2.gif" 
 ALT="$2N \times 2N$">.
<I>N</I> can be any integer number from
the range of 3..20. There can be several obstacles of any shape on a
chessboard so a knight cannot stop on these defected fields.

<P>

<P>
<BR>
Your task is to write a program which can calculate the minimal number of
movements to get the knight from one given field to another one. It may be
assumed that the first movement can be of any type.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
First line contains the number <I>N</I>, being the size of a chessboard. The second
one contains field coordinates separated by space character, which is a knight
current standpoint. Upper left-hand size corner has coordinates (1, 1).
Third line contains destination field for the knight. Consecutive lines
contain obstacle coordinates and the line with coordinates (0, 0) ends the
obstacle description. Input can contain several sets of data. 

<P>
Input's end
is shown as a line defining chessboard's size as 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
It is supposed to be fairly simple - one line with a single number being
the calculated minimal number of movements.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1 1
1 1
2 2
0 0
10
1 1
20 20
20 1
1 20
3 1
3 2
3 3
2 3
1 3
0 0
10
2 1
18 12
2 2
5 6
7 2
8 3
9 4
1 15
7 12
8 13
9 11
11 9
12 4
11 3
9 5
2 7
3 8
6 5
0 0
3
1 1
5 4
2 2
2 4
2 5
3 1
3 2
3 3
3 6
4 2
4 3
4 5
5 1
5 3
5 5
6 1
6 4
6 5
6 6
0 0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Result : 0
Solution doesn't exist
Result : 6
Result : 4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
634||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Polygon</TITLE>
<META NAME="description" CONTENT="Polygon">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Polygon</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Modern graphic computer programs can, among other, even more stunning
capabilities, fill a closed region. Though not all of them can protect the
user from accidentally choosing to fill the background rather than the inner
part. Besides being a channel hopper at home your boss' favourite
hobby is colouring the pictures, you cannot protest long about adding this
magnificent protection feature to his graphic program.

<P>

<P>
<BR>
This means that your job is to write a program, which determines whether a
point belong to a polygon, given the array of its vertices.

<P>

<P>
<BR>
To make life a bit simpler you may assume that:
<UL>
<LI>all edges of the polygon are vertical or horizontal segments
<LI>lengths of all the edges of the polygon are even integer numbers
<LI>co-ordinates of at least one vertex are odd integer numbers
<LI>both co-ordinates of any vortex cannot be divisible by 7 at the same time
<LI>the investigated point P has both co-ordinates being even integer numbers
<LI>the polygon has at most 1000 vertices
<LI>co-ordinates of the vertices lay in the range: -10000..10000.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input data may consist of several data sets, each beginning with a number
of polygon's vertices (<I>n</I>). Consecutive <I>n</I> lines contain co-ordinates of
the vertices (<I>x</I> followed by <I>y</I>). Then go the co-ordinates of investigated
point P. Input data end when you find 0 the number of polygon's vertices.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each polygon and each point P you should print one character (in
separate lines): <TT>T</TT> when P belongs to the polygon or <TT>F</TT> otherwise.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1 1
1 3
3 3
3 1
2 2
12
1 1
1 9
3 9
3 5
5 5
5 9
7 9
7 1
5 1
5 3
3 3
3 1
4 2
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
T
F
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
635||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Clock solitaire</TITLE>
<META NAME="description" CONTENT="Clock solitaire">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Clock solitaire</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One card set is (52 cards) used in clock solitaire. Each card corresponds to
one hour.

<P>
<PRE><TT>
<TT>J</TT> 		 one o'clock 
<TT>2,3,...,10</TT> 		 2 o'clock, 3 o'clock etc. 
<TT>A</TT> 		 11 o'clock 
<TT>Q</TT> 		 12 o'clock 
<TT>K</TT> 		 centre of the clock board
</TT></PRE>

<P>
We give out cards placing (covers up) 4 cards per each hour and centre of
clock board. The aim if the game is to uncover all the cards and rearranging
them so that each card lies on its corresponding hour.

<P>

<P>
<BR>
The first move is to uncover the lowest card from the centre. Holding one
card in hand we can make only one sort of movement - place the card on its
corresponding hour (or in the centre if it is a king) and take the lowest
card from its heap. We iterate this procedure as long as possible.

<P>
The game is successful if you manage to uncover all the cards and -
consequently - lost if even single card remains uncovered.

<P>

<P>
<BR>
Widely known International Association of Solitaire Fans was curious which
card sequence produces best results (meaning highest number of successful
games). You are to help them by writing a program which reads the initial
cards layout and checks how many of 52 cyclic shifts of this string are
successful.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Each input file contains a few sequences of 52 cards separated by end line
marks. We give out cards clockwise, starting from the lowest on the first hour
and finishing with the uppermost in the center. End if file is marked by a
line contains 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each card sequence print one line with the number of successful games
among 52 its cyclic shifts.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P><PRE>
7 J 9 3 J Q K A 2 3 4 5 6 7 8 9 T 8 Q K A 2 3 4 5 6 7 8 9 T J Q K A 2 3 4 5 6 7 8 9 T J Q K A 2 T 4 5 6
0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
636||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Squares</TITLE>
<META NAME="description" CONTENT="Squares">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Squares</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A few days earlier a certain mathematician had been fired from his job so
he has made up his mind to take revenge on his former employers and has
changed all the numbers in their databases to their corresponding forms in
different numerical systems using different bases. At the beginning it
seemed to everyone to be just a stupid joke and hopefully they would soon
find the correct data hidden somewhere. They were wrong, because even the
backup database copies have been changed. The only hint, they were given was
that all the data had been transformed to systems with such a base that it is
the smallest base in which input numbers are squares.

<P>

<P>
<BR>
Your task is to find these bases. You need to hurry up, because the whole
firm's activity depends on your database fix. You may however assume that:

<P>
<UL>
<LI>for each number, there exists a sought base and it is less than 100
<LI>all the digits in input numbers are characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
<LI>each number written in decimal system is smaller that 1000000000
</UL>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Data set consists of lines containing single numbers. Occurrence of 0 means
the end of data set (0 is not treated as valid data).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each number you should find a smallest base of a numerical system in
which this number is a square of some other number. Each number should be
outputted in separate line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
61
1100
509
510
1013
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
8
3
12
16
6
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-10</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
637||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Booklet Printing</TITLE>
<META NAME="description" CONTENT="Booklet Printing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Booklet Printing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
When printing out a document, normally the first page is printed first,
then the second, then the third, and so on until the end. However, when
creating a fold-over booklet, the order of printing must be altered.
A fold-over booklet has four pages per sheet, with two on the front and 
two on the back.  When you stack all the sheets in order, then fold the 
booklet in half, the pages appear in the correct order as in a
regular book.

<P>
For example, a 4-page booklet would print on 1 sheet of paper: the front
will contain page 4 then page 1, and the back will contain page 2 then page 3.

<P>
<PRE>
                       Front              Back
                       -------------      -------------
                       |     |     |      |     |     |
                       |  4  |  1  |      |  2  |  3  |
                       |     |     |      |     |     |
                       -------------      -------------
</PRE>

<P>
Your task is to write a program that takes as input the number of pages
to be printed, then generates the printing order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more test cases, followed by a line
containing the number 0 that indicates the end of the file.  

<P>
Each test case consists of a positive integer <I>n</I> on a line by itself,
where <I>n</I> is the number of pages to be printed; <I>n</I> will not exceed
100.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, output a report indicating which pages should
be printed on each sheet, exactly as shown in the example. If the
desired number of pages does not completely fill up a sheet, then
print the word <TT>Blank</TT> in place of a number. If the front or back of a
sheet is entirely blank, do not generate output for that side of the
sheet. 

<P>
Output must be in ascending order by sheet, front first, then
back.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
14
4
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Printing order for 1 pages:
Sheet 1, front: Blank, 1
Printing order for 14 pages:
Sheet 1, front: Blank, 1
Sheet 1, back : 2, Blank
Sheet 2, front: 14, 3
Sheet 2, back : 4, 13
Sheet 3, front: 12, 5
Sheet 3, back : 6, 11
Sheet 4, front: 10, 7
Sheet 4, back : 8, 9
Printing order for 4 pages:
Sheet 1, front: 4, 1
Sheet 1, back : 2, 3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
638||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Finding Rectangles</TITLE>
<META NAME="description" CONTENT="Finding Rectangles">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Finding Rectangles</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Consider the point sets in figures 1a, 2a, and 3a.  Using only
those points as vertices, figures 1b, 2b, and 3b show all the
rectangles that can be formed with horizontal and vertical sides.  No
rectangles can be formed from the points in figure 4.

<P>
<DIV ALIGN="CENTER">
<img src=p638.gif>
</DIV>

<P>
Your task is to write a program that can find all rectangles that
can be formed from a given set of points.  The example input and
output given below correspond to the figures above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more point sets, followed by a
line containing the number 0 that signals the end of the file.  Each
point set begins with a line containing <I>n</I>, the number of points, and
is followed by <I>n</I> lines that describe the points.  Each point
description contains a capital letter that is the label of the point,
then a space, the horizontal coordinate, a space, and the vertical
coordinate.  Within each set, points labels occur in alphabetical
order.  

<P>
Note that since each point is labelled with a capital letter
there can be at most 26 points.  All coordinates are nonnegative integers 
less than 50.  Points within a set are unique.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each point set starts with ``<TT>Point set </TT>", followed by
the number of the point set and a colon.  If there are no rectangles,
``<TT> No rectangles</TT>" appears after the colon.  If there are rectangles,
they are listed starting on the next line.  A blank precedes each
rectangle.  Each rectangle is given by its vertex labels, in clockwise
order from the upper left, so the order is upper left, upper right,
lower right, lower left.  
The rectangles are listed ten per line,
except for the last line, where there may be as few as one.
The rectangles are listed in alphabetical order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7
A 1 1     
B 2 1     
C 3 1     
D 2 3     
E 3 3     
F 1 4     
G 3 4     
8         
B 1 1      
D 2 1      
F 4 1      
J 4 4      
L 2 4
M 2 3
N 4 3      
P 1 2      
12
A 1 5
B 2 5
C 1 4
D 2 4
E 1 3
F 2 3
G 1 2
H 2 2
I 1 1
J 2 1
K 1 0
L 2 0
5
B 1 1
D 2 1
L 2 4
N 2 3
P 1 2
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Point set 1:
 DECB FGCA
Point set 2:
 LJFD LJNM MNFD
Point set 3:
 ABDC ABFE ABHG ABJI ABLK CDFE CDHG CDJI CDLK EFHG
 EFJI EFLK GHJI GHLK IJLK
Point set 4: No rectangles
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
639||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Don't Get Rooked</TITLE>
<META NAME="description" CONTENT="Don't Get Rooked">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Don't Get Rooked</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In chess, the rook is a piece that can move any number of squares
vertically or horizontally.  In this problem we will consider small
chess boards (at most 4<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/639img1.gif" 
 ALT="$\times$">4) that can also contain walls through which
rooks cannot move.  The goal is to place as many rooks on a board as
possible so that no two can capture each other.  A configuration of
rooks is   
<B><I>legal</I></B> provided that no two rooks are on the same
horizontal row or vertical column unless there is at least one wall
separating them.

<P>

<P>
<BR>
The following image shows five pictures of the same board.  The
first picture is the empty board, the second and third pictures show legal
configurations, and the fourth and fifth pictures show illegal configurations.
For this board, the maximum number of rooks in a legal configuration
is 5; the second picture shows one way to do it, but there are several
other ways.

<P>
<DIV ALIGN="CENTER">
<img src=p639.gif>
</DIV>

<P>
Your task is to write a program that, given a description of a board,
calculates the maximum number of rooks that can be placed on the
board in a legal configuration.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more board descriptions, followed by
a line containing the number 0 that signals the end of the file. Each
board description begins with a line containing a positive integer <B><I>n</I></B>
that is the size of the board; <B><I>n</I></B> will be at most 4. The next <B><I>n</I></B>
lines each describe one row of the board, with a `<TT>.</TT>' indicating an
open space and an uppercase `<TT>X</TT>' indicating a wall.  There are no
spaces in the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, output one line containing the
maximum number of rooks that can be placed on the board
in a legal configuration.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
.X..
....
XX..
....
2
XX
.X
3
.X.
X.X
.X.
3
...
.XX
.XX
4
....
....
....
....
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
5
1
5
2
4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
640||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Self Numbers</TITLE>
<META NAME="description" CONTENT="Self Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Self Numbers</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In 1949 the Indian mathematician D.R. Kaprekar discovered a class
of numbers called self-numbers. For any positive integer <I>n</I>, define
<I>d</I>(<I>n</I>) to be <I>n</I> plus the sum of the digits of <I>n</I>. (The <I>d</I> stands
for <EM>digitadition</EM>, a term coined by Kaprekar.) For example, <I>d</I>(75) = 75 + 7 + 5 = 87.  Given any positive integer <I>n</I> as a starting
point, you can construct the infinite increasing sequence of integers
<I>n</I>, <I>d</I>(<I>n</I>), <I>d</I>(<I>d</I>(<I>n</I>)), 
<!-- MATH: $d(d(d(n)))$ -->
<I>d</I>(<I>d</I>(<I>d</I>(<I>n</I>))), .... For example, if you start with
33, the next number is 33 + 3 + 3 = 39, the next is 39 + 3 + 9 = 51, the next
is 51 + 5 + 1 = 57, and so you generate the sequence

<P>
<PRE>
33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
</PRE>

<P>
The number <I>n</I> is called a  
<B><I>generator</I></B>  of <B><I>d</I>(<I>n</I>)</B>.  In the
sequence above, 33 is a generator of 39, 39 is a generator of 51, 51
is a generator of 57, and so on.  Some numbers have more than one
generator: for example, 101 has two generators, 91 and 100.  A number
with 
<B><I>no</I></B> generators is a  

<!-- MATH: $self-number$ -->
<B><I>self</I>-<I>number</I></B>. There are thirteen
self-numbers less than 100: 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86,
and 97.  

<P>

<P>
<BR>
Write a program to output all positive self-numbers less than or equal 1000000
in increasing order, one per line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1
3
5
7
9
20
31
42
53
64
 |
 |       &lt;-- a lot more numbers
 |
9903
9914
9925
9927
9938
9949
9960
9971
9982
9993
 |
 |
 |
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
641||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Do the Untwist</TITLE>
<META NAME="description" CONTENT="Do the Untwist">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Do the Untwist</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>


<!-- MATH: $Cryptography$ -->
<B><I>Cryptography</I></B>  deals with methods of secret communication that
transform a message (the  
<B><I>plaintext</I></B>) into a disguised form (the


<!-- MATH: $ciphertext$ -->
<B><I>ciphertext</I></B>) so that no one seeing the ciphertext will be able
to  figure out the plaintext except the intended recipient.
Transforming the plaintext to the ciphertext is  

<!-- MATH: $encryption$ -->
<B><I>encryption</I></B>;
transforming the ciphertext to the plaintext is  

<!-- MATH: $decryption$ -->
<B><I>decryption</I></B>.
 
<B><I>Twisting</I></B>  is a simple encryption method that requires that the
sender and recipient both agree on a secret key <B><I>k</I></B>, which is a
positive integer.

<P>

<P>
<BR>
The twisting method uses four arrays: <EM>plaintext</EM> and <EM>ciphertext</EM>
are arrays of characters, and <EM>plaincode</EM> and <EM>ciphercode</EM> are
arrays of integers.  All arrays are of length <B><I>n</I></B>, where <B><I>n</I></B> is the
length of the message to be encrypted.  Arrays are origin zero, so the
elements are numbered from 0 to <B><I>n</I> - 1</B>.  For this problem all
messages will contain only lowercase letters, the period, and the
underscore (representing a space).

<P>

<P>
<BR>
The message to be encrypted is stored in <EM>plaintext</EM>.  Given a key
<B><I>k</I></B>, the encryption method works as follows.  First convert the
letters in <EM>plaintext</EM> to integer codes in <EM>plaincode</EM> according to
the following rule: `<code>SPMamp</code>_&amp;' = 0, `<TT>a</TT>' = 1, `<TT>b</TT>' = 2, ..., `<TT>z</TT>' = 26,
and `<TT>.</TT>' = 27.  Next, convert each code in <EM>plaincode</EM> to an
encrypted code in <EM>ciphercode</EM> according to the following formula: for all
<B><I>i</I></B> from 0 to <B><I>n</I> - 1</B>,

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
ciphercode[i] = (plaincode[ki \bmod n] -  i) \bmod 28.
\end{displaymath} -->


<IMG
 WIDTH="378" HEIGHT="31"
 SRC="http://uva.onlinejudge.org/external/6/641img1.gif" 
 ALT="\begin{displaymath}ciphercode[i] = (plaincode[ki \bmod n] - i) \bmod 28.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
(Here <IMG
 WIDTH="67" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/641img1.gif" 
 ALT="$x \bmod y$">
is the positive remainder when <B><I>x</I></B> is divided by <B><I>y</I></B>.
For example, 3 <IMG
 WIDTH="40" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/641img1.gif" 
 ALT="$\bmod$">
7 = 3, 22 <IMG
 WIDTH="40" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/641img1.gif" 
 ALT="$\bmod$">
8 = 6, and -1 <IMG
 WIDTH="40" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/641img1.gif" 
 ALT="$\bmod$">
28 = 27.  You
can use the C `<TT>%</TT>' operator or Pascal `<TT>mod</TT>' operator to compute
this as long as you add <B><I>y</I></B> if the result is negative.)

<P>
Finally, convert the codes in <EM>ciphercode</EM> back to letters in
<EM>ciphertext</EM> according to the rule listed above.  The final twisted
message is in <EM>ciphertext</EM>. Twisting the message ``<TT>cat</TT>" using the key 5 yields the following:

<P>

<P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT">Array</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">2</TD>
</TR>
<TR><TD ALIGN="LEFT"><EM> plaintext</EM></TD>
<TD ALIGN="CENTER">'c'</TD>
<TD ALIGN="CENTER">'a'</TD>
<TD ALIGN="CENTER">'t'</TD>
</TR>
<TR><TD ALIGN="LEFT"><EM> plaincode</EM></TD>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">20</TD>
</TR>
<TR><TD ALIGN="LEFT"><EM> ciphercode</EM></TD>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">19</TD>
<TD ALIGN="CENTER">27</TD>
</TR>
<TR><TD ALIGN="LEFT"><EM> ciphertext</EM></TD>
<TD ALIGN="CENTER">'c'</TD>
<TD ALIGN="CENTER">'s'</TD>
<TD ALIGN="CENTER">'.'</TD>
</TR>
</TABLE></DIV>

<P>

<P>
<BR>
Your task is to write a program that can <EM>untwist</EM> messages,
<EM>i.e.</EM>, convert the ciphertext back to the original
plaintext given the key <B><I>k</I></B>.  For example, given the key 5 and
ciphertext `<TT>cs.</TT>', your program must output the plaintext `<TT>cat</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains one or more test cases, followed by a line
containing only the number 0 that signals the end of the file.
Each test case is on a line by itself and consists of the key <B><I>k</I></B>, a
space, and then a twisted message containing at least one and at most 70
characters.  The key <B><I>k</I></B> will be a positive integer not greater than
300.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, output the untwisted message on a line
by itself.

<P>

<B>Note:</B> you can assume that untwisting a message always yields
a unique result.  (For those of you with some knowledge of basic number
theory or abstract algebra, this will be the case provided that the
greatest common divisor of the key <B><I>k</I></B> and length <B><I>n</I></B> is 1, which it
will be for all test cases.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 cs.
101 thqqxw.lui.qswer
3 b_ylxmhzjsys.virpbkr
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
cat
this_is_a_secret
beware._dogs_barking
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
642||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Word Amalgamation</TITLE>
<META NAME="description" CONTENT="Word Amalgamation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Word Amalgamation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In millions of newspapers across the United States there is a word
game called <EM>Jumble</EM>.  The object of this game is to solve a
riddle, but in order to find the letters that appear in the answer it
is necessary to unscramble four words.  Your task is to write a
program that can unscramble words.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains four parts: 

<P>
<DL COMPACT>
<DT>1.
<DD>a dictionary, which consists of at least one and at most 100 words, one per line; 
<DT>2.
<DD>a line containing <TT>XXXXXX</TT>, which signals the end of the dictionary; 
<DT>3.
<DD>one or more scrambled `words' that you must unscramble, each on a line by
itself; and 
<DT>4.
<DD>another line containing <TT>XXXXXX</TT>, which signals the end
of the file.  
</DL>

<P>
All words, including both dictionary words and scrambled
words, consist only of lowercase English letters and will be at least
one and at most six characters long.  (Note that the sentinel <TT>XXXXXX</TT>
contains uppercase <TT>X</TT>'s.)  The dictionary is not necessarily in
sorted order, but each word in the dictionary is unique.  

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scrambled word in the input, output an alphabetical list
of all dictionary words that can be formed by rearranging the letters
in the scrambled word.  Each word in this list must appear on a line
by itself.  If the list is empty (because no dictionary words can be
formed), output the line ``<TT>NOT A VALID WORD</TT>" instead.  In either
case, output a line containing six asterisks to signal the end of the
list.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
tarp
given
score
refund
only
trap
work
earn
course
pepper
part
XXXXXX
resco
nfudre
aptr
sett
oresuc
XXXXXX
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
score
******
refund
******
part
tarp
trap
******
NOT A VALID WORD
******
course
******
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
643||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Bulk Mailing</TITLE>
<META NAME="description" CONTENT="Bulk Mailing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Bulk Mailing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
 
An organization that wishes to make a large mailing can save postage by following U.S. Postal 
Service rules for a bulk mailing. Letters in zip code order are bundled into packets of 10-15 letters 
each.  Bundles may consist of letters in which all 5 digits of zip code are the same (5-digit bundles), or they may consist of letters in which only the first 3 digits of zip code are the same (3-digit bundles).  If there are fewer than 10 letters to make up a bundle of either type, those letters are mailed first class.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input &amp; Output</A>&nbsp;</FONT>
</H2>
You are to write a program to read a data set of 5-digit zip codes, one per line, until end of file.  
Your program should count the number of 5-digit bundles, 3-digit
bundles, and first class letters.  You should include as many letters as possible in 5-digit bundles first, then as many as possible in 3-digit bundles, with as few bundles of 10 to 15 letters as possible. For example, if there are 31 letters with the same zip code, they must be combined into 
exactly three 5-digit bundles.  If there are 16 letters and you have to make a 3-digit bundle, you should combine the 15 with lowest zip code.

<P>

<P>
<BR>
Not all zip codes in the data set will be valid.  A valid zip code consists of exactly 5 digits (0-9), all of which cannot be 0.  Non-numeric characters are not allowed.  At the end of your output, print the invalid zip codes found.  (Duplicates need only be printed once.)

<P>

<P>
<BR>
Print a report that lists 5-digit zip code bundles first, with the number of letters and number of 
bundles for each zip code.  Next list all 3-digit zip code bundles with the same two counts, followed 
by all zip codes that are not bundled and to be sent first class.  At the end print totals of letters and 
bundles, followed by a list of invalid zip codes.  Single space the report, 
and print blank lines following the heading, before the total line, and between the three groups of 
zip codes.  

<P>
For 3-digit bundles, print the zip codes in the form <TT>dddxx</TT>, where <TT>ddd</TT> represents the 
three significant digits and <TT>xx</TT> represents the last two digits to be omitted. 

<P>

<P>
<BR>
Your output should be similar to that shown in the sample. Valid zip codes should be printed in ascending order, and
invalid zip codes should be printed in the order in which they appear in the input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
95864
95864
95864
95867
95920
9j876
95616                 
95616                 
95747                 
95814                 
95818                 
95818                 
8976
95818                 
95818                 
95819                 
95819                 
00000
95819                 
95819                 
95819                 
95819                 
95819                 
95825
95825
95825
95825
95825
95826
95826
95826
95826
95826
95826
95827
8976
95833
95833
95833
95833
95819                 
95819
95819
95819
95833
95833
95833
95864
95864
95864
123456
95864
95864
95864
95864
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
ZIP         LETTERS     BUNDLES

95819         11           1
95864         10           1

958xx         25           2

95616          2           0
95747          1           0
95920          1           0

TOTALS        50           4

INVALID ZIP CODES
9j876
8976
00000
123456
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
644||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Immediate Decodability</TITLE>
<META NAME="description" CONTENT="Immediate Decodability">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Immediate Decodability</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An encoding of a set of symbols is said to be <EM>immediately</EM> decodable if no code for one symbol is 
the prefix of a code for another symbol.  We will assume for this problem that all codes are in 
binary, that no two codes within a set of codes are the same, that each code has at least one bit 
and no more than ten bits, and that each set has at least two codes and no more than eight.

<P>

<P>
<BR>

<B>Examples:</B>  Assume an alphabet that has symbols  {<TT>A, B, C, D</TT>}

<P>

<P>
<BR>
The following code is immediately decodable:

<P>

<P>
<BR>

<code>     A:01   B:10   C:0010   D:0000</code>

<P>

<P>
<BR>
but this one is not:

<P>

<P>
<BR>

<code>     A:01   B:10   C:010   D:0000</code>    (Note that <TT>A</TT> is a prefix of <TT>C</TT>)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Write a program that accepts as input a series of groups of records from a data file.
Each record in a group contains a collection of zeroes and ones representing a binary code for a 
different symbol.  Each group is followed by a single separator record containing a single 9; the 
separator records are not part of the group. Each group is independent of other groups; the codes 
in one group are not related to codes in any other group (that is, each group is to be processed 
independently).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each group, your program should determine whether the codes in that group
are immediately decodable, and should print a single output line giving the group number and 
stating whether the group is, or is not, immediately decodable.

<P>

<P>
<BR>
The Sample Input describes the examples above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
01
10
0010
0000
9
01
10
010
0000
9
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Set 1 is immediately decodable
Set 2 is not immediately decodable
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
645||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>File Mapping</TITLE>
<META NAME="description" CONTENT="File Mapping">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
File Mapping</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It is often helpful for computer users to see a visual representation of the file structure on their
computers.  The ``explorer" in Microsoft Windows is an example of such a system.  Before the 
days of graphical user interfaces, however, such visual representations were not possible.  The 
best that could be done was to show a static ``map" of directories and files, using indentation as a 
guide to directory contents.  For example:

<P>
<PRE>
ROOT
|     DIR1
|     File1
|     File2
|     File3
|     DIR2
|     DIR3
|     File1
File1
File2
</PRE>

<P>
This shows that the root directory contains two files and three subdirectories.  The first 
subdirectory contains 3 files, the second is empty and the third contains one file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Write a program that reads a series of data sets representing a computer file structure.
A data set ends with a line containing a single `<TT>*</TT>', and the end of valid
data is denoted by a line containing a single `<TT>#</TT>'.  

<P>
The data set contains a series of file and directory 
names.  (The root directory is assumed to be the starting point.) The end of a directory is denoted 
by a `<TT>]</TT>'.  

<P>
Directory names begin with a lower case `<TT>d</TT>' and file names begin with a lower case `<TT>f</TT>'.  
File names may or may not have an extension (such as <TT>fmyfile.dat</TT> or <TT>fmyfile</TT>).  

<P>
File and directory names may not contain spaces. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The contents of any directory should list any subdirectories first, followed by files, if any.  
All files should be in alphabetical order within each directory.  

<P>
Note that each data set output is 
marked by the label `<TT>DATA SET </TT><I>x</I><TT>:</TT>', where <I>x</I> denotes the number of the set, beginning at 1.  

<P>
Note also the blank line between the output data sets.  Each level of indentation should show a `<TT>|</TT>' followed by 5 spaces.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
file1
file2
dir3
dir2
file1
file2
]
]
file4
dir1
]
file3
*
file2
file1
*
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
DATA SET 1:
ROOT
|     dir3
|     |     dir2
|     |     file1
|     |     file2
|     dir1
file1
file2
file3
file4

DATA SET 2:
ROOT
file1
file2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
646||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Gourmet Club</TITLE>
<META NAME="description" CONTENT="The Gourmet Club">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Gourmet Club</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The gourmet club of ACM City has 16 members. They contracted the proprietor of the local 
French restaurant Chateau Java to arrange dinner parties for 5 consecutive evenings. They asked 
to be seated around 4 tables, 4 persons per table. They also stipulated that during the 5 evenings, 
every member of the club will share a table exactly once with each member of the club. Mr. I.B. 
Emm, the restaurateur, assigned his Maitre D' the task of scheduling the seating for the 5 
evenings. 

<P>
On the first evening, the Maitre D'Â’ seated the members as they arrived and recorded 
their seating. Each subsequent evening, he carefully planned the seating to match the 
requirement that no member will be dining twice with some other member.  Unfortunately, the 
Maitre D'Â’ disappeared on the morning of the fourth evening. Mr. Emm was left only with his notes 
which included the recorded seating arrangements during the previous 3 evenings. As he was 
trying to schedule the seating for the remaining evenings, it dawned on him that this task may not 
be that easy. He is asking for your help to try and see whether the remaining two evenings can be 
scheduled.  The following is a sample of the Maitre D's seating arrangements during the first 3 evenings:

<P>
<PRE>
ABCD	EFGH	IJKL	MNOP
AEIM	BFJN	CGKO	DHLP
AFKP	BGLM	CHIN	DEJO
</PRE>

<P>
The members of the gourmet club were identified by the letters <TT>A,B,C,...,P</TT>.
  
Each line represents one evening of seating with each set of four letters a single table. Thus on 
the first evening <TT>A</TT> dines with <TT>B</TT>, <TT>C</TT> and <TT>D</TT>, etc.   Write a program that will read from the input file the 
seating arrangement  of the first three evenings and will either complete the schedule or 
determine that the Maitre D'Â’ screwed up.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will be a text file. Each data set will be 3 lines. Each line will consist of four blocks, each 4 
letters long. All letters will be in upper case. Blocks will be separated by ``white spaces". Data sets
will be separated by blank lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For a successful schedule, echo the input (including extra white spaces) and add two lines
showing the successful schedule.  If it is not possible to complete the schedule, do not echo the 
input, but print ``<TT>It is not possible to complete this schedule.</TT>"  

<P>
Separate output for each data set with a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
ABCD	EFGH	IJKL	MNOP
AEIM	BFJN	CGKO	DHLP
AFKP	BGLM	CHIN	DEJO
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
It is not possible to complete this schedule.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
647||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Chutes and Ladders</TITLE>
<META NAME="description" CONTENT="Chutes and Ladders">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Chutes and Ladders</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A popular board game for children is called ``Chutes and Ladders".  The board has squares which
are numbered from 1 to 100, and players have counters which start on the theoretical square 0.  
The players take turns at throwing a die with the numbers 1 to 6 on it, and each moves his or her 
counter forward the number of squares corresponding to the number on the die (the square they 
reach is found by adding the die number to the square number their counter is on).  The first 
person to reach square 100 is the winner. 

<P>

<P>
<BR>
The interest is caused by the fact that pairs of squares are connected together by ``ladders" (which
connect a lower-numbered square to a higher-numbered square) and ``chutes" (which run from
high to low).  If a counter lands on the start of a chute or ladder (i.e., this is the square reached 
after throwing the die), then the counter is moved to the corresponding square at the end of the 
chute or ladder.  Note that landing on the end square of a ladder or a chute has no effect, only the 
start square counts.  Furthermore, there are some squares such that if a player's counter lands on 
them, then the player must either miss the next turn, or immediately throw the die again for 
another turn, depending on what is written on the board.  A miss-a-turn or extra-turn square is 
never the start or end of a ladder or chute.  If a player is on square 95 or higher, then a die throw 
which takes them past 100 must be ignored - thus a player on square 99 must ignore all throws 
which are not 1.  

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input will start with a set of less than 1000 die throws
which you must use for all games, starting each new game with the first player ``throwing" the first
number in the set, the next player ``throwing" the second number, and so on.  This set of die
throws will simply be a list of random numbers between 1 and 6, separated by single spaces, with 
not more than 80 characters on each line.  It will be terminated by the number 0.  

<P>

<P>
<BR>
After this set of 
die throws, there will be one or more game sets.  Each game set is in three parts.  

<P>
The first part is 
a line containing a single number giving the number of players in the game.  This will be more 
than 1 and less than 6.  Then the board is described, in two parts. 

<P>
The first part lists the ladders 
and the chutes on the board, each ladder or chute being defined on a single line.  Each is given by 
two numbers, from 1 to 99, separated by one or more spaces.  The first number gives the start 
square, and the second number gives the end square; so it is a ladder if the first number is less 
than the second number, and a chute if the order is the other way.  The chute/ladder definitions 
are terminated by a line containing two 0's.  

<P>
The second part of the board description gives the 
lose-a-turn/extra-turn squares, if there are any.  These are single numbers, one per line, defining 
the squares.  If the number is negative, its positive counterpart is a lose-a-turn square; if positive, 
it represents an extra-turn square.  (For example, -16 means that square 16 on the board is a 
lose-a-turn square, while a 25 means that players landing on square 25 must immediately roll 
again.)   

<P>
The end of this set of descriptions, and of the game description, is given by a single 0.  

<P>

<P>
<BR>
The end of all the game descriptions is given by a game with the number of players equal to 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output must be one line for each game in the input, giving the number of the player who wins the 
game.  Every game will determine a winner in fewer throws than those given at the start of the data.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 6 3 2 5 1 3 4 2 3 1 2 0
2
6 95
99 1
0 0
-3
98
0
2
3 99
6 90
0 0
0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
2
2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
648||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Stamps</TITLE>
<META NAME="description" CONTENT="Stamps">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Stamps</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Have you done any Philately lately? 
You have been hired by the Ruritanian Postal Service (RPS) to design their new postage 
software.  The software allocates stamps to customers based on customer needs and the 
denominations that are currently in stock.

<P>

<P>
<BR>
Ruritania is filled with people who correspond with stamp collectors. As a service to these people, 
the RPS asks that all stamp allocations have the maximum number of different types of stamps in 
it.  In fact, the RPS has been known to issue several stamps of the same denomination in order to 
please customers (these count as different types, even though they are the same denomination).  
The maximum number of different types of stamps issued at any time is twenty-five.

<P>

<P>
<BR>
To save money, the RPS would like to issue as few duplicate stamps as possible (given the constraint that they want to issue as many different types).  Further, the RPS won't sell more than four stamps at a time.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for your program will be pairs of positive integer sequences, consisting of two lines, 
alternating until end-of-file.  The first sequence are the available values of stamps, while the second sequence is a series of customer requests.  

<P>

<P>
<BR>

<B>Note:</B> the comments in the sample input are <B>not</B> part of the data file; data files contain only integers. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each customer, you should print the ``best" combination that is exactly equal to the customer's
needs, with a maximum of four stamps. If no such combination exists, print ``<TT>none</TT>".

<P>
The ``best" combination is defined as the maximum number of different stamp types.  In case of a
tie, the combination with the fewest total stamps is best.  If still tied, the set with the highest single-value stamp is best.  If there is still a tie, print ``<TT>tie</TT>".

<P>
As you can see in the sample output below, you should print the customer request, the number of types sold and the actual stamps in non-decreasing order.  
In case of no legal allocation, the line should look like it does in the example, with four hyphens 
after a space.  In the case of a tie, still print the number of types but do not print the allocation 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 3 0	        ; three different stamp types
7 4 0           ; two customers
1 1 0           ; a new set of stamps (two of the same type)
6 2 3 0	        ; three customers
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
7 (3): 1 1 2 3 
4 (2): 1 3 
6 ---- none
2 (2): 1 1
3 (2): tie
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
649||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>You Who?</TITLE>
<META NAME="description" CONTENT="You Who?">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<!--H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
You Who?</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1-->

<P>On the first day of first grade at Friendly Elementrary School, it is customary for each student to
spend one minute talking to every classmate that he or she does not already know. When student
Bob sees an unfamilar face, he says ``You who?'' A typical response is ``Me Charlie, you who?''
Then Bob says, ``Me Bob!'' and they talk for a minute. It's very cute. Then, after a minute, they
part and each looks for another stranger to greet. This takes time. In class of twenty
mutual strangers, it takes 19 minutes; time that, according to teachers, could be better spent learning
the alphabet. Of course, it is rare to have a first grade class where nobody knows anyone else; there
are neighbors and playmates who already know each other, so they don't have to go through the
get-to-know-you minutes with each other.

<P>The two first grade teachers have requested that, to save time, students be allocated to 
their two classes so that the difference in the sizes of the classes is at most one, 
and the maximal number of introductions per person is as small as possible. 
There are no more than 24 students in the incoming first grade class.</P>

<P>How can the assignment of students to classes be made? Your job is to write the software that answers the question.</p>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input</A></FONT></H2>
The input data consists of a number of test cases. Subsequent cases are separated by a single blank line.

<p>The descriptions of the test cases follow. The first line of a test case description contains 
one integer N (1 <= N <= 24), denoting the total number students. Each of the next N lines contains the record
about one student's friendships, represented as lists of numbers. 

<p>If there are N students, then they are represented by the numbers 1 to N. The record for
a single student includes, first, his/her student identification number (1 to N), then
the number of his/her acquaintances, then a list of them in no particular order. So, for example, this record

<PRE>
17 4 5 2 14 22
</PRE>

<P>
indicates that student 17 knows 4 students: 5, 2, 14 and 22. 

<P>
The following test case
<PRE>
4
1 2 3 4
2 2 3 4
3 2 1 2
4 2 1 2
</PRE>

indicates that 1 doesn't know 2, and 3 doesn't know 4, but all other pairs know each other.

<P>
The input data has been checked for consistency, so that if A knows B, then B knows A.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<p><b>For each test case, the output must follow the description below. The outputs of two consecutive cases will be separated by a blank line. </b></p>

Your output for each case should contain three lines.
In the first line there should be the maximal number of introductions per person 
in the best possible legal class assignment. 

The second and third lines describe the two class 
enrollments that achieves that bound. 

An enrollment for each class
is represented by the number of students 
in the class, and then a list of the students in the class, 
in increasing order separated by single spaces. 

If there is more than one such assignment, anyone will do.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1 2 3 4
2 2 3 4
3 2 1 2
4 2 1 2

2
1 1 2
2 1 1
</PRE>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
0
2 1 3
2 2 4

0
1 1
1 2
</PRE>

<HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
650||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Bowl</TITLE>
<META NAME="description" CONTENT="Bowl">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Bowl</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Technology hasn't come quickly to Joe's Bowl-a-rama. Minimum wage teens, and not those fancy
machines, still reset the pins, and the grizzled veteran bowlers still mark up their own score sheets.
Unfortunately for Joe Junior, who now runs the Bowl-a-rama, people his age are a little shaky on
the scoring, especially after the second beer, and are staying away in droves, bowling instead at the
new CyberBowl 2000 down the street, which scores automatically. Joe Junior figures that if he
puts a cheap PC next to every lane, he can get a cheap, semi-automatic scoring system going. His
plan is for the PC's to run software that only requires a bowler to enter the number of pins that
remain standing after every throw - and the software will keep score and tell the bowler when his
game is over. Joe Junior would like to hire you to write the software.

<P>

<P>
<BR>
Of course, since you may not know how to score a game of bowling either, Joe Junior has provided
a description of the rules. The basic game consists of ten frames. In a frame, you get two chances
to throw a ball down the alley and knock over as many pins as you can. There are ten pins
standing at the beginning of a frame, and none are replaced after getting knocked over on the first
ball, so the most pins you can knock over in a frame is ten. You get one point for each pin knocked
over. In addition, there are two bonuses you can earn. If you knock over all ten pins on your first
ball of the frame, you have scored a ``strike''; besides the ten points for the pins, your score in this
frame is increased by the total number of pins knocked down with your next two balls. Those next
two balls are usually part of another frame (or two) and score points in that frame (or those frames)
as well. If you knock over all ten pins in a frame, but it takes you two balls to do it, you have
scored a ``spare''; in addition to your ten points for pins knocked down, your score for the frame is
increased by the number of pins you knock down on your next ball. Of course, those pins also
count as part of the next frame. If you score a spare (or strike) in the final (tenth) frame, you are
entitled to one (or two) extra balls to determine your tenth frame bonus. A perfect game scores 300
points, because each frame scores 30, 10 for knocking down 10 pins, and 20 for knocking down 20
pins with the next two balls combined.

<P>

<P>
<BR>
Now, are you ready to sign on to write the software?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several complete or partial games. A game is described by a single
line with a single name, not to exceed 12 characters, and sequence of numbers, one for each ball
thrown indicating the number of pins still standing after that throw. According to the rules, there
are from 11 to 21 throws in a game; no input line will show throws beyond the last throw of the
game. The number of games described in a file is not predetermined, so you'll have to detect the
end of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The standard output will contain, on successful completion of the program, two output lines for
each input line. The first output line contains the name of the bowler and a record of the throws in
each frame. This record shows, for each frame, the number of pins knocked down for each throw
as a digit, with some exceptions. For a throw that knocks down no pins, a dash (<code>-</code>) is used
instead of a `<TT>0</TT>'. An '<TT>X</TT>' indicates a throw that knocks down all 10 pins on the first try. A slash ('<TT>/</TT>')
indicates a throw that finishes knocking down all the pins, after the previous throw left some
standing. Otherwise, a throw is shown as a digit (`<TT>1</TT>' to `<TT>9</TT>'). The number of throws in a frame may
be one (a strike in frames 1 to 9), or three (a strike or spare in frame 10, followed by bonus balls),
but is usually two. Here are examples of throw markings for a variety of situations:

<P>
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT"><B> Marking</B></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360><B> Comment</B></TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> 81</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down 8 balls on the first throw, one on the next</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> 7/</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down 7 balls on the first throw, then the rest</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> X</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down all balls on the first throw</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> 9-</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down 9 balls on the first throw, none on the next</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> 8/X</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down 8 balls on the first throw of frame 10, then the rest, then all the pins on the bonus throw</TD>
</TR>
<TR><TD ALIGN="LEFT"><TT> X-/</TT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=360>Knocked down ten balls on the first throw of frame 10, then missed all the pins on the first bonus throw and knocked them all down on the second bonus throw</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
The second output line shows cumulative scores. The cumulative score for the first frame is just
the score for pins knocked down in frame, plus bonus points if they apply. The cumulative score
for any other frame is the cumulative score for the previous frame plus the score for pins knocked
down in that frame, plus the bonus pins that may have been earned for a strike or spare in this
frame. It is possible to have markings on line one for a frame, but no score on line two, in the event
that the frame is a strike or spare but the bonus points for the frame aren't yet known.

<P>

<P>
<BR>
The format for this output requires that the bowler's name be left-justified. The fields for each
frame are three characters wide, with a space separating each field. The fields begin in columns 14,
18, 22, and so on. The record of the throws in the first line is left justified in its field. The
cumulative score is right justified in its field. There is a blank line that separates the scores of one
bowler from the scores of another.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Chuck 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
Solly 0 0 0 0 0 0 0 0 0 0 0 8
Lothar 10 0 10 0 10 0
Brutus 5 1 2 0 6 0 9
McGillicuddy 0 0 1 0
Homer 0 10 0 0 0 0
Barney 0 0 0 0 0 0 0 0 0 0 1 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT><A NAME="tex2html3"
 HREF="#foot72"><SUP>1
 </SUP></A>
</H2>
				
<PRE>
1234567890123456789012345678901234567890123456789012
Chuck        9/  9/  9/  9/  9/  9/  9/  9/  9/  9/9
              19  38  57  76  95 114 133 152 171 190

Solly        X   X   X   X   X   X   X   X   X   XX2
              30  60  90 120 150 180 210 240 270 292

Lothar       -/  -/  -/
              10  20

Brutus       54  8/  4/  1
               9  23  34

McGillicuddy X   X   9/
              29  49

Homer        X   -/  X   X   X
              20  40  70

Barney       X   X   X   X   X   X   X   X   X   X9/
              30  60  90 120 150 180 210 240 269 289
</PRE>

<P>

<P>
<BR><HR><H4>Footnotes</H4>
<DL>
<DT><A NAME="foot72">... Output</A><A NAME="foot72"
 HREF="650.html#tex2html3"><SUP>1
 </SUP></A>
<DD>The line of digits is intended to guide you in proper output alignment, and is <B>not</B> part of the output
that your solution should produce.

</DL>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
651||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Deck</TITLE>
<META NAME="description" CONTENT="Deck">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Deck</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A single playing card can be placed on a table, carefully, so that the short edges of the card are
parallel to the table's edge, and half the length of the card hangs over the edge of the table. If the
card hung any further out, with its center of gravity off the table, it would fall off the table and
flutter to the floor. The same reasoning applies if the card were placed on another card, rather than on a table.

<P>

<P>
<BR>
Two playing cards can be arranged, carefully, with short edges parallel to table edges, to extend 3/4
of a card length beyond the edge of the table. The top card hangs half a card length past the edge of
the bottom card. The bottom card hangs with only 1/4 of its length past the table's edge. The center of gravity of the two cards combined lies just over the edge of the table.

<P>

<P>
<BR>
Three playing cards can be arranged, with short edges parallel to table edges, and each card
touching at most one other card, to extend 11/12 of a card length beyond the edge of the table. The
top two cards extend 3/4 of a card length beyond the edge of the bottom card, and the bottom card
extends only 1/6 over the table's edge; the center of gravity of the three cards lines over the edges of the table.

<P>

<P>
<BR>
If you keep stacking cards so that the edges are aligned and every card has at most one card above it
and one below it, how far out can 4 cards extend over the table's edge? Or 52 cards? Or 1000 cards? Or 99999?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several nonnegative integers, one to a line. No integer exceeds 99999.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The standard output will contain, on successful completion of the program, a 
heading:

<P>

<TT># Cards Overhang</TT>

<P>

(that's two spaces between the words) and, following, a line for each input integer giving the length
of the longest overhang achievable with the given number of cards, measured in cardlengths, and
rounded to the nearest thousandth. The length must be expressed with at least one digit before the
decimal point and exactly three digits after it. 

<P>
The number of cards is right-justified in column 5,
and the decimal points for the lengths lie in column 12.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2
3
4
30
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT><A NAME="tex2html3"
 HREF="#foot56"><SUP>1
</SUP></A>
</H2>
				
<PRE>
12345678901234567
# Cards Overhang
    1     0.500
    2     0.750
    3     0.917
    4     1.042
   30     1.997
</PRE>

<P>

<P>
<BR><HR><H4>Footnotes</H4>
<DL>
<DT>... Output<A NAME="foot56"
 HREF="651.html#tex2html3"><SUP>1
</SUP></A>
<DD>The line of digits is intended to guide you in proper output alignment, and is <B>not</B> part of the output
that your solution should produce.

</DL>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
652||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Eight</TITLE>
<META NAME="description" CONTENT="Eight">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Eight</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The 15-puzzle has been around for over 100 years; even if you don't know it by that name, you've
seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed
into a 4 by 4 frame with one tile missing. Let's call the missing tile `<TT>x</TT>'; the object of the puzzle is
to arrange the tiles so that they are ordered as:

<P>
<PRE>
 1  2  3  4
 5  6  7  8
 9 10 11 12
13 14 15  x
</PRE>
where the only legal operation is to exchange `<TT>x</TT>' with one of the tiles with which it shares an edge.
As an example, the following sequence of moves solves a slightly scrambled puzzle:

<P>
<PRE>
 1  2  3  4     1  2  3  4     1  2  3  4     1  2  3  4 
 5  6  7  8     5  6  7  8     5  6  7  8     5  6  7  8
 9  x 10 12     9 10  x 12     9 10 11 12     9 10 11 12
13 14 11 15    13 14 11 15    13 14  x 15    13 14 15  x
            r-&gt;            d-&gt;            r-&gt;
</PRE>

<P>
The letters in the previous row indicate which neighbor of the `<TT>x</TT>' tile is swapped with the `<TT>x</TT>' tile at
each step; legal values are `<TT>r</TT>',`<TT>l</TT>',`<TT>u</TT>' and `<TT>d</TT>', for right, left, up, and down, respectively.

<P>

<P>
<BR>
Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an
unsolvable version of the puzzle, and
frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one
is to swap two tiles (not counting the missing `<TT>x</TT>' tile, of course).

<P>

<P>
<BR>
In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three arrangement.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank line followed by N datasets. There is a blank line between datasets.

<p>In each dataset, you will receive a description of a configuration of the 8 puzzle. The description
is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles
listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus `<TT>x</TT>'.

<P>
For example, this puzzle
<PRE>
1 2 3
x 4 6
7 5 8
</PRE>
is described by this list:
<PRE>
1 2 3 x 4 6 7 5 8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, you will print to standard output either the word ``<TT>unsolvable</TT>'', if the puzzle has no solution, or a
string consisting entirely of the letters `<TT>r</TT>', `<TT>l</TT>', `<TT>u</TT>' and `<TT>d</TT>' that describes a series of moves that
produce a solution. The string should include no spaces and start at the beginning of the line. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

2 3 4 1 5 x 7 6 8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
ullddrurdllurdruldr
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
653||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gizilch</TITLE>
<META NAME="description" CONTENT="Gizilch">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gizilch</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The game of gizilch has very simple rules. First 100 grapes are labeled, in nontoxic ink, with the
numbers 1 to 100. Then, with a cry of ``GIZILCH!'', the referee fires the grapes up into the air
with a giant gizilcher. The two players, who each start with a score of ``1'', race to eat the falling
(or, shortly thereafter, fallen) grapes and, at the same time, multiply their scores by the numbers
written on the grapes they eat. After a minute, the hungry squirrels are let loose to finish the
remaining grapes, and each contestant reports his score, the product of the numbers on the grapes
he's eaten. The unofficial winner is the player who announces the highest score.

<P>

<P>
<BR>
Inevitably, though, disputes arise, and so the official winner is not determined until the disputes are
resolved. The player who claims the lower score is entitled to challenge his opponent's score. The
player with the lower score is presumed to have told the truth, because if he were to lie about his
score, he would surely come up with a bigger better lie. The challenge is upheld if the player with
the higher score has a score that cannot be achieved with grapes not eaten by the challenging
player. So, if the challenge is successful, the player claiming the lower score wins.

<P>

<P>
<BR>
So, for example, if one player claims 343 points and the other claims 49, then clearly the first player
is lying; the only way to score 343 is by eating grapes labeled 7 and 49, and the only way to score
49 is by eating a grape labeled 49. Since each of two scores requires eating the grape labeled 49,
the one claiming 343 points is presumed to be lying.

<P>
On the other hand, if one player claims 162 points and the other claims 81, it is possible for both to
be telling the truth (e.g. one eats grapes 2, 3 and 27, while the other eats grape 81), so the challenge would not be upheld.

<P>

<P>
<BR>
Unfortunately, anyone who is willing to referee a game of gizilch is likely to have himself
consumed so many grapes (in a liquid form) that he or she could not reasonably be expected to
perform the intricate calculations that refereeing requires. Hence the need for you, sober
programmer, to provide a software solution.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Pairs of unequal, positive numbers, with each pair on a single line, that are claimed scores from a
game of gizilch.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Numbers, one to a line, that are the winning scores, assuming that the player with the lower score
always challenges the outcome.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
343 49
3599 610
62 36
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
49
610
62
</PRE>

<P>
<BR><BR>
<H3>Clarification:<BR></H3>
The rules for deciding the winner of a game of gizilch are, first, if both players might be
telling the truth, the larger score wins.  Second, if the player with the lower score cannot
be telling the truth, the player with the higher score wins.  Finally, if neither of the
previous two conditions holds, the lower score wins.
<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
654||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Ratio</TITLE>
<META NAME="description" CONTENT="Ratio">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Ratio</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
If you ever see a televised report on stock market activity, you'll hear the anchorperson say
something like ``Gainers outnumbered losers 14 to 9,'' which means that for every 14 stocks that
increased in value that day, approximately 9 other stocks declined in value. Often, as you hear that,
you'll see on the screen something like this:

<P>
<PRE>
Gainers 1498
Losers  902
</PRE>

<P>
As a person with a head for numbers, you'll notice that the anchorperson could have said ``Gainers
outnumbered losers 5 to 3'', which is a more accurate approximation to what really happened.
After all, the exact ratio of winners to losers is (to the nearest millionth) 1.660754, and he reported
a ratio of 14 to 9, which is 1.555555, for an error of 0.105199; he could have said ``5 to 3'', and
introduced an error of only 1.666667-1.660754=0.005913. The estimate ``5 to 3'' is not as accurate
as ``1498 to 902'' of course; evidently, another goal is to use small integers to express the ratio. So,
why did the anchorperson say ``14 to 9?'' Because his algorithm is to lop off the last two digits of
each number and use those as the approximate ratio.

<P>

<P>
<BR>
What the anchorman needs is a list of rational approximations of increasing accuracy, so that he can
pick one to read on the air. Specifically, he needs a sequence {
<!-- MATH: $a_1, a_2, \dots, a_n$ -->
<IMG
 WIDTH="103" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/654img1.gif" 
 ALT="$a_1, a_2, \dots, a_n$">} where <I>a</I><SUB>1</SUB> is a
rational number with denominator 1 that most exactly matches the true ratio of winners to losers
(rounding up in case of ties), <I>a</I><SUB><I>i</I>+1</SUB> is the rational number with least denominator that provides a
more accurate approximation than <I>a</I><SUB><I>i</I></SUB>, and <I>a</I><SUB><I>n</I></SUB> is the exact ratio, expressed with the least possible
denominator. Given this sequence, the anchorperson can decide which ratio gives the best tradeoff
between accuracy and simplicity.

<P>

<P>
<BR>
For example, if 5 stocks rose in price and 4 fell, the best approximation with denominator 1 is 1/1;
that is, for every stock that fell, about one rose. This answer differs from the exact answer by 0.25
(1.0 vs 1.25). The best approximations with two in the denominator are 2/2 and 3/2, but neither is
an improvement on the ratio 1/1, so neither would be considered. The best approximation with
three in the denominator 4/3, is more accurate than any seen so far, so it is one that should be
reported. Finally, of course, 5/4 is exactly the ratio, and so it is the last number reported in the
sequence.

<P>

<P>
<BR>
Can you automate this process and help the anchorpeople?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several pairs of positive integers. Each pair is on a line by itself,
beginning in the first column and with a space between the two numbers. The first number of a pair
is the number of gaining stocks for the day, and the second number is the number of losing stocks
for the day. The total number of stocks never exceeds 5000.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input pair, the standard output should contain a series of approximations to the ratio of
gainers to losers. The first approximation has `<TT>1</TT>' as denominator, and the last is exactly the ratio of
gainers to losers, expressed as a fraction with least possible denominator. The approximations in between are increasingly accurate and have increasing denominators, as described above.

<P>

<P>
<BR>
The approximations for a pair are printed one to a line, beginning in column one, with the numerator and denominator of an approximation separated by a slash (``<TT>/</TT>''). A blank line separates one sequence of approximations from another.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 4
1498 902
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1/1
4/3
5/4

2/1
3/2
5/3
48/29
53/32
58/35
63/38
68/41
73/44
78/47
83/50
88/53
93/56
377/227
470/283
563/339
656/395
749/451
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
655||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Scrabble</TITLE>
<META NAME="description" CONTENT="Scrabble">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Scrabble</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The board game Scrabble (copyright Hasbro, Inc.) requires players to draw seven letter tiles from a
pool, and form words on a game board, arranged horizontally or vertically, with their letters and the
letters already played; just what constitutes a ``word'' is often subject to dispute, so it's handy to
have a dictionary nearby when you play. Scoring is based on the point values of the letters used to
form the words, with the letters associated with point values as follows:

<P>
<PRE>
A-1 B-3 C-3 D-2  E-1 F-4 G-2 H-4 I-1 J-8 K-5 L-1 M-3
N-1 O-1 P-3 Q-10 R-1 S-1 T-1 U-1 V-4 W-4 X-8 Y-4 Z-10
</PRE>

<P>
Scoring is also affected by the positions on the board where the letters are played. Some positions
have the feature that they double or triple the score of the letter played there. This bonus goes only
to the first player to play a tile on that position, and not to another player who later uses that letter
in a word. The score for a word is obtained by summing the letter scores (including any doubling
and tripling of letter values). For example, the word ``<TT>MOUSE</TT>'', which would normally score 7
points, would score 10 if played so that the ``<TT>M</TT>'' falls on one of the double letter positions. There
are also positions that double or triple the score of the entire word. These bonuses can accumulate;
thus, if our word ``<TT>MOUSE</TT>'' managed to land with the ``<TT>M</TT>'' on a double letter position, and the
``<TT>E</TT>'' on a double word position, then the resulting score for the word is 20. We will denote these kinds of positions as follows:

<P>
<UL>
<LI><TT>-</TT> Ordinary position
<LI><TT>2</TT> Double letter score
<LI><TT>3</TT> Triple letter score
<LI><TT>4</TT> Double word score
<LI><TT>5</TT> Triple word score
</UL>

<P>
The map below illustrates the scrabble board in terms of these symbols; note the symmetries.

<P>
<PRE>
5--2---5---2--5
-4---3---3---4-
--4---2-2---4--
2--4---2---4--2
----4-----4----
-3---3---3---3-
--2---2-2---2--
5--2---4---2--5
--2---2-2---2--
-3---3---3---3-
----4-----4----
2--4---2---4--2
--4---2-2---4--
-4---3---3---4-
5--2---5---2--5
</PRE>

<P>
Finally, there is a 50 point bonus if all seven letters get played in a single turn.

<P>

<P>
<BR>
The game begins with one player placing a word of up to seven letters on the board so that one
letter covers that '4' (double word score) marker in the center of the board.

<P>

<P>
<BR>
Now, it's your move.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will receive, in the input file, a series of Scrabble puzzles, and after a blank line a
list of legal words. Each puzzle poses the problem of playing second, after your opponent has made
the first move of the game; thus, there is just one word you will have to intersect with when you
choose your word. Your opponent's first word is also in the list of legal words. In our nonstandard
version of the game, we require that the word you play must use one of the letters of of your
opponent's word to form your own. The objective in a puzzle is to find a word that uses some of
your letters and one of the letters already played to form the highest scoring word, including
bonuses for double-letter, triple-letter, double-word and triple-word positions, and the 50 point
bonus for using all seven letters.

<P>

<P>
<BR>
Each puzzle is represented on one line of the input file. A puzzle consists of the following
information:

<P>
<UL>
<LI>The seven letters you have drawn; these are the first seven characters of the line.
<LI>A digit from 1 to 7, indicating which letter of your opponents opening word landed on the center square.
<LI>The word your opponent played, of up to seven letters.
</UL>

<P>
You may assume that the first word is played horizontally, and thus that your word will be played
vertically. The symmetry of the board actually makes it irrelevant whether the word was played
horizontally or vertically.

<P>
About the list of words that can be used in the game<A NAME="tex2html1"
 HREF="#foot74"><SUP>1
</SUP></A>, each word is on a line by itself,
at the beginning of the line, with no trailing spaces. The words in the file are contain only
uppercase letters, with no digits, punctuation, or lowercase letters. You may assume that there are
no more than 30000 words in the list, and that no word is more than eight letters long.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
You will print one line for each puzzle. In that line you will show your
word, in a field 8 characters wide, left-justified, padded by spaces on the right as necessary; a digit
in a 2 character field, right-justified, that shows which letter of the original word you used, a digit in
a 2 character field, right-justified, that shows which letter of your word is part of your opponent's
word, and finally a number in a 4 character field, right justified. that is your score for your word.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
RDAWEER1ABDOMEN
OADPZBI5OPIATE
RTWXAIB3SMELL
AEFGOOS1BILLION
CYOKDAR7DOLTISH
CYOKDAR1DOLTISH
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT><A NAME="tex2html4"
 HREF="#foot75"><SUP>2
</SUP></A>
</H2>
				
<PRE>
1234567890123456
WANDER   7 3  20
ZAP      4 2  27
AXIS     1 4  27
FALSE    3 3  18
DOCKYARD 1 1 100
DOCKYARD 1 8 122
</PRE>

<P>
<BR><HR><H4>Footnotes</H4>
<DL>
<DT>... game<A NAME="foot74"
 HREF="655.html#tex2html1"><SUP>1
</SUP></A>
<DD>Derived from the <TT>/usr/dict/words</TT> file in our system

<DT>... Output<A NAME="foot75"
 HREF="655.html#tex2html4"><SUP>2
</SUP></A>
<DD>The line of digits is intended to guide you in proper output alignment, and is <B>not</B> part of the output
that your solution should produce.

</DL>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-01-17</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
656||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Optimal Programs</TITLE>
<META NAME="description" CONTENT="Optimal Programs">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Optimal Programs</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
As you know, writing programs is often far from being easy. Things become even harder if your
programs have to be as fast as possible. And sometimes there is reason for them to be. Many large
programs such as operating systems or databases have ``bottlenecks'' - segments of code that get
executed over and over again, and make up for a large portion of the total running time. Here it
usually pays to rewrite that code portion in assembly language, since even small gains in running time
will matter a lot if the code is executed billions of times.

<P>
In this problem we will consider the task of automating the generation of optimal assembly code.
Given a function (as a series of input/output pairs), you are to come up with the shortest assembly
program that computes this function.

<P>
The programs you produce will have to run on a stack based machine, that supports only five
commands: <TT>ADD</TT>, <TT>SUB</TT>, <TT>MUL</TT>, <TT>DIV</TT> and <TT>DUP</TT>. The first
four commands pop the two top elements from the stack and push their sum,
difference, product or integer quotient<A NAME="tex2html1"
 HREF="#foot75"><SUP>1
</SUP></A>, respectively, on the
stack. The <TT>DUP</TT> command pushes an additional copy of the top-most stack
element on the stack.

<P>
So if the commands are applied to a stack with the two top elements <I>a</I> and <I>b</I>
(shown to the left), the resulting stacks look as follows:

<P>
<DIV ALIGN="CENTER">

<img src=p656.gif>
</DIV>

<P>
At the beginning of the execution of a program, the stack will contain a single integer only: the
input. At the end of the computation, the stack must also contain only one integer; this number is the
result of the computation.

<P>
There are three cases in which the stack machine enters an error state:

<P>
<UL>
<LI>A <TT>DIV</TT>-command is executed, and the top-most element of the stack
is 0.

<P>
<LI>A <TT>ADD</TT>, <TT>SUB</TT>, <TT>MUL</TT> or <TT>DIV</TT>-command is executed when
the stack contains only one element.

<P>
<LI>An operation produces a value greater than 30000 in absolute value.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a series of function descriptions. Each description starts with a line containing a
single integer <I>n</I> (<IMG
 WIDTH="56" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/656img2.gif" 
 ALT="$n \leÂŸ 10$">), the number of input/output pairs to follow.
The following two lines contains <I>n</I> integers each: 
<!-- MATH: $x_1, x_2, \dots, x_n$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/656img2.gif" 
 ALT="$x_1, x_2, \dots, x_n$">
in
the first line (all different), and 
<!-- MATH: $y_1, y_2, \dots, y_n$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/656img2.gif" 
 ALT="$y_1, y_2, \dots, y_n$">
in the second
line. The numbers will be no more than 30000 in absolute value. 

<P>
The input is
terminated by a test case starting with <I>n</I> = 0. This test case should not be
processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
You are to find the shortest program that computes a function <I>f</I> , such that

<!-- MATH: $f(x_i) = y_i$ -->
<I>f</I>(<I>x</I><SUB><I>i</I></SUB>) = <I>y</I><SUB><I>i</I></SUB> for all 
<!-- MATH: $i \in \{1, \dots, n\}$ -->
<IMG
 WIDTH="107" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/656img2.gif" 
 ALT="$i \in \{1, \dots, n\}$">.
This implies that the program
you output may not enter an error state if executed on the inputs <I>x</I><SUB><I>i</I></SUB>
(although it may enter an error state for other inputs). Consider only
programs that have at most 10 statements.

<P>
For each function description, output first the number of the description. Then print out the se-
quence of commands that make up the shortest program to compute the given function. If there is
more than one such program, print the lexicographically smallest. If there is no program of at most
10 statements that computes the function, print the string ``<TT>Impossible</TT>''. If the shortest
program consists of zero commands, print ``<TT>Empty sequence</TT>''. 

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
1 2 3 4
0 -2 -6 -12
3
1 2 3
1 11 1998
1
1998
1998
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Program 1
DUP DUP MUL SUB

Program 2
Impossible

Program 3
Empty sequence
</PRE>

<P>

<P>
<BR><HR><H4>Footnotes</H4>
<DL>
<DT>... quotient<A NAME="foot75"
 HREF="656.html#tex2html1"><SUP>1
 </SUP></A>
<DD>This corresponds to / applied
to two integers in C/C++, and <TT>DIV</TT> in Pascal.

</DL>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
657||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The die is cast</TITLE>
<META NAME="description" CONTENT="The die is cast">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The die is cast</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
InterGames is a high-tech startup company that specializes in developing technology that allows users
to play games over the Internet. A market analysis has alerted them to the fact that games of chance
are pretty popular among their potential customers. Be it Monopoly, ludo or backgammon, most of
these games involve throwing dice at some stage of the game.

<P>
Of course, it would be unreasonable if players were allowed to throw their dice and then enter the
result into the computer, since cheating would be way to easy. So, instead, InterGames has decided to
supply their users with a camera that takes a picture of the thrown dice, analyzes the picture and then
transmits the outcome of the throw automatically.

<P>
For this they desperately need a program that, given an image containing several dice, determines
the numbers of dots on the dice.

<P>
We make the following assumptions about the input images. The images contain only three dif-
ferent pixel values: for the background, the dice and the dots on the dice. We consider two pixels
<EM>connected</EM> if they share an edge - meeting at a corner is not enough. In
the figure, pixels A and B are connected, but B and C are not.

<P>
<DIV ALIGN="CENTER">

<img src=p657.gif>
</DIV>

<P>
A set <I>S</I> of pixels is connected if for every pair (<I>a</I>,<I>b</I>) of pixels in <I>S</I>,
there is a sequence 
<!-- MATH: $a_1, a_2, \dots, a_k$ -->
<IMG
 WIDTH="102" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/657img1.gif" 
 ALT="$a_1, a_2, \dots, a_k$">
in <I>S</I> such that <I>a</I> = <I>a</I><SUB>1</SUB> and <I>b</I> =
<I>a</I><SUB><I>k</I></SUB> , and <I>a</I><SUB><I>i</I></SUB> and <I>a</I><SUB><I>i</I>+1</SUB> are connected for 
<!-- MATH: $1 \le i < k$ -->
<IMG
 WIDTH="75" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/657img1.gif" 
 ALT="$1 \le i < k$">.

<P>
We consider all
maximally connected sets consisting solely of non-background pixels to be dice.
`Maximally connected' means that you cannot add any other non-background
pixels to the set without making it dis-connected. Likewise we consider every
maximal connected set of dot pixels to form a dot.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of pictures of several dice throws. Each picture description starts with a line
containing two numbers w and h, the width and height of the picture, respectively. These values
satisfy 
<!-- MATH: $5 \leÂŸw,h \le 50$ -->
<IMG
 WIDTH="108" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/657img1.gif" 
 ALT="$5 \leÂŸw,h \le 50$">.

<P>
The following <I>h</I> lines contain <I>w</I> characters each. The characters can be:
``<TT>.</TT>'' for a background pixel, ``<TT>*</TT>'' for a pixel of a die, and
``<TT>X</TT>'' for a pixel of a die's dot. 

<P>
Dice may have different sizes and not
be entirely square due to optical distortion. The picture will contain at least
one die, and the numbers of dots per die is between 1 and 6, inclusive. 

<P>
The input is terminated by a picture starting with <I>w</I> = <I>h</I> = 0, which should
not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each throw of dice, first output its number. Then output the number of dots on the dice in the
picture, sorted in increasing order.

<P>
Print a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
30 15
..............................
..............................
...............*..............
...*****......****............
...*X***.....**X***...........
...*****....***X**............
...***X*.....****.............
...*****.......*..............
..............................
........***........******.....
.......**X****.....*X**X*.....
......*******......******.....
.....****X**.......*X**X*.....
........***........******.....
..............................
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Throw 1
1 2 2 4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
658||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>It's not a Bug, it's a Feature!</TITLE>
<META NAME="description" CONTENT="It's not a Bug, it's a Feature!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
It's not a Bug, it's a Feature!</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
It is a curious fact that consumers buying a new software product generally do
<EM>not</EM> expect the software to be bug-free. Can you imagine buying a car
whose steering wheel only turns to the right? Or a CD-player that plays only
CDs with country music on them? Probably not. But for software systems it
seems to be acceptable if they do not perform as they should do. In fact, many
software companies have adopted the habit of sending out patches to fix bugs
every few weeks after a new product is released (and even charging money for
the patches).

<P>
Tinyware Inc. is one of those companies. After releasing a new word processing software this
summer, they have been producing patches ever since. Only this weekend they have realized a big
problem with the patches they released. While all patches fix some bugs, they often rely on other
bugs to be present to be installed. This happens because to fix one bug, the patches exploit the special
behavior of the program due to another bug.

<P>
More formally, the situation looks like this. Tinyware has found a total of
<I>n</I> bugs 
<!-- MATH: $B= \{b_1, b_2, \dots, b_n\}$ -->
<IMG
 WIDTH="152" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$B= \{b_1, b_2, \dots, b_n\}$">
in their software. And they have
released <I>m</I> patches 
<!-- MATH: $p_1, p_2, \dots, p_m$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$p_1, p_2, \dots, p_m$">.
To apply patch <I>p</I><SUB><I>i</I></SUB> to the
software, the bugs 
<!-- MATH: $B^+_i \subseteq B$ -->
<IMG
 WIDTH="67" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$B^+_i \subseteq B$">
have to be present in the software, and
the bugs 
<!-- MATH: $B^-_i \subseteq B$ -->
<IMG
 WIDTH="67" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$B^-_i \subseteq B$">
must be absent (of course

<!-- MATH: $B^+_i \cap B^-_i = \emptyset$ -->
<IMG
 WIDTH="107" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$B^+_i \cap B^-_i = \emptyset$">
holds). The patch then
fixes the bugs 
<!-- MATH: $F^-_i \subseteq B$ -->
<IMG
 WIDTH="67" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$F^-_i \subseteq B$">
(if they have been present) and introduces
the new bugs 
<!-- MATH: $F^+_i \subseteq B$ -->
<IMG
 WIDTH="67" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$F^+_i \subseteq B$">
(where, again, 
<!-- MATH: $F^-_i \cap B^-_i = \emptyset$ -->
<IMG
 WIDTH="106" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$F^-_i \cap B^-_i = \emptyset$">).

<P>
Tinyware's problem is a simple one. Given the original version of their software, which contains
all the bugs in <I>B</I>, it is possible to apply a sequence of patches to the
software which results in a bug- free version of the software? And if so,
assuming that every patch takes a certain time to apply, how long does the
fastest sequence take?

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains several product descriptions. Each description starts with a line containing two
integers <I>n</I> and <I>m</I>, the number of bugs and patches, respectively. These
values satisfy 
<!-- MATH: $1 \le n \le 20$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$1 \le n \le 20$">
and 
<!-- MATH: $1 \le m \le 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/658img1.gif" 
 ALT="$1 \le m \le 100$">.
This is followed by <I>m</I>
lines describing the <I>m</I> patches in order. Each line contains an integer, the
time in seconds it takes to apply the patch, and two strings of <I>n</I> characters
each.

<P>
The first of these strings describes the bugs that have to be present or absent before the patch can
be applied. The <I>i</I>-th position of that string is a ``<TT>+</TT>'' if bug <I>b</I><SUB><I>i</I></SUB>
has to be present, a ``<TT>-</TT>'' if bug <I>b</I><SUB><I>i</I></SUB> has to be absent, and a ``<TT>
0</TT>'' if it doesn't matter whether the bug is present or not.

<P>
The second string describes which bugs are fixed and introduced by the patch.
The <I>i</I>-th position of that string is a ``<TT>+</TT>'' if bug <I>b</I><SUB><I>i</I></SUB> is introduced
by the patch, a ``<TT>-</TT>'' if bug <I>b</I><SUB><I>i</I></SUB> is removed by the patch (if it was
present), and a ``<TT>0</TT>'' if bug <I>b</I><SUB><I>i</I></SUB> is not affected by the patch (if it
was present before, it still is, if it wasn't, is still isn't).

<P>
The input is terminated by a description starting with <I>n</I> = <I>m</I> = 0. This test
case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each product description first output the number of the product. Then output whether there is a
sequence of patches that removes all bugs from a product that has all <I>n</I> bugs. Note that in such a
sequence a patch may be used multiple times. If there is such a sequence, output the time taken by
the fastest sequence in the format shown in the sample output. If there is no such sequence, output
``<TT>Bugs cannot be fixed.</TT>''.

<P>
Print a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 3
1 000 00-
1 00- 0-+
2 0-- -++
4 1
7 0-0+ ----
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Product 1
Fastest sequence takes 8 seconds.

Product 2
Bugs cannot be fixed.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
659||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Reflections</TITLE>
<META NAME="description" CONTENT="Reflections">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Reflections</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Rendering realistic images of imaginary environments or objects is an interesting topic in 
computer graphics. One of the most popular methods for this purpose is <EM>
ray-tracing</EM>.

<P>
To render images using ray-tracing, one computes (traces) the path that rays of light entering a
scene will take. We ask you to write a program that computes such paths in a restricted environment.

<P>
For simplicity, we will consider only two-dimensional scenes. All objects in the scene are totally
reflective (mirror) spheres. When a ray of light hits such a sphere, it is reflected such that the angle of
the incoming ray and the leaving ray against the tangent are the same:

<P>
<DIV ALIGN="CENTER">

<img src=p659a.gif>
</DIV>

<P>
The following figure shows a typical path that a ray of light may take in
such a scene:

<P>
<DIV ALIGN="CENTER">

<img src=p659b.gif>
</DIV>

<P>
Your task is to write a program, that given a scene description and a ray entering the scene,
determines which spheres are hit by the ray.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a series of scene descriptions. Each description starts with a line containing the
number <I>n</I> (<IMG
 WIDTH="56" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/659img1.gif" 
 ALT="$n \leÂŸ25$">)
of spheres in the scene. The following <I>n</I> lines
contain three integers <I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>, <I>r</I><SUB><I>i</I></SUB> each, where (<I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>) is the
center, and <I>r</I><SUB><I>i</I></SUB> &gt; 0 is the radius of the <I>i</I>-th sphere. Following this is a
line containing four integers <I>x</I>, <I>y</I>, <I>d</I><SUB><I>x</I></SUB>, <I>d</I><SUB><I>y</I></SUB>, which describe the ray.
The ray originates from the point (<I>x</I>,<I>y</I>) and initially points in the direction
(<I>d</I><SUB><I>x</I></SUB>, <I>d</I><SUB><I>y</I></SUB>). At least one of <I>d</I><SUB><I>x</I></SUB> and <I>d</I><SUB><I>y</I></SUB> will be non-zero.

<P>
The spheres will be disjoint and non-touching. The ray will not start within a sphere, and never
touch a sphere tangentially.

<P>
A test case starting with <I>n</I> = 0 terminates the input. This case should not
be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scene first output the number of the scene. Then print the numbers of the spheres that the ray
hits in its first ten deflections (the numbering of spheres is according to their order in the input).

<P>
If the ray hits at most ten spheres (and then heads towards infinity), print
<TT>inf</TT> after the last sphere it hits. If the ray hits more than 10 spheres,
print three points (<TT>...</TT>) after the tenth sphere.

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
3 3 2
7 7 1
8 1 1
3 8 1 -4
2
0 0 1
5 0 2
2 0 1 0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Scene 1
1 2 1 3 inf

Scene 2
2 1 2 1 2 1 2 1 2 1 ...
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
660||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Going in circles on Alpha Centauri</TITLE>
<META NAME="description" CONTENT="Going in circles on Alpha Centauri">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Going in circles on Alpha Centauri</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In the early 27th century, Alpha Centauri has become the main shipping hub of this part of the galaxy.
At a space station near the fourth planet, goods from almost every space-faring civilization are traded
and shipped to all major star systems. The space station is shaped like a large circle, and has docking
ports on its outer rim, labelled clockwise from 1 to <I>n</I>:

<P>
<DIV ALIGN="CENTER">

<img src=p660.gif>
</DIV>

<P>
When a trading spaceship docks to a port, it usually makes a request to transfer its cargo to another
ship docked to some other port. This task is taken care of by transportation robots (transrobs) operating
within the ring of the space station. The transrobs can travel clockwise around the station, and load
and unload cargo at the ports.

<P>
Every ships cargo fits into one transport container, and all transrobs can carry only one container
at a time. The transrobs only differ in maximal weight they can carry.

<P>
The consortium operating the space station has recently decided to upgrade its transportation
system. But before doing so, they want to gather some statistics on the performance of their current
system. More specifically, they are interested in

<P>
<UL>
<LI>the average time it takes for a request to be fulfilled, i.e. the time
between a ship requesting a cargo to be taken to another port, and the cargo
actually being delivered to its destination, and

<P>
<LI>the utilization of the transrobs, i.e. the average percentage of
transrobs serving requests during some interval of time
</UL>

<P>
For this, they need a simulation program, which you have to write. To facilitate this task, the consor-
tium has released the following details on their transrob control program.

<P>
<UL>
<LI>The transrobs are numbered 1 to <I>m</I>.

<P>
<LI>It takes a transrob 1 minute to get from a port to the next one, and it
takes 5 minutes to load or unload a container at a port.

<P>
<LI>Transrobs move on different tracks, and therefore do not hinder each
other when performing their duties.

<P>
<LI>Transrobs are either <EM>idle</EM>, or they are <EM>servicing a request</EM>,
which means that they move to the origin of that request, load the cargo, move
to the destination, unload the cargo, and become idle again.

<P>
<LI>All incoming requests are put in the <EM>request list</EM>. A request from
that list is <EM>possible</EM> to satisfy if there is an idle transrob for which
the cargo is not too heavy.

<P>
<LI>As long as (or as soon as) there are possible requests on the list, they
are assigned to transrobs, giving precedence for older requests over newer
requests. Each request is assigned to the transrob which is closest (in
anti-clockwise direction) to the origin of the request, and for which the
cargo is not too heavy. If there are two transrobs at the same distance, the
one with the lower number gets assigned the request. Assigned requests are
deleted from the request list.

<P>
<LI>The assignment procedure is instantenous, i.e. a robot starts moving in
the instant it gets assigned a request, and a robot becomes idle (and can
get a new request) in the instant it finishes unloading.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of the description of several simulations you have to perform. Each description
starts with a line containing two integers, <I>n</I> and <I>m</I>, the number of ports
and transrobs, respectively, satisfying 
<!-- MATH: $2 \le n ÂŸ\le 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$2 \le n ÂŸ\le 100$">
and 
<!-- MATH: $1 \le m \leÂŸ
20$ -->
<IMG
 WIDTH="92" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$1 \le m \leÂŸ
20$">.
The next <I>m</I> lines contain a single integer <I>l</I><SUB><I>i</I></SUB> each, the maximum load
that transrob <I>i</I> can carry, measured in galactic tons.

<P>
This is followed by one or more shipments to perform. Each shipment is described by a line
containing four integers, <I>t</I>, <I>o</I>, <I>d</I>, <I>w</I>: the time <I>t</I> the request was made
at (measured in minutes since the beginning of the simulation), the port
number <I>o</I> where the shipment comes from (origin), the port number <I>d</I> of the
shipment's destination, and the weight <I>w</I> of the container in galactic tons.

<P>
The request times are in strictly increasing order in the input file. The
values satisfy <IMG
 WIDTH="43" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$1 \leÂŸ t$">,

<!-- MATH: $1 \leÂŸ o,d \leÂŸ n$ -->
<IMG
 WIDTH="96" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$1 \leÂŸ o,d \leÂŸ n$">,
<IMG
 WIDTH="45" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$o \ne d$">
and 
<!-- MATH: $1 \le w \leÂŸ
\max\{ l_i \mid  1 \leÂŸ i \leÂŸ m \}$ -->
<IMG
 WIDTH="227" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/660img2.gif" 
 ALT="$1 \le w \leÂŸ
\max\{ l_i \mid 1 \leÂŸ i \leÂŸ m \}$">.

<P>

<P>
<BR>
The description of shipments is terminated by the line ``<TT>-1 -1 -1 -1</TT>''.

<P>

<P>
<BR>
The input is terminated by a test case starting with <I>n</I> = <I>m</I> = 0. This test
case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each simulation description in the input, first output the number of the description. Then, simulate
the operation of the transrobs on the shipment requests and output the average wait time, and the
utilization percentage. The utilization percentage is computed for the interval of the time between the
first request was made until the moment all requests were satisfied.

<P>
At the beginning of the simulation (time 0), all transrobs are idle, and located at port number 1.

<P>
All values must be exact to three digits to the right of the decimal point.

<P>

<P>
<BR>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 3
5
10
20
1 2 9 8
2 7 8 5
5 3 2 17
20 1 2 4
-1 -1 -1 -1
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Simulation 1
Average wait time   = 17.250 minutes
Average utilization = 71.875 %
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
661||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Blowing Fuses</TITLE>
<META NAME="description" CONTENT="Blowing Fuses">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Blowing Fuses</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Maybe you are familiar with the following situation. You have plugged in a lot of electrical devices,
such as toasters, refrigerators, microwave ovens, computers, stereos, etc, and have them all running.
But at the moment when you turn on the TV, the fuse blows, since the power drawn from all the
machines is greater than the capacity of the fuse. Of course this is a great safety feature, avoiding that
houses burn down too often due to fires ignited by overheating wires. But it is also annoying to walk
down to the basement (or some other inconvenient place) to replace to fuse or switch it back on.

<P>

<P>
<BR>
What one would like to have is a program that checks <EM>before</EM> turning on an
electrical device whether the combined power drawn by all running devices
exceeds the fuses capacity (and it blows), or whether it is safe to turn it on.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several test cases. Each test case describes a set of electrical devices and gives a
sequence of turn on/off operations for these devices.

<P>

<P>
<BR>
The first line of each test case contains three integers <I>n</I>, <I>m</I> and <I>c</I>,
where <I>n</I> is the number of devices (<IMG
 WIDTH="56" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/661img1.gif" 
 ALT="$n \le 20$">), <I>m</I> the number of operations
performed on these devices and <I>c</I> is the capacity of the fuse (in Amperes).
The following <I>n</I> lines contain one positive integer <I>c</I><SUB><I>i</I></SUB> each, the
consumption (in Amperes) of the <I>i</I>-th device.

<P>

<P>
<BR>
This is followed by <I>m</I> lines also containing one integer each, between 1 and
<I>n</I> inclusive. They describe a sequence of turn on/turn off operations
performed on the devices. For every number, the state of that particular
devices is toggled, i.e. if it is currently running, it is turned off, and if
it is currently turned off, it will by switched on. At the beginning all
devices are turned off.

<P>

<P>
<BR>
The input will be terminated by a test case starting with 
<!-- MATH: $n = m = c = 0$ -->
<I>n</I> = <I>m</I> = <I>c</I> = 0.
This test case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, first output the number of the test case. Then output whether the fuse was blown
during the operation sequence. The fuse will be blown if the sum of the power
consumptions <I>c</I><SUB><I>i</I></SUB> of turned on devices at some point exceeds the capacity of
the fuse <I>c</I>.

<P>

<P>
<BR>
If the fuse is not blown, output the maximal power consumption by turned on devices that occurred
during the sequence.

<P>

<P>
<BR>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 10
5
7
1
2
3 6 10
2
5
7
2
1
2
3
1
3
0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Sequence 1
Fuse was blown.

Sequence 2
Fuse was not blown.
Maximal power consumption was 9 amperes.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
662||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Fast Food</TITLE>
<META NAME="description" CONTENT="Fast Food">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Fast Food</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The fastfood chain McBurger owns several restaurants along a highway. Recently, they have decided
to build several depots along the highway, each one located at a restaurent and supplying several of the
restaurants with the needed ingredients. Naturally, these depots should be placed so that the average
distance between a restaurant and its assigned depot is minimized. You are to write a program that
computes the optimal positions and assignments of the depots.

<P>

<P>
<BR>
To make this more precise, the management of McBurger has issued the following specification:
You will be given the positions of <I>n</I> restaurants along the highway as <I>n</I>
integers 
<!-- MATH: $d_1 < d_2 < \dots < d_n$ -->
<IMG
 WIDTH="146" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="$d_1 < d_2 < \dots < d_n$">
(these are the distances measured from the
company's headquarter, which happens to be at the same highway). Furthermore,
a number 
<!-- MATH: $k (k \leÂŸ n)$ -->
<IMG
 WIDTH="71" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="$k (k \leÂŸ n)$">
will be given, the number of depots to be built.

<P>
The <I>k</I> depots will be built at the locations of <I>k</I> different restaurants.
Each restaurant will be assigned to the closest depot, from which it will then
receive its supplies. To minimize shipping costs, the <EM>total distance sum</EM>,
defined as

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\sum_{i=1}^n \mid d_i - (\mbox{position of depot serving restaurant }i) \mid
\end{displaymath} -->


<IMG
 WIDTH="379" HEIGHT="55"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="\begin{displaymath}\sum_{i=1}^n \mid d_i - (\mbox{position of depot serving restaurant }i) \mid
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
must be as small as possible.

<P>
Write a program that computes the positions of the <I>k</I> depots, such that the
total distance sum is minimized.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several descriptions of fastfood chains. Each description starts with a line
containing the two integers <I>n</I> and <I>k</I>. <I>n</I> and <I>k</I> will satisfy 
<!-- MATH: $1 \leÂŸ n
\leÂŸ 200$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="$1 \leÂŸ n
\leÂŸ 200$">,

<!-- MATH: $1 \leÂŸ k ÂŸ\le 30$ -->
<IMG
 WIDTH="87" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="$1 \leÂŸ k ÂŸ\le 30$">,
<IMG
 WIDTH="48" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/662img1.gif" 
 ALT="$k \le n$">.
Following this will <I>n</I> lines
containing one integer each, giving the positions <I>d</I><SUB><I>i</I></SUB> of the restaurants,
ordered increasingly.

<P>
The input file will end with a case starting with <I>n</I> = <I>k</I> = 0. This case
should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each chain, first output the number of the chain. Then output an optimal placement of the depots
as follows: for each depot output a line containing its position and the range of restaurants it serves.
If there is more than one optimal solution, output any of them. After the depot descriptions output a
line containing the total distance sum, as defined in the problem text.

<P>

<P>
<BR>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 3
5
6
12
19
20
27
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Chain 1
Depot 1 at restaurant 2 serves restaurants 1 to 3
Depot 2 at restaurant 4 serves restaurants 4 to 5
Depot 3 at restaurant 6 serves restaurant 6
Total distance sum = 8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
663||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Sorting Slides</TITLE>
<META NAME="description" CONTENT="Sorting Slides">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Sorting Slides</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Professor Clumsey is going to give an important talk this afternoon. Unfortunately, he is not a very
tidy person and has put all his transparencies on one big heap. Before giving the talk, he has to sort the
slides. Being a kind of minimalist, he wants to do this with the minimum amount of work possible.

<P>

<P>
<BR>
The situation is like this. The slides all have numbers written on them according to their order in
the talk. Since the slides lie on each other and are transparent, one cannot see on which slide each
number is written.

<P>
<DIV ALIGN="CENTER">

<img src=p663.gif>
</DIV>

<P>
Well, one cannot see on which slide a number is written, but one may deduce which numbers are
written on which slides. If we label the slides which characters A, B, C, ... as in the figure above, it is
obvious that D has number 3, B has number 1, C number 2 and A number 4.

<P>
Your task, should you choose to accept it, is to write a program that automates this process.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of several heap descriptions. Each heap descriptions starts with a line containing
a single integer <I>n</I>, the number of slides in the heap. The following <I>n</I>
lines contain four integers <I>x</I><SUB><I>min</I></SUB>, <I>x</I><SUB><I>max</I></SUB>, <I>y</I><SUB><I>min</I></SUB> and <I>y</I><SUB><I>max</I></SUB>,
each, the bounding coordinates of the slides. The slides will be labeled as
A,B,C,... in the order of the input.

<P>
This is followed by <I>n</I> lines containing two integers each, the <I>x</I>- and
<I>y</I>-coordinates of the <I>n</I> numbers printed on the slides. The first coordinate
pair will be for number 1, the next pair for 2, etc. No number will lie on a
slide boundary.

<P>
The input is terminated by a heap description starting with <I>n</I> = 0, which
should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each heap description in the input first output its number. Then print a series of all the slides
whose numbers can be uniquely determined from the input. Order the pairs by their letter identifier.

<P>
If no matchings can be determined from the input, just print the word none on a line by itself.

<P>

<P>
<BR>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
6 22 10 20
4 18 6 16
8 20 2 18
10 24 4 8
9 15
19 17
11 7
21 11
2
0 2 0 2
0 2 0 2
1 1
1 1
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Heap 1
(A,4) (B,1) (C,2) (D,3)

Heap 2
none
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
664||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Single-Player Games</TITLE>
<META NAME="description" CONTENT="Single-Player Games">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Single-Player Games</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Playing games is the most fun if other people take part. But other players are not always available
if you need them, which led to the invention of single-player games. One of the most well-known
examples is the infamous ``Solitaire'' packaged with Windows, probably responsible for more wasted
hours in offices around the world than any other game.

<P>
The goal of a single-player game is usually to make ``moves'' until one reaches a final state of
the game, which results in a win or loss, or a score assigned to that final state. Most players try to
optimize the result of the game by employing good strategies. In this problem we are interested in
what happens if one plays randomly. After all, these games are mostly used to waste time, and playing
randomly achieves this goal as well as any other strategy.

<P>
Games can very compactly represented as (possibly infinite) trees. Every node of the tree repre-
sents a possible game state. The root of the tree corresponds to the starting position of the game. For
an inner node, its children are the game states to which one can move in a single move. The leaf nodes
are the final states, and every one of them is assigned a number, which is the score one receives when
ending up at that leaf.

<P>
<DIV ALIGN="CENTER">

<img src=p664.gif>
</DIV>

<P>
Trees are defined using the following grammar.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<IMG
 WIDTH="406" HEIGHT="137"
 SRC="http://uva.onlinejudge.org/external/6/664img1.gif" 
 ALT="\begin{eqnarray*}Definition & ::= & Identifier \lq\lq ='' RealTree \\
RealTree & ::=...
...} \\
Integer & \in & \{ \dots, -3, -2, -1, 0, 1, 2, 3, \dots,\}
\end{eqnarray*}">
</DIV><P></P>
<BR CLEAR="ALL">

<P>
By using a <EM>Definition</EM>, the <EM>RealTree</EM> on the right-hand side of the
equation is assigned to the <EM>Identifier</EM> on the left. A <EM>RealTree</EM>
consists of a root node and one or more children, given as a sequence enclosed
in brackets. And a <EM>Tree</EM> is either

<P>
<UL>
<LI>the tree represented by a given <EM>Identifier</EM>, or

<P>
<LI>a leaf node, represented by a single <EM>Integer</EM>, or

<P>
<LI>an inner node, represented by a sequence of one or more <EM>Trees</EM> (its
children), enclosed in brackets.
</UL>

<P>
Your goal is to compute the expected score, if one plays randomly, i.e. at each inner node selects
one of the children uniformly at random. This expected score is well-defined even for the infinite trees
definable in our framework as long as the probability that the game ends (playing randomly) is 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several gametree descriptions. Each description starts with a line containing
the number <I>n</I> of identifiers used in the description. The identifiers used will be the first <I>n</I> lowercase
letters of the alphabet. The following <I>n</I> lines contain the definitions of these identifiers (in the order
<TT>a</TT>, <TT>b</TT>, ...). Each definition may contain arbitrary whitespace
(but of course there will be no spaces within a single integer). The right
hand side of a definition will contain only identifiers from the first <I>n</I>
lowercase letters.
The inputs ends with a test case starting with <I>n</I> = 0. This test case should
not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each gametree description in the input, first output the number of the
game. Then, for all <I>n</I> identifiers in the order <TT>a</TT>, <TT>b</TT>, ...,
output the following. If an identifier represents a gametree for which the
probability of finishing the game is 1, print the expected score (when playing
randomly). This value should be exact to three digits to the right of the
decimal point.

<P>
If the game described by the variable does not end with probability 1, print
``<TT>Expected score of id undefined</TT>'' instead.
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
a = ((1 7) 6 ((8 3) 4))
2
a = (1 b)
b = (4 a)
1
a = (a a a)
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Game 1
Expected score for a = 4.917

Game 2
Expected score for a = 2.000
Expected score for b = 3.000

Game 3
Expected score for a undefined
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
665||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>False coin</TITLE>
<META NAME="description" CONTENT="False coin">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
False coin</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<IMG
 WIDTH="282" HEIGHT="292" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/665img1.gif" 
 ALT="$\textstyle \parbox{.5\textwidth}{
The \lq\lq Gold Bar'' bank received information fr...
... less than, greater than, or equal to the weight of objects in the
right pan. }$">
<IMG
 WIDTH="290" HEIGHT="265" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/665img1.gif" 
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize 2.5in
\epsfbox{p665.eps}
\end{center}}$">

<P>
In order to detect the false coin the bank employees numbered all coins by the
integers from 1 to <I>N</I>, thus assigning each coin a unique integer identifier.
After that they began to weight various groups of coins by placing equal
numbers of coins in the left pan and in the right pan. The identifiers of
coins and the results of the weightings were carefully recorded. 

<P>
You are to
write a program that will help the bank employees to determine the identifier
of the false coin using the results of these weightings.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>The first line of each dataset contains two integers <I>N</I> and <I>K</I>, separated
by spaces, where <I>N</I> is the number of coins (
<!-- MATH: $1 \le N \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/665img1.gif" 
 ALT="$1 \le N \le 100$">)
and <I>K</I> is the
number of weightings fulfilled (
<!-- MATH: $1 \le  K \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/665img1.gif" 
 ALT="$1 \le K \le 100$">). The following 2<I>K</I> lines
describe all weightings. Two consecutive lines describe each weighting. The
first of them starts with a number <I>P</I><SUB><I>i</I></SUB> (
<!-- MATH: $1 \le P_i \le N/2$ -->
<IMG
 WIDTH="108" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/665img1.gif" 
 ALT="$1 \le P_i \le N/2$">), representing the number
of coins placed in the left and in the right pans, followed by <I>P</I><SUB><I>i</I></SUB>
identifiers of coins placed in the left pan and <I>P</I><SUB><I>i</I></SUB> identifiers of coins
placed in the right pan. All numbers are separated by spaces. 

<P>
The second line
contains one of the following characters: `<TT>&lt;</TT>', `<TT>&gt;</TT>', or `<TT>=</TT>'.
It represents the result of the weighting: 

<P>
<UL>
<LI>`<TT>&lt;</TT>' means that the weight of coins
in the left pan is less than the weight of coins in the right pan,
<LI>`<TT>&gt;</TT>' means
that the weight of coins in the left pan is greater than the weight of coins
in the right pan,
<LI>`<TT>=</TT>' means that the weight of coins in the left pan is
equal to the weight of coins in the right pan.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the output file the identifier of the false coin or <TT>0</TT>, if it
cannot be found by the results of the given weightings. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

5 3
2 1 2 3 4
&lt;
1 1 4
=
1 2 5
=
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
666||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Rating</TITLE>
<META NAME="description" CONTENT="Rating">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Rating</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One of the participants of both regional contests which took place in St. Petersburg decided 
to determine overall rating for all
teams that took part in at least one contest.

<P>
This participant assigned each team a unique team identifier, which was an integer 
from 1 to 100 inclusively. For each contest
team identifiers of the participating teams were written in a column according to their 
place in that contest. Identifiers of the
teams that had equal results were written on the same line. The participant started with 
the team(s) that was(were) the best in
that contest (writing them on the first line) and continued in the order of decreasing results.

<P>

<P>
<BR>

<U>Definition:</U> Let's say that the team has <B>place</B> <I>K</I> in the
contest if exactly 
<!-- MATH: $\underline{K -1}$ -->
<IMG
 WIDTH="51" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/666img1.gif" 
 ALT="$\underline{K -1}$">
teams performed in that contest better.

<P>

<P>
<BR>
Consider the following examples of two contests' results:

<P>

<IMG
 WIDTH="282" HEIGHT="228" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/666img1.gif" 
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{rl}
\multicolu...
...1 4 \\
5 & 5 \\
6 & 15 8 \\
8 & 31 18 \\
10 &17
\end{tabular}\end{center}}$">
<IMG
 WIDTH="277" HEIGHT="271" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/666img1.gif" 
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\begin{tabular}{rl}
\multicol...
...
5 & 6 \\
6 & 9 \\
7 & 19 \\
8 & 4 20 \\
10 & 21
\end{tabular}\end{center}}$">

<P>
The overall rating for the teams which took part in both contests is defined in the following way:

<P>
<DL COMPACT>
<DT>1)
<DD>If some team performed better in both contests than some other team
(or better in one contest and with the same result in the other contest) then
the overall rating of the former team is higher than the rating of the latter
team. 
<P>
<DT>2)
<DD>If one of the teams in question performed better in one contest and
the other team performed better in another contest then their overall rating
depends on the difference of their <B>places</B> in both contests. So, in our
example team 1 is better than team 5 in the first contest with a difference of
3 <B>places</B> and worse in the second contest with a difference of only 1
<B>place</B>, therefore the overall rating of team 1 is higher than team 5's
one. If the difference of the <B>places</B> is the same for both contests then
that teams have the equal overall ratings. The latter is also true for the
teams that performed equally in both contests. 
</DL>

<P>
In our example only teams 1, 4,
5, and 9 participated twice. Team 1 has the highest rating, teams 5 and 9 with
the equal rating follow, and team 4 has the lowest rating. 

<P>

<P>
<BR>
For the teams that
participated in one contest only the overall rating and their position in the
resulting list cannot be always determined. They are included in the overall
list (where the teams which participated twice already placed according to the
rules above) if one of the following takes place: 

<P>
<DL COMPACT>
<DT>A)
<DD>If there is a team that
participated in both contests and shared the place in one of the contests with
the team in question then the latter team shares the overall rating with this
team too (if there is more than one such team, then they all should have the
same overall rating, otherwise the overall rating of the team in question
cannot be determined). 
<P>
<DT>B)
<DD>If there is a <EM>position</EM> in the overall list (either
at the beginning of the list, at the end of the list, or between some lines),
such that before this position only the teams are located which performed
better in the same contest as the team in question and after this position
only the teams are located which performed worse in the same contest as the
team in question, then the team in question occupies this position in the
overall list. If more than one team claim to have the same position in the
overall list, then their mutual order is defined by their <B>places</B> in their
contests (look at the example below for details).  
</DL>

<P>
In our example: 

<P>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3>
<TR><TD ALIGN="RIGHT">Teams that
participated in both contests</TD>
<TD ALIGN="LEFT">Teams that participated in one contest only</TD>
</TR>
<TR><TD ALIGN="RIGHT">&nbsp;</TD>
<TD ALIGN="LEFT">3</TD>
</TR>
<TR><TD ALIGN="RIGHT">1</TD>
<TD ALIGN="LEFT">10</TD>
</TR>
<TR><TD ALIGN="RIGHT">9 5</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="RIGHT">&nbsp;</TD>
<TD ALIGN="LEFT">19</TD>
</TR>
<TR><TD ALIGN="RIGHT">4</TD>
<TD ALIGN="LEFT">20</TD>
</TR>
<TR><TD ALIGN="RIGHT">&nbsp;</TD>
<TD ALIGN="LEFT">15 8</TD>
</TR>
<TR><TD ALIGN="RIGHT">&nbsp;</TD>
<TD ALIGN="LEFT">31 18</TD>
</TR>
<TR><TD ALIGN="RIGHT">&nbsp;</TD>
<TD ALIGN="LEFT">17 21</TD>
</TR>
</TABLE></DIV>

<P>
<UL>
<LI>Team 3 will occupy the first
place in the overall list (rule B).
<LI>The positions of teams 6 and 7 cannot be
determined.
<LI>Team 10 will share the overall rating with team 1 (rule A).
<LI>Team 20 will share the overall rating with team 4 (rule A).
<LI>Team 19 will
occupy the position between teams 9, 5 and team 4 (rule B).
<LI>Teams 8, 15, 17,
18, 21, and 31 will finish the overall list (rule B). But the first of them
will be teams 15 and 8 (that took 6th <B>place</B>) followed by teams 31 and 18
(that took 8th <B>place</B>) and teams 17 and 21 (that took 10th <B>place</B>).
</UL>

<P>
Your task is to write a program that will create the overall rating list using
the result tables of two contests and the given rules.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

Each dataset contains a description of the two contests, which are separated by an empty line. Each description starts with a
line containing the single integer <I>N</I> (
<!-- MATH: $1 \le N \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/666img1.gif" 
 ALT="$1 \le N \le 100$">)
that
indicates how many lines of the contest result table follow. Each line of the
contest result table consists of one or more team identifiers separated by
spaces. 

<P>

<P>
<BR>
Every team identifier occurs at most once in the description of each
contest.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write one or more lines with the team identifiers (separated by spaces) that represent the overall rating list.
The order of the teams that share the same rating (thus written on the same line) is unimportant. The teams for which the
overall rating is not determined should be absent in the output file.
Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

6
9
7 1 4
5
15 8
31 18
17

8
3
5
1 10
6
9
19
4 20
21
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
3
1 10
5 9
19
4 20
15 8
31 18
17 21
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
667||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Fence</TITLE>
<META NAME="description" CONTENT="Fence">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Fence</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There is an area bounded by a fence on some flat field. The fence has the
height <I>h</I> and in the plane projection it has a form of a closed polygonal
line (without self-intersections), which is specified by Cartesian coordinates
(<I>X</I><SUB><I>i</I></SUB>, <I>Y</I><SUB><I>i</I></SUB>) of its <I>N</I> vertices. At the point with coordinates (0, 0) a lamp
stands on the field. The lamp may be located either outside or inside the
fence, but not on its side as it is shown in the following sample pictures
(parts shown in a thin line are not illuminated by the lamp): 

<P>
<DIV ALIGN="CENTER">

<img src=p667.gif>
</DIV>

<P>
The fence is
perfectly black, i.e. it is neither reflecting, nor diffusing, nor letting the
light through. Research and experiments showed that the following law
expresses the intensity of light falling on an arbitrary illuminated point of
this fence:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
I_0 = {k \over r} \ ,
\end{displaymath} -->


<IMG
 WIDTH="62" HEIGHT="43"
 SRC="http://uva.onlinejudge.org/external/6/667img1.gif" 
 ALT="\begin{displaymath}I_0 = {k \over r} \ ,
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
where <I>k</I> is a known constant value not depending on the point in question, <I>r</I>
is the distance between this point and the lamp in the plane projection. The
illumination of an infinitesimal narrow vertical board with the width <I>dl</I> and
the height <I>h</I> is
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
dI = I_0 \cdot \mid \cos a \mid \cdot dl \cdot h \ ,
\end{displaymath} -->


<IMG
 WIDTH="178" HEIGHT="31"
 SRC="http://uva.onlinejudge.org/external/6/667img1.gif" 
 ALT="\begin{displaymath}dI = I_0 \cdot \mid \cos a \mid \cdot dl \cdot h \ ,
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
where <I>I</I><SUB>0</SUB> is the intensity of light on that board of the fence, <I>a</I> is the
angle in the plane projection between the normal to the side of the fence at
this point and the direction to the lamp. 

<P>

<P>
<BR>
You are to write a program that will
find the total illumination of the fence that is defined as the sum of
illuminations of all its illuminated boards.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>The first line of each dataset contains the numbers <I>k</I>, <I>h</I> and <I>N</I>,
separated by spaces. <I>k</I> and <I>h</I> are real constants. <I>N</I> (
<!-- MATH: $3 \le N \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/667img1.gif" 
 ALT="$3 \le N \le 100$">)
is the number of vertices of the fence. Then <I>N</I> lines follow, every line
contains two real numbers <I>X</I><SUB><I>i</I></SUB> and <I>Y</I><SUB><I>i</I></SUB> , separated by a space.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the output file the total illumination of the fence rounded to the second 
digit after the decimal point. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

0.5 1.7 3
1.0 3.0
2.0 -1.0
-4.0 -1.0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
5.34
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
668||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Parliament</TITLE>
<META NAME="description" CONTENT="Parliament">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Parliament</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
New convocation of The Fool Land's Parliament consists of <I>N</I> delegates.
According to the present regulation delegates should be divided into disjoint
groups of different sizes and every day each group has to send one delegate to
the conciliatory committee. The composition of the conciliatory committee
should be different each day. The Parliament works only while this can be
accomplished.

<P>

<P>
<BR>
You are to write a program that will determine how many delegates should contain each group in order for Parliament to work
as long as possible.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.
Each dataset contains a single integer <I>N</I> (
<!-- MATH: $5 \le N \le 1000$ -->
<IMG
 WIDTH="110" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/668img1.gif" 
 ALT="$5 \le N \le 1000$">).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write to the output file the sizes of groups that allow the Parliament to work for the maximal possible time. These sizes should
be printed on a single line in ascending order and should be separated by spaces. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

31
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
2 3 5 6 7 8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
669||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Defragment</TITLE>
<META NAME="description" CONTENT="Defragment">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Defragment</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are taking part in the development of a ``New Generation'' operating system and the NG 
file system. In this file system all
disk space is divided into <I>N</I> clusters of the equal sizes, numbered by
integers from 1 to <I>N</I>. Each file occupies one or more clusters in arbitrary
areas of the disk. All clusters that are not occupied by files are considered
to be free. A file can be read from the disk in the fastest way, if all its
clusters are situated in the successive disk clusters in the natural order.

<P>

<P>
<BR>
Rotation of the disk with constant speed implies that various amounts of time are needed 
for accessing its clusters. Therefore,
reading of clusters located near the beginning of the disk performs faster than reading of 
the ones located near its ending. Thus,
all files are numbered beforehand by integers from 1 to <I>K</I> in the order of
descending  frequency of access. Under the optimal
placing of the files on the disk the file number 1 will occupy clusters 
<!-- MATH: $1,
2, \dots, S_1$ -->
<IMG
 WIDTH="87" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/669img1.gif" 
 ALT="$1,
2, \dots, S_1$">,
the file number 2 will occupy clusters 
<!-- MATH: $S_1 +1, S_1 +2,
\dots, S_1 +S_2$ -->
<IMG
 WIDTH="205" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/669img1.gif" 
 ALT="$S_1 +1, S_1 +2,
\dots, S_1 +S_2$">
and so on (here <I>S</I><SUB><I>i</I></SUB> is the number of clusters which the
<I>i</I>-th file occupies).

<P>

<P>
<BR>
In order to place the files on the disk in the optimal way cluster-moving operations are executed. One cluster-moving operation
includes reading of one occupied cluster from the disk to the memory and writing its contents to some free cluster. After that
the first of them is declared free, and the second one is declared occupied.

<P>

<P>
<BR>
Your goal is to place the files on the disk in the optimal way by executing the minimal possible number of cluster-moving
operations.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

The first line of each dataset file contains two integers <I>N</I> and <I>K</I> separated by
a space (
<!-- MATH: $1 \le K < N \le 10000$ -->
<IMG
 WIDTH="159" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/669img1.gif" 
 ALT="$1 \le K < N \le 10000$">). Then <I>K</I> lines follow,
each of them describes one file. The description of the <I>i</I>-th file starts
with the integer <I>S</I><SUB><I>i</I></SUB> that represents the number of clusters in the <I>i</I>-th
file (
<!-- MATH: $1 \le S_i < N$ -->
<IMG
 WIDTH="92" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/669img1.gif" 
 ALT="$1 \le S_i < N$">). Then <I>S</I><SUB><I>i</I></SUB> integers follow separated by spaces, which
indicate the cluster numbers of this file on the disk in the natural order.

<P>

<P>
<BR>
All cluster numbers in the input file are different and there is always at
least one free cluster on the disk.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, your program should write to the output file any sequence of cluster-moving operations that are needed in order to place the
files on the disk in the optimal way. Two integers <I>P</I><SUB><I>j</I></SUB> and <I>Q</I><SUB><I>j</I></SUB> separated
by a single space should represent each cluster-moving operation. <I>P</I><SUB><I>j</I></SUB> gives
the cluster number that the data should be moved FROM and <I>Q</I><SUB><I>j</I></SUB> gives the
cluster number that this data should be moved TO. 

<P>

<P>
<BR>
The number of cluster-moving
operations executed should be as small as possible. If the files on the disk
are already placed in the optimal way the output should contain only the
string ``<TT>No optimization needed</TT>".

<p>Print a blank line between datasets.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

20 3
4 2 3 11 12
1 7
3 18 5 10
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
2 1
3 2
11 3
12 4
18 6
10 8
5 20
7 5
20 7
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
670||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The dog task</TITLE>
<META NAME="description" CONTENT="The dog task">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The dog task</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Hunter Bob often walks with his dog Ralph. Bob walks with a constant speed and his route is a 
polygonal line (possibly self-
intersecting) whose vertices are specified by <I>N</I> pairs of integers 
(<I>X</I><SUB><I>i</I></SUB>, <I>Y</I><SUB><I>i</I></SUB>) - their Cartesian coordinates.

<P>

<P>
<BR>
Ralph walks on his own way but always meets his master at the specified <I>N</I>
points. The dog starts his journey simultaneously with Bob at the point (<I>X</I><SUB>1</SUB>,
<I>Y</I><SUB>1</SUB>) and finishes it also simultaneously with Bob at the point (<I>X</I><SUB><I>N</I></SUB> , <I>Y</I><SUB><I>N</I></SUB>).

<P>

<P>
<BR>
Ralph can travel at a speed that is up to two times greater than his master's speed. 
While Bob travels in a straight line from one
point to another the cheerful dog seeks trees, bushes, hummocks and all other kinds of 
<EM>interesting places</EM> of the local landscape
which are specified by <I>M</I> pairs of integers (<I>X</I>'<SUB><I>j</I></SUB>,<I>Y</I>'<SUB><I>j</I></SUB>). However, after leaving his 
master at the point (<I>X</I><SUB><I>i</I></SUB> , <I>Y</I><SUB><I>i</I></SUB>) (where 
<!-- MATH: $1 \le i < N$ -->
<IMG
 WIDTH="82" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/670img1.gif" 
 ALT="$1 \le i < N$">)
the dog visits at most one interesting place before meeting his master again at the point 
(
<!-- MATH: $X_{i+1} , Y_{i+1}$ -->
<I>X</I><SUB><I>i</I>+1</SUB> , <I>Y</I><SUB><I>i</I>+1</SUB>).

<P>

<P>
<BR>
Your task is to find the dog's route, which meets the above requirements and allows him to 
visit the maximal possible number
of interesting places. The answer should be presented as a polygonal line that represents 
Ralph's route. The vertices of this
route should be all points (<I>X</I><SUB><I>i</I></SUB> , <I>Y</I><SUB><I>i</I></SUB>) and the maximal number of
interesting places (
<!-- MATH: $X'_j, Y'_j$ -->
<I>X</I>'<SUB><I>j</I></SUB>, <I>Y</I>'<SUB><I>j</I></SUB>X). The latter should be visited (i.e.
listed in the route description) at most once.

<P>

<P>
<BR>
An example of Bob's route (solid line), a set of interesting places (dots) and one of the 
best Ralph's routes (dotted line) are
presented in the following picture:

<P>
<DIV ALIGN="CENTER">

<img src=p670.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer L, then a blank line followed by L datasets. There is a blank line between datasets.

<p>The first line of each dataset contains two integers <I>N</I> and <I>M</I>, separated
by a space (
<!-- MATH: $2 \le N \le 100, 0 \le M \le 100$ -->
<IMG
 WIDTH="210" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/670img1.gif" 
 ALT="$2 \le N \le 100, 0 \le M \le 100$">). The second
line contains <I>N</I> pairs of integers 
<!-- MATH: $X_1, Y_1, \dots, X_N, Y_N$ -->
<IMG
 WIDTH="149" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/670img1.gif" 
 ALT="$X_1, Y_1, \dots, X_N, Y_N$">,
separated by
spaces, that represent Bob's route. The third line contains <I>M</I> pairs of
integers 
<!-- MATH: $X'_1, Y'_1, \dots, X'_M, Y'_M$ -->
<IMG
 WIDTH="154" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/670img1.gif" 
 ALT="$X'_1, Y'_1, \dots, X'_M, Y'_M$">,
separated by spaces, that represent interesting places.

<P>

<P>
<BR>
All points in the input file are different and their coordinates are integers
not greater than 1000 by the absolute value.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The first line of each dataset should contain the single integer <I>K</I> - the
number of vertices of the best dog's route. The second line should contain <I>K</I>
pairs of coordinates 
<!-- MATH: $X''_1, Y''_1, \dots, X''_K, Y''_K$ -->
<IMG
 WIDTH="156" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/670img1.gif" 
 ALT="$X''_1, Y''_1, \dots, X''_K, Y''_K$">,
separated by spaces, that 
represent this route. If there are
several such routes, then you may write any of them.

<p>Print a blank line between datasets.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4 5
1 4 5 7 5 2 -2 4
-4 -2 3 9 1 2 -1 3 8 -3
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
6
1 4 3 9 5 7 5 2 1 2 -2 4
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
671||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Spell checker</TITLE>
<META NAME="description" CONTENT="Spell checker">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Spell checker</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You, as a member of a development team for a new spell checking program, are to write a module that will check the
correctness of given words using a known dictionary of all correct words in all their forms.

<P>

<P>
<BR>
If the word is absent in the dictionary then it can be replaced by correct words (from the dictionary) that can be obtained by
one of the following operations:

<P>
<UL>
<LI>deleting of one letter from the word;

<P>
<LI>replacing of one letter in the word with an arbitrary letter;

<P>
<LI>inserting of one arbitrary letter into the word.
</UL>

<P>
Your task is to write the program that will find all possible replacements from the dictionary for every given word.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of the input is an integer N, then a blank line followed by N datasets. There is a blank line between datasets.

<p>The first part of each dataset contains all words from the dictionary. Each word occupies its own line. This part is finished by
the single character `<TT>#</TT>' on a separate line. All words are different.
There will be at most 10000 words in the dictionary.

<P>

<P>
<BR>
The next part of the dataset contains all words that are to be checked. Each word occupies its own line. This part is also finished by
the single character `<TT>#</TT>' on a separate line. There will be at most 50 words that are to be checked.

<P>

<P>
<BR>
All words in the input file (words from the dictionary and words to be checked) consist only of small alphabetic characters and
each one contains 15 characters at most.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write exactly one line for every checked word in the order of their appearance in the second part of the input
file. If the word is correct (i.e. it exists in the dictionary) write the 
message: ``
<!-- MATH: $<checked word>$ -->
&lt;<I>checked word</I>&gt;<TT> is correct</TT>". If the word is not
correct then write this word first, then write the character `<TT>:</TT>' (colon),
and after a single space write all its possible replacements, separated by
spaces. The replacements should be written in the order of their appearance in
the dictionary (in the first part of the input file). If there are no
replacements for this word then the line feed should immediately follow the
colon.

<p>Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

i
is
has
have
be
my
more
contest
me
too
if
award
#
me
aware
m
contest
hav
oo
or
i
fi
mre
#
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
me is correct
aware: award
m: i my me
contest is correct
hav: has have
oo: too
or:
i is correct
fi: i
mre: more me
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
672||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gangsters</TITLE>
<META NAME="description" CONTENT="Gangsters">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gangsters</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<I>N</I> gangsters are going to a restaurant. The <I>i</I>-th gangster comes at the
time <I>T</I><SUB><I>i</I></SUB> and has the <EM>prosperity</EM> <I>P</I><SUB><I>i</I></SUB>. The door of the restaurant has
<I>K</I>+1 states of openness expressed by the integers in the range [0, <I>K</I>]. The
state of openness can change by one in one unit of time; i.e. it either opens
by one, closes by one or remains the same. At the initial moment of time the
door is closed (state 0). The <I>i</I>-th gangster enters the restaurant only if the
door is opened specially for him, i.e. when the state of openness coincides
with his <EM>stoutness</EM> <I>S</I><SUB><I>i</I></SUB>. If at the moment of time when the gangster
comes to the restaurant the state of openness is not equal to his stoutness,
then the gangster goes away and never returns.

<P>

<P>
<BR>
The restaurant works in the interval of time [0, <I>T</I>].

<P>

<P>
<BR>
The goal is to gather the gangsters with the maximal total prosperity in the restaurant 
by opening and closing the door appropriately.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.<p>
The first line of each dataset contains the values <I>N</I>, <I>K</I>, and <I>T</I>,
separated by spaces. (
<!-- MATH: $1 \le N \le 100, 1 \le K \le 100, 0 \le T \le 30000$ -->
<IMG
 WIDTH="326" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$1 \le N \le 100, 1 \le K \le 100, 0 \le T \le 30000$">)

<P>
The second line of the dataset contains the moments of time when
gangsters come to the restaurant 
<!-- MATH: $T_1, T_2, \dots, T_N$ -->
<IMG
 WIDTH="110" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$T_1, T_2, \dots, T_N$">,
separated by
spaces. (
<!-- MATH: $0 \le T_i \le T$ -->
<IMG
 WIDTH="88" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$0 \le T_i \le T$">
for 
<!-- MATH: $i = 1, 2, \dots, N$ -->
<IMG
 WIDTH="114" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$i = 1, 2, \dots, N$">)

<P>
The third line of the dataset contains the values of the prosperity of
gangsters 
<!-- MATH: $P_1, P_2 , \dots, P_N$ -->
<IMG
 WIDTH="113" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$P_1, P_2 , \dots, P_N$">,
separated by spaces. (
<!-- MATH: $0 \le P_i \le 300$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$0 \le P_i \le 300$">
for 
<!-- MATH: $i = 1, 2, \dots, N$ -->
<IMG
 WIDTH="114" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$i = 1, 2, \dots, N$">)

<P>
The forth line of the dataset contains the values of the stoutness of
gangsters 
<!-- MATH: $S_1, S_2, \dots, S_N$ -->
<IMG
 WIDTH="111" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$S_1, S_2, \dots, S_N$">,
separated by spaces. (
<!-- MATH: $1 \le S_i \le K$ -->
<IMG
 WIDTH="92" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$1 \le S_i \le K$">
for

<!-- MATH: $i = 1, 2, \dots, N$ -->
<IMG
 WIDTH="114" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/672img1.gif" 
 ALT="$i = 1, 2, \dots, N$">)


<P>

<P>
<BR>
All values in the input file are integers.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, print the single integer - the maximal sum of prosperity of gangsters in 
the restaurant. In case when no
gangster can enter the restaurant the output should be 0.
Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4 10 20
10 16 8 16
10 11 15 1
10 7 1 8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
26
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-05-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
673||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Parentheses Balance</TITLE>
<META NAME="description" CONTENT="Parentheses Balance">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Parentheses Balance</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are given a string consisting of parentheses <TT>()</TT> and <TT>[]</TT>.    A
string of this type is said to be <EM>correct</EM>:
<DL COMPACT>
<DT>(a)
<DD>if it is the empty string
<DT>(b)
<DD>if A and B are correct, AB is correct,
<DT>(c)
<DD>if A is correct, <TT>(</TT>A<TT>)</TT> and <TT>[</TT>A<TT>]</TT> is correct.
</DL>

<P>
Write a program that takes a sequence of strings of this type and check
their correctness. Your program can assume that the maximum string
length is 128.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The file contains a positive integer <I>n</I> and a sequence of <I>n</I> strings of
parentheses <TT>()</TT> and <TT>[]</TT>, one string a line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
A sequence of <TT>Yes</TT> or <TT>No</TT> on the output file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
([])
(([()])))
([()[]()])()
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Yes
No
Yes
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
674||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Coin Change</TITLE>
<META NAME="description" CONTENT="Coin Change">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Coin Change</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Suppose there are 5 types of coins: 50-cent, 25-cent, 10-cent, 5-cent, and
1-cent.    We want to make changes with these coins for a given amount
of money.    

<P>

<P>
<BR>
For example, if we have 11 cents, then we can make changes
with one 10-cent coin and one 1-cent coin,  two 5-cent coins and one 1-cent  
coin,  one  5-cent  coin  and  six  1-cent  coins,  or  eleven  1-cent coins.
So  there  are  four  ways of  making  changes  for  11  cents  with  the  
above coins.    Note  that  we count  that  there  is  one way of making
change  for zero cent.    

<P>

<P>
<BR>
Write a program to find the total number of
different ways of making  changes  for  any  amount  of  money  in  cents.   
Your  program should be able to handle up to 7489 cents.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains any number of lines, each one consisting of a number for the amount of money in cents.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input line, output a line containing the number of different ways of making changes with
the above 5 types of coins.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
11
26
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
4
13
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
675||||||false||||||
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="bdf">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <title>Convex Hull of the Polygon</title>
</head>
<body>
&nbsp;
<br>&nbsp;
<br>&nbsp;
<!--center><table BGCOLOR="#0060F0" >
<tr>
<td><a NAME="SECTION0001000000000000000000"></a><b><font color="#C0FFFF"><font size=+2>&nbsp;Convex
Hull of the Polygon&nbsp;</font></font></b></td>
</tr>
</table></center-->

<p>Suppose that a polygon is represented by a set of integer coordinates,
{(x<sub>0</sub>, y<sub>0</sub>), (x<sub>1</sub>, y<sub>1</sub>), (x<sub>2</sub>,
y<sub>2</sub>), ..., (x<sub>n</sub>, y<sub>n</sub>), (x<sub>0</sub>, y<sub>0</sub>)}.
Please find the convex hull of the polygon, where a convex hull is the
minimum bounding convex polygon and "convex" means the angle between two
consecutive edges is less than 180<sup>o</sup>.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input file</A>&nbsp;</FONT>
</H2>
Input consists of several datasets separated by a blank line. Each dataset contains a sequence of integer coordinates x<sub>i</sub>, y<sub>i</sub>, one in each line. All input sequence will contain at least 3 different points.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each dataset should contain a sequence of integer coordinates x<sub>i</sub>, y<sub>i</sub> specifying the convex hull, each in a line.
The first coordinate of the output sequence must be the first coordinate in the input sequence that belongs to the convex hull. The output sequence must be in counter-cockwise order.
Print a blank line between datasets.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0, 0
2, 0
1, 1
2, 2
0, 2
0, 0
</PRE>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2><PRE>
0, 0
2, 0
2, 2
0, 2
0, 0
</PRE>
</body>
</html>

______________________________________________________
676||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Horse Step Maze</TITLE>
<META NAME="description" CONTENT="Horse Step Maze">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Horse Step Maze</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Maze search has been developed for a long time, and the related
competition is held often. In this problem you have to design a program
that simulates a computer mouse to find a path in a maze from a starting
point to an ending point. To find such a path, the computer mouse must
follow the `<EM>knight</EM>' steps as shown in Fig. 1. The numbers 1, 2, 3 and 4
indicate the sequence of four directions the computer mouse has to try
while searching for a path. Specifically, the computer mouse must
always try direction 1 first until it cannot continue searching the path to
the ending point in the maze. When that happens, the computer mouse
can backtrack and try direction 2. Similarly, if direction 2 can not work,
direction 3 is tried and then direction 4.

<P>
<!--Your program has to prevent the path to enter in a loop.-->
Actually, our computer mouse is quite intelligent. Before it tries direction 1 it drops a stone. The mouse won't go into a field
with a stone on it (unless it is backtracking). But it's not very clever, so after trying direction 4 (before it backtracks) it
removes the stone.

<P>
<DIV ALIGN="CENTER">

<img src=p676.gif>

<P>
<BR>
<IMG
 WIDTH="20" HEIGHT="19" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/676img1.gif" 
 ALT="\begin{picture}(20,12)(0,0)
\put (10,6){\circle*{12}}
\end{picture}">
represents the location of computer mouse at present

<P>
<BR>
<IMG
 WIDTH="32" HEIGHT="6" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/676img1.gif" 
 ALT="\begin{picture}(20,12)(0,0)
\put (0,6){\vector(1,0){20}}
\end{picture}">
represents the step that computer mouse can walk

<P>
The numbers 1, 2, 3 and 4 indicate the sequence of four directions the
computer mouse must follow to find a path in the maze.

<P>

<P>
<BR>
Fig. 1: The rule of the horse step
</DIV>

<P>
The size of given maze is 9 by 9, and its coordinates are shown in Fig. 2.
Initially, you are given the starting and ending points of a maze. Your
program must print the walking path of the mouse if the ending point of
the maze can be reached and the number of steps is less than or equal to 50000.
If the number of steps is over 50000 print `<TT>more than 50000 steps</TT>'.
Otherwise, ``<TT>fail</TT>'' should be printed.

<P>
<DIV ALIGN="CENTER">

<img src=p676b.gif>

<P>
<BR>
Fig. 2: The coordinates of the maze
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer N, then a blank line followed by N datasets. There is a blank line between datasets.

<p>Each dataset consists of the coordinate of the starting point followed by the coordinate of the
ending point in a maze.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, output the coordinates of the walking path from the starting point to the ending
point or ``<TT>fail</TT>''. Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

(1,1)
(9,9)
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
(1,1), (2,2), (1,3), (2,4), (1,5), (2,6), (1,7), (2,8), (1,9), (2,8), (3,9), (4,8), (5,9), (6,8), (7,9), (8,8), (9,9)
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
677||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>All Walks of length n from the first node</TITLE>
<META NAME="description" CONTENT="All Walks of length n from the first node">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
All Walks of length <I>n</I> from the first node</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A computer network can be represented as a graph. Let G = (V, E) be an
undirected graph, V = 
<!-- MATH: $(v_1 , v_2 , v_3 , \dots, v_m)$ -->
<IMG
 WIDTH="142" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="$(v_1 , v_2 , v_3 , \dots, v_m)$">
represents all nodes,
where <I>m</I> is the number of nodes, and E represents all edges. The first 
node is <I>v</I><SUB>1</SUB> and the last node is <I>v</I><SUB><I>m</I></SUB> . The number of edges is <I>k</I>. Define
the adjacency matrix 
<!-- MATH: $A =(a_{ij})_{m \times m}$ -->
<IMG
 WIDTH="110" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="$A =(a_{ij})_{m \times m}$">
where
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
a_{ij}=1 \qquad \mbox{if } \{v_i,v_j\} \in \mbox{E, otherwise}
\qquad a_{ij}=0
\end{displaymath} -->


<IMG
 WIDTH="360" HEIGHT="32"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="\begin{displaymath}a_{ij}=1 \qquad \mbox{if } \{v_i,v_j\} \in \mbox{E, otherwise}
\qquad a_{ij}=0 \end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
An example of the adjacency matrix and its corresponding graph are as
follows:

<P>

<IMG
 WIDTH="282" HEIGHT="126" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{displaymath}
\left [
\begin{array}{ccc...
...
1 & 0 & 1 & 0 & 1 \\
0 & 0 & 1 & 1 & 0
\end{array}\right ]
\end{displaymath}}$">
<IMG
 WIDTH="277" HEIGHT="169" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize 1in
\epsfbox{p677.eps}
\end{center}}$">

<P>

<P>
<BR>
Calculate
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
A^n = \underbrace{A \cdot A \cdots A}_n
\end{displaymath} -->


<IMG
 WIDTH="124" HEIGHT="49"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="\begin{displaymath}A^n = \underbrace{A \cdot A \cdots A}_n
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
and use the Boolean operations where 
<!-- MATH: $0+0 = 0, 0+1=1+0=1, 1+1=1$ -->
0+0 = 0, 0+1=1+0=1, 1+1=1, and

<!-- MATH: $0 \cdot 0=0 \cdot 1=1 \cdot 0=0, 1 \cdot 1=1$ -->
<IMG
 WIDTH="243" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="$0 \cdot 0=0 \cdot 1=1 \cdot 0=0, 1 \cdot 1=1$">.
The entry in row <I>i</I> and 
column <I>j</I> of <I>A</I><SUB><I>n</I></SUB> is 1 if and only if at least there exists a walk of 
length <I>n</I> between the <I>i</I>-th and <I>j</I>-th nodes of V. In other words, the
distinct walks of length <I>n</I> between the <I>i</I>-th and <I>j</I>-th nodes of V may be
more than one. Note that the node in the paths can be repetitive.

<P>

<P>
<BR>
The following example shows the walks of length 2.
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
A^2 = A \cdot A =
\left [
\begin{array}{ccccc}
0 & 1 & 0 & 1 & 0 \\
1 & 0 & 1 & 0 & 0 \\
0 & 1 & 0 & 1 & 1 \\
1 & 0 & 1 & 0 & 1 \\
0 & 0 & 1 & 1 & 0
\end{array}
\right ]
\cdot
\left [
\begin{array}{ccccc}
0 & 1 & 0 & 1 & 0 \\
1 & 0 & 1 & 0 & 0 \\
0 & 1 & 0 & 1 & 1 \\
1 & 0 & 1 & 0 & 1 \\
0 & 0 & 1 & 1 & 0
\end{array}
\right ]
=
\left [
\begin{array}{ccccc}
1 & 0 & 1 & 0 & 1 \\
0 & 1 & 0 & 1 & 1 \\
1 & 0 & 1 & 1 & 1 \\
0 & 1 & 1 & 1 & 1 \\
1 & 1 & 1 & 1 & 1
\end{array}
\right ]
\end{displaymath} -->


<IMG
 WIDTH="555" HEIGHT="115"
 SRC="http://uva.onlinejudge.org/external/6/677img1.gif" 
 ALT="\begin{displaymath}A^2 = A \cdot A =
\left [
\begin{array}{ccccc}
0 & 1 & 0 & 1 ...
...\
0 & 1 & 1 & 1 & 1 \\
1 & 1 & 1 & 1 & 1
\end{array}\right ]
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>

<P>
<BR>
Write programs to do above calculation and print out all distinct walks of
length <I>n</I>. (In this problem we let the maximum walks of length <I>n</I> be 5 and
the maximum number of nodes be 10.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains a number of test examples, the test examples
are separated by <TT>-9999</TT>. Each test example consists of the number of
nodes and the length of walks in the first row, and then the adjacency
matrix.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file must contain all distinct walks of the length <I>n</I>, and with
all its nodes different, from the first node, listed in lexicographical order.
In case there are not walks of length <I>n</I>, just print `<TT>no walk of length
</TT><I>n</I>'

<P>
Separate the output of the  different cases by a blank line. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 2
0 1 0 1 0
1 0 1 0 0
0 1 0 1 1
1 0 1 0 1
0 0 1 1 0
-9999
5 3
0 1 0 1 0
1 0 1 0 0
0 1 0 1 1
1 0 1 0 1
0 0 1 1 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
(1,2,3)
(1,4,3)
(1,4,5)

(1,2,3,4)
(1,2,3,5)
(1,4,3,2)
(1,4,3,5)
(1,4,5,3)
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
678||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Schedule of Taiwan Baseball League</TITLE>
<META NAME="description" CONTENT="Schedule of Taiwan Baseball League">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Schedule of Taiwan Baseball League</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Taiwan baseball league and the sport division of the ministry of education
of Taiwan are planning to organize a major event with world baseball
championship. After several rounds of discussions among the members
of the organizing committee, the details of the game plan are as follows.

<P>
<DL COMPACT>
<DT>1.
<DD>There will be <I>N</I> teams invited to the competition, and <I>N</I> will be a
power of 2. (<I>N</I> will also be less than or equal to 128 and, of course,
greater than 2.)
<P>
<DT>2.
<DD>A round-robin competition and game schedule will be used. It means
every team will play every other team exactly once.

<P>
<DT>3.
<DD>Two cities will collectively host the games. Kaohsiung and Taipei will
be the two cities to host the game, and Taipei Baseball Stadium and
Kaohsiung Baseball Stadium (Lee-Der Stadium) will be used as the
game fields.
</DL>

<P>
Please write a program to produce a schedule for the games. The
schedule needs to satisfy the following criteria.

<P>
<DL COMPACT>
<DT>a)
<DD>The game schedule is round-robin. Suppose there are <I>N</I> teams to
participate in the competition, you need to schedule games to be
played in exactly <I>N</I>-1 days. In each day of the competition, every
team will have to play exactly one game.
<P>
<DT>b)
<DD>The games have to be scheduled evenly between Taipei and
Kaohsiung. There will be equal number of games to be played each
day between Taipei and Kaohsiung in your produced schedule.

<P>
<DT>c)
<DD>The organizing committee also hopes to reduce the total number of
travellings for the teams. Therefore, your schedule has to be the one
with the minimum travellings for teams to travel between Taipei and
Kaohsiung. For example, if a team plays in Taipei in Day 1, and
then the same team plays in Kaohsiung in Day 2, we say that the
travelling total is one. Your goal is to produce a schedule so that the
total travelling combined with all the teams is the minimum. The
fairness with the amount of travellings for each team is not required
by the organizing committee. We assume no travelling accounts in
the first day of the game. The travelling total will be counted from
day 2 of the games.
</DL>

<P>

<P>
<BR>
In the testing data, there will be <I>K</I> sets of data.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
<I>K</I>

<P>

<I>N</I><SUB>1</SUB>

<P>

<I>N</I><SUB>2</SUB>

<P>

<IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/678img2.gif" 
 ALT="$\dots$">

<P>

<I>N</I><SUB><I>k</I></SUB>

<P>

<P>
<BR>

<I>K</I> is the number of testing data. 
<!-- MATH: $N_i, i=1, \dots,K$ -->
<IMG
 WIDTH="124" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/678img2.gif" 
 ALT="$N_i, i=1, \dots,K$">,
are the total number 
of teams invited for the competitions. Totally, there are <I>K</I> sets of data to
be tested.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
<I>T</I><SUB>1</SUB>

<P>

<I>T</I><SUB>2</SUB>

<P>

<IMG
 WIDTH="25" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/678img2.gif" 
 ALT="$\dots$">

<P>

<I>T</I><SUB><I>k</I></SUB>

<P>

<P>
<BR>
For each testing case <I>N</I><SUB><I>i</I></SUB>, you must report a schedule of
travellings for the all the teams. The amount of travellings has to be
minimum to be able to be correct. Format your output as shown in the sample
below. In case no teams have to travel between two consecutive days, print
`<TT>No teams travelling between day </TT><I>n</I><TT> and day </TT><I>n</I>+1<TT>.</TT>'

<P>
The order in the report has to follow the
input order with each testing case. Print a blank line between cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Day 1:
  Taipei: (1-2) (3-4).
  Kaohsiung: (5-6) (7-8).
  No teams travelling between day 1 and day 2.
Day 2:
  Taipei: (1-3) (2-4).
  Kaohsiung: (5-7) (6-8).
  No teams travelling between day 2 and day 3.
Day 3:
  Taipei: (1-4) (2-3).
  Kaohsiung: (5-8) (6-7).
  Teams travelling between day 3 and day 4: 3,5,4,6.
Day 4:
  Taipei: (1-5) (2-6).
  Kaohsiung: (3-7) (4-8).
  No teams travelling between day 4 and day 5.
Day 5:
  Taipei: (1-6) (2-5).
  Kaohsiung: (3-8) (4-7).
  Teams travelling between day 5 and day 6: 5,7,6,8.
Day 6:
  Taipei: (1-7) (2-8).
  Kaohsiung: (3-5) (4-6).
  No teams travelling between day 6 and day 7.
Day 7:
  Taipei: (1-8) (2-7).
  Kaohsiung: (3-6) (4-5).
Total number of travels: 8
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-25</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
679||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dropping Balls</TITLE>
<META NAME="description" CONTENT="Dropping Balls">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dropping Balls</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A  number  of  <I>K</I> balls  are  dropped  one  by  one  from  the  root  of  a 
fully  binary  tree structure  FBT. Each  time  the  ball  being  dropped 
first  visits  a  non-terminal  node.  It then  keeps  moving down, either 
follows  the  path  of  the  left  subtree,  or  follows  the path of the
right subtree, until it stops at one of the leaf nodes of FBT. To determine a
ball's moving direction a flag is set up in every non-terminal node with two
values, either <B>false</B> or <B>true</B>. Initially, all of the flags are
<B>false</B>. When visiting a non-terminal node if the flag's current value at
this node is <B>false</B>, then the ball will first switch this flag's value,
i.e., from the <B>false</B> to the <B>true</B>, and then follow the left subtree
of this node to keep moving down. Otherwise, it will also switch this flag's
value, i.e., from the <B>true</B> to the <B>false</B>, but will follow the right
subtree of this node to keep moving down. Furthermore, all nodes of FBT are
sequentially numbered, starting at 1 with nodes on depth 1, and then those on
depth 2, and so on. Nodes on any depth are numbered from left to right. 

<P>

<P>
<BR>
For example, Fig. 1 represents a fully binary tree of maximum depth 4 with
the node numbers 1, 2, 3, ..., 15. Since all of the flags are initially set to
be <B>false</B>, the first ball being dropped will switch flag's values at node
1, node 2, and node 4 before it finally stops at position 8. The second ball
being dropped will switch flag's values at node 1, node 3, and node 6, and
stop at position 12. Obviously, the third ball being dropped will switch
flag's values at node 1, node 2, and node 5 before it stops at position 10. 

<P>
<DIV ALIGN="CENTER">

<img src=p679.gif>

<P>

<P>
<BR>
Fig. 1: An example of FBT with the maximum depth 4 and sequential
node numbers. 
</DIV>

<P>

<P><P>
<BR>
Now consider a number of test cases where two values will be given for each test. The
first value is <I>D</I>, the maximum depth of FBT, and the second one is <I>I</I>, 
the <I>I</I><SUP><I>th</I></SUP> ball being dropped. You may assume the value of <I>I</I> will not
exceed the total number of leaf nodes for the given FBT. 

<P>
Please write a program to determine the stop position <I>P</I> for
each test case.

<P>

<P>
<BR>
For each test cases the range of two parameters <I>D</I> and <I>I</I> is as below:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
2 \le D \le 20, \mbox{ and } 1 \le I \le 524288.
\end{displaymath} -->


<IMG
 WIDTH="255" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/6/679img1.gif" 
 ALT="\begin{displaymath}2 \le D \le 20, \mbox{ and } 1 \le I \le 524288.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Contains <I>l</I>+2 lines.
<PRE><TT>
Line 1 		 <I>I</I> the number of test cases 
Line 2 		 <IMG
 WIDTH="48" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/679img1.gif" 
 ALT="$D_1 \ I_1$">
test case #1, two decimal numbers that are separatedby one blank 
... 		 		 
Line <I>k</I>+1 <IMG
 WIDTH="49" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/679img1.gif" 
 ALT="$D_k \ I_k$">
test case #<I>k</I> 
Line <I>l</I>+1 <IMG
 WIDTH="42" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/679img1.gif" 
 ALT="$D_l \ I_l$">
test case #<I>l</I> 
Line <I>l</I>+2 <TT>-1</TT> 		 a constant -1 representing the end of the input file
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Contains <I>l</I> lines.
<PRE><TT>
Line 1 		 the stop position <I>P</I> for the test case #1 
... 		 
Line <I>k</I> the stop position <I>P</I> for the test case #<I>k</I> 
... 		 
Line <I>l</I> the stop position <I>P</I> for the test case #<I>l</I>
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
4 2
3 4
10 1
2 2
8 128
-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
12
7
512
3
255
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
680||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Movement of Reading Head</TITLE>
<META NAME="description" CONTENT="Movement of Reading Head">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Movement of Reading Head</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Suppose we have <I>K</I> files representing by 
<!-- MATH: $F_1, F_2, \dots, F_K$ -->
<IMG
 WIDTH="113" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$F_1, F_2, \dots, F_K$">.
The
total length of these files, measured in block numbers, is <I>N</I> blocks, and 
the length of each file is <I>L</I><SUB><I>i</I></SUB> block(s) for 
<!-- MATH: $1 \le i \le K$ -->
<IMG
 WIDTH="82" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le i \le K$">.
We denote 
the <I>b</I><SUP><I>th</I></SUP> block of a file <I>F</I><SUB><I>i</I></SUB> as <I>F</I><SUB><I>i</I></SUB>(<I>b</I>) for 
<!-- MATH: $1 \le b \le L_i$ -->
<IMG
 WIDTH="85" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le b \le L_i$">;
e.g.,
the 9<SUP><I>th</I></SUP> block of <I>F</I><SUB>2</SUB> file is <I>F</I><SUB>2</SUB>(9), and the 4<SUP><I>th</I></SUP> block of <I>F</I><SUB>3</SUB>
file is <I>F</I><SUB>3</SUB>(4). 

<P>
Now consider a storage space S consisting of a single
reading head and <I>N</I> blocks with sequential number starting from 0 to <I>N</I>-1.
These <I>K</I> files are stored to the space S in a sequential order from 

<!-- MATH: $F_1, F_2, F_3 , \dots, F_K$ -->
<IMG
 WIDTH="139" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$F_1, F_2, F_3 , \dots, F_K$">.
We will assume that there is no spare blocks
left for storing these <I>K</I> files. Apparently, this means that 
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\sum_{i=1}^K L_i = N
\end{displaymath} -->


<IMG
 WIDTH="82" HEIGHT="58"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="\begin{displaymath}\sum_{i=1}^K L_i = N
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
When reading from S, a profile array PF is used to indicate the starting
block of the reading for every file, and the reading order is to read a block
at <I>F</I><SUB>1</SUB>, then a block at <I>F</I><SUB>2</SUB>, ..., a block at <I>F</I><SUB><I>K</I></SUB> with one block being
read for a file at one time. After <I>F</I><SUB><I>K</I></SUB> is being read, we restart to read the
next block at <I>F</I><SUB>1</SUB>, then the next block at <I>F</I><SUB>2</SUB>, ..., and the process
circulates in this fashion. Within a file when the previous reading has
reached to the last block, the next block to be read is the first block of
this file. 

<P>
Obviously, the reading head has to move through several blocks
during each time of reading. Thus, we define a term TB(<I>P</I>) to be the total
number of blocks that the reading head needs to move for the <I>P</I> consecutive
times of reading. Apparently, we will be interested in finding the value of
TB(<I>P</I>). Given the profile array PF you may assume the reading head is
initially rested on the starting block of the first file that is going to be
read, and thus TB(1) = 0. 

<P>

<P>
<BR>
For example: let 
<!-- MATH: $K = 3, N =12, L_1 = 5, L_2 = 3, L_3 = 4$ -->
<I>K</I> = 3, <I>N</I> =12, <I>L</I><SUB>1</SUB> = 5, <I>L</I><SUB>2</SUB> = 3, <I>L</I><SUB>3</SUB> = 4, PF be 2, 3, 3.
These three files will be stored to S as shown in Fig. 1.

<P>
<DIV ALIGN="CENTER">

<img src=p680.gif>

<P>

<P>
<BR>
Fig. 1: An example of three files being stored in the storage S.
</DIV>

<P>
According to the given PF the reading head is initially rested on the second block of
the first file, i.e., <I>F</I><SUB>1</SUB>(2). When reading from S, the first time of
reading is to read the second block of <I>F</I><SUB>1</SUB>, i.e., <I>F</I><SUB>1</SUB>(2), which is located
at position 1. At this time TB(1) = 0. The second time of reading is to read
the third block of <I>F</I><SUB>2</SUB>, i.e., <I>F</I><SUB>2</SUB>(3), which is located at position 7. Thus,
the total number of blocks that the reading head has to move for 2 consecutive
times of reading, i.e., TB(2), is 6 blocks. 

<P>
Similarly, the third time of
reading is to read the third block of <I>F</I><SUB>3</SUB>, i.e., <I>F</I><SUB>3</SUB>(3), which is located
at position 10. This means that the reading head has to move 3 blocks for the
third time of reading. Thus, the total number of blocks that the reading head
has to move for 3 consecutive times of reading is 9 blocks, i.e., TB(3) = 0 +
6 + 3 = 9 blocks. Similarly, the fourth time of reading is to read the third
block of <I>F</I><SUB>1</SUB>, i.e., <I>F</I><SUB>1</SUB> (3), which is located at position 2. This means
that the reading head has to move 8 blocks for the fourth time of reading.
Thus, the total number of blocks that the reading head has to move for 4
consecutive times of reading is 17 blocks, i.e., TB(4) = 0 + 6 + 3 + 8 = 17
blocks. 

<P>

<P>
<BR>
Now
given the parameters <I>K</I>, <I>N</I>, <I>L</I><SUB><I>i</I></SUB>, PF, <I>P</I>, please write a program to report the
value of TB(<I>P</I>), where 
<PRE><TT>
<I>K</I>: 		 number of files, 
<I>N</I>: 		 number of blocks in the storage S, 
<I>L</I><SUB><I>i</I></SUB>: 		 the length of each file, whereeach value is separated by a blank, 
PF: 		 array of <I>K</I> integers representingthe starting block of the reading for each file
		 where each value is separated by a blank, and 
<I>P</I>: 		 number of the consecutive times of reading.
</TT></PRE>

<P>

<P>
<BR>
The range of each parameter is as below:

<P>

<!-- MATH: $1 \le K \le 10$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le K \le 10$">

<P>

<!-- MATH: $1 \le N \le 1000$ -->
<IMG
 WIDTH="110" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le N \le 1000$">

<P>

<!-- MATH: $1 \le L_i \le 100$ -->
<IMG
 WIDTH="103" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le L_i \le 100$">
for each <I>i</I>

<P>

<!-- MATH: $1 \le \mbox{ entry in PF } \le L_i$ -->
<IMG
 WIDTH="178" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 \le \mbox{ entry in PF } \le L_i$">
for each file, and

<P>

<!-- MATH: $1 < P \le 1000$ -->
<IMG
 WIDTH="108" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$1 < P \le 1000$">.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Contains <I>l</I> + 2 lines.
<PRE><TT>
Line 1 		 <I>l</I> the number of test cases 
Line 2 		 
<!-- MATH: $K \ N \ L_1 \ L_2 \dots L_k$ -->
<IMG
 WIDTH="139" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$K \ N \ L_1 \ L_2 \dots L_k$">
PF <I>P</I> test case #1, 2<I>K</I>+3 decimalvalues
		 		 each of which is separated by a blank 
... 
Line <I>k</I>+1 
<!-- MATH: $K \ N \ L_1 \ L_2 \dots L_k$ -->
<IMG
 WIDTH="139" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$K \ N \ L_1 \ L_2 \dots L_k$">
PF <I>P</I> test case #<I>k</I> 
... 
Line <I>l</I>+1 
<!-- MATH: $K \ N \ L_1 \ L_2 \dots L_k$ -->
<IMG
 WIDTH="139" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/680img1.gif" 
 ALT="$K \ N \ L_1 \ L_2 \dots L_k$">
PF <I>P</I> test case #<I>l</I> 
Line <I>l</I>+2 <TT>-1</TT> 		 a constant -1 representing the end of the input file
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Contains <I>l</I> lines.
<PRE><TT>
Line 1 		 output for the value of TB(<I>P</I>) at the test case #1 
... 
Line <I>k</I> output for the value of TB(<I>P</I>) at the test case #<I>k</I> 
... 
Line <I>l</I> output for the value of TB(<I>P</I>) at the test case #<I>l</I>
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
3 12 5 3 4 2 3 3 3
3 12 5 3 4 2 3 3 4
3 12 5 3 4 1 1 1 4
2 10 5 5 1 1 2
2 10 5 5 1 2 2
-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
9
17
15
5
6
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
681||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Convex Hull Finding</TITLE>
<META NAME="description" CONTENT="Convex Hull Finding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Convex Hull Finding</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Given a single connected contour, which is either convex or non-convex 
(concave), use any algorithm to find its <B>Convex Hull</B>, i.e., the smallest
convex contour enclosing the given shape. If the given contour is convex, then
its convex hull is the original contour itself. The maximal size of the shape
is 512<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$\times$">512, and the maximal number of the vertices of the shape is 512.
Write a program to read the input data (the given shapes) from a disk file,
implement your convex hull finding algorithm, and then output the shape data
of the results to the standard output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The order of the vertices is counterclockwise in <I>X</I>-<I>Y</I> Cartesian Plane (if you
consider the origin of the display window is on the upper-left corner, then
the orientation of the vertices is clockwise), and none of the neighboring
vertices are co-linear. Since all the shapes are closed contours, therefore,
the last vertex should be identical to the first vertex. There are several
sets of data within a given data file. The negative number <TT>-1</TT> is used to
separate the data set. 

<P>

<P>
<BR>

<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER"><B> Line</B></TD>
<TD ALIGN="LEFT"><B> Data in</B></TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> Number</B></TD>
<TD ALIGN="LEFT"><B> the File</B></TD>
<TD ALIGN="LEFT"><B> Explanation</B></TD>
</TR>
<TR><TD ALIGN="CENTER">1</TD>
<TD ALIGN="LEFT"><I>K</I></TD>
<TD ALIGN="LEFT">a positive integer showing how many sets of data in this file</TD>
</TR>
<TR><TD ALIGN="CENTER">2</TD>
<TD ALIGN="LEFT"><I>N</I></TD>
<TD ALIGN="LEFT">a positive integer showing the number of vertices for the shape</TD>
</TR>
<TR><TD ALIGN="CENTER">3</TD>
<TD ALIGN="LEFT"><IMG
 WIDTH="50" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$X_1 \ Y_1$"></TD>
<TD ALIGN="LEFT">two positive integers for the first vertex 
<!-- MATH: $(X_1, Y_1)$ -->
(<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>)</TD>
</TR>
<TR><TD ALIGN="CENTER">4</TD>
<TD ALIGN="LEFT"><IMG
 WIDTH="50" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$X_2 \ Y_2$"></TD>
<TD ALIGN="LEFT">two positive integers for the next neighboring vertex 
<!-- MATH: $(X_2,
Y_2)$ -->
(<I>X</I><SUB>2</SUB>,
<I>Y</I><SUB>2</SUB>)</TD>
</TR>
<TR><TD ALIGN="CENTER">...</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
<TR><TD ALIGN="CENTER"><I>N</I>+2</TD>
<TD ALIGN="LEFT"><IMG
 WIDTH="61" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$X_N \ Y_N$"></TD>
<TD ALIGN="LEFT">two positive integers for the last vertex 
<!-- MATH: $(X_N, Y_N)$ -->
(<I>X</I><SUB><I>N</I></SUB>, <I>Y</I><SUB><I>N</I></SUB>)</TD>
</TR>
<TR><TD ALIGN="CENTER"><I>N</I>+3</TD>
<TD ALIGN="LEFT"><TT> -1</TT></TD>
<TD ALIGN="LEFT">Delimiter</TD>
</TR>
<TR><TD ALIGN="CENTER"><I>N</I>+4</TD>
<TD ALIGN="LEFT"><I>M</I></TD>
<TD ALIGN="LEFT">a positive integer showing the number of vertices for the next
shape</TD>
</TR>
<TR><TD ALIGN="CENTER"><I>N</I>+5</TD>
<TD ALIGN="LEFT">
<!-- MATH: $XX_1 \ YY_1$ -->
<IMG
 WIDTH="80" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$XX_1 \ YY_1$"></TD>
<TD ALIGN="LEFT">two positive integers for the first vertex</TD>
</TR>
<TR><TD ALIGN="CENTER">...</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
<TD ALIGN="LEFT">&nbsp;</TD>
</TR>
</TABLE>

<P>

<P><P>
<BR>

<B>Note:</B> Please note that the <B>Line Number</B>, <B>Data in the File</B> and
<B>Explanation</B> are not given in the file. They are shown here only to assist
you in reading the data.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output the convex hull of all <I>K</I> input shapes to the standard output. The
data format should be the same as the input file. In addition, the vertex with
the smallest <I>Y</I> value should  be  the  first  point  and  if  there  are 
points  with  the  same  <I>Y</I> value,  then  the smallest <I>X</I> value within those
points should be the first point.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
15
30 30
50 60
60 20
70 45
86 39
112 60
200 113
250 50
300 200
130 240
76 150
47 76
36 40
33 35
30 30
-1
12
50 60
60 20
70 45
100 70
125 90
200 113
250 140
180 170
105 140
79 140
60 85
50 60
-1
6
60 20
250 140
180 170
79 140
50 60
60 20
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
3
8
60 20
250 50
300 200
130 240
76 150
47 76
30 30
60 20
-1
6
60 20
250 140
180 170
79 140
50 60
60 20
-1
6
60 20
250 140
180 170
79 140
50 60
60 20
</PRE>

<P>
<BR>
<BR>
<BR>
<IMG
 WIDTH="343" HEIGHT="348" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$\textstyle \parbox{.44\textwidth}{
\begin{center}
The contour shape of the firs...
...n in figure as follows:
\mbox{}
\epsfysize 2in \epsfbox{p681.eps}
\end{center}}$">

<IMG
 WIDTH="305" HEIGHT="348" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/681img1.gif" 
 ALT="$\textstyle \parbox{.44\textwidth}{
\begin{center}
The convex hull of the above ...
... the following figure:
\mbox{}
\epsfysize 2in \epsfbox{p681b.eps}
\end{center}}$">

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
682||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Whoever-pick-the-last-one-lose</TITLE>
<META NAME="description" CONTENT="Whoever-pick-the-last-one-lose">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Whoever-pick-the-last-one-lose</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Consider the following <B>whoever-pick-the-last-one-lose</B> game. The game is
played on a  5<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/682img1.gif" 
 ALT="$\times$">5 board.  Initially  every  array  cell  has  a  piece 
in  it.  Two players  remove pieces alternatively  from  the  board.  The 
player  can  remove  any  number  of  consecutive pieces  in a row or column.
For example,  in  the configuration depicted below where one  indicates  a 
piece,  the  player  can  either  remove  one  piece  (<B>A1</B>, <B>A2</B>,  or 
<B>B1</B>),  or remove two pieces (<B>A1</B> and <B>A2</B>, or <B>A1</B> and
<B>B1</B>) simultaneously. The game ends when one player is forced to take the
last piece, and the other player wins the game.

<P>

<P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> 1</B></TD>
<TD ALIGN="CENTER"><B> 2</B></TD>
<TD ALIGN="CENTER"><B> 3</B></TD>
<TD ALIGN="CENTER"><B> 4</B></TD>
<TD ALIGN="CENTER"><B> 5</B></TD>
</TR>
<TR><TD ALIGN="CENTER"><B> A</B></TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> B</B></TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> C</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> D</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> E</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
</TABLE></DIV>

<P>

<P>
<BR>
Write  a  program  that  evaluates  board  configurations  from  this  game.  
The  program must  output  ``<TT>winning</TT>'' when there exists a winning move
that no matter how the opponent responds, it will force the opponent to take
the last piece. Otherwise, the program must output ``<TT>losing</TT>''. 

<P>

<P>
<BR>
Note that
during the game tree evaluation, if the current configuration has a winning
move, then it is not necessary to search any further because the configuration
is guaranteed to be winning. This can greatly reduce the game tree search time.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains 5<I>c</I> + 1 lines.

<P>
<PRE><TT>
Line 1 		 <I>c</I> the number of configurations 
Lines 2-6 		 ... 		 configuration #1 
... 		 ... 		 
Lines 5<I>c</I>-3 to 5<I>c</I>+1 ... 		 configuration #<I>c</I>
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output contains <I>c</I> lines.
<PRE><TT>
Line 1 		 evaluation result of configuration #1 
... 
Line <I>c</I> evaluation result of configuration #<I>c</I>
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1 1 0 0 0
1 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
1 1 0 0 0
0 0 0 0 0
1 1 0 0 0
0 0 0 0 0
0 0 0 0 0
1 1 1 0 0
1 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
winning
losing
winning
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
683||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Character Decoding</TITLE>
<META NAME="description" CONTENT="Character Decoding">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Character Decoding</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
This is a test for decoding characters' values. Assume a numerical expression is
encoded in English characters by replacing some digit numbers (from 0 to 9) with
English characters. So this kind of numerical expressions can be expressed in new
forms, such as

<P>
<DIV ALIGN="CENTER">
<TT>2BAD = ABE + CD</TT>
</DIV>

<P>
Please write a program to decode the expressions in characters and output the
numerical value of characters, according to the following rules and assumptions.

<P>
<DL COMPACT>
<DT>1.
<DD>All character values are integers between 0 to 9 both inclusive.
<P>
<DT>2.
<DD>An expression is represented as a set of items combined with operators. Only the
operators <TT>+</TT>, <TT>-</TT> and <TT>=</TT> are used in each expression. And at
most 5 items are used in one expression.

<P>
<DT>3.
<DD>There is one and only one operator <TT>=</TT> in each expression. And only
one item is in the left-hand side of the operator <TT>=</TT>.

<P>
<DT>4.
<DD>Each item is represented by a combination of capital English characters and digital
numbers. The value of the left-most character in each item is not 0.

<P>
<DT>5.
<DD>The input data are represented as several rows of numerical expressions and are
stored in a file. Each row is an independent expression with other rows. The end of
the input file is a star symbol (<TT>*</TT>).

<P>
<DT>6.
<DD>Output the value of the left-most item in each expression row by row, in the same
order as that in the input file.

<P>
<DT>7.
<DD>If there are multiple solutions, print out the smallest values for each left-most item.
If no possible solutions exist, print out a question mark (<TT>?</TT>) instead.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Contains k lines, with <I>k</I>-1 expressions.
<PRE><TT>
Line 1 		 the first expression 
... 
Line <I>k</I>-1 the 
<!-- MATH: $(k-1)^{th}$ -->
(<I>k</I>-1)<SUP><I>th</I></SUP> 
Line <I>k</I> A star symbol indicating end-of-file
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Contains <I>k</I> - 1 lines. Each line is the smallest value that satisfies the
corresponding expression.
<PRE><TT>
Line 1 		 value 
... 
Line <I>k</I>-1 value
</TT></PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
CA = AB + 6C
DDE5 = DEFG - EHI + DDH
A = 0
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
81
1115
?
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
684||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Integral Determinant</TITLE>
<META NAME="description" CONTENT="Integral Determinant">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Integral Determinant</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Write a program to find the determinant of an integral square matrix. Note that the
determinant of a square matrix can be defined recursively as follows: the determinant
of a 1<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$\times$">1 matrix 
<!-- MATH: $M = (a_{1,1})$ -->
<I>M</I> = (<I>a</I><SUB>1,1</SUB>) is just the value 
<!-- MATH: $|M| = a_{1,1}$ -->
|<I>M</I>| = <I>a</I><SUB>1,1</SUB>;
further, the determinant of an 
<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$n \times n$">
matrix is 
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
|M| = \sum_{i=1}^n (-1)^{i+1} \cdot |M_{1,j}|.
\end{displaymath} -->


<IMG
 WIDTH="193" HEIGHT="55"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="\begin{displaymath}\vert M\vert = \sum_{i=1}^n (-1)^{i+1} \cdot \vert M_{1,j}\vert.
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
Here the notation <I>M</I><SUB>1,<I>i</I></SUB> is the 
<!-- MATH: $(n-1) \times (n-1)$ -->
<IMG
 WIDTH="134" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$(n-1) \times (n-1)$">
matrix
by removing the first row and the <I>i</I><SUP><I>th</I></SUP> column of the original 

<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$n \times n$">
matrix <I>M</I>.

<P>

<P>
<BR>
A straightforward method of calculating the determinant of an 
<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$n \times n$">
matrix by the recursive method will end up with <I>n</I>! multiplications, a very
time-consuming algorithm. To give you a feeling about this, note that 15! =
1,307,674,368,000. To reduce the time complexity, there are two ways of
modifying the original matrix for easier computation.

<P>
<DL COMPACT>
<DT>1.
<DD>Exchanging two columns (or rows) of a matrix will change the sign of the
determinant; for example
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\left|
\begin{array}{cc}
1 & 2 \\
3 & 4
\end{array}
\right |
= -
\left| 
\begin{array}{cc}
2 & 1 \\
4 & 3
\end{array}
\right |

\end{displaymath} -->

<IMG
 WIDTH="156" HEIGHT="54"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="\begin{displaymath}\left\vert
\begin{array}{cc}
1 & 2 \\
3 & 4
\end{array}\rig...
...ert
\begin{array}{cc}
2 & 1 \\
4 & 3
\end{array}\right \vert
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
<DT>2.
<DD>Multiplying one column by any constant, and add them to another column
will not change the value of the determinant; for example:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\left|
\begin{array}{ccc}
2 & 1 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9
\end{array}
\right |
= -
\left| 
\begin{array}{ccc}
2 & 1 & 3 + 2 \times 2 \\
4 & 5 & 6 + 4 \times 2 \\
7 & 8 & 9 + 7 \times 2
\end{array}
\right |

\end{displaymath} -->


<IMG
 WIDTH="266" HEIGHT="73"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="\begin{displaymath}\left\vert
\begin{array}{ccc}
2 & 1 & 3 \\
4 & 5 & 6 \\
7 ...
... 4 \times 2 \\
7 & 8 & 9 + 7 \times 2
\end{array}\right \vert
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P></DL>

<P>
Using the above methods, you shall be able to write a program for computing the
determinants of matrices, even for a size like 30<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$\times$">30, very efficiently.
Below is an example to show how this can be done:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\left|
\begin{array}{ccc}
2 & 3 & 5 \\
1 & 6 & 7 \\
4 & 8 & 9
\end{array}
\right |
=
\left| 
\begin{array}{ccc}
2 & 3-2 & 5 - 2 \times 2 \\
1 & 6-1 & 7 - 1 \times 2 \\
4 & 8-4 & 9 - 4 \times 2
\end{array}
\right |
=
\left| 
\begin{array}{ccc}
2 & 1 & 1 \\
1 & 5 & 5 \\
4 & 4 & 1
\end{array}
\right |
= -
\left| 
\begin{array}{ccc}
1 & 1 & 2 \\
5 & 5 & 1 \\
1 & 4 & 4
\end{array}
\right |

\end{displaymath} -->


<IMG
 WIDTH="511" HEIGHT="73"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="\begin{displaymath}\left\vert
\begin{array}{ccc}
2 & 3 & 5 \\
1 & 6 & 7 \\
4 ...
...
1 & 1 & 2 \\
5 & 5 & 1 \\
1 & 4 & 4
\end{array}\right \vert
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
=-
\left|
\begin{array}{ccc}
1 & 1-1 & 2 - 1 \times 2 \\
4 & 5-5 & 1 - 5 \times 2 \\
1 & 4-1 & 4 - 1 \times 2
\end{array}
\right |
= -
\left| 
\begin{array}{ccc}
1 & 0 & 0 \\
5 & 0 & -9 \\
1 & 3 & 2
\end{array}
\right |
=-
\left |
\begin{array}{cc}
0 & -9 \\
3 & 2
\end{array}
\right |
=-27

\end{displaymath} -->


<IMG
 WIDTH="513" HEIGHT="73"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="\begin{displaymath}=-
\left\vert
\begin{array}{ccc}
1 & 1-1 & 2 - 1 \times 2 \\...
...begin{array}{cc}
0 & -9 \\
3 & 2
\end{array}\right \vert
=-27
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
Note that the answer shall be an <EM>integer</EM>. That is, all the operations
needed are just integer operations; by reducing to floating numbers would
result in the round-off errors, which will be considered as the <B>wrong</B>
answer. Do not worry about the problem of integral overflows problem. You can
assume that the given data set will not cause the integer overflow problem.
What is emphasized here is the required integer precision.
Anyway use of floating numbers is not forbidden.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
em Several sets of integral matrices. The inputs are just a list of integers.
Within each set, the first integer (in a single line) represents the size of
the matrix, <I>n</I>, which can be as large as 30, indication an 
<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/684img1.gif" 
 ALT="$n \times n$">
matrix. After <I>n</I>, there will be <I>n</I> lines representing the <I>n</I> rows of the
matrix; each line (row) contains exactly <I>n</I> integers. Thus, there is totally
<I>n</I><SUP>2</SUP> integers for the particular matrix. These matrices will occur repeatedly
in the input as the pattern described above. An integer <I>n</I> = <TT>0</TT> (zero)
signifies the end of input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each matrix of the input, calculate its (integral) determinant and output it in a line. Output a single star (<TT>*</TT>) to signify the end of outputs.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
5 2
3 4
3
2 3 5
1 6 7
4 8 9
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
14
-27
*
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
685||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Least Path Cost</TITLE>
<META NAME="description" CONTENT="Least Path Cost">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Least Path Cost</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Given a positive integer <IMG
 WIDTH="19" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$\Delta$">
(
<!-- MATH: $0 < \Delta < 10000$ -->
<IMG
 WIDTH="118" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$0 < \Delta < 10000$">), which is called the
<EM>overhead</EM>, and <I>M</I> (
<!-- MATH: $0 < M \le 200$ -->
<IMG
 WIDTH="105" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$0 < M \le 200$">)
straight line segments in a
two-dimensional plane with the following properties:
<DL COMPACT>
<DT>1.
<DD>each line segment has a height, which is a positive integer;
<DT>2.
<DD>two line segments only intersect with each other on endpoints;
<DT>3.
<DD>no two line segments are overlapped.
</DL>
Each line has a unique number between 1 and <I>M</I>. Each endpoint in the plane
has a unique number between 1 and <I>N</I> (
<!-- MATH: $0 < N \le 400$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$0 < N \le 400$">), where <I>N</I> is the total
number of endpoints. A line segment is represented by its two endpoints (<I>n</I><SUB><I>i</I></SUB>,
<I>n</I><SUB><I>j</I></SUB>). Let <EM>height(</EM><I>L</I><EM>)</EM> be the height of a line segment <I>L</I>.

<P>

<P>
<BR>
A <EM>path</EM> is a sequence of line segments 
<!-- MATH: $L_{C_1}, L_{C2}, \dots,
L_{C_k}$ -->
<IMG
 WIDTH="140" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$L_{C_1}, L_{C2}, \dots,
L_{C_k}$">,
such that <I>k</I> &gt; 1, 
<!-- MATH: $C_i \neq C_j \quad \forall i \neq j$ -->
<IMG
 WIDTH="130" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$C_i \neq C_j \quad \forall i \neq j$">,
<I>L</I><SUB><I>C</I><SUB><I>i</I></SUB></SUB>
intersects with 
<!-- MATH: $L_{C_{i+1}}$ -->
<I>L</I><SUB><I>C</I><SUB><</SUB><55>><I>i</I>+1</SUB> for all 
<!-- MATH: $1 \le i < k$ -->
<IMG
 WIDTH="75" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$1 \le i < k$">,
one endpoint of <I>L</I><SUB><I>C</I><SUB>1</SUB></SUB>
does not intersect with any other line segments, and one endpoint of <I>L</I><SUB><I>C</I><SUB><I>k</I></SUB></SUB>
does not intersect
with any other line segments. The cost between two intersection line segments i
<I>L</I><SUB><I>C</I><SUB><I>i</I></SUB></SUB> and 
<!-- MATH: $L_{C_{i+1}}$ -->
<I>L</I><SUB><I>C</I><SUB><</SUB><59>><I>i</I>+1</SUB> is
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\left | height(L_{C_i}) - height(L_{C_{i+1}}) \right |
\end{displaymath} -->


<IMG
 WIDTH="224" HEIGHT="33"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="\begin{displaymath}\left \vert height(L_{C_i}) - height(L_{C_{i+1}}) \right \vert
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
That is, for example you can image, the number of stairs that one has to climb (up or
down ) by walking from <I>L</I><SUB><I>C</I><SUB><I>i</I></SUB></SUB> to 
<!-- MATH: $L_{C_{i+1}}$ -->
<I>L</I><SUB><I>C</I><SUB><</SUB><63>><I>i</I>+1</SUB>. The cost of a path 

<!-- MATH: $L_{C_1}, L_{C2}, \dots, L_{C_k}$ -->
<IMG
 WIDTH="140" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$L_{C_1}, L_{C2}, \dots,
L_{C_k}$">
is
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
k \cdot \Delta + \sum_{i=1}^{k-1} cost(L_{C_i},L_{C_{i+1}}).
\end{displaymath} -->


<IMG
 WIDTH="210" HEIGHT="59"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="\begin{displaymath}k \cdot \Delta + \sum_{i=1}^{k-1} cost(L_{C_i},L_{C_{i+1}}).
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
In the example shown in Fig. 1, <IMG
 WIDTH="19" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$\Delta$">
= 25, <I>M</I> = 8, and <I>N</I> = 9. Then

<!-- MATH: $cost(L_2, L_3) = 1$ -->
<I>cost</I>(<I>L</I><SUB>2</SUB>, <I>L</I><SUB>3</SUB>) = 1 and 
<!-- MATH: $cost(L_1, L_6 ) = 8$ -->
<I>cost</I>(<I>L</I><SUB>1</SUB>, <I>L</I><SUB>6</SUB> ) = 8. 
<!-- MATH: $L_1, L_4, L_5$ -->
<I>L</I><SUB>1</SUB>, <I>L</I><SUB>4</SUB>, <I>L</I><SUB>5</SUB> is not a path.
There are three paths in the plane. The cost for the path 
<!-- MATH: $L_1, L_6, L_7, L_8$ -->
<I>L</I><SUB>1</SUB>, <I>L</I><SUB>6</SUB>, <I>L</I><SUB>7</SUB>, <I>L</I><SUB>8</SUB> 
is 109. The cost for the path 
<!-- MATH: $L_1, L_4, L_5 ,L_8$ -->
<I>L</I><SUB>1</SUB>, <I>L</I><SUB>4</SUB>, <I>L</I><SUB>5</SUB> ,<I>L</I><SUB>8</SUB> is 131. The cost for the
path <I>L</I><SUB>2</SUB>, <I>L</I><SUB>3</SUB> is 51. Hence <I>L</I><SUB>2</SUB>, <I>L</I><SUB>3</SUB> is the path with the least cost. 

<P>
You may also assume there is at least one path in the plane. Write a program to
find the least cost among all paths.  

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line is <I>l</I>, the number of test cases. The first three lines of test
case #<I>i</I> are <I>M</I><SUB><I>i</I></SUB>, <I>N</I><SUB><I>i</I></SUB> and <IMG
 WIDTH="25" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/685img1.gif" 
 ALT="$\Delta_i$">
which are the numbers of line segments
and endpoints, and the overhead, respectively. The following <I>M</I><SUB><I>i</I></SUB> lines each
contains the two endpoints of each line segment, starting from <I>L</I><SUB>1</SUB> to
<I>L</I><SUB><I>M</I><SUB><I>i</I></SUB></SUB>, and its height. 

<P>
Each line segment is represented by three integers, separated by blanks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Contains <I>l</I> lines. The <I>i</I><SUP><I>th</I></SUP> line contains the least cost of all paths in
the <I>i</I><SUP><I>th</I></SUP> test case.

<P>
<DIV ALIGN="CENTER">

<img src=p685.gif>

<P>

<P>
<BR>
Fig. 1: An example of 8 straight lines with 9 endpoints.
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
8
9
25
1 2 1
8 9 10
7 8 9
1 4 2
4 5 20
1 3 9
3 5 9
5 6 8
6
6
21
1 2 1
1 4 2
4 5 20
1 3 9
3 5 9
5 6 8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
51
93
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
686||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Goldbach's Conjecture (II)</TITLE>
<META NAME="description" CONTENT="Goldbach's Conjecture (II)">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Goldbach's Conjecture (II)</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<B>Goldbach's Conjecture:</B> For any even number <I>n</I> greater than or equal to 4, there exists at least one pair of prime numbers <I>p</I><SUB>1</SUB> and <I>p</I><SUB>2</SUB> such that 

<!-- MATH: $n = p_1 + p_2$ -->
<I>n</I> = <I>p</I><SUB>1</SUB> + <I>p</I><SUB>2</SUB>.

<P>

<P>
<BR>
This conjecture has not been proved nor refused yet. No one is sure whether this conjecture
actually holds. However, one can find such a pair of prime numbers, if any, for a given even
number. The problem here is to write a program that reports the number of all the pairs of
prime numbers satisfying the condition in the conjecture for a given even number.

<P>

<P>
<BR>
A sequence of even numbers is given as input. Corresponding to each number, the program
should output the number of pairs mentioned above. Notice that we are interested in the
number of essentially different pairs and therefore you should not count 

<!-- MATH: $(p_1, p_2)$ -->
(<I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>) and 
<!-- MATH: $(p_2, p_1)$ -->
(<I>p</I><SUB>2</SUB>, <I>p</I><SUB>1</SUB>) separately as two different pairs.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
An integer is given in each input line. You may assume that each integer is even, and is greater
than or equal to 4 and less than 2<SUP>15</SUP>. The end of the input is indicated by a number 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each output line should contain an integer number. No other characters should appear in the output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6
10
12
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1
2
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
687||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Lattice Practices</TITLE>
<META NAME="description" CONTENT="Lattice Practices">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Lattice Practices</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Once upon a time, there was a king who loved beautiful costumes very much. The king had a
special cocoon bed to make excellent cloth of silk. The cocoon bed had 16 small square rooms,
forming a 4<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/687img1.gif" 
 ALT="$\times$">4 lattice, for 16 silkworms. The cocoon bed can be depicted as follows:

<P>
<DIV ALIGN="CENTER">

<img src=p687a.gif>
</DIV>

<P>
The cocoon bed can be divided into 10 rectangular boards, each of which has 5 slits:

<P>
<DIV ALIGN="CENTER">

<img src=p687b.gif>
</DIV>

<P>
Note that, except for the slit depth, there is no difference between the left side and the right
side of the board (or, between the front and the back); thus, we cannot distinguish a symmetric
board from its rotated image as is shown in the following:

<P>
<DIV ALIGN="CENTER">

<img src=p687c.gif>
</DIV>

<P>
Slits have two kinds of depth, either shallow or deep. The cocoon bed should be constructed by
fitting five of the boards vertically and the others horizontally, matching a shallow slit with a deep slit.

<P>

<P>
<BR>
Your job is to write a program that calculates the number of possible configurations to make the
lattice. You may assume that there is no pair of identical boards. Notice that we are interested
in the number of essentially different configurations and therefore you should not count mirror
image configurations and rotated configurations separately as different configurations.

<P>

<P>
<BR>
The following is an example of mirror image and rotated configurations, showing vertical and
horizontal boards seperately, where shallow and deep slits are denoted by `1' and `0' respectively.

<P>
<DIV ALIGN="CENTER">

<img src=p687d.gif>
</DIV>

<P>
Notice that a rotation may exchange positions of a vertical board and a horizontal board.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of multiple data sets, each in a line. A data set gives the patterns of slits of
10 boards used to construct the lattice. The format of a data set is as follows:

<P>
<PRE>
xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx xxxxx
</PRE>

<P>
Each <TT>x</TT> is either `<TT>0</TT>' or `<TT>1</TT>'. `<TT>0</TT>' means a deep slit, and `<TT>1</TT>' a shallow slit. A block of five slit
descriptions corresponds to a board. There are 10 blocks of slit descriptions in a line. Two
adjacent blocks are separated by a space.

<P>

<P>
<BR>
For example, the first data set in the Sample Input means the set of the following 10 boards:

<P>
<DIV ALIGN="CENTER">

<img src=p687e.gif>
</DIV>

<P>
The end of the input is indicated by a line consisting solely of three characters ``<TT>END</TT>''.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, the number of possible configurations to make the lattice from the given 10
boards should be output, each in a separate line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10000 01000 00100 11000 01100 11111 01110 11100 10110 11110
10101 01000 00000 11001 01100 11101 01110 11100 10110 11010
END
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
40
6
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
688||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Mobile Phone Coverage</TITLE>
<META NAME="description" CONTENT="Mobile Phone Coverage">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Mobile Phone Coverage</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A mobile phone company ACMICPC (Advanced Cellular, Mobile, and Internet-Connected
Phone Corporation) is planning to set up a collection of antennas for mobile phones in a city
called Maxnorm. The company ACMICPC has several collections for locations of antennas as
their candidate plans, and now they want to know which collection is the best choice.

<P>

<P>
<BR>
For this purpose, they want to develop a computer program to find the coverage of a collection
of antenna locations. Each antenna <I>A</I><SUB><I>i</I></SUB> has power <I>r</I><SUB><I>i</I></SUB>, corresponding to ``radius''. Usually, the
coverage region of the antenna may be modeled as a disk centered at the location of the antenna

<!-- MATH: $(x_i, y_i)$ -->
(<I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>) with radius <I>r</I><SUB><I>i</I></SUB>. However, in this city Maxnorm such a coverage region becomes the square

<!-- MATH: $[x_i - r_i, x_i + r_i] \times [y_i - r_i, y_i + r_i]$ -->
<IMG
 WIDTH="257" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="$[x_i - r_i, x_i + r_i] \times [y_i - r_i, y_i + r_i]$">.
In other words, the distance between two points 
<!-- MATH: $(x_p, y_p)$ -->
(<I>x</I><SUB><I>p</I></SUB>, <I>y</I><SUB><I>p</I></SUB>) and

<!-- MATH: $(x_q, y_q)$ -->
(<I>x</I><SUB><I>q</I></SUB>, <I>y</I><SUB><I>q</I></SUB>) is measured by the max norm 
<!-- MATH: $\max \{ |x_p - x_q|, |y_p - y_q| \}$ -->
<IMG
 WIDTH="191" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="$\max \{ \vert x_p - x_q\vert, \vert y_p - y_q\vert \}$">,
or, the 
<!-- MATH: $L_{\infty}$ -->
<IMG
 WIDTH="31" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="$L_{\infty}$">
norm, in this city
Maxnorm instead of the ordinary Euclidean norm

<!-- MATH: $\sqrt{(x_p - x_q)^2 + (y_p - y_q)^2}$ -->
<IMG
 WIDTH="193" HEIGHT="47" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="$\sqrt{(x_p - x_q)^2 + (y_p - y_q)^2}$">.

<P>

<P>
<BR>
As an example, consider the following collection of 3 antennas

<P>
<PRE>
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
</PRE>

<P>
depicted in the following figure

<P>
<DIV ALIGN="CENTER">

<img src=p688.gif>
</DIV>

<P>
where the <I>i</I>-th row represents <I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>, <I>r</I><SUB><I>i</I></SUB> such that 
<!-- MATH: $(x_i, y_i)$ -->
(<I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>) is the position of the <I>i</I>-th antenna and
<I>r</I><SUB><I>i</I></SUB> is its power. The area of regions of points covered by at least one antenna is 52.00 in this case.

<P>

<P>
<BR>
Write a program that finds the area of coverage by a given collection of antenna locations.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains multiple data sets, each representing a collection of antenna locations. A
data set is given in the following format.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\begin{array}{lll}
n & & \\
x_1 & y_1 & r_1 \\
x_2 & y_2 & r_2 \\
\dots & & \\
x_n & y_n & r_n
\end{array}
\end{displaymath} -->


<IMG
 WIDTH="86" HEIGHT="115"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="\begin{displaymath}\begin{array}{lll}
n & & \\
x_1 & y_1 & r_1 \\
x_2 & y_2 & r_2 \\
\dots & & \\
x_n & y_n & r_n
\end{array}\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
The first integer <I>n</I> is the number of antennas, such that 
<!-- MATH: $2 ÂŸ\le n ÂŸ\le 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/688img1.gif" 
 ALT="$2 ÂŸ\le n ÂŸ\le 100$">.
The coordinate of the <I>i</I>-th
antenna is given by 
<!-- MATH: $(x_i, y_i)$ -->
(<I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>), and its power is <I>r</I><SUB><I>i</I></SUB>. <I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB> and <I>r</I><SUB><I>i</I></SUB> are fractional numbers between 0 and 200 inclusive.

<P>

<P>
<BR>
The end of the input is indicated by a data set with 0 as the value of <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, your program should output its sequence number (1 for the first data set, 2
for the second, etc.) and the area of the coverage region. The area should be printed with two
digits to the right of the decimal point, after rounding it to two decimal places.

<P>

<P>
<BR>
The sequence number and the area should be printed on the same line with no spaces at the
beginning and end of the line. The two numbers should be separated by a space.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
2
3.0 3.0 3.0
1.5 1.5 1.0
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1 52.00
2 36.00
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
689||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Napoleon's Grumble</TITLE>
<META NAME="description" CONTENT="Napoleon's Grumble">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Napoleon's Grumble</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Legend has it that, after being defeated in Waterloo, Napoleon Bonaparte, in retrospect of his
days of glory, talked to himself ``Able was I ere I saw Elba.'' Although, it is quite doubtful that
he should have said this in English, this phrase is widely known as a typical <EM>palindrome</EM>.

<P>

<P>
<BR>
A palindrome is a symmetric character sequence that looks the same when read backwards, right
to left. In the above Napoleon's grumble, white spaces appear at the same positions when read
backwards. This is not a required condition for a palindrome. The following, ignoring spaces
and punctuation marks, are known as the first conversation and the first palindromes by human beings.

<P>

<P><P>
<BR>

``Madam, I'm Adam.''

<P>
``Eve.''

<P>
<EM>(by Mark Twain)</EM>

<P>

<P><P>
<BR>
Write a program that finds palindromes in input lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
A multi-line text is given as the input. The input ends at the end of the file.

<P>

<P>
<BR>
There are at most 100 lines in the input. Each line has less than 1024 Roman alphabet characters.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Corresponding to each input line, a line consisting of <EM>all</EM> the character sequences that are palindromes in the input line should be output. However, trivial palindromes consisting of only one or two characters should not be reported.

<P>

<P>
<BR>
On finding palindromes, any characters in the input except Roman alphabets, such as punctuation characters, digits, spaces, and tabs, should be ignored. Characters that differ only in their cases should be looked upon as the same character. Whether or not the character sequences represent a proper English word or sentence does not matter.

<P>

<P>
<BR>
Palindromes should be reported all in uppercase characters. When two or more
palindromes are reported, they should be separated by a space character. You
must report palindromes in lexicographical order.

<P>

<P>
<BR>
If two or more occurrences of the same palindromes are found in the same input line, report
only once. When a palindrome overlaps with another, even when one is completely included in
the other, both should be reported. However, palindromes appearing in the center of another
palindrome, whether or not they also appear elsewhere, should not be reported. For example,
for an input line of ``<TT>AAAAAA</TT>'', two palindromes ``<TT>AAAAAA</TT>'' and ``<TT>AAAAA</TT>'' should be output, but
not ``<TT>AAAA</TT>'' nor ``<TT>AAA</TT>''. For ``<TT>AAABCAAAAAA</TT>'', the output remains the same.

<P>

<P>
<BR>
One line should be output corresponding to one input line. If an input line does not contain any palindromes, an empty line should be output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
As the first man said to the
first woman:
"Madam, I'm Adam."
She responded:
"Eve."
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
TOT

MADAM MADAMIMADAM
DED ERE
EVE
</PRE>

<P>

<P><P>
<BR>

<B>Note</B> that the second line in the output is empty, corresponding to the second input line containing no palindromes. Also note that some of the palindromes in the third input line, namely
``<TT>ADA</TT>'', ``<TT>MIM</TT>'', ``<TT>AMIMA</TT>'', ``<TT>DAMIMAD</TT>'', and ``<TT>ADAMIMADA</TT>'', are not reported because they appear at
the center of reported ones. ``MADAM'' is reported, as it does not appear in the center, but only once, disregarding its second occurrence.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
690||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Pipeline Scheduling</TITLE>
<META NAME="description" CONTENT="Pipeline Scheduling">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Pipeline Scheduling</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An arithmetic pipeline is designed to process more than one task simultaneously in an overlap-
ping manner. It includes function units and data paths among them. Tasks are processed by
pipelining; at each clock, one or more units are dedicated to a task and the output produced
for the task at the clock is cascading to the units that are responsible for the next stage; since
each unit may work in parallel with the others at any clock, more than one task may be being
processed at a time by a single pipeline.

<P>

<P>
<BR>
In this problem, a pipeline may have a feedback structure, that is, data paths among function units may have directed loops as shown in the next figure.

<P>

<P>
<BR>

<B>Example of a feedback pipeline</B>

<P>
<DIV ALIGN="CENTER">

<img src=p690.gif>
</DIV>

<P>
Since an arithmetic pipeline in this problem is designed as special purpose dedicated hardware,
we assume that it accepts just a single sort of task. Therefore, the timing information of a
pipeline is fully described by a simple table called a <EM>reservation table</EM>, which specifies the function units that are busy at each clock when a task is processed without overlapping execution.

<P>

<P>
<BR>

<B>Example of ``reservation table''</B>

<P>

<P>
<BR>

<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">clock</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">2</TD>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">5</TD>
<TD ALIGN="CENTER">6</TD>
</TR>
<TR><TD ALIGN="CENTER">unit0</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit2</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit3</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit4</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">X</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
In reservation tables, `X' means ``the function unit is busy at that clock'' and `.' means ``the function unit is not busy at that clock.'' In this case, once a task enters the pipeline, it is processed by unit0 at the first clock, by unit1 at the second clock, and so on. It takes seven clock cycles to perform a task.

<P>

<P>
<BR>
Notice that no special hardware is provided to avoid simultaneous use of the same function unit.

<P>

<P>
<BR>
Therefore, a task must not be started if it would conflict with any tasks being processed. For
instance, with the above reservation table, if two tasks, say task 0 and task 1, were started at
clock 0 and clock 1, respectively, a conflict would occur on unit0 at clock 5. This means that
you should not start two tasks with single cycle interval. This invalid schedule is depicted in
the following process table, which is obtained by overlapping two copies of the reservation table
with one being shifted to the right by 1 clock.

<P>

<P>
<BR>

<B>Example of ``conflict''</B>

<P>

<P>
<BR>

<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">clock</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">2</TD>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">5</TD>
<TD ALIGN="CENTER">6</TD>
<TD ALIGN="CENTER">7</TD>
</TR>
<TR><TD ALIGN="CENTER">unit0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit2</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit3</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">unit4</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">.</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
</TABLE>

<P>
(`0's and `1's in this table except those in the first row represent tasks 0 and 1, respectively, and `C' means the conflict.)

<P>

<P>
<BR>
Your job is to write a program that reports the minimum number of clock cycles in which the given pipeline can process 10 tasks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of multiple data sets, each representing the reservation table of a pipeline. A data set is given in the following format.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\begin{array}{cccc}
n & & & \\
x_{0,0} & x_{0,1} & \dots & x_{0,n-1} \\
x_{1,0} & x_{1,1} & \dots & x_{1,n-1} \\
x_{2,0} & x_{2,1} & \dots & x_{2,n-1} \\
x_{3,0} & x_{3,1} & \dots & x_{3,n-1} \\
x_{4,0} & x_{4,1} & \dots & x_{4,n-1}
\end{array}

\end{displaymath} -->


<IMG
 WIDTH="169" HEIGHT="137"
 SRC="http://uva.onlinejudge.org/external/6/690img1.gif" 
 ALT="\begin{displaymath}\begin{array}{cccc}
n & & & \\
x_{0,0} & x_{0,1} & \dots & x...
..._{3,n-1} \\
x_{4,0} & x_{4,1} & \dots & x_{4,n-1}
\end{array}\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
The integer <I>n</I>(&lt; 20) in the first line is the width of the reservation table, or the number of clock
cycles that is necessary to perform a single task. The second line represents the usage of unit0,
the third line unit1, and so on. <I>x</I><SUB><I>i</I>,<I>j</I></SUB> is either `<TT>X</TT>' or `<TT>.</TT>'. The former means <EM>reserved</EM> and the latter <EM>free</EM>. There are no spaces in any input line. For simplicity, we only consider those pipelines that
consist of 5 function units. The end of the input is indicated by a data set with 0 as the value of <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, your program should output a line containing an integer number that is the
minimum number of clock cycles in which the given pipeline can process 10 tasks.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7
X...XX.
.X.....
..X....
...X...
......X
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
34
</PRE>

<P>

<P><P>
<BR>

<B>Note:</B> In this sample case, it takes 41 clock cycles to process 10 tasks if each task is started as early as
possible under the condition that it never conflicts with any previous tasks being processed.

<P>

<PRE>
      | 00000000001111111111222222222233333333334
clock | 01234567890123456789012345678901234567890
-------------------------------------------------
unit0 | 0.1.00112.3.22334.5.44556.7.66778.9.8899.
unit1 | .0.1.....2.3.....4.5.....6.7.....8.9.....
unit2 | ..0.1.....2.3.....4.5.....6.7.....8.9....
unit3 | ...0.1.....2.3.....4.5.....6.7.....8.9...
unit4 | ......0.1.....2.3.....4.5.....6.7.....8.9
</PRE>

(The digits in the table except those in the clock row represent the task number.)

<P>

<P>
<BR>
However, it takes only 34 clock cycles if each task is started at every third clock.

<P>
<PRE>
      | 0000000000111111111122222222223333
clock | 0123456789012345678901234567890123
------------------------------------------
unit0 | 0..100211322433544655766877988.99.
unit1 | .0..1..2..3..4..5..6..7..8..9.....
unit2 | ..0..1..2..3..4..5..6..7..8..9....
unit3 | ...0..1..2..3..4..5..6..7..8..9...
unit4 | ......0..1..2..3..4..5..6..7..8..9
</PRE>

(The digits in the table except those in the clock row represent the task number.)

<P>

<P>
<BR>
This is the best possible schedule and therefore your program should report 34 in this case.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
691||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Triangle Partition</TITLE>
<META NAME="description" CONTENT="Triangle Partition">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Triangle Partition</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Suppose that a triangle and a number of points inside the triangle are given. Your job is to find
a partition of the triangle so that the set of the given points are divided into three subsets of equal size.

<P>

<P>
<BR>
Let A, B and C denote the vertices of the triangle. There are <I>n</I> points, P<SUB>1</SUB>, P<SUB>2</SUB>, ...,P<SUB><I>n</I></SUB>, given
inside <IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">ABC. You are requested to find a point Q such that each of the three triangles <IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">QBC,
<IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">QCA and <IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">QAB contains the same number of points. Points on the boundary line are counted in
both triangles. For example, a point on the line QA is counted in <IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">QCA and also in <IMG
 WIDTH="20" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$\triangle$">QAB. If
Q coincides a point, the point is counted in all three triangles.

<P>

<P>
<BR>
It can be proved that there always exists a point Q satisfying the above condition if <I>n</I>=3*<I>k</I>, with <I>k</I>=1,2... In this problem, <I>n</I> can be any number, and there will be at least a valid point Q for every test case. The problem will be easily understood from the figure below.

<P>
<DIV ALIGN="CENTER">

<img src=p691.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of multiple data sets, each representing a set of points. A data set is given in the following format.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
\begin{array}{cc}
n & \\
x_1 & y_1 \\
x_2 & y_2 \\
\dots & \\
x_n & y_n
\end{array}
\end{displaymath} -->


<IMG
 WIDTH="53" HEIGHT="115"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="\begin{displaymath}\begin{array}{cc}
n & \\
x_1 & y_1 \\
x_2 & y_2 \\
\dots & \\
x_n & y_n
\end{array}\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
The first integer <I>n</I> is the number of points, such that
<!-- MATH: $1 \leÂŸ n \leÂŸ 300$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$1 \leÂŸ n \leÂŸ 300$">.
The coordinate of a point P<SUB><I>i</I></SUB> is given by
(<I>x</I><SUB><I>i</I></SUB>,<I>y</I><SUB><I>i</I></SUB>). <I>x</I><SUB><I>i</I></SUB> and <I>y</I><SUB><I>i</I></SUB> are integers between 0 and 1000.

<P>

<P>
<BR>
The coordinates of the triangle ABC are fixed. They are A(0, 0), B(1000, 0) and C(0, 1000).

<P>

<P>
<BR>
Each of P<SUB><I>i</I></SUB> is located strictly inside the triangle ABC, not on the side BC, CA nor AB. No two
points can be connected by a straight line running through one of the vertices of the triangle.
Speaking more precisely, if you connect a point P<SUB><I>i</I></SUB> with the vertex A by a straight line, another
point P<SUB><I>j</I></SUB> never appears on the line. The same holds for B and C.

<P>

<P>
<BR>
The end of the input is indicated by a 0 as the value of <I>n</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, your program should output the coordinate of the point Q. The format of the output is as follows.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
q_x \ q_y
\end{displaymath} -->


<IMG
 WIDTH="37" HEIGHT="32"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="\begin{displaymath}q_x \ q_y\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
For each data set, a line of this format should be given. No extra lines are allowed. On the contrary, any number of space characters may be inserted before <I>q</I><SUB><I>x</I></SUB>, between <I>q</I><SUB><I>x</I></SUB> and <I>q</I><SUB><I>y</I></SUB>, or after <I>q</I><SUB><I>y</I></SUB>.

<P>

<P>
<BR>
Each of <I>q</I><SUB><I>x</I></SUB> and <I>q</I><SUB><I>y</I></SUB> should be represented by a fractional number 
(e.g., <TT>3.1415926</TT>) but not with an
exponential part (e.g., <TT>6.023e+23</TT> is not allowed). At least seven digits
should follow the decimal point.

<P>

<P>
<BR>
Note that there is no unique ``correct answer'' in this problem. In general, there are infinitely
many points which satisfy the given condition. Your result may be any one of these ``possible answers''.

<P>

<P>
<BR>
In your program, you should be careful to minimize the effect of numeric errors in the handling
of floating-point numbers. However, it seems inevitable that some rounding errors exist in the
output. We expect that there is an error of 
<!-- MATH: $0.5 \times 10^{-4}$ -->
<IMG
 WIDTH="84" HEIGHT="37" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/6/691img1.gif" 
 ALT="$0.5 \times 10^{-4}$">
in the output, and will judge your result accordingly.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
100 500
200 500
300 500
5
100 300
100 600
200 100
200 700
500 100
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
166.6666666 555.5555555
275.0000000 145.0000000
</PRE>

<P>

<P><P>
<BR>

<B>Note:</B> As mentioned above, the results shown here are not the only solutions. Many other coordinates for the point Q are also acceptable.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-25</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
692||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>BUT We Need a Diagram</TITLE>
<META NAME="description" CONTENT="BUT We Need a Diagram">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
BUT We Need a Diagram</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Consider a data structure called BUT (Binary and/or Unary Tree). A BUT is defined inductively as follows:

<P>
<UL>
<LI>Let <I>l</I> be a letter of the English alphabet, either lowercase or uppercase (in the sequel, we say simply ``a letter''). Then, the object that consists only of <I>l</I>, designating <I>l</I> as its label,
is a BUT. In this case, it is called a 0-ary BUT.

<P>
<LI>Let <I>l</I> be a letter and <I>C</I> a BUT. Then, the object that consists of <I>l</I> and <I>C</I>, designating <I>l</I> as
its label and <I>C</I> as its component, is a BUT. In this case, it is called a unary BUT.

<P>
<LI>Let <I>l</I> be a letter, <I>L</I> and <I>R</I> BUTs. Then, the object that consists of <I>l</I>, <I>L</I> and <I>R</I>, designating
<I>l</I> as its label, <I>L</I> as its left component, and <I>R</I> as its right component, is a BUT. In this case, it is called a binary BUT.
</UL>

<P>
A BUT can be represented by an expression in the following way.

<P>
<UL>
<LI>When a BUT <I>B</I> is 0-ary, its representation is the letter of its label.

<P>
<LI>When a BUT <I>B</I> is unary, its representation is the letter of its label followed by the parenthesized representation of its component.

<P>
<LI>When a BUT <I>B</I> is binary, its representation is the letter of its label, a left parenthesis, the representation of its left component, a comma, the representation of its right component, and a right parenthesis, arranged in this order.
</UL>

<P>
Here are examples:

<P>
<PRE>
a
A(b)
a(a,B)
a(B(c(D),E),f(g(H,i)))
</PRE>

<P>
Such an expression is concise, but a diagram is much more appealing to our eyes. We prefer a diagram:

<P>
<PRE>
D  H i
-  ---
c E g
--- -
 B  f
 ----
  a
</PRE>

<P>
to the expression <TT>a(B(c(D),E),f(g(H,i)))</TT>.

<P>

<P>
<BR>
Your mission is to write a program that converts the expression representing a BUT into its diagram. We want to keep a diagram as compact as possible assuming that we display it on a conventional character terminal with a fixed pitch font such as Courier. Let's define the diagram <I>D</I> for a BUT <I>B</I> inductively along the structure of <I>B</I> as follows:

<P>
<UL>
<LI>When <I>B</I> is 0-ary, <I>D</I> consists only of a letter of its label. The letter is called the root of <I>D</I>, and also called the leaf of <I>D</I>.

<P>
<LI>When <I>B</I> is unary, <I>D</I> consists of a letter <I>l</I> of its label, a minus symbol <I>S</I>, and the diagram
<I>C</I> for its component, satisfying the following constraints:
<UL>
<LI><I>l</I> is just below <I>S</I>.
<LI>The root of <I>C</I> is just above <I>S</I>.
</UL>
<I>l</I> is called the root of <I>D</I>, and the leaves of <I>C</I> are called the leaves of <I>D</I>.

<P>
<LI>When <I>B</I> is binary, <I>D</I> consists of a letter <I>l</I> of its label, a sequence of minus symbols <I>S</I>, the
diagram <I>L</I> for its left component, and the diagram <I>R</I> for its right component, satisfying the following constraints:
<UL>
<LI><I>S</I> is contiguous, and is in a line.
<LI><I>l</I> is just below the central minus symbol of <I>S</I>, where, if the center of <I>S</I> locates on
a minus symbol <I>s</I>, <I>s</I> is the central, and if the center of <I>S</I> locates between adjacent minus symbols, the left one of them is the central.
<LI>The root of <I>L</I> is just above the leftmost minus symbol of <I>S</I>, and the root of <I>R</I> is just above the rightmost minus symbol of <I>S</I>.
<LI>In any line of <I>D</I>, <I>L</I> and <I>R</I> do not touch or overlap each other.
<LI>No minus symbols are just above the leaves of <I>L</I> and <I>R</I>.
</UL>
<I>l</I> is called the root of <I>D</I>, and the leaves of <I>L</I> and <I>R</I> are called the leaves of <I>D</I>.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input to the program is a sequence of expressions representing BUTs. Each expression except the last one is terminated by a semicolon. The last expression is terminated by a period.
White spaces (tabs and blanks) should be ignored. An expression may extend over multiple lines. The number of letters, i.e., the number of characters except parentheses, commas, and white spaces, in an expression is at most 80.

<P>

<P>
<BR>
You may assume that the input is syntactically correct and need not take care of error cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Each expression is to be identified with a number starting with 1 in the order of occurrence in the input. Output should be produced in the order of the input.

<P>

<P>
<BR>
For each expression, a line consisting of the identification number of the expression followed
by a colon should be produced first, and then, the diagram for the BUT represented by the expression should be produced.

<P>

<P>
<BR>
For a diagram, output should consist of the minimum number of lines, which contain only letters or minus symbols together with minimum number of blanks required to obey the rules shown above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
a(A,b(B,C));
x( y( y( z(z), v( s, t ) ) ), u ) ;

a( b( c,
      d(
         e(f),
         g
       )
    ),
   h( i(
         j(
            k(k,k),
            l(l)
          ),
         m(m)
       )
    )
 );

a(B(C),d(e(f(g(h(i(j,k),l),m),n),o),p))
.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
1:
 B C
 ---
A b
---
 a
2:
z s t
- ---
z  v
----
 y
 -
 y u
 ---
  x
3:
   k k l
   --- -
 f  k  l m
 -  ---- -
 e g j   m
 --- -----
c d    i
---    -
 b     h
 -------
    a
4:
j k
---
 i l
 ---
  h m
  ---
   g n
   ---
    f o
    ---
   C e p
   - ---
   B  d
   ----
    a
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>1999-03-05</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
693||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0040)http://online-judge.uva.es/p/v6/693.html -->
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others --><HTML><HEAD><TITLE>Digital Racing Circuit</TITLE>
<META content="Digital Racing Circuit" name=description>
<META content=htmlatex name=keywords>
<META content=document name=resource-type>
<META content=global name=distribution>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="Microsoft FrontPage 4.0" name=GENERATOR></HEAD>
<BODY lang=EN bgColor=#ffffff>
<H1><BR clear=all>
<CENTER>
</h1>
<TABLE bgColor=#0060f0>
  <TBODY>
  <TR>
    <TD><B><FONT color=#c0ffff size=5>&nbsp;<A 
      name=SECTION0001000000000000000000> Digital Racing 
      Circuit</A>&nbsp;</FONT></B></TR></TBODY></TABLE></CENTER>
<P>You have an ideally small racing car on an <I>x</I>-<I>y</I> plane ( <!-- MATH: $0 \leÂŸ x, y \leÂŸ 255$ --><IMG height=30 alt="$0 \leÂŸ x, y \leÂŸ 255$" 
src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=113 align=middle border=0>, where bigger y 
denotes upper coordinate). The racing circuit course is figured by two solid 
walls. Each wall is a closed loop of connected line segments. End point 
coordinates of every line segment are both integers (See Figure 1). Thus, a wall 
is represented by a list of end point integer coordinates <!-- MATH: $(x_1, y_1)$ -->(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>), <!-- MATH: $(x_2, y_2)$ -->(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>), ..., <!-- MATH: $(x_n, y_n)$ -->(<I>x</I><SUB><I>n</I></SUB>, 
<I>y</I><SUB><I>n</I></SUB>). The start line and the goal line are identical. 
<P>
<DIV align=center><IMG src="http://uva.onlinejudge.org/external/6/693img1.gif"  width="285" height="285"> 
<P>Figure 1. A Simple Course </P></DIV>
<P>For the qualification run, you start the car at any integer coordinate 
position on the start line, say 
<!-- MATH: $(s_x , s_y)$ -->(<I>s</I><SUB><I>x</I></SUB> , 
<I>s</I><SUB><I>y</I></SUB>). 
<P>
<P><BR>At any clock <!-- MATH: $t (\geÂ– 0)$ --><IMG height=34 alt="$t (\geÂ– 0)$" 
src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=52 align=middle border=0>, according to the 
acceleration parameter at <I>t</I>, 
<!-- MATH: $(a_{x,t}, a_{y,t})$ -->(<I>a</I><SUB><I>x</I>,<I>t</I></SUB>, 
<I>a</I><SUB><I>y</I>,<I>t</I></SUB>), the velocity changes instantly to <!-- MATH: $(v_{x,t-1} + a_{x,t}, v_{y,t-1} + a_{y,t})$ -->(<I>v</I><SUB><I>x</I>,<I>t</I>-1</SUB> 
+ <I>a</I><SUB><I>x</I>,<I>t</I></SUB>, <I>v</I><SUB><I>y</I>,<I>t</I>-1</SUB> + 
<I>a</I><SUB><I>y</I>,<I>t</I></SUB>), if the velocity at <I>t</I> - 1 is <!-- MATH: $(v_{x,t-1}, v_{y,t-1})$ -->(<I>v</I><SUB><I>x</I>,<I>t</I>-1</SUB>, 
<I>v</I><SUB><I>y</I>,<I>t</I>-1</SUB>). The velocity will be kept constant 
until the next clock. It is assumed that the velocity at clock -1, <!-- MATH: $(v_{x,-1}, v_{y,-1})$ -->(<I>v</I><SUB><I>x</I>,-1</SUB>, 
<I>v</I><SUB><I>y</I>,-1</SUB>) is (0, 0). Each of the acceleration components 
must be either -1, 0, or 1, because your car does not have so fantastic engine 
and brake. In other words, any successive pair of velocities should not differ 
more than 1 for either <I>x</I>-component or <I>y</I>-component. Note that your 
trajectory will be piecewise linear as the walls are. 
<P>
<P><BR>Your car should not touch nor run over the circuit wall, or your car will 
be crashed, even at the start line. The referee watches your car's trajectory 
very carefully, checking whether or not the trajectory touches the wall or 
attempts to cross the wall. 
<P>
<P><BR>The objective of the qualification run is to finish your run within as 
few clock units as possible, without suffering from any interference by other 
racing cars. That is, you run alone the circuit around clockwise and reach, 
namely touch or go across the goal line without having been crashed. Don't be 
crashed even in the last trajectory segment after you reach the goal line. But 
we don't care whatever happens after that clock. 
<P>
<P><BR>Your final lap time is the clock <I>t</I> when you reach the goal line 
for the first time after you have once left the start line. But it needs a 
little adjustment at the goal instant. When you cross the goal line, only the 
necessary fraction of your car's last trajectory segment is counted. For 
example, if the length of your final trajectory segment is 3 and only its 1/3 
fraction is needed to reach the goal line, you have to add only 0.333 instead of 
1 clock unit. 
<P>
<P><BR>Drivers are requested to control their cars as cleverly as possible to 
run fast but avoiding crash. ALAS! The racing committee decided that it is too 
DANGEROUS to allow novices to run the circuit. In the last year, it was reported 
that some novices wrenched their fingers by typing too enthusiastically their 
programs. So, this year, you are invited as a referee assistant in order to 
accumulate the experience on this dangerous car race. 
<P>
<P><BR>A number of experienced drivers are now running the circuit for the 
qualification for semi-finals. They submit their driving records to the referee. 
The referee has to check the records one by one whether it is not a fake. 
<P>
<P><BR>Now, you are requested to make a program to check the validity of driving 
records for any given course configuration. Is the start point right on the 
start line without touching the walls? Is every value in the acceleration 
parameter list either one of -1, 0, and 1? Does the length of acceleration 
parameter list match the reported lap time? That is, aren't there any excess 
acceleration parameters after the goal, or are these enough to reach the goal? 
Doesn't it involve any crash? Does it mean a clockwise running all around? (Note 
that it is not inhibited to run backward temporarily unless crossing the start 
line again.) Is the lap time calculation correct? You should allow a rounding 
error up to 0.01 clock unit in the lap time. 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001001000000000000000>Input</A>&nbsp;</FONT> </H2>
<p>The input 
consists of several courses and the first line of input is number of
courses.&nbsp;</p>
<P>
<P><BR>A course configuration is given by two lists representing the inner wall 
and the outer wall, respectively. Each list shows the end point coordinates of 
the line segments that comprise the wall. A course configuration looks as 
follows: 
<P>
<P><BR><!-- MATH: $i_{x,1} \ i_{y,1} \dots i_{x,N} \ i_{y,N} \ \mbox{\tt 99999}$ --><IMG 
height=31 alt="$i_{x,1} \ i_{y,1} \dots i_{x,N} \ i_{y,N} \ \mbox{\tt 99999}$" 
src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=203 align=middle border=0> 
<P><!-- MATH: $o_{x,1} \ o_{y,1} \dots o_{x,M} \ o_{y,M} \ \mbox{\tt 99999}$ --><IMG 
height=30 alt="$o_{x,1} \ o_{y,1} \dots o_{x,M} \ o_{y,M} \ \mbox{\tt 99999}$" 
src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=218 align=middle border=0> 
<P>
<P><BR>where data are alternating <I>x</I>-coordinates and <I>y</I>-coordinates 
that are all non-negative integers <!-- MATH: $(\leÂŸ 255)$ --><IMG height=34 
alt="$(\leÂŸ 255)$" src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=63 align=middle 
border=0> terminated by <TT>99999</TT>. The start/goal line is a line segment 
connecting the coordinates 
<!-- MATH: $(i_{x,1}, i_{y,1})$ -->(<I>i</I><SUB><I>x</I>,1</SUB>, 
<I>i</I><SUB><I>y</I>,1</SUB>) and 
<!-- MATH: $(o_{x,1}, o_{y,1})$ -->(<I>o</I><SUB><I>x</I>,1</SUB>, 
<I>o</I><SUB><I>y</I>,1</SUB>). For simplicity, <I>i</I><SUB><I>y</I>,1</SUB> is 
assumed to be equal to <I>o</I><SUB><I>y</I>,1</SUB>; that is, the start/goal 
line is horizontal on the <I>x</I>-<I>y</I> plane. Note that <I>N</I> and 
<I>M</I> may vary among course configurations, but do not exceed 100, because 
too many curves involve much danger even for experienced drivers. You need not 
check the validity of the course configuration. 
<P>
<P><BR>A driving record consists of three parts, which is terminated by 
<TT>99999</TT>: two integers <I>s</I><SUB><I>x</I></SUB>, 
<I>s</I><SUB><I>y</I></SUB> for the start position 
<!-- MATH: $(s_x, s_y)$ -->(<I>s</I><SUB><I>x</I></SUB>, 
<I>s</I><SUB><I>y</I></SUB>), the lap time with three digits after the decimal 
point, and the sequential list of acceleration parameters at all clocks until 
the goal. It is assumed that the length of the acceleration parameter list does 
not exceed 500. A driving record looks like the following: 
<P>
<P><BR><IMG height=30 alt="$s_x \ s_y$" src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=43 
align=middle border=0> 
<P><I>lap</I>-<I>time</I> 
<P><!-- MATH: $a_{x,0} \ a_{y,0} \ a_{x,1} \ a_{y,1} \dots a_{x,L} \ a_{y,L} \ \mbox{\tt 99999}$ --><IMG 
height=30 
alt="$a_{x,0} \ a_{y,0} \ a_{x,1} \ a_{y,1} \dots a_{x,L} \ a_{y,L} \ \mbox{\tt 99999}$" 
src="http://uva.onlinejudge.org/external/6/693img1.gif"  width=278 align=middle border=0> 
<P>
<P><BR>The list of the record of a course is terminated by a null driving 
record; that is, it is terminated by a <TT>99999</TT> that immediately follows 
<TT>99999</TT> of the last driving record.&nbsp; 
<P>
<H2><FONT color=#0070e8><A 
name=SECTION0001002000000000000000>Output</A>&nbsp;</FONT> </H2>The test result 
should be reported by simply printing <TT>OK</TT> or <TT>NG</TT> for each 
driving record, each result in each line. No other letter is allowed in the 
result. Print a blank line between consecutive courses. 
<P>
<H2><FONT color=#0070e8><A name=SECTION0001003000000000000000>Sample 
Input</A>&nbsp;</FONT> </H2>
<P>1<PRE>6 28 6 32 25 32 26 27 26 24 6 24 99999
2 28 2 35 30 35 30 20 2 20 99999

3 28
22.667
0 1 1 1 1 0 0 -1 0 -1 1 0 0 0 1 0 -1 0 0 -1 -1 -1 -1 0 -1 0 -1 -1 -1 1 -1 1
-1 1 -1 0 1 0 1 1 1 1 1 0 1 1 99999

5 28
22.667
0 1 -1 1 1 0 1 -1 1 -1 1 0 1 0 1 0 -1 -1 -1 0 -1 -1 -1 0 -1 1 -1 -1 -1 1
-1 0 -1 1 -1 0 1 0 1 0 1 1 1 1 1 1 99999

4 28
6.333
0 1 0 1 1 -1 -1 -1 0 -1 0 -1 0 -1 99999

3 28
20.000
0 -1 1 -1 1 0 1 1 1 1 1 0 -1 0 -1 0 -1 1 -1 1
-1 1 -1 0 -1 -1 -1 -1 -1 -1 -1 0 1 0 1 -1 1 -1 1 -1 99999

99999


</PRE>
<P>
<H2><FONT color=#0070e8><A name=SECTION0001004000000000000000>Sample 
Output</A>&nbsp;</FONT> </H2><PRE>OK
NG
NG
NG
</PRE>
<P><BR>
<HR>

<ADDRESS><I>Miguel A. Revilla</I> <BR><I>1999-03-05</I> </ADDRESS></BODY></HTML>

______________________________________________________
694||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Collatz Sequence</TITLE>
<META NAME="description" CONTENT="The Collatz Sequence">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Collatz Sequence</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An algorithm given by Lothar Collatz produces sequences of integers, and is
described as follows:
<DL>
<DT><STRONG>Step 1:</STRONG>
<DD>Choose an arbitrary positive integer <I>A</I> as the first item in
the sequence.
<DT><STRONG>Step 2:</STRONG>
<DD>If <I>A</I> = 1 then stop.
<DT><STRONG>Step 3:</STRONG>
<DD>If <I>A</I> is even, then replace <I>A</I> by <I>A</I> / 2 and go to step 2.
<DT><STRONG>Step 4:</STRONG>
<DD>If <I>A</I> is odd, then replace <I>A</I> by 3 * <I>A</I> + 1 and go to step 2.
</DL>

<P>
It has been shown that this algorithm will always stop (in step 2) for initial
values of <I>A</I> as large as 10<SUP>9</SUP>, but some values of <I>A</I> encountered in
the sequence may exceed the size of an integer on many computers.  In this
problem we want to determine the length of the sequence that includes all
values produced until either the algorithm stops (in step 2), or a value
larger than some specified limit would be produced (in step 4).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for this problem consists of multiple test cases.  For each case,
the input contains a single line with two positive integers, the first giving
the initial value of <I>A</I> (for step 1) and the second giving <I>L</I>, the limiting
value for terms in the sequence.  Neither of these, <I>A</I> or <I>L</I>, is larger
than 2,147,483,647 (the largest value that can be stored in a 32-bit signed
integer).  The initial value of <I>A</I> is always less than <I>L</I>.  A line that
contains two negative integers follows the last case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input case display the case number (sequentially numbered starting
with 1), a colon, the initial value for <I>A</I>, the limiting value <I>L</I>, and the
number of terms computed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
 3 100
 34 100
 75 250
 27 2147483647
 101 304
 101 303
 -1 -1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
 Case 1: A = 3, limit = 100, number of terms = 8
 Case 2: A = 34, limit = 100, number of terms = 14
 Case 3: A = 75, limit = 250, number of terms = 3
 Case 4: A = 27, limit = 2147483647, number of terms = 112
 Case 5: A = 101, limit = 304, number of terms = 26
 Case 6: A = 101, limit = 303, number of terms = 1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
695||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Placing the Ops</TITLE>
<META NAME="description" CONTENT="Placing the Ops">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Placing the Ops</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In an old brainteaser you are given a set of digits and a set of operators and
asked to arrange the digits and the operators to form an expression that has a
particular value.  This problem is a variant of that brainteaser.

<P>

<P>
<BR>
In this problem you will be presented with a sequence of no more than ten
digits (not necessarily unique) with an imbedded equal sign, and a collection
of at least one but no more than five integer operators
(from the set `<TT>+</TT>', `<TT>-</TT>', `<TT>*</TT>', and `<TT>/</TT>').

<P>
Your problem is to insert each of the operators between the correct pair of
digits so the equation thus formed is arithmetically correct, assuming all
operators have the same precedence, and that each side of the expression is
evaluated strictly left to right.  At least one digit will appear on each
side of the equal sign.

<P>

<P>
<BR>
For example, you might be given '957=52' and the operators `<TT>+</TT>' and
`<TT>*</TT>'. Arranging these in the form '9*5+7=52' makes the equation correct. 
Or you might be given '123=456' and the operations `<TT>+</TT>', `<TT>+</TT>', 
`<TT>-</TT>', and `<TT>*</TT>'.  If you arrange these in the form '1*2+3=4-5+6'
you'll find each side of the equation has the value 5.  As a final example
consider '135=642' and the operators `<TT>+</TT>', `<TT>+</TT>', `<TT>*</TT>' 
and `<TT>*</TT>'.  The arrangement '1+3*5=6+4*2' makes each side of the equation
have the value 20 (note the strict left-to-right evaluation order on each side
of the equation).

<P>

<P>
<BR>
The division operator will yield only an integer result, and must obviously
never be used with a denominator of zero.  No value in an expression will
require more than six decimal digits.  Each operator must be used exactly once.
The order in which the digits appear, and the placement of the
equal sign cannot be altered.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of multiple test cases, each having two separate lines
of input.  On the first line for each case there will appear the digits and
the imbedded equal sign, starting in the first column.  The end of line will
immediately follow the last digit.  The second line will contain the
operators to be used, starting in column one with the end of line immediately
following the last operator.  The operators will not be given in any
particular order.  The last test case will be followed by a line containing a
dollar sign (`<TT>$</TT>') in column one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case your are to display the case number (numbered sequentially
starting with 1), a colon, and the arithmetically correct expression with
the operators shown in the proper positions.  If there are multiple correct
answers, then any one of them will be acceptable.  If there is no solution
for a particular case, display ``<TT>NO SOLUTION</TT>" instead of the equation.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
957=52
+*
123=456
++-*
135=642
++**
8916=95
//+
12=34
+-
$
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1: 9*5+7=52
Case 2: 1*2+3=4-5+6
Case 3: 1+3*5=6+4*2
Case 4: 8+9/16=9/5
Case 5: NO SOLUTION
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
696||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>How Many Knights</TITLE>
<META NAME="description" CONTENT="How Many Knights">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
How Many Knights</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The knight is a piece used in chess, a game played on a board with squares
arranged in rows and columns. A knight attacks pieces that are either (a)
two rows and one column away from its position, or (b) one row and two columns
away from its position. The following diagram illustrates this. The
square marked  <B>N</B>   represents the position of the knight,
and the squares marked  <B>X</B>   indicate the squares that are
under attack.

<P>
<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
</TR>
<TR><TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> N</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
</TR>
<TR><TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
<TD ALIGN="CENTER"><B> X</B></TD>
<TD ALIGN="CENTER">&nbsp;</TD>
</TR>
</TABLE></DIV>

<P>
In this problem you are to determine the largest number of knights that can
be placed on a board with <I>M</I> rows and <I>N</I> columns so that no
knight is attacking any other. <I>M</I> and <I>N</I> will each be no larger
than 500.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of pairs of integers giving values for <I>M</I> and <I>N</I>,
followed by a pair of zeroes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input pair, display the number of rows
and columns in the board, and the number of knights that can be appropriately
placed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 3
5 5
4 7
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
4 knights may be placed on a 2 row 3 column board.
13 knights may be placed on a 5 row 5 column board.
14 knights may be placed on a 4 row 7 column board.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
697||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Jack and Jill</TITLE>
<META NAME="description" CONTENT="Jack and Jill">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Jack and Jill</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Jack and Jill went up the hill to fetch a pail of water.  Well, they probably
need to fetch many pails of water in this problem.  The problem is to determine
how long it will take Jack and Jill to fetch a specified volume of water.

<P>

<P>
<BR>
Jack and Jill require <I>UP</I> seconds (always greater than one) to travel
from the bottom of the hill to the top, where the well is located.  The well
is a circular cylinder with a diameter of <I>D</I> inches, and before any
water is removed, the water level is <I>L</I> inches below its top.
The single bucket, with a capacity of <I>B</I> cubic feet, when dropped into
the well (with a rope attached, of course) accelerates at 32.2 feet per
second per second (due to gravity).  The bucket is pulled up at a rate
of <I>P</I> inches per second.  It requires <I>DOWN</I> seconds to carry the
bucket to the bottom of the hill and empty it.

<P>

<P>
<BR>
Jack and Jill begin at the bottom of the hill.  They both immediately go
to the top of the hill, where Jill fetches water from the well: dropping
the bucket (which we assume will immediately fill completely when it
reaches the water), pulling it up, and passing it to Jack (instantaneously).
Assume the water level in the well drops only after the bucket is lifted.
Jack then carries the bucket down the hill, empties it (instantaneously), goes
back up the hill, and gives the bucket to Jill (instantaneously).  This process repeats
 until the required volume of water (<I>V</I> cubic feet) has been carried
 to the bottom of the hill.

<P>
The problem, again, is to determine how long it takes Jack and Jill to
accomplish their task.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains multiple scenarios, each having
values for 
<!-- MATH: $UP, D, L, B, P, DOWN$ -->
<I>UP</I>, <I>D</I>, <I>L</I>, <I>B</I>, <I>P</I>, <I>DOWN</I>,
and <I>V</I> (all positive non-zero real numbers) in that order on a separate line.

<P>
A line containing a single value less than one appears following the data for
 the last scenario.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each scenario, display the scenario number (they start with 1 and are
numbered sequentially), the input values, and the time required, in seconds
(accurate to two fractional digits).  The samples shown below illustrate an
acceptable output format. Print a blank line between test cases. By the way, you can assume the well never runs
 dry, even though its volume only diminishes during Jack and Jill's activities!

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
20.0 36.0 72.0 2.0 10.0 18.0 10.0
25.0 72.0 200.0 1.5 8.0 30.0 20.0
0.0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Scenario 1:
     up hill              20.00 sec
     well diameter        36.00 in
     water level          72.00 in
     bucket volume         2.00 cu ft
     bucket ascent rate   10.00 in/sec
     down hill            18.00 sec
     required volume      10.00 cu ft
     TIME REQUIRED       232.59 sec

Scenario 2:
     up hill              25.00 sec
     well diameter        72.00 in
     water level         200.00 in
     bucket volume         1.50 cu ft
     bucket ascent rate    8.00 in/sec
     down hill            30.00 sec
     required volume      20.00 cu ft
     TIME REQUIRED      1141.63 sec
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
698||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Index</TITLE>
<META NAME="description" CONTENT="Index">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Index</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The index found near the end of a textbook is an essential feature, and is
possibly referenced more frequently than the table of contents. Of course
only selected terms appear in the index. In this problem you will create a
small index.

<P>

<P>
<BR>
A normal index must deal with upper- and lower-case terms, unusual
punctuation, and index terms with multiple words. In this problem index
terms will consist only of single words consisting of sequences of at
most 10 letters and digits, with all letters converted to upper case
in the index. Punctuation preceding or following an index term will be
ignored. No terms will have imbedded punctuation. An index will frequently
have lists of references that exceed the length of a line, but in this
problem that problem will be ignored. Each index term and the list of lines
 on which it appears appear as a single separate line in the output.

<P>

<P>
<BR>
A normal index identifies the page on which a term appears. To keep the
size of the input for this problem manageable, your index will identify the
line on which a term appears. Lines in the text to be indexed are numbered
sequentially, starting with 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input for this problem will consist of multiple test cases. Each test
case has two components: the list of index terms, and the text to be indexed.
The list of index terms will have one term per line starting in column one
with the end of line immediately following the last character in the term.
The list of index terms will be unordered, and the individual terms may
include both upper- and lower-case characters (which are, of course,
to be converted to upper case only). An empty line will follow the last index term.
 The text to be indexed consists of an arbitrary number of lines followed by
 an empty line. An extra empty line will follow the last test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, the output is to begin with identification of the case
(they are numbered sequentially, starting with 1). The index lines follow
this, including one line for each index term appearing in the text; index
terms that do not appear in the text do not appear in the output.
 Each line contains the index term,
a space, and a comma-separated list of the line numbers on which
 the index term appears. If an index term appears on several consecutive lines,
then the index specifies the range of lines on which it appears, indicated by
the first and last line number in the range, separated by a hyphen. The
example input and output following illustrate all of the cases you
will need to consider.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
empty
character
of
for
it

An empty line has no characters in it at all (except for
the end of line character). No word will have more than
ten characters in it. The end of the cases will be followed
by another empty line. It follows the empty line ending the
text of the last case.

Repeat
A
line

A repeat of a word on a line does not result in a repeat of the
line number in the index.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1
CHARACTER 2
EMPTY 1, 4
FOR 1
IT 1, 3-4
OF 2-3, 5

Case 2
A 1
LINE 1-2
REPEAT 1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
699||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Falling Leaves</TITLE>
<META NAME="description" CONTENT="The Falling Leaves">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Falling Leaves</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Each year, fall in the North Central region is accompanied by the brilliant
colors of the leaves on the trees, followed quickly by the falling leaves
accumulating under the trees. If the same thing happened to binary trees, how
large would the piles of leaves become?

<P>

<P>
<BR>
We assume each node in a binary tree "drops" a number of leaves equal to the
integer value stored in that node. We also assume that these leaves drop
vertically to the ground (thankfully, there's no wind to blow them around).
Finally, we assume that the nodes are positioned horizontally in such a
 manner that the left and right children of a node are exactly one unit to
 the left and one unit to the right, respectively, of their parent. Consider
 the following tree:

<P>
<DIV ALIGN="CENTER">

<img src=p699.gif>
</DIV>

<P>
The nodes containing 5 and 6 have the same horizontal position (with
 different vertical positions, of course). The node containing 7 is one
 unit to the left of those containing 5 and 6, and the node containing 3 is
 one unit to their right. When the "leaves" drop from these nodes,
three piles are created: the leftmost one contains 7 leaves (from the
leftmost node), the next contains 11 (from the nodes containing 5 and 6),
and the rightmost pile contains 3. (While it is true that only leaf nodes
 in a tree would logically have leaves, we ignore that in this problem.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input contains multiple test cases, each describing a single tree.
A tree is specified by giving the value in the root node, followed by the
description of the left subtree, and then the description of the right subtree.
If a subtree is empty, the value <TT>-1</TT>  is supplied.
 Thus the tree shown above is specified as 
 <TT>5 7 -1 6 -1 -1 3 -1 -1</TT>. Each actual tree node contains a positive,
 non-zero value. The last test case is followed by a single <TT>-1</TT>
 (which would otherwise represent an empty tree).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, display the case number (they are numbered sequentially,
starting with 1) on a line by itself. On the next line display the number
of "leaves" in each pile, from left to right, with a single space separating
each value. This display must start in column 1, and will not exceed the
 width of an 80-character line. Follow the output for each case by a blank line.
 This format is illustrated in the examples below.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 7 -1 6 -1 -1 3 -1 -1
8 2 9 -1 -1 6 5 -1 -1 12 -1
-1 3 7 -1 -1 -1
-1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
				
<PRE>
Case 1:
7 11 3

Case 2:
9 7 21 15
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-14</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
700||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Date Bugs</TITLE>
<META NAME="description" CONTENT="Date Bugs">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Date Bugs</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
There are rumors that there are a lot of computers having a problem with the year 2000. As they use only two digits to represent the year, the date will suddenly turn from 1999 to 1900. In fact, there are also many other, similar problems. On some systems, a 32-bit integer is used to store the number of seconds that have elapsed since a certain fixed date. In this way, when 2<SUP>32</SUP> seconds (about 136 Years) have elapsed, the date will jump back to whatever
the fixed date is.

<P>
Now, what can you do about all that mess? Imagine you have two
computers <I>C</I><SUB>1</SUB> and <I>C</I><SUB>2</SUB> with two different bugs: One with the
ordinary Y2K-Bug (i.e. switching to <I>a</I><SUB>1</SUB>:=1900 instead of <I>b</I><SUB>1</SUB>:=2000) and one
switching to <I>a</I><SUB>2</SUB>:=1904 instead of <I>b</I><SUB>2</SUB>:=2040. Imagine that the <I>C</I><SUB>1</SUB> displays the year <I>y</I><SUB>1</SUB>:=1941 and <I>C</I><SUB>2</SUB> the year <I>y</I><SUB>2</SUB>:=2005. Then you know the following (assuming that there are no other bugs): the real year can't be 1941, since, then, both computers would show the (same) right date. If the year would be 2005, <I>y</I><SUB>1</SUB> would be 1905, so this is impossible, too. Looking only at <I>C</I><SUB>1</SUB>, we know that the real year is one of the following: 1941, 2041, 2141, etc. We now can calculate what <I>C</I><SUB>2</SUB> would display in these years: 1941, 1905, 2005, etc. So in fact, it is possible that the actual year is 2141.

<P>
To calculate all this manually is a lot of work. (And you don't really want to do it each time you forgot the actual year.) So, your task is to write a program which does the calculation for you: find the first possible real year, knowing what some other computers say (<I>y</I><SUB><I>i</I></SUB>) and knowing their bugs (switching to <I>a</I><SUB><I>i</I></SUB>
instead of <I>b</I><SUB><I>i</I></SUB>). Note that the year <I>a</I><SUB><I>i</I></SUB> is definitely not after the year the computer was built. Since the actual year can't be before the year the
computers were built, the year your program is looking for can't be before any <I>a</I><SUB><I>i</I></SUB>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several test cases, in which the actual year
has to be calculated. The description of each case starts with a
line containing an integer <I>n</I> (
<!-- MATH: $1 \le n \le 20$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/700img1.gif" 
 ALT="$1 \le n \le 20$">), the number of
computers. Then, there is one line containing three integers 
<!-- MATH: $y_i, a_i, b_i$ -->
<I>y</I><SUB><I>i</I></SUB>, <I>a</I><SUB><I>i</I></SUB>, <I>b</I><SUB><I>i</I></SUB> 
for each computer (
<!-- MATH: $0 \le a_i \le y_i < b_i < 10000$ -->
<IMG
 WIDTH="191" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/700img1.gif" 
 ALT="$0 \le a_i \le y_i < b_i < 10000$">).
<I>y</I><SUB><I>i</I></SUB> is the year the computer displays, <I>b</I><SUB><I>i</I></SUB> is the year in which the
bug happens (i.e. the first year which can't be displayed by this
computer) and <I>a</I><SUB><I>i</I></SUB> is the year that the computer displays instead of
<I>b</I><SUB><I>i</I></SUB>.

<P>
The input is terminated by a test case with <I>n</I>=0. It should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, output the line ``<TT>Case #</TT><I>k</I><TT>:</TT>'', where <I>k</I> 
is the number of the situation. Then, output the line ``<TT>The actual year is </TT><I>z</I><TT>.</TT>'', where <I>z</I> is the smallest possible year (satisfying all computers and being greater or equal to 
<!-- MATH: $u=\max_{i=1}^n a_i$ -->
<IMG
 WIDTH="110" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/700img1.gif" 
 ALT="$u=\max_{i=1}^n a_i$">). If there
is no such year less than 10000, output ``<TT>Unknown bugs detected.</TT>''.

<P>
Output a blank line after each case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
1941 1900 2000
2005 1904 2040
2
1998 1900 2000
1999 1900 2000
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case #1:
The actual year is 2141.

Case #2:
Unknown bugs detected.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
701||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Archeologists' Dilemma</TITLE>
<META NAME="description" CONTENT="The Archeologists' Dilemma">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Archeologists' Dilemma</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An archeologist seeking proof of the presence of extraterrestrials in the
Earth's past, stumbles upon a partially destroyed wall containing strange
chains of numbers. The left-hand part of these lines of digits is always
intact, but unfortunately the right-hand one is often lost by erosion of the
stone. However, she notices that all the numbers with all its digits intact
are powers of 2, so that the hypothesis that all of them are powers of 2 is
obvious. To reinforce her belief, she selects a list of numbers on which it is
apparent that the number of legible digits is strictly smaller than the number
of lost ones, and asks you to find the smallest power of 2 (if any) whose
first digits coincide with those of the list. 

<P>
Thus you must write a program such that given an integer, it determines (if
it exists) the smallest exponent <I>E</I> such that the first digits of 2<SUP><I>E</I></SUP> coincide
with the integer (remember that more than half of the digits are missing).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
It is a set of lines with a positive integer <I>N</I> not bigger than 2147483648 in
each of them.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For every one of these integers a line containing the smallest positive
integer <I>E</I> such that the first digits of 2<SUP><I>E</I></SUP> are precisely the digits of <I>N</I>,
or, if there is no one, the sentence ``<TT>no power of 2</TT>".

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
2
10
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7
8
20
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
702||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Vindictive Coach</TITLE>
<META NAME="description" CONTENT="The Vindictive Coach">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Vindictive Coach</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The coach of a football team, after suffering for years the adverse comments
of the media about his tactics, decides to take his revenge by presenting his
players in a line-up in such a way that the TV cameras would be compelled to
zigzag in a ridiculous bobbing motion, by alternating taller and shorter
players. However, the team captain objects that he must be the first of the
line by protocolary reasons,and that he wants to be seen in the best possible
light: that is, he should not have a taller colleague nest to him unless there
is no alternative (everyone else is taller than him). Even in this case, the
height difference should be as small as possible, while maintaining the zigzag
arrangement of the line.

<P>
With this condition the coach addresses an expert in computation (i.e. you) to
help him find the number of different alignments he may make, knowing that all
players have a different height. They are always numbered by stature starting
by 1 as the shortest one. Of course the number of players may be arbitrary,
provided it does not exceed 22.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
It is a set of lines, each of which contains two positive integers <I>N</I> and <I>m</I>
separated by a blank space. 
<!-- MATH: $N (\le 22)$ -->
<IMG
 WIDTH="70" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/702img1.gif" 
 ALT="$N (\le 22)$">
represents the number of players in the
line-up and <I>m</I> the captain's number, who as told is always the first of the
line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For every line of the input a line with positive integer indicating the number
of possible alignments under the above conditions.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 1
3 3
4 1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
1
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
703||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Triple Ties: The Organizer's Nightmare</TITLE>
<META NAME="description" CONTENT="Triple Ties: The Organizer's Nightmare">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Triple Ties: The Organizer's Nightmare</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
<I>N</I> participants compete in a chess tournament, every player
competing against each other one single time. The results are registered 
in a square matrix in the following way:

<P>
<UL>
<LI>If player <I>i</I> beats player <I>j</I>, the digit 1 must be written at the position (<I>i</I>,<I>j</I>), where <I>i</I> denotes the row and <I>j</I> de column, and the digit 0 at the place (<I>j</I>,<I>i</I>).

<P>
<LI>If the game ends in a draw, both numbers are zero.

<P>
<LI>The digits at the main diagonal are also zero.
</UL>

<P>
To establish the final clasification the organizer must face the problem of
possible ties. The general criterion is that ties should be solved by counting
the points obtained in the matches between the tied players, but sometimes
this does not solve the problem. This happens for two players if they reached
a draw in their respective match; for three tied players, there exist two
different undecidable situations:

<P>
<UL>
<LI>If the three matches were draws.

<P>
<LI>If there is a cyclic chain of victories, such as 1 beats 2, 2 beats 3, 3
beats 1.
</UL>

<P>
Since the organizer wishes to establish different classifications according to
age groups, nationality, etc. of the participants, it has been decided to
elaborate a table containing all the triple ties. If all three matches end in
draws, the three numbers must be annotated in increasing order, and if there
is a cycle of victories, in the following order: the first in the line beats
the second, and the second beats the third one. Among the three possibilities
of expressing this fact, the line must be written in increasing or decreasing
order. These three-number chains must themselves be listed in lexicographical
order.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Unlimited number of tests. Each test consists in a line with a positive
integer <I>N</I> representing the number of players and <I>N</I> lines containing the
results matrix of the tournament with consecutive digits separated by a blank
space (
<!-- MATH: $3 \le N \le 100$ -->
<IMG
 WIDTH="102" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/703img2.gif" 
 ALT="$3 \le N \le 100$">).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For every input a line containing the total amount <I>M</I> of undecidable triple
ties; and, if <I>M</I>&gt;0, <I>M</I> lines, each of them with the three numbers of the
involved players separated by a blank space and satisfying the order
requirements, both within the line and in the set of lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0 0 1
1 0 0
0 1 0
3
0 1 0
0 0 0
0 0 0
3
0 0 0
0 0 0
0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
3 2 1
0
1
1 2 3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
704||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Colour Hash</TITLE>
<META NAME="description" CONTENT="Colour Hash">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Colour Hash</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
This puzzle consists of two wheels. Both wheels can rotate both clock and counter-clockwise. 
They contain 21 coloured pieces, 10 of which are rounded triangles and 11 of
which are separators. Figure 1 shows the final position of each one of the
pieces. Note that to perform a one step rotation you must turn the wheel until
you have advanced a triangle and a separator. 

<P>
<DIV ALIGN="CENTER">

<img src=p704a.gif>

<P>

<P>
<BR>
Figure 1. Final puzzle configuration
</DIV>

<P>
Your job is to write a program that reads the puzzle configuration and prints the minimum 
sequence of movements required to reach the final position. We will use the
following integer values to encode each type of piece: 

<P>

<P>
<BR>

<TABLE CELLPADDING=3>
<TR><TD ALIGN="CENTER">0</TD>
<TD ALIGN="LEFT">grey separator</TD>
</TR>
<TR><TD ALIGN="CENTER">1</TD>
<TD ALIGN="LEFT">yellow triangle</TD>
</TR>
<TR><TD ALIGN="CENTER">2</TD>
<TD ALIGN="LEFT">yellow separator</TD>
</TR>
<TR><TD ALIGN="CENTER">3</TD>
<TD ALIGN="LEFT">cyan triangle</TD>
</TR>
<TR><TD ALIGN="CENTER">4</TD>
<TD ALIGN="LEFT">cyan separator</TD>
</TR>
<TR><TD ALIGN="CENTER">5</TD>
<TD ALIGN="LEFT">violet triangle</TD>
</TR>
<TR><TD ALIGN="CENTER">6</TD>
<TD ALIGN="LEFT">violet separator</TD>
</TR>
<TR><TD ALIGN="CENTER">7</TD>
<TD ALIGN="LEFT">green triangle</TD>
</TR>
<TR><TD ALIGN="CENTER">8</TD>
<TD ALIGN="LEFT">green separator</TD>
</TR>
<TR><TD ALIGN="CENTER">9</TD>
<TD ALIGN="LEFT">red triangle</TD>
</TR>
<TR><TD ALIGN="CENTER">10</TD>
<TD ALIGN="LEFT">red separator</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
A puzzle configuration will be described using 24 integers, the first 12 to describe the left 
wheel configuration and the last 12 for the right wheel. The first integer
represents the bottom right separator of the left wheel and the next eleven
integers describe the left wheel clockwise. The thirteenth integer represents
the bottom left separator of right wheel and the next eleven integers describe
the right wheel counter-clockwise.

<P>
The final position is therefore encoded like:

<P>
<DIV ALIGN="CENTER">
<TT>0 3 4 3 0 5 6 5 0 1 2 1 0 7 8 7 0 9 10 9 0 1 2 1</TT>
</DIV>

<P>
If for instance we rotate the left wheel clockwise one position from the final configuration 
(as shown in  Figure 2) the puzzle configuration would be encoded like:

<P>
<DIV ALIGN="CENTER">
<TT>2 1 0 3 4 3 0 5 6 5 0 1 0 7 8 7 0 9 10 9 0 5 0 1</TT>
</DIV>

<P>
<DIV ALIGN="CENTER">

<img src=p704b.gif>

<P>

<P>
<BR>
Figure 2. The puzzle after rotating the left wheel on step clockwise from the final configuration.
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input for your program consists of several puzzles. The first line of the input will contain an 
integer <I>n</I> specifying the number of puzzles. There will then be <I>n</I> lines each
containing 24 integers separated with one white space, describing the initial
puzzle configuration as explained above. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each configuration your program should output one line with just one number representing 
the solution. Each movement is encoded using one digit from 1 to 4 in the
following way:

<P>

<P>
<BR>

<TABLE CELLPADDING=3>
<TR><TD ALIGN="CENTER">1</TD>
<TD ALIGN="LEFT">Left Wheel Clockwise rotation</TD>
</TR>
<TR><TD ALIGN="CENTER">2</TD>
<TD ALIGN="LEFT">Right Wheel Clockwise rotation</TD>
</TR>
<TR><TD ALIGN="CENTER">3</TD>
<TD ALIGN="LEFT">Left Wheel Counter-Clockwise rotation</TD>
</TR>
<TR><TD ALIGN="CENTER">4</TD>
<TD ALIGN="LEFT">Right Wheel Counter-Clockwise rotation</TD>
</TR>
</TABLE>

<P>

<P>
<BR>
No space should be printed between each digit. Since multiple solutions could be found, you 
should print the solution that is encoded as the smallest number. The
solution will never require more than 16 movements.

<P>
If no solution is found you should print ``<TT>NO SOLUTION WAS FOUND IN 16 STEPS</TT>". If you are given 
the final position you should print  ``<TT>PUZZLE ALREADY SOLVED</TT>".

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
0 3 4 3 0 5 6 5 0 1 2 1 0 7 8 7 0 9 10 9 0 1 2 1
0 3 4 5 0 3 6 5 0 1 2 1 0 7 8 7 0 9 10 9 0 1 2 1
0 9 4 3 0 5 6 5 0 1 2 1 0 7 8 7 0 9 10 3 0 1 2 1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
PUZZLE ALREADY SOLVED
1434332334332323
NO SOLUTION WAS FOUND IN 16 STEPS
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
705||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Slash Maze</TITLE>
<META NAME="description" CONTENT="Maze">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Slash Maze</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
By filling a rectangle with slashes (/) and backslashes (
<!-- MATH: $\backslash$ -->
<IMG
 WIDTH="13" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/705img1.gif" 
 ALT="$\backslash$">), you
can generate nice little mazes. Here is an example:

<P>
<DIV ALIGN="CENTER">

<img src=p705.gif>
</DIV>

<P>
As you can see, paths in the maze cannot branch, so the whole maze only
contains cyclic paths and paths entering somewhere and leaving
somewhere else. We are only interested in the cycles. In our example,
there are two of them.

<P>
Your task is to write a program that counts the cycles and finds the
length of the longest one. The length is defined as the number of
small squares the cycle consists of (the ones bordered by gray lines
in the picture). In this example, the long cycle has length 16 and
the short one length 4.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several maze descriptions. Each description begins with one
line containing two integers <I>w</I> and <I>h</I> (
<!-- MATH: $1 \le w, h \le 75$ -->
<IMG
 WIDTH="108" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/705img1.gif" 
 ALT="$1 \le w, h \le 75$">), the width and the height of the maze. The next <I>h</I> lines represent the maze itself, and contain <I>w</I> characters each; all these characters will be either ``<code>/</code>" or ``<code>\</code>".

<P>
The input is terminated by a test case beginning with <I>w</I> = <I>h</I> = 0. This case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each maze, first output the line ``<TT>Maze #</TT><I>n</I><TT>:</TT>'', where <I>n</I> 
is the number of the maze. Then, output the line
``<I>k</I><TT>Cycles; the longest has length </TT><I>l</I><TT>.</TT>'', where
<I>k</I> is the number of cycles in the maze and <I>l</I> the length of the longest of the cycles. If the maze does not contain any cycles, output the line ``<TT>There are no cycles.</TT>".

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 4
\//\\/
\///\/
//\\/\
\/\///
3 3
///
\//
\\\
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Maze #1:
2 Cycles; the longest has length 16.

Maze #2:
There are no cycles.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
706||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>LC-Display</TITLE>
<META NAME="description" CONTENT="LC-Display">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
LC-Display</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A friend of you has just bought a new computer. Until now, the most
powerful computer he ever used has been a pocket calculator. Now,
looking at his new computer, he is a bit disappointed, because he
liked the LC-display of his calculator so much. So you decide to write 
a program that displays numbers in an LC-display-like style on his computer.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains several lines, one for each number to be
displayed. Each line contains two integers <I>s</I>, <I>n</I> (
<!-- MATH: $1 \le s \le 10, 0
\le n \le 99\,999\,999$ -->
<IMG
 WIDTH="234" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/706img1.gif" 
 ALT="$1 \le s \le 10, 0
\le n \le 99\,999\,999$">), where <I>n</I> is the number to be displayed and <I>s</I>
is the size in which it shall be displayed.

<P>
The input file will be terminated by a line containing two zeros.
This line should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output the numbers given in the input file in an LC-display-style
using <I>s</I> ``<TT>-</TT>'' signs for the horizontal segments and
<I>s</I> ``<TT>|</TT>'' signs for the vertical ones. Each digit occupies
exactly <I>s</I>+2 columns and 2<I>s</I>+3 rows. (Be sure to fill all the white space
occupied by the digits with blanks, also for the last digit.) There
has to be exactly one column of blanks between two digits.

<P>
Output a blank line after each number. 
(You will find a sample of each digit in the sample output.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 12345
3 67890
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
      --   --        -- 
   |    |    | |  | |   
   |    |    | |  | |   
      --   --   --   -- 
   | |       |    |    |
   | |       |    |    |
      --   --        -- 

 ---   ---   ---   ---   --- 
|         | |   | |   | |   |
|         | |   | |   | |   |
|         | |   | |   | |   |
 ---         ---   ---       
|   |     | |   |     | |   |
|   |     | |   |     | |   |
|   |     | |   |     | |   |
 ---         ---   ---   --- 
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
707||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Robbery</TITLE>
<META NAME="description" CONTENT="Robbery">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Robbery</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Inspector Robstop is very angry. Last night, a bank has been robbed and the robber has not been caught. And this happened already for the third time this year, even though he did everything in his power to stop the robber: as quickly as possible, all roads leading out of the city were blocked, making it impossible for the robber to escape. Then, the inspector
asked all the people in the city to watch out for the robber, but the only messages he got were of the form ``We don't see him."

<P>
But this time, he has had enough! Inspector Robstop decides to analyze how the robber could have escaped. To do that, he asks you to write a program which takes all the information the inspector could get about the robber in order to find out where the robber has been at which time.

<P>
Coincidentally, the city in which the bank was robbed has a rectangular shape. The roads leaving the city are blocked for a certain period of time <I>t</I>, and during that time, several observations of the form ``The robber isn't in the 
rectangle <I>R</I><SUB><I>i</I></SUB> at time <I>t</I><SUB><I>i</I></SUB>'' are reported. Assuming that the robber
can move at most one unit per time step, your 
program must try to find the exact position of the robber at each
time step.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains the description of several robberies.
The first line of each description consists of three numbers <I>W</I>, <I>H</I>, <I>t</I> 
(
<!-- MATH: $1 \le W, H, t \le 100$ -->
<IMG
 WIDTH="139" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$1 \le W, H, t \le 100$">)
where <I>W</I> is the width, <I>H</I> the height of the city and
<I>t</I> is the time during which the city is locked.

<P>
The next contains a single  integer <I>n</I> (
<!-- MATH: $0 \le n \le 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$0 \le n \le 100$">),
the number of messages the inspector received. The next <I>n</I> lines (one for
each of the messages) consist of five integers 
<!-- MATH: $t_i, L_i, T_i,
R_i, B_i$ -->
<I>t</I><SUB><I>i</I></SUB>, <I>L</I><SUB><I>i</I></SUB>, <I>T</I><SUB><I>i</I></SUB>,
<I>R</I><SUB><I>i</I></SUB>, <I>B</I><SUB><I>i</I></SUB> each. The integer <I>t</I><SUB><I>i</I></SUB> is the time at which the observation
has been made (
<!-- MATH: $1 \le t_i \le t$ -->
<IMG
 WIDTH="78" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$1 \le t_i \le t$">), and 
<!-- MATH: $L_i, T_i, R_i, B_i$ -->
<I>L</I><SUB><I>i</I></SUB>, <I>T</I><SUB><I>i</I></SUB>, <I>R</I><SUB><I>i</I></SUB>, <I>B</I><SUB><I>i</I></SUB> are the left, top,
right and bottom respectively of the (rectangular) area which has been
observed. (
<!-- MATH: $1 \le L_i \le R_i \le W, 1 \le T_i \le B_i \le H$ -->
<IMG
 WIDTH="271" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$1 \le L_i \le R_i \le W, 1 \le T_i \le B_i \le H$">;
the point (1, 1) is the upper left hand corner, and (<I>W</I>,<I>H</I>) is the lower right hand corner  of the city.)
The messages mean that the robber was not in the given rectangle at time <I>t</I><SUB><I>i</I></SUB>.

<P>
The input is terminated by a test case starting with 
<!-- MATH: $W = H = t = 0$ -->
<I>W</I> = <I>H</I> = <I>t</I> = 0. This case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each robbery, first output the line
``<TT>Robbery #</TT><I>k</I><TT>:</TT>'', where <I>k</I> is the number of the robbery.
Then, there are three possibilities:

<P>
If it is impossible that the robber is still in the city considering the messages, output the line ``<TT>The robber has escaped.</TT>''

<P>
In all other cases, assume that the robber really is in the city. Output one line of the form ``<TT>Time step </TT><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$\tau$"><TT>: The robber has been at </TT><I>x</I><TT>,</TT><I>y</I><TT>.</TT>" for each time step, in which the exact location can be deduced. (<I>x</I> and <I>y</I> are the column resp. row of the robber in time step  <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$\tau$">.)
Output these lines ordered by time  <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/707img1.gif" 
 ALT="$\tau$">.

<P>
If nothing can be deduced, output the line ``<TT>Nothing known.</TT>" and hope that the inspector will not get even more angry.

<P>
Output a blank line after each processed case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4 5
4
1 1 1 4 3
1 1 1 3 4
4 1 1 3 4
4 4 2 4 4
10 10 3
1
2 1 1 10 10
0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Robbery #1:
Time step 1: The robber has been at 4,4.
Time step 2: The robber has been at 4,3.
Time step 3: The robber has been at 4,2.
Time step 4: The robber has been at 4,1.

Robbery #2:
The robber has escaped.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
708||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dreisam Equations</TITLE>
<META NAME="description" CONTENT="Dreisam Equations">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dreisam Equations</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
During excavations in the <EM>Dreisamw&#252;ste</EM>, a desert on some far away and probably uncivilized planet, sheets of paper containing mysterious symbols had been found. After a long investigation, the project scientists have concluded that the symbols might be parts of equations. If this were true, it would be proof that the <EM>Dreisamw&#252;ste</EM> was civilized a long long time ago.

<P>
The problem, however, is that the only symbols found on the sheets are digits, parantheses and equality signs. There is strong evidence that the people living in the <EM>Dreisamw&#252;ste</EM> knew only of three arithmetic operations: addition, subtraction, and multiplication. It is also known that the people of the <EM>Dreisamw&#252;ste</EM> did not have prioritization rules for arithmetic operations - they evaluate all terms strictly left to right. For example, for them the term <TT>3 + 3 * 5</TT> would be equal to 30, and not 18.

<P>
But currently, the sheets do not contain any arithmetic operators. So if the hypothesis is true, and the numbers on the sheets form equations, then the operators must have faded away over time.

<P>
You are the computer expert who is supposed to find out whether the hypothesis is sensible or not. For some given equations (without arithmetic operators) you must find out if there is a possibility to place <TT>+</TT>, <TT>-</TT>, and <TT>*</TT> in the expression, so that it yields a valid equation. For example, on one sheet, the string ``<TT>18=7 (5 3) 2</TT>" has been discovered. Here, one possible solution is ``<TT>18=7+(5-3)*2</TT>". But if there was a sheet containing ``<TT>5=3 3</TT>", then this would mean that the <EM>Dreisamw&#252;ste</EM> people did not mean an equation when writing this.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Each equation to deal with occupies one line in the input file. Each line begins with a positive integer (less than 2<SUP>30</SUP>) followed by an equality sign <TT>=</TT>. (For your convenience, the <EM>Dreisamw&#252;ste</EM> inhabitants used equations with trivial left sides only.) This is followed by up to 12 positive
integers forming the right side of the equation. (The product of these numbers will be less than 2<SUP>30</SUP>.) There might be some parentheses around groups of one or more numbers. There will be no line containing more than 80 characters. There is no other limit for the amount of the parentheses in the equation. There will always be at least one space or parenthesis between two numbers, otherwise the occurrence of white space is unrestricted.

<P>
The line containing only the number <TT>0</TT> terminates the input, it should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each equation, output the line ``<TT>Equation #</TT><I>n</I><TT>:</TT>", where <I>n</I> is the number of the equation. Then, output one line containing a solution to the problem, i. e. the equation with the missing <TT>+</TT>, <TT>-</TT>, and <TT>*</TT> signs inserted. Do not print any white space in the equation.

<P>
If there is no way to insert operators to make the equation valid, then output the line ``<TT>Impossible.</TT>".

<P>
Output one blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
18 = 7 (5 3) 2
30 = 3 3 5
18 = 3 3 5
5 = 3 3
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Equation #1:
18=7+(5-3)*2

Equation #2:
30=3+3*5

Equation #3:
Impossible.

Equation #4:
Impossible.

</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
709||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Formatting Text</TITLE>
<META NAME="description" CONTENT="Formatting Text">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Formatting Text</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Writings e-mails is fun, but, unfortunately, they do not look very nice,
mainly because not all lines have the same lengths.  In this problem, your task is to write an e-mail formatting program which reformats a paragraph of an e-mail (e.g. by inserting spaces) so that, afterwards, all lines have the same
length (even the last one of each paragraph).

<P>
The easiest way to perform this task would be to insert more spaces 
between the words in lines which are too short. But this is not the best
way. Consider the following example:

<P>
<PRE>
****************************
This is the example you are
actually considering.
</PRE>

<P>
Let us assume that we want to get lines as long as the row of
stars. Then, by simply inserting spaces, we would get

<P>
<PRE>
****************************
This is the example you  are
actually        considering.
</PRE>

<P>
But this looks rather odd because of the big gap in the second line. By
moving the word ``<TT>are</TT>'' from the first to the second line,
we get a better result:

<P>
<PRE>
****************************
This  is  the  example   you
are  actually   considering.
</PRE>

<P>
Of course, this has to be formalized. To do this, we assign a
<EM>badness</EM> to each gap between words.
The badness assigned to a gap of <I>n</I> spaces is (<I>n</I> - 1)<SUP>2</SUP>.
The goal of the program is to minimize the sum of all badnesses.
For example, the badness of the first example is

<!-- MATH: $1 + 7^2 = 50$ -->
1 + 7<SUP>2</SUP> = 50
whereas the badness of the second one is only 

<!-- MATH: $1 + 1 + 1 + 4 + 1 + 4 = 12$ -->
1 + 1 + 1 + 4 + 1 + 4 = 12.

<P>
In the output, every line has to start and to end with a word. (I.e.
there cannot be a gap at the beginning or the end of a line.) The only 
exception to this is the following:

<P>
If a line contains only one word this word shall be put at the beginning
of the line, and a badness of 500 is assigned to this line if it is shorter 
than it should be. (Of course, in this case, the length of the line is simply
the length of the word.)

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains a text consisting of several
paragraphs. Each paragraph is preceded by a line containing a single integer
<I>n</I>, the desired width of the paragraph (
<!-- MATH: $1 \le n \le 80$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/709img1.gif" 
 ALT="$1 \le n \le 80$">).

<P>
Paragraphs consist of one or more lines which contain one or more words each. Words consist of characters with ASCII codes between 33 and 126, inclusive, and are separated by spaces (possibly more than one). No word will be longer than the desired width of the paragraph. The total length of all words of one paragraph will not be more than 10000 characters.

<P>
Each paragraph is terminated by exactly one blank line. There is no  limit on
the number of paragraphs in the input file.

<P>
The input file will be terminated by a paragraph description starting with <I>n</I>=0. This paragraph should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output the same text, formatted in the way described above (processing 
each paragraph separately). 

<P>
If there are several ways to format a paragraph with the same badness, 
use the following algorithm to choose which one to output: Let <I>A</I> and <I>B</I> be
two solutions. Find the first gap which has not the same length in <I>A</I> and <I>B</I>.
Do <EM>not</EM> output the solution in which this gap is bigger.

<P>
Output a blank line after each paragraph.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
28
This is the example you are
actually considering.

25
Writing e-mails is fun, and with this program,
they even look nice.

0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
This  is  the  example   you
are  actually   considering.

Writing e-mails  is  fun,
and  with  this  program,
they  even   look   nice.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
710||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Game</TITLE>
<META NAME="description" CONTENT="The Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Game</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
One morning, you wake up and think: ``I am such a good programmer. Why
not make some money?'' So you decide to write a computer game.

<P>
The game takes place on a rectangular board consisting of 
<!-- MATH: $w \times h$ -->
<IMG
 WIDTH="49" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/710img1.gif" 
 ALT="$w \times h$">
squares. Each square might or might not contain a game piece, as shown in the picture.

<P>
One important aspect of the game is whether two game pieces can be connected by
a path which satisfies the two following properties:

<P>
<DL COMPACT>
<DT>1.
<DD>It consists of straight segments, each one being either
horizontal or vertical.
<DT>2.
<DD>It does not cross any other game pieces.
</DL>

<P>
(It <EM>is</EM> allowed that the path leaves the board temporarily.)

<P>
Here is an example:

<P>
<DIV ALIGN="CENTER">

<img src=p710.gif>
</DIV>

<P>
The game pieces at (1,3) and at (4, 4) can be connected. The game pieces at (2, 3) and (3, 4) cannot be connected; each path would cross at least one other game piece.

<P>
The part of the game you have to write now is the one testing whether two 
game pieces  can be connected according to the rules above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains descriptions of several different game situations. The first line of each description contains two integers <I>w</I> and <I>h</I> (
<!-- MATH: $1 \le w, h
\le 75$ -->
<IMG
 WIDTH="108" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/710img1.gif" 
 ALT="$1 \le w, h
\le 75$">), the width and the height of the board. The next <I>h</I> lines
describe the contents of the board; each of these lines contains exactly <I>w</I> characters: a ``<TT>X</TT>'' if there is a game piece at this location, and a
space if there is no game piece.

<P>
Each description is followed by several lines containing four integers 
<!-- MATH: $x_1, y_1, x_2, y_2$ -->
<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB> each satisfying  
<!-- MATH: $1 \le x_1, x_2 \le w, 1 \le y_1, y_2 \le h$ -->
<IMG
 WIDTH="228" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/710img1.gif" 
 ALT="$1 \le x_1, x_2 \le w, 1 \le y_1, y_2 \le h$">.
These are the coordinates of two game pieces. (The upper left corner has the coordinates (1, 1).) These two game pieces will always be different. The list of pairs of game pieces for a board will be terminated by a line containing 
``<TT>0 0 0 0</TT>".

<P>
The entire input is terminated by a test case starting with <I>w</I>=<I>h</I>=0. This test case should not be procesed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each board, output the line ``<TT>Board #</TT><I>n</I><TT>:</TT>'', where <I>n</I> 
is the number of the board. Then, output one line for each pair of
game pieces associated with the board description. Each of these lines has to start with ``<TT>Pair </TT><I>m</I><TT>: </TT>'', where <I>m</I> is the number of the pair (starting the count with 1 for each board). Follow this by ``<I>k</I><TT>segments.</TT>'', where <I>k</I> is the minimum number of segments for a path connecting  the two game pieces, or ``<TT>impossible.</TT>'', if it is not possible
to connect the two game pieces  as described above.

<P>
Output a blank line after each board.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 4
XXXXX
X   X
XXX X
 XXX 
2 3 5 3
1 3 4 4
2 3 3 4
0 0 0 0
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Board #1:
Pair 1: 4 segments.
Pair 2: 3 segments.
Pair 3: impossible.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
711||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dividing up</TITLE>
<META NAME="description" CONTENT="Dividing up">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dividing up</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value.

<P>
Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each line in the input file describes one collection of marbles to be
divided. The lines consist of six non-negative integers 
<!-- MATH: $n_1,\dots,n_6$ -->
<IMG
 WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/711img1.gif" 
 ALT="$n_1,\dots,n_6$">,
where <I>n</I><SUB><I>i</I></SUB> is the number of marbles of value <I>i</I>. So, the
example from above would be described by the input-line
``<TT>1 0 1 2 0 0</TT>''. The maximum total number of marbles will be 20000.

<P>
The last line of the input file will be ``<TT>0 0 0 0 0 0</TT>''; do not process this line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each colletcion, output ``<TT>Collection #</TT><I>k</I><TT>:</TT>'', where <I>k</I> is
the number of the test case, and then either ``<TT>Can be divided.</TT>'' or
``<TT>Can't be divided.</TT>''.

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 0 1 2 0 0
1 0 0 0 1 1
0 0 0 0 0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Collection #1:
Can't be divided.

Collection #2:
Can be divided.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
712||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>S-Trees</TITLE>
<META NAME="description" CONTENT="S-Trees">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
S-Trees</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A Strange Tree (S-tree) over the variable set 
<!-- MATH: $X_n = \{x_1, x_2, \dots, x_n\}$ -->
<IMG
 WIDTH="169" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$X_n = \{x_1, x_2, \dots, x_n\}$">
is a binary tree representing a Boolean function 
<!-- MATH: $f: \{0, 1\}^n \rightarrow \{ 0, 1\}$ -->
<IMG
 WIDTH="151" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f: \{0, 1\}^n \rightarrow \{ 0, 1\}$">.
Each path of the S-tree begins at the <EM>root</EM> node and consists of <I>n</I>+1 nodes. Each of the S-tree's nodes has a <EM>depth</EM>, which is the amount of nodes between itself and the root (so the root has depth 0). The nodes with depth less than <I>n</I> are called <EM>non-terminal</EM> nodes. All non-terminal nodes have two children: the <EM>right child</EM> and the <EM>left child</EM>. Each non-terminal node is marked with some variable <I>x</I><SUB><I>i</I></SUB> from the variable set <I>X</I><SUB><I>n</I></SUB>. All non-terminal nodes with the same depth are marked with the same variable, and non-terminal nodes with different depth are marked with different variables. So, there is a unique variable <I>x</I><SUB><I>i</I><SUB>1</SUB></SUB> corresponding to the root, a unique variable <I>x</I><SUB><I>i</I><SUB>2</SUB></SUB> corresponding to the nodes with depth 1, and
so on. The sequence of the variables 
<!-- MATH: $x_{i_1}, x_{i_2}, \dots, x_{i_n}$ -->
<IMG
 WIDTH="119" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$x_{i_1}, x_{i_2}, \dots, x_{i_n}$">
is called the <EM>variable ordering</EM>. The nodes having depth <I>n</I> are called <EM>terminal</EM> nodes. They have no children and are marked with either 0 or 1. Note that the variable ordering and the distribution of 0's and 1's on terminal nodes are sufficient to completely describe an S-tree.

<P>
As stated earlier, each S-tree represents a Boolean function <I>f</I>. If you have an S-tree and values for the variables 
<!-- MATH: $x_1, x_2, \dots, x_n$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$x_1, x_2, \dots, x_n$">,
then it is quite simple to find out what 
<!-- MATH: $f(x_1, x_2, \dots, x_n)$ -->
<IMG
 WIDTH="129" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f(x_1, x_2, \dots, x_n)$">
is: start with the root. Now repeat the following: if the node you are at is labelled with a variable
<I>x</I><SUB><I>i</I></SUB>, then depending on whether the value of the variable is 1 or 0, you go its right or left child, respectively. Once you reach a terminal node, its label gives the value of the function.

<P>
<DIV ALIGN="CENTER">

<img src=p712.gif>

<P>

<P>
Figure 1: S-trees for the function 
<!-- MATH: $x_1 \wedge (x_2 \vee x_3)$ -->
<IMG
 WIDTH="109" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$x_1 \wedge (x_2 \vee x_3)$"></DIV>

<P>
On the picture, two S-trees representing the same Boolean function, 

<!-- MATH: $f(x_1, x_2, x_3) = x_1 \wedge (x_2 \vee x_3)$ -->
<IMG
 WIDTH="225" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f(x_1, x_2, x_3) = x_1 \wedge (x_2 \vee x_3)$">,
are shown. For the left tree, the variable ordering is 
<!-- MATH: $x_1, x_2, x_3$ -->
<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>x</I><SUB>3</SUB>, and for the right tree it is

<!-- MATH: $x_3, x_1, x_2$ -->
<I>x</I><SUB>3</SUB>, <I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>.

<P>
The values of the variables 
<!-- MATH: $x_1, x_2, \dots, x_n$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$x_1, x_2, \dots, x_n$">,
are given as a <EM>Variable Values Assignment</EM> (VVA)
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
(x_1 = b_1, x_2 = b_2, \dots, x_n = b_n)
\end{displaymath} -->


<IMG
 WIDTH="227" HEIGHT="31"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="\begin{displaymath}(x_1 = b_1, x_2 = b_2, \dots, x_n = b_n)
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
with 
<!-- MATH: $b_1, b_2, \dots, b_n \in \{0,1\}$ -->
<IMG
 WIDTH="161" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$b_1, b_2, \dots, b_n \in \{0,1\}$">.
For instance, (
<!-- MATH: $x_1 = 1, x_2 = 1 x_3 = 0$ -->
<I>x</I><SUB>1</SUB> = 1, <I>x</I><SUB>2</SUB> = 1 <I>x</I><SUB>3</SUB> = 0) would be a valid VVA for <I>n</I> = 3, resulting for the sample function above in the value 
<!-- MATH: $f(1, 1, 0) = 1 \wedge (1 \vee 0) = 1$ -->
<IMG
 WIDTH="204" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f(1, 1, 0) = 1 \wedge (1 \vee 0) = 1$">.
The corresponding paths are shown bold in the picture.

<P>
Your task is to write a program which takes an S-tree and some VVAs and computes

<!-- MATH: $f(x_1, x_2, \dots, x_n)$ -->
<IMG
 WIDTH="129" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f(x_1, x_2, \dots, x_n)$">
as described above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains the description of several S-trees with associated VVAs which you have to process. Each description begins with a line containing a single integer <I>n</I>, 
<!-- MATH: $1 \le n \le 7$ -->
<IMG
 WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$1 \le n \le 7$">,
the depth of the S-tree. This is followed by a line describing the variable ordering of the S-tree. The format of that line is <TT>x</TT><I>i</I><SUB>1</SUB> <TT>x</TT><I>i</I><SUB>2</SUB> ...<TT>x</TT><I>i</I><SUB><I>n</I></SUB>. (There will be exactly <I>n</I> different space-separated strings).
So, for <I>n</I> = 3 and the variable ordering 
<!-- MATH: $x_3, x_1, x_2$ -->
<I>x</I><SUB>3</SUB>, <I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, this line would look as follows:

<P>
<TT>x3 x1 x2</TT>

<P>
In the next line the distribution of 0's and 1's over the terminal nodes is given. There will be exactly 2<SUP><I>n</I></SUP> characters (each of which can be 0 or 1), followed by the new-line character.
The characters are given in the order in which they appear in the S-tree, the first character corresponds to the leftmost terminal node of the S-tree, the last one to its rightmost terminal node.

<P>
The next line contains a single integer <I>m</I>, the number of VVAs, followed by <I>m</I> lines describing them. Each of the <I>m</I> lines contains exactly <I>n</I> characters (each of which can be 0 or 1), followed by a new-line character. Regardless of the variable ordering of the S-tree, the first character always describes the value of <I>x</I><SUB>1</SUB>, the second character describes the value of <I>x</I><SUB>2</SUB>, and so on. So, the line

<P>
<TT>110</TT>

<P>
corresponds to the VVA (
<!-- MATH: $x_1 = 1, x_2 = 1, x_3 = 0$ -->
<I>x</I><SUB>1</SUB> = 1, <I>x</I><SUB>2</SUB> = 1, <I>x</I><SUB>3</SUB> = 0).

<P>
The input is terminated by a test case starting with <I>n</I> = 0. This test case should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each S-tree, output the line ``<TT>S-Tree #</TT><I>j</I><TT>:</TT>", where <I>j</I> is the number of the S-tree. Then print a line that contains the value of 
<!-- MATH: $f(x_1, x_2, \dots, x_n)$ -->
<IMG
 WIDTH="129" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/712img1.gif" 
 ALT="$f(x_1, x_2, \dots, x_n)$">
for each of the given <I>m</I> VVAs, where <I>f</I> is the
function defined by the S-tree.

<P>
Output a blank line after each test case.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
x1 x2 x3
00000111
4
000
010
111
110
3
x3 x1 x2
00010011
4
000
010
111
110
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
S-Tree #1:
0011

S-Tree #2:
0011
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
713||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Adding Reversed Numbers</TITLE>
<META NAME="description" CONTENT="Adding Reversed Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Adding Reversed Numbers</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Antique Comedians of Malidinesia prefer comedies to tragedies.
Unfortunately, most of the ancient plays are tragedies. Therefore the
dramatic advisor of ACM has decided to transfigure some tragedies into
comedies. Obviously, this work is very hard because the basic sense of the
play must be kept intact, although all the things change to their opposites.
For example the numbers: if any number appears in the tragedy, it must be
converted to its reversed form before being accepted into the comedy play.

<P>

<P>
<BR>
Reversed number is a number written in arabic numerals but the order of
digits is reversed. The first digit becomes last and vice versa. For
example, if the main hero had 1245 strawberries in the tragedy, he has 5421
of them now. Note that all the leading zeros are omitted. That means if the
number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21).
Also note that the reversed number never has any trailing zeros.

<P>

<P>
<BR>
ACM needs to calculate with reversed numbers.
Your task is to add two reversed numbers and output their
reversed sum. Of course, the result is not unique because any particular number 
is a reversed form of several numbers (e.g. 21 could be 12, 120 or 1200
before reversing). Thus we must assume that no zeros were lost by reversing
(e.g. assume that the original number was 12).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the
input contains only positive integer <I>N</I>. Then follow the cases.
Each case consists of exactly one line with two positive integers
separated by space. These are the reversed numbers you are to add.
Numbers will be at most 200 characters long.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line containing
only one integer - the reversed sum of two reversed numbers. 
Omit any leading zeros in the output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
24 1
4358 754
305 794
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
34
1998
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
714||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Copying Books</TITLE>
<META NAME="description" CONTENT="Copying Books">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Copying Books</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Before the invention of book-printing, it was very hard to
make a copy of a book. All the contents had to be re-written by hand by
so called <EM>scribers</EM>. The scriber had been given a book and after
several months he finished its copy. One of the most famous scribers lived
in the 15th century and his name was Xaverius Endricus Remius Ontius
Xendrianus (<EM>Xerox</EM>). Anyway, the work was very annoying and boring.
And the only way to speed it up was to hire more scribers.

<P>

<P>
<BR>
Once upon a time, there was a theater ensemble that wanted to play famous
Antique Tragedies. The scripts of these plays were divided into many books
and actors needed more copies of them, of course. So they hired many scribers
to make copies of these books. Imagine you have <I>m</I> books (numbered

<!-- MATH: $1, 2, \dots, m$ -->
<IMG
 WIDTH="84" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$1, 2, \dots, m$">)
that may have different number of pages
(
<!-- MATH: $p_1, p_2, \dots, p_m$ -->
<IMG
 WIDTH="105" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$p_1, p_2, \dots, p_m$">)
and you want to
make one copy of each of them. Your task is to divide these books among
<I>k</I> scribes, <IMG
 WIDTH="53" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$k \le m$">.
Each book can be assigned to a single scriber only, and every scriber
must get a continuous sequence of books. That means, there exists
an increasing succession of numbers 
<!-- MATH: $0 = b_0 <
b_1 < b_2, \dots < b_{k-1} \le b_k = m$ -->
<IMG
 WIDTH="290" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$0 = b_0 <
b_1 < b_2, \dots < b_{k-1} \le b_k = m$">
such that <I>i</I>-th scriber gets a sequence
of books with numbers between <I>b</I><SUB><I>i</I>-1</SUB>+1 and <I>b</I><SUB><I>i</I></SUB>.
The time needed to make a copy of all the books is determined by the scriber
who was assigned the most work. Therefore, our goal is to minimize the
maximum number of pages assigned to a single scriber. Your task is to find
the optimal assignment.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases.
Each case consists of exactly two lines. At the first line, there are 
two integers <I>m</I> and <I>k</I>, 
<!-- MATH: $1 \le k \le m \le 500$ -->
<IMG
 WIDTH="134" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$1 \le k \le m \le 500$">.
At the second line, there are integers 
<!-- MATH: $p_1, p_2, \dots p_m$ -->
<IMG
 WIDTH="97" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$p_1, p_2, \dots p_m$">
separated by spaces. All these values are positive and less than 10000000.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line.
The line must contain the input succession 
<!-- MATH: $p_1, p_2, \dots p_m$ -->
<IMG
 WIDTH="97" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/714img1.gif" 
 ALT="$p_1, p_2, \dots p_m$">
divided into exactly <I>k</I> parts such that the maximum sum of a single part should be as small as possible. Use the slash character (`<TT>/</TT>') to separate the parts.
There must be exactly one space character between any two successive numbers
and between the number and the slash.

<P>

<P>
<BR>
If there is more than one solution, print the one that minimizes the work
assigned to the first scriber, then to the second scriber etc. But each
scriber must be assigned at least one book.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
9 3
100 200 300 400 500 600 700 800 900
5 4
100 100 100 100 100
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
100 200 300 400 500 / 600 700 / 800 900
100 / 100 / 100 / 100 100
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
715||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Substitution Cipher</TITLE>
<META NAME="description" CONTENT="Substitution Cipher">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Substitution Cipher</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Antique Comedians of Malidinesia would like to play a new discovered
comedy of Aristofanes. Putting it on a stage should be a big surprise for
the audience so all the preparations must be kept absolutely secret.
The ACM director suspects one of his competitors of reading his
correspondece. To prevent other companies from revealing his secret, he
decided to use a substitution cipher in all the letters mentioning the
new play.

<P>

<P>
<BR>
Substitution cipher is defined by a substitution table assigning each
character of the substitution alphabet another character of the same alphabet.
The assignment is a bijection (to each character exactly
one character is assigned - not neccessary different).
The director is afraid of disclosing the substitution table and
therefore he changes it frequently. After each change he chooses a few
words from a dictionary by random, encrypts them and sends them together with
an encrypted message. The plain (i.e. non-encrypted) words
are sent by a secure channel, not by mail. The recipient of the message
can then compare plain and encrypted words and create
a new substitution table.

<P>

<P>
<BR>
Unfortunately, one of the ACM cipher specialists have found that this
system is sometimes insecure. Some messages can be decrypted by the rival
company even without knowing the plain words. The reason is
that when the director chooses the words from the dictionary and encrypts them, 
he never changes their order (the words in the dictionary are
lexicographically sorted). String 
<!-- MATH: $a_1a_2 \dots a_p$ -->
<IMG
 WIDTH="81" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/715img1.gif" 
 ALT="$a_1a_2 \dots a_p$">
is lexicografically smaller than 
<!-- MATH: $b_1b_2 \dots b_q$ -->
<IMG
 WIDTH="76" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/715img1.gif" 
 ALT="$b_1b_2 \dots b_q$">
if there exists an integer <I>i</I>, 
<!-- MATH: $i \le p, i \le q$ -->
<IMG
 WIDTH="88" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/715img1.gif" 
 ALT="$i \le p, i \le q$">,
such that <I>a</I><SUB><I>j</I></SUB>=<I>b</I><SUB><I>j</I></SUB> for each <I>j</I>, 
<!-- MATH: $1 \le j < i$ -->
<IMG
 WIDTH="74" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/715img1.gif" 
 ALT="$1 \le j < i$">
and <I>a</I><SUB><I>i</I></SUB> &lt; <I>b</I><SUB><I>i</I></SUB>.

<P>

<P>
<BR>
The director is interested in which of his messages could be
read by the rival company. You are to write a program to determine that.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases. 
The first line of each case contains only two positive integers
<I>A</I>, 
<!-- MATH: $1 \le A \le 26$ -->
<IMG
 WIDTH="90" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/715img1.gif" 
 ALT="$1 \le A \le 26$">,
and <I>K</I>, separated by
space. <I>A</I> determines the size of the substitution alphabet (the
substitution alphabet consists of the first <I>A</I> lowercase letters
of the english alphabet (<TT>a</TT>-<TT>z</TT>) and <I>K</I> is the number of encrypted
words. The plain words contain only the letters of the substitution
alphabet. The plain message can contain any symbol, but only the letters of
the substitution alphabet are encrypted. Then follow <I>K</I> lines,
each containing exactly one encrypted word. At the next line is encrypted
message.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line. If it is possible
to decrypt the message uniquely, print the
decrypted message. Otherwise, print the sentence
`<TT>Message cannot be decrypted.</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
5 6
cebdbac
cac
ecd
dca
aba
bac
cedab
4 4
cca
cad
aac
bca
bdac
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
abcde
Message cannot be decrypted.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
716||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Commedia dell' arte</TITLE>
<META NAME="description" CONTENT="Commedia dell' arte">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Commedia dell' arte</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
So called <EM>commedia dell' arte</EM> is a theater genre first
played at Italy in the beginning of the sixteenth century. It was inspired
with the Roman Theater. The play had no fixed script and the actors (also
called <EM>performers</EM>) had to improvise a lot. There were only a simple
directions by the author like "enter the stage and make something funny" or
``everyone comes on stage and everything is resolved happily". You can see it
might be very interesting to play the commedia dell' arte. Therefore
the ACM want to put a new play on a stage, which was completely unknown
before. The main hero has a puzzle that takes a very important role in the
play and gives an opportunity of many improvisations.

<P>

<P>
<BR>
The puzzle is the worldwide known <EM>Lloyd's Fifteen Puzzle</EM>. ACM wants
to make the play more interesting so they want to replace the
``standard" puzzle with a three-dimensional one. The puzzle consists
of a cube containing <I>M</I><SUP>3</SUP> slots. Each slot except one
contains a cubic tile (one position is free).
The tiles are numbered from 1 to <I>M</I><SUP>3</SUP>-1.
The goal of the puzzle is to get the original ordering of
the tiles after they have been randomly reshuffled.  The only allowed
moves are sliding a neighbouring tile into the free position along one
of the three principal directions. Original configuration is when slot
with coordinates (<I>x</I>,<I>y</I>,<I>z</I>) from 
<!-- MATH: $\{0, \dots ,M-1\}^3$ -->
<IMG
 WIDTH="126" HEIGHT="37" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/716img1.gif" 
 ALT="$\{0, \dots ,M-1\}^3$">
contains tile number 
<!-- MATH: $z.M^2+y.M+x+1$ -->
<I>z</I>.<I>M</I><SUP>2</SUP>+<I>y</I>.<I>M</I>+<I>x</I>+1 and slot

<!-- MATH: $(M-1,M-1,M-1)$ -->
(<I>M</I>-1,<I>M</I>-1,<I>M</I>-1) is free.

<P>

<P>
<BR>
Your are to write a program to determine whether it is possible 
to solve the puzzle or not.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases. The
first line of each case contains only one integer <I>M</I>, 
<!-- MATH: $1 \le
M \le 100$ -->
<IMG
 WIDTH="105" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/716img1.gif" 
 ALT="$1 \le
M \le 100$">.
It is the size of 3D puzzle cube.  Then follow
<I>M</I> lines, each contains exactly <I>M</I><SUP>2</SUP> numbers
on the tiles for one layer. First is the layer on the top of the cube and
the last one on the bottom. In each layer numbers are arranged from the left
top corner linewise to the right bottom corner of the layer. In other words,
slot with coordinates (<I>x</I>,<I>y</I>,<I>z</I>) is described by the
(<I>x</I>+<I>M</I>.<I>y</I>+1)-th number on the (<I>z</I>+1)-th line.
Numbers are separated by space.  Number <TT>0</TT> means free position.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line. 
If the original configuration can be reached by sliding the tiles,
print the sentence `<TT>Puzzle can be solved.</TT>'. Otherwise, print the
sentence `<TT>Puzzle is unsolvable.</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
1 2 3 4
5 7 6 0
2
2 1 3 5
4 6 0 7
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Puzzle is unsolvable.
Puzzle can be solved.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
717||||||false||||||
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="bdf">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <title>Calculating Expressions on Turing Machine</title>
</head>
<body>
&nbsp;
<br>&nbsp;
<br>&nbsp;
<center><table BGCOLOR="#0060F0" >
<tr>
<td><a NAME="SECTION0001000000000000000000"></a><b><font color="#C0FFFF"><font size=+2>
&nbsp;Calculating Expressions on Turing Machine&nbsp;</font></font></b></td>
</tr>
</table></center>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Turing Machine</A>&nbsp;</FONT>
</H2>
<i>Turing Machine</i> (TM) was defined by mathematician Alan Turing in
1936. You probably expect all the Contest problems to be related to the
same topic, so you may now wonder what the Turing Machine has in common
with the Antique Theatre. The fact is that Alan Turing had a friend called
Fred. And Fred's Grandmother was keen on Antique Tragedies. So we think
it is a good idea to give you this problem as a remembrance of Alan Turing.
<p>Let us describe one particular TM: TM consists of two-way potentially
infinite <i>tape</i>, read/write <i>head</i> and a <i>finite automaton</i>
control unit. The tape is an infinite one-dimensional sequence of <i>fields</i>.
Each field contains one symbol of an <i>alphabet</i> <i>Sigma = {~,0,1,...,M}</i>,
where '~' is a special <i>blank</i> symbol. At each moment, there is just
a finite number of fields not containing the blank symbol.
<p>The head is a device capable at each step of reading one symbol from
the tape field above which it is positioned, writing another symbol on
its place and moving one field to the left or right. As the tape is two-way
potentially infinite, the movement is always possible.
<p>The control unit drives the head. At each time, it is in one state taken
from <i>Gamma = {0,1,...,N}</i>. It starts in state <i>0</i>. At each step
the control unit considers its actual state <i>gamma</i> and the symbol
under the head <i>sigma</i>. This information determines the symbol to
be written on the tape <i>sigma'</i> in place of <i>sigma</i>, the next
state to go <i>gamma'</i> and the direction <i>delta</i> (<tt>R</tt> or
<tt>L</tt>
for right or left) for the movement of the head.
<p>TM description (TMD) is a triple <i>(M,N,P)</i> where <i>P</i> is a
set of rules. Each rule is a quintuple <i>(gamma, sigma, sigma', gamma',
delta)</i> describing the behaviour of the machine in a particular situation
as described in the preceding paragraph. If no rule exists for the current
situation, the machine stops, i.e. the calculation is finished. Conflicting
(with the same <i>gamma</i> and <i>sigma</i>) rules may not exist.
<p>In the text form, TMD starts with a line containing positive integers
<i>M</i>
and <i>N</i>. Then there is an arbitrary number of lines containing each
one rule. The rule is described as <i>gamma sigma sigma' gamma' delta</i>,
where <i>gamma, sigma, sigma'</i> and <i>gamma'</i> are integers ('~' should
be coded as <tt>-1</tt> and <i>delta from {<tt>R</tt>, <tt>L</tt>}</i>,
the symbols are separated by spaces. After the last rule, a line immediately
follows which contains only the symbol '<tt>-</tt>'.
<p>When the machine starts there will be a finite string of symbols from
<i>Sigma</i>
starting under the head position and continuing to the right. All the remaining
fields on the tape are blank.
<p>Theoretically, TM is equivalent to any general purpose computer. We
ask you to at least partly demonstrate it --- you are to write a program
generating TMD evaluating arbitrary Turing arithmetic expression (TAE)
for any input values. TAE is defined in the following section.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Turing Arithmetic Expression</A>&nbsp;</FONT>
</H2>
TAE is defined by the following grammar:
<ul>
<li>
<i>TAE</i> -> <i>expr</i></li>

<li>
<i>expr</i> -> <i>factor</i> | <i>expr</i> <tt>+</tt> <i>expr</i></li>

<li>
<i>factor</i> -> <tt>(</tt> <i>expr</i> <tt>)</tt> | <i>factor</i> <tt>*</tt><i>factor</i>
| <i>variable</i></li>

<li>
<i>variable</i> -> <tt>1</tt> | <tt>2</tt> | ... | <tt>9</tt></li>
</ul>
The operators <tt>+</tt> resp. <tt>*</tt> operators stand for integer addition
resp. multiplication modulo 10 (e.g. <i>238*17=6</i>); multiplication takes
precedence over addition. The syntactic element <i>variable</i> denotes
the value of the first, second, etc. up to ninth integer written on the
tape of the TM at start time.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Task</A>&nbsp;</FONT>
</H2>
Write a program that for each TAE outputs a TMD evaluating the TAE for
any valid contents of the tape. A valid contents of the tape is a sequence
of at most nine non-negative integers written left to write (most significant
digit first) in a decimal notation using symbols <tt>0</tt>, ..., <tt>9</tt>
and separated by one blank symbol. All the rest of the tape is blank, the
head starts at the most significant digit of the first number. The magnitude
of the integers is not specified. Example of a valid tape (underline indicates
head position):
<center><pre>... ~ ~ ~ ~ <u>1</u> 2 3 ~ 4 7 ~ 1 1 ~ ~ ~ ~ ...</pre></center>
When the TM finished processing the tape should contain the result of the
computation starting with the most significant digit under the head and
continuing to the right until the first blank. No leading zeros are allowed.
The contents of the rest of the tape is insignificant. For example, if
the TAE was <tt>(1+3)*2</tt> and the tape contents as above, the correct
answer would be <i>(123+11).47 mod 10 = 8</i>. The correct tape contents
would be
<center><pre>x x x <u>8</u> ~ x x x</pre></center>
where <i>x</i> stands for any symbol.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input Specification</A>&nbsp;</FONT>
</H2>
The input consists of <i>N</i> cases. The first line of the input contains
only positive integer <i>N</i>. Then follow the cases. Each case is described
by one line, containing one valid TAE. The line is at most 1000 characters
long, does not contain any characters other than <tt>0</tt>, <tt>1</tt>,
..., <tt>9</tt>, <tt>(</tt>, <tt>)</tt>, <tt>*</tt> and <tt>+</tt>, and
is terminated by the newline character.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output Specification</A>&nbsp;</FONT>
</H2>
For each case, print valid TMD that evaluates the TAE for any valid tape
contents. You can assume there will be always at least as many integers
on the tape, as mentioned in the TAE.
<p><i>Remark:</i> For this problem, 'Presentation error' is returned if
your program did not generate a valid TMD, while 'Wrong answer' means that
the generated TMD was valid but the corresponding TM did not produce the
correct output.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>2
1
2</pre>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
9 2
0 1 1 1 R
0 2 2 1 R
0 3 3 1 R
0 4 4 1 R
0 5 5 1 R
0 6 6 1 R
0 7 7 1 R
0 8 8 1 R
0 9 9 1 R
1 1 1 2 L
1 2 2 2 L
1 3 3 2 L
1 4 4 2 L
1 5 5 2 L
1 6 6 2 L
1 7 7 2 L
1 8 8 2 L
1 9 9 2 L
1 -1 -1 2 L
-
9 1
0 1 1 0 R
0 2 2 0 R
0 3 3 0 R
0 4 4 0 R
0 5 5 0 R
0 6 6 0 R
0 7 7 0 R
0 8 8 0 R
0 9 9 0 R
0 -1 -1 1 R
-
</PRE>
</body>
</html>

______________________________________________________
718||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Skyscraper Floors</TITLE>
<META NAME="description" CONTENT="Skyscraper Floors">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Skyscraper Floors</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
What a great idea it is to build skyscrapers! Using not too
large area of land, which is very expensive in many cities today, the
skyscrapers offer an extremely large utility area for flats or offices. 
The only disadvantage is that it takes too long to get to the upper 
floors. Of course these skyscrapers have to be equiped not only 
with a stairway but also with several elevators. But even using 
ordinary elevators is very slow. Just imagine you want to get from 
the very top floor to the base floor and many other people on other 
floors want the same. As a result the elevator stops on almost every 
floor and since its capacity is limited and the elevator is already 
full from the upper floors, most stops are useless and just cause 
a delay. If there are more elevators in the skyscrapers, this problem 
is a little bit eliminated but still not completely. Most people just 
press all the buttons of all the elevators and then take the first 
one so that all elevators will stop on the floor anyway.

<P>

<P>
<BR>
However, the solution exists as we shall see. The Antique Comedians of
Midilesia headquarters reside in a skyscraper with a very special
elevator system. The elevators do not stop on every floor but only on
every <I>X</I>-th floor.
Moreover each elevator can go just to a certain floor <I>Y</I>
(called starting floor) and cannot go any lower. There is one
high-capacity elevator which can stop on every elevator's starting
floor.

<P>

<P>
<BR>
The ACM has a big problem. The headquarters should be moved to
another office this week, possibly on a different floor. 
Unfortunately, the high-capacity elevator is
out of order right now so it is not always possible to go to the base
floor. One piece of furniture cannot be moved using the stairway because it
is too large to pass through the stairway door. You are to write
a program that decides whether it is possible to move a piece of
furniture from the original office to the other.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line contains only
one positive integer <I>N</I>. Then follow the cases.
Each case starts with a line containing four integers 
<I>F</I>, <I>E</I>, <I>A</I>, <I>B</I>, where <I>F</I>,

<!-- MATH: $1 \le F < 50000000$ -->
<IMG
 WIDTH="143" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/718img1.gif" 
 ALT="$1 \le F < 50000000$">
determines the number of floors in the
skyscraper (this means that there are floors 0 to
<I>F</I>-1), <I>E</I>, 
<!-- MATH: $0 < E < 100$ -->
0 &lt; <I>E</I> &lt; 100 is the number of elevators and
<I>A</I>, <I>B</I>, 
<!-- MATH: $0 \le A,B < F$ -->
<IMG
 WIDTH="108" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/718img1.gif" 
 ALT="$0 \le A,B < F$">
are numbers of the
two floors between which the piece of furniture should be moved. Then
follow <I>E</I> lines. Each of them contains description of one elevator.
There are exactly two integers <I>X</I> and <I>Y</I>, <I>X</I> &gt; 0, <IMG
 WIDTH="50" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/718img1.gif" 
 ALT="$Y \ge 0$">
at
each line. <I>Y</I> determines, that the elevator starts on the
<I>Y</I>-th floor and <I>X</I> determines, that it stops on every
<I>X</I>-th floor, e.g. for <I>X</I> = 3, <I>Y</I> = 7 the
elevator stops on floors 7, 10, 13, 16, etc.).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line.
If floor <I>B</I> is reachable from floor <I>A</I> not using the
stairway, print the sentence
`<TT>It is possible to move the furniture.</TT>', otherwise print 
`<TT>The furniture cannot be moved.</TT>'.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
22 4 0 6
3 2
4 7
13 6
10 0
1000 2 500 777
2 0
2 1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
It is possible to move the furniture.
The furniture cannot be moved.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
719||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Glass Beads</TITLE>
<META NAME="description" CONTENT="Glass Beads">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Glass Beads</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Once upon a time there was a famous actress. As you may expect, she played
mostly Antique Comedies most of all. All the people loved her. But she was not
interested in the crowds. Her big hobby were beads of any kind. Many bead
makers were working for her and they manufactured new necklaces and
bracelets every day. One day she called her main <EM>Inspector of Bead
Makers</EM> (<EM>IBM</EM>) and told him she wanted a very long and special
necklace.

<P>

<P>
<BR>
The necklace should be made of glass beads of different sizes connected
to each other but without any thread running through the beads, so that
means the beads can be disconnected at any point. The actress chose the
succession of beads she wants to have and the IBM promised to make the
necklace. But then he realized a problem. The joint between two neighbouring
beads is not very robust so it is possible that the necklace will get torn
by its own weight. The situation becomes even worse when the necklace is
disjoined. Moreover, the point of disconnection is very important. If there
are small beads at the beginning, the possibility of tearing is much higher
than if there were large beads. IBM wants to test the robustness of a
necklace so he needs a program that will be able to determine the worst
possible point of disjoining the beads.

<P>

<P>
<BR>
The description of the necklace is a string 
<!-- MATH: $A =a_1a_2 \dots a_m$ -->
<IMG
 WIDTH="123" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$A =a_1a_2 \dots a_m$">
specifying sizes of the particular beads, where the last character
<I>a</I><SUB><I>m</I></SUB> is considered to precede character <I>a</I><SUB>1</SUB> in circular fashion. 

<P>

<P>
<BR>
The disjoint point <I>i</I> is said to be worse than the disjoint
point <I>j</I> if and only if the string 
<!-- MATH: $a_ia_{i+1} \dots a_na_1 \dots a_{i-1}$ -->
<IMG
 WIDTH="170" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$a_ia_{i+1} \dots a_na_1 \dots a_{i-1}$">
is lexicografically smaller than the string 
<!-- MATH: $a_ja_{j+1} \dots a_na_1 \dots a_{j-1}$ -->
<IMG
 WIDTH="175" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$a_ja_{j+1} \dots a_na_1 \dots a_{j-1}$">.
String 
<!-- MATH: $a_1a_2 \dots a_n$ -->
<IMG
 WIDTH="82" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$a_1a_2 \dots a_n$">
is lexicografically smaller than the string

<!-- MATH: $b_1b_2 \dots b_n$ -->
<IMG
 WIDTH="77" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$b_1b_2 \dots b_n$">
if and only if there exists an integer 
<!-- MATH: $i, i \le n$ -->
<IMG
 WIDTH="58" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$i, i \le n$">,
so that
<I>a</I><SUB><I>j</I></SUB>=<I>b</I><SUB><I>j</I></SUB>, for each 
<!-- MATH: $j, 1 \le j < i$ -->
<IMG
 WIDTH="89" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$j, 1 \le j < i$">
and <I>a</I><SUB><I>i</I></SUB> &lt; <I>b</I><SUB><I>i</I></SUB>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases. 
Each case consists of exactly one line containing necklace description.
Maximal length of each description is 10000 characters. 
Each bead is represented by a lower-case character of 
the english alphabet (<TT>a</TT>-<TT>z</TT>), where 
<!-- MATH: $a < b \dots < z$ -->
<IMG
 WIDTH="100" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/719img1.gif" 
 ALT="$a < b \dots < z$">.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print exactly one line containing
only one integer - number of the
bead which is the first at the worst possible disjoining, i.e. such
<I>i</I>, that the string <I>A</I>[<I>i</I>] is lexicographically smallest
among all the <I>n</I> possible disjoinings of a necklace. If there are
more than one solution, print the one with the lowest <I>i</I>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
helloworld
amandamanda
dontcallmebfu
aaabaaa
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
10
11
6
5
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
720||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Hares and Foxes</TITLE>
<META NAME="description" CONTENT="Hares and Foxes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Hares and Foxes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Antique Comedians of Malidinesia play an interesting comedy
where many animals occur. Because they want their plays to be as true as
possible, a specialist studies the behaviour of various animals.
Recently, he is interested in a binary dynamic ecological
system hares-foxes (SHF). As a part of this project, you are asked to design
and implement intelligent automatic target evaluation simulator
(IATES) for this system. The behaviour of the SHF follows so
called <EM>standard model</EM>, described by the following set of
difference equations.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">
<IMG
 WIDTH="162" HEIGHT="58"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="\begin{eqnarray*}h_{y+1} & = & a.h_y - b.f_y \\
f_{y+1} & = & c.f_y + d.h_y
\end{eqnarray*}">
</DIV><P></P>
<BR CLEAR="ALL">
where <I>h</I><SUB><I>y</I></SUB> resp. <I>f</I><SUB><I>y</I></SUB> represent the difference of the
number of hares resp. foxes in year<SUB><I>y</I></SUB> and the reference count
determined at the beginning of the experiment. The units of <I>h</I><SUB><I>y</I></SUB>
and <I>f</I><SUB><I>y</I></SUB> are unknown. Therefore, <I>h</I><SUB><I>y</I></SUB> and <I>f</I><SUB><I>y</I></SUB> are to be treated as real numbers.
Your task is to write a program to determine the long term evolution of SHF.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases.
Each case consists of six real numbers 
<!-- MATH: $a, b, c, d,
h_1998$ -->
<I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>,
<I>h</I><SUB>1</SUB>998 and <I>f</I><SUB>1</SUB>998,
written in this order on three lines, two numbers per line, separated
by one or more spaces. The numbers are given in the classical format,
i.e. optional sign, sequence of digits, optional dot and optional
sequence of digits. The text form of a number
does not exceed 10 characters. Each case is followed by one empty line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print one of the following sentences:

<P>
<UL>
<LI>`<TT>Ecological balance will develop.</TT>' -
if after sufficiently long time the population of both hares and foxes 
approaches the reference count with an arbitrary a priori given
precision, i.e. 
<!-- MATH: $\lim h_y=0$ -->
<IMG
 WIDTH="82" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim h_y=0$">
and 
<!-- MATH: $\lim f_y=0$ -->
<IMG
 WIDTH="80" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim f_y=0$">.

<P>
<LI>`<TT>Hares will die out while foxes will overgrow.</TT>' -
if after sufficiently long time the population of hares resp. foxes 
falls under resp. exceeds any a priori given threshold, i.e.

<!-- MATH: $\lim h_y=-infinity$ -->
<IMG
 WIDTH="151" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim h_y=-infinity$">
and 
<!-- MATH: $\lim f_y=+infinity$ -->
<IMG
 WIDTH="150" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim f_y=+infinity$">.

<P>
<LI>`<TT>Hares will overgrow while foxes will die out.</TT>' -
if after sufficiently long time the population of foxes resp. hares
falls under resp. exceeds any a priori given threshold, i.e.

<!-- MATH: $\lim h_y=+infinity$ -->
<IMG
 WIDTH="151" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim h_y=+infinity$">
and 
<!-- MATH: $\lim f_y=-infinity$ -->
<IMG
 WIDTH="150" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim f_y=-infinity$">.

<P>
<LI>`<TT>Both hares and foxes will die out.</TT>' -
if after sufficiently long time the population of both hares and foxes
falls under any a priori given threshold, i.e.

<!-- MATH: $\lim h_y=-infinity$ -->
<IMG
 WIDTH="151" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim h_y=-infinity$">
and 
<!-- MATH: $\lim f_y=-infinity$ -->
<IMG
 WIDTH="150" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim f_y=-infinity$">.

<P>
<LI>`<TT>Both hares and foxes will overgrow.</TT>' -
if after sufficiently long time the population of both hares and foxes
exceeds any a priori given threshold, i.e.

<!-- MATH: $\lim h_y=+infinity$ -->
<IMG
 WIDTH="151" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim h_y=+infinity$">
and 
<!-- MATH: $\lim f_y=+infinity$ -->
<IMG
 WIDTH="150" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/720img1.gif" 
 ALT="$\lim f_y=+infinity$">.

<P>
<LI>`<TT>Chaos will develop.</TT>' - if none of the above mentioned 
description fits.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 0.5
0.5 0.6
2 3

0.1 1 
2 0.1
1 1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Both hares and foxes will overgrow.
Hares will die out while foxes will overgrow.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
721||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Invitation Cards</TITLE>
<META NAME="description" CONTENT="Invitation Cards">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Invitation Cards</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In the age of television, not many people attend theater
performances. Antique Comedians of Malidinesia are aware of this fact. They
want to propagate theater and, most of all, Antique Comedies. They have
printed invitation cards with all the necessary information and with the
programme. A lot of students were hired to distribute these invitations
among the people. Each student volunteer has assigned exactly one bus stop
and he or she stays there the whole day and gives invitation to people
travelling by bus. A special course was taken where students learned
how to influence people and what is the difference between influencing
and robbery.

<P>

<P>
<BR>
The transport system is very special: all lines are
unidirectional and connect exactly two stops. Buses leave
the originating stop with passangers each half an hour. After reaching
the destination stop they return empty to the originating stop,
where they wait until the next full half an hour, e.g. X:00 or
X:30, where `X' denotes the hour. The fee for transport between two
stops is given by special tables and is payable on the spot. The
lines are planned in such a way, that each round trip (i.e. a journey
starting and finishing at the same stop) passes through a <EM>Central
Checkpoint Stop</EM> (CCS) where each passenger has to pass a thorough
check including body scan.

<P>

<P>
<BR>
All the ACM student members leave the CCS each morning. Each volunteer is
to move to one predetermined stop to invite passengers. There are as many
volunteers as stops. At the end of the day, all students travel back to CCS.
You are to write a computer program that helps ACM to minimize the amount of
money to pay every day for the transport of their employees.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of <I>N</I> cases. The first line of the input
contains only positive integer <I>N</I>. Then follow the cases.
Each case begins with a line containing exactly two integers
<I>P</I> and <I>Q</I>, 
<!-- MATH: $1 \le P,Q \le 1000000$ -->
<IMG
 WIDTH="154" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/721img1.gif" 
 ALT="$1 \le P,Q \le 1000000$">.
<I>P</I> is the number of stops including CCS and <I>Q</I> the
number of bus lines. Then there are <I>Q</I> lines, each describing one
bus line. Each of the lines contains exactly three numbers - the originating
stop, the destination stop and the price. The CCS is designated by
number 1. Prices are positive integers the sum of which is
smaller than 
<!-- MATH: $1000000000$ -->
1000000000. You can also assume it is always
possible to get from any stop to any other stop.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, print one line containing the minimum amount of
money to be paid each day by ACM for the travel costs of its volunteers.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2 2
1 2 13
2 1 33
4 6
1 2 10
2 1 60
1 3 20
3 4 10
2 4 5
4 1 50
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
46
210
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-15</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
722||||||false||||||
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <title>Problem 1 - Lakes</title>
</head>
<body>

<h1>
</h1>

<center><table BGCOLOR="#0060F0" >
<tr>
<td><a NAME="SECTION0001000000000000000000"></a><b><font color="#C0FFFF"><font size=+2>
&nbsp;Lakes&nbsp;</font></font></b></td>
</tr>
</table></center>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
The Problem</A>&nbsp;</FONT>
</H2>
A region of two-dimensional space is divided by a grid into uniform square
cells, each of which represents either "land" or "water".
<p>We are interested in finding the area of a region of horizontally or
vertically connected "water" cells totally enclosed by a boundary of "land"
cells, given the location of a "water" cell in the region.
<p>Choose a representation, such as a two-dimensional array, in which the
basic operations available are to determine whether a cell is "land" or
"water", and to move from a cell to any of its neighbors. Assume that you
are given the location of an arbitrary "water" cell in the region whose
area is required.
<p>Since the area of the "water" region is defined to be the number of
cells in it, the most straightforward way to compute the area is to simply
count the number of cells in it. Write a program to do this.
<p>The following restrictions and assumptions apply:
<ul>
<li>
the grid, G[1..M,1..N], is rectangular and is no larger than 99 by 99.</li>

<li>
an input of 0 (zero) represents water.</li>

<li>
an input of 1 represents land.</li>

<li>
there may be more than one body of water.</li>

<li>
the input is assumed to be surrounded by a "border" of land (1's)</li>
</ul>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input is an integer <b>M</b>, then a blank line followed by <b>M</b>
datasets. There is a blank line between datasets.

<table>
<tr>
<td VALIGN=TOP>line 1 -&nbsp;</td>

<td>two integers (i,j) separated by 1 blank which represents the position
(row, column) of a "water" cell in the region whose area is to be determined.
The input integers will be in character form; two non-blank characters
followed by a blank followed by two more characters with the characters
in [0, 1, ..., 9]</td>
</tr>

<tr>
<td VALIGN=TOP>line 2 -&nbsp;</td>

<td>the first row of the grid (&lt;=99 characters, all 1's or 0's) where
the first character represents G[1,1], the second G[1,2], the third G[1,3],
...</td>
</tr>

<tr>
<td VALIGN=TOP>line 3 -&nbsp;</td>

<td>the second row of the grid (&lt;=99 characters, all 1's or 0's) where
the first character represents G[2,1], the second G[2,2], the third G[2,3],
...</td>
</tr>

<tr>
<td COLSPAN="2">remaining lines for the remaining rows of the grid</td>
</tr>
</table>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, display on a line of its own one integer which is the area of the enclosed area
of water. Print a blank line between datasets.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 02 01
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1001101
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0011111
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0001001
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1100011
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1111111
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1100110
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1110111</pre>

<h4>
Interpretation</h4>

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 012345678
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 LLLLLLLLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 LLWWLLWLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2 LWWLLLLLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3 LWWWLWWLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4 LLLWWWLLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5 LLLLLLLLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6 LLLWWLLWL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7 LLLLWLLLL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 LLLLLLLLL</pre>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12</pre>

</body>
</html>

______________________________________________________
723||||||false||||||
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <title>Problem 2 - Comment Removal</title>
</head>
<body>

<h1>
</h1>

<center><table BGCOLOR="#0060F0" >
<tr>
<td><a NAME="SECTION0001000000000000000000"></a><b><font color="#C0FFFF"><font size=+2>
&nbsp;Comment removal&nbsp;</font></font></b></td>
</tr>
</table></center>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
The Problem</A>&nbsp;</FONT>
</H2>
Given an arbitrary, syntactically correct Pascal source program, you are to compress it according to the following guidelines,
applied in the order listed:
<ul>
<li>
Replace all sequences of blanks, except those within a string constant,
with a single blank. Recall that string constants are delimited by single
quotes ('), a string constant must contain at least one character, and
that two consecutive single quotes ('') represent the single quote character.</li>

<p><br>e.g.,
<dir>the following are string constants
<br>'this is a string constant'
<br>'don''t you see the fun here?'</dir>

<li>
eliminate all comments - comments start with (* and are terminated with
*) or they start with { and are terminated with }. Remove the entire comment
including the end markers (i.e., (*, *), { and }).</li>

<p><br>e.g.,
<dir>the following are comments:
<br>(* here is a great comment *)
<br>{ and here is a somewhat
<dir>longer one }</dir>
</dir>

<li>
eliminate any totally blank lines (i.e., any lines, after removing any
comments, which consist only of blanks and end-of-line characters - if
when printed, or displayed, a blank line would occur, it should be eliminated.)
You can assume there will be no tabs or other unusual non-printing characters
within the input.</li>
</ul>
Compress the input file using the rules
above. The results should result in a syntactically valid Pascal program;
albeit it in a somewhat less stylish form.

<p><b>Any presentation mismatch will be judged as "Wrong Answer".</b>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<pre>Program Test (input, output);
{ this is a great program }

Var&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X, Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;

&nbsp; begin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; readln (X, Y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writeln (X,&nbsp;&nbsp; '&nbsp; This is Y&nbsp;&nbsp; ',&nbsp;&nbsp;&nbsp; Y,&nbsp;&nbsp;&nbsp;&nbsp; 'Hi!')&nbsp;&nbsp; ;
&nbsp; end.</pre>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>Program Test (input, output);
Var X, Y : integer ;
&nbsp;begin
&nbsp;readln (X, Y);
&nbsp;writeln (X, '&nbsp; This is Y&nbsp;&nbsp; ', Y, 'Hi!') ;
&nbsp;end.

</pre>

</body>
</html>

______________________________________________________
724||||||false||||||
<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]">
   <title>Problem 3 - Reverse</title>
</head>
<body>

<h1>
</h1>

<center><table BGCOLOR="#0060F0" >
<tr>
<td><a NAME="SECTION0001000000000000000000"></a><b><font color="#C0FFFF"><font size=+2>
&nbsp;Reverse&nbsp;</font></font></b></td>
</tr>
</table></center>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
The Problem</A>&nbsp;</FONT>
</H2>
Write a program which has no input (i.e., contains no input statement -
read, readln, scanf, fget, ...) and displays a copy of its source program
code in order immediately followed by its source code in reverse. The resulting
output will be a palindrome, except that carriage-return line-feed sequences
are not reversed.
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Abstract example (*** Hypothetical Input ***)</A>&nbsp;</FONT>
</H2>

<pre>#include &lt;stdio.h>

int used[10] = {0};
long denominator = 0;

/* Here's a Strange one */
main()
{
&nbsp;&nbsp; bla;
&nbsp;&nbsp; bla;
&nbsp;&nbsp; bla;

&nbsp;&nbsp; exit (0);
}</pre>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<pre>int used[10] = {0};
long denominator = 0;

/* Here's a Strange one */
main()
{
&nbsp;&nbsp; bla;
&nbsp;&nbsp; bla;
&nbsp;&nbsp; bla;

&nbsp;&nbsp; exit (0);
}
}
;)0( tixe

;alb
;alb
;alb
{
)(niam
/* eno egnartS a s'ereH */

;0 = rotanimoned gnol
;}0{ = ]01[desu tni

>h.oidts&lt; edulcni#</pre>

</body>
</html>

______________________________________________________
725||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Division</TITLE>
<META NAME="description" CONTENT="Division">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Division</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Write a program that finds and displays all pairs of 5-digit numbers that
between them use the digits <TT>0</TT> through <TT>9</TT> once each, such that the
first number divided by the second is equal to an integer <I>N</I>, where 
<!-- MATH: $2
\le N \le 79$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/725img1.gif" 
 ALT="$2
\le N \le 79$">.
That is,

<P>

<P>
<BR>

<TT>abcde / fghij =</TT> <I>N</I>

<P>
where each letter represents a different digit.  The first digit of one of
the numerals is allowed to be zero.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Each line of the input file consists of a valid integer <I>N</I>.  An input of zero is to terminate
the program.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Your program have to display ALL qualifying pairs of numerals, sorted by
increasing numerator (and, of course, denominator).

<P>
Your output should be in the following general form:

<P>

<P>
<BR>

<TT>xxxxx / xxxxx =</TT> <I>N</I>

<P>

<TT>xxxxx / xxxxx =</TT> <I>N</I>

<P>
.

<P>
.

<P>

<P>
<BR>
In case there are no pairs of numerals satisfying the condition, you must
write ``<TT>There are no solutions for </TT><I>N</I><TT>.</TT>". Separate the output for two
different values of <I>N</I> by a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
61
62
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
There are no solutions for 61.

79546 / 01283 = 62
94736 / 01528 = 62
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
726||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Decode</TITLE>
<META NAME="description" CONTENT="Decode">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Decode</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Any one-to-one mapping <I>f</I> of the alphabet to itself can be used to encode text
by replacing each occurence of letter <TT>c</TT> with <I>f</I>(<TT>c</TT>).

<P>

<P>
<BR>

<PRE><TT>
Example: One such mapping could be the mapping of a letter to three positionsbeyond the letter
		in the alphabet:  For example,  <TT>a-&gt;d</TT>, <TT>b-&gt;e</TT>, <TT>c-&gt;f</TT>, <TT>d-&gt;g</TT>, ... etc. 
&nbsp;
		 natural language: <TT>The car is blue</TT>. 

<P>
encoded message:  <TT>Wkh fdu lv eoxh</TT>.
</TT></PRE>

<P>
The mapping that defines the encoding is one-to-one.  That is, two
different letters do not map to the same letter of the alphabet (<TT>a-&gt;x</TT> and
<TT>t-&gt;x</TT> is impossible).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
The input file contains two messages separated by a blank line. We will
refer to them as `<EM>KNOWN</EM>' and `<EM>ENCODED</EM>' messages.  This file
contains an encoded message. 

<P>

<P>
<BR>
You are to write a program that decodes the
message in the file according to the following guidelines.

<P>
<DL COMPACT>
<DT>1.
<DD>The input message <EM>KNOWN</EM> contains a natural language text that
is       written by the same person that wrote the encoded message in
<EM>ENCODED</EM>.  It is to be assumed that the person uses letters of
      the alphabet with the same relative frequency from document to
      document.  Read <EM>KNOWN</EM> and count the number of times each letter
      of the alphabet occurs.  Order the letters of the alphabet in such a
      way that the first in the ordering is the most frequently used letter
      in <EM>KNOWN</EM> and the last in the list is the least frequently used
      letter in <EM>KNOWN</EM>.  Break all ties for letters that occur at the
      same frequency alphabetically.  That is, if both <TT>p</TT> and <TT>w</TT>
appeared in       <EM>KNOWN</EM> exactly 12 times each, then <TT>p</TT> would
precede <TT>w</TT> in the       ordered list.

<P>
<DT>2.
<DD>Read <EM>ENCODED</EM> and count the number of times each encoded letter
      of the alphabet occurs.  Order the letters in such a way that the
      first in the ordering is the most frequently used letter in
      <EM>ENCODED</EM> and the last in the list is the least frequently used
      letter in <EM>ENCODED</EM>.  Again, break all ties alphabetically.

<P>
<DT>3.
<DD>The process for counting the frequencies with which letters occur is
      to be case insensitive.  That is, the appearance of the letter <TT>W</TT>
      followed by <TT>w</TT> would account for two occurences of that letter.

<P>
<DT>4.
<DD>The counting process is only to count letters of the alphabet, not
      other characters.

<P>
<DT>5.
<DD>The program is to assume that the most frequently used letter in
      <EM>KNOWN</EM> maps to the most frequently used letter in <EM>ENCODED</EM>;
      the second most frequently used letter in <EM>KNOWN</EM> maps to the
      second most frequently used letter in <EM>ENCODED</EM>; ... etc.

<P>
<DT>6.
<DD>Your program is to use knowledge of the mapping described in
      specification 5 to decode the message and put the decoded message in
      the output file.

<P>
<DT>7.
<DD>Even though the counting process was to be case insensitive, the
      deconding process is to be case sensitive.  That is, encoded capital
      letters are to be decoded into capital letters, and encoded lower
      case letters are to be decoded into lower case letters.

<P>
<DT>8.
<DD>All non-alphabetic characters found in <EM>ENCODED</EM> are to pass
      unchanged and appear in the same relative position in the output file
      as in the input message <EM>ENCODED</EM>. For example, this message may
      contain blank lines which must appear also in the output file.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
The car is blue.

Wkh fdu lv eoxh.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
The car is blue.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
727||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Equation</TITLE>
<META NAME="description" CONTENT="Equation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Equation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that changes an infix expression to a postfix expression
according to the following specifications.

<P>
<DL COMPACT>
<DT>1.
<DD>The infix expression to be converted is in the input file
in the format of one character per line, with a maximum of
     50 lines in the file.  For example, (3+2)*5 would be in the form:
<PRE>
(
3
+
2
)
*
5
</PRE>

<P>
<DT>2.
<DD>The input starts with an integer on a line by itself indicating the number of test cases.
Several infix expressions follows, preceded by a blank line.

<P>
<DT>3.
<DD>The program will only be designed to handle the binary operators <TT>+</TT>,
<TT>-</TT>, <TT>*</TT>, <TT>/</TT>.

<P>
<DT>4.
<DD>The operands will be one digit numerals.

<P>
<DT>5.
<DD>The operators <TT>*</TT> and <TT>/</TT> have the highest priority.  The
operators <TT>+</TT> and  <TT>-</TT> have the lowest priority.  Operators at the same
precedence level    associate from left to right.  Parentheses act as
grouping symbols that    over-ride the operator priorities.

<P>
<DT>6.
<DD>The output file  will have each postfix expression all on
     one line.  Print a blank line between different expressions.

<P>
<DT>7.
<DD>Each testcase will be an expression with valid syntax.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

(
3
+
2
)
*
5
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
32+5*
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
728||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Scatter Point Plot</TITLE>
<META NAME="description" CONTENT="Scatter Point Plot">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Scatter Point Plot</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
This problem deals with generating a plot of points that fit on the display
screen.  The Y axis is vertical and contains 20 lines (one <I>Y</I> value for each
row); the X axis is horizontal and contains 12 positions (each <I>X</I> value
takes 5 columns).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>Input consistes of several datasets. The first line of the input indicates the number of test cases.
The second line is void, and the datasets follow.
Each dataset is defined as follows:
<p><PRE><TT>
1st line 		 low <I>X</I> value and X axis increment 
2nd line 		 low <I>Y</I> value and Y axis increment
		 Followed by one <I>X</I> value and one <I>Y</I> value per line.
		  They will be positive integers up to 4 digits.
</TT></PRE>

<P>There is a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, character display a X,Y plot including grid lines and
axis labelling as shown in the sample below. Print <I>Y</I>-values right-justified
in a field of width 4 ans `<TT>:</TT>' in column number five. None of the lines 
in the output file will contain trailing blanks. That is, every line will end
with the last non-blank character in it.

<P>

<P>
<BR>
All pairs of <I>X</I>, <I>Y</I> values will be inputted and the lowest and highest needs
to be found to determine scaling values.  The increment for each row or
column will be based on 20 positions for the Y axis and 12 for the X axis.
When establishing what position a value will fall on rounding is to be done
up at the halfway point to the next increment value.  

<P>
If only one <I>X</I>, <I>Y</I>
value falls at a particular point display the character 1.  If two <I>X</I>, <I>Y</I>
values fall at a particular point display the character 2; if three <I>X</I>, <I>Y</I>
values fall at a particular point display the character 3; etc.

<P>
In case that there were ten or more <I>X</I>, <I>Y</I> values falling at a point, the
numbers have to be <EM>centered</EM> on the cross-marks in the following way:

<P>
<PRE>
                          1000
                           100
                           10
                            1
                    ...+----+----+...
</PRE>
<p>Print a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

100 50
0 5
100,20
101,22
100,23
100,0
100,3
649,0
649,3
647,2
500,85
206,21
325,43
612,8
129,19
501,83
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
   95:
   90:
   85:                                            2
   80:
   75:
   70:
   65:
   60:
   55:
   50:
   45:                             1
   40:
   35:
   30:
   25:    1
   20:    2    1    1
   15:
   10:                                                      1
    5:    1                                                      1
    0:    1                                                      2
     +----+----+----+----+----+----+----+----+----+----+----+----+
         100  150  200  250  300  350  400  450  500  550  600  650
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
729||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Hamming Distance Problem</TITLE>
<META NAME="description" CONTENT="The Hamming Distance Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Hamming Distance Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Hamming distance between two strings of bits (binary integers) is the
number of corresponding bit positions that differ.  This can be found by
using XOR on corresponding bits or equivalently, by adding corresponding
bits (base 2) without a carry.  For example, in the two bit strings that
follow:
<PRE>
                               A      0 1 0 0 1 0 1 0 0 0
                               B      1 1 0 1 0 1 0 1 0 0
                            A XOR B = 1 0 0 1 1 1 1 1 0 0
</PRE>

<P>
The Hamming distance (<I>H</I>) between these 10-bit strings is 6, the number of
1's in the XOR string.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists of several datasets. The first line of the input contains the number of datasets, and it's
followed by a blank line. Each dataset contains
<I>N</I>, the length of the bit strings and <I>H</I>, the Hamming distance, on the same line.
There is a blank line between test cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>For each dataset print
a list of all possible bit strings of length <I>N</I> that are
Hamming distance <I>H</I>
from the bit string containing all 0's (origin).  That is, all bit strings
of length <I>N</I> with exactly <I>H</I> <TT>1</TT>'s printed in ascending lexicographical
order.

<P>

<P>
<BR>
The number of such bit strings is equal to the combinatorial
symbol <I>C</I>(<I>N</I>,<I>H</I>). This is the number of possible combinations of <I>N</I>-<I>H</I> zeros
and <I>H</I> ones.  It is equal to
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
{N!} \over {(N-H)! H!}
\end{displaymath} -->


<IMG
 WIDTH="93" HEIGHT="47"
 SRC="http://uva.onlinejudge.org/external/7/729img1.gif" 
 ALT="\begin{displaymath}{N!} \over {(N-H)! H!}
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
This number can be very large.  The program should work for 
<!-- MATH: $1 \le H \le N
\le 16$ -->
<IMG
 WIDTH="132" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/729img1.gif" 
 ALT="$1 \le H \le N
\le 16$">.

<P>Print a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4 2
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0011
0101
0110
1001
1010
1100
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
730||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Morse Code Generation</TITLE>
<META NAME="description" CONTENT="Morse Code Generation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Morse Code Generation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In determining the speed of transmission of messages in Morse code, the
controlling element is the dot, `<TT>.</TT>'.  The dash, `<TT>-</TT>', is three dots
in length.  Within a character the space between sounds (intra-character space) is considered to be at least a dot in length.  The inter-character space is at least a dash in length and
the interword space is three dashes in length.  It is assumed that each
word is five characters in length.

<P>

<P>
<BR>
For transmission speeds below thirteen (13) words-per-minute, the
individual characters are formed using the dot length of thirteen words per
minute, with the extra time placed  on the
intra-character spaces. Then the inter-character space is three times the intra-character
space, and the interword space is three times the inter-character space. Thus at 6.5
words per minute, the inter-character space is twice that of a 13 wpm
transmission.

<P>

<P>
<BR>
Above 13 wpm, both the character time and the intra-character spacing are
controlled by the speed.

<P>

<P>
<BR>
For the purpose of this problem assume that the average character is eight
(8) dots in length.  Thus for a standard of 13 wpm transmission there would
be 13*5=65 characters per minute or 65*8=520 dot spaces per minute (and 520 intra-character spaces per minute). You are
to use this value for the basis of your program.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
A file consisting of:

<P>
<UL>
<LI>A table with all the different characters (one character to a
line) which are used in the messages to be sent. Each character is followed
by its Morse code representation as a series of `<TT>-</TT>' and `<TT>.</TT>'. For a
complete set of possible characters, look at the table below the problem 
description.

<P>
<LI>
It follows one or more data sets. Each of them begins with a `<TT>@</TT>' in
column 1 on a line by itself. Then a line with an integer indicating the
transmission speed in words-per-minute. This is followed by the message to be
sent.  For the purpose of transmission, end-of-line characters (except the
last of each message) must be considered as an interword space.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
A copy of the message to be sent, one character (an upper case letter or a
number) per line followed by a listing, as integers of the number of
milliseconds the transmitter will be on and the number of milliseconds the
transmitter will be off to result in the desired speed.  Each time is to be
preceeded and followed by a white space.  Sound times will be followed by a
single character `<TT>S</TT>' and no sound times will be followed by a single
character `<TT>N</TT>'.  The required inter-character spacing will be the last
entry in a line.  Each line will be terminated by a new line character.

<P>
A blank line separates the output of two messages

<P>

<P>
<BR>

<B>Complete set of characters:</B>
Below is a table of the characters which can be used for testing and
their Morse Code representation.

<P>
<PRE>
A  .-           J  .---         S  ...          1  .----
B  -...         K  -.-          T  -            2  ..---
C  -.-.         L  .-..         U  ..-          3  ...--
D  -..          M  --           V  ...-         4  ....-
E  .            N  -.           W  .--          5  .....
F  ..-.         O  ---          X  -..-         6  -....
G  --.          P  .--.         Y  -.--         7  --...
H  ....         Q  --.-         Z  --..         8  ---..
I  ..           R  .-.          0  -----        9  ----.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
A  .-
B  -...
D  -..
G  --.
O  ---
Y  -.--
@
5
A BAD BOY
@
13
A good
boy
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A 115 S 300 N 346 S 300 N 900 N
  2700 N
B 346 S 300 N 115 S 300 N 115 S 300 N 115 S 300 N 900 N
A 115 S 300 N 346 S 300 N 900 N
D 346 S 300 N 115 S 300 N 115 S 300 N 900 N
  2700 N
B 346 S 300 N 115 S 300 N 115 S 300 N 115 S 300 N 900 N
O 346 S 300 N 346 S 300 N 346 S 300 N 900 N
Y 346 S 300 N 115 S 300 N 346 S 300 N 346 S 300 N 900 N

A 115 S 115 N 346 S 115 N 346 N
  1038 N
G 346 S 115 N 346 S 115 N 115 S 115 N 346 N
O 346 S 115 N 346 S 115 N 346 S 115 N 346 N
O 346 S 115 N 346 S 115 N 346 S 115 N 346 N
D 346 S 115 N 115 S 115 N 115 S 115 N 346 N
  1038 N
B 346 S 115 N 115 S 115 N 115 S 115 N 115 S 115 N 346 N
O 346 S 115 N 346 S 115 N 346 S 115 N 346 N
Y 346 S 115 N 115 S 115 N 346 S 115 N 346 S 115 N 346 N
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-09-04</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
731||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Numerical Summation of a Series</TITLE>
<META NAME="description" CONTENT="Numerical Summation of a Series">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Numerical Summation of a Series</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Produce a table of the values of the series
<BR><P></P>
<DIV ALIGN="CENTER">

<!-- MATH: \begin{equation}
\psi (x) = \sum_{k=1}^{\infty} {1 \over {k(k+x)}}
\end{equation} -->

<TABLE WIDTH="100%" ALIGN="CENTER">
<TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP><IMG
 WIDTH="153" HEIGHT="55"
 SRC="http://uva.onlinejudge.org/external/7/731img1.gif" 
 ALT="\begin{displaymath}\psi (x) = \sum_{k=1}^{\infty} {1 \over {k(k+x)}}
\end{displaymath}"></TD>
<TD WIDTH=10 ALIGN="RIGHT">
(1)</TD></TR>
</TABLE>
</DIV>
<BR CLEAR="ALL"><P></P>
for the 3001 values of <I>x</I>, 
<!-- MATH: $x= 0.0, 0.1, 0.2, \dots, 300.0$ -->
<IMG
 WIDTH="198" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/731img1.gif" 
 ALT="$x= 0.0, 0.1, 0.2, \dots, 300.0$">.
All entries of the
table must have a relative error less than 1.0e-10 (10 digits of
precision).  This problem is based on a problem from Hamming (1962), when
mainframes were very slow by today's microcomputer standards.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
This problem has no input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output is to be written into a file.  The output is to be
formatted as two columns with the values of <I>x</I> and <I>y</I>(<I>x</I>)
printed as in the C <TT>printf</TT> or the Pascal <TT>writeln</TT>.

<P>
<PRE>
printf("%6.2f%17.12f\n", x, psix )

writeln(x:6:2,psix:17:12)
</PRE>

<P>
As an example, the sample output below shows 4 acceptable lines out of
3001, which might appear in the output file.

<P>
The values of <I>x</I> should start at 0.00 and increase by 0.1 until the line
with <I>x</I>=300.00 is output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Process</A>&nbsp;</FONT>
</H2>

<P>
The problem with summing the sequence in equation 1 is that too many terms
may be required to complete the summation in the given time.  Additionally,
if enough terms were to be summed, roundoff would render any typical double
precision computation useless for the desired precision.

<P>

<P>
<BR>
To improve the convergence of the summation process note that

<P>
<BR><P></P>
<DIV ALIGN="CENTER">

<!-- MATH: \begin{equation}
{1 \over {k(k+1)}} = {1 \over k} - {1 \over {k+1}}
\end{equation} -->

<TABLE WIDTH="100%" ALIGN="CENTER">
<TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP><IMG
 WIDTH="165" HEIGHT="46"
 SRC="http://uva.onlinejudge.org/external/7/731img1.gif" 
 ALT="\begin{displaymath}{1 \over {k(k+1)}} = {1 \over k} - {1 \over {k+1}}
\end{displaymath}"></TD>
<TD WIDTH=10 ALIGN="RIGHT">
(2)</TD></TR>
</TABLE>
</DIV>
<BR CLEAR="ALL"><P></P>
which implies <I>y</I>(1)=1.0.
One can then produce a series for 
<!-- MATH: $y(x) - y(1)$ -->
<I>y</I>(<I>x</I>) - <I>y</I>(1)
which converges faster than the original series.  This series not only
converges much faster, it also reduces roundoff loss.

<P>

<P>
<BR>
This process of finding a faster converging series may be repeated again on
the second series to produce a third sequence, which converges even more
rapidly than the second.

<P>

<P>
<BR>
The following equation is helpful in determining how may items are
required in summing the series above.

<P>
<BR><P></P>
<DIV ALIGN="CENTER">

<!-- MATH: \begin{equation}
\sum_{k=n}^{\infty} {1 \over {k^r}} < \int_{n-1}^{\infty} {1 \over
{x^r}} dx \quad \mbox{ for } k>1 \mbox{ and } r \ge 1
\end{equation} -->

<TABLE WIDTH="100%" ALIGN="CENTER">
<TR VALIGN="MIDDLE"><TD ALIGN="CENTER" NOWRAP><IMG
 WIDTH="322" HEIGHT="55"
 SRC="http://uva.onlinejudge.org/external/7/731img1.gif" 
 ALT="\begin{displaymath}\sum_{k=n}^{\infty} {1 \over {k^r}} < \int_{n-1}^{\infty} {1 \over
{x^r}} dx \quad \mbox{ for } k>1 \mbox{ and } r \ge 1
\end{displaymath}"></TD>
<TD WIDTH=10 ALIGN="RIGHT">
(3)</TD></TR>
</TABLE>
</DIV>
<BR CLEAR="ALL"><P></P>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
  0.00   1.644934066848
  0.10   1.534607244904
...
  1.00   1.000000000000
...
  2.00   0.750000000000
...
300.00   0.020942212934
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
732||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Anagrams by Stack</TITLE>
<META NAME="description" CONTENT="Anagrams by Stack">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Anagrams by Stack</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
How can anagrams result from sequences of stack operations?  There are two
sequences of stack operators which can convert TROT to TORT:

<P>
<PRE>
[
i i i i o o o o
i o i i o o i o
]
</PRE>
where <TT>i</TT> stands for Push and <TT>o</TT> stands for Pop. Your
program should, given pairs of words produce sequences of stack
operations which convert the first word to the second.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input will consist of several lines of input.  The first line
of each pair of input lines is to be considered as a source word
(which does not include the end-of-line character).  The second
line (again, not including the end-of-line character) of each pair
is a target word.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input pair, your program should produce a sorted list of
valid sequences of <TT>i</TT> and <TT>o</TT> which produce the target
word from the source word. Each list should be delimited by
<PRE>
[
]
</PRE>
and the sequences should be printed in ``dictionary order". Within
each sequence, each <TT>i</TT> and <TT>o</TT> is followed by a single
space and each sequence is terminated by a new line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Process</A>&nbsp;</FONT>
</H2>

<P>
A stack is a data storage and retrieval structure permitting two
operations:

<P>
<DL COMPACT>
<DT>
<DD>Push - to insert an item and
<DT>
<DD>Pop - to retrieve the most recently pushed item
</DL>

<P>
We will use the symbol <TT>i</TT> (in) for push and <TT>o</TT> (out) for
pop operations for an initially empty stack of characters.  Given
an input word, some sequences of push and pop operations are valid
in that every character of the word is both pushed and popped, and
furthermore, no attempt is ever made to pop the empty stack.  For
example, if the word FOO is input, then the sequence:

<P>

<P>
<BR>

<TT>i i o i o o</TT>  is valid, but

<P>
<TT>i i o       </TT> is not (it's too short), neither is

<P>
<TT>i i o o o i</TT>  (there's an illegal pop of an empty stack)

<P>

<P>
<BR>
Valid sequences yield rearrangements of the letters in an input
word.  For example, the input word FOO and the sequence <TT>i i o
i o o</TT> produce the anagram OOF.  So also would the sequence <TT>i
i i o o o</TT>.  You are to write a program to input pairs of words
and output all the valid sequences of <TT>i</TT> and <TT>o</TT> which
will produce the second member of each pair from the first.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
madam
adamm
bahama
bahama
long
short
eric
rice
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
[
i i i i o o o i o o
i i i i o o o o i o
i i o i o i o i o o
i i o i o i o o i o
]
[
i o i i i o o i i o o o
i o i i i o o o i o i o
i o i o i o i i i o o o
i o i o i o i o i o i o
]
[
]
[
i i o i o i o o
]
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
733||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Follow the Folding Dot</TITLE>
<META NAME="description" CONTENT="Follow the Folding Dot">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Follow the Folding Dot</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Write a program that will keep track of the location of a dot on a piece of
paper as it is being folded.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file will contain 4 different types of records.

<P>
<DL>
<DT><STRONG>Type 1</STRONG>
<DD>will contain two real numbers separated by one space.
These are, respectively, the width and height of the paper.
<P>
<DT><STRONG>Type 2</STRONG>
<DD>will contain two real numbers and a character, all
separated by one space.  These numbers represent the coordinates
of the dot on the paper. The first number is the distance
horizontally from the upper left hand corner.  The second is the
distance down from the upper left hand corner. The character will
tell you which side of the paper the dot is on (<TT>T</TT> for top,
<TT>B</TT> for bottom).

<P>
<DT><STRONG>Type 3</STRONG>
<DD>will contain two unseparated uppercase characters.  The
first character will tell you which of the four sides of the paper
you are about to use (<TT>T</TT> for top, <TT>B</TT> for bottom, <TT>L</TT>
for left, <TT>R</TT> for right).  The second character will tell you
whether to fold the paper over the top or under the bottom (<TT>
O</TT> for over, <TT>U</TT> for under) e.g., <TT>TO</TT>, would mean you
take the top of the paper and fold it over.  Remember that the
upper left hand corner is always 0, 0.

<P>
<DT><STRONG>Type 4</STRONG>
<DD>will contain one uppercase '<TT>S</TT>'.  This will tell you to
stop folding the paper.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output will consist of which piece of paper you are working on, the
beginning size of the paper, the beginning location of the dot, the size of
the paper and the location of the dot when you have finished folding the
paper. Format must be as shown in the sample output below. An absolut error
of 10<sup>-6</sup> is allowed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Process</A>&nbsp;</FONT>
</H2>
This is best explained by an example. Look at the first sample input case:

<P>

<P>
<BR>
Place a 5.0<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/733img1.gif" 
 ALT="$\times$">8.25 paper on the desk in front of you.  Place a
dot on the top surface at 3.25 units right of the top left corner
and 8.00 units down from the top.  Now, take the top edge of the
paper and fold it over the top.  The paper is now 5<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/733img1.gif" 
 ALT="$\times$">4.125
and the dot is on the top of page 2.  The location of the new
position of the dot is 3.875 units from the top and 3.25 units to
the right. Use these new `coordinates' as the starting positions
for the next set of folding instructions. 

<P>
Now, take the left edge of the paper and fold it under the
bottom. The paper is now 2.5<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/733img1.gif" 
 ALT="$\times$">4.125 and the dot is on the top
of page 2. The location of the new position of the dot is
3.875 units from the top and 0.75 units to the left.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5.0 8.25
3.25 8.00 T
TO
LU
S
1.0 2.0
.55 1.3 B
LO
S
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Paper number 1
Beginning paper dimensions 5.000000 X 8.250000
Dot is on TOP of page 1. Position: 3.250000 X 8.000000

After folding paper. Paper dimensions: 2.500000 X 4.125000
Dot is on TOP of page 2. Position 0.750000 X 3.875000

Paper number 2
Beginning paper dimensions 1.000000 X 2.000000
Dot is on BOTTOM of page 1. Position: 0.550000 X 1.300000

After folding paper. Paper dimensions: 0.500000 X 2.000000
Dot is on BOTTOM of page 2. Position 0.050000 X 1.300000
</PRE>

<P>

<P><P>
<BR>

<B>Other Notes:</B>
<DL COMPACT>
<DT>1.
<DD>The dot will never be on the edge of the paper or a fold line.
<P>
<DT>2.
<DD>When folding the paper, pretend you are cutting the paper.  In other
words, don't be concerned about the thickness of the fold.

<P>
<DT>3.
<DD>All input characters will be in uppercase.
</DL>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
734||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Programmer's Hex</TITLE>
<META NAME="description" CONTENT="The Programmer's Hex">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Programmer's Hex</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
The Puzzle</A>&nbsp;</FONT>
</H2>

<P>
The goal of this problem is to solve a puzzle that consists of 7
hexagonally-shaped pieces of wood (from now on referred to simply
as `hexagons') that can be placed on 7 pegs that are mounted on a
wooden base.  The pegs are arranged in the pattern shown in Figure
1.  Notice that we have numbered the pegs (0 through 6) in order
to facilitate this discussion. The hexagons are labeled with the
capital letters 'A' through 'G' (see figure 2 for one example). An
integer (between 0 and 9, inclusive) is printed adjacent to each
edge of each hexagon.

<P>

<IMG
 WIDTH="282" HEIGHT="252" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/734img1.gif" 
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=1.75in
\epsfbox{p734a.eps}
\par \medskip
Figure 1
\end{center}}$">
<IMG
 WIDTH="277" HEIGHT="228" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/734img1.gif" 
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p734b.eps}
\par \medskip
Figure 2
\end{center}}$">

<P>
You will notice that when 7 hexagons are placed on the 7 pegs that
3 edges of each  of the outer hexagons and all edges of the
hexagon on peg 0 are adjacent to an edge  of some other hexagon.
In order to solve the puzzle you must find an arrangement and
orientation of all 7 hexagons so that the numbers associated with
each edge  that is adjacent to some other edge equals the number
associated with that other edge. (See Figure 3).

<P>
<DIV ALIGN="CENTER">

<img src=p734c.jpg>

<P>

<P>
<BR>
Figure 3 - Overhead View of a Solved Puzzle
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Program Description</A>&nbsp;</FONT>
</H2>

<P>
The program must read a description of seven hexagons from the
input file, find a solution to the puzzle using those 7 hexagons
(if one exists), and write to the output file a description of the
puzzle's solution. If more than one solution exists, you may
choose any one of them (Obviously, once a solution is found, one
could rotate the hexagon on peg 0 and move the other hexagons
around to find other closely-related solutions.) If no solution
exists, your program should report same by writing an appropriate
message to the output file. After solving the puzzle for one set
of hexagon solutions, your program should read the next set, solve
the new puzzle, and continue until the end-of-file is detected in
the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
As stated above the input file contains several sets of hexagon
descriptions.  The first 7 lines in the file contain 6 digits on
each line (no spaces). These digits represent the integers that
are printed on the 6 sides of each hexagon. The first line
contains the integers printed on the hexagon labeled 'A'.  The
second line corresponds to hexagon 'B', and so forth through line
7 that corresponds to hexagon 'G'.  The first digit on each line
corresponds to the integer printed on the edge that is initially
in the ``12 O'Clock" position that we'll call ``TOP".  The next 5
digits are the numbers on the edges as you proceed in a clockwise
fashion from the edge that is ``TOP". For example the hexagon in
figure 2 on the previous page could be represented by the data
line: <TT>123456</TT>.  As you can see in figure 3, the edges of a
given hexagon do NOT necessarily have unique integers.

<P>

<P>
<BR>
After the 7 lines that describe a given set of hexagons, there is
a line that contains a single asterisk (<TT>*</TT>) in column 1 which
is used as a delimiter between sets of hexagon. After finding a
solution for the current set of hexagons, and until the
end-of-file is detected, your program should read the next 7 lines
that represent a new set of hexagons and a new puzzle that should
be solved. The asterisk follows every set, including the final
one.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output file should contain a description of a solution for
each set of hexagons given in the input file.  A solution
description consists of reporting which hexagon should be placed
on peg 0, peg 1, peg 2, ... and peg 6.  In addition it is
necessary that the report describe the orientation of each
hexagon.  Thus the output should consists of a 3 column report.
Column 1 is a list of the pegs 0 through 6.  Column 2 is a list of
the letters that represent the hexagons that should be placed on
peg 0, peg 1, ... and peg 6, in that order. Column 3 is a list of
the edge numbers for the hexagon listed in column 2.  The digits
should begin with the edge that is in the ``TOP" position when the
puzzle is solved.  The next 5 digits should correspond to the
edges as you proceed in a clockwise fashion.  Each column should
have a heading. The first column's heading should be ``<TT>PEG</TT>".
The heading for column 2 should be ``<TT>HEX</TT>".  The third
heading should be ``<TT>POSITION</TT>".

<P>

<P>
<BR>
If there is no solution for a particular set of hexagons, print
the message: ``<TT>No solution possible</TT>". Write a line of 36
asterisks ``<TT>*</TT>" to the output file after each solution
description (or ``No solution" message) in order to separate the
output for one puzzle from the next.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
665403
444444
666666
123456
123456
040404
289766
*
123456
111111
222222
333333
444444
555555
666666
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
PEG   HEX   POSITION
---   ---   --------
 0     A     665403
 1     G     976628
 2     C     666666
 3     E     612345
 4     B     444444
 5     F     404040
 6     D     123456
************************************
No solution possible
************************************
</PRE>

<P>

<P><P>
<BR>

<B>Note:</B> The first sample case corresponds to the puzzle and
solution shown in Figure 3.

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
735||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Dart-a-Mania</TITLE>
<META NAME="description" CONTENT="Dart-a-Mania">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Dart-a-Mania</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Description of the Game</A>&nbsp;</FONT>
</H2>

<P>
The game of darts has many variations. One such variation is the
game of <B>301</B>. In the game of 301 each player starts with a
score of 301 (hence the name). Each player, in turn, throws three
darts to score points which are subtracted from the player's
current score. For instance, if a player has a current score of
272 and scores 55 points with the three darts, the new score would
be 217. Each dart that is tossed may strike regions on the
dartboard that are numbered between 1 and 20. (A value of zero
indicates that the player either missed the dartboard altogether
or elected to not throw the dart.) A dart that strikes one of
these regions will either score the number printed on the
dartboard, double the number printed, or triple the number
printed. For example, a player may score 17, 34, or 51 points with
a toss of one dart that hits one of the regions marked with a 17.
A third way to score points with one dart is to hit the BULLS EYE
which is worth 50 points. (There is no provision for doubling or
tripling the bull's eye score.)

<P>

<P>
<BR>
The first player to reduce his score to <EM>exactly zero</EM> wins
the game. If a player scores more points than his/her current
score, the player is said to have ``busted" and the new score is
returned to the last current score.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Problem Statement</A>&nbsp;</FONT>
</H2>

<P>
Given a player's current dart score, write a program to calculate
all the possible combinations and permutations of scores on
throwing three darts that would reduce the player's score to
exactly zero (meaning the player won the game). The output of the
program should contain the number of combinations and permutations
found.

<P>

<P>
<BR>
For example, if the player's current score is 2, then there would be two
combinations and six permutations. The combinations would be: 1) obtain a score
of 2 on any one dart and zero on the other two, and 2) obtain a score of one on
two different darts and zero on the third dart. The order in which this is
accomplished is not important.

<P>

<P>
<BR>
With permutations the order is significant; therefore the
six permutations would be as follows:
<DL>
<DT><STRONG>Dart 1:</STRONG>
<DD><TT>2 0 0 1 1 0</TT>
<DT><STRONG>Dart 2:</STRONG>
<DD><TT>0 2 0 1 0 1</TT>
<DT><STRONG>Dart 3:</STRONG>
<DD><TT>0 0 2 0 1 1</TT>
</DL>

<P>

<P>
<BR>

<B>Note:</B> The program doesn't print out the actual permutations
and combinations, just the total number of each.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains a list of integers (each <IMG
 WIDTH="49" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/735img1.gif" 
 ALT="$\le 999$">), one
per line, that represent several players' current scores. A value
of zero or less will signify the end of the input file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each positive integer in the input file, 2 or 3 line(s) will
be written to the output file.

<P>

<P>
<BR>
If the score can be reduced to zero, your program should write the lines:

<P>

<P>
<BR>

<TT>NUMBER OF COMBINATIONS THAT SCORES </TT><I>x</I> <TT>IS
</TT><I>c</I>.

<P>

<TT>NUMBER OF PERMUTATIONS THAT SCORES </TT><I>x</I> <TT>IS </TT>
<I>p</I>.

<P>

<P>
<BR>
where <I>x</I> is the value of the player's score while <I>c</I>
and <I>p</I> are the total number of combinations and permutations
possible, respectively.

<P>

<P>
<BR>
If it is impossible to reduce the player's score to zero, write the line:

<P>

<P>
<BR>

<TT>THE SCORE OF </TT><I>x</I> <TT>CANNOT BE MADE WITH THREE
DARTS.</TT>

<P>

<P>
<BR>
After the line(s) above are printed, your program should write a
line of 70 asterisks to separate output for different scores. The
message ``<TT>END OF OUTPUT</TT>" should appear at the end of the
output file.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
162
175
2
68
211
114
-100
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
NUMBER OF COMBINATIONS THAT SCORES 162 IS 7.
NUMBER OF PERMUTATIONS THAT SCORES 162 IS 28.
**********************************************************************
THE SCORE OF 175 CANNOT BE MADE WITH THREE DARTS.
**********************************************************************
NUMBER OF COMBINATIONS THAT SCORES 2 IS 2.
NUMBER OF PERMUTATIONS THAT SCORES 2 IS 6.
**********************************************************************
NUMBER OF COMBINATIONS THAT SCORES 68 IS 187.
NUMBER OF PERMUTATIONS THAT SCORES 68 IS 1056.
**********************************************************************
THE SCORE OF 211 CANNOT BE MADE WITH THREE DARTS.
**********************************************************************
NUMBER OF COMBINATIONS THAT SCORES 114 IS 82.
NUMBER OF PERMUTATIONS THAT SCORES 114 IS 445.
**********************************************************************
END OF OUTPUT
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
736||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Lost in Space</TITLE>
<META NAME="description" CONTENT="Lost in Space">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Lost in Space</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
This program should search for strings in an <I>N</I> by <I>N</I> array of
characters. In the context of this problem, a ``character" is any
printable ASCII character (ASCII values 32 thru 126, inclusive).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>Input starts with an integer on a line by itself containing the number of datasets, followed by a blank line.
Each dataset contains the following:

<P>
<UL>
<LI>line 1: the value of <I>N</I> (<IMG
 WIDTH="40" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/736img1.gif" 
 ALT="$\le 50$">),
<LI>lines 2 to <I>N</I>+1: <I>N</I>-character-long strings, possibly including blanks,
(However please note that since some PC editors automatically
truncate trailing blanks, none of the lines in the input file will
contain trailing blanks. That is, every line will end with some
non-blank character. Leading and imbedded blanks are permissible.)
<LI>lines <I>N</I>+2 through end of file: strings 1 to <I>N</I> characters long, containing no
blanks.
</UL>

<P>
Lines 2 through <I>N</I>+1 of the file represent the contents of the
<I>N</I> by <I>N</I> array, line 2 for row 1, line 3 for row 2, etc.

<P>

<P>
<BR>
For Line <I>N</I>+2 and after, you are to determine each (and every)
position at which the string appears in the array. ``Appears"
means that the first character of the string matches the character
at the position, and that subsequent characters in the string
match the characters in the array (skipping over any blanks in the
array) going in any of the eight possible directions `<TT>E</TT>
(right), <TT>NE</TT> (diagonally up and right), <TT>N</TT> (up), <TT>
NW</TT> (diagonally up and left), <TT>W</TT> (left), <TT>SW</TT> (diagonally
down and left), <TT>S</TT> (down), and <TT>SE</TT> (diagonally down and
right). The string you are looking for may not ``wrap around" from
one edge of the array to another.

<P>The is a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output for each string in each dataset will be:
<UL>
<LI>a blank line
<LI>the string itself
<LI>Either the message ``<TT>not found</TT>"

<P>
OR

<P>
A listing of every starting position and direction at which the
string is found, using the format:

<P>
(row,column) - dir [for example, (5,3) - <TT>NW</TT>]

<P>
</UL>

<P>

<P>
<BR>
If the string appears more than once, you must report each
occurrence.  The order in which you have to output multiple occurrences is:
first by increasing row number, second by increasing column number when same
row and finally (when both row and column are equal) by direction in clockwise
order, beginning with the <TT>N</TT>orth.

<P>Print an extra blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

4
LOST
I  N
SP A
C  E
ANT
LOT
S
PT
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
ANT
(3,4) - N

LOT
not found

S
(1,3) - N
(1,3) - NE
(1,3) - E
(1,3) - SE
(1,3) - S
(1,3) - SW
(1,3) - W
(1,3) - NW
(3,1) - N
(3,1) - NE
(3,1) - E
(3,1) - SE
(3,1) - S
(3,1) - SW
(3,1) - W
(3,1) - NW

PT
(3,2) - NE
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-09-04</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
737||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gleaming the Cubes</TITLE>
<META NAME="description" CONTENT="Gleaming the Cubes">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gleaming the Cubes</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
As chief engineer of the Starship Interprize, the task of repairing the
hyperstellar, cubic, transwarped-out software has fallen on your shoulders.
Simply put, you must compute the volume of the intersection of anywhere from 2
to 1000 cubes.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
The input data file consists of several sets of cubes for which
the volume of their intersections must be computed. The first line
of the data file contains a number (from 2 to 1000) which
indicates the number of cubes which follow, one cube per line.
Each line which describes a cube contains four integers. The first
three integers are the <I>x</I>, <I>y</I> and <I>z</I> coordinates of the corner
of a cube, and the fourth integer is the positive distance which
the cube extends in each of the three directions (parallel to the
x, y, and z axes) from that corner.

<P>

<P>
<BR>
Following the data for the first set of cubes will be a number which indicates
how many cubes are in a second set, followed by the cube descriptions for the
second set, again one per line.  Following this will be a third set, and so on.
Your program should continue to process sets of cubes, outputting the volume of
their intersections to the output file, one set per line, until a zero is read
for the number of cubes.

<P>

<P>
<BR>
Note that the data file will always contain at least one set of cubes, and
every set will contain at least 2 and at most 1000 cubes. For any given set of
cubes, the volume of their intersections will not exceed 1,000,000 units.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
0 0 0 10
9 1 1 5
3
0 0 0 10
9 1 1 5
8 2 2 3
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
25
9
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
738||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Logical Problem</TITLE>
<META NAME="description" CONTENT="A Logical Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
A Logical Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file for this program contains several logic circuit diagrams composed
of zero or more  dual-input AND and/or OR gates (with possible inversions of
input and/or output values), one or more inputs, and a single output.  The goal
of this problem is to write a program which will determine what the output should be for a given
circuit diagram and for a specified set of input values.

<P>

<P>
<BR>
The logic circuits are drawn using printable ASCII characters and
are allowed to be a maximum of 100 by 100 characters in size. The
AND and OR gates are represented by the following arrangements of
ASCII characters, respectively

<P>
<PRE>
                               :\                  :\
                               : )                 : &gt;
                               :/                  :/
</PRE>

<P>
Note that the only difference is that the AND gate has a right parenthesis
character in the rightmost column of the center row, while the OR gate has a
greater-than symbol in that same position. The gates in the data file will
always be oriented as shown (i.e. they will not be flipped, rotated, or
otherwise modified in any way from the arrangements shown above).

<P>

<P>
<BR>
The ``circuit" paths used to connect the gates are represented using the dash
character (ASCII code 45 decimal) for horizontal paths, and the vertical bar
character (ASCII code 124 decimal) for vertical paths. A path always travels in
a straight line (either horizontally or vertically) unless altered by a
junction, represented by a plus character (ASCII code 43 decimal), at which
point it may make a 90 degree turn only. No two junctions may be adjacent to
one another in horizontal or vertical direction, and no two paths may cross at
any point.

<P>

<P>
<BR>
The following circuits illustrate some legal and illegal circuit paths

<P>
<PRE><TT>
<code>   ---+</code> 		 		                                <code>      |</code> 
<code>   --+|</code> 		 These two paths are both legal 		 <code>   ---+</code> 		 Illegal, only one 90 degree 
<code>     ||</code> 		 		                                <code>      |</code> 		 turn at each junction
		 
<code>      |</code> 		 
<code>   ---+</code> 		 Illegal, no two junctions may 		         <code>      |   </code>      
<code>   ---+</code> 		 be adjacent to one another 		               <code>   ---+---</code> 		  Illegal, no 2 paths    
<code>      |</code> 		 in a horizontal or vertical direction 		  <code>      |   </code> 		  may cross
</TT></PRE>

<P>
The two inputs for a specific logic gate always approach horizontally from the
left. One input is adjacent to the leftmost character of the first row of the
gate, and the other input is adjacent to the leftmost character of the third
row.  The output for a gate always leaves horizontally to the right and is
adjacent to the rightmost character of the second row of the gate. The positions
of these inputs and output locations are indicated by the dash characters (`<TT>-</TT>')
in the diagram below:

<P>
<PRE>
     -:\
      : )-
     -:/
</PRE>

<P>
It is possible for either of the two inputs or the output to be inverted. That
is, if the input or output is a <TT>1</TT>, it is changed to a <TT>0</TT>, or if it
was to be a <TT>0</TT>,
it is changed to a <TT>1</TT>. To indicate inversion, a lowercase ``<TT>o</TT>" character (ASCII
code 111 decimal) is placed in the appropriate input or output position adjacent
to the gate. If an input or output is inverted, it will always be preceded (in
the case of an input) or followed (in the case of an output) by at least a
single dash character. As an example, consider the diagram below which shows an
AND gate with its top input and its output inverted:

<P>
<PRE>
    -o:\
      : )o-
     -:/
</PRE>

<P>
As previously stated, there are one or more inputs and a single output in the
complete logic circuit. Each input is indicated by one of the capital letters <TT>A</TT>
through <TT>Z</TT>, and the output is indicated by a question mark character.  So, a
simple circuit consisting only of a single OR gate with two inputs labeled <TT>A</TT> and
<TT>B</TT> could be represented as shown here:

<P>
<PRE>
    A-:\
      : &gt;-?
    B-:/
</PRE>

<P>
You may assume that the input data obeys all of the rules outlined above (ie.
there are no illegal circuits). The bottom end of a logic diagram is indicated
by line containing only a single asterisk in the first column. After this are
several lines each of which indicate the state of the inputs in the previous
logic diagram. Each line is a string of 26 ``<TT>0</TT>" and/or ``<TT>1</TT>" characters, with the
first position representing the state of input <TT>A</TT>, the second position
representing the state of input <TT>B</TT>, etc.  Note that input values which are not
actually used in the circuit may simply be ignored. The list of input states is
terminated by a line containing only a single asterisk character in the first
column.

<P>

<P>
<BR>
Following the asterisk which terminates the list of input states is another
circuit diagram followed by an asterisk and a list of input states terminated by
an asterisk, which is then followed by another circuit diagram and another list
of input states, and so on until the end of the file. The file will always
contain at least one circuit and one set of inputs for that circuit.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each logic circuit diagram, the program is to report the value of the output
(<TT>0</TT> or <TT>1</TT>), one value per line, for each input state in the list which follows the
circuit. The list of outputs for a given circuit should be followed by a single
blank line to separate it from the lists for subsequent circuits.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
A-:\
  : )-?
B-:/
*
00000000000000000000000000
10000000000000000000000000
01000000000000000000000000
11000000000000000000000000
*
  +-A
  |
  +-:\
    : &gt;o-:\
  +-:/   : )-?
  |+----o:/
B-+|
 C-+
*
00000000000000000000000000
11100000000000000000000000
*
A-:\
  : )-?
A-:/
*
00000000000000000000000000
10000000000000000000000000
*
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0
0
0
1

1
0

0
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
739||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Soundex Indexing</TITLE>
<META NAME="description" CONTENT="Soundex Indexing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Soundex Indexing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The Soundex Index System was developed so that similar sounding names, or names
with similar spelling could be encoded for easy retrieval. It has been used by
the U.S. Bureau of the Census, and some States use it to help encode your
driver's license number. Your task is to read a sequence of names, one at a
time and one per line, compute the corresponding soundex code, and write to the
output file the name and its soundex code (one line of output per name).

<P>

<P>
<BR>
Names will contain from 1 to 20 upper case, alphabetic characters (ASCII values
65 thru 90, inclusive).  Names shorter than 20 characters will NOT be padded
with blanks. Thus a name will consist of upper case letters only.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
How to generate the Soundex Code:</A>&nbsp;</FONT>
</H2>

<P>
A Soundex Code always consists of a letter followed by three digits. Here are
the rules for soundex encoding:

<P>
<DL COMPACT>
<DT>1.
<DD>The first letter of a name appears as the first and only letter in the
soundex code.
<DT>2.
<DD>The letters A, E, I, O, U, Y, W and H are never encoded, but do break
successive code sequences (see next rule).
<DT>3.
<DD>All other letters are encoded EXCEPT when they immediately follow a letter
(including the first letter) that would be encoded with the same code
digit.
<DT>4.
<DD>The soundex code guide is:
<P>
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT"><B> Code</B></TD>
<TD ALIGN="LEFT"><B> Key Letters and Equivalents</B></TD>
</TR>
<TR><TD ALIGN="LEFT">1</TD>
<TD ALIGN="LEFT">B, P, F, V</TD>
</TR>
<TR><TD ALIGN="LEFT">2</TD>
<TD ALIGN="LEFT">C, S, K, G, J, Q, X, Z</TD>
</TR>
<TR><TD ALIGN="LEFT">3</TD>
<TD ALIGN="LEFT">D, T</TD>
</TR>
<TR><TD ALIGN="LEFT">4</TD>
<TD ALIGN="LEFT">L</TD>
</TR>
<TR><TD ALIGN="LEFT">5</TD>
<TD ALIGN="LEFT">M, N</TD>
</TR>
<TR><TD ALIGN="LEFT">6</TD>
<TD ALIGN="LEFT">R</TD>
</TR>
</TABLE>

<P>
<DT>5.
<DD>Trailing zeros are appended to short codes so all names are encoded with a
letter followed by three digits.
<DT>6.
<DD>Longer codes are truncated after the third digit.
</DL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file contains a list of names, one per line. Each name
will not exceed 20 characters, and you may assume that only upper case letters
will be used. Your program should continue to read names until the end of the
file is detected.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output written to the file should consist of a column of names
and a column of their corresponding soundex codes. Write the headings ``<TT>NAME</TT>"
and ``<TT>SOUNDEX CODE</TT>" in the first line of the output file in columns 10 and 35,
respectively. After the heading line, the names and soundex codes should be
written (one pair per line) with the name starting in column 10 and the soundex
code beginning in column 35. The comment ``<TT>END OF OUTPUT</TT>" should appear at the
end of the output file on the line immediately after the last name. This
comment should be written starting in column 20.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
LEE
KUHNE
EBELL
EBELSON
SCHAEFER
SCHAAK
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
         NAME                     SOUNDEX CODE
         LEE                      L000
         KUHNE                    K500
         EBELL                    E140
         EBELSON                  E142
         SCHAEFER                 S160
         SCHAAK                   S200
                   END OF OUTPUT
         |         |              |
         |         |              |__ Column 35
         |         |__ Column 20
         |__ Column 10
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-08-31</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
740||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Baudot Data Communication Code</TITLE>
<META NAME="description" CONTENT="Baudot Data Communication Code">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Baudot Data Communication Code</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Data are communicated between digital computers as sequences of bits. To
provide meaning to a sequence of bits, the bits are grouped to form a data
character and an encoding scheme, or translation table, is provided to allow
a computer system to translate each group of bits into a character. The
ideal encoding scheme will provide a unique code for every possible character
to be communicated and stored in the computer, but this requires that each
group have a sufficient number of bits for each data character.

<P>
A code used early in the data communications industry is the Baudot code.
Baudot uses five bits per character, thus allowing up to 32 distinct
characters. As a technique used to extend this limitation,
the code uses up-shift
and down-shift modes as is used on a typewriter. In the Baudot code, each
five bits transmitted must be
interpreted according to whether they are up-shifted (figures)
or down-shifted (letters). For example, the bit pattern
11111 represents up-shift and the bit pattern 11011 represents down-shift
characters. All characters transmitted after the sequence 11111 but before
the shifted sequence 11011 are treated as up-shift characters.
All characters transmitted after the sequence 11011 are treated as down-shift
characters until the pattern 11111 is recognized. The complete BAUDOT code
(modified for this problem) is shown in the table at the end of this problem.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of two parts. The first part is the Baudot character set:
line one contains the 32 down-shift characters and line two contains the 32
up-shift characters. (Note: spaces are inserted for the shift characters.)
The remainder of the input file consists of one or more messages encoded
using the Baudot code. Each message will be on a line in the input file.
Each line will consist of <TT>1</TT>'s and <TT>0</TT>'s, with no characters between the bits. There can be up to 80 bits per message. 

<P>
The input file will be terminated by end-of-file. The initial state of each message should be assumed to be in the down-shift state.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output should consist of one line of text for each message. The output
should contain the character representation, as translated using BAUDOT, of
each of the messages.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
&lt;T*O HNM=LRGIPCVEZDBSYFXAWJ UQK 
&gt;5@9 %,.+)4&amp;80:;3"$?#6!/-2' 71( 
100100110011000010011111101110000111110111101
001100001101111001001111100001001100010001100110111100000111
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
DIAL:911
NOV 5, 8AM
</PRE>

<P>

<DIV ALIGN="CENTER">
<P>
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER"><B> Bit Pattern</B></TD>
<TD ALIGN="CENTER"><B> Down-Shift Character</B></TD>
<TD ALIGN="CENTER"><B> Up-Shift Character</B></TD>
</TR>
<TR><TD ALIGN="CENTER">00000</TD>
<TD ALIGN="CENTER">&lt;</TD>
<TD ALIGN="CENTER">&gt;</TD>
</TR>
<TR><TD ALIGN="CENTER">00001</TD>
<TD ALIGN="CENTER">T</TD>
<TD ALIGN="CENTER">5</TD>
</TR>
<TR><TD ALIGN="CENTER">00010</TD>
<TD ALIGN="CENTER">*</TD>
<TD ALIGN="CENTER">@</TD>
</TR>
<TR><TD ALIGN="CENTER">00011</TD>
<TD ALIGN="CENTER">O</TD>
<TD ALIGN="CENTER">9</TD>
</TR>
<TR><TD ALIGN="CENTER">00100</TD>
<TD ALIGN="CENTER">Space</TD>
<TD ALIGN="CENTER">Space</TD>
</TR>
<TR><TD ALIGN="CENTER">00101</TD>
<TD ALIGN="CENTER">H</TD>
<TD ALIGN="CENTER">%</TD>
</TR>
<TR><TD ALIGN="CENTER">00110</TD>
<TD ALIGN="CENTER">N</TD>
<TD ALIGN="CENTER">,</TD>
</TR>
<TR><TD ALIGN="CENTER">00111</TD>
<TD ALIGN="CENTER">M</TD>
<TD ALIGN="CENTER">.</TD>
</TR>
<TR><TD ALIGN="CENTER">01000</TD>
<TD ALIGN="CENTER">=</TD>
<TD ALIGN="CENTER">+</TD>
</TR>
<TR><TD ALIGN="CENTER">01001</TD>
<TD ALIGN="CENTER">L</TD>
<TD ALIGN="CENTER">)</TD>
</TR>
<TR><TD ALIGN="CENTER">01010</TD>
<TD ALIGN="CENTER">R</TD>
<TD ALIGN="CENTER">4</TD>
</TR>
<TR><TD ALIGN="CENTER">01011</TD>
<TD ALIGN="CENTER">G</TD>
<TD ALIGN="CENTER">&amp;</TD>
</TR>
<TR><TD ALIGN="CENTER">01100</TD>
<TD ALIGN="CENTER">I</TD>
<TD ALIGN="CENTER">8</TD>
</TR>
<TR><TD ALIGN="CENTER">01101</TD>
<TD ALIGN="CENTER">P</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER">01110</TD>
<TD ALIGN="CENTER">C</TD>
<TD ALIGN="CENTER">:</TD>
</TR>
<TR><TD ALIGN="CENTER">01111</TD>
<TD ALIGN="CENTER">V</TD>
<TD ALIGN="CENTER">;</TD>
</TR>
<TR><TD ALIGN="CENTER">10000</TD>
<TD ALIGN="CENTER">E</TD>
<TD ALIGN="CENTER">3</TD>
</TR>
<TR><TD ALIGN="CENTER">10001</TD>
<TD ALIGN="CENTER">Z</TD>
<TD ALIGN="CENTER">"</TD>
</TR>
<TR><TD ALIGN="CENTER">10010</TD>
<TD ALIGN="CENTER">D</TD>
<TD ALIGN="CENTER">$</TD>
</TR>
<TR><TD ALIGN="CENTER">10011</TD>
<TD ALIGN="CENTER">B</TD>
<TD ALIGN="CENTER">?</TD>
</TR>
<TR><TD ALIGN="CENTER">10100</TD>
<TD ALIGN="CENTER">S</TD>
<TD ALIGN="CENTER">#</TD>
</TR>
<TR><TD ALIGN="CENTER">10101</TD>
<TD ALIGN="CENTER">Y</TD>
<TD ALIGN="CENTER">6</TD>
</TR>
<TR><TD ALIGN="CENTER">10110</TD>
<TD ALIGN="CENTER">F</TD>
<TD ALIGN="CENTER">!</TD>
</TR>
<TR><TD ALIGN="CENTER">10111</TD>
<TD ALIGN="CENTER">X</TD>
<TD ALIGN="CENTER">/</TD>
</TR>
<TR><TD ALIGN="CENTER">11000</TD>
<TD ALIGN="CENTER">A</TD>
<TD ALIGN="CENTER">-</TD>
</TR>
<TR><TD ALIGN="CENTER">11001</TD>
<TD ALIGN="CENTER">W</TD>
<TD ALIGN="CENTER">2</TD>
</TR>
<TR><TD ALIGN="CENTER">11010</TD>
<TD ALIGN="CENTER">J</TD>
<TD ALIGN="CENTER">'</TD>
</TR>
<TR><TD ALIGN="CENTER">11011</TD>
<TD ALIGN="CENTER">Shift Down</TD>
<TD ALIGN="CENTER">Shift Down</TD>
</TR>
<TR><TD ALIGN="CENTER">11100</TD>
<TD ALIGN="CENTER">U</TD>
<TD ALIGN="CENTER">7</TD>
</TR>
<TR><TD ALIGN="CENTER">11101</TD>
<TD ALIGN="CENTER">Q</TD>
<TD ALIGN="CENTER">1</TD>
</TR>
<TR><TD ALIGN="CENTER">11110</TD>
<TD ALIGN="CENTER">K</TD>
<TD ALIGN="CENTER">(</TD>
</TR>
<TR><TD ALIGN="CENTER">11111</TD>
<TD ALIGN="CENTER">Shift Up</TD>
<TD ALIGN="CENTER">Shift Up</TD>
</TR>
</TABLE>

<P>

<P><P>
<BR>
Table: The BAUDOT code

<P>
</DIV>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
741||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Burrows Wheeler Decoder</TITLE>
<META NAME="description" CONTENT="Burrows Wheeler Decoder">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Burrows Wheeler Decoder</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The <EM>Burrows Wheeler transform</EM> is used in one of the most effective text compression methods. We explain the transform below by using, as an example, the input text <TT>BANANA</TT>.

<P>
<DL>
<DT><STRONG>Step 1.</STRONG>
<DD>Let <I>t</I> be the size of the input text (in our example <I>t</I> = 6). We obtain a matrix <I>M</I> with dimensions 
<!-- MATH: $t \times t$ -->
<IMG
 WIDTH="38" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/741img1.gif" 
 ALT="$t \times t$">.
The first line of <I>M</I> corresponds to the input text. The <I>i</I>-th line, for 
<!-- MATH: $i = 2, \dots, t$ -->
<IMG
 WIDTH="87" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/741img1.gif" 
 ALT="$i = 2, \dots, t$">,
corresponds to a circular left shift of <I>i</I> - 1 positions with respect to the
input text. For <TT>BANANA</TT>, we obtain the following matrix <I>M</I>:
<P>
<PRE>
  1 2 3 4 5 6
1 B A N A N A
2 A N A N A B
3 N A N A B A
4 A N A B A N
5 N A B A N A
6 A B A N A N
</PRE>

<P>
<DT><STRONG>Step 2.</STRONG>
<DD>We sort the lines of matrix <I>M</I> lexicographically to obtain a new matrix <I>P</I>. In our example, we get the following matrix <I>P</I>:

<P>
<PRE>
  1 2 3 4 5 6
1 A B A N A N
2 A N A B A N
3 A N A N A B
4 B A N A N A
5 N A B A N A
6 N A N A B A
</PRE>

<P>
<DT><STRONG>Step 3.</STRONG>
<DD>The Burrows Wheeler transform for <TT>BANANA</TT> is then given by the last column (i.e. column <I>t</I>) of matrix <I>P</I> and by the number of the row of <I>P</I> that corresponds to the input text. In our example, the last column of <I>P</I> is <TT>NNBAAA</TT> and the row of <I>P</I> which contains <TT>BANANA</TT> is the fourth one. Therefore, the Burrows Wheeler transform for <TT>BANANA</TT> is the
pair (<TT>NNBAAA</TT>, <TT>4</TT>).
</DL>

<P>
The goal of this problem is to implement the <EM>Inverse Burrows Wheeler transform</EM>. Given the last column of a matrix <I>P</I> and the number of the row of <I>P</I> which contains the input text, your program should obtain the input text.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file may contain several instances of the problem, occurring consecutively in the input file, without any blank lines separating them. Each instance has two lines:

<P>
<DL COMPACT>
<DT>1.
<DD>The first line contains the entries in the last column of matrix <I>P</I>, starting from the first row. Each entry is an uppercase letter, NOT separated by any blank spaces from its neighbour entries.
<DT>2.
<DD>The second line contains the integer number corresponding to the row of <I>P</I> which contains the input text.
</DL>

<P>
The last instance of the input file consists of the two lines

<P>
<PRE>
END
0
</PRE>

<P>
You may assume that the input text of each instance contains at most 300
letters.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance of the problem, your program should print the input text as consecutive letters in a single line. The output of each instance is separated from the next by a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
NNBAAA
4
OMOEULCG
1
END
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
BANANA

COGUMELO
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
742||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Domino Game</TITLE>
<META NAME="description" CONTENT="Domino Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Domino Game</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Let us consider the following version of the Domino game:

<P>
<UL>
<LI>A domino piece has two sides, each of them numbered from 0 to 6.
<LI>The game is played with 28 pieces. A piece having both sides with the same number is called a double piece.
<LI>We will consider a two-player version of the game: each player receives a set of pieces and both sets are equal in size.
<LI>The player who received the largest-valued double piece begins the game placing down this piece, thus starting a configuration with two extremes.
<LI>Each player, in turn, has to place down one of his (her) pieces, always at one of the extremes of the current configuration, if and only if that piece has one of its sides matching the number at the outer side of the extreme piece. The piece is placed so that the sides with matching numbers are adjacent to each other. No special treatment is given to a double piece in that regard: it is placed down with one of its matching sides adjacent to the extreme piece.
<LI>Whenever a player has no piece matching one of the extremes, then he (she) passes his (her) turn.
<LI>The winner is that player who first places down all of his pieces.
</UL>

<P>
Suppose the two players are named Red and Green. Given initial sets of pieces assigned to each of Red and Green, your problem is to determine whether (i) only one of them can win, or (ii) both of them can win, or (iii) none of them can win the game. <B>Remember that this is not a problem of finding winning strategies. You just have to find out the winning possibility of each player.</B>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file may contain several instances of the problem. Each instance consists of one line in the following format:

<P>
<PRE>
n r11 r12 r21 r22 ... rn1 rn2 g11 g12 ... gn1 gn2
</PRE>

<P>
where:
<UL>
<LI><TT>n</TT> is the size of the subsets assigned to Red and Green; you may assume that 
<!-- MATH: $1 \leÂŸ n \leÂŸ 14$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/742img2.gif" 
 ALT="$1 \leÂŸ n \leÂŸ 14$">;
<LI><TT>ri1 ri2</TT> is the <I>i</I>-th piece assigned to player Red;
<LI><TT>gi1 gi2</TT> is the <I>i</I>-th piece assigned to player Green;
<LI>no pieces are repeated;
<LI>at least one player is assigned a double piece;
<LI>each of <TT>ri1 ri2 gi1 gi2</TT> is an integer number from 0 to 6.
</UL>

<P>
An arbitrary number of blank spaces may separate a number from its neighbours in the input line of an instance. Consecutive instances are NOT separated by blank lines. The last line has <I>n</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance of the problem, your program should print one line containing one of the four messages:

<P>
<PRE>
Only player Red can win
Only player Green can win
Both players can win
No player can win
</PRE>

<P>
A blank line separates the outputs of two consecutive instances.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1 6 6 0 0
2 5 5 3 4 1 5 3 5
2 1 1 2 2 3 3 4 4
1 4 5 4 4
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Only player Red can win

Both players can win

No players can win

Only player Green can win
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
743||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The MTM Machine</TITLE>
<META NAME="description" CONTENT="The MTM Machine">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The MTM Machine</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The MTM is one of the first digital machines ever designed. The aim of the machine is to process positive integer numbers, but due to the primitive nature of the machine only some numbers are accepted for processing; such numbers are called <EM>acceptable</EM>. When a number is accepted by MTM, the machine outputs another number, according to the rules stated below. When a number is not accepted, the machine simply outputs <TT>NOT ACCEPTABLE</TT>.

<P>
A number is a non empty string of decimal digits. Given two numbers <I>N</I> and <I>M</I>, when we write <I>NM</I> we mean the number formed by the digits of <I>N</I> followed immediately by the digits of <I>M</I>. For example, if <I>N</I> is 856 and <I>M</I> is 112 then <I>NM</I> is 856112. For any number <I>X</I>, the associate of <I>X</I> is the number <I>X</I>2<I>X</I>. For example, the associate of 78 is 78278.

<P>
We say that a number <I>X</I> <EM>produces</EM> a number <I>Y</I>, if number <I>X</I> is acceptable and when given as input to the machine MTM, the number returned by the machine is <I>Y</I>.

<P>
The behaviour of the MTM machine is governed by the following rules:

<P>
<DL>
<DT><STRONG>Rule 0:</STRONG>
<DD>A number containing the digit 0 (zero) is not acceptable.
<DT><STRONG>Rule 1:</STRONG>
<DD>Given any number <I>X</I> not containing a digit zero, then number 2<I>X</I> produces <I>X</I>. For example, 234 produces 34.
<DT><STRONG>Rule 2:</STRONG>
<DD>Given any pair of numbers <I>X</I>, <I>Y</I>, if <I>X</I> produces <I>Y</I> then 3<I>X</I> produces the associate of <I>Y</I>. For example, 25 produces 5 by Rule 1, so 325 produces 525.
<DT><STRONG>Rule 3:</STRONG>
<DD>No other numbers are acceptable.
</DL>

<P>
Your task here is to write a program that simulates the MTM machine.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains a set of test cases. Each test case appears in a separate line, and consists of a single positive number <I>N</I>, 
<!-- MATH: $N < 10^{32}$ -->
<I>N</I> &lt; 10<SUP>32</SUP>, to be processed by the MTM machine.
The file ends with a line containing the number 0 that should not be processed.

<P>
You may assume that the largest number output by the machine has at most
1000 digits.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, your program should write one line with the output produced by the machine if the corresponding number is acceptable; otherwise your program should write <TT>NOT ACCEPTABLE</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
20
22
42
32
33289
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
NOT ACCEPTABLE
2
NOT ACCEPTABLE
NOT ACCEPTABLE
89289289289
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
744||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Triangular Museum</TITLE>
<META NAME="description" CONTENT="Triangular Museum">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Triangular Museum</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A museum has <I>K</I><SUP>2</SUP> triangular rooms, where (
<!-- MATH: $0 \leÂŸ K \leÂŸ 10$ -->
<IMG
 WIDTH="93" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/744img1.gif" 
 ALT="$0 \leÂŸ K \leÂŸ 10$">). All rooms have the same size and there is exactly one guard in each room. The shape of the museum itself is also triangular, as exemplified in Figure 1, where a museum with 3<SUP>2</SUP> triangular rooms is shown. The names <TT>AA</TT>, <TT>BB</TT>, <TT>CC</TT>, ... are guard names (a guard name is a sequence of at most 10 letters). Thus
guard <TT>DD</TT> is at the top room of the initial configuration presented in Figure 1.

<P>
Each two adjacent rooms are separated by exactly one wall, which has a door that
connects the rooms. Since the guards would also like to appreciate the art in the museum, they agree to exchange their positions, thus forming a new configuration, previously agreed upon. The order in which the guards move to their new positions obey a few rules. These rules, for security reasons, do not allow guards to leave their positions all at the same time.
The only way they can move is by exchanging their positions with guards in adjacent rooms, one pair at a time.

<P>
The objective of this problem is to find a sequence of exchanges between guards that leads to the new configuration.

<P>
<PRE>
       Initial Configuration         New Configuration
               /\                           /\
              /DD\                         /AA\
             /Â—Â—Â—____Â—\                       /____Â—Â—Â—Â—\
            /\    /\                     /\    /\
           /FF\AA/CC\        ===&gt;       /BB\CC/DD\
          /____\Â—Â—Â—Â—/Â—____Â—Â—Â—\                 /Â—____\Â—Â—Â—/____\Â—Â—Â—Â—
         /\    /\    /\               /\    /\    /\
        /BB\EE/II\GG/HH\             /EE\FF/GG\HH/II\
       /____\Â—Â—Â—Â—/Â—Â—____Â—Â—\/Â—Â—Â—Â—____\           /____Â—Â—Â—Â—\/____\Â—Â—Â—Â—/____\Â—Â—Â—Â—

                           Figure 1.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file may contain several instances of the problem. Each instance consists of two lines: the first contains the integer <I>K</I>; the second line contains the sequence of <I>K</I><SUP>2</SUP> guard names in the initial configuration (from the top to bottom and left to right) followed by the <I>K</I><SUP>2</SUP> guard names in the new configuration (also from the top to bottom and left to right).

<P>
There is at least one blank space between these strings of letters. The last line of the input file contains only the value <TT>0</TT> (zero) which should not be processed.

<P>
Instances are NOT separated by blank lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance in the input file, the program must write the value <I>N</I> in a line, where <I>N</I> is the number of exchanges performed between guards in adjacent rooms, followed by <I>N</I> lines, <I>N</I> ÂŸ&lt; 4<I>K</I><SUP>3</SUP>, each with the names of two guards been exchanged; the names of the guards are separated by a blank space. Two instances are separated by a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3
DD FF AA CC BB EE II GG HH           AA BB CC DD EE FF GG HH II
2
D A B C                              A B C D
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
6
GG II
HH II
EE BB
DD AA
BB FF
DD CC

3
A B
A D
C D
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
745||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Numeric Puzzles Again!</TITLE>
<META NAME="description" CONTENT="Numeric Puzzles Again!">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Numeric Puzzles Again!</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A different and exciting game is invading all the toy stores around Latin America. It looks the same as a children's jigsaw, but the pieces are constructed entirely using numbers...

<P>
The pieces may have non-uniform shapes, but they all must construct a perfect 
<!-- MATH: $N \times N$ -->
<IMG
 WIDTH="58" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/745img1.gif" 
 ALT="$N \times N$">
image. For instance, a 5 <IMG
 WIDTH="27" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/745img1.gif" 
 ALT="$\times 5$">
image may be this:

<P>
<PRE>
11223
11223
12233
11233
11133
</PRE>

<P>
Made with three pieces:

<P>
<PRE>
11
11
1
11
111

 22
 22
22
 2

 3
 3
33
33
33
</PRE>

<P>
Your problem is to write a program that solves the puzzle using the apropriate pieces. 

<P>
Notice that once a solution is found, it can be rotated, giving rise to three other solutions. However, a given piece must not be rotated separately in order for you to solve the puzzle.

<P>
In addition to the four rotations, a puzzle may have more than one ``true'' solution. You may assume, though, that none of test cases will contain a puzzle with more than one true solution.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file may contain several instances of the problem. Each instance has the following lines, all consecutive in the file:

<P>
<UL>
<LI>One line with an integer giving the side length of the puzzle (at most 20).
<LI>One line with the number of pieces (at most 9).
<LI>Several lines describing the pieces. Each piece is made up of some combination of the same digit (1...9). The pieces are left-aligned, and need not appear in any particular order.
</UL>

<P>
Blank spaces may be used at the beginning of a line and within the pieces in order to define the piece's shape.

<P>
Each instance ends with a line containing only the <TT>#</TT> character. The input file ends with a line containing only the integer <TT>0</TT> (zero).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
You must display the right puzzle as output. In order to find the right puzzle, you must sum the literal values of the rows of each possible rotation of the image and return the image with the largest total sum. For instance, for the puzzle

<P>
<PRE>
2 2 3
2 3 3
1 1 3
</PRE>

<P>
the sums are: 223 + 233 + 113 = 569, 333 + 231 + 221 = 785, 311 + 332 + 322 = 965 and 122 + 132 + 333 = 587. Thus the right puzzle is

<P>
<PRE>
3 1 1
3 3 2
3 2 2
</PRE>

<P>
The output of each instance must end with a blank line.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
7
6
3333
33
3333
 33
 33
7  7
7  7
7777
88888
 6
666
 66
  22
222
  2
  5
 55
 55
555
5 5
#
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
8777333
8733333
8733323
8777323
8655222
6665552
6655555
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
746||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Polygon Visibility</TITLE>
<META NAME="description" CONTENT="Polygon Visibility">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Polygon Visibility</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
As a building block of a new graphic tool, a visibility function has to be designed: Given two convex polygons, it is necessary to identify the set of points <B>in the plane</B> from which the visibility of the second polygon is obstructed by the first one. More precisely, you are looking for the points <I>P</I>, not in the interior of the first polygon, for which there is a point
<I>Q</I> in the second polygon such that the <EM>interior</EM> of the line segment 
<!-- MATH: $\overline{PQ}$ -->
<IMG
 WIDTH="32" HEIGHT="38" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/746img1.gif" 
 ALT="$\overline{PQ}$">
contains some point
of the first polygon. Your task is to write a program that implements that building block.

<P>
You may assume that the two polygons have no common points and that neither one is degenerate.

<P>
The set of points from which the visibility is obstructed can be described by a finite set of finite segments together with two infinite lines. Remember that the points in the interior of
the first polygon are not included in the set of points from which the visibility is obstructed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several instances. Each instance consists of the following consecutive lines:

<P>
<UL>
<LI>One line containing two positive integers <I>N</I> and <I>M</I> separated by one or more blank spaces. These are the number of vertices of the first and the second polygons. You may assume 
<!-- MATH: $3 \leÂŸ N, M \leÂŸ 10000$ -->
<IMG
 WIDTH="145" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/746img1.gif" 
 ALT="$3 \leÂŸ N, M \leÂŸ 10000$">.
<LI><I>N</I> lines containing each a pair of coordinates in the <I>XY</I> plane, separated by one or more blank spaces. These are the vertices of the first polygon. Every coordinate is an integer number in the range 1..10000.
<LI><I>M</I> lines containing each a pair of coordinates in the <I>XY</I> plane, separated by one or more blank spaces. These are the vertices of the second polygon.
</UL>

<P>
The vertices of each polygon appear in clockwise order. The input file ends with a line containing <TT>0 0</TT> and should not be processed.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each instance, you must write a line that identifies that instance, followed by a description of the set of points from which the visibility is obstructed. The description is formed by one
of the infinite lines, the vertices that define the finite segments, and the second infinite line.

<P>
Each line and each vertex must appear in a separate line of output. Each infinite line must be represented by the slope of the line, rounded to three digits to the right of the decimal
point. If the line is vertical, the word <TT>VERTICAL</TT> must replace its slope value. Each vertex must be represented with its coordinates, separated by a space. To avoid ambiguity, the
vertices must be given in clockwise order with respect to the first polygon.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3 3
10 20
20 20
20 10
10 10
7 5
5 7
4 3
20 19
25 15
20 10
15 15
10 20
10 10
5 15
0 0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Instance 1
VERTICAL
10 20
20 20
20 10
0.000
Instance 2
1.000
15 15
20 19
25 15
20 10
-1.000
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
747||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Grid Soccer</TITLE>
<META NAME="description" CONTENT="Grid Soccer">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Grid Soccer</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
An important soccer match is about to begin between long time rival teams A and B. Team B won the toss for the ball, so a player of team B is placed exactly at the center-field position, ready for the first kick. In the defensive field of team A there is a number of players from that team in strategic positions, but no other player from team B is in that area.

<P>
At that moment, the coach for team B realizes that, if his team could move the ball really fast, the defence players of team A would have time to reach only a limited area around their original locations. Hence, if he could compute the ideal location for his players so that they could take advantage of that situation, performing the shortest sequence of kicks to reach
the goal without entering the area covered by a player of team A, then the only important thing to consider would be the initial positions of team A players and their reachable areas.

<P>
Team B hires you to develop a computer program to help their coach in such a situation. The defensive field of team A is represented by a square area in the <I>XY</I> plane, with the center-field position at location (0, 0), and the mid-field line coinciding with the <I>X</I> axis as described in Figure 1. This square area is partitioned into a grid with 2<I>s</I> squares in each
dimension (<I>s</I> is given), and the goal towards which team B attacks is on the <I>Y</I> = 2<I>s</I> line, occupying <I>g</I> squares to each side of the <I>Y</I> axis.

<P>
<DIV ALIGN="CENTER">

<img src=p747.gif>

<P>

<P>
<BR>
Figure 1: Defensive field of team A.
</DIV>

<P>
Team A players are located at grid intersections, and each one can intercept the ball if and only if it enters any square within <I>p</I> around its position, stopping the play (that is, each player covers an area of (2<I>p</I>)<SUP>2</SUP>). No team player from team A will be at a position to cover the center-field, (0, 0).

<P>
Your program should identify if there is a possibility of placing up to <I>n</I> players from team B (<EM>not</EM> including the center-field one) in grid intersections, in order to move the ball from the center field position to the goal of team A, avoiding any square of the grid reachable by a team A player. Assume that the ball can move only parallel to the <I>X</I> or <I>Y</I> axis. If
it is not possible, notify saying: ``<TT>Situation Impossible</TT>''. If there is a solution, then your program should output the solution that uses the minimum number of players (identifying the position of the players). If there are more than one possible solutions, your program
should output any solution where the ball runs the shortest distance.

<P>
Assume that the ball can move over the border of the field, even over the border opposite to the center field (if these borders are not covered by players of team A, of course).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input consists of a sequence of scenarios followed by a line starting with <TT>0</TT>, which must not be processed. Each scenario consists of one line containing four integers <I>s</I>, <I>g</I>, <I>p</I> and <I>n</I>, where

<P>
<UL>
<LI><I>s</I> is the number of grid squares, in each side of the <I>Y</I> axis; assume 
<!-- MATH: $0 < s < 10$ -->
0 &lt; <I>s</I> &lt; 10.
<LI><I>g</I> is the size of the goal, in number of grid squares in each side of the <I>Y</I> axis; assume 0 &lt; <I>g</I> &lt; <I>s</I>.
<LI><I>p</I> is a player's reach, in number of grid squares; assume 0 &lt; <I>p</I> &lt; <I>s</I>.
<LI><I>n</I> is the number of team A players in the defense field of team A; assume 
<!-- MATH: $0 \leÂŸ n < 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/747img1.gif" 
 ALT="$0 \leÂŸ n < 100$">.
</UL>

<P>
These four integers are followed by a sequence of <I>n</I> pairs of integers defining the positions of team A players in the defense field of team A. There may be any number of blank spaces (at least one) between the numbers in the input.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output consists of a line identifying the scenario followed by a line saying either

<P>
<UL>
<LI><TT>Situation Impossible</TT>, or
<LI><TT>Goal with </TT><I>k</I><TT> kicks:</TT> 
<!-- MATH: $(x_1, y_1)(x_2, y_2) \dots (x_{k+1}, y_{k+1})$ -->
<IMG
 WIDTH="231" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/747img1.gif" 
 ALT="$(x_1, y_1)(x_2, y_2) \dots (x_{k+1}, y_{k+1})$">,
where 
<!-- MATH: $(x_i, y_i)$ -->
(<I>x</I><SUB><I>i</I></SUB>, <I>y</I><SUB><I>i</I></SUB>), <IMG
 WIDTH="43" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/747img1.gif" 
 ALT="$i \leÂŸ k$">,
indicates
the position of the <I>i</I>-th player of team B to kick the ball to accomplish the goal in <I>k</I> plays, and 
<!-- MATH: $(x_{k+1}, y_{k+1})$ -->
(<I>x</I><SUB><I>k</I>+1</SUB>, <I>y</I><SUB><I>k</I>+1</SUB>) is the final point the ball reaches (which should be over the goal line). Note that <I>x</I><SUB>1</SUB> = 0 and <I>y</I><SUB>1</SUB> = 0, and 
<!-- MATH: $y_{k+1}= 2s$ -->
<I>y</I><SUB><I>k</I>+1</SUB>= 2<I>s</I>.
</UL>

<P>
A blank line separates the output of two scenarios.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4 2 1 2    -2 8 1 8
7 2 3 3     0 7 6 10 0 9
9 3 3 1    -5 9
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Scenario 1.
Situation Impossible

Scenario 2.
Goal with 3 kicks: (0,0)(-4,0)(-4,14)(-2,14)

Scenario 3.
Goal with 1 kicks: (0,0)(0,18)
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
748||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Exponentiation</TITLE>
<META NAME="description" CONTENT="Exponentiation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Exponentiation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Problems involving the computation of exact values of very large magnitude
and precision are common. For example, the computation of the national debt
is a taxing experience for many computer systems.

<P>
This problem requires that you write a program to compute the exact value of
<I>R</I><SUP><I>n</I></SUP> where <I>R</I> is a real number (
<!-- MATH: $0.0 < R < 99.999$ -->
0.0 &lt; <I>R</I> &lt; 99.999) and <I>n</I> is an integer such
that 
<!-- MATH: $0 < n \le 25$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/748img1.gif" 
 ALT="$0 < n \le 25$">.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of a set of pairs of values for <I>R</I> and <I>n</I>. The <I>R</I> value will occupy columns 1 through 6, and the <I>n</I> value will be in columns 8 and 9.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output will consist of one line for each line of input giving the exact
value of <I>R</I><SUP><I>n</I></SUP>. Leading zeros and insignificant trailing zeros should be suppressed in the output.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
95.123 12
0.4321 20
5.1234 15
6.7592  9
98.999 10
1.0100 12
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
548815620517731830194541.899025343415715973535967221869852721
.00000005148554641076956121994511276767154838481760200726351203835429763013462401
43992025569.928573701266488041146654993318703707511666295476720493953024
29448126.764121021618164430206909037173276672
90429072743629540498.107596019456651774561044010001
1.126825030131969720661201
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
749||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Machine Repair Simulation</TITLE>
<META NAME="description" CONTENT="Machine Repair Simulation">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Machine Repair Simulation</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A system is composed of 1, 2, or 3 machines and a repairman responsible for
maintaining these machines. Normally, the machines are running and producing
a product. At random points in time, the machines fail and are fixed by the
repairman. If a second or third machine fails while the repairman is busy
fixing the first machine, these machines will wait on the services of the
repairman in a first come, first served order. When repair on a machine is
complete, the machine will begin running again and producing a product. The
repairman will then repair the next machine waiting. When all machines are
running, the repairman becomes idle.

<P>
Write a program that will simulate this system for a fixed period of time and
calculate the fraction of time the machines are busy (utilization) and the
fraction of time the repairman is busy (utilization). Machines are busy when
producing parts and the repairman is busy when repairing machines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
The input file is composed of three parts each separated by a header record.
The first part is a list of 50 random machine running times until failure.
The second part is a list of 50 random machine repair times. The third part
is a list of the cases to be simulated. Each case specifies the length of
the simulation and the number of machines assigned to the repairman. Cases
end with the specification of a 0 length and an assignment of 0 machines.
Each case will use the same random machine running times and repair times,
starting at the beginning.

<P>
A sample input file and the corresponding output file (print results accurately rounded to 3
decimal places) is provided below. Diagrams are also provided to illustrate
the simulation process.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Machine running times (10 five column fields per record)
 7.0  4.5 13.0 10.5  3.0 12.0 ...................
Machine repair times (10 five column fields per record)
 9.5  2.5  4.5 12.0  5.7  1.5 ...................
Cases (2 five column fields per record)
 20.0    1
 20.0    3
   .     .
   .     .
  0.0    0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
       No of     Utilization
Case Machines Machine Repairman

 1       1       .525   .475
 2       3       .558   .775
 .       .         .      .
 .       .         .      .
</PRE>

<P>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR> 

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Case 1 Simulation</A>&nbsp;</FONT>
</H2>

<P>
<img src=p749a.gif>

<P>

<P>
<BR>

<P>
<PRE>
Machine Utilization   = (7 + 3.5)/20 = .525
Repairman Utilization =     (9.5)/20 = .475
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">
Case 2 Simulation</A>&nbsp;</FONT>
</H2>

<P>
<img src=p749b.gif>

<P>

<P>
<BR>

<P>
<PRE>
Machine Utilization   = ((7+3)+(4.5+6)+(13))/(3*20) = .558
Repairman Utilization =                   (15.5)/20 = .775
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
750||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>8 Queens Chess Problem</TITLE>
<META NAME="description" CONTENT="8 Queens Chess Problem">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
8 Queens Chess Problem</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
In chess it is possible to place eight queens on the board so that no one
queen can be taken by any other. Write a program that will determine all
such possible arrangements for eight queens given the initial position of one
of the queens.

<P>
Do not attempt to write a program which evaluates every possible 8
configuration of 8 queens placed on the board. This would require 8<SUP>8</SUP>
evaluations and would bring the system to its knees. There will be a
reasonable run time constraint placed on your program. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains the number of datasets, and it's followed by a blank line.
Each dataset
will be two numbers separated by a blank. The numbers represent the square
on which one of the eight queens must be positioned. A valid square will be
represented; it will not be necessary to validate the input.

<P>
To standardize our notation, assume that the upper left-most corner of the
board is position (1,1). Rows run horizontally and the top row is row 1.
Columns are vertical and column 1 is the left-most column. Any reference to
a square is by row then column; thus square (4,6) means row 4, column 6.

<P>Each dataset is separated by a blank line.
<p>
<DIV ALIGN="CENTER">

<img src=p750.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Output for each dataset will consist of a one-line-per-solution representation.

<P>
Each solution will be sequentially numbered <IMG
 WIDTH="55" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/750img1.gif" 
 ALT="$1 \dots N$">.
Each solution will
consist of 8 numbers. Each of the 8 numbers will be the ROW coordinate for
that solution. The column coordinate will be indicated by the order in which
the 8 numbers are printed. That is, the first number represents the ROW in
which the queen is positioned in column 1; the second number represents the
ROW in which the queen is positioned in column 2, and so on.

<P>
The sample input below produces 4 solutions. The full 8<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/750img1.gif" 
 ALT="$\times$">8 representation of each solution is shown below.

<P>
<DIV ALIGN="CENTER">
<B>DO NOT SUBMIT THE BOARD MATRICES AS PART OF YOUR SOLUTION!</B>
</DIV>

<P>
<PRE>
   SOLUTION 1           SOLUTION 2           SOLUTION 3           SOLUTION 4

1 0 0 0 0 0 0 0      1 0 0 0 0 0 0 0      1 0 0 0 0 0 0 0      1 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0      0 0 0 0 0 0 1 0      0 0 0 0 0 1 0 0      0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0      0 0 0 1 0 0 0 0      0 0 0 0 0 0 0 1      0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 1      0 0 0 0 0 1 0 0      0 0 1 0 0 0 0 0      0 0 0 0 0 1 0 0
0 1 0 0 0 0 0 0      0 0 0 0 0 0 0 1      0 0 0 0 0 0 1 0      0 0 1 0 0 0 0 0
0 0 0 1 0 0 0 0      0 1 0 0 0 0 0 0      0 0 0 1 0 0 0 0      0 0 0 0 0 0 1 0
0 0 0 0 0 1 0 0      0 0 0 0 1 0 0 0      0 1 0 0 0 0 0 0      0 1 0 0 0 0 0 0
0 0 1 0 0 0 0 0      0 0 1 0 0 0 0 0      0 0 0 0 1 0 0 0      0 0 0 1 0 0 0 0
</PRE>

<P>
Submit only the one-line, 8 digit representation of each solution as described
earlier. Solution #1 below indicates that there is a queen at Row 1, Column 1;
Row 5, Column 2; Row 8, Column 3; Row 6, Column 4; Row 3,Column 5; ... Row 4,
Column 8.

<P>
Include the two lines of column headings as shown below in the sample output and print the solutions in lexicographical order.

<P>Print a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

1 1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
SOLN       COLUMN
 #      1 2 3 4 5 6 7 8

 1      1 5 8 6 3 7 2 4
 2      1 6 8 3 7 4 2 5
 3      1 7 4 6 8 2 5 3
 4      1 7 5 8 2 4 6 3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
751||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Triangle War</TITLE>
<META NAME="description" CONTENT="Triangle War">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Triangle War</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Triangle War is a two-player game played on the following triangular grid:

<P>
<DIV ALIGN="CENTER">

<img src=p751a.gif>
</DIV>

<P>
Two players, A and B, take turns filling in any dotted line connecting two dots, with A starting first. Once a line is filled, it cannot be filled again. If the line filled by a player completes one or more triangles, she owns the completed triangles and she is awarded another turn (i.e. the opponent skips a
turn). The game ends after all dotted lines are filled in, and the player with the most triangles wins the game. The difference in the number of triangles owned by the two players is not important.

<P>

<P>
<BR>
For example, if A fills in the line between 2 and 5 in the partial game on the left below:

<P>
<DIV ALIGN="CENTER">

<img src=p751b.gif>
</DIV>

<P>
Then, she owns the triangle labelled A and takes another turn to fill in the line between 3 and 5. B can
now own 3 triangles (if he wishes) by filling in the line between 2 and 3, then the one between 5 and 6,
and finally the one between 6 and 9. B would then make one more move before it is A's turn again.

<P>

<P>
<BR>
In this problem, you are given a number of moves that have already been made. From the partial
game, you should determine which player will win assuming that each player plays a perfect game from
that point on. That is, assume that each player always chooses the play that leads to the best possible
outcome for himself/herself.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will be given a number of games in the input. The first line of input is a positive integer indicating
the number of games to follow. Each game starts with an integer 
<!-- MATH: $6 ÂŸ\le m ÂŸ\le 18$ -->
<IMG
 WIDTH="92" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/751img1.gif" 
 ALT="$6 ÂŸ\le m ÂŸ\le 18$">
indicating the number of
moves that have been made in the game. The next <I>m</I> lines indicate the moves made by the two players
in order, each of the form <I>i j</I> (with <I>i</I> &lt; <I>j</I>) indicating that the line between <I>i</I> and <I>j</I> is filled in that
move. You may assume that all given moves are legal.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each game, print the game number and the result on one line as shown below. If A wins, print the
sentence ``<TT>A wins.</TT>'' If B wins, print ``<TT>B wins.</TT>''

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
4
6
2 4
4 5
5 9
3 6
2 5
3 5
7
2 4
4 5
5 9
3 6
2 5
3 5
7 8
6
1 2
2 3
1 3
2 4
2 5
4 5
10
1 2
2 5
3 6
5 8
4 7
6 10
2 4
4 5
4 8
7 8
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Game 1: B wins.
Game 2: A wins.
Game 3: A wins.
Game 4: B wins.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
752||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Unscrambling Images</TITLE>
<META NAME="description" CONTENT="Unscrambling Images">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Unscrambling Images</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Quadtrees are commonly used for encoding digital images in a compact form. Given an 
<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/752img1.gif" 
 ALT="$n \times n$">
image
(where <I>n</I> is a power of 2, 
<!-- MATH: $1 \leÂŸ n \leÂŸ 16$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/752img1.gif" 
 ALT="$1 \leÂŸ n \leÂŸ 16$">), its quadtree encoding is computed as follows. Start with a
quadtree with exactly one node, namely the root, and associate with this node the 
<!-- MATH: $n \times n$ -->
<IMG
 WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/752img1.gif" 
 ALT="$n \times n$">
square region
for the entire image. Then the following is performed recursively:

<P>
<DL COMPACT>
<DT>1.
<DD>If every pixel in the region associated with the current node has an intensity value of <I>p</I>, then the
node is made a leaf and it is assigned an associated value of <I>p</I>.
<DT>2.
<DD>Otherwise, four nodes are added as children of the current node. The region is divided into four
equal (square) quadrants and each quadrant is assigned to one child node. The algorithm recurses
on each of the children nodes.
</DL>

<P>
When the process terminates, we obtain a quadtree in which every internal node has four children.
Every leaf node has an associated value representing the intensity of the region corresponding to the
leaf node. An example of an image and its quadtree encoding is shown below.

<P>
<DIV ALIGN="CENTER">

<img src=p752a.gif>
</DIV>

<P>
We have assumed that the four children represent, from left to right, the upper left, upper right, lower
left, and lower right quadrants, respectively.

<P>
To easily identify a node in a quadtree, we assign a number to each node by the following rules:

<P>
<DL COMPACT>
<DT>1.
<DD>The root is numbered 0.
<DT>2.
<DD>If the number of a node is <I>k</I>, then its children, from left to right, are numbered 4<I>k</I>+1, 4<I>k</I>+2, 4<I>k</I>+3, 4<I>k</I> + 4.
</DL>

<P>
Images encoded as quadtrees can be encrypted by a secret password as follows: whenever a subdivision
is performed, the four branches are reordered. The reordering may be different at each node, but it is
completely determined by the password and the node number.

<P>
Unfortunately, some people use the ``save password'' feature in the encoding program and use the same
password for multiple images. By observing the encoding of a well-chosen test image, any image encoded with the same password can be decoded without the password. In this test image, each pixel has
a distinct intensity from 0 to <I>n</I><SUP>2</SUP> - 1 arranged from left-to-right, top-to-bottom in increasing order. An example for <I>n</I> = 16 is given below:

<P>
<DIV ALIGN="CENTER">

<img src=p752b.gif>
</DIV>

<P>
You managed to gain access to the encoding program and used it to encode the test image. Given the
quadtree encoding of the test image, write a program to decode any other image encoded with the same
password.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will be given a number of cases in the input. The first line of input consists of a positive integer
indicating the number of test cases to follow. Each test case starts with a line containing <I>n</I>, followed by
the quadtree encoding of the test image and the quadtree encoding of the secret image to be decoded.
Each quadtree encoding starts with a line containing a positive integer <I>m</I> indicating the number of leaf
nodes in the tree. The next <I>m</I> lines are of the form:

<P>
<PRE>
k intensity
</PRE>

<P>
which specifies that the node numbered <I>k</I> is a leaf node with the specified intensity as the associated leaf
value. Nodes not specified are either internal nodes or absent in the quadtree. You may assume that
all intensities are between 0 and 255, inclusively. You may also assume that each quadtree encoding is
a valid output obtained from the encoding algorithm described above.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the case number followed by a blank line. Then, print the intensities of the
pixels of the decoded image one row at a time. Print each intensity right-justified in a field of width 4,
with no extra spaces between fields. Insert a blank line between cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
2
4
1 3
2 2
3 0
4 1
4
1 23
2 123
3 253
4 40
4
16
5 8
6 9
7 13
8 12
9 0
10 4
11 1
12 5
13 2
14 3
15 7
16 6
17 10
18 11
19 15
20 14
7
2 10
3 20
4 30
5 41
6 42
7 44
8 43
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1

 253  40
 123  23

Case 2

  10  10  20  20
  10  10  20  20
  41  42  30  30
  43  44  30  30
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
753||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Plug for UNIX</TITLE>
<META NAME="description" CONTENT="A Plug for UNIX">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
A Plug for UNIX</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are in charge of setting up the press room for the inaugural meeting of the United Nations Internet
eXecutive (UNIX), which has an international mandate to make the free flow of information and ideas
on the Internet as cumbersome and bureaucratic as possible.

<P>

<P>
<BR>
Since the room was designed to accommodate reporters and journalists from around the world, it is
equipped with electrical receptacles to suit the different shapes of plugs and voltages used by appliances
in all of the countries that existed when the room was built. Unfortunately, the room was built many
years ago when reporters used very few electric and electronic devices and is equipped with only one
receptacle of each type. These days, like everyone else, reporters require many such devices to do their
jobs: laptops, cell phones, tape recorders, pagers, coffee pots, microwave ovens, blow dryers, curling
irons, tooth brushes, etc. Naturally, many of these devices can operate on batteries, but since the
meeting is likely to be long and tedious, you want to be able to plug in as many as you can.

<P>

<P>
<BR>
Before the meeting begins, you gather up all the devices that the reporters would like to use, and
attempt to set them up. You notice that some of the devices use plugs for which there is no receptacle.
You wonder if these devices are from countries that didn't exist when the room was built. For some
receptacles, there are several devices that use the corresponding plug. For other receptacles, there are
no devices that use the corresponding plug.

<P>

<P>
<BR>
In order to try to solve the problem you visit a nearby parts supply store. The store sells adapters that
allow one type of plug to be used in a different type of outlet. Moreover, adapters are allowed to be
plugged into other adapters. The store does not have adapters for all possible combinations of plugs
and receptacles, but there is essentially an unlimited supply of the ones they do have.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of several case. The first line of the input contains the number of cases, and it's followed
bya  blank line.
The first line of each case contains a single positive integer <I>n</I> (
<!-- MATH: $1 \leÂŸ n \leÂŸ 100$ -->
<IMG
 WIDTH="96" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/753img1.gif" 
 ALT="$1 \leÂŸ n \leÂŸ 100$">)
indicating the number of receptacles in the room. The next <I>n</I> lines list the receptacle types found in the
room. Each receptacle type consists of a string of at most 24 alphanumeric characters. The next line
contains a single positive integer <I>m</I> (
<!-- MATH: $1 \leÂŸ m \leÂŸ 100$ -->
<IMG
 WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/753img1.gif" 
 ALT="$1 \leÂŸ m \leÂŸ 100$">)
indicating the number of devices you would like to
plug in. Each of the next <I>m</I> lines lists the name of a device followed by the type of plug it uses (which
is identical to the type of receptacle it requires). A device name is a string of at most 24 alphanumeric
characters. No two devices will have exactly the same name. The plug type is separated from the
device name by a space. The next line contains a single positive integer <I>k</I> (
<!-- MATH: $1 \leÂŸ k \leÂŸ 100$ -->
<IMG
 WIDTH="96" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/753img1.gif" 
 ALT="$1 \leÂŸ k \leÂŸ 100$">)
indicating the
number of different varieties of adapters that are available. Each of the next <I>k</I> lines describes a variety
of adapter, giving the type of receptacle provided by the adapter, followed by a space, followed by the type of plug.

<P>There's a blank line between test cases.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print a line containing a single non-negative integer indicating the smallest number of devices that cannot be plugged in. Print a blank line between cases.
<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

4
A
B
C
D
5
laptop B
phone C
pager B
clock B
comb X
3
B X
X A
X D
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
1
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
754||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Treasure Hunt</TITLE>
<META NAME="description" CONTENT="Treasure Hunt">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Treasure Hunt</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Archeologists from the Antiquities and Curios Museum (ACM) have flown to Egypt to examine the
great pyramid of Key-Ops. Using state-of-the-art technology they are able to determine that the lower
floor of the pyramid is constructed from a series of straightline walls, which intersect to form numerous
enclosed chambers. Currently, no doors exist to allow access to any chamber. This state-of-the-art
technology has also pinpointed the location of the treasure room. What these dedicated (and greedy)
archeologists want to do is blast doors through the walls to get to the treasure room. However, to
minimize the damage to the artwork in the intervening chambers (and stay under their government
grant for dynamite) they want to blast through the minimum number of doors. For structural integrity
purposes, doors should only be blasted at the midpoint of the wall of the room being entered. You are
to write a program which determines this minimum number of doors.

<P>

<P>
<BR>
An example is shown below:

<P>
<DIV ALIGN="CENTER">

<img src=p754.gif>
</DIV>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input will consist of several cases.The first line of the input contains the number of cases, and it's followed bya blank line.

<p>The first line of each case will be an integer <I>n</I> (
<!-- MATH: $0 \leÂŸ n \leÂŸ 30$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/754img1.gif" 
 ALT="$0 \leÂŸ n \leÂŸ 30$">)
specifying number of
interior walls, followed by <I>n</I> lines containing integer endpoints of each wall 
<!-- MATH: $x_1 y_1 x_2 y_2$ -->
<I>x</I><SUB>1</SUB> <I>y</I><SUB>1</SUB> <I>x</I><SUB>2</SUB> <I>y</I><SUB>2</SUB>. The 4 enclosing
walls of the pyramid have fixed endpoints at (0,0), (0,100), (100,100) and (100,0) and are <EM>not</EM> included
in the list of walls. The interior walls always span from one exterior wall to another exterior wall and
are arranged such that no more than two walls intersect at any point. You may assume that no two
given walls coincide. After the listing of the interior walls there will be one final line containing the
floating point coordinates of the treasure in the treasure room (guaranteed not to lie on a wall).

<P>Different cases are separated by a blank line.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each case, print a single line listing the minimum number of doors which need to be created, in the format shown below. Print a blank line between cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

7
20 0 37 100
40 0 76 100
85 0 0 75
100 90 0 90
0 71 100 61
0 14 100 38
100 47 47 100
54.5 55.4
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Number of doors = 2
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
755||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>487-3279</TITLE>
<META NAME="description" CONTENT="487-3279">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
487-3279</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Businesses like to have memorable telephone numbers. One way to make a telephone number memorable
is to have it spell a memorable word or phrase. For example, you can call the University of Waterloo by
dialing the memorable TUT-GLOP. Sometimes only part of the number is used to spell a word. When
you get back to your hotel tonight you can order a pizza from Gino's by dialing 310-GINO. Another
way to make a telephone number memorable is to group the digits in a memorable way. You could
order your pizza from Pizza Hut by calling their ``three tens'' number 3-10-10-10.

<P>

<P>
<BR>
The standard form of a telephone number is seven decimal digits with a hyphen between the third and
fourth digits (e.g. 888-1200). The keypad of a phone supplies the mapping of letters to numbers, as follows:

<P>

<P>
<BR>
A, B, and C map to 2

<P>
D, E, and F map to 3

<P>
G, H, and I map to 4

<P>
J, K, and L map to 5

<P>
M, N, and O map to 6

<P>
P, R, and S map to 7

<P>
T, U, and V map to 8

<P>
W, X, and Y map to 9

<P>

<P>
<BR>
There is no mapping for Q or Z. Hyphens are not dialed, and can be added and removed as necessary.
The standard form of TUT-GLOP is 888-4567, the standard form of 310-GINO is 310-4466, and the
standard form of 3-10-10-10 is 310-1010.

<P>

<P>
<BR>
Two telephone numbers are equivalent if they have the same standard form. (They dial the same number.)

<P>

<P>
<BR>
Your company is compiling a directory of telephone numbers from local businesses. As part of the
quality control process you want to check that no two (or more) businesses in the directory have the same telephone number.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input contains the number of datasets in the input. A blank line follows. The first line of each dataset specifies the number of telephone numbers
in the directory (up to 100,000) as a positive integer alone on the line. The remaining lines list the
telephone numbers in the directory, with each number alone on a line. Each telephone number consists
of a string composed of decimal digits, uppercase letters (excluding Q and Z) and hyphens. Exactly
seven of the characters in the string will be digits or letters. There's a blank line between datasets.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
Generate a line of output for each telephone number that appears more than once in any form. The
line should give the telephone number in standard form, followed by a space, followed by the number
of times the telephone number appears in the directory. Arrange the output lines by telephone number
in ascending lexicographical order. If there are no duplicates in the input print the line:

<P>
<PRE>
No duplicates.
</PRE>

<P>Print a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
1

12
4873279
ITS-EASY
888-4567
3-10-10-10
888-GLOP
TUT-GLOP
967-11-11
310-GINO
F101010
888-1200
-4-8-7-3-2-7-9-
487-3279
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
310-1010 2
487-3279 4
888-4567 3
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
756||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Biorhythms</TITLE>
<META NAME="description" CONTENT="Biorhythms">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Biorhythms</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Some people believe that there are three cycles in a person's life that start the day he or she is born.
These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths
23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle,
a person performs at his or her best in the corresponding field (physical, emotional or mental). For
example, if it is the mental curve, thought processes will be sharper and concentration will be easier.

<P>

<P>
<BR>
Since the three cycles have different periods, the peaks of the three cycles generally occur at different
times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the
same day) for any person. For each cycle, you will be given the number of days from the beginning of
the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a
date expressed as the number of days from the beginning of the current year. You task is to determine
the number of days from the given date to the next triple peak. The given date is not counted. For
example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a
triple peak occurs on the given date, you should give the number of days to the next occurrence of a
triple peak.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will be given a number of cases. The input for each case consists of one line of four integers <I>p</I>,
<I>e</I>, <I>i</I>, and <I>d</I>. The values <I>p</I>, <I>e</I>, and <I>i</I> are the number of days from the beginning of the current year at
which the physical, emotional, and intellectual cycles peak, respectively. The value <I>d</I> is the given date
and may be smaller than any of <I>p</I>, <I>e</I>, or <I>i</I>. All values are non-negative and at most 365, and you may
assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated
by a line in which 
<!-- MATH: $p = e = i = d = -1$ -->
<I>p</I> = <I>e</I> = <I>i</I> = <I>d</I> = -1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form:

<P>
<PRE>
Case 1: the next triple peak occurs in 1234 days.
</PRE>

<P>
Use the plural form ``<TT>days</TT>'' even if the answer is 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
0 0 0 0
0 0 0 100
5 20 34 325
4 5 6 7
283 102 23 320
203 301 203 40
-1 -1 -1 -1
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Case 1: the next triple peak occurs in 21252 days.
Case 2: the next triple peak occurs in 21152 days.
Case 3: the next triple peak occurs in 19575 days.
Case 4: the next triple peak occurs in 16994 days.
Case 5: the next triple peak occurs in 8910 days.
Case 6: the next triple peak occurs in 10789 days.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
757||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Gone Fishing</TITLE>
<META NAME="description" CONTENT="Gone Fishing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Gone Fishing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
John is going on a fishing trip. He has <I>h</I> hours available (
<!-- MATH: $1 \leÂŸ h \leÂŸ 16$ -->
<IMG
 WIDTH="87" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$1 \leÂŸ h \leÂŸ 16$">), and there are <I>n</I> lakes in the
area (
<!-- MATH: $2 \leÂŸ n \leÂŸ 25$ -->
<IMG
 WIDTH="88" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$2 \leÂŸ n \leÂŸ 25$">)
all reachable along a single, one-way road. John starts at lake 1, but he can finish
at any lake he wants. He can only travel from one lake to the next one, but he does not have to stop
at any lake unless he wishes to. For each 
<!-- MATH: $i = 1, \dots, n- 1$ -->
<IMG
 WIDTH="122" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$i = 1, \dots, n- 1$">,
the number of 5-minute intervals it takes to
travel from lake <I>i</I> to lake <I>i</I> + 1 is denoted <I>t</I><SUB><I>i</I></SUB>
(
<!-- MATH: $0 < t_i \leÂŸ 192$ -->
<IMG
 WIDTH="98" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$0 < t_i \leÂŸ 192$">). For example, <I>t</I><SUB>3</SUB> = 4 means that it takes 20
minutes to travel from lake 3 to lake 4.

<P>

<P>
<BR>
To help plan his fishing trip, John has gathered some information about the lakes. For each lake <I>i</I>, the
number of fish expected to be caught in the initial 5 minutes, denoted <I>f</I><SUB><I>i</I></SUB>
(
<!-- MATH: $f_i \geÂ– 0$ -->
<IMG
 WIDTH="50" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$f_i \geÂ– 0$">), is known. Each 5
minutes of fishing decreases the number of fish expected to be caught in the next 5-minute interval by a constant rate of <I>d</I><SUB><I>i</I></SUB> (
<!-- MATH: $d_i \geÂ– 0$ -->
<IMG
 WIDTH="51" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$d_i \geÂ– 0$">). If the number of fish expected to be caught in an interval is less than
or equal to <I>d</I><SUB><I>i</I></SUB>, there will be no more fish left in the lake in the next interval. To simplify the planning,
John assumes that no one else will be fishing at the lakes to affect the number of fish he expects to catch.

<P>

<P>
<BR>
Write a program to help John plan his fishing trip to maximize the number of fish expected to be
caught. The number of minutes spent at each lake must be a multiple of 5.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will be given a number of cases in the input. Each case starts with a line containing <I>n</I>. This is followed by a line containing <I>h</I>. Next, there is a line of <I>n</I> integers specifying <I>f</I><SUB><I>i</I></SUB> (
<!-- MATH: $1 \leÂŸ i \leÂŸ n$ -->
<IMG
 WIDTH="76" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$1 \leÂŸ i \leÂŸ n$">), then a line
of <I>n</I> integers <I>d</I><SUB><I>i</I></SUB> (
<!-- MATH: $1 \leÂŸ i \leÂŸ n$ -->
<IMG
 WIDTH="76" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$1 \leÂŸ i \leÂŸ n$">), and finally, a line of <I>n</I> - 1 integers <I>t</I><SUB><I>i</I></SUB> (
<!-- MATH: $1 \leÂŸ i ÂŸ\le n - 1$ -->
<IMG
 WIDTH="106" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/757img1.gif" 
 ALT="$1 \leÂŸ i ÂŸ\le n - 1$">). Input is terminated
by a case in which <I>n</I> = 0.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the number of minutes spent at each lake, separated by commas, for the plan
achieving the maximum number of fish expected to be caught (you should print the entire plan on one
line even if it exceeds 80 characters). This is followed by a line containing the number of fish expected.
If multiple plans exist, choose the one that spends as long as possible at lake 1, even if no fish are
expected to be caught in some intervals. If there is still a tie, choose the one that spends as long as
possible at lake 2, and so on. Insert a blank line between cases.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
2
1
10 1
2 5
2
4
4
10 15 20 17
0 3 4 3
1 2 3
4
4
10 15 50 30
0 3 4 3
1 2 3
0
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
45, 5
Number of fish expected: 31

240, 0, 0, 0
Number of fish expected: 480

115, 10, 50, 35
Number of fish expected: 724
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
758||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Same Game</TITLE>
<META NAME="description" CONTENT="The Same Game">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Same Game</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The game named ``Same'' is a single-person game played on a 10 <IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/758img1.gif" 
 ALT="$\times$">
15 board. Each square contains a
ball colored red (R), green (G), or blue (B). Two balls belong to the same cluster if they have the same
color, and one can be reached from another by following balls of the same color in the four directions
up, down, left, and right. At each step of the game, the player chooses a ball whose cluster has at least
two balls and removes all balls in the cluster from the board. Then, the board is ``compressed'' in two steps:

<P>
<DL COMPACT>
<DT>1.
<DD>Shift the remaining balls in each column down to fill the empty spaces. The order of the balls in each column is preserved.
<DT>2.
<DD>If a column becomes empty, shift the remaining columns to the left as far as possible. The order of the columns is preserved.
</DL>

<P>

<P>
<BR>
For example, choosing the ball at the bottom left corner in the sub-board below causes:

<P>
<DIV ALIGN="CENTER">

<img src=p758.gif>
</DIV>

<P>
The objective of the game is to remove every ball from the board, and the game is over when every ball
is removed or when every cluster has only one ball. The scoring of each game is as follows. The player
starts with a score of 0. When a cluster of <I>m</I> balls is removed, the player's score increases by (<I>m</I> - 2)<SUP>2</SUP>.
A bonus of 1000 is given if every ball is removed at the end of the game.

<P>

<P>
<BR>
You suspect that a good strategy might be to choose the ball that gives the largest possible cluster at
each step, and you want to test this strategy by writing a program to simulate games played using this
strategy. If there are two or more balls to choose from, the program should choose the leftmost ball
giving the largest cluster. If there is still a tie, it should choose the bottommost ball of these leftmost balls.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
You will be given a number of games in the input. The first line of input contains a positive integer
giving the number of games to follow. The initial arrangement of the balls of each game is given one
row at a time, from top to bottom. Each row contains 15 characters, each of which is one of ``<TT>R</TT>'', ``<TT>G</TT>'',
or ``<TT>B</TT>'', specifying the colors of the balls in the row from left to right. A blank line precedes each game.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each game, print the game number, followed by a new line, followed by information about each
move, followed by the final score. Each move should be printed in the format:

<P>

<P>
<BR>

<TT>Move </TT><I>x</I><TT> at (</TT><I>r</I><TT>,</TT><I>c</I><TT>): removed </TT><I>b</I><TT> balls of color </TT><I>C</I><TT>, got </TT><I>s</I><TT> points.</TT>

<P>

<P>
<BR>
where <I>x</I> is the move number, <I>r</I> and <I>c</I> are the row number and column number of the chosen ball, respectively. The rows are numbered from 1 to 10 from the bottom, and columns are numbered from 1 to 15 from the left. <I>b</I> is the number of balls in the cluster removed. <I>C</I> is one of ``<TT>R</TT>'', ``<TT>G</TT>'', or ``<TT>B</TT>'', indicating the color of the balls removed. <I>s</I> is the score for this move. The score does not include the
1000 point bonus if all the balls are removed after the move.

<P>

<P>
<BR>
The final score should be reported as follows:

<P>

<P>
<BR>

<TT>Final score: </TT><I>s</I><TT>, with </TT><I>b</I><TT> balls remaining.</TT>

<P>

<P>
<BR>
Insert a blank line between the output of each game. Use the plural forms ``<TT>balls</TT>'' and ``<TT>points</TT>'' even if the corresponding value is 1.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<PRE>
3

RGGBBGGRBRRGGBG
RBGRBGRBGRBGRBG
RRRRGBBBRGGRBBB
GGRGBGGBRRGGGBG
GBGGRRRRRBGGRRR
BBBBBBBBBBBBBBB
BBBBBBBBBBBBBBB
RRRRRRRRRRRRRRR
RRRRRRGGGGRRRRR
GGGGGGGGGGGGGGG

RRRRRRRRRRRRRRR
RRRRRRRRRRRRRRR
GGGGGGGGGGGGGGG
GGGGGGGGGGGGGGG
BBBBBBBBBBBBBBB
BBBBBBBBBBBBBBB
RRRRRRRRRRRRRRR
RRRRRRRRRRRRRRR
GGGGGGGGGGGGGGG
GGGGGGGGGGGGGGG

RBGRBGRBGRBGRBG
BGRBGRBGRBGRBGR
GRBGRBGRBGRBGRB
RBGRBGRBGRBGRBG
BGRBGRBGRBGRBGR
GRBGRBGRBGRBGRB
RBGRBGRBGRBGRBG
BGRBGRBGRBGRBGR
GRBGRBGRBGRBGRB
RBGRBGRBGRBGRBG
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<PRE>
Game 1:

Move 1 at (4,1): removed 32 balls of color B, got 900 points.
Move 2 at (2,1): removed 39 balls of color R, got 1369 points.
Move 3 at (1,1): removed 37 balls of color G, got 1225 points.
Move 4 at (3,4): removed 11 balls of color B, got 81 points.
Move 5 at (1,1): removed 8 balls of color R, got 36 points.
Move 6 at (2,1): removed 6 balls of color G, got 16 points.
Move 7 at (1,6): removed 6 balls of color B, got 16 points.
Move 8 at (1,2): removed 5 balls of color R, got 9 points.
Move 9 at (1,2): removed 5 balls of color G, got 9 points.
Final score: 3661, with 1 balls remaining.

Game 2:

Move 1 at (1,1): removed 30 balls of color G, got 784 points.
Move 2 at (1,1): removed 30 balls of color R, got 784 points.
Move 3 at (1,1): removed 30 balls of color B, got 784 points.
Move 4 at (1,1): removed 30 balls of color G, got 784 points.
Move 5 at (1,1): removed 30 balls of color R, got 784 points.
Final score: 4920, with 0 balls remaining.

Game 3:

Final score: 0, with 150 balls remaining.
</PRE>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel A. Revilla</I>
<BR><I>2000-02-09</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
759||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>The Return of the Roman Empire</TITLE>
<META NAME="description" CONTENT="The Return of the Roman Empire">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
The Return of the Roman Empire</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that accepts Roman numerals (one per line) and converts them to
decimal form.

<P>

<P>
<BR>
Remember, I=1, V=5, X=10, L=50, C=100, D=500, and M=1000. Furthermore, there 
are the following digraphs: IV=4, IX=9, XL=40, XC=90, CD=400, CM=900.

<P>

<P>
<BR>
The program should reject improperly formed numerals.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
MCMXCVIII
CCM
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1998
This is not a valid number
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
760||||||false||||||
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>DNA Sequencing</TITLE>
<META NAME="description" CONTENT="DNA Sequencing">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
DNA Sequencing</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A DNA molecule consists of two strands that wrap around each other to 
resemble a
twisted ladder whose sides, made of sugar and phosphate molecules, are 
connected by
rungs of nitrogen-containing chemicals called bases. Each strand is a linear 
arrangement
of repeating similar units called nucleotides, which are each composed of 
one sugar, one
phosphate, and a nitrogenous base. Four different bases are present in DNA: 
adenine (A),
thymine (T), cytosine (C), and guanine (G). The particular order of the 
bases arranged
along the sugar-phosphate backbone is called the DNA sequence; the sequence 
specifies
the exact genetic instructions required to create a particular organism 
with its own unique
traits.

<P>

<P>
<BR>
Geneticists often compare DNA strands and are interested in finding the 
longest common
base sequence in the two strands. Note that these strands can be represented 
as strings
consisting of the letters <TT>a</TT>, <TT>t</TT>, <TT>c</TT> and <TT>g</TT>. So, the 
longest common sequence in the two
strands <TT>atgc</TT> and <TT>tga</TT> is <TT>tg</TT>. It is entirely possible that 
two different common sequences
exist that are the same length and are the longest possible common 
sequences. For
example in the strands <TT>atgc</TT> and <TT>gctg</TT>, the longest common 
sequences are <TT>gc</TT>
and <TT>tg</TT>.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that accepts as input two strings representing DNA
strands, and prints as output the longest common sequence(s) in
lexicographical order. 

<P>
If there isn't any common sequence between the two strings, just print:
``<TT>No common sequence.</TT>"

<P>
If there are more than one test cases, it must be a
blank line between two consecutive, both in input and output files. 

<P>
The strings are at most 300 characters-long.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
atgc
tga

atgc
gctg
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
tg

gc
tg
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
761||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Transform those strings</TITLE>
<META NAME="description" CONTENT="Transform those strings">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Transform those strings</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Given below is a set of rules that can be used to transform one string into 
another:

<P>
<UL>
<LI>`t' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`i' (<EM>change `t' to `i'</EM>)
<LI>{`a' - `z'} 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`m' (<EM>change `a', or `b', or `c', ...
, or `z' to `m'</EM>)
<LI>`s' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`i'
<LI>`a' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`aa'
<LI>{`a' - `z'} 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`' (<EM>delete `a', or `b', or `c', ... ,
or `z'</EM>)
<LI>`t' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`r'
<LI>{`a' - `g'} 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`h'
<LI>`o' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`a'
<LI>`t' 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`s'
<LI>{`t' - `z'} 
<!-- MATH: $\rightarrow$ -->
<IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="$\rightarrow$">
`u'
</UL>

<P>
Sets are always given as a range, i.e. {`a' - `c'} is the set with the 
characters {`a',`b',`c'}

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that reads two strings, and prints the steps required to 
transform the first
string into the second. The steps in the transformation must be printed 
in the form:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
rule: origString \mbox{ {\tt ->} } newString
\end{displaymath} -->


<IMG
 WIDTH="243" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/7/761img1.gif" 
 ALT="\begin{displaymath}rule: origString \mbox{ {\tt ->} } newString
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
Note that several transformations may exist, your program only needs to 
find one. It is
also possible that the first string cannot be transformed into the second. 
In this case, your
program should simply output the word ``<TT>no</TT>''

<P>
If there are more than one test cases, it must be a
blank line between two consecutive, both in input and output files. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
thinner
rih

a
x
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6: thinner -&gt; rhinner
5: rhinner -&gt; rinner
7: rinner -&gt; rinnhr
5: rinnhr -&gt; rinhr
5: rinhr -&gt; rihr
5: rihr -&gt; rih

no
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
762||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>We Ship Cheap</TITLE>
<META NAME="description" CONTENT="We Ship Cheap">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
We Ship Cheap</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
The We-Ship-Cheap package shipping company is always interested in reducing 
their
costs. They have decided that a computerized shipping route planner that 
determines the
shortest shipping route between two cities would speed package delivery. 
We-Ship-Cheap
services a number of different cities. They have established direct shipping 
links
between pairs of cities. It is somewhat unusual that they have been able to 
create all the
direct links with exactly the same distance. Unfortunately, since not every 
pair of cities
is connected by a direct link, the shortest shipping route often involves 
travel through
multiple intermediate cities.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that given a collection of cities and links between them, 
and a shipping
request, prints out the shortest shipping route for the given shipping 
request.

<P>

<P>
<BR>
The program takes as input a variable number of lines, each
consisting of exactly two cities (identified by a two-uppercase-letter code
and separated by a space). Each line identifies a bidirectional
link that exists between the two cities. Following the link
information will be a single shipping request that identifies a
source and destination city. The program will produce as output a
shortest shipping route (note that multiple minimum length routes
may exist) between the two cities. If no route exists, the program
should output ``<TT>No route</TT>''

<P>

<P>
<BR>
The first line of input will consist of a single integer that represents the number of links
given in the input. The last line will contain the source and destination cities for which
you are to find the minimal route. You may assume that the input is valid and consistent.

<P>
If there are two or more test cases, it will be a
blank line between two consecutive, both in input and output files. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
JV PT
KA PT
KA HP
JV HP

2
JV PT
KA HP
JV HP
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
JV PT
PT KA
KA HP

No route
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
763||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Fibinary Numbers</TITLE>
<META NAME="description" CONTENT="Fibinary Numbers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Fibinary Numbers</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>
The standard interpretation of the binary number <TT>1010</TT> is 8 + 2 = 10. An alternate way to
view the sequence ``<TT>1010</TT>'' is to use Fibonacci numbers as bases instead of powers of two.
For this problem, the terms of the Fibonacci sequence are:
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
1, 2, 3, 5, 8, 13, 21 , \dots
\end{displaymath} -->


<IMG
 WIDTH="150" HEIGHT="30"
 SRC="http://uva.onlinejudge.org/external/7/763img1.gif" 
 ALT="\begin{displaymath}1, 2, 3, 5, 8, 13, 21 , \dots
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>

<P>
Where each term is the sum of the two preceding terms (note that there is only one 1 in
the sequence as defined here). Using this scheme, the sequence ``<TT>1010</TT>'' could be
interpreted as 
<!-- MATH: $1 \cdot 5 + 0 \bullet 3 + 1 \bullet 2 + 0 \bullet 1 = 7$ -->
<IMG
 WIDTH="232" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/763img1.gif" 
 ALT="$1 \cdot 5 + 0 \bullet 3 + 1 \bullet 2 + 0 \bullet 1 = 7$">.
This
representation is called a Fibinary number.

<P>

<P>
<BR>
Note that there is not always a unique Fibinary representation of every number. For
example the number 10 could be represented as either 8 + 2 (<TT>10010</TT>) or as 5 + 3 + 2
(<TT>1110</TT>). To make the Fibinary representations unique, larger Fibonacci terms must
always be used whenever possible (i.e. disallow 2 adjacent 1's). Applying this rule to the
number 10, means that 10 would be represented as 8+2 (<TT>10010</TT>).

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that takes two valid Fibinary numbers and prints the sum in Fibinary
form. These numbers will have at most 100 digits.

<P>
In case that two or more test cases had to be solved, it must be a
blank line between two consecutive, both in input and output files. 

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10010
1

10000
1000

10000
10000
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10100

100000

100100
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
764||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Pentominos</TITLE>
<META NAME="description" CONTENT="Pentominos">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Pentominos</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A pentomino consists of five equal-sized squares attached edge-to-edge to form some
shape. There are twelve possiblepentominos that can be formed in this way (plus their
reflections and rotations). A few pentominos are shown below:

<P>
<PRE>
            XXXXX           XXXX           XXXX           X
                               X            X            XXX
                                                          X
</PRE>

<P>
Something that has been keeping people occupied since the late 50's is to find a way to
form a rectangle of a given size using the 12 different pentominos

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input and Output</A>&nbsp;</FONT>
</H2>
Write a program that reads several dataset. The first line of the input contains the number of datasets, followed by a blank line. Each dataset has 4 lines containing two numbers between 1 and 8. These
numbers represent 4 different cells in an 8<IMG
 WIDTH="18" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/764img1.gif" 
 ALT="$\times$">8 square. Each dataset is separated by a blnk line.
 
 <p>The program must
determine if it is possible to cover the remaining 60 cells using the 12
different types of pentominos. The solution may use a given type of pentomino
more than once, or not at all. The output from the program will show the
square filled with pentominos. Each pentomino in the output must be drawn
using a different character from `<TT>a</TT>' to `<TT>l</TT>'. The <EM>blocked</EM>
cells should be drawn using the `<TT>*</TT>' character. 

<P>
Your program needs to only find one solution. If no solution exists, 
``<TT>No solution.</TT>" should be printed.

<P>Print a blank line between datasets.
<p>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

3 5
4 5
5 5
6 5
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
aaaaabcc
deeebbbc
ddde*bcc
ffde*ggg
hffi*ggj
hfii*jjj
hiikkklj
hhkkllll
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
765||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>References</TITLE>
<META NAME="description" CONTENT="References">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
References</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
Editors of an electronic magazine make draft versions of the documents in 
the form of text files.
However, publications should meet some requirements, in particular, 
concerning the rules of
reference use. Unfortunately, lots of the draft articles violate some 
rules. It is desirable to develop a
computer program that will make a publication satisfy all the rules 
from a draft version.

<P>

<P>
<BR>
Let's call a ``paragraph" a set of lines in the article going one after 
another, so that paragraphs are
separated by at least one empty line (an ``empty line" is a line that 
containing no characters different
from spaces). Any paragraph can contain an arbitrary number of references. 
A reference is a
positive integer not greater than 999 enclosed in square brackets 
(for example: [23]). There will be
no spaces between the brackets and the number. The square brackets 
are not used in any other
context but reference.

<P>

<P>
<BR>
There can be two types of paragraph - ``regular" and 
``reference description". Reference description
differs from the regular paragraph because it begins with the 
reference it describes, for example:

<P>
<PRE>
[23] It is the description ...
</PRE>

<P>
The opening square bracket will be at the first position of the
first line of the ``reference description" paragraph (i.e. there
will be no spaces before it). No reference description paragraph
will contain references inside itself.

<P>
Each reference will have
exactly one corresponding description and each description will
have at least one reference to it.

<P>
To convert a draft version to a
publication you have to use the following rules.

<P>
<UL>
<LI>References should
be renumbered by the successive integer numbers starting from one
in the order of their first appearance in the regular paragraphs
of the source draft version of the document.
<LI>Reference
descriptions should be placed at the end of the article ordered by
their number.
<LI>The order of ``regular" paragraphs in the document
should be preserved.
<LI>Your program should not make any other
changes to the paragraphs.
</UL>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file will be a text file containing a draft article your program 
should process. All lines
will be no more than 80 characters long. Any reference description will 
contain no more than 3
lines. The input file will contain up to 40000 lines.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
The output file contains the result of processing. All paragraphs should 
be separated by one ``true"
empty line (i.e. a line that contains no characters at all). There should 
be no empty lines before the
first paragraph.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
[5] Brownell, D, "Dynamic Reverse Address Resolution Protocol
    (DRARP)", Work in Progress.

The Reverse Address Resolution Protocol (RARP) [10] (through the extensions
defined in the Dynamic RARP (DRARP) [5]) explicitly addresses the problem of
network address discovery, and includes an automatic IP address assignment
mechanism.

[10] Finlayson, R., Mann, T., Mogul, J., and M. Theimer, "A Reverse
        Address Resolution Protocol", RFC 903, Stanford, June 1984.

[16] Postel, J., "Internet Control Message Protocol", STD 5, RFC 792,
        USC/Information Sciences Institute, September 1981.

The Trivial File Transfer Protocol (TFTP) [20] provides for transport of a boot
image from a boot server. The Internet Control Message Protocol (ICMP) [16] provides 
for informing hosts of additional routers via "ICMP redirect" messages.

[20] Sollins, K., "The TFTP Protocol (Revision 2)", RFC 783, NIC, June 1981.

Works [10], [16] and [20] can be obtained via Internet.
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The Reverse Address Resolution Protocol (RARP) [1] (through the extensions
defined in the Dynamic RARP (DRARP) [2]) explicitly addresses the problem of
network address discovery, and includes an automatic IP address assignment
mechanism.

The Trivial File Transfer Protocol (TFTP) [3] provides for transport of a boot
image from a boot server. The Internet Control Message Protocol (ICMP) [4] provides 
for informing hosts of additional routers via "ICMP redirect" messages.

Works [1], [4] and [3] can be obtained via Internet.

[1] Finlayson, R., Mann, T., Mogul, J., and M. Theimer, "A Reverse
        Address Resolution Protocol", RFC 903, Stanford, June 1984.

[2] Brownell, D, "Dynamic Reverse Address Resolution Protocol
    (DRARP)", Work in Progress.

[3] Sollins, K., "The TFTP Protocol (Revision 2)", RFC 783, NIC, June 1981.

[4] Postel, J., "Internet Control Message Protocol", STD 5, RFC 792,
        USC/Information Sciences Institute, September 1981.
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2000-12-30</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

______________________________________________________
766||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--Converted with LaTeX2HTML 98.1 release (February 19th, 1998)
originally by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Sum of powers</TITLE>
<META NAME="description" CONTENT="Sum of powers">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="STYLESHEET" HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">
Sum of powers</A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
A young schoolboy would like to calculate the sum
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
S_k(n) = \sum_{i=1}^n {i^k}
\end{displaymath} -->


<IMG
 WIDTH="104" HEIGHT="55"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="\begin{displaymath}S_k(n) = \sum_{i=1}^n {i^k}
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
for some fixed natural <I>k</I> and different natural <I>n</I>. He observed that 
calculating <I>i</I><SUP><I>k</I></SUP> for
all <I>i</I> (
<!-- MATH: $1 \le i \le n$ -->
<IMG
 WIDTH="76" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="$1 \le i \le n$">)
and summing up results is a too slow way to do it, because the number 
of required arithmetical
operations increases as <I>n</I> increases. Fortunately, there is another 
method which takes only a
constant number of operations regardless of <I>n</I>. It is possible to show 
that the sum <I>S</I><SUB><I>k</I></SUB>(<I>n</I>) is equal to
some polynomial of degree <I>k</I>+1 in the variable n with rational 
coefficients, i.e.,
<BR><P></P>
<DIV ALIGN="CENTER">
<!-- MATH: \begin{displaymath}
S_k(n) = {1 \over M} \left( a_{k+1} n^{k+1} + a_k n^k + \dots + a_1 n
+ a_0 \right)

\end{displaymath} -->


<IMG
 WIDTH="363" HEIGHT="42"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="\begin{displaymath}S_k(n) = {1 \over M} \left( a_{k+1} n^{k+1} + a_k n^k + \dots + a_1 n
+ a_0 \right)
\end{displaymath}">
</DIV>
<BR CLEAR="ALL">
<P></P>
for some integer numbers 
<!-- MATH: $M, a_{k+1}, a_k, \dots, a_1, a_0$ -->
<IMG
 WIDTH="170" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="$M, a_{k+1}, a_k, \dots, a_1, a_0$">.

<P>
We require that integer <I>M</I> be positive and as small as possible. Under 
this condition the entire set of
such numbers (i.e. 
<!-- MATH: $M, a_{k+1}, a_k, \dots, a_1, a_0$ -->
<IMG
 WIDTH="170" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="$M, a_{k+1}, a_k, \dots, a_1, a_0$">)
will be unique for 
the given <I>k</I>. You have to write a
program to find such set of coefficients to help the schoolboy make his 
calculations quicker.

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The input file contains several datasets, each of them containing a single integer <I>k</I> (
<!-- MATH: $0 \le k \le 20$ -->
<IMG
 WIDTH="87" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="$0 \le k \le 20$">).

<P>The first line of the input contains the number of datasets, and it's followed by a blank line.
There's also a blank line between datasets.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each dataset, write integer numbers 
<!-- MATH: $M, a_{k+1}, a_k, \dots, a_1, a_0$ -->
<IMG
 WIDTH="170" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://uva.onlinejudge.org/external/7/766img1.gif" 
 ALT="$M, a_{k+1}, a_k, \dots, a_1, a_0$">
to the output 
file in the given order. Numbers should
be separated by one space. Remember that you should write the 
answer with the smallest
positive <I>M</I> possible.

<P>Print a blank line between datasets.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">
Sample input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1

2
</PRE>

<P>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 2 3 1 0
</PRE>

<P>

<P>
<BR><HR>
<ADDRESS>
<I>Miguel Revilla</I>
<BR><I>2001-01-22</I>
</ADDRESS>
</BODY>
</HTML>
</HTML>

