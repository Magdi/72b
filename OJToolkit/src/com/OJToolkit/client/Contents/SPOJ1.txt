TEST||||||false||||||

Your program is to use the
brute-force approach in order to <i>find the Answer to Life, the Universe, and Everything.</i> More precisely... rewrite small numbers from input to output. Stop processing input after reading in the number 42. All numbers at input are integers of one or two digits.<br>
<BR>
<h3>Example</h3>
<pre>

<b>Input:</b>
1
2
88
42
99

<b>Output:</b>
1
2
88
</pre>


______________________________________________________
PRIME1||||||true||||||


<p>
Peter wants to generate some prime numbers for his cryptosystem. Help him!
Your task is to generate all prime numbers between two given numbers!
</p>

*******InputConstraints*******

<p>
The input begins with the number t of test cases in a single line (t<=10). In each of the next t lines there are two numbers m and n (1 <= m <= n <= 1000000000, n-m<=100000) separated by a space.
</p>

*******OutputConstraints*******

<p>For every test case print all prime numbers p such that m <= p <= n,
one number per line, test cases separated by an empty line.</p>

*******IOTestCases*******

<pre><b>Input:</b>

1 10
3 5

<b>Output:</b>
2
3
5
7

3
5
</pre>
<b>Warning: large Input/Output data, be careful with certain languages (though most should be OK if the algorithm is well designed)</b>


______________________________________________________
SBSTR1||||||true||||||


<!-- here starts your code -->
<p align=justify>
Given two binary strings, A (of length 10) and B (of length 5), output 1 if B is a substring of A and 0 otherwise.</p>
<p align=justify>
<em><b>Please note, that the solution may only be submitted in the following languages: Brainf**k, Whitespace and Intercal.</b></em>

*******InputConstraints*******

<p align=justify>24 lines consisting of pairs of binary strings A and B separated by a single space.</p>

*******OutputConstraints*******

<p align=justify>
The logical value of: 'B is a substring of A'.
</p>

*******IOTestCases*******

<p>
First two lines of input:<br>
<br>
1010110010 10110<br>
1110111011 10011<br>
</p>
<p>
First two lines of output:<br>
1<br>
0<br>
</p>



______________________________________________________
ONP||||||true||||||


<P ALIGN="justify">
Transform the algebraic expression with brackets into RPN form (Reverse Polish Notation). Two-argument operators: +, -, *, /, ^ (priority from the lowest to the highest), brackets ( ). Operands: only letters: a,b,...,z. Assume that there is only one RPN form (no expressions like a*b*c).
</p>

*******InputConstraints*******

<PRE>
<i>t</i> [the number of expressions <= <b>100</b>]
<i>expression</i> [length <= <b>400</b>]
[other expressions]
</pre>
<p align=left>
Text grouped in [ ] does not appear in the input file.
</p>

*******OutputConstraints*******

<PRE>
The <em>expression</em>s in RPN form, one per line.
</pre>

*******IOTestCases*******

<PRE>
Input:
3
(a+(b*c))
((a+b)*(z+x))
((a+t)*((b+(a+c))^(c+d)))

Output:
abc*+
ab+zx+*
at+bac++cd+^*</pre>



______________________________________________________
PALIN||||||true||||||


<p align=justify>
A positive integer is called a <i>palindrome</i> if its representation in the decimal system is the same when read from left to right and from right to left. For a given positive integer K of not more than 1000000 digits, write the value of the smallest palindrome larger than K to output. Numbers are always displayed without leading zeros.</p>

*******InputConstraints*******

<p align=justify>
The first line contains integer t, the number of test cases. Integers K are given in the next t lines.</p>

*******OutputConstraints*******

<p align=justify>
For each K, output the smallest palindrome larger than K.
</p>

*******IOTestCases*******

<p>
<tt><b>Input:</b></tt><br>
2<br>
808<br>
2133<br>
</p>
<p>
<tt><b>Output:</b></tt><br>
818<br>
2222<br>
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
ARITH||||||false||||||

<P>
One part of the new WAP portal is also aA calculator computing expressions
with very long numbers. To make the output look better, the result is
formated the same way as is it usually used with manual calculations.

<P>
Your task is to write the core part of this calculator. Given two numbers and
the requested operation, you are to compute the result and print it in the
form specified below. With addition and subtraction, the numbers are written
below each other. Multiplication is aA little bit more complex: first of all, we
make aA partial result for every digit of one of the numbers, and then sum the
results together.

<P>
<H3>Input</h3>

<P>

There is aA single positive integer <VAR>T</var> on the first line of input (equal to about 1000). It stands
for the number of expressions to follow. Each expression consists of aA single
line containing aA positive integer number, anA operator (one of <TT>+</tt>,
<TT>-</tt> and <TT>*</tt>) and the second positive integer number. Every number has
at most 500A digits. There are no spaces on the line. If the operation is
subtraction, the second number is always lower than the first one. No number
will begin with zero.

<P>

<H3>Output</h3>

<P>
For each expression, print two lines with two given numbers, the second
number below the first one, last digits (representing unities) must be
aligned in the same column. Put the operator right in front of the first
digit of the second number. After the second number, there must be
aA horizontal line made of dashes (<TT>-</tt>).

<P>
For each addition or subtraction, put the result right below the horizontal
line, with last digit aligned to the last digit of both operands.

<P>
For each multiplication, multiply the first number by each digit of the
second number. Put the partial results one below the other, starting with the
product of the last digit of the second number. Each partial result should be
aligned with the corresponding digit.
That means the last digit of the partial product must be in the same column
as the digit of the second number. No product may begin with any additional
zeros. If aA particular digit is zero, the product has exactly one digit --
zero. If the second number has more than one digit, print another horizontal
line under the partial results, and then print the sum of them.

<P>
There must be minimal number of spaces on the beginning of lines, with
respect to other constraints. The horizontal line is always as long as
necessary to reach the left and right end of both numbers (and operators)
directly below and above it. That means it begins in the same column where the
leftmost digit or operator of that two lines (one below and one above) is. It
ends in the column where is the rightmost digit of that two numbers. The line
can be neither longer nor shorter than specified.

<P>
Print one blank line after each test case, including the last one.

<h3>Example</h3>

<p>Sample Input:</p><PRE><tt>4
12345+67890
324-111
325*4405
1234*4
</tt>
</pre>

<p>Sample Output:</p><PRE><tt> 12345
+67890
------
 80235

 324
-111
----
 213

    325
  *4405
  -----
   1625
     0
 1300
1300
-------
1431625

1234
  *4
----
4936</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages.</b>


______________________________________________________
BULK||||||true||||||


<p>ACM uses a&nbsp;new special technology of building its transceiver stations. This technology is called <em>Modular Cuboid Architecture</em> (<em>MCA</em>) and is covered by a&nbsp;patent of Lego company. All parts of the transceiver are shipped in unit blocks that have the form of cubes of exactly the same size. The cubes can be then connected to each other. The MCA is modular architecture, that means we can select preferred transceiver configuration and buy only those components we need .</p>
<p>The cubes must be always connected "face-to-face", i.e. the whole side of one cube is connected to the whole side of another cube. One cube can be thus connected to at most six other units. The resulting equipment, consisting of unit cubes is called <em>The Bulk</em> in the communication technology slang.</p>
<p>Sometimes, an&nbsp;old and unneeded bulk is condemned, put into a&nbsp;storage place, and replaced with a&nbsp;new one. It was recently found that ACM has many of such old bulks that just occupy space and are no longer needed. The director has decided that all such bulks must be disassembled to single pieces to save some space. Unfortunately, there is no documentation for the old bulks and nobody knows the exact number of pieces that form them. You are to write a&nbsp;computer program that takes the bulk description and computes the number of unit cubes.</p>
<p>Each bulk is described by its faces (sides). A&nbsp;special X-ray based machine was constructed that is able to localise all faces of the bulk in the space, even the inner faces, because the bulk can be partially hollow (it can contain empty spaces inside). But any bulk must be connected (i.e. it cannot drop into two pieces) and composed of whole unit cubes.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>There is a&nbsp;single positive integer <var>T</var> on the first line of input (equal to about 1000). It stands for the number of bulks to follow. Each bulk description begins with a&nbsp;line containing single positive integer <var>F</var>, 6 &lt;= <var>F</var> &lt;= 250, stating the number of faces. Then there are <var>F</var> lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be "partially inner and partially outer".</p>
<p>Each face is described on a&nbsp;single line. The line begins with an&nbsp;integer number <var>P</var> stating the number of points that determine the face, 4 &lt;= <var>P</var> &lt;= 200. Then there are 3 <var>x P</var> numbers, coordinates of the points. Each point is described by three coordinates <var>X</var>,<var>Y</var>,<var>Z</var> (0 &lt;= <var>X</var>,<var>Y</var>,<var>Z</var> &lt;= 1000) separated by spaces. The points are separated from each other and from the number <var>P</var> by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one.</p>
<p>The face is always composed of "unit squares", that means every edge runs either in <var>X</var>, <var>Y</var> or <var>Z</var>-axis direction. If we take any two neighbouring points <var>X</var><sub>1</sub>,<var>Y</var><sub>1</sub>,<var>Z</var><sub>1</sub> and   <var>X</var><sub>2</sub>,<var>Y</var><sub>2</sub>,<var>Z</var><sub>2</sub>, then the points will always differ in exactly one of the three coordinates. I.e. it is either  <var>X</var><sub>1</sub> &lt;&gt; <var>X</var><sub>2</sub>, or  <var>Y</var><sub>1</sub> &lt;&gt; <var>Y</var><sub>2</sub>, or   <var>Z</var><sub>1</sub> &lt;&gt; <var>Z</var><sub>2</sub>, other two coordinates are the same. Every face lies in an&nbsp;orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Your program must print a&nbsp;single line for every test case. The line must contain the sentence <tt>The bulk is composed of </tt><var>V</var><tt> units.</tt>, where <var>V</var> is the volume of the bulk.</p>

*******IOTestCases*******

<p>Sample Input:</p>
<pre><tt>2
12
4  10 10 10  10 10 20  10 20 20  10 20 10
4  20 10 10  20 10 20  20 20 20  20 20 10
4  10 10 10  10 10 20  20 10 20  20 10 10
4  10 20 10  10 20 20  20 20 20  20 20 10
4  10 10 10  10 20 10  20 20 10  20 10 10
5  10 10 20  10 20 20  20 20 20  20 15 20  20 10 20
4  14 14 14  14 14 16  14 16 16  14 16 14
4  16 14 14  16 14 16  16 16 16  16 16 14
4  14 14 14  14 14 16  16 14 16  16 14 14
4  14 16 14  14 16 16  16 16 16  16 16 14
4  14 14 14  14 16 14  16 16 14  16 14 14
4  14 14 16  14 16 16  16 16 16  16 14 16
12
4  20 20 30  20 30 30  30 30 30  30 20 30
4  10 10 10  10 40 10  40 40 10  40 10 10
6  10 10 20  20 10 20  20 30 20  30 30 20  30 40 20  10 40 20
6  20 10 20  20 20 20  30 20 20  30 40 20  40 40 20  40 10 20
4  10 10 10  40 10 10  40 10 20  10 10 20
4  10 40 10  40 40 10  40 40 20  10 40 20
4  20 20 20  30 20 20  30 20 30  20 20 30
4  20 30 20  30 30 20  30 30 30  20 30 30
4  10 10 10  10 40 10  10 40 20  10 10 20
4  40 10 10  40 40 10  40 40 20  40 10 20
4  20 20 20  20 30 20  20 30 30  20 20 30
4  30 20 20  30 30 20  30 30 30  30 20 30
</tt>
</pre>
<p>Sample Output:</p>
<pre><tt>The bulk is composed of 992 units.
The bulk is composed of 10000 units.</tt>
</pre>
<p><strong>Warning: large Input/Output data, be careful with certain languages</strong></p>


______________________________________________________
CMPLS||||||false||||||

<P>

You probably know those quizzes in Sunday magazines: given the sequence 1, 2,
3, 4, 5, what is the next number? Sometimes it is very easy to answer,
sometimes it could be pretty hard. Because these "sequence problems" are very
popular, ACM wants to implement them into the "Free Time" section of their
new WAP portal.

<P>
ACM programmers have noticed that some of the quizzes can be solved by
describing the sequence by polynomials. For example, the sequence 1, 2, 3, 4, 5
can be easily understood as aA trivial polynomial. The next number is 6. But even
more complex sequences, like 1, 2, 4, 7, 11, can be described by aA polynomial.
In this case, 
1/2.<VAR>n</var><SUP>2</sup>-1/2.<VAR>n</var>+1 can be used. Note that even
if the members of the sequence are integers, polynomial coefficients may be any
real numbers.

<P>
Polynomial is anA expression in the following form:
<BR><P></p>
<DIV ALIGN="CENTER">
<VAR>P</var>(<VAR>n</var>) = <VAR>a</var><SUB><VAR>D</var></sub>.<VAR>n</var><SUP><VAR>D</var></sup>+<VAR>a</var><SUB><VAR>D</var>-1</sub>.<VAR>n</var><SUP><VAR>D</var>-1</sup>+...+<VAR>a</var><SUB>1</sub>.<VAR>n</var>+<VAR>a</var><SUB>0</sub>

</div>
<BR CLEAR="ALL">
<p>
If <VAR>a</var><SUB><VAR>D</var></sub> <> 0, the number <VAR>D</var> is called aA <EM>degree</em> of the polynomial. Note
that constant function <VAR>P</var>(<VAR>n</var>) = <VAR>C</var> can be considered as polynomial of degree 0, and
the zero function <VAR>P</var>(<VAR>n</var>) = 0 is usually defined to have degree -1.
</p>

<P>
<H3>Input</h3>

<P>
There is aA single positive integer <VAR>T</var> on the first line of input (equal to about 5000). It stands
for the number of test cases to follow. Each test case consists of two
lines. First line of each test case contains two integer numbers <VAR>S</var> and
<VAR>C</var> separated by aA single space, 
1 <= <VAR>S</var> < 100, 
1 <= <VAR>C</var> < 100,

(<VAR>S</var>+<VAR>C</var>) <= 100. The first number, <VAR>S</var>, stands for the length of the given
sequence, the second number, <VAR>C</var> is the amount of numbers you are to find to
complete the sequence.


<P>
The second line of each test case contains <VAR>S</var> integer numbers

<VAR>X</var><SUB>1</sub>, <VAR>X</var><SUB>2</sub>, ... <VAR>X</var><SUB><VAR>S</var></sub> separated by aA space. These numbers form the given
sequence. The sequence can always be described by aA polynomial <VAR>P</var>(<VAR>n</var>) 
such that for every <VAR>i</var>, 

<VAR>X</var><SUB><VAR>i</var></sub> = <VAR>P</var>(<VAR>i</var>). Among these polynomials, we can find the
polynomial <VAR>P</var><SUB><VAR>min</var></sub> with the lowest possible degree. This polynomial should be
used for completing the sequence.

<P>
<H3>Output</h3>

<P>

For every test case, your program must print aA single line containing <VAR>C</var> 
integer numbers, separated by aA space. These numbers are the values
completing the sequence according to the polynomial of the lowest possible
degree. In other words, you are to print values

<VAR>P</var><SUB><VAR>min</var></sub>(<VAR>S</var>+1), <VAR>P</var><SUB><VAR>min</var></sub>(<VAR>S</var>+2), .... <VAR>P</var><SUB><VAR>min</var></sub>(<VAR>S</var>+<VAR>C</var>).


<P>
It is guaranteed that the results 
<VAR>P</var><SUB><VAR>min</var></sub>(<VAR>S</var>+<VAR>i</var>) will be non-negative and
will fit into the standard <EM>integer</em> type.

<h3>Example</h3>

<p>Sample Input:</p><PRE><tt>4
6 3
1 2 3 4 5 6
8 2
1 2 4 7 11 16 22 29
10 2
1 1 1 1 1 1 1 1 1 2
1 10
3
</tt>
</pre>

<p>Sample Output:</p><PRE><tt>7 8 9
37 46
11 56
3 3 3 3 3 3 3 3 3 3</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
DIRVS||||||false||||||

<P>
Building the GSM network is aA very expensive and complex task. Moreover,
after the <EM>Base Transceiver Stations</em> (<EM>BTS</em>) are built and
working, we need to perform many various measurements to determine the state
of the network, and propose effective improvements to be made.


<P>
The ACM technicians have aA special equipment for measuring the strength of
electro-magnetic fields, the transceivers' power and quality of the signal.
This equipment is packed into aA huge knapsack and the technician must move
with it from one BTS to another. Unfortunately, the knapsack have not enough
memory for storing all of the measured values. It has aA small cache only,
that can store values for several seconds. Then the values must be
transmitted to the BTS by anA infrared connection (IRDA). The IRDA needs
direct visibility between the technician and the BTS.

<P>
Your task is to find the path between two neighbouring BTSes such that at
least one of those BTSes is always visible.

<P>
<H3>Input</h3>

<P>
There is aA single positive integer <VAR>T</var> on the first line of input (equal to about 500). It stands
for the number of test cases to follow. Each test case consists of aA town
description. For simplicity, aA town is modelled as aA rectangular grid of

<VAR>P x Q</var> square fields. Each field is exactly 1A metre wide. For each
field, aA non-negative integer <VAR>Z</var><SUB><VAR>i</var>,<VAR>j</var></sub> is given, representing the height of
the terrain in that place, in metres. That means the town model is made of
cubes, each of them being either solid or empty. There are no "half solid"
cubes.

<P>
The first line of each test case contains two integer numbers <VAR>P</var> and <VAR>Q</var>,
separated by aA single space, 
1 <= <VAR>P</var>,<VAR>Q</var> <= 200. Then there are <VAR>P</var> lines
each containing <VAR>Q</var> integer numbers separated by aA space. These numbers are

<VAR>Z</var><SUB><VAR>i</var>,<VAR>j</var></sub>, where 
1 <= <VAR>i</var> <= <VAR>P</var>, 
1 <= <VAR>j</var> <= <VAR>Q</var> and

0 <= <VAR>Z</var><SUB><VAR>i</var>,<VAR>j</var></sub> <= 5000. After the terrain
description, there are four numbers 

<VAR>R</var><SUB>1</sub>, <VAR>C</var><SUB>1</sub>, <VAR>R</var><SUB>2</sub>, <VAR>C</var><SUB>2</sub> on the last line of
each test case. These numbers represent position of two
BTSes, 
1 <= <VAR>R</var><SUB>1</sub>,<VAR>R</var><SUB>2</sub> <= <VAR>P</var>, 
1 <= <VAR>C</var><SUB>1</sub>,<VAR>C</var><SUB>2</sub> <= <VAR>Q</var>. The first coordinate
(<VAR>R</var>) determines the row of the town, the second coordinate determines the
column.


<P>
The technician is moving in steps (<EM>steps</em> stands for
<EM>Standard Technician's Elementary Positional Shift</em>). Each step is made
between two neighbouring square fields. That means the step is always in
North, South, West or East direction. It is not possible to move diagonally.
The step between two fields <VAR>A</var> and <VAR>B</var> (step from <VAR>A</var> to <VAR>B</var>) is allowed
only if the height of the terrain in the field <VAR>B</var> is not very different from
the height in the field <VAR>A</var>. The technician can climb at most 1A metre up or
descend at most 3A metres down in aA single step.


<P>
At the end of each step, at least one of the two BTSes must be visible.
However, there can be some point "in the middle of the step" where no BTS
is visible. This is OK and the data is handled by the cache. The BTS is
considered visible, if there is aA direct visibility between the unit cube
just above the terrain on the BTSes coordinates and the cube just above the
terrain on the square field, where the technician is. Direct visibility
between two cubes means that the line connecting the centres of the two cubes
does not intersect any solid cube. However, the line can touch any number of
solid cubes. In other words, consider both the BTS and the technician being
points exactly half metre above the surface and in the centre of the
appropriate square field.

<P>
Note that the IRDA beam can go between two cubes that touch each other by
their edge, although there is no space between them. It is because such
aA beam touches both of these two cubes but does not intersect any of
them. See the last test case of the sample input for anA example of such
aA situation.

<P>
<H3>Output</h3>

<P>
You are to find the shortest possible path from BTS (<VAR>R</var><SUB>1</sub>, <VAR>C</var><SUB>1</sub>) to BTS (<VAR>R</var><SUB>2</sub>, <VAR>C</var><SUB>2</sub>), meeting the above criteria. All
steps must be done between neighbouring fields, the terrain must not elevate
or descend too much, and at the end of each step, at least one BTS must be
visible.

<P>
For each test case, print one line containing the sentence
<TT>The shortest path is </tt><VAR>M</var><TT> steps long.</tt>, where <VAR>M</var> is the number of
steps that must be made. If there is no such path, output the sentence

<TT>Mission impossible!</tt>.

<h3>Example</h3>
<p>Sample Input:</p>

<PRE><tt>4
5 5
8 7 6 5 4
2 2 2 2 2
2 2 2 2 2
2 2 2 2 2
2 2 2 2 2
1 1 5 1
5 8
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
9 9 9 9 9 9 9 2
2 2 2 2 2 2 2 2
1 2 5 1
5 8
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2
9 9 9 9 9 9 9 2
2 2 2 2 2 2 2 2
1 5 5 1
6 12
5 5 5 5 1 5 5 5 5 5 5 5
5 5 5 5 1 5 5 5 5 5 5 5
5 5 5 5 9 5 5 5 5 5 5 5
5 9 1 5 5 5 5 5 5 5 5 5
5 5 9 5 5 5 5 5 5 5 5 5
5 5 9 5 5 5 5 5 5 5 5 5
6 1 3 12
</tt></pre>

<p>Sample Output:</p>

<PRE>
<tt>The shortest path is 10 steps long.
Mission impossible!
The shortest path is 14 steps long.
The shortest path is 18 steps long.
</tt></pre>


______________________________________________________
CMEXPR||||||false||||||

<P>
The most important activity of ACM is the GSM network. As the mobile phone
operator, ACM must build its own transmitting stations. It is very important
to compute the exact behaviour of electro-magnetic waves. Unfortunately,
prediction of electro-magnetic fields is aA very complex task and the
formulas describing them are very long and hard-to-read. For
example, Maxwell's Equations describing the basic laws of
electrical engineering are really tough.
<p>
ACM has designed its own computer system that can make some field
computations and produce results in the form of mathematic expressions.
Unfortunately, by generating the expression in several steps, there are
always some unneeded parentheses inside the expression. Your task is to take
these partial results and make them "nice" by removing all unnecessary
parentheses.
</p>
<H3>Input</h3>

<P>
There is aA single positive integer <VAR>T</var> on the first line of input (equal to about 10000). It stands
for the number of expressions to follow. Each expression consists of aA single
line containing only lowercase letters, operators (<TT>+</tt>, <TT>-</tt>, <TT>*</tt>,
<TT>/</tt>) and parentheses (<TT>(</tt> and <TT>)</tt>). The letters are variables
that can have any value, operators and parentheses have their usual meaning.
Multiplication and division have higher priority then subtraction and
addition. All operations with the same priority are computed from left to
right (operators are left-associative). There are no spaces inside the
expressions. No input line contains more than 250 characters.

<P>
<H3>Output</h3>

<P>
Print aA single line for every expression. The line must contain the same
expression with unneeded parentheses removed. You must remove as many
parentheses as possible without changing the semantics of the expression.
The semantics of the expression is considered the same if and only if any of
the following conditions hold:
<div align=left>
<UL>
<LI>The ordering of operations remains the same. That means "(<VAR>a</var>+<VAR>b</var>)+<VAR>c</var>" is
  the same as "<VAR>a</var>+<VAR>b</var>+<VAR>c</var>", and "<VAR>a</var>+(<VAR>b</var>/<VAR>c</var>)" is the same as "<VAR>a</var>+<VAR>b</var>/<VAR>c</var>".
<LI>The order of some operations is swapped but the result remains unchanged
  with respect to the addition and multiplication associativity.
  That means "<VAR>a</var>+(<VAR>b</var>+<VAR>c</var>)" and "(<VAR>a</var>+<VAR>b</var>)+<VAR>c</var>" are the same. We can also combine
  addition with subtraction and multiplication with division, if the
  subtraction or division is the second operation. For example, "<VAR>a</var>+(<VAR>b</var>-<VAR>c</var>)"
  is the same as "<VAR>a</var>+<VAR>b</var>-<VAR>c</var>".
</ul>
</div>
<P>
You cannot use any other laws, namely you cannot swap left and right
operands and you cannot replace "<VAR>a</var>-(<VAR>b</var>-<VAR>c</var>)" with "<VAR>a</var>-<VAR>b</var>+<VAR>c</var>".

<h3>Example</h3>
<p>Sample Input:</p>

<PRE>
<tt>8
(a+(b*c))
((a+b)*c)
(a*(b*c))
(a*(b/c)*d)
((a/(b/c))/d)
((x))
(a+b)-(c-d)-(e/f)
(a+b)+(c-d)-(e+f)
</tt></pre>

<p>Sample Output:</p>

<PRE>
<tt>a+b*c
(a+b)*c
a*b*c
a*b/c*d
a/(b/c)/d
x
a+b-(c-d)-e/f
a+b+c-d-(e+f)
</tt></pre>


______________________________________________________
FCTRL||||||false||||||

<P>
The most important part of aA GSM network is so called
<EM>Base Transceiver Station</em> (<EM>BTS</em>). These transceivers form the
areas called <EM>cells</em> (this term gave the name to the cellular phone)
and every phone connects to the BTS with the strongest signal (in
aA little simplified view). Of course, BTSes need some attention and
technicians need to check their function periodically.

<P>
ACM technicians faced aA very interesting problem recently. Given aA set of
BTSes to visit, they needed to find the shortest path to visit all of the
given points and return back to the central company building. Programmers
have spent several months studying this problem but with no results. They
were unable to find the solution fast enough. After aA long time, one of the
programmers found this problem in aA conference article. Unfortunately, he
found that the problem is so called "Travelling Salesman Problem" and it is
very hard to solve. If we have <VAR>N</var> BTSes to be visited, we can visit them in
any order, giving us <VAR>N</var>! possibilities to examine. The function expressing
that number is called factorial and can be computed as aA product

1.2.3.4....<VAR>N</var>. The number is very high even for aA relatively small <VAR>N</var>.

<P>
The programmers understood they had no chance to solve the problem. But
because they have already received the research grant from the government,
they needed to continue with their studies and produce at least <EM>some</em>
results. So they started to study behaviour of the factorial function.

<P>
For example, they defined the function <VAR>Z</var>. For any positive integer <VAR>N</var>,
<VAR>Z</var>(<VAR>N</var>) is the number of zeros at the end of the decimal form of number
<VAR>N</var>!. They noticed that this function never decreases. If we have two numbers
<VAR>N</var><SUB>1</sub><<VAR>N</var><SUB>2</sub>, then 
<VAR>Z</var>(<VAR>N</var><SUB>1</sub>) <= <VAR>Z</var>(<VAR>N</var><SUB>2</sub>). It is because we can never "lose" any
trailing zero by multiplying by any positive number. We can only get new
and new zeros. The function <VAR>Z</var> is very interesting, so we need aA computer
program that can determine its value efficiently.

<P>
<H3>Input</h3>

<P>
There is aA single positive integer <VAR>T</var> on the first line of input (equal to about 100000). It stands
for the number of numbers to follow. Then there are <VAR>T</var> lines, each containing
exactly one positive integer number <VAR>N</var>, 
1 <= <VAR>N</var> <= 1000000000.

<P>
<H3>Output</h3>

<P>
For every number <VAR>N</var>, output aA single line containing the single non-negative
integer <VAR>Z</var>(<VAR>N</var>).
<h3>Example</h3>
<p>Sample Input:</p>

<PRE>
<tt>6
3
60
100
1024
23456
8735373
</tt></pre>

<p>Sample Output:</p>

<PRE>
<tt>0
14
24
253
5861
2183837
</tt></pre>


______________________________________________________
MMIND||||||false||||||

<P>
If you want to buy a&nbsp;new cellular phone, there are many various types to
choose from. To decide which one is the best for you, you have to consider
several important things: its size and weight, battery capacity, WAP support,
colour, price. One of the most important things is also the list of games the
phone provides. Nokia is one of the most successful phone makers because of
its famous Snake and Snake&nbsp;II. ACM wants to make and sell its own phone and
they need to program several games for it. One of them is Master-Mind, the
famous board logical game.

<P>
The game is played between two players. One of them chooses a&nbsp;<EM>secret code</em>
consisting of <VAR>P</var>&nbsp;ordered pins, each of them having one of the predefined set of
<VAR>C</var>&nbsp;colours. The goal of the second player is to guess that secret sequence of
colours. Some colours may not appear in the code, some colours may appear more
than once.

<P>
The player makes guesses, which are formed in the same way as the secret
code. After each guess, he/she is provided with an&nbsp;information on how
successful the guess was. This feedback is called a&nbsp;<EM>hint</em>. Each hint
consists of <VAR>B</var> black points and <VAR>W</var> white points. The black point stands for
every pin that was guessed right, i.e. the right colour was put on the right
position. The white point means right colour but on the wrong position. For
example, if the secret code is "white, yellow, red, blue, white" and the
guess was "white, red, white, white, blue", the hint would consist of one
black point (for the white on the first position) and three white points
(for the other white, red and blue colours). The goal is to guess the
sequence with the minimal number of hints.

<P>
The new ACM phone should have the possibility to play both roles. It can make
the secret code and give hints, but it can also make its own guesses. Your
goal is to write a&nbsp;program for the latter case, that means a&nbsp;program that
makes Master-Mind guesses.

<P>
<H3>Input</h3>

<P>
There is a&nbsp;single positive integer <VAR>T</var> on the first line of input. It stands
for the number of test cases to follow. Each test case describes one game
situation and you are to make a&nbsp;guess. On the first line of each test case,
there are three integer numbers, <VAR>P</var>, <VAR>C</var> and <VAR>M</var>. <VAR>P</var> (
1 &lt;= <VAR>P</var> &lt;= 10) is
the number of pins, <VAR>C</var> (1 &lt;= <VAR>C</var> &lt;= 100) is the number of colours, and <VAR>M</var> 
(1 &lt;= <VAR>M</var> &lt;= 100) is the number of already played guesses.

<P>
Then there are 2 <VAR>x M</var> lines, two lines for every guess. At the first line of
each guess, there are <VAR>P</var> integer numbers representing colours of the guess.
Each colour is represented by a&nbsp;number <VAR>G</var><SUB><VAR>i</var></sub>, 
1 &lt;= <VAR>G</var><SUB><VAR>i</var></sub> &lt;= <VAR>C</var>. The second
line contains two integer numbers, <VAR>B</var> and <VAR>W</var>, stating for the number of
black and white points given by the corresponding hint.

<P>
Let's have a&nbsp;secret code 
<VAR>S</var><SUB>1</sub>, <VAR>S</var><SUB>2</sub>, ... <VAR>S</var><SUB><VAR>P</var></sub> and the guess

<VAR>G</var><SUB>1</sub>, <VAR>G</var><SUB>2</sub>, ... <VAR>G</var><SUB><VAR>P</var></sub>. Then we can make a&nbsp;set <VAR>H</var> containing pairs of numbers
(<VAR>I</var>,<VAR>J</var>) such that <VAR>S</var><SUB><VAR>I</var></sub> = <VAR>G</var><SUB><VAR>J</var></sub>, and that any number can appear at most once on
the first position and at most once on the second position. That means for
every two different pairs from that set, (<VAR>I</var><SUB>1</sub>,<VAR>J</var><SUB>1</sub>) and (<VAR>I</var><SUB>2</sub>,<VAR>J</var><SUB>2</sub>), we
have 
<VAR>I</var><SUB>1</sub> &lt;&gt; <VAR>I</var><SUB>2</sub> and 
<VAR>J</var><SUB>1</sub> &lt;&gt; <VAR>J</var><SUB>2</sub>. Then we denote <VAR>B</var>(<VAR>H</var>) the number of
pairs in the set, that meet the condition <VAR>I</var> = <VAR>J</var>, and <VAR>W</var>(<VAR>H</var>) the number of
pairs with <VAR>I</var> &lt;&gt; <VAR>J</var>.

<P>
We define an&nbsp;ordering of every two possible sets <VAR>H</var><SUB>1</sub> and <VAR>H</var><SUB>2</sub>. Let's say

<VAR>H</var><SUB>1</sub> &lt;= <VAR>H</var><SUB>2</sub> if and only if one of the following holds:
<div align=left>
<UL>
<LI>
<VAR>B</var>(<VAR>H</var><SUB>1</sub>) &lt; <VAR>B</var>(<VAR>H</var><SUB>2</sub>), or
<LI>
<VAR>B</var>(<VAR>H</var><SUB>1</sub>)  =  <VAR>B</var>(<VAR>H</var><SUB>2</sub>) and 
<VAR>W</var>(<VAR>H</var><SUB>1</sub>) &lt;= <VAR>W</var>(<VAR>H</var><SUB>2</sub>)</ul></div><p>Then we can find a&nbsp;maximal set <VAR>H</var><SUB><VAR>max</var></sub> according to this ordering. The
numbers 
<VAR>B</var>(<VAR>H</var><SUB><VAR>max</var></sub>) and 
<VAR>W</var>(<VAR>H</var><SUB><VAR>max</var></sub>) are the black and white points for that
hint.

<P>
<H3>Output</h3>

<P>
For every test case, print the line containing <VAR>P</var> numbers representing <VAR>P</var> 
colours of the next guess. Your guess must be valid according to all previous
guesses and hints. The guess is valid if the sequence could be a&nbsp;secret code,
i.e. the sequence was not eliminated by previous guesses and hints.

<P>
If there is no valid guess possible, output the sentence
<TT>You are cheating!</tt>. If there are more valid guesses, output the one
that is lexicographically smallest. I.e. find such guess <VAR>G</var> that for every
other valid guess <VAR>V</var> there exists such a&nbsp;number <VAR>I</var> that:
<div align=left>
<UL>
<LI><VAR>G</var><SUB><VAR>J</var></sub> = <VAR>V</var><SUB><VAR>J</var></sub> for every <VAR>J</var>&lt;<VAR>I</var>, and
<LI><VAR>G</var><SUB><VAR>I</var></sub>&lt;<VAR>V</var><SUB><VAR>I</var></sub>.
</ul></div>
<h3>Example</h3>
<p>Sample Input:</p>

<PRE>
<tt>3
4 3 2
1 2 3 2
1 1
2 1 3 2
1 1
4 6 2
3 3 3 3
3 0
4 4 4 4
2 0
8 9 3
1 2 3 4 5 6 7 8
0 0
2 3 4 5 6 7 8 9
1 0
3 4 5 6 7 8 9 9
2 0
</tt></pre>

<p>Sample Output</p>

<PRE>
<tt>1 1 1 3
You are cheating!
9 9 9 9 9 9 9 9
</tt></pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
HOTLINE||||||false||||||

<P>
Every customer sometimes needs help with new and unusual products. Therefore,
hotline service is very important for every company. We need a&nbsp;single phone
number where the customer can always find a&nbsp;friendly voice ready to help with
anything. On the other hand, many people are needed to serve as hotline
operators, and human resources are always very expensive. Moreover, it is not
easy to pretend "friendly voice" at 4am and explain to a&nbsp;drunken man that you
are really unable to give him the number to House of Parliament. It was
also found that some of the questions repeat very often and it is very
annoying to answer them again and again.

<P>
ACM is a&nbsp;modern company, wanting to solve its hotline problem. They want
to decrease the number of human operators by creating a&nbsp;complex software
system that would be able to answer most common questions. The customer's
voice is analysed by a&nbsp;special Voice Recognition Module (VRM) and converted
to a&nbsp;plain text. The text is then taken by an Artificial Automatic Adaptive
Answering Algorithm (AAAAA). The most common questions are recognised and
answered automatically. The replies are then converted to a&nbsp;sound by
Text-to-Speech Module (TTS).

<P>
You are to write the AAAAA module. Because your algorithm should be adaptive,
it has no explicit knowledge base. But it must be able to listen to sentences
in English and remember the mentioned facts. Whenever the question is asked
about such a&nbsp;fact, the system has to answer it properly. The VRM and TTS
modules are already implemented, so the input and output of AAAAA will be in
the text form.

<P>
<H3>Input</h3>

<P>
There is a&nbsp;single positive integer <VAR>T</var> on the first line of input. It stands
for the number of dialogues to follow. Each dialogue consists of zero or more
lines, each of them containing one sentence: either statement or question. The
statement ends with a&nbsp;dot character (<TT>.</tt>), the question ends with
a&nbsp;question mark (<TT>?</tt>). No statement will appear more than once, however
the questions can be repeated. There is one extra line after each dialogue.
That line ends with an&nbsp;exclamation mark (<TT>!</tt>).

<P>
Sentences can contain words, spaces and punctuation characters (such as
commas, colons, semicolons etc.). All words contain only letters of English
alphabet and are case-sensitive. That means the same word is always written
the same way, usually in lowercase. Acronyms, names and some other words can
begin with capital letters. For simplicity, all sentences begin with
a&nbsp;lowercase letter. Only if the first word should be written with a&nbsp;capital,
the sentence begins with a&nbsp;capital letter. There are no unneeded spaces
between words. No line will have more than 100 characters. There will be at
most 100 statements per each test case.

<P>

<h6 align=left>Statements</h6>

<P>
Each statement has one of the following two forms ( _ denotes a&nbsp;space):
<BR>
<I>subject</i>  _<I>predicate</i>[<TT>s</tt>] [ _<I>object</i>] <TT>.</tt>
<BR>
<I>subject</i>  _<TT>don't</tt>|<TT>doesn't</tt>  _<I>predicate</i> [ _<I>object</i>] <TT>.</tt>

<P>
The square brackets mark an&nbsp;optional part, the vertical line two possible
variants. Subject is a&nbsp;single word, noun or pronoun in singular. Predicate is
a&nbsp;verb (single word) denoting some activity. Object can be any text. Object
does not contain any dots. Any pair "verb + object" determines unique
activity. The same verb with different objects makes different independent
activities, i.e. the different and independent meaning of the sentence.
Sentence without any object can be considered as sentence with an&nbsp;empty
object. The verb without an&nbsp;object has different and independent meaning than
the same verb with any non-empty object.

<P>
The first variant of sentence denotes a&nbsp;positive statement. The word
"<I>predicate</i>[<TT>s</tt>]" means verb that matches the subject of the sentence.
If the subject is "<TT>I</tt>" or "<TT>you</tt>", the verb has the same form as the
infinitive. With any other subject, the letter "<TT>s</tt>" is appended on the
end of the verb. Assume there are no irregular verbs.

<P>
The second variant is a&nbsp;negative statement. Verb "<TT>don't</tt>" or
"<TT>doesn't</tt>" must also match the subject. The form "<TT>don't</tt>" is used
with either "<TT>I</tt>" or "<TT>you</tt>", "<TT>doesn't</tt>" is used in any other
case.

<P>
A&nbsp;special generic subject "<TT>everybody</tt>" can be used. It means the activity
holds for any subject. Other special subject is "<TT>nobody</tt>". Such sentence
also holds for any subject, but its meaning is negative. Both of these generic
subjects can be used with the first variant only (without "<TT>doesn't</tt>").
The sentence "<TT>nobody likes something</tt>" is exactly equal to
"<TT>everybody doesn't like something</tt>", except the latter form will never
occur in the input.

<P>

<h6 align=left>Questions</h6>

<P>
Each question has one of the following three forms:
<div align=left>
<DL COMPACT>
<DT>1.
<DD><TT>do</tt>|<TT>does</tt>  _<I>subject</i>  _<I>predicate</i> [ _object] <TT>?</tt>
<DT>2.
<DD><TT>who</tt>  _<I>predicate</i><TT>s</tt> [ _<I>object</i>] <TT>?</tt>
<DT>3.
<DD><TT>what</tt>  _<TT>do</tt>|<TT>does</tt>  _<I>subject</i> <TT>do</tt> <TT>?</tt>
</dl>
</div>
<P>
The word "<TT>do</tt>|<TT>does</tt>" always matches the subject ("<TT>do I?</tt>",
"<TT>do you?</tt>", "<TT>does</tt> any other subject?"). In the second
type of question, predicate always matches the word "<TT>who</tt>", i.e. the
"<TT>s</tt>" is always appended. Generic subjects cannot be used in questions.

<P>
<H3>Output</h3>

<P>
For each dialogue, your program must output the line <TT>Dialogue #</tt><VAR>D</var><TT>:</tt>,
where <VAR>D</var> is the sequence number of dialogue, starting with 1. Then print
exactly three lines for every question: the first line repeats the question,
the second line contains the answer, and the third line is empty. Print
nothing for statements. After each dialogue, print the same line with
an&nbsp;exclamation mark that was in the input. Then print one extra empty line.
Empty line contains a&nbsp;new-line character only.

<P>
The answer must be properly formated to be accepted by a&nbsp;TTS module. Only the
statements appearing in the input before the answer are used for the
corresponding reply. If there is any contradiction among statements, the
reply is always <TT>I am abroad.</tt>. If the question and statements consider
the special subject "<TT>you</tt>", it must be replaced with "<TT>I</tt>" in the
answer. If the question considers special subject "<TT>I</tt>", it must be
replaced with "<TT>you</tt>" in the answer. The verb must always match the
subject of the sentence. The exact form of the correct answer depends on the
type of question.

<P>

<h6 align=left>1.&nbsp;does subject predicate [object] ?</h6>

<P>
If there is any positive statement about the mentioned subject (or
generic subject "<TT>everybody</tt>"), predicate and object, the answer is:
<BR>
<TT>yes,</tt>  _<I>subject</i>  _<I>predicate</i>[<TT>s</tt>] [ _<I>object</i>] <TT>.</tt>

<P>
If there is any negative statement about the mentioned subject (or
generic subject "<TT>nobody</tt>"), predicate and object, the answer is:
<BR>
<TT>no,</tt>  _<I>subject</i>  _<TT>don't</tt>|<TT>doesn't</tt>  _<I>predicate</i> [ _<I>object</i>] <TT>.</tt>

<P>
Otherwise, the answer is:
<TT>maybe.</tt>

<P>
Subject in the answer is always the same subject as the subject of the
question.

<P>

<h6 align=left>2.&nbsp;who predicates [object] ?</h6>

<P>
If there is a&nbsp;positive statement considering any subject, the specified
predicate and object, the answer is:
<BR>
<I>subject</i>  _<I>predicate</i>[<TT>s</tt>] [ _<I>object</i>] <TT>.</tt>

<P>
If two or more subjects match the activity, replace the subject in the answer
with enumeration of all such subjects, in the same order as the corresponding
statements have appeared in the input. Subjects are separated with comma and
space, last two subjects are separated with the word "<TT>and</tt>".
If "<TT>everybody</tt>" belongs to the group of enumerated subjects, do not
enumerate subjects, and print "<TT>everybody</tt>" only. If the enumeration
contains at least two subjects, the predicate matches the plural subject
(i.e. verb is without trailing "<TT>s</tt>"), otherwise it matches the only
subject.
<BR>
<I>subject1</i> <TT>,</tt>  _<I>subject2</i>  _<TT>and</tt>  _<I>subject3</i> <I>predicate</i> [ _<I>object</i>] <TT>.</tt>

<P>
If there is a&nbsp;negative statement considering the generic subject "nobody",
the specified predicate and object, the answer is:
<BR>
<I>nobody</i>  _<I>predicate</i><TT>s</tt> [ _<I>object</i>] <TT>.</tt>

<P>
Otherwise, the answer is:
<TT>I don't know.</tt>

<P>

<h6 align=left>3.&nbsp;what does subject do ?</h6>

<P>
If there are one or more sentences (both positive and negative) considering
the specified subject (or a&nbsp;generic subject "<TT>everybody</tt>" or "<TT>nobody</tt>"), all
verbs and objects from such sentences must be included in a&nbsp;reply in the same
order as the corresponding sentences have appeared in the input. No
verb-object pair can be included more than once (the eventual second
appearance must be skipped). The verb-object pairs are separated by a&nbsp;comma
followed by a&nbsp;space, the last verb is separated by a&nbsp;comma and the word
"<TT>and</tt>". Please note the comma is printed here although there was no comma
when separating the subjects in the previous type of answer (see above). The
negative answers have the same form as the statements, that means the verb
"<TT>don't</tt>" or "<TT>doesn't</tt>" is used:
<BR>
<I>subject</i> [ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate1</i>[<TT>s</tt>] [ _<I>object1</i>] <TT>,</tt>
<BR>
[ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate2</i>[<TT>s</tt>] [ _<I>object2</i>] <TT>,</tt>
<BR>
_<TT>and</tt> [ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate3</i>[<TT>s</tt>] [ _<I>object3</i>] <TT>.</tt>
<BR>
<I>subject</i> [ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate1</i>[<TT>s</tt>] [ _<I>object1</i>] <TT>,</tt>
<BR>
_<TT>and</tt> [ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate2</i>[<TT>s</tt>] [ _<I>object2</i>] <TT>.</tt>
<BR>
<I>subject</i> [ _<TT>don't</tt>|<TT>doesn't</tt>]  _<I>predicate</i>[<TT>s</tt>] [ _<I>object</i>] <TT>.</tt>

<P>
Otherwise, the answer is:
<TT>I don't know.</tt>

<h3>Example</h3>
<p>Sample Input:</p>

<PRE>
<tt>1
I like hotdogs.
nobody likes to work.
everybody smiles.
what do I do?
who smiles?
what do you do?
does Joe smile?
do I like to work?
everybody hurts sometimes.
who walks there?
Michal walks there.
who walks there?
what does Michal do?
do you understand?
nobody walks there.
do you understand now?
bye!
</tt></pre>

<p>Sample Output:</p>

<PRE>
<tt>Dialogue #1:
what do I do?
you like hotdogs, don't like to work, and smile.

who smiles?
everybody smiles.

what do you do?
I don't like to work, and smile.

does Joe smile?
yes, Joe smiles.

do I like to work?
no, you don't like to work.

who walks there?
I don't know.

who walks there?
Michal walks there.

what does Michal do?
Michal doesn't like to work, smiles, hurts sometimes, and walks there.

do you understand?
maybe.

do you understand now?
I am abroad.

bye!
</tt></pre>


______________________________________________________
IKEYB||||||false||||||

<P>
Most of you have probably tried to type an&nbsp;SMS message on the keypad of
a&nbsp;cellular phone. It is sometimes very annoying to write longer messages,
because one key must be usually pressed several times to produce a&nbsp;single
letter. It is due to a&nbsp;low number of keys on the keypad. Typical phone has
twelve keys only (and maybe some other control keys that are not used for
typing). Moreover, only eight keys are used for typing 26&nbsp;letters of
an&nbsp;English alphabet. The standard assignment of letters on the keypad is
shown in the left picture:

<P>

<TABLE ALIGN=CENTER><TR><TD>

<TABLE BORDERCOLOR=BLACK CELLPADDING=3 CELLSPACING=0 BORDER="1">
<TR><TD ALIGN="CENTER">1<BR>&nbsp;</td>
<TD ALIGN="CENTER">2<BR>abc</td>
<TD ALIGN="CENTER">3<BR>def</td>
</tr>
<TR><TD ALIGN="CENTER">4<BR>ghi</td>
<TD ALIGN="CENTER">5<BR>jkl</td>
<TD ALIGN="CENTER">6<BR>mno</td>
</tr>
<TR><TD ALIGN="CENTER">7<BR>pqrs</td>
<TD ALIGN="CENTER">8<BR>tuv</td>
<TD ALIGN="CENTER">9<BR>wxyz</td>
</tr>
<TR><TD ALIGN="CENTER">*<BR>&nbsp;</td>
<TD ALIGN="CENTER">0<BR><EM>space</em></td>
<TD ALIGN="CENTER">#<BR>&nbsp;</td>
</tr>
</table>

</td><TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><TD>

<TABLE BORDERCOLOR=BLACK CELLPADDING=3 CELLSPACING=0 BORDER="1">
<TR><TD ALIGN="CENTER">1<BR>&nbsp;</td>
<TD ALIGN="CENTER">2<BR>abcd</td>
<TD ALIGN="CENTER">3<BR>efg</td>
</tr>
<TR><TD ALIGN="CENTER">4<BR>hijk</td>
<TD ALIGN="CENTER">5<BR>lm</td>
<TD ALIGN="CENTER">6<BR>nopq</td>
</tr>
<TR><TD ALIGN="CENTER">7<BR>rs</td>
<TD ALIGN="CENTER">8<BR>tuv</td>
<TD ALIGN="CENTER">9<BR>wxyz</td>
</tr>
<TR><TD ALIGN="CENTER">*<BR>&nbsp;</td>
<TD ALIGN="CENTER">0<BR><EM>space</em></td>
<TD ALIGN="CENTER">#<BR>&nbsp;</td>
</tr>
</table>

</td></tr>
</table>

<P>
There are 3 or 4 letters assigned to each key. If you want the first letter
of any group, you press that key once. If you want the second letter, you
have to press the key twice. For other letters, the key must be pressed three
or four times. The authors of the keyboard did not try to optimise the layout
for minimal number of keystrokes. Instead, they preferred the even
distribution of letters among the keys. Unfortunately, some letters are more
frequent than others. Some of these frequent letters are placed on the third
or even fourth place on the standard keyboard. For
example, <TT>S</tt> is a&nbsp;very common letter in an&nbsp;English alphabet, and we need
four keystrokes to type it. If the assignment of characters was like in the
right picture, the keyboard would be much more comfortable for typing average
English texts.

<P>
ACM have decided to put an&nbsp;optimised version of the keyboard on its new
cellular phone. Now they need a&nbsp;computer program that will find an&nbsp;optimal
layout for the given letter frequency. We need to preserve alphabetical
order of letters, because the user would be confused if the letters were
mixed. But we can assign any number of letters to a&nbsp;single key.

<P>
<H3>Input</h3>

<P>
There is a&nbsp;single positive integer <VAR>T</var> on the first line of input (equal to about 2000). It stands
for the number of test cases to follow. Each test case begins with a&nbsp;line
containing two integers <VAR>K</var>, <VAR>L</var> (1  &lt;= <VAR>K</var>  &lt;= <VAR>L</var>  &lt;= 90) separated by
a&nbsp;single space. <VAR>K</var> is the number of keys, <VAR>L</var> is the number of letters to be
mapped onto those keys. Then there are two lines. The first
one contains exactly <VAR>K</var> characters each representing a&nbsp;name of one
key. The second line contains exactly <VAR>L</var> characters representing names
of letters of an&nbsp;alphabet. Keys and letters are represented by digits,
letters (which are case-sensitive), or any punctuation characters (ASCII code
between 33 and 126 inclusively). No two keys have the same character, no two
letters are the same. However, the name of a&nbsp;letter can be used also as
a&nbsp;name for a&nbsp;key.

<P>
After those two lines, there are exactly <VAR>L</var> lines each containing exactly
one positive integer <VAR>F</var><SUB>1</sub>, <VAR>F</var><SUB>2</sub>, ... <VAR>F</var><SUB><VAR>L</var></sub>. These numbers determine the
frequency of every letter, starting with the first one and continuing with
the others sequentially. The higher number means the more common letter. No
frequency will be higher than 100000.

<P>
<H3>Output</h3>

<P>
Find an&nbsp;optimal keyboard for each test case. Optimal keyboard is such that
has the lowest "price" for typing average text. The <EM>price</em> is determined
as the sum of the prices of each letter. The price of a&nbsp;letter is a&nbsp;product
of the&nbsp;letter frequency (<VAR>F</var><SUB><VAR>i</var></sub>) and its position on the key. The order of
letters cannot be changed, they must be grouped in the given order.

<P>
If there are more solutions with the same price, we will try to maximise the
number of letters assigned to the last key, then to the one before the last
one etc.

<P>
More formally, you are to find a&nbsp;sequence <VAR>P</var><SUB>1</sub>, <VAR>P</var><SUB>2</sub>, ... <VAR>P</var><SUB><VAR>L</var></sub> 
representing the position of every letter on a&nbsp;particular key. The sequence
must meet following conditions:
<div align=left>
<UL>
<LI><VAR>P</var><SUB>1</sub> = 1
<LI>for each <VAR>i</var>&gt;1, either 
<VAR>P</var><SUB><VAR>i</var></sub> = <VAR>P</var><SUB><VAR>i</var>-1</sub>+1 or <VAR>P</var><SUB><VAR>i</var></sub> = 1
<LI>there are at most <VAR>K</var> numbers <VAR>P</var><SUB><VAR>i</var></sub> such that <VAR>P</var><SUB><VAR>i</var></sub> = 1
<LI>the sum of products <VAR>S</var><SUB><VAR>P</var></sub> = 
Sum[i=1..l]
<VAR>F</var><SUB><VAR>i</var></sub>.<VAR>P</var><SUB><VAR>i</var></sub> is minimal
<LI>for any other sequence <VAR>Q</var> meeting these criteria and with the same
  sum <VAR>S</var><SUB><VAR>Q</var></sub> = <VAR>S</var><SUB><VAR>P</var></sub>, there exists such <VAR>M</var>, 
1 &lt;= <VAR>M</var> &lt;= <VAR>L</var> that for any <VAR>J</var>,
  <VAR>M</var>&lt;<VAR>J</var> &lt;= <VAR>L</var>, <VAR>P</var><SUB><VAR>J</var></sub> = <VAR>Q</var><SUB><VAR>J</var></sub>, and <VAR>P</var><SUB><VAR>M</var></sub>&gt;<VAR>Q</var><SUB><VAR>M</var></sub>.
</ul>
</div>
<P>
The output for every test case must start with a&nbsp;single line saying
<TT>Keypad #</tt><VAR>I</var><TT>:</tt>, where <VAR>I</var> is a&nbsp;sequential order of the test case,
starting with 1. Then there must be exactly <VAR>K</var> lines, each representing one
letter, in the same order that was used in input. Each line must contain the
character representing the key, a&nbsp;colon, one space and a&nbsp;list of letters
assigned to that particular key. Letters are not separated from each other.

<P>
Print one blank line after each test case, including the last one.


<h3>Example</h3>
<p>Sample Input:</p>

<PRE>
<tt>1
8 26
23456789
ABCDEFGHIJKLMNOPQRSTUVWXYZ
3371
589
1575
1614
6212
971
773
1904
2989
123
209
1588
1513
2996
3269
1080
121
2726
3083
4368
1334
518
752
427
733
871
</tt>
</pre>

<p>Sample Output:</p>

<PRE>
<tt>Keypad #1:
2: ABCD
3: EFG
4: HIJK
5: LM
6: NOPQ
7: RS
8: TUV
9: WXYZ
</tt></pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SHPATH||||||false||||||

<P align=justify>
You are given a list of cities. Each direct connection between two
cities has its  transportation cost (an integer bigger than 0).
The goal is to find the paths of
minimum cost between pairs of cities. Assume that the cost
of each path (which is the sum of costs of all direct
connections belongning to this path) is at most 200000.
The name of a city is a string containing characters
a,...,z and is at most 10 characters long.
</p>

<H3>Input</h3>
<P align=justify>
<pre>
<i>s</i> [the number of tests <= 10]
<i>n</i> [the number of cities <= 10000]
<i>NAME</i> [city name]
<i>p</i> [the number of neighbours of city <i>NAME</i>]
<i>nr</i> <i>cost</i> [<i>nr</i> - index of a city connected to <i>NAME</i> (the index of the first city is 1)]
           [<i>cost</i> - the transportation cost]
<i>r</i> [the number of paths to find <= <b>100</b>]
<i>NAME1 NAME2</i> [<i>NAME1</i> - source, <i>NAME2</i> - destination]
[empty line separating the tests]
</pre>
</p>
<H3>Output</h3>
<P align=justify>
<pre>
<i>cost</i> [the minimum transportation cost from city <i>NAME1</i> to city <i>NAME2</i> (one per line)]
</pre>
</p>
<H3>Example</h3>
<P align=justify>
<pre>Input:
1
4
gdansk
2
2 1
3 3
bydgoszcz
3
1 1
3 1
4 4
torun
3
1 3
2 1
4 1
warszawa
2
2 4
3 1
2
gdansk warszawa
bydgoszcz warszawa

Output:
3
2
</pre>
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
TETRA||||||false||||||

<P align=justify>
Of course a Sphere Online Judge System is bound to have some tasks about spheres.
So here is one. Given the lengths of the edges of a tetrahedron
calculate the radius of a sphere inscribed in that tetrahedron
(i.e. a sphere tangent to all the faces).
</p>
<H3>Input</h3>
<P align=justify>
Number N of test cases in a single line. ( N <= 30 )
Each of the next N lines
consists of 6 integer numbers -- the lengths of the edges of a tetrahedron
separated by single spaces. The edges are not longer than 1000 and
for the tetrahedron WXYZ, the order of the edges is: WX, WY, WZ, XY, XZ, YZ.
</p>
<H3>Output</h3>
<P align=justify>
N lines, each consisting of a real number given with four digits decimal precision
equal to the radius of a sphere inscribed in the given tetrahedron.
</p>
<H3>Example</h3>
<P>
<pre>
Input:
2
1 1 1 1 1 1
1000 999 998 5 5 6

Output:
0.2041
1.4189
</pre>
</p>


______________________________________________________
CRYPTO1||||||true||||||


<!-- here starts your code -->
<P align="justify">TheA infamous Bytelandian Bit-eating Fanatic Organisation (BBFO for short)A plans to launch an 
	all-outA denial-of-service attack onA the Bytelandian McDecimal's fast food 
	network by blocking the entrance to every restaurant with a camel (the 
	purpose being to ridA the OrganisationA of unhealthy competition, 
	obviously). In a sly and perfidious move, the head cryptographer 
	ofA BBFOA decided toA disclose the date and time of 
	theA planned attack to the management of McDecimal's, but in encrypted form 
	(ha ha). He calculated the number of seconds from midnight 1970.01.01 GMT to 
	the moment of attack, squared it, divided it by 4000000007 and sent the 
	remainder by e-mail to McDecimal's. This made the original date impossible to 
	decode.</p>
<P align="justify">Or did it?</p>
<div align="center">*A A  *A A  *</div>
<P align="justify">You work as the head algorthimist at McDecimal's HQ and know 
	nothing of what isA happening in Byteland.A Things are not going well. You 
	areA playing a quiet game ofA hearts against your computerA and 
	wondering whyA on earth Management are considering making you redundant. 
	Suddenly, the CEOA bursts into your office, saying:</p>
<P align="justify">- Look here, young man[lady]! I have this numberA andA those 
	guysA claim it is supposed to be some date. I am giving you one second to 
	tell me what it all means!</p>
<P align="justify">I am afraid you have no choice. You can't ask any further 
	questions.<br>You just have to answer, now.</p>

*******InputConstraints*******

<p align="justify">The encrypted timestamp.</p>

*******OutputConstraints*******

<p align="justify">The decryptedA GMT time and date of attack, somewhere 
	between 1970 and 2030,A using standard 26 character formatting.
</p>

*******IOTestCases*******

<P>Input:<br>
	<code>1749870067</code>
<p>Output:<br>
	<code>Sun Jun 13 16:20:39 2004</code></p>



______________________________________________________
CRYPTO2||||||false||||||

<P align=justify>
Encouraged by his last successful exploit, the Bytelandian fanatic cryptographer impudently encrypted a three-digit number by subtracting 1 from it.</p><P align=justify>This time he has <b>really</b> overstepped the mark! Soldier, go and beat him, for Burger King & Country! Oh, and remember your good manners, use Brainf**k (no other language is allowed).
</p>
<H3>Input</h3>
<P align=justify>
An encrypted 3-digit positive integer.
</p>
<H3>Output</h3>
<P align=justify>
The decrypted value.
</p>
<H3>Example</h3>
<div align=left>
Input:
<pre>
699</pre>
<p>
Output:
<pre>
700</pre>
</div>


______________________________________________________
CRYPTO3||||||false||||||

<P align=justify>
The Bytelandian cryptographer acknowledged he was sorely beaten in Act 2. He renounced his own methods of encryption and decided to return to the classic techniques.</p>
<P align=justify>
Not knowing what to do next, he went to the cinema to chew the problem over. To his surprise, he found that the cone containing pop-corn was in fact a rolled up page torn from the classic book, <i>RSA for newbies in 24 seconds</i>. The page in question contained the entire key-generating and encryption algorithm. Fascinated, he thought up two different prime numbers p and q, and calculated his own public key, and revealed the product p*q to the wide world. Then, he began work on his wicked scheme of encryption.
</p>
<p>
History repeats. Once more, you receive an encrypted message from the cryptographer. This time you know that without additional information you are beaten, so you decide to use the psychological approach. You phone the Bytelandian cryptographer, and ask him whether he couldn't give you a little hint. What you really want to know is the number u of positive integers which are smaller than p*q and have no common factors with p*q other than 1. But the cryptographer, sensing that this would allow you to decode the message right away, refuses to tell you this number. Eventually, after a lot of asking, he gives you a piece of utterly useless information: he tells you how many positive integers x cannot be represented in the form x=a*p+b*q, regardless of what non-negative integer values a and b assume.
<p>
You begin to wonder whether the information you received from the cryptographer is not by any chance enough to find the value of u.<br>
<b>Even if the only languages at your disposal are Brainf**k and Intercal...</b>
</p>
<H3>Input</h3>
<P align=justify>
The number provided by the cryptographer (a positive integer of at most 99 decimal digits). The input ends with a new line symbol.
</p>
<H3>Output</h3>
<P align=justify>
The value of u.
</p>
<H3>Example</h3>
<div align=left>
<pre><b><tt>Input:</tt></b>
1

<b><tt>Output:</tt></b>
2
</pre>
(This example is possible for p=2, q=3)</div>



______________________________________________________
CRYPTO4||||||true||||||


<p>The Bytelandian Cryptographer has been requested by the BBFO to put forward an ecryption scheme which would allow the BBFO to communicate with its foreign associates. After some intensive studies, he has decided upon the Vigen?©re cipher. Messages written using 26 upper case characters of the Latin alphabet: A, B, ..., Z which are interpreted as integers 0,1, ..., 25 respectively. The secret cypher for transmitting a message is known to both sides and consists of n integers k<sub>1</sub>, k<sub>2</sub>,...,k<sub>n</sub>. Using this cypher, the i-th number x<sub>i</sub> of the input message x is encrypted to the form of the i-th number of the output message y, as follows:<br>y<sub>i</sub> =(x<sub>i</sub>+k<sub>1+ ((i-1) mod n)</sub>) mod 26.
<p>
You are trying to find out the content of a message transmitted by the BBFO. By a lucky stroke of fortune, your spys managed to intercept the message in both its plaintext and encrypted form (x and y respectively). Unfortunately, during their dramatic escape the files they were carrying where pierced by bullets and fragments of messages x and y were inadvertantly lost. Or were they? It is your task to reconstruct as much of message x as you possibly can.


*******InputConstraints*******

<p>The first line of input contains a single integer t<=200 denoting the number of test cases. t test case descriptions follow.
<p>
For each test case, the first line contains one integer m which is some upper bound on the length of the cypher (1<=n<=m<=100000). The second line of input contains the original message x, while the third line contains the encrypted message y. The messages are expressed using characters 'A'-'Z' (interpreted as integers 0-25) and '*' (denoting a single character illegible due to damage). The total length of the input file is not more than 2MB.


*******OutputConstraints*******

<p>For each test case output a single line containing the original message x, with asterisks '*' in place of only those characters whose value cannot be determined. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1
A*X*C
**CM*
4
*B***A
AAAAAA
6
*B***A
AAAAAA
4
*AA*******
AAAAAAAAAA

<b>Output:</b>
A*XHC
*BA*BA
*B***A
*AA**A****
</pre>
<b>Warning: large Input/Output data, be careful with certain languages.<br>The time limit is strict for this problem.</b>



______________________________________________________
TRICENTR||||||false||||||

<P align=justify>
Given the length of side a of a triangle and the distances from the centroid (the point of concurrence of the medians - red in the picture) to all sides: a, b and c, calculate this triangle's area and the distance (blue line) from the orthocenter (the point of concurrence of the heights - green in the picture) to the centroid.
</p>
<img src="http://www.spoj.pl/content/pomyk:tricentr1.gif">
<H3>Input</h3>
<P align=justify>
In the first line integer n - the number of test cases (equal to about 1000). The next n lines - 4 floating point values: the length of side a, and distances from the centroid to sides a, b and c.
</p>
<H3>Output</h3>
<P align=justify>
n lines consisting of 2 floating point values with 3 digits after the decimal point: the area of the triangle and the distance from the orthocenter to centroid.
</p>
<H3>Example</h3>
<pre>
<b>Input:</b>
2
3.0 0.8660254038 0.8660254038 0.8660254038
657.8256599140 151.6154399062 213.5392629932 139.4878846649

<b>Output:</b>
3.897 0.000
149604.790 150.275

</pre>


______________________________________________________
PIR||||||false||||||

<P>
Recently in Farland, a country in Asia, the famous scientist Mr. Log Archeo discovered ancient pyramids. But unlike those in Egypt and Central America, they have a triangular (not rectangular) foundation. That is, they are tetrahedrons in the mathematical sense. In order to find out some important facts about the early society of the country (it is widely believed that the pyramid sizes are closely connected with Farland's ancient calendar), Mr. Archeo needs to know the volume of the pyramids. Unluckily, he has reliable data about their edge lengths only. Please, help him!
</p>
<H3>Input</h3>
<P>
t [number of tests to follow]
In each of the next t lines six positive integer numbers not exceeding 1000 separated by spaces (each number is one of the edge lengths of the pyramid ABCD). The order of the edges is the following: AB, AC, AD, BC, BD, CD.
</p>
<H3>Output</h3>
<P>
For each test output a real number - the volume, printed accurate to four digits after decimal point.
</p>
<H3>Example</h3>
<P>
<pre>
<p>Input:</p>
<tt>2
1 1 1 1 1 1
1000 1000 1000 3 4 5
</tt>
<p>Output:</p>
0.1179
1999.9937
</pre>
</p>


______________________________________________________
FCTRL2||||||false||||||

<P align=justify>
You are asked to calculate factorials of some small positive integers.
</p>
<H3>Input</h3>
<P align=justify>
An integer t, 1<=t<=100, denoting the number of testcases, followed by t lines, each containing a single integer n, 1<=n<=100.</p>
<H3>Output</h3>
<P align=justify>
For each integer n given at input, display a line with the value of n!</p>
<H3>Example</h3>
<div align=left>
Sample input:
<pre>
4
1
2
5
3
</pre>
<p>
Sample output:
<pre>
1
2
120
6
</pre>
</div>


______________________________________________________
POUR1||||||false||||||

<P align=justify>
Given two vessels, one of which can accommodate <i>a</i> litres of water and the other - <i>b</i> litres of water, determine the number of steps required to obtain exactly <i>c</i> litres of water in one of the vessels.</p>
<P align=justify>
At the beginning both vessels are empty. The following operations are counted as 'steps':
<div align=left>
<ul>
<li>emptying a vessel,
<li>filling a vessel,
<li>pouring water from one vessel to the other, without spilling, until one of the vessels is either full or empty.
</ul>
</div>
</p>
<H3>Input</h3>
<P align=justify>
An integer <i>t</i>, 1<=<i>t</i><=100, denoting the number of testcases, followed by <i>t</i> sets of input data, each consisting of three positive integers <i>a, b, c</i>, not larger than 40000, given in separate lines.</p>
<H3>Output</h3>
<P align=justify>
For each set of input data, output the minimum number of steps required to obtain c litres, or -1 if this is impossible.
</p>
<H3>Example</h3>
<div align=left>
Sample input:
<pre>2
5
2
3
2
3
4
</pre>
</p>
Sample output:
<pre>
2
-1
</pre>
</div>


______________________________________________________
BSHEEP||||||false||||||

<P align=justify>
At the beginning of spring all the sheep move to the higher pastures in the mountains. If there are thousands of them, it is well worthwhile gathering them together in one place. But sheep don't like to leave their grass-lands. Help the shepherd and build him a fence which would surround all the sheep. The fence should have the smallest possible length! Assume that sheep are negligibly small and that they are not moving. Sometimes a few sheep are standing in the same place. If there is only one sheep, it is probably dying, so no fence is needed at all...
</p>
<H3>Input</h3>
<P align=justify>
<br>t [the number of tests <= 100]
<br>[empty line]
<br>n [the number of sheep <= 100000]
<br><i>x</i><sub>1</sub> <i>y</i><sub>1</sub> [coordinates of the first sheep]
<br>...
<br><i>x<sub>n</sub></i> <i>y<sub>n</sub></i>
<br>[integer coordinates from -10000 to 
10000]
<br>[empty line]
<br>[other lists of sheep]
<br>
<br>
Text grouped in [ ] does not appear in the input file. Assume that sheep are numbered in the input order.
</p>
<H3>Output</h3>
<P align=justify>
<br>o [length of circumference, 2 digits precision]
<br>p1 p2 ... pk 
<br>[the sheep that are standing in the corners of the fence; the first one should be positioned bottommost and as far to the left as possible, the others ought to be written in anticlockwise order; ignore all sheep standing in the same place but the first to appear in the input file; the number of sheep should be the smallest possible]
<br>[empty line]
<br>[next solutions]
</p>
<H3>Example</h3>
<pre>
Input:
8

5
0 0
0 5
10 5
3 3
10 0

1
0 0

3
0 0
1 0
2 0

4
0 0
0 0
0 1
1 0

3
0 0
0 1
1 0

6
0 0
-1 -1
1 1
2 2
3 3
4 4

2
10 0
0 0

7
-3 -4
2 -3
4 3
-4 2
0 5
2 -3
-1 4

Output:
30.00
1 5 3 2

0.00
1

4.00
1 3

3.41
1 4 3

3.41
1 3 2

14.14
2 6

20.00
2 1

26.98
1 2 3 5 4

</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SBANK||||||false||||||

<P align=justify>
In one of the internet banks thousands of operations are being performed every day. Since certain customers do business more actively than others, some of the bank accounts occur many times in the list of operations. Your task is to sort the bank account numbers in ascending order. If an account appears twice or more in the list, write the number of repetitions just after the account number.
The format of accounts is as follows: <b>2</b> control digits, an <b>8</b>-digit code of the bank, <b>16</b> digits identifying the owner (written in groups of four digits), for example (at the end of each line there is exactly one space):
<table align=center><td bgcolor=navy><font color=yellow><b>30 10103538 2222 1233 6160 0142A </b></font></td></table></p>
<p>
<b>Banks are real-time institutions and they need FAST solutions. If you feel you can meet the challenge within a very stringent time limit, go ahead!</b> A well designed sorting algorithm in a fast language is likely to succeed. <H3>Input</h3>
<P align=justify>
<br><i>t</i> [the number of tests <= <b>5</b>]
<br><i>n</i> [the number of accounts<= <b>100 000</b>]
<br>[list of accounts]
<br>[empty line]
<br>[next test cases]
</p>
<H3>Output</h3>
<P align=justify>
<br>[sorted list of accounts with the number of repeated accounts]
<br>[empty line]
<br>[other results]
</p>
<H3>Example</h3>
<pre>
Input:
2
6
03 10103538 2222 1233 6160 0142 
03 10103538 2222 1233 6160 0141 
30 10103538 2222 1233 6160 0141 
30 10103538 2222 1233 6160 0142 
30 10103538 2222 1233 6160 0141 
30 10103538 2222 1233 6160 0142 

5
30 10103538 2222 1233 6160 0144 
30 10103538 2222 1233 6160 0142 
30 10103538 2222 1233 6160 0145 
30 10103538 2222 1233 6160 0146 
30 10103538 2222 1233 6160 0143 

Output:
03 10103538 2222 1233 6160 0141 1
03 10103538 2222 1233 6160 0142 1
30 10103538 2222 1233 6160 0141 2
30 10103538 2222 1233 6160 0142 2

30 10103538 2222 1233 6160 0142 1
30 10103538 2222 1233 6160 0143 1
30 10103538 2222 1233 6160 0144 1
30 10103538 2222 1233 6160 0145 1
30 10103538 2222 1233 6160 0146 1
</pre>



______________________________________________________
HMRO||||||false||||||

<P align=justify>
At the end of year 2004, the regional agencies of the Polish Military Recruitment Office (known as WKU in Polish) is sending a call to all boys born in 1984. Every recruit has his personal 11-digit identification number (PESEL, format: YYMMDDXXXXX, where YYMMDD is the date of birth, and XXXXX is a zero-padded integer smaller than 100000). Every agency of the Military Recruitment Office has its own code (MRO, format: a place code consisting of 3 upper case letters and a one-digit number). But this year the army underwent some reforms and not all boys at conscription age are going to be recruited. 
The list of closed down MRO points is as follows: the code of the closed down MRO is followed by the code of some other MRO, to which all the recruits are now going to be assigned. The list of recruits contains their PESEL codes. Your task is to prepare the complete list of 
recruits and determine the codes of their new MRO-s.
</p>
<H3>Input</h3>
<P align=justify>
<pre>
<i>s</i> [the number of tests <= <b>10</b>]
<i>p</i> [the number of boys at conscription age <= <b>100000</b>]
<i>PESEL and MRO code</i>
<i>z</i> [the number of closed down MRO points <= <b>100000</b>]
<i>old_code new_code</i> [old_code - the code of closed down MRO,
new_code - its new MRO code]
<i>p</i> [the number of recruits <= <b>100000</b>]
<i>PESEL</i> [PESEL code of recruit]
[empty line]
[next tests]
</pre>
</p>
<H3>Output</h3>
<P align=justify>
<pre>
one PESEL and MRO code per line in the order of input
[empty line between tests]
[other results]
</pre>
</p>
<H3>Example</h3>
<pre>Input:
1
4
84101011111 GDA1
84010122222 GDA2
84010233333 GDA2
84020255555 GDY1
1
GDA2 GDA1
3
84101011111
84010122222
84020255555

Output:
84101011111 GDA1
84010122222 GDA1
84020255555 GDY1

</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
HASHIT||||||false||||||

<P align=justify>
Your task is to calculate the result of the hashing process in a table of 101 elements, containing keys that are strings of length at most 15 letters (ASCII codes '<i>A</i>',...,'<i>z</i>'). 
Implement the following operations:
<div align=left>
<ul>
<li>find the index of the element defined by the key (ignore, if no such element),
<li>insert a new key into the table (ignore insertion of the key that already exists),
<li>delete a key from the table (without moving the others),
by marking the position in table as <i>empty</i> (ignore non-existing keys in the table)
</li></ul></div>
<p>When performing find, insert and delete operations define the following function: <BR>
<i>integer Hash(string key)</i>,<br>which for a string <i>key</i>=<i>a</i><sub>1</sub></i>...<i>a<sub>n</sub></i> returns the value:<br>
<i>Hash</i>(<i>key</i>)=<i>h</i>(<i>key</i>) mod 101, where
<br><i>h</i>(<i>key</i>)=19 *(ASCII(<i>a</i><sub>1</sub>)*1+...+ASCII(<i>a<sub>n</sub></i>)*<i>n</i>).<br>Resolve collisions using the open addressing method, i.e. try to insert the key into the table at the first free position: (<i>Hash</i>(<i>key</i>)+<i>j</i><sup>2</sup>+23*<i>j</i>) mod 101, for <i>j</i>=1,...,19.
After examining of at least 20 table entries, we assume that the insert operation cannot be performed.
</p>
<H3>Input</h3>
<P align=justify>
<br><i>t</i> [the number of test cases <= 100]
<br><i>n</i><sub>1</sub> [the number of operations (one per line)[<= 1000] 
<br>ADD:string
<br>[or]
<br>DEL:string
[other test cases, without empty lines betwee series]
</p>
<H3>Output</h3>
<P align=justify>
For every test case you have to create a new table, insert or delete keys, and write to the output:
<br>
the number of keys in the table [first line]
<br>index:key [sorted by indices]
</p>
<H3>Example</h3>
<pre>
Input:
1
11
ADD:marsz
ADD:marsz
ADD:Dabrowski
ADD:z
ADD:ziemii
ADD:wloskiej
ADD:do
ADD:Polski
DEL:od
DEL:do
DEL:wloskiej
<!--
8
ADD:my
ADD:favourite
ADD:online
ADD:judge
ADD:sphere!
DEL:judge
DEL:my
DEL:my-->

Output:
5
34:Dabrowski
46:Polski
63:marsz
76:ziemii
96:z
<!--3
15:sphere!
37:favourite
70:online-->
</pre>



______________________________________________________
BLINNET||||||false||||||

<P align=justify>
<i>We have discovered the fastest communication medium </i> Bytelandian scientists announced, and they called it <i>blingors</i>.
The blingors are incomparably better than other media known before. Many companies in Byteland started to build blingors networks, so the information society in the kingdom of Bytes is fact!
The priority is to build the core of the blingors network, joinig main cities in the country. 
Assume there is some number of cities that will be connected at the beginning. The cost of building blingors connection between two cities depends on many elements, but it has been successfully estimated. 
Your task is to design the blingors network connections between some cities in this way that between any pair of cities is a communication route.  The cost of this network should be as small as possible.
</p>
<p>Remarks</p>
<div align=left>
<ul>
  <li>The name of the city is a string of at most 10 letters from <i>a,...,z</i>.
  </li><li>The cost of the connection between two cities is a positive integer. </li><li>The sum of all connections is not greater than 2<sup>32</sup>-1.
  </li><li>The number of cities is not greater than 10 000. </li></ul></div>
<H3>Input</h3>
<PRE>
<P align=justify>
<br><i>s</i> [number of test cases <= 10]
<i>n</i> [number of cities <= 10 000]
<i>NAME</i> [city name]
<i>p</i> [number of neigbouring cities to the city <i>NAME</i>]
<i>neigh</i> <i>cost</i> 
     [<i>neigh</i> - the unique number of  city from the main list
      <i>cost</i> - the cost of building the blingors connection from <i>NAME</i> to <i>neigh</i>]
[empty line between test cases]
</p>
</pre>
<H3>Output</h3>
<P align=justify>
[separate lines]
<i>cost</i> [the minimum cost of building the blingors network]</p>
<H3>Example</h3>
<pre>
<b>Input:</b>
2

4
gdansk
2
2 1
3 3
bydgoszcz
3
1 1
3 1
4 4
torun
3
1 3
2 1
4 1
warszawa
2
2 4
3 1

3
ixowo
2
2 1
3 3
iyekowo
2
1 1
3 7
zetowo
2
1 3 
2 7


<b>Output:</b>
3
4
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
MUL||||||false||||||

<P align=justify>
Multiply the given numbers.
</p>
<H3>Input</h3>
<P align=justify>
<pre>
<i>n</i> [the number of multiplications &lt;= 1000]
<i>l1 l2</i> [numbers to multiply (at most 10000 decimal digits each)]
<p align=left>
Text grouped in [ ] does not appear in the input file.
</p>
</pre>
</p>
<H3>Output</h3>
<P align=justify>
<pre>
The results of multiplications.
</pre>
</p>
<H3>Example</h3>
<pre>Input:
5
4 2
123 43
324 342
0 12
9999 12345

Output:
8
5289
110808
0
123437655
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
NHAY||||||false||||||

<P align=justify>
Write a program that finds all occurences of a given pattern in a given input string. This is often referred to as finding a <em>needle</em> in a <em>haystack</em>.</p>
<p>The program has to detect <strong>all</strong> occurences of the needle in the haystack. It should take the needle and the haystack as input, and output the positions of each occurence, as shown below.
The suggested implementation is the KMP algorithm, but this is not a requirement. However, a naive approach will probably exceed the time limit, whereas other algorithms are more complicated... The choice is yours.</p>
<H3>Input</h3>
<p>The input consists of a number of test cases. Each test case is composed of three lines, containing:</p>
<div align=left>
<ul>
	<li>the length of the needle,</li>
	<li>the needle itself,</li>
	<li>the haystack.</li>
</ul>
</div>
<p>The length of the needle is only limited by the memory available to your program, so do not make any assumptions - instead, read the length and allocate memory as needed. The haystack is <strong>not</strong> limited in size, which implies that your program should not read the whole haystack at once. The KMP algorithm is stream-based, i.e. it processes the haystack character by character, so this is not a problem.</p>
<p>The test cases come one after another, each occupying three lines, with no additional space or line breaks in between.</p>
<H3>Output</h3>
<p>For each test case your program should output all positions of the needle's occurences within the haystack. If a match is found, the output should contain the position of the first character of the match. Characters in the haystack are numbered starting with zero.</p>
<p>For a given test case, the positions output should be sorted in ascending order, and each of these should be printed in a separate line. For two different test cases, the positions should be separated by an empty line.</p>
<H3>Example</h3>
<pre>Sample input:<br>
2
na
banananobano
6
foobar
foo
9
foobarfoo
barfoobarfoobarfoobarfoobarfoo</pre>
<p>Sample output:
<pre>
2
4

3
9
15
21</pre>
<p>Note the double empty line in the output, which means that no match was found for the second test case.</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
TRIP||||||true||||||


<p align="justify">Alice and Bob want to go on holiday. Each of them has drawn up a list of cities to be visited in turn. A list may contain a city more than once. As they want to travel together, they have to agree upon a common route. No one wants to change the order of the cities on his list or add other cities. Therefore they have no choice but to remove some cities from the list. Of course the common route is to involve as much sight-seeing in cities as possible. There are exactly 26 cities in the region. Therefore they are encoded on the lists as lower case letters from 'a' to 'z'.</p>

*******InputConstraints*******

<p align="justify">The first line of input contains a number T &lt;= 10 that indicates the number of test cases to follow. Each test case consists of two lines; the first line is the list of Alice, the second line is the list of Bob. Each list consists of 1 to 80 lower case letters.</p>

*******OutputConstraints*******

<p align="justify">The output for each test case should contain all different trips exactly once that meet the conditions described above. There is at least one such trip, but never more than 1000 different ones. You should order the trips in lexicographic order. Print one blank line between the output of different test cases.</p>

*******IOTestCases*******

<h4>Input</h4>
<pre>1
abcabcaa
acbacba</pre>
<h4>Output</h4>
<pre>ababa
abaca
abcba
acaba
acaca
acbaa
acbca</pre>


______________________________________________________
RUNAWAY||||||false||||||

<p align=justify>
One of the traps we will encounter in the Pyramid is located in the Large Room.
A lot of small holes are drilled into the floor. They look completely harmless
at the first sight. But when activated, they start to throw out very
hot java, uh ... pardon, lava. Unfortunately, all known paths to the Center
Room (where the Sarcophagus is) contain a&nbsp;trigger that activates the
trap. The ACM were not able to avoid that. But they have carefully monitored
the positions of all the holes. So it is important to find the place in the
Large Room that has the maximal distance from all the holes. This place is
the safest in the entire room and the archaeologist has to hide there.

<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases. The number of them (<VAR>T</VAR>) is
given on the first line of the input file.  Each test case begins with a
line containing three integers <VAR>X</VAR>, <VAR>Y</VAR>, <VAR>M</VAR> separated by space. The numbers
satisfy conditions: 
<VAR>1 &lt;= X,Y &lt;=10000</VAR>, <VAR>1 &lt;= M &lt;= 1000</VAR>. The
numbers <VAR>X</VAR> and <VAR>Y</VAR>indicate the dimensions of the Large
Room which has a&nbsp;rectangular
shape. The number <VAR>M</VAR> stands for the number of holes. Then exactly <VAR>M</VAR> lines
follow, each containing two integer numbers <VAR>U<SUB>i</SUB></VAR> and <VAR>V<SUB>i</SUB></VAR>
(<VAR>0 &lt;= U<SUB>i</SUB> &lt;= X</VAR>,
<VAR>0 &lt;= V<SUB>i</SUB> &lt;= Y</VAR>) indicating the coordinates of one
hole. There may be several holes at the same position.

<H3>Output</H3>
<p align=justify>
Print exactly one line for each test case. The line should contain the
sentence "<CODE>The safest point is (<VAR>P</VAR>, <VAR>Q</VAR>).</CODE>"
where <VAR>P</VAR> and <VAR>Q</VAR>are the coordinates of the point in the
room that has the maximum
distance from the nearest hole, rounded to the nearest number with exactly
one digit after the decimal point (0.05 rounds up to 0.1).

<H3>Example</H3>

<PRE>
Sample Input:
3
1000 50 1
10 10
100 100 4
10 10
10 90
90 10
90 90
3000 3000 4
1200 85
63 2500
2700 2650 
2990 100

Sample output:
The safest point is (1000.0, 50.0).
The safest point is (50.0, 50.0).
The safest point is (1433.0, 1669.8).
</PRE>


______________________________________________________
EQBOX||||||false||||||

<p align=justify>
There is a large room in the Pyramid called <EM>Room-of-No-Return</EM>. Its
floor is covered by rectangular tiles of equal size. The name of the room
was chosen because of the very high number of traps and mechanisms in it.
The ACM group has spent several years studying the secret plan of this room.
It has made a clever plan to avoid all the traps. A specially trained
mechanic was sent to deactivate the most feared trap called Shattered Bones.
After deactivating the trap the mechanic had to escape from the room.
It is very important to step on the center of the tiles only; he must
not touch the edges. One wrong step and a large rock 
falls from the ceiling squashing the mechanic like a pancake. After deactivating
the trap, he realized a horrible thing: the ACM plan did not take his
equipment box into consideration. The box must be laid onto the
ground because the mechanic must have both hands free to prevent contact with
other traps. But when the box is laid on the ground, it could touch the line
separating the tiles. And this is the main problem you are to solve.

<H3>Input</H3>
<p align=justify>
The input consists of <VAR>T</VAR> test cases (T is equal to about 10000). The number of them (<VAR>T</VAR>) is given on
the first line of the input file.
Each test case consists of a single line. The line contains exactly four
integer numbers separated by spaces: <VAR>A</VAR>, <VAR>B</VAR>,
<VAR>X</VAR> and <VAR>Y</VAR>. <VAR>A</VAR> and <VAR>B</VAR>indicate the
dimensions of the tiles, <VAR>X</VAR> and <VAR>Y</VAR> are the dimensions of
the equipment box (<VAR>1 &lt;= A,B,X,Y &lt;= 50000</VAR>).

<H3>Output</H3>

<p align=justify>Your task is to determine whether it is possible to put the box on 
a&nbsp;single tile -- that is, if the whole box fits on a&nbsp;single tile without
touching its border. If so, you are to print one line with the
sentence "<CODE>Escape is possible.</CODE>". Otherwise print the sentence
"<CODE>Box cannot be dropped.</CODE>".


<H3>Example</h3>

<PRE>
Sample Input:

2
10 10 8 8
8 8 10 10

Sample output:

Escape is possible.
Box cannot be dropped.
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
CODE1||||||false||||||

<p align=justify>
The Sarcophagus itself is locked by a secret numerical code. When somebody
wants to open it, he must know the code and set it exactly on the top of the
Sarcophagus. A very intricate mechanism then opens the cover. If an incorrect
code is entered,
the tickets inside would catch fire immediately and they would
have been lost forever. The code (consisting of up to 100 integers)
was hidden in the Alexandrian Library but unfortunately, as you probably
know, the library burned down completely.

<p align=justify>
But an almost unknown archaeologist has obtained a copy of the code something
during the 18th century. He
was afraid that the code could get to the ``wrong people'' so he has
encoded the numbers in a very special way. He took a random complex number
<VAR>B</VAR> that was greater (in absolute value) than any of the encoded numbers. Then
he counted the numbers as the digits of the system with basis <VAR>B</VAR>. That means
the sequence of numbers <VAR>a<SUB>n</SUB></VAR>,
<VAR>a<SUB>n-1</SUB></VAR>, ..., <VAR>a<SUB>1</SUB></VAR>,
<VAR>a<SUB>0</SUB></VAR> was encoded as the number 
<VAR>X = a<SUB>0</SUB> + a<SUB>1</SUB>B + a<SUB>2</SUB>B<SUP>2</SUP> + ...+
a<SUB>n</SUB>B<SUP>n</SUP></VAR>.

<p align=justify>
Your goal is to decrypt the secret code, i.e. to express a given number <VAR>X</VAR> in
the number system to the base <VAR>B</VAR>. In other words, given the
numbers <VAR>X</VAR> and <VAR>B</VAR>you are to determine the ``digit''
<VAR>a<SUB>0</SUB></VAR> through <VAR>a<SUB>n</SUB></VAR>.


<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases (equal to about 100000). The number of them (<VAR>T</VAR>) is
given on the first line of the input file. Each test case consists of one single
line containing four integer numbers <VAR>X<SUB>r</SUB></VAR>,
X<SUB>i</SUB></VAR>, <VAR>B<SUB>r</SUB></VAR>, <VAR>B<SUB>i</SUB></VAR>
(<VAR>|X<SUB>r</SUB>|,|X<SUB>i</SUB>| &lt;= 1000000</VAR>,
<VAR>|B<SUB>r</SUB>|,|B<SUB>i</SUB>| &lt;= 16</VAR>). These numbers
indicate the real and complex components of numbers <VAR>X</VAR> and <VAR>B</VAR>,
i.e. <VAR>X = X<SUB>r</SUB> + i.X<SUB>i</SUB></VAR>,
<VAR>B = B<SUB>r</SUB> + i.B<SUB>i</SUB></VAR>. <VAR>B</VAR> is the basis of
the system (<VAR>|B| &gt; 1</VAR>), <VAR>X</VAR> is the number you have to
express.


<H3>Output</H3>

<p align=justify>Your program must output a single line for each test case. The line should
contain the ``digits'' <VAR>a<SUB>n</SUB></VAR>, <VAR>a<SUB>n-1</SUB></VAR>,
..., <VAR>a<SUB>1</SUB></VAR>, <VAR>a<SUB>0</SUB></VAR>, separated by 
commas. The following conditions must be satisfied:
<div align=left>
<UL>
<LI>for all <VAR>i</VAR> in <VAR>{0, 1, 2, ...n}</VAR>:
<VAR>0 &lt;= a<SUB>i</SUB> &lt; |B|</VAR>

<LI>
<VAR>X = a<SUB>0</SUB> + a<SUB>1</SUB>B + a<SUB>2</SUB>B<SUP>2</SUP> + ...+
a<SUB>n</SUB>B<SUP>n</SUP></VAR>

<LI>if <VAR>n &gt; 0</VAR> then <VAR>a<SUB>n</SUB> &lt;&gt; 0</VAR>

<LI><VAR>n &lt;= 100</VAR>
</UL></div>

<p align=justify>If there are no numbers meeting these criteria, output the sentence
"<CODE>The code cannot be decrypted.</CODE>". If there are more possibilities,
print any of them.


<H3>Example</h3>

<PRE>
Sample Input

4
-935 2475 -11 -15
1 0 -3 -2
93 16 3 2
191 -192 11 -12

Sample output:

8,11,18
1
The code cannot be decrypted.
16,15
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
PROPKEY||||||false||||||

<p align=justify>
Many people think that Tetris was invented by two Russian programmers. But that
is not the whole truth. The idea of the game is very old -- even the Egyptians had
something similar. But they did not use it as a game. Instead, it was used as
a&nbsp;very complicated lock. The lock was made of wood and consisted of a large
number of square fields, laid out in regular rows and columns. Each field was
either completely filled with wood, or empty. The key for this lock was
two-dimensional and it was made by joining square parts of the same size
as the fields of the lock. So they had a 2D lock and 2D key that could be
inserted into the lock from the top. The key was designed so that it was
not possible to move it upwards. It could only fall down and it could
slide sideways -- exactly like in a Tetris game. The only difference is
that the key could not be rotated. Rotation in Tetris is really a Russian
invention.

<p align=justify>
The entry gate into the Pyramid has such a lock. The ACM archaeologists have
found several keys and one of them belongs to the lock with a very high
probability. Now they need to try them out and find which one to use. Because
it is too time-consuming to try all of them, it is better to begin with those keys that
may be inserted deeper into the lock. Your program should be able to
determine how deep a given key can be inserted into a given lock.

<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases. The number of them (<VAR>T</VAR>) is given on
the first line of the input file.
Each test case begins with a line containing two integers <VAR>R</VAR> and <VAR>C</VAR>
(<VAR>1 &lt;= R,C &lt;= 100</VAR>) indicating the key size. Then exactly <VAR>R</VAR> rows follow,
each containing <VAR>C</VAR> characters. Each character is either a hash mark
(<CODE>#</CODE>) or a period (<CODE>.</CODE>). A hash mark represents one square field made
of wood; a period is an empty field. The wooden fields are always connected,
i.e. the whole key is made of one piece.
Moreover, the key remains connected even if we cut off arbitrary number of rows
from its top. There is always at least one
non-empty field in the top-most and bottom-most rows and the left-most and
right-most columns.

<p align=justify>After the key description, there is a line containing two integers <VAR>D</VAR> and <VAR>W</VAR>
(<VAR>1 &lt;= D &lt;= 10000</VAR>,
<VAR>1 &lt;= W &lt;= 1000</VAR>). The number <VAR>W</VAR> is the lock width,
and <VAR>D</VAR> is its
depth. The next <VAR>D</VAR> lines contain <VAR>W</VAR> characters each. The character may be
either a hash mark (representing the wood) or a period (the free space).


<H3>Output</H3>

<p align=justify>Your program should print one line of output for each test case. The line
should contain the statement
"<CODE>The key falls to depth <VAR>X</VAR>.</CODE>". Replace <VAR>X</VAR>
with the maximum depth to which the key can be inserted by moving it down 
and sliding it to the left or right only. The depth is measured as the distance
between the bottom side of the key and the top side of the lock. If it is
possible to move the key through the whole lock and take it away at the bottom
side, output the sentence "<CODE>The key can fall through.</CODE>".


<H3>Example</h3>
<PRE>
Sample Input:

4
2 4
#.##
###.
3 6
#....#
#....#
#..###
2 3
##.
.##
2 7
#.#.#.#
.#.#.#.
1 1
#
1 10
###....###
3 2
##
.#
.#
1 5
#.#.#


Sample output:

The key falls to depth 2.
The key falls to depth 0.
The key can fall through.
The key falls to depth 2.
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>



______________________________________________________
LABYR1||||||false||||||

<p align=justify>
The northern part of the Pyramid contains a very large and complicated
labyrinth. The labyrinth is divided into square blocks, each of them
either filled by rock, or free. There is also a little hook on
the floor in the center of every free block. The ACM have found that
two of the hooks must be connected by a rope that runs through the hooks in
every block on the path between the connected ones. When the rope is
fastened, a secret door opens. 
The problem is that we do not know which hooks to connect. That means 
also that the neccessary length of the rope is unknown. Your task is to 
determine the maximum length of the rope we could need for a given labyrinth.

<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases. The number of them (<VAR>T</VAR>) is given on
the first line of the input file.
Each test case begins with a line containing two integers <VAR>C</VAR> and <VAR>R</VAR>
(<VAR>3 &lt;= C,R &lt;= 1000</VAR>) indicating the number of columns and rows. Then
exactly <VAR>R</VAR> lines follow, each containing <VAR>C</VAR> characters. These characters
specify the labyrinth. Each of them is either a hash mark (<CODE>#</CODE>) or a period
(<CODE>.</CODE>). Hash marks represent rocks, periods are free blocks. It is
possible to walk between neighbouring blocks only, where neighbouring
blocks are blocks sharing a&nbsp;common side. We cannot walk
diagonally and we cannot step out of the labyrinth. 

<p align=justify>
The labyrinth is designed in such a way that there is exactly one path between
any two free blocks. Consequently, if we find the proper hooks to connect, it
is easy to find the right path connecting them.


<H3>Output</H3>

<p align=justify>Your program must print exactly one line of output for each test case. The
line must contain the sentence
"<CODE>Maximum rope length is <VAR>X</VAR>.</CODE>" where <VAR>X</VAR>is the
length of the longest path between any two free blocks, measured in blocks.


<H3>Example</h3>
<PRE>
Sample Input:

<tt>2
3 3
###
#.#
###
7 6
#######
#.#.###
#.#.###
#.#.#.#
#.....#
#######</tt>


Sample output:

<tt>Maximum rope length is 0.
Maximum rope length is 8.</tt>
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
PIGBANK||||||false||||||

<p align=justify>
Before ACM can do anything, a&nbsp;budget must be prepared and the necessary
financial support obtained. The main income for this action comes from
Irreversibly Bound Money (IBM). The idea behind is simple. Whenever
some ACM member has any small money, he takes all the coins and throws them
into a piggy-bank. You know that this process is irreversible, the coins
cannot be removed without breaking the pig. After a sufficiently long
time, there should be enough cash in the piggy-bank to pay everything that
needs to be paid.

<p align=justify>
But there is a big problem with piggy-banks. It is not possible to
determine how much money is inside. So we might break the pig into
pieces only to find out that there is not enough money.  Clearly, we want to
avoid this unpleasant situation. The only possibility is to weigh the
piggy-bank and try to guess how many coins are inside. Assume that we
are able to determine the weight of the pig exactly and that we know
the weights of all coins of a given currency. Then there is some
minimum amount of money in the piggy-bank that we can guarantee. Your task
is to find out this worst case and determine the minimum amount of
cash inside the piggy-bank. We need your help. No more prematurely
broken pigs!


<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases. The number of them (<VAR>T</VAR>) is given on
the first line of the input file.
Each test case begins with a line containing two integers <VAR>E</VAR> and <VAR>F</VAR>. They
indicate the weight of an empty pig and of the pig filled with coins. Both
weights are given in grams. No pig will weigh more than 10 kg, that means
<VAR>1 &lt;= E &lt;= F &lt;= 10000</VAR>. On the second line of each test
case, there is an integer number <VAR>N</VAR>
(<VAR>1 &lt;= N &lt;= 500</VAR>) that gives the number of various
coins used in the given currency. Following this are exactly <VAR>N</VAR> lines,
each specifying one coin type. These lines contain two integers each, <VAR>P</VAR>and <VAR>W</VAR>
(<VAR>1 &lt;= P &lt;= 50000</VAR>, <VAR>1 &lt;= W &lt;=10000</VAR>).
<VAR>P</VAR> is the value of the
coin in monetary units, <VAR>W</VAR> is it's weight in grams.


<H3>Output</H3>

<p align=justify>Print exactly one line of output for each test case. The line must contain
the&nbsp;sentence 
"<CODE>The minimum amount of money in the piggy-bank is <VAR>X</VAR>.</CODE>"
where <VAR>X</VAR> is
the minimum amount of money that can be achieved using coins with
the given total weight. If the weight cannot be reached exactly,
print a&nbsp;line "<CODE>This is impossible.</CODE>".


<H3>Example</h3>
<PRE>
Sample Input:

3
10 110
2
1 1
30 50
10 110
2
1 1
50 30
1 6
2
10 3
20 4

Sample output:

The minimum amount of money in the piggy-bank is 60.
The minimum amount of money in the piggy-bank is 100.
This is impossible.
</PRE>



______________________________________________________
STONE||||||false||||||

<p align=justify>
There are many secret openings in the floor which are covered by a big heavy
stone. When the stone is lifted up, a special mechanism detects this and
activates poisoned arrows that are shot near the opening. The
only possibility is to lift the stone very slowly and carefully. The ACM team
must connect a rope to the stone and then lift it using a pulley. Moreover,
the stone must be lifted all at once; no side can rise before another.
So it is very important to find the centre of gravity and connect the rope
exactly to that point. The stone has a polygonal shape and its height
is the same throughout the whole polygonal area. Your task is to find the
centre of gravity for the given polygon.

<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases (equal to about 500). The number of them (<VAR>T</VAR>) is given on
the first line of the input file.
Each test case begins with a line containing a single integer <VAR>N</VAR>
(<VAR>3 &lt;= N &lt;= 1000000</VAR>) indicating the number of points that
form the polygon. This is followed by <VAR>N</VAR> lines, each containing
two integers <VAR>X<SUB>i</SUB></VAR> and <VAR>Y<SUB>i</SUB></VAR>
(<VAR>|X<SUB>i</SUB>|, |Y<SUB>i</SUB>| &lt;= 20000</VAR>).
These numbers are the coordinates of the <VAR>i</VAR>-th point. When we connect the
points in the given order, we get a polygon. You may assume that the edges
never touch each other (except the neighbouring ones) and that they never
cross. The area of the polygon is never zero, i.e. it cannot collapse into
a single line.


<H3>Output</H3>

<p align=justify>Print exactly one line for each test case. The line should contain exactly
two numbers separated by one space. These numbers are the coordinates of the
centre of gravity. Round the coordinates to the nearest number with exactly
two digits after the decimal point (0.005 rounds up to 0.01). Note that
the centre of gravity may be outside the polygon, if its shape is not convex.
If there is such a case in the input data, print the centre anyway.


<H3>Example</H3>
<PRE>

Sample Input:
2
4
5 0
0 5
-5 0
0 -5
4
1 1
11 1
11 11
1 11

Sample output:

0.00 0.00
6.00 6.00
</PRE>




______________________________________________________
WORDS1||||||false||||||

<p align=justify>
Some of the secret doors contain a&nbsp;very interesting word puzzle. The team of
archaeologists has to solve it to open  that doors. Because there is no
other way to open the doors, the puzzle is very important for us.

<p align=justify>
There is a&nbsp;large number of magnetic plates on every door. Every plate has one
word written on it. The plates must be arranged into a sequence in such a way that
every word begins with the same letter as the previous
word ends. For example, the word ``ac<U>m</U>'' can be followed by the word
``<U>m</U>otorola''. Your
task is to write a computer program that will read the list of words and
determine whether it is possible to arrange all of the plates in
a&nbsp;sequence (according to the given rule) and consequently to open the door.


<H3>Input</H3>

<p align=justify>The input consists of <VAR>T</VAR> test cases. The number of them (<VAR>T</VAR>, equal to about 500) is given on
the first line of the input file.
Each test case begins with a line containing a&nbsp;single integer number <VAR>N</VAR> that indicates the number of plates
(<VAR>1 &lt;= N &lt;= 100000</VAR>). Then exactly <VAR>N</VAR>lines follow,
each containing a&nbsp;single word. Each word contains at least two
and at most 1000 lowercase characters, that means only letters '<CODE>a</CODE>'
through '<CODE>z</CODE>' will appear in the word. The same word may appear several
times in the list.


<H3>Output</H3>

<p align=justify>Your program has to determine whether it is possible to arrange all the plates in
a&nbsp;sequence such that the first letter of each word is equal to the last
letter of the previous word. All the plates from the list must be used, each
exactly once. The words mentioned several times must be
used that number of times.

<p align=justify>
If there exists such an ordering of plates, your program should print 
the&nbsp;sentence "<CODE>Ordering is possible.</CODE>". Otherwise, output
the&nbsp;sentence "<CODE>The door cannot be opened.</CODE>".


<H3>Example</H3>
<PRE>
Sample input:

3
2
acm
ibm
3
acm
malform
mouse
2
ok
ok


Sample output:

The door cannot be opened.
Ordering is possible.
The door cannot be opened.
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
ADDREV||||||false||||||

<P>The Antique Comedians of Malidinesia prefer comedies to tragedies.
Unfortunately, most of the ancient plays are tragedies. Therefore the
dramatic advisor of ACM has decided to transfigure some tragedies into
comedies. Obviously, this work is very hard because the basic sense of the
play must be kept intact, although all the things change to their opposites.
For example the numbers: if any number appears in the tragedy, it must be
converted to its reversed form before being accepted into the comedy play.

<P>Reversed number is a number written in arabic numerals but the order of
digits is reversed. The first digit becomes last and vice versa. For
example, if the main hero had 1245 strawberries in the tragedy, he has 5421
of them now. Note that all the leading zeros are omitted. That means if the
number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21).
Also note that the reversed number never has any trailing zeros.

<P>ACM needs to calculate with reversed numbers.
Your task is to add two reversed numbers and output their
reversed sum. Of course, the result is not unique because any particular number 
is a reversed form of several numbers (e.g. 21 could be 12, 120 or 1200
before reversing). Thus we must assume that no zeros were lost by reversing
(e.g. assume that the original number was 12).


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases (equal to about 10000). The first line of the
input contains only positive integer <VAR>N</VAR>. Then follow the cases.
Each case consists of exactly one line with two positive integers
separated by space. These are the reversed numbers you are to add.


<H3>Output</H3>

<P>For each case, print exactly one line containing
only one integer - the reversed sum of two reversed numbers. 
Omit any leading zeros in the output.


<H3>Example</H3>
<PRE>
Sample input: 

3
24 1
4358 754
305 794

Sample output:

34
1998
1
</PRE>



______________________________________________________
BOOKS1||||||false||||||

<P>Before the invention of book-printing, it was very hard to
make a copy of a book. All the contents had to be re-written by hand by
so called <I>scribers</I>. The scriber had been given a book and after
several months he finished its copy. One of the most famous scribers lived
in the 15th century and his name was Xaverius Endricus Remius Ontius
Xendrianus (<I>Xerox</I>). Anyway, the work was very annoying and boring.
And the only way to speed it up was to hire more scribers.

<P>Once upon a time, there was a theater ensemble that wanted to play famous
Antique Tragedies. The scripts of these plays were divided into many books
and actors needed more copies of them, of course. So they hired many scribers
to make copies of these books. Imagine you have <VAR>m</VAR> books (numbered
<VAR>1, 2 ... m</VAR>) that may have different number of pages
(<VAR>p<SUB>1</SUB>, p<SUB>2</SUB> ... p<SUB>m</SUB></VAR>) and you want to
make one copy of each of them. Your task is to divide these books among
<VAR>k</VAR> scribes, <VAR>k &lt;= m</VAR>.
Each book can be assigned to a single scriber only, and every scriber
must get a continuous sequence of books. That means, there exists
an increasing succession of numbers <VAR>0 = b<SUB>0</SUB> &lt;
b<SUB>1</SUB> &lt; b<SUB>2</SUB>, ... &lt; b<SUB>k-1</SUB> &lt;=
b<SUB>k</SUB> = m</VAR> such that <VAR>i</VAR>-th scriber gets a sequence
of books with numbers between <VAR>b<SUB>i-1</SUB>+1</VAR> and
<VAR>b<SUB>i</SUB></VAR>.
The time needed to make a copy of all the books is determined by the scriber
who was assigned the most work. Therefore, our goal is to minimize the
maximum number of pages assigned to a single scriber. Your task is to find
the optimal assignment.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases (equal to about 200). The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases.
Each case consists of exactly two lines. At the first line, there are 
two integers <VAR>m</VAR> and <VAR>k</VAR>, <VAR>1 &lt;= k &lt;= m &lt;=
500</VAR>.
At the second line, there are integers <VAR>p<SUB>1</SUB>, p<SUB>2</SUB>,
... p<SUB>m</SUB></VAR>
separated by spaces. All these values are positive and less than 10000000.


<H3>Output</H3>

<P>For each case, print exactly one line.
The line must contain the input succession <VAR>p<SUB>1</SUB>,
p<SUB>2</SUB>, ... p<SUB>m</SUB></VAR> divided into exactly <VAR>k</VAR>
parts such that the maximum sum of a single part should be as small as
possible. Use the slash character ('<TT>/</TT>') to separate the parts.
There must be exactly one space character between any two successive numbers
and between the number and the slash.

<P>If there is more than one solution, print the one that minimizes the work
assigned to the first scriber, then to the second scriber etc. But each
scriber must be assigned at least one book.

<H3>Example</H3>

<PRE>

Sample input:

2
9 3
100 200 300 400 500 600 700 800 900
5 4
100 100 100 100 100

Sample output:

100 200 300 400 500 / 600 700 / 800 900
100 / 100 / 100 / 100 100
</PRE>


______________________________________________________
SCYPHER||||||false||||||

<P>Antique Comedians of Malidinesia would like to play a new discovered
comedy of Aristofanes. Putting it on a stage should be a big surprise for
the audience so all the preparations must be kept absolutely secret.
The ACM director suspects one of his competitors of reading his
correspondece. To prevent other companies from revealing his secret, he
decided to use a substitution cipher in all the letters mentioning the
new play.

<P>Substitution cipher is defined by a substitution table assigning each
character of the substitution alphabet another character of the same alphabet.
The assignment is a bijection (to each character exactly
one character is assigned -- not neccessary different).
The director is afraid of disclosing the substitution table and
therefore he changes it frequently. After each change he chooses a few
words from a dictionary by random, encrypts them and sends them together with
an encrypted message. The plain (i.e. non-encrypted) words
are sent by a secure channel, not by mail. The recipient of the message
can then compare plain and encrypted words and create
a new substitution table.

<P>Unfortunately, one of the ACM cipher specialists have found that this
system is sometimes insecure. Some messages can be decrypted by the rival
company even without knowing the plain words. The reason is
that when the director chooses the words from the dictionary and encrypts them, 
he never changes their order (the words in the dictionary are
lexicographically sorted). String <VAR>a<SUB>1</SUB>a<SUB>2</SUB> ...
a<SUB>p</SUB></VAR> is lexicografically smaller than
<VAR>b<SUB>1</SUB>b<SUB>2</SUB> ... b<SUB>q</SUB></VAR> if there exists an
integer <VAR>i</VAR>, <VAR>i &lt;= p, i &lt;= q</VAR>, such that
<VAR>a<SUB>j</SUB>=b<SUB>j</SUB></VAR> for each <VAR>j, 1 &lt;= j &lt;
i</VAR> and <VAR>a<SUB>i</SUB> &lt; b<SUB>i</SUB></VAR>.

<P>The director is interested in which of his messages could be
read by the rival company. You are to write a program to determine that.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases (equal to about 1000). The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases. 
The first line of each case contains only two positive integers
<VAR>A</VAR>, <VAR>1 &lt;= A &lt;= 26</VAR>, and <VAR>K</VAR>, separated by
space. <VAR>A</VAR> determines the size of the substitution alphabet (the
substitution alphabet consists of the first <VAR>A</VAR> lowercase letters
of the english alphabet (a--z) and <VAR>K</VAR> is the number of encrypted
words. The plain words contain only the letters of the substitution
alphabet. The plain message can contain any symbol, but only the letters of
the substitution alphabet are encrypted. Then follow <VAR>K</VAR> lines,
each containing exactly one encrypted word. At the next line is encrypted
message.


<H3>Output</H3>

<P>For each case, print exactly one line. If it is possible
to decrypt the message uniquely, print the
decrypted message. Otherwise, print the sentence
'<TT>Message cannot be decrypted.</TT>'.


<H3>Example</H3>
<PRE>
Sample input:

2
5 6
cebdbac
cac
ecd
dca
aba
bac
cedab
4 4
cca
cad
aac
bca
bdac

Sample output:

abcde
Message cannot be decrypted.
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
COMMEDIA||||||false||||||

<P>So called <I>commedia dell' arte</i> is a theater genre first
played in Italy at the beginning of the sixteenth century. It was inspired
with the Roman Theater. The play had no fixed script and the actors (also
called <I>performers</i>) had to improvise a lot. There were only a simple
directions by the author like "enter the stage and make something funny" or
"everyone comes on stage and everything is resolved happily". You can see it
might be very interesting to play the commedia dell' arte. Therefore
the ACM want to put a new play on a stage, which was completely unknown
before. The main hero has a puzzle that takes a very important role in the
play and gives an opportunity of many improvisations.

The puzzle is the worldwide known <I>Lloyd's Fifteen Puzzle</i>. ACM wants
to make the play more interesting so they want to replace the
"standard" puzzle with a three-dimensional one. The puzzle consists
of a cube containing <VAR>M<SUP>3</sup></var> slots. Each slot except one
contains a cubic tile (one position is free).
The tiles are numbered from <VAR>1</var> to <VAR>M<SUP>3</sup>-1</var>.
The goal of the puzzle is to get the original ordering of
the tiles after they have been randomly reshuffled.  The only allowed
moves are sliding a neighbouring tile into the free position along one
of the three principal directions. Original configuration is when slot
with coordinates <VAR>(x,y,z)</var> from <VAR>{0,...,M-1}<SUP>3</sup></var>
contains tile number <VAR>z.M<SUP>2</sup>+y.M+x+1</var> and slot
<VAR>(M-1,M-1,M-1)</var> is free.

<P>You are to write a program to determine whether it is possible 
to solve the puzzle or not.


<H3>Input</h3>

<P>The input consists of <VAR>N</VAR> cases. The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases. The
first line of each case contains only one integer <VAR>M</var>, <VAR>1 &lt;=
M &lt;= 100</var>. It is the size of 3D puzzle cube.  Then follow
<VAR>M</VAR> lines, each contains exactly <VAR>M<SUP>2</sup></VAR> numbers
on the tiles for one layer. First is the layer on the top of the cube and
the last one on the bottom. In each layer numbers are arranged from the left
top corner linewise to the right bottom corner of the layer. In other words,
slot with coordinates <VAR>(x,y,z)</var> is described by the
<VAR>(x+M.y+1)</var>-th number on the <VAR>(z+1)</var>-th line.
Numbers are separated by space.  Number <VAR>0</var> means free position.


<H3>Output</h3>

<P>For each case, print exactly one line. 
If the original configuration can be reached by sliding the tiles,
print the sentence '<TT>Puzzle can be solved.</tt>'. Otherwise, print the
sentence '<TT>Puzzle is unsolvable.</tt>'.


<H3>Example</h3>
<PRE>
Sample input:

2
2
1 2 3 4
5 7 6 0
2
2 1 3 5
4 6 0 7

Sample output:

Puzzle is unsolvable.
Puzzle can be solved.
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SCRAPER||||||false||||||

<P>What a great idea it is to build skyscrapers! Using not too
large area of land, which is very expensive in many cities today, the
skyscrapers offer an extremely large utility area for flats or offices. 
The only disadvantage is that it takes too long to get to the upper 
floors. Of course these skyscrapers have to be equiped not only 
with a stairway but also with several elevators. But even using 
ordinary elevators is very slow. Just imagine you want to get from 
the very top floor to the base floor and many other people on other 
floors want the same. As a result the elevator stops on almost every 
floor and since its capacity is limited and the elevator is already 
full from the upper floors, most stops are useless and just cause 
a delay. If there are more elevators in the skyscrapers, this problem 
is a little bit eliminated but still not completely. Most people just 
press all the buttons of all the elevators and then take the first 
one so that all elevators will stop on the floor anyway.

<P>However, the solution exists as we shall see. The Antique Comedians of
Midilesia headquarters reside in a skyscraper with a very special
elevator system. The elevators do not stop on every floor but only on
every <VAR>X</VAR>-th floor.
Moreover each elevator can go just to a certain floor <VAR>Y</VAR>
(called starting floor) and cannot go any lower. There is one
high-capacity elevator which can stop on every elevator's starting
floor.

<P>The ACM has a big problem. The headquarters should be moved to
another office this week, possibly on a different floor. 
Unfortunately, the high-capacity elevator is
out of order right now so it is not always possible to go to the base
floor. One piece of furniture cannot be moved using the stairway because it
is too large to pass through the stairway door. You are to write
a program that decides whether it is possible to move a piece of
furniture from the original office to the other.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases (equal to about 2000). The first line contains only
one positive integer <VAR>N</VAR>. Then follow the cases.
Each case starts with a line containing four integers 
<VAR>F</VAR>, <VAR>E</VAR>, <VAR>A</VAR>, <VAR>B</VAR>, where <VAR>F</VAR>,
<VAR>1 &lt;= F &lt; 50000000</VAR> determines the number of floors in the
skyscraper (this means that there are floors <VAR>0</VAR> to
<VAR>F-1</VAR>),
<VAR>E</VAR>, <VAR>0 &lt; E &lt; 100</VAR> is the number of elevators and
<VAR>A</VAR>, <VAR>B</VAR>, <VAR>0 &lt;= A,B &lt; F</VAR> are numbers of the
two floors between which the piece of furniture should be moved. Then
follow <VAR>E</VAR> lines. Each of them contains description of one elevator.
There are exactly two integers <VAR>X</VAR> and <VAR>Y</VAR>, <VAR>X &gt;
0</VAR>, <VAR>Y &gt;= 0</VAR> at
each line. <VAR>Y</VAR> determines, that the elevator starts on the
<VAR>Y</VAR>-th floor and <VAR>X</VAR> determines, that it stops on every
<VAR>X</VAR>-th floor, eg. for <VAR>X = 3</VAR>, <VAR>Y = 7</VAR> the
elevator stops on floors 7, 10, 13, 16, etc.).


<H3>Output</H3>

<P>For each case, print exactly one line.
If floor <VAR>B</VAR> is reachable from floor <VAR>A</VAR> not using the
stairway, print the sentence
'<TT>It is possible to move the furniture.</TT>', otherwise print 
'<TT>The furniture cannot be moved.</TT>'.


<H3>Example</H3>
<PRE>
Sample input:

2
22 4 0 6
3 2
4 7
13 6
10 0
1000 2 500 777
2 0
2 1

Sample output:

It is possible to move the furniture.
The furniture cannot be moved.
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
BEADS||||||false||||||

<P>Once upon a time there was a famous actress. As you may expect, she played
mostly Antique Comedies most of all. All the people loved her. But she was not
interested in the crowds. Her big hobby were beads of any kind. Many bead
makers were working for her and they manufactured new necklaces and
bracelets every day. One day she called her main <I>Inspector of Bead
Makers</I> (<I>IBM</I>) and told him she wanted a very long and special
necklace.

<P>The necklace should be made of glass beads of different sizes connected
to each other but without any thread running through the beads, so that
means the beads can be disconnected at any point. The actress chose the
succession of beads she wants to have and the IBM promised to make the
necklace. But then he realized a problem. The joint between two neighbouring
beads is not very robust so it is possible that the necklace will get torn
by its own weight. The situation becomes even worse when the necklace is
disjoined. Moreover, the point of disconnection is very important. If there
are small beads at the beginning, the possibility of tearing is much higher
than if there were large beads. IBM wants to test the robustness of a
necklace so he needs a program that will be able to determine the worst
possible point of disjoining the beads.

<P>The description of the necklace is a string <VAR>A =
a<SUB>1</SUB>a<SUB>2</SUB> ... a<SUB>m</SUB></VAR>
specifying sizes of the particular beads, where the last character
<VAR>a<SUB>m</SUB></VAR> is considered to precede character
<VAR>a<SUB>1</SUB></VAR> in circular fashion. 

<P>The disjoint point <VAR>i</VAR> is said to be worse than the disjoint
point <VAR>j</VAR> if and only if the string
<VAR>a<SUB>i</SUB>a<SUB>i+1</SUB> ... a<SUB>n</SUB>a<SUB>1</SUB> ...
a<SUB>i-1</SUB></VAR> is lexicografically smaller than the string
<VAR>a<SUB>j</SUB>a<SUB>j+1</SUB> ... a<SUB>n</SUB>a<SUB>1</SUB> ...
a<SUB>j-1</SUB></VAR>.
String <VAR>a<SUB>1</SUB>a<SUB>2</SUB> ... a<SUB>n</SUB></VAR> is
lexicografically smaller than the string
<VAR>b<SUB>1</SUB>b<SUB>2</SUB> ... b<SUB>n</SUB></VAR> if and only if there
exists an integer <VAR>i, i <= n</VAR>, so that
<VAR>a<SUB>j</SUB>=b<SUB>j</SUB></VAR>, for each <VAR>j, 1 <= j <
i</VAR> and <VAR>a<SUB>i</SUB> < b<SUB>i</SUB></VAR>.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases. The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases. 
Each case consists of exactly one line containing necklace description.
Maximal length of each description is 10000 characters. 
Each bead is represented by a lower-case character of 
the english alphabet (a--z), where <VAR>a < b   ...   z</VAR>.


<H3>Output</H3>

<P>For each case, print exactly one line containing
only one integer -- number of the
bead which is the first at the worst possible disjoining, i.e. such
<VAR>i</VAR>, that the string <VAR>A[i]</VAR> is lexicographically smallest
among all the <VAR>n</VAR> possible disjoinings of a necklace. If there are
more than one solution, print the one with the lowest <VAR>i</VAR>.


<H3>Example</H3>
<PRE>
Sample input:

4
helloworld
amandamanda
dontcallmebfu
aaabaaa

Sample output:

10
11
6
5
</PRE>


______________________________________________________
HAREFOX||||||false||||||

<P>The Antique Comedians of Malidinesia play an interesting comedy
where many animals occur. Because they want their plays to be as true as
possible, a specialist studies the behaviour of various animals.
Recently, he is interested in a binary dynamic ecological
system hares-foxes (SHF). As a part of this project, you are asked to design
and implement intelligent automatic target evaluation simulator
(IATES) for this system. The behaviour of the SHF follows so
called <I>standard model</I>, described by the following set of
difference equations.

<P ALIGN="Center">
h<SUB>y+1</SUB> = a.h<SUB>y</SUB> - b.f<SUB>y</SUB>
<BR>f<SUB>y+1</SUB> = c.f<SUB>y</SUB> + d.h<SUB>y</SUB>

<P>where h<SUB>y</SUB> resp. f<SUB>y</SUB> represent the difference of the
number of hares resp. foxes in year <SUB>y</SUB> and the reference count
determined at the beginning of the experiment. The units of h<SUB>y</SUB>
and f<SUB>y</SUB> are unknown. Therefore, h<SUB>y</SUB> and f<SUB>y</SUB>
are to be treated as real numbers.
Your task is to write a program to determine the long term evolution of SHF.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases (equal to about 5000). The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases.
Each case consists of six real numbers <VAR>a, b, c, d,
h<SUB>1998</SUB></VAR> and <VAR>f<SUB>1998</SUB></VAR>,
written in this order on three lines, two numbers per line, separated
by one or more spaces. The numbers are given in the classical format,
i.e. optional sign, sequence of digits, optional dot and optional
sequence of digits. The text form of a number
does not exceed 10 characters. Each case is followed by one empty line.


<H3>Output</H3>
<p>
For each case, print one of the following sentences:
</p>
<div align=justify><UL>

<LI> '<TT>Ecological balance will develop.</TT>' -
if after sufficiently long time the population of both hares and foxes 
approaches the reference count with an arbitrary a priori given
precision, i.e. <VAR>lim h<SUB>y</SUB>=0</VAR> and <VAR>lim
f<SUB>y</SUB>=0</VAR>.

<LI>'<TT>Hares will die out while foxes will overgrow.</TT>' -
if after sufficiently long time the population of hares resp. foxes 
falls under resp. exceeds any a priori given threshold, i.e.
<VAR>lim h<SUB>y</SUB>=-infinity</VAR> and
<VAR>lim f<SUB>y</SUB>=+infinity</VAR>.

<LI>'<TT>Hares will overgrow while foxes will die out.</TT>' -
if after sufficiently long time the population of foxes resp. hares
falls under resp. exceeds any a priori given threshold, i.e.
<VAR>lim h<SUB>y</SUB>=+infinity</VAR> and
<VAR>lim f<SUB>y</SUB>=-infinity</VAR>.

<LI>'<TT>Both hares and foxes will die out.</TT>' -
if after sufficiently long time the population of both hares and foxes
falls under any a priori given threshold, i.e.
<VAR>lim h<SUB>y</SUB>=-infinity</VAR> and
<VAR>lim f<SUB>y</SUB>=-infinity</VAR>.

<LI>'<TT>Both hares and foxes will overgrow.</TT>' -
if after sufficiently long time the population of both hares and foxes
exceeds any a priori given threshold, i.e.
<VAR>lim h<SUB>y</SUB>=+infinity</VAR> and
<VAR>lim f<SUB>y</SUB>=+infinity</VAR>.

<LI>'<TT>Chaos will develop.</TT>' - if none of the above mentioned 
description fits.

</UL></div>


<H3>Example</H3>
<PRE>
Sample input:

2
2 0.5
0.5 0.6
2 3

0.1 1 
2 0.1
1 1

Sample output:

Both hares and foxes will overgrow.
Hares will die out while foxes will overgrow.
</PRE>



______________________________________________________
INCARDS||||||false||||||

<P>In the age of television, not many people attend theater
performances. Antique Comedians of Malidinesia are aware of this fact. They
want to propagate theater and, most of all, Antique Comedies. They have
printed invitation cards with all the necessary information and with the
programme. A lot of students were hired to distribute these invitations
among the people. Each student volunteer has assigned exactly one bus stop
and he or she stays there the whole day and gives invitation to people
travelling by bus. A special course was taken where students learned
how to influence people and what is the difference between influencing
and robbery.

<P>The transport system is very special: all lines are
unidirectional and connect exactly two stops. Buses leave
the originating stop with passangers each half an hour. After reaching
the destination stop they return empty to the originating stop,
where they wait until the next full half an hour, e.g. X:00 or
X:30, where 'X' denotes the hour. The fee for transport between two
stops is given by special tables and is payable on the spot. The
lines are planned in such a way, that each round trip (i.e. a journey
starting and finishing at the same stop) passes through a <I>Central
Checkpoint Stop</I> (CCS) where each passenger has to pass a thorough
check including body scan.

<P>All the ACM student members leave the CCS each morning. Each volunteer is
to move to one predetermined stop to invite passengers. There are as many
volunteers as stops. At the end of the day, all students travel back to CCS.
You are to write a computer program that helps ACM to minimize the amount of
money to pay every day for the transport of their employees.


<H3>Input</H3>

<P>The input consists of <VAR>N</VAR> cases. The first line of the input
contains only positive integer <VAR>N</VAR>. Then follow the cases.
Each case begins with a line containing exactly two integers
<VAR>P</VAR> and <VAR>Q</VAR>, <VAR>1 &lt;= P,Q &lt;= 1000000</VAR>.
<VAR>P</VAR> is the number of stops including CCS and <VAR>Q</VAR> the
number of bus lines. Then there are <VAR>Q</VAR> lines, each describing one
bus line. Each of the lines contains exactly three numbers - the originating
stop, the destination stop and the price. The CCS is designated by
number <VAR>1</VAR>. Prices are positive integers the sum of which is
smaller than <VAR>1000000000</VAR>. You can also assume it is always
possible to get from any stop to any other stop.


<H3>Output</H3>

<P>For each case, print one line containing the minimum amount of
money to be paid each day by ACM for the travel costs of its volunteers.


<H3>Example</H3>
<PRE>
Sample input:

2
2 2
1 2 13
2 1 33
4 6
1 2 10
2 1 60
1 3 20
3 4 10
2 4 5
4 1 50

Sample output:

46
210
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
TOUR||||||false||||||

<P align=justify>
 We consider only special type of tournaments. Each tournament consists of a series of matches. We have <i>n</i> competitors at the beginning of a competition and after each match the loser is moved out of the competition and the winner stays in (there are no draws).
The tournament ends when there is only one participant left - the winner.
It is a task of National Sports Federation to schedule the matches.
Members of this committee can pick the contestants for the first match. Then, after they know the result, they say which of the remaining contestants meet in the second match,
and so on until there is only one participant left. 
<BR>
It is easy to see that not only skill and training decides about the win, but also
"luck" - i.e. the schedule. The members of NSF know it as well.
<BR>
The committee used the training time to look carefully on the performance of each probable contestant. It is clear now, at the start of the season, that some of the results between the competitors are 100% predictable. Having this information
NSF considers if it is possible to schedule the matches in such a way that the given contestant <b> x</b> wins. That is to plan the matches for <b>x</b> only with those who will lose with him (then he wins the whole tournament of course).
If it is possible then w say that <b>the tournament can be set for x</b>.
</P>
<H3>Task</H3>
<P align=justify>
Your task is to write a program which determines 
the number of contestants of a given tournament for which it is possible to set it.
</P>
<H3>Input</H3>
<P align=justify>
t [number of tests to solve].
<BR>
In the first line of each test:
n (1<=n<=1000) - the number of participants of the tournament. We number the participants with numbers 1,2, ... ,n. 
The following line contains a list of participants who will inevitably win with participant 1. This list begins with a number <i>m</i> (the number of contestants "better" than 1) and numbers n<sub>1</sub>,n<sub>2</sub>, ... , n<sub>m</sub> 
delimited by single spaces. <BR>
Next <i>n-1</i> lines contain analogous lists for participants 2, 3, ..., n.
<BR>
Remark 1. The fact that participant <b>a</b> would lose with <b>b</b> and <b>b</b>
would lose with <b>c</b> doesn't necessarily mean that <b>a</b> would lose with <b>c</b> in a direct match.
<BR>
Remark 2. It is not possible that <b>a</b> is on the list of contestants better than <b>b</b> and <b>b</b> is on the list of <b>a</b> at the same time.
</P>
<H3>Output</H3>
<P align=justify>
For each test your program should output a single integer - the number of participants, for which it is possible to set the tournament.
</P>
<H3>Example</H3>
<pre>
Input:
1
3
2 3 2
1 3
0
Output:
1
</pre>


______________________________________________________
JULKA||||||false||||||

<P>
Julka surprised her teacher at preschool by solving the following riddle:
<P>
<i>
Klaudia and Natalia have 10 apples together, but Klaudia has two apples more than Natalia.
How many apples does each of he girls have?
</i>
</P>
<p>
Julka said without thinking: Klaudia has 6 apples and Natalia 4 apples.
The teacher tried to check if Julka's answer wasn't accidental and repeated the
riddle every time increasing the numbers. Every time Julka answered correctly.
The surprised teacher wanted to continue questioning Julka, but with big numbers she could't solve the riddle fast enough herself. Help the teacher and write a program which will give her the right answers.
</P>
<H3>Task</H3>
<P>
Write a program which
<div align="justify">
<ul>
<li> reads from standard input the number of apples the girls have together and how many more apples Klaudia has,</li>
<li> counts the number of apples belonging to Klaudia and the number of apples belonging to Natalia,</li>
<li> writes the outcome to standard output
</li>
</ul>
</div>
</P>
<H3>Input</H3>
<P>
Ten test cases (given one under another, you have to process all!). Every test case consists of two lines. The first line says how many
apples both girls have together. The second line says how many more apples Klaudia has.
Both numbers are positive integers. It is known that both girls have
no more than 10<sup>100</sup> (1 and 100 zeros) apples together. As you can see apples can be
very small.
</P>
<H3>Output</H3>
<P>For every test case your program should output two lines. The first line should
contain the number of apples belonging to Klaudia. The second line should
contain the number of apples belonging to Natalia.
</P>
<H3>Example</H3>
<pre>
<tt><b>Input:</b>
10
2
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
6
4
[and 9 test cases more]
</tt>
</pre>



______________________________________________________
JASIEK||||||false||||||

<P>
Jasiek is only 6 years old, but he already has many skills.
He likes drawing and asking riddles very much. This morning he got
a sheet of grid paper and a pencil from his mother and he
started drawing. All his drawings have some common properties:
</P>
<div align="justify">
<ul>
<li>Jasiek colors full grid squares;</li>
<li>if some coloured grid squares touch each other, it means they have
a common edge or a corner;</li>
<li>all grid squares are connected, which means between every two coloured grid squares
there is a sequence of coloured grid squares, which have a common edge;</li>
<li>there are no white holes, that is from every white grid box it is possible to draw a line to the boundary of the sheet which never touches any coloured grid square.</li>
</ul>
</div>
<p>At noon mom phoned and asked what Jasiek's today's picture was. The boy didn't answer directly, but described the picture by a sequence of moves needed to walk around
the centres of the coloured squares on its boundary, ie. those squares which
have at least one common corner with a white square. Jasiek set the starting square
and then gave the sequence of moves necessary to walk along the boundary squares anti-clockwise. Mom was very surprised by the complexity of the picture and especcialy
by the number of coloured squares. Given Jasiek's description, can you quickly count how many coloured squares there are in the picture?
</p>
<H3>Task</H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads (from standard input) Jasiek's description of the picture,
</li>
<li> counts the number of coloured squares,
</li>
<li> writes out the outcome (to standard output).
</li>
</ul></div>
<H3>Input</H3>
<P>
Ten test cases (given one under another, you have to process all!).
Each of the test cases is a series of lines. Each line consists of only one character.
The letter <i>P</i> means the beginning of the description.
The letter <i>K</i> means the end of the desription (and the test case). All other lines (if any) contain one of the letters N, W, S or E (N meaning North, W - West, S - South and E - East). Every line of the description
corresponds to the relative position of the centre of some square on the boundary of the picture. The first and the last
line correspond to the same square. A letter in a line other than the first or the last tells you which way you have to go in order to get to the next boundary square when going around the picture anti-clockwise. Jasiek's description finishes after going around the picture once. The length of the description doesn't exceed 20000 letters.
</P>
<H3> Output </H3>
<P>
For every testcase your program should write (to the standard output) only
one line with one integer, equal to the number of coloured squares in Jasiek's picture.
</P>
<H3>Example</H3>
<img src="http://www.spoj.pl/content/kfas:JAS.png" alt="Example illustration">
<p>
<pre>
<tt><b>Input:</b>
P
S
S
S
E
N
E
E
S
E
E
N
N
N
N
S
S
S
W
W
N
N
W
W
W
N
S
K
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
23
[and 9 test cases more]
</tt>
</pre>



______________________________________________________
DYZIO||||||false||||||

<P>
Dyzio is Jasiek's friend and he also likes riddles. Here is a riddle he came up with:
</P>
<div align="justify">
<i>
Jasiek, here is a piece of string, which has to be cut into smaller pieces.
I will not tell you directly how to do it, but look at this
sequence of zeros (0) and ones (1). A one at the begining means that the string
has to be cut in half. If the first digit was zero, it would be the only
digit in the sequence and mean you don't have to cut anything - I want
the whole string. If you have to cut the string anyway then after the first
1 I wrote what to do with the left piece (according to the same rules as with
the whole string) and then I wrote what to do with the right piece of string
(all the time with the same rules of notation). Every time you have to
cut the left piece first, only then can you cut the right one. Now start cutting
and tell me, how many cuts you have to do until you have cut off the shortest piece.
</i>
</div>
<P>
Unfortunately mom hid the scissors from Jasiek, but luckily a computer was at hand
and Jasiek quickly wrote a program simulating the string cutting. Can you write
such a program?
</P>
<H3> Task </H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads (from standard input) description of the way the string is cut,
</li>
<li> counts how many cuts have to be made in order to get the first shortest piece.
</li>
<li> writes out the outcome (to standard output)
</li>
</ul></div>
<H3> Input </H3>
<P>
Ten test cases (given one under another, you have to process all!).
Each test case consists of two lines.
In the first line there is a number <i>n (1<=n<=20000)</i>. In the second
line one zero-one word (a sequence of zeros and ones without spaces between them)
of length <i>n</i> - the description of the cutting procedure given by Dyzio.
</P>
<H3> Output </H3>
<P>
For every testcase your program should write (to the standard output) only
one line with one integer equal to the number of
cuts which have to be made in order to get the shortest piece.
</P>
<H3>Example</H3>
<pre><tt><b>Input:</b>
9
110011000
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
4
[and 9 test cases more]
</tt>
</pre>


______________________________________________________
SUPPER||||||false||||||

<P>
An <i>n</i>-element permutation is an <i>n</i>-element sequence of distinct numbers
from the set <i>{1, 2, ...,n}</i>. For example the sequence 2,1,4,5,3 is a
5-element permutation.
We are interested in the longest increasing subsequences in a permutation. In this exemplary
permutation they are of length 3 and there are exactly 2 such subsequences: 2,4,5 and 1,4,5.
We will call a number belonging to any of the longest increasing
subsequences a <i>supernumber</i>. In the permutation 2,1,4,5,3 the supernumbers are 1,2,4,5 and 3 is not a supernumber.
Your task is to find all supernumbers for a given permutation.
</P>
<H3> Task </H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads a permutation from standard input,
</li>
<li> finds all its supernumbers,
</li>
<li> writes all found numbers to standard output.
</li>
</ul></div>
<H3> Input </H3>
<P>
Ten test cases (given one under another, you have to process all!).
Each test case consists of two lines.
In the first line there is a number <i>n</i> (1<=n<=100000). In the second
line: an <i>n</i>-element permutation - <i>n</i> numbers separated by single spaces.
</P>
<H3> Output </H3>
<P>
For every test case your program should write two lines. In the first line
- the number of supernumbers in the input permutation. In the second line
the supernumbers separated by single spaces in increasing order.
</P>
<H3>Example</H3>
<pre>
<tt><b>Input:</b>
5
2 1 4 5 3
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
4
1 2 4 5
[and 9 test cases more]
</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
PICAD||||||false||||||

<P>
Sherlock Holmes is carrying out an investigation into the crime at Piccadily Circus. Holmes
is trying to determine the maximal and minimal number of people staying simultaneously at the crime scene at a moment when the crime could have been commited. Scotland Yard has already carried out a thorough investigation already, interrogated everyone seen at the crime scene and determined what time they appeared
at the crime scene and what time they left. Doctor Watson offered his help
to process the data gathered by Scotland Yard and find the numbers interesting
Sherlock Holmes, but he has some difficulties. Help him!
</P>
<H3> Task </H3>
<p>
Write a program which
</p>
<div align="justify">
<ul>
<li> reads from standard input the time interval during which the crime was commited
and the data gathered by Scotland Yard,</li>
<li> finds the minimal and
the maximal number of people present simultaneously in the
time interval when the crime could have been commited, (these numbers can be zero, though it would seem strange that noone
was present at the crime scene when the crime was commited, but that's the type of crime Holmes and Watson have to deal with)</li>
<li> writes the outcome to standard output.
</li>
</ul>
</div>
<H3> Input </H3>
<P>
Ten test cases (given one under another, you have to process all!).
The first line of each test case consists of two integer numbers <i>p</i> and <i>k</i>,
<i>0<=p<=k<=100000000</i>. These denote the first and the last moment when the crime
could have been commited. The second line of each test case contains one integer
<i>n, 3<=n<=5000</i>. This is the number of people interrogated by Scotland Yard. The next
<i>n</i> lines consist of two integers - line <i>i+2</i> contains numbers <i>a<sub>i</sub></i> and
<i>b<sub>i</sub></i> separated by a single space, <i>0<=a<sub>i</sub><=b<sub>i</sub><=1000000000</i>. These are
the moments at which the <i>i</i>-th person apperared at and left the crime scene respectively.
It means that the <i>i</i>-th person was at the crime scene for the whole time from moment <i>a<sub>i</sub></i> until moment <i>b<sub>i</sub></i> (inclusive).
</P>
<H3> Output </H3>
<P>
For every test case your program should write to the standard output only
one line with two integers separated by a single space: the minimal and maximal number of people staying simultaneously at the crime scene, in the interval between moment <i>p</i> and <i>k</i>,
(inclusive).
</P>
<H3>Example</H3>
<P>Only one test case.</P>
<pre>
<tt><b>Input:</b>
5 10
4
1 8
5 8
7 10
8 9
</tt>
<tt><b>Output:</b>
1 4
</tt>
</pre>


______________________________________________________
BIA||||||false||||||

<P>Bytelandian Information Agency (BIA) uses a net of <i>n</i> computers.
The computers are numbered from <i>1</i> to <i>n</i>, and
the computer number <i>1</i> is a server. The computers are connected
by one-way information channels. Every channel connects a pair of computers.
The whole network is organised in such a way that one can send information
from the server to any other computer either directly or indirectly.
</P>
<p>
When BIA acquires new information, the information is put on the server
and propagated in the net. The chief of BIA considers what would happen
if one computer stopped working (was blown away by terrorists for example).
It could happen that some other computers would stop receiving information
from the server, because the broken computer was a necessary transmitter.
We will call such computers <i>critical</i>. For example in the situation
in the picture below the critical computers are <i>1</i> and <i>2</i>. <i>1</i>
is the server and all information sent from the server to <i>3</i> has to go
through <i>2</i>.
</p>
<img src="http://www.spoj.pl/content/kfas:BIA.gif" alt="BIA computer net" width=300 height=249 border=0/>
<H3> Task </H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads a description of the net from standard input,
</li>
<li> finds all critical computers.
</li>
<li> writes the numbers of critical computers to standard output.
</li>
</ul></div>
<H3> Input </H3>
<P>
Ten test cases (given one under another, you have to process all!).
Each test case consists of several lines.
In the first line there are numbers <i>n</i> and <i>m</i>. <i>n</i> denotes
the number of computers in the net,<i>(2<=n<=5000)</i>. <i>m </i> denotes the
number of information
channels, <i>n-1<=m<=200000</i>. The following <i>m</i> lines describes a single information
channel and consist of two integer numbers <i>a</i> and <i>b</i> separated by a space.
It means the computer <i>a</i> sends information to computer <i>b</i> by that channel.
You may assume there are no two channels which start and end at the same points <i>a, b</i>.
</P>
<H3> Output </H3>
<P>
For every testcase your program should write two lines. In the first line
<i>k</i> - the number of critical computers in the net. In the second line
<i>k</i> numbers separated by single spaces - the numbers of critical computers in increasing order.
</P>
<H3>Example</H3>
<pre>
<tt><b>Input:</b>
4 5
1 2
1 4
2 3
3 4
4 2
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
2
1 2
[and 9 test cases more]
</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
DANCE||||||false||||||

<P>
The Gordian Dance is a traditional Bytelandian dance performed by two pairs
of dancers. At the beginning the dancers are standing in the corners of the square <i>ABCD</i>,
forming two pairs: <i>A-B</i> and <i>C-D</i>. Every pair is holding an outstretched string. So in the starting position both strings are stretched horizontally and
parallel.
</P>
<img src="http://www.spoj.pl/content/kfas:DANCE1.png" alt="The starting position of dancers.">
<p>The dance consists of a series of moves. There are two kinds of moves:
<div align=justify>
<ul>
<li>(<i>S</i>) The dancers standing at points <i>B</i> and <i>C</i>
swap positions (without releasing their strings) in such a way that
the dancer standing at <i>B</i> raises the hand in which he is holding the string and, when going to point <i>C</i>, lets the dancer going from <i>C</i> to <i>B</i>
pass in front of him, under his arm.
</li>
<li>(<i>R</i>) All dancers make a turn by 90 degrees clockwise without releasing their strings.
This means that the dancer from <i>A</i> goes to <i>B</i>,
the dancer from <i>B</i> goes to <i>C</i>,
the dancer from <i>C</i> goes to <i>D</i>,
and the dancer from <i>D</i> goes to <i>A</i>.
</li>
</ul>
</div>
<p>
During the dance the strings tangle with each other, but in the end
they should be untangled and stretched horizontally and parallel.
The dancers do not have to occupy the same spots as in the begining.
The dance requires a lot of experience, because the strings can be extremely tangled during the dance. The sequence of moves after which they are no longer tangled and are stretched horizontally and parallel can be difficult to guess.
</p>
<p>Your program should help beginner dancers end a dance. You are to determine the
minimal number of mover required to end the dance given a sequence of
moves already performed.
</p>
<H3>Illustration</H3>
<p>For example after the sequence <i>SS</i> we get the following configuration.
</p>
<img src="http://www.spoj.pl/content/kfas:DANCE2.png" alt="The configuration after SS">
<p>
The shortest sequence of moves required to end the dance is of length 5: <i>RSRSS</i>.
</p>
<H3> Task </H3>
<p>
Write a program which
</p>
<div align="justify">
<ul>
<li>reads from standard input the moves made in a dance,</li>
<li> finds the minimal number of moves required to untangle the strings and
stretch them horizontally and parallel (the dancers don't have to be in their starting spots).
</li>
<li> writes the outcome to standard output.
</li>
</ul>
</div>
<H3> Input </H3>
<P>
Ten test cases (given one under another, you have to process all!). The first line of each test case consists of one integer <i>n</i>
equal to the nmber of moves already made, <i>0<=n<=1000000</i>.
The second line of each test case consists of one word of length <i>n</i>,
made up of letters <i>S</i> and/or <i>R</i>.
</P>
<H3>Output</H3>
<P>
For every testcase your program should write to standard output only
one line with one integer number: the minimal number of
moves required to untangle the strings and stretch them horizontally and parallel.
</P>
<H3>Example</H3>
<pre>
<tt><b>Input:</b>
2
SS
[and 9 test cases more]
</tt>
<tt><b>Output:</b>
5
[and 9 test cases more]
</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
BRCKTS||||||false||||||

<P>
We will call a <b>bracket word</b> any word constructed out of two sorts
of characters: the opening bracket "(" and the closing bracket ")". Among
these words we will distinguish <b>correct bracket expressions</b>. These are
such bracket words in which the brackets can be matched into pairs such that
<ul>
<li>every pair consists of an opening bracket and a closing bracket
appearing further in the bracket word</li>
<li>for every pair the part of the word between the brackets of this pair
has equal number of opening and closing brackets
</li>
</ul>

On a bracket word one can do the following operations:
<ul>
<li><b>replacement</b> -- changes the i-th bracket into the opposite one</li>
<li><b>check</b> -- if the word is a correct bracket expression</li>
</ul>
</P>
<H3>Task</H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads (from standard input) the bracket word and the sequence of
operations performed,
</li>
<li> for every check operation determines if the current bracket word is
a correct bracket expression,
</li>
<li> writes out the outcome (to standard output).
</li>
</ul></div>

<H3>Input</H3>
<P>
 Ten test cases (given one under another, you have to process all!).
 Each of the test cases is a series of lines.
 The first line of a test consists of a single number <i>n (1<=n<=30000)</i> denoting
 the length of the bracket word.
 The second line consists of <i>n</i> brackets, not separated by any spaces.
 The third line consists of a single number <i>m</i> -- the number of operations.
 Each of the following <i>m</i> lines carries a number <i>k</i> denoting the operation
 performed. <i>k=0</i> denotes the check operation, <i>k>0</i> denotes replacement of
 <i>k</i>-th bracket by the opposite.
</P>
<H3>Output</H3>
<P>
For every test case your program should print a line:<br>
Test i:<br>
where i is replaced by the number of the test
and in the following lines, for every check operation in the i-th test
your program should print a line with the word
YES,
if the current bracket word is a correct bracket expression, and a line
with a word
NO otherwise.
(There should be as many lines as check operations in the test.)
</P>
<H3>Example</H3>
<pre>
<tt><b>Input:</b>
4
()((
4
4
0
2
0
[and 9 test cases more]
<b>Output:</b>
Test 1:
YES
NO
[and 9 test cases more]
</tt>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
IMP||||||false||||||

<P>
An Imp jumps on an infinite chessboard. Moves possible
for the Imp are described by two pairs of integers:
(a,b) and (c,d) - from square (x,y) the Imp
can move to one of the squares: (x+a,y+b), (x-a,y-b),
(x+c,y+d), (x-c,y-d). We want to know for which square
different from (0,0) to which the Imp can jump from (0,0)
(possibly in many moves) the value |x|+|y| is the lowest.
</P>
<H3> Task </H3>
<P>
Write a program which
</P>
<div align="justify">
<ul>
<li> reads from standard input two pairs (a,b) and (c,d) of
integers, different from (0,0), describing moves of the Imp,
</li>
<li> determines a pair of integers (x,y) different from (0,0),
for which the Imp can jump (possibly in many moves) from square (0,0)
to square (x,y) and for which the value |x|+|y| is the lowest.
</li>
<li> writes out to standard output the value |x|+|y|.
</li>
</ul></div>


<H3> Input </H3>
<P>
Ten test cases. Each test consists of four numbers a,b,c,d in one line, separated
by spaces. <br>
-100000 <= a, b, c, d <= 100000
</P>

<H3> Output </H3>
<P>
For every test case your program should write a single line with a number equal the lowest possible value |x|+|y|.
</P>
<H3>Example</H3>
<pre><tt><b>Input:</b>
13 4 17 5
[and 9 test cases more]
<b>Output:</b>
2
[and 9 answers more]
</tt>
</pre>


______________________________________________________
SQRBR||||||false||||||

<p>
	You are given:
</p>
<div align="left">
	<ul>
		<li>
		a positive integer n,
		<li>
		an integer k, 1&lt;=k&lt;=n,
		<li>
			an increasing sequence of k integers 0 &lt; s<sub>1</sub> &lt; s<sub>2</sub> &lt; 
			... &lt; s<sub>k</sub> &lt;= 2n.</li>
	</ul>
</div>
<p>
	What is the number of proper bracket expressions of length 2n with opening 
	brackets appearing in positions s<sub>1</sub>, s<sub>2</sub>,...,s<sub>k</sub>?
</p>
<h3>Illustration</h3>
<p>Several proper bracket expressions:</p>
<pre><tt>[[]][[[]][]] 
[[[][]]][][[]]</tt></pre><p>An improper bracket expression:</p>
<pre><tt>[[[][]]][]][[]]</tt></pre><p>
	There is exactly one proper expression of length 8 with opening brackets in 
	positions 2, 5 and 7.
</p>
<h3>Task</h3>
<p>
	Write a program which for each data set from a sequence of several data sets:
</p>
<div align="left">
	<ul>
		<li>
		reads integers n, k and an increasing sequence of k integers from input,
		<li>
			computes the number of proper bracket expressions of length 2n with opening 
			brackets appearing at positions s<sub>1</sub>,s<sub>2</sub>,...,s<sub>k</sub>,
		<li>
			writes the result to output.</li>
	</ul>
</div>
<h3>
	Input
</h3>
<p>
	The first line of the input file contains one integer d, 1 &lt;= d &lt;= 10, 
	which is the number of data sets. The data sets follow. Each data set occupies 
	two lines of the input file. The first line contains two integers n and k 
	separated by single space, 1 &lt;= n &lt;= 19, 1 &lt;= k &lt;= n. The second 
	line contains an increasing sequence of k integers from the interval [1;2n] 
	separated by single spaces.
</p>
<h3>
	Output
</h3>
<p>
The i-th line of output should contain one integer - the number of proper 
bracket expressions of length 2n with opening brackets appearing at positions s<sub>1</sub>, 
s<sub>2</sub>,...,s<sub>k</sub>.</p>
<h3>Example</h3>
<pre>
<b><tt>Sample input:</tt></b>
5 
1 1 
1 
1 1 
2 
2 1 
1 
3 1 
2 
4 2 
5 7 

<b><tt>Sample output:</tt></b>
1 
0 
2 
3 
2 
</pre>



______________________________________________________
PERMUT1||||||true||||||


<p>
	Let A = [a<sub>1</sub>,a<sub>2</sub>,...,a<sub>n</sub>] be a permutation of 
	integers 1,2,...,n. A pair of indices (i,j), 1<=i<=j<=n, is an <i>inversion</i> 
	of the permutation A if a<sub>i</sub>>a<sub>j</sub>. We are given integers n>0 
	and k>=0. What is the number of n-element permutations containing exactly k 
	inversions?
</p>
<p>
	For instance, the number of 4-element permutations with exactly 1 inversion 
	equals 3.
</p>
<h3>Task</h3>
<p>
	Write a program which for each data set from a sequence of several data sets:
</p>
<div align="left">
	<ul>
		<li>
		reads integers n and k from input,
		<li>
		computes the number of n-element permutations with exactly k inversions,
		<li>
		writes the result to output.
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input file contains one integer d, 1<=d<=10, which is the 
	number of data sets. The data sets follow. Each data set occupies one line of 
	the input file and contains two integers n (1<=n<=12) and k (0<=k<=98) 
	separated by a single space.
</p>

*******OutputConstraints*******

<p>
	The i-th line of the output file should contain one integer - the number of 
	n-element permutations with exactly k inversions.
</p>

*******IOTestCases*******

<pre>
<b><tt>Sample input:</tt></b>
1 
4 1 

<b><tt>Sample output:</tt></b>
3 
</pre>



______________________________________________________
BALL1||||||true||||||


<p>
	On the rectangular chessboard of n x m square fields we choose one field 
	adjacent to the edge of the chessboard, called the starting field. Then we put 
	a ball in the center of this field and push it to roll through the chessboard. 
	The diameter of the ball equals the width (and height) of chessboard field. The 
	angle between the direction of ball movement and the edge of the chessboard 
	equals 45 degrees. The ball bounces off the edges of the chessboard: if the 
	ball touches the edge of the chessboard then each composite of its velocity 
	perpendicular to the edge touched is reversed. At the start the ball is pushed 
	toward increasing coordinates (when the starting field is a field of the 
	highest coordinate, the ball bounces momentarily).
</p>
<p>
	We assign a point to a field of the chessboard each time the point of adjacency 
	between the ball and the chessboard enters the interior of the field. The game 
	is over when a point is assigned to the starting field. What is the number of 
	fields to which an odd number of points is assigned? The following figures 
	illustrate the problem. The route of the ball is marked with a dashed line. 
	Fields with the odd number of points are shadowed.
</p>
<img width=600 src="/content/adrian:ball1.png">
<h3>Task</h3>
<p>
	Write a program which for each data set from a sequence of several data sets:
	<div align="left">
		<ul>
			<li>
			reads the dimensions of the chessboard and the coordinates of starting field 
			from input,
			<li>
			computes the number of fields with the odd number of points,
			<li>
			writes the result to output.
		</ul>
	</div>
</p>

*******InputConstraints*******

<p>
	The first line of the input file contains one integer d, 1 &lt;= d &lt;= 10, which is 
	the number of data sets. The data sets follow. Each data set occupies one line 
	of the input file. Such a line consists of four integers x, y, a, b separated 
	with single spaces. These integers are the x- and y-dimensions of the 
	chessboard and x- and y-coordinates of the starting field, respectively. 
	Integers x and y are greater than two, the number of fields of the chessboard 
	does not exceed 10<sup>9</sup>,the starting field is adjacent to the edge of 
	the chessboard.
</p>

*******OutputConstraints*******

<p>
The i-th line of output should contain one integer which is equal to the number 
of fields of the chessboard with the odd number of points. </p>

*******IOTestCases*******

<pre>
Sample input:

2
13 6 1 5
10 7 1 5

Sample output:

2 
22
</pre>



______________________________________________________
CRSCNTRY||||||true||||||


<p>
	Agness, a student of computer science, is very keen on cross&shy;country 
	running, and she participates in races organised every Saturday in a big park. 
	Each of the participants obtains a route card, which specifies a sequence of 
	checkpoints, which they need to visit in the given order. Agness is a very 
	atractive girl, and a number of male runners have asked her for a date. She 
	would like to choose one of them during the race. Thus she invited all her 
	admirers to the park on Saturday and let the race decide. The winner would be 
	the one, who scores the maximum number of points. Agnes came up with the 
	following rules:
</p>
<div align="justify">
	<ul>
		<li>
		a runner scores one point if he meets Agnes at the checkpoint,
		<li>
		if a runner scored a point at the checkpoint, then he cannot get another point 
		unless he and Agnes move to the next checkpoints specified in their cards.
		<li>
		route specified by the card may cross the same checkpoint more than once,
		<li>
			each competitor must strictly follow race instructions written on his card.</li>
	</ul>
</div>
<p>
	Between two consecutive meetings, the girl and the competitors may visit any 
	number of checkpoints. The boys will be really doing their best, so you may 
	assume, that each of them will be able to visit any number of checkpoints 
	whilst Agnes runs between two consecutive ones on her route.
</p>
<h3>Task</h3>
<p>
	Write a program which for each data set from a sequence of several data sets:
</p>
<div align="justify">
	<ul>
		<li>
		reads in the contents of Agnes' race card and contents of race cards presented 
		to Tom,
		<li>
		computes the greatest number of times Tom is able to meet Agnes during the 
		race,
		<li>
			writes it to output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	There is one integer d in the first line of the input file, 1 &lt;= d &lt;= 10. 
	This is the number of data sets. The data sets follow. Each data set consists 
	of a number of lines, with the first one specifying the route in Agnes' race 
	card. Consecutive lines contain routes on cards presented to Tom. At least one 
	route is presented to Tom. The route is given as a sequence of integers from 
	interval [1, 1000] separated by single spaces. Number 0 stands for the end of 
	the route, though when it is placed at the beginning of the line it means the 
	end of data set. There are at least two and at most 2000 checkpoints in a race 
	card.
</p>

*******OutputConstraints*******

<p>
	The i-th line of the output file should contain one integer. That integer 
	should equal the greatest number of times Tom is able to meet with Agnes for 
	race cards given in the i-th data set.
</p>

*******IOTestCases*******

<pre>
Sample input:

3 
1 2 3 4 5 6 7 8 9 0 
1 3 8 2 0 
2 5 7 8 9 0 
1 1 1 1 1 1 2 3 0 
1 3 1 3 5 7 8 9 3 4 0 
1 2 35 0 
0 
1 3 5 7 0 
3 7 5 1 0 
0 
1 2 1 1 0 
1 1 1 0 
0 

Sample output:

6 
2 
3 
</pre>



______________________________________________________
CUTOUT||||||true||||||


<p>
One has to cut out a number of rectangles from a paper square. The sides of each rectangle are to be parallel 
to the sides of the square. Some rectangles can be already cut out. What is the largest area of a rectangle 
which can be cut out from the remaining paper? 
</p>
<h3>Illustration</h3>
<p>
Three rectangles have been cut out from the square 10x10 in the figure shown below. The area of the largest 
rectangle that can be cut out from the remaining paper is 16. One of such rectangles is shown with a dashed 
line. 
</p>
<img src="http://www.spoj.pl/content/adrian:CUTOUT.png" align=left/> 
<h3>Task</h3>
<p>
Write a program that for each data set from a sequence of several data sets:
</p>
<div align=justify>
<ul>
<li>reads descriptions of a square and rectangles from the input, 
<li>computes the area of the largest rectangle which can be cut out from the remaining paper, 
<li>writes the result to output.</li> 
</ul>
</div>

*******InputConstraints*******

<p>
The first line of the input file contains one positive 
integer d not larger than 10. This is the number of data sets. The data sets 
follow. Each set of data occupies two consecutive lines of the input file. The 
first line of each data set contains two integers n and r, 1 &lt;=
                     
                    
           n &lt;=   40000, 0 &lt;= r &lt;= 100. The integer n is the length 
of the sides of an input square. The integer r is the number of rectangles which have been cut out from the 
square. The second line of the data set contains a sequence of 4r integers x<sub>1</sub>, x<sub>2</sub>,...,x<sub>4r</sub> from the interval 
[0,n] separated by single spaces. For each i = 1,...,r, integers x<sub>4i-3</sub>, x<sub>4i-2</sub>, x<sub>4i-1</sub>, x<sub>4i</sub>
describe the i-th rectangle: x<sub>4i-3</sub> is the distance of its left side from the left side of the square, x<sub>4i-2</sub>
is the distance of its right side from the left side of the square, x<sub>4i-1</sub> is the distance of the bottom side of the rectangle from the 
bottom side of the square and x<sub>4i</sub> is the distance of its top side from the bottom side of the square. 
</p>

*******OutputConstraints*******

<p>
For each i = 1,...,d, your program should write only one integer to the i-th line of the output file -- the 
largest area of a rectangle which can be cut out from the rest of the i-th square. 
</p>

*******IOTestCases*******

<pre>
Sample input:

2 
6 2 
0 3 0 3 3 6 3 6 
10 3 
0 5 0 5 0 10 5 10 9 10 0 5 

Sample output:

9 
20 
</pre>



______________________________________________________
EXPR1||||||true||||||


<p>
	We are given an integer k and an arithmetic expression E with the operations 
	`+', `-', and arguments from the set {0,1,...,9}. Is it possible to put some 
	parentheses in E to get a new expression E' whose value equals k? If the answer 
	is positive what is the minimum number of pairs of parentheses `(', `)' that 
	are necessary?
</p>
<h3>Illustration</h3>
<p>
	It is sufficient to put one pair of parentheses in the expression 5 - 4 + 5 to 
	get an expression with value -4, namely 5 - (4 + 5) = -4.
</p>
<h3>Task
</h3>
<p>
	Write a program that for each data set from a sequence of several data sets:
</p>
<div align="justify">
	<ul>
		<li>
		reads an expression E and an integer k from input,
		<li>
		verifies whether it is possible to put some parentheses in E to get a new 
		expression E' whose value equals k and computes the minimal number of pairs of 
		parentheses `(', `)' necessary, if the answer is positive,
		<li>
			writes the result to output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input file contains one positive integer d not larger 
	than 10. This is the number of data sets. The data sets follow. Each set of 
	data occupies two consecutive lines of the input file. The first line contains 
	two integers n and k, 2 &lt;= n &lt;= 40, -180 &lt;= k &lt;= 180. The even 
	integer n is the length of E. The second line contains the expression itself 
	written as a string of length n. The string contains operators `+' or `-' in 
	odd positions and numbers from the set {0,1,...,9} in even positions.
</p>

*******OutputConstraints*******

<p>
	For each i = 1,...,d, your program should write to the i-th line of the output 
	file one word `NO' if the i-th input expression cannot be transformed into any 
	expression of value k, and the smallest number of pairs of parentheses 
	necessary otherwise.
</p>

*******IOTestCases*******

<pre>
Sample input:

5 
6 -4 
+5-4+5 
2 1 
+1 
4 1 
-1+1 
4 0 
-1+1 
4 -2 
-1+1 

Sample output:

1 
0 
NO 
0 
1 
</pre>



______________________________________________________
MOULDS||||||true||||||


<p>
	In a factory, moulds for casting metal objects are produced by a special 
	cutting device. The device is equipped with cuboid-shaped blade of size 1 mm x 
	1 mm x 30 mm (its height) which operates with each of its sides thus producing 
	the mould from cuboid of size 250 mm x 250 mm x 30 mm (its height). The end of 
	the blade newer lowers below the bottom surface of the cuboid. In any moment 
	the distance between initial and current position doesn't exceed 1000.
</p>
<p>
	The machine understands special command language which has the following 
	grammar:
	<pre><tt>&lt;command block&gt; ::= [ &lt;command&gt; ; {&lt;command&gt; ; } ] 
&lt;command&gt;       ::= &lt;lift&gt; | &lt;shift&gt; | &lt;command block&gt;
&lt;lift&gt;          ::= ^ &lt;distance&gt;
&lt;shift&gt;         ::= @ &lt;direction&gt; &lt;distance&gt;
&lt;direction&gt;     ::= N | S | W | E 
&lt;distance&gt;      ::= &lt;sign&gt; &lt;number&gt; | &lt;number&gt;
&lt;number&gt;        ::= &lt;digit&gt; {&lt;digit&gt;}
&lt;sign&gt;          ::= - | + 
&lt;digit&gt;         ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
</tt></pre>
<P>
	where {exp} means zero or more exps.&nbsp;
</P>
<p>
	The command &lt;lift&gt; causes moving the blade downwards when the distance is 
	a positive number and upwards otherwise. The command &lt;shift&gt; moves the 
	blade in the appropriate direction (N--north, S--south, W--west, E--east).
</p>
<h3>Task</h3>
<p>
	Write a program which for each data set from a sequence of several data sets:
</p>
<div align="justify">
	<ul>
		<li>
		reads a command block from input,
		<li>
		computes the volume of hollows made by the machine commanded by a given command 
		block (assuming that before the execution the blade is located 1 mm above the 
		north-west corner of the virgin cuboid),
		<li>
			writes the result to output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input file contains one integer d, 1 &lt;= d &lt;= 10, 
	which is the number of data sets. The data sets follow. Each data set occupies 
	one line of the input file and is a word derived from &lt;command block&gt; of 
	the above grammar of length not exceeding 10000 characters.
</p>

*******OutputConstraints*******

<p>
	The i-th line of the output file should contain one integer -- the volume (in 
	cubic mm) of the hollows made by the machine controlled by the command block 
	given in the i-th data set.
</p>

*******IOTestCases*******

<pre>
Sample input:

<tt>1 
[^2;@S2;] 
</tt>

Sample output:

<tt>3</tt>

</pre>



______________________________________________________
RELATS1||||||true||||||


<p>
	You are given a directed graph, whose edges are labeled with relational symbols 
	'&lt;', '&gt;' and '='. For a nonnegative integer k, a k-correct 
	G-labeling is a mapping from vertices of G into integers from interval 
	[0,k] such that numbers at the ends of each edge satisfy the relation described 
	by the label of the edge. We assume that an element on the left side of the 
	relational symbol is a number assigned to the initial vertex. Compute the 
	smallest k for which k-correct G-labeling exists or verify that such 
	labeling doesn't exist for any k.
</p>
<h3>Illustration</h3>
<p>
	For the graph in the figure the smallest k = 2.
</p>
<img src="http://www.spoj.pl/content/adrian:RELATS1.png">
<h3>Task</h3>
<p>
	Write a program that for each data set from a sequence of several data sets:
</p>
<div align="justify">
	<ul>
		<li>
		reads a description of a graph G from the input file,
		<li>
		verifies whether there exist an integer k for which it is possible to label G 
		k-correctly and, if the answer is positive, computes the smallest such k,
		<li>
			writes the result to the output file.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input file contains one positive integer d not larger 
	than 10. This is the number of data sets. The data sets follow. Each data set 
	is described in two consecutive lines of the input file. In the first line 
	there are two integers n and m separated by a single space. The number n is the 
	number of vertices of G and m is the number of edges of G. Numbers n and m 
	satisfy the inequalities: 1 &lt;= n &lt;= 1000, 0 &lt;= m &lt;= 10000. The 
	vertices are numbered with integers from 1 to n and are identified by these 
	numbers. There are no parallel edges and self-loops in the graph. (Two 
	different edges u<sub>1</sub> -&gt; v<sub>1</sub> and u<sub>2</sub> -&gt; v<sub>2</sub>
	are parallel iff u<sub>1</sub> = u<sub>2</sub> and v<sub>1</sub> = v<sub>2</sub>.) 
	There are 3m integers separated by single spaces in the second line. The 
	numbers at positions 3i-2 and 3i-1, 1 &lt;= i &lt;= m, are the ends of the i-th 
	edge, the beginning and the end, respectively, whereas the number at position 
	3i is a number from the set {-1,0,1} and it is the label of the i-th edge: -1 
	represents '&lt;', 0 represents '=' and 1 represents '&gt;'.
</p>

*******OutputConstraints*******

<p>
	For the i-th data set, 1 &lt;= i &lt;= d, your program should write one 
	word NO in the i-th line of the output file if a k-correct labeling doesn't 
	exist for any k, or the smallest integer k for which such a labeling exists.
</p>

*******IOTestCases*******

<pre>
Sample input:

4 
4 4 
1 2 -1 2 3 0 2 4 -1 3 4 -1 
2 2 
1 2 -1 2 1 -1 
2 2 
1 2 -1 2 1 1 
3 3 
1 2 0 3 2 0 3 1 0 

Sample output:

2 
NO 
1 
0 
</pre>



______________________________________________________
TREE1||||||true||||||


<p>
	Consider an n-vertex binary search tree T containing n keys 1,2,...,n. A 
	permutation p = [p<sub>1</sub>,...,p<sub>n</sub>] of the integers 1,2,...,n is 
	said to be <i>consistent with the tree T</i> if the tree can be built from the 
	empty one as the result of inserting integers p<sub>1</sub>,p<sub>2</sub>,...,p<sub>n</sub>. 
	Find how many permutations are consistent with the tree T.
</p>
<h3>Illustration</h3>
<p>
	Exactly 2 permutations are consistent with the tree in the figure below.
</p>
<img src="http://www.spoj.pl/content/adrian:TREE1.png">
<h3>Task</h3>
<p>
	Write a program that for each data set from a sequence of several data sets:
</p>
<div align="justify">
	<ul>
		<li>
		reads from the input file a description of an input tree T,
		<li>
		computes the number of permutations consistent with T,
		<li>
			writes the result to output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input file contains one positive integer d not larger 
	than 10. This is the number of data sets. The data sets follow. Each set of 
	data occupies two consecutive lines of the input file. The first line contains 
	only one integer n, 1 <= n <= 30. This is the number of vertices of the 
	tree. The second line contains a sequence of n integers separated by single 
	spaces. The integers are keys in the input tree given in the prefix order. The 
	first integer in the sequence is the key from the root of the tree. It is 
	followed by the keys from the left subtree written in the prefix order. The 
	sequence ends with the keys from the right subtree, also given in the prefix 
	order.
</p>

*******OutputConstraints*******

<p>
	For each i = 1,...,d, your program should write to the i-th line of output 
	the number of permutations consistent with the tree described in the i-th 
	data set.
</p>

*******IOTestCases*******

<pre>
Sample input:

5 
3 
2 1 3 
3 
1 2 3 
1 
1 
4 
2 1 3 4 
4 
1 4 2 3 

Sample output:

2 
1 
1 
3 
1 
</pre>



______________________________________________________
BAC||||||false||||||

<p>
In the biology laboratory we are observing several bacterial 
        samples, and under 
                the microscope we have them shaded with different colors to see them expanding 
                their territory on the plate.
</p>
<p>It is interesting to know that the 
        bacterial are 
                quite 'friendly' that once they meet each other, they do not expand into each 
                other's occupation any more. The bacterial samples are expanding 
        at similar speeds and we take them as the same speed.</p><p>Since the experiment is tedious and lengthy (Oh My 
                God! there are several thousand samples at our pick), we are going to run a 
                simulation based on this reality, taking the variable that these 
        samples may be planted in different starting spots.</p>
        <p>
We are using rectangular plates and 
        bacterial racing is bounded within the plate.</p>
        <img src="http://www.spoj.pl/content/nealzane:BAC.gif" width="195" height="162">


______________________________________________________
DIVSUM||||||false||||||

<P align=justify>
Given a natural number n (1 <= n <= 500000), please output the summation of all its proper divisors.
</p>
<p>
<em>Definition:</em> A proper divisor of a natural number is the divisor that is strictly less than the number.
</p>
<p>
e.g. number 20 has 5 proper divisors: 1, 2, 4, 5, 10, and the divisor summation is: 1 + 2 + 4 + 5 + 10 = 22.
</p>
</P>
<H3>Input</H3>
<P align=justify>
An integer stating the number of test cases (equal to about 200000), and that many lines follow, each containing one integer between 1 and 500000 inclusive.
</P>
<H3>Output</H3>
<P align=justify>
One integer each line: the divisor summation of the integer given respectively.
</P>
<H3>Example</H3>
<pre>
Sample Input:
3
2
10
20

Sample Output:
1
8
22
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
EDIT1||||||false||||||

<P align=justify>
Have you ever programmed in Brainf**k? If yes, then you know how
annoying it is to press the same key several times in a row. So what we all
need, is a good editor.
Here are the functions that the editor should have:
</p>
<div align=left>
<ul>
<li>'\n': begin a new line. If the last line was empty, stop
processing and print out all lines.</li>
<li>'d': copy all characters from the current line, and append them
after
the last character in this line. For example, if current line contains
ab, and d is pressed two times, the result will be abababab</li>
<li>any other character: append it to the current line.</li>
</ul>
</div>
<P align=justify>
<b>Please note, that the solution may only be submitted in Brainf**k or
Intercal.</b>
</p>
<H3>Input</h3>
<P align=justify>
There is exactly one test case. You can assume, that there is no key press of 'd' when the line is still empty.
</p>
<H3>Output</h3>
<P align=justify>
Print the output that the editor described above would produce on the given input. You can assume, that no line is created with more than 150 characters.
</p>
<H3>Example</h3>
<p>
<pre>
<b>Input:</b>

sample-test<br>-dd-d-dd<br>end signalled by two newlines<br><br>

 
<b>Output:</b>

sample-test<br>--------------------------------------------<br>enen signalleenen signalle by two newlines<br></pre></p>


______________________________________________________
EDIT2||||||false||||||

<P align=justify>
You are given a text. Calculate the minimum number of keystrokes needed
to produce this text,
if the editor described below is used.
<br>
If you haven't read the problem "Editor" before, here is a description
of the functionality of the editor:
</p>
<div align=left>
<ul>
<li>'\n': begin a new line. If the last line was empty, stop
processing and print out all lines.</li>
<li>'d': copy all characters from the current line, and append them
after
the last character in this line. For example, if current line contains
ab, and d is pressed two times, the result will be abababab</li>
<li>any other character: append it to the current line.</li>
</ul>
</div>
<H3>Input</h3>
<P align=justify>
The input consists of <b>exactly ten</b> test cases.
Each test case consists of a line with at most 600 characters. The
character 'd' is not used in any of the lines, but all other printable ascii characters may occur.
</p>
<H3>Output</h3>
<P align=justify>
For each test case, first print a line containing the minimum number of
key strokes to produce the given line of text.
In the next lines, write the keys that are pressed to produce the text.
If there are several possibilites with minimum number of keystrokes,
you should also minimise the number of lines,
if there is still more than one possibility, minimise number of
keystrokes before the first '\n', then second '\n', ...
</p><p>
Since 'd' is a costly operation in the editor, for each output line you
should minimise the number of 'd' characters as the 2nd criterion after
minimising number of keystrokes in this line.
</p><p>
The original input line should be the same as the output of the editor (processing the output you produce), if '\n' characters are ignored.
</p><p>
<b>Notice that you have to terminate the input for the editor with two
'\n'.</b>
</p>
<H3>Example</h3>
<p>Here only two test cases.</p>
<pre><b>Input:</b>

00001123444456789<br>000011234444446789

<b>Output:</b>
18
00d1123444456789

18
00d1123
444d6789


</pre>



______________________________________________________
BRICKS||||||false||||||

<P align=justify>
You have n bricks arranged in a line on the table. There is exactly one letter on each of them. Your task is to rearrange those bricks so that letters on them create some specified inscription. While rearanging you can only swap adjacent bricks with specified letters (you are given m pairs (a1,b1),...,(am,bm) and you are only allowed to swap bricks with ai on one of them and bi on the second, for some i=1,..,m). You should check if it is possible to accomplish this - and if it is - calculate minimal needed number of swaps.
</P>
<H3>Input</H3>
<P align=justify>
There is a single integer c on the first line of input. Then c test cases follow: each of them consists of two lines of small letters (a..z) with lengths not exceeding 100000 (descriptions of starting and ending configurations), one integer m in the next line and then m lines with two letters ai,bi in each of them.
</P>
<H3>Output</H3>
<P align=justify>
For each test case you should print -1 if it is not possible to rearrange bricks or the minimal number of swaps if it is possible (if so, output this value modulo 2<sup>32</sup>).
</P>
<H3>Example</H3>
<pre>
Input:
4
ab
ba
0
abc
cba
3
ab
cb
ca
cabbbc
cbabbc
1
ab
abba
baab
1
ab

Output:
-1
3
1
2
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
MARBLES||||||false||||||

<P align=justify>
H?¤nschen dreams he is in a shop with an infinite amount of marbles. He is allowed to select n marbles. There are marbles of k different colors. From each color there are also infinitely many marbles. H?¤nschen wants to have at least one marble of each color, but still there are a lot of possibilities for his selection. In his effort to make a decision he wakes up.
Now he asks you how many possibilites for his selection he would have had.
Assume that marbles of equal color can't be distinguished, and the order of the marbles is irrelevant.
</p>
<H3>Input</h3>
<P align=justify>
The first line of input contains a number T <= 100 that indicates the number of test cases to follow. Each test case consists of one line containing n and k, where n is the number of marbles H?¤nschen selects and k is the number of different colors of the marbles. You can assume that 1<=k<=n<=1000000.
</p>
<H3>Output</h3>
<P align=justify>
For each test case print the number of possibilities that H?¤nschen would have had.
You can assume that this number fits into a signed 64 bit integer.
</p>
<H3>Example</h3>
<pre><b><tt>Input:</tt></b>
2
10 10
30 7

<b><tt>Output:</tt></b>
1
475020
</pre>


______________________________________________________
EASYPIE||||||true||||||


<p>
	Last year there were a lot of complaints concerning the set of problems. Most 
	contestants considered our problems to be too hard to solve. One reason for 
	this is that the team members responsible for the problems are not able to 
	evaluate properly whether a particular problem is easy or hard to solve. (We 
	have created until now so many problems, that all seems quite easy.) Because we 
	want our future contests to be better we would like to be able to evaluate the 
	hardness of our problems after the contest using a history of submissions.
</p>
<p>
	There are a few statistics that we can use for evaluating the hardness of a 
	particular problem: the number of accepted solutions of the problem, the 
	average number of submissions of the problem and the average time consumed to 
	solve it (as "General rules" of the contest state "the time consumed for a 
	solved problem is the time elapsed from the beginning of the contest to the 
	submittal of the accepted run"). For the latter two statistics we consider only 
	the teams which solved this particular problem. Needless to say we ask you to 
	write a program that computes aforementioned statistics for all problems.
</p>
<h3>Task</h3>
<p>
	Write a program that:
</p>
<div align="justify">
	<ul>
		<li>
		reads a history of submissions during an ACM contest,
		<li>
		computes for each problem the number of accepted solutions of the problem, the 
		average number of submissions and the average time consumed to solve it,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line of the input contains one integer n (1 <= 
	n <= 2000) being the number of submissions during the contest. Each of the 
	next n lines describes one submission and contains a submission time (measured 
	in seconds from the beginning of the contest), a team identifier, a problem 
	identifier and a result of evaluating the submission separated by single 
	spaces. The submission time is a positive integer not greater then 18000. The 
	team identifier is a non-empty string consisting of at most five small letters 
	or digits. The problem identifier is a capital letter A, B, ..., or I. The 
	result is a capital letter A (the submission is accepted) or R (the submission 
	is rejected).
</p>
<p>
	Submissions are given in nondecreasing order according to submission times and 
	there are 62 teams competing.
</p>
<p>
	Please note that if a problem is accepted all further submission of this 
	problem by the same team are possible but they should not be taken to the 
	statistics.
</p>

*******OutputConstraints*******

<p>
	For each test case the output consists of nine lines. The first line 
	corresponds to problem A, the second line to problem B, and so on. Each line 
	should contain the problem identifier, the number of accepted solutions of the 
	problem, the average number of submissions done by teams that solved that 
	problem and the average time consumed to solve it separated by single spaces. 
	The latter two statistics should be printed only if there was at least one 
	accepted solution of the given problem and should be rounded to two fractional 
	digits (in particular 1.235 should be rounded to 1.24).
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
12 
10 wawu1 B R 
100 chau1 A A 
2000 uwr2 B A 
2010 wawu1 A R 
2020 wawu1 A A 
2020 wawu1 B A 
4000 wawu2 C R 
6000 chau1 A R 
7000 chau1 A A 
8000 pp1 A A 
8000 zil2 B R 
9000 zil2 B A 

<b><tt>Sample output:</tt></b>
A 3 1.33 3373.33 
B 3 1.67 4340.00 
C 0 
D 0 
E 0 
F 0 
G 0 
H 0 
I 0 
</pre>



______________________________________________________
BUNDLE||||||true||||||


<p>Outel, a famous semiconductor company, recently released a new model of 
	microprocessor called Platinium. Like many modern processors, Platinium can 
	execute many instructions in one clock step providing that there are no 
	dependencies between them (instruction I<sub>2</sub> is dependent on 
	instruction I<sub>1</sub> if for example I<sub>2</sub> reads a register that I<sub>1</sub>
	writes to). Some processors are so clever that they calculate on the fly which 
	instructions can be safely executed in parallel. Platinium however expects this 
	information to be explicitly specified. A special marker, called simply a stop, 
	inserted between two instructions indicates that some instructions after the 
	stop are possibly dependent on some instructions before the stop. In other 
	words instructions between two successive stops can be executed in parallel and 
	there should not be dependencies between them.
</p>
<p>
	Another interesting feature of Platinium is that an instruction sequence must 
	be split into groups of one, two or three successive instructions. Each group 
	has to be packed into a container called a bundle. Each bundle has 3 slots and 
	a single instruction can be put into each slot, however some slots may stay 
	empty. Each instruction is categorized into one of 10 instruction types denoted 
	by consecutive capital letters from A to J (instructions of the same type have 
	similar functionality, for example type A groups integer arithmetic 
	instructions and type F groups instructions). Only instructions of certain 
	types are allowed to be packed into one bundle. A template specifies one 
	permissible combination of instruction types within a bundle. A template can 
	also specify a position of a stop in the middle of a bundle (there is at most 
	one such stop allowed). In addition, stops are allowed between any two 
	adjoining bundles. A set of templates is called a bundling profile. When 
	packing instructions into bundles, one has to use templates from bundling 
	profile only.
</p>
<p>
	Although Platinium is equipped with an instruction cache it was found that for 
	maximal performance it is most crucial to pack instructions as densely as 
	possible. Second important thing is to use a small number of stops.
</p>
<p>
	Your task is to write a program for bundling Platinium instructions. For the 
	sake of simplicity we assume that the instructions cannot be reordered.
</p>
<h3>Task</h3>
<p>
	Write a program that:
</p>
<div align="justify">
	<ul>
		<li>
		reads a bundling profile and a sequence of instructions,
		<li>
		computes the minimal number of bundles into which the sequence can be packed 
		without breaking the dependencies and the minimal number of all stops that are 
		required for the minimal number of bundles,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer z, the number of test cases. Then z test 
	cases follow.
</p>
<p>
	The first line of each test case descripition contains two integers t and n 
	separated by a single space. Integer t (1 &lt;= t &lt;= 1500) is the number of 
	templates in the bundling profile. Integer n (1 &lt;= n &lt;= 100000) is the 
	number of instructions to be bundled.
</p>
<p>
	Each of the next t lines specifies one template and contains 3 capital letters 
	t<sub>1</sub>,t<sub>2</sub>,t<sub>3</sub> with no spaces in between followed by 
	a space and an integer p. Letter t<sub>i</sub> (A &lt; = t<sub>i</sub>&lt;= J) 
	is an instruction type allowed in the i-th slot. Integer p (0 &lt;= p &lt;= 2) 
	is the index of the slot after which the stop is positioned (0 means no stop 
	within the bundle).
</p>
<p>
	Each of the next n lines specifies one instruction. The i-th line of these n 
	lines contains one capital letter c<sub>i</sub> and an integer d<sub>i</sub>, 
	separated by a single space. Letter c<sub>i</sub> (A &lt;= c<sub>i</sub>&lt;=J) 
	is the type of the i-th instruction. Integer d<sub>i</sub> (0 &lt; = d<sub>i</sub>
	&lt; i) is the index of the last instruction (among the previous ones) that the 
	i-th instruction is dependent on (0 means that the instruction is not dependent 
	on any former instruction).
</p>
<p>
	You can assume that for each instruction type c describing an instruction in 
	the instruction sequence there is at least one template containing c.
</p>

*******OutputConstraints*******

<p>
	For each test case, the first and only line of the output contains two integers 
	b and s. Integer b is the minimal number of bundles in a valid packing. Integer 
	s is the minimal number of all stops that are required for the minimal number 
	of bundles.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
4 9 
ABB 0 
BAD 1 
AAB 0 
ABB 2 
B 0 
B 1 
A 1 
A 1 
B 4 
D 0 
A 0 
B 3 
B 0 

<b><tt>Sample output:</tt></b> 
4 3 
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SHORTCUT||||||true||||||


<p>
	Mirek has a favourite way from home to the university that he traverses every 
	working day. The route consists of sections and each section is a straight 
	segment 10 meters long. Each section is either a straight ahead extension of 
	the previous section or it is perpendicular to the previous section. After 
	traversing each section Mirek takes a small break to admire the beauty of the 
	nature. During his walk he never visits the same place twice.
</p>
<IMG alt="A sample map" src="/content/adrian:SHORTCUT.png">
<p>
	Yesterday Mirek stayed up long in the night at the party and today he got up 
	late from bed. He knows that he will miss the first lecture unless he changes 
	his usual route. He plans to make one shortcut but he wants the shortcut to be 
	as short as possible (well, we can tell you in secret that he doesn't want to 
	be on time, he just wants to calm his conscience). The shortcut must be either 
	a horizontal or vertical segment connecting two break points of Mirek's route.
</p>
<P>Please help Mirek find the shortest shortcut.
</P>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads Mirek's route,
		<li>
		computes the shortest shortcut on the route,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line of the input contains one integer n (3 &lt;= 
	n &lt;= 250 000) being the number of sections of the route. The second line of 
	the input contains a sequence of n characters N, E, S or W with no spaces in 
	between. Each character is a description of one section of the route. Character 
	N, E, S or W means that Mirek walks 10 meters north, east, south or west 
	respectively. You may assume that at least one shortcut exists for the given 
	route.
</p>

*******OutputConstraints*******

<p>
	The first and only line of the output contains integers l, b, e and character d 
	separated by single spaces. Integer l is the length of the shortest shortcut 
	(measured in 10 m segments). Integers b and e are the numbers of break points 
	where the shortcut begins and ends respectively (we number break points with 
	consecutive integers from 0 for Mirek's home to n for the university). 
	Character d is the direction of the shortcut. If more than one shortcut of the 
	minimal length exists you should output the one that begins earliest on the 
	route. If more than one shortcut of the minimal length begins at the same break 
	point you should output the one that ends furthest on the route.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
12 
NNNENNWWWSSW 

<b><tt>Sample output:</tt></b>
2 3 11 W 
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
DICE1||||||true||||||


<p>
	Everyone loves gambling in the Dicent City. Every Saturday the whole community 
	meets to attend a dice contest. They started a few years ago with a classic 
	six-sided die with 1 to 6 dots displayed on the sides and had a lot of fun.
</p>
<IMG alt="A die" src="/content/john_jones:dice1.jpg">
<p>
	However they soon got bored and that's why more sophisticated dice are in use 
	nowadays. They put a sticker on each side and write a positive integer on each 
	sticker.
</p>
<p>
	The contest is run on a strip divided into squares in a chessboard-like manner. 
	The strip is 4 squares wide and infinite to the left and to the right (is 
	anyone going to say it can't exist in the real world, huh?). The rows of the 
	strip are numbered from 1 to 4 from the bottom to the top and the columns are 
	numbered by consecutive integers from the left to the right. Each square is 
	identified by a pair (x,y) where x is a column number and y is a row number.
</p>
<p>
	The game begins with a die placed on a square chosen be a contest committee 
	with one-dot side on the top and two-dots side facing the player. To move the 
	die the player must roll the die over an edge to an adjacent (either 
	horizontally or vertically) square. The number displayed on the top of the die 
	after a roll is the cost of the move. The goal of the game is to roll the die 
	from the starting square to the selected target square so that the sum of costs 
	of all moves is minimal.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a die, a starting square and a target square,
		<li>
		computes the minimal cost of rolling the die from the starting square to the 
		target square,
		<li>
			writes the result.</li>
	</ul>
</div>
<p>
	Note: all teams participating in the contest received dice from the organisers.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
For each test case the first line of the input contains six integers l<sub>1</sub>, l<sub>2</sub>, 
l<sub>3</sub>, l<sub>4</sub>, l<sub>5</sub>, l<sub>6</sub> (1 &lt; = l<sub>i</sub>
&lt; = 50) separated by single spaces. Integer l<sub>i</sub> is the number 
written on a side having originally i dots. The second line of the input 
contains four integers x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>
( -10<sup>9</sup> &lt; = x<sub>1</sub>, x<sub>2</sub> &lt; = 10<sup>9</sup>, 1 
&lt;= y<sub>1</sub>, y<sub>2</sub> &lt; = 4) separated by single spaces. 
Integers x<sub>1</sub>, y<sub>1</sub> are the column and the row number of the 
starting square respectively. Integers x<sub>2</sub>, y<sub>2</sub> are the 
column and the row number of the target square respectively.
</p>

*******OutputConstraints*******

<p>
For each test case the first and the only line of the output should contain the 
minimal cost of rolling the die from the starting square to the target square.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
1 2 8 3 1 4 
-1 1 0 2 

<b><tt>Sample output:</tt></b>
7 
</pre>



______________________________________________________
RAIN1||||||true||||||


<p>
	Contemporary buildings can have very complicated roofs. If we take a vertical 
	section of such a roof it results in a number of sloping segments. When it is 
	raining the drops are falling down on the roof straight from the sky above. 
	Some segments are completely exposed to the rain but there may be some segments 
	partially or even completely shielded by other segments. All the water falling 
	onto a segment as a stream straight down from the lower end of the segment on 
	the ground or possibly onto some other segment. In particular, if a stream of 
	water is falling on an end of a segment then we consider it to be collected by 
	this segment.
</p>
<IMG alt="Rooftops" src="/content/adrian:RAIN1.png">
<p>
	For the purpose of designing a piping system it is desired to compute how much 
	water is down from each segment of the roof. To be prepared for a heavy 
	November rain you should count one liter of rain water falling on a meter of 
	the horizontal plane during one second.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a roof,
		<li>
		computes the amount of water down in one second from each segment of the roof,
		<li>
			writes the results.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains one integer n (1 &lt;= 
	n &lt; = 40000) being the number of segments of the roof. Each of the next n 
	lines describes one segment of the roof and contains four integers x<sub>1</sub>, 
	y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub> (0 &lt;= x<sub>1</sub>, y<sub>1</sub>, 
	x<sub>2</sub>, y<sub>2</sub> &lt; = 1000000, x<sub>1</sub> &lt; x<sub>2</sub>, 
	y<sub>1</sub>&lt;&gt;y<sub>2</sub>) separated by single spaces. Integers x<sub>1</sub>, 
	y<sub>1</sub> are respectively the horizontal position and the height of the 
	left end of the segment. Integers x<sub>2</sub>, y<sub>2</sub> are respectively 
	the horizontal position and the height of the right end of the segment. The 
	segments don't have common points and there are no horizontal segments. You can 
	also assume that there are at most 25 segments placed above any point on the 
	ground level.
</p>

*******OutputConstraints*******

<p>
For each test case the output consists of n lines. The i-th line should contain 
the amount of water (in liters) down from the i-th segment of the roof in one 
second.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
6 
13 7 15 6 
3 8 7 7 
1 7 5 6 
5 5 9 3 
6 3 8 2 
9 6 12 8 

<b><tt>Sample output:</tt></b>
2 
4 
2 
11 
0 
3 
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
FOOTBALL||||||true||||||


<p>
	Eric has a classic football that is made of 32 pieces of leather: 12 black 
	pentagons and 20 white hexagons. Each pentagon adjoins 5 hexagons and each 
	hexagon adjoins 3 pentagons and 3 hexagons. Eric drew a polygon (i.e. a closed 
	line without intersections) along the edges of the pieces. The polygon divided 
	the ball into two parts and Eric painted one of them green.
</p>
<img src="http://www.spoj.pl/content/adrian:FOOTBALL.png" alt="Eric's football"/>
<p>
	He is curious if given a description of the polygon you are able to compute the 
	number of black, white and green pieces?
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a polygon,
		<li>
		computes the number of black, white and green pieces,
		<li>
			writes the result.</li>
	</ul>
</div>
<p>
	Contest note: the first accepted solution will be awarded with the original 
	football used for preparing the problem, signed by Eric, the author of the 
	problem!
</p>
<p>
	SPOJ note: the first accepted solution will be awarded some other sphere, 
	without anybody's signatures, sent in PNG format to the author's email address 
	[the offer is invalid, the sphere has already  been presented to Robin Nittka, University of Ulm, Germany].
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line of the input contains one integer n being 
	the number of vertices of the polygon. The second line of the input contains n 
	integers a<sub>1</sub>, a<sub>2</sub>,..., a<sub>n</sub> separated by single 
	spaces. Integer a<sub>i</sub> (equal 1 or 2) is the number of green pieces 
	adjoining the i-th vertex of the polygon. The side of the polygon connecting 
	the n-th and the first vertex always lies between two hexagons.
</p>

*******OutputConstraints*******

<p>
	For each test case the first and only line of the output contains three 
	integers b, w and g - the numbers of black, white and green pieces 
	respectively.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
21 
1 2 1 2 1 2 1 1 1 2 2 1 1 1 1 2 2 2 1 1 1 

<b><tt>Sample output:</tt></b>
11 15 6 
</pre>



______________________________________________________
TREE2||||||true||||||


<p>
	Every computer science student knows binary trees. Here is one of many possible 
	definitions of binary trees. Binary trees are defined inductively. A binary 
	tree t is either an external node (leaf) <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o"> 
	or an ordered pair t = (t<sub>1</sub>, t<sub>2</sub>) representing an internal 
	node <img src="http://www.spoj.pl/content/adrian:BDOT.png" alt="*"> with two subtrees attached, left 
	subtree t<sub>1</sub> and right subtree t<sub>2</sub>. Under this definition 
	the number of nodes in any binary tree is odd. Given an odd integer n let B(n) 
	denote the set of all binary trees with n nodes, both internal and external. 
	For instance B(1) consists of only one tree <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, 
	B(3) = {(<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)} 
	and B(5) = {(<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,
	<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)), ((<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,
	<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">), <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)}. 
	The trees of B(5) are depicted in the figure below.
</p>
<img src="http://www.spoj.pl/content/adrian:TREE2.png" alt="The trees B(5)">
<p>
	Denote by |t| the number of nodes in a tree t. Given a tree t we define its 
	unique integer identifier N (t) as follows:
</p>
<div align="justify">
	<ul>
		<li>
			N (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">) = 0
		<li>
			N (t<sub>1</sub>, t<sub>2</sub>) = 2<sup>|t<sub>1</sub>|+|t<sub>2</sub>|</sup> + 
			2<sup>|t<sub>2</sub>|</sup> * N(t<sub>1</sub>) +N (t<sub>2</sub>)</li>
	</ul>
</div>
<p>
	For instance, N (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">) 
	= 2<sup>2</sup> + 2<sup>1</sup> * 0 + 0 = 4, N (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, 
	(<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)) 
	= 2<sup>4</sup> + 2<sup>3</sup> * 0 + 4 = 20,<br>N ((<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,
	<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">), <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">) 
	= 2<sup>4</sup> + 2<sup>1</sup> * 4 + 0 = 24.
</p>
<p>
Consider the following linear order on all binary trees:
</p>
<p>
1) <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o"> < = t<br>
2) (t<sub>1</sub>, t<sub>2</sub>) < = (u<sub>1</sub>, u<sub>2</sub>) when t<sub>1</sub>
< u<sub>1</sub>, or t<sub>1</sub> = u<sub>1</sub> and t<sub>2</sub> < = u<sub>2</sub>
</p>
<p>
In this order a single leaf <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o"> is the 
smallest tree and given two nonleaf trees, the smaller one is that with the 
smaller left tree, if the left subtrees are different, and that with the 
smaller right subtree, otherwise. Hence for instance (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, 
(<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)) 
< ((<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">),
<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">), since we have <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">
< (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">). 
Assume now that the trees in B(n) were sorted using the relation < =. Then, 
for each tree t in B(n) we define the successor of t as the tree that 
immediately follows t in B(n). If t is the largest one in B(n) then the 
successor of t is the smallest tree in set B(n). For instance, the successor of 
(<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">) 
in B(3) is the same tree (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">) 
and the successor of (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">, (<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,
<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">)) in B(5) is ((<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">,
<img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">), <img src="http://www.spoj.pl/content/adrian:WDOT.png" alt="o">). 
Given the integer identifier of some tree t can you give the identifier of the 
successor of t in B(|t|)?
</P>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the identifier of some binary tree t,
		<li>
		computes the identifier of the successor of t in B(|t|),
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first and only line of the input contains one integer n 
	(0 <= n < = 2<sup>30</sup>) - the identifier of some binary tree t.
</p>

*******OutputConstraints*******

<p>
	For each test case the first and only line of the output should contain one 
	integer s - the identifier of the successor of t in B(|t|).
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
20
 
<b><tt>Sample output:</tt></b>
24
</pre>



______________________________________________________
HANGLET||||||true||||||


<p>
	Little Tom is learning how to program. He has just written some programs but is 
	afraid to run them, because he does not know if they will ever stop. Please 
	write a program to help him. This task is not as easy as it may seem, because 
	Tom's programs are possibly not deterministic. Given a program written by Tom, 
	your program should tell him whether his program can stop and if so, what is 
	the shortest possible time before it stops.
</p>
<p>
	Tom's computer consists of 32 1-bit registers and the program consists of n 
	instructions. The registers are numbered from 0 to 31 and the instructions are 
	numbered from 0 to n-1.
</p>
<p>
	Below, MEM[a] stands for the contents of the a-th register, 0 &lt;= a, b &lt; 
	32, 0 &lt;= x &lt; n, 0 &lt;= c &lt;= 1.
</p>
<p>
	The instruction set is as follows:
</p>
<div align="left">
	<pre><tt><hr size=1>
Instruction   Semantics 
<hr size=1>
AND a b       MEM[a] := MEM[a] and MEM[b] 
OR a b        MEM[a] := MEM[a] or MEM[b] 
XOR a b       MEM[a] := MEM[a] xor MEM[b] 
NOT a         MEM[a] := not MEM[a] 
MOV a b       MEM[a] := MEM[b] 
SET a c       MEM[a] := c 
RANDOM a      MEM[a] := random value (0 or 1) 
JMP x         jump to the instruction with the number x 
JZ x a        jump to the instruction with the number x if MEM[a] = 0 
STOP          stop the program 
<hr size=1>
</tt></pre>
</div>
<p>
	The last instruction of a program is always STOP (although there can be more 
	than one STOP instruction). Every program starts with the instruction number 0. 
	Before the start, the contents of the registers can be arbitrary values. Each 
	instruction (including STOP) takes 1 processor cycle to execute.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the program,
		<li>
		computes the shortest possible running time of the program,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains an integer n (1 &lt;= n 
	&lt;= 16) being the number of instructions of the program. Each of the next n 
	lines contains one instruction of the program in the format given above. You 
	may assume that the only white characters in the program are single spaces 
	between successive tokens of each instruction.
</p>

*******OutputConstraints*******

<p>
	For each test case the first and only line of the output should contain the 
	shortest possible running time of the program, measured in processor cycles. If 
	the program cannot stop, output should contain the word HANGS.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2
5 
SET 0 1 
JZ 4 0 
RANDOM 0 
JMP 1 
STOP 
5 
MOV 3 5 
NOT 3 
AND 3 5 
JZ 0 3 
STOP 
<b><tt>Sample output:</tt></b>
6 
HANGS
</pre>



______________________________________________________
MINIMAX||||||true||||||


<p>
The company Chris Ltd. is preparing a new sorting hardware called Maximizer. Maximizer has n 
inputs numbered from 1 to n. Each input represents one integer. Maximizer has one output which 
represents the maximum value present on Maximizer's inputs. 
</p>
<p>
Maximizer is implemented as a pipeline of sorters Sorter(i<sub>1</sub>, j<sub>1</sub>), ... , Sorter(i<sub>k</sub>, j<sub>k</sub>). Each sorter has 
n inputs and n outputs. Sorter(i, j) sorts values on inputs i, i+1,... , j in non-decreasing order and 
lets the other inputs pass through unchanged. The n-th output of the last sorter is the output of the 
Maximizer. 
</p>
<p>
An intern (a former ACM contestant) observed that some sorters could be excluded from the pipeline 
and Maximizer would still produce the correct result. What is the length of the shortest subsequence of 
the given sequence of sorters in the pipeline still producing correct results for all possible combinations 
of input values? 
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>reads a description of a Maximizer, i.e. the initial sequence of sorters in the pipeline, 
		<li>computes the length of the shortest subsequence of the initial sequence of sorters still producing 
correct results for all possible input data,
		<li>writes the result. 
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains two integers n and m (2 <= n <= 50000, 1 <= m <= 500000) separated by 
a single space. Integer n is the number of inputs and integer m is the number of sorters in the pipeline. 
The initial sequence of sorters is described in the next m lines. The k-th of these lines contains the 
parameters of the k-th sorter: two integers i<sub>k</sub> and j<sub>k</sub> (1 <= i<sub>k</sub> < j<sub>k</sub> <= n) separated by a single space. 
</p>

*******OutputConstraints*******

<p>
	For each test case the output consists of only one line containing an integer equal to the length of the shortest subsequence 
of the initial sequence of sorters still producing correct results for all possible data. 
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
40 6 
20 30 
1 10 
10 20 
20 30 
15 25 
30 40 

<b><tt>Sample output:</tt></b>
4 
</pre>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
TWOSQRS||||||false||||||

<P align=justify>
Given integer n decide if it is possible to represent it as a sum of two squares of integers.
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains one integer c<=100 - number of test cases. Then c lines follow, each of them consisting of exactly one integer 0<=n<=10^12.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output Yes if it is possible to represent given number as a sum of two squares and No if it is not possible.
</P>
<H3>Example</H3>
<pre>
Input:
10
1
2
7
14
49
9
17
76
2888
27

Output:
Yes
Yes
No
No
Yes
Yes
Yes
No
Yes
No
</pre>



______________________________________________________
CUTSQRS||||||false||||||

<P align=justify>
Two players take it in turns to cut off squares from a rectangle. If the lengths of the sides of the rectangle are <i>a</i> and <i>b</i> (a<=b) at the beginning of a player's turn, he may cut off as many squares with a side of length <i>a</i> as he likes (but at least 1 square), provided the square he is cutting off has at least three of its sides lying on the sides of the rectangle he is trimming. After every cut, the cut off square is removed from the rectangle. When the last part of the rectangle is removed, the game ends and the person who cut it off wins.
</p>
<p>
Michael, a friend of the players', is taking down a log of the games they are playing in the form of a sequence of consecutive numbers, each number denoting how many squares a player cut off in his turn. Since the game is rather slow, Michael is getting a little bored and he has started writing a detailed analysis of the game in his notebook. For given starting dimensions a and b, he always writes down:
</p>
<div align=left>
<ul>
<li>the number of different possible game sequences,
<li>the number of different possible game sequences in which the starting player wins,
<li>the word 'first' if the starting player can win (provided he does not make any mistakes) regardless of what the other player does, and the word 'second' in all other cases.
</ul>
</div>
<p>
After writing for several hours Michael began to worry whether he had enough room left in his notebook for all the information he wanted to write down. Please help him answer this question.
<H3>Input</h3>
<P align=justify>
An integer t denoting the number of test cases, (t<=10000) followed by t pairs of integers a, b, (1&lt;=a&lt;=b&lt;=10<sup>9</sup>) given in separate lines. 
</p>
<H3>Output</h3>
<P align=justify>
For each test case, output the number of characters Michael has to write down (excluding spaces).
</p>
<H3>Example</h3>
<pre>
<tt><b>Sample input:</b></tt>
2
1 1
2 3

<tt><b>Sample output:</b></tt>
7
8
</pre>
<p>
(In the first case Michael has to write '1 1 first', in the second case '2 1 second'.)
</p>


______________________________________________________
MAYA||||||true||||||


<p align=justify>The Maya lived in Central America during the first millennium. In many regards, they consituted one of the most developed and most fascinating cultures of this epoch. Even though draught animals and the wheel were unknown to the Mayas, they excelled in the fields of weaving, architecture and pottery. But truely breath-taking were their achievements in the fields of astronomy and mathematics. Whilst Europe was trudging through the dark Middle Ages, the Maya determined the solar year to 365.242 days (modern-day measurement: 365.242198) and the lunar cycle to 29.5302 days (modern-day measurement: 29.53059). Such astonishingly precise findings were hardly possible without a powerful numeral system. In this task we will explore the Maya's numeral system.</p>
<p align=justify>Maya priests and astronomers used a numerical system to the base of 20. Unusual to their time, their system also included the concepts of digits and of the zero. Both concepts were completely unknown to the Europeans at this time. The first nineteen numbers of the vigesimal system were represented by dots and dashes according to the following table:</p>
<p align=justify><img src="http://www.spoj.pl/content/ahven:table.gif"/></p>
<p align=justify>The zero was written down as a symbol resembling a shell. Multi-digit numbers (i.e. the numbers bigger than 19) were written in vertical arrangement, with the highest-value digit on top. For example, the number 79 was written as</p>
<p align=justify><img src="http://www.spoj.pl/content/ahven:num1.gif"/></p>
<p align=justify>As can be seen, the second digit possesses a value of 20.</p>
<p align=justify>Due to an interference of the two calendar systems of the Maya, the third digit did not hold the value 400 (20x20), as would be expected, but 360. All the following digits were again treated regularly, i.e. the fourth digit counted 7200 (360x20), the fifth 144000 (7200x20), and so on.</p>
<p align=justify>Hence, the number 13495 (=1x7200+17x360+8x20+15) was written as follows:</p>
<p align=justify><img src="http://www.spoj.pl/content/ahven:num2.gif"/></p>
<p align=justify>Write a program to convert Maya numbers to decimal numbers!</p>


*******InputConstraints*******

<p align=justify>The input file contains a list of numbers written down in Maya fashion. Of course, dots are represented as points (.), and dashes are represented as hyphens (-). The zero digit, the shell symbol, is written as a capital letter S (S). Description of a Maya number starts with <i>n</i> - the number of the Maya digits. The following <i>n</i> lines contain one digit each. One digit is written from top to bottom using spaces as vertical separators.</p>
<p align=justify>One number will not have more than seven digits. Each two numbers are separated by a blank line. Input terminates with <i>n</i> = 0</p>


*******OutputConstraints*******

<p align=justify>Your program has to output the value of the number in the input file in the nowadays more common decimal system. One number per line.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
..

5
... -
. - -
S
S
S

0
<b><tt>Sample output:</tt></b>
2
1231200
</pre>



______________________________________________________
STPAR||||||false||||||

<P align=justify>
For sure, the love mobiles will roll again on this summer's street parade. Each year, the organisers decide on a fixed order for the decorated trucks. Experience taught them to keep free a side street to be able to bring the trucks into order.
<br><br>
The side street is so narrow that no two cars can pass each other. Thus, the love mobile that enters the side street last must necessarily leave the side street first. Because the trucks and the ravers move up closely, a truck cannot drive back and re-enter the side street or the approach street.
<br><br>
You are given the order in which the love mobiles arrive. Write a program that decides if the love mobiles can be brought into the order that the organisers want them to be.
</P>
<H3>Input</H3>
<P align=justify>
There are several test cases.
The first line of each test case contains a single number n, the number of love mobiles.
The second line contains the numbers 1 to n in an arbitrary order. All the numbers are separated by single spaces. These numbers indicate the order in which the trucks arrive in the approach street.
No more than 1000 love mobiles participate in the street parade. Input ends with number 0.
</P>
<H3>Output</H3>
<P align=justify>
For each test case your program has to output a line containing a single word <tt>yes</tt> if the love mobiles can be re-ordered with the help of the side street, and a single word <tt>no</tt> in the opposite case.
</P>
<H3>Example</H3>
<pre>
<b>Sample input:</b>
5
5 1 2 4 3 
0

<b>Sample output:</b>
yes
</pre>
<h3>Illustration</h3>
<p>
The sample input reflects the following situation:<br>
<img src="http://www.spoj.pl/content/pomyk:parade1.gif">
<p>
The five trucks can be re-ordered in the following way:<br>
<img src="http://www.spoj.pl/content/pomyk:parade2.gif">
<img src="http://www.spoj.pl/content/pomyk:parade3.gif">
<img src="http://www.spoj.pl/content/pomyk:parade4.gif">
<img src="http://www.spoj.pl/content/pomyk:parade5.gif">
<img src="http://www.spoj.pl/content/pomyk:parade6.gif">



______________________________________________________
SHOP||||||true||||||


<p><img src="http://www.spoj.pl/content/ahven:shopping.jpg" alt="Crowd in the supermarket" style="float: right" hspace="8" vspace="5"/>The old tube screen to your computer turned out to be the cause of your chronic headaches. You therefore decide to buy one of these new flat TFT monitors. At the entrance of the computer shop you see that it is quite full with customers.</p>
<p>In fact, the shop is rather packed with customers and moving inside involves a certain amount of elbowing. Since you want to return home quickly to complete your half finished SPOJ tasks, you want to sidestep the crowd as much as possible. You examine the situation somewhat closer and realise that the crowding is less in some parts of the shop. Thus, there is reason for hope that you can reach your goal in due time, provided that you take the shortest way. But which way is the shortest way?</p>
<p>You sketch the situation on a piece of paper but even so, it is still a tricky affair. You take out your notebook from your pocket and start to write a program which will find the shortest way for you.</p>


*******InputConstraints*******

<p>The first line of the input specifies the width w and height h of the shop. Neither dimension exceeds 25.</p>
<p>The following h lines contain w characters each. A letter X symbolises a shelf, the letter S marks your starting position, and the letter D marks the destination (i.e. the square in front of the monitors). All free squares are marked with a digit from 1 to 9, meaning the number of seconds needed to pass this square.</p>
<p>There are many test cases separated by an empty line. Input terminates with width and height equal 0 0.</p>

*******OutputConstraints*******

<p>Your program is to output the minimum number of seconds needed to reach to destination square. Each test case in a separate line.  Movements can only be vertical and horizontal. Of course, all movements must take place inside the grid. There will always be a way to reach the destination.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
4 3
X1S3
42X4
X1D2

5 5
S5213
2X2X5
51248
4X4X2
1445D

0 0

<b><tt>Sample output:</tt></b>
4
23
</pre>


______________________________________________________
PARTY||||||false||||||

<P align=justify>
You just received another bill which you cannot pay because you lack the money.<br>
Unfortunately, this is not the first time to happen, and now you decide to investigate the cause of your constant monetary shortness. The reason is quite obvious: the lion's share of your money routinely disappears at the entrance of party localities.
<br><br>
You make up your mind to solve the problem where it arises, namely at the parties themselves. You introduce a limit for your party budget and try to have the most possible fun with regard to this limit.
<br><br>
You inquire beforehand about the entrance fee to each party and estimate how much fun you might have there. The list is readily compiled, but how do you actually pick the parties that give you the most fun and do not exceed your budget?
<br><br>
Write a program which finds this optimal set of parties that offer the most fun. Keep in mind that your budget need not necessarily be reached exactly. Achieve the highest possible fun level, and do not spend more money than is absolutely necessary.
</P>
<H3>Input</H3>
<P align=justify>
The first line of the input specifies your party budget and the number n of parties.
<br><br>
The following n lines contain two numbers each. The first number indicates the entrance fee of each party. Parties cost between 5 and 25 francs. The second number indicates the amount of fun of each party, given as an integer number ranging from 0 to 10.
<br><br>
The budget will not exceed 500 and there will be at most 100 parties. All numbers are separated by a single space.
<br><br>
There are many test cases. Input ends with 0 0.
</P>
<H3>Output</H3>
<P align=justify>
For each test case your program must output the sum of the entrance fees and the sum of all fun values of an optimal solution. Both numbers must be separated by a single space.
</P>
<H3>Example</H3>
<pre>
<h4>Sample input:</h4>
50 10
12 3
15 8
16 9
16 6
10 2
21 9
18 4
12 4
17 8
18 9 

50 10
13 8
19 10
16 8
12 9
10 2
12 8
13 5
15 5
11 7
16 2

0 0

<h4>Sample output:</h4>
49 26
48 32
</pre>



______________________________________________________
DFLOOR||||||false||||||

<P align=justify>
You recently watched a video clip in which a singer danced on a grid of colourful tiles enlightened from below. Each step on a tile flipped the tile's state, i.e. light on or off. In addition to that, all the neighbouring tiles flipped their states, too.
<br><br>
In this task, you are supposed to come up with a short program that decides if it is possible for the singer to switch on the lights of all the tiles, provided that he dances on the appropriate tiles.
<br><br>
The dance floor has rectangular shape. At the beginning, some of the tiles are already alight. Your program may temporarily switch off some tiles, if it deems that necessary to reach its goal. Stepping on a tile toggles its own state as well as the states of the four neighbouring tiles directly above, below, to the left and to the right. Of course, in the case of a peripheral tile, there will be only three or two neighbouring tiles.
<br><br>
Here comes an example:
<br>
<img src="http://www.spoj.pl/content/ahven:example.gif">
<br>
If the dancer steps on the tile indicated by the brown shoe, all the tiles within the white area change their states. The resulting dance floor is depicted on the right.
<br><br>
You may assume that the singer is fit enough to jump from any tile to any other tile, even if the destination tile lies on the opposite side of the dance floor.
</P>
<H3>Input</H3>
<P align=justify>
There are several test cases.
The first line of each case contains two integer numbers <em>x</em> and <em>y</em>,
  indicating the width and the height of the dance floor grid. The numbers are
  separated by a single space and satisfy 3 &#8804; <em>x</em>,<em>y</em> &#8804;
  15.
<br><br>
The following <em>y</em> lines containing <em>x</em>characters each describe
  the initial on/off states of the tiles. A zero means &quot;the tile is switched
  off&quot;, a one digit means &quot;the tile is alight&quot;.
<br><br>Input ends with 0 0.
</P>
<H3>Output</H3>
<P align=justify>
For each test case your program should output the number of steps needed to switch all the lights on, followed by exactly that many lines with two space-separated numbers <em>i</em> and <em>j</em>. Each individual line commands the singer to
  step on the <em>i</em>-th tile of the <em>j</em>-th row. Starting with the situation
  of the input file and executing all the commands in the output file, all the
  tiles must be switched on.
<br><br>
If more than one solution exist, your program should output an arbitrary one
  of them. If, on the other hand, no solution exists, your program should write the number "-1".
</P>
<H3>Example</H3>
<pre>
<h4>Sample input</h4>
4 3
0111
1010
1000

0 0

<h4>Sample output</h4>
3
1 2
1 3
4 3
</pre>



______________________________________________________
BUS||||||true||||||


<p><img src="http://www.spoj.pl/content/ahven:bus.gif" style="float: right" width="200" vspace="5" hspace="5">The city Buscelona (as the name suggests) has a great bus transport system. All buses have circular lines. The bus drivers in Buscelona like to chat. Fortunately most bus lines have some stops in common. If a bus driver meets a colleague on a bus stop they chat a bit and exchange all news they know.</p>
<p>The operation of buses is highly synchronized. The time necessary to get from one stop to the next stop is always exactly 1 minute.</p>
<p>Each morning each bus driver has some important news that only he knows. When a busdriver meets a colleague he will tell him all news he knows. If two bus drivers share the same start station, they will exchange their news there already (before they start working). Note that exchanging news and stopping does not take any time.</p>


*******InputConstraints*******

<p>The first line of a test case contains the number of bus lines <i>n</i> (0 &lt; <i>n</i> &lt; 50). The following <i>n</i> lines start with a number <i>s</i> (0 &lt; <i>s</i> &lt; 50) indicating the stops of a busline. On the same line follow <i>s</i> numbers representing a bus station each. A bus starts at the first station. When a bus reaches the last station, the bus will drive to the first station again.</p>
<p>There are many test cases separated by an empty line. Input data terminates with <i>n</i> = 0.</p>


*******OutputConstraints*******

<p>For each test case you should output the time in minutes which it takes until all bus drivers know all news. If that never happens, your program should write the word "NEVER" (without quotes).</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
3
3 1 2 3
3 2 3 1
4 2 3 4 5

2
2 1 2
2 5 8

0

<b><tt>Sample output:</tt></b>
12
NEVER
</pre>



______________________________________________________
BABTWR||||||true||||||


<p><img src="http://www.spoj.pl/content/ahven:tower.png" style="float: right" hspace="5">Apart from the Hanging Gardens the Babylonians (around 3000-539 b.c.) built the Tower of Babylon as well. The tower was meant to reach the sky, but the project failed because of a confusion of language imposed from much higher above.</p>
<p>For the 2638th anniversary a model of the tower will be rebuilt. <i>n</i> different types of blocks are available. Each one of them may be duplicated as many times as you like. Each type has a height <i>y</i>, a width <i>x</i> and a depth <i>z</i>. The blocks are to be stacked one upon eachother so that the resulting tower is as high as possible. Of course the blocks can be rotated as desired before stacking. However for reasons of stability a block can only be stacked upon another if <i>both</i> of its baselines are shorter.</p>


*******InputConstraints*******

<p>The number of types of blocks <i>n</i> is located in the first line of each test case. On the subsequent <i>n</i> lines the height <i>y<sub>i</sub></i>, the width <i>x<sub>i</sub></i> and the depth <i>z<sub>i</sub></i> of each type of blocks are given. There are never more than 30 different types available.</p>
<p>There are many test cases, which come one by one. Input terminates with n = 0.</p>


*******OutputConstraints*******

<p>For each test case your program should output one line with the height of the highest possible tower.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
5
31 41 59
26 53 58
97 93 23
84 62 64
33 83 27
1
1 1 1
0

<b><tt>Sample output:</tt></b>
342
1
</pre>



______________________________________________________
FISHER||||||true||||||


<p><img src="http://www.spoj.pl/content/ahven:fisher.jpg" alt="A Fishmonger" style="float: right" vspace="3" hspace="8" width="160"/>A fishmonger wants to bring his goods from the port to the market. On his route he has to traverse an area with many tiny city states. Of course he has to pay a toll at each border.</p>
<p>Because he is a good business man, he wants to choose the route in such a way that he has to pay as little money for tolls as possible. On the other hand, he has to be at the market within a certain time, otherwise his fish start to smell.</p>


*******InputConstraints*******

<p>The first line contains the number of states <i>n</i> and available time <i>t</i>. The first state is the port, the last state is the market. After this line there are <i>n</i> lines with <i>n</i> numbers each, specifying for each state the travel time to the <i>i</i>-th state. This table is terminated with an empty line. The table of the tolls follows in the same format.</p>
<p><i>n</i> is at least 3 and at most 50. The time available is less than 1000. All numbers are integers.</p>
<p>There are many test cases separated by an empty line. Input terminates with number of states and time equal 0 0.</p>

*******OutputConstraints*******

<p>For each test case your program should print on one line the total amount of tolls followed by the actual travelling time.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
4 7
0 5 2 3
5 0 2 3
3 1 0 2
3 3 2 0

0 2 2 7
2 0 1 2
2 2 0 5
7 2 5 0

0 0

<b><tt>Sample output:</tt></b>
6 6
</pre>
<p>This corresponds to the following situation, the connections are labeled with (time, toll):</p>
<p><img src="http://www.spoj.pl/content/ahven:graf.gif" /></p>



______________________________________________________
LITEPIPE||||||true||||||


<p align=justify>The GX Light Pipeline Inc. started to prepare bent pipes for the new transgalactic light pipeline. However during the design of the pipeline they ran into the problem of determing how far the light can reach inside the pipe. In order to improve your scarce budget you decided to fill a summer job at the GX Light Pipeline Inc. Now it's your task to create a program which computes how far the light reaches in the pipeline.</p>
<p align=justify>The pipeline consists of seamlessly welded together segments made of non-reflecting opaque materials. The upper points of the pipe contour are described by a sequence of points [<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>], [<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>], [<i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>], ..., [<i>x<sub>n</sub></i>, <i>y<sub>n</sub></i>], where <i>x<sub>k</sub></i> &lt; <i>x<sub>k</sub></i><sub>+1</sub>. The bottom points of the pipe contour are the same points with <i>y</i>-coordinate decreased by 1.</p>
<p align=justify>The company wants to find the points with maximal <i>x</i>-coordinate that the light will reach. The light is emitted by a segment source with endpoints [<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>] and [<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>-1] (endpoints are emitting light too). Assume that the light is not bent at the pipe bent points and the bent points do not stop the light beam.</p>
<img src="http://www.spoj.pl/content/ahven:pipe.gif" align="center"/>

*******InputConstraints*******

<p align=justify>Each test case starts with the number of bent points <i>n</i>. Each of the next <i>n</i> lines contains a pair of real values <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> separated by space.</p>
<p align=justify>The number of bent points never excedes 200.</p>
<p align=justify>There are many test cases. Input terminates with <i>n</i> = 0.</p>


*******OutputConstraints*******

<p align=justify>For each test case your program should output on a single line the maximal <i>x</i>-coordinate of the point where the light can reach from the source segment, written with precision of two decimal places. If the light goes trough all the pipe, your program should output <i>x<sub>n</sub></i>.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
4
0.00 1.00
2.00 2.00
4.00 1.00
6.00 4.00
0

<b><tt>Sample output:</tt></b>
4.67
</pre>


______________________________________________________
HIGH||||||true||||||


<p>
In some countries building highways takes a lot of time... Maybe that's because there are many possiblities to construct a network of highways and engineers can't make up their minds which one to choose. Suppose we have a list of cities that can be connected directly. Your task is to count how many ways there are to build such a network that between every two cities there exists exactly one path. Two networks differ if there are two cities that are connected directly in the first case and aren't in the second case. At most one highway connects two cities. No highway connects a city to itself. Highways are two-way.
</p>


*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases (equal to about 1000). Then t test
cases follow.
The first line of each test case contains two integers, the number of cities (1<=n<=12) and the number of direct connections between them. Each next line contains two integers a and b, which are numbers of cities that can be connected. Cities are numbered from 1 to n. Consecutive test cases are separated with one blank line.

</p>


*******OutputConstraints*******

<p>
The number of ways to build the network, for every test case in a separate line. Assume that when there is only one city, the answer should be 1. The answer will fit in a signed 64-bit integer.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
4
4 5
3 4
4 2
2 3
1 2
1 3

2 1
2 1

1 0

3 3
1 2
2 3
3 1

<b><tt>Sample output:</tt></b>
8
1
1
3

</pre>



______________________________________________________
ALICEBOB||||||true||||||


<p>
	This is a puzzle for two persons, let's say Alice and Bob. Alice draws an 
	n-vertex convex polygon and numbers its vertices with integers 1, 2, ... , n in 
	an arbitrary way. Then she draws a number of noncrossing diagonals (the 
	vertices of the polygon are not considered to be crossing points). She informs 
	Bob about the sides and the diagonals of the polygon but not telling him which 
	are which. Each side and diagonal is specified by its ends. Bob has to guess 
	the order of the vertices on the border of the polygon. Help him solve the 
	puzzle.
</p>
<p>
	If n = 4 and (1,3), (4,2), (1,2), (4,1), (2,3) are the ends of four sides and 
	one diagonal then the order of the vertices on the border of this polygon is 1, 
	3, 2, 4 (with the accuracy to shifting and reversing).
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of sides and diagonals given to Bob by Alice,
		<li>
		computes the order of the vertices on the border of the polygon,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input contains exactly one positive integer d equal to 
	the number of data sets, 1 &lt;= d &lt;= 20. The data sets follow.
</p>
<p>
	Each data set consists of exactly two consecutive lines.
</p>
<p>
	The first of those lines contains exactly two integers n and m separated by a 
	single space, 3 &lt;= n &lt;= 10 000, 0 &lt;= m &lt;= n-3. Integer n is the 
	number of vertices of a polygon and integer m is the number of its diagonals, 
	respectively.
</p>
<p>
	The second of those lines contains exactly 2(m+n) integers separated by single 
	spaces. Those are ends of all sides and some diagonals of the polygon. Integers 
	a<sub>j</sub>, b<sub>j</sub> on positions 2j-1 and 2j, 1 &lt;= j &lt; = m+n, 1 
	&lt; = a<sub>j</sub> &lt;= n, 1 &lt; = b<sub>j</sub> &lt; = n, a<sub>j</sub> &lt;&gt; 
	b<sub>j</sub>, specify ends of a side or a diagonal. The sides and the 
	diagonals can be given in an arbitrary order. There are no duplicates. Alice 
	does not cheat, i.e. the puzzle always has a solution.
</p>

*******OutputConstraints*******

<p>
Line i, 1 &lt;= i &lt; = d, should contain a sequence of n integers separated 
by single spaces - a permutation of 1, 2, ... , n, i.e. the numbers of 
subsequent vertices on the border of the polygon from the i-th data set, the 
sequence should always start from 1 and its second element should be the 
smaller vertex of the two border neighbours of vertex 1.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
4 1 
1 3 4 2 1 2 
4 1 2 3 

<B><TT>Sample output:</TT></B>
1 3 2 4 
</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
BINSTIRL||||||true||||||


<p>
	The Stirling number of the second kind S(n, m) stands for the number of ways to 
	partition a set of n things into m nonempty subsets. For example, there are 
	seven ways to split a four-element set into two parts: {1, 2, 3} u {4}, {1, 2, 
	4} u {3}, {1, 3, 4} u {2}, {2, 3, 4} u {1}, {1, 2} u {3, 4}, {1, 3} u {2, 4}, 
	{1, 4} u {2, 3}.
</p>
<p>
	There is a recurrence which allows you to compute S(n, m) for all m and n.<br>
	S(0, 0) = 1,<br>
	S(n, 0) = 0, for n &gt; 0,<br>
	S(0, m) = 0, for m &gt; 0,<br>
	S(n, m) = m*S(n-1, m) + S(n-1, m-1), for n, m &gt; 0.
</p>
<p>
	Your task is much "easier". Given integers n and m satisfying 1 &lt;= m &lt;= 
	n, compute the parity of S(n, m), i.e. S(n, m) mod 2.
</p>
<p>
	For instance, S(4, 2) mod 2 = 1.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads two positive integers n and m,
		<li>
		computes S(n, m) mod 2,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input contains exactly one positive integer d equal to 
	the number of data sets, 1 &lt;= d &lt;= 200. The data sets follow.
</p>
<p>
	Line i + 1 contains the i-th data set - exactly two integers n<sub>i</sub> and 
	m<sub>i</sub> separated by a single space, 1 &lt; = m<sub>i</sub> &lt; = n<sub>i</sub>
	&lt;= 10<sup>9</sup>.
</p>

*******OutputConstraints*******

<p>
	The output should consist of exactly d lines, one line for each data set. Line 
	i, 1 &lt;= i &lt; = d, should contain 0 or 1, the value of S(n<sub>i</sub>, m<sub>i</sub>) 
	mod 2.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
4 2 

<b><tt>Sample output:</tt></b>
1 
</pre>



______________________________________________________
MAYACAL||||||true||||||


<p>
	The Classical Maya civilization developed in what is today southern Mexico, 
	Guatemala, Belize and northern Honduras. During its height they developed a 
	sophisticated system for time keeping which they used both to record history 
	and for divinatory rituals. Their calendar consisted of 3 components. the 
	Tzolkin, the Haab and the Long Count.
</p>
<p>
	For divinatory purposes the Maya used the Tzolkin which was composed of 20 day 
	names to which numeric coefficients from 1 to 13 were attached giving a total 
	of 260 distinct combinations. This is the size of the Tzolkin, or ritual, year. 
	From Spanish colonial sources, we know the names of the days: <tt>Imix, Ik, Akbal, 
		Kan, Chikchan, Kimi, Manik, Lamat, Muluk, Ok, Chuen, Eb, Ben, Ix, Men, Kib, 
		Kaban, Etznab, Kawak, Ajaw</tt>. The sequence of days developed as follows 
	(starting for example at 9 Imix):
	<pre>9 Imix, 10 Ik, 11 Akbal, 12 Kan, 13 Chikchan, 1 Kimi, 2 Manik, ...</pre>
<P></P>
<p>
	The Haab calendar was an astronomical one. It had 365 days divided into 19 
	months each with 20 days, except the last one which had only 5 days. In a 
	manner similar to the Tzolkin each month name had a number from 1 to 20 
	indicating the day number within the month. Again, from Spanish colonial 
	sources, we know the names of the months: <tt>Pohp, Wo, Sip, Zotz, Sek, Xul, 
		Yaxkin, Mol, Chen, Yax, Sak, Keh, Mak, Kankin, Muan, Pax, Kayab, Kumku, Wayeb</tt>. 
	The month Wayeb had just 5 days and was considered an unlucky time of the year.
</p>
<p>
	The Tzolkin and Haab were combined in the inscriptions to create the Calendar 
	Round, combining the 260 day cycle of the Tzolkin and the 365 day cycle of the 
	Haab. A typical Calendar Round date in the inscriptions might be. 3 Lamat 6 
	Pax. Note that not all of the combination of days, months and coefficients are 
	possible.
</p>
<p>
	A typical sequence of days in the Calendar Round (starting for example at 3 
	Lamat 6 Pax):
	<pre>
3 Lamat 6 Pax, 4 Muluk 7 Pax, 5 Ok 8 Pax, 6 Chuen 9 Pax, 7 Eb 10 Pax, 
8 Ben 11 Pax, 9 Ix 12 Pax, 10 Men 13 Pax, 11 Kib 14 Pax, 12 Kaban 15 Pax, 
13 Etznab 16 Pax, 1 Kawak 17 Pax, 2 Ajaw 18 Pax, 3 Imix 19 Pax, 4 Ik 20 Pax, 
5 Akbal 1 Kayab, 6 Kan 2 Kayab, ... 
</pre>
<P></P>
<p>
	Finally, at the beginning of the Classic Period (AD 200 - 900), the Maya 
	developed an absolute calendar called Long Count which counted the days from a 
	fixed date in the past (the date when the current world was created according 
	to Maya belief). Dates in the Long Count are given (for simplicity) in 5-tuples 
	of the form. 9.2.3.4.5. Such a date one reads "9 baktuns 2 katuns 3 tuns 4 
	winals 5 kins since the zero date". A "kin" is just one day. A winal is a group 
	of 20 days. A tun is a group of 18 winals (thus a tun has 20*18 = 360 days, 5 
	days short of a year). From here on all units come in multiples of 20. Thus a 
	katun is equal to 20 tuns (almost 20 years) and a baktun means 20 katuns 
	(almost 400 years). Thus 9.2.3.4.5 really means "9*144000+2*7200+3*360+4*20+5 
	days since the zero date". Note that for every Long Count date b.k.t.w.i we 
	have 0 &lt;= k &lt; 20; 0 &lt;= t &lt; 20; 0 &lt;= w &lt; 18; 0 &lt;= i &lt; 
	20. Given the periodicity of the Calendar Round, a legal date such as 3 Lamat 6 
	Pax has multiple occurrences in the Long Count. Thus, one difficulty in reading 
	inscriptions is in establishing a date for the inscription when the date is 
	given only in terms of a Calendar Round (very common). In this case one must 
	compute "all" the possible Long Count dates associated with the particular 
	Calendar Round and based in some other context information deduce (for example, 
	the text mentions a king for which other dates are known) which one applies.
</p>
<p>
	We limit our interest to the Long Count dates in the baktuns 8 and 9 (they 
	cover all the Classic Period). We know that the Long Count date 8.0.0.0.0 fell 
	on the Calendar Round 9 Ajaw 3 Sip.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads a Calendar Round date,
		<li>
		computes all Long Count dates in the baktuns 8 and 9 for the given Calendar 
		Round date if this date is legal,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input contains exactly one positive integer d equal to 
	the number of data sets, 1 &lt;= d &lt;= 30. The data sets follow.
</p>
<p>
	Each data set consists of exactly one line that contains exactly one Calendar 
	Round date (maybe illegal). Tzolkin day number, Tzolkin day name, Haab day 
	number and Haab month name separated by single spaces.
</p>

*******OutputConstraints*******

<p>
	For every data set your program must output an ascending sequence of Long Count 
	dates computed for a given Calendar Round date. The first line of the output 
	for the given input set should contain exactly one integer n equal to the 
	length of the sequence (0, if the input date is illegal).
</p>
<p>
	Each of the next n lines should contain exactly one Long Count date specified 
	by exactly 5 integers (meaning the numbers of baktuns, katuns, tuns, winals and 
	kins respectively) separated by single dots.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2 
3 Lamat 6 Pax 
1 Ajaw 9 Chen 

<b><tt>Sample output:</tt></b>
15 
8.0.17.17.8 
8.3.10.12.8 
8.6.3.7.8 
8.8.16.2.8 
8.11.8.15.8 
8.14.1.10.8 
8.16.14.5.8 
8.19.7.0.8 
9.1.19.13.8 
9.4.12.8.8 
9.7.5.3.8 
9.9.17.16.8 
9.12.10.11.8 
9.15.3.6.8 
9.17.16.1.8 
0 

</pre>



______________________________________________________
MORSE||||||true||||||


<p>
Before the digital age, the most common "binary" code for radio communication was the Morse 
code. In Morse code, symbols are encoded as sequences of short and long pulses (called dots and dashes 
respectively). The following table reproduces the Morse code for the alphabet, where dots and dashes 
are represented as ASCII characters "." and "-": 
<pre>A .-   B -... C -.-. D -.. 
E .    F ..-. G --.  H .... 
I ..   J .--- K -.-  L .-.. 
M --   N -.   O ---  P .--. 
Q --.- R .-.  S ...  T - 
U ..-  V ...- W .--  X -..- 
Y -.-- Z --..
</pre>
</p>
<p>
Notice that in the absence of pauses between letters there might be multiple interpretations of a Morse 
sequence. For example, the sequence -.-..-- could be decoded both as CAT or NXT (among others). A 
human Morse operator would use other context information (such as a language dictionary) to decide 
the appropriate decoding. But even provided with such dictionary one can obtain multiple phrases from 
a single Morse sequence. 
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>reads a Morse sequence and a list of words (a dictionary), 
		<li>computes the number of distinct phrases that can be obtained from the given Morse sequence using 
words from the dictionary, 
		<li>writes the result. 
	</ul>
</div>
<p>Notice that we are interested in full matches, i.e. the complete Morse sequence must be matched to 
words in the dictionary. 
</p>

*******InputConstraints*******

<p>
The first line of the input contains exactly one positive integer d equal to the number of data sets, 
1 <= d <= 20. The data sets follow. 
</p>
<p>
The first line of each data set contains a Morse sequence - a nonempty sequence of at most 10000 
characters "." and "-" with no spaces in between. 
</p>
<p>
The second line contains exactly one integer n, 1 <= n <= 10000, equal to the number of words in 
a dictionary. Each of the following n lines contains one dictionary word - a nonempty sequence of at 
most 20 capital letters from "A" to "Z". No word occurs in the dictionary more than once. 
</p>

*******OutputConstraints*******

<p>
The output should consist of exactly d lines, one line for each data set. Line i should contain one integer 
equal to the number of distinct phrases into which the Morse sequence from the i-th data set can be 
parsed. You may assume that this number is at most 2*10<sup>9</sup> for every single data set. 
</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
.---.--.-.-.-.---...-.---. 
6 
AT 
TACK 
TICK 
ATTACK 
DAWN 
DUSK 

<b><tt>Sample output:</tt></b>
2 
</pre>



______________________________________________________
EXCHNG||||||true||||||


<p>
	Given n integer registers r<sub>1</sub>, r<sub>2</sub>, ... , r<sub>n</sub> we 
	define a Compare-Exchange Instruction CE(a,b), where a, b are register indices 
	(1 &lt;= a &lt; b &lt;= n):
</p>
<pre>
CE(a, b):: 
  if content(r<sub>a</sub>) &gt;  content(r<sub>b</sub>) then 
     exchange the contents of registers r<sub>a</sub> and r<sub>b</sub>; 
</pre>
<p>
	A Compare-Exchange program (shortly CE-program) is any finite sequence of 
	Compare-Exchange instructions. A CE-program is called a Minimum-Finding program 
	if after its execution the register r<sub>1</sub> always contains the smallest 
	value among all values in the registers. Such a program is called reliable if 
	it remains a Minimum-Finding program after removing any single Compare-Exchange 
	instruction. Given a CE-program P, what is the smallest number of instructions 
	that should be added at the end of program P in order to get a reliable 
	Minimum-Finding program?
</p>
<p>
	For instance, consider the following CE-program for 3 registers: CE(1, 2), 
	CE(2, 3), CE(1, 2). In order to make this program a reliable Minimum-Finding 
	program it is sufficient to add only two instructions: CE(1, 3) and CE(1, 2).</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a CE-program,
		<li>
		computes the smallest number of CE-instructions that should be added to make 
		this program a reliable Minimum-Finding program,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input contains exactly one positive integer d equal to 
	the number of data sets, 1 &lt;= d &lt;= 10. The data sets follow.
</p>
<p>
	Each data set consists of exactly two consecutive lines. The first of those 
	lines contains exactly two integers n and m separated by a single space, 2 
	&lt;= n &lt;= 10000, 0 &lt;= m &lt;= 25000. Integer n is the number of 
	registers and integer m is the number of program instructions.
</p>
<p>
	The second of those lines contains exactly 2m integers separated by single 
	spaces - the program itself. Integers a<sub>j</sub>, b<sub>j</sub> on positions 
	2j-1 and 2j, 1 &lt;= j &lt; = m, 1 &lt; = a<sub>j</sub> &lt; b<sub>j</sub> &lt;= 
	n, are parameters of the j-th instruction in the program.</p>

*******OutputConstraints*******

<p>
	The output should consist of exactly d lines, one line for each data set. Line 
	i, 1 &lt;= i &lt;= d, should contain only one integer - the smallest number of 
	instructions that should be added at the end of the i-th input program in order 
	to make this program a reliable Minimum-Finding program.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
3 3 
1 2 2 3 1 2

<b><tt>Sample output:</tt></b>
2 
</pre>



______________________________________________________
CISTFILL||||||true||||||


<p>
During the next century certain regions on earth will experience severe water shortages. The old 
town of Uqbar has already started to prepare itself for the worst. Recently they created a network of 
pipes connecting the cisterns that distribute water in each neighbourhood, making it easier to fill them 
at once from a single source of water. But in case of water shortage the cisterns above a certain level 
will be empty since the water will flow to the cisterns below. </p>
<img src="http://www.spoj.pl/content/adrian:FILLCIST.png" alt="Example of cistern arrangement"/>
<p>
You have been asked to write a program to compute the level to which cisterns will be filled with a 
certain volume of water, given the dimensions and position of each cistern. To simplify we will neglect 
the volume of water in the pipes. 
</p>

<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>reads the description of cisterns and the volume of water,
		<li>computes the level to which the cisterns will be filled with the given amount of water,
		<li>writes the result.
	</ul>
</div>


*******InputConstraints*******

<p>
The first line of the input contains the number of data sets k, 1 <= k <= 30. The data sets follow. 
</p>
<p>
The first line of each data set contains one integer n, the number of cisterns, 1 <= n <= 50000. Each of 
the following n lines consists of 4 nonnegative integers, separated by single spaces: b, h, w, d - the base 
level of the cistern, its height, width and depth in meters, respectively. The integers satisfy 0 <= b <= 10<sup>6</sup> 
and 1 <= h*w*d <= 40000. The last line of the data set contains an integer V - the volume of water in 
cubic meters to be injected into the network. Integer V satisfies 1 <= V <= 2*10<sup>9</sup>. 
</p>

*******OutputConstraints*******

<p>
The output should consist of exactly d lines, one line for each data set. 
Line i, 1 <= i <= d, should contain the level that the water will reach, in meters, rounded up to two 
fractional digits, or the word `OVERFLOW', if the volume of water exceeds the total capacity of the cisterns. 
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
3 
2 
0 1 1 1 
2 1 1 1 
1 
4 
11 7 5 1 
15 6 2 2 
5 8 5 1 
19 4 8 1 
132 
4 
11 7 5 1 
15 6 2 2 
5 8 5 1 
19 4 8 1 
78 

<b><tt>Sample output:</tt></b>
1.00 
OVERFLOW 
17.00 
</pre>

<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
SEGVIS||||||true||||||


<p>
	There is a number of disjoint vertical line segments in the plane. We say that 
	two segments are horizontally visible if they can be connected by a horizontal 
	line segment that does not have any common points with other vertical segments. 
	Three different vertical segments are said to form a triangle of segments if 
	each two of them are horizontally visible. How many triangles can be found in a 
	given set of vertical segments?
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a set of vertical segments,
		<li>
		computes the number of triangles in this set,
		<li>
			writes the result.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The first line of the input contains exactly one positive integer d equal to 
	the number of data sets, 1 &lt;= d &lt;= 20. The data sets follow.
</p>
<p>
The first line of each data set contains exactly one integer n, 1 &lt;= n &lt; 
= 8000, equal to the number of vertical line segments.
<p>
	Each of the following n lines consists of exactly 3 nonnegative integers 
	separated by single spaces: y'<sub>i</sub>, y''<sub>i</sub>, x<sub>i</sub>(that 
	is the y-coordinate of the beginning of a segment, y-coordinate of its end and 
	its x-coordinate, respectively). The coordinates satisfy: 0 &lt; = y'<sub>i</sub>&lt; 
	y''<sub>i</sub> &lt;= 8000, 0 &lt; = x<sub>i</sub> &lt;= 8000. The segments are 
	disjoint.
</p>

*******OutputConstraints*******

<p>
	The output should consist of exactly d lines, one line for each data set. Line 
	i should contain exactly one integer equal to the number of triangles in the 
	i-th data set.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
5 
0 4 4 
0 3 1 
3 4 2 
0 2 2 
0 2 3 

<b><tt>Sample output:</tt></b>
1 
</pre>



______________________________________________________
FAMILY||||||true||||||


<p>
	We want to find out how much related are the members of a family of monsters. 
	Each monster has the same number of genes but the genes themselves may differ 
	from monster to monster. It would be nice to know how many genes any two given 
	monsters have in common. This is impossible, however, since the number of genes 
	is very large. Still, we do know the family tree (well, not actually a tree, 
	but you cannot really blame them, these are monsters, right?) and we do know 
	how the genes are inherited so we can estimate the number of common genes quite 
	well.
</p>
<p>
	The inheritance rule is very simple: if a monster C is a child of monsters A 
	and B then each gene of C is identical to the corresponding gene of either A or 
	B, each with probability 50%. Every gene of every monster is inherited 
	independently.
</p>
<p>
	Let us define the degree of relationship of monsters X and Y as the expected 
	number of common genes. For example consider a family consisting of two 
	completely unrelated (i.e. having no common genes) monsters A and B and their 
	two children C and D. How much are C and D related? Well, each of C's genes 
	comes either from A or from B, both with probability 50%. The same is true for 
	D. Thus, the probability of a given gene of C being the same as the 
	corresponding gene of D is 50%. Therefore the degree of relationship of C and D 
	(the expected number of common genes) is equal to 50% of all the genes. Note 
	that the answer would be different if A and B were related. For if A and B had 
	common genes, these would be necessarily inherited by both C and D.
</p>
<p>
Your task is to write a program that, given a family graph and a list of pairs 
of monsters, computes the degree of relationship for each of these pairs.
<p>
	<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a family and a list of pairs of its members from the 
		standard input,
		<li>
		computes the degree of relationship (in percentages) for each pair on the list,
		<li>
			writes the result to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains two integers n and k 
	separated by a single space. Integer n (2 <= n <= 300) is the number of 
	members in a family. Family members are numbered arbitrarily from 1 to n. 
	Integer k (0 <= k <= n - 2) is the number of monsters that do have 
	parents (all the other monsters were created by gods and are completely 
	unrelated to each other).
</p>
<p>
	Each of the next k lines contains three different integers a, b, c separated by 
	single spaces. The triple a, b, c means that the monster a is a child of 
	monsters b and c.
</p>
<p>
	The next input line contains an integer m (1 <= m < = n<sup>2</sup>) - 
	the number of pairs of monsters on the list. Each of the next m lines contains 
	two integers separated by a single space - these are the numbers of two 
	monsters.
</p>
<p>
	You may assume that no monster is its own ancestor. You should not make any 
	additional assumptions on the input data. In particular, you should not assume 
	that there exists any valid sex assignment.
</p>

*******OutputConstraints*******

<p>
	For each test case the output consists of m lines. The i-th line corresponds to 
	the i-th pair on the list and should contain single number followed by the 
	percentage sign. The number should be the exact degree of relationship (in 
	percentages) of the monsters in the i-th pair. Unsignificant zeroes are not 
	allowed in the output (please note however that there must be at least one 
	digit before the period sign so for example the leading zero in number 0.1 is 
	significant and you cannot print it as .1). Confront the example output for the 
	details of the output format.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
7 4
4 1 2
5 2 3
6 4 5
7 5 6
4
1 2
2 6
7 5
3 3

<b><tt>Sample output:</tt></b>
0%
50%
81.25%
100%
</PRE>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
INTERVAL||||||true||||||


<p>
	You are given n closed integer intervals [a<sub>i</sub>, b<sub>i</sub>] and n 
	integers c<sub>1</sub>, ..., c<sub>n</sub>.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
			reads the number of intervals, their endpoints and integers c<sub>1</sub>, ..., 
			c<sub>n</sub>
		from the standard input,
		<li>
			computes the minimal size of a set Z of integers which has at least c<sub>i</sub>
			common elements with interval [a<sub>i</sub>, b<sub>i</sub>], for each i = 
		1, 2, ..., n,
		<li>
			writes the answer to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains an integer n (1 &lt;= n 
	&lt;= 50000) - the number of intervals. The following n lines describe the 
	intervals. Line (i+1) of the input contains three integers a<SUB>i</SUB>, 
	b<SUB>i</SUB> and c<SUB>i</SUB> separated by single spaces and such that 0 &lt; 
		= a<sub>i</sub> &lt; = b<sub>i</sub> &lt;= 50000 and 1 &lt; = c<sub>i</sub> &lt; 
		= b<sub>i</sub> -a<sub>i</sub> +1.
</p>

*******OutputConstraints*******

<p>
	For each test case the output contains exactly one integer equal to the minimal 
	size of set Z sharing at least c<sub>i</sub> elements with interval [a<sub>i</sub>, 
	b<sub>i</sub>], for each i= 1, 2, ..., n.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5
3 7 3
8 10 3
6 8 1
1 3 1
10 11 1

<b><tt>Sample output:</tt></b>
6
</pre>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
RHOMBS||||||true||||||


<p>
	An unbounded triangular grid is a plane covered by equilateral triangles:
</p>
<img src="http://www.spoj.pl/content/adrian:rhomb1.png" alt="rhombs"/>
<p>
	Two neighboring triangles in the grid form a rhomb. There are 3 types of such 
	rhombs:
</p>
<img src="http://www.spoj.pl/content/adrian:rhomb2.png" alt="rhombs"/>
<p>
	A grid polygon is a simple polygon which sides consist entirely of sides of 
	triangles in the grid. We say that a grid polygon is rhombastic if it can be 
	partitioned into internally disjoint rhombs of types A, B and C.
</p>
<p>
	As an example let's consider the following grid hexagon:
</p>
<img src="http://www.spoj.pl/content/adrian:rhomb3.png" alt="rhombs"/>
<p>
	This hexagon can be partitioned into 4 rhombs of type A, 4 rhombs of type B and 
	4 rhombs of type C:
</p>
<img src="http://www.spoj.pl/content/adrian:rhomb4.png" alt="rhombs"/>
<p>
	For a given rhombastic grid polygon P compute the numbers of rhombs of types A, 
	B and C in some correct partition.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads a description of a rhombastic grid polygon from the standard input,
		<li>
		computes the numbers of rhombs of types A, B and C in some correct partition of 
		the polygon,
		<li>
			writes the results to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains an integer n (3 &lt;= n 
	&lt;= 50000) - the number of sides of a rhombastic grid polygon. Each of the 
	next n lines contains a description of one side of the polygon. The sides are 
	given one by one in the clockwise order. No two consecutive sides of the 
	polygon lie on the same straight line. The description of a side consists of 
	two integers d and k. Integer d says what is the direction of the side 
	according to the following figure:
</p>
<img src="http://www.spoj.pl/content/adrian:rhomb5.png" alt="rhombs"/>
<p>
	Integer k is the length of the polygon side measured in the number of sides of 
	grid triangles. Sum of all numbers k is not larger than 100000.
</p>

*******OutputConstraints*******

<p>
	For each test case the first and only line of the output contains three 
	integers separated by single spaces denoting the number of rhombs of type A, B 
	and C respectively, in some partition of the input polygon.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
6 
1 2 
2 2 
3 2 
4 2 
5 2 
6 2 

<b><tt>Sample output:</tt></b>
4 4 4
</pre>



______________________________________________________
SERVERS||||||true||||||


<p>
	The Kingdom of Byteland decided to develop a large computer network of servers 
	offering various services.
</p>
<p>
	The network is built of n servers connected by bidirectional wires. Two servers 
	can be directly connected by at most one wire. Each server can be directly 
	connected to at most 10 other servers and every two servers are connected with 
	some path in the network. Each wire has a fixed positive data transmission time 
	measured in milliseconds. The distance (in milliseconds) D(V, W) between two 
	servers V and W is defined as the length of the shortest (transmission 
	time-wise) path connecting V and W in the network. For convenience we let D(V, 
	V) = 0 for all V.
</p>
<p>
	Some servers offer more services than others. Therefore each server V is marked 
	with a natural number r(V), called a rank. The bigger the rank the more 
	powerful a server is.
</p>
<p>
	At each server, data about nearby servers should be stored. However, not all 
	servers are interesting. The data about distant servers with low ranks do not 
	have to be stored. More specifically, a server W is interesting for a server V 
	if for every server U such that D(V, U) <= D(V, W) we have r(U) <= r(W).
</p>
<p>
	For example, all servers of the maximal rank are interesting to all servers. If 
	a server V has the maximal rank, then exactly the servers of the maximal rank 
	are interesting for V . Let B(V) denote the set of servers interesting for a 
	server V.
</p>
<p>
	We want to compute the total amount of data about servers that need to be 
	stored in the network being the total sum of sizes of all sets B(V). The 
	Kingdom of Byteland wanted the data to be quite small so it built the network 
	in such a way that this sum does not exceed 30*n.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the description of a server network from the standard input,
		<li>
		computes the total amount of data about servers that need to be stored in the 
		network,
		<li>
			writes the result to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer z, the number of test cases. Then z test 
	cases follow.
</p>
<p>
	For each test case, in the first line there are two natural numbers n, m, where 
	n is the number of servers in the network (1 <= n <= 30000) and m is the 
	number of wires (1 <= m <= 5n). The numbers are separated by single 
	space.
</p>
<p>
	In the next n lines the ranks of the servers are given. Line i contains one 
	integer r<sub>i</sub> (1 <= r<sub>i</sub> <= 10) - the rank of i-th server.
</p>
<p>
	In the following m lines the wires are described. Each wire is described by 
	three numbers a, b, t (1 <= t <= 1000, 1 <= a, b <= n, 
	aA <> b), where a and b are numbers of the servers connected by the 
	wire and t is the transmission time of the wire in milliseconds.
</p>

*******OutputConstraints*******

<p>
	For each test case the output consists of a single integer equal to the total 
	amount of data about servers that need to be stored in the network.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
4 3
2
3
1
1
1 4 30
2 3 20
3 4 20

<b><tt>Sample output:</tt></b>
9</pre>
<p>
	(because B(1) = {1, 2}, B(2) = {2}, B(3) = {2, 3}, B(4) = {1, 2, 3, 4})
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SOLIT||||||true||||||


<p>
	Solitaire is a game played on an 8x8 chessboard. The rows and columns of the 
	chessboard are numbered from 1 to 8, from the top to the bottom and from left 
	to right respectively.
</p>
<p>
	There are four identical pieces on the board. In one move it is allowed to:
</p>
<div align="justify">
	<ul>
		<li>
		move a piece to an empty neighboring field (up, down, left or right),
		<li>
			jump over one neighboring piece to an empty field (up, down, left or right).</li>
	</ul>
</div>
<img src="http://www.spoj.pl/content/adrian:solitaire.png" alt="possible moves in solitaire"/>
<p>
	There are 4 moves allowed for each piece in the configuration shown above. As 
	an example let's consider a piece placed in the row 4, column 4. It can be 
	moved one row up, two rows down, one column left or two columns right.
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads two chessboard configurations from the standard input,
		<li>
		verifies whether the second one is reachable from the first one in at most 8 
		moves,
		<li>
			writes the result to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, each of two input lines contains 8 integers a<sub>1</sub>, 
	a<sub>2</sub>, ..., a<sub>8</sub> separated by single spaces and describes one 
	configuration of pieces on the chessboard. Integers a<sub>2j-1</sub> and a<sub>2j</sub>
	(1 &lt;= j &lt;= 4) describe the position of one piece - the row number and the 
	column number respectively.
</p>

*******OutputConstraints*******

<p>
	For each test case the output should contain one word for each test case - 
	`YES' if a configuration described in the second input line is reachable from 
	the configuration described in the first input line in at most 8 moves, or one 
	word `NO' otherwise.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
4 4 4 5 5 4 6 5
2 4 3 3 3 6 4 6

<b><tt>Sample output:</tt></b>
YES
</pre>



______________________________________________________
TTABLE||||||true||||||


<p>
	You are the owner of a railway system between n cities, numbered by integers 
	from 1 to n. Each train travels from the start station to the end station 
	according to a very specific timetable (always on time), not stopping anywhere 
	between. On each station a departure timetable is available. Unfortunately each 
	timetable contains only direct connections. A passenger that wants to travel 
	from city p to city q is not limited to direct connections however - he or she 
	can change trains. Each change takes zero time, but a passenger cannot change 
	from one train to the other if it departs before the first one arrives. People 
	would like to have a timetable of all optimal connections. A connection 
	departing from city p at A o'clock and arriving in city q at B o'clock is 
	called optimal if there is no connection that begins in p not sooner than at A, 
	ends in q not later than at B, and has strictly shorter travel time than the considered connection. We are only interested in connections that 
	can be completed during same day.</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the number n and departure timetable for each of n cities from the 
		standard input,
		<li>
		creates a timetable of optimal connections from city 1 to city n,
		<li>
			writes the answer to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of the input contains an integer n (2 <= n 
	<= 100000). The following lines contain n timetables for cities 1, 2, ..., n 
	respectively.
</p>
<p>
	The first line of the timetable description contains only one integer m. Each 
	of the following m lines corresponds to one position in the timetable and 
	contains: departure time A, arrival time B (A < B) and destination city 
	number t (1 <= t <= n) separated by single spaces. Departure time A and 
	arrival time B are written in format hh : mm, where hh are two digits 
	representing full hours (00 <= hh <= 23) and mm are two digits 
	representing minutes (00 <= mm <= 59). Positions in the timetable are 
	given in non-decreasing order according to the departure times. The number of 
	all positions in all timetables does not exceed 1000000.
</p>

*******OutputConstraints*******

<p>
	For each test case the first line of the output contains an integer r - the 
	number of positions in the timetable being the solution. Each of the following 
	r lines contains a departure time A and an arrival time B separated by single 
	space. The time format should be like in the input and positions in the 
	timetable should be ordered increasingly according to the departure times. If 
	there is more then one optimal connection with the same departure and arrival 
	time, your program should output just one.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
3
3
09:00 15:00 3
10:00 12:00 2
11:00 20:00 3
2
11:30 13:00 3
12:30 14:00 3
0

<b><tt>Sample output:</tt></b>
2
10:00 14:00
11:00 20:00
</pre>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
STEVE||||||true||||||


<p>
	Steve and Digit bought a box containing a number of donuts. In order to divide 
	them between themselves they play a special game that they created. The players 
	alternately take a certain, positive number of donuts from the box, but no more 
	than some fixed integer. Each player's donuts are gathered on the player's 
	side. The player that empties the box eats his donuts while the other one puts 
	his donuts back into the box and the game continues with the "loser" player 
	starting. The game goes on until all the donuts are eaten. The goal of the game 
	is to eat the most donuts. How many donuts can Steve, who starts the game, 
	count on, assuming the best strategy for both players?
</p>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads the parameters of the game from the standard input,
		<li>
		computes the number of donuts Steve can count on,
		<li>
			writes the result to the standard output.</li>
	</ul>
</div>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first and only line of the input contains exactly two 
	integers n and m separated by a single space, 1 &lt;= m &lt;= n &lt;= 100 - the 
	parameters of the game, where n is the number of donuts in the box at the 
	beginning of the game and m is the upper limit on the number of donuts to be 
	taken by one player in one move.
</p>

*******OutputConstraints*******

<p>
	For each test case the output contains exactly one integer equal to the number 
	of donuts Steve can count on.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5 2 

<b><tt>Sample output:</tt></b>
3
</pre>



______________________________________________________
PAYING||||||false||||||

<P align=justify>
There are infinitely many coin denominations in the Byteland. They have values of 2^i for i=0,1,2,... . We will say that set of coins c1,c2,...,ck is perfect when it is possible to pay every amount of money between 0 and c1+...+ck using some of them (so {4,2,2,1} is perfect while {8,1} is not). The question is - is it always possible to change given sum n into a perfect set of coins? Of course it is possible ;). Your task will be more complicated: for a sum n you should find minimal number of coins in its perfect representation.
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains one integer c<=50 - number of test cases. Then c lines follow, each of them consisting of exactly one integer n<=10^1000.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output minimal number of coins.
</P>
<H3>Example</H3>
<pre>
Input:
5
507
29
8574
233
149

Output:
14
7
21
11
10
</pre>




______________________________________________________
RENT||||||false||||||

<p>
"ABEAS Corp." is a very small company that owns a single airplane. The
customers of ABEAS Corp are large airline companies which rent the
airplane to accommodate occasional overcapacity.</p>
<p>Customers send renting orders that consist of a time interval and a
price that the customer is ready to pay for renting the airplane during
the given time period.
Orders of all the customers are known in advance. Of course, not all
orders can be accommodated and some orders have to be declined. Eugene
LAWLER, the Chief Scientific Officer of ABEAS Corp would like to
maximize the profit of the company.</p>
<p>You are requested to compute an optimal solution.
</p>
<h4>Small Example</h4>
<p>
Consider for instance the case where the company has 4 orders:</p>
<ul>
<li>Order 1 (start time 0, duration 5, price 10)</li>
<li>Order 2 (start time 3, duration 7, price 8)</li>
<li>Order 3 (start time 5, duration 9, price 7)</li>
<li>Order 4 (start time 6, duration 9, price 8)</li>
</ul>
<p>
The optimal solution consists in declining Order 2 and 3 and the gain
is 10+8 = 18.<br>
Note that the solution made of Order 1 and 3 is feasible (the airplane
is rented with no interruption from time 0 to time 14) but non-optimal.
</p>
<H3>Input</h3>
<p>
The first line of the input contains a number T &#8804; 30 that indicates the number of test cases to follow. The first line of each test case contains the number of orders n (n &#8804; 10000). In the following n lines the orders are given. Each order is described by 3 integer values: The start time of the order st (0 &#8804; st &lt; 1000000), the duration d of the order (0 &lt; d &lt; 1000000), and the price p (0 &lt; p &lt; 100000) the customer is ready to pay for this order.
</p>
<H3>Output</h3>
<P align=justify>
You are required to compute an optimal solution. For each test case your program has to write the total price paid by the airlines.
</p>
<H3>Example</h3>
<pre><b>Input:</b>
1
4
0 5 10
3 7 14
5 9 7
6 9 8
<b>Output:</b>
18
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SQDANCE||||||false||||||

<P align=justify>
You are hired by french NSA to break the RSA code used on the Pink
Card. The easiest way to do that is to factor the public modulus and
you have found the fastest algorithm to do that, except that you have
to solve a subproblem that can be modeled in the following way.
<br>
Let <img width="16" height="15" align="bottom" border="0"
src="/content/ak15:SQDANCE1.png" alt="$ cal P$"><!-- MATH
$= {p_1,p_2,...,p_n}$
-->
<img width="118" height="32" align="middle" border="0" src="/content/ak15:SQDANCE2.png"
alt="$ = {p_1,p_2,...,p_n}$"><!-- MATH
$S = {s_1,s_2,...,s_u}$
-->be
a set of prime numbers. If <img width="131" height="32" align="middle"
border="0" src="/content/ak15:SQDANCE3.png" alt="$ S = {s_1,s_2,...,s_u}$"><!-- MATH
$T = {t_1,...,t_v}$
-->
and <img width="106" height="32" align="middle" border="0"
src="/content/ak15:SQDANCE4.png" alt="$ T = {t_1,...,t_v}$"> are formed with elements
of <img width="16" height="15" align="bottom" border="0" src="/content/ak15:SQDANCE1.png"
alt="$ cal P$">, then S*T will denote the quantity
<!-- MATH
begin{displaymath}
s_1*s_2*cdot cdot cdot *s_u*t_1*t_2*cdot cdot cdot *t_v.
end{displaymath}
-->
</p>
<img width="238" height="29" align="middle"
border="0" src="/content/ak15:SQDANCE5.png"
alt="$displaystyle s_1*s_2*cdot cdot cdot *s_u*t_1*t_2*cdot cdot cdot *t_v.$">
<p>
We call relation a set of two primes p,q, where p and q are distinct
elements of <img width="16" height="15" align="bottom" border="0"
src="/content/ak15:SQDANCE1.png" alt="$ cal P$"><!-- MATH
$S_i = {p_i,q_i}$
-->.
You dispose of a collection of R
relations <img width="89" height="32" align="middle" border="0"
src="/content/ak15:SQDANCE6.png" alt="$ S_i = {p_i,q_i}$"><!-- MATH
$S_{i_1}, S_{i_2}, ..., S_{i_k}$
-->
and you are interested in finding
sequences of these, <img width="103" height="30" align="middle"
border="0" src="/content/ak15:SQDANCE7.png" alt="$ S_{i_1}, S_{i_2}, ..., S_{i_k}$">
such that
<!-- MATH
begin{displaymath}
S_{i_1}*S_{i_2}*cdot cdot cdot *S_{i_k}
end{displaymath}
-->
</p>
<img width="134" height="30" align="middle"
border="0" src="/content/ak15:SQDANCE8.png"
alt="$displaystyle S_{i_1}*S_{i_2}*cdot cdot cdot *S_{i_k}$">
<p>
is a perfect square.
</p><p>
The way you look for these squares is the following. The ultimate goal
is to count squares that appear in the process. Relations arrive one at
a time. You maintain a collection <img width="13" height="14"
align="bottom" border="0" src="/content/ak15:SQDANCE9.png" alt="$ cal C$"> of relations
that do not contain any square subproduct. This is easy: at first, <img
width="13" height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png"
alt="$ cal C$"> is empty. Then a relation arrives and <img width="13"
height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png" alt="$ cal C$">
begins to grow.
Suppose a new relation <img width="43" height="32" align="middle"
border="0" src="/content/ak15:SQDANCE10.png" alt="$ {p,q}$"> arrives. If no square
appears when adding <img width="43" height="32" align="middle"
border="0" src="/content/ak15:SQDANCE10.png" alt="$ {p,q}$"> to <img width="13"
height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png" alt="$ cal C$">,
then <img width="43" height="32" align="middle" border="0"
src="/content/ak15:SQDANCE10.png" alt="$ {p,q}$"> is added to the collection.
Otherwise, a square is about to appear, we increase the number of
squares, but we do not store this relation, hence <img width="13"
height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png" alt="$ cal C$">
keeps the desired property.
<br>
<!-- MATH
$S_1 = {2,3}$
-->Let us consider an example. First
arrives <img width="81" height="32" align="middle" border="0"
src="/content/ak15:SQDANCE11.png" alt="$ S_1 = {2,3}$"> and we put it in <img
width="13" height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png"
alt="$ cal C$"><!-- MATH
$S_2 = {5,11},S_3 = {3,7}$
-->; then
arrives <img width="173" height="32" align="middle" border="0"
src="/content/ak15:SQDANCE12.png" alt="$ S_2 = {5,11},S_3 = {3,7}$"> and they are
stored in <img width="13" height="14" align="bottom" border="0"
src="/content/ak15:SQDANCE9.png" alt="$ cal C$"><!-- MATH
$S_4 = {2,7}$
-->. Now
enters the relation <img width="81" height="32" align="middle"
border="0" src="/content/ak15:SQDANCE13.png" alt="$ S_4 = {2,7}$">. This relation
could be used to form the
square:
<!-- MATH
begin{displaymath}
S_1*S_3*S_4 = (2*3)*(3*7)*(2*7) = (2*3*7)^2.
end{displaymath}
-->
</p>
<img width="365" height="36" align="middle"
border="0" src="/content/ak15:SQDANCE14.png"
alt="$displaystyle S_1*S_3*S_4 = (2*3)*(3*7)*(2*7) = (2*3*7)^2.$">
<p>
So we count 1 and do not store <img width="21" height="30"
align="middle" border="0" src="/content/ak15:SQDANCE15.png" alt="$ S_4$"> in <img
width="13" height="14" align="bottom" border="0" src="/content/ak15:SQDANCE9.png"
alt="$ cal C$"><!-- MATH
$S_5 = {5,11}$
-->. Now we consider <img
width="89" height="32" align="middle" border="0" src="/content/ak15:SQDANCE16.png"
alt="$ S_5 = {5,11}$"> that could make a square with <img width="21"
height="30" align="middle" border="0" src="/content/ak15:SQDANCE17.png" alt="$ S_2$"><!-- MATH
$S_6 = {2,13}$
-->,
so we count 1 square more. Then <img width="89" height="32"
align="middle" border="0" src="/content/ak15:SQDANCE18.png" alt="$ S_6 = {2,13}$"> is
put into <img width="13" height="14" align="bottom" border="0"
src="/content/ak15:SQDANCE9.png" alt="$ cal C$"><!-- MATH
$S_7 = {7,13}$
-->. Now <img
width="89" height="32" align="middle" border="0" src="/content/ak15:SQDANCE19.png"
alt="$ S_7 = {7,13}$"><!-- MATH
$S_1*S_3*S_6*S_7$
--> could make
the square <img width="117" height="30" align="middle" border="0"
src="/content/ak15:SQDANCE20.png" alt="$ S_1*S_3*S_6*S_7$">. Eventually, we get 3
squares.
<br>
</div>
</p>
<H3>Input</h3>
<P align=justify>
The first line of the input contains a number T <= 30 that indicates the number of test cases to follow. Each test case begins with a line containing two integers P and R: <img
width="61" height="34" align="middle" border="0" src="/content/ak15:SQDANCE21.png"
alt="$ Ple 10^5$"> is the number of primes occurring in the test
case; R (<img width="44" height="34" align="middle" border="0"
src="/content/ak15:SQDANCE22.png" alt="$ le 10^5$">) is the number of sets of primes
that arrive. The subsequent R lines each contain two integers i and j
making a set<!-- MATH
${p_i,q_i}(1le i,jle P)$
--> <img
width="148" height="32" align="middle" border="0" src="/content/ak15:SQDANCE23.png"
alt="$ {p_i,q_i}(1le i,jle P)$">. Note that we actually do not
deal with the primes, they are irrelevant to the solution.
<br>
</p>
<H3>Output</h3>
<P align=justify>
For each test case, output the number of squares that can be formed using the preceding rules.
</p>
<H3>Example</h3>
<div align="left">
<pre><b>Input:</b>
2
6 7
1 2
3 5
2 4
1 4
3 5
1 6
4 6
2 3
1 2
1 2
1 2

<b>Output:</b>
3
2
</pre>
</div>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
HELPR2D2||||||false||||||

<P align=justify>
In Episode III of Star Wars (whose alleged title is "How I became Vader"), R2-D2 (Artoo-Detoo) is again confronted to a tedious work.
He is responsible for the loading of the republic transport starships in the fastest way. Imagine a huge space area where n starships are parked.
Each starship has a capacity of K cubic femtoparsec. Containers C<sub>i</sub> arrive one at a time with some volume v<sub>i</sub> (expressed in cubic femtoparsec).
R2-D2 wants to minimize the number of starships used for a given sequence of containers.<br>
Smart as he is, R2-D2 knows for sure that the problem is a hard one, even with the force being around.
Here is the heuristics he selected to solve his problem. Start with all starships ready to load, and numbered S<sub>0</sub>,S<sub>1</sub>,etc.
When a container C<sub>j</sub> arrives, select the starship of minimal index i that can contain C<sub>j</sub> and put it in S<sub>i</sub>.
In some sense, this heuristic minimizes the move of the container arriving before its loading.<br>
At the end of the n arrivals, R2-D2 counts the number s of starships used and he measures the total waste w of the sequence.
For i=0..s-1, the waste in starship i is given by the unused volume.<br>
Your task is to simulate the algorithm of R2-D2.
</p>
<H3>Input</h3>
<P align=justify>
The first line of the input contains a number T &#8804; 10 that indicates the number of test cases to follow.
Each test case begins with K on a line (K &#8804; 1000), followed by the number of containers in the sequence, n, on the second line (1 &#8804; n &#8804; 1000000).
There are two possible formats for the remaining lines. If it contains one integer, then this is the next v<sub>i</sub>. If it begins with the character b
(for block), it is followed by 2 integers r and v. This means that the r next containers arriving have volume v.
</p>
<H3>Output</h3>
<p>
Your program must output the number s of starships used, followed by a blank, followed by the total waste w.<br>
You can assume, that at most 100000 starships are needed, and R2-D2 has to change the starships in which the next container is loaded at most 100000 times.
</p>
<H3>Example</h3>
<pre><b>Input:</b>
2
100
3
50
25
70
100
4
50
b 2 40
20
<b>Output:</b>
2 55
2 50
</pre>


______________________________________________________
PHONY||||||false||||||

<P >
You are chief debugger for Poorly Guarded Privacy, Inc. One of the top
selling product, ReallySecureAgent&copy;, seems to have a problem with
its prime number generator. It produces from time to time bogus primes
N.
<br>
After a while, you realize that the problem is due to the way primes
are recognized.
<br>
<!-- MATH
$N = p_1 * p_2 * ... * p_k$
-->Every phony prime N you
discover can be characterized as follows. It is
odd and has distinct prime factors, say <img width="144" height="30"
align="middle" border="0" src="/content/ak15:img1.png"
alt="$ N = p_1 * p_2 * ... * p_k$"><!-- MATH
$p_ine p_j$
--> with <img
width="53" height="30" align="middle" border="0" src="/content/ak15:img2.png"
alt="$ p_ine p_j$">, where the number k of factors is at least 3.
Moreover, for all i=1..k, <img width="45" height="29" align="middle"
border="0" src="/content/ak15:img3.png" alt="$ p_i-1$"> divides N-1. For instance,
561 = 3*11*17 is a phony prime.
<br>
<!-- MATH
$[N_{min},N_{max}[$
-->Intrigued by this phenomenon, you
decide to write a program that
enumerates all such N's in a given interval <img width="92" height="32"
align="middle" border="0" src="/content/ak15:img4.png" alt="$ [N_{min},N_{max}[$"><!-- MATH
$1 le N_{min} < N_{max} < 2^31, N_{max}-N_{min} < 10^6$
-->
with <img width="313" height="34" align="middle" border="0"
src="/content/ak15:img5.gif"
alt="$ 1 le N_{min} &amp;amp;amp;amp;amp;lt; N_{max} &amp;amp;amp;amp;amp;lt; 2^31, N_{max}-N_{min} &amp;amp;amp;amp;amp;lt; 10^6$">.<br>
<b>Please note, that the source code limit for this problem is 2000 Bytes to avoid precalculated tables.</b>
</p>
<H3>Input</h3>
<P>
Each test case contains one line. On this line are written two
integers <img width="39" height="30" align="middle" border="0"
src="/content/ak15:img6.png" alt="$ N_{min}$"> and <img width="41" height="30"
align="middle" border="0" src="/content/ak15:img7.png" alt="$ N_{max}$"> separated
by a blank. The end of the input is signalled by a line containing two
zeros. The number of test cases is approximately 2000.
<br>
</p>
<H3>Output</h3>
<P>
For each test case, output the list of phony primes in increasing order, one per line. If there are no phony primes in the interval, then simply output none on a line.
</p>
<H3>Example</h3>
<div align=left>
<h4>Input:</h4>
<pre>10 2000
20000 21000
0 0
</pre>
<h4>Output:</h4>
<pre>561
1105
1729
none
</pre>
</div>


______________________________________________________
MAWORK||||||false||||||

<p>
Every morning you have to drive to your workplace. Unfortunately, roads are under constant repair. Fortunately, administration is aware that this may cause trouble and they enforce a strict rule on roadblocks: roads must be blocked only half of the time. However, contractors are free to schedule their working hours, still they must follow regulations:
</p>
<ul>
<li>Working periods (when the road is blocked) and rest periods (when the road is open) must alternate and be of fixed length.</li>
<li>The beginning of the day (time zero) must coincide with the beginning of a period.</li>
</ul>
<p>
Write a program that, given a description of the road network and of contractors schedules outputs the minimal time needed to drive from home to work.
</p>
<H3>Input</h3>
<p>
The first line of the input contains a number T &le; 10 that indicates the number of test cases to follow.
The road network is represented on a N x N grid and the first line of each test case consists in the number N, 2 &le; N &le; 25. </p>
<p>Then follows N lines of N characters that represent the road network at time zero. Those lines are made of "." (standing for open road) and "*" (standing for roadblock) and they encode the rows of the grid in increasing order, while columns are also presented in increasing order. Conventionally, your home is at the position first row, first column, while your workplace is at the position last row, last column. Furthermore, you leave home at time t=0, that is, your starting position is first row, first column at time zero.</p>
<p>At a given time t, your car must be on some "open road" cell. It takes one time unit to drive to any of the four adjacent cells heading toward north, south, west or east, and you may also choose to stay on the same cell for one time unit. Of course, those five moves are valid if and only if the target cell exists and is free at time t+1.</p>
<p>Finally comes N lines of N characters that represent the contractors schedules. Those lines match the ones of the grid description and are made of N characters 0,1,...,9 that specify the duration of the working (and rest) period for a given cell. Observe that 0 is a bit special, since it means that the corresponding cell status does not change.
</p>
<H3>Output</h3>
<p>
The output consist in a single line for each test case, holding either the requested time, or NO, if driving from home to work is not possible.
</p>
<H3>Example</h3>
<div align=left>
<h4>Input:</h4>
<pre>2
10
.*********
........**
*.******.*
*.******.*
*.******.*
*........*
*.******.*
*.******.*
*........*
********..
0000000000
0000000000
0000000000
0000000000
0000000000
0123456780
0000000000
0000000000
0123456780
0000000000
3
...
**.
**.
021
002
000
</pre>
<h4>Output:</h4>
<pre>34
NO
</pre>
</div>


______________________________________________________
TRANS||||||true||||||


<p>
	You are given two short sequences of numbers, X and Y. Try to determine the 
	minimum number of steps of transformation required to convert sequence X into 
	sequence Y, or determine that such a conversion is impossible.
</p>
<p>
	In every step of transformation of a sequence, you are allowed to replace 
	exactly one occerunce of one of its elements by a sequence of 2 
	or 3 numbers inserted in its place, according to a rule specified in the input 
	file.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line of input contains four integers - N, M, U, V 
	(1<=N,M<=50). The next two lines of input contain sequences X and Y, 
	consisting of N and M integers respectively. The next U lines contain three 
	integers: <i>a b c</i> each, signifying that integer <i>a</i> can be converted 
	to the sequence <i>b c</i> in one step of transformation. The next V-U lines 
	contain four integers: <i>a b c d</i> each, signifying that integer <i>a</i> can 
	be converted to the sequence <i>b c d</i> in one step of transformation. With 
	the exception of N and M, all integers provided at input are positive and do 
	not exceed 30.
</p>
<p>
	The format of one set of input data is illustrated below.<br>
	<img src="http://www.spoj.pl/content/adrian:TRANS.png"/>
</p>

*******OutputConstraints*******

<p>For each test case output -1 if it is impossible to convert sequence X into 
	sequence Y, or the minimum number of steps required to achieve this conversion 
	otherwise.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
3 10 2 3
2 3 1
2 1 1 2 2 1 2 1 2 1
3 1 2
3 3 3
3 1 3 2

<b><tt>Sample output:</tt></b>
6
</pre>



______________________________________________________
PARTIT||||||true||||||


<p>
	A <i>partition</i> of positive integer m into n components is any sequence a<sub>1</sub>,...,a<sub>n</sub>
	of positive integers such that a<sub>1</sub>+...+a<sub>n</sub>=m and a<sub>1</sub>&lt;=a<sub>2</sub>&lt;=...&lt;=a<sub>n</sub>. 
	Your task is to determine the partition, which occupies the k-th position in 
	the lexicographic order of all partitions of m into n components.
</p>
<p>
	The lexicographic order is defined as follows: sequence a<sub>1</sub>,...,a<sub>n</sub>
	comes before b<sub>1</sub>,...,b<sub>n</sub> iff there exists such an integer 
	i,1&lt;=i&lt;=n, that a<sub>j</sub>=b<sub>j</sub>
	for all j, 1&lt;= j&lt; i, and a<sub>i</sub>&lt; b<sub>i</sub>.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the input consists of three lines, containing the positive 
	integers m, n and k respectively (1&lt;=n&lt;= 10, 1&lt;= m&lt;=220, k is not 
	larger than the number of partitions of m into n components).
</p>

*******OutputConstraints*******

<p>
	For each test case output the ordered elements of the sought partition, 
	separated by spaces.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
9
4
3

<b><tt>Sample output:</tt></b>
1 1 3 4
</pre>



______________________________________________________
POSTERS||||||true||||||


<p>
	A parliamentary election was being held in Byteland. Its enterprising and 
	orderly citizens decided to limit the entire election campaign to a single 
	dedicated wall, so as not to ruin the panorama with countless posters and 
	billboards. Every politician was allowed to hang exactly one poster on the 
	wall. All posters extend from top to bottom, but are hung at different points 
	of the wall, and may be of different width. The wall is divided horizontally 
	into sections, and a poster completely occupies two or more adjacent sections.
</p>
<p>
	With time, some of the posters were covered (partially or completely) by those 
	of other politicians. Knowing the location of all the posters and the order in 
	which they were hung, determine how many posters have at least one visible section in the end.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	Each test case begins with a line containing integer n - the number of 
	posters (1&lt;=n&lt;=40000). Then n lines follow, the i-th (1&lt;=i&lt;=n) 
	containing exactly two integers l<sub>i</sub> r<sub>i</sub>, denoting the 
	numbers of the leftmost and rightmost sections covered by the i-th poster 
	(1&lt;=l<sub>i</sub>&lt; r<sub>i</sub>&lt;= 10<sup>7</sup>). The input order 
	corresponds to the order of hanging posters.
</p>

*******OutputConstraints*******

<p>
	For each test case output a line containing one integer&nbsp;- the number of 
	posters with visible sections.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5
1 4
2 6
8 10
3 4
7 10

<b><tt>Sample output:</tt></b>
4
</pre>
<p>
	An illustration of the sample input is given below.<br>
	<br>
	<img src="http://www.spoj.pl/content/adrian:sampleio.png" alt="The wall with posters">
</p>



______________________________________________________
MAZE||||||true||||||


<p>
	Consider a maze consisting of 3 rows of n square blocks each. The passageways 
	in every block match one of three possible patterns, numbered 0 (empty), 1 
	(straight) and 2 (bent), as depicted below.
</p>
<img src="http://www.spoj.pl/content/adrian:pattern.png" alt="Illustration of possible patterns">
<p>
	Your task is to determine whether it is possible to create a passage in a given 
	maze, with an entrance at the left end and an outlet at the right end of the 
	maze, only by rotating some of the squares of the maze by a multiple of 90 
	degrees.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	Each test case begins with a line containing a single integer n - the number of 
	squares in one row of the maze (1&lt;= n &lt;= 200000). The next n lines 
	contain three integers each, denoting the types of blocks in consecutive 
	columns of the maze. A column description is of the form <i>a b c</i> (0&lt;=<i>a,b,c</i>&lt;=2), 
	where <i>a</i> represents the type of the block in the first row, <i>b</i> - in 
	the second row and <i>c</i> - in the third row.
</p>

*******OutputConstraints*******

<p>
	For each test case output the word
	<tt>yes</tt>
	if it is possible to rotate the squares so as to form a connection between the 
	left and right edge, and the word
	<tt>no</tt>
in the opposite case.
<P></P>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
6
1 0 1
1 2 2
2 2 1
2 2 1
2 2 1
1 2 2

<b><tt>Sample output:</tt></b>
yes
</pre>
<p>Indeed, the sample input corresponds to the following maze:<br>
	<img src="http://www.spoj.pl/content/adrian:input.png" alt="Input illustration"><br><br>
	for which there exists a correct solution to the problem:<br>
	<img src="http://www.spoj.pl/content/adrian:output.png" alt="Illustration of the solution">
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
LONER||||||true||||||


<P>
	<i>The loner</i> is a one-dimensional board game for a single player. The board 
	is composed of squares arranged in a single line, some of which initially have 
	pawns on them. The player makes a move by jumping with a pawn over a pawn on an 
	adjacent field, to an empty square two fields to the right or left of its 
	initial position. The pawn that was jumped over is removed directly after the 
	move, as illustrated below.
</p>
	<img src="http://www.spoj.pl/content/adrian:move.png" alt="The two acceptable types of moves">
<p>
	The game is considered won if exactly one pawn remains on the gaming board, and is lost if the player cannot make a move.
</p>
<p>
	Given the initial state of the gaming board, your task is to determine whether 
	it is possible for the player to win the game.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	Each test cases begins with the positive integer n &lt;= 32000, denoting the 
	size of the gaming board. The second and last line of the test case description 
	contains a sequence of n characters 0 or 1, without any white spaces. The i-th 
	square of the board is occupied by a pawn at the start of the game iff the i-th 
	character of this sequence is 1.
</p>

*******OutputConstraints*******

<p>
	For each test case output the word <tt>yes</tt> if it is possible for the 
	player to win the game for the presented starting configuration, or the word <tt>no</tt>
	in the opposite case.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2
7
0110011
6
111001

<b><tt>Sample output:</tt></b>
yes
no
</pre>



______________________________________________________
GLUE||||||true||||||


<p>
	Little Johnny decided he needed to stick an open metal box to the floor in the 
	hall of his parents' house, so that all guests coming in would trip on it. He 
	knew that as soon as his parents saw what he had done, they would try to remove 
	it, and he wasn't going to stand for this. So, he chose the strongest glue in his 
	possession and left lots of dabs of it on the floor (from our point of view, 
	these can be regarded as points). Now, the only question that remained was how 
	to stick the box onto the floor. Johnny is very particular about the way he 
	does this: the box is always stuck face down, so that it only touches the floor 
	on the four edges of the rectangle that forms its base. He would like each of 
	these edges to make contact with at least two dabs of glue. Furthermore, he 
	doesn't want any of the dabs to stay outside the box, since this would ruin the 
	fun (there is no way you can trip someone up, if you've glued them to the 
	floor, is there?).
</p>
<p>
	Obviously, Johnny can sometimes reach his objective in more than one way 
	(especially since he has prepared boxes of all possible dimensions for his act 
	of mischief). Depending on how he does this, a different section of floor will 
	be covered by the box. Determine in how many ways Johnny can choose the section 
	of floor to be covered by the box when gluing.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	The first line of each test case contains positive integer n&lt;=10000 
	- the number of dabs of glue on the floor. The next n lines contain two 
	integers, x y (-15000&lt;=x,y&lt;=15000), representing the x and y coordinates 
	of the dabs (given in the order in which they were placed by Johnny ;).
</p>

*******OutputConstraints*******

<p>
	For each test case output the number of different sections of floor Johnny may 
	choose to cover (possibly 0).
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1 
8 
1 0 
1 4 
0 3 
5 4 
5 0 
6 1 
6 3 
0 1 

<b><tt>Sample output:</tt></b>
2
</pre>



______________________________________________________
ALIENS||||||false||||||

<P align=justify>
Aliens visited our planet with an obvious intention to find some new species for their space zoo. After entering Earth's orbit, they positioned themselves over the town of Belgrade, having detected some life-form activity on the ground. As they approached the surface, they saw a group of half-intelligent beings. Those creatures were actually competitors of the Balkan Olympiad in Informatics who were enjoying the excursion after intense contest. Aliens want to abduct all n (2<=n<=100000) competitors since they are very compassionate, and don&#8217;t want their creatures to feel lonely in the space zoo.<br>
Aliens use tractor beam to take their prey. Tractor beam works in the following way: it projects a circle-shaped beam from the spacecraft to the ground vertically beneath it, and all beings that are found in that circle or on its boundary are taken. Projecting the tractor beam needs a certain amount of energy to be spent. As the radius of the tractor beam (radius of the circle on the ground) increases, more and more energy is required. Although extremely intelligent, aliens are much more advanced in social sciences than in programming. That&#8217;s why they are asking you to help them find the position of their spacecraft so that the energy required to take all of the n competitors is minimal.<br>
Help our alien brothers! Write a program that will find the required minimal radius of tractor beam that contains all n competitors and the optimal spacecraft location - which is the same as the center of the circle on the ground.
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains one integer c<=20 - number of test cases. Each test case begins with number n (2<=n<=100000). Then n lines follow and i-th of them contains two real numbers xi and yi (-10000.0<=xi,yi<=10000.0) representing coordinates of the i-th competitor.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output radius of the tractor beam and coordinates of the spacecraft. Numbers should be rounded to two decimal places.
</P>
<H3>Example</H3>
<pre>
Input:
1
6
8.0 9.0
4.0 7.5
1.0 2.0
5.1 8.7
9.0 2.0
4.5 1.0

Output:
5.00
5.00 5.00
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
MULTIPLY||||||false||||||

<P align=justify>
After trying to solve Problem Number 31 (Fast Multiplication) with some script languages that support arbitrary large integers and timing out, you wonder what would be the best language to do fast multiplication of integers.
And naturally it comes to your mind: Of course it is brainf**k, because there are only very cheap operations in that language.
</P>
<H3>Input</H3>
<P align=justify>
Two positive integers, ended with a line feed (ASCII 10) each.
</P>
<H3>Output</H3>
<P align=justify>
The product of the two integers, terminated by a line feed. You may assume that this number will be less than 10000.
</P>
<H3>Example</H3>
<pre>
Input:
1
2

Output:
2
</pre>



______________________________________________________
TAUT||||||true||||||


<p>
Write a program that checks if the given logical expression is a tautology. The logical expression is a tautology if it is always true, regardless of logical value of its variables.
</p>


*******InputConstraints*******

<p>
On the first line there is the number of expressions to check (at most 35). The expression is in a prefix notation, that means that operator precedes its arguments. The following logical operators will be used:
</p>
<pre>
C - and 
D - or
I - implies
E - if, and only if
N - not
</pre>
<p>
The variables will be lowercase letters (a-z). There will be no more than 16 different letters in the expression. The length of the expression will not exceed 111 characters. 
</p>


*******OutputConstraints*******

<p>
For each expression write one word: YES if it is a tautology, NO in other case.
</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
7
IIpqDpNp
NCNpp
Iaz
NNNNNNNp
IIqrIIpqIpr
Ipp
Ezz


<b><tt>Sample output:</tt></b>
YES
YES
NO
NO
YES
YES
YES
</pre>



______________________________________________________
MLAND||||||true||||||


<p>
	With every year, the plans for the construction of motorways in Poland are more 
	and more advanced. For some time, it seemed as if the building was actually 
	going to start, so the question of purchasing the land under the roads was of 
	some importance. Only certain cities can be connected by a road directly, 
	provided the farmer owning the land under it agrees to sell out. As a result of 
	the constant swing of moods, the price demanded for the land by each farmer 
	changes in a linear fashion, with possibly different coefficients for every 
	road. It may either increase or decrease (and sometimes even be negative, if 
	the owner anticipates future profit from the proximity of a motorway).
</p>
<p>
	It has been decided that the purchase of land will be made at some moment in 
	between two fixed dates. At that moment, the current prices of land will be 
	frozen, and the least costly configuration of bidirectional roads connecting 
	all cities (directly or indirectly) will be chosen. All the land under the 
	selected roads will subsequently be bought at the frozen price. Since business in the proximity of a motorway does have its advantages, some land owners might actually want their land to be bought and they may offer money into the bargain, consequently making the price of purchase negative.
</p>
<p>
	You act as an intermediary for the purchase and charge a steady commission, 
	proportional to the total sum of purchase. Oddly enough, when signing the contract you missed the clause about the possibility of the price being negative and now you begin to wonder whether you won't end up being charged for your own hard work. Since it is one of your tasks to 
	select the moment of purchase, do so in such a way as to maximise your profit (if this is impossible, at least cut your losses as much as possible).
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line contains two integers n m, denoting the 
	number of cities to be connected and the number of available potential 
	roads,respectively(1<=n<= 120,1<=m<=820). The next line contains 
	two integers t<sub>1</sub> t<sub>2</sub>, which stand for the earliest possible 
	and latest possible moments of purchase (-10000<=t<sub>1</sub><=t<sub>2</sub><=10000). 
	Each of the following m lines contains four integers, the i-th being: u<sub>i</sub>
	v<sub>i</sub> a<sub>i</sub> b<sub>i</sub>, which means that the i-th road 
	connects city u<sub>i</sub> with city v<sub>i</sub>, and the purchase of the 
	land under it costs b<sub>i</sub>+j*a<sub>i</sub> units of 
	currency at moment j</sub> (e.g. at moment 0 the land costs b<sub>i</sub>
	units). Please note that these integers are chosen from the following ranges: 
	0<=u<sub>i</sub>,v<sub>i</sub><=n-1, -32000<=a<sub>i</sub>,b<sub>i</sub><=32000.
</p>

*******OutputConstraints*******

<p>
	For each test case output a line with two floating point numbers, accurate to 
	three digits after the decimal point. The first represents the moment of 
	transaction you ought to choose, the second - the total value of the 
	transaction at that moment. If more than one moment fulfills the conditions of the problem, choose the earliest.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2
5 6
0 5
1 0 -6 -4
2 0 3 -3
3 0 1 5
3 1 -2 -3
4 1 -3 -2
4 3 -2 -3
5 7
-20 20
1 0 1 2
2 1 -7 4
3 1 -9 0
3 2 4 9
4 1 0 -2
4 2 2 3
4 3 6 -5

<b><tt>Sample output:</tt></b>
0.000 -13.000
0.111 -1.000
</pre>



______________________________________________________
FSHEEP||||||true||||||


<p>A shepherd is having some trouble penning in his flock of sheep. After several 
	hours of ineffectual efforts he gives up, with some of the sheep within their 
	polygon-shaped pen and some outside. Exhausted, he moves to a place within the 
	pen from which he can see the whole interior of the pen (without any fence 
	getting in the way) and begins to count the sheep which are within it. Please 
	assist him in his task.
</p>

*******InputConstraints*******

<p>The input begins with the integer t, the number of test cases. Then t test cases 
	follow.
</p>
<p>The first line of each test case contains two integers n m, denoting the number 
	of vertices of the polygon forming the fence, and the number of sheep in the 
	whole herd (3<=n<=100000, 0<=m<=100000). The next n lines contain 
	two integers each, the i-th being x<sub>i</sub> y<sub>i</sub> - the x and y 
	coordinates of the i-th vertex of the fence (given in anti-clockwise order, 
	-32000<=x<sub>i</sub>,y<sub>i</sub><=32000). The next m lines contain two 
	integers each, the j-th being x<sub>j</sub> y<sub>j</sub> - the x and y 
	coordinates of the j-th sheep (arranged in decreasing order of seniority, 
	-32000<=x<sub>j</sub>,y<sub>j</sub><=32000). The shepherd's observation 
	point is within the pen and has coordinates (0,0).
</p>

*******OutputConstraints*******

<p>For each test case output a line with a single integer - the number of sheep 
	within the pen. The sheep which are sitting back on the fence and enjoying a 
	cigarette should be included in the count.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</TT></B>
1
6 5
2 2
4 4
6 6
-3 1
-1 -1
5 1
2 1
3 2
6 6
3 3
-3 0

<b><tt>Sample output:</tt></b>
3
</pre>
<p>Illustration of the sample test data:<br>
	<br>
	<img src="http://www.spoj.pl/content/adrian:sheep.png" alt="The sheep with their shepherd">
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
PLONK||||||true||||||


<p>
	Consider a city bounded by a square, whose n horizontal and n vertical streets 
	divide it into (n+1)<sup>2</sup> square blocks. However, in tribute to the 
	ancient traditions of the first dwellers (who tended to overindulge in 
	alcohol), all the inhabitants live at crossroads. A group of friends would like 
	to meet for an evening of merriment at the place of residence of one of them. 
	With a good deal of foresight, anticipating the difficulties they might have 
	getting back to their respective homes, they would like to meet in the house of 
	the friend which minimises the total walking distance for all of them. Assume 
	that everybody walks along the streets, turning only at crossroads, and the 
	distance between&nbsp;any pair of&nbsp;adjacent crossroads is 1.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line of input contains the integer n - the number 
	of friends who want to meet (1&lt;=n&lt;=10000). The next n lines contain two 
	integers each, the i-th being x<sub>i</sub> y<sub>i</sub>, standing for the x 
	and y coordinates of the crossroads at which the i-th friend lives (0&lt;=x<sub>i</sub>,y<sub>i</sub>&lt;=100000).
</p>

*******OutputConstraints*******

<p>
	For each test case output the total distance covered by all friends when 
	walking to the meeting place.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
7
1 3
3 2
3 5
6 9
10 1
12 4
5 7

<b><tt>Sample output:</tt></b>
39
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
COURIER||||||true||||||


<p>
	Byteland is a scarcely populated country, and residents of different cities 
	seldom communicate with each other. There is no regular postal service and 
	throughout most of the year a one-man courier establishment suffices to 
	transport all freight. However, on Christmas Day there is somewhat more work 
	for the courier than usual, and since he can only transport one parcel at a 
	time on his bicycle, he finds himself riding back and forth among the cities of 
	Byteland.
</p>
<p>
	The courier needs to schedule a route which would allow him to leave his home 
	city, perform the individual orders in arbitrary order (i.e. travel to the city 
	of the sender and transport the parcel to the city of the recipient, carrying 
	no more than one parcel at a time), and finally return home. All roads are 
	bi-directional, but not all cities are connected by roads directly; some pairs 
	of cities may be connected by more than one road. Knowing the lengths of all 
	the roads and the errands to be performed, determine the length of the shortest 
	possible cycling route for the courier.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	Each test case begins with a line containing three integers: n m b, denoting 
	the number of cities in Byteland, the number of roads, and the number of 
	the courier's home city, respectively (1<=n<=100,1<=b<=m<=10000). The 
	next m lines contain three integers each, the i-th being u<sub>i</sub> v<sub>i</sub>
	d<sub>i</sub>, which means that cities u<sub>i</sub> and v<sub>i</sub> are 
	connected by a road of length d<sub>i</sub> (1<=u<sub>i</sub>,v<sub>i</sub><=100, 
	1<=d<sub>i</sub><= 10000). The following line contains integer z - the 
	number of transport requests the courier has received (1<=z<=5). After that, z 
	lines with the description of the orders follow. Each consists of three 
	integers, the j-th being u<sub>j</sub> v<sub>j</sub> b<sub>j</sub>, which 
	signifies that b<sub>j</sub> parcels should be transported (individually) from 
	city u<sub>j</sub> to city v<sub>j</sub>. The sum of all b<sub>j</sub> does not 
	exceed 12.
</p>

*******OutputConstraints*******

<p>
	For each test case output a line with a single integer - the length of the 
	shortest possible bicycle route for the courier.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5 7 2
1 2 7
1 3 5
1 5 2
2 4 10
2 5 1
3 4 3
3 5 4
3
1 4 2
5 3 1
5 1 1

<b><tt>Sample output:</tt></b>
43
</pre>



______________________________________________________
SCALES||||||true||||||


<p>
	You are given scales for weighing loads. On the left side lies a single stone 
	of known weight W<2<sup>N</sup>. You own a set of N different weights, 
	weighing 1, 2, 4, ..., 2<sup>N-1</sup> units of mass respectively. Determine 
	how many possible ways there are of placing some weights on the sides 
	of the scales, so as to balance them (put them in a state of equilibrium). 
	Output this value modulo a small integer D.
</p>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line contains three integers: N L D, where N 
	denotes the number of weights at your disposal, L is the length of the binary 
	representation of number W, and D is the modulus (1<= L<= N<= 1000000, 
	2<= D<=100). The second line contains the value of W, encoded in the 
	binary system as a sequence of exactly L characters 0 or 1 without separating 
	spaces.
</p>

*******OutputConstraints*******

<p>
	For each test case, output a single line containing one integer - the calculated number of possible 
	weight placements, modulo D.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2
6 4 6
1000
6 6 100
100110

<b><tt>Sample output:</tt></b>
3
5
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
ROCK||||||true||||||


<p>
	A manufacturer of sweets has started production of a new type of 
	sweet called <EM>rock</EM>. Rock comes in sticks composed of  
	one-centimetre-long segments, some of which are sweet, and the rest are sour. 
	Before sale, the rock is broken up into smaller pieces by splitting it at the 
	connections of some segments.
</p>
<P>Today's children are very particular about what they eat, and they will only buy 
	a piece of rock if it contains more sweet segments than sour ones. Try to 
	determine the total length of rock which can be sold after breaking 
	up the rock in the best possible way.
</P>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case, the first line of input contains one integer N - the length 
	of the stick in centimetres (1&lt;=N&lt;=200). The next line is a sequence of N 
	characters '0' or '1', describing the segments of the stick from the left end 
	to the right end ('0' denotes a sour segment, '1' - a sweet one).
</p>

*******OutputConstraints*******

<p>
	For each test case output a line with a single integer: the total length of 
	rock that can be sold after breaking up the rock in the best possible way.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
2
15
100110001010001
16
0010111101100000

<b><tt>Sample output:</tt></b>
9
13
</pre>



______________________________________________________
PALSEC||||||true||||||


<P>Given two sequences of words: X=(x<SUB>1</SUB>,...,x<SUB>n</SUB>) and Y=(y<SUB>1</SUB>,...,y<SUB>n</SUB>), determine how many binary sequences P=(p<SUB>1</SUB>,...,p<SUB>n</SUB>) exist, such 
	that the word concatenation z<SUB>1</SUB>z<SUB>2</SUB>...z<SUB>n</SUB>, where z<SUB>i</SUB>=x<SUB>i</SUB> iff p<SUB>i</SUB>=1 and z<SUB>i</SUB>=y<SUB>i</SUB> iff p<SUB>i</SUB>=0,
	is a palindrome (a word which is the same when read from left to right and from 
	right to left).
</P>

*******InputConstraints*******

<p>
	The input begins with the integer t, the number of test cases. Then t test 
	cases follow.
</p>
<p>
	For each test case the first line contains the positive integer n - the number 
	of words in a sequence (1&lt;=n&lt;=30). The following n lines contain 
	consecutive words of the sequence X, one word per line. The next n lines 
	contain consecutive words of the sequence Y, one word per line. Words consist 
	of lower case letters of the alphabet ('a' to 'z'), are non-empty, and not 
	longer than 400 characters.
</p>

*******OutputConstraints*******

<p>
	For each test case output one line containing a single integer - the number of 
	different possible sequences P.
</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5
ab
a
a
ab
a
a
baaaa
a
a
ba

<b><tt>Sample output:</tt></b>
12
</pre>



______________________________________________________
PAINTTMP||||||true||||||


<p align="justify">The Painter's Studio is preparing mass production of paintings. Paintings are going to be made with aid of square matrices of various sizes. A matrix of size <i>i</i> consists of 2<i><sup>i</sup></i> rows and 2<i><sup>i</sup></i> columns. There are holes on intersections of some rows and columns. Matrix of size 0 has one hole. For <i>i</i> &gt; 0, matrix of size <i>i</i> is built of four squares of size 2<sup>(</sup><i><sup>i</sup></i><sup>-1)</sup>*2<sup>(</sup><i><sup>i</sup></i><sup>-1)</sup>. Look at the following figure:</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:malrys1.gif" /></p>
<p align="justify">Both squares on the right side and the bottom-left square are matrices of size <i>i</i>-1. Top-left square has no holes. Pictures are constructed in the following way. First, we fix three non-negative integers <i>n</i>, <i>x</i>, <i>y</i>. Next, we take two matrices of size <i>n</i>, place one of them onto the other and shift the upper one <i>x</i> columns right and <i>y</i> rows up. We place such a pattern on a white canvas and cover the common part of matrices with the yellow paint. In this way we get yellow stains on the canvas in the places where the holes in both matrices agree.</p>

<h3>Example</h3>
<p align="justify">Consider two matrices of size 2.</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:malrys2.jpg" /></p>
<p align="justify">The upper matrix was shifted 2 columns right and 2 rows up. There are three places where holes agree.</p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the sizes of two matrices and the numbers of columns and rows that the upper matrix should be shifted by, from the standard input;</li>
        <li align="justify">computes the number of yellow stains on the canvas;</li>
        <li align="justify">writes the result to the standard output.</li>
</ul>
</div>

*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line</p>
<p align="justify">There is one integer <i>n</i>, 0 &lt;= <i>n</i> &lt;= 100 in the first line of each test case. This number is the size of matrices used for production of paintings. In the second line there is one integer <i>x</i> and in the third line one integer <i>y</i>, where 0 &lt;= <i>x</i>,<i>y</i> &lt;= 2<i><sup>n</sup></i>. The integer <i>x</i> is the number of columns and <i>y</i> is the number of rows that the upper matrix should be shifted by.</p>


*******OutputConstraints*******

<p align="justify">For each test case your program should produce one line with exactly one integer - the number of stains on the canvas.</p>


*******IOTestCases*******

<p align="justify">Consider two matrices of size 2.</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:malrys2.jpg" /></p>
<p align="justify">The upper matrix was shifted 2 columns right and 2 rows up. There are three places where holes agree.</p>


______________________________________________________
POLY1||||||true||||||


<p align="justify">We say that two triangles intersect if their interiors have at least one common point. A polygon is called convex if every segment connecting any two of its points is contained in this polygon. A triangle whose vertices are also vertices of a convex polygon is called an elementary triangle of this polygon. A triangulation of a convex polygon is a set of elementary triangles of this polygon, such that no two triangles from the set intersect and a union of all triangles covers the polygon. We are given a polygon and its triangulation. What is the maximal number of triangles in this triangulation that can be intersected by an elementary triangle of this polygon?</p>

<h3>Example</h3>
<p align="justify">Consider the following triangulation:</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:wierys.png" /></p>
<p align="justify">The elementary triangle (1,3,5) intersects all the triangles in this triangulation.</p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align>
        <li>reads the number of vertices of a polygon and its triangulation; </li>
        <li>computes the maximal number of triangles intersected by an elementary triangle of the given polygon; </li>
        <li>writes the result to standard output.</li>
</ul>
</div>

*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line</p>
<p align="justify">In the first line of a test case there is a number <i>n</i>, 3 &lt;= <i>n</i> &lt;= 1000, which equals the number of vertices of the polygon. The vertices of the polygon are numbered from 0 to <i>n</i>-1 clockwise. The following <i>n</i>-2 lines describe the triangles in the triangulation. There are three integers separated by single spaces in the (<i>i</i>+1)-st line, where 1 &lt;= <i>i</i> &lt;= <i>n</i>-2. These are the numbers of the vertices of the <i>i</i>-th triangle in the triangulation. </p>


*******OutputConstraints*******

<p align="justify">For each test case your program should produce one line with exactly one integer - the maximal number of triangles in the triangulation, that can be intersected by a single elementary triangle of the input polygon. </p>


*******IOTestCases*******

<p align="justify">Consider the following triangulation:</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:wierys.png" /></p>
<p align="justify">The elementary triangle (1,3,5) intersects all the triangles in this triangulation.</p>


______________________________________________________
SUM1SEQ||||||true||||||


<p align="justify">We say that a sequence of integers is a one-sequence if the difference between any two consecutive numbers in this sequence is 1 or -1 and its first element is 0. More precisely: [<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, ..., <i>a<sub>n</sub></i>] is a one-sequence if

<div align="justify"><ul>
        <li align="justify">for any <i>k</i>, such that 1 &lt;= <i>k</i> &lt; <i>n</i> : |<i>a<sub>k</sub></i> - <i>a<sub>k</sub></i><sub>+1</sub>| = 1 and </li>
        <li align="justify"><i>a</i><sub>1</sub> = 0 </li>
</ul>
</div>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads two integers describing the length of the sequence and the sum of its elements; </li>
        <li align="justify">finds a one-sequence of the given length whose elements sum up to the given value or states that such a sequence does not exist; </li>
        <li align="justify">writes the result to the standard output.</li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there is a number <i>n</i>, such that 1 &lt;= <i>n</i> &lt;= 10 000, which is the number of elements in the sequence. In the second line there is a number <i>S</i>, which is the sum of the elements of the sequence, such that |<i>S</i>| &lt;= 50 000 000. </p>


*******OutputConstraints*******

<p align="justify">For each test case there should be written <i>n</i> integers (each integer in a separate line) that are the elements of the sequence (<i>k</i>-th element in the <i>k</i>-th line) whose sum is <i>S</i> or the word "No" if such a sequence does not exist. If there is more than one solution your program should output any one.</p>
<p align="justify">Consequent test cases should by separated by an empty line.</p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
8
4

<b><tt>Sample output:</tt></b>
0
1
2
1
0
-1
0
1
</pre>


______________________________________________________
ABWORDS||||||true||||||


<p align="justify">Every sequence of small letters a and b (also the empty sequence) is called an ab-word. If <i>X</i> = [<i>x</i><sub>1</sub>, ..., <i>x</i><i><sub>n</sub></i>] is an ab-word and <i>i</i>, <i>j</i> are integers such that 1 <= <i>i</i> <= <i>j</i> <= <i>n</i> then <i>X</i>[<i>i</i>..<i>j</i>] denotes the subword of <i>X</i> consisting of the letters <i>x</i><i><sub>i</sub></i>, ..., <i>x</i><i><sub>j</sub></i>. We say that an ab-word <i>X</i> = [<i>x</i><sub>1</sub>..<i>x</i><i><sub>n</sub></i>] is nice if it has as many letters a as b and for all <i>i</i> = 1, ..., <i>n</i> the subword <i>X</i>[1..<i>i</i>] has at least as many letters a as b.</p>
<p align="justify">Now, we give the inductive definition of the similarity between nice ab-words.</p>
<div align="justify">
<ul>
        <li align="justify">Every two empty ab-words (i.e. words with no letters) are similar</li>
        <li align="justify">Two non-empty nice ab-words <i>X</i> = [<i>x</i><sub>1</sub>, ..., <i>x</i><i><sub>n</sub></i>] and <i>Y</i> = [<i>y</i><sub>1</sub>, ..., <i>y</i><i><sub>m</sub></i>] are similar if they have the same length (<i>n</i> = <i>m</i>) and one of the following conditions if fulfilled: </li>
        <ol>
                <li align="justify"><i>x</i><sub>1</sub> = <i>y</i><sub>1</sub>, <i>x</i><i><sub>n</sub></i> = <i>y</i><i><sub>n</sub></i> and <i>X</i>[2..<i>n</i>-1] and <i>Y</i>[2..<i>n</i>-1] are similar ab-words and they are both nice;</li>
                <li align="justify">there exists <i>i</i>, 1 <= <i>i</i> <= <i>n</i>, such that <i>X</i>[1..<i>i</i>], <i>X</i>[<i>i</i>+1..<i>n</i>] are nice ab-words and</li>
                <ol type="a">
                        <li align="justify"><i>Y</i>[1..<i>i</i>], <i>Y</i>[<i>i</i>+1..<i>n</i>] are nice ab-words and <i>X</i>[1..<i>i</i>] is similar to <i>Y</i>[1..<i>i</i>] and <i>X</i>[<i>i</i>+1..<i>n</i>] is similar to <i>Y</i>[<i>i</i>+1..<i>n</i>], or</li>
                        <li align="justify"><i>Y</i>[1..<i>n</i>-i], <i>Y</i>[<i>n</i>-<i>i</i>+1..<i>n</i>] are nice ab-words and <i>X</i>[1..<i>i</i>] is similar to <i>Y</i>[<i>n</i>-<i>i</i>+1..<i>n</i>] and <i>X</i>[<i>i</i>+1..<i>n</i>] is similar to <i>Y</i>[1..<i>n</i>-<i>i</i>].</li>
                </ol>
        </ol>
</ul>
</div>
<p align="justify">A <b>level of diversity</b> of a non-empty set <i>S</i> of nice ab-words is the maximal number of ab-words that can be chosen from <i>S</i> in such a way that for each pair <i>w</i><sub>1</sub>,<i>w</i><sub>2</sub> of chosen words, <i>w</i><sub>1</sub> is not similar to <i>w</i><sub>2</sub>.</p>


<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads elements of <i>S</i> from standard input;</li>
        <li align="justify">computes the level of diversity of the set <i>S</i>;</li>
        <li align="justify">writes the result to standard output.</li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there is a number <i>n</i> of elements of the set <i>S</i>, 1 <= <i>n</i> <= 1000; in the following <i>n</i> lines there are elements of the set <i>S</i>, i.e. nice ab-words (one word in each line); the first letter of every ab-word is the first symbol in line and there are no spaces between two consecutive letters in the word; the length of every ab-word is an integer from the range [1..200]. </p>


*******OutputConstraints*******

<p align="justify">For each test case your program should output one line with one integer - the level of diversity of <i>S</i>. </p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
3
aabaabbbab
abababaabb
abaaabbabb

<b><tt>Sample output:</tt></b>
2
</pre>



______________________________________________________
ROADNET||||||true||||||


<p align="justify">A diskette was enclosed to a road map. The diskette contains the table of the shortest ways (distances) between each pair of towns on the map. All the roads are two-way. The location of towns on the map has the following interesting property: <i>if the length of the shortest way from town A to town B equals the sum of the lengths of the shortest ways from A to C and C to B then town C lies on (certain) shortest way from A to B</i>. We say that towns A and B are neighbouring towns if there is no town C such that the length of the shortest way from A to B equals the sum of the lengths of the shortest ways from A to C and C to B. Find all the pairs of neighbouring towns. </p>

<h3>Example</h3>
<p align="justify">For the table of distances: </p>
<table>
        <tr>    <th></th><th>A</th><th>B</th><th>C</th>         </tr>
        <tr>    <th>A</th><td>0</td><td>1</td><td>2</td>        </tr>
        <tr>    <th>B</th><td>1</td><td>0</td><td>3</td>        </tr>
        <tr>    <th>C</th><td>2</td><td>3</td><td>0</td>        </tr>
</table>
<p align="justify">the neighbouring towns are A, B and A, C. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the table of distances from standard input; </li>
        <li align="justify">finds all the pairs of neighbouring towns; </li>
        <li align="justify">writes the result to standard output. </li>
</ul>
</div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of each test case there is an integer <i>n</i>, 1 <= <i>n</i> <= 200, which equals the number of towns on the map. Towns are numbered from 1 to <i>n</i>.</p>
 <p align="justify">The table of distances is written in the following <i>n</i> lines. In the (<i>i</i>+1)-th line, 1 <= <i>i</i> <= <i>n</i>, there are <i>n</i> non-negative integers not greater than 200, separated by single spaces. The <i>j</i>-th integer is the distance between towns <i>i</i> and <i>j</i>. </p>


*******OutputConstraints*******

<p align="justify">For each test case your program should write all the pairs of the neighbouring towns (i.e. their numbers). There should be one pair in each line. Each pair can appear only once. The numbers in each pair should be given in increasing order. Pairs should be ordered so that if the pair (<i>a</i>, <i>b</i>) precedes the pair (<i>c</i>, <i>d</i>) then <i>a</i> < <i>c</i> or (<i>a</i> = <i>c</i> and <i>b</i> < <i>d</i>).</p>
<p align="justify">Consequent test cases should by separated by an empty line.</p>


*******IOTestCases*******

<p align="justify">For the table of distances: </p>
<table>
        <tr>    <th></th><th>A</th><th>B</th><th>C</th>         </tr>
        <tr>    <th>A</th><td>0</td><td>1</td><td>2</td>        </tr>
        <tr>    <th>B</th><td>1</td><td>0</td><td>3</td>        </tr>
        <tr>    <th>C</th><td>2</td><td>3</td><td>0</td>        </tr>
</table>
<p align="justify">the neighbouring towns are A, B and A, C. </p>


______________________________________________________
WORDEQ||||||true||||||


<p align="justify">Every non-empty sequence of elements 0 and 1 is called a binary word. A word equation is an equation of the form <i>x</i><sub>1</sub><i>x</i><sub>2</sub>...<i>x<sub>l</sub></i> = <i>y</i><sub>1</sub><i>y</i><sub>2</sub>...<i>y</i><i><sub>r</sub></i>, where <i>x</i><i><sub>i</sub></i> and <i>y</i><i><sub>j</sub></i> are binary digits (0 or 1) or variables i.e. small letters of English alphabet. For every variable there is a fixed length of the binary words that can be substituted for this variable. This length is called a length of variable. In order to solve a word equation we have to assign binary words of appropriate length to all variables (the length of the word assigned to the variable <i>x</i> has to be equal to the length of this variable) in such a way that if we substitute words for variables then both sides of the equation (which are binary words after substitution) become equal. </p>
<p align="justify">For a given equation compute how many distinct solutions it has.</p>

<h3>Example</h3>
<p align="justify">Let <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, <tt>d</tt>, <tt>e</tt> be variables and let 4, 2, 4, 4, 2 be their lengths (4 is the length of <tt>a</tt>, 2 is the length of <tt>b</tt> etc.). Consider the equation:</p>
<p align="justify"><tt>1bad1 = acbe</tt></p>
<p align="justify">This equation has 16 distinct solutions.</p>


*******InputConstraints*******

<p align="justify">The number of equations <i>t</i> is in the first line of input, then <i>t</i> descriptions of equations follow separated by an empty line.</p>
<p align="justify">Each description consists of 6 lines. An equation is described in the following way: in the first line of the description there is an integer <i>k</i>, 0 &lt;= <i>k</i> &lt;= 26, which denotes the number of distinct variables in the equation. We assume that variables are the first <i>k</i> small letters of English alphabet. In the second line there is a sequence of <i>k</i> positive integers separated by single spaces. These numbers denote the lengths of variables <tt>a</tt>, <tt>b</tt>, ... from the equation (the first number is the length of <tt>a</tt>, the second - <tt>b</tt>, etc.). There is an integer <i>l</i> in the third line of the description, which is the length of the left size of equation, i.e. the length of the word built of digits 0 or 1 and variables (single letters). The left side of the equation is written in the next line as a sequence of digits and variables with no spaces between them. The next two lines contain the description of the right side of the equation. The first of these lines contains a positive integer <i>r</i>, which is the length of the right side of the equation. The second line contains the right side of the equation which is encoded in the same way as the left side. The number of digits plus sum of the lengths of variables (we count all appearances of variables) on each side of the equation is not greater than 10000. </p>


*******OutputConstraints*******

<p align="justify">For each equation your program should output one line with the number of distinct solutions.</p>


*******IOTestCases*******

<p align="justify">Let <tt>a</tt>, <tt>b</tt>, <tt>c</tt>, <tt>d</tt>, <tt>e</tt> be variables and let 4, 2, 4, 4, 2 be their lengths (4 is the length of <tt>a</tt>, 2 is the length of <tt>b</tt> etc.). Consider the equation:</p>
<p align="justify"><tt>1bad1 = acbe</tt></p>
<p align="justify">This equation has 16 distinct solutions.</p>


______________________________________________________
CONTPACK||||||true||||||


<p align="justify">Products of a factory are packed into cylindrical boxes. All boxes have the same bases. A height of a box is a non-negative integer being a power of 2, i.e. it is equal to 2<i><sup>i</sup></i> for some <i>i</i> = 0, 1, 2, ... . The number <i>i</i> (exponent) is called a size of a box. All boxes contain the same goods but their value may be different. Goods produced earlier are cheaper. The management decided, that the oldest (cheapest) goods should be sold out first. From the warehouse goods are transported in containers. Containers are also cylindrical. A diameter of each container is a little bigger than a diameter of a box, so that boxes can be easily put into containers. A height of a container is a non-negative power of 2. This number is called a size of a container. For safe transport containers should be tightly packed with boxes, i.e. the sum of heights of boxes placed in a container have to be equal to the height of this container. A set of containers was delivered to the warehouse. Check if it is possible to pack all the containers tight with boxes that are currently stored in the warehouse. If so, find the minimal value of goods that can be tightly packed into these containers. </p>

<p align="justify">Consider a warehouse with 5 boxes. Their sizes and values of their contents are given below: </p>
<pre>
1 3
1 2
3 5
2 1
1 4
</pre>
<p align="justify">Two containers of size 1 and 2 can be tightly packed with two boxes of total value 3, 4 or 5, or three boxes with total value 9. The container of size 5 cannot be tightly packed with boxes from the warehouse. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads descriptions of boxes (size, value) from a warehouse and descriptions of containers (how many containers of a given size we have); </li>
        <li align="justify">checks if all containers can be tightly packed with boxes from the warehouse and if so, computes the minimal value of goods that can be tightly packed into these containers; </li>
        <li align="justify">writes the result. </li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there is an integer <i>n</i>, 1 &lt;= <i>n</i> &lt;= 10000, which is the number of boxes in the warehouse. In each of the following <i>n</i> lines there are written two non-negative integers separated by a single space. These numbers describe a single box. First of them is the size of the box and the second - the value of goods contained in this box. The size is not greater than 1000 and the value is not greater than 10000. The next line contains a positive integer <i>q</i>, which is the number of different sizes of containers delivered to the warehouse. In each of the following <i>q</i> lines there are two positive integers separated by a single space. The first integer is the size of a container and the second one is the number of containers of this size. The maximal number of containers is 5000, a size of a container is not greater than 1000. </p>


*******OutputConstraints*******

<p align="justify">For each test case your program should output exactly one line containing:</p>
<div align="justify"><ul>
        <li align="justify">a single word "No" if it is not possible to pack the containers from the given set tight with the boxes from the warehouse, or </li>
        <li align="justify">a single integer equal to the minimal value of goods in boxes with which all the containers from the given set can be packed tight. </li>
</ul></div>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
5
1 3
1 2
3 5
2 1
1 4
2
1 1
2 1

<b><tt>Sample output:</tt></b>
3
</pre>


______________________________________________________
SCUBADIV||||||true||||||


<p align="justify">A scuba diver uses a special equipment for diving. He has a cylinder with two containers: one with oxygen and the other with nitrogen. Depending on the time he wants to stay under water and the depth of diving the scuba diver needs various amount of oxygen and nitrogen. The scuba diver has at his disposal a certain number of cylinders. Each cylinder can be described by its weight and the volume of gas it contains. In order to complete his task the scuba diver needs specific amount of oxygen and nitrogen. What is the minimal total weight of cylinders he has to take to complete the task? </p>

<h3>Example</h3>
<p align="justify">The scuba diver has at his disposal 5 cylinders described below. Each description consists of: volume of oxygen, volume of nitrogen (both values are given in litres) and weight of the cylinder (given in decagrams): </p>
<pre>
3 36 120
10 25 129
5 50 250
1 45 130
4 20 119
</pre>
<p align="justify">If the scuba diver needs 5 litres of oxygen and 60 litres of nitrogen then he has to take two cylinders of total weight 249 (for example the first and the second ones or the fourth and the fifth ones).</p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads scuba diver's demand for oxygen and nitrogen, the number of accessible cylinders and their descriptions; </li>
        <li align="justify">computes the minimal total weight of cylinders the scuba diver needs to complete his task; </li>
        <li align="justify">outputs the result. </li>
</ul>
</div>
<p align="justify"><b>Note:</b> the given set of cylinders always allows to complete the given task.</p>


*******InputConstraints*******

<p align="justify">The number of test cases <i>c</i> is in the first line of input, then <i>c</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there are two integers <i>t</i>, <i>a</i> separated by a single space, 1 &lt;= <i>t</i> &lt;= 21 and 1 &lt;= <i>a</i> &lt;= 79. They denote volumes of oxygen and nitrogen respectively, needed to complete the task. The second line contains one integer <i>n</i>, 1 &lt;= <i>n</i> &lt;= 1000, which is the number of accessible cylinders. The following <i>n</i> lines contain descriptions of cylinders; <i>i</i>-th line contains three integers <i>t</i><i><sub>i</sub></i>, <i>a</i><i><sub>i</sub></i>, <i>w</i><i><sub>i</sub></i> separated by single spaces, (1 &lt;= <i>t</i><i><sub>i</sub></i> &lt;= 21, 1 &lt;= <i>a</i><i><sub>i</sub></i> &lt;= 79, 1 &lt;= <i>w</i><i><sub>i</sub></i> &lt;= 800). These are respectively: volume of oxygen and nitrogen in the <i>i</i>-th cylinder and the weight of this cylinder. </p>


*******OutputConstraints*******

<p align="justify">For each test case your program should output one line with the minimal total weight of cylinders the scuba diver should take to complete the task. </p>


*******IOTestCases*******

<p align="justify">The scuba diver has at his disposal 5 cylinders described below. Each description consists of: volume of oxygen, volume of nitrogen (both values are given in litres) and weight of the cylinder (given in decagrams): </p>
<pre>
3 36 120
10 25 129
5 50 250
1 45 130
4 20 119
</pre>
<p align="justify">If the scuba diver needs 5 litres of oxygen and 60 litres of nitrogen then he has to take two cylinders of total weight 249 (for example the first and the second ones or the fourth and the fifth ones).</p>


______________________________________________________
WINDOW1||||||true||||||


<p align="justify">We have a polygon chosen in the cartesian coordinate system. Sides of the polygon are parallel to the axes of coordinates. Every two consecutive sides are perpendicular and coordinates of every vertex are integers. We have also given a window that is a rectangle whose sides are parallel to the axes of coordinates. The interior of the polygon (but not its periphery) is coloured red. What is the number of separate red fragments of the polygon that can be seen through the window?</p>

<h3>Example</h3>
<p align="justify">Look at the figure below: </p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:okno.gif"></p>
<p align="justify">There are two separate fragments of the polygon that can be seen through the window. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads descriptions of a window and a polygon; </li>
        <li align="justify">computes the number of separate red fragments of the polygon that can be seen through the window; </li>
        <li align="justify">outputs the result.</li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there are four integers <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub> from the range [0..10000], separated by single spaces. The numbers <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub> are the coordinates of the top-left corner of the window. The numbers <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub> are the coordinates of the bottom-right corner of the window. The next line of the input file contains one integer <i>n</i>, 4 &lt;= <i>n</i> &lt;= 5000, which equals the number of vertices of the polygon. In the following <i>n</i> lines there are coordinates of polygon's vertices given in anticlockwise direction, i.e. the interior of the polygon is on the left side of its periphery when we move along the sides of the polygon according to the given order. Each line contains two integers <i>x</i>, <i>y</i> separated by a single space, 0 &lt;= <i>x</i> &lt;= 10000, 0 &lt;= <i>y</i> &lt;= 10000. The numbers in the <i>i</i>-th line, are coordinates of the <i>i</i>-th vertex of the polygon. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line with the number of separate red fragments of the polygon that can be seen through the window.</p>


*******IOTestCases*******

<p align="justify">Look at the figure below: </p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:okno.gif"></p>
<p align="justify">There are two separate fragments of the polygon that can be seen through the window. </p>


______________________________________________________
ASCIRC||||||true||||||


<p align="justify">Bytetel Company decided to improve computers they produce. They want to replace assembler programs with special systems called assembler circuits. Assembler programs consist solely of assignments. Each assignment is determined by four elements:</p>
<div align="justify">
<ul>
        <li align="justify">two registers from which data are taken, </li>
        <li align="justify">elementary operation that should be performed on the data, </li>
        <li align="justify">register to which the result should be written. </li>
</ul>
</div>
<p align="justify">We assume that there are at most 26 registers. They are represented by small letters of English alphabet. There are at most 4 elementary operations and they are represented by capital letters A, B, C, D.</p>
<p align="justify">An assembler circuit has: </p>
<div align="justify">
<ul>
        <li align="justify">inputs assigned to registers; initial value of appropriate register is passed to the input; </li>
        <li align="justify">outputs, also assigned to registers; their final values are passed to these registers. </li>
</ul>
</div><p align="justify">There are gates inside a circuit. Each gate has two inputs and one output. The gate performs an elementary operation on data delivered on its inputs and passes the result to its output. Inputs of gates and outputs of the whole circuit are connected to outputs of other gates or inputs of the circuit. Outputs of gates and inputs of the circuit can be connected to many inputs of other gates or outputs of the circuit. Connections among gates cannot form cycles. </p>
<p align="justify">An assembler circuit is equivalent to an assembler program if for any initial state of registers the final state of registers produced by the program and the circuit are the same. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads a description of an assembler program; </li>
        <li align="justify">computes the minimal number of gates in an assembler circuit equivalent to the given program; </li>
        <li align="justify">writes the result.</li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of each test case there is one integer <i>n</i> (1 &lt;= <i>n</i> &lt;= 1000), which is the number of instructions in the program. </p>
<p align="justify">In the following <i>n</i> lines there are descriptions of consecutive instructions in the program. Each description is a four-letter word beginning with an elementary operation symbol: A, B, C or D. The second and the third letter (which are small letters of English alphabet) are names of registers, in which data are placed. The fourth letter is a name of a register, in which the result should be placed. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line with the minimal number of gates in an assembler circuit equivalent to the given program. </p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
8
Afbc
Bfbd
Cddd
Bcbc
Afcc
Afbf
Cfbb
Dfdb

<b><tt>Sample output:</tt></b>
6
</pre>
<p align="justify">A circuit equivalent to the given program is shown in the figure. </p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:uklasm.gif"></p>



______________________________________________________
ATMS||||||true||||||


<p align="justify">Every member of Byteland Credit Society is entitled to loan any amount of Bytelandish ducats unless it is 10<sup>30</sup> or more, but he has to return the whole amount within seven days. There are 100 ATMs in the Client Service Room of the Society. They are numbered from 0 to 99. Every ATM can perform one action only: it can pay or receive a fixed amount. The <i>i</i>-th ATM pays 2<i><sup>i</sup></i> ducats if <i>i</i> is even or it receives 2<i><sup>i</sup></i> ducats if <i>i</i> is odd. If a client is going to loan a fixed sum of money it is necessary to check if he is able to get the money using every ATM at most once. If so, numbers of ATMs he has to use should be determined. It is also necessary to check if the client can return the money in a similar way, and if so, to determine numbers of ATMs he has to use. </p>
<h3>Example</h3>
 <p align="justify">A client who is going to loan 7 ducats gets 16 ducats from the ATM # 4 and 1 ducat from the ATM # 0 and then he returns 8 ducats in the ATM # 3 and 2 ducats in the ATM # 1. In order to return the amount of 7 ducats he receives 1 ducat from the ATM # 0 and then he returns 8 ducats in ATM # 3. </p>

<h3>Task</h3>
<p align="justify">Write a program that:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the number of clients <i>n</i>, for every client reads from the same file the amount of money he is going to loan; </li>
        <li align="justify">checks for every client if he is able to get the money using every ATM at most once and if so, determines the numbers of ATMs he has to use; </li>
        <li align="justify">outputs the results. </li>
</ul></div>


*******InputConstraints*******

<p align="justify">In the first line of input there is one positive integer <i>n</i> <= 10000, which equals the number of clients. </p>
 <p align="justify">In each of the following <i>n</i> lines there is one positive integer less than 10<sup>30</sup> (at most 30 decimal digits). The number in the <i>i</i>-th line describes the amount of ducats which the client <i>i</i> is going to loan. </p>


*******OutputConstraints*******

<p align="justify">For each client you should output two lines with a decreasing sequence of positive integers from the range [0..99] separated by single spaces, or one word "<tt>No</tt>": </p>
<p align="justify">In the first line of the <i>i</i>-th pair of lines there should be numbers of ATMs (in decreasing order) that the client <i>i</i> should use to get his loan or one word "<tt>No</tt>" if the loan cannot be received according to the rules; </p>
<p align="justify">In the second line of the <i>i</i>-th pair there should be numbers of ATMs (in decreasing order) which the client <i>i</i> should use to return his loan or the word "<tt>No</tt>". </p>


*******IOTestCases*******

 <p align="justify">A client who is going to loan 7 ducats gets 16 ducats from the ATM # 4 and 1 ducat from the ATM # 0 and then he returns 8 ducats in the ATM # 3 and 2 ducats in the ATM # 1. In order to return the amount of 7 ducats he receives 1 ducat from the ATM # 0 and then he returns 8 ducats in ATM # 3. </p>


______________________________________________________
CHASE1||||||true||||||


<p align="justify">Chase is a two-person board game. A board consists of squares numbered from 1 to <i>n</i>. For each pair of different squares it is known if they are adjacent to one another or they are not. Each player has a piece at his disposal. At the beginning of a game pieces of players are placed on fixed, distinct squares. In one turn a player can leave his piece on the square it stands or move it to an adjacent square. </p>
<p align="justify">A game board has the following properties: </p>
<div align="justify">
<ul>
        <li align="justify">it contains no triangles, i.e. there are no three distinct squares such that each pair of them is adjacent, </li>
        <li align="justify">each square can be reached by each player. </li>
</ul></div>
<p align="justify">A game consists of many turns. In one turn each player makes a single move. Each turn is started by player A. We say that player A is caught by player B if both pieces stand on the same square. Decide, if for a given initial positions of pieces, player B can catch player A, independently of the moves of his opponent. If so, how many turns player B needs to catch player A if both play optimally (i.e. player A tries to run away as long as he can and player B tries to catch him as quickly as possible). </p>

<h3>Example</h3>
<p align="center"><img src="http://www.spoj.pl/content/ahven:gon.gif"></p>
<p align="justify">Consider the board in the figure. Adjacent squares (denoted by circles) are connected by edges. If at the beginning of a game pieces of players A and B stand on the squares 9 and 4 respectively, then player B can catch player A in the third turn (if both players move optimally). If game starts with pieces on the squares 8 (player A) and 4 (player B) then player B cannot catch player A (if A plays correctly). </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the description of a board and numbers of squares on which pieces are placed initially. </li>
        <li align="justify">decides if player B can catch player A and if so, computes how many turns he needs (we assume that both players play optimally); </li>
        <li align="justify">outputs the result. </li>
</ul></div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there are four integers <i>n</i>, <i>m</i>, <i>a</i> and <i>b</i> separated by single spaces, where 2 <= <i>n</i> <= 3000, <i>n</i>-1 <= <i>m</i> <= 15000, 1 <= <i>a</i>, <i>b</i> <= <i>n</i>. These are (respectively): the number of squares of the board, the number of adjacent (unordered) pairs, the number of the square on which the piece of player A is placed, the number of the square on which the piece of player B is placed. In each of the following lines there are two distinct positive integers separated by a single space, which denote numbers of adjacent squares. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line containing: </p>
<div align="justify"><ul>
        <li align="justify">one word "<tt>No</tt>", if player B cannot catch player A, or </li>
        <li align="justify">one integer - the number of turns needed by B to catch A (if B can catch A). </li>
</ul></div>


*******IOTestCases*******

<p align="center"><img src="http://www.spoj.pl/content/ahven:gon.gif"></p>
<p align="justify">Consider the board in the figure. Adjacent squares (denoted by circles) are connected by edges. If at the beginning of a game pieces of players A and B stand on the squares 9 and 4 respectively, then player B can catch player A in the third turn (if both players move optimally). If game starts with pieces on the squares 8 (player A) and 4 (player B) then player B cannot catch player A (if A plays correctly). </p>


______________________________________________________
LITELANG||||||true||||||


<p align="justify">Alphabet <i>A<sub>k</sub></i> consists of <i>k</i> initial letters of English alphabet. A positive integer called a weight is assigned to each letter of the alphabet. A weight of a word built from the letters of the alphabet <i>A<sub>k</sub></i> is the sum of weights of all letters in this word. A language over an alphabet <i>A<sub>k</sub></i> is any finite set of words built from the letters of this alphabet. A weight of a language is the sum of weights of all its words. We say that the language is prefixless if for each pair of different words <i>w</i>, <i>v</i> from this language <i>w</i> is not a prefix of <i>v</i>. </p>
<p align="justify">We want to find out what is the minimal possible weight of an <i>n</i>-element, prefixless language over an alphabet <i>A<sub>k</sub></i>. </p>

<h3>Example</h3>
<p align="justify">Assume that <i>k</i> = 2, the weight of the letter <tt>a</tt> is <i>W</i>(<tt>a</tt>) = 2 and the weight of the letter <tt>b</tt> is <i>W</i>(<tt>b</tt>) = 5. The weight of the word <tt>ab</tt> is <i>W</i>(<tt>ab</tt>) = 2 + 5 = 7. <i>W</i>(<tt>aba</tt>) = 2 + 5 + 2 = 9. The weight of the language <i>J</i> = {<tt>ab</tt>, <tt>aba</tt>, <tt>b</tt>} is <i>W</i>(<i>J</i>) = 21. The language <i>J</i> is not prefixless, since the word <tt>ab</tt> is a prefix of <tt>aba</tt>. The lightest three-element, prefixless language over the alphabet <i>A</i><sub>2</sub> (assuming that weights of the letters are as before) is {<tt>b</tt>, <tt>aa</tt>, <tt>ab</tt>}; its weight is 16. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads two integers <i>n</i>, <i>k</i> and the weights of <i>k</i> letters of an alphabet <i>A<sub>k</sub></i>; </li>
        <li align="justify">computes the minimal weight of a prefixless, <i>n</i>-element language over the alphabet <i>A<sub>k</sub></i>; </li>
        <li align="justify">outputs the result. </li>
</ul>
</div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there are two positive integers <i>n</i> and <i>k</i> separated by a single space, (2 &lt;= <i>n</i> &lt;= 10000, 2 &lt;= <i>k</i> &lt;= 26). These are the number of words in a language and the number of letters in an alphabet respectively. The second line contains <i>k</i> positive integers separated by single spaces. Each of them is not greater than 10000. The <i>i</i>-th number is the weight of the <i>i</i>-th letter. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line with the weight of the lightest prefixless <i>n</i>-element language over the alphabet <i>A<sub>k</sub></i>. </p>


*******IOTestCases*******

<p align="justify">Assume that <i>k</i> = 2, the weight of the letter <tt>a</tt> is <i>W</i>(<tt>a</tt>) = 2 and the weight of the letter <tt>b</tt> is <i>W</i>(<tt>b</tt>) = 5. The weight of the word <tt>ab</tt> is <i>W</i>(<tt>ab</tt>) = 2 + 5 = 7. <i>W</i>(<tt>aba</tt>) = 2 + 5 + 2 = 9. The weight of the language <i>J</i> = {<tt>ab</tt>, <tt>aba</tt>, <tt>b</tt>} is <i>W</i>(<i>J</i>) = 21. The language <i>J</i> is not prefixless, since the word <tt>ab</tt> is a prefix of <tt>aba</tt>. The lightest three-element, prefixless language over the alphabet <i>A</i><sub>2</sub> (assuming that weights of the letters are as before) is {<tt>b</tt>, <tt>aa</tt>, <tt>ab</tt>}; its weight is 16. </p>


______________________________________________________
FLBRKLIN||||||true||||||


<p align="justify">We have a cartesian coordinate system drawn on a sheet of paper. Let us consider broken lines that can be drawn with a single pencil stroke from the left to the right side of the sheet. We also require that for each segment of the line the angle between the straight line containing this segment and the OX axis belongs to [-45&deg;, 45&deg;] range. A broken line fulfilling above conditions is called a flat broken line. Suppose we are given <i>n</i> distinct points with integer coordinates. What is the minimal number of flat broken lines that should be drawn in order to cover all the points (a point is covered by a line if it belongs to this line)? </p>

<h3>Example</h3>
<p align="center"><img src="http://www.spoj.pl/content/ahven:lam.gif"></p>
<p align="justify">For 6 points whose coordinates are (1,6), (10,8), (1,5), (2,20), (4,4), (6,2) the minimal number of flat broken lines covering them is 3. </p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the number of points and their coordinates; </li>
        <li align="justify">computes the minimal number of flat broken lines that should be drawn to cover all the points; </li>
        <li align="justify">outputs the result.</li>
</ul>
</div>


*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there is one positive integer <i>n</i>, not greater than 30000, which denotes the number of points. In the following <i>n</i> lines there are coordinates of points. Each line contains two integers <i>x</i>, <i>y</i> separated by a single space, 0  &lt;=  <i>x</i>  &lt;=  30000, 0  &lt;=  <i>y</i>  &lt;=  30000. The numbers in the <i>i</i>-th line are the coordinates of the <i>i</i>-th point. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line with the minimal number of flat broken lines that should be drawn to cover all the points.</p>


*******IOTestCases*******

<p align="center"><img src="http://www.spoj.pl/content/ahven:lam.gif"></p>
<p align="justify">For 6 points whose coordinates are (1,6), (10,8), (1,5), (2,20), (4,4), (6,2) the minimal number of flat broken lines covering them is 3. </p>


______________________________________________________
RECTNG1||||||true||||||


<p align="justify">There are <i>n</i> rectangles drawn on the plane. Each rectangle has sides parallel to the coordinate axes and integer coordinates of vertices. </p>
<p align="justify">We define a block as follows: </p>
<div align="justify">
<ul>
        <li align="justify">each rectangle is a block, </li>
        <li align="justify">if two distinct blocks have a common segment then they form the new block otherwise we say that these blocks are separate. </li>
</ul>
</div>

<h3>Examples</h3>
<p align="justify">The rectangles in Figure 1 form two separate blocks.</p>
<p align="justify">Figure 1</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:prob.gif"></p>
<p align="justify">The rectangles in Figure 2 form a single block</p>
<p align="justify">Figure 2</p>
<p align="center"><img src="http://www.spoj.pl/content/ahven:proa.gif"></p>

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
        <li align="justify">reads the number of rectangles and coordinates of their vertices; </li>
        <li align="justify">finds the number of separate blocks formed by the rectangles; </li>
        <li align="justify">writes the result to the standard output.</li>
</ul>
</div>

*******InputConstraints*******

<p align="justify">The number of test cases <i>t</i> is in the first line of input, then <i>t</i> test cases follow separated by an empty line.</p>
<p align="justify">In the first line of a test case there is an integer <i>n</i>, 1  &lt;=  <i>n</i>  &lt;= 7000, which is the number of rectangles. In the following <i>n</i> lines there are coordinates of rectangles. Each rectangle is described by four numbers: coordinates <i>x</i>, <i>y</i> of the bottom-left vertex and coordinates <i>x</i>, <i>y</i> of the top-right vertex. All these coordinates are non-negative integers not greater than 10000. </p>


*******OutputConstraints*******

<p align="justify">For each test case you should output one line with the number of separate blocks formed by the given rectangles. </p>


*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
9
0 3 2 6
4 5 5 7
4 2 6 4
2 0 3 2
5 3 6 4
3 2 5 3
1 4 4 7
0 0 1 4
0 0 4 1

<b><tt>Sample output:</tt></b>
2
</pre>



______________________________________________________
MUSKET||||||true||||||


<p>
In the time of Louis XIII and his powerful minister cardinal Richelieu in the Full Barrel Inn
<i> n</i> musketeers had consumed their meal and were drinking wine. Wine had not run short and
therefore the musketeers were eager to quarrel, a drunken brawl broke out, in which each musketeer insulted all the
others.
</p>

<p>
A duel was inevitable. But who should fight who and in what order? They
decided (for the first time since the brawl they had done something
together) that they would stay in a circle and draw lots in order. A
drawn musketeer fought against his neighbor to the right. A looser
"quit the game" and to be more precise his corpse was taken away by
servants. The next musketeer who stood beside the looser became the
neighbor of a winner.A 
</p>

<p>After years, when historians read memories of the winner they
realized that a final result depended in a crucial extent on the order
of duels. They noticed that a fence practice had indicated, who
against who could win a
duel. It appeared that (in mathematical language) the relation "<b>A</b> wins
<b>B</b>" was not transitive! It could happen that the musketeer <b> A</b> fought better than
<b>B</b>, <b> B</b> better than <b> C</b> and <b> C</b> better than <b>A</b>. Of course, among three of them the first duel influenced the final result. If
<b> A </b> and <b> B</b> fight as the first, <b> C</b> wins eventually. But if <b> B</b> and
<b> C</b> fight as the first, <b> A</b> wins finally. Historians
fascinated by their discovery decided to verify which musketeers could
survive. The fate of France and the whole civilized Europe indeed
depended on that!
</p>

<h3>Task</h3>
<p>
<i>
N</i> persons with consecutive numbers from <i> 1</i> to <i> n</i> stay in a circle. They fight
<i> n-1</i> duels. In the first round one of these persons (e.g. with the number
<i> i</i>) fights against its neighbor to the right, i.e. against the person numbered <i> i+1</i> (or, if
<i>i=n</i>, against the person numbered <i>1</i>).  A looser quits the game, and
the circle is tighten so that the next person in order becomes a winner's neighbor. We are given the
table with possible duels results, in the form of a matrix. If <b>A</b><i>i,j</i> = 1
then the person with the number
<i> i</i> always wins with the person <i>j</i>. If <b>A</b><i>i,j</i> = 0 the person
<i>i</i> looses with <i>j</i>. We can say that the person<i> k</i> may win the game if there exists such a series of
<i>n-1</i> drawings, that <i>k</i>
wins the final duel.<br>
Write a program which:
</p>
<ul>
  <li>reads matrix <b> A</b> from the standard input,
  </li><li>computes numbers of persons, who may win the game,
  </li><li>writes them into the standard output.
</li></ul>


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case integer <i>n</i> which satisfies the inequality
<i> 3&lt;=n&lt;=100</i> is written. In each of the following <i> n</i> lines appears one word
consisting of
<i> n</i> digits 0 or 1. A digit on <i>j</i>-th position in<i> i</i>-th line denote <b>A</b><i>i,j.</i> Of course <b>A</b><i>i,j </i>= 1 - <b>A</b><i>j,i</i>, for <i> i&lt;&gt;j</i>. We assume that
<b>A</b><i>i,i </i>= 1, for each <i>i</i>.A 
</p>


*******OutputConstraints*******

<p>
For each test case in the first line there should be written <i> m</i> - the
number of persons, who may
win the game. In the following <i> m</i> lines numbers of these persons should be written in  ascending order, one number in each line.
</p>


*******IOTestCases*******

<pre><b>Sample input:</b>
1
7
1111101
0101100
0111111
0001101
0000101
1101111
0100001

<b>Sample output:</b>
3
1
3
6
</pre>

<p>
The order of duels: 1-2, 1-3, 5-6, 7-1, 4-6, 6-1 gives a final victory to the person numbered 6. You can also check that only two persons more (1 and 3) may win the game.



______________________________________________________
EMPTY||||||true||||||


<p>
We call a cuboid <b> regular</b>  if:
</p>
<ul>
 <li>one of its vertices is a point with coordinates (0,0,0),
 </li><li>edges beginning in this vertex lie on the positive semi-axes of the coordinate
  system,
 </li><li>the edges are not longer than 10<sup>6</sup>
</li></ul>
<p>
There is given a set <b> A</b> of points of space, whose coordinates are integers
from the interval
[1..10<sup>6</sup>]. We try to find a regular cuboid of maximal volume which does not
contain any of the points from the set <b>A</b>. A point belongs to the cuboid
if it belongs to the interior of the
cuboid, i.e. it is a point of the cuboid, but not of its wall.
</p>

<h3>Task</h3>
<p>Write a program which:</p>
<ul>
 <li>reads from the standard input the coordinates of points from the set <b>A</b>,
 </li><li>finds one of the regular cuboids of maximal volume which does not contain any points from the set
  <b>A</b>,
 </li><li>writes the result to standard output.
</li></ul>


*******InputConstraints*******

<p>Input begins with a line containing integer t<=10, the number of test cases. t test cases follow.
<p>In the first line of each test case one non-negative integer <i>n</i> is written
(<i> n</i> <= <i>5000</i>). It is the number of elements in the set
<b>A</b>. In the following
<i> n</i> lines of the input there are triples of integers from the interval
[1..10<sup>6</sup>], which are the X, Y and Z coordinates of points from <b>A</b>, repectively. Numbers in each line are separated by single spaces.
</p>


*******OutputConstraints*******

<p>
For each test case there should be three integers separated by single
spaces. These are the X, Y and Z coordinates (respectively) of the vertex of the
regular cuboid of maximal volume. If there is more than one such a cuboid, choose whichever. We require that all coordinates be positive.
</p>


*******IOTestCases*******

<pre><b>Sample input:</b>
1
4
3 3 300000
2 200000 5
90000 3 2000
2 2 1000

<b>Sample output:</b>
1000000 200000 1000
</pre>



______________________________________________________
MONODIG||||||true||||||


<p>
Let <i> K</i> be a decimal digit different from <i>0</i>. We say that an
arithmetic expression is a <b>K-representation of the integer X</b>
if a value
of this expression is X and if it contains only numbers composed of a
digit K.
(All the numbers are of course decimal). The following arithmetical
operations are allowed in the expression: addition, subtraction,
multiplication and division. Round brackets are
allowed too. Division may appear only when a dividend is a multiple of
a
divisor.
</p>

<h3>Example</h3>
<p>
Each of the following expressions is the 5-representation of the number 12:
</p>
<ul>
 <li>5+5+(5:5)+(5:5)
 </li><li>(5+(5))+5:5+5:5
 </li><li>55:5+5:5
 </li><li>(55+5):5
</li></ul>
<p>
The<b> length</b> of the <i>K</i>-representation is the number of occurrences of
digit <i>K</i> in the expression. In the example above the first two representations have the length 6, the third - 5, and the forth - 4.
</p>

<h3>Task</h3>
<p>
Write a program which:A 
</p>
<ul>
 <li>reads the digit <i> K</i> and the series of numbers from the standard input,
 </li><li>verifies for each number from the series, whether it has a <i>K</i>-representation
  of length at most 8, and if it does, then the program finds the minimal length of this representation,
 </li><li>writes results to the standard output.A  
</li></ul>


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
The first line of each test case contains digit <i>K</i>, <i> K</i> is en element of
{<i>1,...,9</i>}. The second line
contains number n, <i> 1&lt;=n&lt;=10</i>. In the following <i> n</i> lines there is the series  of natural numbers
<i> a<sub>1</sub>,...,a<sub>n</sub></i>, <i> 
1&lt;=a<sub>i</sub>&lt;=32000</i> (for <i>i=1,..,n</i>), one number in each line.A  
</p>


*******OutputConstraints*******

<p>
The output for each test case composes of <i> n</i> lines. The <i>i-</i>th line should
contain:A 
</p>
<ul>
 <li>exactly one number which is the minimal length of <i>K</i>-representation of a<sub><i>i</i></sub>,
  assuming that such a representation of length not grater then 8 exists,
 </li><li>one word NO, if the minimal length of the <i>K</i>-representation of the number
  <i> a</i><sub><i>i</i></sub>
  is grater than 8.A 
</li></ul>


*******IOTestCases*******

<p>
Each of the following expressions is the 5-representation of the number 12:
</p>
<ul>
 <li>5+5+(5:5)+(5:5)
 </li><li>(5+(5))+5:5+5:5
 </li><li>55:5+5:5
 </li><li>(55+5):5
</li></ul>
<p>
The<b> length</b> of the <i>K</i>-representation is the number of occurrences of
digit <i>K</i> in the expression. In the example above the first two representations have the length 6, the third - 5, and the forth - 4.
</p>


______________________________________________________
POLYGAME||||||true||||||


<p>
Two players take part in the game <b>polygons</b>. A convex polygon with <i> n</i> vertices divided by
<i> n-3</i> diagonals into <i> n-2</i> triangles is necessary.
These diagonals may intersect in vertices of the polygon only. One of the triangles is black and the
remaining ones are white. Players proceed in alternate turns. Each player, when
its turn comes, cuts away one
triangle from the polygon. players are allowed to cut off triangles along the given
diagonals. The winner is the player who cuts away the black triangle.<br>
NOTE: We call a polygon <b> convex</b> if a segment joining any two points of
the polygon is contained in the polygon.
</p>

<h3>Task</h3>
<p>
Write a program which:A 
</p>
<ul>
 <li>reads from the standard input the description of the polygon,
 </li><li>verifies whether the player who starts the game has a winning strategy,
 </li><li>writes the result to the standard output. 
</li></ul>


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.

The first line of each test case contains an integer <i>n</i>,<i> 4 &lt;= n &lt;=
50000</i>. This is the number of vertices in the polygon. The vertices of the polygon
are numbered, clockwise, from
<i> 0</i> to <i>n-1</i>.<br>
The next <i> n-2</i> lines comprise descriptions of triangles in the polygon. In the<i>
i+1</i>-th line, <i> 1 &lt;= i &lt;= n-2</i>, there are three non-negative
integers <i>a, b, c</i> 
separated by single spaces. Theses are numbers of vertices of the <i>i</i>-th triangle. The first triangle in a
sequence is black.
</p>


*******OutputConstraints*******

<p>
The output for each test case should have one line with the word:
</p>
<ul>
 <li>YES, if the player, who starts the game has a winning
  strategy,</li>
 <li>NO, if he does not have a winning strategy.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Sample input:</b>
1
6
0 1 2
2 4 3
4 2 0
0 5 4

<b>Sample output:</b>
YES</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
ROCKETS||||||true||||||


<p>
There are two separate,<i> n</i>-element sets of points of a two dimensional map:
<b> R</b> and <b>W</b>.
None triple of points from the set <b> R</b><font face="Arial">U</font><b>W</b>
is collinear.
Rockets earth-to-earth are located on points from the set <b>R</b>. Enemy objects, which should be destroyed, are located on points from the set
<b>W</b>. The
rockets may fly only in the straight line and their trajectories cannot intersect. We are about to find for each
rocket a
target to destroy.
</p>

<h3>Task</h3>

<p>

Write a program which:</p>
<ul>

 <li>reads from the standard input coordinates of the points from the sets<b>
  R</b> and <b>W</b>,

 </li><li>finds the set of <i>n</i>  pairwise not-intersecting segments, so that one end
  of each segment belongs to the set <b>R</b>, while the other belongs to the
  set <b>W</b>,

 </li><li>writes the result into the standard output.
</li></ul>  



*******InputConstraints*******


<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case there is written one integer <i>n</i>,
<i>1<=n<=10000</i>, equal to the number of elements of the sets <b>R</b>
and <b>W</b>.
</p>


<p>
In each of the following <i>2n</i> lines of the input one pair of integer
numbers from the interval [<i>-10000, 10000</i>] is written. Numbers in each
pair are separated
by a single space. They are coordinates of the point on a map (first coordinate <i>x</i>,
then<i> y</i>). The first <i>n </i>lines comprise coordinates of the points from
the set <b>R</b>, the last<i> n</i> lines comprise the points from the set <b>W</b>.
In the (<i>i+1</i>)-th line there are coordinates of the point <i>r<sub>i</sub></i>,
in the (<i>i+n+1</i>)-th line there are coordinates of the point <i>w<sub>i</sub></i>,
<i>1<= i<= n</i>.
</p>



*******OutputConstraints*******


<p>
The output for each test case should consist of <i>n</i> lines. In the <i>i</i>-th line there
should be one integer <i>k(i)</i>, such that the segment <i>r<sub>i</sub>
 w<sub>k(i)</sub> </i> belongs to the set of segments which your program found.
(This means that the rocket from the point <i>r<sub>i</sub> </i> destroys an object in the
point <i>w<sub>k(i)</sub></i>).
</p>



*******IOTestCases*******


<pre><b>Sample input:</b>
1
4
0 0
1 5
4 2
2 6
1 2
5 4
4 5
3 1

<b>Sample output:</b>
2
1
4
3
</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
POTHOLE||||||true||||||


<p>A team of speleologists organizes a training in the Grate Cave ofA Byte Mountains.
During the training each speleologist explores a route from Top Chamber
to Bottom Chamber. The speleologists may move down only, i.e. the level of every
consecutive chamber on a route should be lower then the previous one. Moreover, each
speleologist has to start from Top Chamber through a different corridor and each of them must enter
Bottom Chamber using different corridor. The remaining corridors may be traversed by
more then one speleologist. How many speleologists can train
simultaneously?A 
</p>


<h3>Task</h3>

<p>
Write a program which:
</p><ul>  
 	<li>reads the cave description from the standard input,
 	</li><li>computes the maximal number of speleologists that may train
      simultaneously,
 	</li><li>writes the result to the standard output.
</li></ul>  


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case there is one integer <i>n</i>
(<i>2&lt;=n&lt;=200</i>), equal to the number of chambers in the cave. The chambers are
numbered with integers from <i> 1</i> to <i> n</i> in descending level order - the chamber of
grater number is at the higher level than the chamber of the lower one. (Top
Chamber has
number <i>1,</i> and Bottom Chamber has number <i>n</i>). In the following <i>n-1</i>lines
(i.e. lines <i>2,3,...,n</i>) the descriptions of corridors are given. The (<i>i+1</i>)-th
line contains numbers of chambers connected by corridors with the <i>i</i>-th chamber. (only
chambers with numbers grater then <i>i</i> are mentioned). The first number in a line, <i>m</i>, <i>
0&lt;=m&lt;=</i>(<i>n-i+1</i>), is a number of corridors exiting the chamber being described.
Then the following<i> m</i> integers are the numbers of
the chambers the corridors are leading to.A 
</p>


*******OutputConstraints*******


<p>
Your program should write one integer for each test case.
This number should be equal to the maximal number of
speleologists able to train simultaneously,
</p>


*******IOTestCases*******


<pre>
<b>Sample input:</b>
1
12
4 3 4 2 5
1 8
2 9 7
2 6 11
1 8
2 9 10
2 10 11
1 12
2 10 12
1 12
1 12

<b>Sample output:</b>
3
</pre>

<p>The sample input corresponds to the following cave:<br>
<img src="http://www.spoj.pl/content/piotrek:grotol.gif" height="426" width="249"> 
</p>



______________________________________________________
SLEEP||||||true||||||


<p>There is a building with flat square roof of size <i>3<sup>k</sup>*3</i><sup><i>k</i> </sup>and sides parallel to north-south and east-west directions. The
roof is covered with square tiles of size <i>1 </i>(with a side of length 1), but one of the tiles has been
removed and there is a hole in the roof (big enough to fall in). The tiles form a
rectangular mesh on the roof, so their positions may be specified with
coordinates. The tile at the southwestern corner has coordinates (<i>1,1</i>). The
first coordinate increases while going eastwards, and the second while going
northwards.
</p>

<p>Sleepwalker wanders across the roof, in each step moving from the tile he is
standing on to the adjacent one on the east(E), west(W), south(S), or 
north(N). The
sleepwalker roof ramble starts from the southwestern corner tile. The
description of the path is a word d<sub><i>k</i></sub>   built of the letters <tt>N, S, E, W
</tt>denoting respectively a step to the north, south, east and west. For <i> k = 1</i>
the word describing the path of sleepwalker is
</p>

<p>
d<sub>1</sub> = <tt>EENNWSWN</tt>
</p>

<p>For <i> k = 2</i> the word describing the path of sleepwalker is
<p>
<table>
<tbody><tr valign="top">
<td>d<sub>2</sub></td>
<td>=</td>
<td>
<tt>NNEESWSEENNEESWSEEEENNWSWNNEENNWSW -<br>
NNEENNWSWNWWWSSENESSSSWWNENWWSSW  -<br> 
WNENWNEENNWSWN.</tt></td>
</tr>
</tbody></table>
</p><p>(See the picture that shows how the sleepwalker would go across a roof of
dimension <i> 3*3</i> or <i>9*9</i>.) Generally, if <i>k>=1</i>, the description of
a sleepwalker's path on the roof of dimension 
<i>3<sup>k+1</sup>*3<sup>k+1</sup>
</i>
is a word:
<p>d<sub>k+1</sub> =  a(d<sub>k</sub>) E a(d<sub>k</sub>) E d<sub>k</sub> N d <sub>k</sub> N d<sub>k</sub> W c(d<sub>k</sub>) S
b(d<sub>k</sub>) W b(d<sub>k</sub>) N d<sub>k</sub></p>where functions <b>a</b>,
<b> b</b>
and <b> c</b> denote the following permutations of letters specifying directions:

<pre>
a: E->N W->S N->E S->W 
b: E->S W->N N->W S->E 
c: E->W W->E N->S S->N 
</pre>

<p>E.g. a(SEN)=WNE, b(SEN)=ESW, c(SEN)=NWS.
</p>

<p>We start observing sleepwalker at the time he stands on the tile of coordinates
(<i>u<sub>1</sub>, u<sub>2</sub></i>). After how many steps will sleepwalker fall into the hole made
after removing the tile of coordinates (<i>v<sub>1</sub>, v<sub>2</sub></i>)? 
</p>

<h3>Example</h3>

<p>There are sleepwalker's paths on roofs of dimension <i> 3*3</i> and <i> 9*9</i> on the
picture below. In the second case, the point at which the observation starts and the hole have
been marked. The sleepwalker has exactly <i> 20</i> steps to the hole (from the
moment the observation starts).
</p>

<center>
<table>
<tbody><tr valign="bottom">
<td><img src="http://www.spoj.pl/content/piotrek:lunatyk1.gif" padding="20" height="83" width="81"></td>
<td><img src="http://www.spoj.pl/content/piotrek:lunatyk2.gif" padding="20" height="206" width="204"></td>
</tr>
</tbody></table>
</center>

<h3>Task</h3> 

<p>
Write a program which:
</p><ul>
<li>reads from the standard input integer <i>k</i> denoting the size of the roof (<i>3<sup>k</sup>*3<sup>k</sup></i>),
  the position of the sleepwalker at the moment the observation starts and the position
  of the hole,
</li><li>computes the number of steps that the sleepwalker will make before he falls into the
  hole,
</li><li>writes the result to the standard output.
</li></ul> 


*******InputConstraints*******


<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case one integer <i>k</i>,
<i>
1<=k<=60</i>, denoting the size of the roof (<i>3<sup>k</sup>*3<sup>k</sup></i>) is written. In
each of the following two lines of the test case  two natural
numbers <i> x, y</i> separated with a space are written, <i> 1<=x<=3^k</i>, <i> 1<=y<=3^k</i>. The
numbers in the second line are the coordinates of the tile the sleepwalker is
standing on. The numbers in the third line are the coordinates of the hole. You
may assume, that with these data the sleepwalker will eventually fall into the hole
after some number of steps.
</p>


*******OutputConstraints*******


<p>The only line of output for each test case should contain the number of steps on
the sleepwalker's path to the hole.
</p>


*******IOTestCases*******


<p>There are sleepwalker's paths on roofs of dimension <i> 3*3</i> and <i> 9*9</i> on the
picture below. In the second case, the point at which the observation starts and the hole have
been marked. The sleepwalker has exactly <i> 20</i> steps to the hole (from the
moment the observation starts).
</p>

<center>
<table>
<tbody><tr valign="bottom">
<td><img src="http://www.spoj.pl/content/piotrek:lunatyk1.gif" padding="20" height="83" width="81"></td>
<td><img src="http://www.spoj.pl/content/piotrek:lunatyk2.gif" padding="20" height="206" width="204"></td>
</tr>
</tbody></table>
</center>


______________________________________________________
ICERINK||||||true||||||


<p>A skating competition was organized on the largest icerink in
Byteland. The
icerink is a square of size 10000 * 10000. A competitor begins skating
at the START point chosen by referees and his task is to finish sliding
at the
FINISH point, also
chosen by referees. The points of START and FINISH are different. One
can slide in directions parallel to the sides of the
icerink. There are some obstacles placed on the icerink. Each obstacle
is a prism, which base is a polygon with sides parallel to the sides of
the
icerink. Each two adjacent sides of the base are always perpendicular.
The obstacles do not have
common points.
Each slide finishes up at the point where a competitor, for the first
time, meets the
wall of an obstacle, which is perpendicular to the direction of the
slide. In other words,
one can stop only when he crashes on a wall or in the FINISH point.
Falling out
of the icerink causes disqualification. Competitor may slide along
walls of
an obstacle.
</p>

<center>
<table width="442">
<tbody><tr><td width="486">
<img src="http://www.spoj.pl/content/piotrek:lodow1.gif"  height="85" width="420">
</td></tr>
<tr><td width="486">
<img src="http://www.spoj.pl/content/piotrek:lodow2.gif"  height="85" width="445">
</td></tr>
</tbody></table>
</center>

<p>
Decide, whether a competitor who slides according to the given rules may reach the finish
point, assuming he begun sliding from the starting point. If so, what is the minimal number
of slides he needs to do?
</p>

<h3>Task</h3> 

<p>
Write a program which:
</p><ul>
 <li>reads the description of the icerink, obstacles, and the coordinates of the
  start and finish point from the standard input,
 </li><li>verifies, whether a competitor who begins from the starting point and
  slides according the rules may reach the finish point, and if so, computes the minimal number
of slides he needs to do,
 </li><li>writes the result in the standard output.
</li></ul>  


*******InputConstraints*******
 
<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
We define a system of coordinates to describe positions of objects
on a rink.
The rink is a square with vertices
(0,0),(10000,0),(10000,10000),(0,10000). In the first line of each test case 
there are two integers
<i>z<sub>1</sub> </i> and <i> z<sub>2</sub> </i> separated by a single space, 0&lt;=<i>z<sub>1</sub>,
z<sub>2</sub></i>&lt;=10000. The pair (<i>z<sub>1</sub>, z<sub>2</sub></i>) denotes coordinates of the START point. In the second line of the file there are two integers
<i>t<sub>1</sub> </i> and <i> t<sub>2</sub> </i> separated by single space, 0&lt;=<i>t<sub>1</sub>, t<sub>2</sub></i>&lt;=10000. The pair
(<i>t<sub>1</sub>, t<sub>2</sub></i>) denotes coordinates of the FINISH point. The third line of the file
contains one integer <i>s</i>, 1&lt;=<i>s</i>&lt;=2500. This is the number of obstacles. The following lines comprise descriptions
of <i> s </i> obstacles. Each description of an obstacle begins with the line
containing one
positive integer <i>r </i> equal to the number of walls (sides of the base)  of
the obstacle. In each of the following
<i> r</i> lines there are two integers<i> x</i> and <i> y</i>
separated by a single space. These are the coordinates of the vertices of the obstacle's base,
given in a clockwise order. (i.e. when going around the obstacle in this
direction the inside is on the left-hand side). The total number of side walls of
the obstacles does not exceed 10000.</p> 


*******OutputConstraints*******
 

<p> 

Your program should write for each test case:</p>
<ul>
<li>either one word 'NO' if it's impossible to get from the
  START point to the FINISH point
</li><li>or the minimal number of slides necessary to get to the FINISH point, if it
  is possible.
</li></ul>


*******IOTestCases*******
 

<pre>
<b>Sample input:</b>
1
40 10
5 40
3
6
0 15
0 60
20 60
20 55
5 55
5 15
12
30 55
30 60
60 60
60 0
0 0
0 5
55 5
55 35
50 35
50 40
55 40
55 55
6
30 25
15 25
15 30
35 30
35 15
30 15

<b>Sample output:</b>
4
</pre>

<p>The sample input corresponds to the following situation:</p>
<p>
<img src="http://www.spoj.pl/content/piotrek:lodow3.gif"  height="358" width="358">
<p>
These are the possible sequences of slides of length 4:
<p>
<table>
<tbody><tr>
<td><img src="http://www.spoj.pl/content/piotrek:lodow4.gif"  height="152" width="152"></td>
<td><img src="http://www.spoj.pl/content/piotrek:lodow5.gif"  height="152" width="152"></td>
<td><img src="http://www.spoj.pl/content/piotrek:lodow6.gif"  height="152" width="152"></td>
</tr>
</tbody></table>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
BITMAP||||||true||||||


<p>
There is given a rectangular bitmap of size <i>n*m</i>. Each pixel of the bitmap is either white or black, but at least one is white. The pixel in
<i>i</i>-th line and <i>j</i>-th column is called the pixel (<i>i,j</i>). The distance between two pixels
<b>   p<sub>1</sub></b>=(<i>i<sub>1</sub>,j<sub>1</sub></i>) and <b>p<sub>2</sub></b>=(<i>i<sub>2</sub>,j<sub>2</sub></i>) is defined as:
</p>

<p></p><center>
d(<b>p<sub>1</sub></b>,<b>p<sub>2</sub></b>)=|<i>i<sub>1</sub>-i<sub>2</sub></i>|+|<i>j<sub>1</sub>-j<sub>2</sub></i>|.
</center><p></p>

<h3>Task</h3> 

<p>
Write a program which:
</p><ul>  
 <li>reads the description of the bitmap from the standard input,
 </li><li>for each pixel, computes the distance to the nearest white pixel,
 </li><li>writes the results to the standard output. 
</li></ul>  


*******InputConstraints*******
 

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.

In the first line of each test case there is a pair of integer numbers<i>
n, m</i> separated by a single space, <i> 1&lt;=n &lt;=182</i>, <i> 1&lt;=m&lt;=182</i>. In each of the following
<i> n</i> lines of the test case exactly one zero-one word of length
<i> m,</i> the description of one line of the bitmap, is written. On the <i>j</i>-th position in the line
(<i>i+1</i>), <i> 1 &lt;= i &lt;= n</i>, <i> 1 &lt;= j &lt;= m</i>, is '1' if, and only if the pixel
(<i>i,j</i>) is
white.
</p>


*******OutputConstraints*******


<p>
In the <i>i</i>-th line for each test case, <i> 1&lt;=i&lt;=n</i>, there
should be written
<i> m</i> integers f(<i>i,1</i>),...,f(<i>i,m</i>) separated by single spaces, where f(<i>i,j</i>) is
the distance from the pixel
(<i>i,j</i>) to the nearest white
pixel.
</p>


*******IOTestCases*******


<pre><b>Sample input:</b>
1
3 4
0001
0011
0110

<b>Sample output:</b>
3 2 1 0
2 1 0 0
1 0 0 1
</pre>


______________________________________________________
THREECOL||||||true||||||


<p>A <b>tree</b> consists of a node and some (zero, one or two) subtrees connected
to it. These subtrees are called children.</p>
<p>A <b>specification</b> of the tree is a sequence of digits. If the number of
children in the tree is:</p>
<ul>
<li>zero, then the specification is a sequence with only one element '0';
</li><li>one, the specification begins with '1' followed by the specification of the
  child;
</li><li>two, the specification begins with '2' followed by the specification of the
  first child, and then by the specification of the second child.
</li></ul>
<p>Each of the vertices in the tree must be painted either red or green or blue.<br>
However, we need to obey the following rules:</p>
<ul>
<li>the vertex and its child cannot have the same color,
</li><li>if a vertex has two children, then they must have different colors.
</li></ul>
<p>How many vertices may be painted green?</p>

<h3>Task</h3>
<p>
Write a program which:
</p><ul>
<li>reads the specification of the tree from the standard input,
</li><li>computes the maximal and the minimal number of vertices that may be painted
  green,
</li><li>writes the results in the standard output.
</li></ul>


*******InputConstraints*******


<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
Each test case consists of one word (no
longer then 10000 characters), which is a specification of a tree.</p>


*******OutputConstraints*******


<p>Your program should write for each test case 
exactly two integers separated by a single space, which respectively
denote the
maximal and the minimal number of vertices that may be painted green.</p>


*******IOTestCases*******

<pre>
<b>Sample input:</b>
1
1122002010

<b>Sample output:</b>
5 2
</pre>



______________________________________________________
STORE||||||true||||||


<p>
The floor of a store is a rectangle divided into<i> n*m</i> square
fields. Two fields are adjacent, if they have a common side. A parcel
lays on one of the fields.
Each of the remaining fields is either
empty, or occupied by a case, which is too heavy to be moved by a
store-keeper. The store-keeper has to shift the parcel from the
starting field
<b> P</b> to the
final field <b>K</b>. He can move on the empty
fields, going from the field on which he stands to a chosen adjacent
field. When the store-keeper stays on a field adjacent to the one with
the parcel he may
push the parcel so that if moves to the next field (i.e. the field on
the other side of the
parcel), assuming condition that there are no cases on this field.
</p>

<h3>Task</h3>
<p>
Write a program, which:
</p><ul>
<li>reads from the standard input a store scheme, a starting position of the store-keeper and a final position of the parcel,
</li><li>computes minimal number of the parcel shifts through borders of fields,
  which are necessary to put the parcel in
  the final position or decides that it is
  impossible to put the parcel there,
</li><li>writes the result into the standard output. 
</li></ul>


*******InputConstraints*******


<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case two positive integers separated by a single space,<i> n,m&lt;=100,</i> are written. These are dimensions of the store. In each
of the following <i> n</i> lines there appears one <i>m</i>-letter word made of letters S, M, P, K, w. A letter on
<i>i</i>-th position in <i>j</i>-th word denotes a type of the field with coordinates
(<i>i,j</i>) and its meaning is following:A </p>
<ul>
<li>S - case,
</li><li>M - starting position of the store-keeper,
</li><li>P - starting position of the parcel,
</li><li>K - final position of the parcel,
</li><li>w - empty field.A 
</li></ul>
<p>Each letter M, P and K appears in the test case exactly once.</p>


*******OutputConstraints*******

<p>
Your program should write to the standard output for each test case:A 
</p><ul>
<li>exactly one word NO if the parcel cannot be put on the target
  field,
</li><li>exactly one integer, equal to the minimal number of the parcel
shifts through borders of the fields, necessary to put a parcel on a
final position, if it is possible to put the parcel there.
</li></ul>


*******IOTestCases*******

<pre>
<b>Sample input:</b>
1
10 12
SSSSSSSSSSSS
SwwwwwwwSSSS
SwSSSSwwSSSS
SwSSSSwwSKSS
SwSSSSwwSwSS
SwwwwwPwwwww
SSSSSSSwSwSw
SSSSSSMwSwww
SSSSSSSSSSSS
SSSSSSSSSSSS

<b>Sample output</b>
7
</pre>



______________________________________________________
MAP||||||true||||||


<p>
After a new administrative division of Byteland cartographic office works on a
new demographic map of the country. Because of technical reasons only
a few colors can be used. The map should be colored so that regions with the same or similar
population (number of inhabitants) have the same color. For a given color<i> k</i> let
<b>A</b>(<i>k</i>) be the number, such that:A 

</p><ul>
<li>at least half of regions with color <i> k</i> has population not greater than
  <b>A</b>(<i>k</i>)
</li><li>at least half of regions with color <i> k</i> has population not less than <b>A</b>(<i>k</i>)A 
</li></ul>

<p><b>A coloring error of a region</b> is an absolute value of the difference between
<b>A</b>(<i>k</i>) and the region's population.
<b>A cumulative error</b> is a sum of coloring errors of all regions. We are
looking for an optimal coloring of the map (the one with the minimal cumulative
error).</p>

<h3>Task</h3>
<p>Write a program which:
</p><ul>
<li>reads the population of regions in Byteland from the standard input,
</li><li>computes the minimal cumulative error,
</li><li>writes the result to the standard output.
</li></ul>


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case an integer <i>n</i> is written, which is the number of regions in
Byteland, <i> 10&lt; n &lt;3000</i>. In the second line the number <i>m</i>
denoting the<i> </i>number of colors used to color the map is written, <i> 2 &lt;= m &lt;= 10</i>. In each
of the following <i> n</i> lines there is one non-negative integer - a
population of one of the regions of Byteland. No population exceeds <i>2^30</i>.A 
</p>


*******OutputConstraints*******

<p>
Your program should write for each test case one integer number equal to a minimal
cumulative error, which can be achieved while the map is colored (optimally).
</p>


*******IOTestCases*******


<pre><b>Sample input:</b>
1
11
3
21
14
6
18
10
2
15
12
3
2
2

<b>Sample output:</b>
15
</pre>



______________________________________________________
ALTARS||||||true||||||


<p>
According to Chinese folk beliefs evil spirits can move only on a
straight line. It is of a great importance when temples are built. The
temples are constructed on rectangular planes with sides parallel to
the
north - south or east - west directions.
No two of the rectangles have common points. An entrance is situated in
the middle of one of four walls and its width is equal to the half of
the
length of the wall. An altar appears in the center of the temple, where
diagonals of the rectangle intersect. If an evil spirit appears in this
point, a temple will be profaned. It may happen only if there exists a
ray which runs from an altar, through an entrance to infinity and
neither intersects nor touches walls of any temple (on a plane parallel
to the plane of a construction area),
i.e. one can draw at a construction area a line which starts at the
altar and
runs to the infinity without touching any wall.A 
</p>

<h3>Task</h3>
<p>
Write a program which:A 
</p><ul>

<li>reads descriptions of the temples from the standard input,

</li><li>verifies which temples could be profaned,

</li><li>writes their numbers to the standard output.
</li></ul>


*******InputConstraints*******


<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case one integer <i>n</i>, the number of temples
<i> 1 <= n <= 1000,</i> is written.
</p>

<p>
In each of the following <i> n</i> lines there is a description of one temple (in <i>i</i>-th line a description
of the<i> i-</i>th
temple). The description of a temple consists of four non-negative
integers,
not greater than 8000 and a letter E, W, S or N. Two first numbers are
coordinates of a temple's northern-west corner and two following are
coordinates of an opposite southern-east corner. In order to
specify coordinates of a point first we give its geographical
longitude, which increases from the
west to the east, and then its latitude, which increases from the south
to the
north. The fifth element of the description indicates the wall with the
entrance (E - Eastern, W - Western, S - Southern, N - Northern).
The
elements of the temple's description are separated by single spaces.
</p>


*******OutputConstraints*******


<p>In the following lines of the output for each test case your program should
write in ascending order numbers of the temples, which may
be profaned by an evil spirit. Each number is placed in a separate
line. If there are no such numbers, you should
write one word:
NONE.A 
</p>


*******IOTestCases*******

<p>
<tt>Sample input</tt>
</p><pre>6
1 7 4 1 E
3 9 11 8 S
6 7 10 4 N
8 3 10 1 N
11 4 13 1 E
14 8 20 7 W
</pre>
<tt>Sample output</tt>
<pre>1
2
5
6
</pre>
<p>
The picture shows the temples described in the example. The dashed lines show possible routes of evil spirits.<br>
<img src="http://www.spoj.pl/content/piotrek:oltarze.gif" height="274" width="621">
</p>


______________________________________________________
PRIMIT||||||true||||||


<p>
<b>A genetic code</b> of the abstract primitivus (<i>Primitivus recurencis</i>) is a series of natural numbers
<i>K=</i>(<i>a_1,...,a_n</i>). <b> A feature</b> of primitivus we call each ordered pair of numbers
(<i>l</i>,<i>r</i>), which appears successively in the genetic code, i.e. there exists such
<i> i</i> that
<i> l=a_i, r=a_i+1</i>. There are no (<i>p</i>,<i>p</i>) features in a primitivus' genetic
code.A 
</p>


<h3>Task</h3>
<p>
Write a program which:A 
</p><ul>
<li>reads the list of the features from the standard input,
</li><li>computes the length of the shortest genetic code having given features,
</li><li>writes the results to the standard output.A 
</li></ul>


*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case one positive integer number <i> n</i> is written. It is the number of different features of the primitivus. In each
of the following <i> n</i> lines there is a pair of natural numbers<i> l</i> and<i> r</i> separated
by a single space, <i>  1 &lt;= l &lt;= 1000, 1 &lt;= r &lt;= 1000</i>. A pair (<i>l</i>,
<i>r</i>) is one of the primitivus' features. The features do not repeat in the input file
</p>


*******OutputConstraints*******

<p>
Your program should write for each test case
exactly one integer number equal to the length of the shortest
genetic code of the primitivus, comprising the features from the input.
</p>


*******IOTestCases*******

<pre><b>Sample input:</b>
1
12
2 3
3 9
9 6
8 5
5 7
7 6
4 5
5 1
1 4
4 2
2 8
8 6

<b>Sample output:</b>
15</pre>

<p>All the features from the example are written in the following genetic code:<br>
(8, 5, 1, 4, 2, 3, 9, 6, 4, 5, 7, 6, 2, 8, 6)</p>

<b>Warning: enormous Input/Output data, be careful with certain languages</b>



______________________________________________________
WATER||||||true||||||


<p>
On a rectangular mesh comprising <i> n*m</i> fields, <i> n*m</i>
cuboids were put, one cuboid on each field. A base of each cuboid
covers one field and its surface equals to one
square inch. Cuboids on adjacent fields adhere one to another so close
that there are no gaps between them. A heavy rain pelted on a
construction so that in some areas puddles of water appeared.A 
</p>

<h3>Task</h3>
<p>
Write a program which:A 
</p><ul>

<li>reads from the standard input a size of the chessboard and heights of cuboids put on the fields,

</li><li>computes maximal water volume, which may gather in puddles after the rain,

</li><li>writes results in the standard output.
</li></ul>

*******InputConstraints*******

<p>
The number of test cases t is in the first line of input, then t test cases follow separated by an empty line.
In the first line of each test case two positive integers 1 &lt;= <i> n</i> &lt;= 100, 1 &lt;=
<i> m</i> &lt;= 100 are written. They are the size of the mesh. In each of the following
<i> n</i> lines there are <i> m</i> integers from the interval [1..10000];<i>
i</i>-th number in <i>j</i>-th line denotes a height of a cuboid given in inches
put on the field in the <i>i</i>-th column and <i>j</i>-th raw of the chessboard.
</p>


*******OutputConstraints*******

<p>
Your program should write for each tes case one integer
equal to the maximal volume of water (given in cubic inches), which may gather in puddles on the construction.A 
</p>


*******IOTestCases*******


<pre><b>Sample input:</b>
1
3 6
3 3 4 4 4 2
3 1 3 2 1 4
7 3 1 6 4 1

<b>Sample output:</b>
5
</pre>

<p>
The picture below shows the mesh after the rain (seen from above).  Puddles are drawn in gray.<br>
<table width="100%">
<tbody><tr>
<td valign="center"><img src="http://www.spoj.pl/content/piotrek:woda1.gif" height="110" width="193"></td>
<td valign="center"><img src="http://www.spoj.pl/content/piotrek:woda2.gif" height="110" width="193"></td>
</tr>
</tbody></table>
</p>



______________________________________________________
PANIC||||||true||||||


<p>Have you ever heard of the BBFO? The Bytelandian Bit-eating Fanatic Organisation regards itself as a collection of people with slightly unorthodox views on law and order in the world, and is regarded by others as the most wildly dangerous and unpredictable terrorist organisation which afflicts the small and otherwise peaceful country of Byteland.
</p>
<p>
Intelligence reports claim that the next act of violence to be performed by the BBFO is a widescale, distributed bomb attack in the Bytelandian capital. Therefore, all precautions have been undertaken to prevent any such action.
The BBFO, seeing the futility of their original scheme, decided to change the plan of action. The new idea is endowed with devilish simplicity.
</p>
<p>
The capital of Byteland is a network of plazas, some of which (but not necessarily all) are connected by bidirectional streets of different length. Crowds of people are sitting at all the plazas, sipping coffee and generally relaxing. The terrorists plan to creep up to some of the plazas armed with inflatable paper bags. Then, exactly at midday, all the bags will be burst in such a way as to simulate the bang of a bomb. Panic will ensue at the plazas where the bags were burst, and will spread throughout some of the city. Panic breaks out at a plaza the moment a bag explodes in it, or immediately after a panicking crowd rushes into the plaza from at least one of the side streets. The people in the plaza then split up into crowds, which rush out by all possible streets except those by which people have just run in. After entering a street, a crowd runs along it at constant speed until it reaches the plaza at the other end, causing panic there, etc.  If there is no possible way of escape from a plaza, everybody in it perishes. Similarly, if two crowds rushing in opposite directions collide in mid-street, all the people are lethally trampled.
</p>
<img src="http://www.spoj.pl/content/adrian:plazas.png" alt="A small illustration"/>
<p>
Despite the panic, people in the city retain a little free will. They don't move at all until the panic reaches them, but when they have to escape, they can always choose the escape route from a plaza that suits them best. Assuming you were to sit in one of the plazas of Byteland at noon that fateful day... which plaza would you choose to sit in? All your normal preferences concerning the quality of coffee in the cafes are temporarily forgotten, and your only aim is to survive as long as possible.
</p>

<p>

*******InputConstraints*******

<p>The first line of input contains a single integer t<=500, the number of test cases. t test cases follow. Each test case begins with a line containing three integers n m k (1<=n<=50000, 0<=m<=250000, 0<=k<=n) denoting the total number of plazas, the number of streets in the city, and the number of plazas in which bags are planted, respectively. Each of the following m lines contains 4 integers u v t<sub>uv</sub> t<sub>vu</sub> (1<=u,v<=n, 1<=t<sub>uv</sub>,t<sub>vu</sub><=1000) representing a single road in the city - leading from plaza u to plaza v and requiring t<sub>uv</sub> time to cover when running at constant speed from u to v, and t<sub>vu</sub> time when running the other way. The last line of a test case description contains a list of the k numbers of plazas at which bags explode  at noon.


*******OutputConstraints*******

<p>For each test case, the output should contain a single line with a space separated increasing sequence of integers - the numbers of all the plazas which offer the maximum possible survival time to a person sitting there at noon.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

4 5 2
1 2 10 10
2 4 30 30
3 2 10 10
4 3 50 5
3 1 5  50
1 2

2 0 1
2

<b>Output:</b>
2 3 4
1
</pre>
<p>
(In the first case the life expectancy is 22.5, in the second case it is more or less infinite.)
</p>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>



______________________________________________________
SOPARADE||||||true||||||


<p>Protocol is really weird in Byteland. For instance, it is required that, when presenting arms before an officer, soldiers should stand in a single row (at positions numbered from 1 to <i>n</i>). Soldiers may have one of 4 possible ranks, distinguished by the number of squiggles on the epaulets (between 1 and 4). Soldiers standing beside each other must have a difference in rank of at least two squiggles. Moreover, there are additional sets of rules (different for every province). Each rule states that soldiers standing at some given positions of the row must differ in rank by at least a squiggle.
<p>Starting from the new year onwards, some provinces are changing their set of protocol rules. As the Senior Military Secretary of Protocol, it is your task to approve the new rules. To your surprise, some of the provinces have put forward protocol rules which are quite impossible to fulfill, even if the soldiers were to be specially selected for the purpose of presenting arms. Detect all such offending provinces and on no account approve their laws.


*******InputConstraints*******

<p>The first line of input contains a single positive integer <i>t</i><=10 - the number of provinces which are proposing new laws. <i>t</i> sets of rules follow, separated by empty lines.
<p>
Each set of rule begins with a line containing two non-negative integers <i>n</i> <i>p</i> (<i>n</i><=100000, <i>p</i><=100000) - the number of soldiers arranged and the number of rules proposed in the province, respectively. Each of the next <i>p</i> lines contains a single rule: an integer <i>b<sub>i</sub></i> (2<=<i>b<sub>i</sub></i><=<i>n</i>), followed by <i>b<sub>i</sub></i> integers <i>a</i><sub>1</sub>,<i>a</i><sub>2</sub>,...,<i>a<sub>bi</sub></i> (1<=<i>a<sub>k</sub></i><=<i>n</i>). Such a rule means that soldiers standing at positions <i>a</i><sub>1</sub>,<i>a</i><sub>2</sub>,...,<i>a<sub>bi</sub></i> must all be of different rank.


*******OutputConstraints*******

<p>For every set of rules presented at input, output a single line containing the word <tt><i>rejected</i></tt> if no unit of soldiers can be arranged in accordance with protocol, or the word <tt><i>approved</i></tt> in the opposite case.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

2 1
2 1 2

5 2
3 1 3 2
4 2 3 4 5

<b>Output:</b>
approved
rejected
</pre>



______________________________________________________
PHRASES||||||true||||||


<p>You are the King of Byteland. Your agents have just intercepted a batch of encrypted enemy messages concerning the date of the planned attack on your island. You immedietaly send for the Bytelandian Cryptographer, but he is currently busy eating popcorn and claims that he may only decrypt the most important part of the text (since the rest would be a waste of his time). You decide to select the fragment of the text which the enemy has strongly emphasised, evidently regarding it as the most important. So, you are looking for a fragment of text which appears in all the messages disjointly at least twice. Since you are not overfond of the cryptographer, try to make this fragment as long as possible.

*******InputConstraints*******

<p>
The first line of input contains a single positive integer t<=10, the number of test cases. t test cases follow.

Each test case begins with integer n (n<=10), the number of messages. The next n lines contain the messages, consisting only of between 2 and 10000 characters 'a'-'z', possibly with some additional trailing white space which should be ignored.


*******OutputConstraints*******

<p>For each test case output the length of longest string which appears disjointly at least twice in all of the messages.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
abbabba
dabddkababa
bacaba
baba

<b>Output:</b>
2
</pre>
<p>
(in the example above, the longest substring which fulfills the requirements is 'ba')


______________________________________________________
VONNY||||||true||||||


<p>Vonny loves playing with dominos. And so she owns a standard set of dominos. A standard set of dominos consists of 28 pieces called bones, tiles or stones. Each bone is a rectangular tile with a line dividing its face into two square ends. Each square is labeled with a number between 0 and 6.
The 28 stones are labeled (0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),
(1,1),(1,2),...,(5,5),(5,6),(6,6).

Tommy - the brother of Vonny - build a box for Vonny's dominos. This box is sized 7 x 8 squares. Every square is labeled with a number between 0 and 6. You can see a example box here. 
<pre>
0 3 0 2 2 0 2 3 
1 5 6 5 5 1 2 2 
3 4 1 4 5 4 4 4 
6 6 1 0 5 2 3 0 
4 0 3 2 4 1 6 0 
1 4 1 5 6 6 3 0 
1 2 6 5 5 6 3 3 
</pre>
<p>
Now Vonny wants to arrange her 28 stones in such way that her stones cover all squares of the box. A stone can only be placed on two adjacent squares if the numbers of the squares and of the domino stone are equal.
Tommy asks Vonny in how many different ways she can arrange the dominos. Tommy assumes that Vonny need a lot of time to answer the question. And so he can take some of Vonny's candies while  she solves the task. 
But Vonny is a smart and clever girl. She asks you to solve the task and keeps an eye on her candies.       
</p>

*******InputConstraints*******

<p>The first line of the input contains the number of testcases.
Each case consists of 56 numbers (7 rows and 8 cols) between 0 and 6 which represents Tommy's box. 


*******OutputConstraints*******

<p>
For each testcase output a single line with the number which answers Tommy's question. 
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
0 3 0 2 2 0 2 3 
1 5 6 5 5 1 2 2 
3 4 1 4 5 4 4 4 
6 6 1 0 5 2 3 0 
4 0 3 2 4 1 6 0 
1 4 1 5 6 6 3 0 
1 2 6 5 5 6 3 3 

5 3 1 0 0 1 6 3 
0 2 0 4 1 2 5 2 
1 5 3 5 6 4 6 4 
0 5 0 2 0 4 6 2 
4 5 3 6 0 6 1 1 
2 3 5 3 4 4 5 3 
2 1 1 6 6 2 4 3 

<b>Output:</b>
18
1
</pre>



______________________________________________________
JEWELS||||||true||||||


<p>You work for a small jewelers' company, renowned for the exquisite necklaces and multi-colored amber strings it produces. For the last three centuries, the sales of strings alone have been enough to keep business going without a hitch. Now however, the influence of fashion is greater than ever, and you face the prospect of imminent bankruptcy unless you adapt to the needs and fancies of the rather unusual part of society who constitute your main clientele. These elderly ladies have recently decided that fashion has changed: strings are out, and earrings are in. There is nothing to be done about it -- you have to comply and switch to the production of earrings.</p>
<p>
One problem remains: what to do with the impressive heap of amber strings piled up in your shop? One of your assistants has a bright idea: he recommends cutting the strings into two parts, removing some stones to make both parts have an identical color pattern (either immediately, or after rotation by 180 degrees), and selling what remains as pairs of earrings. After a moment's thought, you decide to go ahead with the plan. But your careful managerial eye tells you that minimising the number of wasted (removed) stones may not be as easy as it sounds...</p>
<img src="http://www.spoj.pl/content/adrian:jewels.png" alt="Example of string2earring conversion ;)"/>


*******InputConstraints*******

<p>The first line of input contains a single integer t<=500, the number of test cases. The next t lines contain one test case each, in the form of a string of at most 8000 characters 'a'-'z' (terminated by a new line, optionally preceded by whitespace which should be ignored). The i-th character of the line corresponds to the design on the i-th stone in the amber string it represents. The total length of the input file is not more than 100kB.


*******OutputConstraints*******

<p>For each test case output two numbers: the largest possible total length of the pair of earrings which can be produced from the string, and a positive integer denoting the number of the stone after which the string ought to be cut so as to achieve this. If more than one cutting position is possible, output the leftmost (smallest) one.


*******IOTestCases*******

<pre>
<b>Input:</b>
3
abcacdd
acbddabedff
abcbca

<b>Output:</b>
4 3
6 4
4 2
</pre>
<p>
(the first case is illustrated in the figure, in the second case we produce a pair of earrings of the form 'abd', in the third - a pair of earrings which look like 'ab' after rotating the second one by 180 degrees).


______________________________________________________
ORDERS||||||true||||||


<p>As you are probably well aware, in Byteland it is always the military officer's main worry to order his soldiers on parade correctly. In Bitland ordering soldiers is not really such a problem. If a platoon consists of n men, all of them have different rank (from 1 - lowest to n - highest) and on parade they should be lined up from left to right in increasing order of rank.
</p>
<p>
Sounds simple, doesn't it? Well, Msgt Johnny thought the same, until one day he was faced with a new command. He soon discovered that his elite commandos preferred to do the fighting, and leave the thinking to their superiors. So, when at the first rollcall the soldiers lined up in fairly random order it was not because of their lack of discipline, but simply because they couldn't work out how to form a line in correct order of ranks. Msgt Johnny was not at all amused, particularly as he soon found that none of the soldiers even remembered his own rank. Over the years of service every soldier had only learned which of the other soldiers were his superiors. But Msgt Johnny was not a man to give up easily when faced with a true military challenge. After a moment's thought a solution of brilliant simplicity struck him and he issued the following order: <tt>"men, starting from the left, one by one, do: (step forward; go left until there is no superior to the left of you; get back in line)."</tt>. This did indeed get the men sorted in a few minutes. The problem was solved... for the time being.
</p>
<p>
The next day, the soldiers came in exactly the same order as the day before, and had to be rearranged using the same method. History repeated. After some weeks, Msgt Johnny managed to force each of his soldiers to remember how many men he passed when going left, and thus make the sorting process even faster.
</p>
<p>
If you know how many positions each man has to walk to the left, can you try to find out what order of ranks the soldiers initially line up in?


*******InputConstraints*******

<p>The first line of input contains an integer t<=50, the number of test cases. It is followed by t test cases, each consisting of 2 lines. The first line contains a single integer n (1<=n<=200000). The second line contains n space separated integers w<sub>i</sub>, denoting how far the i-th soldier in line must walk to the left when applying Msgt Johnny's algorithm.


*******OutputConstraints*******

<p>For each test case, output a single line consisting of n space separated integers - the ranks of the soldiers, given from left to right in their initial arrangement.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
0 1 0
5
0 1 2 0 1

<b>Output:</b>
2 1 3
3 2 1 5 4
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SHAMAN||||||true||||||


<p>In the far bare land there lives a mysterious tribe. They suffer from drought every year but they stick to their faith in god that they will never leave their home land. To counter the dry weather the shamans in the tribe must pray during the hard time and hope the blessed rain will aid their production of food.
<p>There are 4 chief shamans in the tribe and each of them will choose a summit in the territory to proceed with his praying. The area in which the shamans' spells take effect will be the quadrangle they form, each of them being one of its vertices (which the god will see when he looks down from the high heavens). The land is quite full of pinch and punch and the tribe has selected quite a few peaks for the shamans to pray on. Of course the area of the quadrangle is expected to be as large as possible so before the shamans actually go out, they will have to choose the 4 peaks that best suit their purpose.


*******InputConstraints*******

<p>One integer in the first line, stating the number of test cases, followed by a blank line. There will be not more than 80 tests.
<p>For each test case, the first line is an integer n (4 <= n <= 2000) stating the number of peaks. Then n lines follow, each presenting the position of a peak, with two integers x, y (-20000 <= x, y <= 20000).
<p>The test cases will be separated by a single blank line.


*******OutputConstraints*******

<p>A floating point number with exactly 1 digit precision: the maximum area the shamans can cover.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

4
0 0
1 0
1 1
0 1

4
0 0
0 1
1 1
1 0

<b>Output:</b>
1.0
1.0
</pre>



______________________________________________________
SORTING||||||true||||||


<p>&nbsp;</p>
<div>Do you think sorting is easy?<br /><br /> <span style="font-size: small;">try your luck<br /> in brainfuck</span></div>
<p>&nbsp;</p>
<p><strong>For those who don't know that brainfuck is a programming language: Take a look at the <a href="http://www.esoteric.sange.fi/brainfuck/impl/compilers/BF2C.c">converter to C</a>. It will ignore every unknown command, therefore submitting a program in any other language won't necessarily lead to compile error, but certainly not to Accepted.</strong></p>

*******InputConstraints*******

<p>The input consists of a line of up to 1000 uppercase letters, terminated with a '\n' character (ASCII value 10).</p>

*******OutputConstraints*******

<p>The output should contain a line consisting of the same characters as the input line, but in non-descending order.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

BRAINFUCK

<strong>Output:</strong>

ABCFIKNRU

</pre>


______________________________________________________
ZEBRA||||||true||||||


<p>Have you ever wondered why people collide with each other at pedestrian crossings? The reasons are probably difficult to analyse from a scientific point of view, but we can hazard a guess. A part of the problem seems to be that the statistical pedestrian, when faced with a red light, will either cross at once (this category of pedestrians doesn't really interest us, since they tend to collide with cars rather than with each other), or will stop dead and stand still until the light changes. Only when the light turns green does he begin to act rationally and heads for his destination using the shortest possible path. Since this usually involves crossing the road slightly on the bias, he will inevitably bump into someone going across and heading another way.
<p>
One day, while you are approaching the traffic lights you usually cross at, you begin to wonder how many other people you could possibly collide with if you really wanted. All the people are standing at different points on the same side of the street as you are. From past observations you can predict the exact angle and speed at which individual pedestrians are going to cross. You can decide at which point along the side of the street you will wait for the green light (any real coordinate other than a place where some other pedestrian is already standing) and at what angle and at what speed you intend to cross. There is an upper bound on the speed you may cross at.
<p>Assume that once the light turns green, all pedestrians start moving along straight lines, at constant speed, and that collisions, however painful they may be, have no effect on their further progress. Since you wouldn't like to arouse anyone's suspicions, you also have to cross in accordance with these rules. A collision only occurs if at a given moment of time you have exactly the same x and y coordinates as some other pedestrian.


*******InputConstraints*******

<p>Input starts with a single integer t, the number of test cases (t<=100). t test cases follow.
<p>Each test case begins with a line containing three integers n w v, denoting the number of people other than you who wish to cross the street, the width of the street expressed in meters, and the maximum speed you can walk at given in meters per second, respectively (1<=n<=10000, 1<=w<=100, 1<=v<=10000). Each of the next n lines contains three integers x<sub>i</sub> t<sub>i</sub> a<sub>i</sub>, which describe the starting position of the i-th pedestrian measured in meters, the time (in seconds) he takes to cross the street, and the 
angle at which he is walking with respect to the line normal to the sides of the street, expressed in 1/60 parts of a degree (-10000<=x<sub>i</sub><=10000, 1<=t<sub>i</sub><=10000, -5000<=a<sub>i</sub><=5000).</p>

<img src="http://www.spoj.pl/content/adrian:zebra.png" alt="Illustration of problem input"/>


*******OutputConstraints*******

<p>For each test case output a single integer -- the maximum number of people you can collide with by the time you reach the opposite side of the street.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 20 2
-20 10 2700
20 10 -2700
-5 1 4000
-4 1 4000
5 1 -4000

<b>Output:</b>
2
</pre>

<p>(In the example, due to the imposed speed limit, it is only possible to collide with the first two pedestrians while crossing the street, at the last possible moment.)


______________________________________________________
HOLIDAY1||||||true||||||


<p>King Johnny of Byteland has in his short period of sovereignty established quite a few national holidays (close on thirty, in fact) in honour of... more or less anything he could think of. Each of these holidays occurs every a fixed number of days (possibly different for every holiday), and is accompanied by feasts, cabaret shows, and general merrymaking. Sometimes more than one holiday occurs on a single day, and once in a while all holidays take place on the same day. If this happens, the celebrations are combined and even more festive. After one such party, king Johnny started behaving strangely and had to be temporarily isolated from society.
<p>
For the period of king Johnny's absence (about 48 hours) you have been appointed Regent of Byteland. As a true patriot, you know that holidays are not good for the people, and would like to remove some before king Johnny returns (he won't mind, he never remembers anything after a party anyway). The people however, very sadly, don't know what is good for them, and will revolt if you remove more than k holidays. Try to choose the holidays you remove in such a way as to guarantee that the number of days which elapse between two consecutive holiday parties is as long as possible.
<p>
<b>Solve the problem in at most 4kB of source code.</b>


*******InputConstraints*******

<p>The first line of input contains a single integer t<=200 - the number of test cases. t test case descriptions follow.
<p>
For each test case, the first line contains two space separated integers n k (1<=k < n<=30), denoting the total number of holidays and the number of holidays to be removed. The next line contains n space separated integers, the i-th being t<sub>i</sub> (1<=t<sub>i</sub><=10<sup>18</sup>) - the number of days every which the i-th holiday occurs.

*******OutputConstraints*******

<p>For each test case, output one line containing an increasing sequence of exactly k integers - the numbers of the holidays to be removed (holidays are numbered in the input order from 1 to n).


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 2
6 13 10 15 7

<b>Output:</b>
2 5
</pre>
<p>
(The shortest period between two successive holiday parties is 2 days.)



______________________________________________________
VFMUL||||||true||||||


</p><p align="justify">
Multiply the given numbers.
</p>

*******InputConstraints*******

<p align="justify">
</p><pre><i>n</i> [the number of multiplications <= 101]

<i>l1 l2</i> [numbers to multiply (at most 300000 decimal digits each)]
<p align="left">
Text grouped in [ ] does not appear in the input file.
</p>
</pre>
<p></p>

*******OutputConstraints*******

<p align="justify">
</p><pre>The results of multiplications.
</pre>
<p></p>

*******IOTestCases*******

<pre>Input:
5
4 2
123 43
324 342
0 12
9999 12345

Output:
8
5289
110808
0
123437655

</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>




______________________________________________________
ROMAN||||||true||||||


<p>
Given the number n of test cases, convert n positive integers less than 2^32 (given one per line) from one representation to another.
For convenience, n is given in the same format as the other numbers.


*******InputConstraints*******

<p>
Input is given by spelling the number in english digits (all upper case letters). Thus the range of (32-bit) input values permissible extends from ZERO (or OH) through FOUR TWO NINE FOUR NINE SIX SEVEN TWO NINE FIVE.


*******OutputConstraints*******

<p>
Output 2 lines for each test case.
Output is in the form of "extended" Roman numerals (also called "butchered" Roman numerals), with an overline (see sample for details) indicating the value below is "times 1000", and lower-case letters indicating "times 1000000". Thus, the range of (32-bit) output values possible is from through ivccxcivCMLXVIICCXCV, where there is a line above iv and CMLXVII. Note: For values whose residues modulo 1000000 are less than 4000, M is used to represent 1000; for values whose residues are 4000 or greater, I is used. Thus 3999 would read out as MMMCMXCIX while 4000 would readout as IV with an overline. Similar rules apply to the use of M and i for 1000000, and to that of m and i for 1000000000.

<p>
<b> WARNING: This problem has a somewhat strict source limit </b>


*******IOTestCases*******

<pre>
<b>Input:</b>
THREE
FOUR OH
ONE NINE NINE NINE NINE NINE NINE NINE NINE NINE
ONE TWO THREE ZERO FOUR FIVE

<b>Output:</b>
  
XL
       ______      
mcmxcixCMXCIXCMXCIX
___      
CXXMMMXLV
</pre>



______________________________________________________
SUMITR||||||true||||||


<p>
Let us consider a triangle of numbers in which a number appears in the first line, two 
numbers appear in the second line etc. Develop a program which will compute the largest 
of the sums of numbers that appear on the paths starting from the top
towards the base, so that:
<ul>
<li> on each path the next number is located on the row below, more precisely 
either directly below or below and one place to the right;
</li>
<li>
the number of rows is strictly positive, but less than 100;
</li>
<li> all numbers are positive integers between O and 99.
</li>
</ul>
<p>
Take care about your fingers, do not use more than <b>256</b> bytes of code. 


*******InputConstraints*******

<p>
In the first line integer n - the number of test cases (equal to about 1000). 
Then n test cases follow. Each test case starts with the number of lines which is followed by their content.

*******OutputConstraints*******

<p>
For each test case write the determined value in a separate line. 



*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
1
2 1
1 2 3
4 
1 
1 2 
4 1 2
2 3 1 1 

<b>Output:</b>
5
9
</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>



______________________________________________________
HOLIDAY2||||||true||||||


<p>As King Johnny's temporary indisposition lengthens from days to weeks, and you still hold the office of Regent of Byteland, you begin to feel that acting king is not all that much fun. You encounter various absurdly weird problems. For instance, you find that contrary to your expectations the recent removal of holidays brought about a decrease in the efficiency of the kingdom's workforce.
<p>
There appears to be only one rational explanation for all this. It seems that although every holiday occurs every a fixed number of days, the periods between consecutive holidays are long and very irregular. And it is the lack of regularity that is the root of the problem.
<p>
So, you decide it is time to tackle the problem once again, and solve it properly this time. 
Your main purpose is to establish an r-day working rhythm (for some integer r). Workers will work for (r-1) days, have a single day off, work for another (r-1) days, and so on. The rhythm must be arranged in such a way that holidays only ever occur on the day off work. Choose exactly k of the n holidays to remove in such a way as to be able to establish a working rhythm of the maximum possible length r.
<p>
<b>Solve the problem in at most 4kB of source code.</b>


*******InputConstraints*******

<p>The first line of input contains a single integer t<=100 - the number of test cases. t test case descriptions follow.
<p>
For each test case, the first line contains two space separated integers n k (1<=k < n<=100), denoting the total number of holidays and the number of holidays to be removed. The next line contains n space separated integers, the i-th being t<sub>i</sub> (1<=t<sub>i</sub><=10<sup>18</sup>) - the number of days every which the i-th holiday occurs.

*******OutputConstraints*******

<p>For each test case, output one line containing an increasing sequence of exactly k integers - the numbers of the holidays to be removed (holidays are numbered in the input order from 1 to n).


*******IOTestCases*******


<pre>
<b>Input:</b>
2
6 4
1 3 4 5 6 1
8 4
200 125 200 999 380 500 200 500

<b>Output:</b>
1 3 4 6
2 4 5 6
</pre>
<p>
(In the first test case r is equal to 3 days, in the second case it is equal to 100 days. For the second test case the output '1 2 4 5', '2 3 4 5', '2 4 5 6', '2 4 5 7' or '2 4 5 8' is also correct.)



______________________________________________________
BTOUR||||||true||||||


<p>As the mayor of Byteland's term of office draws to a close, he starts his preparations for reelection. For the first time in the 40 years of his political career his chances of victory seem somewhat uncertain. His main cause of worry are the disturbing results of an opinion poll which state that over 90% of the citizens regard the mayor as a portly, heavily smoking individual who sleeps in his armchair more or less all day.
<p>
After careful consultation with his public relations director, the mayor has decided to change his image. He is going to organise, sponsor and compete in... Byteland's first bicycle race! Quite naturally, the only relevant part of the race is the media coverage of the mayor; everything else is to be done at minimum cost. The street-map of Byteland consists of a not necessarily planar system of bi-directional street segments connecting intersections, in such a way that between 0 and 4 street segments meet at an intersection. The cyclists are to ride round and round a simple loop (a fixed, closed route consisting of several street segments, such that a cyclist goes along a street and through an intersection exactly once in each round). For innumerable reasons (not so difficult to guess at) the mayor would like to choose the shortest possible route for the race (in the sense of total street length). Help him determine the length of such a loop, and tell him how many different shortest loops he can choose from when organising the race.

*******InputConstraints*******

<p>The input starts with a line containing a single integer t<=200, the number of test cases. t test cases follow.
<p>
Each test case begins with a line with two integers n m, denoting the number of intersections and the number of streets in Byteland, respectively (1<=n<=1000). m lines follow, each containing three integers u<sub>i</sub> v<sub>i</sub> d<sub>i</sub>, denoting the end points and the length of the i-th street segment, respectively (1<=u<sub>i</sub><=v<sub>i</sub><=n, 1<=d<sub>i</sub><=10<sup>6</sup>).


*******OutputConstraints*******

<p>For each test case output a single line containing exactly two space separated non-negative integers d c - the length of the shortest possible race loop, and the number of routes of this length in the graph. Output 0 0 if the race cannot be held.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 2
1 2 1
1 3 2
4 6
1 2 5
1 4 5
2 3 4
2 4 5
3 4 5
3 1 5

<b>Output:</b>
0 0
14 2
</pre>



______________________________________________________
BLOCKS||||||true||||||


<p>A group of n children are playing with a set of n<sup>2</sup> flat square blocks. Each block is painted from above with one colour, and 
there are no more than 2 blocks of each colour. The blocks are initially arranged in an n x n square forming some sort of picture.
<p>
The children have been provided with some other n x n picture and asked to rearrange the blocks to that form. Since this is not really what they enjoy doing most, they intend to solve the task together and spend as little time on it as possible. Thus, every minute each child chooses a single 1 x n row or n x 1 column of blocks to rearrange. This row/column may never intersect with rows/columns chosen by other children in the same minute. A child takes one minute to perform any rearrangement (permutation) of the blocks within its row/column it likes.
<p>
Determine whether the children can perform their task of converting one block image into the other, and if so -- find the minimum possible time in minutes required to achieve this.


*******InputConstraints*******

<p>
The input starts with a line containing a single integer t<=200, the number of test cases. t test cases follow. 

Each test case begins with a line containing integer n (1<=n<=500). The next n lines contain n integers P<sub>i,j</sub> each, forming a bitmap matrix representing the colours of the blocks in their initial configuration (1<=P<sub>i,j</sub><=n<sup>2</sup>). The following n lines contain n integers Q<sub>i,j</sub> each, corresponding to the matrix for the final configuration (1<=Q<sub>i,j</sub><=n<sup>2</sup>). 


*******OutputConstraints*******

<p>For each test case output a line with a single non-negative integer corresponding to the number of minutes required to transform matrix P into matrix Q, or the word <tt>no</tt> if no such transformation is possible.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3
1 3 4
2 1 3
2 5 5
3 1 3
2 1 2
4 5 5
3
1 2 3
4 5 6
7 8 9
1 5 6
4 2 9
7 8 3
2
1 2
1 2
1 3
1 2

<b>Output:</b>
2
1
no
</pre>

<p>
The actions taken in the first test case are illustrated below.
<p>
<img src="http://www.spoj.pl/content/adrian:blocks.png" alt="2 step transformation: 134 213 255 -> 413 312 255 -> 313 212 455"/>
</p>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
STABLEMP||||||true||||||


<p>There are given <i>n</i> men and <i>n</i> women.
Each woman ranks all men in order of her preference
(her first choice, her second choice, and so on).
Similarly, each man sorts all women according to
his preference. The goal is to arrange <i>n</i>
marriages in such a way that if a man <i>m</i>
prefers some woman <i>w</i> more than his wife, then
<i>w</i> likes her husband more than <i>m</i>.
In this way, no one leaves his partner to marry
somebody else. This problem always has a solution
and your task is to find one.


*******InputConstraints*******

<p>The first line contains a positive integer <i>t</i><=100
indicating the number of test cases. Each test case is an
instance of the stable marriage problem defined above.
The first line of each test case is a positive integer
<i>n</i><=500 (the number of marriages to find).
The next <i>n</i> lines are the woman's preferences: <i>i</i>th
line contains the number <i>i</i> (which means that this is the list given
by the <i>i</i>th woman) and the numbers of men
(the first choice of <i>i</i>th woman, the second choice,...).
Then, the men's preferences follow in the same format.


*******OutputConstraints*******

<p>For each test case print <i>n</i> lines, where each line
contains two numbers <i>m</i> and <i>w</i>, which means that
the man number <i>m</i> and the woman number <i>w</i> should get married.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
1 4 3 1 2
2 2 1 3 4
3 1 3 4 2
4 4 3 1 2
1 3 2 4 1
2 2 3 1 4
3 3 1 2 4
4 3 2 4 1
7
1 3 4 2 1 6 7 5
2 6 4 2 3 5 1 7
3 6 3 5 7 2 4 1
4 1 6 3 2 4 7 5
5 1 6 5 3 4 7 2
6 1 7 3 4 5 6 2
7 5 6 2 4 3 7 1
1 4 5 3 7 2 6 1
2 5 6 4 7 3 2 1
3 1 6 5 4 3 7 2
4 3 5 6 7 2 4 1
5 1 7 6 4 3 5 2
6 6 3 7 5 2 4 1
7 1 7 4 2 6 5 3



<b>Output:</b>
1 3
2 2
3 1
4 4
1 4
2 5
3 1
4 3
5 7
6 6
7 2

</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
SQRROOT||||||true||||||


<p>In this problem you have to find the Square Root for given number. You may assume that such 
a number exist and it will be always an integer.
</p>
<p>
<b>Solutions to this problem can be submitted in C, C++, Pascal, Algol, Fortran, Ada, Ocaml, Prolog, Whitespace, Brainf**k and Intercal only.
</b>
</p>


*******InputConstraints*******

<p> <i>t</i> - the number of test cases [t <= 50]<BR>
 then <i>t</i> positive numbers follow, each of them have up to 800 digits in decimal 
representation.<BR>


*******OutputConstraints*******

<p>Output must contain exactly t numbers equal to the square root for given numbers. See sample input/output for details.<BR>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
36
81
226576

<b>Output:</b>
6
9
476
</pre>



______________________________________________________
CHOCOLA||||||true||||||


<p align="justify">
<p>
     We are given a bar of chocolate composed of <i>m*n</i> square pieces. One should break the chocolate into single squares. Parts of the chocolate may be broken along the vertical and horizontal lines as indicated by the broken lines in the picture. 
</p>
<p>
     A single break of a part of the chocolate along a chosen vertical or horizontal line divides that part into two smaller ones. Each break of a part of the chocolate is charged a cost expressed by a positive integer. This cost does not depend on the size of the part that is being broken but only depends on the line the break goes along. Let us denote the costs of breaking along consecutive vertical lines with <i>x</i><sub>1</sub>, <i>x</i><sub>2</sub>, ...,
<i>x</i><sub><i>m</i>-1</sub> and along horizontal lines with
<i>y</i><sub>1</sub>, <i>y</i><sub>2</sub>, ...,
<i>y</i><sub><i>n</i>-1</sub>. 
</p>
<p>
     The cost of breaking the whole bar into single squares is the sum of the successive breaks. One should compute the minimal cost of breaking the whole chocolate into single squares.
</p>
<img src="http://www.spoj.pl/content/thanhvy:chocolate.jpg">

<p>
For example, if we break the chocolate presented in the picture first along the horizontal lines, and next each obtained part along vertical lines then the cost of that breaking will be <i>y</i><sub>1</sub>+<i>y</i><sub>2</sub>+<i>y</i><sub>3</sub>+4*(<i>x</i><sub>1</sub>+<i>x</i><sub>2</sub>+<i>x</i><sub>3</sub>+<i>x</i><sub>4</sub>+<i>x</i><sub>5</sub>).
</p> 

<h3>Task</h3>
<p align="justify">Write a program that for each test case:</p>
<div align="justify">
<ul align="justify">
     <li align="justify">Reads the numbers <i>x</i><sub>1</sub>, <i>x</i><sub>2</sub>, ...,
<i>x</i><sub><i>m</i>-1</sub> and <i>y</i><sub>1</sub>,
<i>y</i><sub>2</sub>, ..., <i>y</i><sub><i>n</i>-1</sub> </li>
     <li align="justify"> Computes the minimal cost of breaking the whole chocolate into single squares, writes the result. </li>
</ul></div>


*******InputConstraints*******

<p>
One integer in the first line, stating the number of test cases, followed by a blank line. There will be not more than 20 tests.
</p>
<p>
For each test case, at the first line there are two positive
integers <i>m</i> and <i>n</i> separated by a single space, 2 <=
<i>m</i>,<i>n</i> <= 1000. In the successive <i>m</i>-1 lines there
are numbers <i>x</i><sub>1</sub>, <i>x</i><sub>2</sub>, ...,
<i>x</i><sub><i>m</i>-1</sub>, one per line, 1 <=
<i>x</i><sub><i>i</i></sub> <= 1000. In the successive <i>n</i>-1 lines there
are numbers <i>y</i><sub>1</sub>, <i>y</i><sub>2</sub>, ...,
<i>y</i><sub><i>n</i>-1</sub>, one per line, 1 <=
<i>y</i><sub>i</sub> <= 1000.
</p>
<p>
The test cases will be separated by a single blank line. 
</p>


*******OutputConstraints*******

<p>
For each test case : write one integer - the minimal cost of breaking the whole chocolate into single squares. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1

6 4
2
1
3
1
4
4
1
2

<b>Output:</b>
42
</pre>



______________________________________________________
CTAIN||||||true||||||


<p>
   <p>We are given <i>n</i> containers, where 1 <= <i>n</i> <= 4. At
        the beginning all of them are full of water. The liter capacity of the <i>i</i>-th
        container is a natural number <i>o</i><sub><i>i</i> </sub>satisfying
        inequalities 1 <= <i>o<sub>i</sub> </i><= 49.A <br>
        Three kinds of moves can be made: A 
        <ol type="1">
          <li>Pouring the whole content of one container into another. This move
            can be made unless there is too little room in the second container.A 
          <li>Filling up one container with part of the water from another one.
          <li>Pouring away the whole content of one container into a drain.A <br>
          </li>
        </ol>
</p>
<h3>Task</h3>
<p>
  <p>Write a program that for each test case:</p>
        <ul type="disc">
          <li>Reads the number of containers <i>n</i>, the capacity of each container and the requested final amount of water in each container.
          <li>Verifies, whether there exist a series of moves which leads to the        requested final situation, and if there is one, the program computes the minimal number of moves leading to the requested situation,  <li>Writes the result. The result should be the minimal number of moves leading to the requested final situation, or one word "NO" if there is no such a sequence of moves.</li>
        </ul>
</p>


*******InputConstraints*******

<p>One integer in the first line, stating the number of test cases, followed by a blank line. There will be not more than 20 tests.</p>
<p>For each test case, at the first line, one positive integer <i>n</i>
        is written, <i>n</i> <= 4, this is the number of containers. There
        are <i>n</i> positive integers written in the second line. These are the
        capacities of the containers (the <i>i</i>-th integer <i>o</i><sub><i>i</i></sub>
        denotes the capacity if the <i>i</i>-thA  container,1 <= <i>o</i><sub><i>i</i></sub>
        <= 49). In the third line there are written <i>n</i>
        numbers. These are the requested final volumes of water in the
        containers (the <i>i</i>-th integer <i>w</i><sub><i>i</i></sub> denotes
        the requested final volume of water in the <i>i</i>-th container, 0
        <= <i>w</i><sub><i>i</i></sub> <= <i>o</i><sub><i>i</i></sub>).
        All integers in the second and the third line are separated by single
        spaces.</p>
<p>The test cases will be separated by a single blank line. </p> 


*******OutputConstraints*******

<p>For each test case : write one integer - the minimal number of moves which lead to the requested final situation or write only one word "NO" if it is not possible to reach the requested final situation making only allowed moves.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

3
3 5 5
0 0 4

2
20 25
10 16

<b>Output:</b>
6
NO
</pre>



______________________________________________________
TRIPART||||||true||||||


<p>
A triangle can be divided into two equal triangles by drawing a median on its largest edge (in the figure below such a division is shown with the red line). Then the smaller two triangles can be divided in similar fashion into equal triangles (shown in the picture below with blue lines). This process can continue forever.
</p>
<img src="http://www.spoj.pl/content/thanhvy:tripart.jpg">
<p>
Some mathematicians have found that when we split a triangle into smaller ones using the method specified above we have only some "styles" of triangles that only differ in size. So now given the lengths of the sides of the triangle your job is to find out how many different styles of small triangles we have. (Two triangles are of same style if they are similar.)
</p>


*******InputConstraints*******

<p>
First line of the input file contains an integer <i>N (0 < N < 35)</i> that indicates how many lines of input there are.
</p>
<p>
Each line contains three integers <i>a, b, c (0 < a,b,c < 100)</i> which indicate the sides of a valid triangle. (A valid triangle means a real triangle with positive area.)
</p>


*******OutputConstraints*******

<p>
For each line of input you should produce an integer <i>T</i>, which indicates the number of different styles of small triangles, formed for the triangle at input. Look at the example for details. You can safely assume that for any triangle <i>T</i> will be less than <i>100</i>.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 4 5
12 84 90

<b>Output:</b>
3
41
</pre>



______________________________________________________
CONNECT||||||true||||||


<p>
Byteotian Ministry of Infrastructure has decided to create a computer program
that helps to find quickly the lengths of routes between arbitrary towns. It
would be small wonder if the inhabitants of Byteotia always wanted to find the
shortest route. However, it happens that they want to know the <i>k</i>-th
shortest route. Moreover, cycles in routes are possible, i.e. routes that have
recurring towns.
</p>
<p>
For example, if there are 4 routes between two towns and their lengths are 2, 4, 4 and 5, then the length of the shortest connection is 2, the second shortest is 4, the third is 4, and the fourth is 5.
</p>

<h3>Task</h3>
<p>
Write a program that for each test case:
<ul>
  <li>Reads a description of Byteotian road network and
    queries concerning lengths of journey routes.
  <li>Computes and writes answers to the queries read.</li>
</ul>
</p>


*******InputConstraints*******

<p>
One integer in the first line, stating the number of test cases, followed by a blank line. There will be not more than 15 tests. 
</p>

<p>
For each test case, at the first line, there are two positive integers <i>n</i> and <i>m</i>, separated by a single space, 1 <= <i>n</i> <= 100, 0 <= <i>m</i>
<= <i>n</i><sup>2</sup>-<i>n</i>. They are the number of towns in Byteotia and the number of roads connecting the towns, respectively. The towns are numbered from 1 to <i>n</i>.
</p>
<p>
In each of <i>m</i> successive lines there are three integers separated by single spaces: <i>a</i>, <i>b</i> and <i>l</i>, <i>a</i> <> <i>b</i>, 1
<= <i>l</i> <= 500. Each triple describes one one-way road of length <i>l</i>
enabling to move from the town <i>a</i> to <i>b</i>. For each two towns there
exist at most one road that enables to move in the given direction.
</p>
<p>
In the following line there is one integer <i>q</i>, 1 <= <i>q</i> <= 10000, denoting the number of queries. In the successive <i>q</i> lines there are queries written, one per line. Each query has a form of three integers separated by single spaces: <i>c</i>, <i>d</i> and <i>k</i>, 1 <= <i>k</i> <= 100. Such a query refers to the length of the <i>k</i>-th shortest route from the town <i>c</i> to the town <i>d</i>.
</p>
<p>
The test cases will be separated by a single blank line. 
</p>


*******OutputConstraints*******

<p>
For each test case, your program should write the answers to the queries read, one answer per line. In the i-th line the answer to the i-th query should be written: one integer equal to the length of the route being sought or -1, when such a route does not exist.
</p>
<p>
Each test case should be separated by a single blank line. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1

5 5
1 2 3
2 3 2
3 2 1
1 3 10
1 4 1
8
1 3 1
1 3 2
1 3 3
1 4 2
2 5 1
2 2 1
2 2 2
1 1 2

<b>Output:</b>
5
8
10
-1
-1
3
6
-1
</pre>



______________________________________________________
PERIOD||||||true||||||


<p>
For each prefix of a given string <b><i>S </i></b>with <b><i>N </i></b>characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each <b><i>i </i></b>(2 <= <b><i>i </i></b> <= <b><i>N</i></b>) we want to know the largest <b><i>K </i></b>> 1 (if there is one) such that the prefix of <b><I>S </i></b>with length <b><i>i </i></b>can be written as <b><i>A</i><Sup><I>K </i></Sup></b>, that is <b><i>A </i></b>concatenated <b><i>K </i></b>times, for some string <b><i>A</I></b>. Of course, we also want to know the period <b><i>K</i></b>.
</p>


*******InputConstraints*******

<p>
The first line of the input file will
contains only the number <i>T (1 <= T <= 10) </i> of the test cases.
</p>
<p>
Each test case consists of two
lines. The first one contains <b><i>N</i></b> (2 <= <b><i>N</i></b> <= 1 000 000) &#8211; the size of the string <b><i>S</i></b>.
The second line contains the string <b><i>S</i></b>.
</p>


*******OutputConstraints*******

<p>
For each test case, output &#8220;Test case #&#8221; and the consecutive test case
number on a single line; then, for each prefix with length <b>i</b> that has a period <b>K</b> > 1, output the prefix size <b>i</b> and the period <b>K</b> separated by a single space; the
prefix sizes must be in increasing order. Print a blank line after each test case.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
aaa
12
aabaabaabaab

<b>Output:</b>
Test case #1
2 2
3 3

Test case #2
2 2
6 2
9 3
12 4

</pre>



______________________________________________________
CORNET||||||true||||||


<p>
A very big corporation is developing its corporate network. At the beginning, each of the <b>N </b>enterprises of the corporation, numbered from 1 to <b>N</b>, organized its own computing and telecommunication center. Soon, for amelioration of the services, the corporation started to collect some enterprises in clusters, each of them served by a single computing and telecommunication center as follows. The corporation chose one of the existing centers <b>I </b>(serving the cluster <b>A</b>) and one of the enterprises <b>J </b>in some other cluster <b>B </b>(not necessarily the center) and linked them with a telecommunication line. The length of the line between the enterprises <b>I </b>and <b>J </b>is |<b>I </B>&#8211; <b>J</b>|(mod 1000). In such a way two old clusters are joined to form a new cluster, served by the center of the old cluster <b>B</b>. Unfortunately after each join the sum of the lengths of the lines linking an enterprise to its serving center could be changed and the end users would like to know what is the new length.</p>
<p>Write a program to keep trace of the changes in the organization of the network that is able at each moment to answer the questions of the users.
</p>


*******InputConstraints*******

<p>
The first line of the input file will contains only the number <B>T </B>of the test cases (1 <= <b>T</b> <= 5). Each test will start with the number <b>N </b>of enterprises (5<=<b>N</b><=20000). Then some number of lines (no more than 200000) will follow with one of the commands:
</p>
<p>
<b>E I</b>&#8211; asking the length of the path from the enterprise <b>I </b>to its serving center at the moment; <b>I I J </b>&#8211; informing that the serving center <b>I </b>is linked to the enterprise <b>J</b>. The test case finishes with a line containing the word <b>O</b>. There are fewer <b>I </b>commands than <b>N</b> commands.
</p>


*******OutputConstraints*******

<p>
The output should contain as many lines as the number of <b>E </b>commands in all test cases. Each line must contain a single number &#8211; the requested sum of lengths of lines connecting the corresponding enterprise with its serving center. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
E 3
I 3 1
E 3
I 1 2
E 3
I 2 4
E 3
O

<b>Output:</b>
0
2
3
5
</pre>



______________________________________________________
CAVE||||||true||||||


<p>A long time ago one man said that he had explored the corridors of one cave. This means that he was in all corridors of the cave. Corridors are really horizontal or vertical segments. A corridor is treated as visited if he was in at least one point of the corridor.</p>
<p>Now you want to know if this is true. You have a map of the cave, and you know that the explorer used the following algorithm: he turns left if he can, if he can't he goes straight, if he can't he turns right, if he can't he turns back. Exploration ends when the man reaches the entry point for the second time. Your task to count how many corridors weren't visited by explorer.</p>


*******InputConstraints*******

<p>In the first line there is an integer <b>T (T <= 20)</b> - the number of different maps. For each map in the first line there is an integer <b>N (N <= 1000)</b> - the number of corridors. It is known that no two vertical corridors have a common point and no two horizontal corridors have a common point. The next <b>N</b> lines contain the following information: the line starts with one of the characters 'V' or 'H' - vertical or horizontal corridor. Then one Y-coordinate and two X-coordinates are given for a horizontal corridor or one X-coordinate and two Y-coordinates for a vertical corridor. The last line for each map contains the X and Y coordinates of the entry point (start and end point of travel) and the direction ('W' - left, 'E' - right, 'N' - up and 'S' - down). You may assume that: the entry point is not located at the cross-point of two corridors, and the explorer can always move forward in the direction given in the input. All coordinates are integers and do not exceed <i>32767</i> by absolute value and there are no more than <i>500</i> vertical corridors and no more than <i>500</i> horizontal corridors.</p>


*******OutputConstraints*******

<p>For each map the program has to print the number of unvisited corridors (in a separate line).
</p>


*******IOTestCases*******

<pre>
<b>Input:</b>
2
6
H 0 6 0
H 2 1 6
V 1 0 4
V 5 3 0
V 3 0 2
H 1 2 4
6 0 W
1
V 0 &#8211;5 5
0 0 S

<b>Output:</b>
1
0
</pre>
<p>
<img src="http://www.spoj.pl/content/thanhvy:cave.jpg" alt="An example of a cave"/>
</p>



______________________________________________________
WMELON||||||true||||||


<p>Shortly after his abdication from the Bytelandian throne Johnny decided to go into farming. Water melons were a natural choice as his first crop ever, since they seemed easy enough to grow and look after. So, he sold all his beer bottles and for the money he purchased a 1km x 1km square field. Here it was that he planted the water melon seeds. (The word 'planted' is really a bit of a euphemism for walking across a field gorging on a water melon and spitting out the pips but, for the sake of politeness, let us leave it this way).
<p>
To everyone's surprise a lot of the seeds sprouted stems, and soon enough many of the plants showed signs of fruit (and some had even more than one!). Then quite unexpectedly, when the water melons were still a little too unripe to eat, winter set in. Johnny knows that he has to construct a green house to protect the field but, with his rather limited budget, he cannot afford the glass to cover the whole area. He has decided that it is enough that <i>k</i> fruit survive the ordeal under a glazed roof. For reasons of architectural planning in Byteland it is necessary that the green house be a rectangle with sides parallel to the edges of the plot.
<p>
You have been requested to help Johnny minimise investement costs. Since glass is paid for by the square meter, design a green house with the smallest possible area fulfilling the imposed conditions.


*******InputConstraints*******

<p>The first line of input contains the integer <i>t</i><=100, the number of test cases. <i>t</i> test cases follow.
<p>
Every test case begins with a line containing two integers <i>n k</i>, denoting the total number of plants and the number of water melon fruit to be protected, respectively (1<=<i>n</i><=1000, 1<=<i>k</i><=10<sup>6</sup>, <i>k</i> doesn't exceed the total number of fruit in the plantation). Each of the next <i>n</i> lines describes a single plant, the <i>i</i>-th line containing three integers <i>x<sub>i</sub> y<sub>i</sub> f<sub>i</sub></i> - the X and Y coordinates of the plant, and the number of water melon fruit on it, respectively (1<=<i>x<sub>i</sub>, y<sub>i</sub>, f<sub>i</sub></i><=1000).


*******OutputConstraints*******

<p>For each test case output a single integer, denoting the area of the smallest possible rectangular glass house with horizontal and vertical edges, sufficient to cover at least <i>k</i> fruit of the plantation.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
6 11
1 1 2
1 2 2
3 1 2
3 2 3
4 2 5
3 3 2

<b>Output:</b>
2
</pre>
<p>
<img src="http://www.spoj.pl/content/adrian:watermelon.png" alt="Illustration of sample test data"/>


______________________________________________________
WATERWAY||||||true||||||


<p>There is a land far, far away were the entire population dwells in walled cities at the peaks of mountains on the circumference of a plateau known as The Circle. The High Councillors of the cities developed an intricate system of communication: the cities were connected into a cycle by a perfectly round waterway. If need arose, a small paper boat with a message tied to its sail was released into the waterway and was guided by its solitary crew member (a small tin soldier) from one city to the next, and so on, until it reached its destination. Some segments of the waterway were only passable in one direction (due to waterfalls), and so there may have been pairs of cities for which communication was impossible.
<p>
As the centuries went by, the system slowly began to show its weaknesses. The waterway was so narrow that two boats going in opposite directions could never pass each other. To make matters worse, some of the more enterprising cities replaced the tin soldier by a plastic one to increase the speed of the boat, and the faster boats had to queue up behind the slower ones, and everyone got very angry indeed. The councillors gathered to address the problem and found that the best course of action would be to construct two separate channels between every pair of communicating cities A and B: one for carrying messages from A to B, the other from B to A (if communication was impossible in some direction in the old waterway, it needn't be enabled in the new one).
<p>
The High Priests of the Circle were the first to protest against the plan. They insisted that any waterway ever built should be circular and go round all the cities in the same manner as the original one, and the route of any boat must always be a perfect arc between any two adjacent cities. So the newly designed channels would in fact have to be composed of sets of adjacent fragments of circles, without any two channels sharing an arc.
<p>
The engineers have quite rightly pointed out that the new circles will be prone to the same problem of waterfalls on the same sections as the original waterway. Bearing this in mind, given a map of the old waterway, calculate the smallest possible number of circles the new waterway may consist of.



*******InputConstraints*******

<p>Input begins with integer t<=100, the number of test cases. t test cases follow.<p>
Each test case consists of two lines. The first contains a single integer n (3<=n<=100000), the number of cities around the Circle. The second line is a description of the old waterway - a sequence of exactly n characters 'A', 'B' or 'C', without separating spaces, terminated by a new line. These characters correspond to the state of the arcs between cities 1 and 2, 2 and 3,..., n-1 and n, n and 1, respectively, and mean: 'A' - the arc is passable when going anticlockwise, 'B' - the arc is passable in both directions, 'C' - the arc is passable when going clockwise.


*******OutputConstraints*******

<p>For each test case output a line, containing
a single integer - the number of circles required for the new waterway.

*******IOTestCases*******

<pre>
<b>Input:</b>
2
3
AAA
4
BACB

<b>Output:</b>
3
5
</pre>

<p>
A solution to the first test case which requires 3 circles is presented below.<p>
<img src="http://www.spoj.pl/content/adrian:waterway.png" alt="Illustration to test case 1"/>


______________________________________________________
CTGAME||||||true||||||


<p>Bob is a strategy game programming specialist. In his new city building game the gaming environment is as follows: a city is built up by areas, in which there are streets, trees, factories and buildings. There is still some space in the area that is unoccupied. The strategic task of his game is to win as much rent money from these free spaces. To win rent money you must erect buildings, that can only be rectangular, as long and wide as you can. Bob is trying to find a way to build the biggest possible building in each area. But he comes across some problems - he is not allowed to destroy already existing buildings, trees, factories and streets in the area he is building in.</p>
<p>Each area has its width and length. The area is divided into a grid of equal square units.The rent paid for each unit on which you're building stands is 3$.</p>
<p>Your task is to help Bob solve this problem. The whole city is divided into <b>K</b> areas. Each one of the areas is rectangular and has a different grid size with its own length <b>M</b> and width <b>N</b>. The existing occupied units are marked with the symbol <b>R</b>. The unoccupied units are marked with the symbol <b>F</b>.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>K</b> - determining the number of datasets. Next lines contain the area descriptions. One description is defined in the following way: The first line contains two integers-area length <b>M</b><=1000 and width <b>N</b><=1000, separated by a blank space. The next <b>M</b> lines contain <b>N</b> symbols that mark the reserved or free grid units,separated by a blank space. The symbols used are:</p>
<p><b>R</b> - reserved unit</p>
<p><b>F</b> - free unit</p>
<p>In the end of each area description there is a separating line.</p>


*******OutputConstraints*******

<p>For each data set in the input print on a separate line, on the standard output, the integer that represents the profit obtained by erecting the largest building in the area encoded by the data set.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5 6
R F F F F F
F F F F F F
R R R F F F
F F F F F F
F F F F F F

5 5
R R R R R
R R R R R
R R R R R
R R R R R
R R R R R

<b>Output:</b>
45
0
</pre>



______________________________________________________
BICYCLE||||||true||||||


<p>Peter likes to go to school by bicycle. But going by bicycle on sidewalks is forbidden and going along roads is dangerous. That's why Peter travels only along special bicycle lanes. Fortunately Peter's home and school are in the immediate proximity of such paths. In the city where Peter lives there are only two bycycle lanes. Both lanes have the form of a circle. At the points where they cross it is possible to move from one path to the other. Peter knows the point where he enters the road and the point at which it is necessary to leave to enter the school. Peter is interested in the question: "What is the minimal distance he needs to cover along the lanes to get to school?"
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases [<i>t</i><=100],
then <i>t</i> test cases follow. <BR>
The first 2 lines of each test case contain the description of the bicycle lanes:<BR>
<i>x1 y1 r1</i> - 3 integers (<i>x1, y1</i> - coordinates of the center of the 1st circle, <i>r1</i> - radius of 1st circle)<BR>
<i>x2 y2 r2</i> - 3 integers (<i>x2, y2</i> - coordinates of the center of the 2nd circle, <i>r2</i> - radius of 2nd circle)<BR> 
-200 <= <i>x1, x2, y1, y2</i> <= 200<BR>
0 <= <i>r1, r2</i> <= 200<BR>
Next 2 lines contain the coordinates of Peter's home and school:<BR>
<i>px1, py1</i> - 2 real numbers<BR>
<i>px2, py2</i> - 2 real numbers<p>
You may assume that this points lie on the circle with high accuracy (10<sup>-8</sup>). Both points may lie on the same circle.


*******OutputConstraints*******

<p>For each test case output the minimum distance that Peter needs to go from home to get to school. The precision of the answer must be under 0.0001. If it's impossible to get to school using the bicycle lanes output -1.


*******IOTestCases*******

<pre>
<b>Input:</b>
3

0 0 5
4 0 3
3.0 4.0
1.878679656440357 -2.121320343559643

0 0 5
4 0 3
4.0 3.0
4.0 -3.0

0 0 4
10 0 4
4.0 0.0
6.0 0.0

<b>Output:</b>
8.4875540166
6.4350110879
-1
</pre>
<img src="http://www.spoj.pl/content/turbo:bicycle.png" alt="Illustration of sample test data">



______________________________________________________
INUMBER||||||true||||||


<p>For the given number <i>n</i> find the minimal positive integer divisable by <i>n</i>, with the sum of digits equal to <i>n</i>.
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follow. (t <= 50)<BR>
Test case description:<br>
<i>n</i> - integer such that 0 < <i>n</i> <= 1000


*******OutputConstraints*******

<p>For each test case output the required number (without leading zeros).

*******IOTestCases*******

<pre>
<b>Input:</b>
2
1
10

<b>Output:</b>
1
190
</pre>



______________________________________________________
LIFTS||||||true||||||


<p>Serj likes old games very much. Recently he has found one arcade game in his computer. When controlling the hero it is necessary to move on a map and collect various items. At a certain stage of the game Serj has faced an unexpected problem. To continue his adventures the hero should get past over a chasm. For this purpose it is possible to use consistently located lifts which look like horizontal platforms. Each lift moves up-down vertically between some levels. The hero can pass between the next adjacent platform, however it can be done only at the moment when they are at the same level. Similarly, passing from the edge of a chasm onto the lift and vice versa is only possible at the moment when the lift appears on the level of the edge. </p>
<p>
Each lift has a width equal to 4 meters. At the beginning the hero is in at a distance of two meters from the edge of a chasm. He should finish travel two meters after the opposite edge of the chasm. The hero moves at a speed of 2 meters a second. Thus, if the hero is in the initial position or in the center of the lift and wishes to pass to the next lift (or to descend from last lift onto the opposite edge of a chasm), he should begin movement exactly one second before they meet at one level. In two seconds the hero appears in the center of the next lift (or in the final position on the other side).</p>
<p>
The edges of the chasm are at the same level. For each lift the range of heights between which it moves, its initial position and the direction of movement at the initial moment are given. All lifts move with a speed of one meter a second. Find out whether the hero can get over to the opposite edge of the chasm, and if so what the minimal time required for this purpose is.
</p>
<img src="http://www.spoj.pl/content/turbo:lifts.png" alt="A sample illustration">


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follows. <BR>
[empty line]<BR>
A test case begins with <i>n</i> - the number of lifts, a positive integer (<i>n</i> <= 100), then n lines follow. The i-th line (<i>0 < i <= n</i>) contains four integers <i>li ui si di</i>, where:
<i>li</i> - lowest position of the lift, <i>ui</i> - highest position of the lift, 
<i>si</i> - initial position of the lift, 
<i>di</i> - initial direction of movement (1 means up, -1 means down); (-100 <= <i>li</i> <= <i>si</i> <= <i>ui</i> <= 100, <i>l1</i> < <i>ui</i>).


*******OutputConstraints*******

<p>For each test case output the minmal time in seconds, required to get to the opposite edge of the chasm. If it is impossible output -1.<BR>


*******IOTestCases*******

<pre>
<b>Input:</b>
1

4
-1 2 1 -1
0 3 0 1
-4 0 0 -1
-2 1 0 -1
</pre>

<pre>
<b>Output:</b>
29
</pre>



______________________________________________________
MUDDY||||||true||||||


<p>Rain has pummeled on the cows' field, a rectangular grid of R rows and C columns (1 <= R <= 50, 1 <= C <= 50). While good for the grass,
the rain makes some patches of bare earth quite muddy. The cows, being meticulous grazers, don't want to get their hooves dirty while they eat.
<p>

To prevent those muddy hooves, Farmer John will place a number of wooden boards over the muddy parts of the cows' field.  Each of the boards is 1 unit wide, and can be any length long.  Each board must be aligned parallel to one of the sides of the field.<p>

Farmer John wishes to minimize the number of boards needed to cover the muddy spots, some of which might require more than one board to cover.  The boards may not cover any grass and deprive the cows of grazing area but they can overlap each other.<p>

Compute the minimum number of boards FJ requires to cover all the mud in the field.


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follows. <BR>
Each test case is of the following form: <br>
Two space-separated integers: <i>R</i> and <i>C</i>, then R lines follows<BR>
Each line contains a string of C characters, with '*' representing a muddy patch, and '.' representing a grassy patch. No spaces are present.


*******OutputConstraints*******

<p>For each test case output a single integer representing the number of boards FJ needs.<BR>


*******IOTestCases*******

<pre>
<b>Input:</b>
1
4 4
*.*.
.***
***.
..*.

<b>Output:</b>
4

<b>Output details:</b>
Boards 1, 2, 3 and 4 are placed as follows:
1.2.
.333
444.
..2.
Board 2 overlaps boards 3 and 4.
</pre>


______________________________________________________
NAPTIME||||||true||||||


<p>Goneril is a very sleep-deprived cow. Her day is partitioned into
N (3 <= N <= 3,830) equal time periods but she can spend only B (2
<= B < N) not necessarily contiguous periods in bed.  Due to her
bovine hormone levels, each period has its own utility U_i (0 <=
U_i <= 200,000), which is the amount of rest derived from sleeping
during that period.  These utility values are fixed and are independent
of what Goneril chooses to do, including when she decides to be in
bed.<BR><BR>

With the help of her alarm clock, she can choose exactly which
periods to spend in bed and which periods to spend doing more
critical items such as writing papers or watching baseball. However,
she can only get in or out of bed on the boundaries of a period.<BR><BR>

She wants to choose her sleeping periods to maximize the sum of the
utilities over the periods during which she is in bed.  Unfortunately,
every time she climbs in bed, she has to spend the first period
falling asleep and gets no sleep utility from that period.<BR><BR>

The periods wrap around in a circle; if Goneril spends both periods
N and 1 in bed, then she does get sleep utility out of period 1.<BR><BR>

What is the maximum total sleep utility Goneril can achieve?<BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follow. <BR>
Each test case takes the following form:<br>
Two space-separated integers: <i>N</i> and <i>B</i>, then <i>N</i> lines follows<BR>
Each line contains a single integer, <i>U_i</i>, between 0 and 200,000 inclusive <BR>


*******OutputConstraints*******

<p>For each test case output a single integer, the maximum total sleep utility Goneril can achieve. <BR>


*******IOTestCases*******

<pre>
<b>Input:</b>
1
5 3
2
0
3
1
4

<b>Output:</b>
6

<b>Input/Output details:</b>
The day is divided into 5 periods, with utilities 2, 0, 3, 1, 4 in that 
order. Goneril must pick 3 periods.

Goneril can get total utility 6 by being in bed during periods 4,
5, and 1, with utilities 0 [getting to sleep], 4, and 2
respectively.
</pre>



______________________________________________________
SCITIES||||||true||||||


<p>
Far, far away there is a world known as Selfishland because of the nature of its inhabitants. Hard times have forced the cities of Selfishland to
exchange goods among each other. C1 cities are willing to sell some goods and the other C2 cities are willing to buy some goods (each city can either
sell or buy goods, but not both). There would be no problem if not for the selfishness of the cities. Each selling city will sell its goods to one city
only, and each buying city will buy goods from one city only.


<br><br>Your goal is to connect the selfish cities in such a way that the amount of exchanged goods is maximalized.




*******InputConstraints*******

<p>The first line contains a positive integer t<=1000 indicating the number of test cases. Each test case is an instance of the problem defined above. The first line of each test case is a pair of positive integers C1 and C2 (the number of cities wanting to sell their goods C1<=100 and the number of cities wanting to buy goods C2<=100). The lines that follow contain a sequence of (c1,c2,g) trios ending with three zeros. (c1,c2,g) means that the city c1 can offer the city c2 the amount of g<=100 goods.



*******OutputConstraints*******

<p>
For each test case print the maximal amount of goods exchanged.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 2
1 1 10
2 1 19
2 2 11
3 2 1
0 0 0
4 4
1 1 6
1 2 6
2 1 8
2 3 9
2 4 8
3 2 8
4 3 7
0 0 0
3 2
1 1 10
2 1 21
2 2 11
3 2 1
0 0 0

<b>Output:</b>
21
29
22
</pre>



______________________________________________________
NETADMIN||||||true||||||


<p>

The citizens of a small village are tired of being the only inhabitants around without a connection to the Internet. After nominating the future network administrator, his house was connected to the global network. All users that want to have access to the Internet must be connected directly to the admin's house by a single cable (every cable may run underground along streets only, from the admin's house to the user's house). Since the newly appointed administrator wants to have everything under control, he demands that cables of different colors should be used. Moreover, to make troubleshooting easier, he requires that no two cables of the same color go along one stretch of street.
<p>
Your goal is to find the minimum number of cable colors that must be used in order to connect every willing person to the Internet.


*******InputConstraints*******

<p>
<i>t</i> [the number of test cases, t<=500]<br>
<i>n m k</i> [<i>n</i> <=500 the number of houses (the index of the admin's house is 1)]<br>
      [<i>m</i> the number of streets, <i>k</i> the number of houses to connect]<br>
<i>h</i><sub>1</sub> <i>h</i><sub>2</sub> ... <i>h<sub>k</sub></i> [a list of <i>k</i> houses wanting to be conected to the network, 2<=<i>h<sub>i</sub></i><=<i>n</i>]<br>
[The next <i>m</i> lines contain pairs of house numbers describing street ends]<br>
<i>e</i><sub>11</sub> <i>e</i><sub>12</sub><br>
<i>e</i><sub>21</sub> <i>e</i><sub>22</sub><br>
...<br>
<i>e</i><sub><i>m</i>1</sub> <i>e</i><sub><i>m</i>2</sub><br>
[next cases]

*******OutputConstraints*******

<p>
For each test case print the minimal number of cable colors necessary to make all the required connections.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5 5 4
2 3 4 5
1 2
1 3
2 3
2 4
3 5
8 8 3
4 5 7
1 2
1 8
8 7
1 3
3 6
3 2
2 4
2 5

<b>Output:</b>
2
1
</pre>

<p><img src="http://www.spoj.pl/content/cyborg:netadmin.png" alt="Illustration to the first example"/></p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
PON||||||true||||||


<p>Given the number, you are to answer the question: "Is it prime?"<BR><BR>
<b>Solutions to this problem can be submitted in C, C++, Pascal, Perl, Python, Ruby, Lisp, Hask, Ocaml, Prolog, Whitespace, Brainf**k and Intercal only.
</b>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follows. [t <= 500]<BR>
Each line contains one integer: <i>N</i> [2 <= <i>N</i> <= 2^63-1]<BR>


*******OutputConstraints*******

<p>For each test case output string "YES" if given number is prime and "NO" otherwise.<BR>


*******IOTestCases*******

<pre>
<b>Input:</b>
5
2
3
4
5
6

<b>Output:</b>
YES
YES
NO
YES
NO
</pre>


______________________________________________________
POLYEQ||||||true||||||


<p>You are given the polynomial F(x) as the sum of monomials.
Each monomial has the form: <br>[<i>coefficient</i>*]<i>x</i>[^<i>degree</i>] or [<i>coefficient</i>],<BR>
where <i>coefficient</i> and <i>degree</i> are integers such that -30000 <= <i>coefficient</i> <= 30000, 0 <= <i>degree</i> <= 6. The parameters given in [] can be skipped.<BR>
In this problem you have to find all solutions of the equation: F(x)=0.</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follow. [<i>t</i> <= 100]<BR>
Each line contains one polynomial <i>F(x)</i> given as string <i>s</i> in the form described above.<BR>
The length of string <i>s</i> is not more than 300 characters.


*******OutputConstraints*******

<p>For each test case output all solutions (including repeated) of the given equation in non-decreasing order. All solutions lie within the interval [-100.0; 100.0]. Each solution must be given with an error of not more than 0.01. It's guaranteed that all solutions are real, not complex.


*******IOTestCases*******

<pre>
<b>Input:</b>
2
x^4-6*x^3+11*x^2-6*x
-x^2+2*x-1

<b>Output:</b>
0.00 1.00 2.00 3.00
1.00 1.00
</pre>



______________________________________________________
CUBERT||||||true||||||


<p>Your task is to calculate the cube root of a given positive integer. We can not remember why exactly we need this, but it has something in common with a princess, a young peasant, kissing and half of a kingdom (a huge one, we can assure you).</p>
<p>Write a program to solve this crucial task.</p>


*******InputConstraints*******

<p>The input starts with a line containing a single integer <b>t</b> <= 20, the number of test cases. <b>t</b> test cases follow. </p>
<p>The next lines consist of large positive integers of up to 150 decimal digits.
Each number is on its own separate line of the input file. The input file may contain empty lines. Numbers can be preceded or followed by whitespaces but no line exceeds 255 characters.</p>


*******OutputConstraints*******

<p>For each number in the input file your program should output a line consisting of two values separated by single space. The second value is the cube root of the given number, truncated (not rounded!) after the 10th decimal place. First value is a checksum of all printed digits of the cube root, calculated as the sum of the printed digits modulo 10.</p>



*******IOTestCases*******

<pre>
<b>Input:</b>
5
1
<p>        8</p>
<p>   1000</p>
<p>
2
33076161
</p>
<b>Output:</b>
1 1.0000000000
2 2.0000000000
1 10.0000000000
0 1.2599210498
6 321.0000000000
</pre>


______________________________________________________
ALIBB||||||true||||||


<p>Alibaba the famous character of our childhood stories would like to be immortal in order to keep bringing happiness to children. In order to reach this status he needs to prove that he is still able to do some unusual things. There are <b>n</b> treasures, (<b>n</b> <= 10000) each in a different place located along a straight road. Each treasure has a time limit, after that it vanishes. Alibaba must take all the <b>n</b> treasures, and he must do it quickly. So he needs to figure out the order in which he should take the treasures before their deadlines starting from the most favorable position. Alibaba has the list of places and deadlines of the treasures. A place <b>i</b> is located at distance <b>d<sub>i</sub></b> from the leftmost end of the road. The time it takes to take a treasure is instantaneous.</p>
<p>Alibaba must find <b>the smallest time</b> by which he can take all the treasures.</p>



*******InputConstraints*******

<p>
The first line of the input contains an integer <b>K</b> <= 10 - determining the number of datasets
</p>
<p>Each data set in the input stands for a particular set of treasures. For each set of treasures the input contains the number of treasures, and the list of pairs place - deadline in increasing order of the locations. White spaces can occur freely between the numbers in the input.The input data are correct.</p>


*******OutputConstraints*******

<p>For each set of data the program prints the result to the standard output on a separate line. The solution is represented by the smallest time by which Alibaba can take all the treasures before they vanish. If this is not possible then the output is "No solution".</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5
1 3
3 1
5 8
8 19
10 15
5
1 5
2 1
3 4
4 2
5 3

<b>Output:</b>
11
No solution
</pre>



______________________________________________________
OFBEAT||||||true||||||


<p>In the Middle Ages the capital of Byteland was surrounded by stout walls to protect the citizens from intruders. The gates of the city were well guarded and the drawbridge was lifted for the night, and everyone felt pretty happy and secure. At least, for a while.
<p>
With time the usual disadvantages of a walled city became apparent. As the population increased, crime flourished in the cramped living space. Eventually it all became so bad that the mayor decided to intervene. Some of the guards were reassigned from their usual occupation of reading newspapers in the guard posts near the gates, and told to start patrolling the city. Many of the officers were rather unhappy about all this, especially after the first men to go on the beat returned with bleeding noses and bumps on their heads. Sensing the low morale of the men, the Captain of the Guard, a bright young individual, decided to reinterpret the order he had received from the mayor. He decided that patrol officers would only go out in large groups and armed to the teeth, and would only move along a few carefully chosen streets from which they could see everything that was going on in the city without actually getting involved.
<p>
The city is laid out on a regular grid, with each street running North-South or East-West from one end of the city to the other (as far as the walls allow). Every point with integer coordinates is at an intersection of two streets, one leading North-South, the other East-West. The walls that surround the city form a simple polygon whose sides run directly alongside sections of some streets of the city.
<p>
Every street in the set of 'patrolled streets' chosen by the Captain intersects with at least one other patrolled street. Furthermore, if a point belongs to one of the streets of the city then it is visible from some point of one of the patrolled street (points see each other iff the line segment connecting them is a fragment of a street). Finally, the set of patrolled streets chosen by the Captain consists of the minimum possible number of streets.
<p>
Given a description of the capital of Byteland, find out how many of its streets were actually patrolled by guards after the Captain issued his order.


*******InputConstraints*******

<p>
The first line of input contains t - the number of test cases. t test cases follow.
<p>
For each test case, the first line contains a single integer n - the number of sections the city wall consists of (4 <= n <= 2000). The second line contains exactly n integers a<sub>1</sub>,...,a<sub>n</sub> describing successive sections of wall (1<=|a<sub>i</sub>|<=100000). Any two successive sections of wall are perpendicular to each other. The length of the i-th section is the absolute value of a<sub>i</sub>, while its direction is described by the sign of a<sub>i</sub> (positive means northbound or eastbound, negative - southbound or westbound when traversing the walls clockwise).


*******OutputConstraints*******

<p>
For each test case output a single integer k - the number of elements of the patrolled set of streets selected by the Captain.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
14
+2 +2 +2 +2 -4 +2 +1 +2 -3 +2 -2 -8 +4 -2

<b>Output:</b>
4
</pre>

<img src="http://www.spoj.pl/content/adrian:ofbeat.png" alt="Illustration of the sample test data. Blue lines indicate the set of patrolled streets"/>


______________________________________________________
TWORK||||||true||||||


<p>In the late Middle Ages the University of Byteland was no different than any other university of the day. One of those gloomy places where philosophers brooded over the essence of life, theologians did likewise and quaralled with philosophers, while alchemists developed new caustic types of green shampoo in their futile search for gold. The thing that worried the Chancellor most was that none of the staff seemed to be in the least capable of making money in any form. When he complained about this to the Director of Human Resources, the Director came up with a brilliantly simple theory. He claimed that this lack of productivity was the direct consequence of the isolated model of work, and that wonders could be achieved by promoting teamwork. <p>
The Director intends to assign every scientist to some 3-person workgroup. The members of the workgroup should then select which of them is to act as the group leader. And this of course is the root of the problem. Every scientist will tolerate either himself or one of his acquaintances as the leader of his group, but will never allow anyone else to have this privilege. So when creating workgroups it is necessary to bear in mind that every group should have at least one suitable candidate for the role of group leader, accepted by all its members.
<p>
Although everyone at the University knows <i>of</i> everyone else indirectly (as acquaintances of acquaintances of acquaintances of...), the number of direct acquaintances that every scientist has is relatively small - either equal to 2, or to 3. Even so, it ought to be possible to assign the vast majority of scientists to workgroups. Quite naturally, the dubious pleasure of performing this task has been left to you, the Acting University Algorithmist.


*******InputConstraints*******

<p>Input starts with a single integer t, the number of test cases (t<=100). t test cases follow.<p>

Each test case begins with a line containing two integers n m (4<=n<=m<=20000, n is the number of scientists and is divisible by 4). Exactly m lines follow containing a pair of integers a<sub>i</sub> b<sub>i</sub> each which denote that scientists a<sub>i</sub> and b<sub>i</sub> are acquaintances (1<=a<sub>i</sub>, b<sub>i</sub><=n, each scientist has either 2 or 3 acquaintances). Acquaintanceship is mutual.


*******OutputConstraints*******

<p>For each test case, output a line containing a single integer k - the number of workgroups you have formed. In each of the next k lines output exactly 3 integers, representing the numbers of scientists belonging to respective workgroups.
<p>Your solution will be regarded as incorrect if for some test case more than <i>25%</i> of all scientists are left without a valid assignment to a workgroup.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
8 10
1 2
1 3
2 5
4 6
3 7
2 3
5 6
6 7
7 8
8 4

<b>Output:</b>
2
1 3 7
4 5 6
</pre>



______________________________________________________
AGGRCOW||||||true||||||


<p>Farmer John has built a new long barn, with N (2 <= N <= 100,000)
stalls. The stalls are located along a straight line at positions
x1,...,xN (0 <= xi <= 1,000,000,000).<BR><BR>

His C (2 <= C <= N) cows don't like this barn layout and become
aggressive towards each other once put into a stall. To prevent the
cows from hurting each other, FJ want to assign the cows to the
stalls, such that the minimum distance between any two of them is
as large as possible.  What is the largest minimum distance?<BR>

</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follows. <BR>
* Line 1: Two space-separated integers: N and C<BR>
* Lines 2..N+1: Line i+1 contains an integer stall location, xi<BR>
</p>


*******OutputConstraints*******

<p>For each test case output one integer: the largest minimum distance.<BR>


*******IOTestCases*******

<p>
<b>Input:</b>
<pre>
1
5 3
1
2
8
4
9
</pre>
<p>
<b>Output:</b>
<pre>
3
</pre>
<p>
<b>Output details:</b>
<p>
FJ can put his 3 cows in the stalls at positions 1, 4 and 8, <BR>resulting in 
a minimum distance of 3.<BR>


______________________________________________________
CABLETV||||||true||||||


<p>The interconnection of the relays in a cable TV network is bi-directional. The network is connected if there is at least one interconnection path between each pair of relays present in the network. Otherwise the network is disconnected. An empty network or a network with a single relay is considered connected. The safety factor <b>f</b> of a network with <b>n</b> relays is:</p>
<p>1. <b>n</b>, if the net remains connected regardless the number of relays removed from the net.
<br>2. The minimal number of relays that disconnect the network when removed.</p>
<img src="http://www.spoj.pl/content/thanhvy:cabletv.jpg" alt="Exemplary illustration">

<p>For example, consider the nets from figure 1, where the circles mark the relays and the solid lines correspond to interconnection cables. The network (a) is connected regardless the number of relays that are removed and, according to rule (1), f=n=3. The network (b) is disconnected when 0 relays are removed, hence f=0 by rule (2). The network (c) is disconnected when the relays 1 and 2 or 1 and 3 are removed. The safety factor is 2.</p>


*******InputConstraints*******

<p>The input starts with a line containing a single integer <b>t</b> <= 20, the number of test cases. <b>t</b> test cases follow.</p>
<p>Write a program that computes the safety factor for the cable networks encoded by the data sets. Each data set starts with two integers: 0 <= <b>n</b> <=50,the number of relays in the net, and <b>m</b>, the number of cables in the net. Follow <b>m</b> data pairs (u,v), u < v, where u and v are relay identifiers (integers in the range 0..<b>n</b>-1). The pair (u,v) designates the cable that interconnects the relays u and v. The pairs may occur in any order. Except the (u,v) pairs, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.</p>


*******OutputConstraints*******

<p>For each data set, prints from the beginning of a line, the safety factor of the encoded net.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
0 0
1 0
3 3 (0,1) (0,2) (1,2)
2 0
5 7 (0,1) (0,2) (1,3) (1,2) (1,4) (2,3) (3,4)

<b>Output:</b>
0
1
3
0
2
</pre>



______________________________________________________
BOOK||||||true||||||


<p>Bob has a difficult job. He must distribute advertising booklets for extra school activities in different schools. The booklets have different number of pages. Bob has a list with the number of pages of each booklet and the number of schools that he must visit. He has to distribute the booklets such that each school gets a number of booklets equal to either the lower integer part (LIP),or the upper integer part (UIP) of the number of booklets divided by the number of schools. Poor Bob must obey other rules too. He must distribute all the <b>UIP</b> number of booklets first and then the <b>LIP</b> number of booklets.</p>
<p>Any booklet <b>A</b> that is distributed to a school <b>S_i</b> must have fewer or at most an equal number of pages that any other booklet B that is distributed to a school <b>S_j</b>, if <b>S_i</b> gets the booklets before <b>S_j</b> (i.e if <b>i</b> < <b>j</b> then <b>pages(A)</b> <= <b>pages(B)</b>). When Bob distributes the booklets to a school he must distribute them in the same relative order in which they are on his list.</p>
<p>Moreover, he must distribute them very fast. When he comes back to the advertising company his boss verifies if he accomplished well his task, by asking him the number of pages of the first booklet distributed to a specific school, following the order in which Bob visited the schools (starting with 0). Difficult job, isn't it? Can you help him?</p>


*******InputConstraints*******

<p>The input starts with a line containing a single integer <b>t</b> <= 20, the number of test cases. <b>t</b> test cases follow.</p>
<p>Each data set in the input stands for a particular set of bookets. For each set of booklets the input contains the number of schools, the school specified by Bob's boss, the number of booklets (<b>less than 3000</b>), the number of pages of each booklet (fits in integer). White spaces can occur freely between the numbers in the input. The input data are correct.</p>


*******OutputConstraints*******

<p>For each set of data the program prints the result to the standard output on a separate line. The solution is represented by the number of pages of the first booklet distributed to the specified school.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
2
7
3 5 9 1 11 14 2

<b>Output:</b>
11
</pre>



______________________________________________________
CANTON||||||true||||||


<p>One of the famous proofs of modern mathematics is Georg Cantor's demonstration that the set of rational numbers is enumerable. The proof works by using an explicit enumeration of rational numbers as shown in the diagram below.</p>
<pre>
1/1 1/2 1/3 1/4 1/5 ...
2/1 2/2 2/3 2/4
3/1 3/2 3/3
4/1 4/2
5/1
</pre>

<p>In the above diagram, the first term is 1/1, the second term is 1/2, the third term is 2/1, the fourth term is 3/1, the fifth term is 2/2, and so on.</p>


*******InputConstraints*******

<p>The input starts with a line containing a single integer <b>t</b> <= 20, the number of test cases. <b>t</b> test cases follow. </p> <p>Then, it contains a single number per line.</p>


*******OutputConstraints*******

<p>You are to write a program that will read a list of numbers in the range from 1 to 10^7 and will print for each number the corresponding term in Cantor's enumeration as given below.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3
14
7

<b>Output:</b>
TERM 3 IS 2/1
TERM 14 IS 2/4
TERM 7 IS 1/4
</pre>



______________________________________________________
UCUBE||||||true||||||


<p>
A large cube (of size NxNxN) is given. At the beginning it consists of small blocks (1x1x1) and each block is painted in some color (different blocks may have the same color). But in the process of exploitation some blocks have disappeared. Given 6 photos of the unstable cube you have to calculate the maximum possible number of blocks that still remain in the unstable cube. It is possible that the unstable 
cube consists of more than one part.
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follow. <BR>
<i>N</i> - size of the big cube <i>[1 <= N <= 10]</i><BR>
In the next <i>N</i> lines views of the cube from 6 sides are described (in the following order: from the front, left, back, right, from above, from below). Each such view is represented by a table of size <i>NxN</i> in which different letters denote different colors, and the symbol "." (point) means that it is possible to see all the way through the cube at this point. Consecutive views are separated by exactly one space.</p>
<p>
The bottom border of the top view corresponds to the top border of the front view, and the top border of the bottom view - to the bottom border of the front view. For the front, back, left and right views the top and bottom sides of a view correspond to the top and bottom of the cube. 
</p>
<p>
The input file is correct, i.e. each test case describes a possible configuration.
</p>


*******OutputConstraints*******

<p>For each test case output one integer: the required maximum number of blocks remaining in the unstable cube.<BR>


*******IOTestCases*******

<p>
<pre>
<b>Input:</b>
2
3
.R. YYR .Y. RYY .Y. .R.
GRB YGR BYG RBY GYB GRB
.R. YRR .Y. RRY .R. .Y.
2
ZZ ZZ ZZ ZZ ZZ ZZ
ZZ ZZ ZZ ZZ ZZ ZZ

<b>Output:</b>
11
8
</pre>



______________________________________________________
RATTERN||||||true||||||


<p>
It was decided to make a parquet floor in a room of size NxM. The idea is to lay out some pattern on the floor. The parquet tiles with which the floor of the room looks best consist of squares 1x1, each of which can be either white or black. The required color of each square of the room is specified on the map of the room.</p><p>
There are four different forms of parquet tiles: <BR><BR>
<img src="http://www.spoj.pl/content/turbo:img0001.png" alt="Illustration of parquet tiles"><BR><BR>
Squares of one parquet tile can be painted differently. Some types of tiles can be of identical shape, but painted differently. Tiles of different types can have different cost. The number of available tiles of each type is not limited. Tiles are allowed to be turned around somehow (by an angle which is a multiple of 90 degrees), but it is not permitted to break a tile or to put it face sheet downwards. Initially, any part of the floor can be already laid out by tiles. You are requested to calculate the minimal cost of the tiles necessary to pave the remaining part of the room. </p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, then <i>t</i> test cases follow. <BR>
In the first line of each test case three numbers are written: <i>N, M</i> (the sizes of the room) and <i>K</i> (number of accessible types of tiles). <i>[1<= N, M <= 8], [1 <= K <= 10]</i>.
Next there is a description of the desired painting of the floor. The description is given in the form of <i>N</i> lines of <i>M</i> numbers each, where 0 denotes the color white, 1 - the color black, 2 - a square which has already been covered by a tile. In the last K lines the descriptions of available types of tiles are given in the following format: <BR>
[Form] [cost] [painting] where:<BR>
[Form] is a number from 1 to 4, describing the form of a tile (see figure above) <BR>
[Cost] is an integer not larger than 10000, describing the cost of one tile of the type. <BR>
[Painting] is a sequence of between one and three numbers 0 or 1. Its length is the same as the number of squares of which the tile consists, and the respective numbers describe colors of square tiles in the order in which the squares are numbered in the figure.
</p>


*******OutputConstraints*******

<p>For each test case output one integer: the minimal cost of laying the remaining part of the parquet, or -1 if the task cannot be performed.</p>


*******IOTestCases*******

<p><b>Input:</b></p>
<pre>
1
4 3 3
2 2 2
2 0 0
2 1 2
2 2 2
2 10 0 0
1 5 1
4 6 0 0 1
</pre>

<p><b>Output:</b></p>
<pre>
15
</pre>



______________________________________________________
PITPAIR||||||true||||||


<p>
	It is necessary to find a minimal integer value R which is equal to the length of the hypotenuse (the side opposite the right angle) of N non-identical rectangular triangles with integer lengths of sides. 
</p>


*******InputConstraints*******

<p>
	t - number of test cases [t <= 100], than t lines follow, each line contains one integer - N, equal 
to the required number of different rectangular triangles. [1 <= N <= 2000]<BR>

*******OutputConstraints*******

<p>
	For each test case your program should output a number R in a separate line (R fits in a 64-bit integer), equal to the minimal integer value of a hypotenuse for which exactly N different rectangular triangles can be constructed; then in separate lines follow exactly N numbers equal to the shorter 
cathetus (side adjacent to the right angle) of each of the rectangular triangles, in ascending order. 


*******IOTestCases*******

<p>
<pre><b>Input:</b>
2
1
2

<b>Output:</b>
5
3
25
7
15
</pre>


______________________________________________________
WINDMILL||||||true||||||


<p>In the later days of his career Johnny purchased a long and narrow strip of land on which he intended to erect a row of windmills, and live off the electrical energy produced by his little power plant. To his dismay, he soon discovered that he had been badly cheated - throughout most of the year the wind blew lengthwise through the strip, rather than in a perpendicular direction. As a result, the wind was certain to lose most of its force on the first windmill it encountered, leaving all the others idle. Johnny could only see one way of coping with this problem, namely - to vary the height of windmills situated relatively close to each other. More precisely, Johnny intends to build exactly <i>n</i> windmills along a straight line, with equal spacing (of one Bytelandian furlong) between adjacent windmills. It has been established by a team of experts that if two windmills are <i>k</i> Bytelandian furlongs apart from each other, their height must differ by at least <i>n-k</i> Bytelandian yards. No windmill may ever be lower than 1 Bytelandian yard, and some, obviously, may need to be considerably higher. But tall windmills are far more expensive to construct, and thus you have been asked to choose the heights of Johnny's windmills in such a way as to guarantee that the tallest windmill has the minimum possible height.


*******InputConstraints*******

<p>Input starts with a single integer <i>t</i>, the number of test cases (<i>t</i><=100). <i>t</i> test cases follow.
<p>Each test case consists of exactly one integer <i>n</i> (1<=<i>n</i><=100) - the number of windmills Johnny intends to construct.


*******OutputConstraints*******

<p>For each test case output a line with exactly <i>n</i> numbers, denoting the heights of successive windmills given in the order in which they are arranged along the road.


*******IOTestCases*******

<pre>
<b>Input:</b>
3
1
2
3

<b>Output:</b>
1
1 2
2 4 1
</pre>



______________________________________________________
PLATON||||||true||||||


<p>Platon and Socrates one day decided to play a new game. They asked their friend to think of two numbers between 1 and 5000, not equal. Then they asked him to tell the product to Platon and the sum to Socrates. After that they tried to figure out what these numbers are. They played a lot of times but none of them could guess these numbers. Finally they made it!! Here is the dialogue:
<div align=left>
<ul>
<li>[P] : I don't know the answer.
<li>[S] : I knew you wouldn't know, I don't know it either.
<li>[P] : Now I know it.
<li>[S] : I know it too.
</ul>

Your task is to find all pairs Platon and Socrates could have been thinking about. Numbers are limited to the given range.
</div>
</p>

*******InputConstraints*******

<p>Input starts with a single integer t, the number of test cases (t<=2000). t test cases follow. Each test case consists of one line containing two integers <VAR>l r</var> seperated by a single space, denoting the range of numbers ( <VAR>1<= l < r <=5000</var>, <VAR>r-l < 200</var> ). 



*******OutputConstraints*******

<p>For the i-th test case output a line with the text <VAR>case i</var>. In the next line print <VAR>n</var> - number of pairs from range <var>(l,r)</var>. Then exactly <VAR>n</var> lines follow with two numbers seperated by single space. The first number is not greater than the second. Pairs are printed in increasing sum order.

*******IOTestCases*******


<pre>
<b>Input</b>
2
1 10
2 8

<b>Output</b>
case 1
0
case 2
0
</pre>



______________________________________________________
BISHOPS||||||true||||||


<p> Yesterday was Sam's birthday. The most interesting gift was definitely the chessboard. Sam quickly learned the rules of chess and defeated his father, all his friends, his little sister, and now no one wants to play with him any more. <BR><BR>

So he decided to play with another birthday gift &#8211; a Book of Math Problems for Young Mathematicians. He opened the book somewhere in the middle and read the following problem: "How many knights can be placed on a chessboard without threatening each other?" After a while he realized that this was trivial and moved on to the next problem: "How many bishops can be placed on a chessboard without threatening each other?". Sam is in trouble here. He is not able to solve this problem and needs your help.<BR><BR>
Sam's chessboard has size N <i>x</i> N. A bishop can move to any distance in any of the four diagonal directions. A bishop threatens another bishop if it can move to the other bishop's position. Your task is to compute the maximum number of bishops that can be placed on a chessboard in such a way that no two bishops threaten each other. <BR>
</p>


*******InputConstraints*******

<p>
The input file consists of several lines. The line number i contains a single number N representing the size of the i-th chessboard. [N <= 10^100]
</p>


*******OutputConstraints*******

<p>The output file should contain the same number of lines as the input file. The i-th line should contain one number &#8211; the maximum number of bishops that can be placed on i-th chessboard without threatening each other. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3

<b>Output:</b>
2
4

</pre>


______________________________________________________
CALLS||||||true||||||


<p> A young archeologist Senoj Anaidni recently made a very important discovery which will make him famous (or at least he thinks so). He found several scraps of paper resembling advertisement flyers of an ancient phone company. His research showed that modern phone companies follow a few basic rules to compose their flyers (and there is no reason to assume that old companies were an exception). <BR><BR>

Each company operates certain number of phone lines. Each phone line connects a pair of cities, and it can be used in both directions. The cost of using each line is a fixed positive number. A call from city A to city B may be routed through one or more other cities, in which case the cost of the call is the sum of the costs of all lines used. (In fact, sometimes it is cheaper to route the call through several other cities than to use the direct connection, even if there exists one.) <BR><BR>

To make the information comprehensible to the customer, the phone company lists the cost of the cheapest possible call between every pair of cities serviced by the company. To impress the customer even more, the company also lists the number of lines it operates. <BR><BR>

Indeed, each of Senoj's ancient flyers start like this: "Using our 47 telephone lines, we serve 10 most important cities of the world! A call from Sparta to Troja costs 12 dennario, Sparta to Athens is 15 dennario, ...". The list of all pairs of cities and the respective costs of the cheapest possible call between them follows. <BR><BR>

This supports Senoj's hypothesis about the origin of the papers, but he is not sure whether they are really genuine. Other archeologists often play dirty jokes on him by making ridiculous forgeries in a hope, that he will make a fool of himself. Luckily, they are often not very meticulous, so we can safely assume, that a flyer is a forgery if and only if it could not have been published by any phone company. 
<BR>
</p>


*******InputConstraints*******

<p>
The first line of the input file gives the number <i>t</i> of flyers found by Senoj. [<i>t</i> <= 50] Each flyer is described in a separate block starting with a line containing two integers - N and K - where N is the number of cities and K is the number of phone lines. [N <= 300 K <= 1200] The block continues with N-1 lines giving the costs of the cheapest calls between all pairs of cities. In particular, the i-th line contains (N-i) numbers, where j-th number represents the cost of a call between the cities i and (i+j). 
</p>


*******OutputConstraints*******

<p>For every input block, output a line containing either "YES" or "NO". "YES" should be printed, if it is possible to assign costs to the phone lines operated by the company so that the cheapest calls are as advertised in the flyer. "NO" should be printed if this is not possible.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 3
1 2
2
3 2
1 2
2


<b>Output:</b>
YES
NO

</pre>



______________________________________________________
HARDQ||||||true||||||


<p> Students of computer science in Bratislava enjoy hiking and camping during their long summer breaks. They love walking silently in the groves, visiting sparkling waterfalls, exploring dark caves, climbing steep hills, or just sleeping in a tent. Some of them already visited all the national parks in Slovakia and nearby countries. 
<BR><BR>

With no more new national parks to visit, frustrated students decided to set up a new national park (NP) by themselves. After long arguing, they finally agreed on the boundary of the NP. Now they want to purchase all the land needed for NP from present owners. Their funds are limited (after all, they are only students), therefore they do not want to buy any land outside the NP. <BR><BR>

The NP can be described as a polygon with N vertices. There is a set P of M rectangular plots of land available for sale by their owners. The rectangles are mutually disjoint and axis-parallel. Your task is to decide whether it is possible to purchase subset of plots P exactly covering the proposed NP. 
<BR>
</p>


*******InputConstraints*******

<p>
Input file consists of several test cases separated by a blank line. Each test case starts with two integers N and M. Next N lines contain the coordinates of the vertices of the NP. Each of the following M lines describes one plot. For each plot, the coordinates of two opposite corners of the rectangle are given. The values N=0, M=0 end the input and should not be processed. [N, M <= 3000]
</p>


*******OutputConstraints*******

<p>For each test case output either 'YES' or 'NO' depending on whether it is possible to set up the NP using P or not. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4 2
0 0
0 2
2 2
2 0
1 0 0 2
1 0 2 2

3 1
0 0
2 2
2 0
0 0 1 1

0 0

<b>Output:</b>
YES
NO

</pre>


______________________________________________________
PHDISP||||||true||||||


<p>One day, mathematician and philosopher were engaged in a heated dispute.<BR><BR>

Philosopher said:<BR>
- Ideal line has only length and no width, therefore, no line can have an area.<BR>
Mathematician replied:<BR>
- That's as it may be, but still you can ll a square with a line in such a way that there will be no gaps.<BR>
And you can't deny that a square has an area, and he grinned.<BR>
But Philosopher still wasn't convinced:<BR>
- Show me this line, then.<BR>
- With pleasure... - responded Mathematician and scribbled some equations on a piece of paper:<BR>
<img src="http://www.spoj.pl/content/turbo:img0001.jpg"><BR>
- With t increasing, the point (x, y) will move around the square, forming a line.<BR>
- So what? - asked Philosopher. How is it going to ll the entire square?<BR>
- Indeed, it will, - said Mathematician, - Whichever point inside the square you draw, the line will eventually cross that point.<BR>
- No, - replied Philosopher indignantly, - Anyway, I don't believe. When will the line cross this point? - and he put a thick dot inside the square.<BR>
Give Philosopher an answer. <BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of tests [<i>t</i> <= 150], than t test cases follows.<BR>
The first line of each test case contains the coordinates (x0, y0) of the dot center (-1 <= x0, y0 <= 1). The second line contains eps <= 0.0001 - the radius of the dot (the dot is essentially a small circle).
</p>


*******OutputConstraints*******

<p>For each test case output any value of t in the segment [0, 10^12], which corresponds to the line crossing the dot, or "FAIL", if the line doesn't cross the dot.


*******IOTestCases*******


<pre>
<b>Sample input:</b>
1
0.744 0.554
0.01

<b>Sample output:</b>
5.3

</pre>


______________________________________________________
EOPERA||||||true||||||


<p>Given a sequence of 12 numbers consisting of 0 and the first 11 natural numbers. Suppose number 0 is in the i-th position of the sequence (positions are numbered from 0 to 11). You can swap it with the number in the j-th position if the following conditions hold:
<ul>
<li>| i &#8211; j | = d<sub>k</sub> , where k=1..3 and (d<sub>1</sub>,d<sub>2</sub>,d<sub>3</sub>,d<sub>4</sub>)=(1;3;6;12)
<li>
floor(i/d<sub>k+1</sub>)=floor(j/d<sub>k+1</sub>)
</ul>
<p>
Your task is to find the minimum number of exchange operations required to sort the sequence in increasing order.

*******InputConstraints*******

<p>The first line of the input file contains an integer representing the number of test cases to follow.
Each test case contains a sequence of twelve numbers consisting of 0,1,2,..,11, separated by single space.
You can assume that the given sequence can always be sorted in increasing order by using the exchange operations 

*******OutputConstraints*******

<p>For each test case, output the minimum number of exchange operations required to sort the given sequence in increasing order.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 10 2 3 0 5 7 4 8 6 9 11
6 4 1 0 3 5 9 7 2 10 11 8

<b>Output:</b>
8
9
</pre>



______________________________________________________
ROADS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/ROADS/en/">English</a></td> 
<td width="50%"><a href="/problems/ROADS/vn/">Vietnamese</a></td> 
</tr></table>


<p>N cities named with numbers 1 ... N are connected with one-way roads. Each road has two parameters associated with it: the road length and the toll that needs to be paid for the road (expressed in the number of coins).
Bob and Alice used to live in the city 1. After noticing that Alice was cheating in the card game they liked to play, Bob broke up with her and decided to move away - to the city N. He wants to get there as quickly as possible, but he is short on cash.
We want to help Bob to find the shortest path from the city 1 to the city N that he can afford with the amount of money he has.


*******InputConstraints*******

<p>The input begins with the number t of test cases. Then t test cases follow.
The first line of the each test case contains the integer K, 0 <= K <= 10000, maximum number of coins that Bob can spend on his way.
The second line contains the integer N, 2 <= N <= 100, the total number of cities.
The third line contains the integer R, 1 <= R <= 10000, the total number of roads.
Each of the following R lines describes one road by specifying integers S, D, L and T separated by single blank characters :
S is the source city, 1 <= S <= N
D is the destination city, 1 <= D <= N
L is the road length, 1 <= L <= 100.
T is the toll (expressed in the number of coins), 0 <= T <= 100
Notice that different roads may have the same source and destination cities.


*******OutputConstraints*******

<p>For each test case, output a single line contain the total length of the shortest path from the city 1 to the city N whose total toll is less than or equal K coins.
If such path does not exist, output -1.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5
6
7
1 2 2 3
2 4 3 3
3 4 2 4
1 3 4 1
4 6 2 1
3 5 2 0
5 4 3 2
0
4
4
1 4 5 2
1 2 1 0
2 3 1 1
3 4 1 0

<b>Output:</b>
11
-1
</pre>





______________________________________________________
SEQ||||||true||||||


<p>Sequence <i>(a<sub>i</sub>)</i> of natural numbers is defined as follows:<br><br>
A A  <i>a<sub>i</sub> = b<sub>i</sub></i> (for <i>i <= k</i>)<br>
A A  <i>a<sub>i</sub> = c<sub>1</sub>a<sub>i-1</sub> + c<sub>2</sub>a<sub>i-2</sub> + ... + 
c<sub>k</sub>a<sub>i-k</sub></i> (for <i>i > k</i>)<br><br>
where <i>b<sub>j</sub></i> and <i>c<sub>j</sub></i> are given natural numbers for <i>1<=j<=k</i>. Your task is to compute <i>a<sub>n</sub></i> for given <i>n</i> and output it modulo <i>10<sup>9</sup></i>.


*******InputConstraints*******

<p>On the first row there is the number <i>C</i> of test cases (equal to about 50).<br>
Each test contains four lines:<br>
<i>k</i> - number of elements of <i>(c)</i> and <i>(b)</i> (<i>1 <= k <= 10</i>)<br>
<i>b<sub>1</sub>,...,b<sub>k</sub></i> - <i>k</i> natural numbers where <i>0 <= b<sub>j</sub> <= 10<sup>9</sup></i> separated by spaces
<i>c<sub>1</sub>,...,c<sub>k</sub></i> - <i>k</i> natural numbers where <i>0 <= c<sub>j</sub> <= 10<sup>9</sup></i> separated by spaces<br>
<i>n</i> - natural number (<i>1 <= n <= 10<sup>9</sup></i>)<br>


*******OutputConstraints*******

<p>Exactly <i>C</i> lines, one for each test case:
<i>a<sub>n</sub></i> modulo <i>10<sup>9</sup></i>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 
3 
5 8 2 
32 54 6 
2 
3 
1 2 3 
4 5 6 
6 
3 
24 354 6 
56 57 465 
98765432

<b>Output:</b>
8 
714 
257599514
</pre>


______________________________________________________
POKER||||||true||||||


<p>

In poker, you have 5 cards. There are 10 kinds of poker hands (from highest to lowest):
<ul>
<li> royal flush - ace, king, queen, jack and ten, all in the same suit
<li> straight flush - five cards of the same suit in sequence, such
as 10,9,8,7,6 of clubs; ace can be counted both as the highest card or as the
lowest card - A,2,3,4,5 of hearts is a straight flush. But 4,3,2,A,K of hearts is not a straight flush - it's just a flush.
<li> four of a kind - four cards of the same rank, such as four kings.
<li> full house - three cards of one rank plus two cards of another rank
<li> flush - five cards of the same suit (but not a straight flush)
<li> straight - five cards in order - just like the straight flush, but mixed suits
<li> three of a kind - three cards of one rank and two other cards
<li> two pairs - two cards of one rank, two cards of another rank, and one more card
<li> pair - two cards of the same rank
<li> high card - none of the above
</ul>

Write a program that will help you play poker by telling you what kind of hand you have.


*******InputConstraints*******

<p>
The first line of input contains the number of test cases (no more than 20). Each test case consists of one line - five space separated cards. Each card is represented by a two-letter (or digit) word. The first character is the rank (A,K,Q,J,T,9,8,7,6,5,4,3 or 2), the second character is the suit (S,H,D,C standing for spades, hearts, diamonds and clubs). The cards can be in any order (but they will not repeat).


*******OutputConstraints*******

<p>
For each test case output one line describing the type of a hand, exactly like in the list above.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
AH KH QH TH JH
KH 5S 3C 5C 7D
QH QD 2S QC 2C

<b>Output:</b>
royal flush
pair
full house
</pre>



______________________________________________________
MIXTURES||||||true||||||


<p>
Harry Potter has n mixtures in front of him, arranged in a row.
Each mixture has one of 100 different colors (colors have numbers
from 0 to 99).
<p>
He wants to mix all these mixtures together. At each step, he is going
to take two mixtures that stand next to each other and mix them together,
and put the resulting mixture in their place.

<p>
When mixing two mixtures of colors a and b, the resulting mixture
will have the color (a+b) mod 100.

<p>
Also, there will be some smoke in the process. The amount of smoke generated
when mixing two mixtures of colors a and b is a*b.
<p>
Find out what is the minimum amount of smoke that Harry can get when
mixing all the mixtures together.



*******InputConstraints*******

<p>
There will be a number of test cases in the input.
<p>
The first line of each test case will contain n, the number of mixtures,
1 <= n <= 100.
<p>
The second line will contain n integers between 0 and 99 - the
initial colors of the mixtures.


*******OutputConstraints*******

<p>
For each test case, output the minimum amount of smoke.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
18 19
3
40 60 20

<b>Output:</b>
342
2400
</pre>

<p>
In the second test case, there are two possibilities:
<ul>
<li> first mix 40 and 60 (smoke: 2400), getting 0, then mix 0 and 20 (smoke: 0);
total amount of smoke is 2400
<li> first mix 60 and 20 (smoke: 1200), getting 80, then mix 40 and 80
(smoke: 3200); total amount of smoke is 4400
</ul>
<p>
The first scenario is a much better way to proceed.




______________________________________________________
COINS||||||true||||||


<p>

In Byteland they have a very strange monetary system.
<p>
Each Bytelandian gold coin has an integer number written on it. A coin n
can be exchanged in a bank into three coins: n/2, n/3 and n/4.
But these numbers are all rounded down (the banks have to make a profit).

<p>
You can also sell Bytelandian coins for American dollars. The exchange
rate is 1:1. But you can not buy Bytelandian coins.

<p>
You have one gold coin. What is the maximum amount of American dollars
you can get for it?


*******InputConstraints*******

<p>
The input will contain several test cases (not more than 10). Each
testcase is a single line with a number n, 0 <= n <= 1 000 000 000.
It is the number written on your coin.



*******OutputConstraints*******

<p>
For each test case output a single line, containing the maximum amount
of American dollars you can make.


*******IOTestCases*******


<pre>
<b>Input:</b>
12
2

<b>Output:</b>
13
2
</pre>

<p>
You can change 12 into 6, 4 and 3, and then change these into
$6+$4+$3 = $13.

If you try changing the coin 2 into 3 smaller coins, you will get
1, 0 and 0, and later you can get no more than $1 out of them.
It is better just to change the 2 coin directly into $2.





______________________________________________________
LAZYCOWS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/LAZYCOWS/en/">English</a></td> 
<td width="50%"><a href="/problems/LAZYCOWS/vn/">Vietnamese</a></td> 
</tr></table>


<p>Farmer John regrets having applied high-grade fertilizer to his
pastures since the grass now grows so quickly that his cows no
longer need to move around when they graze. As a result, the cows
have grown quite large and lazy... and winter is approaching.
<p>
Farmer John wants to build a set of barns to provide shelter for
his immobile cows and believes that he needs to build his barns
around the cows based on their current locations since they won't
walk to a barn, no matter how close or comfortable.
<p>
The cows' grazing pasture is represented by a 2 x B (1 <= B <=
15,000,000) array of cells, some of which contain a cow and some
of which are empty.  N (1 <= N <= 1000) cows occupy the cells in
this pasture:
<p>
<pre>
-------------------------------------------------------
|     | cow |     |     |     | cow | cow | cow | cow |
-------------------------------------------------------
|     | cow | cow | cow |     |     |     |     |     |
-------------------------------------------------------
</pre>
<p>Ever the frugal agrarian, Farmer John would like to build a set of
just K (1 <= K <= N) rectangular barns (oriented with walls parallel
to the pasture's edges) whose total area covers the minimum possible
number of cells.  Each barn covers a rectangular group of cells in
their entirety, and no two barns may overlap.  Of course, the barns
must cover all of the cells containing cows.

<p>By way of example, in the picture above if K=2 then the optimal
solution contains a 2x3 barn and a 1x4 barn and covers a total of
10 units of area.


*******InputConstraints*******

<p>
The first line of the input contains integer t representing the number of test cases. Then t cases follow. Each case has the following form:
<ul>
<li> Line 1: Three space-separated integers, N, K, and B.

<li> Lines 2..N+1: Two space-separated integers in the range (1,1) to
        (2,B) giving the  coordinates of the cell containing each cow.
         No cell contains more than one cow.
</ul>

*******OutputConstraints*******

<p>For each test case, output the minimum area required by the K barns in order to cover
all of the cows.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
8 2 9
1 2
1 6
1 7
1 8
1 9
2 2
2 3
2 4

<b>Output:</b>
10
<p>
<b>Input details:</b>
As pictured above.
<p>
<b>Output details:</b>
As discussed above.
</pre>





______________________________________________________
EXPEDI||||||true||||||


<p>
A group of cows grabbed a truck and ventured on an expedition deep
into the jungle.  Being rather poor drivers, the cows unfortunately
managed to run over a rock and puncture the truck's fuel tank.  The
truck now leaks one unit of fuel every unit of distance it travels.
<p>
To repair the truck, the cows need to drive to the nearest town (no
more than 1,000,000 units distant) down a long, winding road.  On
this road, between the town and the current location of the truck,
there are N (1 <= N <= 10,000) fuel stops where the cows can stop
to acquire additional fuel (1..100 units at each stop).
<p>
The jungle is a dangerous place for humans and is especially dangerous
for cows. Therefore, the cows want to make the minimum possible
number of stops for fuel on the way to the town. Fortunately, the
capacity of the fuel tank on their truck is so large that there is
effectively no limit to the amount of fuel it can hold. The truck
is currently L units away from the town and has P units of fuel (1
<= P <= 1,000,000).
<p>
Determine the minimum number of stops needed to reach the town, or
if the cows cannot reach the town at all.

*******InputConstraints*******

<p>
The first line of the input contains an integer t representing the number of test cases. Then t test cases follow. Each test case has the follwing form:
<ul>
<li>Line 1: A single integer, N
<li>Lines 2..N+1: Each line contains two space-separated integers
        describing a fuel stop: The first integer is the distance from
        the town to the stop; the second is the amount of fuel
        available at that stop.

<li>Line N+2: Two space-separated integers, L and P
</ul>

*******OutputConstraints*******

<p>For each test case, output a single integer giving the minimum number of fuel stops
        necessary to reach the town.  If it is not possible to reach
        the town, output -1.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
4 4
5 2
11 5
15 10
25 10

<b>Output:</b>
2

<b>Input details</b>
The truck is 25 units away from the town; the truck has 10 units
of fuel.  Along the road, there are 4 fuel stops at distances 4,
5, 11, and 15 from the town (so these are initially at distances
21, 20, 14, and 10 from the truck).  These fuel stops can supply
up to 4, 2, 5, and 10 units of fuel, respectively.

<b>Output details:</b>
Drive 10 units, stop to acquire 10 more units of fuel, drive 4 more
units, stop to acquire 5 more units of fuel, then drive to the town.
</pre>



______________________________________________________
AROUND||||||true||||||


<p>Over the years, FJ has made a huge number of farmer friends all
around the world.  Since he hasn't visited 'Farmer Ted' from England
and 'Boer Harms' from Holland for a while, he'd like to visit them.
<p>
He knows the longitude of the farm where each of his worldwide
friends resides.  This longitude is an angle (an integer in the
range 0..359) describing the farm's location on the Earth, which
we will consider to be a circle instead of the more complex and
traditional spherical representation. Except for the obvious
discontinuity, longitudes increase when traveling clockwise on this
circle.
<p>
FJ plans to travel by airplane to visit his N (1 <= N <= 5,000)
friends (whose farms are uniquely numbered 1..N). He knows the
schedules for M (1 <= M <= 25,000) bidirectional flights connecting
the different farms.  Airplanes always travel shortest paths on the
Earth's surface (i.e., on the shortest arc of a circle).
<p>
There will always be a unique shortest path between two farms that
are directly connected.  No pair of antipodal farms (exactly opposite
each other on the circle) is ever directly connected.
<p>
Each airplane flight can be described as traveling in clockwise or
counterclockwise direction around the Earth's surface. For example,
a flight from longitude 30 to longitude 35 would be clockwise, as
would be a flight from longitude 350 to longitude 10.  However, a
flight from longitude 350 to longitude 200 follows a shortest path
counterclockwise around the circle.
<p>
FJ would find it very cool if he could make a trip around the world,
visiting some of his friends along the way. He'd like to know if
this is possible and if so, what is the minimum number of flights
he can take to do so.
<p>
He wants to start and finish his journey at the location of his
best friend (the one listed first in the input below).  In order
to make sure he actually circles the Earth, he wants to ensure that
the clockwise distance he travels is different from the counterclockwise
distance he travels.

*******InputConstraints*******

<p>
The first line of the input contains an integer t representing the number of test cases. Then t test cases follow. Each test case has the following form:
<ul><li> Line 1: Two space-separated integers: N  and M

<li> Lines 2..N+1: Line i+1 contains one integer: the longitude of the
        i-th farm. Line 2 contains the location of the farm of his
        best friend.

<li> Lines N+2..N+M+1: Line i+N+1 contains two integers giving the
        indices of two farms that are connected by a flight.
</ul>

*******OutputConstraints*******

<p>For each test case, output a single integer specifying the minimum number of flights FJ
        needs to visit to make a trip around the world. Every time FJ
        moves from one farm to another counts as one flight. If it is
        impossible to make such a trip, output the integer -1.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 3
0
120
240
1 2
2 3
1 3

<b>Output:</b>
3

<b>Input details</b>
Farmer John has three friends at longitudes 0, 120, and 240.  There are
three flights: 0<->120, 120<->240, and 0<->240.  The journey must start and
finish at longitude 0.

<b>Output details</b>
FJ must visit all 3 friends to make a full trip around the world.
</pre>



______________________________________________________
LANDSCAP||||||true||||||


<p>Farmer John is making the difficult transition from raising mountain
goats to raising cows.  His farm, while ideal for mountain goats,
is far too mountainous for cattle and thus needs to be flattened
out a bit. Since flattening is an expensive operation, he wants to
remove the smallest amount of earth possible.
<p>
The farm is long and narrow and is described in a sort of two-dimensional
profile by a single array of N (1 <= N <= 1000) integer elevations
(range 1..1,000,000) like this:
<p>
1 2 3 3 3 2 1 3 2 2 1 2,
<p>
which represents the farm's elevations in profile, depicted below
with asterisks indicating the heights:
<pre>
    * * *     *
  * * * * *   * * *   *
* * * * * * * * * * * *
1 2 3 3 3 2 1 3 2 2 1 2
</pre>
<p>
A contiguous range of one or more equal elevations in this array
is a "peak" if both the left and right hand sides of the range are
either the boundary of the array or an element that is lower in
elevation than the peak. The example above has three peaks.
<p>
Determine the minimum volume of earth (each unit elevation reduction
counts as one unit of volume) that must be removed so that the
resulting landscape has no more than K (1 <= K <= 25) peaks.  Note
well that elevations can be reduced but can never be increased.
<p>
If the example above is to be reduced to 1 peak, the optimal solution
is to remove 2 + 1 + 1 + 1 = 5 units of earth to obtain this set
of elevations:
<pre>
    * * *     -
  * * * * *   - - -   -
* * * * * * * * * * * *
1 2 3 3 3 2 1 1 1 1 1 1
</pre>
<p>
where '-'s indicate removed earth.


*******InputConstraints*******

<p>
The first line of the input contains integer t representing the number of test cases. Then t test cases follow. Each test case has the following form:
<ul>
<li> Line 1: Two space-separated integers: N and K

<li> Lines 2..N+1: Each line contains a single integer elevation. Line
        i+1 contains the elevation for index i.
</ul>

*******OutputConstraints*******

<p>For each test case, output the minimum volume of earth that must be removed to reduce
        the number of peaks to K.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
12 1
1
2
3
3
3
2
1
3
2
2
1
2

<b>Output:</b>
5

<b>Input details</b>
This is the example used above.
</pre>



______________________________________________________
HAN01||||||true||||||


<p>Little Sabrina loves solving puzzles. Last week she got a new puzzle: The "Tower of Hanoi" puzzle. This puzzle is based on an old legend:  "The temple priests of hanoi have to transfer a tower consisting of 64 fragile disks of gold from one part of the temple to another, one disk at a time. The disks are arranged in order, no two of them the same size, with the largest on the bottom and the smallest on top. Because of their fragility, a larger disk may never be placed on a smaller one, and there is only one intermediate location where disks can be temporarily placed. It is said that before the priests complete their task the temple will crumble into dust and the world will vanish in a clap of thunder." Sabrina reconstructed the problem with some coins of different size. She solved the puzzle for three coins in 7 steps, for four coins in 15 steps,... after solving the problem with 7 coins she had the hang of it. Yesterday she started to solve the puzzle with 31 coins and her optimal strategy. After hours of moving coins from one pile to the other she was very tired and went to bed. This was a bad idea! Her little brother Robin discovered the towers of coins and - whoops! - threw it on the floor. Then he noticed a sheet of paper: "Don't touch this towers! Steps: 16543". "Oh no!" Robin has to reconstuct the tower because his sister can get very, very angry... Your task is to help Robin to reconstruct the towers.  Sabrina started the game with all disks on peg number one and her goal was to move the disks to peg number two. She used her optimal strategy and noted the number of steps she had done.</p>

*******InputConstraints*******

<p>The first line of input contains one integer t: The number of testcases. t lines follow. Each line contains two integers n (2&lt; n&lt; 61) and k (0&lt; k&lt; 2^n). n is the number of disks of the hanoi puzzle and k the number of steps Sabrina had done.</p>

*******OutputConstraints*******

<p>Output the reconstructed configuration of the towers after k steps. For each testcase output three lines. One for each tower. Each line consists of the tower identifier (1,2,3) a colon, one space and the disk numbers (n,n-1,...,2,1) which are seperated by a '|'-character.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
3 6
32 889397450
31 16543
<strong>Output:</strong>
1: 1
2: 3|2
3:
1: 32|31|28|25|18|17|14|3
2: 30|29|26|13|12|11|10|9|6|5|2
3: 27|24|23|22|21|20|19|16|15|8|7|4|1
1: 31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|7|6
2: 15|8|5|4|3|2|1
3: 14|13|12|11|10|9
</pre>


______________________________________________________
ACT||||||true||||||


<p> As you may know, planets of Alpha Centauri (if they indeed do exist) 
would provide excellent conditions for intelligent life forms. <BR><BR>

It is indeed true that there is a small Earthlike planet near Alpha 
Centauri, inhabited by a population of no particular significance. 
These humanlike creatures have much in common with us. Living in 
similar comunities and having similar body structure and behavioral 
patterns, they unsurprisingly appreciate (approximately) the same 
time-killing activities as we do. One of these, the second most 
popular after Alpha Centauri Croquet, is the Alpha Centauri Tennis. <BR><BR>

Although its rules differ from Earth Tennis, the two player 
version of Alpha Centauri Tennis resembles it in many ways. 
Same as Earth Tennis, it is played on a rectangular court 
divided into two parts by a net. Two players, standing on 
opposite sides of it, use a stringed racket to hit a ball 
back and forth to each other. There are certain rules how 
to hit the ball. The player who forces his opponent to 
violate one of these rules wins the current ball. The aim
 of both players is to win enough balls to win a game, enough
 games to win a set and enough sets to win the whole match. 
In the N player version of the Alpha Centauri Tennis a ball 
can be won by any one of the N players. Although technical 
details of this can be difficult to imagine, Alpha Centaurians 
are extremely inventive. <BR><BR>

In the general N-player version, players serve in turns, 
following order determined before the match. Moreover, 
they shift when starting individual games and sets. For 
example, the players are A, B and C. They are ordered 
alphabetically. Player A serves the first ball of the 
first game. When the ball is won by one of the players, 
its B's turn to serve. After the game is won by one of
the players, player B starts the second game. Finally,
when the first set is won by someone, player B starts 
the second set. This repeats, always shifted by one player, 
until the match ends. <BR><BR>

For three players the serving order looks as follows: <BR>
Set 1: <BR>
Game 1: A,B,C,A,B,C... <BR>
Game 2: B,C,A,.... <BR>
Game 3: C,A,B,.... <BR>
Game 4: A,B,C,.... <BR>
... <BR>
Set 2: <BR>
Game 1: B,C,A,B,.... <BR>
Game 2: C,A,B,.... <BR>
Game 3: A,B,C,A,... <BR>
... <BR>

There are exact rules for counting the number of 
balls/games/sets won by a player. <BR><BR>

<b>RULES FOR WINNING A GAME</b><BR>
The state of a game can be described by assigning a non-negative 
number of points to each of the players. At the beginning of 
a game, the score of each player is zero. <BR><BR>

Note: In Earth terminology, 0 points is called "love", 1 point 
is a "fifteen", 2 points is a "thirty", 3 points is a "forty" 
and 4 points is an "advantage". Be glad that you don't have to 
learn the Centaurian terminology :) <BR><BR>

When a player P just won a ball, the new score is determined 
by using the first rule from the list that applies to the 
situation. <BR><BR>

If P currently has 3 points and no other player has more than 
2 points, P wins the current game. <BR>
If P currently has 4 points, he wins the game. <BR>
If any other player currently has 4 points, that player 
loses one point. P gains a point. <BR><BR>

<B>RULES FOR WINNING A SET</B><BR>
The set is won by the first player that at the same time: <BR><BR>

won at least 6 games in this set <BR>
won at least 2 games more than any other player <BR><BR>

<B>RULES FOR WINNING A MATCH</B><BR>
The winner is the first player to win at least three sets. 
A set in which no other player won a game counts as two won sets. <BR><BR>

<B>Problem specification</B><BR>
An observer from the Intergalactic Tennis Federation was 
watching a tournament in Alpha Centauri Tennis. Being unable
 to understand Alpha Centaurian language, he only managed 
to write down the winner of each ball. Now, for each match, 
knowing the sequence in which the players were winning the 
balls, he would like to somehow determine its winner. <BR>
<BR>
</p>


*******InputConstraints*******

<p>
t - the number of test cases [t <= 150]
than t test cases follows, each corresponding to 
one match. Each line contains the number of players N [N <= 10] 
and a string S consisting of uppercase letters [2 <= S <= 50000]. 
The players are represented by the first N letters of the English 
alphabet. If the i-th letter of S is X, it means the player X 
won the i-th ball from the beggining of the match. You may assume 
that the match transcripts are correct and complete. <BR>
<BR>
The order in which the players serve is the same as the order of 
their letters in the English alphabet. <BR>
</p>


*******OutputConstraints*******

<p>For each line, output a single character, being the letter of 
the player who won the corresponding match. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 

<b>Output:</b>
B
</pre>
<p>
(B has won two sets, each of them by winning 6 games, while A and C 
won none. Thus each of these sets counts as two and B has won the match.) </p>



______________________________________________________
IGARB||||||true||||||


<p> Fred works as an IT consultant in an insurance company. As they always had a large amount of customers waiting and arguing at the front desk, management decided to deploy a ticket machine. Each customer would get a ticket with a number and there will be fancy LCD display over each desk showing the number of the next person. Fred was appointed to get this new enhancement working. <BR><BR>

Because Fred is lazy when it comes to manual labor and as an IT consultant he wouldn't lower himself to the level of some hardware technician (except when upgrading his own computer), he asked few technicians to install the displays and prepared himself just to plug in the ticket machine and try it out. Unfortunately (for Fred) the technicians, either inspired by Mr.Bean or because of their carelessness, installed the display upside-down. <BR><BR>

Being a software guy, Fred decided that the hardware should not be tampered with after it is installed (except for the case if he would be able to get back the technicians to repair it, but they were already angry at him for his nagging). Then he noted that from time to time the display shows a correct number even when it is upside-down. And hey, the ticket machine is an embedded device and contains a small processor! It would be just a sin for an IT guy not to try to meddle with it and try running an own version of Linux. Now we just need to figure out which readable numbers will the display show.</p>

<h3>Task specification</h3>
<p>
In the beginning the display shows the number 1 on its display. Each second the number shown is increased by 1. We see the display upside-down and thus not everything we see will make sense. Your task is to compute the K-th valid number we will see on the display. The digits the display uses are shown on the images below. An upside-down 1 still count as 1. The number we see may have leading zeroes &#8211; e.g. turning the number 600 upside down leads to a valid number.<BR><BR>

<img src="http://www.spoj.pl/content/turbo:i0.gif">A  
<img src="http://www.spoj.pl/content/turbo:i1.gif">A  
<img src="http://www.spoj.pl/content/turbo:i2.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i3.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i4.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i5.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i6.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i7.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i8.gif"> A 
<img src="http://www.spoj.pl/content/turbo:i9.gif">A 
</p>


*******InputConstraints*******

<p>
t - the number of test cases [t <= 2200], than t test cses follows. Each test case consist of one integer Ki [0 < Ki <= 10^200].
</p>


*******OutputConstraints*******

<p>For each Ki from the input file, output the Ki-th number shown on the display (including the leading zeroes, if there are some).
<BR>  
</p>


*******IOTestCases*******

<pre>
<b>Input:</b>
8
1
2
3
4
5
6
8
98
</pre>
<pre>
<b>Output:</b>
1
2
5
9
8
6
11
002
</pre>



______________________________________________________
LISA||||||true||||||


<p>Young people spend a lot of money on things like  sweets, music CDs, mobile phones and so on.  But most young girls/boys have one problem:  Their pocket money is not enough for all these jolly things.  Little Lisa Listig is one of these poor girls with a small pocket money budget. Last month her pocket money lasted only one week. So she decided to enter into negotiations with her father. Her father Tomm - a mathematician - had an incredibly ingenious idea: He wrote down some fancy digits with operators (+,*) in between them on a sheet of paper and allowed Lisa to insert brackets.  Then he declared that the result of that arithmetic expression is Lisa's new pocket money.   Now it's Lisa's task to maximize her pocket money.  As her father was surprised what a huge sum of money Lisa got for her result, he decided to minimize the result of the expression for his son Manfred.  Now it's your task to calculate the results obtained by Lisa and her father.</p>

*******InputConstraints*******

<p>The first line of input contains the number of testcases k ( k&lt; 5000 ).  Each of the following k lines consists of an arithemtic expression. This expression consists of numbers (0-9) seperated by one of the two operators  '*' and '+'.  There are no spaces between the characters. Each line contains less than 100 characters.</p>

*******OutputConstraints*******

<p>For each expression output the result obtained by Lisa and the result obtained by her father separated by one space. The results of the calculations are smaller than 2<sup>64</sup>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
1+2*3+4*5

<strong>Output:</strong>
105 27

</pre>
<p>Two possible expressions for the first testcase:</p>
<pre>105 = (1+2)*(3+4)*5
27  = 1+2*3+4*5
</pre>
<p>&nbsp;</p>


______________________________________________________
PHIDIAS||||||true||||||


<p>
Famous ancient Greek sculptor Phidias is making preparations to build another marvelous
monument. For this purpose he needs rectangular marble plates of sizes W1 x H1, W2 x
H2, ..., WN x HN.<BR><BR>

Recently, Phidias has received a large rectangular marble slab. He wants to cut the slab to
obtain plates of the desired sizes. Any piece of marble (the slab or the plates cut from it) 

can be cut either horizontally or vertically into two rectangular plates with integral widths 

andheights, cutting completely through that piece. This is the only way to cut pieces and 

piecescannot be joined together. Since the marble has a pattern on it, the plates cannot be 

rotated: if Phidias cuts a plate of size A ? B then it cannot be used as a plate of size B ? A 

unless A = B. He can make zero or more plates of each desired size. A marble plate is wasted if 

it is not of any of the desired sizes after all cuts are completed. Phidias wonders how to cut 

the initial slab so that as little of it as possible will be wasted.<BR><BR>

As an example, assume that in the figure below the width of the original slab is 21 and the
height of the original slab is 11, and the desired plate sizes are 10 x 4, 6 x 2, 7 x 5, and 15 

x 10. The minimum possible area wasted is 10, and the figure shows one sequence of cuts
with total waste area of size 10.<BR></p>
<h3><img src="http://www.spoj.pl/content/turbo:PHIDIAS.png"></H3><BR>
</p>
Your task is to write a program that, given the size of the original slab and the desired plate
sizes, calculates the minimum total area of the original slab that must be wasted.<BR>
</p>


*******InputConstraints*******

<p>
t - the number of test cases, then t test cases follow [t <= 20]. 

The first line of each test case contains two integers: first W, the width of the original slab, and then H, the height of the original slab. The second line contains one integer N: the number of desired plate sizes. The following N lines contain the desired plate sizes. Each of these lines contains two integers: first the width Wi and then the height Hi of that desired plate size (1 <= i <= N). [1 <= W <= 600, 1 <= H <= 600, 0 < N <= 200, 1 <= Wi <= W, and 1 <= Hi <= H.]<BR>
</p>


*******OutputConstraints*******

<p>For each test case output one line with a single integer: the minimum total area of the original slab that must be wasted.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
21 11
4
10 4
6 2
7 5
15 10

<b>Output:</b>
10

</pre>




______________________________________________________
FARMER||||||true||||||


<p> A farmer has a set of fields, each of which is surrounded by cypress trees. Also, the farmer
has a set of strips of land, each of which has a row of cypress trees. In both fields and strips,
between every two consecutive cypress trees is a single olive tree. All of the farmer&#8217;s
cypress trees either surround a field or are in a strip and all of the farmer&#8217;s olive trees are
between two consecutive cypress trees in a field or in a strip.<BR><BR>
One day the farmer became very ill and he felt that he was going to die. A few days before
he passed away he called his eldest son and told him, &#8220;I give you any Q cypress trees of
your choice and all the olive trees which are between any two consecutive cypress trees you
have chosen.&#8221; >From each field and from each strip the son can pick any combination of
cypress trees. Since the eldest son loves olives he wants to pick the Q cypress trees which
will allow him to inherit as many olive trees as possible.<BR><BR></p>
<H3>
<img src="http://www.spoj.pl/content/turbo:001.png"><BR>
</H3>
<p>
In Figure 1, assume that the son is given Q=17 cypress trees. To maximize his olive
inheritance he should choose all the cypress trees in Field 1 and Field 2, inheriting 17 olive
trees.<BR><BR>
You are to write a program which, given the information about the fields and the strips and
the number of cypress trees the son can pick, determines the largest possible number of
olive trees the son may inherit.<BR><BR>
</p>


*******InputConstraints*******

<p>
t - the number of test cases [t <= 20], then t test cses follows. 
The first line of each test case contains first the integer Q: the number of cypress trees the son is to select; 
then the integer M, the number of fields; and then the
integer K, the number of strips. The second line contains M integers N1, N2,&#8230; NM, : the
numbers of cypress trees in fields. The third line contains K integers R1, R2,&#8230; RK: the
numbers of cypress trees in strips.<BR>
In all test cases, 0 <= Q <= 150000, 0 <= M <= 2000, 0 <= K <= 2000, 3 <= N1 <= 150, 3 <= N2 <= 150,&#8230; 3 <= NM <=150,
2 <= R1 <= 150, 2 <= R2 <= 150,&#8230; 2 <= RK <= 150. The total number of cypress trees in the fields and
strips is at least Q. Additionally, in 50% of the test cases, Q <= 1500.
</p>


*******OutputConstraints*******

<p>For each test case output ont integer: largest possible number of olive trees the son may inherit.
<BR>  
</p>


*******IOTestCases*******

<pre>
<b>Input:</b>
1
17 3 3 
13 4 8 
4 8 6
</pre>
<pre>
<b>Output:</b>
17
</pre>



______________________________________________________
EMPODIA||||||true||||||


<p> The ancient mathematician and philosopher Pythagoras believed that reality is
mathematical in nature. Present-day biologists study properties of biosequences. A
biosequence is a sequence of M integers, which<BR>
&#8226; contains each of the numbers 0,1,&#8230;,M-1,<BR>
&#8226; starts with 0 and ends with M-1, and<BR>
&#8226; has no two elements E,E+1 in adjacent positions in this order.<BR>
A subsequence consisting of adjacent elements of a biosequence is called a segment..<BR><BR>
A segment of a biosequence is called a framed interval if it includes all integers whose
values are between the value of the first element, which must be the smallest element in the
segment, and the last element, which must be the largest and different from the first. A
framed interval is called an empodio if it does not contain any shorter framed intervals.<BR><BR>
As an example, consider the biosequence (0,3,5,4,6,2,1,7). The whole biosequence is a
framed interval. However, it contains another framed interval (3,5,4,6) and therefore it is
not an empodio. The framed interval (3,5,4,6) does not contain a shorter framed interval, so
it is an empodio. Furthermore, it is the only empodio in that biosequence.<BR><BR>
You are to write a program that, given a biosequence, finds all empodia (plural for empodio)
in that biosequence.
</p>


*******InputConstraints*******

<p>
t - the number of test cases [t <= 20], then t test cses follows. 
The first line of each test case contains a single integer M: the number
of integers in the input biosequence. The following M lines contain the integers of the
biosequence in the order of the sequence. Each of these M lines contains a single integer.
In one test case, 1000000 <= M <= 1100000. In all other test cases, 1 <= M <= 60000.
Additionally, in 50% of the test cases, M <= 2600.
</p>


*******OutputConstraints*******

<p>The first line for each test case is to contain one integer H:
the number of empodia in the input biosequence. The following H lines describe all
empodia of the input biosequence in the order of appearance of the starting point in the
biosequence. Each of these lines is to contain two integers A and B (in that order) separated
by a space, where the Ath element of the input biosequence is the first element of the
empodio and the Bth element of the input biosequence is the last element of the empodio.
<BR>  
</p>


*******IOTestCases*******

<pre>
<b>Input:</b>
1
8 
0 
3 
5 
4 
6 
2 
1 
7
</pre>
<pre>
<b>Output:</b>
1
2 5
</pre>



______________________________________________________
CSTREET||||||true||||||


<p>The municipal chronicals of an unbelievable lordly major town in a land far, far away tell the following story:<br /> Once upon a time the new crowned king G&uuml;nther decided to visit all towns in his kingdom. The people of the unbelievable lordly major town expected that king G&uuml;nther would like to see some of the most famous buildings in their town. For the lordly citizens it seemed neccessary that all streets in the town that the king would have to use had to be cobbled with stone. Unfortunately the unbelievable lordly major town had not much money at that time as they used most of their savings to erect the highest cathedral the world had ever seen.<br /> Roumours were afloat that the real reason for their thriftiness was not that the town treasury was empty but that many people believed that king G&uuml;nther came to the throne by deceiving his father king Erwin and that in his youth he made a pact with the devil. But anyway, the citizens of the unbelievable lordly major town decided to pave only as much streets as were absolutely necessary to reach every major building. <br /> Can you help the citizens of the unbelievable lordly major town to find out which streets should be paved?<br />It might be usefull to know that all major buildings are either at the end of a street or at an intersection. In addition to that you can assume that all buildings are connected by the given streets.</p>

*******InputConstraints*******

<p>t [number of testcases (1 &lt;= t &lt;= 100)]<br /> p [price to pave one furlong of street (positive integer)]<br /> n [number of main buildings in the town (1 &lt;= n &lt;= 1000)]<br /> m [number of streets in the town (1 &lt;= m &lt;= 300000)]<br /> a b c [street from building a to building b with length c (lengths are given in furlong and the buildings are numbered from 1 to n)]</p>

*******OutputConstraints*******

<p>For each testcase output the price of the cheapest possibility to reach all main buildings in the city on paved streets.  You can assume that the result will be smaller than 2^32.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
2
5
7
1 2 1
2 3 2
2 4 6
5 2 1
5 1 3
4 5 2
3 4 3

<strong>Output:</strong>
12
</pre>


______________________________________________________
MATH1||||||true||||||


<p>You are given n integers a<sub>1</sub>, a<sub>2</sub>,..., a<sub>n</sub> (0<=a<sub>i</sub><=n). The sum a<sub>1</sub>+ a<sub>2</sub>+...+ a<sub>n</sub> does not exceeded n.
Your task is to find n other integers x<sub>1</sub>, x<sub>2</sub>,..., x<sub>n</sub> (note that x<sub>i</sub> may be negative numbers) satisfying the following conditions:
<ul>
<li>(x<sub>i</sub> - x<sub>i+1</sub> + a<sub>i+1</sub> = 0) or (x<sub>i</sub> - x<sub>i+1</sub> + a<sub>i+1</sub> = 1) for i=1..n-1
<li>(x<sub>n</sub> - x<sub>1</sub> + a<sub>1</sub> = 0) or (x<sub>n</sub> - x<sub>1</sub> + a<sub>1</sub> = 1) 
<li>|x<sub>1</sub>|+|x<sub>2</sub>|+...+|x<sub>n</sub>| is minimized
</ul>

*******InputConstraints*******

<p>The first line of the input file contains an integer t representing the number of test cases (t<=20). Then t test cases follow. Each test case has the following form:
<ul>
<li>The first line contains n (1<=n<=1000)
<li>The second line contains n integers a<sub>1</sub>, a<sub>2</sub>,..., a<sub>n</sub> separated by single spaces
</ul>

*******OutputConstraints*******

<p>For each test case output a single value: the minimum value of |x<sub>1</sub>|+|x<sub>2</sub>|+...+|x<sub>n</sub>|


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
2 1 0 0
5
0 1 2 2 0

<b>Output:</b>
1
3

<b>Output Details:</b>
In the former case, the optimal solution is (x<sub>1</sub>=0, x<sub>2</sub>=0, x<sub>3</sub>=0, x<sub>4</sub>=-1)
In the latter case, the optimal solution is (x<sub>1</sub>=-1, x<sub>2</sub>=-1, x<sub>3</sub>=0, x<sub>4</sub>=1, x<sub>5</sub>=0)
</pre>


______________________________________________________
ONEZERO||||||true||||||


<p>Certain positive integers have their decimal representation consisting only of ones and zeros, and having at least one digit one, e.g. 101. If a positive integer does not have such a property, one can try to multiply it by some positive integer to find out whether the product has this property.

*******InputConstraints*******

<p>Number <i>K</i> of test cases (<i>K</i> is approximately 1000);<br>
in each of the next <i>K</i> lines there is one integer <i>n</i> (<i>1 <= n <= 20000)</i><br>


*******OutputConstraints*******

<p>For each test case, your program should compute the smallest multiple of the number <i>n</i> consisting only of digits 1 and 0 (beginning with 1).


*******IOTestCases*******


<pre>
<b>Input:</b>
3
17
11011
17
<b>Output:</b>
11101
11011
11101
</pre>



______________________________________________________
BOXES||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/BOXES/en/">English</a></td> 
<td width="50%"><a href="/problems/BOXES/vn/">Vietnamese</a></td> 
</tr></table>


<p>There are n boxes on the circle. The boxes are numbered from 1 to n (1<=n<=1000) in clock wise order. There are balls in the boxes, and the number of all the balls in the boxes is not greater than n.
<p>
The balls should be displaced in such a way that in each box there remains no more than one ball. In one move we can shift a ball from one box to one of it's neighboring boxes.
<p>
Write a program that: 
reads from the standard input the number of boxes n and the arrangement of balls in the boxes, 
computes the minimal number of moves necessary to displace the balls in such a way that in each box there remains no more than one ball, 
writes the result in the standard output. 



*******InputConstraints*******

<p>
The first line of the input file contains an integer t representing the number of test cases (t<=20). Then t test cases follows. Each test case has the following form:
<ul>
<li> The first line contains one positive integer n - the number of boxes
<li> The second line contains n nonnegative integer separated by single spaces. The i-th number is the number of balls in the i-th box.
</ul>


*******OutputConstraints*******

<p>For each test case, output one nonnegative integer - the number of moves necessary to displace the balls in such a way that in each box there remains no more than one ball. 


*******IOTestCases*******


<pre>
<b>Input:</b>
1
12
0 0 2 4 3 1 0 0 0 0 0 1

<b>Output:</b>
19
</pre>






______________________________________________________
BENEFACT||||||true||||||


<p>Another chapter of the municipal chronicles of a well known  unbelievable lordly major town (if this town is not well known to you,  you might want to solve problem CSTREET first) tells us the following  story: <br /> Once upon a time the citizens of the unbelievable lordly major town  decided to elect a major. At that time this was a very new idea and  election campaigns were completely unknown. But of course several  citizens wanted to become major and it didn't took long for them to  find out, that promising nice things that never will become real tends  to be useful in such a situation. One candidate to be elected as a  major was Ivo  sometimes called the benefactor because of his valuable  gifts to the unbelievably lordly major towns citizens.<br /> One day before the election day Ivo the benefactor made a promise to the  citizens of the town. In case of his victory in the elections he would  ensure that on one of the paved streets of the town street lamps would  be erected and that he would pay that with his own money. As thrifty as  the citizens of the unbelievable lordly major town were, they elected  him and one day after the elections they presented him their decision  which street should have street lamps. Of course they chose not only  the longest of all streets but renamed several streets so that a very  long street in the town existed. <br /> Can you find how long this street was? To be more specific, the  situation is as follows. You are presented a list of all paved streets  in the unbelievable lordly major town. As you might remember from  problem CSTREET in the town the streets are paved in a way that  between every two points of interest in the town exactly one paved  connection exists. Your task is to find the longest distance that  exists between any two places of interest in the city.</p>

*******InputConstraints*******

<p>The first line of input contains the number of testcases t.<br /> The first line of each testcase contains the number of places (2 &lt;=n&lt;=50000) in the town. Each street is given at one line by two places (1&lt;=a,b&lt;=n) and the length of the street (0&lt;=l&lt;20000).</p>

*******OutputConstraints*******

<p>For each testcase output one line which contains the maximum length of the longest street in the city.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
6
1 2 3
2 3 4 
2 6 2
6 4 6
6 5 5

<strong>Output:</strong>

12
</pre>


______________________________________________________
GREED||||||true||||||


<p>Gon is on Greedy island. He wants to go home. But to get the ticket to leave the game, he has to get N cards labeled in a sequence from 1 to N (the order of the cards in his hand is irrelevant). He already has N cards, but not forming a sequence from 1 to N. So he wants you to help him. For some cards, he can change one card for another for one piece of gold. Help him to get the ticket at the minimum cost (using the minimum number of exchanges).


*******InputConstraints*******

<p>
The first line contains t, the number of tests (1<=t<=10). For each test case:
<ul>
<li>the number of cards N is given is given in the first line (2<=N<=500).
<li>the next N lines contain the N cards owned by Gon.
<li>the following line contains e, the number of different allowed types of exchanges.
<li>the next e lines contain two integers x<sub>i</sub>,y<sub>i</sub> each which mean that we can exchange and replace the card marked x by the card marked y and vice versa.
</ul>
<p>There is a blank line after each test case.


*******OutputConstraints*******

<p>
For each test case, output a line denoting the minimum required cost.

*******IOTestCases*******

<pre>
<b>Input:</b>
1
4
1
2
2
2
2
2 3
3 4

<b>Output:</b>
3
</pre>



______________________________________________________
MATRIX||||||true||||||


<p>You are given a matrix A of M rows and N columns, consisting of numbers 0 and 1. For a rectangle in A (sides >= 1), X1 is the number of ones on its sides, X0 is the number of zeros on its sides, and its <i>value</i> is defined as X1 &#8211; X0. Let us consider W, the maximum value taken over submatrices of A, and S, the number of submatrices with value W. Your task is to find W and S.


*******InputConstraints*******

<p>The first line of input contains the number of testcases t (t <= 15).
The first line of each testcase contains the numbers M, N (1 <= M, N <= 200) Then M lines follow. In each line, there are N numbers 0 or 1. 


*******OutputConstraints*******

<p>For each testcase, you should output a single line with numbers W and S.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 6
1 1 1 1 1 1
1 0 0 0 0 1
1 0 0 0 0 1
1 0 0 0 0 1
1 1 1 1 1 1

<b>Output:</b>
18 1
</pre>



______________________________________________________
QTREE||||||true||||||


<p>You are given a tree (an acyclic undirected connected graph) with <b>N</b> nodes, and edges numbered 1, 2, 3...<b>N</b>-1.
<p>We will ask you to perfrom some instructions of the following form:</p>
<ul>
<li><b>CHANGE i ti</b> : change the cost of the i-th edge to ti<br>
or
<li><b>QUERY a b</b> : ask for the maximum edge cost on the path from node a to node b
</ul>


*******InputConstraints*******

<p>The first line of input contains an integer <b>t</b>, the number of test cases (<b>t</b> <= 20). t test cases follow.
<p>For each test case:</p> 
<ul>
<li>In the first line there is an integer <b>N</b> (<b>N</b> <= 10000),
<li>In the next <b>N</b>-1 lines, the i-th line describes the i-th edge: a line with three integers <b>a b c</b> denotes an edge between <b>a</b>, <b>b</b> of cost <b>c</b> (<b>c</b> <= 1000000),
<li>The next lines contain instructions <b>"CHANGE i ti"</b> or <b>"QUERY a b"</b>,
<li>The end of each test case is signified by the string "<b>DONE</b>".
</ul>
<p>There is one blank line between successive tests.


*******OutputConstraints*******

<p>For each "<b>QUERY</b>" operation, write one integer representing its result.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1

3
1 2 1
2 3 2
QUERY 1 2
CHANGE 1 3
QUERY 1 2
DONE

<b>Output:</b>
1
3
</pre>



______________________________________________________
ACS||||||false||||||

<p>You are given a matrix M of type 1234x5678. It is initially filled with 
integers 1...1234x5678 in row major order. Your task is to process a 
list of commands manipulating M. There are 4 types of commands: <br>
"R x y" swap the x-th and y-th row of M ;<br>
"C x y" swap the x-th and y-th column of M ;<br>
"Q x y" write out M(x,y) ;<br>
"W z" write out x and y where z=M(x,y). <br>


______________________________________________________
TAXI||||||true||||||


<p>Besides the well known unbelievable lordly major town's history there also current problems in this town. But to understand these problems you should know some facts from the unbelievable lordly major town's history.</p>
<p>Once upon a time the population of the unbelievable lordly major town grew so much that the citizens were in need of building new houses. As it was not allowed to erect houses outside the city wall they decided to found a new little town directly beside the main town. We will refer to this second town as the new unbelievable lordly major town. In the new unbelievable lordly major town all streets were built as straight lines intersecting at right angles at fixed distances (see picture below).</p>
<p style="text-align:center;"><img src="http://www.spoj.pl../../../../content/sgog:taxitaxi.png" alt="Road map" /></p>
<p>Knowing this we can leave the town's history and can focus on nowadays problems. One of these problems is directly connected to the "somnolent naggy festival" (SONAFE). Despite its name it's one of the town's most popular events and nearly everybody wants to get a ticket. To give everyone the same chance of getting one of the few tickets the place and time of the advance sale are kept secret until some minutes before the ticket counter opens. Once the opening of the ticket counter is disclosed (by radio to give everyone a fair chance) everyone interested in getting some tickets tries to get to the counter immediately.</p>
<p>One of the most profiting citizens of this ticket selling procedure is the new unbelievable lordly major town's taxi service owner. At the time of the radio announcement all over the town people ring up the taxi central and ask for a ride. The problem for the taxi central is that a lot of people ask for a ride at the same time and that the taxis have to pick up the people very quickly.</p>
<p>Your task is to help the taxi central finding out how many passengers can be transported to the ticket counter. You have to adhere to following constraints:</p>
<ul>
<li>each taxi can only take one passenger</li>
<li>passengers always wait at intersections of roads</li>
<li>at the time of the radio broadcast all taxis also wait at intersections</li>
<li>the taxi has to reach the passenger within a given time limit (otherwise he will be too late to get a ticket)</li>
</ul>

*******InputConstraints*******

<p>The first line contains the number of testcases k (k&lt;=250). The first line of each testcase contains the number of persons p (1&lt;=p&lt;=400), the number of taxicabs t (1&lt;=t&lt;=200) the speed s (1&lt;=s&lt;=2000) of the taxis in meters per seconds and the time c to collect a person in seconds (1&lt;=c&lt;=1000000). The next p lines contains the position of the persons. The next t lines contain the position of the taxicabs in the city.</p>

*******OutputConstraints*******

<p>For each testcase output the maximal number of persons that visit the party.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
2 3 10 40
2 5
5 2
2 3
4 1
4 4

<strong>Output:</strong>
2
</pre>


______________________________________________________
PERMUT2||||||false||||||

<p>
Some programming contest problems are really tricky: not only do they
require a different output format from what you might have expected, but
also the sample output does not show the difference. For an example,
let us look at permutations.<br>
A <b>permutation</b> of the integers <i>1</i> to <i>n</i> is an
ordering of
these integers. So the natural way to represent a permutation is
to list the integers in this order. With <i>n = 5</i>, a
permutation might look like 2, 3, 4, 5, 1. <br>
However, there is another possibility of representing a permutation:
You create a list of numbers where the <i>i</i>-th number is the
position of the integer <i>i</i> in the permutation. 
Let us call this second
possibility an <b>inverse permutation</b>. The inverse permutation
for the sequence above is 5, 1, 2, 3, 4.
<br>
An <b>ambiguous permutation</b> is a permutation which cannot be
distinguished from its inverse permutation. The permutation 1, 4, 3, 2
for example is ambiguous, because its inverse permutation is the same.
To get rid of such annoying sample test cases, you have to write a
program which detects if a given permutation is ambiguous or not.
</p>

______________________________________________________
BINGO||||||false||||||

<p>Bullshit Bingo is a game to make lectures, seminars or meetings less
boring.
Every player has a card with 5 rows and 5 columns. Each of the 25 cells
contains
a word (the cell in the middle has always the word "BINGO"
written in it).
Whenever a player hears a word which is written on his card, he can
mark it. The cell in the middle is already marked when the game starts. If a player
has marked all the words in a row, a column or a diagonal,
he stands up and shouts "BULLSHIT". After this, the game starts over
again.</p>
<p>Sitting in a lecture, you observe that some students in the audience
are
playing Bullshit Bingo.
You wonder what the average number of different words is until
"BULLSHIT" is exclaimed. For the purpose of this problem, a word
consists of letters of the English alphabet ('a' to 'z' or 'A' to 'Z').
Words are separated by characters other than letters (for example
spaces,
digits or punctuation).
Do the comparison of words case-insensitively, i.e. "Bingo" is the
same word
as "bingo". When counting the number of different words, ignore the word
BULLSHIT (indicating the end of the game), and consider only
the words of the current game, i.e., if a word has already occurred in a previous
game, you may still count it in the current game.
If the last game is unfinished, ignore the words of that game.
</p>

______________________________________________________
CHICAGO||||||false||||||

<p>In the movie "Blues Brothers", the orphanage where Elwood and Jack were raised may be sold to the Board of Education if they do not pay 5000 dollars in taxes at the Cook County Assessor's Office in Chicago. After playing a gig in the Palace Hotel ballroom to earn these 5000 dollars, they have to find a way to Chicago. However, this is not so easy as it sounds, since they are chased by the Police, a country band and a group of Nazis. Moreover, it is 106 miles to Chicago, it is dark and they are wearing sunglasses.<br /> As they are on a mission from God, you should help them find the safest way to Chicago. In this problem, the safest way is considered to be the route which maximises the probability that they are not caught.</p>

______________________________________________________
DECORATE||||||false||||||

<p>After building his huge villa, Mr. Rich cannot help but notice that
the interior walls
look rather blank. To change that, he starts to hang paintings from
his wonderful collection.
But soon he realizes that it becomes quite difficult to find a place on
the wall where a painting
can be placed without overlapping other paintings. Now he needs
a program which would tell him, given the already placed paintings,
where to place the next painting without moving any other paintings
(or indicating that this is impossible). Paintings have a rectangular
shape and are to be placed parallel to the side of the wall.
If you do not mind a nice reward from Mr. Rich, go on and
solve the problem.
</p>

______________________________________________________
EUROPEAN||||||false||||||

<p>As you may already know, different countries in Europe use different railroad systems. Not only do they use different voltages for their trains, but also the distance between the two rails (gauge) differs. The following table shows some railway gauges used:</p>
<table class="data" border="1" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<th>Broad gauge (Spain):</th> <th>1674 mm</th>
</tr>
<tr>
<th>Broad gauge (Portugal):</th> <th>1665 mm</th>
</tr>
<tr>
<th>Broad gauge (Ireland):</th> <th>1600 mm</th>
</tr>
<tr>
<th>Broad gauge (Finland):</th> <th>1524 mm</th>
</tr>
<tr>
<th>Broad gauge (former USSR):</th> <th>1520 mm</th>
</tr>
<tr>
<th>Standard gauge:</th> <th>1435 mm</th>
</tr>
<tr>
<th>Narrow gauge (meter gauge):</th> <th>1000 mm</th>
</tr>
</tbody>
</table>
<p>A museum has trains from several countries. It needs tracks for every train type in order to show visitors the trains in use. However, since only one train is used at a time, a rail can be used by trains of different types. It follows that for <em>n</em> trains, each requiring a different railway gauge, <em>n + 1</em> rails are sufficient (each train uses the leftmost rail and a rail that has exactly the required distance to it). But sometimes it is possible to save even more rails.</p>
<p>Given the required railway gauges, your task is to construct a railway track that can be used by every train and requires the least number of rails. Note that a train can use any two rails, provided the distance between them is right.</p>

______________________________________________________
FOOL||||||false||||||

<p>
Surely you know someone who thinks he is very clever. You decide to
let him
down with the following problem:<br>
</p>
<ul>
  <li>"Can you tell me what the syntax for a set is?", you ask him.</li>
  <li>"Sure!", he replies, "a set encloses a
possibly empty list
of elements within two curly braces. Each element is either another set
or a letter of
the given alphabet. Elements in a list are separated by a comma." </li>
  <li>"So if I give you a word, can you tell me if it is a
syntactically
correct
representation of a set?" </li>
  <li>"Of course, any fool can do it!" is his answer.</li>
</ul>
<p>
Now you got him! You present him with the following grammar, defining
formally the syntax for a set (which was described informally by him):</p>
<pre>Set          ::= "{" Elementlist "}"
Elementlist  ::= &lt;empty&gt; | List
List         ::= Element | Element "," List
Element      ::= Atom | Set
Atom         ::= "{" | "}" | ","
</pre>
<p>
&lt;empty&gt; stands for the empty word, i.e. the list in a set can be empty.<br>
Soon he realizes that this task is much harder than he has thought,
since the alphabet consists of the characters
which are also used for the syntax of the set. So he claims that it is
not possible to decide efficiently if a word
consisting of <samp>"{"</samp>, <samp>"}"</samp> and <samp>","</samp> is a syntactically correct
representation of a set or not.<br>
To disprove him, you need to write an efficient program that will
decide this
problem.</p>

______________________________________________________
GAME||||||false||||||

<p>
Sheikh Abdul really loves football. So you better don't ask how much
money he has spent to make famous teams join the annual tournament.
Of course, having spent so much money, he would like to see certain
teams play each other. He worked out a complete list of games
he would like to see. Now it is your task to distribute these games into rounds
according to following rules:<br>
</p>
<ul>
  <li>In each round, each remaining team plays at most one game</li>
  <li>If there is an even number of remaining teams, every team plays
exactly one game</li>
  <li>If there is an odd number of remaining teams, there is exactly
one team which plays no game
(it advances with a wildcard to the next round)</li>
  <li>The winner of each game advances to the next round, the loser is
eliminated from the tournament</li>
  <li>If there is only one team left, this team is declared the winner
of the tournament</li>
</ul>
<p>
As can be proved by induction, in such a tournament with <i>n</i>
teams,
there are exactly <i>n - 1</i> games required until a winner is
determined. <br>
Obviously, after round 1, teams may already have been eliminated which should take
part in another game. To prevent this, for each game you also have to
tell which team should win.</p>

______________________________________________________
HELP||||||false||||||

<p>
Preparing a problem for a programming contest takes a lot of time.
Not only do you have to write the problem description and write a
solution, but you also have to create difficult input files.
In this problem, you get the chance to help the problem setter
to create some input for a certain problem.<br>
For this purpose, let us select the problem which was not solved
during last year's local contest. The problem was about
finding the optimal binary search tree, given the probabilities that
certain nodes are accessed. Your job will be: given the desired optimal
binary search tree, find some access probabilities for which this binary
search tree is the unique optimal binary search tree. Don't worry if
you have not read last year's problem, all required definitions are provided
in the following.<br>
Let us define a <b>binary search tree</b>
inductively as follows:<br>
</p>
<ul>
  <li>The empty tree which has no node at all is a binary search tree</li>
  <li>Each non-empty binary search tree has a root, which is a node
labelled with an integer, and two binary search trees as left and right
subtree of the root</li>
  <li>A left subtree contains no node with a label &#8805; than the label of
the root</li>
  <li>A right subtree contains no node with a label &#8804; than the label of
the root</li>
</ul>
<p>Given such a binary search tree, the following <b>search procedure</b>
can be used to locate a node in the tree:<br>
Start with the root node. Compare the label of the current node with
the desired label. If it is the same, you have found the right node.
Otherwise, if the desired label is smaller, search in the left subtree,
otherwise search in the right subtree.<br>
The <b>access cost</b> to locate a node is the number of nodes you
have to visit until you find the right node.
An <b>optimal binary search tree</b> is a binary search tree
with the minimum expected access cost.</p>

______________________________________________________
TOURS||||||true||||||


<p>In Hanoi, there are N beauty-spots (2 <= N <= 200), connected by M one-way streets. The length of each street does not exceed 10000. You are the director of a travel agency, and you want to create some tours around the city which satisfy the following conditions:
<ul>
<li> Each of the N beauty-spots belongs to exactly one tour.
<li> Each tour is a cycle which consists of at least 2 places and visits each place once (except for the place we start from which is visited twice). 
<li> The total length of all the streets we use is minimal.
</ul>

*******InputConstraints*******

<p>The first line of input contains the number of testcases t (t <= 15). The first line of each testcase contains the numbers N, M. The next M lines contain three integers U V W which mean that there is one street from U to V of length W. 

*******OutputConstraints*******

<p>For each test case you shold output the minimal total length of all tours.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
6 9
1 2 5
2 3 5
3 1 10
3 4 12
4 1 8
4 6 11
5 4 7
5 6 9
6 5 4
5 8
1 2 4
2 1 7
1 3 10
3 2 10
3 4 10
4 5 10
5 3 10
5 4 3

<b>Output:</b>
42
40

<b>Detailed explanation:</b>
Test 1:
  Tour #1:  1 - 2 - 3 - 1  --> Length = 20
  Tour #2:  6 - 5 - 4 - 6  --> Length = 22

Test 2:
  Tour #1:  1 - 3 - 2 - 1  --> Length = 27
  Tour #2:  5 - 4 - 5      --> Length = 13

</pre>



______________________________________________________
MENU||||||true||||||


<p>Alfred wants to plan what to cook in the next days. He can cook various dishes. For each dish the costs of the ingredients and the benefit value is known. If a dish is cooked the second time in a row, the benefit value for the second time is 50 percent of the benefit value of first time, if it is prepared for the third or higher time in a row, the benefit value is 0. For example cooking a dish with benefit value v three times in a row leads to a total benefit value of 1.5*v.<br>
Help him to build the menu which maximizes the benefit value under the constraint that his budget is not exceeded.</p>

*******InputConstraints*******

<p>The input consists of several test cases. Each test case begins with 3 integers in a line: The number of days <i>k</i> (<i>1 &#8804; k &#8804; 21</i>) Alfred wants to plan for, the number of dishes <i>n</i> (<i>1 &#8804; n &#8804; 50</i>) he can cook and his budget <i>m</i> (<i>0 &#8804; m &#8804; 100</i>).
The following <i>n</i> lines describe the dishes Alfred can cook. The i-th line contains two integers: the costs <i>c</i> (<i>1 &#8804; c &#8804; 50</i>) and the benefit value <i>v</i> (<i>1 &#8804; v &#8804; 10000</i>) of the i-th dish.<br>
The end of the input is signaled by a test case with <i>k = n = m = 0</i>. You don't need to process this test case.</p>

*******OutputConstraints*******

<p>For each output, print the maximum benefit value reachable with 1 digit after the decimal point. Then print k integers with i-th integer being the number of the dish to cook on day i. Dishes are numbered from 1 to n. Print at least one space or new line character after each integer.<br>
If there are several possible menus reaching the maximum benefit value, select the one with minimum costs, if there are several with minimum costs, you can print any of them.<br>
If every menu exceeds the budget, print only the benefit value of 0.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2 1 5
3 5
3 5 20
2 5
18 6
1 1
3 3
2 3
0 0 0

<b>Output:</b>
0.0

13.0
1 5 1 
</pre>



______________________________________________________
HOSPITAL||||||true||||||


<p>County General Hospital is trying to chart its course through the troubled waters of the economy and shifting population demographics. To support the planning requirements of the hospital, you have been asked to develop a simulation program that will allow the hospital to evaluate alternative configurations of operating rooms, recovery rooms and operations guidelines. Your program will monitor the usage of operating rooms and recovery room beds during the course of one day.</p>
<p>
County General Hospital has several operating rooms and recovery room beds. Each surgery patient is assigned to an available operating room and following surgery the patient is assigned to one of the recovery room beds. The amount of time necessary to transport a patient from an operating room to a recovery room is fixed and independent of the patient. Similarly, both the amount of time to prepare an operating room for the next patient and the amount of time to prepare a recovery room bed for a new patient are fixed.</p>
<p>
All patients are officially scheduled for surgery at the same time, but the order in which they actually go into the operating rooms depends on the order of the patient roster. A patient entering surgery goes into the lowest numbered operating room available. For example, if rooms 2 and 4 become available simultaneously, the next patient on the roster not yet in surgery goes into room 2 and the next after that goes into room 4 at the same time. After surgery, a patient is taken to the available recovery room bed with the lowest number. A recovery room bed is only available if the preparation is already finished when the patient leaves surgery. If two patients emerge from surgery at the same time, the patient with the lower surgery room number will be the first assigned to a recovery room bed.</p>

*******InputConstraints*******

<p>
The input file contains data for several simulation runs. Each run is separated by a blank line. All numeric data in the input file are integers, and successive integers on the same line are separated by blanks. The first line of each run is the set of hospital configuration parameters to be used for this run. The parameters are, in order:</p>
<p>
<ul>
<li>Number of operating rooms  (maximum of 10)</li>
<li>Number of recovery room beds (maximum of 30)</li>
<li>Starting hour for 1st surgery of day (based on a 24-hour clock)</li>
<li>Minutes to transport patient from operating room to recovery room</li>
<li>Minutes to prepare operating room for next patient</li>
<li>Minutes to prepare recovery room bed for next patient</li>
<li>Number of surgery patients for the day (maximum of 100)</li>
</ul></p>
<p>
This initial configuration data will be followed by pairs of lines of patient data as follows:</p>
<p><ul>
<li>Line 1:  Last name of patient (maximum of 8 characters)</li>
<li>Line 2: Minutes required for surgery Minutes required in the recovery room</li>
</ul>
</p>
<p>
Patient records in the input file are ordered according to the patient roster, which determines the order in which patients are scheduled for surgery. The number of recovery room beds specified in any configuration will be sufficient to handle patients arriving from surgery (No queuing of patients for recovery room beds will be required). Computed times will not extend past 24:00.</p>

*******OutputConstraints*******

<p>Correct output shows which operating room and which recovery room bed is used by each patient, and the time period that the patient uses the room and bed along with a summary of the utilization of hospital facilities for that day. The output file consists of several sets of two tables each describing the results of the simulation run. The first table is in columnar form with appropriate column labels to show the number of each patient (in the order the patient roster), the patient's last name, the operating room number, the time surgery begins and ends, the recovery bed number and the time the patient enters and leaves the recovery room bed.</p>
<p>
The second table will also be in columnar form with appropriate column labels summarizing the utilization of operating rooms and recovery room beds. This summary indicates the facility type (room or bed), the facility number, the number of minutes used and percentage of available time utilized. Available time is defined as the time in minutes from the starting time for 1st surgery of day to the ending time of the last patient in a recovery room bed. Print a blank line after each run. Follow the output format shown on sample output.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>

5 12 07 5 15 10 16
Jones
28 140
Smith
120 200
Thompson
23 75
Albright
19 82
Poucher
133 209
Comer
74 101
Perry
93 188
Page
111 223
Roggio
69 122
Brigham
42 79
Nute
22 71
Young
38 140
Bush
26 121
Cates
120 248
Johnson
86 181
White
92 140

<b>Output:</b>

 Patient          Operating Room          Recovery Room
 #  Name     Room#  Begin   End      Bed#  Begin    End
 ------------------------------------------------------
 1  Jones      1    7:00    7:28      3    7:33    9:53
 2  Smith      2    7:00    9:00      1    9:05   12:25
 3  Thompson   3    7:00    7:23      2    7:28    8:43
 4  Albright   4    7:00    7:19      1    7:24    8:46
 5  Poucher    5    7:00    9:13      5    9:18   12:47
 6  Comer      4    7:34    8:48      4    8:53   10:34
 7  Perry      3    7:38    9:11      2    9:16   12:24
 8  Page       1    7:43    9:34      6    9:39   13:22
 9  Roggio     4    9:03   10:12      9   10:17   12:19
10  Brigham    2    9:15    9:57      8   10:02   11:21
11  Nute       3    9:26    9:48      7    9:53   11:04
12  Young      5    9:28   10:06      3   10:11   12:31
13  Bush       1    9:49   10:15     10   10:20   12:21
14  Cates      3   10:03   12:03      8   12:08   16:16
15  Johnson    2   10:12   11:38      4   11:43   14:44
16  White      5   10:21   11:53      7   11:58   14:18

Facility Utilization
Type  # Minutes  % Used
-------------------------
Room  1     165   29.68
Room  2     248   44.60
Room  3     258   46.40
Room  4     162   29.14
Room  5     263   47.30
Bed   1     282   50.72
Bed   2     263   47.30
Bed   3     280   50.36
Bed   4     282   50.72
Bed   5     209   37.59
Bed   6     223   40.11
Bed   7     211   37.95
Bed   8     327   58.81
Bed   9     122   21.94
Bed  10     121   21.76
Bed  11       0    0.00
Bed  12       0    0.00

</pre>



______________________________________________________
BILLIARD||||||true||||||


<p>In a billiard table with horizontal side <b>a</b> inches and vertical side <b>b</b> inches, a ball is launched from the middle of the table. After <b>s</b> > 0 seconds the ball returns to the point from which it was launched, after having made <b>m</b> bounces off the vertical sides and <b>n</b> bounces off the horizontal sides of the table. Find the launching angle <b>A</b> (measured from the horizontal), which will be between 0 and 90 degrees inclusive, and the initial velocity of the ball.</p>
<p>
Assume that the collisions with a side are elastic (no energy loss), and thus the velocity component of the ball parallel to each side remains unchanged. Also, assume the ball has a radius of zero. Remember that, unlike pool tables, billiard tables have no pockets.</p>

*******InputConstraints*******

<p>Input consists of a sequence of lines, each containing five nonnegative integers separated by whitespace. The five numbers are: <b>a</b>, <b>b</b>, <b>s</b>, <b>m</b>, and <b>n</b>, respectively. All numbers are positive integers not greater than 10000.</p>
<p>
Input is terminated by a line containing five zeroes.</p>

*******OutputConstraints*******

<p>For each input line except the last, output a line containing two real numbers (accurate to two decimal places) separated by a single space. The first number is the measure of the angle <b>A</b> in degrees and the second is the velocity of the ball measured in inches per second, according to the description above.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

100 100 1 1 1
200 100 5 3 4
201 132 48 1900 156
0 0 0 0 0

<b>Output:</b>

45.00 141.42
33.69 144.22
3.09 7967.81
</pre>



______________________________________________________
RAILROAD||||||true||||||


<p>It's Friday evening and Jill hates two things which are common to all trains:
</p>
<ol>
<li>They are always late.</li>
<li>The schedule is always wrong.</li>
</ol>
<p>
Nevertheless, tomorrow in the early morning hours Jill will have to travel from Hamburg to Darmstadt in order to get to the regional programming contest. Since she is afraid of arriving too late and being excluded from the contest she is looking for the train which gets her to Darmstadt as early as possible. However, she dislikes to get to the station too early, so if there are several schedules with the same arrival time then she will choose the one with the latest departure time.</p>
<p>
Jill asks you to help her with her problem. You are given a set of railroad schedules from which you must compute the train with the earliest arrival time and the fastest connection from one location to another. One good thing: Jill is very experienced in changing trains. She can do this instantaneously, i.e., in zero time!!!</p>

*******InputConstraints*******

<p>The very first line of the input gives the number of scenarios. Each scenario consists of three parts.</p>
<p>
Part one lists the names of all cities connected by the railroads. It starts with a number <i>1 < C &#8804; 100</i>, followed by <i>C</i> lines containing city names. These names consist of letters.</p>
<p>
Part two describes all the trains running during a day. It starts with a number <i>T &#8804; 1000</i> followed by <i>T</i> train descriptions. Each of them consists of one line with a number <i>t<sub>i</sub> &#8804; 100</i> and <i>t<sub>i</sub></i> more lines with a time and a city name, meaning that passengers can get on or off the train at that time at that city.</p>
<p>
Part three consists of three lines: Line one contains the earliest journey's starting time, line two the name of the city where she starts, and line three the destination city. The two cities are always different.</p>

*******OutputConstraints*******

<p>For each scenario print a line containing "Scenario i", where i is the number of the scenario starting at 1.</p>
<p>
If a connection exists then print the two lines containing zero padded timestamps and locations as shown in the sample. Use blanks to achieve the indentation. If no connection exists on the same day (i.e., arrival before midnight) then print a line containing "No connection".</p>
<p>
After each scenario print a blank line.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

2
3
Hamburg
Frankfurt
Darmstadt
3
2
0949 Hamburg
1006 Frankfurt
2
1325 Hamburg
1550 Darmstadt
2
1205 Frankfurt
1411 Darmstadt
0800
Hamburg
Darmstadt
2
Paris
Tokyo
1
2
0100 Paris
2300 Tokyo
0800
Paris
Tokyo

<b>Output:</b>

Scenario 1
Departure 0949 Hamburg
Arrival   1411 Darmstadt

Scenario 2
No connection

</pre>



______________________________________________________
SPIN||||||true||||||


<p><table>
<tbody>
<tr>
<td><img alt="tex2html_wrap62"
src="/content/ak15:279img1.gif" align="bottom" height="449"
width="585"> </td>
<td><img alt="tex2html_wrap64"
src="/content/ak15:279img2.gif" align="bottom" height="402"
width="190"> </td>
</tr>
</tbody>
</table>
<p>A disk can be rotated between horizontal and vertical only if it is
positioned over the
indentation marked `0' <em>and</em> the disk on its right is vertical
. The right-most
disk can always rotate if it is in position `0' since it has no disk on
its right. </p>
<p>The aim is to free the slide by moving it so its left edge aligns
with the `Win' mark: </p>
<p align="center"><img src="http://www.spoj.pl/content/ak15:279img3.gif"> </p>
<p>Your task is to write a program which will take several part-solved
puzzles and compute
the number of steps needed to move the slide to position `Win' for each
puzzle. </p>

*******InputConstraints*******

<p>There will be several puzzles in the input file. The first line of
the file will
contain an integer <i>n</i> specifying the number of puzzles. There
will then be <i>n</i>
lines, each of the form: </p>
<p><em>length orientations position</em> </p>
<p>where <i>length</i>(length < 30) is an integer indicating the
number of disks on the
slide, <i>orientations</i> is a string of <i>length</i> characters
from the set {<tt>h</tt>,<tt>v</tt>}
giving the orientation of each disk from left to right (<tt>h</tt> stands for horizontal, and <tt>v</tt> for vertical), and <i>position</i>
is an integer
from 0 to <i>length</i> specifying the numbered mark which aligns with
the left edge of
the slide. </p>

*******OutputConstraints*******

<p>For each puzzle, your program should output one integer on a line
which counts the
minimum number of steps needed to win the puzzle. A step is either a
movement of the
slide, one unit left or right, or the rotation of a disk. </p>

*******IOTestCases*******


<pre>
<b>Input:</b>

3
2 vv 2
7 vhhhvhh 4
29 vvvvvvvvvvvvvvvvvvvvvvvvvvvvv 29

<b>Output:</b>

7
357
1073741823
</pre>



______________________________________________________
HEXAGON||||||true||||||


<p>Consider a game board consisting of 19 hexagonal fields, as shown in the figure below. We can easily distinguish three main directions in the shape of the board: from top to bottom, from top-left to bottom-right, and from top-right to bottom-left. For each of these primary directions, the board can be viewed as a series of rows, consisting of 3, 4, 5, 4, and 3 fields, respectively.</p>
<img src="http://www.spoj.pl../../../content/ak15:317img3.gif" alt="" />
<p>The game board has to be completely covered using a set of hexagonal pieces. Each piece carries three numbers, one for every primary board direction. Only three different numbers are used for each direction. Every possible combination of three numbers for all three directions is assigned to a piece, leading to a set of 27 unique pieces. (The board in the above figure is still in the process of being covered.)</p>
<p>The score of a board is calculated as the sum of all 15 row scores (5 rows for each primary direction). The row scores are calculated as follows: if all pieces in a row carry the same number for the direction of the row, the row score is this number multiplied by the number of pieces in the row. Otherwise (the pieces carry different numbers in the row direction) the row score is zero. Note that the pieces may not be rotated. For example, the score of the leftmost row in the figure is 3 <sup>.</sup> 3 = 9, the score of the row to its right is 4 <sup>.</sup> 11 = 44.</p>
<p>While in the real game the pieces are chosen randomly and the set of pieces is fixed, we are interested in the highest possible score for a given set of numbers for each direction, when all pieces in a row carry the same number for the direction of the row. This means you have to choose those 19 pieces that result in the highest score under the constraint that each row has a score greater than zero.</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line of the input file contains an integer <strong>n</strong> which indicates the number of test cases. Each test case consists of three lines containing three different positive integers each. Each of these three lines contains the numbers for a single primary direction. From these numbers the set of pieces is generated.</p>

*******OutputConstraints*******

<p>For each test case output a line containing the number of the case (<tt>"Test #1"</tt>, <tt>"Test #2"</tt>, etc.), followed by a line containing the highest possible score for the given numbers. Add a blank line after each test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

1
9 4 3
8 5 2
7 6 1

<strong>Output:</strong>

Test #1
308

</pre>


______________________________________________________
ACODE||||||true||||||


<p>Alice and Bob need to send secret messages to each other and are discussing ways to encode their
messages:</p>
<blockquote>
<p>
	<u>Alice:</u> &#8220;Let&#8217;s just use a very simple code: We&#8217;ll assign &#8216;A&#8217; the code word 1, &#8216;B&#8217; will be 2,
	and so on down to &#8216;Z&#8217; being assigned 26.&#8221;<br></p>
<p>
	<u>Bob:</u> &#8220;That&#8217;s a stupid code, Alice. Suppose I send you the word &#8216;BEAN&#8217; encoded as 25114.
	You could decode that in many different ways!&#8221;<br>
</p>
<p>
	<u>Alice:</u> &#8220;Sure you could, but what words would you get? Other than &#8216;BEAN&#8217;, you&#8217;d get
	&#8216;BEAAD&#8217;, &#8216;YAAD&#8217;, &#8216;YAN&#8217;, &#8216;YKD&#8217; and &#8216;BEKD&#8217;. I think you would be able to figure out the
	correct decoding. And why would you send me the word &#8216;BEAN&#8217; anyway?&#8221;<br>
</p>
<p>
	<u>Bob:</u> &#8220;OK, maybe that&#8217;s a bad example, but I bet you that if you got a string of length 5000
	there would be tons of different decodings and with that many you would find at least two
	different ones that would make sense.&#8221;<br>
</p>
<p>
	<u>Alice:</u> &#8220;How many different decodings?&#8221;<br>
</p>
<p>
	<u>Bob:</u> &#8220;Jillions!&#8221;
</p>
</blockquote>
<p>
For some reason, Alice is still unconvinced by Bob&#8217;s argument, so she requires a program that will
determine how many decodings there can be for a given string using her code.</p>

*******InputConstraints*******

<p>Input will consist of multiple input sets. Each set will consist of a single line of at most 5000 digits representing a
valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits.
An input line of &#8216;0&#8217; will terminate the input and should not be processed.</p>

*******OutputConstraints*******

<p>For each input set, output the number of possible decodings for the input string. All answers will be
within the range of a 64 bit signed integer.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

25114
1111111111
3333333333
0

<b>Output:</b>

6
89
1
</pre>



______________________________________________________
APRIME||||||true||||||


<p>Given a sequence of consecutive integers n, n+1, n+2,..., m, an anti-prime sequence is a rearrangement
of these integers so that each adjacent pair of integers sums to a composite (non-prime) number. For
example, if n = 1 and m = 10, one such anti-prime sequence is 1, 3, 5, 4, 2, 6, 9, 7, 8, 10. This is also the
lexicographically first such sequence.</p>

<p>We can extend the definition by defining a degree d anti-prime sequence as one where all consecutive
subsequences of length 2, 3,..., d sum to a composite number. The sequence above is a degree 2 anti-prime
sequence, but not a degree 3, since the subsequence 5, 4, 2 sums to 11. The lexicographically
first degree 3 anti-prime sequence for these numbers is 1, 3, 5, 4, 6, 2, 10, 8, 7, 9.</p>

*******InputConstraints*******

<p>Input will consist of multiple input sets. Each set will consist of three integers, n, m, and d on a single
line. The values of n, m and d will satisfy 1 &#8804; n < m &#8804; 1000, and 2 &#8804; d &#8804; 10. The line 0 0 0 will
indicate end of input and should not be processed.
</p>

*******OutputConstraints*******

<p>For each input set, output a single line consisting of a comma-separated list of integers forming a degree
d anti-prime sequence (do not insert any spaces and do not split the output over multiple lines). In the
case where more than one anti-prime sequence exists, print the lexicographically first one (i.e., output
the one with the lowest first value; in case of a tie, the lowest second value, etc.). In the case where no
anti-prime sequence exists, output:
</p>
<blockquote><p>No anti-prime sequence exists.</p></blockquote>

*******IOTestCases*******


<pre>
<b>Input:</b>

1 10 2
1 10 3
1 10 5
40 60 7
0 0 0

<b>Output:</b>

1,3,5,4,2,6,9,7,8,10
1,3,5,4,6,2,10,8,7,9
No anti-prime sequence exists.
40,41,43,42,44,46,45,47,48,50,55,53,52,60,56,49,51,59,58,57,54
</pre>



______________________________________________________
HITOMISS||||||true||||||


<p>One very simple type of solitaire game known as &#8220;Hit or Miss&#8221; (also known as &#8220;Frustration,&#8221; &#8220;Harvest,&#8221;
&#8220;Roll-Call,&#8221; &#8220;Talkative&#8221;, and &#8220;Treize&#8221;) is played as follows: take a standard deck of 52 playing cards &#8212;
four sets of cards numbered 1 through 13 (suits do not matter in this game) which have been shuffled &#8212; and start counting through the deck 1, 2, 3, . . . , and so on. When your count reaches 13, start over
at 1. Each time you count, look at the top card of the deck and do one of two things: if the number
you count matches the value of the top card, discard it from the deck; if it does not match it, move that
card to the bottom of the deck. You win the game if you are able to remove all cards from the deck
(which may take a very long time).</p>

<p>A version of this game can be devised for two or more players. The first player starts as before with a
52 card deck, while the other players have no cards initially. As the first player removes cards from her
deck, she gives them to the second player, who then starts playing the same game, starting at count
1. When that player gets a match, he passes his card to the third player, and so on. The last player
discards matches rather than passing them to player 1. All players who have cards to play with perform
the following 2-step cycle of moves in lockstep:

<blockquote>
<p>
	1. Each player says his or her current count value and checks for a match. If there is no match, the
	top card is moved to the bottom of the deck; otherwise it is passed to the next player (or discarded
	if this is the last player).<br></p>
<p>
	2. Each player except the first takes a passed card (if there is one) and places it at the bottom of his
	or her deck.</p>
</blockquote>

<p>These rules are repeated over and over until either the game is won (all the cards are discarded by the
last player) or an unwinnable position is reached. If any player ever runs out of cards, he waits until
he is passed a card and resumes his count from where he left off (e.g., if player 3 passes his last card
on a count of 7, he waits until he receives a card from player 2 and resumes his count with 8 at the
beginning of the next 2-step cycle).</p>

*******InputConstraints*******

<p>Input will consist of multiple input sets. The first line of the file will contain a single positive integer n
indicating the number of input sets in the file. Each input set will be a single line containing 53 integers:
the first integer will indicate the number of players in the game and the remaining 52 values will be the
initial layout of the cards in the deck, topmost card first. These values will all lie in the range 1 . . . 13,
and the number of players will lie in the range 1 . . . 10.</p>

*******OutputConstraints*******

<p>For each input set, output the input set number (as shown below, starting with 1) and either the phrase
&#8220;unwinnable&#8221; or a list showing the last card discarded by each player. Use a single blank to separate
all outputs.</p>

*******IOTestCases*******


<pre>
<b>Input:</b> (note that the line break is only in the sample input for displaying purposes)

2
4 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13
  1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13
4 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1
  2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1

<b>Output:</b>

Case 1: 13 13 13 13
Case 2: unwinnable
</pre>



______________________________________________________
CONDUIT||||||true||||||


<p>Irv Kenneth Diggit works for a company that excavates trenches, digs holes and generally tears up
people&#8217;s yards. Irv&#8217;s job is to make sure that no underground pipe or cable is underneath where
excavation is planned. He has several different maps, one for each utility company, showing where their conduits lie, and he needs to draw one large, consolidated map combining them all. One approach
would be to simply draw each of the smaller maps one at a time onto the large map. However, this
often wastes time, not to mention ink for the pen-plotter in the office, since in many cases portions
of the conduits overlap with each other (albeit at different depths underground). What Irv wants is a
way to determine the minimum number of line segments to draw given all the line segments from the
separate maps.</p>

*******InputConstraints*******

<p>Input will consist of multiple input sets. Each set will start with a single line containing a positive
integer n indicating the total number of line segments from all the smaller maps. Each of the next n
lines will contain a description of one segment in the format </p><p>x<sub>1</sub> y<sub>1</sub> x<sub>2</sub> y<sub>2</sub>
</p>
<p>where (x<sub>1</sub>,y<sub>1</sub>) are the coordinates of one endpoint and (x<sub>2</sub>,y<sub>2</sub>) are the coordinates of the other. Coordinate
values are floating point values in the range 0 ...1001 specified to at most two decimal places. The
maximum number of line segments will be 10000 and all segments will have non-zero length. Following
the last input set there will be a line containing a 0 indicating end of input; it should not be processed.</p>

*******OutputConstraints*******

<p>For each input set, output on a single line the minimum number of line segments that need to be drawn
on the larger, consolidated map.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

3
1.0 10.0 3.0 14.0
0.0 0.0 20.0 20.0
10.0 28.0 2.0 12.0
2
0.0 0.0 1.0 1.0
1.0 1.0 2.15 2.15
2
0.0 0.0 1.0 1.0
1.0 1.0 2.15 2.16
0

<b>Output:</b>

2
1
2
</pre>



______________________________________________________
RPGAMES||||||true||||||


<p>Phil Kropotnik is a game maker, and one common problem he runs into is determining the set of dice to
use in a game. In many current games, non-traditional dice are often required, that is, dice with more
or fewer sides than the traditional 6-sided cube. Typically, Phil will pick random values for all but the last die, then try to determine specific values to put on the last die so that certain sums can be rolled
with certain probabilities (actually, instead of dealing with probabilities, Phil just deals with the total
number of different ways a given sum can be obtained by rolling all the dice). Currently he makes this
determination by hand, but needless to say he would love to see this process automated. That is your
task.</p>
<p>For example, suppose Phil starts with a 4-sided die with face values 1, 10, 15, and 20 and he wishes
to determine how to label a 5-sided die so that there are a) 3 ways to obtain a sum of 2, b) 1 way to
obtain a sum of 3, c) 3 ways to obtain 11, d) 4 ways to obtain 16, and e)1 way to obtain 26. To get
these results he should label the faces of his 5-sided die with the values 1, 1, 1, 2, and 6. (For instance,
the sum 16 may be obtained as 10 +6 or as 15 +1, with three different &#8220;1&#8221; faces to choose from on the
second die, for a total of 4 different ways.) Note that he sometimes only cares about a subset of the sums reachable by rolling all the dices (like in the previous example).</p>

*******InputConstraints*******

<p>Input will consist of multiple input sets. Each input set will start with a single line containing an integer
n indicating the number of dice that are already specified. Each of the next n lines describes one of
these dice. Each of these lines will start with an integer f (indicating the number of faces on the die)
followed by f integers indicating the value of each face. The last line of each problem instance will have
the form
</p>
<p>r m v<sub>1</sub> c<sub>1</sub> v<sub>2</sub> c<sub>2</sub> v<sub>3</sub> c<sub>3</sub> &#183;&#183;&#183; v<sub>m</sub> c<sub>m</sub>
</p>
<p>where r is the number of faces required on the unspecified die, m is the number of sums of interest,
v<sub>1</sub>,...,vs<ub>m</sub> are these sums, and c<sub>1</sub>,...,c<sub>m</sub> are the counts of the desired number of different ways in which
to achieve each of the respective sums.
</p>
<p>Input values will satisfy the following constraints: 1 &#8804; n &#8804; 20, 3 &#8804; f &#8804; 20, 1 &#8804; m &#8804; 10, and 4 &#8804; r &#8804; 6.
Values on the faces of all dice, both the specified ones and the unknown die, will be integers in the range
1 ...50, and values for the v<sub>i</sub>&#8217;s and c<sub>i</sub>&#8217;s are all non-negative and are strictly less than the maximum
value of a 32-bit signed integer.
</p>
<p>The last input set is followed by a line containing a single 0; it should not be processed.</p>

*******OutputConstraints*******

<p>For each input set, output a single line containing either the phrase &#8220;Final die face values are&#8221;
followed by the r face values in non-descending order, or the phrase &#8220;Impossible&#8221; if no die can be found
meeting the specifications of the problem. If there are multiple dice which will solve the problem, choose
the one whose lowest face value is the smallest; if there is still a tie, choose the one whose second-lowest
face value is smallest, etc.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

1
4 1 10 15 20
5 5 2 3 3 1 11 3 16 4 26 1
1
6 1 2 3 4 5 6
6 3 7 6 2 1 13 1
4
6 1 2 3 4 5 6
4 1 2 2 3
3 3 7 9
8 1 4 5 9 23 24 30 38
4 4 48 57 51 37 56 31 63 11
0

<b>Output:</b>

Final die face values are 1 1 1 2 6
Impossible
Final die face values are 3 7 9 9
</pre>



______________________________________________________
TRANK||||||true||||||


<p>It&#8217;s preseason and the local newspaper wants to publish a preseason ranking of the teams in the local
amateur basketball league. The teams are the Ants, the Buckets, the Cats, the Dribblers, and the
Elephants. When Scoop McGee, sports editor of the paper, gets the rankings from the selected local
experts down at the hardware store, he&#8217;s dismayed to find that there doesn&#8217;t appear to be total agreement
and so he&#8217;s wondering what ranking to publish that would most accurately re ect the rankings he got
from the experts. He&#8217;s found that finding the median ranking from among all possible rankings is one
way to go.
</p>
<p>The median ranking is computed as follows: Given any two rankings, for instance ACDBE and
ABCDE, the distance between the two rankings is defined as the total number of pairs of teams
that are given different relative orderings. In our example, the pair B, C is given a different ordering
by the two rankings. (The first ranking has C above B while the second ranking has the opposite.)
The only other pair that the two rankings disagree on is B, D; thus, the distance between these two
rankings is 2. The median ranking of a set of rankings is that ranking whose sum of distances to all the
given rankings is minimal. (Note we could have more than one median ranking.) The median ranking
may or may not be one of the given rankings.
</p>
<p>Suppose there are 4 voters that have given the rankings: ABDCE, BACDE, ABCED and ACBDE.
Consider two candidate median rankings ABCDE and CDEAB. The sum of distances from the ranking
ABCDE to the four voted rankings is 1 + 1 + 1 + 1 = 4. We&#8217;ll call this sum the value of the ranking
ABCDE. The value of the ranking CDEAB is 7 + 7+ 7 + 5 = 26.
It turns out that ABCDE is in fact the median ranking with a value of 4.</p>

*******InputConstraints*******

<p>There will be multiple input sets. Input for each set is a positive integer n on a line by itself, followed
by n lines (n no more than 100), each containing a permutation of the letters A, B, C, D and E,
left-justified with no spaces. The final input set is followed by a line containing a 0, indicating end of
input.</p>

*******OutputConstraints*******

<p>Output for each input set should be one line of the form:
</p>
<p><i>ranking</i> is the median ranking with value <i>value</i>.
</p>
<p>Of course ranking should be replaced by the correct ranking and value with the correct value. If there
is more than one median ranking, you should output the one which comes first alphabetically.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

4
ABDCE
BACDE
ABCED
ACBDE
0

<b>Output:</b>

ABCDE is the median ranking with value 4.
</pre>



______________________________________________________
TOANDFRO||||||true||||||


<p>Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of
columns and write the message (letters only) down the columns, padding with extra random letters so
as to make a rectangular array of letters. For example, if the message is &#8220;There&#8217;s no place like home on
a snowy night&#8221; and there are five columns, Mo would write down
</p>
<p><pre>
t o i o y
h p k n n
e l e a i
r a h s g
e c o n h
s e m o t
n l e w x
</pre>
</p>
<p>Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the
character &#8216;x&#8217; to pad the message out to make a rectangle, although he could have used any letter.
Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and
right-to-left. So, the above would be encrypted as
</p>
<p><pre>toioynnkpheleaigshareconhtomesnlewx</pre>
</p>
<p>Your job is to recover for Larry the original message (along with any extra padding letters) from the
encrypted one.</p>

*******InputConstraints*******

<p>There will be multiple input sets. Input for each set will consist of two lines. The first line will contain
an integer in the range 2...20 indicating the number of columns used. The next line is a string of up
to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of
input.</p>

*******OutputConstraints*******

<p>Each input set should generate one line of output, giving the original plaintext message, with no spaces.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

5
toioynnkpheleaigshareconhtomesnlewx
3
ttyohhieneesiaabss
0

<b>Output:</b>

theresnoplacelikehomeonasnowynightx
thisistheeasyoneab
</pre>



______________________________________________________
TRANSL||||||true||||||


<p>Bob Roberts is in charge of performing translations of documents between various languages. To aid
him in this endeavor his bosses have provided him with translation files. These files come in twos &#8212; one
containing sample phrases in one of the languages and the other containing their translations into the
other language. However, some over-zealous underling, attempting to curry favor with the higher-ups
with his initiative, decided to alphabetically sort the contents of all of the files, losing the connections
between the phrases and their translations. Fortunately, the lists are comprehensive enough that the
original translations can be reconstructed from these sorted lists. Bob has found this is most usually
the case when the phrases all consist of two words. For example, given the following two lists:</p>
<table border = "1">
<tbody>
<tr>
<td>Language 1 Phrases</td>
<td>Language 2 Phrases</td>
</tr>
<tr>
<td>arlo zym</td>
<td>bus seat</td>
</tr>
<tr>
<td>flub pleve</td>
<td>bus stop</td>
</tr>
<tr>
<td>pleve dourm</td>
<td>hot seat</td>
</tr>
<tr>
<td>pleve zym</td>
<td>school bus</td>
</tr>
</tbody>
</table>
<p>Bob is able to determine that arlo means hot, zym means seat, ub means school, pleve means bus, and
dourm means stop. After doing several of these reconstructions by hand, Bob has decided to automate
the process. And if Bob can do it, then so can you.

*******InputConstraints*******

<p>Input will consist of multiple input sets. Each input set starts with a positive integer n, n &#8804; 250, indicating the number of two-word phrases in each language. This is followed by 2n lines, each containing
one two-word phrase: the first n lines are an alphabetical list of phrases in the first language, and the
remaining n lines are an alphabetical list of their translations into the second language. Only upper and
lower case alphabetic characters are used in the words. No input set will involve more than 25 distinct
words. No word appears as the first word in more than 10 phrases for any given language; likewise, no
word appears as the last word in more than 10 phrases. A line containing a single 0 follows the last
problem instance, indicating end of input.</p>

*******OutputConstraints*******

<p>For each input set, output lines of the form
</p>
<p><pre>word1/word2</pre>
</p>
<p>where word1 is a word in the first language and word2 is the translation of word1 into the second
language, and a slash separates the two. The output lines should be sorted according to the first
language words, and every first language word should occur exactly once. There should be no white
space in the output, apart from a single blank line separating the outputs from different input sets.
Imitate the format of the sample output, below. There is guaranteed to be a unique correct translation
corresponding to each input instance.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

4
arlo zym
flub pleve
pleve dourm
pleve zym
bus seat
bus stop
hot seat
school bus
2
iv otas
otas re
ec t
eg ec
0

<b>Output:</b>

arlo/hot
dourm/stop
flub/school
pleve/bus
zym/seat

iv/eg
otas/ec
re/t
</pre>



______________________________________________________
HIKE||||||true||||||


<p>"Hike on a Graph" is a game that is played on a board on
which an undirected graph is drawn. The graph is complete and has
all loops, i.e. for any two locations there is exactly one arrow
between them. The arrows are coloured. There are three players, and
each of them has a piece. At the beginning of the game, the three
pieces are in fixed locations on the graph. In turn, the players
may do a move. A move consists of moving one's own piece along an
arrow to a new location on the board. The following constraint is
imposed on this: the piece may only be moved along arrows of the
same colour as the arrow between the two opponents' pieces.
</p>

<p>

In the sixties ("make love not war") a one-person variant
of the game emerged. In this variant one person moves all
the three pieces, not necessarily one after the other, but
of course only one at a time. Goal of this game is to get
all pieces onto the same location, using as few moves as
possible. Find out the smallest number of moves that is
necessary to get all three pieces onto the same location,
for a given board layout and starting positions.</p>

*******InputConstraints*******

<p>The input file contains several test cases. Each test
case starts with the number <i>n</i>. Input is terminated
by <i>n=0</i>. Otherwise, <i>1<=n<=50</i>. Then
follow three integers <i>p<sub>1</sub>, p<sub>2</sub>,
p<sub>3</sub></i> with <i>1<=p<sub>i</sub><=n</i>

denoting the starting locations of the game pieces. The
colours of the arrows are given next as a <i>n?n</i>
matrix <i>m</i> of whitespace-separated lower-case letters. The
element <i>m<sub>ij</sub></i> denotes the colour of the
arrow between the locations <i>i</i> and <i>j</i>. Since
the graph is undirected, you can assume the matrix to be
symmetrical.</p>

*******OutputConstraints*******

<p>For each test case output on a single line the minimum number of moves
required to get all three pieces onto the same location, or the word
"impossible" if that is not possible for the given board and starting
locations.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

3 1 2 3
r b r
b b b
r b r
2 1 2 2
y g
g y
0

<b>Output:</b>

2
impossible
</pre>



______________________________________________________
FRACTION||||||true||||||


<p>You are given a positive integer N. Let us consider set A of fractions x/y where 0 <= x/y <= 1, y <= N and the maximum common divisor of x and y is 1. </p>
<p>
For example N = 5. Set A in increasing order consists of elements 0/1; 1/5; 1/4; 1/3; 2/5; 1/2; 3/5; 2/3; 3/4; 4/5; 1/1.</p>
<p>
Your task is to find the i-th smallest fraction in set A.</p>

*******InputConstraints*******

<p>The first line of input contains the number of testcases t (t <= 15). The first line of each testcase contains numbers N and M (N <= 5000, M <= 10000). The next M lines contain one question each.

*******OutputConstraints*******

<p>For each testcase, you should output M lines which are the answers to the M questions.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 4
1
3
5
8

<b>Output:</b>
0/1
1/4
2/5
2/3
</pre>



______________________________________________________
SCANNER||||||true||||||


<P>
A body scanner works by scanning a succession of horizontal slices through
the body; the slices are imaged one at a time. The image slices can be
reassembled to form a three dimensional model of the object. Write a
program to construct a two dimensional image slice using data captured
during the scan.
<P>
<DIV ALIGN="CENTER">
<IMG
 SRC="/content/ak15:229img1.gif"
 ALT="epsfbox{p229.eps}">
</DIV>
<P>
The scanner consists of four arrays of sensors arranged around
a 
<SPAN CLASS="MATH">10?15</SPAN> matrix. Array 1 consists of 10 sensors pointing to the right,
array 2 has 24 sensors pointing diagonally to the top right, array 3
has 15 sensors pointing to the top and array 4 has 24 sensors pointing
to the top left. Each sensor records the thickness of that portion of the
object directly in front of that sensor.
<P>
Readings from the arrays of sensors are recorded in counterclockwise
order. Within an array of sensors, data are also recorded counterclockwise.
A complete scan consists of 73 readings.
<P>

*******InputConstraints*******

<p>The input file begins with a line with an integer indicating the number
of image slices to follow. For each image slice, there are separate lines
with 10, 24, 15, and 24 integers representing sensor data from sensor
arrays 1 through 4 respectively. The order of the readings is indicated
in the diagram. You can assume that there exist at least one image for the given sensor data.
<p>

*******OutputConstraints*******

<p>
For each slice, your program should print 10 lines of 15 cells. To
indicate that the cell represents a part of the object, print a hash
character (<TT>#</TT>) for the cell; to indicate that the cell is not a part of
the object, print a period (<TT>.</TT>). Between successive output image slices,
print a blank line. 

<P>
It is possible for the result of a scan to be ambiguous, in that
case you can print any solution.
<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

1
10 10 6 4 6 8 13 15 11 6
0 1 2 2 2 2 4 5 5 6 7 6 5 6 6 5 5 6 6 3 2 2 1 0
2 4 5 5 7 6 7 10 10 10 7 3 3 5 5
0 0 1 3 4 4 4 4 3 4 5 7 8 8 9 9 6 4 4 2 0 0 0 0

<b>Output:</b>

.##########....
.##########....
....######.....
......####.....
.......####..##
.......########
#####..########
###############
..#########..##
....######.....
</pre>



______________________________________________________
TCUTTER||||||true||||||


<P>
In a Tin Cutting factory there is a machine for cutting parts from tin plates. It has an
extraordinarily sharp knife able to make horizontal or vertical segment cuts in the tin plates. Each
cutting process consists of a sequence of such cuts. Each segment cut is given by its endpoints that
are always located inside the tin plate. During the cutting process some parts of tin plate can fall
out and so some holes in the plate can emerge.
<P>
<P>
Factory management needs to predict the number of holes in the plate at the end of the
given sequence of cuts. Write a program that answers this question. Single segment cuts are not
considered to be holes.
<P>
<P>
Here there are examples of some situations that can arise after cutting:
<P>
<center><img src=/content/ak15:308img5.gif></center>
<P align="center">
two holes two holes one hole one hole
</P>

*******InputConstraints*******

<p>The input file consists of blocks of lines. Each block except the last
describes one cutting
process. In the first line of the block there is a number  <IMG WIDTH=64 HEIGHT=26 ALIGN=MIDDLE ALT="tex2html_wrap_inline33" SRC="/content/ak15:308img1.gif"  > 

indicating the number of segment
cuts in the cutting process. These cuts are defined by the following <I>N</I>
lines. The line defining one
segment cut has the form  <IMG WIDTH=78 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline37" SRC="/content/ak15:308img2.gif"  >  where  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline39" SRC="/content/ak15:308img3.gif"  >  and  <IMG WIDTH=46 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline41" SRC="/content/ak15:308img4.gif"  > 
are the co-ordinates of the end
points of the segment cut. They are separated by one space. The co-ordinates
are integers and
always define horizontal or vertical segment (i.e. segment parallel
with <I>x</I> or <I>y</I> axis).
</P>
<P>
The last block consists of just one line containing 0.
<P>

*******OutputConstraints*******

<p>The output file contains the lines corresponding to the blocks in the input
file. Each such line
contains the number of holes that remain in the tin plate after the
execution of the corresponding
cuts.
</P>
<P>
There is no line in the output file corresponding to the
last "null" block of the input file.
<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

4
0 1 1 1
1 1 1 0
1 0 0 0
0 0 0 1
2
0 1 2 1
1 2 1 0
0

<b>Output:</b>

1
0
</pre>



______________________________________________________
LOGIC||||||true||||||


<p>Consider a  10x10  grid. Cells in this grid can contain one of
five logic operations (AND, OR, NOT,
Input, Output). These can be joined together to form a logic circuit.
Given a description of a circuit
and a set of boolean values, build the logic circuit and execute the input
stream against it.
<P>

*******InputConstraints*******

<p>The first line of the input contains a single integer <I>n</I>, which specifies the number of circuits to be
processed. There will then be <I>n</I> groups of circuit descriptions and test values.
<P>
<P>
A circuit is made up of a number of operations. Each line describing an operation begins with three
characters: the co-ordinates for a cell, 0-9 on the <I>X</I>-axis then 0-9 on the <I>Y</I>-axis, followed by a single
character to represent the operation of that cell (`<TT>&</TT>' for AND, `<TT>|</TT>' for OR,
`<TT>!</TT>' for NOT, `<TT>i</TT>' for Input and `<TT>o</TT>'
for Output). Optionally following each triple is a set of co-ordinate
pairs which represent the <I>x</I> and <I>y</I>

co-ordinates of cells that take the output of this cells operation as an input for theirs. This (possibly
empty) output list is terminated by `<TT>..</TT>'. The list of operations is terminated by a line containing the
word `<TT>end</TT>'.
</P>
<P>
Next, for each circuit, comes the set of test values. The first line contains
an integer <I>t</I> which gives the number of test cases your program must run. Next, there are <I>t</I> lines, each line containing a
sequence of `<TT>0</TT>' and `<TT>1</TT>' characters symbolising the input values for one test case. The number of inputs will always correspond to the number of inputs defined by the circuit description. The input
values are to be applied to the inputs in the order in which the input
operations were defined in the circuit description.
</P>
<P>
The next circuit description, if any, will then follow.
<P>

*******OutputConstraints*******

<p>For each circuit, your program should output one line for each test case given in the input. The line
should contain one `<TT>0</TT>' or `<TT>1</TT>' character for each output defined by the circuit description in the order in
which the outputs were defined.
<P>
<P>
Your program should output a blank line after each set of test cases.
<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

1
00i 11 13 ..
02i 11 13 ..
11& 21 ..
21o ..
13| 23 ..
23o ..
end
4
00
01
10
11

<b>Output:</b>

00
01
01
11
</pre>
<p>
<B>Notes:</B>
<UL><LI> i, o and ! operations will always have exactly one input.<LI> & and <TT>|</TT> operations will always have exactly two inputs.<LI> Even if an operation can feed others, it does not have to.<LI> No recursive circuits.<LI> o can also be an input for another gate

</UL>
<P>
<P>
<P>
<B>Hint:</B>
Sample input specifies a circuit consiting of an `AND' and an `OR' operation
in parallel both fed from the same two inputs:
<P>
<PRE>               +---------\
3              |          |OR #----------OUT(2)
               |     +---/
               |     |
2     IN(2)----+     |
               |     |
               +---------\
1                    |    |AND#----------OUT(1)
                     +---/
                     |
0      IN(1)---------+

         0                 1              2</PRE>
<P>
In grid terms this is two inputs at 0,0 and 1,0. The first input feeds the <TT>AND</TT> operation at 1,1 and the

<TT>OR</TT> operation at 1,3. The second input operation feeds the second input for the same <TT>AND</TT> and <TT>OR</TT>
operations. The <TT>AND</TT> operation then feeds an output operation at 2,1. The <TT>OR</TT> operation also feeds an output operation, this one at 2,3.
<P>


______________________________________________________
RNUMBER||||||true||||||


<p>A Black Box algorithm supposes that natural
number sequence 
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img1.gif"
 ALT="$u(1), u(2), dots, u(N)$">
is sorted
in non-descending order, <IMG
 WIDTH="63" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img2.gif"
 ALT="$N le M$">
and for each <I>p</i>
(
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img3.gif"
 ALT="$1 le p le N$">)
an inequality 
<IMG
 WIDTH="111" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img4.gif"
 ALT="$p le u(p) le M$">
is valid.
</p>
<P>
<BR>
Making tests for this algorithm we have met with the following problem.
For setting a random sequence
<IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img5.gif"
 ALT="${u(i)}$">
a usual random data generator did not fit. As the sequence
itself had been imposed certain
restrictions, the method of choosing the next random element
(in the interval defined by
restrictions) did not give the random sequence as a whole.
</p>
<P>
<BR>
We have come to a conclusion that the problem can be solved in the following
way. If we arrange
all possible sequences in certain order (for example, in lexicographical
order) and assign each
sequence its number, after choice of the random number it is possible to
take the correspondent
sequence for the random one. At the first glance it seems enough to
make up a program generating
all these sequences in such order. Alas! Even having not great values
of <I>M</i> and <I>N</i> it would have
taken any powerful modern computer centuries to enumerate all such
sequences. It turned out it was
possible to avoid generating all sequences if we managed to create
required sequence according to
its number immediately. But even this statement does not cover all.
As the amount of sequences is
quite large, the number can be a long one, composed of hundreds decimal
digits, though our
random data generator could give only normal numbers. We decided to
produce a long random
number from a real random number distributed in [0,1]. Namely, present
the number in binary
notation: 
<IMG
 WIDTH="101" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img6.gif"
 ALT="$0.b(1)b(2)dots$">,
where all <I>b</i>(<I>i</i>) = 0 or 1. Let us set a
regulation to associate such real number
to an integer from [<I>A</i>,<I>B</i>] segment:
<P>
<H3>Formula</h3>
<BR><P></p>
<DIV ALIGN="CENTER">
<IMG
 WIDTH="666" HEIGHT="76"
 SRC="/content/ak15:504img7.gif"
 ALT="begin{displaymath}G(A,B,0.b_1b_2dots b_p) = left{ begin{array}{ll}
A, & m...
...p, & mbox{if $b_1=1$} end{array} right.
end{array} right.
end{displaymath}">
</div>
<BR CLEAR="ALL">
<P></p>

<P>
Here we suppose, that <IMG
 WIDTH="55" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img8.gif"
 ALT="$A le B$">,
<IMG
 WIDTH="45" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img9.gif"
 ALT="$p ge 0$">,
and ``div 2" is an integer
division by 2.
</p>
<P>
<BR>

Let <I>M</i>, <I>N</i> (
<IMG
 WIDTH="144" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img10.gif"
 ALT="$1 le N le M le 200$">)
and a binary real number
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img11.gif"
 ALT="$0.b(1)b(2)dots b(p)$">
(
<IMG
 WIDTH="95" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img12.gif"
 ALT="$1 le p le 400$">)
be given.
Write a program to find out the corresponding 
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img1.gif"
 ALT="$u(1), u(2), dots, u(N)$">
sequence, i.e. to find a sequence
with 
<IMG
 WIDTH="197" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img13.gif"
 ALT="$G(1, T, 0.b(1)b(2)dots b(p))$">
number in lexicographical order of all
possible <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img5.gif"
 ALT="${u(i)}$">
for the given
<I>M</i> and <I>N</i> (<I>T</i> is the quantity of such sequences). Numeration begins with 1.
Keep in mind that in
lexicographical order <IMG
 WIDTH="47" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img14.gif"
 ALT="${l(i)}$">
proceeds <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img15.gif"
 ALT="${h(i)}$">
if after omitting equal
beginnings, the first number of

<IMG
 WIDTH="47" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img14.gif"
 ALT="${l(i)}$">
tail is smaller than the first number or <IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img15.gif"
 ALT="${h(i)}$">
tail.
Following example illustrates the list of all possible
sequences for <I>M</i> = 4 and <I>N</i> = 3 in lexicographical order.
<P>
<H3>A note (it does not concern the solution of this task):</h3>
<p>The choice of random binary vector 
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img11.gif"
 ALT="$0.b(1)b(2)dots b(p)$">
does not give an
absolute uniform random
data generator if we use the Formula. However, taking into account the
fact that [<I>A</i>,<I>B</i>] interval is big
we shall obtain a distribution applicable in most cases.
<P>
<H3>Example</h3>
<PRE>
1, 2, 3
1, 2, 4
1, 3, 3
1, 3, 4
1, 4, 4
2, 2, 3
2, 2, 4
2, 3, 3
2, 3, 4
2, 4, 4
3, 3, 3
3, 3, 4
3, 4, 4
4, 4, 4
</pre>

<P>
(here <I>T</i>=14)
<P>

*******InputConstraints*******

<p>The first line of the input is an integer K &#8804; 10, followed by K datasets.
<p>The first line of each dataset contains <I>M</i> and <I>N</i>. The second line
contains binary real
number 
<IMG
 WIDTH="133" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img11.gif"
 ALT="$0.b(1)b(2)dots b(p)$">
(without leading, trailing and other spaces).
<P>

*******OutputConstraints*******

<p>For each dataset, write into the output data file the corresponding sequence
<IMG
 WIDTH="155" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="/content/ak15:504img1.gif"
 ALT="$u(1), u(2), dots, u(N)$">.
The
sequence numbers should be separated with spaces and end-of-line characters.
There should be up to 20 numbers in each line. If neccesary, the numbers will have leading blanks to occupy 3 characters.
<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

1
4 3
0.01101101011110010001101010001011010

<b>Output:</b>

  2   2   4
</pre>



______________________________________________________
JRIDE||||||true||||||


<p>Jill likes to ride her bicycle, but since the pretty city of Greenhills
where she lives has grown, Jill often uses the
excellent public bus system for part of her journey. She has a folding
bicycle
which she carries with her when she
uses the bus for the first part of her trip. When the bus reaches some
pleasant part of the city, Jill gets off and rides
her bicycle. She follows the bus route until she reaches her
destination or
she comes to a part of the city she does
not like. In the latter event she will board the bus to finish her
trip.
</p>
<p><br>
Through years of experience, Jill has rated each road on an integer
scale
of niceness. Positive niceness values
indicate roads Jill likes; negative values are used for roads she does
not
like. There are not zero values. Jill plans where to leave the bus and
start bicycling, as well as where to stop bicycling and re-join the
bus,
so that the sum of niceness values of the roads
she bicycles on is maximized. This means that she will sometimes cycle
along
a road she does not like, provided
that it joins up two other parts of her journey involving roads she
likes
enough to compensate. It may be that no
part of the route is suitable for cycling so that Jill takes the bus
for its
entire route. Conversely, it may be that the
whole route is so nice Jill will not use the bus at all.
</p>
<p><br>
Since there are many different bus routes, each with several stops at
which
Jill could leave or enter the bus, she feels
that a computer program could help her identify the best part to cycle
for
each bus route.
</p>

*******InputConstraints*******

<p>The input file contains information on several bus routes. The first
line of
the file is a single integer <i>b</i> representing
the number of route descriptions in the file. The identifier for each
route (<i>r</i>) is the sequence number within the data
file, 1 &#8804; r &#8804; b.
Each route description begins with the number of stops on
the route: an integer <i>s</i>, 2 &#8804; s &#8804; 100000 on
a line by itself. The number of stops is followed by <i>s</i> - 1
lines, each
line <i>i</i> (1 &#8804; i < s)
is an integer <i>n</i><sub><i>i</i></sub> with absolute value &#8804; 1000
representing
Jill's assessment of the niceness of the road between the two stops <i>i</i>
and <i>i</i>+1.</p>

*******OutputConstraints*******

<p>For each route in the input file, your program should
identify the beginning
bus stop <i>i</i> and the ending bus stop <i>j</i>
that identify the segment of the route which yields the maximal sum of
niceness, m= n<sub>i</sub>+n<sub>i+1</sub>+...+n<sub>j-1</sub>.
If more
than one segment is maximally nice, choose the one with the longest
cycle
ride (largest <i>j</i>-<i>i</i>). To break ties in longest
maximal segments, choose the segment that begins with the earliest stop
(lowest <i>i</i>). For each route <i>r</i> in the input
file, print a line in the form:

<p><br>
<tt>The nicest part of route </tt><i>r</i><tt> is between stops </tt><i>i</i><tt>
and </tt><i>j</i>
</p>
<p><br>
However, if the maximal sum is not positive, your program should print:
</p>
<p><br>
<tt>Route </tt><i>r</i><tt> has no nice parts</tt>
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

3
3
-1
6
10
4
-5
4
-3
4
4
-4
4
-5
4
-2
-3
-4

<b>Output:</b>

The nicest part of route 1 is between stops 2 and 3
The nicest part of route 2 is between stops 3 and 9
Route 3 has no nice parts
</pre>



______________________________________________________
DELCOMM||||||true||||||


<p>It is required to find out whether it is possible to delete given files
from MS-DOS directory
executing the DEL command of MS-DOS operation system only once.
There are no nested subdirectories.</p>
<h3>A note</h3>
<P>
DEL command has the following format: <TT>DEL</tt> <EM>wildcard</em>

<P>

<P>
<BR>
The actual wildcard as well as a full file name can be made up either of
a name containing 1 up to 8
characters or of a name and extension, containing up to 3 characters.
The point character '.' separates the extension from the file name.
The extension can be empty and this is equivalent to a
name without any extension (in this case a wildcard ends with a point).
In a wildcard the characters
'?' and '*' can be used. A question mark substitutes exactly one character
of the full file name
excluding a point, an asterisk any sequence of characters
(containing no points) even empty one.
An asterisk can appear only at the last position of the name and the extension.

<P>

<P>
<BR>
MS-DOS system can permit maybe other wildcards but they can not be used
in this task. File names
and extensions consist only of Latin capitals and digits.

<P>

*******InputConstraints*******

<p>The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>Input data for each dataset contains a list of full file names without empty lines
and spaces. Each
name is written in a separate line of input data file and preceded with
a control sign: '-' for delete
or '+' for keep. Full file names are not repeated. The list comprises
at least one file, and at least one
file is marked to be deleted. There are no more than 1000 files.

<P>

*******OutputConstraints*******

<p>
For each dataset, write to the first line of output the required DEL command
(only one
proposal) or <TT>IMPOSSIBLE</tt> if there is no solution.
A space should separate "<TT>DEL</tt>" from wildcard.
<b>Print a blank line between datasets.</b>

<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

1

-BP.EXE
-BPC.EXE
+TURBO.EXE

<b>Output:</b>

DEL ?P*.*
</pre>



______________________________________________________
VHUFFM||||||true||||||


<p>
Huffman encoding is a method of developing an optimal encoding of the symbols 
in a <i>source alphabet</i> using symbols from a <i>target alphabet</i> when the frequencies
of each of the symbols in the source alphabet are known. Optimal means the 
average length of an encoded message will be minimized. In this problem you 
are to determine an encoding of the first <i>N</i> uppercase letters (the source
alphabet,  <img WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="/content/ak15:240img1.gif"  >  through  <img WIDTH=22 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline89" SRC="/content/ak15:240img2.gif"  > , with frequencies  <img WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="/content/ak15:240img3.gif"  >  through  <img WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline93" SRC="/content/ak15:240img4.gif"  > ) into the
first <i>R</i> decimal digits (the target alphabet,  <img WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline97" SRC="/content/ak15:240img5.gif"  >  through  <img WIDTH=21 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline99" SRC="/content/ak15:240img6.gif"  > ).

<p>
<p>
Consider determining the encoding when <i>R</i>=2. Encoding proceeds in several
passes. In each pass the two source symbols with the lowest frequencies, say 
 <img WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline87" SRC="/content/ak15:240img1.gif"  >  and  <img WIDTH=16 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline105" SRC="/content/ak15:240img7.gif"  > , are grouped to form a new ``combination letter" whose frequency is
the sum of  <img WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="/content/ak15:240img3.gif"  >  and  <img WIDTH=14 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline109" SRC="/content/ak15:240img8.gif"  > . If there is a tie for the lowest or second lowest
frequency, the letter occurring earlier in the alphabet is selected. After 
some number of passes only two letters remain to be combined. The letters 
combined in each pass are assigned one of the symbols from the target 
alphabet.
<p>
<p>

The letter with the lower frequency is assigned the code 0, and the 
other letter is assigned the code 1. (If each letter in a combined group has 
the same frequency, then 0 is assigned to the one earliest in the alphabet. 
For the purpose of comparisons, the value of a ``combination letter" is the
value of the earliest letter in the combination.) The final code sequence for 
a source symbol is formed by concatenating the target alphabet symbols 
assigned as each combination letter using the source symbol is formed.
<p>
The 
target symbols are concatenated in the reverse order that they are assigned so 
that the first symbol in the final code sequence is the last target symbol 
assigned to a combination letter.
<p>
<p>
The two illustrations below demonstrate the 
process for <i>R</i>=2.
<p>
<p> <img ALIGN=BOTTOM ALT="tabular23" SRC="/content/ak15:240img9.gif"  > <p>
<p>
When <i>R</i> is larger than 2, <i>R</i> symbols are grouped in each pass. Since each pass
effectively replaces <i>R</i> letters or combination letters by 1 combination letter,
and the last pass must combine <i>R</i> letters or combination letters, the source
alphabet must contain <i>k</i>*(<i>R</i>-1)+<i>R</i> letters, for some integer <i>k</i>.

<p>
Since <i>N</i>
may not be this large, an appropriate number of fictitious letters with zero
frequencies must be included. These fictitious letters are not to be included 
in the output. In making comparisons, the fictitious letters are later than 
any of the letters in the alphabet.
<p>
<p>
Now the basic process of determining the Huffman encoding is the same as for 
the <i>R</i>=2 case. In each pass, the <i>R</i> letters with the lowest frequencies are
grouped, forming a new combination letter with a frequency equal to the sum of 
the letters included in the group. The letters that were grouped are assigned 
the target alphabet symbols 0 through <i>R</i>-1. 0 is assigned to the letter in the
combination with the lowest frequency, 1 to the next lowest frequency, and so 
forth. If several of the letters in the group have the same frequency, the one 
earliest in the alphabet is assigned the smaller target symbol, and so forth.
<p>
<p>

The illustration below demonstrates the process for <i>R</i>=3.
<p>
<p> <img WIDTH=383 HEIGHT=190 ALIGN=BOTTOM ALT="tabular63" SRC="/content/ak15:240img10.gif"  > <p>

*******InputConstraints*******

<p>The input will contain one or more data sets, one per line. Each data set 
consists of an integer value for <i>R</i> (between 2 and 10), an integer value for <i>N</i>
(between 2 and 26), and the integer frequencies  <img WIDTH=13 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline91" SRC="/content/ak15:240img3.gif"  >  through  <img WIDTH=20 HEIGHT=25 ALIGN=MIDDLE ALT="tex2html_wrap_inline93" SRC="/content/ak15:240img4.gif"  > , each of which
is between 1 and 999.

<p>
The end of data for the entire input is the number 0 for 
<i>R</i>; it is not considered to be a separate data set.
<p>


*******OutputConstraints*******

<p>For each data set, display its number (numbering is sequential starting with 
1) and the average target symbol length (rounded to two decimal places) on one 
line. Then display the <i>N</i> letters of the source alphabet and the corresponding 
Huffman codes, one letter and code per line. 
<br>Print a blank line after each test case.
<br>
The examples below illustrate the 
required output format.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

2 5 5 10 20 25 40
2 5 4 2 2 1 1
3 7 20 5 8 5 12 6 9
4 6 10 23 18 25 9 12
0

<b>Output:</b>

Set 1; average length 2.10
    A: 1100
    B: 1101
    C: 111
    D: 10
    E: 0

Set 2; average length 2.20
    A: 11
    B: 00
    C: 01
    D: 100
    E: 101

Set 3; average length 1.69
    A: 1
    B: 00
    C: 20
    D: 01
    E: 22
    F: 02
    G: 21

Set 4; average length 1.32
    A: 32
    B: 1
    C: 0
    D: 2
    E: 31
    F: 33
</pre>



______________________________________________________
NUMQDW||||||true||||||


<p>
Let's consider the alphabet consisting of the first <b>c</b> roman uppercase letters, i.e. {A, B, C, D, E, F} if <b>c</b> is 6.
<br>
We will call two words <i>quite different</i>, if there is no common subsequence of length more than one between those two words. For example ABC and CBA are quite different, but ABBA and CADDCAD aren't, because AA is a subsequence of both words.
<br>
Given a word <b>w</b> you are to find the number of words of length <b>n</b> that are quite different from <b>w</b>.


*******InputConstraints*******

<p>
The first line will contain the number of test cases (at most 20). Then there will be pairs of lines, the first one containing the numbers <b>n</b> (<b>n</b> will fit into a 32-bit signed integer and will be non-negative) and <b>c</b> (1 <= <b>c</b> <= 6), the second one the word <b>w</b>. <b>w</b> will only consist of the first <b>c</b> letters of the roman alphabet and will have at most 10000 characters.


*******OutputConstraints*******

<p>
Print one line for each test case, consisting only of the number of words that are quite different from <b>w</b>. As this number can be quite large, you just have to output its remainder when dividing by 4242.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
ABC
4 4
CADDCAD
100 3
A

<b>Output:</b>
10
13
2223

</pre>



______________________________________________________
COVER||||||false||||||

<H3>Problem</H3>
<P align=justify>
K-path cover of a directed graph is a set of exactly k of its edges chosen in such way that every two of them have different start vertices and every two of them have different end vertices. Assuming that for each vertex we know its cost we can define cost of the edge as a sum of costs of its start and end. We can also define cost of a k-path cover as a sum of costs of its edges. Your task is to find cheapest k-path cover for given directed graph with known costs of the vertices.
<center>
<img src="http://www.spoj.pl/content/gawry:cover.gif"><br>
A graph and its cheapest 4-path cover.
</center>
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains number of test cases c (1<=c<=20). Each test case begins with k, number of vertices n and number of edges m (1<=k<=100, 1<=n<=10000, 0<=m<=1000000). Next n lines contain costs of the vertices, each of them is an integer from [-100000,100000]. Then m lines describing edges follow, each of them containing exactly two numbers representing its start and end vertices. Vertices are numbered from 1 to n.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output cost of the cheapest k-path cover. When given graph has no k-path cover output NONE.
</P>
<H3>Example</H3>
<pre>
Input:
1
4 6 9
5
4
6
10
2
3
1 2
1 4
2 4
3 2
4 3
5 4
6 3
5 6
6 5

Output:
33
</pre>



______________________________________________________
WPUZZLES||||||true||||||


<p><P align="justify">
Word puzzles are usually simple and very entertaining for all ages.
They are so entertaining that Pizza-Hut company started using table
covers with word puzzles printed on them, possibly with the intent to
minimise their client's perception of any possible delay in bringing
them their order.

<P align="justify">
Even though word puzzles may be entertaining to solve by hand, they
may become boring when they get very large. Computers do not yet get
bored in solving tasks, therefore we thought you could devise a
program to speedup (hopefully!) solution finding in such puzzles.

<P align="justify">
The following figure illustrates the PizzaHut puzzle. The names of the
pizzas to be found in the puzzle are: <FONT SIZE="-1">MARGARITA, ALEMA,
  BARBECUE, TROPICAL, SUPREMA, LOUISIANA, CHEESEHAM, EUROPA, HAVAIANA,
  CAMPONESA</FONT>.  

<P>

<DIV ALIGN="CENTER"><TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1">
 </FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">0</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">1</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">2</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">3</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">4</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">5</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">6</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">7</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">8</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">9</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">10</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">11</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">12</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">13</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">14</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">15</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">16</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">17</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">18</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">19</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 

0</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
1</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>

</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
2</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
3</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
4</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
5</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
6</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
7</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
8</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
9</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
10</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
11</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
12</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Z</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
13</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
14</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
15</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">X</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
16</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">K</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
17</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">J</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Q</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">W</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">D</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">G</FONT></TD>
</TR>

<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
18</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">U</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">Y</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">R</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">E</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">T</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">M</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
</TR>
<TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=6><FONT SIZE="-1"> 
19</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">C</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">O</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">H</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">V</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">I</FONT></TD>

<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">N</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">A</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">L</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">B</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">P</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">F</FONT></TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=3><FONT SIZE="-1">S</FONT></TD>
</TR>

</TABLE></DIV>

<H3>Problem</H3>

<P align="justify">
Your task is to produce a program that given the word puzzle and words
to be found in the puzzle, determines, for each word, the position of
the first letter and its orientation in the puzzle.

<P align="justify">
You can assume that the left upper corner of the puzzle is the origin,
<it>(0,0)</it>. Furthemore, the orientation of the word is marked clockwise
starting with letter <TT>A</TT> for north (note: there are 8 possible
directions in total).

*******InputConstraints*******

<p><P>
The first line of the input contains a number <it>T &#8804; 10</ti> which indicates the number of test cases to follow.
Each test case starts with a line consisting of three positive numbers: The
number of lines of the word puzzle, <it>0 < L &#8804; 1000</it>, the number of columns,
<it>0 < C &#8804; 1000</it>, and the number of words to be found, 
<it>0 < W &#8804; 1000</it>. The following <it>L</it> input lines, each
 consisting of <it>C</it> uppercase letters, contain
the word puzzle. Then at last the <it>W</it> words are input one per line. You can assume that each word can be found exactly once in the word puzzle.


*******OutputConstraints*******

<P align="justify">
For each test case your program should output <it>W</it> lines: For each word (using the same order as the
words were input) print a triplet defining the coordinates, line and column,
where the first letter of the word appears, followed by a letter
indicating the orientation of the word according to the rules defined
above. Each value in the triplet must be separated by one space only.<br>
<b>Print one blank line between test cases.</b>


*******IOTestCases*******


<pre>
<b>Input:</b>

1
20 20 10
QWSPILAATIRAGRAMYKEI
AGTRCLQAXLPOIJLFVBUQ
TQTKAZXVMRWALEMAPKCW
LIEACNKAZXKPOTPIZCEO
FGKLSTCBTROPICALBLBC
JEWHJEEWSMLPOEKORORA
LUPQWRNJOAAGJKMUSJAE
KRQEIOLOAOQPRTVILCBZ
QOPUCAJSPPOUTMTSLPSF
LPOUYTRFGMMLKIUISXSW
WAHCPOIYTGAKLMNAHBVA
EIAKHPLBGSMCLOGNGJML
LDTIKENVCSWQAZUAOEAL
HOPLPGEJKMNUTIIORMNC
LOIUFTGSQACAXMOPBEIO
QOASDHOPEPNBUYUYOBXB
IONIAELOJHSWASMOUTRK
HPOIYTJPLNAQWDRIBITG
LPOINUYMRTEMPTMLMNBO
PAFCOPLHAVAIANALBPFS
MARGARITA
ALEMA
BARBECUE
TROPICAL
SUPREMA
LOUISIANA
CHEESEHAM
EUROPA
HAVAIANA
CAMPONESA

<b>Output:</b>

0 15 G
2 11 C
7 18 A
4 8 C
16 13 B
4 15 E
10 3 D
5 1 E
19 7 C
11 11 H
</pre>



______________________________________________________
BONFIRE||||||true||||||


<p>Some great ideas are never implemented. This was the case with the
equatorial bonfire planned for the millenial celebration. Maybe the plan
will be rediscovered for the next turn of millenia. Before it is
completely forgotten we will tell you about it:
The idea was to put tarred logs and gun powder contiguously along the
equator and then ignite bonfires at various points of this gun powder belt
at various times. The fire would spread in both directions along the
equator and in the end, the whole equator would burn.
</p>

<p>
One concern of the architects of this celebration was what would be the
last place to catch fire and when would it happen?
</p>

*******InputConstraints*******

<p>The input file consists of at most 10 blocks, each specifying a separate proposal
for the equatorial bonfire. The first line of each block specifies the
speed of fire's advance in the degrees of longitude per hour. The next line
contains the number of bonfires <b>N &#8804; 5000</b> along the equator. Each of the next
<b>N</b> lines contains two numbers specifying the time and the location of
a bonfire.
</p>

<p>
The time is given in hours from 12:00am GMT (all times are positive),
the location is given in the degrees of longitude (greater than -180
and less than or equal to 180). All numbers except <b>N</b> are given with
precision of at most 2 decimal places. Every block is followed by an empty
line. The last block is followed by an empty line and then a line
containing <tt>-1</tt>.
</p>

*******OutputConstraints*******

<p>For every block in the input file, output a single line containing the
time and coordinate of the last place to catch fire. The time and the
coordinate should be in the same units and from the same range as input, but
with precision of 3 decimal places. If there are multiple solutions,
output the one which is the closest if you travel from the zero meridian
east (i.e. in the positive direction).
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>

2
2
1 90
1 -90

10.0
3
1 40
2 45
6 -80

-1

<b>Output:</b>

46.000 0.000
15.500 -175.000
</pre>
<p>
Note that in the second case, the fire at 45 degrees actually starts 1.5 hours after 12:00am.
This of course does does not prevent anybody from igniting it again 2 hours after 12:00am.
</p>


______________________________________________________
DIV15||||||true||||||


<p>There is a string containing only decimal digit characters. The length of the string is between <i>1</i> and <i>1000</i>. Using characters of the string, you have to construct the maximum number which divides by fifteen without remainder. Each character of the string may not be used more than once.


*******InputConstraints*******

<p>First line of input contains an integer <b>t</b> (<i>1</i> &#8804; <b>t</b> &#8804; <i>90</i>), equal to the number of testcases. Then descriptions of <b>t</b> testcases follow.

<p>Each testcase is described in a single line representing the source string.


*******OutputConstraints*******

<p>For each testcase output one line with the decimal representation of the maximum number. Leading zeroes should be omitted. If no number can be constructed, output a single word <i>&#8220;impossible&#8221;</i>.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
02041

<b>Output:</b>
4200
</pre>



______________________________________________________
LAZYPROG||||||true||||||


<p>A new web-design studio, called SMART (Simply Masters of ART), employs two people. The first one is a web-designer and an executive director at the same time. The second one is a programmer. The director is so a nimble guy that the studio has already got <b>N</b> contracts for web site development. Each contract has a deadline <b>d<sub>i</sub></b>.

<p>It is known that the programmer is lazy. Usually he does not work as fast as he could. Therefore, under normal conditions the programmer needs <b>b<sub>i</sub></b> of time to perform the contract number <b>i</b>. Fortunately, the guy is very greedy for money. If the director pays him <b>x<sub>i</sub></b> dollars extra, he needs only <b>(b<sub>i</sub> - a<sub>i</sub>*x<sub>i</sub>)</b> of time to do his job. But this extra payment does not influence other contracts. This means that each contract should be paid separately to be done faster. The programmer is so greedy that he can do his job almost instantly if the extra payment is <b>(b<sub>i</sub>/a<sub>i</sub>)</b> dollars for the contract number <b>i</b>.

<p>The director has a difficult problem to solve. He needs to organize programmer&#8217;s job and, may be, assign extra payments for some of the contracts so that all contracts are performed in time. Obviously he wishes to minimize the sum of extra payments. Help the director!


*******InputConstraints*******

<p>First line of the input contains an integer <b>t</b> (<i>1</i> &#8804; <b>t</b> &#8804; <i>45</i>), equal to the number of testcases. Then descriptions of <b>t</b> testcases follow.

<p>First line of description contains the number of contracts <b>N</b> (<i>1</i> &#8804; <b>N</b> &#8804; <i>100000</i>, integer). Each of the next <b>N</b> lines describes one contract and contains integer numbers <b>a<sub>i</sub></b>, <b>b<sub>i</sub></b>, <b>d<sub>i</sub></b> (<i>1</i> &#8804; <b>a<sub>i</sub></b>, <b>b<sub>i</sub></b> &#8804; <i>10000</i>; <i>1</i> &#8804;  <b>d<sub>i</sub></b> &#8804; <i>1000000000</i>) separated by spaces.

<p>At least <i>90%</i> of testcases will have <i>1</i> &#8804; <b>N</b> &#8804; <i>10000</i>.


*******OutputConstraints*******

<p>For each testcase in the input your program should output one line with a single real number S. Here S is the minimum sum of money which the director needs to pay extra so that the programmer could perform all contracts in time. The number must have two digits after the decimal point.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
20 50 100
10 100 50

<b>Output:</b>
5.00
</pre>



______________________________________________________
NECKLACE||||||true||||||


<p>
There are <b>N</b> points marked on a surface, pair (<b>x<sub>i</sub></b>, <b>y<sub>i</sub></b>) is coordinates of a point number <b>i</b>.
Let's call a <i>necklace</i> a set of <b>N</b> figures which fulfills the following rules.

<p>
<ul>
<li>The figure <b>#i</b> consists of all such points (<b>x</b>, <b>y</b>) that (<b>x</b> - <b>x<sub>i</sub></b>)<i><sup>2</sup></i> + (<b>y</b> - <b>y<sub>i</sub></b>)<i><sup>2</sup></i> &#8804; <b>r<sub>i</sub></b><i><sup>2</sup></i>, where <b>r<sub>i</sub></b> &#8805; <i>0</i>.
<li>Figures <b>#i</b> and <b>#(i+1)</b> intersect (<i>1</i> &#8804; <b>i</b> < <b>N</b>).
<li>Figures <i>#1</i> and <b>#N</b> intersect.
<li>All the rest pairs of figures do not intersect.
</ul>

<p>
Write a program which takes points and constructs a necklace.


*******InputConstraints*******

<p>
First line of input contains an integer <b>t</b> (<i>1</i> &#8804; <b>t</b> &#8804; <i>45</i>), equals to the number of testcases. Then descriptions of <b>t</b>
testcases follow.

<p>
The first line of the description contains one integer number <b>N</b> (<i>2</i> &#8804; <b>N</b> &#8804; <i>100</i>).
Each of the next <b>N</b> lines contains two real numbers <b>x<sub>i</sub></b>, <b>y<sub>i</sub></b>  (<i>-1000</i> &#8804; <b>x<sub>i</sub></b>, <b>y<sub>i</sub></b> &#8804; <i>1000</i>), separated by one space. It is guaranteed that at least one necklace exists for each testcase.


*******OutputConstraints*******

<p>
For each testcase your program should output exactly <b>N</b> lines. A line <b>#i</b> should contain real number <b>r<sub>i</sub></b> (<i>0</i> &#8804; <b>r<sub>i</sub></b> < <i>10000</i>).
To avoid potential accuracy problems, a checking program uses the following rules.

<p>
<ul>
<li>Figures <b>#i</b> and <b>#j</b> definitely do not intersect if <b>r<sub>i</sub></b> + <b>r<sub>j</sub></b> &#8804; <b>d<sub>ij</sub></b> - <i>10<sup>-5</sup></i>. 
<li>Figures <b>#i</b> and <b>#j</b> definitely intersect if <b>d<sub>ij</sub></b> + <i>10<sup>-5</sup></i> &#8804; <b>r<sub>i</sub></b> + <b>r<sub>j</sub></b>.
<li>The case when <b>d<sub>ij</sub></b> - <i>10<sup>-5</sup></i> < <b>r<sub>i</sub></b> + <b>r<sub>j</sub></b> < <b>d<sub>ij</sub></b> + <i>10<sup>-5</sup></i> is decided in favour of a contestant.
<li><b>d<sub>ij</sub></b> equals <i>sqrt</i>((<b>x<sub>i</sub></b> - <b>x<sub>j</sub></b>)<i><sup>2</sup></i> + (<b>y<sub>i</sub></b> - <b>y<sub>j</sub></b>)<i><sup>2</sup></i>) in the rules above.
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
0 0
10 0
10 10
0 10

<b>Output:</b>
7
7
7
7

</pre>



______________________________________________________
TRANSP||||||false||||||

<H3>Problem</H3>
<P align=justify>
Suppose you are given a 2<sup>a</sup>x2<sup>b</sup> array. It is stored sequentially in memory in the usual way, first values in the first row, then values in the second one and so on. You would like to transpose it, but you don't have any additional memory. The only operation that you can perform is swapping contents of two memory cells. What is the minimal number of such operations required for transpostion?
</P>
<H3>Input</H3>
<P align=justify>
The first line of input contains the number of test cases c (1<=c<=100). Each test case consists of two integers a,b (0<=a+b<=500000).
</P>
<H3>Output</H3>
<P align=justify>
For each test case output the minimal number of swaps required to transpose an 2<sup>a</sup>x2<sup>b</sup> array. As it can be quite large, you have to output its remainder when divided by 1000003 (yes, it's a prime number :).
</P>
<H3>Example</H3>
<pre>
Input:
3
1 1
2 2
5 7

Output:
1
6
3744

</pre>



______________________________________________________
AROAD||||||false||||||

<H3>Problem</H3>
<P align=justify>
Let's say you are given a set of cities (numbered from 1 to n) and possible bidirectional roads between them. You would like to build cheapest road network that will make getting from the capital (which has number 1) to every other city possible, where the cost of the network is just sum of its roads' costs. Seems easy? Well, it certainly would be too easy and boring, so this time you should satisfy one additional constraint: you must consider only networks in which there are at most d roads outgoing from the capital.
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains number of test cases c (1<=c<=40). Each test case begins with number of cities n, number of possible roads m and maximum degree d (1<=n<=1000, 0<=m<=100000, 0<=d<=100). Then m lines describing roads follow, each of them containing road endpoints x,y and its cost c (1<=x,y<=n, 0<=c<=10000).
</P>
<H3>Output</H3>
<P align=justify>
For each test case output the cost of building cheapest road network or NONE if it is impossible.
</P>
<H3>Example</H3>
<pre>
Input:
4
4 5 0
1 2 1
1 3 1
1 4 2
2 3 2
3 4 1000

4 5 1
1 2 1
1 3 1
1 4 2
2 3 2
3 4 1000

4 5 2
1 2 1
1 3 1
1 4 2
2 3 2
3 4 1000

4 5 3
1 2 1
1 3 1
1 4 2
2 3 2
3 4 1000

Output:
NONE
1003
5
4

</pre>



______________________________________________________
TRANSP2||||||false||||||

<H3>Problem</H3>
<P align=justify>
Suppose you are given a 2<font style="vertical-align: super">a</font>x2<font style="vertical-align: super">b</font> array. It is stored sequentially in memory in the usual way, first values in the first row, then values in the second one and so on. You would like to transpose it, but you don't have any additional memory. The only operation that you can perform is swapping contents of two memory cells. What is minimal number of such operations required for transpostion?
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains number of test cases c (1<=c<=400000). Each test case consists of two integers a,b (0<=a+b<=1000000).
</P>
<H3>Output</H3>
<P align=justify>
For each test case output minimal number of swaps required to transpose an 2<font style="vertical-align: super">a</font>x2<font style="vertical-align: super">b</font> array. As it can be quite large, you have to output its remainder when divided by 1000003 (yes, it's a prime number :).
</P>
<H3>Example</H3>
<pre>
Input:
3
1 1
2 2
5 7

Output:
1
6
3744

</pre>



______________________________________________________
ASSIGN||||||false||||||

<H3>Problem</H3>
<P align=justify>
Your task will be to calculate number of different assignments of n different topics to n students such that everybody gets exactly one topic he likes.
</P>
<H3>Input</H3>
<P align=justify>
First line of input contains number of test cases c (1<=c<=80). Each test case begins with number of students n (1<=n<=20). Each of the next n lines contains n integers describing preferences of one student. 1 at the ith position means that this student likes ith topic, 0 means that he definitely doesn't want to take it.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output number of different assignments (it will fit in a signed 64-bit integer).
</P>
<H3>Example</H3>
<pre>
Input:
3
3
1 1 1
1 1 1
1 1 1
11
1 0 0 1 0 0 0 0 0 1 1 
1 1 1 1 1 0 1 0 1 0 0 
1 0 0 1 0 0 1 1 0 1 0 
1 0 1 1 1 0 1 1 0 1 1 
0 1 1 1 0 1 0 0 1 1 1 
1 1 1 0 0 1 0 0 0 0 0 
0 0 0 0 1 0 1 0 0 0 1 
1 0 1 1 0 0 0 0 0 0 1 
0 0 1 0 1 1 0 0 0 1 1 
1 1 1 0 0 0 1 0 1 0 1 
1 0 0 0 1 1 1 1 0 0 0 
11
0 1 1 1 0 1 0 0 0 1 0 
0 0 1 1 1 1 1 1 1 1 1 
1 1 0 1 0 0 0 0 0 1 0 
0 1 0 1 0 1 0 1 0 1 1 
1 0 0 1 0 0 0 0 1 0 1 
0 0 1 0 1 1 0 0 0 0 1 
1 0 1 0 1 1 1 0 1 1 0 
1 0 1 1 0 1 1 0 0 1 0 
0 0 1 1 0 1 1 1 1 1 1 
0 1 0 0 0 0 0 0 0 1 1 
0 1 1 0 0 0 0 0 1 0 1 

Output:
6
7588
7426

</pre>



______________________________________________________
HAJIME||||||true||||||


<p>This problem tests your knowledge of the C programming language. Your task is to submit a snippet of C code that consists of two declarations defining a type called "zan", which should be a struct containing two members: first an unsigned int called "aku", then a constant pointer to char called "soku".</p>
<p>To make things more interesting, you can't use any whitespace in either declaration, and the two declarations must be sufficiently dissimilar (basically, you have to use two different tricks to get around the lack of whitespace).
</p>


*******InputConstraints*******

<p>There is no input.</p>


*******OutputConstraints*******

<p>Your submission should consist of exactly two declarations as described above, separated by whitespace. </p>
<p><em>Update</em>: "Exactly two" means exactly two. Your code isn't allowed to define any other types; anything containing <code>struct foo</code> or <code>typedef unsigned int</code> is rejected.
</p>
<p>"Whitespace" includes newlines. NUL ('\0') is not whitespace, but it isn't a valid token separator either.
</p>


*******IOTestCases*******


<pre>
<b>Output:</b>
typedef:struct{unsigned*aku;char*soku;}zan;
typedef:struct{unsigned*aku;char*soku;}zan;
</pre><p>
This example is invalid for the following reasons: <ul>
<li><code>typedef:</code> is a syntax error</li>
<li><code>aku</code> and <code>soku</code> have the wrong type
<li>the two declarations are too similar
</ul>
</p>


______________________________________________________
PARTPALI||||||true||||||


<p>A palindromic decimal integer reads the same forward and backward.
For example, the following numbers are palindromic.</p>

<p>6, 55, 282, 5005, 78187, 904409, 3160613, 11111111</p>

<p>Palindromic integers are plentiful. In fact, any integer not
divisible by 10 has an infinite number of multiples that are
palindromic. (The standard representation of a nonzero multiple of 10
cannot be palindromic since its reversal would have a leading 0.)</p>

<p>Write a program to determine, for a given positive integer, how
many of its positive multiples are palindromes of a given length.</p> 




*******InputConstraints*******


<p>
The first line of the input will specify an integer n indicating the
number of problem instances to follow, one to a line.  Each of the
ensuing  n  lines will specify a pair of positive integers   m,s
separated by a single space, with 
1 <  m  < 1000,  s < 20.    (For m,s in this range, there are
fewer than 2^32 palindromes among the s-digit multiples of m.)  Each
line will terminate with an end-of-line.</p>



*******OutputConstraints*******


<p>The output should indicate  for each m,s, exactly how many s-digit
positive palindromes are divisible by m, with one problem instance per
line.   </p> 



*******IOTestCases*******


<pre>
<b>Input:</b>
5	
3 1	
25 3	
12 4	
30 3
81 6


<b>Output:</b>
3
2
7
0
0

</pre>

<p><b>Explanation:</b> There are three positive 1-digit multiples of
3, namely, 3, 6, and 9; all 1-digit numbers are trivially palindromes.
Among the 3-digit palindromes, 525 and 575 are multiples of 25.  The
4-digit multiples of 12 that are palindromes are 2112, 2772, 4224,
4884, 6336, 6996, 8448.   There are no positive palindromic numbers
ending in 0 (since we do not allow leading 0's).  No 6-digit
palindromes are divisible by 81.</p>




______________________________________________________
TCNUMFL||||||true||||||


<p>Every integer number <em>n</em> is represented in positional number system of base <em>r</em> by a sequence of digits 0 &lt;= <em>d<sub>i</sub></em> &lt; <em>r</em>, decimal point ',' and fractional part, so the value is equal to:</p>
<p><em>n</em> = <em>d</em><sub>0<em></em></sub> +  <em>r</em> * <em>d</em><sub>1<em></em></sub> + <em>r<sup>2</sup></em> * <em>d</em><sub>2<em></em></sub> +  <em>r<sup>3</sup></em> * <em>d</em><sub>3<em></em></sub> + ... + <em>r<sup>-1</sup></em> * <em>d</em><sub>-1<em></em></sub> + <em>r<sup>-2</sup></em> * <em>d</em><sub>-2<em></em></sub> +  <em>r<sup>-3</sup></em> * <em>d</em><sub>-3<em></em></sub> + ...</p>
<p align="justify">Your task is to convert a given number in <em>r</em>-base represantation into <em>s</em>-base representation with <em>l</em> digits after decimal point (no rounding - use floor), for example: decimal 231,5 into binary 11100111,1 with one digit after decimal point. Assume that <em>r</em> &lt;= 36 and the digits are 0,1,2,3,4,5,6,7,8,9, <em>A</em>, <em>B</em>, <em>C</em>, <em>D</em>, <em>E</em>, <em>F</em>, <em>G</em>, <em>H</em>, <em>I</em>, <em>J</em>, <em>K</em>, <em>L</em>, <em>M</em>, <em>N</em>, <em>O</em>, <em>P</em>, <em>Q</em>, <em>R</em>, <em>S</em>, <em>T</em>, <em>U</em>, <em>V</em>, <em>W</em>, <em>X</em>, <em>Y</em>, <em>Z</em>.</p>

*******InputConstraints*******

<p><em>N</em> [the number of series &lt;= 1000] <br /><em>n r s l</em> [<em>n</em> &lt; 36<sup>1000</sup> + 1, <em>r</em>,<em>s</em> &lt;= 36, l &lt;= 1000 ]</p>

*******OutputConstraints*******

<p><em>n</em> [<em>s</em>-base representation of number <em>n</em>]</p>
<p>Text grouped in [ ] does not appear in the input and output file.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />10<br />500,1 6 31 3<br />3866,DJ 22 27 1<br />EH75,L3 24 4 3<br />A73C,10B 13 27 2<br />6C6J,E483 22 6 2<br />JA,L 30 5 4<br />6,5A 20 31 2<br />1,C5 14 7 1<br />HD,6K 26 9 2<br />1001,011 2 10 3<br /><br /><strong>Output:</strong><br />5P,555<br />1M8H,H<br />301223231,320<br />14MB,25<br />1255211,35<br />4310,3222<br />6,8G<br />1,6<br />555,23<br />9,375<br /></pre>


______________________________________________________
TPERML||||||true||||||


<table class="problems" width="99%"><tr  class="navigation">
<td><a href="/problems/TPERML/polski/">Wersja polska</a></td> 
<td><a href="/problems/TPERML/english/">English version</a></td> 
</tr></table>



<p>For each index of n element permutation print m subsequent permutations (in separate lines) in lexicographical order starting from the one pointed by index.
Between outputs of subsequent tests there should be an empty line.
Next permutation to the last one is the first one.</p>


*******InputConstraints*******

<p>t [number of tests <= 1000]<br>
n index m [2 <= n <= 100 - number of elements in permutation, 0 <= index < n! - index of the first permutation, 1 <= m <= 100 - how many permutations to print]</p>


*******OutputConstraints*******

<p>p1 p2 ... p(n-1) pn [permutations]<br>
p1 p2 ... pn p(n-1)<br>
<br>
p1 p2 ... p(n-1) pn [permutations]<br>
p1 p2 ... pn p(n-1)</p><br>


*******IOTestCases*******


<pre>
<b>Input:</b>
12
2 1 1
3 3 3
4 16 3
4 5 9
2 1 1
2 1 1
3 5 1
5 91 7
2 1 1
5 100 7
3 5 1
2 1 1

<b>Output:</b>
2 1

2 3 1
3 1 2
3 2 1

3 4 1 2
3 4 2 1
4 1 2 3

1 4 3 2
2 1 3 4
2 1 4 3
2 3 1 4
2 3 4 1
2 4 1 3
2 4 3 1
3 1 2 4
3 1 4 2

2 1

2 1

3 2 1

4 5 1 3 2
4 5 2 1 3
4 5 2 3 1
4 5 3 1 2
4 5 3 2 1
5 1 2 3 4
5 1 2 4 3

2 1

5 1 4 2 3
5 1 4 3 2
5 2 1 3 4
5 2 1 4 3
5 2 3 1 4
5 2 3 4 1
5 2 4 1 3

3 2 1

2 1
</pre>





______________________________________________________
KMSL4B||||||true||||||



<p>p(x)=pk x^k + ... + p0x^0 is a given polynomial of degree at most 20. Check whether all roots of p() belong to the open unit disc |z|< 1 on the complex plain.


*******InputConstraints*******

<p>
First the number of polynomials appears. Then the data for the following polynomials follows in the consecutive lines. For each of them first  the degree is given, then in the following line the coefficients p0, p1, ... appear, separated by spaces.

*******OutputConstraints*******

<p>
Each line of the output is the solution for the following polynomials. It shoud be '1' if the roots of p() belong to the open unit disc, or '0' otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
1 2 1
2
0.5 1 1

<b>Output:</b>
0
1
</pre>



______________________________________________________
CLTZ||||||true||||||


<p>Let N be a positive integer, Consider the following recurrence:
f(1) = N and
f(K) = (0.5 + 2.5 * (f(K-1) mod 2)) * f(K-1) + (f(K-1) mod 2) if K>1.
For a given N you have to compute the smallest L for which f(L)=1 (such an L always exists for N's in the input).


*******InputConstraints*******

<p> Each line contains a positive integer N in decimal notation. 
You can be sure that N and all intermediate results are not 
bigger than 10^1888. Input terminated by EOF.


*******OutputConstraints*******

<p> For each number N in the input print one line with the value of L in decimal notation.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
321
1111111111111
111111111111111111111111111111111111111111111111111111111111
<b>Output:</b>
1
2
25
261
1296
</pre>



______________________________________________________
ZZPERM||||||true||||||


<p>   In the following we will deal with nonempty words consists only of lower case letters 'a','b',..., 'j' and we will use the natural 'a' < 'b' < ... < 'j' ordering. Your task is to write a program that generates 
almost all zig-zag words (zig-zag permutations) from a given collection of letters. We say that a word W=W(1)W(2)...W(n) is zig-zag iff n = 1 or
W(i) > W(i+1) and W(j) < W(j+1) for all odd 
0 < i < n and for all even 0 < j < n                                      or W(i) > W(i+1) and W(j) < W(j+1) for all even 0 < i < n and for all odd 0 < j < n. For example: "aabcc" is not zig-zag, "acacb" is zig-zag, "cac" is zig-zag, "abababc" is not zig-zag. If you imagine all possible zig-zag permutations of a word in increasing lexicographic order, you can assign a serial number (rank) to each one. For example: 
the word "aabcc" generates the sequence:
1 <-> "acacb", 2 <-> "acbca", 3 <-> "bacac",
4 <-> "bcaca", 5 <-> "cabac", 6 <-> "cacab".


*******InputConstraints*******

<p> The input file consists several test cases. Each case contains a word (W) not longer than 64 letters and one positive number (D). The
letters of each word are in increasing order. Input terminated by EOF.


*******OutputConstraints*******

<p>
For each case in the input file, the output file must contain all of the zig-zag permutations of W whose zig-zag serial is divisible by D, in increasing lexicographic order - one word per line. In the next line you have to print the total number of zig-zag permutations of W.
There is no case that produces more than 365 lines of output. Print an empty line after each case.



*******IOTestCases*******


<pre>
<b>Input:</b>
j 1
abc 2
aaabc 1
aaabb 2
aaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbcccdd 123456


<b>Output:</b>
j
1

bac
cab
4

abaca
acaba
2

1

babacbcabacabadabababababababababadab
213216

</pre>



______________________________________________________
DIV||||||false||||||

<p> Let N be a positive integer. In theory it is easy to decide if d(N) (the number of positive divisors of N including 1 and N) is prime or not. Your task is just a little bit harder: compute all N in [1,10^6] for which
d(N)=p*q
where p and q distinct primes.


______________________________________________________
DIV2||||||true||||||


<p>Let N be a positive integer and d(N) be the number of positive divisors of 
N including 1 and N. Your task is to compute all N in [1,10^6] for which
d(N)>3 and if M divides N then d(M) divides d(N) too.


*******InputConstraints*******

<p> None.


*******OutputConstraints*******

<p> To make the problem less output related write out only every 108-th of them, one per line.


*******IOTestCases*******


<pre>
<b>Output:</b>
267
511
753
...
999579
999781
999977
</pre>



______________________________________________________
INCR||||||true||||||


<p>
A sequence <b>p(1)</b>, <b>p(2)</b>, ..., <b>p(N)</b> consisting of numbers 1, 2, ..., <b>N</b> is called a permutation if all elements in the sequence are different.

<p>
It is said that a permutation <b>p</b> contains increasing subsequence of <b>k</b> elements when there are numbers 
1 &#8804; <b>i<sub>1</sub></b> < <b>i<sub>2</sub></b> < ... < <b>i<sub>k</sub></b> &#8804; N such that <b>p(i<sub>1</sub>)</b> < <b>p(i<sub>2</sub>)</b> < ... < <b>p(i<sub>k</sub>)</b>.

<p>
When a permutation <b>p</b> contains an increasing subsequence consisting of <b>B</b> elements and does not contain an increasing subsequence consisting of <b>B+1</b> elements then the number <b>B</b> is called the degree of increase of this permutation.

<p>
You need to write a program which being given a number <b>N</b> calculates the number of permutations whose degree of increase is <b>B</b>.
Since the number of such permutations might be quite big, it is necessary to calculate its remainder of integer division by 1 000 000 000.


*******InputConstraints*******

<p>First line of input contains integer <b>T</b> (1 &#8804; <b>T</b> &#8804; 60) - the number of testcases. Then descriptions of <b>T</b>
testcases follow.

<p>The description of the testcase consists of one line. The line contains two integer numbers <b>N</b> and <b>B</b> (1 &#8804; <b>N</b> &#8804; 40, 1 &#8804; <b>B</b> &#8804; 5)
separated by one or more spaces.


*******OutputConstraints*******

<p>For each testcase in the input your program should output one line. This line should contain one integer number which is the remainder of integer division by 1 000 000 000 of the number of permutations whose degree of increase is <b>B</b>.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 2

<b>Output:</b>
4
</pre>



______________________________________________________
QUEST4||||||true||||||


<P align="left">
To reach the treasure, <b>Jones</b> has to pass through the <B>"Room of Death"</B>. The floor of this room is a square with side <B>120</B> units. It is laid with square tiles of dimensions <B>{1 X 1}</B> arranged into a grid. But, at some places in the grid tiles are missing. As soon as the door to this room is opened poisonous gas starts coming out of these missing grid locations. The only escape from this gas is to completely cover these locations with planks lying outside the room. Each plank has dimensions <B>{120 X 1}</B> and can only be placed parallel to either sides of the floor. Now <b>Jones</b> wants to minimize the damage to his health so that he has enough of it left for the treasure. He figures out that in order to achieve this he has to use the minimum number of planks possible. He also realises that even if the planks overlap, poisonous gas from the missing tiles can still be successfully blocked. Please help <b>Jones</b> in this task.
</p>

<p align="center">
<TABLE><center>
<TR>
	<TD><IMG SRC="/content/adrian:quest4_1.jpg" WIDTH="430" HEIGHT="486" BORDER="0" ALT="Dungeon of Death: Tiles Uncovered"></TD></tr><tr>
	<TD><IMG SRC="/content/adrian:quest4_2.jpg" WIDTH="430" HEIGHT="486" BORDER="0" ALT="Dungeon of Death: Tiles Covered"></TD>
</TR></center>
</TABLE> 
</p>


*******InputConstraints*******


<ul> 
	<li> The first line of the input is a positive integer <B>t <= 20</B>, denoting the number of rooms.
	<li> The descriptions for the t rooms follow one after the other.
	<li> <B>Room Description:</B>
		<ul> 
			<li> The first line of the room description is a positive integer <B>n (n  <=  10010)</B>, denoting the number of missing tile locations.
			<li> This is followed by the <B>n</B> lines, one for each missing tile location.
			<li> Each line contains two integers <B>x y (0 <= x, y < 120)</B>, separated by a single space, representing the co-ordinates of the missing tile location.
		</ul>
</ul> 
</p>


*******OutputConstraints*******

<p>The output should consist of <B>t</B> lines, one for each room. The <B>k<sup>th</sup></B> line in the output should be an integer <B>m<sub>k</sub></B>, the minimum number of planks needed for the <B>k<sup>th</sup></B> room.
</p>


*******IOTestCases*******


<tt>
<p>
<B>Input:</B>
<br>2
<br>3
<br>1 0
<br>2 0
<br>3 0
<br>4
<br>1 1
<br>2 2
<br>3 3
<br>4 4
</p>
<p>
<B>Output:</B>
<br>1
<br>4
</p>
</tt>


______________________________________________________
QUEST5||||||true||||||


<P>
To get to the treasure, <b>Jones</b> must complete one more task. He comes across a table, where there are a number of wooden planks lying along the length of the table. He notices that the width of the table is exactly equal to the width of every plank on it. The planks are so heavy that they cannot be manually moved in any way. Some of these wooden planks are overlapping. <b>Jones</b> has a hammer and the Gods grant him infinite nails. The planks have to be joined to the table with nails such that every plank is connected to the table through at least one nail.  The nails are of sufficient length, and have to be hammered vertically into the table. One or more planks can be joined to the table through a single nail provided they have a common overlap. Find out the minimum number of nails he needs to nail all planks to the table.
</p>

<p align="center"><center>
<IMG src="/content/adrian:quest5.jpg" WIDTH="500" BORDER="0" ALT="Planks"></center>
</p>


*******InputConstraints*******


<ul>
	<li> The first line of the input is a positive integer <B>t <= 20</B>, denoting the number of tables.
	<li> The descriptions of the table follow one after the other.

	<li> <B>Table description:</B>
	<ul>
	
		<li> The first line of the description of the <B>k<sup>th</sup></B> table contains a positive integer <B>n (n <= 10010)</B>, the number of planks on it. 
		<li> This is followed by <B>n</B> lines containing the description of the planks.
		<li> The description of each plank is a pair of integers <B>a</B> and <B>b</B> <B>(0 <= a <= b <= 10000010)</B>, denoting the distance of the left end and right end of the plank from the left end of the table.
	</ul>
</ul>
</p>


*******OutputConstraints*******

<p>The output must contain <B>t</B> lines , the <B>k<sup>th</sup></B> line corresponding to the <B>k<sup>th</sup></B> table.
The output on the <B>k<sup>th</sup></B> line must be an integer <B>i<sub>k</sub></B>, the minimum number of nails required.
</P>


*******IOTestCases*******

<tt>
<P align="left"><B>Input:</B>
<br>2
<br>3
<br>1 5
<br>3 5
<br>2 4
<br>2
<br>1 4 
<br>4 5
</p>

<P align="left">
<B>Output:</B>
<br>1
<br>1
</p>
</tt>


______________________________________________________
SUBS||||||true||||||


Let <B>A</B> and <B>B</B> be two strings made up of alphabets such that <B>A = A<sub>[1-n]</sub>, B = B<sub>[1-m]</sub></B>. We say <B>B</B> is a subsequence of <B>A</B> if there exists a sequence of indices  <B>i<sub>1</sub> < i<sub>2</sub> <..<i<sub>m</sub></B> of <B>A</B> such that <B>A[i<sub>k</sub>] = B[k]</B>. 
</P>

<p>
Given <B>B[1-m]</B>, a string of characters from some alphabets, <B>B^i</B> is defined as string with the characters of <B>B</B> each repeating <B>i</B> times. For example, <B>(abbacc)^3 = aaabbbbbbaaacccccc</B>.
Also, <B>B^<FONT face="courier">0</FONT></B> is the empty string.
</P>

<p>
Given strings <B>X</B>, <B>Y</B> made up of characters from <B>'a' - 'z'</B> find the maximum value of <B>M</B> such that <B>X^M</B> is a subsequence of <B>Y</B>.
</P>


*******InputConstraints*******


<p>
<ul>
<li> The first line of the input contains a positive integer <B>t <= 20</B>, denoting the no. of test cases.
<li> The following <B>2t</B> lines contain the value of <B>X</B> and <B>Y</B> for the cases.
<li> The description of the test cases follow one after the other.
<ul>
<li> Line <B>2k</B> contains the value of <B>X</B> for case <B>k</B>; <B>(1 <= k <= t)</B>
<li> Line <B>2k+1</B> contains the value of <B>Y</B> for case <B>k</B>; <B>(1 <= k <= t)</B>.
<li> The no. of characters in <B>X</B> , <B>Y</B> will be  <B><= 500010</B>.
</ul>
</ul>


*******OutputConstraints*******

<p>
The output must contain <B>t</B> lines, each line corresponding to a test case.
The value on the <B>k<sup>th</sup></B> line should be the value of <B>M</B> for the <B>k<sup>th</sup></B> pair of <B>X</B> and <B>Y</B>. 
</P>
 
<p>

*******IOTestCases*******


<p><tt>
<B>Input:</B>
<br>3
<br>abc
<br>aabbcc
<br>abc
<br>bbccc
<br>abcdef
<br>abc
</P>

<p>
<B>Output:</B>
<br>2
<br>0
<br>0
</tt>


______________________________________________________
VOCV||||||true||||||


<p align="left">
The city of <B>Y-O</B> is a network of two-way streets and junctions with the following properties:

<ol>
<li> There is no more than one street between each pair of junctions.
<li> Every junction is connected to every other junction either directly via a street or through other junctions by a unique path.
<li> When a light is placed at a junction, all the streets meeting at this junction are also lit.
</ol>
</p>

<p align="left">
A valid lighting is a set of  junctions such that if lights were placed at these, all the streets would be lit.
An optimal lighting is a valid lighting such that it contains the least number of junctions.
</p>

<p align="left">
The task is divided into two subtasks:
<ol>
<li> Find the number of lights in an optimal lighting.
<li> Find the total number of such optimal lightings in the city.
</ol>
</p>


*******InputConstraints*******


<ul>
<li> The first line of the input contains a positive integer <B>t <= 20</B>, denoting the number of test cases.
<li> The description of the test cases follows one after the other.


<li><B>Network Description:</B>
<ul> 
<li> The first line of description of a network consists of a positive integer <B>n <= 100010</B> denoting the number of junctions in the network. 
<li> Each junction is numbered with a unique integer between <B>1</B> and <B>n</B>.
<li> The following <B>n-1</B> lines contain a pair of integers <B>u v (1 <= u,v  <=  n)</B> separated by a single space denoting that there is a street between junction <B>u</B> and junction <B>v</B>.
</ul>
</ul>
</p>


*******OutputConstraints*******

<p align="left">
The output must consist of <B>t</B> lines, the <B>k<sup>th</sup></B> line corresponding to the <B>k<sup>th</sup></B> network; <B>(1 <= k <= t)</B>.
The <B>k<sup>th</sup></B> line must contain two integers separated by a single space.
The first integer on the <B>k<sup>th</sup></B> line must be the number of junctions in an optimal lighting of network <B>k</B>.
The second integer must be <B>N%10007</B>, which is the remainder left by the number of optimal lightings when divided by <B>10007</B>.
</p>


*******IOTestCases*******


<tt>
<p align="left">
<B>Input:</B>

<BR>2
<BR>4
<BR>1 2
<BR>2 3
<BR>3 4
<BR>3
<BR>1 2
<BR>1 3
</FONT>
</p>

<p align="left">

<B>Output:</B>
<BR>2 3
<BR>1 1
</p>
</tt>


______________________________________________________
LSORT||||||true||||||


<p>
An N-element permutation is an N-element sequence of distinct numbers from the set {1, 2, ...,n}. For example the sequence 2,1,4,5,3 is a 5-element permutation. P is an N-element permutation. Your task is to sort P in ascending order. But because it is very simple, I have a new rule for you. You have two sequences P and Q. P is an N-element permutation and Q is initially empty and formed by sorting P (i.e. finally Q = 1, 2, 3,... , N). You have to implement N steps to sort P. In the i-th step, P has N-i+1 remaining elements, Q has i-1 elements and you have to choose some x-th element (from the N-i+1 available elements) of P and put it to the left or to the right of Q. The cost of this step is equal to <i>x * i</i>. The total cost is the sum of costs of individual steps. After N steps, Q must be an ascending sequence. Your task is to minimize the total cost.
</p>

*******InputConstraints*******

<p>
The first line of the input file is T (T &#8804; 10), the number of test cases. Then descriptions of T test cases follow. 
The description of each test case consists of two lines. The first line contains a single integer N (1 &#8804; N &#8804; 1000). The second line contains N distinct integers from the set {1, 2, .., N}, the N-element permutation P.
</p>

*******OutputConstraints*******

<p>
For each test case your program should write one line, containing a single integer - the minimum total cost of sorting.
</p>

*******IOTestCases*******

<p>
N = 4<br />
P = {4,1,3,2}<br />
Step 1, Choose 3-rd, P={4,1,2}, Q={3} , Cost=3<br />
Step 2, Choose 1-st, P={1,2}, Q={3,4} , Cost=2<br />
Step 3, Choose 2-nd, P={1}, Q={2,3,4} , Cost=6<br />
Step 4, Choose 1-st, P={}, Q={1,2,3,4}, Cost=4<br />
The total cost is  15.<br />

Another way to sort: <br />
Step 1, Choose 4-th, P={4,1,3}, Q={2} , Cost=4<br />
Step 2, Choose 2-nd, P={4,3}, Q={1,2} , Cost=4<br />
Step 3, Choose 2-nd, P={4}, Q={1,2,3} , Cost=6<br />
Step 4, Choose 1-st, P={}, Q={1,2,3,4}, Cost=4<br />
The total cost is 18.<br />
</p>
<pre>
<b>Input:</b>
1
4
4 1 3 2
<br />
<b>Output:</b>
15
</pre>


______________________________________________________
BROW||||||true||||||


<p>The dwellers of the island Abstinence are very fond of alkoholfree beer. Hitherto alkohol-free beer was imported from Poland, but this year one of the cities on Abstinence is going to build a brewery. All the cities of this island lie on the coast and are connected by a highway running around the island along its shore. The investor building the brewery collected information about the demand for beer, i.e. how many tanks of beer are needed daily in each city. He has also a table of distances between cities. The cost of transporting one tank is 1 thaler per mile. A daily cost of transport is the amount of money, which has to be spent on transporting a necessary number of tanks of beer from the brewery to each city. The daily cost depends on the location of the brewery. The investor wants to find a location that minimizes the daily cost.

<h3>Task</h3>
<p>Write a program which
<ul>
<li> reads the number of cities, distances between them and daily requests for beer,
<li> computes the minimal daily cost of transport,
<li> writes the result.
</ul>


*******InputConstraints*******

<p>There are multiple test cases. Their number is given in the first line of input. In the first line of each test case there is one integer n - the number of cities, 5 <= n <= 10 000. (We assume that cities are numbered along the highway, so that the neighbouring cities have subsequent numbers. Cities 1 and n are neighbours too.) In each of the following n lines there are two non-negative numbers separated by a single space. Numbers zi di written in the line (i+1) are respectively the demand for beer in the city i and the distance (in miles) from city i to the next city on the highway. The entire length of the highway is not greater than 1 000 000 miles. The demand for beer in each city is not greater than 1 000 tanks.


*******OutputConstraints*******

<p>For each test case your program should write only one line - exactly one integer equal to the minimal daily cost of transport.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
6
1 2
2 3
1 2
5 2
1 10
2 3

<b>Output:</b>
41
</pre>



______________________________________________________
HANOI07||||||true||||||


<p>
There are N cubes in a toy box which has 1-unit height, the width is double the height. The teacher organizes a tower-building game. The tower is built by the cubes. The height of the tower is H (h levels). The bottom of the tower contains M cubes; and for all above level, each must contains a number of cubes which is exactly 1 less than or greater than the number of cubes of the level right below it.  

Your task is to determine how many different towers can be there. Two towers are considered different if there is at least one number i (1< i <=H) so that the i'th level of one tower contains a different number of cubes to the i'th level of the other tower.


*******InputConstraints*******

<p>
The first line of input file is the integer number t ( 0 < t < 1002 ) , the number of test cases . Each test case in one line , the line contains three positive number N, H and M (N <= 32767, H<=60, M<=10). 

*******OutputConstraints*******

<p>
With each test case , write in one line , the total of different towers that can be founded. 


*******IOTestCases*******


<pre>
<b>Input:</b>
2
7 3 2
22 5 4
<b>Output:</b>
2
10
(* In the first test case , all the towers are : 2-1-2 , 2-3-2 . *)
</pre>


______________________________________________________
PAIRINT||||||true||||||


<p>
You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.

*******InputConstraints*******

<p>
The first line of the input file is the integer number t ( 1 &#8804; t &#8804; 20 ), the number of test cases. Then t lines follow, each test case in one line; the line consists of a single integer N (10 &#8804; N &#8804; 10^9).

*******OutputConstraints*******

<p>
For each test case: <p>
On the first line write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format<p>

<p>X + Y = N<p>

Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of '+' and '=' characters.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
302
11

<b>Output:</b>
5
251 + 51 = 302
275 + 27 = 302
276 + 26 = 302
281 + 21 = 302
301 + 01 = 302
1
10 + 1 = 11
</pre>



______________________________________________________
ASSIGN4||||||true||||||


<p>
Assume that you are a manager and there are m types of worker (numbered from 1 to m) and n types of task (numbered from 1 to n). There are a(i) workers of type #i and b(j) postitions for task #j. C(i, j) is the cost of hiring a worker of type #i to do the task of type #j. Your job is to minimize the cost of hiring workers to fill all the positions given that the total number of workers is equal to the total number of positions.

*******InputConstraints*******

<p>
The first line of input contains the number of test cases nTest (1<= nTest <= 10). 
 Each test case contains:
<ul>
<li>The first line contains the number of worker types - m and number of task types - n. 
<li>The second line contains m positive integers: a(1), a(2), ..., a(m).
<li>The third line contains n positive integers: b(1), b(2), ..., b(n).
<li>Each of the next m lines contains n integers describing matrix C(i, j).
</ul>
<p>Notes: <p>
1 <= m, n <= 200; <p>
1 <= a(i), b(i) <= 30000; <p>
1 <= C(i, j) <= 10000. <p>
Sum of a(i) equals to sum of b(j).

*******OutputConstraints*******

<p>
For each test case write the minimum cost in a separate line (it will fit in a signed 32-bit integer).


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 4
3 6 7
2 5 1 8
1 2 3 4
8 7 6 5
9 12 10 11
4 4
1 3 5 7
2 4 2 8
1 4 7 3
4 7 5 3
5 7 8 3
5 3 6 8

<b>Output:</b>
110
54
</pre>



______________________________________________________
SEQPAR||||||true||||||


<p>
Given an integer sequence containing n elements (numbered from 1 to n), your task is to find the minimum value M so that we can find k + 1 integers 0 = p(0) < p(1) < p(2) < ... < p(k-1) < p(k) = n, such that for any i from 0 to k - 1, the sum of elements from  postition p(i)+1 to postition p(i+1) is not greater than M.


*******InputConstraints*******

<p>

The first line of input contains the number of test cases nTest (1 <= nTest <= 10). <p>
Each test case contains: <p>
The first line contains n, k. (1 <= k <= n <= 15000) <p>
Each of the next n lines contains an integer of the sequence with value range from -30000 to 30000.


*******OutputConstraints*******

<p>
For each test case write the minimum number M in a separate line.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
9 4
1
1
1
3
2
2
1
3
1

<b>Output:</b>
5
</pre>



______________________________________________________
REPEATS||||||true||||||


<p>
A string s is called an (k,l)-repeat if s is obtained by concatenating k>=1 times some seed string t with length l>=1. For example, the string 
<p>
s = abaabaabaaba
<p>
is a (4,3)-repeat with t = aba as its seed string. That is, the seed string t is 3 characters long, and the whole string s is obtained by repeating t 4 times. <p>
Write a program for the following task: Your program is given a long string u consisting of characters &#8216;a&#8217; and/or &#8216;b&#8217; as input. Your program must find some (k,l)-repeat that occurs as substring within u with k as large as possible. For example, the input string
<p>
u = babb<u>abaabaabaaba</u>b
<p>
contains the underlined (4,3)-repeat s starting at position 5. Since u contains no other contiguous substring with more than 4 repeats, your program must output the maximum k. 
<p>



*******InputConstraints*******

<p>
In the first line of the input contains H- the number of test cases (H <= 20). H test cases follow. First line of each test cases is n - length of the input string (n <= 50000), The next n lines contain the input string, one character (either &#8216;a&#8217; or &#8216;b&#8217;) per line, in order. 

*******OutputConstraints*******

<p>
For each test cases, you should write exactly one interger k in a line - the repeat count that is maximized. 

*******IOTestCases*******


<pre>
<b>Input:</b>
1
17
b
a
b
b
a
b
a
a
b
a
a
b
a
a
b
a
b

<b>Output:</b>
4
</pre>

since a (4, 3)-repeat is found starting at the 5th character of the input string.



______________________________________________________
SAM||||||true||||||


<p>
Jasio is a little boy - he is only three years old and enjoys playing with toy cars very much. Jasio has n different cars. They are kept on a shelf so high, that Jasio cannot reach it by himself. As there is little space in his room, at no moment may there be more than k toy cars on the floor. 

Jasio plays with one of the cars on the floor. Jasio's mother remains in the room with her son all the time. When Jasio wants to play with another car that is on the floor, he reaches it by himself. But when the toy is on the shelf, his mummy has to hand it to him. When she gives Jasio one car, she can at the same time pick any car from the floor and put it back on the shelf (so that there remains sufficient space on the floor).

The mother knows her child very well and therefore can predict perfectly which cars Jasio will want to play with. Having this knowledge, she wants to minimize the number of times she has to hand Jasio a toy from the shelf. Keeping that in mind, she has to put the toys off on the shelf extremely thoughtfully.
<P>
<B>Task</B>
<P>
Write a programme that:
<P>
<B>1.</B>reads from the standard input the sequence of toy cars in order in which Jasio will want to play with them,
<P>
<B>2.</B>calculates the minimal number of times the mother has to pick cars from the shelf,
<P>
<B>3.</B>writes the result to the standard output. 


*******InputConstraints*******

<P>
In the first line of the standard input is H- the number of test case (H <= 16). For each test case follow contains some lines, start with three integers: n, k, p (1 <= k <= n <= 100000, 1 <= p <= 500000), separated by single spaces. These denote respectively: the total number of cars, the number of cars that can remain on the floor at once and the length of the sequence of cars which Jasio will want to play with. Each of the following p lines contains one integer. These integers are the numbers of cars Jasio will want to play with (the cars are numbered from 1 to n ). 


*******OutputConstraints*******

<p>
For each test case, you should write only one integer - the minimal number of times his mother has to pick a car from the shelf. 


*******IOTestCases*******

<pre>
<b>Input:</b>
<P>
For the following input data:
<P>
3 2 7
1
2
3
1
3
1
2

<b>Output:</b>
<P>
the correct answer is:
<P>
4
</pre>



______________________________________________________
LWAR||||||true||||||


<p>A major cosmic battle was getting over. The InterGalactic
SuperPower had been under attack, but it had defended itself quite
well. It was about to launch its final retaliatory assault. But the
number of enemy ships was quite large and they could scatter very
easily. Their only hope, or so their Space Warfare expert said, was to
bomb the enemies (who happened to be lined up in a long line!) using
the strategy described below.</p>

<p>Because the number of ships will be a power of 2, to bomb all the ships (numbered 0 to 2<sup>N</sup> -1), the strategy to be used, which we will call <strong>BombStrat</strong>, goes like this:<br>
  1. Bomb it&#8217;s first half, [0 to 2<sup>N-1</sup> -1], in the left to right direction.<br>
  2. Of the remaining half, bomb its latter half part in reverse direction, i.e., bomb ships 2<sup>N</sup>-1, 2<sup>N</sup>-2,...., 2<sup>N-1</sup>+2<sup>N-2</sup> in that order.<br>

  3. Then use <strong>BombStrat</strong> on the remaining ships: [2<sup>N-1</sup> to 2<sup>N-1</sup> + 2<sup>N-2</sup> -1 ]</p>
<p>For example, when N=3, i.e., with ships numbered from 0 to 2<sup>3</sup> -1, this is what happens:<br>

  Step 1: Ships 0,1,2,3 get bombed in that order.<br>
  Step 2: Ships 7, 6 go down next.<br>
  Step 3: Now, the remaining ships [4, 5] are destroyed using the same strategy.</p>
<p>So the bombing is done in the order 0 -> 1 -> 2 -> 3 ->

7 -> 6 -> 4 -> 5. To make the job easier for the InterGalactic
SuperPower&#8217;s ships&#8217; pilots, they want to find which ship should be
bombed when. This is your task. Given N, and the description of a ship,
return the 0-based serial number of the bomb will blast it. </p>

*******InputConstraints*******

<p>T &#8211; the number of test cases, T<=50.<br>
For each test case:<br>

<p>One line containing a binary number, describing the number of the place. The length of this string will equal N (it will be padded with leading zeroes if necessary). N<=30000.</p>

*******OutputConstraints*******

<p>For each test case, output the index of a bomb, represented in the same format, as binary digits, whose length is exactly N.</p>

*******IOTestCases*******

<tt>
<p>Sample Input:<br>
  3<br>
  111<br>
  100<br>

  1100</p>
<p>Sample Output:<br>
  100<br>
  110<br>
  1011<br>
</p>
</tt>


______________________________________________________
DISUBSTR||||||true||||||


<p>Given a string, we need to find the total number of its distinct substrings.</p>

*******InputConstraints*******

<p>T- number of test cases. T<=20;<br>
Each test case consists of one string, whose length is <= 1000</p>

*******OutputConstraints*******

<p>For each test case output one number saying the number of distinct substrings.</p>


*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>
  2<br>
  CCCCC<br>
  ABABA</p>
<p><strong>Sample Output:</strong><br>
  5<br>
  9</p>
</tt>

<p>Explanation for the testcase with string ABABA: <br>
  len=1 : A,B<br>
  len=2 : AB,BA<br>
  len=3 : ABA,BAB<br>
  len=4 : ABAB,BABA<br>
  len=5 : ABABA<br>

  Thus, total number of distinct substrings is 9.<br>
</p>


______________________________________________________
UFAST||||||true||||||


The Agents need to unite. They are on a road and each of them possess a special device which can both send and receive signals, in both directions upto a maximal distance of D units. Apart from this small limitation, the devices work very efficiently so that the time
taken for interdevice communication is practically zero. Now that the agents are at different points on the road, for them to be able to communicate with each other at will, every agent should be connected to every other agent through one or more intermediate devices. For
example: agent A may communicate to agent C via agent B&#8217;s device, when A and C are not close enough. This happens when <strong>dist</strong>(A,C)>D, but <strong>dist</strong>(A,B)<=D and <strong>dist</strong>(B,C)<=D.</p>

<p>Getting the line ready, is the process of agents moving from their current positions in order to get the network fully connected. That is, from every agent to every other agent, there is a communication path. </p>

<p>The agent&#8217;s final positions (in two cases that are going to follow) are decided by a programmer, who watches the scene from above and instructs each agent of the time to move and the final position to move to. Each agent moves a unit distance in unit time.</p>

<p>We need to find the minimal time taken for the programmer to &#8220;get the line ready&#8221; if he moves the agents:<br>

1. Independently: In other words, every agent moves to their final
position without waiting for any other agent; all agents are told of
their final positions at time zero.<br>
2. Sequentially: In this the agents form a definite sequence of movement. No two agents are moving at the same time.</p>

*******InputConstraints*******

<p>T &#8211; number of test cases. For each test case :<br>
  N D &#8211; where N is the number of agents, D is the maximal communication distance<br>
  The i-th line, of the N-lines that follow gives the position of the i-th agent on the road currently.</p>

*******OutputConstraints*******

<p>For each test case, output two integers;<br>
1st &#8211; minimal time taken to unite if they move independently<br>
2nd - minimal time taken to unite if they move sequentially</p>
<p><strong>Constraints:</strong><br>
  T<=20<br>
  1<=N,D<=100 ; <br>

  Each agent's initial position is between 0 and 1000.</p>


*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>
  2<br>
  4 3<br>
  10 20 30 35<br>
  5 3<br>

  1 2 3 4 30</p>
<p><strong>Sample Output:</strong><br>
  8 23<br>
  12 23<br>
</p>


______________________________________________________
LIAR||||||true||||||


<p>Professor Millman hates us, and worse, characterizes us as
liars. We don&#8217;t care if he means it or not, but we (more professional
that him!) planned to give the lower and upper bound on the number of
liars in the class (so that you know what happens the next time he
scolds us! ).</p>
<p>To start with we took a survey of all students in the class. Each
student gave a reply about every student saying whether that student is
a liar or not. These answers are in the form of a Matrix A, where
A[i][j] represents the reply given by the i-th student about the j-th
student. If that character is &#8216;L&#8217; &#8211; it means he/she is a liar; if it&#8217;s
&#8216;T&#8217; &#8211; then it means that, that student is a truth speaker.</p>
<p>We take the following as our definition of the terms Truth-Speaker, and Liar:<br>
  Truth-Speaker (&#8216;T&#8217;): All his/her replies are true.<br>
  Liar (&#8216;L&#8217;) : (S)he has made at least one false reply.</p>


*******InputConstraints*******

<p>
  T &#8211; the number of test cases; For each test case :<br>

  N &#8211; total number of students in the class<br>
  Matrix A of NxN characters, without space separation;</p>


*******OutputConstraints*******

<p>For i-th test case output one line of the form &#8220;Class Room#i contains atleast A and atmost B liars&#8221;, where A and B are the lower and the upper bounds on the number of liars respectively. If there is a paradoxical class room, instead of the above line, print &#8220;Class Room#i is paradoxical&#8221;.</p>
<p><strong>Constraints:</strong><br>
  T<=50; Our class rooms contain atmost 70 students.</p>


*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>

  4<br>
  2<br>
  LL<br>
  TT<br>
  3<br>
  TTT<br>

  TTT<br>
  TTT<br>
  4<br>
  TLLL<br>
  LTLL<br>
  LLTL<br>

  LLLT<br>
  5<br>
  TLTLT<br>
  TTTTT<br>
  LLTLL<br>
  LLLLL<br>

  TLTLT</p>
<p><strong>Sample Output:</strong><br>
  Class Room#1 is paradoxical<br>
  Class Room#2 contains atleast 0 and atmost 3 liars<br>
  Class Room#3 contains atleast 3 and atmost 4 liars<br>
  Class Room#4 contains atleast 4 and atmost 4 liars<br>
</p>
</tt>
<p> Here a paradox occurs if a person can't be classified as a liar or a truth-speaker.<br>
</p>


______________________________________________________
MWORDS||||||true||||||


Given an NxN matrix of characters. We start at position (1,1) and want to reach (N,N) in exactly 2N-1 moves. Each move consists of movement in one of the four standard directions. As we move, we collect the characters found in our positions forming a string. We now constrain our attention to all paths that do not cross the diagonal of
the matrix. However the parts of the path can be on the diagonal line. These paths can be classified into two partitions; the paths that lie above and paths that lie below the diagonal. Each path is represented by a string of characters formed by the ordered concatenation of
characters found on the way. If we consider the set of all valid paths, (both upper and lower) get their corresponding strings, sort them all in alphabetical order, we obtain the (ordered) master set. Note that
the master set might contain duplicates, and all strings in the master set consist of exactly 2N-1 characters. Let M be the total number of strings in the master set, given an integer I, we need to find the string with index = I (modulo M) within the master set.<br>
  If Master Set = { &#8220;A&#8221;,&#8221;B&#8221;,&#8221;B&#8221;,&#8221;C&#8221; } (although this set can never be a master set!)<br>
  I=0 produces &#8220;A&#8221;, while I=2 and I=5, produces &#8220;B&#8221;.</p>
<p><strong>Constraints: </strong><br>
  N<=30.<br>
  I<=10<sup>18</sup>. &#8216;I&#8217; will fit into a 64-bit integer.</p>


*******InputConstraints*******

<p>  T-number of test cases<br>
  N I<br>
  Next is the NxN matrix of characters, N characters per line.<br>
  All characters are between &#8216;A&#8217;-&#8216;Z&#8217; (only uppercase).</p>


*******OutputConstraints*******

<p>For each test case output the corresponding string sought for in the master set.</p>


*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>
  2 <br>
  3 18<br>
  DAA<br>
  BDA<br>
  BBD <br>

  3 18<br>
  DAA<br>
  ADA<br>
  AAD</p>
<p><strong>Sample Output:</strong><br>
  DBBBD<br>

  DADAD</p>
</tt>
<p><strong>Explanation: </strong><br>
  Test case I: Master Set = { &#8220;DAAAD&#8221;, &#8220;DADAD&#8221;,&#8221;DBBBD&#8221;,&#8221;DBDBD&#8221;}<br>
  Test case II: Master Set = { &#8220;DAAAD&#8221;,&#8221;DAAAD&#8221;,&#8221;DADAD&#8221;,&#8221;DADAD&#8221;}<br>
</p>



______________________________________________________
PLHOP||||||true||||||


<p>This man has grown so rich that, when he travels between any
two locations he always takes atleast K flights. In a region of N
cities, we need to find the minimal cost required for the man to travel
between every pair of cities. There are provisions (especially for this
type of rich men,) to fly from i-th city to the i-th city itself!</p>

*******InputConstraints*******

<p>
  T &#8211; The number of test cases. <br>
  In each test case :<br>
  K N<br>
NxN matrix representing the costs of the tickets. The i-th line, j-th
column&#8217;s entry represents the cost of a ticket from city i to city j.
The numbers are of course space separated.</p>

<p><strong>Constraints :</strong><br>
  T<=20<br>
  N<=50<br>
  K<=10<sup>9</sup><br>
  The cost of each ticket <= 100<br>

  Each element of the output matrix will fit into a 
  64-bit integer.<br>
  </p>

*******OutputConstraints*******

<p>For the i-th test case , 1st line is of the form &#8220;Region #i:&#8221;. <br>
In the following N lines, output an NxN matrix where the j-th element
of the i-th line represents the minimal cost to travel from city i to
city j with taking atleast K flights. The numbers on a line must be
separated by atleast one space. Output a blank line after each testcase
(including the last one).</p>

*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>
  2<br>

  3 4<br>
  1 2 3 4<br>
  5 6 7 8<br>
  9 10 11 12<br>
  13 14 15 16<br>
  10999 4<br>

  1 2 3 4<br>
  5 6 7 8<br>
  9 10 11 12<br>
  13 14 15 16</p>
<p><strong>Sample Output:</strong><br>
  Region #1:<br>

  3 4 5 6<br>
  7 8 9 10<br>
  11 12 13 14<br>
  15 16 17 18</p>
<p>Region #2:<br>
  10999 11000 11001 11002<br>

  11003 11004 11005 11006<br>
  11007 11008 11009 11010<br>
  11011 11012 11013 11014</p>
</tt>


______________________________________________________
HKNAP||||||true||||||


Our King has won the brutal battle and this whole land is now ours. The special thing about this land is that it has many beautiful golden statues. Our King wants to take back as much gold as possible to his palace. We have found that there are <strong>N</strong> types of statues
and -- almost unbelievably -- that there is an unlimited
number of each type of statue. Each statue of type <strong>i</strong> has a weight of <strong>W[i]</strong> units and occupies <strong>V[i]</strong> units of volume. Our King wants to maximize the amount of gold he
carries back to his palace. We may use <strong>S</strong> sacks for this purpose, each of volume <strong>Y</strong>.
All sacks are filled up independently by golden statues. However, there is a provision to stitch two sacks together, at the cost of <strong>C</strong>
units of gold. Stitching three sacks costs 2*C because it requires two stitchings, and so on. Your task is to find
how much gold our King can possibly gain, i.e. the
total weight of the statues brought back, minus the stitching charges.</p>

*******InputConstraints*******

<p>  T &#8211; The number of test cases.<br>
  For each test case :<br>

  N S Y C // 1st line<br>
Next N lines two numbers W[i] and V[i] each.</p>

*******OutputConstraints*******

<p>One integer, the maximum gain in gold for our King.<br>
  This gain is the total amount of gold transported minus stitching charges.</p>
<p><strong>Constraints :</strong><br>
  1<= S <= 1000 <br>

  1<= Y <= 1000 000 000<br>
  1<= N <= 1000<br>
  1<= W[i] <= 100; (for all i)<br>
  1<= V[i] <= 18; <br>

  The Output will fit into a 64-Bit integer. <br>
  1<=T<=20<br>
  All W[i] & V[i] are guaranteed to be either prime or equal to 1.</p>

*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>

  2<br>
  2 5 3 1<br>
  1 2<br>
  5 7<br>
  2 5 3 1<br>
  1 2<br>

  7 5<br>
  <br>
  <strong>Sample Output:</strong><br>
6<br>
17</p>
</tt>


______________________________________________________
BPRED||||||true||||||


<p>As most of you might already know, the Intel-class hi-tech processors of today do a series of parallel tasks to help speedup instruction execution. The most complicated of those tasks is branch prediction. Since the instruction chunks on a modern processor are broken down into independent chunks and executed for a speed up, there is always a requirement to predict what branch an execution path will take (before the actual operands required for the condition to be evaluated to
select the branch, are available). This complex task, is not addressed to fullest level today, but heuristics (as always) have helped.</p>

<p>The task we are going to consider now is much more simple compared to the actual branch prediction task. For our modelling, let us suppose that every instruction has the following syntax: <br>
<current-label> <branched-label><br>
All labels are strings of alphabets only. Labels are case-sensitive.</p>
<p>Moreover the probability that a certain branch will be taken is <strong>P</strong> (it is equal for all branches). If a branch is taken, the point of
execution (control) goes to the branched-label. Otherwise the next statement in that order is executed. Control starts at the "<strong>start</strong>" (lowercase) label and control ends at the "<strong>end</strong>"
(lowercase) label. The branch-label of start and end are themselves, and when start is executed, the control goes to the next instruction, and when end is executed, processing ends, with 100% probability. The last statement in the program is always an &#8220;<strong>end</strong>&#8221;.</p>

<p>It is required to find the expected number of times a statement executes.</p>

*******InputConstraints*******

<p>
  T &#8211; the number of test cases;<br>
  For each test case:<br>
  1st line contains one integer N (the number of lines to follow), one real P and one label L.<br>
Each of the N lines that follow consist of instructions (two labels).


*******OutputConstraints*******

<p>For each test case, output one line containing: <br>
"Expected number of times label L is executed is R",<br>
  where L - is the label given in the input<br>
  R - is the number of times the label is expected to be executed. It must be printed with exactly five decimal places.</p>
<p><strong>Constraints:</strong><br>
  T<=20<br>

  3<=N<=120.<br>
  P lies between 0.01 and 0.99, i.e. no jump is 100% sure.<br>
  Also you can assume no label occurs on the jump side, without being defined throughout the program. <br>
  Each label is less than 10 characters in length.<br>
  Also each line has a distinct label associated with it.</p>


*******IOTestCases*******

<tt>
<p><strong>Sample Input:</strong><br>
  3<br>
  5 .5 B<br>
  C start<br>
  start start<br>
  B C<br>

  D C<br>
  end end<br>
  5 .99 C<br>
  start start<br>
  A B<br>
  B A<br>

  C end<br>
  end end<br>
  3 .5 label<br>
  start start<br>
  label label<br>
  end end</p>

<p><strong>Sample Output:</strong><br>
  Expected number of times label B is executed is 4.00000<br>
  Expected number of times label C is executed is 1.00000<br>
  Expected number of times label label is executed is 2.00000 </p>
</tt>



______________________________________________________
EXPAND||||||true||||||


<p>
Farmer John has N (1 <= N <= 25,000) rectangular barns on his farm, all
with sides parallel to the X and Y axes and integer corner coordinates in
the range 0..1,000,000. These barns do not overlap although they may
share corners and/or sides with other barns.

Since he has extra cows to milk this year, FJ would like to expand some of
his barns.  A barn has room to expand if it does not share a corner or a
wall with any other barn.  That is, FJ can expand a barn if all four of its
walls can be pushed outward by at least some amount without bumping into
another barn.  If two barns meet at a corner, neither barn can expand.

Please determine how many barns have room to expand.


*******InputConstraints*******

<p>
t &#8211; the number of test cases, then t test cases follow. 
<p>
Each test case takes the following form:
<p>
The first line contains the number of rectangular barns - n.
<p>
Each of the next n lines contains:
<p>
Four space-separated integers A, B, C, and D,      describing one barn. The lower-left corner of the barn is at (A,B) and the upper right corner is at (C,D).


*******OutputConstraints*******

<p>
For each test case write a single integer that is the number of barns that can be expanded in a separate line 


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5
0 2 2 7
3 5 5 8
4 2 6 4
6 1 8 6
0 0 8 1

<b>Output:</b>
2
</pre>
<b>Input/Output details:</b>
<p>
There are 5 barns.  The first barn has its lower-left corner at (0,2) and
its upper-right corner at (2,7), and so on.
<p>
Only two barns can be expanded --- the first two listed in the input.
All other barns are each in contact with at least one other barn.



______________________________________________________
SERVICE||||||true||||||


<p>
A company provides service for its partners that are located in different towns. The company 
has three mobile service staff employees. If a request occurs at some location, an employee of 
the  service  staff  must  move  from  his  current  location  to  the  location  of  the  request  (if  no 
employee  is  there)  in  order  to  satisfy  the  request.  Only  one  employee  can  move  at  any 
moment.  They  can  move  only  on  request  and  are  not  allowed  to  be  at  the  same  location. 
Moving  an  employee  from  location  p  to  location  q  incurs  a  given  cost  C(p,q).  The  cost 
function  is  not  necessarily  symmetric,  but  the  cost  of  not  moving  is  0,  i.e.  C(p,p)=0.  The 
company must satisfy the received requests in a strict first-come, first-serve basis. The goal is 
to minimize the total cost of serving a given sequence of requests. 
<p>
Task  
<p>
You are to write a program that decides which employee of the service staff is to move for 
each request such that the total cost of serving the given sequence of requests is as small as 
possible.


*******InputConstraints*******

<p>
The first line of input contains the number of test cases - nTest. Each test case contains:
<p>
The first line of each test cases contains two integers, L and N. L (3 <= L <= 200) is the  number  of  locations  and  N  (1 <= N <= 1000)  is  the  number  of  requests.  Locations  are 
identified  by  the  integers  from  1  to  L.  Each  of  the  next  L  lines  contains  L  non-negative 
integers. The jth number in the line i+1 is the cost C(i,j), and it is less than 2000. <p> 
The last of each test cases contains  N  integers,  the  list  of  the  requests.  A  request  is  identified  by  the  identifier  of  the 
location where the request occurs.  Initially, the three service staff employees are located  at 
location 1, 2 and 3, respectively. 


*******OutputConstraints*******

<p>
For each test case write the minimal total cost in a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 9
0 1 1 1 1
1 0 2 3 2
1 1 0 4 1
2 1 5 0 1
4 2 3 4 0
4 2 4 1 5 4 3 2 1
<b>Output:</b>
5
</pre>



______________________________________________________
PSTRING||||||true||||||


<p>
Given two strings X and Y, your task is find the minimum number of characters to be removed from X in order to obtain a string X' that does not contain Y as a substring.


*******InputConstraints*******

<p>
Input contains some test cases. Each test cases contains two lines, First is X and second is Y. Length of X <= 10000, Length of Y <= 1000.


*******OutputConstraints*******

<p>
For each test cases, You should output exactly one integer is the minimum number of characters to be remove


*******IOTestCases*******


<pre>
<b>Input:</b>
ababaa
aba

<b>Output:</b>
1

</pre>



______________________________________________________
SUBST1||||||true||||||


<p>
Given a string, we need to find the total number of its distinct substrings.


*******InputConstraints*******

<p>
T- number of test cases. T<=20;
Each test case consists of one string, whose length is <= 50000

*******OutputConstraints*******

<p>
For each test case output one number saying the number of distinct substrings.


*******IOTestCases*******

<pre>
<b>Input:</b>
2
CCCCC
ABABA

<b>Output:</b>
5
9
</pre>



______________________________________________________
TFSETS||||||true||||||


<p>
A set <b>S</b> of positive integers is called <i>strongly triple-free</i> if, for any integer <b>x</b>, the sets {<b>x</b>, 2<b>x</b>}
and {<b>x</b>, 3<b>x</b>} are not subsets of <b>S</b>. Let's define <b>F(n)</b> as a number of strongly triple-free subsets of {1, 2, ..., <b>n</b>},
where <b>n</b> is a natural number.

<p>
You need to write a program which being given a number <b>n</b> calculates the number <b>F(n)</b> modulo 1 000 000 001.


*******InputConstraints*******

<p>
The first line of input contains integer <b>T</b> (1 &#8804; <b>T</b> &#8804; 500) - the number of testcases. Then descriptions of <b>T</b> testcases follow.

<p>
The description of the testcase consists of one line. The line contains an integer number <b>n</b> (1 &#8804; <b>n</b> &#8804; 100 000).


*******OutputConstraints*******

<p>
For each testcase in the input your program should output one line. This line should contain one integer number which
is the number <b>F(n)</b> modulo 1 000 000 001.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
3
1
10
20
39

<b>Output:</b>
5
2
198
43776
971827200
</pre>



______________________________________________________
NICEDAY||||||true||||||


<p> 
The International Olympiad in Informatics is coming and the leaders of the Vietnamese Team have to choose the best contestants all over the country. Fortunately, the leaders could choose the members of the team among N very good contestants, numbered from 1 to N (3 &#8804; N &#8804; 100000). In order to select the best contestants the leaders organized three competitions. Each of the N contestants took part in all three competitions and there were no two contestants with equal results on any of the competitions. We say that contestant &#1040; is better than another contestant &#1042; when &#1040; is ranked before &#1042; in all of the competitions. A contestant A is said to be excellent if no other contestant is better than A. The leaders of the Vietnamese Team would like to know the number of excellent contestants.



*******InputConstraints*******

<p>
First line of the input contains an integer t (1 &#8804; t &#8804; 10 ), equal to the number of testcases. Then descriptions of t testcases follow.
First line of description contains the number of competitors N .
Each of the next N lines describes one competitor and contains integer numbers ai, bi, ci (1 &#8804; ai, bi , ci &#8804; N ) separated by spaces, the order of i-th competitor's ranking in the first competition , the second competition and the third competition.

*******OutputConstraints*******

<p>
For each test case in the input your program should output the number of excellent contestants in one line.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
1 2 3
2 3 1
3 1 2

<b>Output:</b>
3
</pre>



______________________________________________________
PRO||||||true||||||


<p>A large Bytelandian supermarket chain has asked you to write a program for the simulating costs of a promotion being prepared. 

<p>The promotion has to follow the following rules: 

<ul>
<li>A customer who wants to participate in the promotion, writes on the receipt, paid by himself, his personal details and throws it into a special ballot box. 
<li>At the end of every day of the promotion, two bills are taken out from the ballot box: 
<ul>
<li> first, the receipt amounting to the largest sum is chosen, 
<li> then the receipt amounting to the smallest sum is chosen; 
</ul>
The customer who has paid the largest sum gets a money prize equal to the difference between the sum on his bill and the sum on the bill amounting to the smallest sum. 
<li>
To avoid multiple prizes for one purchase, both bills selected according to the above rules are not returned to the ballot box, but all remaining bills still participate in the promotion. 
</ul>
<p> The turnover of the supermarket is very big, thus an assumption can be made, that at the end of every day, before taking out receipts amounting to the largest and the smallest sum, there are at least 2 receipts in the ballot box. 

<p> Your task is to compute (on the basis of information about prices on receipts thrown into the ballot box on each day of promotion) what the total cost of prizes during the whole promotion will be. 
<p>
Write a program, which: reads from the standard input a list of prices on receipts thrown into the ballot box on each day of the promotion, computes the total cost of prizes paid in consecutive days of promotion, then writes the result to the standard output. 


*******InputConstraints*******

<p>The first line of the input contains one positive integer n (1 <= n <= 5000), which is the duration of promotion in days. 

Each of the next n lines consists of a sequence of non-negative integers separated by single spaces. Numbers in the (i+1)-th line of the file represent prices on receipts thrown into the ballot box on the i-th day of promotion. The first integer in the line is k, 0 <= k <= 10^5, the number of receipts on the day, and the next k numbers are positive integers standing for the sums on receipts; none of these numbers is larger than 10^6. 
<p>
The total number of bills thrown into the ballot box during the whole promotion does not exceed 10^6. 


*******OutputConstraints*******

<p>The output should contain exactly one integer, equal to the total cost of prizes paid during the whole promotion. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5
3 1 2 3
2 1 1
4 10 5 5 1
0
1 2

<b>Output:</b>
19
</pre>



______________________________________________________
MAXIMUS||||||true||||||


<p align="justify">Commodus has
discovered with your help that the traitor is Maximus. Commodus has
gathered N prestigious armies A1 A2 ... AN and asked you to lead them
to kill Maximus. A brave warrior like you must now act intelligently to
lead the armies to victory.</p>
<p align="justify">There are three countries which are considered here,
for simplicity lets name them C<sub>0</sub>, C<sub>1</sub>
and C<sub>2</sub>.
You have moved the armies to C<sub>0</sub> and you know that
Maximus is in C<sub>2</sub>.
You are wise enough to know that without all
your N armies you stand no chance against great Maximus. The problem is
that your armies are too egoistic in nature ( after all they were
organized by Commodus ). Only the biggest army can leave any country C<sub>y</sub>
(Army A<sub>x</sub> can leave C<sub>y</sub>, if there is no army A<sub>i</sub>
in C<sub>y</sub> with i > x.). Also, the army A<sub>x</sub>
will go into C<sub>y</sub> only if it is the biggest army to get there,
i. e. there is no army A<sub>i</sub> in C<sub>y</sub> with i > x.</p>
<p align="justify">There is another confusion here, all the
armies A<sub>m</sub> have been trained by a different
commander
and they march differently. Each army A<sub>m</sub> where m is either 1
or prime can only move
from C<sub>i</sub> to C<sub>(i+1)%3</sub>, while your armies A<sub>m</sub>
where m > 1 is
composite will march only from C<sub>i</sub> to C<sub>(i+2)%3</sub>.
</p>
<p align="justify">Commodus is impatient and he is asking you to find
the
number of moves you need to reach Maximus. You are planning to reach
there with the shortest possible number of moves; tell your answer to
Commodus.</p>
<p align="justify">
Example for N = 2:<br>
The required number of steps would be 7<br>
initially<br>
C0 - A1, A2<br>
C1 -<br>
C2 -<br>
<br>
after step 1<br>
C0 - A1<br>
C1 - A2<br>
C2 -<br>
<br>
after step 2<br>
C0 - A1<br>
C1 - <br>
C2 - A2<br>
<br>
after step 3<br>
C0 - <br>
C1 - A1<br>
C2 - A2<br>
<br>
after step 4<br>
C0 - A2<br>
C1 - A1<br>
C2 - <br>
<br>
after step 5<br>
C0 - A2<br>
C1 - <br>
C2 - A1<br>
<br>
after step 6<br>
C0 - <br>
C1 - A2<br>
C2 - A1<br>
<br>
after step 7<br>
C0 - <br>
C1 - <br>
C2 - A1, A2<br>
</p>

*******InputConstraints*******

<p>The input will consist of at most 100 test cases. Each test case consists of a number N (the number of armies, 1 &#8804; N &#8804; 5000).
The last test case is followed by a line containing 0.
</p>

*******OutputConstraints*******

<p>For each number N, you have to output the number of moves needed to move the
armies to C<sub>2</sub> with the minimum number of steps.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
3
4
100
0

<b>Output:</b>
2
7
21
49
1299510268586153115889930564780511199231
</pre>



______________________________________________________
MTWALK||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTWALK/en/">English</a></td> 
<td width="50%"><a href="/problems/MTWALK/vn/">Vietnamese</a></td> 
</tr></table>

<p>Farmer John and Bessie the cow have embarked on one of those 'active' vacations. They spend entire days walking in the mountains and then, at the end of the day, they tire and return to their vacation cabin.

<p>Since climbing requires a lot of energy and they are already tired, they wish to return to the cabin using a path that has the least difference between its highest and lowest elevations, no matter how long that path is. Help FJ find this easy-to-traverse path.

<p>The map of the mountains is given by an N x N (2 <= N <= 100) matrix of integer elevations (0 <= any elevation <= 110) FJ and Bessie are currently at the upper left position (row 1, column 1) and the cabin is at the lower right (row N, column N). They can travel right, left, toward the top, or toward the bottom of the grid. They can not travel on a diagonal. 


*******InputConstraints*******

<ul>
<li>Line 1: The single integer, N

<li>Lines 2..N+1: Each line contains N integers, each of which specifies a square's height. Line 2 contains the first (top) row of the grid; line 3 contains the second row, and so on. The first number on the line corresponds to the first (left) column of the grid, and so on. 
</ul>

*******OutputConstraints*******

<p>An integer that is the minimal height difference on the optimal path. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 1 3 6 8
1 2 2 5 5
4 4 0 3 3
8 0 2 3 4
4 3 0 2 1

<b>Output:</b>
2
</pre>





______________________________________________________
IVAN||||||true||||||


<p>
Little Ivan likes to play games in his spare time. Unfortunately, he cannot always enjoy the company of his friends and sometimes he is a little bored when he is alone. Therefore, he makes up games, where he is the only player. He is especially proud of his last game and likes to tell you about it. <br>
You are given two finite sequences of positive integers. The game consists of making consecutive moves. You are allowed to make the following move. You remove the last K1 numbers (K1&#8805;1) from the first sequence (possibly the whole sequence) and find their sum S1 and the last K2 numbers (K2&#8805;1) from the second sequence (again you can remove the whole sequence) and find their sum S2. Then you calculate the cost of the move to be (S1 &#8211; K1)*(S2 &#8211; K2). You continue to make moves until you remove all the numbers in both sequences. The total cost of the game is the sum of the costs of all moves. Your goal is to minimize this total cost. You are not allowed to leave one of the sequences empty, while the other is not. <br>
As Ivan has told you the rules of the game, you realize that it is easily solvable with the help of a computer, so you decide to write a program GAME, that computes the minimum total cost of the game.


*******InputConstraints*******

<p> Input data is read from the standard input and consists of three lines. The first line contains two space-separated integers, L1 and L2 (1 &#8804; L1, L2 &#8804; 2000), which denote the lengths of the two sequences. The second line contains L1 space-separated integers, which are the elements of the first sequence. The third line contains L2 space-separated integers, which are the elements of the second sequence. The elements of the sequences do not exceed 1000.


*******OutputConstraints*******

<p>Your program has to output one line on the standard output that contains only one number &#8211; the minimum total cost of the game as described above.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 2
1 2 3
1 2
<b>Output:</b>
2
</pre>



______________________________________________________
MDST||||||true||||||


<p>Solve the minimum diameter spanning tree problem for the simple graphs.
<p>For a given list of adjacent vertices of a graph G find the minimum diameter spanning tree T and write down the diameter of this tree diam(T). 
<p>Each graph has only one connected component, so there is at least one spanning tree, which connects all the vertices.


*******InputConstraints*******

<p>t [the number of test graphs]<br/>
Graph:<br/>
<i>n</i> [1 <= <i>n</i> <= 1000 the number of graph vertices]<br/>
<i>i m v<sub>1</sub> v<sub>2</sub> ... v<sub>m</sub></i> [the list of <i>m</i> adjacent vertices to vertex <i>i</i>]


*******OutputConstraints*******

<p>For each test case output:<br/>
<i>d</i> [diameter of the minimum diameter spanning tree]


*******IOTestCases*******


<pre>
<b>Input:</b>
6

10
1 3 2 3 4
2 3 1 5 7
3 3 1 5 6
4 3 1 6 8
5 3 2 3 9
6 3 3 4 10
7 1 2
8 1 4
9 1 5
10 1 6

10
1 4 4 5 7 9
2 1 8
3 4 4 7 8 10
4 3 1 3 9
5 2 1 9
6 2 8 9
7 4 1 3 8 9
8 5 2 3 6 7 9
9 7 1 4 5 6 7 8 10
10 2 3 9

1
1 0

2
1 1 2
2 1 1

3
1 1 2
2 2 1 3
3 1 2

5
1 2 2 4
2 3 1 3 4
3 1 2
4 3 2 5 1
5 1 4

<b>Output:</b>
5
3
0
1
2
3

</pre>



______________________________________________________
TREE||||||true||||||


<p style="text-align: justify;">Tree is an important data structure in Computer
Science. Of all trees we work with, Binary Tree is probably the most popular
one. A Binary Tree is called a <b>Strictly Binary Tree</b> if every nonleaf
node in a binary tree has nonempty left and right subtrees. Let us define <b>a
Strictly Binary Tree of depth d</b>, as a Strictly Binary Tree that has at
least one root to leaf path of length <b>d</b>, and no root to leaf path in
that tree is longer than <b>d</b>. So let us use a similar reasoning to
define a generalized structure. <span style=""><o:p></o:p></span></p>

<p style="text-align: justify;">An n-ary Tree is called a <b>Strictly n-ary Tree</b>
if every nonleaf node in an n-ary tree has n children each. A <b>Strictly
n-ary Tree of depth d</b> can now be defined as a Strictly n-ary Tree that
has at least one root to leaf path of length d, and no root to leaf path in
that tree is longer than d. </p>

<p style="text-align: justify;">Given the value of n and depth d, your task is to
find the number of different strictly n-ary trees of depth d. </p>

<p style="text-align: justify;">The figure below shows the 3 different strictly
binary trees of depth 2.</p>
<img src="http://www.spoj.pl/content/quanghuy:tree8jt.png">



*******InputConstraints*******

<p style='text-align: justify'>
Input consists
of several test cases. Each test case consists of two integers <b>n (0 < n
<= 32), d (0 <= d <= 16)</b>. Input is terminated a test case where
n=0 and d=0, you must not process this test case.</p>


*******OutputConstraints*******

<p style="margin: 0in 0in 0.0001pt; text-align: justify;">For each test
case, print three integers, n, d and the number of different strictly n-ary
trees of level d, in a single line. There will be a single space in between two
integers of a line. You can assume that you would not be asked about cases
where you had to consider trees that may have more than 2<sup>10</sup> nodes in
a level of the tree. You may also find it useful to know that the answer for
each test case will always fit in a 200 digit integer.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2 0
2 1
2 2
2 3
3 5
0 0

<b>Output:</b>
2 0 1
2 1 1
2 2 3
2 3 21
3 5 58871587162270592645034001
</pre>



______________________________________________________
NEG2||||||true||||||


<p>Inexperienced in the digital arts, the cows tried to build a calculating engine (yes, it's a cowmpouter) using binary numbers (base 2) but instead built one based on base negative 2!  They were quite pleased since numbers expressed in base -2 do not have a sign bit.
<p>
You know number bases have place values that start at 1 (base to the 0 power) and proceed right-to-left to base^1, base^2, and so on. In base -2, the place values are 1, -2, 4, -8, 16, -32, ... (reading from right to left). Thus, counting from 1 goes like this: 1, 110, 111, 100, 101, 11010, 11011, 11000, 11001, and so on.
<p>
Eerily, negative numbers are also represented with 1's and 0's but no sign. Consider counting from -1 downward: 11, 10, 1101, 1100, 1111, and so on.
<p>
Please help the cows convert ordinary decimal integers (range -2,000,000,000 .. 2,000,000,000) to their counterpart representation in base -2.


*******InputConstraints*******

<p>A single integer to be converted to base -2


*******OutputConstraints*******

<p>A single integer with no leading zeroes that is the input integer converted to base -2. The value 0 is expressed as 0, with exactly one 0.


*******IOTestCases*******


<pre>
<b>Input:</b>
-13

<b>Output:</b>
110111
</pre>



______________________________________________________
TRT||||||true||||||


<p>FJ has purchased N (1 <= N <= 2000) yummy treats for the cows who
get money for giving vast amounts of milk. FJ sells one treat per
day and wants to maximize the money he receives over a given period
time.
The treats are interesting for many reasons:
  </p>
<ul>
	<li> The treats are numbered 1..N and stored sequentially in single
    file in a long box that is open at both ends. On any day, FJ
    can retrieve one treat from either end of his stash of treats.
  </li>
	<li>Like fine wines and delicious cheeses, the treats improve with
    age and command greater prices.</li>
	<li>The treats are not uniform: some are better and have higher
    intrinsic value. Treat i has value v(i) (1 <= v(i) <= 1000).
  </li>
	<li>Cows pay more for treats that have aged longer: a cow will
    pay v(i)*a for a treat of age a.

	</li>
</ul>
<p>Given the values v(i) of each of the treats lined up in order of
the index i in their box, what is the greatest value FJ can receive
for them if he orders their sale optimally?

</p>
<p>The first treat is sold on day 1 and has age a=1. Each subsequent
day increases the age by 1.</p>

*******InputConstraints*******

<p>Line 1: A single integer, N</p>
<p>Lines 2..N+1: Line i+1 contains the value of treat v(i)</p>


*******OutputConstraints*******

<p>The maximum revenue FJ can achieve by selling the treats
*******IOTestCases*******


<pre>
<b>Input:</b>
5
1
3
1
5
2

<b>Output:</b>
43</pre>



______________________________________________________
STEAD||||||true||||||


<p>Farmer John's N (1 <= N <= 1000) cows each reside in one of B (1 <= B <= 20) 
barns which, of course, have limited capacity. Some cows really like their 
current barn, and some are not so happy. </p>
<p>FJ would like to rearrange the cows such that the cows are as equally happy 
as possible, even if that means all the cows hate their assigned barn. </p>
<p>Each cow gives FJ the order in which she prefers the barns. A cow's happiness 
with a particular assignment is her ranking of her barn. Your job is to find an 
assignment of cows to barns such that no barn's capacity is exceeded and the 
size of the range (i.e., one more than the positive difference between the the 
highest-ranked barn chosen and that lowest-ranked barn chosen) of barn rankings 
the cows give their assigned barns is as small as possible.</p>



*******InputConstraints*******

<p>Line 1: Two space-separated integers, N and B </p>
<p>Lines 2..N+1: Each line contains B space-separated integers which are exactly 
1..B sorted into some order. The first integer on line i+1 is the number of the 
cow i's top-choice barn, the second integer on that line is the number of the 
i'th cow's second-choice barn, and so on. </p>
<p>Line N+2: B space-separated integers, respectively the capacity of the first 
barn, then the capacity of the second, and so on. The sum of these numbers is 
guaranteed to be at least N.</p>


*******OutputConstraints*******

<p>One integer, the size of the minimum range of barn rankings the cows give 
their assigned barns, including the endpoints</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
6 4
1 2 3 4
2 3 1 4
4 2 3 1
3 1 2 4
1 3 4 2
1 4 2 3
2 1 3 2

<b>Output:</b>
2
</pre>



______________________________________________________
LPERMUT||||||true||||||


<p>You are given a sequence A of n integer numbers (1<=A<sub>i</sub><=n). A subsequence of A has the form A<sub>u</sub>, A<sub>u+1</sub> ... , A<sub>v</sub> (1<=u<=v<=n). We are interested in subsequences that are permutations of 1, 2, .., k (k is the length of the subsequence).
<p> Your task is to find the longest subsequence of this type.


*******InputConstraints*******

<p>
<ul>
<li> Line 1: n (1<=n<=100000)
<li> Line 2: n numbers A<sub>1</sub>, A<sub>2</sub>, ... ,A<sub>n</sub> (1<=A<sub>i</sub><=n)
</ul>


*******OutputConstraints*******

<p>A single integer that is the length of the longest permutation


*******IOTestCases*******


<pre>
<b>Input:</b>
5
4 1 3 1 2

<b>Output:</b>
3
</pre>


______________________________________________________
TEM||||||true||||||


<p> After many years of hard work a group of scientists developed a shiny new state-of-the-art processor with a 3D configuration. Due to the high clock frequency at which this processor works, the silicon cube uses up too much energy. Even with its powerful cooling system, the processor is unable to cope with the heat discharge in some of its cubical blocks. With the help of special analysis methods, scientists have developed the overheat rate for each of the cubical blocks of the system. As it conveniently happens, this overheat rate is an integer value, either positive or negative depending on many factors (such as the proximity of ventilators, refrigerators, etc.).<p>
Science can do no more, so now the developers of the processor need your support. For a given three-dimensional matrix representing the overheat rate of elements of the processor, you have to find a submatrix for which the sum of overheat rates coming from all its elements is maximal.</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 99], then t tests follow. <BR>
Each test begins with 3 integers: x, y, z &#8211; the width, length and height of matrix [5 <= x, y, z <= 50]. Then there follows the description of x rectangular 2D matrixes of height y and width z. In total there are x*y*z integers, which absolute value does not exceed 10000.
</p>


*******OutputConstraints*******

<p>For each test case you should output 6 integers: x1, y1, z1, x2, y2, z2, where each triple (xi, yi, zi) defines one of the two opposite corners of submatrix, resulting in the maximum overheat. [1 <= x1 <= x2 <= x] [1 <= y1 <= y2 <= y] [1 <= z1 <= z2 <= z]


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 5 5
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
-1 -1 -10 -1 -1
-1 -1 -10 -1 -1
-1 -1 -10 -1 -1
-1 -1 -10 -1 -1
-1 -1 -10 -1 -1
20 2 2 2 20
20 2 2 2 20
20 2 2 2 20
20 2 2 2 20
20 2 2 2 20
5 5 5 5 5
5 5 5 5 5
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
-10 10 -10 10 -10
-10 10 -10 10 -10
-10 10 -10 10 -10
-10 10 -10 10 -10
-10 10 -10 10 -10


<b>Output:</b>
3 1 1 4 5 5 

<b>Note:</b>
The maximum overheat for the example is equal to 295.
</pre>


______________________________________________________
CH3D||||||true||||||


<p>Bytelandian scientists have developed a brand new method for determining the volume of a person's lungs. The idea is simple: the patient is asked to inhale a sufficiently large number of nanobots, which then transmit their exact 3D-coordinates to an external sensor. Early clinical tests proved rather fun (especially for the scientists who were watching the process of nanobot inhalation), but gave rise to several problems of an algorithmic nature. In other words, nobody had any idea of how the volume of the lungs should be determined afterwards. A lung consists of a large number of disjoint alveoli (which can for our purposes be regarded as little hollows), and inhaled nanobots tend to float around aimlessly within the alveolus they happened to fall into. Whereas it is relatively simple to distinguish between different alveoli, establishing the volume of a single alveolus is a tough task.

<p>One way to estimate the shape and volume of an alveolus is to smear all nanobots with a little liquid glue and see what they end up stuck to. Another (arguably more humane) method is to calculate the <i>convex hull</i> of the set of points representing nanobot coordinates, its volume and surface area. A convex hull of given set of points in 3D is the convex set of minimum volume which contains all these points.
<BR>

<center><img src="http://www.spoj.pl/content/turbo:ch3d_lung1.jpg" alt="Lung 1"><BR>
<img src="http://www.spoj.pl/content/turbo:ch3d_arrow.jpg" alt="arrow"><BR> <img src="http://www.spoj.pl/content/turbo:ch3d_arrow.jpg" alt="Lung 2"><BR> 
<img src="http://www.spoj.pl/content/turbo:ch3d_arrow.jpg" alt="arrow"><BR> <img src="http://www.spoj.pl/content/turbo:ch3d_arrow.jpg" alt="Lung 3"></center>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 100], then <i>t</i> tests follow.<BR> Each test starts with integer <i>N</i> - the number of given points [10 <= N <= 1000]. Then exactly N lines follow with 3 real numbers Xi, Yi, Zi in each of them, where [-10.0 <= Xi, Yi, Zi <= 10.0].
</p>


*******OutputConstraints*******

<p>For each test case you should output 2 real numbers: the surface area and volume of the hull with precision 0.01.


*******IOTestCases*******

<pre>
<b>Input:</b>
1
10
0.00000 0.00000 0.00000
1.00000 0.00000 0.00000
0.00000 1.00000 0.00000
0.00000 0.00000 1.00000
1.00000 1.00000 0.00000
1.00000 0.00000 1.00000
0.00000 1.00000 1.00000
1.00000 1.00000 1.00000
0.50000 0.50000 0.50000
0.66666 0.77777 0.88888

<b>Output:</b>
6.0000 1.0000

</pre>



______________________________________________________
MIS||||||true||||||


<p> During the development of delay-noise analysis theory, scientists have come upon the following problem. After they had conducted experiments they found out that some of the nodes of the circuit couldn't switch at the same time. For example, if we know that node <i>N</i> switches from 0 to 1, then node <i>K</i> can&#8217;t switch at the same moment because of logical restrictions in circuit. Each node of the circuit injects some noise into neighboring nodes while switching, and this noise can be measured. Scientists now need some fast method to calculate the maximum delay-noise that can be injected by switching aggressor-nodes.
<p>
Scientists formalize the problem in the following way.
We consider a graph <i>G = (V, E, w)</i> consisting of vertex set <i>V</i>, edges se <img src="http://www.spoj.pl/content/turbo:mis_0002.gif" style="vertical-align:text-bottom">, and weight function <i>W</i>, such that <img src="http://www.spoj.pl/content/turbo:mis_0002.gif" style="vertical-align:text-bottom"> and <img src="http://www.spoj.pl/content/turbo:mis_0002.gif" style="vertical-align:middle">. For <img src="http://www.spoj.pl/content/turbo:mis_0002.gif" style="vertical-align:text-bottom"> and <img src="http://www.spoj.pl/content/turbo:mis_0002.gif" style="vertical-align:text-bottom">, <i>N(u)</i> and <i>N(K)</i> denotes the set of neighboring vertices of <i>u</i> and <i>K</i> accordingly, formally defined as:<BR>
<img src="http://www.spoj.pl/content/turbo:mis_0012.gif" style="vertical-align:text-bottom"><BR>
The set of vertices <img src="http://www.spoj.pl/content/turbo:mis_0010.gif" style="vertical-align:text-bottom"> satisfying <img src="http://www.spoj.pl/content/turbo:mis_0010.gif" style="vertical-align:text-bottom"> is called <i>internally stable</i>. In this problem you should find a set of internally stable vertices <i>B</i> such that <i>w(B) = max{w(S)}</i>, taken over all internally stable sets <i>S</i>  of the given graph <i>G</i>.

<p>Experiments have shown that the density of edges in considered graphs is between 20% and 90%.
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 60]<BR>
<i>n k</i> &#8211; [<i>n</i> &#8211; number of vertices (2 <= <i>n</i> <= 250), <i>k</i> &#8211; number of edges (1 <= <i>k</i> <= <i>n*(n-1)/2</i>)]<BR>
then <i>n</i> integers follow (<i>wi</i> - weight of vertex <i>i</i>) [ 0 <= <i>wi</i> <= 2^31-1]<BR>
then <i>k</i> pairs of integers follow, representing the edges between vertices (<i>si sj</i> denotes an edge between vertices <i>i</i> and <i>j</i>) [1 <= <i>si, sj</i> <= <i>n</i>]. It is known that the total weight of all vertices in the graph doesn't exceed 10^9.</p>


*******OutputConstraints*******

<p> For each test case output <i>MaxWeight</i> &#8211; the weight of a maximum internally stable set of the given graph [ 0 <= <i>MaxWeight</i> <= 10^9]. </p>


*******IOTestCases*******


<pre>
<b>Input :</b>
2
5 6
10 20 30 40 50
1 2
1 5
2 3
3 4
3 5
4 5

4 4
10 4 10 14
1 2
2 3
3 4
4 1

<b>Output :</b>
70
20

<b>Example illustrations:</b><BR>
<img src="http://www.spoj.pl/content/turbo:mis_0016.gif">
</pre>


______________________________________________________
ARCHPLG||||||true||||||


Byteland is a country located in the Archipelago of Rectangular Islands. The archipelago consists of <tt>1<=n<=1000</tt> islands. A fact that each island has a rectangular shape is very nice for Bytelandian cartographers. 
<p>

<p>
Bytelandian islands are rather small and none are very fertile, so each of (rectangular of course) pieces of cultivated land is under special control, simply speaking: &#8216;never enter there to save your life&#8217;. Other areas are guaranteed to be free accessible for the people.

<p>
The communication between islands is possible by ferries. On each island there is <tt>0<=b<=10</tt> terminals, from where crossings to another terminals on other islands are possible. 
It is known that total number of crossing connections is <tt>0<=m<=100000</tt>. Other infrastructure is practically unknown. Specifically the only possible 
way of traveling through  the island is to do it on foot. 

<p>
Well, now we are close to a task you are requested to solve. John &#8211; one of the Bytelandian citizens is working as a sales manager. Simply speaking he is often requested to travel from one place to another, what he rather dislike and preferably (like other Bytelandian people use to do) he would like to spent more time in one of the
beach clubs playing Puto (a kind of strategic game, very popular in Byteland). Please help him to find a way to spare his time.

<h3>Task</h3>
<p> Find one of the fastest ways for John using ferries and foot paths on islands. Assume that while walking John is always moving one BM (Bytelandian unit of length) per BH  (Bytelandian unit of time). 
You can also assume that the ferry departures nearly immediately after John arrives the terminal, it will be enough to round up the walking time to the nearest integer.


*******InputConstraints*******

<p>In the first  line <tt>t</tt> - the number of tests, then for each test:
in next line <tt>n</tt> - the number of islands. Description of each island is as follows:
<pre>
name
w h [island dimensions]
b - [number of terminals]
[description of each terminal in a form:]
name x y [name of a terminal and its coordinates]
F [number of restricted areas F<20]
xl, yd, xr, yu [coordinates of each restricted area,
0 <=xl < xr<=250 0<=yd < yu<=250.]
</pre>
<p>
All coordinates are nonnegative integers measured in BM according to upper left corner of an island.

<p>
You can assume that any two restricted areas are disjoint. After the description of all islands all ferry connections are given (each connection is bi-directional). 
<pre>
m  [number of connections]
[description of each connection]
NB1 NW1 NB2 NW2 time [name of a first terminal, its island, the second respectively
and communiaction time]
...
[description follows]
...
NBS NWS NBC NWC [start and goal terminal for John]
</pre>


*******OutputConstraints*******

<p>
For each test describe the shortest route for John from terminal NBS on NWS island to terminal  NBC on NWC island in the following format:
<pre>
case nr Y [nr - test number]
T [travel time in BH]
NBS  NWS
...
[consecutive terminals]
...
NBC NWC
[empty line]
[consecutive tests]
</pre>
<p>
If two consecutive terminals are located on the same island and John must take some walk you must give all middle point like in an example.

<p>
<IMG SRC="/content/kuszi:trectarch_example.png" width="100%">



*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
W1
8 7
2
Lindos 4 0
Kamejros 4 7
3
2 1 6 2
2 3 6 4 
2 5 6 6 
W2
14 12
2
Malia 14 1
Knossos 1 12
5
2 6 10 10
11 1 12 6
8 1 10 5
11 7 12 9
3 2 5 4
W3 
1 1
1
Korkyra 0 0
0
2
Kamejros W1 Knossos W2 100
Malia W2 Korkyra W3 100
Korkyra W3 Lindos W1
</pre>
<p>
An example of a correct answer:
<pre>
<b>Output:</b>
case 1 Y
230
Korkyra W3
Malia W2
12 6
11 7
10 10
Knossos W2
Kamejros W1
2 6
2 1
Lindos W1
</pre>



______________________________________________________
TRIOPT||||||true||||||


<p>
Many problems arising in practical applications may be stated as <i>optimization problems</i>. Usually it is necessary to maximize or minimize so called <i>criterion function</i> taking into account some <i>constraints</i>.

<p>
Let&#8217;s consider a trigonometric optimization problem. It is necessary to maximize or to minimize criterion function <b>F<sub>1</sub>(x) + F<sub>2</sub>(y) + F<sub>3</sub>(z)</b> with constraint <b>x + y + z = S</b>, where <b>x</b>, <b>y</b>, <b>z</b> &#8211; variables, <b>S</b> &#8211; parameter, <b>x</b>, <b>y</b>, <b>z</b>, <b>S</b> - natural numbers.  Each of the functions <b>F<sub>1</sub></b>, <b>F<sub>2</sub></b> and <b>F<sub>3</sub></b> is a trigonometric function <b><i>sin</i></b> or <b><i>cos</i></b>.

<p>
You need to write a program which solves the <i>trigonometric optimization</i> problem.


*******InputConstraints*******

<p>
The first line of the input data contains integer <b>T</b> (1 &#8804; <b>T</b> &#8804; 65) - the number of testcases. Then the descriptions of <b>T</b> testcases follow.
<p>
The description of each testcase consists of <i>5</i> lines. The first line describes function <b>F<sub>1</sub></b> and contains either <b>sin</b> or <b>cos</b>. The second and the third lines describe functions <b>F<sub>2</sub></b> and <b>F<sub>3</sub></b> respectively and have the same format as the first line. Next, the fourth line contains either <b>min</b> or <b>max</b>. If the line contains <b>min</b> than it is necessary to minimize <i>criterion function</i>, otherwise it is necessary to maximize <i>criterion function</i>. Finally, the fifth line contains parameter <b>S</b> value (3 &#8804; <b>S</b> &#8804; 1 000 000).


*******OutputConstraints*******

<p>For each testcase you should output one line into the output data. This line should contain one real number &#8211; the found value of the <i>criterion function</i>. Absolute error of your answer must not exceed <b>10<sup>-10</sup></b>.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
sin
cos
sin
max
10

<b>Output:</b>
2.7787651403
</pre>



______________________________________________________
OPTM||||||true||||||


<p>
<p>You are given an undirected graph G(V, E). Each vertex has a mark which is an integer from the range [0..2<sup>31</sup> &#8211; 1]. Different vertexes may have the same mark.</p>

<p>For an edge (u, v), we define Cost(u, v) = mark[u] xor mark[v].</p>

<p>Now we know the marks of some certain nodes. You have to determine the marks of other nodes so that the total cost of edges is as small as possible.</p>
</p>


*******InputConstraints*******

<p>The first line of the input data contains integer <b>T</b> (1 &#8804; <b>T</b> &#8804; 10) - the number of testcases. Then the descriptions of T testcases follow.</p>

<p>First line of each testcase contains 2 integers <b>N</b> and <b>M</b> (0 < <b>N</b> <= 500, 0 <= <b>M</b> <= 3000). <b>N</b> is the number of vertexes and <b>M</b> is the number of edges. Then <b>M</b> lines describing edges follow, each of them contains two integers u, v representing an edge connecting u and v.</p>

<p>Then an integer <b>K</b>, representing the number of nodes whose mark is known. The next <b>K</b> lines contain 2 integers u and p each, meaning that node u has a mark p. It&#8217;s guaranteed that nodes won&#8217;t duplicate in this part.</p>


*******OutputConstraints*******

<p>For each testcase you should print <b>N</b> lines integer the output. The <b>K</b>th line contains an integer number representing the mark of node <b>K</b>. If there are several solutions, you have to output the one which minimize the sum of marks. If there are several solutions, just output any of them.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 2
1 2
2 3
2
1 5
3 100

<b>Output:</b>
5
4
100 
</pre>



______________________________________________________
WM06||||||true||||||


<p>
Mr. Bitmann, the coach of the national soccer team of Bitland, is a
perfectionist. He taught  his players optimal tactics and
improved their endurance and shape. So they qualified  for
the soccer woldcup this year.
Due to his perfectionism the coach attaches importance not only
to the performance in the game but also before the game.
 So he told the team captain in what formation the team should assemble before the national anthem is played.
 Since each of the 11 team members has a unique number between 1 and 11
 on his shirt, he can represent the formation as a permutation of  numbers.      
 <p>
 Before the first game the coach told  the captain that the team  
 should  line up  in increasing order (picture (d)). But
 some players forgot the ordering and the orientation of the formation like
 in picture (a). Only player 1 has the right orientation.
 The coach went nearly mad when he saw this desaster!
 How could he solve the problem?

<p style="text-align:center;">
<img src="http://www.spoj.pl/content/sgog:wm06.png" alt="scenario example">
<p>
 "Hmmm... I'll let my players dance!". A great idea!
            

He took his notebook and started to create a choreography which leads to   
his expected formation. Due to the fact that no one of the  players took dancing lessons he   
restricts his dance to one basic move: 
One player or more players who stand side by side can turn 180 degrees
 around the center of the move. Picture (b) contains an example: The
 players <pre style="text-align:center;">-11 -10 -9 -2</pre> <p align="justify">(we mark players which stand in the wrong direction with
 a minus) can do one move to <pre style="text-align:center;">2 9 10 11</pre>
<p align="justify">
As perfect as he is he calculated a dance with a minimum number of moves.
It works perfectly and now he's planning to do dancing performances                     
with teams with more than 11 members. So he needs your help
to find optimal dancing moves...


*******InputConstraints*******

<p>Each testcase starts with the number of team members n (0<=n< 2200).
The next lines represent the formation at the beginning and
the expected formation at the end of the choreography.

*******OutputConstraints*******

<p>
For each testcase output m, the minimal number of moves which are necessary
 to reach the expected formation. The next m+1 lines should
 represent one possible scenario of moves.

*******IOTestCases*******


<pre>
<b>Input:</b>
11
-5 -4 -3 -8 -7 -6 1 -11 -10 -9 -2
1 2 3 4 5 6 7 8 9 10 11
11
1 2 3 -4 -5 -6 -7 -8 -9 10 11
11 9 8 7 6 5 4 3 2 10 1
0

<b>Output:</b>
3 Steps
-5 -4 -3 -8 -7 -6 +1 -11 -10 -9 -2
-5 -4 -3 -8 -7 -6 +1 +2 +9 +10 +11
-5 -4 -3 -2 -1 +6 +7 +8 +9 +10 +11
+1 +2 +3 +4 +5 +6 +7 +8 +9 +10 +11
5 Steps
+1 +2 +3 -4 -5 -6 -7 -8 -9 +10 +11
+1 +2 -3 -4 -5 -6 -7 -8 -9 +10 +11
+1 -2 -3 -4 -5 -6 -7 -8 -9 +10 +11
+1 -2 -3 -4 -5 -6 -7 -8 -9 -11 -10
+11 +9 +8 +7 +6 +5 +4 +3 +2 -1 -10
+11 +9 +8 +7 +6 +5 +4 +3 +2 +10 +1
</pre>



______________________________________________________
SWAPS||||||true||||||


<p>You are given a sequence A of <b>N</b> (<b>N</b>&#8804;250000) integers between 1 and 50000. On this sequence you have to apply <b>M</b> (<b>M</b>&#8804;10000) operations of the form: modify the i-th element in the sequence and then say how many inversions are there in the sequence. The number of inversions in a sequence is given by the number of pairs (i,j) with i < j and Ai > Aj.


*******InputConstraints*******

<p>The first line of input contains the number <b>N</b> and the next line contains the numbers that form the sequence. After that follows the number <b>M</b> and then <b>M</b> lines, each containig 2 integers X and Y, meaning that new value of the X-th element of the sequence is Y and that you should count the number of inversions in the modified sequence.


*******OutputConstraints*******

<p>Output must contain <b>M</b> lines, the i-th line of output containg the number of inversions in the sequence after the first i operations.


*******IOTestCases*******


<pre>
<b>Input:</b>
10
2 6 6 4 7 6 3 5 9 1 
7
8 8
5 1
5 6
10 5
7 1
10 10
4 6

<b>Output:</b>
17
18
16
13
14
8
6

</pre>



______________________________________________________
DNA||||||false||||||

<P>Deoxyribonucleic acid (DNA) is composed of a sequence of nucleotide
bases paired together to form a double-stranded helix structure.
Through a series of complex biochemical processes the nucleotide
sequences in an organism's DNA are translated into the proteins it
requires for life.  The object of this problem is to write a computer
program which accepts a DNA strand and reports the protein generated,
if any, from the DNA strand. 

<P>The nucleotide bases from which DNA is built are adenine, cytosine,
guanine, and thymine (hereafter referred to as A, C, G, and T,
respectively).  These bases bond together in a chain to form half of a
DNA strand.  The other half of the DNA strand is a similar chain, but
each nucleotide is replaced by its complementary base.  The bases A
and T are complementary, as are the bases C and G.  These two
"half-strands" of DNA are then bonded by the pairing of the
complementary bases to form a strand of DNA. 

<P>Typically a DNA strand is listed by simply writing down the bases
which form the primary strand (the complementary strand can always be
created by writing the complements of the bases in the primary
strand).  For example, the sequence TACTCGTAATTCACT represents a DNA
strand whose complement would be ATGAGCATTAAGTGA.  Note that A is
always paired with T, and C is always paired with G. 

<P>From a primary strand of DNA, a strand of ribonucleic acid (RNA) known
as messenger RNA (mRNA for short) is produced in a process known as
transcription.  The transcribed mRNA is identical to the complementary
DNA strand with the exception that thymine is replaced by a nucleotide
known as uracil (hereafter referred to as U).  For example, the mRNA
strand for the DNA in the previous paragraph would be AUGAGCAUUAAGUGA. 

<P>It is the sequence of bases in the mRNA which determines the protein
that will be synthesized.  The bases in the mRNA can be viewed as a
collection of codons, each codon having exactly three bases.  The
codon AUG marks the start of a protein sequence, and any of the codons
UAA, UAG, or UGA marks the end of the sequence.  The one or more
codons between the start and termination codons represent the sequence
of amino acids to be synthesized to form a protein.  For example, the
mRNA codon AGC corresponds to the amino acid serine (Ser), AUU
corresponds to isoleucine (Ile), and AAG corresponds to lysine (Lys).
So, the protein formed from the example mRNA in the previous paragraph
is, in its abbreviated form, Ser-Ile-Lys.  

<P>The complete genetic code from which codons are translated into amino
acids is shown in the table below (note that only the amino acid
abbreviations are shown).  It should also be noted that the sequence
AUG, which has already been identified as the start sequence, can also
correspond to the amino acid methionine (Met).  So, the first AUG in a
mRNA strand is the start sequence, but subsequent AUG codons are
translated normally into the Met amino acid. 

<P>
<CENTER>

<TABLE border>

<TD ROWSPAN=2><I>First base in codon</I>
<TD COLSPAN=4 ALIGN=center><I>Second base in codon</I>
<TD ROWSPAN=2 ALIGN=center><I>Third base in codon</I>
<TR>

<TD><B>U</B><TD><B>C</B><TD><B>A</B><TD><B>G</B><TR>

<TD ROWSPAN=4><B>U</B>
<TD>Phe<TD>Ser<TD>Tyr<TD>Cys<TD ALIGN=center><B>U</B><TR>
<TD>Phe<TD>Ser<TD>Tyr<TD>Cys<TD ALIGN=center><B>C</B><TR>
<TD>Leu<TD>Ser<TD>---<TD>---<TD ALIGN=center><B>A</B><TR>
<TD>Leu<TD>Ser<TD>---<TD>Trp<TD ALIGN=center><B>G</B><TR>

<TD ROWSPAN=4><B>C</B>
<TD>Leu<TD>Pro<TD>His<TD>Arg<TD ALIGN=center><B>U</B><TR>
<TD>Leu<TD>Pro<TD>His<TD>Arg<TD ALIGN=center><B>C</B><TR>
<TD>Leu<TD>Pro<TD>Gln<TD>Arg<TD ALIGN=center><B>A</B><TR>
<TD>Leu<TD>Pro<TD>Gln<TD>Arg<TD ALIGN=center><B>G</B><TR>

<TD ROWSPAN=4><B>A</B>
<TD>Ile<TD>Thr<TD>Asn<TD>Ser<TD ALIGN=center><B>U</B><TR>
<TD>Ile<TD>Thr<TD>Asn<TD>Ser<TD ALIGN=center><B>C</B><TR>
<TD>Ile<TD>Thr<TD>Lys<TD>Arg<TD ALIGN=center><B>A</B><TR>
<TD>Met<TD>Thr<TD>Lys<TD>Arg<TD ALIGN=center><B>G</B><TR>

<TD ROWSPAN=4><B>G</B>
<TD>Val<TD>Ala<TD>Asp<TD>Gly<TD ALIGN=center><B>U</B><TR>
<TD>Val<TD>Ala<TD>Asp<TD>Gly<TD ALIGN=center><B>C</B><TR>
<TD>Val<TD>Ala<TD>Glu<TD>Gly<TD ALIGN=center><B>A</B><TR>
<TD>Val<TD>Ala<TD>Glu<TD>Gly<TD ALIGN=center><B>G</B><TR>

</TABLE>

</CENTER>

<P> The input for this program consists of strands of DNA sequences, one
strand per line, from which the protein it generates, if any, should
be determined and output.  The given DNA strand may be either the
primary or the complementary DNA strand, and it may appear in either
forward or reverse order, and the start and termination sequences do
not necessarily appear at the ends of the strand.  For example, a
given input DNA strand to form the protein Ser-Ile-Lys could be any of
ATACTCGTAATTCACTCC, CCTCACTTAATGCTCATA, TATGAGCATTAAGTGAGG, or
GGAGTGAATTACGAGTAT.  The input file will be terminated by a line
containing a single asterisk character. 

<P>You may assume the input to contain only valid, upper-case, DNA
nucleotide base letters (A, C, G, and T).  No input line will exceed
255 characters in length.  There will be no blank lines or spaces in
the input.  Some sequences, though valid DNA strands, do not produce
valid protein sequences; the string "*** No translatable DNA found
***" should be output when an input DNA strand does not translate
into a valid protein. <P>


<PRE>
<b>Input:</b>

ATACTCGTAATTCACTCC
CACCTGTACACAGAGGTAACTTAG
TTAATACGACATAATTAT
GCCTTGATATGGAGAACTCATTAGATA
AAGTGTATGTTGAATTATATAAAACGGGCATGA
ATGATGATGGCTTGA
*
</PRE>

<PRE>
<b>Output:</b>

Ser-Ile-Lys
Cys-Leu-His
Ser-Tyr
*** No translatable DNA found ***
Leu-Asn-Tyr-Ile-Lys-Arg-Ala
Met-Met-Ala
</PRE>


______________________________________________________
CUBES||||||false||||||

<P>

For hundreds of years Fermat's Last Theorem, which stated simply that
for <I>n</I> > 2 there exist no integers <I>a</I>, <I>b</I>, <I>c</I>
> 1 such that <I>a</I>^<I>n</I> = <I>b</I>^<I>n</I> +
<I>c</I>^<I>n</I>, has remained elusively unproven.  (A recent proof
is believed to be correct, though it is still undergoing scrutiny.)
It <I>is</I> possible, however, to find integers greater than 1 that
satisfy the "perfect cube" equation <I>a</I>^3 = <I>b</I>^3 +
<I>c</I>^3 + <I>d</I>^3 (e.g. a quick calculation will show that the
equation 12^3 = 6^3 + 8^3 + 10^3 is indeed true).  This problem
requires that you write a program to find all sets of numbers
{<I>a</I>,<I>b</I>,<I>c</I>,<I>d</I>} which satisfy this equation for
<I>a</I> <= 100. <P>

The output should be listed as shown below, one perfect cube per line,
in non-decreasing order of a (i.e. the lines should be sorted by their
<I>a</I> values).  The values of <I>b</I>, <I>c</I>, and <I>d</I>
should also be listed in non-decreasing order on the line itself.
There do exist several values of <I>a</I> which can be produced from
multiple distinct sets of <I>b</I>, <I>c</I>, and <I>d</I> triples.
In these cases, the triples with the smaller <I>b</I> values should be
listed first.  <P>

Note that the programmer will need to be concerned with an efficient
implementation.  The official time limit for this problem is 2
minutes, and it is indeed possible to write a solution to this
problem which executes in under 2 minutes on a 33 MHz 80386 machine.
Due to the distributed nature of the contest in this region, judges
have been instructed to make the official time limit at their site the
greater of 2 minutes or twice the time taken by the judge's solution
on the machine being used to judge this problem. <P>

The first part of the output is shown here: <P>

<PRE>
Cube = 6, Triple = (3,4,5)
Cube = 12, Triple = (6,8,10)
Cube = 18, Triple = (2,12,16)
Cube = 18, Triple = (9,12,15)
Cube = 19, Triple = (3,10,18)
Cube = 20, Triple = (7,14,17)
Cube = 24, Triple = (12,16,20)
</PRE>


______________________________________________________
IMPORT||||||false||||||

<P>

With the introduction of the new ThrustoZoom gigadimensional drive, it
has become possible for HyperCommodities, the import/export
conglomerate from New Jersey, to begin trading with even the most
remote galaxies in the universe.  HyperCommodities wants to import
goods from some of the galaxies in the Plural Z sector.  Planets
within these galaxies export valuable products and raw materials like
vacuuseal, transparent aluminum, digraphite, and quantum steel.
Preliminary reports have revealed the following facts: <P>

<UL>

<LI> Each galaxy contains at least one and at most 26 planets.  Each
planet within a galaxy is identified by a unique letter from A to Z. <P>

<LI> Each planet specializes in the production and export of one good.
Different planets within the same galaxy export different goods. <P>

<LI> Some pairs of planets are connected by hyperspace shipping lines.
If planets A and B are connected, they can trade goods freely.  If
planet C is connected to B but not to A, then A and C can still trade
goods with each other through B, but B keeps 5% of the shipment as a
shipping fee.  (Thus A only receives 95% of what C shipped, and C
receives only 95% of what A shipped.) In general, any two planets can
trade goods as long as they are connected by some set of shipping
lines, but each intermediate planet along the shipping route keeps 5%
of what it shipped (which is not necessarily equal to 5% of the
original shipment). <P>

<LI> At least one planet in each galaxy is willing to open a
ThrustoZoom shipping line to Earth.  A ThrustoZoom line is the same as
any other shipping line within the galaxy, as far as business is
concerned.  For example, if planet K opens a ThrustoZoom line to
Earth, then the Earth can trade goods freely with K, or it can trade
goods with any planet connected to K, subject to the usual shipping
fees. <P>

</UL>
     
HyperCommodities has assigned a relative value (a positive real number
less than 10) to each planet's chief export.  The higher the number,
the more valuable the product.  More valuable products can be resold
with a higher profit margin in domestic markets.  The problem is to
determine which planet has the most valuable export when shipping fees
are taken into account. <P>

The input consists of one or more galaxy descriptions.  Each galaxy
description begins with a line containing an integer <I>N</I> which
specifies the number of planets in the galaxy.  The next <I>N</I> lines
contain descriptions of each planet, which consist of: <P>

<OL>
<LI> The letter used to represent the planet. <P>
<LI> A space. <P>
<LI> The relative value of the planet's export, in the form <I>d.dd</I>. <P>
<LI> A space. <P>
<LI> A string containing letters and/or the character `*'; a letter
indicates a shipping line to that planet, and a `*' indicates a
willingness to open a ThrustoZoom shipping line to Earth. <P>
</OL>

For each galaxy description, output a single line which reads "Import
from P" where P is the letter of the planet with the most valuable
export, once shipping fees have been taken into account.  (If more
than one planet have the same most valuable export value then output
the plant which is alphabetically first). <P>

A sample input file is shown here: <P>

<PRE>
1
F 0.81 *
5
E 0.01 *A
D 0.01 A*
C 0.01 *A
A 1.00 EDCB
B 0.01 A*
10
S 2.23 Q*
A 9.76 C
K 5.88 MI
E 7.54 GC
M 5.01 OK
G 7.43 IE
I 6.09 KG
C 8.42 EA
O 4.55 QM
Q 3.21 SO
</PRE>

<p> The following output file should be produced from the above sample input:

<PRE>
Import from F
Import from A
Import from A
</PRE>


______________________________________________________
BASE||||||false||||||

<P>

The Really Neato Calculator Company, Inc. has recently hired your team
to help design their Super Neato Model I calculator.  As a computer
scientist you suggested to the company that it would be neato if this
new calculator could convert among number bases.  The company thought
this was a stupendous idea and has asked your team to come up with the
prototype program for doing base conversion.  The project manager of
the Super Neato Model I calculator has informed you that the
calculator will have the following neato features: <P>

<UL>
<LI> It will have a 7-digital display.
<LI> Its buttons will include the capital letters A through F in addition
to the digits 0 through 9.
<LI> It will support bases 2 through 16.
</UL>

The input for your prototype program will consist of one base
conversion per line.  There will be three numbers per line.  The first
number will be the number in the base you are converting from.  The
second number is the base you are converting from.  The third number
is the base you are converting to.  There will be one or more blanks
surrounding (on either side of) the numbers.  There are several lines
of input and your program should continue to read until the end of
file is reached. <P>

The output will only be the converted number as it would appear on the
display of the calculator.  The number should be right justified in
the 7-digit display.  If the number is to large to appear on the
display, then print ``ERROR'' (without the quotes) right justified in
the display. <P>

A sample input file is shown here: <P>

<PRE>
1111000  2 10
1111000  2 16
2102101  3 10
2102101  3 15
  12312  4  2
     1A 15  2
1234567 10 16
   ABCD 16 15
</PRE>

<p>The following output file should be produced from the above sample
input: <P>


<PRE>
    120
     78
   1765
    7CA
  ERROR
  11001
 12D687
   D071
</PRE>


______________________________________________________
SEQUENCE||||||false||||||

<P>

Cryptographic analysis makes extensive use of the frequency with which
letters and letter sequences occur in a language.  If an encrypted
text is known to be in english, for example, a great deal can be
learned from the fact that the letters E, L, N, R, S, and T are the
most common ones used in written english.  Even more can be learned if
common letter pairs, triplets, etc. are known. <P>

For this problem you are to write a program which accepts as input a
text file of unspecified length and performs letter sequence analysis
on the text.  The program will report the five most frequent letter
sequences for each set of sequences from one to five letters.  That is
it will report the individual characters which occur with the five
highest frequencies, the pairs of characters which occur with the five
highest frequencies, and so on up to the letter sequences of five
characters which occur with the five highest frequencies. <P>

The program should consider contiguous sequences of alphabetic
characters only, and case should be ignored (e.g. an `a' is the same
as an `A').  A report should be produced using the format shown in the
example at the end of this problem description.  For each sequence
length from one to five, the report should list the sequences in
descending order of frequency.  If there are several sequences with
the same frequency then all sequences should be listed in alphabetical
order as shown (list all sequences in upper case).  Finally, if there
are less than five distinct frequencies for a particular sequence
length, simply report as many distinct frequency lists as possible. <P>

When a text file containing simply the line ``Peter Piper Picks
Pickles!'' is used as input, the output should appear as shown here: <P>

<PRE>
Analysis for Letter Sequences of Length 1
-----------------------------------------
Frequency = 5, Sequence(s) = (P)
Frequency = 4, Sequence(s) = (E)
Frequency = 3, Sequence(s) = (I)
Frequency = 2, Sequence(s) = (C,K,R,S)
Frequency = 1, Sequence(s) = (L,T)

Analysis for Letter Sequences of Length 2
-----------------------------------------
Frequency = 3, Sequence(s) = (PI)
Frequency = 2, Sequence(s) = (CK,ER,IC,PE)
Frequency = 1, Sequence(s) = (ES,ET,IP,KL,KS,LE,TE)

Analysis for Letter Sequences of Length 3
-----------------------------------------
Frequency = 2, Sequence(s) = (ICK,PIC)
Frequency = 1, Sequence(s) = (CKL,CKS,ETE,IPE,KLE,LES,PER,PET,PIP,TER)

Analysis for Letter Sequences of Length 4
-----------------------------------------
Frequency = 2, Sequence(s) = (PICK)
Frequency = 1, Sequence(s) = (CKLE,ETER,ICKL,ICKS,IPER,KLES,PETE,PIPE)

Analysis for Letter Sequences of Length 5
-----------------------------------------
Frequency = 1, Sequence(s) = (CKLES,ICKLE,PETER,PICKL,PICKS,PIPER)
</PRE>

When the first three paragraphs of this problem description are used
as input, the output should appear as shown here: <P>

<PRE>
Analysis for Letter Sequences of Length 1
-----------------------------------------
Frequency = 201, Sequence(s) = (E)
Frequency = 112, Sequence(s) = (T)
Frequency = 96, Sequence(s) = (S)
Frequency = 90, Sequence(s) = (R)
Frequency = 84, Sequence(s) = (N)

Analysis for Letter Sequences of Length 2
-----------------------------------------
Frequency = 37, Sequence(s) = (TH)
Frequency = 33, Sequence(s) = (EN)
Frequency = 27, Sequence(s) = (HE)
Frequency = 24, Sequence(s) = (RE)
Frequency = 23, Sequence(s) = (NC)

Analysis for Letter Sequences of Length 3
-----------------------------------------
Frequency = 24, Sequence(s) = (THE)
Frequency = 21, Sequence(s) = (ENC,EQU,QUE,UEN)
Frequency = 12, Sequence(s) = (NCE,SEQ,TER)
Frequency = 9, Sequence(s) = (CES,FRE,IVE,LET,REQ,TTE)
Frequency = 8, Sequence(s) = (ETT,FIV)

Analysis for Letter Sequences of Length 4
-----------------------------------------
Frequency = 21, Sequence(s) = (EQUE,QUEN)
Frequency = 20, Sequence(s) = (UENC)
Frequency = 12, Sequence(s) = (ENCE,SEQU)
Frequency = 9, Sequence(s) = (FREQ,NCES,REQU)
Frequency = 8, Sequence(s) = (ETTE,FIVE,LETT,TTER)

Analysis for Letter Sequences of Length 5
-----------------------------------------
Frequency = 21, Sequence(s) = (EQUEN)
Frequency = 20, Sequence(s) = (QUENC)
Frequency = 12, Sequence(s) = (SEQUE,UENCE)
Frequency = 9, Sequence(s) = (ENCES,FREQU,REQUE)
Frequency = 8, Sequence(s) = (ETTER,LETTE)
</PRE>


______________________________________________________
MARKUP||||||false||||||

<P>

Mark-up languages are computer languages that assist in the formatting
of text files.  Special keywords are used to mark the text to allow
control of fonts, page styles, paragraph styles, etc.  TeX, troff,
and HTML are examples of mark-up languages. <P>

Spell checking can be difficult to adapt to these special texts.  In
general, special processors or spell checkers must be created in order
to accommodate mark-up languages.  A special processor would recognize
the mark-up language and strip it from the text so that the ``plain''
text could then be processed by a spell checker.  For this problem,
you are to write such a processor for a small mark-up language so
that the output of your program will be the plain text without the
mark-ups. <P>

The mark-up language to consider is one which allows the modification
of fonts within the text.  Each markup command will be preceded by a
<SAMP>\</SAMP> character.  If the letter following the <SAMP>\</SAMP>
character is not a recognized command from the table below then the
character following the <SAMP>\</SAMP> is printed as part of the plain
text.  For instance, the mark-up <SAMP>\\</SAMP> can be used to print
a single <SAMP>\</SAMP>. <P>

<TABLE CELLSPACING=5>

<TD> 
<TD VALIGN=baseline><PRE>\b</PRE>
<TD> 
<TD VALIGN=baseline>toggle bold font on/off (default state is off)
<TR>

<TD> 
<TD VALIGN=baseline><PRE>\i</PRE>
<TD> 
<TD VALIGN=baseline>toggle italics font on/off (default state is off)
<TR>

<TD> 
<TD VALIGN=baseline><PRE>\s</PRE>
<TD> 
<TD VALIGN=baseline>set font size; the s is immediately followed by an
optional number; if the number is missing then the command will
restore the previous size
<TR>

<TD> 
<TD VALIGN=baseline><PRE>\*</PRE>
<TD> 
<TD VALIGN=baseline>toggle processing of mark-ups on/off; if
processing is toggle off then mark-ups are considered to be literal
text (default state is on)
<TR>

</TABLE>

The number following the <SAMP>\s</SAMP> command can have a decimal
point so 12, 9.5, 11., and .5 should all be recognized as valid
numbers. <P>

The input file will be plain text containing mark-ups from the
language above.  At the start, processing of mark-ups should be on.
The file should be processed until the end-of-file is encountered. <P>

A sample input file is shown here: <P>

<PRE>
\s18.\bMARKUP sample\b\s

\*For bold statements use the \b command.\*

If you wish to \iemphasize\i something use the \\i command.

For titles use \s14BIG\s font sizes, 14 points usually works well.

Remember that all of the commands toggle except for the \\s command.
</PRE>

<p>The following output file should be produced from the above sample input: <P>

<PRE>
MARKUP sample

For bold statements use the \b command.

If you wish to emphasize something use the \i command.

For titles use BIG font sizes, 14 points usually works well.

Remember that all of the commands toggle except for the \s command.
</PRE>


______________________________________________________
TRANSMIT||||||false||||||

<P>
In a wireless network with multiple transmitters sending on the same
frequencies, it
is often a requirement that signals don't overlap, or at least that they don't
conflict. One way of accomplishing this is to restrict a transmitter's coverage
area. This problem uses a shielded transmitter that 
only broadcasts in a semicircle.
</P>
<P>
A transmitter <I>T</I> is located somewhere on a 1,000 square meter grid.
It broadcasts in a semicircular area of radius <I>r</I>. The
transmitter may be rotated any amount, but not moved. 
Given <I>N</I> points anywhere on the grid, compute
the maximum number of points that can be simultaneously reached by the
transmitter's signal.
Figure 1 shows the
same data points with two different transmitter rotations.

</P>

<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/wanderley:transmit.gif"></center>

<P>
All input coordinates are integers (0-1000). The radius is a
positive real number greater than 0.
Points on the boundary of a semicircle are considered within that
semicircle.  There are 1-150 unique points to examine per transmitter.
No points are at the same location as the transmitter.
</P>

<P>
Input consists of information for one or more independent transmitter problems.
Each problem begins with
one line containing the (x,y) coordinates of the transmitter followed by the
broadcast radius, <I>r</I>.
The next line contains the number of points <I>N</I> on the grid,
followed by <I>N</I> sets of (x,y) coordinates, one
set per line.  The end of the input is signalled by a line with a
negative radius; the (x,y) values will be present but indeterminate.
Figures 1 and 2 represent the data in the first two example data sets below,
though they are on different scales. Figures 1a and 2 show
transmitter rotations that result in maximal coverage.

</P>

<P>For each transmitter, the output contains a single line with 
the maximum number of points that can be contained in some semicircle.
</P>

<PRE>
<b>Input:</b>
25 25 3.5
7
25 28
23 27
27 27
24 23
26 23
24 29
26 29
350 200 2.0
5
350 202
350 199
350 198
348 200
352 200
995 995 10.0
4
1000 1000
999 998
990 992
1000 999
100 100 -2.5
</PRE>


<PRE>
<b>Output:</b>
3
4
4
</PRE>


______________________________________________________
WSCIPHER||||||false||||||

<P>
Weird Wally's Wireless Widgets, Inc. manufactures an eclectic assortment
of small, wireless, network capable devices, ranging from dog collars,
to pencils, to fishing
bobbers. All these devices have very small memories.
Encryption algorithms like Rijndael, the candidate for the Advanced
Encryption Standard (AES) are demonstrably secure but they don't fit 
in such a tiny memory. In order to provide some security for 
transmissions to and from the devices, WWWW uses the following algorithm,
which you are to implement.
</P>

<P>
Encrypting a message requires three integer keys, <I>k<SUB>1</SUB></I>,

<I>k<SUB>2</SUB></I>, and <I>k<SUB>3</SUB></I>. The letters [a-i] form
one group, [j-r] a second group, and everything else ([s-z] and underscore) the
third group. Within each group the letters are rotated <I>left</I> by
<I>k<SUB>i</SUB></I> positions in the message.
Each group is rotated independently
of the other two.  Decrypting the message means doing
a <I>right</I> rotation 
by <I>k<SUB>i</SUB></I> positions within each group.

</P>

<P>
Consider 
the message <TT>the_quick_brown_fox</TT> encrypted with 
<I>k<SUB>i</SUB></I> values of 2, 3 and 1. The
encrypted string is <TT>_icuo_bfnwhoq_kxert</TT>. 
The figure below shows the decrypting right rotations for one
character in each of the three character groups.
</P>
<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/wanderley:wscipher.png"></center>
<P>
Looking at all the letters in the group [a-i] we see
{<tt>i</tt>,<tt>c</tt>,<tt>b</tt>,<tt>f</tt>,<tt>h</tt>,<tt>e</tt>} 
appear at positions {2,3,7,8,11,17} within the encrypted message.
After a right rotation of <I>k<SUB>1</SUB></I>=2, these positions contain the
letters {<tt>h</tt>,<tt>e</tt>,<tt>i</tt>,<tt>c</tt>,<tt>b</tt>,<tt>f</tt>}.
The table below shows the intermediate strings that come from doing
all the rotations in the first group, then all rotations in the second group,
then all the rotations in the third group. Rotating letters in one group will
not change any letters in any of the other groups. 

</P>
<TABLE width="100%">
 <TR>
   <TH></TH>
   <TH>[a-i], <I>k<SUB>1</SUB></I>= 2</TH>
   <TH>[j-r], <I>k<SUB>2</SUB></I>= 3</TH>

   <TH>[s-z] and _, <I>k<SUB>3</SUB></I>= 1</TH>
 </TR>

 <TR>
   <TD>Encrypted:</TD>
   <TD><TT>_icuo_bfnwhoq_kxert</TT></TD>

   <TD><TT>_heuo_icnwboq_kxfrt</TT></TD>
   <TD><TT>_heuq_ickwbro_nxfot</TT></TD>
</TR>
<TR>
   <TD>Decrypted:</TD>
   <TD><TT>_heuo_icnwboq_kxfrt</TT></TD>
   <TD><TT>_heuq_ickwbro_nxfot</TT></TD>

   <TD><TT>the_quick_brown_fox</TT></TD>
</TR>
<TR>
   <TD>Changes:</TD>
   <TD><PRE><TT> ^^   ^^  ^     ^  </TT></PRE></TD>
   <TD><PRE><TT>    ^   ^  ^^ ^  ^  </TT></PRE></TD>
   <TD><PRE><TT>^  ^ ^   ^   ^ ^  ^  </TT></PRE></TD>

</TR>
</TABLE>

<P>
All input strings contain only lowercase letters and underscores(_).
Each string
will be at most 80 characters long. The <I>k<SUB>i</SUB></I> are all positive 
integers in the range 1-100.
</P>

<P>
Input consists of information for one or more encrypted messages.
Each problem begins with
one line containing <I>k<SUB>1</SUB></I>, <I>k<SUB>2</SUB></I>, and

<I>k<SUB>3</SUB></I>
followed by a line
containing the encrypted message.
The end of the input is signalled by a line with all key values of 0.
</P>

<P>For each encrypted message, the output is a single line containing
the decrypted string.
</P>

<PRE>
<b>Input:</b>
2 3 1
_icuo_bfnwhoq_kxert
1 1 1
bcalmkyzx
3 7 4
wcb_mxfep_dorul_eov_qtkrhe_ozany_dgtoh_u_eji
2 4 3
cjvdksaltbmu
0 0 0
</PRE>

<PRE>
<b>Output:</b>
the_quick_brown_fox
abcklmxyz
the_quick_brown_fox_jumped_over_the_lazy_dog
ajsbktcludmv
</PRE>


______________________________________________________
SPLIT||||||false||||||

<P>
The Dotty Software Company makes software that is displayed on inexpensive
text based terminals.  One application for this system has a main
window that can be subdivided into further subwindows. 
Your task is to take a description of the screen layout after a sequence
of window splits and draw the minimum sized window grid that is consistent with
the description.
</P>
<P>
In this problem we will concentrate on the boundaries of windows, so all
the characters inside of windows will be left blank.  Each window
that is not further subdivided has a label.  Each label is a distinct
uppercase letter.  For a text terminal the boundaries of windows must
be drawn with characters, chosen as follows:  A capital letter label
is placed in the upper left-hand corner of each undivided window. 

Asterisks,'<tt>*</tt>', appear in corners of windows where there is not a
label. Dashes, '<tt>-</tt>', appear on upper and lower boundaries where
there are not corners.  Vertical bars, '<tt>|</tt>', appear on side
boundaries where there are not corners.
</P>

<P>
For example, the sequence of splits below would generate Window 1: 
Initially there could be an application window labeled <tt>M</tt>, that is
split next into left and right subwindows, adding label <tt>R</tt>, and
the left subwindow is split into top and bottom subwindows, adding the
label <tt>C</tt>.

</P>
<IMG SRC="http://www.spoj.pl/content/wanderley:split1.gif">
<P>
For each pattern of splits there is a binary tree of characters that can
describe it.  The window splitting and tree structures are described
together, building up from the simplest cases.
</P>
<ol>
<li>
A window may be an undivided rectangle.  Such a window has a capital
letter as label.  The tree for the window contains just the label.</li>

<li>

A window may either be split into left and right subwindows or into top
and bottom subwindows, and the corresponding trees have as root the boundary
character for the split: a vertical line '<tt>|</tt>' or a horizontal dash '<tt>-</tt>' respectively. 
The root has left and right subtrees corresponding to the top and bottom
or left and right subwindows respectively.</li>
</ol>
Tree 1, above, and Trees 2-4, below, would be consistent with
Windows 1-4.  Note that Tree 4 contains Trees 2 and 3.
<P>
<IMG SRC="http://www.spoj.pl/content/wanderley:split2.gif">
<P>
<IMG SRC="http://www.spoj.pl/content/wanderley:split3.gif">

<p>The trees may be more succinctly expressed via a preorder traversal:
<ol>
<li>
The preorder traversal of a tree with just one node (containing a letter)
is that letter.</li>

<li>
The preorder traversal of a tree with a left and a right subtree is the
character from the root of the tree ('<tt>-</tt>' or '<tt>|</tt>') followed by the preorder
traversal of the left subtree, and then the preorder traversal of the right
subtree.</li>
</ol>
The preorder traversals for Trees 1 through 4 are
<br><PRE>   |-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RST</PRE>

<P>
Each undivided window must have space for at least one character inside. 
Hence each tree of splits will be associated with a minimum window size. 
Windows 1-4 are minimum sized windows for Trees 1-4.  Each window
illustrates the fact that even in a minimum sized window, not all undivided
windows contain only one character.
</P>

<P>
Consider Tree 4 and Window
4.  The main window is split into a left window with Tree 2 and right
window with Tree 3. The left window is like Window 2, but the right window
is not just like Window 3.  The heights of left and right subwindows
must match, so the right window must be stretched.
</P>

<P>
The stretching rule depends on a definition of the size of windows. 
For dimension calculations it is easiest to imagine that a window contains
its interior and a half character wide boundary on all sides, so the total
dimensions of a window are one more than the dimensions of the interior.  
Hence the minimum dimensions of a window are 2 by 2, since a window must
contain one character inside, and we add one for the boundary.  This
definition also means that the sum of the widths of left and right subwindows
is the width of their enclosing window.  The sum of the heights of
top and bottom subwindows is the height of their enclosing window.
</P>
<p>The right window in Window 4 must be stretched to match the height 10
of the left window.  The right window is split into a top with tree
<tt>P</tt>
having minimum height 2 and a bottom with tree <tt>-|Q|RST</tt>

having minimum height 4.  The rule for the dimensions in the stretched
window is that the heights of the subwindows expand in proportion to their
minimum heights, if possible.  Some symbols may help here:  Let
<I>D</I> = 10 be the height of the combined stretched window.  We want to
determine <I>D<SUB>1</SUB></I> and <I>D<SUB>2</SUB></I>, the stretched heights
of the top and bottom subwindow. 

Call the corresponding minimum dimensions <I>d</I> = 6, <I>d<SUB>1</SUB></I> = 2,
and <I>d<SUB>2</SUB></I> = 4. 
If the window were expanded from a total height <I>d</I> to <I>D</I>

in proportion, we would have
<I>D<SUB>1</SUB></I> = <I>d<SUB>1</SUB></I>*(<I>D</I>/<I>d</I>) = 2*(10/6) = 3.333...and <I>D<SUB>2</SUB></I> = <I>d<SUB>2</SUB></I>*(<I>D</I>/<I>d</I>)
= 6.666....   Since the results are not integers we increase

<I>D<SUB>1</SUB></I> to 4 and decrease <I>D<SUB>2</SUB></I> to 6.
<p>There is a similar calculation for the bottom window with tree <tt>-|Q|RST</tt>. 
It is further subdivided into a top with tree <tt>|Q|RS</tt> and a bottom
with tree <tt>T</tt>, each having minimum height 2 = <I>d<SUB>1</SUB></I> = <I>d<SUB>2</SUB></I>. 

The heights need to add up to <I>D</I> = 6, so they are increased 
proportionally to <I>D<SUB>1</SUB></I> = <I>D<SUB>2</SUB></I> = 2*(6/4) = 3 (exact integers).
<p>The final dimensions of an enclosing window are always determined before
the final dimensions of its subwindows.  In this example only heights
needed to be apportioned.  If all horizontal and vertical splits were
interchanged in this example, producing a tree  <tt>-|-|ABC|D-E|FG|P|-Q-RST</tt>,
then widths would be apportioned correspondingly, as shown in the third
part of the sample output below.  If the proportion calculations do
not work out to integers, it is always the top or left subwindow whose
dimension is increased to the next integer.


<P>
The first line of input contains one integer, which is the total number
of preorder traversals describing window structures.  This line is
followed by one line for each preorder traversal.  Each preorder traversal
will contain appropriate dividers '<tt>|</tt>' and '<tt>-</tt>' and
from 1 to 26 uppercase letters.
</P>

<P>
For each preorder traversal, print the number of the preorder traversal 
on one line followed by the minimum sized window grid that the traversal could
represent. 
Contrary to the general contest output conventions, there may be more than
one consecutive blank in this output, but the other general rules for contest
output are followed.  The total number of rows or columns in output
grids will be no more than 53.

</P>


<PRE>
<b>Input:</b>
3
|-MCR
|-|-ABC-D|E-FG-P-|Q|RST
-|-|ABC|D-E|FG|P|-Q-RST
</PRE>

<PRE>
<b>Output:</b>
1
M-R-*
| | |
C-* |
| | |
*-*-*
2
A-C-P-----*
| | |     |
B-* |     |
| | |     |
D-*-Q-R-S-*
|   | | | |
E-F-* | | |
| | T-*-*-*
| G-*     |
| | |     |
*-*-*-----*
3
A-B-D-E---*
| | | |   |
C-*-* F-G-*
|   | | | |
P---Q-*T*-*
|   |  |  |
|   R--*  |
|   |  |  |
|   S--*  |
|   |  |  |
*---*--*--*
</PRE>


______________________________________________________
INDEXGEN||||||false||||||

<p>Most nonfiction and reference books have an <em>index</em> to help
readers find references to specific terms or concepts in the text.  Here
is a sample index.</p>

<blockquote><pre>larch, 4, 237, 238, 414
+ Monty Python and, 64, 65, 66
+ planting of, 17
Lenny Kravitz, 50
+ going his way, 53
lumbago, 107
mango
+ Chris Kattan, 380
+ storage of, 87, 90
+ use in Nethack, 500, 501
+ Vitamin C content, 192
</pre></blockquote>

<p>Each index entry contains a <b><i>primary entry</i></b> followed by zero or
more <b><i>secondary entries</i></b>, which begin with a '<tt>+</tt>'.  Entries will
normally be followed by a list of page references, but a primary entry
might not be if at least one secondary entry is present (as is the case
with <i>mango</i>, above).  Primary entries are sorted, and secondary
entries following a primary entry are also sorted. Sorting is
case-insensitive.  Page references for an entry are in ascending order
and do not include duplicates. (A duplicate could occur if there are two
or more identical entries on the same page.)</p>

<p>Your task is to read a document that has index information embedded
within it and produce the index.  Documents consist of one or more
lines of ASCII text. The page number starts at 1, and the character
'<tt>&</tt>' indicates the start of a new page (which adds 1 to the current
page number).  Index entries are indicated by a <b><i>marker</i></b>, which in
its most elaborate form has the following syntax:</p>

<blockquote>{<i>text</i><tt>%</tt><i>primary</i><tt>$</tt><i>secondary</i>}
</blockquote>

<p>Here <i>text</i> is the text to be indexed, <i>primary</i> is an
alternative primary entry, and <i>secondary</i> is a secondary entry.
Both '<tt>%</tt><i>primary</i>' and '<tt>$</tt><i>secondary</i>' are optional,
but if
both are present they must appear in the order given.  If <i>primary</i>

is present then it is used as the primary entry, and if not then <i>text</i> is used as the primary entry.  If <i>secondary</i> is present then
the marker adds a page reference for that secondary entry; otherwise it
adds a page reference for the primary entry.  A single marker cannot
add a page reference for both a primary and secondary entry. Here are
examples of each of the four possible types of marker, which correspond
to four of the entries in the sample index above.</p>

<blockquote><pre>... his {lumbago} was acting up, so ...
... {Lenny%Lenny Kravitz} lit up the crowd with his version of ...
... Monty Python often used the {larch$Monty Python and} in ...
... when storing {mangos%mango$storage of}, be sure to ...
</pre></blockquote>

<p>The input consists of one or more documents, followed by a line
containing only '<tt>**</tt>' that signals the end of the input.  Documents are
implictly numbered starting with 1. Each document consists of one or
more lines of text followed by a line containing only '<tt>*</tt>'.  Each line
of text will be at most 79 characters long, not counting end-of-line
characters.  For document <i>i</i>, output the line '<tt>DOCUMENT</tt> <i>i</i>' followed
by the sorted index using the exact output format shown in the
examples.</p>

<p>Be sure to read <a href="../notes/teams.html"><i>Notes to Teams</i></a>,
which has general formatting
guidelines that pertain to all problem input files, including this one.
Also note:</p>

<ul>
<li>A document will contain at most 100 markers,
with at most 20 primary entries.</li>
<li>A primary entry will have at most 5 secondary entries.</li>
<li>An entry will have at most 10 unique page references (not including 
        duplicates).</li>
<li>The character '<tt>&</tt>' will not appear anywhere within a marker, and
will appear at most 500 times within a document.</li>
<li>The character '<tt>*</tt>' is used only to signal the end of a document or
the end of the input.</li>

<li>The characters '<tt>{</tt>', '<tt>}</tt>', '<tt>%</tt>', and '<tt>$</tt>' will only be used to
define markers, and will not appear in any text or entries.</li>
<li>A marker may span one or more lines.  Every end-of-line within a
marker must be converted to a single space.</li>
<li>A space within a marker (including a converted end-of-line) is
normally included in the text/entry, just like any other character.
However, any space that immediately follows '<tt>{</tt>', 
immediately precedes '<tt>}</tt>', or is immediately adjacent to '<tt>%</tt>' or '<tt>$</tt>' 
must be ignored.</li>

<li>The total length of a marker, measured from the opening '<tt>{</tt>' to 
the closing '<tt>}</tt>', and in which all embedded end-of-lines are converted
to spaces, will be at most 79 characters.</li>
</ul>


<pre>
<b>Input:</b>
Call me Ishmael.
*
One {fish $unary}, two {fish$ binary},&red {fish $ scarlet}, blue {fish$
azure}. & By { Dr. Seuss }.
*
This is a {simple } & & { document} that &{
simply %simple
$adverb
} & {illustrates %vision} &&&&& one {simple-minded% simple} {Judge}'s {vision} 
for what a {document } might { look % vision} like.
*
**

</pre>

<pre>
<b>Output:</b>
DOCUMENT 1
DOCUMENT 2
Dr. Seuss, 3
fish
+ azure, 2
+ binary, 1
+ scarlet, 2
+ unary, 1
DOCUMENT 3
document, 3, 10
Judge, 10
simple, 1, 10
+ adverb, 4
vision, 5, 10
</pre>



______________________________________________________
HANGOVER||||||false||||||

<p>How far can you make a stack of cards overhang a table?  If you have
one card, you can create a maximum overhang of half a card length.
(We're assuming that the cards must be perpendicular to the table.) With
two cards you can make the top card overhang the bottom one by half a
card length, and the bottom one overhang the table by a third of a card
length, for a total maximum overhang of 1/2 <tt>+</tt> 1/3 <tt>=</tt>
5/6 card lengths. In general you can make <i>n</i> cards overhang by 1/2

<tt>+</tt> 1/3 <tt>+</tt> 1/4 <tt>+</tt> ... <tt>+</tt> 1/(<i>n</i>
<tt>+</tt> 1) card lengths, where the top card overhangs the second by
1/2, the second overhangs tha third by 1/3, the third overhangs the
fourth by 1/4, etc., and the bottom card overhangs the table by
1/(<i>n</i> <tt>+</tt> 1).  This is illustrated in the figure below.</p>

<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/wanderley:hangover.jpg"></center>


______________________________________________________
DOUBLEVI||||||false||||||

<p>The DoubleVision company designs inks and fonts that can be easily read by
both humans and machines.  They design their fonts on a rectangular grid.
Shown below is a very simple 5x3 design for the first five digits.</p>

<blockquote><pre>.o. .o. oo. oo. o.o
o.o .o. ..o ..o o.o
o.o .o. .o. oo. ooo
o.o .o. o.. ..o ..o
.o. .o. ooo oo. ..o
</pre></blockquote>

<p>The ink appears to be normal black ink, but just underneath the surface
DoubleVision adds a special polymer that can be detected by an infrared
scanner.  A human sees the black ink but not the polymer, and a machine sees
the polymer but not the black ink.  The only problem is that the polymer is
much more expensive than the ink, so DoubleVision wants to use as little of it
as possible. They have discovered that with many fonts, each symbol can be
uniquely identified by at most two pixels.  By only adding the polymer to one
or two pixels per symbol, they drastically lower costs while still ensuring
100% accuracy in their scanners.  The font shown above has this property;
pixels that uniquely identify each letter are highlighted with '<tt>#</tt>'. (There
are other choices that would work as well.)</p>

<blockquote><pre>.#. .o. #o. oo. o.#
#.o .#. ..o ..o o.o
o.o .o. .o. #o. ooo
o.o .o. #.. ..o ..o
.o. .o. ooo #o. ..o
</pre></blockquote>

<p>Your job is to write a program to determine if a given font has this
property, and if so highlight the pixels.</p>

<p>The input consists of one or more test cases, followed by a line
containing '<tt>0</tt> <tt>0</tt> <tt>0</tt>' (three zeros) that signals the end of the input. Each
test case begins with a line containing three positive integers <i>n</i>, <i>r</i>, and

<i>c</i>, separated by a space: <i>n</i> is the number of symbols in the font, <i>r</i> is
the number of rows in each grid, and <i>c</i> is the number of columns in each
grid. The next <i>r</i> lines contain the image of each symbol, using the exact
format shown in the examples:  a dot '<tt>.</tt>' represents an empty part
of the grid, a lowercase '<tt>o</tt>' represents a pixel, and adjacent grids
are separated
by a space.  The total width of each line will be at most 79 characters (not
counting end-of-line characters), and <i>r</i> will be at most 10.  The test
cases are implicitly numbered starting with 1.</p>

<p>For test case <i>i</i>, first output a line that says '<tt>Test</tt> <i>i</i>'. Then
determine if each symbol can be uniquely identified with one or two
pixels. If not, output a line with the word '<tt>impossible</tt>'.  Otherwise,
output the font in the same format except that the identifying pixels
for each symbol are replaced with '<tt>#</tt>'.  
<p>In general there may be
several different pixels or pixel pairs that uniquely identify a symbol.
To ensure that the output is unique, we add the following definition and
rules. When comparing two pixels, the <em>topmost-leftmost</em> pixel is the
one closest to the top of the grid. 
If both pixels are on the same row, then the topmost-leftmost is
the one closest to the left of the grid.</p>

<p>
If one pixel will work, highlight the topmost-leftmost pixel that works.
Never highlight a two-pixel solution if a one-pixel solution is
possible. If two pixels are needed, highlight the pair with the
topmost-leftmost pixel. If two or more pairs have the same
topmost-leftmost pixel, highlight the one with the topmost-leftmost <em>other</em> pixel.</p>

<pre>
<b>Input:</b>
3 2 2
oo oo .o
o. .o o.
3 2 2
oo oo .o
o. .o oo
5 5 3
.o. .o. oo. oo. o.o
o.o .o. ..o ..o o.o
o.o .o. .o. oo. ooo
o.o .o. o.. ..o ..o
.o. .o. ooo oo. ..o
1 2 4
.o..
...o
0 0 0
</pre>

<pre>
<b>Output:</b>
Test 1
impossible
Test 2
#o #o .o
#. .# ##
Test 3
.#. .o. #o. oo. o.#
#.o .#. ..o ..o o.o
o.o .o. .o. #o. ooo
o.o .o. #.. ..o ..o
.o. .o. ooo #o. ..o
Test 4
.#..
...o
</pre>


______________________________________________________
IMAGE||||||false||||||

<P>
Technicians in a pathology lab analyze digitized images of slides.
Objects on a slide are selected for analysis by a mouse click on the object.
The perimeter of the boundary of an object is one useful measure.
Your task is to determine this perimeter for selected objects.
</P>
<P>
The digitized slides will be represented by a rectangular grid of periods,
'<tt>.</tt>', indicating empty space, and the capital letter '<tt>X</tt>', indicating part
of an object.  Simple examples are
</P>
<P>
<b><tt>XX   Grid 1       .XXX  

Grid 2</tt></b>
<br><b><tt>XX               
.XXX</tt></b>
<br><b><tt>                 
.XXX</tt></b>
<br><b><tt>                 
...X</tt></b>
<br><b><tt>                 
..X.</tt></b>
<br><b><tt>                 
X...</tt></b>

</P>
<P>
An <tt>X</tt> in a grid square indicates that the entire grid
square, including its boundaries, lies in some object.  The <tt>X</tt>
in the center of the grid below is <I>adjacent</I> to the <tt>X</tt> in any
of the 8
positions around it. The grid squares for any two adjacent <tt>X</tt>'s
overlap on an edge or corner, so they are connected.

</P>

<P>
<tt>XXX</tt>
<br><tt>X<b>X</b>X   </tt> Central <tt>X</tt> and adjacent <tt>X</tt>'s
<br><tt>XXX</tt>

</P>

<P>
An object consists of the grid squares of all <tt>X</tt>'s that
can be linked to one another through a sequence of adjacent <tt>X</tt>'s. 
In Grid 1, the whole grid is filled by one object.  In Grid 2 there
are two objects.  One object contains only the lower left grid square. 
The remaining <tt>X</tt>'s belong to the other object.

</P>

<P>
The technician will always click on an <tt>X</tt>, selecting the object containing
that <tt>X</tt>.  The coordinates of the click are recorded.  Rows and
columns are numbered starting from 1 in the upper left hand corner. 
The technician could select the object in Grid 1 by clicking on row 2 and
column 2.  The larger object in Grid 2 could be selected by clicking
on row 2, column 3. The click could not be on row 4, column 3.
</P>

<P>
<img SRC="http://www.spoj.pl/content/wanderley:image.gif" HSPACE=20 height=105 width=54 align=LEFT> One
useful statistic is the perimeter of the object.  Assume each <tt>X</tt> corresponds
to a square one unit on each side.  Hence the object in Grid 1 has
perimeter 8 (2 on each of four sides).  The perimeter for the
larger object in Grid 2 is illustrated in the figure at
the left.  The length is 18.
</P>

<P>
Objects will not contain any totally enclosed holes, so the leftmost
grid patterns shown below could <I>NOT</I> appear.
The variations on the right could appear:
<p><b><tt>Impossible   Possible</tt></b><b><tt></tt></b>
<p><b><tt>XXXX         XXXX  
XXXX   XXXX</tt></b>

<br><b><tt>X..X         XXXX  
X...   X...</tt></b>
<br><b><tt>XX.X         XXXX  
XX.X   XX.X</tt></b>
<br><b><tt>XXXX         XXXX  

XXXX   XX.X</tt></b><b><tt></tt></b>
<p><b><tt>.....        .....  ..... 
.....</tt></b>
<br><b><tt>..X..        ..X.. 
..X..  ..X..</tt></b>

<br><b><tt>.X.X.        .XXX. 
.X...  .....</tt></b>
<br><b><tt>..X..        ..X.. 
..X..  ..X..</tt></b>
<br><b><tt>.....        ..... 

.....  .....</tt></b><b></b>
</P>

<P>
The input will contain one or more grids.  Each grid is preceded
by a line containing the number of rows and columns in the grid and the
row and column of the mouse click.  All numbers are in the range 1-20. 
The rows of the grid follow, starting on the next line, consisting of '<tt>.</tt>'
and '<tt>X</tt>' characters.

</P>

<P>
The end of the input is indicated by a line containing four zeros. 
The numbers on any one line are separated by blanks.  The grid rows
contain no blanks.
</P>

<P>
For each grid in the input, the output contains a single line
with the perimeter of the specified object.
</P>

<PRE>
<b>Input:</b>
2 2 2 2
XX
XX
6 4 2 3
.XXX
.XXX
.XXX
...X
..X.
X...
5 6 1 3
.XXXX.
X....X
..XX.X
.X...X
..XXX.
7 7 2 6
XXXXXXX
XX...XX
X..X..X
X..X...
X..X..X
X.....X
XXXXXXX
7 7 4 4
XXXXXXX
XX...XX
X..X..X
X..X...
X..X..X
X.....X
XXXXXXX
0 0 0 0
</PRE>

<PRE>
<b>Output:</b>
8
18
40
48
8
</PRE>



______________________________________________________
MATRIX2||||||true||||||


<p>You are given a matrix P of N rows and M columns. It consists of integer numbers in the range [1..100]. We define the sum of a matrix is the sum of its elements. Your task is to find a submatrix Q (of A rows and B columns) of P and a submatrix K (of C rows and D columns) of Q so that the difference between the sum of Q and the sum of K is maximal, and submatrix K is absolutely inside matrix Q (i.e no element on matrix Q's sides is also in matrix K).
<br> <br>
Because the tests are large, we suggest a method to define matrix P: <br>
P[i][j] = ( P[i][j-1] * 71 + 17 ) mod 100 + 1 . ( 1 &#8804; i &#8804; N , 1 &#8804; j &#8804; M )
<br>
With this method we only care about P[i][1].
<br> <br>
<b>Constraints</b> <br>
1 &#8804; N , M &#8804; 1000 <br>
1 &#8804; A &#8804; N <br>
1 &#8804; B &#8804; M <br>
0 &#8804; C &#8804; A - 2 <br>
0 &#8804; D &#8804; B - 2 <br>

*******InputConstraints*******

<p>The first line of the input contains an integer t (1 &#8804; t &#8804; 10 ), equal to the number of testcases. Then descriptions of t testcases follow. The first line of the description contains 6 integer numbers N, M, A, B, C, D. Then N lines follow, line i contains one integer number P[i][1].


*******OutputConstraints*******

<p>For each test case, your program should output the maximal difference between two matrices (in a separate line).


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 3 3 3 1 1
1
2
3
<b>Output:</b>
260
</pre>



______________________________________________________
QTREE2||||||true||||||


<p>
You are given a tree (an undirected acyclic connected graph) with <b>N</b> nodes, and edges numbered 1, 2, 3...<b>N</b>-1. Each edge has an integer value assigned to it, representing its length.
</p>
<p>
We will ask you to perfrom some instructions of the following form:
</p>

<ul>
<li><b>DIST a b</b> : ask for the distance between node <b>a</b> and node <b>b</b><br>
or
<li><b>KTH a b k</b> : ask for the <b>k</b>-th node on the path from node <b>a</b> to node <b>b</b> 
</ul>

<p>
<b>Example:</b><br>
<b>N</b> = 6 <br>
1 2 1 // edge connects node 1 and node 2 has cost 1 <br>
2 4 1 <br>
2 5 2 <br>
1 3 1 <br>
3 6 2 <br>
<br>
Path from node 4 to node 6 is 4 -> 2 -> 1 -> 3 -> 6 <br>
<b>DIST 4 6</b> : answer is 5 (1 + 1 + 1 + 2 = 5) <br>
<b>KTH 4 6 4</b> : answer is 3 (the 4-th node on the path from node 4 to node 6 is 3) <br>
</p>


*******InputConstraints*******

<p>
The first line of input contains an integer <b>t</b>, the number of test cases (<b>t</b> <= 25). <b>t</b> test cases follow.
<p>For each test case:</p> 
<ul>
<li>In the first line there is an integer <b>N</b> (<b>N</b> <= 10000)
<li>In the next <b>N</b>-1 lines, the i-th line describes the i-th edge: a line with three integers <b>a b c</b> denotes an edge between <b>a</b>, <b>b</b> of cost <b>c</b> (<b>c</b> <= 100000)
<li>The next lines contain instructions <b>"DIST a b"</b> or <b>"KTH a b k"</b>
<li>The end of each test case is signified by the string "<b>DONE</b>".
</ul>
<p>There is one blank line between successive tests.
</p>


*******OutputConstraints*******

<p>For each <b>"DIST"</b> or <b>"KTH"</b> operation, write one integer representing its result.</p>
<p>Print one blank line after each test.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1

6
1 2 1
2 4 1
2 5 2
1 3 1
3 6 2
DIST 4 6
KTH 4 6 4
DONE

<b>Output:</b>
5
3
</pre>



______________________________________________________
FTOUR||||||true||||||


<p>
In order to celebrate the 2nd anniversary of Travel Agent SPOJ (Safe &#8211; Professional &#8211; hOspitable &#8211; Joyful), the management intend to hold free tours around cities for clients to make them more satisfied with SPOJ. 
</p>
<p>
A tour is a simple cycle, starting at any city (called a source-city) visits some other cities (each city must be visited at most once) and then returns to the source-city. The number of roads in the tour should be an even number because we are celebrating a 2nd anniversary, and 2 is even! Since many tours in different areas of the country are planned, the cost of organising them could turn out quite high. Hence, the management of SPOJ hope to find at least one 'reasonable' tour, which should have as small a number of roads as possible. 
</p>

<p> 
You're given maps of the areas where SPOJ wants to hold free tours. For each map, help them figure out a reasonable tour.
</p>


*******InputConstraints*******

<p>
The first line of input contains an integer <b>t</b>, the number of maps (<b>t</b> <= 5). <b>t</b> maps follow. 
</p>

<p>
For each map:
</p>
<ul>
<li> In the first line there are 2 integers <b>N</b> &#8211; number of cities in that area, <b>M</b> &#8211; number of roads (1 <= <b>N</b> <= 8000, 0 <= <b>M</b> <= 10000)</li>
<li> In the next <b>M</b> lines, the i-th line describes the i-th road: a line with two integers <b>a b</b> denotes a bidirectional road between city <b>a</b> and city <b>b</b> </li>
</ul>
<p>There is one blank line between successive tests.</p>


*******OutputConstraints*******

<p>For each map, if there is no tour satisfying the conditions, write "-1" (without quotes). Otherwise, write one integer representing the number of roads in a reasonable tour, and in the next line show out the tour with form "source-city a b c .. source-city", that means the tour is source-city -> city a -> city b -> &#8230; -> source-city. If there are many tours satisfy in each map, any of them will be accepted.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2

3 3
1 2 
2 3
3 1

4 4
1 2
2 3
3 4
4 1


<b>Output:</b>
-1
4
1 2 3 4 1
</pre>



______________________________________________________
IM||||||false||||||

<p>

<img src="http://www.spoj.pl/content/simba:p1.jpg" style="float: right" vspace="3" hspace="8" alt="Map">

Jedi knights, Qui-Gon Jinn and his young apprentice Obi-Wan Kenobi, are entrusted by Queen Padm?© Amidala
to save <b>Naboo</b> from an invasion by the Trade Federation. They must leave Naboo immediately and go to <b>Tatooine</b>
to pick up the proof of the Federation&#8217;s evil design. They then must proceed on to the Republic&#8217;s capital
planet <b>Coruscant</b> to produce it in front of the Republic&#8217;s Senate. To help them in this endeavor, the queen&#8217;s captain provides them with an intergalactic map. This map shows connections between planets not yet blockaded by the Trade Federation. Any pair of planets has at most one connection between them, and all the connections are two-way. To avoid detection by enemy spies, the knights must embark on this adventure without visiting any planet more than once. Can you help them by determining if such a path exists?
<br><br><b>Note</b> - In the attached map, the desired path is shown in bold.


______________________________________________________
EN||||||false||||||

<p>

<img src="http://www.spoj.pl/content/simba:p3.jpg" style="float: right" vspace="3" hspace="8" alt="Example">

The separatist leader General Grievous, the second in command of Count Dooku, comes to know that Chancellor Palpatine&#8217;s convoy, escorted by Obi-wan and Anakin, is scheduled to depart from <b>Kashyyyk</b> in the Middle Rim of the Universe to <b>Alderaan</b>. General Grievous is aware that there are multiple paths going via different sets of planets from Kashyyyk to Alderaan. To make his abduction attempt successful, he decides to send his robots to the planet closest to Kashyyyk, other than itself, which lies on all the possible paths from Kashyyyk to Alderaan. Since you have pledged your allegiance to Count Dooku, you need to help him identify this planet.

The planetary map which is given to you for this purpose consists of a set of one-way connections between planets. You also know that a pair of planets can have at most one connection between them in each direction and there is always a path from Kashyyyk to Alderaan.

<br><br><b>Note</b>: In the given example, the planet with index 5 is the required planet.


______________________________________________________
PB||||||false||||||

<p>
<img src="http://www.spoj.pl/content/simba:p6.jpg" style="float: right" vspace="3" hspace="8" alt="Illustration">

Luke Skywalker successfully leads the rebel starship fleet to break the Emperor's siege of the planet Endor. The rebels, jubilant in their victory, return to their base on the moon of Endor to pay their homage to Princess Leia. They fly towards the parking bay where there are n parking slots in a row. One by one n starships numbered S<sub>1</sub> to S<sub>n</sub> enter the parking bay. Each rebel R<sub>i</sub> heads to his favorite parking slot P<sub>i</sub>, and if it is free, he docks his starship there. Otherwise, he continues further to the next free slot and occupies it. But if all succeeding slots are occupied, he leaves for good. How many sequences P<sub>i</sub> are such that every rebel can dock his starship?


______________________________________________________
BIRTHDAY||||||true||||||


<p>It is Byteman&#8217;s birthday today. There are n children at his birthday party (including Byteman). The children are numbered from 1 to n. Byteman&#8217;s parents have prepared a big round table and they have placed n chairs around the table. When the children arrive, they take seats. The child number 1 takes one of the seats. Then the child number 2 takes the seat on the left. Then the child number 3 takes the next seat on the left, and so on. Finally the child number n takes the last free seat, between the children number 1 and n&#8722;1.  Byteman&#8217;s parents know the children very well and they know that some of the children will be noisy, if they sit too close to each other. Therefore the parents are going to reseat the children in a specific order. Such an order can be described by a permutation p1, p2, . . . , pn (p1, p2, . . . , pn are distinct integers from 1 to n) &#8212; child pi (for i = 2,3, . . . ,n) should sit on child pi&#8722;1&#8217;s left, and child p1 should sit on child pn&#8217;s left. To seat all the children in the given order, the parents must move each child around the table to the left or to the right some number of seats. For each child, they must decide how the child will move &#8212; that is, they must choose a direction of movement (left or right) and distance (number of seats). On the given signal, all the children stand up at once, move to the proper places and sit down. The reseating procedure throws the birthday party into a mess. The mess is equal to the total distance any child moves. The children can be reseated in many ways. The parents choose one with minimum mess. Help them to find such a way to reseat the children.


*******InputConstraints*******

<p>The first line of standard input contains one integer n (1 &#8804; n &#8804; 50000). The second line contains n integers p1, p2, . . . , pn, separated by single spaces. Numbers p1, p2, . . . , pn form a permutation of the set {1,2, . . . ,n} describing the desired order of the children.


*******OutputConstraints*******

<p>The first and the only line of standard output should contain one integer: the minimum possible mess.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 5 4 3 2

<b>Output:</b>
6
</pre>



______________________________________________________
MOBILE||||||true||||||


<p>Mobile<br>
Manfred loves to build mobiles out of old CDs. For each one, he has an exact plan how it should look like: The CDs are all hanging exactly on the same height. For each pair
of CDs, he writes down the height of the lowest bar such that both CDs are hanging somewhere under this bar. For example, the following mobile and distance matrix fit together:<p>
<img src="http://www.spoj.pl/ADB_67/content/mobile.png"><p>
After a while, Manfred realizes that he does not succeed to build every mobile he planned to. For example, there is no solution for the following distance matrix:<br>
     0 1 2<br>
     1 0 3<br>
     2 3 0<br>
So, he decides to write a computer program that checks the distance matrices and tells him if there is a solution.


*******InputConstraints*******

<p>Several matrices to check. The first row contains the size of the matrix (n), the next n rows contain the distances in the matrix. Then, the data of the next matrix comes, and so on. The input is terminated by a zero as matrix size.


*******OutputConstraints*******

<p>For each matrix, write true if Manfred can build a mobile, false otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
0 1 1 1 3
1 0 1 1 3
1 1 0 1 3
1 1 1 0 3
3 3 3 3 0
3
0 1 2
1 0 3
2 3 0
3
1 1 1
1 0 2
1 1 0
0

<b>Output:</b>
true
false
false

</pre>



______________________________________________________
CFRAC||||||true||||||


<p>A simple continuous fraction has the form:
<br><br>
<center><img src='/content/steinersp:cfrac.jpg'alt='subir imagenes' border='0'></center>

<p><br><br>where the ai&#8217;s are integer numbers.

<p><br>The previous continuous fraction could be noted as [a1, a2, . . . , an]. It is not difficult to show that any rational number p / q , with integers p > q > 0, can be represented in a unique way by a simple continuous fraction with n terms, such that p / q = [a1, a2, . . . , an&#8722;1, 1], where n and the ai&#8217;s are positive natural numbers.

<p><br>Your task is to find and print the simple continuous fraction that corresponds to a given rational number.

<br>

*******InputConstraints*******

<p>Input will consist of a series of cases, each one in a line. A line describing a case contains p and q, two integer numbers separated by a space, with 10^20 > p > q > 0.

<p><br>The end of the input is indicated by a line containing 0 0.

<br><br>

*******OutputConstraints*******

<p>Cases must be analyzed in the order that are read from the input. Output for each case will consist of several lines. The first line indicates the case number, starting at 1, using the format:

<p><br>Case i:
<br>replacing i by the corresponding case number. The second line displays the input data in the
form p / q.

<p><br>The remaining lines must contain the continuous fraction corresponding to the rational
number, p
q , specified in the given input line. The continuous fraction must be printed accordingly to the following rules:

<br><br><ul>
<li>Horizontal bars are formed by sequences of dashes &#8216;-&#8217;.

<br><br><li>The width of each horizontal bar is exactly equal to the width of the denominator under it.

<br><br><li>Blank characters should be printed using periods &#8216;.&#8217;

<br><br><li>The number on a fraction numerator must be printed center justified. That is, the number of spaces at either side must be same, if possible; in other case, one more space must be added at the right side.
</ul>

<br>

*******IOTestCases*******


<br>
<pre>
<b>Input:</b>
75 34
65 60
0 0

<b>Output:</b>
Case 1:
75 / 34
..........1......
2.+.-------------
............1....
....4.+.---------
..............1..
........1.+.-----
................1
............5.+.-
................1
Case 2:
65 / 60
......1...
1.+.------
.........1
....11.+.-
.........1
</pre>


______________________________________________________
MATRIOSH||||||true||||||


<p>Vladimir worked for years making matrioshkas, those nesting dolls that certainly represent truly Russian craft. A matrioshka is a doll that may be opened in two halves, so that one finds another doll inside. Then this doll may be opened to find another one inside it. This can be repeated several times, till a final doll -that cannot be opened- is reached.

<p><br>Recently, Vladimir realized that the idea of nesting dolls might be generalized to nesting toys. Indeed, he has designed toys that contain toys but in a more general sense. One of these toys may be opened in two halves and it may have more than one toy inside it. That is the new feature that Vladimir wants to introduce in his new line of toys.

<p><br>Vladimir has developed a notation to describe how nesting toys should be constructed. A toy is represented with a positive integer, according to its size. More precisely: if when opening the toy represented by m we find the toys represented by n1, n2, . . ., nr, it must be true that n1 +n2 +. . .+nr < m. And if this is the case, we say that toy m contains directly the toys n1, n2, . . ., nr . It should be clear that toys that may be contained in any of the toys n1, n2, . . ., nr are not considered as directly contained in the toy m.


<p><br>A generalized matrioshka is denoted with a non-empty sequence of non zero integers of the form:
a1 a2 . . . aN such that toy k is represented in the sequence with two integers &#8722;k and k, with the negative
one occurring in the sequence first that the positive one.

<p><br>For example, the sequence


<p><br><center>&#8722;9  &#8722;7  &#8722;2  2  &#8722;3  &#8722;2  &#8722;1  1  2  3  7  9</center>


<p><br>represents a generalized matrioshka conformed by six toys, namely, 1, 2 (twice), 3, 7 and 9.
<br>Note that toy 7 contains directly toys 2 and 3. Note that the first copy of toy 2 occurs left from the second one and that the second copy contains directly a toy 1. It would be wrong to understand that the first &#8722;2 and the last 2 should be paired.

<p><br>On the other hand, the following sequences do not describe generalized matrioshkas:

<p><br><center>&#8722;9  &#8722;7  &#8722;2  2  &#8722;3  &#8722;1  &#8722;2  2  1  3  7  9</center>

<p><br>because toy 2 is bigger than toy 1 and cannot be allocated inside it.

<p><br><center>&#8722;9  &#8722;7  &#8722;2  2  &#8722;3  &#8722;2  &#8722;1  1  2  3  7  &#8722;2  2  9</center>

<p><br>because 7 and 2 may not be allocated together inside 9.

<p><br>

*******InputConstraints*******

<p>The input file contains several test cases, each one of them in a separate line. Each test case is a sequence of non zero integers, each one with an absolute value less than 10^7.

<p><br>

*******OutputConstraints*******

<p>Output texts for each input case are presented in the same order that input is read. For each test case the answer must be a line of the form

<p><br>:-) Matrioshka!
<p><br>if the design describes a generalized matrioshka. In other case, the answer should be of the form
<p><br>:-( Try again.

<br>

*******IOTestCases*******


<pre>
<b>Input:</b>
-9 -7 -2 2 -3 -2 -1 1 2 3 7 9
-9 -7 -2 2 -3 -1 -2 2 1 3 7 9
-9 -7 -2 2 -3 -1 -2 3 2 1 7 9
-100 -50 -6 6 50 100
-100 -50 -6 6 45 100
-10 -5 -2 2 5 -4 -3 3 4 10
-9 -5 -2 2 5 -4 -3 3 4 9

<b>Output:</b>
:-) Matrioshka!
:-( Try again.
:-( Try again.
:-) Matrioshka!
:-( Try again.
:-) Matrioshka!
:-( Try again.
</pre>


______________________________________________________
EQDIV||||||true||||||


<p>An equidivision of an n ? n square array of cells is a partition of the n^2 cells in the array in exactly n sets, each one with n contiguous cells. Two cells are contiguous when they have a common side.

<p><br>A good equidivision is composed of contiguous regions. The figures show a good and a wrong equidivision for a 5?5 square:

<p><br><center>
<img src='/content/steinersp:equidiv.jpg'alt='subir imagenes' border='0'></center>

<p><br>
Note that in the second example the cells labeled with 4 describe three non-contiguous regions and cells labeled with 5 describe two non-contiguous regions. You must write a program that evaluates if an equidivision of the cells in a square array is good or not.

<br>

*******InputConstraints*******

<p>It is understood that a cell in an n?n square array is denoted by a pair (i, j), with 1 <= i, j <= n. The input file contains several test cases. Each test case begins with a line indicating n, 0 < n < 100, the side of the square array to be partitioned. Next, there are n &#8722; 1 lines, each
one corresponding to one partition of the cells of the square, with some non-negative integer numbers. 

<p><br>Consecutive integers in a line are separated with a single blank character. A line of the form


<p><br><center>a1 a2 a3 a4 ...</center>

<p><br>
means that cells denoted with the pairs (a1, a2), (a3, a4), ... belong to one of the areas in the partition. The last area in the partition is defined by those cells not mentioned in the n &#8722; 1 given lines. If a case begins with n = 0 it means that there are no more cases to analyze.

<p><br>

*******OutputConstraints*******

<p>For each test case good must be printed if the equidivision is good, in other case, wrong must be printed. The answers for the different cases must preserve the order of the input.

<br>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 2 2 1
5
1 1 1 2 1 3 3 2 2 2
2 1 4 2 4 1 5 1 3 1
4 5 5 2 5 3 5 5 5 4
2 5 3 4 3 5 4 3 4 4
5
1 1 1 2 1 3 3 2 2 2
2 1 3 1 4 1 5 1 4 2
4 5 5 2 5 3 5 5 5 4
2 4 1 4 3 5 4 3 4 4
0

<b>Output:</b>
wrong
good
wrong
</pre>



______________________________________________________
BROUL||||||true||||||


<!--
<p><h5>... Los babilonios se entregaron al juego. El que no adquir?­a suertes era considerado un pusil??nime, un apocado. Con el tiempo, ese desd?©n justificado se duplic?³. Era despreciado el que no jugaba, pero tambi?©n eran despreciados los perdedores que abonaban la multa ...
Jorge Luis Borges, La loter?­a de Babilonia, Ficciones</h5>
-->
<p><br>
People of Babylon were devoted to chance games and one of the most popular was a special kind of roulette. Recently, some old Babylonian tablets were found. They described details of the roulette game.

<p><br>In modern terms, the rules of the game were as follows:

<br>
<ul>
<p><br><li>Roulette&#8217;s compartments had only six labels: -1, -2, -3, 1, 2, 3.
<br><br><li>The game was played by turns, during a day. Turns were numerated 0, 1, 2, ...
<br><br><li>Players could win or lose a multiple of the bet, a quantity of money that was constant along the day.
<br><br><li>At turn t there was an amount of money Pt, called the pot.
<br><br><li>At the start, there was an initial amount of money P0 in the pot.
<br><br><li>P0 and the bet were positive numbers arbitrarily defined by the King.
<br><br><li>In a turn, a player turned the roulette. A player could not play more than once in a day.
Depending on the compartment where the ball came to rest, the player won (or lose, if the value was negative) an amount wt = L * bet of money, where L corresponded to the
compartment&#8217;s label.
<br><br><li>The won money was taken from the pot (or put in it if the player lose), i.e. the value of the pot in a given turn was determined by Pt+1 = Pt + wt.
<br><br><li>If as a result of the last rule Pt+1 was a negative number the winner won only the maximum
multiple of the bet that he could win without making a negative pot.
<br><br><li>If at some turn the pot was less than the bet, the game was ended for that day. If that was not the case the game continued till sunset.
</ul>

<p><br>
Beside the tablets that explained the rules some other tablets were found. These had lines with three numbers. Archeologists conjecture that each of these lines were part of a kind of accountability system for the game, where numbers represented, for a given day, the value of
the pot at the beginning, the bet and the value of the pot at the end.

<p><br>
For example, a line with the numbers
<p><br>
10000 1500 11500

<p><br>
could mean that there was only one turn where the player won with label 1. Another possibility is that there were three turns with results 2, 1 and -2.

<p><br>
On the other hand, there were found other tablets with triplets of numbers that seem like the above described that, however, cannot represent results of a game day. There is no hypothesis of what they are.

<p><br>
Archeologists want to validate their hypothesis analyzing batches of tablets with triplets. They want to estimate the number of people that played in a day. To begin, they want to establish, for each triplet of numbers in a tablet that could represent a result of a game day, the minimal number of players that played that day. In the above example the answer to this question is 1. Tablets that cannot represent results should be identified. You are hired to help with this task.

<p><br>

*******InputConstraints*******

<p>The input file contains several test cases, each one of them in a separate line. Each test case is a triplet of non negative integers, indicating the initial pot, the bet and the final pot for a day.

<p><br>
Each of the input numbers is less than 10<sup>8</sup>. The initial pot and the bet are greater than 0.

<p><br>
A line with a triplet of 0&#8217;s denotes the end of the input.

<br>

*******OutputConstraints*******

<p>Output texts for each input case are presented in the same order that input is read. For each test case the answer must be a printed line.

<p><br>
If the test case cannot represent the result of a game day, the output line has the words No accounting tablet. In other case, the printed answer is one positive integer number telling the minimal number of players that could turn the roulette for the day corresponding to the annotations.

<br>

*******IOTestCases*******


<pre>
<b>Input:</b>
10000 1000 22000
24 13 2
5100 700 200
54 16 158
360 6 72
25 10 5
0 0 0

<b>Output:</b>
4
No accounting tablet
3
No accounting tablet
16
1
</pre>



______________________________________________________
UJ||||||true||||||


<p>Dear Uncle Jack is willing to give away some of his collectable CDs to his nephews. Among the titles you can find very rare albums of Hard Rock, Classical Music, Reggae and much more; each title is considered to be unique. Last week he was listening to one of his favorite songs, Nobody&#8217;s fool, and realized that it would be prudent to be aware of the many ways he can give away the CDs among some of his nephews.

<p><br>So far he has not made up his mind about the total amount of CDs and the number of nephews. Indeed, a given nephew may receive no CDs at all.

<p><br>Please help dear Uncle Jack, given the total number of CDs and the number of nephews, to calculate the number of different ways to distribute the CDs among the nephews.

<p><br>

*******InputConstraints*******

<p>The input consists of several test cases. Each test case is given in a single line of the input by, space separated, integers N (1 <= N <= 1000) and D (0 <= D <= 2500), corresponding to the number of nephews and the number of CDs respectively. The end of the test cases is indicated with N = D = 0.

<p><br>

*******OutputConstraints*******

<p>The output consists of several lines, one per test case, following the order given by the input. Each line has the number of all possible ways to distribute D CDs among N nephews.

<br>

*******IOTestCases*******


<pre>
<b>Input:</b>
1 20
3 10
0 0

<b>Output:</b>
1
59049
</pre>



______________________________________________________
QUILT||||||true||||||


<p><I>Little Quilt</I> is a small language introduced by Ravi Sethi in his book &#8216;Programming Languages&#8217;.

<p><br>Here, a restricted version of Little Quilt is presented. The language is defined by the following BNF grammar:

<p><br>
< QUILT > ::= A | B | turn(< QUILT >) | sew(< QUILT >,< QUILT >)


<p><br>A and B represent the two primitive quilts. Each primitive quilt corresponds to a matricial arrangement of 2 ? 2 characters. turn() and sew() are operations over quilts.

<p><br>The instruction turn(x) turns the quilt x 90 degrees clockwise. The following table illustrates the primitive quilts as well as examples of the effect of the turn() operation:

<p><br>
<center><img src='/content/steinersp:quilt1.jpg'alt='subir imagenes' border='0'></center>

<p><br>
Accordingly, the instruction sew(x,y) sews quilt x to the left of quilt y. Both x and y must have the same height, otherwise an error will be generated. The following figure represents the result of sew(A,turn(B)):

<p><br>
<center><img src='/content/steinersp:quilt2.jpg'alt='subir imagenes' border='0'></center>

<p><br>while the sew(turn(sew(B,turn(B))),A) generates an error message.

<p><br>Your job is to build an interpreter of the Little Quilt language.

<p><br>

*******InputConstraints*******

<p>The input file will be a text file containing different Little Quilt expressions, each one ended by a semicolon character (;). Space and new line characters must be ignored; this means that an expression may span several lines.

<p><br>

*******OutputConstraints*******

<p>The output file contains the quilts produced as a result of interpreting the input expressions.

<p><br>Each quilt must be preceded by a line, left aligned, with the format

<p><br>Quilt i:
<br>where i is the quilt number, starting at 1. If the expression interpretation generates and error, the word

<p><br>error
<br>must be printed.

<p><br>

*******IOTestCases*******


<pre>
<b>Input:</b>
sew(turn(sew(B,turn(B))),
turn(sew(turn(B),B))) ;
<br><br>
sew(turn(sew(B,turn(B))),A);
sew(turn(sew(A,turn(A))),
turn(turn(
<br>
turn(sew(A,turn(A))))))
;

<b>Output:</b>
Quilt 1:
||--
||--
--||
--||
Quilt 2:
error
Quilt 3:
\\//
+\/+
+/\+
//\\
</pre>


______________________________________________________
POLYCODE||||||true||||||


<p>Imagine an infinite table with rows and columns numbered using the natural numbers. The following figure shows a procedure to traverse such a table assigning a consecutive natural number to each table cell:

<p><br>
<center><img src='/content/steinersp:poly.jpg' alt='subir imagenes' border='0'></center>

<p><br>
This enumeration of cells can be used to represent complex data types using natural numbers:

<p><br>
<ul>
<li>A pair of natural numbers (i, j) is represented by the number corresponding to the cell in row i and column j. For instance, the pair (3,2) is represented by the natural number 17; this fact is noted by P2(3, 2) = 17.

<p><br>
<li>The pair representation can be used to represent n-tuples. A triplet (a, b, c) is represented by P2(a, P2(b, c)). A 4-tuple (a, b, c, d) is represented by P2(a, P2(b, P2(c, d))). This procedure can be generalized for an arbitrary n:

<p><br>
<center>Pn(a1, ..., an) = P2(a1, Pn&#8722;1(a2, .., an)),</center>

<p><br>
where Pn denotes the n-tuple representation function, n >=  2. For example P3(2, 0, 1) = 12.

<p><br>
<li>A list of arbitrary length ha1, ..., ani is represented by
</ul>

<p><br>
<center>L(ha1, ..., ani) = P2(n, Pn(a1, ..., an)).</center>

<p><br>
For example, L(h0, 1i) = 12.

<p><br>
The Association of Convex Makers (ACM) uses this clever enumeration scheme in a polygon representation system. The system can represent a polygon, defined by integer coordinates, using a natural number as follows: given a polygon defined by a vertex sequence h(x1, y1), ..., (xn, yn)i assign the natural number:

<p><br>
<center>L((hP2(x1, y1), ..., P2(xn, yn))).

<p><br>
ACM needs a program that, given a natural numbers that represents a polygon, calculates the area of the polygon. It is guaranteed that the given polygon is a simple one, i.e. its sides do not intersect.

<p><br>
As an example of the problem, the triangle with vertices at (1,1), (2,0) and (0,0) is codified with the number 2141. The area of this triangle is 1.

<p><br>

*******InputConstraints*******

<p>The input consists of several test cases. Each test case is given in a single line of the input by a natural number representing a polygon. The end of the test cases is indicated with *.

<p><br>

*******OutputConstraints*******

<p>One line per test case, preserving the input order. Each output line contains a decimal number telling the area of the corresponding encoded polygon. Areas must be printed with 1 decimal place, truncating less significative decimal places.

<p><br>

*******IOTestCases*******


<pre>
<b>Input:</b>
2141
206
157895330
*

<b>Output:</b>
1.0
0.5
1.0
</pre>


______________________________________________________
AIBOHP||||||true||||||


<p>BuggyD suffers from AIBOHPHOBIA - the fear of Palindromes.  A palindrome is a string that reads the same forward and backward.</p>

<p>To cure him of this fatal disease, doctors from all over the world discussed his fear and decided to expose him to large number of palindromes.  To do this, they decided to play a game with BuggyD.  The rules of the game are as follows:</p>

<p>BuggyD has to supply a string <b>S</b>. The doctors have to add or insert characters to the string to make it a palindrome.  Characters can be inserted anywhere in the string.</p>

<p>The doctors took this game very lightly and just appended the reverse of <b>S</b> to the end of <b>S</b>, thus making it a palindrome.  For example, if <b>S</b> = <tt>"fft"</tt>, the doctors change the string 
to <tt>"ffttff"</tt>.</p>

<p>Nowadays, BuggyD is cured of the disease (having been exposed to a large number of palindromes), but he still wants to continue the game by his rules. He now asks the doctors to insert the minimum number of characters needed to make <b>S</b> a palindrome.  Help the doctors accomplish this task.</p>

<p>For instance, if <b>S</b> = <tt>"fft"</tt>, the doctors should change the string to <tt>"tfft"</tt>, adding only 1 character.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of one line, the string <b>S</b>.  The length of <b>S</b> will be no more than 6100 characters, and <b>S</b> will contain no whitespace characters.</p>


*******OutputConstraints*******


<p>For each test case output one line containing a single integer denoting the minimum number of characters that must be inserted into <b>S</b> to make it a palindrome.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
fft

<b>Output:</b>
1
</pre>



______________________________________________________
ANGELS||||||false||||||

<p>It's the year 21546 AD, and due to increased population (you wouldn't believe me if I gave you the actual numbers), land has become very expensive. Because of the lack of space, Heaven and Hell were built in the same area. The area can be represented as a grid of <b>X</b> ? <b>Y</b> unit squares. Some of the squares were captured by the Devil (and thus belong to Hell) and the rest is the Almighty's property.  On each square, a room has been built with transparent glass walls.  However, some of the heavenly rooms are already occupied by Angels.  For security purposes, rooms occupied by Angels have concrete opaque walls.</p>

<p>Recently many fighters were killed in a tournament. Fighting is no longer considered cruel, so all the fighters will deserve spots in heaven. However, because of the space shortage, all of them may not be able to recieve a spot in heaven.  The fighters still hold a grudge against each other so a fighter cannot be placed in a room from which he can see any other fighter.  A fighter can only see in the four cardinal directions (North, South, East and West).  He cannot look diagonally or in any other direction.</p>

<p>Find the maximum number of fighters who can have a heavenly room.</p>


______________________________________________________
COMCB||||||true||||||


<p>BuggyD has always been fascinated with chess boards (though he really sucks at chess).  He makes an observation that a chess board is complete with respect to knights and rooks and incomplete with respect to bishops (unless the dimensions are 1 ? 1).  A complete chess board is one in which it is possible to traverse all the squares starting from one possible square.  Knights have always been his favourite pieces and he has decided to analyze completeness with respect to knights.  Given the dimesions of the chess board help BuggyD find the lexicographically first path that visits all squares of a chess board with a knight.</p>

<p>Each square must be traversed only once.  Note that a knight can only move two squares in one direction and one square perpendicular to the previous direction.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of a single line cotaining two integers (<b>X</b> and <b>Y</b>) separated by a single space, specifying the dimensions of the chess board.  The numbers 1 to <b>X</b> denote rows and the capital letters A to Y denote the coloumns. Each square is represented by its column index followed by it's row index - for example, <tt>B4</tt> denotes the square in the 4th row and 2nd column.</p>

<p>The total number of squares on the chess board will be no more than 26.


*******OutputConstraints*******

<p>For each test case output one line consisting of the lexicographically first path of the knight, or "-1" (quotes for clarity) if the chess board is incomplete with respect to a knight.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4 5

<b>Output:</b>
A1B3C1A2B4D3E1C2D4E2C3A4B2D1E3C4A3B1D2E4
</pre>



______________________________________________________
FASHION||||||true||||||


<p>A fashion show rates participants according to their level of hotness.  Two different fashion shows were organized, one for men and the other for women. A date for the third is yet to be decided ;) .</p>

<p>Now the results of both fashion shows are out.  The participants of both the fashion shows have decided to date each other, but as usual they have difficuly in choosing their partners. The Maximum Match dating serive (MMDS) comes to their rescue and matches them in such a way that that maximizes the hotness bonds for all couples.</p>

<p>If a man has been rated at hotness level <tt>x</tt> and a women at hotness level <tt>y</tt>, the value of their hotness bond is <tt>x*y</tt>.</p>

<p>Both fashion shows contain <b>N</b> participants each. MMDS has done its job and your job is to find the sum of hotness bonds for all the couples that MMDS has proposed.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of 3 lines:</p>

<ul>
<li>The first line contains a single integer <b>N</b> (1 <= <b>N</b> <= 1000).</li>
<li>The second line contains <b>N</b> integers separated by single spaces denoting the hotness levels of the men.</li>
<li>The third line contains <b>N</b> integers separated by single spaces denoting the hotness levels of the women.</li>
</ul>

<p>All hotness ratings are on a scale of 0 to 10.</p>


*******OutputConstraints*******

<p>For each test case output a single line containing a single integer denoting the sum of the hotness bonds for all pairs that MMDS has proposed.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
1 1
3 2
3
2 3 2
1 3 2

<b>Output:</b>
5
15
</pre>



______________________________________________________
FAVDICE||||||true||||||


<p>BuggyD loves to carry his favorite die around.  Perhaps you wonder why it's his favorite?  Well, his die is magical and can be transformed into an N-sided unbiased die with the push of a button.  Now BuggyD wants to learn more about his die, so he raises a question:</p>

<p>What is the expected number of throws of his die while it has <b>N</b> sides so that each number is rolled at least once?</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of a single line containing a single integer <b>N</b> (1 <= <b>N</b> <= 1000) - the number of sides on BuggyD's die.</p>


*******OutputConstraints*******

<p>For each test case, print one line containing the expected number of times BuggyD needs to throw his <b>N</b>-sided die so that each number appears at least once.  The expected number must be accurate to 2 decimal digits.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1
12

<b>Output:</b>
1.00
37.24
</pre>



______________________________________________________
FPOLICE||||||true||||||


<p>Dhamaka Singh (a crook) has just robbed a bank and would like to get out of the country as soon as possible. But there is a slight problem, the police!  On his way out of the country he has to pass through some police stations. Each police station has a certain risk (for Dhamaka Singh) associated with it.  He wants to get to the airport within a certain time <b>T</b> or else he'll miss his flight.  He also wants to take a path that minimizes the total risk associated with it.  Help Dhamaka Singh get out of the country.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>The first line of each test case contains 2 integers <b>N</b> (3 <= <b>N</b> 100) and <b>T</b> (1 <= <b>T</b> <= 250), denoting the number of police stations and the total time he has to reach the airport, respectively.</p>

<p>Dhamaka Singh has to start from the first police station and reach the <b>N</b><sup>th</sup> one (the airport is just after the <b>N</b><sup>th</sup> police station).  You can consider the time taken between the <b>N</b><sup>th</sup> police station and the airport to be negligible.</p>

<p>Next there are <b>N</b> lines with <b>N</b> numbers in each line, separated by single spaces.  All numbers are separated by a single space. The j<sup>th</sup> integer in the i<sup>th</sup> line represents the time taken to reach the j<sup>th</sup> police station from the i<sup>th</sup> police station.

<p>Next there are another <b>N</b> lines with <b>N</b> numbers in each line.  All numbers are separated by a single space.  The j<sup>th</sup> integer in the i<sup>th</sup> line represents the risk involved in travelling to the j<sup>th</sup> police station from the i<sup>th</sup> police station.</p>


*******OutputConstraints*******

<p>For each test case output one line containing 2 integers separated by a single space.</p>

<p>The first integer denotes the minimum total risk to reach the airport.  The second integer denotes the minimum time required to reach the airport at the minimum total risk.</p>

<p>If it is impossible to reach the airport within time <b>T</b> (inclusive), just print "-1" (quotes for clarity).</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4 10
0 6 2 3
6 0 2 3
3 1 0 2
3 3 2 0
0 2 2 7
2 0 1 2
2 2 0 5
7 2 5 0

<b>Output:</b>
4 9
</pre>



______________________________________________________
HUBULLU||||||true||||||


<p>After duelling in quake (a multiplayer game), Airborne and Pagfloyd decide do test themselves out in another game called Hubulullu.  The rules of the game are as follows:</p>

<p><b>N</b> wooden pieces (marked with numbers 1 to N) are placed in a transparent bottle.  On his turn the first player takes out some piece (numbered x) and all the pieces numbered by divisors of x that are present in the transparent bottle.  The second player picks another number and removes it and its divisors as well.  Play continues in an alternating fashion until all pieces have been removed from the bottle.  The player who removes the last piece from the bottle wins the game.</p>

<p>Both players play optimally.  Given <b>N</b> (the number of wooden pieces in the transparent bottle initially) and the name of the player who starts the game, determine the winner.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<P>Each test case consists of a single line containing two integers separated by a single space.  The first integer is <b>N</b> (1 <= <b>N</b> <= 2000000000), indicating the number of pieces, and the second integer indicates the player who starts - "0" means Airborne starts the game and "1" means Pagfloyd starts the game (quotes for clarity).


*******OutputConstraints*******

<p>For each test case output one line containing either "Airborne wins." or "Pagfloyd wins."</p>

<p>For each N, it's possible to determine a winner if both players play optimally.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
1
1 0

<b>Output:</b>
Airborne wins.
</pre>



______________________________________________________
MATSUM||||||true||||||


<p>A N ? N matrix is filled with numbers.  BuggyD is analyzing the matrix, and he wants the sum of certain submatrices every now and then, so he wants a system where he can get his results from a query.  Also, the matrix is dynamic, and the value of any cell can be changed with a command in such a system.</p>

<p>Assume that initially, all the cells of the matrix are filled with 0.  Design such a system for BuggyD.  Read the input format for further details.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>The first line of each test case contains a single integer <b>N</b> (1 <= <b>N</b> <= 1024), denoting the size of the matrix.</b>
<p>A list of commands follows, which will be in one of the following three formats (quotes are for clarity):</p>

<ol>
<li><tt>"SET x y num"</tt> - Set the value at cell (x, y) to num (0 <= x, y < <b>N</b>).</li>
<li><tt>"SUM x1 y1 x2 y2"</tt> - Find and print the sum of the values in the rectangle from (x1, y1) to (x2, y2), inclusive.  You may assume that x1 <= x2 and y1 <= y2, and that the result will fit in a signed 32-bit integer.</li>
<li><tt>"END"</tt> - Indicates the end of the test case.</li>
</ol>


*******OutputConstraints*******

<p>For each test case, output one line for the answer to each "SUM" command.  Print a blank line after each test case.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
SET 0 0 1
SUM 0 0 3 3
SET 2 2 12
SUM 2 2 2 2
SUM 2 2 3 3
SUM 0 0 2 2
END

<b>Output:</b>
1
12
12
13
</pre>

<center><b>Warning: large Input/Output data, be careful with certain languages</b></center>


______________________________________________________
EIGHTS||||||true||||||


<p>Pattern Matchers have been designed for various sorts of patterns.  Mr. HKP likes to observe patterns in numbers.  After completing his extensive research on the squares of numbers, he has moved on to cubes.  Now he wants to know all numbers whose cube ends in 888.</p>

<p>Given a number <b>k</b>, help Mr. HKP find the k<sup>th</sup> number (indexed from 1) whose cube ends in 888.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of a single line containing a single integer <b>k</b> (1 <= <b>k</b> <= 2000000000000).</p>


*******OutputConstraints*******


<p>For each test case, output a single integer which denotes the k<sup>th</sup> number whose cube ends in 888.  The result will be less than 2<sup>63</sup>.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
1

<b>Output:</b>
192
</pre>



______________________________________________________
UPSUB||||||true||||||


<p>If x = a<sub>0</sub>a<sub>1</sub>a<sub>2</sub>...a<sub>n-1</sub> is a string where a<sub>i</sub> denotes the character at index i, a subsequence a<sub>j0</sub>a<sub>j1</sub>a<sub>j2</sub>...a<sub>jn</sub> is called an upsubsequence if a<sub>j0</sub> <= a<sub>j1</sub> <= a<sub>j2</sub> <= ... <= a<sub>jn</sub> and j0 < j1 < j2 < ... < jn.</p>

<p>A maximal upsubsequence of a string is defined as the upsubsequence of maximum length.  BuggyD observes that a string <b>x</b> can have many maximal upsubsequences.  Help him find all the maximal upsubsequences in <b>x</b>.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>Each test case consists of a single line containing a string <b>x</b>, where the length of <b>x</b> is no more than 100.  <b>x</b> will not contain any spaces, tabs or other whitespace characters.</p>


*******OutputConstraints*******

<p>For each test csae, output all of the maximal upsubsequences of <b>x</b> in lexicographical order.  Print a blank line after each test case.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
abcbcbcd

<b>Output:</b>
abbbcd
abbccd
abcccd
</pre>



______________________________________________________
GSS1||||||true||||||


<p>You are given a sequence A[1], A[2], ..., A[N] . ( |A[i]| &#8804;  15007 , 1 &#8804; N &#8804; 50000 ). A query is defined as follows:
<br>
Query(x,y) = Max { a[i]+a[i+1]+...+a[j] ; x &#8804; i &#8804; j &#8804; y }. 
<br> 
Given M queries, your program must output the results of these queries.

*******InputConstraints*******

<center>
<ul>
<li>The first line of the input file contains the integer N.</li>
<li>In the second line, N numbers follow.</li>
<li>The third line contains the integer M.</li>
<li>M lines follow, where line i contains 2 numbers xi and yi.</li>
</center>
</ul>


*******OutputConstraints*******

<ul>
Your program should output the results of the M queries, one query per line. 
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 
-1 2 3
1
1 2
<b>Output:</b>
2
</pre>



______________________________________________________
CTRICK||||||true||||||


<p>The magician shuffles a small pack of cards, holds it face down and performs the following procedure:

<p><br> 1. The top card is moved to the bottom of the pack. The new top card is dealt face up onto the table. It is the Ace of Spades.

<p><br> 2. Two cards are moved one at a time from the top to the bottom. The next card is dealt face up onto the table. It is the Two of Spades.

<p><br> 3. Three cards are moved one at a time&#8230;

<p><br> 4. This goes on until the nth and last card turns out to be the n of Spades.

<p><br>This impressive trick works if the magician knows how to arrange the cards beforehand (and knows how to give a false shuffle). Your program has to determine the initial order of the cards for a given number of cards, 1 &#8804; n &#8804; 20000.

<p><br>

*******InputConstraints*******

<p>On the first line of the input is a single positive integer, telling the number of test cases to follow. Each case consists of one line containing the integer n.

<br>

*******OutputConstraints*******

<p>For each test case, output a line with the correct permutation of the values 1 to n, space separated. The first number showing the top card of the pack, etc&#8230;


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
5

<b>Output:</b>
2 1 4 3
3 1 4 5 2
</pre>


______________________________________________________
SUDOKU||||||true||||||


<p>A Sudoku grid is a 16x16 grid of cells grouped in sixteen 4x4 squares, where some cells are
filled with letters from A to P (the first 16 capital letters of the English alphabet), as shown in
the figure. The game is to fill all the empty grid cells with letters from A to P such that each letter
from the grid occurs once only in the line, the column, and the 4x4 square it occupies. The initial
content of the grid satisfies the constraints mentioned above and guarantees a unique solution. 
<P>
<BR>

<DIV ALIGN="CENTER"><TABLE COLS=16 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY>
<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP bgcolor="#edc7f0"><TT><text color="white">A </TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD></TR>

</TBODY><TBODY>

<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#c8ccef"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD  bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD></TR>
</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A </TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef"></TD></TR>
</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#c8ccef"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#edc7f0"></TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0"></TD></TR>

</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER">a) Sudoku grid
</DIV>
<P>
<DIV ALIGN="CENTER"></DIV>
<P>
<BR>
<DIV ALIGN="CENTER"><TABLE COLS=16 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>J</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>H </TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>P</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>I</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD></TR>

</TBODY><TBODY>
<TR><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>I</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>A</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>F</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>J</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>O</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>E</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>C</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>G</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>L</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>D</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>P</TT> </TD><TD bgcolor="#c8ccef" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>B</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>H</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>M</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>N</TT> </TD><TD bgcolor="#edc7f0" VALIGN=BASELINE ALIGN=CENTER NOWRAP> <TT>K</TT> </TD></TR>

</TBODY>
</TABLE>

</DIV>
<P>
<DIV ALIGN="CENTER">b) Solution


*******InputConstraints*******

<p>The first line of the input contains an integer K - determining the number of datasets (K<=10). Each data set encodes a grid and contains 16 strings on 16 consecutive lines as shown in the example input below. The ith string stands for the ith line of the grid, is 16 characters long, and starts from the first position of the line. String characters are from the set {A,B,&#8230;,P,-}, where &#8211; (minus) designates empty grid cells. The data sets are separated by single empty lines.


*******OutputConstraints*******

<p>For each data set in the input print the completed 16x16 Sudoku as specified by the rules above. The program prints the solution of the input encoded grids in the same format and order as used for input. The output for each data set should be separated by single empty lines.


*******IOTestCases*******


<pre>
<b>Input:</b>

1
--A----C-----O-I 
-J--A-B-P-CGF-H-
--D--F-I-E----P-
-G-EL-H----M-J--
----E----C--G---
-I--K-GA-B---E-J 
D-GP--J-F----A--
-E---C-B--DP--O-
E--F-M--D--L-K-A 
-C--------O-I-L-
H-P-C--F-A--B---
---G-OD---J----H 
K---J----H-A-P-L 
--B--P--E--K--A-
-H--B--K--FI-C--
--F---C--D--H-N-

<b>Output:</b>

FPAHMJECNLBDKOGI 
OJMIANBDPKCGFLHE 
LNDKGFOIJEAHMBPC 
BGCELKHPOFIMAJDN 
MFHBELPOACKJGNID 
CILNKDGAHBMOPEFJ 
DOGPIHJMFNLECAKB 
JEKAFCNBGIDPLHOM 
EBOFPMIJDGHLNKCA 
NCJDHBAEKMOFIGLP 
HMPLCGKFIAENBDJO 
AKIGNODLBPJCEFMH 
KDEMJIFNCHGAOPBL 
GLBCDPMHEONKJIAF 
PHNOBALKMJFIDCEG 
IAFJOECGLDPBHMNK
</pre>



______________________________________________________
NSTEPS||||||true||||||


<p>Starting from point (0,0) on a plane, we have written all non-negative integers 0, 1, 2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.</p>
<p>&nbsp;</p>
<img src="http://www.spoj.pl../../../content/steinersp:nsteps.gif" border="0" alt="Illustration" />
<p><br /><br />You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...10000.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each point in the input, write the number written at that point or write No Number if there is none.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
4 2
6 6
3 4

<strong>Output:</strong>
6
12
No Number
</pre>


______________________________________________________
TOE1||||||true||||||


<p>Tic Tac Toe is a child's game played on a 3 by 3 grid. One player, X, starts by placing an X at an unoccupied grid position. Then the other player, O, places an O at an unoccupied grid position. Play alternates between X and O until the grid is filled or one player's symbols occupy an entire line (vertical, horizontal, or diagonal) in the grid.

<p><br>We will denote the initial empty Tic Tac Toe grid with nine dots. Whenever X or O plays we fill in an X or an O in the appropriate position. The example below illustrates each grid configuration from the beginning to the end of a game in which X wins.

<p><br>
<center><img src='/content/steinersp:tictactoe.png'alt='subir imagenes' border='0'></center>
<p><br><br>

Your job is to read a grid and to determine whether or not it could possibly be part of a valid Tic Tac Toe game. That is, is there a series of plays that can yield this grid somewhere between the start and end of the game?

<p><br>

*******InputConstraints*******

<p>The first line of input contains N, the number of test cases. 4N-1 lines follow, specifying N grid configurations separated by empty lines.

<br>

*******OutputConstraints*******

<p>For each case print "yes" or "no" on a line by itself, indicating whether or not the configuration could be part of a Tic Tac Toe game.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
X.O
OO.
XXX

O.X
XX.
OOO

<b>Output:</b>
yes
no
</pre>



______________________________________________________
TOE2||||||true||||||


<p>In the game of tic-tac-toe, two players take turns marking squares of an initially empty 3 ? 3 grid with either X&#8217;s or O&#8217;s. The first player always marks squares using X&#8217;s, whereas the second player always marks squares using O&#8217;s. If at any point during the game either player manages to mark three consecutive squares in a row, column, or diagonal with his/her symbol, the game terminates.

<p><br>
Given a board configuration, your goal is to determine whether the board configuration represents the possible final state of a valid tic-tac-toe game.

<p><br>

*******InputConstraints*******

<p>The input test file will contain multiple cases. Each test case consists of a single line containing 9 characters, which represent the 9 squares of a tic-tac-toe grid, given one row at a time. Each character on the line will either be &#8216;X&#8217;, &#8216;O&#8217; (the letter O), or &#8216;.&#8217; (indicating an unfilled square). The end-of-file is marked by a single line containing the word &#8220;end&#8221;.

<p><br>

*******OutputConstraints*******

<p>For each input test case, write a single line containing either the word &#8220;valid&#8221; or &#8220;invalid&#8221; indicating whether the given board configuration is the final state of some possible tic-tac-toe game.

<p><br>

*******IOTestCases*******


<pre>
<b>Input:</b>
XXXOO.XXX
XOXOXOXOX
OXOXOXOXO
XXOOOXXOX
XO.OX...X
.XXX.XOOO
OOXXXOOXO
end

<b>Output:</b>
invalid
valid
invalid
valid
valid
invalid
invalid
</pre>



______________________________________________________
JAVAC||||||true||||||


<p>Apologists of Java and C++ can argue for hours proving each other that their programming language is the best one. Java people will tell that their programs are clearer and less prone to errors, while C++ people will laugh at their inability to instantiate an array of generics or tell them that their programs are slow and have long source code.

<p><br>
Another issue that Java and C++ people could never agree on is identifier naming. In Java a multiword identifier is constructed in the following manner: the first word is written starting from the small letter, and the following ones are written starting from the capital letter, no separators are used. All other letters are small. Examples of a Java identifier are javaIdentifier, longAndMnemonicIdentifier, name, nEERC.

<p><br>
Unlike them, C++ people use only small letters in their identifiers. To separate words they use underscore character &#8216;_&#8217;. Examples of C++ identifiers are c_identifier, long_and_mnemonic_identifier, name (you see that when there is just one word Java and C++ people agree), n_e_e_r_c.

<p><br>
You are writing a translator that is intended to translate C++ programs to Java and vice versa. Of course, identifiers in the translated program must be formatted due to its language rules &#8212; otherwise people will never like your translator.

<p><br>
The first thing you would like to write is an identifier translation routine. Given an identifier, it would detect whether it is Java identifier or C++ identifier and translate it to another dialect. If it is neither, then your routine should report an error. Translation must preserve the order of words and must only change the case of letters and/or add/remove underscores.

<p><br>

*******InputConstraints*******

<p>The input file consists of several lines that contains an identifier. It consists of letters of the English alphabet and underscores. Its length does not exceed 100.

<p><br>

*******OutputConstraints*******

<p>If the input identifier is Java identifier, output its C++ version. If it is C++ identifier, output its Java version. If it is none, output 'Error!' instead.

<p><br>

*******IOTestCases*******


<pre>
<b>Input:</b>
long_and_mnemonic_identifier
anotherExample
i
bad_Style

<b>Output:</b>
longAndMnemonicIdentifier
another_example
i
Error!
</pre>



______________________________________________________
DEADFR||||||true||||||


<p>Mike is frantically scrambling to finish his thesis at the last minute. He needs to assemble all his research notes into vaguely coherent form in the next 3 days. Unfortunately, he notices that he had been extremely sloppy in his calculations. Whenever he needed to perform arithmetic, he just plugged it into a calculator and scribbled down as much of the answer as he felt was relevant. Whenever a repeating fraction was displayed, Mike simply reccorded the first few digits followed by "...". For instance, instead of "1/3" he might have written down "0.3333...". Unfortunately, his results require exact fractions! He doesn't have time to redo every calculation, so he needs you to write a program (and FAST!) to automatically deduce the original fractions.

<p><br>
To make this tenable, he assumes that the original fraction is always the simplest one that produces the given sequence of digits; by simplest, he means the the one with smallest denominator. Also, he assumes that he did not neglect to write down important digits; no digit from the repeating portion of the decimal expansion was left unrecorded (even if this repeating portion was all zeroes).

<p><br>

*******InputConstraints*******

<p>There are several test cases. For each test case there is one line of input of the form "0.dddd..." where dddd is a string of 1 to 18 digits, not all zero. A line containing 0 follows the last case.

<p><br>

*******OutputConstraints*******

<p>For each case, output the original fraction.

<p><br>

*******IOTestCases*******


<pre>
<b>Input:</b>
0.2...
0.20...
0.474612399...
0

<b>Output:</b>
2/9
1/5
1186531/2500000
</pre>


______________________________________________________
MINCOUNT||||||true||||||


<p>A triangle made of coins of height h is as follows<br />
It has h coins at the base and h-1 coins one level above base and so on.(Coins are placed as shown in the figure below)<br />
And at the top most level there will be only one coin<br />
Now given h the task is to invert this triangle by moving minimum number of coins.

For example when h=4 triangle is <br />
<img src="http://www.spoj.pl/content/abhilash_i:invert" style="float:center" vspace="3" hspace="8" width="600" alt="Invert"><br/>
 
For h=4 at least 3 coins must be moved to invert it.<br>


*******InputConstraints*******

<p>In the first line N will be given and then N lines follow with each line having a integer which is the height of triangle in that test case.0&#48;&#8804;h&lt;10<sup>10</sup>;


*******OutputConstraints*******

<p>For each test case output in a seperate line the minimum number of moves required to invert the triangle.
Output fits in long long data type

*******IOTestCases*******


<pre>
<b>Inputt:</b>
1
3

<b>Output:</b>
2
</pre>



______________________________________________________
SORTBIT||||||true||||||


<!-- Always please tidy HTML code generated by MS Word and similar editors. Thank you, the admins. -->

	<p align="justify">Let's 
	consider the 32 bit representation of all integers i from m up to n 
	inclusive (m &#8804; i &#8804; n; m ? n &#8805; 0, -2^31 &#8804; m &#8804; n &#8804; 2^31-1). Note that a 
	negative number is represented in 32 bit Additional Code. That is the 32 bit 
	sequence, the binary sum of which and the 32 bit representation of the 
	corresponding positive number is 2^32 (<tt>1 
	0000 0000 0000 0000 0000 0000 0000 0000</tt> 
	in binary). </p>
	<p align="justify">For 
	example, the 32 bit representation of 6 is <tt>
	0000 0000 0000 0000 0000 0000 0000 0110</tt>
	</p>
	<p align="justify">
	and 
	the 32 bit representation of -6 is <tt>1111 1111 
	1111 1111 1111 1111 1111 1010</tt>
	</p>
	<p align="justify">
	because</p>
	<p align="justify">
	<tt>   
	0000 0000 0000 0000 0000 0000 0000 0110</tt> 
	(6) <br>
	+ <br>
	<tt>   
	1111 1111 1111 1111 1111 1111 1111 1010</tt> 
	(-6) <br>	
	-------------------------------------------------<br>
	<tt>= 1 0000 0000 0000 0000 0000 0000 0000 0000</tt> 
	(2^32) </p>
	<p align="justify">Let's 
	sort the 32 bit representations of these numbers in increasing order of the 
	number of bit 1. If two 32 bit representations that have the same number of 
	bit 1, they are sorted in lexicographical order. </p>
	<p align="justify">For 
	example, with m = 0 and n = 5, the result of the sorting will be 
	</p>
	<table border="1" cellspacing="0" cellpadding="0">
		<tr>
			<td width="10%">
			<p align="justify">
			No.</td>
			<td width="26%">
			<p align="justify">
			Decimal number</td>
			<td width="63%">
			<p align="justify">
			Binary 32 bit representation</td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			1</td>
			<td width="26%">
			<p align="justify">
			0</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0000</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			2</td>
			<td width="26%">
			<p align="justify">
			1</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0001</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			3</td>
			<td width="26%">
			<p align="justify">
			2</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0010</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			4</td>
			<td width="26%">
			<p align="justify">
			4</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0100</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			5</td>
			<td width="26%">
			<p align="justify">
			3</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0011</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			6</td>
			<td width="26%">
			<p align="justify">
			5</td>
			<td width="63%">
			<p align="justify"><tt>
			0000 0000 0000 0000 0000 0000 0000 0101</tt></td>
		</tr>
	</table>
	<p align="justify">
	with 
	m = -5 and n = -2, the result of the sorting will be </p>
	<table border="1" cellspacing="0" cellpadding="0">
		<tr>
			<td width="10%">
			<p align="justify">
			No.</td>
			<td width="26%">
			<p align="justify">
			Decimal number</td>
			<td width="63%">
			<p align="justify">
			Binary 32 bit representation</td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			1</td>
			<td width="26%">
			<p align="justify">
			-4</td>
			<td width="63%">
			<p align="justify"><tt>
			1111 1111 1111 1111 1111 1111 1111 1100</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			2</td>
			<td width="26%">
			<p align="justify">
			-5</td>
			<td width="63%">
			<p align="justify"><tt>
			1111 1111 1111 1111 1111 1111 1111 1011</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			3</td>
			<td width="26%">
			<p align="justify">
			-3</td>
			<td width="63%">
			<p align="justify"><tt>
			1111 1111 1111 1111 1111 1111 1111 1101</tt></td>
		</tr>
		<tr>
			<td width="10%">
			<p align="justify">
			4</td>
			<td width="26%">
			<p align="justify">
			-2</td>
			<td width="63%">
			<p align="justify"><tt>
			1111 1111 1111 1111 1111 1111 1111 1110</tt></td>
		</tr>
	</table>
	<p align="justify">
	 </p>
	<p align="justify">
	Given m, n 
	and k (1 &#8804; k &#8804; min{n &#8722; m + 1, 2 147 473 547}), 
	your task is to write a program to find a number corresponding to k-th 
	representation in the sorted sequence. </p>

	
*******InputConstraints*******

	<p>
	The input 
	consists of several data sets. The first line of the input file contains the 
	number of data sets which is a positive integer and is not bigger than 1000. 
	The following lines describe the data sets. </p>
	<p align="justify">
	For each 
	data set, the only line contains 3 integers m, n 
	and k separated by space. </p>

	
*******OutputConstraints*******

	<p>
	For each 
	data set, write in one line the k-th number of the sorted numbers. 
	</p>

	
*******IOTestCases*******

<p>
	<pre>
<b>Sample input:</b>
2
0 5 3
-5 -2 2

<b>Sample output:</b>
2
-5 
</pre>


______________________________________________________
PALACE||||||true||||||


<p>

There is a big palace in which rooms are constructed in 
the from of a square matrix.Now these rooms have to be filled with people.
<br />
As there are conflicts between people to maintain the equilibrium total number of people must be odd in 
every row and every column.
<br />
A room can accomodate only a single person.
<br />
Given the size of palace N one has to find total number of ways people can be accomodatede in that.



*******InputConstraints*******

<p>First line consits of an integer K and then K test cases follow. 


*******OutputConstraints*******

<p>For each test case you have to output the result%98777
in a seperate line.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
<b>Output:</b>
16
</pre>




______________________________________________________
ORIGLIFE||||||true||||||


<p>Conway's <i>Game of Life</i> is not really a game, but a <i>cellular automaton</i> -- a set of rules describing interactions among adjacent cells on a grid. In our game, we have an <i>n</i> by <i>m</i> rectangular grid of cells identified by integer coordinates (<i>x, y</i>). The game progresses through a series of steps; at each step a new <i>generation</i> is computed from the current <i>generation</i>. The game begins with the <i>first generation</i>. In any given generation, which we shall call the current generation, each cell is either <i>live</i> or <i>dead</i>. In the next generation, each cell's status may change, depending on the status of its immediate neighbours in the current generation. Two distinct cells (<i>x<sub>1</sub>, y<sub>1</sub></i>) and (<i>x<sub>2</sub>, y<sub>2</sub></i>) are immediate neighbours if they are horizontally, vertically, or diagonally adjacent; that is, if |<i>x<sub>1</sub> - x<sub>2</sub></i> &#8804; 1| and |<i>y<sub>1</sub> - y<sub>2</sub></i> &#8804; 1|. Each cell that is not on the border of the grid has eight immediate neighbours. There are three integer parameters (<i>a, b, c</i>) which affect the game. The rules of the game are:
<ul>
<li>If a live cell has fewer than <i>a</i> live neighbours in the current generation it dies of loneliness. That is, it is dead in the next generation.</li>
<li>If a live cell has more than <i>b</i> live neighbours in the current generation it dies of overcrowding. That is, it is dead in the next generation.</li>
<li>If a dead cell has more than <i>c</i> live neighbours in the current generation it is born. That is, it is live in the next generation.</li> 
<li>Otherwise, a cell's status is unchanged from the current generation to the next.</li>
</ul>
<p>This process continues indefinitely. Eventually, a generation may be repeated in which case life goes on forever. Or all the cells may die. Similarly, if we explore previous generations that may have led to the current one, we may find one that is necessarily a first generation; that is, it could not have been created from a previous generation by following the rules. Such a generation is known as a Garden of Eden. Given the game parameters and the current generation, you are to determine whether or not the game might have started with a Garden of Eden. If so, output the number of steps necessary to reach the current generation from the Garden of Eden. If there are several possible answers, find the smallest. If there is none, output -1.


*******InputConstraints*******
 <p>Input begins with a single integer, the number of test cases. For each test case, there are <i>m</i>+1 lines of input in total. The first line contains the game parameters, which are five integers <i>m,n,a,b,c</i> each separated by one space. The constraints are 1&#8804;<i>m</i>&#8804;4, 1&#8804;<i>n</i>&#8804;5, 1&#8804;<i>a</i>&lt;<i>b</i>&#8804;8, 1&#8804;<i>c</i>&#8804;8. The next <i>m</i> lines each contain a string of <i>n</i> characters representing a row of the current generation. In the string, an asterisk ("*") indicates live while a period (".") indicates dead.
There are no blank lines between test cases.


*******OutputConstraints*******

<p>Output is one integer per test case denoting the minimum number of steps required to reach the input from a Garden of Eden. If there is no Garden of Eden, output -1.


*******IOTestCases*******

<pre><b>Input:</b>
1
4 5 2 3 2
.****
.****
.****
.****

<b>Output:</b>
2

<b>Output Explanation:</b>
</pre>
<p>Assume the sample input is the "current" generation. A possible previous generation is
<pre>
**.**
..*.*
....*
*****
</pre>
<p>The above generation can be derived from the following previous generation
<pre>
.****
**.*.
*****
*..*.
</pre> 
<p>
This generation cannot be derived from any other generation. Furthermore, there is no shorter
series of generations that has these properties.



______________________________________________________
CNEASY||||||true||||||


<p>Christy C. Coder is traveling to Waterloo for a programming competition. On the way, she stops in Toronto to do some sightseeing. The unfortunate thing about travelling is that everyone back home expects her to bring back pictures of everything. Christy hates taking pictures: it makes her look like such a tourist! Fortunately, Christy has a plan to make her picture-taking quite painless.
<p>At 553 m tall, CN Tower is the world's tallest free-standing building. 351 m up the tower is the "360" rotating restaurant, which rotates a full 360 degrees every 72 minutes. From there, Christy can see the whole city, and take close-up pictures of all the landmarks using her fancy new 100x optical zoom camera. Since the restaurant itself rotates, she only needs to stand in one place to take pictures in all directions.
<p>The waiters insist that she order something or leave, and Christy is not interested in any of the items on the menu. Therefore, she must act quickly before she gets kicked out. Given the locations of the landmarks of which Christy wants to take a picture, your task is to determine the minimum amount of time that she must spend in the restaurant in order for it to rotate enough to bring all the landmarks in view. Assume that Christy always points her camera exactly perpendicular to the window to minimize distortion due to the glass. Note that multiple landmarks may occupy the same (angular) position, and these landmarks would only require one photograph to capture them.
<p>Since the restaurant staff only realize she is a tourist once she starts taking pictures, we begin measuring the time required once she takes her first picture. Therefore, Christy can move to any position in the restaurant without hassle from the restaurant staff and begin taking pictures from there.

*******InputConstraints*******
 <p>The first line of input consists of the number of test cases. For each test case, the first line is an integer <i>n</i> (2 &le; <i>n</i> &le; 1000), the number of landmarks Christy wants to photograph. Each of the following <i>n</i> lines specify a landmark. Each landmark specification consists of the landmark name (a string of uppercase and lowercase letters of length at most 40 characters), a space, and the compass angle <i>d</i>, in degrees, to the landmark from the CN Tower (0 = north, 90 = east, 180 = south, 270 = west). Note that <i>d</i> is a real number which satisfies 0 &le; <i>d</i> &lt; 360, with <i>d</i> specified to the hundredth of a degree (i.e., at most two decimal places).

*******OutputConstraints*******
 <p>For each test case, output a single integer, the minimum number of seconds that Christy must remain in the restaurant. If the time is not an integer number of seconds, round it up to the nearest second (i.e., take the ceiling of the number).

*******IOTestCases*******

<pre><b>Input:</b>
1
5
CasaLoma 231.0
OntarioParliament 123.0
SkyDome 75.0
RoyalYorkHotel 340.0
PearsonAirport 165.0

<b>Output:</b>
3012</pre>


______________________________________________________
CNHARD||||||true||||||


<p>Christy C. Coder is traveling to Waterloo for a programming competition. On the way, she stops in Toronto to do some sightseeing. The unfortunate thing about travelling is that everyone back home expects her to bring back pictures of everything. Christy hates taking pictures: it makes her look like such a tourist! Fortunately, Christy has a plan to make her picture-taking quite painless.
<p>At 553 m tall, CN Tower is the world's tallest free-standing building. 351 m up the tower is the "360" rotating restaurant, which rotates a full 360 degrees every 72 minutes. From there, Christy can see the whole city, and take close-up pictures of all the landmarks using her fancy new 100x optical zoom camera. Since the restaurant itself rotates, she only needs to stand in one place to take pictures in all directions.
<p>The elevator normally takes 61 seconds to get from the ground up to the rotating restaurant. Unfortunately, when Christy arrives at the CN Tower, she learns that the elevator is out of service, so she has to take the stairs, which takes somewhat longer. Christy arrives at the top at 9:36 pm, by which time it is dark. She can only take pictures with a very powerful flash, which takes a long time to recharge between pictures. While the flash is charging, she cannot take any pictures. Thus, Christy needs a new program to calculate the minimum time that she must spend in the restaurant in order for it to rotate enough to bring all the landmarks in view, and taking into consideration the charging time of the flash. In addition to these difficulties, the restaurant closes at midnight. Thus, Christy may not have enough time to take pictures of all the landmarks.
<p>As before, assume that Christy does not move around in the restaurant after choosing her initial position, but waits for it to rotate to the angle required to take each picture. As with the daytime problem (CNEASY), Christy can (very quickly) pick her initial position, since the restaurant is not that big. Christy always points her camera exactly perpendicular to the window to minimize distortion due to the glass. After taking the last picture, Christy must stay in the restaurant until her flash recharges. Since it is dark outside, if more than one landmark occupies an angular position, Christy can capture <b>only one one landmark per photo</b> (in order to keep the desired landmark in focus, blurring all others).

*******InputConstraints*******
 <p>The first line of input consists of the number of test cases. For each test case, the first line is an integer <i>n</i> (1 &le; <i>n</i> &le; 1000), the number of landmarks Christy wants to photograph. Each of the following <i>n</i> lines specify a landmark. Each landmark specification consists of the landmark name (a string of uppercase and lowercase letters), a space, and the compass angle, in degrees (specified with a maximum of 2 decimal places), to the landmark from the CN Tower (0 = north, 90 = east, 180 = south, 270 = west). Finally, the last line contains the amount of time, in seconds, required for the flash to charge.


*******OutputConstraints*******
 <p>For each test case, output a single integer, the minimum number of seconds that Christy must remain in the restaurant. If the time is not an integer number of seconds, round it up to the nearest second. If it is not possible for Christy to take all the pictures before closing, instead output "not possible".

*******IOTestCases*******

<pre>
<b>Input:</b>
1
5
CasaLoma 231.0
OntarioParliament 123.0
SkyDome 75.0
RoyalYorkHotel 340.0
PearsonAirport 165.0
10

<b>Output:</b>
3022</pre>


______________________________________________________
PNTBYNUM||||||true||||||


<p>Years ago, there was a really bad craft/hobby called <i>paint-by-numbers</i>: you were given a line drawing, with numbers in each enclosed region, and the number corresponded to a particular colour. An example is shown below (unsolved on the left; solved on the right):<p>
<img src="http://www.spoj.pl/content/nneonneo:PNTBYNUM_squnsolved.jpg" height="220"><img src="http://www.spoj.pl/content/nneonneo:PNTBYNUM_squnsolved.jpg" height="220"><br />(images from <a href="http://thislife.org/paintings/">ThisLife.org</a>)
<p>The problem you have to solve is much more linear, in a way.
<p>You will be given an <i>n</i>-by-<i>m</i> grid (1 &le; <i>n, m</i> &le; 32) which you will "colour" in with either a dot ('.') or a star ('*').
<p>Of course, the grid will not be specified in the usual paint-by-numbers way, since this would be too easy.
<p>Instead, you will you have to infer which cells are blank and which contain a star. The only information you will be given are a collection of <i>n + m</i> sequences of numbers, one sequence for each row and column. The sequence will indicate the size of each continuous block of stars. There must be at least one dot between two consecutive blocks of stars.
<p>An example is shown below (which is supposed to look fish-like):<p><img src="http://www.spoj.pl/content/nneonneo:PNTBYNUM_example.png" height="180">
<p>You may notice that some paint-by-number patterns are not uniquely solvable. For this problem, you may assume that <i>any</i> solution which satisfies the specification is correct.

*******InputConstraints*******
 <p>Input begins with a line with the number of test cases. Each test case consists of a total of <i>n + m</i> + 2 lines. The first line of the test case consists of an integer <i>n</i> (1 &le; <i>n</i> &le; 32), the number of rows. The second line consists of an integer <i>m</i> (1 &le; <i>m</i> &le; 32), the number of columns. On the next <i>n</i> lines, there will be sequences which describe each of the <i>n</i> rows (from top to bottom). Each line will contain some positive integers, with a space between adjacent integers, and the sequence will terminate with the integer 0. On the next <i>m</i> lines describe the <i>m</i> columns (from left to right), the same format as the rows are specified.

*******OutputConstraints*******
 <p>Output consists of <i>n</i> lines for each corresponding test case, each line composed of <i>m</i> characters, where each character is either a dot ('.') or a star ('*'). Separate test cases with a blank line.

*******IOTestCases*******

<pre><b>Input:</b>
2
4
7
2 2 0
5 0
5 0
2 2 0
1 1 0
1 1 0
2 0
2 0
4 0
4 0
2 0
4
4
2 1 0
3 0
3 0
1 1 0
4 0
3 0
3 0
1 0

<b>Output:</b>
**..**.
..*****
..*****
**..**.

**.*
***.
***.
*.*.
</pre>


______________________________________________________
CFRAC2||||||true||||||


<p>A simple continuous fraction has the form:
<p><br>
<center><img src='/content/steinersp:cfrac.jpg'alt='subir imagenes' border='0'></center>

<p><br><br>where the ai&#8217;s are integer numbers.

<p><br>The previous continuous fraction could be noted as [a1, a2, . . . , an]. It is not difficult to show that any rational number p / q , with integers p > q > 0, can be represented in a unique way by a simple continuous fraction with n terms, such that p / q = [a1, a2, . . . , an&#8722;1, 1], where n and the ai&#8217;s are positive natural numbers.

<p><br>Now given a simple continuous fraction, your task is to calculate a rational number which the continuous fraction most corresponds to it. 

<p><br>

*******InputConstraints*******

<p>Input for each case will consist of several lines. The first line is two integer m and n,which describe a char martrix,then followed m lines,each line cantain n chars.
The char martrix describe a continuous fraction The continuous fraction is described by the following rules:

<p><br>
<li>Horizontal bars are formed by sequences of dashes `-'.

<p>
<br><li>The width of each horizontal bar is exactly equal to the width of the denominator under it.
<br><li>Blank characters should be printed using periods `.'

<p>
<br><li>The number on a fraction numerator must be printed center justified. That is, the number of spaces at either side must be same, if possible; in other case, one more space must be added at the right side.
</p>

<p>The end of the input is indicated by a line containing 0 0. </p>


*******OutputConstraints*******

<p>Output will consist of a series of cases, each one in a line corresponding to the input case. A line describing a case contains p and q, two integer numbers separated by a space, and you can assume that 10^20 > p > q > 0. 


*******IOTestCases*******


<pre>
<b>Input:</b>
9 17
..........1......
2.+.-------------
............1....
....4.+.---------
..............1..
........1.+.-----
................1
............5.+.-
................1
5 10
......1...
1.+.------
.........1
....11.+.-
.........1
0 0

<b>Output:</b>
75 34
13 12
</pre>



______________________________________________________
SUMFOUR||||||true||||||


<p>The SUM problem can be formulated as follows: given four lists A, B, C, D  of integer values, compute how many quadruplet (a, b, c, d ) belongs to A x B x C x D  are such that a + b + c + d = 0 . In the following, we assume that all lists have the same size n 


*******InputConstraints*******

<p>
The first line of the input file contains the size of the lists n (this value can be as large as 4000). We then have n lines containing four integer values (with absolute value as large as 2<sup>28</sup> ) that belong respectively to A, B, C and D . 


*******OutputConstraints*******

<p>Output should be printed on a single line.

*******IOTestCases*******

<pre>
<b>Input:</b>
6
-45 22 42 -16
-41 -27 56 30
-36 53 -37 77
-36 30 -75 -46
26 -38 -10 62
-32 -54 -6 45
<b>Output:</b>
5
</pre>



______________________________________________________
PARTSUM||||||true||||||


<p> Given a sequence of positive integers <var>a</var><sub>1</sub>, <var>a</var><sub>2</sub>, ..., <var>a</var><sub><var>N</var></sub>, and 1 &#8804; <var>i</var> &#8804; <var>j</var> &#8804; <var>N</var>, the partial sum from <br /><var>i</var> to <var>j</var> is <var>a</var><sub><var>i</var></sub> + <var>a</var><sub><var>i</var>+1</sub> + ... + <var>a</var><sub><var>j</var></sub>.</p>

<p>In this problem, you will be given such a sequence and two integers <var>P</var> and <var>K</var>. Your task is to find the smallest partial sum modulo <var>P</var> that is at least <var>K</var>.</p>

<p>For example, consider the following sequence of integers:</p>

<pre>12     13     15     11     16     26     11</pre>

<p>Here <var>N</var> = 7. Suppose <var>K</var> = 2 and <var>P</var> = 17. Then, the answer is 2 because 11 + 16  + 26 = 53 and 53 mod 17 is 2. On the other hand, if <var>K</var> = 0 the answer is 0 since 15 + 11 + 16 + 26 = 68 and 68 mod 17 is 0.</p>

<p>You may assume 1 &#8804; <var>N</var> &#8804; 100000.</p>


*******InputConstraints*******

<p>The first line of the input contains the number of test cases, <var>T</var>.</p>
<p>Each test case begins with a line containing three integers, <var>N</var>, <var>K</var> and <var>P</var>. This is followed by the values of <var>a</var><sub>1</sub>, <var>a</var><sub>2</sub>, ..., <var>a</var><sub><var>N</var></sub>, one per line.</p>


*******OutputConstraints*******

<p>Output one line per test case, containing the smallest partial sum modulo <var>P</var> that is at least <var>K</var>, as described above.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
7 2 17
12
13
15
11
16
26
11

<b>Output:</b>
2
</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
CHASE||||||true||||||


<p>Alice is in Wonderland. It is March and March Hare is raving mad. It begins to chase Alice. Alice runs as fast as she can, but she comes to the the edge of a quicksand pool. Now this pool has several safe spots where she may comfortably step on without being swallowed by the quicksand. She may step onto any safe spot from solid ground, but thereafter she can jump from spot to spot only in a straight line, and she cant turn back. March Hare is still hot on her heels, so she needs to know the maximum number of jumps she can make.
</p>


*******InputConstraints*******

<p>On the first line there will be a single integer n, denoting the number of test cases.
Each test case will consist of a single integer k by itself on a line, followed by k lines containing the x and y co-ordinates of the safe spots , seperated by a single space. Both coordinates are integer values. There are no leading or trailing spaces or blank lines. 0&lt;k&le;2200</p>


*******OutputConstraints*******

<p>For each case print a single integer by itself on a line, with no leading or trailing spaces. Do not print blank lines.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5
0 0
1 1
2 2
4 8
2 75
3
0 0
1 2
3 4


<b>Output:</b>
2
1
</pre>



______________________________________________________
KPMATRIX||||||true||||||


<p>The company you work in has got a secret job to do. Just a few persons know what it is all
about. To keep a secret every programmer works on a small part of the project.
<p>
Your job is as follows. You are given a matrix of integer numbers with N rows and M columns.
Also two integer numbers A and B are given. Your task is to find a number of submatrices of
a given matrix with the sum of elements between A and B inclusively.


*******InputConstraints*******

<p>The first line contains two integer numbers N and M (1 &#8804; N, M &#8804; 250).
After that matrix description follows. N lines with M numbers each. The last line contains two
integer numbers A and B (-10^9 &#8804; A &#8804; B &#8804; 10^9). All numbers separated with spaces.
It's guaranteed that for every submatrix the absolute value of sum of it's elements will not exceed 10^9.


*******OutputConstraints*******

<p>Write to the output the number of submatrices of a given matrix with sum of their elements between A and B inclusively.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
1 0 0
0 1 0
0 0 1
1 3

<b>Output:</b>
26
</pre>



______________________________________________________
KPMAZE||||||true||||||


<p>The King of Byteland likes Greek mythology very much. The most impressive myth for him is the one about Minotaur.
A creature which was imprisoned in a maze-like construction. Now The King wants to have similar maze.
He ordered to his architect to build such construction. 
<p>
The architect decided that maze will have rectangular form. Its floor will be made from large square plates.
Also there will be many walls, each of which will separate two common floor plates. From the bird's eye whole construction
will look like a grid with some cells separated by walls. The maze should be very tricky, that's why he calls the maze correct
if and only if for every two plates there is exactly one path between them. Here path is a sequence of moves between plates that
share a common side and are not separated by wall. Each plate can only appear once in a path.
<p>
Sooner or later, the architect started his work. After a couple of months he created a rectangular area with H rows
and W columns. Also he has built K walls. Sounds perfect but he was seized with a lingering doubt about correctness of
his maze.
<p>
That's why he asks you to help him. He wants to know how many different correct mazes can be built based on his
current maze i.e. you can only add new walls but not to break any of the old ones.
<p>
For example (see figure 1.) the maze size is 2x2 and there are no walls. All four ways to complete this maze are shown on the
right of the figure (new walls are dashed).
<center><img src="http://www.spoj.pl/content/kingpin:1.jpg" alt="Figure 1"></center>
<br />
<p>
Figure 2. illustrates maze of size 3x3 with 3 walls. There are exactly 4 ways to complete it.
<center><img src="http://www.spoj.pl/content/kingpin:2.jpg" alt="Figure 2"></center>
<br />
<p>
Figure 3. shows the maze that cannot be completed, because there is no path from lower right plate to upper left one.
<center><img src="http://www.spoj.pl/content/kingpin:3.jpg" alt="Figure 3"></center>


*******InputConstraints*******

<p>The first line contains two integer numbers W and H
(1 &#8804; W, H &#8804; 5). Second line contains one integer number K (K &#8805; 0). Next K lines
contain description of walls. Each wall is determined by two plates it separates. 
Thus, each line contains four integer numbers: R_1, C_1, R_2 and C_2, here
R_1 and C_1 - row and column coordinates of the first plate. Similar,
R_2 &#1080; C_2 - are coordinates of the second plate (1 &#8804; R_1, R_2 &#8804; H, 1 &#8804; C_1, C_2 &#8804; W). 
Rows are numbered from up to bottom, colums - left to right started from 1.
It is guaranteed that all walls are correct and there are no duplicates.
Walls that form perimeter of the maze will not be specified.


*******OutputConstraints*******

<p>Output the number of different correct mazes that can be built based on the given one.
There should be no leading zeroes.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 2
0

<b>Output:</b>
4

<b>Input:</b>
3 3
3
3 1 3 2
2 2 2 3
2 3 3 3

<b>Output:</b>
4

<b>Input:</b>
3 3
5
3 1 3 2
2 2 2 3
2 3 3 3
2 2 2 1
1 2 2 2

<b>Output:</b>
0
</pre>



______________________________________________________
CZ_PROB1||||||true||||||


<p>
S<sub>P2</sub> = {p | p = x<sub>1</sub><sup>2</sup> + x<sub>2</sub><sup>2</sup> for some x<sub>1</sub>, x<sub>2</sub> belonging to Z} is the set of all primes that can be represented as the sum of any two squares. The function S<sub>P2</sub>(n) gives the n<sup>th</sup> prime number from the set S<sub>P2</sub>. Now, given two integers n (0<n<501) and k (0<k<4), find p(S<sub>P2</sub>(n), k) where p(a, b) gives the number of unordered ways to sum to the given total &#8216;a&#8217; with &#8216;b&#8217; as its largest part.

For example: p(5, 2) = 3 {2+2+1, 2+1+1+1, and 1+1+1+1+1}. Here 5 is the total with 2 as the largest part.



*******InputConstraints*******

<p>The first line gives the number of test cases T followed by T lines of integer pairs, n and k. <br>
Scope: <br>
0 < T < 501 <br>
0 < n < 501 <br>
1 < S<sub>P2</sub>(n) < 7994 <br>
0 < k < 4 


*******OutputConstraints*******

<p>The p(S<sub>P2</sub>(n), k) for each n and k. Append a newline character to every test cases&#8217; answer.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2 2
3 2
5 3

<b>Output:</b>
3
7
85

</pre>



______________________________________________________
EMP||||||true||||||


<p>On some island each inhabitant is either a knight who only tells the truth, or a liar who always lies. Also, on the island there exists a university of technology where some of the inhabitants work. All of the university employees will always tell you the following two things, no matter which employee you ask:<BR><BR>

<center>     1. There are fewer than <i>N</i> employees who work more than me.</center><BR><BR>

<center>     2. At least <i>M</i> employees of the university have a larger salary than me.</center><BR><BR>

<p> It is also known that no two employees of the university have an identical salary, and no two work equally. Write a program which will compute how many persons are employed by this university. <BR>


*******InputConstraints*******

<p>The only input line contains two integers <i>N</i> and <i>M</i>, with one space between them [<i>N, M</i> <= 1000000000].</p>
 

*******OutputConstraints*******

<p> The output must contain only one integer - the total number of employees of this university, or 0 if there is no way to find the number of employees.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1 1

<b>Output:</b>
2
</pre>


______________________________________________________
CATM||||||true||||||


<p> In a rectangular field of size n by m squares there is a mouse and two cats. The mouse is the first to make a move, then each of the cats makes a move, then again its the mouse's turn, and so on. In each move both the mouse and the cats can move exactly one square vertically or horizontally. If the mouse is standing at the edge of the field then in its next move it can jump off the field and is saved from the cats. If in the next move one of the cats moves to the field with the mouse then there is no escape for the mouse ... =(<BR><BR>
You are to write a program which, knowing the initial positions of mouse and the two cats, will find out if there is any way for the mouse to escape from the cats, assuming of course that each cat will do its best to catch the mouse.<BR>


*******InputConstraints*******

<p>In the first line of input two integers n and m are given, not exceeding 100, where n is the number of rows, and m - the number of columns. The second line contains a number k [k <= 10], which defines the number of test cases for the given field. In the next k lines the initial positions of the mouse and the cats are given. The position in the field is given by two numbers: the first is the number of the row, the second is the number of the column. The first two integers are the coordinates of the mouse, the next four integers are the coordinates of the cats.</p>
 

*******OutputConstraints*******

<p> You must output k lines with answers for each test case. The answer is YES, if the mouse can escape or NO otherwise.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
3
2 2 1 1 3 3
2 3 1 3 5 2
3 2 1 2 4 3

<b>Output:</b>
NO
YES
YES
</pre>


______________________________________________________
NGM||||||true||||||


<p> Nikifor and Trofim play the following game: they write some integer smaller then 2000000000 and take turns one after another. Nikifor is the first to make a move. The turn is made by the following rule: from the written integer any non-zero digit is subtracted, and the new integer replaces the old one on the desk. For example for integer 40534, the next move can be: 40530, 40531 or 40529. The winner is the player who writes zero on the desk.<BR><BR>

Write a program to decide who will win if both players do their best.<BR>


*******InputConstraints*******

<p>The input contains the integer from which the game is started.</p>
 

*******OutputConstraints*******

<p> In the first line you must write 1 if Nikifor wins and 2 otherwise. If Nikifor wins then in the second line you must output the move in the first turn which guarantees victory for him. If there are many such moves then output any of them.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
14

<b>Output:</b>
1
4
</pre>


______________________________________________________
GEOM||||||true||||||


<p>Is there anyone who doesn't love geometry?! Just imagine: on the plane you are given a square ABCD, with vertices given in the clockwise direction. Also given is a point P which is different from all of A, B, C or D. Have you imagined it? Interested? Ok, let's continue!<BR><BR>

Through vertex A a line <i>a</i> is drawn that is perpendicular to line BP, through vertex B a line <i>b</i> is drawn that is perpendicular to line CP, through vertex C a line <i>c</i> is drawn that is perpendicular to line DP, through vertex D a line <i>d</i> is drawn that is perpendicular to line AP. Do the lines <i>a</i>, <i>b</i>, <i>c</i> and <i>d</i> cross each other in one point? Ok, it depends on what the square is and what point P is given. Write the program that discovers if these lines cross in one point, and if so, finds the coordinates of this point.<BR>


*******InputConstraints*******

<p>In the first line you are given the integer coordinates of the point in which diagonals of the square intersect. In the second line you are given one integer - the length of the side of the square. In the third line you are given the integer coordinates of point P. The integers do not exceed 100, in terms of absolute value.
</p>
 

*******OutputConstraints*******

<p>For each test case you must output YES if the sought point exsists, and NO otherwise. If you answer YES then in the second line you must output the coordinates of the intersection point. Coordinates must be rounded to one digit after the point.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
10 10
20
5 12

<b>Output:</b>
YES
8.0 5.0
</pre>


______________________________________________________
FIRM||||||true||||||


<p>There are <i>n</i> dealers in the market. Each of them has some unique goods (nobody else has the same goods). Besides, each of them wants to obtain some other goods, which exist in the market. This is rather strange, but for each kind of goods on the market there exists exactly one dealer who wants to obtain it.<BR><BR>

To prevent fraud, only exchanges in pairs are allowed in this market. Moreover, each dealer is allowed to make at most one exchange a day. But the total number of transactions isn&#8217;t limited. A transaction means that all the goods of one dealer are exchanged for all the goods of the other participating dealer (partial transactions are not allowed).<BR><BR>

You are to write a program which outputs the minimum number of days needed for each dealer to get the goods that he wants. Also output one of the possible variants of exchanges leading to this goal.<BR>


*******InputConstraints*******

<p> The first line contains an integer <i>n</i> [<i>n</i> <= 5000]. In the second line exactly <i>n</i> numbers of goods are given, which the dealers require. If integer <i>j</i> appears as the <i>i</i>-th at input, then this means that goods required by dealer <i>i</i> are initially owned by dealer <i>j</i>.</p>
 

*******OutputConstraints*******

<p>You must output the minimum number of days <i>m</i> which are needed to complete the transactions. In the next <i>m</i> lines you must output the way these transactions should be managed by the dealers. One line corresponds to one day. At the beginning of each line you must output the number of transactions on this day. After that output the pairs of dealers who exchange their goods on this day. Dealers in pairs are separated by '-' symbol. If there are many ways to perform the exchanges then output any of them.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
7
2 1 3 5 6 7 4

<b>Output:</b>
2
3 1-2 4-5 7-6
1 5-7
</pre>


______________________________________________________
KPPOLY||||||true||||||


<p>You are given a convex polygon on Cartesian coordinate system. It has projections on X and Y-axis. You can arbitrary rotate this polygon. What minimum and maximum sum of projections can you achieve?


*******InputConstraints*******

<p>First line contains one integer number N (3 &#8804; N &#8804; 100) - number of polygon's vertices. Following N lines contain vertex coordinates X<sub>i</sub> and Y<sub>i</sub>. All numbers are integers. Vertices are given in clockwise or anticlockwise direction. No two vertices coincide. No three consecutive vertices lie on the same line. All coordinates do not exceed 10000 by absolute value.


*******OutputConstraints*******

<p>Write minimum and maximum value of sum of the polygon's projections. Separate them by a space. Your answer should not differ with the correct one more than 10<sup>-6</sup>.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 0
0 1
1 1
1 0

<b>Output:</b>
2 2.828427124
</pre>



______________________________________________________
KPSUM||||||true||||||


<p>One of your friends wrote numbers 1, 2, 3, ..., N on the sheet of paper. After that he placed signs + and - between every pair of adjacent digits alternately. Now he wants to find the value of the expression he has made. Help him.
<br /><br />For example, if N=12 then
+1 -2 +3 -4 +5 -6 +7 -8 +9 -1+0 -1+1 -1+2 = 5


*******InputConstraints*******

<p>Each line contains one integer number N (1&#8804; N &#8804; 10<sup>15</sup>). Last line contains 0 and shouldn't be processed. Number of lines in the input does not exceed 40.


*******OutputConstraints*******

<p>For every line in the input write the answer on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
12
0

<b>Output:</b>
5
</pre>



______________________________________________________
KPEQU||||||true||||||


<p>You are given integer positive number N. Find the number of solutions in positive integer numbers of the following equation: <br />
<center>1/N! = 1/X + 1/Y</center>


*******InputConstraints*******

<p>Each line of input file contains one integer number N (1 &#8804; N &#8804; 10<sup>4</sup>). The last line contains 0 and shouldn't be processed. Number of lines in the input does not exceed 30.


*******OutputConstraints*******

<p>For every line in the input write the answer on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
0

<b>Output:</b>
1
3
</pre>



______________________________________________________
PT07X||||||false||||||

<p>
You are given an unweighted, undirected tree.
Write a program to find a vertex set of minimum size in this tree such that each edge has as least one of its end-points in that set.
</p>


______________________________________________________
PT07Y||||||true||||||


<p>
You are given an unweighted, undirected graph.
Write a program to check if it's a tree topology.
</p>


*******InputConstraints*******

<p>
The first line of the input file contains two integers <i>N</i> and <i>M</i> --- number of nodes and number of edges in the graph
(0 < <i>N</i> <= 10000, 0 <= <i>M</i> <= 20000). Next <i>M</i> lines contain <i>M</i> edges of that graph --- Each line contains a pair (<i>u</i>, <i>v</i>) means
there is an edge between node <i>u</i> and node <i>v</i> (1 <= <i>u</i>,<i>v</i> <= <i>N</i>).
</p>


*******OutputConstraints*******

<p>
Print <i>YES</i> if the given graph is a tree, otherwise print <i>NO</i>.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 2
1 2
2 3

<b>Output:</b>
YES
</pre>



______________________________________________________
PT07Z||||||true||||||


<p>
You are given an unweighted, undirected tree.
Write a program to output the length of the longest path (from one node to another) in that tree.
The length of a path in this case is number of edges we traverse from source to destination.
</p>


*******InputConstraints*******

<p>
The first line of the input file contains one integer <i>N</i> --- number of nodes in the tree
(0 < <i>N</i> <= 10000). Next <i>N</i>-1 lines contain <i>N</i>-1 edges of that tree --- Each line contains a pair (<i>u</i>, <i>v</i>) means
there is an edge between node <i>u</i> and node <i>v</i> (1 <= <i>u</i>,<i>v</i> <= <i>N</i>).
</p>


*******OutputConstraints*******

<p>
Print the length of the longest path on one line.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 2
2 3

<b>Output:</b>
2
</pre>



______________________________________________________
ARCTAN||||||true||||||


<p>It's easy to know that arctan(1/2)+arctan(1/3)=arctan(1).The problem is,to some fixed number A,you have to write a program to calculate the minimum sum B+C.A,B and C are all positive integers and satisfy the equation below:</p>
<p>arctan(1/A)=arctan(1/B)+arctan(1/C)</p>

*******InputConstraints*******

<p>The first line contains a integer number T(about 1000).T lines follow,each contains a single integer A, 1<=A<=60000.</p>

*******OutputConstraints*******

<p>T lines,each contains a single integer which denotes to the minimum sum B+C.</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
1

<b><tt>Sample output:</tt></b>
5
</pre>
<p><b>Some new test data has been added on Feb.15, 2009, 36 users lose their Accepted.</b></p>


______________________________________________________
CLEVER||||||true||||||


<p>Blue Mary is a typist of some secret department.Now she have to type in many passwords in an hour,each of which has a fixed length: 6.Of course,the less times she presses the keyboard,the happier she is.</p>
<p>Unfortunately,the keyboard to type in the password is extraordinary designed to keep secrets.The keyboard has 6 particular keys instead of 10 number keys.To explain the uses of these keys,let's define the 6 position on the screen 1,2,3,4,5,6 from left to right.The keys' uses are shown below:</p>
<div align="justify">
       <ul>
               <li>
               Swap0: swap the digit in the cursor position and the digit in position 1.The cursor doesn't move.If the cursor is now in position 1,the digits on the screen won't be changed.
               <li>
               Swap1: swap the digit in the cursor position and the digit in position 6.The cursor doesn't move.If the cursor is now in position 6,the digits on the screen won't be changed.
               <li>
               Up: increase the digit in the cursor position by 1.If the digit in the cursor position is 9,no change will happen. 
               <li>
               Down: decrease the digit in the cursor position by 1.If the digit in the cursor position is 0,no change will happen.
               <li>
               Left: move the cursor one position left.If the cursor is in position 1,no change will happen.
               <li>
               Right: move the cursor one position right.If the cursor is in position 6,no change will happen.</li>
       </ul>
</div>
<p>At start,6 random digits will be given on the screen,and the cursor will in position 1.After some smart presses,she can type in the correct password,at that time the cursor position is unimportant.</p>
<p>Here is an example("()"denotes to the cursor):</p>
<pre>
key pressed       screen
                  (1)23456
Swap1             (6)23451
Right             6(2)3451
Swap0             2(6)3451
Down              2(5)3451
Right             25(3)451
Up                25(4)451
Right             254(4)51
Down              254(3)51
Right             2543(5)1
Up                2543(6)1
Swap0             6543(2)1
</pre>
<p>Now Mary wants to know the minimal number of keys she has to press.Can you help her?</p>

*******InputConstraints*******

<p>The first line contains a single integer t(about 1000).t lines follow,each contains two 6-digit string,which show the digits on the screen at start and the password Mary is to type in,separated by a single space.</p>

*******OutputConstraints*******

<p>t lines,each contains a single integer - the answer.

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
123456 654321

<b><tt>Sample output:</tt></b>
11
</pre>
<p><b>Some new test data has been added on Feb 15,2009. 26 users lose their Accepted.</b></p>


______________________________________________________
CHAIN||||||true||||||


<p>There are 3 kinds of animals A,B and C. A can eat B,B can eat C,C can eat A. It's 

interesting,isn't it?</p>
<p>Now we have n animals,numbered from 1 to n. Each of them is one of the 3 kinds of 

animals:A,B,C. </p>
<p>Today Mary tells us k pieces of information about these n animals. Each piece has one of 

the two forms below:
<div align="justify">
       <ul>
               <li>
               1 x y: It tells us the kind of x and y are the same.
               <li>
               2 x y: It tells us x can eat y.
               </li>
       </ul>
</div>
<p>Some of these k pieces are true,some are false. The piece is false if it satisfies one of 

the 3 conditions below, otherwise it's true.</p>
<div align="justify">
       <ul>
               <li>
               X or Y in this piece is larger than n.
               <li>
               This piece tells us X can eat X.
               <li>
               This piece conflicts to some true piece before.
               </li>
       </ul>
</div>

*******InputConstraints*******

<p>The first line contains a single integer t.t blocks follow.</p>
<p>To every block,the first line contains two integers n(1<=n<=50000) and k (1<=k<=100000).
k lines follow,each contains 3 positive integers D(1<=D<=2),X,Y,separated by single 

spaces.</p>

*******OutputConstraints*******

<p>t lines,each contains a single integer - the number of false pieces in the corresponding block.</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
1
100 7
1 101 1
2 1 2
2 2 3
2 3 3
1 1 3
2 3 1
1 5 5

<b><tt>Sample output:</tt></b>
3

<b><tt>Hint:</tt></b>
<p>The false pieces are the 1st,the 4th and the 5th ones.</p>
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
DELCOMM2||||||true||||||


<p>It is required to find out what's the maximum number of files that can be deleted from MS-DOS directory
executing the DEL command of MS-DOS operation system only once.
There are no nested subdirectories.</p>
<h3>A note</h3>
<P>
DEL command has the following format: <TT>DEL</tt> <EM>wildcard</em>

<P>

<P>
<BR>
The actual wildcard as well as a full file name can be made up of
a name containing 1 up to 8 case-sensitive characters.
In a wildcard the characters
'?' and '*' can be used. A question mark substitutes exactly one character
of the full file name, an asterisk any sequence of characters even empty one.
<P>

<P>
<BR>
MS-DOS system can permit maybe other wildcards but they can not be used
in this task. File names
consist only of Latin letters and digits.

<P>

*******InputConstraints*******

<p>The first line of the input is an integer M, then a blank line followed by M datasets. There is a blank line between datasets.

<p>Input data for each dataset contains a list of full file names without any extra empty lines
and spaces. Each
name is written in a separate line of input data file and ended with
a control sign: '+' for delete
or '-' for keep. Full file names are not repeated. The list comprises
at least one file, and at least one
file is marked to be deleted. There are no more than 250 files.

<P>

*******OutputConstraints*******

<p>
For each dataset, write to the first line of output the maximum number of files one DEL command can delete.

<P>

*******IOTestCases*******


<pre>
<b>Input:</b>

2

BP +
BPC +
TURBO -

EXCHANGE +
EXT +
HARDWARE +
MOUSE &#8211;
NETWORK &#8211;

<b>Output:</b>

2
2
</pre>
<b>Hint:</b>
<p>For the two tests above,the corresponding DEL commands are DEL BP* and DEL EX*.</p>

______________________________________________________
BRCKGAME||||||true||||||


<p>Blue Mary invents a game with toy bricks. The player has N cuboids numbered from 1 to N.</p>
<p>The rule of the game is discribed below:</p>
<div align="justify">
       <ul>
               <li>
               Choose some cuboids among the N cuboids, and divide them into M(1 <= M <= N) piles,named them Pile<sub>1</sub>,Pile<sub>2</sub> ... Pile<sub>M</sub>. There are at least 1 cuboid in each pile. To make the game easier, for any cuboid in Pile<sub>K</sub>,its id should greater than any one in Pile<sub>K+1</sub> (1 <= K < M).
               <li>
               For each pile of cuboids,the player will put them as a tower, and he should follow the two rules below:
               <li>
	        The up surface of each cuboid is touched and only touched another down surface. Luckily,to make the pile looking like a tower,the up surface of the lower cuboid should cover the down surface of the higher cuboid,i.e. the length of the lower up surface is not less than that of the higher down surface, and also to the width.
               <li>
               In each pile,the lower cuboid has a less id than the higher cuboid.</li>
        </ul>
</div>
<p>Your task is to find a method,to make the sum of the height of each pile maximum.</p>

*******InputConstraints*******

<p>The very first line of the input contain the number t,then t cases follow.</p>
<p>For each case,The first line contain two integer number N and M. N(N<=100) is the total number of the cuboids, M(M<=N) is the number of the piles, separated by a single space.</p>
<p>Then N line follow, which are the description of the cuboids 1..N. Each line contains three integer numbers(<=1000)- the length, width and height of that cuboid,separated by spaces.<p>

*******OutputConstraints*******

<p>For each case, the output contains only one line with a single integer number - the maximum sum.</p>

*******IOTestCases*******

<pre><b><tt>Sample Input:</tt></b>
1
4 2
10 5 5
8 7 7
2 2 2
6 6 6

<b><tt>Sample Output:</tt></b>
24
</pre>


______________________________________________________
COVER2||||||true||||||


<p>In the 3D Cartesian coordinate system, there are n cubes.These cubes are all axis-paralleled. What's the volume of the union of these cubes?</p>

*******InputConstraints*******

<p>There is a single integer m in the very first line of the input, the number of test cases. m blocks follow.</p>
<p>For each test, the first line contains a single integer n(1<=n<=100), the number of cubes. n lines follow, each contains four integers x,y,z,r(-1000<=x,y,z<=1000,1<=r<=200), separated by spaces.
x,y,z are the X,Y,Z coordinates of the center of the  cube, and r is the distance between the center and any surface of the cube.</p>

*******OutputConstraints*******

<p>m lines,each contains a single integer - the answer.</p>

*******IOTestCases*******

<pre><b><tt>Sample Input:</tt></b>
1
3
0 0 0 3
1 -1 0 1
19 3 5 6
<b><tt>Sample Output:</tt></b>
1944
</pre>



______________________________________________________
SEQ1||||||true||||||


<p>The input consists of exactly 5 test cases in the following format:</p>

*******InputConstraints*******

<pre>N A0 B0 L0 A1 B1 L1 [3<=N<=1000,1<=A0<=B0<=L0<=N,1<=A1<=B1<=L1<=N]
</pre>

*******OutputConstraints*******

<p>Exactly 5 lines,each contains:</p>
<p>a) A sequence (We name it S) consisting only characters '0' and '1' and no extra whitespaces, which satisfy the following conditions: </p>
<div align="justify">
    <ul>
        <li>
        The number of '0' in any consecutive subsequence of S whose length is L0 is not more than B0 and not less than A0.
        <li>
        The number of '1' in any consecutive subsequence of S whose length is L1 is not more than B1 and not less than A1.</li>
    </ul>
</div>
<p>or</p>
<p>b)A single number -1,if the sequence which satisfies the conditions above doesn't exist.</p>

*******IOTestCases*******

<pre><b>Input:</b>
6 1 2 3 1 1 2
[and 4 test cases more]

<b>Output:</b>
010101
[and 4 test cases more]
</pre>


______________________________________________________
CAKE||||||true||||||


<p>Adolf wants to send a cake to Blue Mary to celebrate her birthday. The cake looks like a tower which has M floors, each floor is a cylinder. The i-th cylinder counted from downside to upside has a integer height h<sub>i</sub> and a integer radius r<sub>i</sub>. These numbers fulfill the following two conditions:</p>
<div align="justify">
       <ul>
               <li>
               h<sub>1</sub> > h<sub>2</sub> > h<sub>3</sub> > ... > h<sub>M</sub>
               <li>
               r<sub>1</sub> > r<sub>2</sub> > r<sub>3</sub> > ... > r<sub>M</sub></li>
       </ul>
</div>
<p>Adolf is interested in minimising the area of the surface of the cake, except for the underside of the lowest cylinder. He needs your help because of his poor math knowledge.</p>

*******InputConstraints*******

<p>The very first line contains a integer number T. T test cases follow.</p>
<p>For each test case, the first line contains a single integer number N (N<=10000), the second line contains a single integer number M (M<=10). The cake must be made of M cylinders and its volume must be N*Pi.</p>

*******OutputConstraints*******

<p>For each test case, a single line containing a single integer S must be written to output. The required minimum area must be S*Pi.</p>

*******IOTestCases*******

<pre><b><tt>Sample Input:</tt></b>
1
100
2

<b><tt>Sample Output:</tt></b>
68
</pre>


______________________________________________________
OPTSUB||||||true||||||


<div align="justify">
    <ul>
        <li>
        A point <i>P</i>(<i>x</i>,<i>y</i>) is called an integer point if and only if both <i>x</i> and <i>y</i> are integers.
        <li>
        <i>W</i> is the set which contains all the integer points on the plane.
        <li>
        Two integer point <i>P</i>(<i>x</i>,<i>y</i>) and <i>Q</i>(<i>x'</i>,<i>y'</i>) are called adjacent if and only if <i>|x-x'|+|y-y'|=1</i>.
        <li>
        <i>S</i> is a set of integer points if and only if <i>S</i> is a limited subset of <i>W</i>.
        <li>
        If <i>S</i> is a set of integer points, <i>R</i> and <i>T</i> belong to <i>S</i>,and there exist a limited integer point sequence <i>Q</i><sub>0</sub>(=<i>R</i>),<i>Q</i><sub>1</sub>,<i>Q</i><sub>2</sub>,...,<i>Q</i><sub>k</sub>,<i>Q</i><sub>k+1</sub>(=<i>T</i>) which satisfies that
        <div align="justify">
            <ul>
                <li>
                <i>Q</i><sub>i</sub>!=<i>Q</i><sub>j</sub> iff <i>i</i>!=<i>j</i>
                <li>
                <i>Q</i><sub>i</sub> and <i>Q</i><sub>i+1</sub> are adjacent, for each 0<=<i>i</i><=k.
                <li>
                <i>Q</i><sub>i</sub> belongs to <i>S</i>, for each 0<=<i>i</i><=k+1.</li>
            </ul>
        </div>
       we call <i>R</i> and <i>T</i> are connected and the sequence <i>Q</i><sub>i</sub>(0<=i<=k) is a path that connect <i>R</i> and <i>T</i>.
        <li>
        If <i>S</i> is a set of integer points, <i>X</i> and <i>Y</i> are some integer points that belong to <i>S</i>, there exists one and only one path connected <i>X</i> and <i>Y</i>, then <i>S</i> is called an optimal set.</li>
    </ul>
</div>
<p>Given an optimal set <i>V</i>, your task is to find an optimal set <i>B</i>, satisfying that <i>B</i> is a subset of <i>V</i> and the sum of the weights of each integer point is maximum.</p>

*******InputConstraints*******

<p>The very first line of the input contains a single integer <i>T</i>, the number of test cases. <i>T</i> blocks follow.</p>
<p>For each test case, the first line contains a single integer <i>N</i>=|<i>V</i>|(<i>N</i><=1000). <i>N</i> lines follow, each contains 3 integers, the X-coordinate, the Y-coordinate and the weight(the absolute value of the weight<=100) of the <i>i</i>th integer point, separated by single spaces.</p>

*******OutputConstraints*******

<p><i>T</i> lines,each contains a single integer - the maximum sum of weights.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
5
0 0 -2
0 1 1
1 0 1
0 -1 1
-1 0 1

<b>Output:</b>
2
</pre>


______________________________________________________
MEMDIS||||||true||||||


<p>EMS memory (called <b>memory</b> for short) is some important resource of a computer. When a program is running, the computer must distribute the memory for it.</p>
<p>The classical memory distribution process is like the following:</p>
<div align="justify">
    <ul>
        <li>
        The basic unit of the memory is called a <b>cell</b>, each cell is assigned to a fixed integer number called its <b>address</b>. The address starts from number 0. If two cell's address numbers are two consecutive integer numbers, the two cells are called (logically) consecutive. We name the <i>s</i> consecutive cells starting from address <i>i</i> a piece whose length is <i>s</i> and first address is <i>i</i>.
        <li>
        Many programs need memory during their running. For each program, we need a application time <i>X</i>, a number of cells needed <i>M</i> and a running time <i>P</i> to describe it. When the program is running(during it starts running (time <i>T</i>) to <i>T+P</i>, including the left end and excluding the right end),The M cells cannot be used by other programs.
        <li>
        Suppose a program apply <i>M</i> cells at time <i>X</i> and its running time is <i>P</i>,then
        <div align="justify">
			<ul>
				<li>
				(A) If there is a piece in the memory at time <i>X</i>, each cell of which is not being used, and whose length is <i>M</i>, the computer will distribute these <i>M</i> cells to this program. If there are more pieces, the computer will choose the one whose first address is minimum.
				<li>
				(B) If such piece does not exist at time <i>X</i>, the program will be put into a queue.If after some time, there exist a piece whose length is <i>M</i> and the corresponding program is at the head of the queue, the computer will pop this program and distribute memory for it like (A) immediately. During the process of memory distribution, the programs which are not at the head of the queue cannot start to run before the one at the head of the queue.
				</ul>
		</div>
	</ul>
</div>

*******InputConstraints*******

<p>Ten test cases (given one after another, you have to process all!).For each test case:</p>
<p>The first line is a number N, which shows the number of memory cells. There addresses are 0..n-1. Less than 10000 lines follow, each contains 3 integers X, M(M<=N), P describing the programs. A line containing three zeroes denotes the end of a test case. The programs have been sorted by there application time X.</p>
<p>All numbers in the input and output file will be less than 10<sup>9</sup>.</p>

*******OutputConstraints*******

<p>For each test case output two lines. The first line contains a single integer, which shows the time when all the programs have been run and stops normally. The second line contains a single integer, which is the number of programs which has been put into the queue.</p>

*******IOTestCases*******

<pre><b>Input:</b>
10
1 3 10
2 4 3
3 4 4
4 1 4
5 3 4
0 0 0
[and 9 test cases more]

<b>Output:</b>
12
2
[and 9 test cases more]
</pre>


______________________________________________________
ANALYSER||||||true||||||



*******InputConstraints*******

<p>A Program which has the following format:</p>
<pre>
&lt;Program>::=&lt;sentence>&lt;line break>{&lt;sentence>&lt;line break>}
&lt;setence>::=&lt;level>&lt;space>&lt;body>
&lt;body>::=&lt;addition> | &lt;output> | &lt;goto> | &lt;condition> | &lt;end>
&lt;addition>::=&lt;variable>+&lt;integer>
&lt;output>::=&lt;variable>?
&lt;goto>::=GO&lt;space>&lt;level>
&lt;condition>::=IF&lt;space>&lt;variable>=&lt;integer>&lt;space>&lt;goto>
&lt;end>::=END
&lt;variable>::=&lt;character>
&lt;level>::=&lt;integer>
&lt;integer>::=&lt;digit>{&lt;digit>}
&lt;character>::=A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
&lt;digit>::= 0|1|2|3|4|5|6|7|8|9
&lt;line break>::=(ASCII 10)
&lt;space>::=(ASCII 32)
</pre>
<p>The program runs following the following rules:</p>
<div align="justify">
    <ul>
        <li>
        Program starts from the sentence whose level is minimum, and executed by the level from low to high except that the sentence is&lt;goto>or&lt;condition>.
        <li>
        All variables are initialized to 0.
        <li>
        &lt;Addition>means&lt;variable>+=&lt;integer>in C++.
        <li>
        &lt;output>means write the value of&lt;variable>to the output file(we aren't interesting about the real output file.)
        <li>
        &lt;condition>means if and only if the value of the &lt;variable> equals to &lt;integer>, &lt;goto> will be executed, otherwise the next sentence executed is as usual.
        <li>
        After&lt;goto>, the next sentence executed is the sentence with level which equals to the level in&lt;goto>.
        <li>
        Program terminates by itself when &lt;end> is executed.
        <li>
        The numbers during the program is running will fit in a signed 32-bit integer.
        <li>
        The number of sentences in the program is not more than 100.
        <li>
        The length of each line in the input file is not more than 20.
        <li>
        The input is correct.
        <li>
        The sentence with the maximum level is always &lt;end>.
        <li>
        Any level is not more than 3000.
        </li>
    </ul>
</div>
<p>Input terminate by EOF.</p>

*******OutputConstraints*******

<p>Output the number of sentences executed.If the program can not terminate by itself,output -1.</p>

*******IOTestCases*******

<pre><b>Input:</b>
10 A+1
20 IF A=5 GO 60
60 END
30 A+2
40 A?
50 GO 20

<b>Output:</b>
11

<b>Hint:</b>
10->20->30->40->50->20->30->40->50->20->60
</pre>

______________________________________________________
LOSTCT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/LOSTCT/en/">English</a></td> 
<td width="50%"><a href="/problems/LOSTCT/vn/">Vietnamese</a></td> 
</tr></table>


<p>The famous archaeologist Blue Mary has found a site of a 

lost city. She found 12 huge steles in the center of the city - 

called Ice-Peak City by her, on which there were many designs. 

Blue Mary named these designs Ice-Peak Articles(IPA for 

short). Unfortunately, she can't find Ice-Peak city any more 

after she returns to her lab.</p>
<p>The only thing Blue Mary knows about Ice-Peak city is 

pictures of the designs on the steles. With her intelligence she 

soon comes up with the syntax of IPA. Its BNF form is 

below.</p>
<pre>
&lt;IPA>        ::=&lt;sentence>{&lt;sentence>}
&lt;sentence>   ::=&lt;noun phrase>{&lt;verb phrase>&lt;noun phrase>}[&lt;verb phrase>]
&lt;noun phrase>::=&lt;noun>|[&lt;adverb>]&lt;noun phrase>
&lt;verb phrase>::=&lt;verb>|[&lt;adverb>]&lt;verb phrase>
&lt;words>      ::=&lt;verb>|&lt;noun>|&lt;adverb>
</pre>
<p>Where</p>
<p>nouns, verbs and adverbs are given by a dictionary which 

we will discuss later. 
<p>| denotes or.
<p>Things in [] will appear zero or one time.
<p>Things in {} will appear zero or more times.</p>
<p>Blue Mary has compiled a dictionary of words in IPA. 

Since characters appeared in IPA only contain 26 different 

forms, we will use small latin letters 'a' to 'z' to represent.</p>
<p>There are no seperators between words or sentences, so 

Blue Mary asks you to write a program which will split a 

correct IPA into minimum number of sentences, and split these 

sentences into minimum number of words.</p>

*******InputConstraints*******

<p>The first line contains the number of words in the 

dictionary, no more than 1000.</p>
<p>Next lines contain the words in the form "X.Y", one per 

line, where X is one of the characters 'n', 'v', 'a', denoting that 

the corresponding word is noun, verb or adverb, and  Y is a 

string of lowercase latin letters, whose length will be no nore 

than 20.</p>
<p>The next line contains a correct IPA (contains only 

lowercase latin letters), ends with a dot(.). The length of the 

IPA will be no more than 5KB.</p>

*******OutputConstraints*******

<p>The first line contains the minimum number of sentences in 

IPA. The second line contains the minimum number of words 

in IPA, when given IPA is split into minimum number of 

sentences.</p>

*******IOTestCases*******

<pre><b>Input:</b>
11
n.table
n.baleine
a.silly
n.snoopy
n.sillysnoopy
v.is
v.isnot
n.kick
v.kick
a.big
v.cry
sillysnoopyisnotbigtablebaleinekicksnoopysillycry.

<b>Output:</b>
2
9
</pre>
<b>Time limit has been changed to 1 second in total for all tests.</b>




______________________________________________________
BLUEEQ||||||true||||||


<p>This morning Blue Mary wrote some equations on a piece of paper and left it on her desk. After solving some problems in SPOJ, she found that her classmate H.L. replaced all characters on the paper with some other ones. H.L. told her he replaced the same characters with the same ones, and different characters with different ones because of his goodness. Now Mary needs your help to get the original equations back.</p>
<p>In Mary's equations, only 13 characters appear:0,1,2,3,4,5,6,7,8,9,+,*,=. There is one and only one "=" in each equation. In H.L.'s equations,only 13 Latin letters appear: a,b,c,d,e,f,g,h,i,j,k,l,m. All the equations are correct in decimal notation. </p>
<p>For example. If Mary wrote down 2+29=31, H.L. replaced 2 with i, + with l, 9 with k, = with e, 3 with m and 1 with a, we got ilikema . </p>

*******InputConstraints*******

<p>The first line contains a single integer t.t blocks follow.</p>
<p>To every block,the first line contains a single integer n(1<=n<=1000). n lines follow,each contains a string whose length is more than 4 and less than 12.The string contains only a-m and doesn't contain any whitespaces.</p>
<p>At least 90% of test cases satisfy that n<=5.</p>
<p>At least 80% of test cases satisfy that n<=2.</p>
<p>In at least 70% of test cases, there are at most 5 different characters in all the equations.</p>

*******OutputConstraints*******

<p>If there doesn't exist n equations that can be translated to H.L.'s equations,print a line contains the word <em> noway </em>.Otherwise you should output all the corresponding relations that can be fixed in lexicographic order,see the example. </p>

*******IOTestCases*******

<pre>
<b>Input</b>
1
2
abcdec
cdefe

<b>Output</b>
a6
b*
d=
f+
</pre>

______________________________________________________
BLUEEQ2||||||true||||||


<p>Today Mary's math homework is to solve an equation.</p>
<img src="http://www.spoj.pl/content/john_jones:blueeq2a.bmp">
<p>She knows all ki and pi, and 1<=xi<=M. All xi must be integers. She must work out the number of different solutions of this equation this day.Can you give her a hand?</p>

*******InputConstraints*******

<p>There is a single integer T in the very first line of the input denoted the number of tests.T blocks follow.</p>
<p>For each test case:</p>
<p>The first line contains a single integer n(n<=6).The second line contains a single integer m(m<=150).n lines follow,each contains two space-separated integers ki and pi, i=1,2,...,n. All pi are positive.</p>
<img src="http://www.spoj.pl/content/john_jones:blueeq2b.bmp">

*******OutputConstraints*******

<p>For each test case output a single line ,which contains a single integer - the answer.You may assume this number is less than 2^31.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
3
150
1 2
-1 2
1 2

<b>Output:</b>
178
</pre>
<b>Warning: The time limit is very strict for this problem.</b>
<p>Blue Mary's Note: test data were modified on Dec.4, 2007. All the solutions have been rejudged.</p>


______________________________________________________
AEROLITE||||||true||||||


<p>A huge aerolite had fallen in Antarctica!!!Many disasters happened and lots of people lost their lives, homes or even everything.Blue Mary, the well-known scientist, is to work out the secret of this aerolite for further study.</p>
<p>Blue Mary has found out that their are some numbers on this aerolite, 5 per line:</p><pre>
1 1 1 1 6
0 0 6 3 57
8 0 11 3 2845
</pre>
<p>With her genius, Blue Mary knows that the 5th number is the key to solve the problem, but in some lines the 5th numbers were destoryed and we cannot know what they are instantly.</p>
<p>After some days, she finds out the way to calculate the 5th number finally, which is:</p>
<div align="justify">
    <ul>
        <li>
        A Regular Expression(RE) is a string which only contains characters '{','[','(',')',']','}' and satisfies the rules below.
        <li>
        An empty string is an RE.
        <li>
        If there's no character '[',']','{','}' in RE A, then (A) is an RE.
        <li>
        If there's no character '{','}' in RE A, then [A] is an RE.
        <li>
        If A is an RE, {A} is an RE.
        <li>
        If both A and B are REs, AB is an RE.
        </li>
    </ul>
</div>
<p>For example "()(())[]", "{()[()]}", "{{[[(())]]}}"(all without quotes) are REs and "()([])()","[()" are not REs.</p>
<p>The deep of an RE A, D(A), is defined as below:</p>
<div align="justify">
    <ul>
        <li>
        If A is an empty string,D(A)=0;
        <li>
        If A can be written as BC, D(A)=max(D(B),D(C));
        <li>
        If A can be written as (B) or [B] or {B}, D(A)=D(B)+1.
        </li>
    </ul>
</div>
<p>Such as D("(){()}[]")=2.</p>
<p>Suppose the first 4 numbers in current line are L1,L2,L3 and D, then the 5th number in current line is the number of REs modudo 11380.Each of the REs must have a depth of D and is made of L1 {}, L2 [] and L3 ().</p>
<p>Now Mary needs your help to work out the 5th number.</p>

*******InputConstraints*******

<p>Input contains exactly 10 test cases.Each test case contains one line, which contains 4 numbers L1,L2,L3,D(0<=L1,L2,L3<=10, 0<=D<=30), separated by single spaces.</p>

*******OutputConstraints*******

<p>Ten lines, each contains a single integer denoted the 5th number.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1 1 1 1
0 0 6 3
1 1 1 2
[and 7 test cases more]

<b>Output:</b>
6
57
8
[and 7 test cases more]
</pre>


______________________________________________________
GALAXY||||||true||||||


<h3>Background</h3>
<p>So if you want to survive the Earth's demise and see the galaxy, make sure you are wearing something more substantial than pajamas and a ratty bathrobe, watch the skies for flying saucers, start worrying when all the dolphins on the planet vanish, and keep your eyes peeled for an electronic gizmo with the words "Don't Panic" printed in large friendly letters on the cover.</p>
<p>--The Hitchhiker's Guide to the Galaxy</p>
<h3>Problem</h3>
<p>Addition,subtration and multiplication is necessary wherever you are in the galaxy.You are to write a program to perform these operations, and you can see 6*7=42 or 67-25=42 or 31+11=42, maybe one of them is the problem of Life, the Universe and Everything.</p>
<p><b>Please note that the solution may only be submitted in Brainf**k, Whitespace and Intercal, other languages like C/C++/Pascal/Java are not allowed!</b> If you want to use other languages to solve this problem, you may try <a href="http://www.spoj.pl/problems/EXPR2">this</a> one.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them T is given in the very first line, T<=99.</p>
<p>Each test case contains one line which has the following form:</p>
<p><i>num</i> <b>oper</b> <i>num</i></p>
<p>where <i>num</i> is an integer number between 1 and 99, and <b>oper</b> is '+' or '-' or '*' (without quotes).</p>
<p>There's no extra whitespace and leading zero in the input.</p>

*******OutputConstraints*******

<p>For each test case you should output one line which contains the answer without any leading zeros.You may assume this number is always a positive one.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
6*7
67-25
31+11

<b>Output:</b>
42
42
42
</pre>


______________________________________________________
DRAGON||||||true||||||


<p>Hydra is some very greedy animal. A hydra has 9 heads when he is born, and many more new heads will come out when he grows up. Of course, some old heads will break off because of caducidy.</p>
<p>One day, a hydra with M heads finds a tree with N fruits on it. He is very delighted and wants to eat this tree instantly. Since he has M heads, he must divide these N fruit into M groups, each group contains at least 1 fruit, and each head will eat a group of fruits.</p>
<p>The biggest head among the M heads is named "Boss", it must eat neither more nor less than K fruits, and, in the nature of things, the biggest fruit included. These fruits are connected by N-1 branches, and there exists a path made up with branches between each pair of fruit.</p>
<p>If two fruit connected by a single branch is put in different groups, the corresponding two heads will break the branch and eat the two fruits, otherwise the corresponding head will eat the two fruits without breaking the branch. Eating branches is not very comfortable of course, so every branch has a weight of illness, and the weight of illness of this hydra is the sum of the weights of illness of all brances he has eaten.</p>
<p>Your task is to help the hydra to minimize his weight of illness.</p>
<p>The picture below is an example.</p>
<img src="http://www.spoj.pl/content/john_jones:dragon.jpg">
<p>N=8,M=2,K=4.The bigger head eats 4 fruits(full points), the smaller head eats 4 fruits(empty points). The branch signed by a thin segment is eaten by the hydra.</p>

*******InputConstraints*******

<p>Ten test cases(Given one after another, you have to process all!). For each test case the first line contains 3 integers N(1<=N<=300),M(2<=M<=N),K(1<=K<=N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i,j,k separated by spaces denoted that there is a branch between fruit i(1<=i<=N) and fruit j(1<=j<=N) and the weight of illness of this branch is k(0<=k<=100000).</p>

*******OutputConstraints*******

<p>Ten lines, each contains a single integer - the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output "-1"(without quotes).</p>

*******IOTestCases*******

<pre><b>Input:</b>
8 2 4
1 2 20
1 3 4 
1 4 13
2 5 10
2 6 12
3 7 15
3 8 5
[and 9 test cases more]

<b>Output:</b>
4
[and 9 test cases more]
</pre>

______________________________________________________
BARB||||||true||||||


<p>There are N Barbarians living on an unknown island. On the island there are M caves, we can number them 1, 2, ..., M clockwise. When we find
the island, the barbarians are living in N distinct caves numbered C1,C2,...,CN.Every year each barbarian walks out of his cave and goes along the
road,passes Pi caves and then go into that cave.Every Barbarian has a living time: Li years, after Li years the ith barbarian died.</p>
<p>We are surprised to find out that no two barbarians live in one cave in the same year so no conflicts have happened.We are interesting about
the minimum number of caves on the island.</p>
<b>Please note that this problem has a somewhat strict source limit and time limit.</b>

*******InputConstraints*******

<p>The very first line contains a single integer T,the number of test cases.T blocks follow. </p>
<p>For each test case, the first line contains a single integer N(N<=15).N lines follow,each contains 3 integers Ci(1<=Ci<=100),Pi(1<=Pi<=100),Li
(1<=Li<=1,000,000).</p>

*******OutputConstraints*******

<p>For each test case, the first and only line contains a single integer M - the answer.You may assume M<=1,000,000.</p>

*******IOTestCases*******

<pre>
<b>Input:</b>
1
3
1 3 4
2 7 3
3 2 1

<b>Output:</b>
6
<b>Hints</b>
-------------------------------------------------
| Year | Barb. No.1 | Barb. No. 2 | Barb. No. 3 |
-------------------------------------------------
|  0   |     1      |      2      |      3      |
-------------------------------------------------
|  1   |     4      |      3      |      5      |
-------------------------------------------------
|  2   |     1      |      4      |    Died     |
-------------------------------------------------
|  3   |     4      |      5      |    Died     |
-------------------------------------------------
|  4   |     1      |    Died     |    Died     |
-------------------------------------------------
</pre>


______________________________________________________
ROBOT||||||true||||||


<p>Blue Mary, the well-known astronaut, had sent Robot No.1 to Mars finally.Robot No.1 was so smart that he could make one robot per second.</p>
<p>Assume the time Robot No.1 arrived was second 1. At second i, Robot No.1 made a new Robot: Robot No.i. (i>=2)</p>
<p>The new robots started work as soon as he was produced successfully. Robot No.M only had a rest at second t, where t is a multiple of M. 
For example, Robot No.3 worked at second 4,5,7,8,... and had a rest at second 6,9,...</p>
<p>When a robot was having a rest, he could send his own informations to the newly produced robot. For example, when Robot No.6 was produced successfully,
Robot No.2 and Robot No.3 are having a rest, so Robot No.6 would get informations from Robot No.2 and No.3. We call Robot No.2 and No.3 are teachers of
Robot No.6. </p>
<p>We call two Robots are independent if each of them wasn't a teacher of the other one and they had no common teachers. <b>Please note that Robot No.1
was independent to any other robots and wasn't a teacher of any other robots, </b>since only Robot No.1 could make robots.</p>
<p>The good number of Robot No.M is the number of robots who was produced earlier than No.M and independent to No.M. Here are some examples: </p>
<p>The good number of Robot No.1 is 0.</p>
<p>The good number of Robot No.2 is 1. No.1 was that robot.</p>
<p>The good number of Robot No.6 is 2. No.1 and No.5 were those robots. No.2 and No.3 were his teachers. No.4 and him had a common teacher: No.2. </p>
<p>The Robots had 3 kinds of occupations. To Robot No.M:</p>
<div align="justify">
       <ul>
               <li>
               If M can be written as the multiple of an even number of distinct odd primes, he was a businessman.
               <li>
               If M can be written as the multiple of an odd number(1 included) of distinct odd primes, he was a hacker.
               <li>
               All other robots were doctors.</li>
       </ul>
</div>
<p>Now Blue Mary was interesting to Robot No.M. She wants to know the sum of good numbers of all businessmen, hackers and doctors among Robot No.M and his teachers.
She comes up with the answer quickly, and so can you.</p>
<p>Blue Mary is so kind that she gives you the prime divisors of M and you can only tell her the answers modudo 10000.</p>

*******InputConstraints*******

<p>The very first line contains a single integer T,the number of test cases.T blocks follow. </p>
<p>For each block, the first line contains a single integer K.K lines follow, each contains two integers p<sub>i</sub> and a<sub>i</sub> separated by a single space.</p>
<p>M = p<sub>1</sub><sup>a<sub>1</sub></sup> * p<sub>2</sub><sup>a<sub>2</sub></sup> * p<sub>3</sub><sup>a<sub>3</sub></sup> * ... * p<sub>K</sub><sup>a<sub>K</sub></sup>. </p>
<p>You can assume that:</p>
<div align="justify">
       <ul>
               <li>
               All p<sub>i</sub> are distinct primes and are less than 10,000.
               <li>
               p<sub>1</sub> < p<sub>2</sub> < p<sub>3</sub> < ... <p<sub>n</sub>.
               <li>
               All a<sub>i</sub> are positive and no more than 1,000,000.
               <li>
               1 <= k <= 1000.</li>
       </ul>
</div>

*******OutputConstraints*******

<p>For each test case, output 3 lines. </p>
<p>The first line contains a single integer denotes to the sum of good numbers of all businessmen among Robot No.M and his teachers modudo 10000. </p>
<p>The second line contains a single integer denotes to the sum of good numbers of all hackers among Robot No.M and his teachers modudo 10000.</p>
<p>The third line contains a single integer denotes to the sum of good numbers of all doctors among Robot No.M and his teachers modudo 10000.</p>

*******IOTestCases*******

<pre>
<b>Input:</b>
1
3
2 1
3 2
5 1

<b>Output:</b>
8
6
75
</pre>

______________________________________________________
EDIT3||||||true||||||


<h3>Background</h3>
<p>After trying to solve problem EDIT1(Editor) and being ****ed by Brainf**k, Blue Mary decided to set another difficult problem about editor.</p>
<h3>Description</h3>
<p>Some definations:</p>
<div align="justify">
       <ul>
               <li>
               Text: It's a sequence that consists characters whose ASCII code is in [32,126].
               <li>
               Cursor: It's a sign for pointing out the current position.It can be at the start or the end of the text or between two consecutive characters of the text.</li>
       </ul>
</div>
<p>Editor is a structure.It contains one text and one cursor.The operations are listed below:</p>
<pre>
--------------------------------------------------------------------------
| Name        | Input format |              function                     |
--------------------------------------------------------------------------
| Move(k)     | Move k       | Move the cursor after the kth character   |
|             |              | in the text. If k=0, you should put       |
|             |              | the cursor at the start of the text.      |
--------------------------------------------------------------------------
| Insert(n,s) | Insert n s   | Insert string s whose length is n(>=1)    |
|             |              | after the cursor.The cursor doesn't move. |
--------------------------------------------------------------------------
| Delete(n)   | Delete n     | Delete n(>=1) characters after the cursor.|
|             |              | The cursor doesn't move.                  |
--------------------------------------------------------------------------
| Get(n)      | Get n        | Output n(>=1) characters after the cursor.|
--------------------------------------------------------------------------
| Prev()      | Prev         |  Move the cursor one character forward.   |
--------------------------------------------------------------------------
| Next()      | Next         |  Move the cursor one character backward.  |
--------------------------------------------------------------------------
</pre>
<p>If the text of a editor is empty,we say the editor is empty.</p>
<p>Here is an example._ denotes to the cursor,$ denotes to the start and the end.At start the editor is empty.</p>
<pre>
------------------------------------------------------------------------------
|         Operation          |  Text after the operation |        Output     |
------------------------------------------------------------------------------
| INSERT(13,"Balanced tree") |  $_Balanced tree$         | $$                |
------------------------------------------------------------------------------
| MOVE(2)                    |  $Ba_lanced tree$         | $$                |
------------------------------------------------------------------------------
| DELETE(5)                  |  $Ba_d tree$              | $$                |
------------------------------------------------------------------------------
| NEXT()                     |  $Bad_ tree$              | $$                |
------------------------------------------------------------------------------
| INSERT(7," editor")        |  $Bad_ editor tree$       | $$                |
------------------------------------------------------------------------------
| MOVE(0)                    |  $_Bad editor tree$       | $$                |
------------------------------------------------------------------------------
| GET(15)                    |  $_Bad editor tree$       | $Bad editor tree$ |
------------------------------------------------------------------------------
</pre>
<p>Your task is:</p>
<div align="justify">
       <ul>
               <li>
               Build an empty editor.
               <li>
               Read some operations from the standard input and operate them.
               <li>
               For each Get operation, write the answer to the output.</li>
       </ul>
</div>

*******InputConstraints*******

<p>the very first line contains the number of testcases T(T<=4).T tests follow.</p>
<p>For each test, the first line is the number of operations N.N operations follow.</p>
<p>Blue Mary is so depressed with the problem EDIT1 that she decides to make the problem 
more difficult.So she inserts many extra line breaks in the string of the Insert operation.You must ignore them.</p>
<p>Except line breaks, all the charaters' ASCII code are in [32,126]. There's no extra space at the end of a line.</p>
<p>You can assume that for each test case:</p>
<div align="justify">
    <ul>
        <li>
        No invalid operation is in the input.
        <li>
        Number of move operations is no more than 50000.
        <li>
        Number of the total of insert and delete operations is no more than 4000.
        <li>
        Number of the total of prev and next operations is no more than 200000.
        <li>
        The characters inserted will not more than 2MB.The valid output will not more than 3MB.
        </li>
    </ul>
</div>

*******OutputConstraints*******

<p>The output should contain T blocks corresponding to each testcase.</p>
<p>For each test case, the output should contain as many lines as the get operations in the input.Each line should contains the output of each get operation.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
15
Insert 26
abcdefghijklmnop
qrstuv wxy
Move 15
Delete 11
Move 5
Insert 1
^
Next
Insert 1
_
Next
Next
Insert 4
.\/.
Get 4
Prev
Insert 1
^
Move 0
Get 22

<b>Output:</b>
.\/.
abcde^_^f.\/.ghijklmno
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>
<p>Blue Mary's note: the test case #1 has something wrong and it has been fixed on April 27th, 2007.Solutions has been rejudged. Please accept my apology. </p>


______________________________________________________
CHRIS||||||true||||||


<p>Do you know the famous game THE KING OF FIGHTERS? If the answer is yes, I'm sure you know THE THREE BLACK GROUP: Chris, Shermie and Yashiro. Today Chris is invited to one of his friends' home to play THE KING OF FIGHTERS.Blue Mary is now at Chris' home, she knows where Shermie's and Yashiro's home is, but she doesn't know where Chris actually is.So she decides that:
<div align="justify">
       <ul>
               <li>
               If Yashiro's home is nearer than Shermie's, she will go to Yashiro's home first, if she doesn't find Chris, she will then go to Shermie's, and vice versa.
               <li>
               The map of the city is strange. Each of the houses is assigned to a unique number in the range[1,n], where n is the number of houses. Between some pairs of houses there are some roads. There exists one and only one path from any house to any other house. She will go along the only path between the two houses.</li>
       </ul>
</div>
<p>Unfortunately, you don't know where Chris' home actually is, and the same as Yashiro's and Shermie's. Now you are interesting in the maximum time from the time when Blue Mary starts from Chris' home to the time when Blue Mary finds Chris in the worst case.</p>

*******InputConstraints*******

<p>The number of test cases T is given in the very first line.T blocks follow.</p>
<p>For each test case, the first line contains 2 space-separated integers N(3<=N<=200000) and M, which denotes the number of houses and the number of roads in the city.M lines follow, each contains 3 space-separated integers x,y,z(1<=x,y<=n,1<=z<=10<sup>9</sup>).It tells us there exist a road between house No.x and house No.y, and to go from x to y or from y to x along this road will take z minutes.No two roads are repeated.</p>

*******OutputConstraints*******

<p>For each test case you should output a single line, which contains a single integer - the maximum time measured in minutes.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
4 3
1 2 1
2 3 1
3 4 1

<b>Output</b>
4
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
CASHIER||||||true||||||


<p>Blue Mary is a cashier of a big company.The boss of this company is so annoying that he always increases or decreases wage of all workers.He increases all the workers' wage with a same number when he is happy or decreases all the worker's wage with a same number when he is depressed. </p>
<p>All the workers are angry with the boss, especially when he decreases their wage. A worker will leave the company and never go back when he finds his wage is lower than the least wage written on his contract. Blue Mary must delete the worker's files at that time. Another task she is to do is to build a file when a new worker joins this company.</p>
<p>The boss usually asks Blue Mary how much money the worker who gets the k-th most wage gets. Blue Mary is very tired with her work. Could you give her a hand?</p>

*******InputConstraints*******

<p>T</p>
<p>[the number of tests <= 10]</p>
<p>M MIN</p>
<p>[M is the number of commands below, MIN is the least wage]</p>
<p>C K</P>
<p>[C is one of the 4 characters I,A,S,F. I denotes that Mary should build a new file, and the new worker's wage is K(0<=K<=100000) at start.If K is less than MIN, the worker will not join the company. A denotes that the boss increases all the workers' wage with K(0<=K<=1000). S denotes that the boss decreases all the workers' wage with K(0<=K<=1000). F denotes that the boss asks Blue Mary a question: how much money does the worker who gets the k-th most wage get(K>0)?]</p>
<p>[M-1 other commands]</p>
<p>[other tests]</p>
<p>You may assume that:</p>
<div align="justify">
    <ul>
        <li>
        The number of worker in the company at start is 0.
        <li>
        The number of command I is no more than 100000.
        <li>
        The total numner of command A and S is no more than 100.
        <li>
        The number of command F is no more than 100000.</li>
    </ul>
</div>

*******OutputConstraints*******

<p>For each test case:</p>
<p>For each F command you must output one line contains a single integer which is the answer or -1 if K is more than the number of workers in the company at that time.</p>
<p>In the last line you must output a single integer - the number of workers who leave the company(excluded the ones who don't join the company)</p>

*******IOTestCases*******

<pre><b><tt>Sample Input:</tt></b>
1
9 10
I 60
I 70
S 50
F 2
I 30
S 15
A 5
F 1
F 2

<b><tt>Sample Output:</tt></b>
10
20
-1
2
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
RAIN2||||||true||||||


<p>Country M is pluvian. In City P, it rains frequently and many people complain that they always have trouble crossing the streets when raining. To make people cross the streets easier, the government set many "Automatic Umbrellas" above every crosswalk, shown in the picture below.</p>
<img src="http://www.spoj.pl/content/john_jones:rain21.jpg">
<p>Each of these "Automatic Umbrellas" looks like a rectangle board, and their thickless is approximate zero. They can sop up the rain instantly. They are left unused when it's not raining and shuttle from one side to another in the same speed otherwise. The walkers will not be wringing-wet if he walks under the umbrella when it's raining.</p>
<p>When many people want to cross the street, one "Automatic Umbrella" is not enough obviously. The government set many "Automatic Umbrella" on some main crosswalks. The width of each of the "Automatic Umbrella" equals to the width of the crosswalk, and any two of these umbrellas have different height.Their length and speed may be different.</p>
<p>You are to write a program to calculate the total volume of the rain falling to the ground from the time when it starts to rain to T seconds later.</p>

*******InputConstraints*******

<p>The very first line comes a single integer Q, the number of test cases.Q blocks follow.</p>
<p>For each test case:</p>
<p>The first line contains 4 space-separated integers N(<=10), W(<=100), T(<=100), V(<=50), the number of "Automatic Umbrella", the length of the crosswalk in meters, the total time in seconds and the volume of rain falling to the ground per square meter per second.</p>
<p>To simplify the description, we can build a Cartesian coordinate system in the following way: let the left side of the street be the origin, the street be the positive Ox-axes, and the vertical line to the ground be the positive Oy-axes,see the picture below.</p>
<img src="http://www.spoj.pl/content/john_jones:rain22.jpg">
<p>Each of the next N lines contains 3 integers xi, li, vi, the initial position(in meter), the length(in meter), the speed(in meter per second) of the i-th umbrella. If vi>0, the umbrella moves to the right side initially; if vi<0, the umbrella moves to the left side initially;if vi=0, the umbrella doesn't move at all.</p>
<p>You can assume that the width of the umbrella and the crosswalk is 1 meter, the rain falls vertically, the speed of the rain will not change and the umbrellas and the crosswalk are absolutely horizontal.</p>

*******OutputConstraints*******

<p>For each test case, you should output a single real number(rounded to 2 decimal places) - the answer.You can assume the total distance of all the umbrella's movement will not exceed 550*W.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
2 4 3 10
0 1 1
3 1 -1

<b>Output:</b>
65.00
</pre>


______________________________________________________
SEQ2||||||true||||||


<p>You are to write a program to perform some operations on a given sequence.These operations are listed below:</p>
<pre>
---------------------------------------------------------------------------------------------
| Name        | Input format   |              function                                      |
---------------------------------------------------------------------------------------------
| Modify      | MAKE-SAME i t c| Modify all the t numbers from the ith number(included) to  |
|             |                | number c.                                                  |
---------------------------------------------------------------------------------------------
| Insert      | INSERT i t s   | Insert t numbers after the ith number.s is a sequence of t |
|             |                | numbers which should be inserted one-to-one.If i=0,you     |
|             |                | should insert s in the first of the sequence.              |
---------------------------------------------------------------------------------------------
| Delete      | DELETE i t     | Delete t numbers after the ith number(included).           |
---------------------------------------------------------------------------------------------
| Reverse     | REVERSE i t    | Reverse t numbers after the ith number(included).          |
---------------------------------------------------------------------------------------------
| Get sum     | GET-SUM i t    | Output the sum of t numbers after the ith number(included).|
---------------------------------------------------------------------------------------------
| Get maximum | MAX-SUM        | Output the maximum partial sum in the sequence now.        |
| partial sum |                |                                                            |
---------------------------------------------------------------------------------------------
</pre>
<p>See the example.</p>

*******InputConstraints*******

<p>The very first line contains a single integer T(T<=4), the number of test cases.T blocks follow.</p>
<p>For each test case: </p>
<p>The first line contains two integers n and m(m<=20000), the number of numbers in the sequence in the beginning and the 

number of operations.</p>
<p>The second line contains n integers seperated by spaces, the sequence in the beginning.</p>
<p>Next m lines, each contains an operation listed above.</p>
<p>You can assume that for each test case:</p>
<div align="justify">
    <ul>
        <li>
        No invalid operation is in the input.
        <li>
        Number of numbers in the sequence is no more than 500000 and not less than 1 at any time.
        <li> 
        All the numbers in the sequence is in range[-1000,1000] at any time.
        <li>
        The total number of numbers inserted will be not more than 4,000,000.The input is no more than 20MB.
        </li>
    </ul>
</div>

*******OutputConstraints*******

<p>For each Get sum and Get maximum partial sum operation,you should write the answer to the output,one per line.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
9 8
2 -6 3 5 1 -5 -3 6 3
GET-SUM 5 4
MAX-SUM
INSERT 8 3 -5 7 2
DELETE 12 1
MAKE-SAME 3 3 2
REVERSE 3 6
GET-SUM 5 4
MAX-SUM

<b>Output:</b>
-1
10
1
10

<b>Hints:</b>
<p>After the 3rd op., the sequence is </p>
2 -6 3 5 1 -5 -3 6 -5 7 2 3

<p>After the 4th op., the sequence is </p>
2 -6 3 5 1 -5 -3 6 -5 7 2

<p>After the 5th op., the sequence is </p>
2 -6 2 2 2 -5 -3 6 -5 7 2

<p>After the 6th op., the sequence is </p>
2 -6 6 -3 -5 2 2 2 -5 7 2

</pre>
<b>Warning: enormous Input/Output data, be careful with certain languages</b>


______________________________________________________
PRLGAME||||||true||||||


<p>The game of pearls is to use the following 12 kinds of pearl designs each one and only one time to make the big pearl design.The pearl designs can be rotated and turned over arbitrarily. See the pictures below.</p>
<pre>

                   The empty grids

<img src="http://www.spoj.pl/content/john_jones:prlgame.bmp">

                  A sample big pearl design

<img src="http://www.spoj.pl/content/john_jones:prlgame2.bmp">

A sample big pearl design used characters instead of colors

<img src="http://www.spoj.pl/content/john_jones:prlgame3.bmp">

          Part A

<img src="http://www.spoj.pl/content/john_jones:prlgameA.bmp">

          Part B

<img src="http://www.spoj.pl/content/john_jones:prlgameB.bmp">

          Part C

<img src="http://www.spoj.pl/content/john_jones:prlgameC.bmp">

          Part D

<img src="http://www.spoj.pl/content/john_jones:prlgameD.bmp">

          Part E

<img src="http://www.spoj.pl/content/john_jones:prlgameE.bmp">

          Part F

<img src="http://www.spoj.pl/content/john_jones:prlgameF.bmp">

          Part G

<img src="http://www.spoj.pl/content/john_jones:prlgameG.bmp">

          Part H

<img src="http://www.spoj.pl/content/john_jones:prlgameH.bmp">

          Part I

<img src="http://www.spoj.pl/content/john_jones:prlgameI.bmp">

          Part J

<img src="http://www.spoj.pl/content/john_jones:prlgameJ.bmp">

          Part K

<img src="http://www.spoj.pl/content/john_jones:prlgameK.bmp">

          Part L

<img src="http://www.spoj.pl/content/john_jones:prlgameL.bmp">

</pre>

*******InputConstraints*******

<p>Ten test cases(given one after another,you have to process all!), Each contains a big design, 'A'-'L' denote the filled grids, '.' denotes the empty grids,see the example. You can assume that the pearl designs used are completely put into the empty grids.</p>

*******OutputConstraints*******

<p>A big design which has no grids that haven't been filled and each pearl design is used one and only one time in it,or 'No solution'(without quotes) if there's no solution.If there are multiple solutions,output any.</p>

*******IOTestCases*******

<pre><b>Input:</b>
.
..
...
....
.....
.....C
...CCC.
EEEHH...
E.HHH....
E.........
[and 9 test cases more]

<b>Output:</b>
B
BK
BKK
BJKK
JJJDD
GJGDDC
GGGCCCI
EEEHHIIA
ELHHHIAAF
ELLLLIFFFF
[and 9 test cases more]
</pre>


______________________________________________________
TOMJERRY||||||true||||||


<p>You may know the great American cartoon called <i>Tom and Jerry</i>. In that cartoon, Tom is a stupid cat, and Jerry is a cute mouse. They are all living in Blue Mary's house. (Maybe the name of the owner of the house they living in is not Blue Mary, but this is not important. ^_^)</p>
<p>One day Jerry gets a GPS, so after that he can detect Tom's position accurately. He decides to play tricks on Tom again. The house has N (1<= N <= 1000) rooms numbered from 1 to n and E(1<= E <=1000) corridors, each connects two different rooms, and there is at most one corridor between two rooms. When Jerry gets the GPS, he is in room No.P(1<= P <=N) while Tom is in room No.Q(1<= Q <= N). You may assume that room No.P and room No.Q is in one connected componenet and they are not the same room. Since Jerry is very cute and Tom is very stupid, if they are in the same room, Jerry can befool Tom as soon as possible. Now Jerry wants to get to Tom's room as soon as possible. At each time unit, he will detect Tom's position, and choose the room next to his room which is the nearest to Tom's position and go to that room. If there are several rooms satisfied the condition above, he will choose the one with the least room number. After that, if they are in the same room, Jerry will stay and play tricks on Tom, or he will repeat this progress one more time otherwise.</p>
<p>Now poor Tom doesn't know he'll be played, he is taking a walk in the house leisurely. Each time unit he will choose a room next to the room he is in and go to that room or stay in the room he is in now, with equal probability. For example, if Tom is now in room 1, room 2 and room 3 are the only neighbors of room 1 (i.e. there is a corridor between room 1 and room 2, and there is a corridor between room 1 and room 3), at the next time unit, the probability of that Tom is in room 1,2 or 3 are all 1/3.</p>
<p>Suppose at each time unit, Jerry moves first, and Tom will move after Jerry complete his move. You task is to calculate the expected time unit from the time when Jerry gets the GPS to the time when Jerry and Tom are in the same room.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line.</p>
<p>For each test case:</p>
<p>The first line contains two space-separated integers N and E. The second line contains two space-separated integers P and Q. E lines then follow, each contains 2 space-separated integers A and B which shows that there is a corridor between room A and room B. </p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>Output one line, which contains a single real number - the expected time unit, rounded to 3 decimal places.</p>

*******IOTestCases*******

<pre><b>Input:</b>
2
4 3
1 4
1 2
2 3
3 4
9 9
9 3
1 2
2 3
3 4
4 5
3 6
4 6
4 7
7 8
8 9

<b>Output:</b>
1.500
2.167

<b>Hint</b>
The calculations for the first example can be found <a href="http://www.spoj.pl/forum/viewtopic.php?p=9184">here</a>.
</pre>



______________________________________________________
LEMON||||||true||||||


<p>Blue Mary extremely like lemon trees. When the softness moon shines the ground, she lies under the lemon tree, thinking about the true meaning of life, the universe and everything quietly.</p>
<p>Before long, she is shadowed by the lemon tree. Blue Mary is such a cute girl, that she soon comes up with a question: what is the area of the shadow?</p>
<p>She knows it's hard for her to measure the shadow directly. So that, she tries to calculate it in geometrical way.</p>
<p>As Mary knows well about this beautiful lemon tree, she regards it as N frustums of cones,each frustums of cone is defined as a floor, numbered 1..N from the bottom to top. Of course, the Nth(Top) is a cone. Each frustum has two circle surfaces. Each two adjacent frustums shares a same circle surface. All the centres of the circle surfaces are on a plumb line. Mary knows that the height of every frustums is h1,h2,..,hn, and the undersurface of the 1st frustum has a height h0 from the ground. </p>
<p>Mary measures that the included angle of the moonshine and the ground is Alpha, which is an acute angle. </p>
<img src="http://www.spoj.pl/content/john_jones:lemon1.bmp"><img src="http://www.spoj.pl/content/john_jones:lemon1.bmp">
<p>For briefness, we suppose the moonshine is parallel and the ground is aclinic.</p>
<p>And we ignore the bole of the tree. Mary comes up with the answer quickly, and she wants your ideas all the same.</p>

*******InputConstraints*******

<p>The very first line of the input data contains one integer T, the number of tests. T blocks follow.</p>
<p>For each test:</p>
<p>The first line of the input data contains one integer number N(N<=500) and a real number Alpha (Alpha>0.3).</p>
<p>N denote the number of floors, Alpha denote the included angle of the moonshine and the ground(radian).</p>
<p>The second line contains N + 1 real number h0 h1 h2... hn.(hi<=100) h0 denotes the height of the undersurface of the 1st frustum. h1 .. hn denote the height of each floor.</p>

<p>The third line contains N real number r1 r2 .. rn(ri<=100), the radii of the undersurface in 
each floor.</p>

<p>All the data in each line is seperated by spaces.</p>


*******OutputConstraints*******

<p>For each data set you should output one line containing a single real number - the area of the shadow. Numbers should be rounded to two decimal places. </p>


*******IOTestCases*******

<pre><b>Input:</b>
1
2 0.7853981633
10.0 10.00 10.00
4.00 5.00

<b>Output:</b>
171.97
</pre>
<b>Time limit has been changed from 30 seconds to 13 seconds, some naive solution gets TLE.</b>


______________________________________________________
WORMS||||||true||||||


<h3>Background</h3>
<p>This problem is completely unrelated to its problem code ^_^.</p>
<h3>Description</h3>
<p>A natural number <i>x</i> is called a good number if one or two of the next two conditions is satisfied:</p>
<div align="justify">
       <ul>
              <li>
              7 is a divisor of <i>x</i>.
              <li>
              7 is a digit of <i>x</i>.</li>
       </ul>
</div>
<h3>Task</h3>
<p>Write a program that:</p>
<div align="justify">
	<ul>
		<li>
		reads a number <i>n</i> from the standard input,
		<li>
		computes the number of good numbers in range[1,10<sup>n</sup>],
		<li>
		writes the result to the standard output.</li>
	</ul>
</div>
<b>Solve the problem in at most 0.5kB of source code. </b>

*******InputConstraints*******

<p>The input begins with an integer <i>t</i>(<i>t</i><= 210), the number of test cases.<i>t</i> test cases follow.</p>
<p>For each test case, the first and only line contains  an integer <i>n</i> (1<=<i>n</i><=500).</p>

*******OutputConstraints*******

<p>For each test case the output consists of one line that contains the answer.</p>

*******IOTestCases*******

<pre><b><tt>Sample input:</tt></b>
3
1
2
1

<b><tt>Sample output:</tt></b>
1
30
1
</pre>



______________________________________________________
PROFIT||||||true||||||


<p>CS&T, the well-known cellphone company, is going to set some new service stations among n possible ones, which are numbered 1,2,...,n. The costs of setting these stations are known as P1,P2,..,Pn. Also the company has made a survey among the cellphone users, and now they know that there are m user groups numbered 1,2,...,m, which will communicate by service station Ai and Bi, and the company can profit Ci.</p>
<p>Now CS&T wants to know which service stations are to be set that the company will profit most.</p>

*******InputConstraints*******

<pre>T [The number of tests]
n m [n<=5000 m<=50000]
P1 P2 P3 ... Pn [Pi<=100]
A1 B1 C1 
A2 B2 C2
...
Am Bm Cm [1<=Ai,Bi<=n, Ci<=100]
[other tests]
<p>At least 80% of the tests satisfy that n<=200, m<=1000.</p>
</pre>

*******OutputConstraints*******

<pre>MaximumProfit
[other tests]
</pre>

*******IOTestCases*******

<pre>
<b>Input:</b>
1
5 5
1 2 3 4 5
1 2 3
2 3 4
1 3 3
1 4 2
4 5 3

<b>Output:</b>
4
<b>Hints:</b>
The service stations to be set are 1,2,3.
</pre>


______________________________________________________
PT07A||||||true||||||


<p>
Hey, ACRush and Jelly are playing a game ! Let take a look at its rule: </p>
<p>You are given a tree. Two players take turns cutting edges on a tree. Some nodes is on the "ground".
When a player cuts an edge, all the edges that are no longer connected to the ground disappear.
The player who can not take a move loses.
</p>
<p>ACRush plays first. Both of them are very good players. If you know state of the tree they are playing with, can you guess who will win?</p>

<img src="http://www.spoj.pl/content/thanhvy:green_fig.png">
     Node 4 is on the ground.

*******InputConstraints*******

<p>    Input consists of multiple test-cases. The first line contains one integer <i>t</i> - number of cases (0 < <i>t</i> <= 20).
    For each case, the input format is following.

    The first line contains one integer <i>N</i> (1 <= <i>N</i> <= 100000).
    The next line <i>N</i> integers s[i] (1 or 0).
    If s[i] is 1, the <i>i</i>-th node is on the ground.
    If s[i] is 0, the <i>i</i>-th node is not on the ground.

    Each line of the following <i>N</i> - 1 lines contains two integers u, v.
    They denote there is an edge between node u and node v (1 <= u,v <= N).<Br>
There is no blank line after each case.


*******OutputConstraints*******

<p>
    For each case, output who will win the game. If ACRush wins, output <i>1</i>; otherwise, output <i>0</i> (Jelly wins).<br>
There is no blank line after each case.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
0 0 0 1
1 2
2 3
2 4

<b>Output:</b>
1
</pre>



______________________________________________________
PT07B||||||true||||||


<p>You are given an unweighted, undirected tree <i>T</i>.
We say <i>T</i> is special iff it has this property: </p>

<p>"All nodes of degree greater than or equal to 3 are surrounded by at most two nodes of degree two or greater."</p>

<p>Finding maximal size subtree of this tree so that it's a special tree. </p>


*******InputConstraints*******

<p>The first line of the input file contains one integer <i>N</i> --- number of nodes in the tree
(0 < <i>N</i> <= 10<sup>6</sup>). Next <i>N</i>-1 lines contain <i>N</i>-1 edges of that tree --- Each line contains a pair (<i>u</i>, <i>v</i>) means
there is an edge between node <i>u</i> and node <i>v</i> (1 <= <i>u</i>, <i>v</i> <= <i>N</i>).
</p>


*******OutputConstraints*******

<p>At the first line, output number of nodes in the optimal subtree you found.
Next lines, print all edges belong to that subtree, each line contains a pair <i>u</i> <i>v</i> means an edge between node <i>u</i> and node <i>v</i>.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 2
2 3
2 4
2 5

<b>Output:</b>
5
1 2
2 3
2 4
2 5
</pre>



______________________________________________________
PT07C||||||true||||||


<p>
    Jiajia is the king of the GbAaY Kingdom. He always squeezes his 20 ministers as coolies.
    There are <i>n</i> cities and <i>m</i> two-way roads connecting cities in the kingdom.
    Because of the increasing of the oil fee, he want to simplify the road system
    in the GbAaY Kingdom to save the traffic cost.
    Thus, some of roads will be removed. But he requests the ministers guarantee
    that there is always a path between any two cities.
    GbAaY Minister Loner suggests Jiajia for the convenience of the traffic management,
    the farthest distance between cities should be minimal. Unhesitatingly, Jiajia agrees this resolution.
    As the GbAaY Kingdom's minister (cooly), you must work hard for Jiajia to make the simplification plan.
</p>


*******InputConstraints*******

<p>   The first line contains two integers <i>n</i>, <i>m</i> (1 <= <i>n</i> <= 200, <i>n</i> - 1 <= <i>m</i> <= 20000).
    Each line of the following <i>m</i> lines contains three integers <i>u</i>, <i>v</i>, <i>w</i> (<i>u</i> != <i>v</i>, 0 <= <i>w</i> <= 10<sup>5</sup>).
    They denote there is a road with length <i>w</i> between city <i>u</i> and city <i>v</i>.
</p>


*******OutputConstraints*******

<p>The first line contains one integer which is the farthest distance between cities after the simplification.
    Each line of the follow <i>n</i> - 1 contains two integers <i>u</i>, <i>v</i> (<i>u</i> < <i>v</i>).
    They denote there is an road between city <i>u</i> and city <i>v</i> in the simplification plan.
    If there are many optimal solutions, any of them will be accepted.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
1 2 1
2 3 1
1 3 1

<b>Output:</b>
2
1 2
1 3

</pre>



______________________________________________________
PT07D||||||true||||||


<p>
Given two integer <i>n</i>, <i>p</i>. 4 kinds of query is needed to solve:</p>
<p>
1. Counting the number of labeled unrooted trees with <i>n</i> nodes<br>
2. Counting the number of labeled rooted trees with <i>n</i> nodes<br>
3. Counting the number of unlabeled rooted trees with <i>n</i> nodes<br>
4. Counting the number of unlabeled unrooted trees with <i>n</i> nodes<br>
Calculate the answer modulo <i>p</i>.


*******InputConstraints*******

<p>
Each line contains three integers <i>k</i>, <i>n</i>, <i>p</i>. <i>k</i> denotes which kind of query this
case is.<br>
For Kind 1 or Kind 2 query, 1 <= <i>n</i> <= 10<sup>9</sup>.<br>
For Kind 3 or Kind 4 query, 1 <= <i>n</i> <= 10<sup>3</sup> and <i>n</i> <= <i>p</i>.<br>
For all queries, 2 <= <i>p</i> <= 10<sup>4</sup> and <i>p</i> is a prime.


*******OutputConstraints*******

<p>
For each query, output a line which contains only one integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
1 2 2
2 2 3
3 2 5
4 2 3

<b>Output:</b>
1
2
1
1
</pre>



______________________________________________________
PT07F||||||true||||||


<p>
After a lot of exams at school, Amber and his friends Ahyangyi, Dragon have a short vacation in Hong Kong Disneyland. Many interesting places they want to visit there: resort, castle,... . In each place and between them, there are special bidirectional rails, so that the visitors can drive a small special car, go around and have a sightseeing tour. This rail system is quite optimal it has tree shape ! Each time, you start a new route (or you can call it "path") with a car, you must purchase a new ticket. 

<p>
Amber and his friends surely want to visit all places, and each place exactly once, so bored to visit one place many times. But the trouble is they don't carry much money. So Amber thinks about a good way to purchase as small number of tickets as possible (i.e. minimal number of routes). We don't care how they can switch cars during their trip.

<p>
Now you're given maps of the Disneyland, please help them to find an optimal solution.
<p>
Take a look at the figure below:<br>
<img src="http://www.spoj.pl/content/thanhvy:cover_fig.png">
<p>
There are many optimal solutions here and Amber must purchase at least 3 tickets, for 3 disjoint routes. Two possible solutions are:<br>
<b>Solution 1:</b> <br>
1-st route: they visit 1 2 3<br>
2-nd route: they visit 4<br>
3-rd route: they visit 5 6 7<br>
<b>Solution 2:</b> <br>
1-st route: they visit 1 2 4 6 5<br>
2-nd route: they visit 3<br>
3-rd route: they visit 7


*******InputConstraints*******

<p>
There may be many maps in one input file. The first line of file is number of maps <i>T</i> (0 < T <= 10).
The following line is blank. Then, there are the descriptions of <i>T</i> maps.
<p>
For each map, the first line contains one integer <i>N</i> --- number of places in the Disneyland
(0 < N <= 10000). We number places from 1 to N. Next N-1 lines contain N-1 rails between places --- Each line contains a pair (u, v) means
there is a rail between place u and place v (1 <= u,v <= N).<br>
There is a blank line after each description.


*******OutputConstraints*******

<p>
For each map, the first line, write minimal number of routes <i>K</i>.
Next <i>K</i> lines, show out the routes in your solution, each has form u[1] u[2]...u[m], means the route starts at
place u[1] then visits place u[2],..., ends at place u[m]. So between 2 consecutive places in each route must have
a rail. If there are many solutions, any of them will be accepted.<br>
There is no blank line after each case.


*******IOTestCases*******


<pre>
<b>Input:</b>
1

7
1 2
2 3
2 4
4 6
5 6
6 7

<b>Output:</b>
3
1 2 3
4
5 6 7
</pre>



______________________________________________________
PT07G||||||true||||||


<p>
ACRush and his friends want to open a party to celebrate the good result of THU in ICPC 2007. They will use all halls in THU for their party. There are 2 kinds of hall: the small and the large one. In each hall, there is an electronic light system, which forms a tree topology to reduce redundant wires.

<ul type="disc">
<li>In a small hall, the light system is a general tree with n lights. The lights are numbered from 1 to <i>n</i> </li>
<li>In a large hall, the light system is obtained from <I>k</i> chains of lights, each chain has length <i>t</i>. The first lights of these k chains are connected with a big light at the central stage of the hall. The big light has id 1, the first light of each chain has id from 2 to k+1, then we continue with the second light of each chain, so on...</li>
</ul>
<p>
Take a look at the figure below:<br>
<img src="http://www.spoj.pl/content/thanhvy:graceful_fig.png">

<p>
ACRush hopes in every hall, each light has an unique color and so do the wires!
<P>
For easier to remember and to hang up lights against the walls, he sets a
rule:
<ul type="disc">
    <li>For each hall, we number the color from 0 to <I>n-1</i>, so each light will get a color id in set {0, 1, ..., <I>n-1</i>}.</li>
    <li>Color id of the wire connects i-th light and j-th light uniquely identified by the positive difference between color ids of i-th light and j-th light.</li>
</ul>
<p>
At first view, the rule seems easy, so everyone agrees with him. But it's really tough if the room is quite large, too hard to set colors for lights.
After few seconds, ACRush says <i>"So in this hall, the 1-st light should have color 3, the 2-nd one should have color 0,..."</i>. Well, how can he do it very fast? <br>

<p>
How about you ? Let write a program to help ACRush's friends setting colors for lights in all <i>T</i> halls.


*******InputConstraints*******

<p>
The first line of file is <i>T</i> -- number of halls in THU (0 < T <= 10).
The following line is blank. Then, there are the descriptions of T halls. 

<p>
For each hall, the first line contains one integer <i>kind</i>. <i>kind</i> denotes which kind of the current hall: 1 is a small hall, 2 is a large one.

On next line, there are two cases:
<ul type="disc">
    <li>For Kind 1, first line is n (1 <= n <= 27) -- number of lights. Next <i>n - 1</i> lines describe
wires in this hall. Each line is pair (u, v) -- there is a wire between light u and v (1 <= u, v <= n).</li>
    <li>For Kind 2, only one line contains two numbers k and t (1 <= k, t <= 1000).</li>
</ul>
<p>
There is a blank line after each description.


*******OutputConstraints*******

<p>
For each hall, show us <i>n</i> numbers on one line, i-th number is the color id of i-th light. If there are many solutions any of them will be accepted. Otherwise, if there is no solution, all color id should be <i>-1</i>.<br>
The color ids on one line are separated by exactly one blank, and you'd better not print any redundant blanks.
There is no blank line after each case.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

1
3
1 2
2 3

2
2 1

<b>Output:</b>
0 2 1
0 4 2 1 3
</pre>



______________________________________________________
PT07H||||||true||||||


<p>
The XML (eXtensible Markup Language) is gaining
popularity as a new standard for data representation and
exchange on the internet. 
XML provides a text-based means to describe and apply a tree-based structure to information.
The XML document consists of nested elements, some of which usually have attributes and content. 
But for simplifying this problem, we needn't consider the attributes and content, i.e. only tags allowed.
An element typically consists of two tags, a start tag and an end tag.
The start tag consists of a name surrounded by angle brackets, like "&lt;tag>"; 
the end tag consists of the same name surrounded by angle brackets, 
but with a slash preceding the name, like "&lt;/tag>". 
The element's content is empty or other sub-element (child) that appears between the start tag and the end tag.
Specially, no XML element that has the same tag in its direct sub-elements (children), 
i.e. All sibling elements have different tag names.
The following is an valid example for XML documents.
</p>

<pre>&lt;THU><br>	&lt;Team><br>		&lt;ACRush>&lt;/ACRush><br>		&lt;Jelly>&lt;/Jelly><br>		&lt;Cooly>&lt;/Cooly><br>	&lt;/Team><br>	&lt;JiaJia><br>		&lt;Team><br>			&lt;Ahyangyi>&lt;/Ahyangyi><br>			&lt;Dragon>&lt;/Dragon><br>			&lt;Cooly>&lt;Amber>&lt;/Amber>&lt;/Cooly><br>		&lt;/Team><br>	&lt;/JiaJia><br>&lt;/THU>

</pre>

<p>
For identifying the elements in a document, we number the elements 
in according to the order that the start tags of the elements appear in the document.
For instances, "THU" is numbered 1. 
The first "Team" is numbered 2. "ACRush" is numbered 3. 
"Ahyangyi" is numbered 8.
</p>
<p>
The problem of querying XML documents has been given much attention by researchers.
Now we are given a querying pattern of XML documents and a text of XML documents.
The following is an valid example for pattern.
</p>
<pre>&lt;Team>&lt;Cooly>&lt;/Cooly>&lt;/Team></pre>
<p>
And we are requested to find all occurrences of the pattern in the text of XML documents. 
Here, the pattern occurs at a particular text position if placing the pattern with root element at that
text position leads to a situation in which each pattern element overlaps some text element with the same label. 
Because the sibling elements have different labels, there is only one way to put the pattern into the text.

</p>


*******InputConstraints*******

<p>
There are two parts in the input file.
The first part is a valid XML documents with exactly one root element.
The second part is a valid XML documents as querying pattern with exactly one root element.
Please ignore all whitespaces (unvisiable characters) in the input file, 
i.e. only consider the uppercase and lowercase letter and "/", "<", ">". 
Assume XML documents is always strictly a rooted tree. 
The input file is less than 100kb.
</p>


*******OutputConstraints*******

<p>
Output all the occurrences of pattern in a text of XML documents. 
The first line consists of an integer <i>n</i> that denotes the number of the occurrences. 
Then the next <i>n</i> line, each line consists of an id number of an element that occurs the query pattern. 
Please print them in increasing order.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
&lt;THU><br>	&lt;Team><br>		&lt;ACRush>&lt;/ACRush><br>		&lt;Jelly>&lt;/Jelly><br>		&lt;Cooly>&lt;/Cooly><br>	&lt;/Team><br>	&lt;JiaJia><br>		&lt;Team><br>			&lt;Ahyangyi>&lt;/Ahyangyi><br>			&lt;Dragon>&lt;/Dragon><br>			&lt;Cooly>&lt;Amber>&lt;/Amber>&lt;/Cooly><br>		&lt;/Team><br>	&lt;/JiaJia><br>&lt;/THU>
&lt;Team>&lt;Cooly>&lt;/Cooly>&lt;/Team>

<b>Output:</b>
2
2
7
</pre>



______________________________________________________
PT07J||||||true||||||


<p>	You are given a node-labeled rooted tree with <i>n</i> nodes.
</p>
<p>
	Define the query (<i>x</i>, <i>k</i>): Find the node whose label is <i>k</i>-th largest in the subtree of the node <i>x</i>.
	Assume no two nodes have the same labels.</p>


*******InputConstraints*******

<p>
The first line contains one integer <i>n</i> (1 <= <i>n</i> <= 10<sup>5</sup>).
The next line contains <i>n</i> integers <i>l<sub>i</sub></i> (0 <= <i>l<sub>i</sub></i> <= 10<sup>9</sup>) which denotes the label of the <i>i</i>-th node.
</p>

<p>
Each line of the following <i>n</i> - 1 lines contains two integers <i>u</i>, <i>v</i>.
They denote there is an edge between node <i>u</i> and node <i>v</i>.
Node 1 is the root of the tree.
</p>
<p>
The next line contains one integer <i>m</i> (1 <= <i>m</i> <= 10<sup>4</sup>) which denotes the number of the queries.
Each line of the next <i>m</i> contains two integers <i>x</i>, <i>k</i>. (<i>k</i> <= the total node number in the subtree of <i>x</i>)
</p>

*******OutputConstraints*******

<p>For each query (<i>x</i>, <i>k</i>), output the index of the node whose label is the <i>k</i>-th largest in the subtree of the node <i>x</i>.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 3 5 2 7
1 2
2 3
1 4
3 5
4
2 3
4 1
3 2
3 2

<b>Output:</b>
5
4
5
5
</pre>



______________________________________________________
PT07K||||||true||||||


<p>
In WinD's birthday, JiaJia opens a small contest for all guests: just typing all characters from 'a' to 'z', who fastest is the winner. The award is a very
big bunch of balloons. Of course, JiaJia hopes his girlfriend - WinD can win, since he only carries two bunches with him and the award for this contest
looks prettier. Unfortunately, life is not always as he expected, the winner is Amber. So JiaJia can only give WinD his second bunch of balloons. After the
party ended, WinD said "I prefer that bunch of balloons to this one!! If you can't give me something the same as it, I don't want to see you anymore!".
Well, JiaJia really has a brainstorm. 
</p>

<p>
If we consider balloons as nodes, the colorful strings connect them as edges,
and color of each balloon is label of each node then we have each bunch of
balloons is a rooted, labeled, ordered tree. 
</p>

<p>
We call <i>T</i> a labeled tree if each node is assigned a symbol from a fixed
finite alphabet. And <i>T</i> is an ordered tree if a left-to-right order among siblings in <i>T</i> is given.
</p>
<p>
JiaJia can do these 3 operators to change the shape of a bunch of balloons (<i>T</i>):
<ul>
     <li> <b>Relabel</b> (recolor a balloon)  Change the label of a node <i>v</i> in T. </li>
     <li><b>Delete</b> (remove a balloon) Delete a non-root node <i>v</i> in T with parent <i>p</i>, making the children of <i>v</i> become the children of <i>p</i>.
        The children are inserted in the place of <i>v</i> as a subsequence in the left-to-right order of the children of <i>p</i>.</li>
       <li> <b>Insert</b> (add a balloon) The complement of <b>Delete</b>.
        Insert a node <i>v</i> with any label as a child of node <i>p</i> in <i>T</i>, making <i>v</i>
        be the parent of a consecutive subsequence of the children of <i>p</i>.</li>
</ul>
<img src="http://www.spoj.pl/content/thanhvy:edit_fig.png">
<img src="http://www.spoj.pl/content/thanhvy:edit_fig1.png">
</p>
<p>
Please help the poor guy JiaJia, use as few number of operators to make WinD's bunch of balloons exactly the same as Amber's bunch of balloons. His girlfriend can't wait any longer. Note that, he can only make changes with WinD's bunch.
</p>

*******InputConstraints*******

<p>
    The input file contains two bunches of balloons (or trees). The first is of WinD, the second is of Amber.
</p><p>
    The first line of the input file contains one integer <i>N</i> - number of balloons in the bunch <i>T1</i> (1 <= <i>N</i> <= 500). Balloons are numbered from 1 to <i>N</i>.
</p><p>
    In next <i>N</i> lines, the <i>i</i>-th line contains the ordered children list of the <i>i</i>-th balloon.
    The first integer l[i] of the <i>i</i>-th line is the color id of the <i>i</i>-th balloon (0 <= l[i] <= 10<sup>4</sup>).
    The second integer c[i] of the <i>i</i>-th line c[i] is the number of the children of the <i>i</i>-th balloon. Then c[i] integers followed, which means the ordered children list of the <i>i</i>-th balloon.
</p><p>
    The remaining part of the input file is the description of the second bunch of balloons <i>T2</i>. The format is the same as <i>T1</i>.
</p>

*******OutputConstraints*******

<p>
Output minimum number of operators JiaJia needs to do.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 2 2 3
2 0
1 0
2
1 1 2
3 0

<b>Output:</b>
2


______________________________________________________
MOLE||||||true||||||


<p>
<img src="http://www.spoj.pl/content/abhilash_i:whac" style="float: right" vspace="3" hspace="8" alt="Map">
While visiting a traveling fun fair you
suddenly have an urge to break the high
score in the Whac-a-Mole game. The goal
of the Whac-a-Mole game is to... well...
whack moles. With a hammer. To make
the job easier you have &#64257;rst consulted
the fortune teller and now you know the
exact appearance patterns of the moles.
    The moles appear out of holes occupying the n<sup>2</sup> integer points (x, y) 
satisfying 0 &#8804; x, y &lt;n in a 
two-dimensional coordinate system. 
At each time step, some moles will 
appear and then disappear again before 
the next time step. After the moles appear 
but before they disappear, you are able
 to move your hammer in a straight line 
to any position (x2 , y2 ) that is at ditance 
at most d from your current position (x1 , y1 ). For simplicity, we assume that yo
can only move your hammer to a point having integer coordinates. A mole is whacke
if the center of the hole it appears out of is located on the line between (x1 , y1 ) an
(x2 , y2 ) (including the two endpoints). Every mole whacked earns you a point. Whe
the game starts, before the &#64257;rst time step, you are able to place your hammer anywher
you see &#64257;t.




*******InputConstraints*******

<p>
The input consists of several test cases. Each test case starts with a line containing three
integers n, d and m, where n and d are as described above, and m is the total number
of moles that will appear 
(1 &#8804; n &#8804; 20, 1 &#8804; d &#8804; 5, and 1 &#8804; m &#8804; 1000). Then follow
m lines, each containing three integers x, y and t giving the position and time of the
appearance of a mole (0 &#8804; x, y < n and 1 &#8804; t &#8804; 10). No two moles will appear at the
same place at the same time.
    The input is ended with a test case where n = d = m = 0. This case should not be
processed.



*******OutputConstraints*******

<p>For each test case output a single line containing a single integer, the maximum
possible score achievable.



*******IOTestCases*******


<pre>
<b>Input:</b>
4 2 6
0 0 1
3 1 3
0 1 2
0 2 2
1 0 2
2 0 2
5 4 3
0 0 1
1 2 1
2 4 1
0 0 0


<b>Output:</b>
4
2

</pre>



______________________________________________________
RSORTING||||||true||||||


<p>You are given the scores of several players in a competition. Your task is to create a ranklist of the
players, sorted in decreasing order by score.</p>
<p>
Unfortunately, the data structure used for the list of players supports only one operation, which
moves a player from position i to position j without changing the relative order of other players. If
i > j, the positions of players at positions between j and i &#8722; 1 increase by 1, otherwise if i &lt; j the
positions of players at positions between i + 1 and j decrease by 1.</p>
<p>
This operation takes i steps to locate the player to be moved, and j steps to locate the position
where he or she is moved to, so the overall cost of moving a player from position i to position j is
i + j. Here, positions are numbered starting with 1.</p>
<p>
Determine a sequence of moves to create the ranklist such that the sum of the costs of the moves is
minimized.
</p>

*******InputConstraints*******

<p>The input consists of <b>exactly 10</b> test cases. The first line of each test case contains n (2 &#8804; n &#8804; 1000),
the number of players. Each of the following n lines contains one non-negative integer s<sub>i</sub> (0 &#8804; s<sub>i</sub> &#8804; 1000000), the scores of the players in the current order. You may assume that all scores are distinct.
</p>

*******OutputConstraints*******

<p>For each test case, print in one line the number of moves used to create the ranklist. The following lines should specify the moves in the
order in which they are applied. Each move should be described by a line containing two integers i
and j, which means that the player at position i is moved to position j. The numbers i and j must be
separated by a single space.
</p>

*******IOTestCases*******

<i>here only one test case</i>
<pre>
<b>Input:</b>
5
20
30
5
15
10

<b>Output:</b>
2
2 1
3 5
</pre>



______________________________________________________
BLUEEQ3||||||true||||||


<h3>Background</h3>
<p>This morning Blue Mary wrote some equations on a piece of paper and left it on her desk.After solving some problems in SPOJ,she found that her classmate H.L. replaced all characters on the paper with some other ones.H.L. told her he replaced the same characters with the same ones,and different characters with different ones because of his goodness.Now Mary needs your help to get the original equations back.(See problem BLUEEQ)</p>

*******InputConstraints*******

<p>Ten test cases(given one after another,you have to process all!)For each test case, the first line is a single integer n(n<=21).Next 3 lines contains 3 strings, each of them has a length of n and contains only first n capital latin characters.The sum of the numbers the first two strings indicates equals to the number the third string incicates.The numbers can have leading zeros and each of their bases is n.</p>

*******OutputConstraints*******

<p>For each test case you should output one line contains n numbers separated by spaces, which is a permutation of integer numbers 0 to n-1.Number x is on the k-th position iff x is replaced by the kth capital latin character.There is one and only one solution for each test case.</p>

*******IOTestCases*******

<pre><b>Input:</b>
5
ABCED
BDACE
EBBAA
[and 9 test cases more]
<b>Output:</b>
1 0 3 4 2
[and 9 test cases more]
</pre>


______________________________________________________
MKJUMPS||||||true||||||


<p>
A knight is a piece used in the game of chess. The chessboard itself is square array of cells. Each time a knight moves, its resulting position is two rows and one column, or two columns and one row away from its 	 
starting position. Thus a knight starting on row r, column c &#8211; which we&#8217;ll denote as (r,c) &#8211; can move to any of 	 
the squares (r-2,c-1), (r-2,c+1), (r-1,c-2), (r-1,c+2), (r+1,c-2), (r+1,c+2), (r+2,c-1), or (r+2,c+1). Of course, the knight may not move to any square that is not on the board.

<p><br>
Suppose the chessboard is not square, but instead has rows with variable numbers of columns, and with each row offset zero or more columns to the right of the row above it. The figure to the left illustrates one possible configuration. How many of the squares in such a modified chessboard can a knight, starting in the upper left square (marked with	an asterisk), not reach in any number of moves without resting in any square more than once?

<p><br>
<center><img src='/content/steinersp:jumps.png'alt='subir imagenes' border='0'></center>

<p>
<br><br>
If necessary, the knight is permitted to pass over regions that are outside the borders of the modified chessboard, but as usual, it can only move to squares that are within the borders of the board. 

<br><br>

*******InputConstraints*******

<p>
There will be multiple cases to consider. The input for each case begins with an integer n, between 1 and 10, that specifies the number of rows in the modified chessboard. Following n there will be n pairs of integers, with the ith pair corresponding to the ith row of the chessboard. The first integer of each pair indicates the number of squares skipped at the beginning of the row. The second integer indicates the number of squares in the row (which will always be at least 1).The last case will be followed by the integer 0.

<p><br>
For example, input for the case illustrated by the chessboard shown above would be:

<p><br>7 0 3 0 3 0 4 0 4 1 3 1 7 4 4 

<p><br>
The maximum dimensions of the board will be 10 rows and 10 columns. That is, any modified chessboard specified by the input will fit completely on a 10 row, 10 column board.

<br><br>

*******OutputConstraints*******

<p>
For each input case, display the case number (1, 2, &#8230;), and the number of squares that the knight can not reach. Display the results in the format shown in the examples below.

<br><br>

*******IOTestCases*******


<br>
<pre>
<b>Input:</b>
7 0 3 0 3 0 4 0 4 1 3 1 7 4 4
3 0 3 0 3 0 3
2 0 1 2 1
0

<b>Output:</b>
Case 1, 4 squares can not be reached.
Case 2, 1 square can not be reached.
Case 3, 0 squares can not be reached.
</pre>



______________________________________________________
MOBILE2||||||false||||||

<p>You have been asked to buy a gift for your baby brother, Ike. However, you have noticed that 
Ike has a very particular taste in gifts. He only likes gifts that are configured in his particular 
style. </p>
<p>You have found a shop that sells mobiles. A mobile is a multi-layered decoration that is typically 
hung from the roof. Each mobile consists of a series of horizontal rods connected by vertical wires. 
Each rod has a wire hanging from both ends, which holds either another horizontal rod or a toy. </p>
<p>A sample mobile is shown below: </p>
<img src="http://www.spoj.pl/content/john_jones:mobile21.jpg">
<p>To satisfy your brother, you need to find a mobile that can be reconfigured so that: </p>
<p>(i) any two toys are either at the same level (that is, joined to the roof by the same number of 
rods), or di.er by only one level; </p>
<p>(ii) for any two toys that differ by one level, the toy to the left is further down than the toy to 
the right. </p>
<p>Mobiles can be reconfigured by performing swaps. A swap involves taking some rod, unhooking 
whatever is hanging beneath the left and right ends, and reattaching them at opposite ends (that 
is, the right and left ends respectively). This process does not modify the ordering of any rods or 
toys further down. </p>
<p>Since you are training for the Informatics Olympiad, you decide to write a program to test 
whether a given mobile can be reconfigured into a gift that Ike will like! </p>
<p>As an example, consider the mobile illustrated earlier. Ike will not like this mobile. Although 
it satisfies condition (i), it breaks condition (ii) &#8212; the toy at the leftmost end is at a higher level 
than the toys to its right. </p>
<p>However, the mobile can be reconfigured into a mobile that Ike will like. The following swaps 
are required: </p>
<p>1. First, the left and right ends of rod 1 are swapped. This exchanges the positions of rods 2 
and 3, resulting in the following configuration: </p>
<img src="http://www.spoj.pl/content/john_jones:mobile22.jpg">
<p>2. Second, and finally, the left and right ends of rod 2 are swapped. This moves rod 4 to the 
left end of rod 2, and the toy to the right end of rod 2. </p>
<img src="http://www.spoj.pl/content/john_jones:mobile23.jpg">
<p>It can be seen that this final mobile satisfies Ike's requirements. All toys are at most one level 
apart, and the toys at a lower level are further to the left than the toys at a higher level. </p>
<p>Your task is, given a description of a mobile, to determine the smallest number of swaps required 
to reconfigure it so that Ike will like it (if this is possible). You may assume that the toys can 
never get in each other's way. </p>


______________________________________________________
BACKUP||||||true||||||


<p>You run an IT company that backs up computer data for large offices. Backing up data is not
fun, and so you design your system so that the different offices can back up each others' data while
you sit at home and play computer games instead.</p>
<p>The offices are all situated along a single street. You decide to pair up the offices, and for each
pair of offices you run a network cable between the two buildings so that they can back up each
others' data.</p>
<p>However, network cables are expensive. Your local telecommunications company will only give
you k network cables, which means you can only arrange backups for k pairs of offices (2k offices in
total). No office may belong to more than one pair (that is, these 2k offices must all be different).
Furthermore, the telecommunications company charges by the kilometre. This means that you
need to choose these k pairs of offices so that you use as little cable as possible. In other words,
you need to choose the pairs so that, when the distances between the two offices in each pair are
added together, the total distance is as small as possible.</p>
<p>As an example, suppose you had five clients with offices on a street as illustrated below. These
offices are situated 1 km, 3 km, 4 km, 6km and 12km from the beginning of the street. The
telecommunications company will only provide you with k = 2 cables.</p>
<img src="http://www.spoj.pl/content/john_jones:backup.jpg">
<p>The best pairing in this example is created by linking the first and second offices together, and
linking the third and fourth offices together. This uses k = 2 cables as required, where the first
cable has length 3km - 1km = 2 km, and the second cable has length 6km - 4km = 2 km. This
pairing requires a total of 4km of network cables, which is the smallest total possible.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them will be given at the very first line.</p>
<p>For each test case:</p>
<p>The first line of input will contain the integers n and k, representing the number of offices on the
street (2 <= n <= 100 000) and the number of available network cables (1 <= k <= n/2).</p>
<p>The following n lines will each contain a single integer (0 <= s <= 1 000 000 000), representing the
distance of each office from the beginning of the street. These integers will appear in sorted order
from smallest to largest. No two offices will share the same location.</p>

*******OutputConstraints*******

<p>Output should consist of a single positive integer, giving the smallest total length of network cable
required to join 2k distinct offices into k pairs.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
5 2
1
3
4
6
12

<b>Output:</b>
4

<b>Explanation</b>
<p>The sample input above represents the example scenario described earlier.</p>
</pre>
<b>Warning: large input/output data,be careful with certain languages</b>
<p>Blue Mary's Note: test data has been modified on Dec. 5, 2007. All the solutions have been rejudged.</p>


______________________________________________________
ZOO||||||true||||||


<p>The pride of the Asia-Pacific region is the newly constructed Great Circular Zoo. Situated on
a small Pacific island, it consists of a large circle of different enclosures, each containing its own
exotic animal as illustrated below.</p>
<img src="http://www.spoj.pl/content/john_jones:zoo1.jpg">
<p>You are in charge of public relations for the zoo, which means it is your job to keep people as
happy as possible. A busload of schoolchildren has just arrived, and you are eager to please them.
However, this is no easy task|there are animals that some children love, and there are animals
that some children fear. For example, little Alex loves monkeys and koalas because they are cute,
but fears lions because of their sharp teeth. On the other hand, Polly loves lions because of their
beautiful manes, but fears koalas because they are extremely smelly.</p>
<p>You have the option of removing some animals from their enclosures, so that children are not
afraid. However, you are worried that if you remove too many animals then this will leave the
children with nothing to look at. Your task is to decide which animals to remove so that as many
children can be made happy as possible.</p>
<p>Each child is standing outside the circle, where they can see five consecutive enclosures. You
have obtained a list of which animals each child fears, and which animals each child loves. A child
will be made happy if either at least one animal they fear is removed from their field of vision, or at least one animal they love is not removed from their field of vision.</p>
<p>For example, consider the list of children and animals illustrated below:</p>
<img src="http://www.spoj.pl/content/john_jones:zoo2.jpg">
<pre>
-----------------------------------------------------------------------
|Child      |Enclosures Visible |Fears                |Loves          |
|Alex       |2, 3, 4, 5, 6      |Enclosure 4          |Enclosures 2, 6|
|Polly      |3, 4, 5, 6, 7      |Enclosure 6          |Enclosure 4    |
|Chaitanya  |6, 7, 8, 9, 10     |Enclosure 9          |Enclosures 6, 8|
|Hwan       |8, 9, 10, 11, 12   |Enclosure 9          |Enclosure 12   |
|Ka-Shu     |12, 13, 14, 1, 2   |Enclosures 12, 13, 2 |-              |
-----------------------------------------------------------------------
</pre>
<p>Suppose you remove the animals from enclosures 4 and 12. This will make Alex and Ka-Shu
happy, because at least one animal that they fear has gone. This will also keep Chaitanya happy,
since both enclosures 6 and 8 still contain animals that he loves. However, both Polly and Hwan
will be unhappy, since they cannot see any animals that they love but they can still see all the
animals that they fear. This arrangement therefore gives a total of three happy children.</p>
<p>Now suppose you put these animals back into their enclosures, and remove the animals from
enclosures 4 and 6 instead. Alex and Polly will be happy because the animals that they fear in
enclosures 4 and 6 have gone. Chaitanya will be happy because, even though animal 6 has gone,
he can still see the animal in enclosure 8 which he loves. Likewise, Hwan will be happy because
she can now see the animal in enclosure 12, which she loves. The only person unhappy will be
Ka-Shu.</p>
<p>Finally, suppose you put the animals back once more and then remove only the animal from
enclosure 13. Ka-Shu will now be happy since one animal that he fears has been removed, and
Alex, Polly, Chaitanya and Hwan will all be happy since they can all see at least one animal that
they love. Thus this arrangement gives five happy children, the largest number possible.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them will be given at the very first line.</p>
<p>For each test case:</p>
<p>The first line will be of the form N C, where N is the number of animal enclosures
(10 <= N <= 10 000) and C is the number of children (1 <= C <= 50 000). The enclosures are
numbered 1, 2, ...,N clockwise around the circle.</p>
<p>Following this will be C additional lines of input, where each line describes a single child. Each
of these lines will be of the form:</p>
<pre>E F L X1 X2 ... XF Y1 Y2 ... YL;</pre>
<p>where:</p>
<div align="justify">
    <ul>
        <li>
        E is the first enclosure that the child can see (1 <= E <= N). In other words, the child can see enclosures E, E + 1, E + 2, E + 3 and E + 4. Note that numbers larger than N wrap back around the circle, so if N = 14 and E = 13 then the child can see enclosures 13, 14, 1, 2 and 3.
        <li>
        F is the number of animals that the child fears, and L is the number of animals that the child loves.
        <li>
        Enclosures X1,...,XF contain the animals that the child fears (1<=X1,...,XF<=N).
        <li>
        Enclosures Y1,...,YL contain the animals that the child loves (1<=Y1,...,YL<=N).
        <li>
        No two of the integers X1,...,XF,Y1,...,YL are equal, and all of these integers describe
enclosures that the child can see.</li>
    </ul>
</div>
<p>Children will be listed in sorted order according to the first enclosure E (so the child with
lowest E will appear first and the child with largest E will appear last). Note that more than one
child may have the same first enclosure E.</p>

*******OutputConstraints*******

<p>Output must consist of a single integer, giving the largest number of children that can be made
happy.</p>

*******IOTestCases*******

<pre><b>Sample Input:</b>
2
14 5
2 1 2 4 2 6
3 1 1 6 4
6 1 2 9 6 8
8 1 1 9 12
12 3 0 12 13 2
12 7
1 1 1 1 5
5 1 1 5 7
5 0 3 5 7 9
7 1 1 7 9
9 1 1 9 11
9 3 0 9 11 1
11 1 1 11 1
<b>Sample Output:</b>
5
6

<b>Explanation:</b>
<p>The first sample case is the example discussed earlier, in which all C = 5 children can be made
happy. The second sample case is an example in which it is impossible to make all C = 7 children
happy.</p>
</pre>
<b>Warning: large input/output data,be careful with certain languages</b>


______________________________________________________
GSS2||||||true||||||


<p>Being a completist and a simplist, kid Yang Zhe cannot solve but
  get Wrong Answer from most of the OI problems. And he refuse to
  write two program of same kind at all. So he always failes in
  contests.

<p>When having a contest, Yang Zhe looks at the score of every
  problems first. For the problems of the same score, Yang Zhe will
  do only one of them. If he's lucky enough, he can get all the scores
  wanted.

<p>Amber is going to hold a contest in SPOJ. She has made a list of
  <i>N</i> candidate problems, which fit Yang Zhe very well. So Yang
  Zhe can solve any problem he want. Amber lined up the problems,
  began to select. She will select a subsequence of the list as the
  final problems. Being A girl of great compassion, she'd like to
  select such a subsequence (can be empty) that Yang Zhe will get the
  maximal score over all the possible subsequences.

<p>Amber found the subsequence easily after a few minutes. To make
  things harder, Amber decided that, Yang Zhe can take this contest
  only if Yang Zhe can answer her <i>Q</i> questions. The question is:
  if the final problems are limited to be a subsequence
  of <i>list</i>[<i>X</i>..<i>Y</i>] (1 <= <i>X</i> <= <i>Y</i> <= N),
  what's the maximal possible score Yang Zhe can get?

<p>As we know, Yang Zhe is a bit idiot (so why did he solve the
  problem with a negative score?), he got Wrong Answer again... Tell
  him the correct answer!


*******InputConstraints*******

<ul>
  <li>Line 1: integer <i>N</i> (1 <= <i>N</i> <= 100000);
  <li>Line 2: <i>N</i> integers denoting the score of each problem,
  each of them is a integer in range [-100000, 100000];
  <li>Line 3: integer <i>Q</i> (1 <= <i>Q</i> <= 100000);
  <li>Line 3+<i>i</i> (1 <= <i>i</i> <= <i>Q</i>): two
  integers <i>X</i> and
  <i>Y</i> denoting the <i>i</i>th question.
</ul>


*******OutputConstraints*******

<ul>
  <li>Line <i>i</i>: a single integer, the answer to the <i>i</i>th
  question.
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
9
4 -2 -2 3 -1 -4 2 2 -6
3
1 2
1 5
4 9

<b>Output:</b>
4
5
3

</pre>
<b>Warning: large input/output data,be careful with certain languages</b>


______________________________________________________
TREEOI14||||||true||||||


<p>Byteasar has a cottage. Lately, he has bought n trees and had them planted all in one row. Byteasar does not,
however, like the order which the trees have been planted in. It particularly annoys him that tall and short
ones have been mixed up, and the composition does not meet his aesthetic criteria.
<p>Byteasar has invented a <i>disorder coefficient</i> so as to allow the gardener to comprehend his intentions: the
lower the value of the coefficient the prettier the row of trees. It is defined in the following way: |h<sub>1</sub>&#8722;h<sub>2</sub>|+
|h<sub>2</sub>&#8722;h<sub>3</sub>|+...+|h<sub>n&#8722;1</sub>&#8722;h<sub>n</sub>|, where h<sub>1</sub>,h<sub>2</sub>, . . . ,h<sub>n</sub> are the heights of consecutive trees in a row.
<p>Replanting is a very toilsome and cumbersome task, therefore Byteasar has ordered the gardener to replant
two trees at the most (i.e. interchange their positions). The task of the gardener is to choose the pair to replant
in a way that makes the disorder coefficient the smallest.
<p>The gardener is not sure if he has chosen the correct pair of trees and he fears he may lose his job if
he is mistaken. Help him: for each tree calculate the minimal disorder coefficient that may be attained by
switching places with any other tree.

<h3>Task</h3>
<p>Write a program which:
<ul>
<li> reads the height of the consecutive trees in a row from the standard input,
<li> for each tree calculates the minimal disorder coefficient that may be attained should it switch places
with some other tree (or should there be no change at all),
<li> writes the outcome to the standard output.
</ul>


*******InputConstraints*******

<p>The first line of the standard input contains one integer <i>n</i> (2 <= <i>n</i> <= 50000). The other contains <i>n</i> integers h<sub>i</sub>
(1 <= h<sub>i</sub> <= 100000000) separated by single spaces, denoting the height of the consecutive trees in the row.


*******OutputConstraints*******

<p>The output should consist of precisely <i>n</i> lines. The i-th line should contain a single integer - the smallest
disorder coefficient attainable when considering replanting of the i-th tree.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
7 4 5 2 5

<b>Output:</b>
7
7
8
7
7
</pre>
<b>* Added some unofficial tests</b>


______________________________________________________
AMATH||||||true||||||


<p>Given two numbers n (1<=n<10^100) and k (1<=k<=100), you are to determine whether there exists a positive integer T which satisfies that for every positive integer a, n^(a+T)-n^a is divisible by 10^k.</p>

*******InputConstraints*******

<p>Multiple test cases. Each test case contains two space-separated integers n and k. Input terminate by EOF.</p>
<p>The number of test cases will not more than 20.</p>

*******OutputConstraints*******

<p>For each test case, you should output the smallest positive integer number T which satisfies the condition above, or -1 if it doesn't exist.</p>

*******IOTestCases*******

<pre><b>Input:</b>
32 2

<b>Output:</b>
4
</pre>


______________________________________________________
GIWED||||||true||||||


<p>
A wedding is to be organized in a rectangular park of dimensions <span
 style="font-weight: bold;">M</span> by <span
 style="font-weight: bold;">N</span>. Some parts of the
park are covered by <span style="font-weight: bold;">K </span>rectangular
carpets. These carpets, produced by <span
 style="font-style: italic;">ItSucks Corporation </span>are
revolutionary self cleaning carpets - they suck any liquid they come in
contact with! The organizer wants to water the park to keep the grass
fresh. If there were no carpets, the organizer could have used a single
pipe to water the whole park but unforunately, the water doesn't seep
through the carpets. The organizer has at his diposal <span
 style="font-weight: bold;">L</span> pipes. The pipes
would be placed at fixed locations chosen by the organizer and can't be
moved. Water spreads from a pipe in all directions unless obstructed by
the park boundary or a carpet. What is the maximum area that can be
watered using these <span style="font-weight: bold;">L </span>pipes?


*******InputConstraints*******

<p>
The first line of the input contains a single integer T, the number of
test cases (1&lt;=T&lt;=30) . Each test case starts with a
single line containg the values M,N,K
and L ( 1&lt;=M&lt;=10000,
1&lt;=N&lt;=10000, 0&lt;=K&lt;=50,
1&lt;=L&lt;=10).  It is followed by K<span
 style="font-weight: bold;"> </span>lines, each line
containing 4 integers separated by single spaces, x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2
</sub>where (x<sub>1</sub>,y<sub>1</sub>)
and (x<sub>2</sub>,y<sub>2</sub>) are the zero
based coordinates of lower left and upper right vertex of the carpet.
Assume that x<sub>1</sub>&lt;x<sub>2 </sub>and y<sub>1</sub>&lt;y<sub>2</sub>.
 The carpets may cover each other. Water would not be able to
seep through even if two carpets touch in a corner.


*******OutputConstraints*******

<p>
For each test case, print the maximum area that can be watered on a single line


*******IOTestCases*******


<pre>
<b>Input:</b>
2
10 10 0 1
10 10 1 1
3 3 4 4

<b>Output:</b>
100
99

</pre>



______________________________________________________
AMBM||||||true||||||


<p>

The Bogus Corporation distributes salary to its employees in a weird
manner. The salary is distributed every <span
 style="font-weight: bold;">K</span> days,
&nbsp;and instead of same salary for each day, the salary for the i<sup>th</sup>
day is a<sub>i</sub>. An ambitious young manager, fresh
from <span style="font-style: italic;">Institute of
Mismanagement, </span>observes that people usually prefer to
take leave towards the end of this period of K days, when the workload
is higher. Instead of revising each of the a<sub>i</sub>'s,
the manager comes up with a quick fix solution - he redefines
the new salary on the i<sup>th</sup> day as b<sub>i</sub>=a<sub>i</sub>+2a<sub>i-1</sub>+2<sup>2</sup>a<sub>i-2</sub>+2<sup>3</sup>a<sub>i-3</sub>+........+2<sup>i-1</sup>a<sub>1</sub>
. Baba, one of the employees, is in a dire financial crisis, and must
accumulate at least<span style="font-style: italic;"> </span><span
 style="font-weight: bold;">N</span> rupees at the end
of the forthcoming period. Being a lazy worker that he is, he is
interested in finding out if attending particular days would guarantee
him <span style="font-style: italic;">exactly</span>
&nbsp;<span style="font-weight: bold;">N</span>
rupees at the end of the period. Can you help Baba?





*******InputConstraints*******

<p>

First line contains a single integer integer <span
 style="font-weight: bold;">T</span>, the number of
test cases ( 1&lt;=T&lt;=100). Each test case is described on
two lines. First line contains two integers, <span
 style="font-weight: bold;">N</span> and <span
 style="font-weight: bold;">K</span> (
1&lt;=N&lt;=2<sup>63</sup>-1,
1&lt;=K&lt;=50) , the second line contains a space separated
list of K integers, the <span style="font-weight: bold;">a</span><sub
 style="font-weight: bold;">i</sub><span
 style="font-weight: bold;">'s</span> ( 1&lt;=a<sub>i</sub>&lt;=1000).



*******OutputConstraints*******

<p>

For each test case, output on a single line 1-based indices of the days
(separated by a single space) he should attend to ensure a salary of
exactly N rupees at the end of the period. The indices should be
printed in the sorted order. In case of multiple answers, output any
one of them. If there is no answer, print -1.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
9 3
1 1 2
10 2
2 3
<b>Output:</b>
1 3
-1
</pre>



______________________________________________________
EXPLOSN||||||true||||||


<p>The day of 6.XII.2003 in Megabyteland began calm and quietly as any other day. Some people went to work, some - to school, some - to store to buy food. Drivers were traditionally stucked in traffic jams, drinking coffee and reading morning newspaper. Suddenly the regularity of this day was disturbed by huge explosion."They blew up the embassy of Bajtocja!!!" - somebody cried. Everybody began to run away in panic. 
<p>Police works pretty good in Megabyteland and first radiocars appeared near the embassy only few seconds after the explosion. All the people near the embassy were detained. Some of these people are the organizers of the explosion, but the others could by just occasional witnesses. During the testification each person named exactly one perpetrator. It is known, that if a man is not a perpetrator, than he always says the truth (he haven't a reason to lie, have he?).
 However, perpetrators want to make the work of the police more difficult, so a perpetrator can name any person during the testification (even himself). </p>
<p>The policemen are in the very hard situation. They should arrest some group of potential perpetrators, but it is difficult to determine who is guilty and who is not from the data they have. There exists many groups of potential perpetrators, that don't contradict to any of the testimonies. The policemen want to arrest as small innocent people as possible. So they would like to choose the group with minimal number of people. </p>
<p>Write a program that, given the number of detained people and their testimonies, will determine the number of people in the smallest group of potential perpetrators, that don't contradict to the testimonies. </p>

*******InputConstraints*******

<p>The first line of the input contains a single integer T, the number of testcases (1&lt;=T&lt;=10). 
<p>First line of  each testcase contains integer number N (2 &lt;= N &lt;= 100000), equal to the number of detained people (the people are numbered from 1 to N). The i-th of the following N lines contain one integer number Pi (1 &lt;= Pi &lt;= N). Here Pi is the man whom i-th man testified to be guilty. </p>

*******OutputConstraints*******

<p> The output should consist of T lines, containing one integer number for each testcase - the number of people in the smallest group of potential perpetrators, that don't contradict to the testimonies.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
2
3
1

<b>Output:</b>
2

</pre>



______________________________________________________
FUSION||||||true||||||


<p>

The Bogus Corporation claims to have solved the energy crisis by devising a method to perform controlled fusion reaction! The set up consists of a cube of side length N meters, which contain K point sources of electrons. Each of the sources can be configured to emanate an electron along any of the six possible directions corresponding to +X axis, -X axis, +Y axis, -Y axis, +Z axis, -Z axis. The cube is filled with a medium in which the electrons travel with a velocity of 1m/s. At time t=0, all the sources are switched on simultaneously, emanating a single electron along the configured direction. An electron travels in a straight line until it strikes the boundary of the cube or collides with another electron. A collision between two electrons can occur in two possible ways - a head-on collision, and a side-on collision. In a head-on collision, both the electrons rebound in opposite directions with the same speed. A side-on collision occurs when the colliding electrons are travelling in mutually perpendicular directions. After a side-on collision, the colliding electrons are deflected by 90 degrees, rebounding in mutually perpendicular directions with the same speed, the plane of motion remaining the same. Note that throughout the experiment, the direction of motion of an electron remains oriented along one of the coordinate axes. If more than two electrons collide simultaneously, resolve the collision pairwise, where any two of the colliding electrons can be paired. To maximize the chances of initiating the fusion reaction, we would like to maximize the time before an electron hits a boundary wall of the cube. Given the location of the K sources, determine the orientation of the sources such that this time is maximized. Output this maximum value.


*******InputConstraints*******

<p>

First line contains a single integer T, the number of test cases (
1&lt;=T&lt;=50),&nbsp; followed by the description of the
test cases. The first line of each test case contains two integers, K
and N respectively ( 1&lt;=K&lt;=100,
1&lt;=N&lt;=1000). It is followed by K lines, where each line
contains space separated three integers representing the X, Y and Z
coordinates of the particular source. The coordinates of the diagonally
opposite corners of the cube are (0,0,0) and (N,N,N). All the sources
will lie strictly inside the cube.



*******OutputConstraints*******

<p>

For each test case, output the maximum value of the time before the
first electron hits the boundary of the cube on a single line.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 10
5 5 5
2 10
1 1 1
1 1 2
<b>Output:</b>
5
9
</pre>



______________________________________________________
GEN||||||true||||||


<p>
LoadingTime has been given a task these days. He is required to write a tool called Text Generator. This software is widely used among the kids who are under seven. It generates an article with the size of a given number L for users. If an article contains at least one word which the users know, we consider it readable. Now, LoadingTime wants to know, how many readable articles can it generates, and he can improve his Text Generator. Could you help him?? </p>


*******InputConstraints*******


<p>The input contains multiple test cases.</p>
<p>The first
line of each test case contains two integer N (1 &lt;= N &lt;= 10), L
(1 &lt;= L &lt;= 1000000). The following N lines contain N words representing
the words knew by the users. All the words and the generated article only
contain uppercase letters, and the length of each word is not greater than 6. 
</p>


*******OutputConstraints*******


<p>For each test case, your program should output a integer as LoadingTime
required. As the number could be quite large, you only need to print
the answer modulo 10007. 


*******IOTestCases*******

<pre>
<b>Input:</b>
2 2
A
B
2 10000
ABC
B

<b>Output:</b>
100
5960

</pre>



______________________________________________________
HALLOW||||||true||||||


<p>Every year there is the same problem at Halloween:
Each neighbor is only willing to give a certain total number of
sweets on that day, no matter how many children call on him, so it
may happen that a child will get nothing if it is too late.
To avoid conflicts, the children have decided they will put
all sweets together and then divide them evenly among themselves.
From last year's experience of Halloween they
know how many sweets they get from each neighbour.
Since they care more about justice than about the
number of sweets they get, they want to select a subset of the
neighbours to visit, so that in sharing every child receives the
same number of sweets. They will not be satisfied if they have
any sweets left which cannot be divided.
</p>
<p>Your job is to help the children and present a solution. </p>


*******InputConstraints*******

<p>
The input contains several test cases.
<br>
The first line of each test case contains two integers <strong>c</strong>
and <strong>n</strong> (<i>1 &#8804; c &#8804; n &#8804; 100000</i>), the number of
children and the number of neighbours, respectively.
The next line contains <strong>n</strong> space separated integers
<strong>a<sub>1</sub> , ... , a<sub>n</sub></strong>
(<i>1 &#8804; a<sub>i</sub> &#8804; 100000 </i>),
where <strong>a<sub>i</sub></strong> represents the number of sweets
the children get if they visit neighbour <strong>i</strong>.
</p>
<p>
The last test case is followed by two zeros.
</p>



*******OutputConstraints*******

<p>
For each test case output one line with the indices of the
neighbours the children should select (here, index
<strong>i</strong> corresponds to neighbour <strong>i</strong>
who gives a total number of <strong>a<sub>i</sub></strong> sweets).
If there is no solution where each child gets at least one sweet,
print "no sweets" instead. Note that if there
are several solutions where each child gets at least one sweet, you
may print any of them.
</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
4 5
1 2 3 7 5
3 6
7 11 2 5 13 17
0 0


<b>Output:</b>
3 5
2 3 4
</pre>



______________________________________________________
TREASURY||||||true||||||


<p>Once upon a time in a kingdom far far away, the royal treasury started getting emptier and emptier. The king decided to change the situation and he invented a new system of cooperation with in the office of the royal treasurer. The clerks of the office are supposed to form pairs (in order to avoid being bribed) in such away that each pair is formed by a clerk and his/her direct subordinate. Your task is to compute, given the structure of the office of the treasurer, the maximum number of pairs that can be formed this way and in how many 
different ways this is possible.<br>  
<br>
The office of the treasurer is led by George Skinflint. Each clerk has zero, one or more subordinates and is a subordinate of a single clerk (except for George Skinflint who is responsible only to the king himself). The number of clerks does not exceed 1000. Your task is to compute the maximum number of pairs that can be formed by clerks in such a way that every pair is formed by a clerk and his/her direct subordinate. In 
addition, you should also compute the number of ways such pairs can be formed. Note that some clerks need not be contained in a pair.  


*******InputConstraints*******

<p><b>The input contains multiple testcases.</b></p> 

<p>The first line of each testcase contains a single number N that represents the number of clerks 1 &lt;= N &lt;= 1000. The clerks are assigned unique ID numbers from the range between 1 and N. The ID number of the treasurer (Skinflint) is 1. Each of the following N lines corresponds to one of the clerks: it contains his/her ID number, the number K of his/her subordinates, 0 &lt;= K &lt;= 999, and the ID numbers of his/her K subordinates separated by single spaces. You can assume that the line corresponding to a clerk never appears before the line corresponding to his/her supervisor.</p>   


*******OutputConstraints*******

<p>The output for each testcase should consist of two lines. The first line of the output should contain a single number that represents the maximum number M of pairs that the clerks can form. The second line should contain the number of  
different ways in which the clerks can form M pairs obeying the rules given by the king.   


*******IOTestCases*******


<pre>
<b>Input:</b>
7
1 3 2 4 7
2 1 3
4 1 6
3 0
7 1 5
5 0
6 0

<b>Output:</b>
3
4
</pre>



______________________________________________________
CYLINDER||||||false||||||

<p>Using a sheet of paper and scissors, you can cut out two faces to
form a cylinder in the following way: </p>
<ol>
<li>Cut the paper horizontally (parallel
to the shorter side) to get two rectangular parts.</li>
<li>From the first part, cut out a circle
of maximum radius. The circle will form the bottom of the cylinder.</li>
<li>Roll the second part up in such a way
that it has a perimeter of equal length with the circle's
circumference, and attach one end of the roll to the circle.
Note that the roll may have some overlapping parts in order
to get the required length of the perimeter.</li>
</ol>
<p>Given the dimensions of the sheet of paper, can you calculate the
biggest possible volume of a cylinder which can be constructed using the
procedure described above? </p>

<h4>Input Specification</h4>
<p>
The input consists of several test cases.
Each test case consists of two numbers <strong>w</strong> and
<strong>h</strong> (<i>1 &#8804; w &#8804; h &#8804; 100</i>), which indicate
the width and height of the sheet of paper.
</p>
<p>The last test case is followed by a line containing two zeros.
</p>
<h4>Output Specification</h4>
<p>
For each test case, print one line with the biggest possible volume
of the cylinder. Round this number to 3 places after the decimal point.
</p>
<h4>Sample Input</h4>
<pre>10 10
10 50
10 30
0 0
</pre>
<h4>Sample Output</h4>
<pre>54.247
785.398
412.095
</pre>

______________________________________________________
EXPRESS||||||false||||||

<p>Arithmetic expressions are usually written with the operators in
between the
two operands (which is called infix notation). For example, <i>(x+y)*(z-w)</i>
is an arithmetic expression in infix notation.
However, it is easier to write a program to evaluate an expression if
the expression is written in postfix notation (also known as reverse
polish
notation). In postfix notation, an operator is written behind its two
operands, which may be expressions themselves. For example, <i>x y + z
w
- *</i> is a postfix notation of the arithmetic expression
given above. Note that in this case parentheses are not required. </p>
<p>To evaluate an expression written in postfix notation, an algorithm
operating on a stack can be used. A stack is a data structure which
supports two operations: </p>
<ol>
<li><b>push</b>: a number is inserted at the top of the
stack.</li>
<li><b>pop</b>: the number from the top of the stack is
taken out.</li>
</ol>
<p>During the evaluation, we process the expression from left to right.
If we encounter a number, we push it onto the stack. If we encounter an
operator, we pop the first two numbers from the stack, apply the
operator
on them, and push
the result back onto the stack. More specifically, the following
pseudocode
shows how to handle the case when we encounter an operator O: </p>
<pre>a := pop();
b := pop();
push(b O a);</pre>
<p>The result of the expression will be left as the only number on the
stack. </p>
<p>Now imagine that we use a queue instead of the stack. A queue also
has a
push and pop operation, but their meaning is different: </p>
<ol>
<li><b>push</b>: a number is inserted at the end of the
queue.</li>
<li><b>pop</b>: the number from the front of the queue
is taken out of the queue.</li>
</ol>
<p>Can you rewrite the given expression such that the result of the
algorithm
using the queue is the same as the result of the original expression
evaluated
using the algorithm with the stack? </p>
<h4>Input Specification</h4>
<p>The first line of the input contains a number <strong>T</strong> (<i>T
&#8804; 200</i>). The following <strong>T</strong>
lines each
contain one expression in postfix notation. Arithmetic operators are
represented by uppercase letters, numbers are represented by lowercase
letters.
You may assume that the length of each expression is less than <i>10000</i>
characters. </p>
<h4>Output Specification</h4>
<p>For each given expression, print the expression with the equivalent
result
when using the algorithm with the queue instead of the stack. To make
the
solution unique, you are not allowed to assume that the operators are
associative or commutative. </p>
<h4>Sample Input</h4>
<pre>2
xyPzwIM
abcABdefgCDEF
</pre>
<h4>Sample Output</h4>
<pre>wzyxIPM
gfCecbDdAaEBF
</pre>



______________________________________________________
FREQUENT||||||false||||||

<p>You are given a sequence of <strong>n</strong> integers
<strong>a<sub>1</sub> , a<sub>2</sub> , ... , a<sub>n</sub></strong>
in non-decreasing order. In addition to that, you are given several
queries
consisting of indices <strong>i</strong> and <strong>j</strong> (<i>1
&#8804; i &#8804; j &#8804; n</i>). For each query, determine the
most
frequent value among the integers <strong>a<sub>i</sub> , ... , a<sub>j</sub></strong>.
</p>
<h4>Input Specification</h4>
<p>
The input consists of several test cases.
Each test case starts with a line containing two integers <strong>n</strong>
and <strong>q</strong> (<i>1 &#8804; n, q &#8804; 100000</i>).
The next line contains <strong>n</strong> integers
<strong>a<sub>1</sub> , ... , a<sub>n</sub></strong>
(<i>-100000 &#8804; a<sub>i</sub> &#8804; 100000</i>, for each <i>i &#8712; {1, ..., n}</i>)
separated by spaces.
You can assume that for each <i>i &#8712; {1, ..., n-1}: a<sub>i</sub> &#8804; a<sub>i+1</sub></i>.
The following <strong>q</strong> lines contain one query each,
consisting of two integers <strong>i</strong> and <strong>j</strong>
(<i>1 &#8804; i &#8804; j &#8804; n</i>), which indicate the boundary indices for the
query.
</p>
<p>
The last test case is followed by a line containing a single <i>0</i>.
</p>
<h4>Output Specification</h4>
<p>
For each query, print one line with one integer:
The number of occurrences of the most frequent value within
the given range.
</p>
<h4>Sample Input</h4>
<pre>10 3
-1 -1 1 1 1 1 3 10 10 10
2 3
1 10
5 10
0
</pre>
<h4>Sample Output</h4>
<pre>1
4
3
</pre>

______________________________________________________
GROCERY||||||false||||||

<p>A cashier in a grocery store seems to have difficulty in
distinguishing the multiplication symbol and the addition symbol. 
To make things easier for him, you want to buy goods in such a
way that the product of their prices is the same as the sum of
their prices. </p>
<p>Of course, if you buy only one item, this is always true. With two
items and three items, it still seems quite a boring task to you,
so now you are interested in finding possible prices of four items
such that the sum of the four prices is equal to the product of the
four prices. You should consider the prices are in &#8364; with two
digits after the decimal point. Obviously, each product costs at
least one cent.</p>

<h4>Input Specification</h4>
<p>This problem has no input.</p>

<h4>Output Specification</h4>
<p>
Print all solutions which have a sum of the four items of at most
<strong>20.00 &#8364;</strong>. For each solution, print one line with
the prices of the four items in non-decreasing order, with one space
character between them. You may print the solutions in any order,
but make sure to print each solution only once.</p>
<h4>Sample Output</h4>
<pre>0.50 1.00 2.50 16.00
1.25 1.60 1.75 1.84
1.25 1.40 1.86 2.00
...
</pre>



______________________________________________________
LOGIC2||||||true||||||


<p>Some day in 2003 in Byteland began calm and quietly as any other day. Some people went to work, some to school, some to store to buy food. Drivers were traditionally stucked in traffic jams, drinking coffee and reading morning newspaper. Suddenly the regularity of this day was disturbed by huge explosion."They blew up the embassy of Bajtocja!!!"  somebody cried. Everybody began to run away in panic. </p>
<p>Police works pretty good in Byteland and first radiocars appeared near the embassy only few seconds after the explosion. All the people near the embassy were detained. Only one of the people is the organizer of the explosion, the others could by just occasional witnesses. It is known, among these M(1<=M<=11) people, N(1<=N<=M) people always lie because they want to make the work of police more difficult, the others always tell the truth.</p>
<p>All these people say P(1<=P<=30) sentences in total.All the useful sentences are in one of the 4 forms below, all the other sentences are useless and you can ignore them.</p>
<div align="justify">
       <ul>
               <li>
               I am guilty.
               <li>
               I am not guilty.
               <li>
               <i>Somebody</i> is guilty.
               <li>
               <i>Somebody</i> is not guilty.
               <li>
               Today is <i>Someday</i>.
               </li>
       </ul>
</div>
<p>Among these sentences, <i>Somebody</i> is a name of one of these M people, and <i>Someday</i> is Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or Sunday.</p>
<p>Your task is to help the police to find out the only one organizer of the explosion.</p>

*******InputConstraints*******

<p>Multiple test cases. For each test case: </p>
<p>The first line contains three integers M, N and P. M lines follow, each contains a name of one of the people.All names contain only capital Latin letters and no whitespaces.P lines come next, each contains no more than 250 characters, the speaker and his/her speech. See the example.</p>
<p>You can assume that there's no whitespace at the start and the end of a line, and there are no two consecutive spaces in the input.</p>
<p>Input terminate by EOF.</p>

*******OutputConstraints*******

<p>The name of the organizer if you can determine, or <i>Cannot Determine</i> if you find more than one, or <i>Impossible</i> if you find no one.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3 1 5
MIKE
CHARLES
KATE
MIKE: I am guilty.
MIKE: Today is Sunday.
CHARLES: MIKE is guilty.
KATE: I am guilty.
KATE: How are you??

<b>Output:</b>
MIKE
</pre>


______________________________________________________
EASYPROB||||||true||||||



*******InputConstraints*******

<p>There's no input.</p>

*******OutputConstraints*******

<p>Output some form of these numbers: 137, 1315, 73, 136, 255, 1384, 16385, one per line in the listed order.</p>

*******IOTestCases*******

<p>The first two lines of the CORRECT output file are:</p>
<pre>
137=2(2(2)+2+2(0))+2(2+2(0))+2(0)
1315=2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)
</pre>
<p>The correct output file should contain 7 lines.</p>


______________________________________________________
HARDP||||||true||||||


[This space is intentionally left blank.]


*******InputConstraints*******

<p>Multiple test cases. Each contains a single integer N(1<=N<=50). Input terminates by EOF.</p>

*******OutputConstraints*******

<p>For each test case, output one line contains the answer. See the example.</p>

*******IOTestCases*******

<pre><p>Input:</p>
8
9
10

<p>Output:</p>
8=90*(0+0+0+0+45-3+20-42+60+10)
9=20*(0-3+10-14+15+2+0+0+0+0+10)
10=66*(0+0+0+0+0+33+5-33+66-66+55+6)
</pre>


______________________________________________________
COCONUTS||||||true||||||


<p>A group of n castle guards are voting to determine whether African swallows can carry coconuts.  While each guard has his 

own personal opinion on the matter, a guard will often vote contrary to his beliefs in order to avoid disagreeing with the 

votes of his friends.<br>

You are given a list of guards who either do or do not believe in the coconut-carrying capacity of African swallows, and a 

list of all pairs of guards who are friends.  Your task is to determine how each guard must vote in order to minimize the sum 

of the total number of disagreements between friends and the total number of guards who must vote against their own beliefs.<br>



*******InputConstraints*******

<p>The input to this problem will contain multiple test cases.  Each test case begins with a single line containing an 

integer n (where 2 <= n <= 300), the number of guards, and an integer m (where 1 <= m <= n(n-1)/2), the number of pairs of 

guards who are friends.  The second line of the test case contains n integers, where the ith integer is 1 if the ith guard 

believes in the ability of African swallows to carry coconuts, and 0 otherwise.  Finally, the next m lines of the test case 

each contain two distinct integers i and j (where 1 <= i, j <= n), indicating that guards i and j are friends.  Guards within 

each pair of friends may be listed in any order, but no pair of guards will be repeated. The input is terminated by an 

invalid test case with n = m = 0, which should not be processed.  



*******OutputConstraints*******

<p>For each input test case, print a single line containing the minimum possible sum of the total number of disagreements 

between all friends plus the total number of guards who must vote against their own beliefs. 


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
1 0 0
1 2
1 3
3 2
6 6
1 1 1 0 0 0
1 2
2 3
4 2
3 5
4 5
5 6
0 0

<b>Output:</b>
1
2
</pre>



______________________________________________________
GRC||||||false||||||

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Documento sin t?­tulo</title>
</head>

<body>
<p align="justify">A very well-known toy/pastime, called Rubik's cube, consists of a cube as shown in Figure 1a, where 
  letters stand for colors (e.g. B for blue, R for red,...). The goal of the game is to rotate the faces of the 
cube in such a way that at the end each face has a different color, as shown in Figure 1b. Notice that,</p>
<p align="center"><img src="http://www.spoj.pl/content/boodah:GRCF1.JPG" width="428" height="268" /></p>
<p align="justify">when a face is rotated, the configuration of colors in all the adjacent faces changes. Figure 2 illustrates
  a rotation of one of the faces. Given a scrambled configuration, reaching the final position can be
quite challenging, as you may know.</p>
<p align="center"><img src="http://www.spoj.pl/content/boodah:GRCF2.JPG" width="656" height="253" /></p>
<p align="justify">But your grandpa has many years of experience, and claims that, given any configuration of the Rubik
  cube, he can come up with a sequence of rotations leading to a winning configuration.
  In order to show all faces of the cube we shall represent the cube as in Figure 3a. The six colors are
  Yellow, Red, Blue, Green, White and Magenta (represented by their first letters).<br />
  You will be given an initial configuration and a list of rotations. A rotation will be represented by an
integer number, indicating the face to be rotated and the direction of the rotation (a positive value means clockwise rotation, negative value means counter-clockwise rotation). Faces of the cube are
numbered as shown in Figure 3b. You must write a program that checks whether the list of rotations 
will lead to a winning configuration.</p>
<p align="center"><img src="http://www.spoj.pl/content/boodah:GRCF3.JPG" width="632" height="293" /></p>
<p align="justify"><strong>Input</strong><br />
  The input contains several test cases. The first line of the input is an integer which indicates the number
  of tests. Each test description consists of ten lines of input. The first nine lines of a test will
  describe an initial configuration, in the format shown in Figure 3a. The next line will contain a list of
  rotations, ending with the value 0.<br />
  </p>
<p align="justify"><strong>Output</strong><br />
  For each test case your program should print one line. If your grandpa is correct, print &#8220;Yes,
  grandpa!&#8221;, otherwise print &#8220;No, you are wrong!&#8221;.
(See example.)</p>
<p align="center"><img src="http://www.spoj.pl/content/boodah:GRCFIO.JPG" width="660" height="648" /></p>
</body>
</html>


______________________________________________________
WIJGT||||||false||||||

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Documento sin t?­tulo</title>
</head>

<body>
<div align="justify">
  <p>Indiana Jones is in a deserted city, annihilated during a war. Roofs of all houses have been destroyed 
    and only portions of walls are still standing. The ground is so full of mines that the only safe way to
    move around the city is walking over the remaining walls. The mission of our hero is to save a person
    who is trapped in the city. In order to move between two walls which are not connected Indiana Jones
    thought of taking with him a wooden board which he could place between the two walls and then
    cross from one to the other.</p>
  <p align="center"><img src="http://www.spoj.pl/content/boodah:WIJGT.JPG" width="371" height="251" /> </p>
  <p align="justify">Initial positions of Indiana Jones and the trapped person are both on some section of the walls. 
    Besides, walls are either in the direction South-North or West-East.
    You will be given a map of the city remains. Your mission is to determine the minimum length of the
    wooden board Indiana Jones needs to carry in order to get to the trapped person.<br />
  </p>
  <p align="justify"><strong>Input</strong><br />
    Your program should process several test cases. Each test case starts with an integer
    N
    indicating the
    number of wall sections remaining in the city (2
&lt;=
N
&lt;=
1000). Each of the next
N
lines describes a wall
section. The first wall section to appear is the section where Indiana Jones stands at the beginning.
The second section to appear is the section where the trapped person stands. Each wall section
description consists of three integers
X
,
Y
and
L
(&#8211;10000
&lt;=
X
,
Y
,
L
&lt;= 10000), where
X
an
Y
define
either the southernmost point of a wall section (for South-North sections) or the westernmost point<br />
(for West-East wall sections). The value of
L
determines the length and direction of the wall: if
L
&gt;
0,
the section is West-East, with length
L
; if
L&lt; 0, the section is North-South, with length
    |
    L
    |
    . The end
    of input is indicated by
    N
    = 0.<br />
  </p>
  <p align="justify"><strong>Output</strong><br />
    For each test case in the input your program should produce one line of output, containing a real value
  representing the length of the wooden board Indiana Jones must carry. The length must be printed as a real number with two-digit precision, and the last decimal digit must be rounded. The input will not
  contain test cases where differences in rounding are significant.</p>
  <p align="justify"><strong>Sample input</strong><br />
    14<br />
    1 1 5<br />
    6 8 2<br />
    7 2 -2<br />
    5 3 3<br />
    2 5 2<br />
    2 3 2<br />
    2 3 -2<br />
    4 3 -2<br />
    0 7 1<br />
    1 8 2<br />
    3 6 -2<br />
    4 7 2<br />
    6 6 1<br />
    6 6 -2<br />
    3<br />
    -10 0 20<br />
    -5 1 10<br />
    50 50 100<br />
  0</p>
  <p align="justify"><strong>Output for the sample input</strong><br />
    1.41<br />
  1.00</p>
</div>
</body>
</html>



______________________________________________________
OFORTUNE||||||true||||||


<p>
The Ohgas are a prestigious family based on Hachioji. The head of the family, Mr. Nemochi Ohga, a famous wealthy man, wishes to increase his fortune by depositing his money to an operation company. You are asked to help Mr. Ohga maximize his profit by operating the given money during a specified period. 
<br>
<br>From a given list of possible operations, you choose an operation to deposit the given fund to. You commit on the single operation throughout the period and deposit all the fund to it. Each operation specifies an annual interest rate, whether the interest is simple or compound, and an annual operation charge. An annual operation charge is a constant not depending on the balance of the fund. The amount of interest is calculated at the end of every year, by multiplying the balance of the fund under operation by the annual interest rate, and then rounding off its fractional part. For compound interest, it is added to the balance of the fund under operation, and thus becomes a subject of interest for the following years. For simple interest, on the other hand, it is saved somewhere else and does not enter the balance of the fund under operation (i.e. it is not a subject of interest in the following years). An operation charge is then subtracted from the balance of the fund under operation. You may assume here that you can always pay the operation charge (i.e. the balance of the fund under operation is never less than the operation charge). The amount of money you obtain after the specified years of operation is called ``the final amount of fund.'' For simple interest, it is the sum of the balance of the fund under operation at the end of the final year, plus the amount of interest accumulated throughout the period. For compound interest, it is simply the balance of the fund under operation at the end of the final year. 
<br>
<br>Operation companies use C, C++, Java, etc., to perform their calculations, so they pay a special attention to their interest rates. That is, in these companies, an interest rate is always an integral multiple of 0.0001220703125 and between 0.0001220703125 and 0.125 (inclusive). 0.0001220703125 is a decimal representation of 1/8192. Thus, interest rates' being its multiples means that they can be represented with no errors under the double-precision binary representation of floating-point numbers. 
<br>
<br>For example, if you operate 1000000 JPY for five years with an annual, compound interest rate of 0.03125 (3.125 %) and an annual operation charge of 3000 JPY, the balance changes as follows.

<br><table border><tr align=right rowspan=2><td>The balance of the fund under operation(at the beginning of year)</td><td>Interest</td><td>The balance of the fund under operation (at the end of year)</td></tr><tr align=right><td>A</td><td>B = A ? 0.03125 (and rounding off fractions)</td><td>A + B - 3000</td></tr><tr align=right><td>1000000</td><td>31250</td><td>1028250</td></tr><tr align=right><td>1028250</td><td>32132</td><td>1057382</td></tr><tr align=right><td>1057382</td><td>33043</td><td>1087425</td></tr><tr align=right><td>1087425</td><td>33982</td><td>1118407</td></tr><tr align=right><td>1118407</td><td>34950</td><td>1150357</td></tr></table>

<br>After the five years of operation, the final amount of fund is 1150357 JPY. 
<br>
<br>If the interest is simple with all other parameters being equal, it looks like: 
<br><table border><tr align=right rowspan=2><td>The balance of the fund under operation (at the beginning of year)</td><td>Interest</td><td>The balance of the fund under operation (at the end of year)</td><td>Cumulative interest </td></tr><tr align=right><td>A</td><td>B = A ? 0.03125 (and rounding off fractions)</td><td>A - 3000</td><td></td></tr><tr align=right><td>1000000</td><td>31250</td><td>997000</td><td>31250</td></tr><tr align=right><td>997000</td><td>31156</td><td>994000</td><td>62406</td></tr><tr align=right><td>994000</td><td>31062</td><td>991000</td><td>93468</td></tr><tr align=right><td>991000</td><td>30968</td><td>988000</td><td>124436</td></tr><tr align=right><td>988000</td><td>30875</td><td>985000</td><td>155311</td></tr></table>

<br>In this case the final amount of fund is the total of the fund under operation, 985000 JPY, and the cumulative interests, 155311 JPY, which is 1140311 JPY. </p>


*******InputConstraints*******

<p>
The input consists of datasets. The entire input looks like: 
<br><ul>the number of datasets (=m) 
<br>1st dataset 
<br>2nd dataset 
<br>... 
<br>m-th dataset </ul>
<br>The number of datasets, m, is no more than 100. Each dataset is formatted as follows. 
<br><ul>the initial amount of the fund for operation 
<br>the number of years of operation 
<br>the number of available operations (=n) 
<br>operation 1 
<br>operation 2 
<br>... 

<br>operation n </ul>
<p><br>The initial amount of the fund for operation, the number of years of operation, and the number of available operations are all positive integers. The first is no more than 100000000, the second no more than 10, and the third no more than 100. 
<br><ul>Each ``operation'' is formatted as follows. </ul>
<br><p>simple-or-compound annual-interest-rate annual-operation-charge 
<br>where simple-or-compound is a single character of either '0' or '1', with '0' indicating simple interest and '1' compound. annual-interest-rate is represented by a decimal fraction and is an integral multiple of 1/8192. annual-operation-charge is an integer not exceeding 100000. </p>
<br>


*******OutputConstraints*******

<p>
For each dataset, print a line having a decimal integer indicating the final amount of fund for the best operation. The best operation is the one that yields the maximum final amount among the available operations. Each line should not have any character other than this number.

<p><p>
You may assume the final balance never exceeds 1000000000. You may also assume that at least one operation has the final amount of the fund no less than the initial amount of the fund. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1000000
5
2
0 0.03125 3000
1 0.03125 3000
6620000
7
2
0 0.0732421875 42307
1 0.0740966796875 40942
39677000
4
4
0 0.0709228515625 30754
1 0.00634765625 26165
0 0.03662109375 79468
0 0.0679931640625 10932
10585000
6
4
1 0.0054931640625 59759
1 0.12353515625 56464
0 0.0496826171875 98193
0 0.0887451171875 78966

<b>Output:</b>
1150357
10559683
50796918
20829397
</pre>



______________________________________________________
PLSEARCH||||||true||||||


<p>Multiple polygonal lines are given on the xy-plane. Given a list of polygonal lines and a template, you must find out polygonal lines which have the same shape as the template.

<p><p>
A polygonal line consists of several line segments parallel to x-axis or y-axis. It is defined by a list of xy-coordinates of vertices from the start-point to the end-point in order, and always turns 90 degrees at each vertex. A single polygonal line does not pass the same point twice. Two polygonal lines have the same shape when they fully overlap each other only with rotation and translation within xy-plane (i.e. without magnification or a flip). The vertices given in reverse order from the start-point to the end-point is the same as that given in order.

<p><p>
Figure 1 shows examples of polygonal lines. In this figure, polygonal lines A and B have the same shape.

<p><p>
Write a program that answers polygonal lines which have the same shape as the template.

<p>
<center><img src='/content/steinersp:polygonal.gif'alt='subir imagenes' border='0'><br>Figure 1: Polygonal lines</center>
</p>


*******InputConstraints*******

<p>The input consists of multiple datasets. The end of the 
input is indicated by a line which contains a zero.

<p><p>
A dataset is given as follows.

<p><p>
    n<br>
    Polygonal line0<br>
    Polygonal line1<br>
    Polygonal line2<br>
    ...<br>
    Polygonal linen <br>

<p><p>
n is the number of polygonal lines for the object of search on xy-plane. n is an integer, and 1 <= n <= 50. Polygonal line0 indicates the template.

<p><p>
A polygonal line is given as follows.

<p><p>
    m<br>
    x1 y1<br>
    x2 y2<br>
    ...<br>
    xm ym<br>

<p><p>
m is the number of the vertices of a polygonal line (3 <= m <= 10). xi and yi, separated by a space, are the x- and y-coordinates of a vertex, respectively (-10000 < xi < 10000, -10000 <yi < 10000). 

<p>

*******OutputConstraints*******

<p> For each dataset in the input, your program should report numbers assigned to the polygonal lines that have the same shape as the template, in ascending order. Each number must be written in a separate line without any other characters such as leading or trailing spaces.

<p><p>
Five continuous "+"s must be placed in a line at the end of each dataset.



*******IOTestCases*******


<pre>
<b>Input:</b>
5
5
0 0
2 0
2 1
4 1
4 0
5
0 0
0 2
-1 2
-1 4
0 4
5
0 0
0 1
-2 1
-2 2
0 2
5
0 0
0 -1
2 -1
2 0
4 0
5
0 0
2 0
2 -1
4 -1
4 0
5
0 0
2 0
2 1
4 1
4 0
4
4
-60 -75
-60 -78
-42 -78
-42 -6
4
10 3
10 7
-4 7
-4 40
4
-74 66
-74 63
-92 63
-92 135
4
-12 22
-12 25
-30 25
-30 -47
4
12 -22
12 -25
30 -25
30 47
3
5
-8 5
-8 2
0 2
0 4
8 4
5
-3 -1
0 -1
0 7
-2 7
-2 16
5
-1 6
-1 3
7 3
7 5
16 5
5
0 1
0 -2
8 -2
8 0
17 0
0

<b>Output:</b>
1
3
5
+++++
3
4
+++++
+++++
</pre>



______________________________________________________
NSYSTEM||||||true||||||


<p>Prof. Hachioji has devised a new numeral system of integral numbers with four lowercase letters "m", "c", "x", "i" and with eight digits "2", "3", "4", "5", "6", "7", "8", "9". He doesn't use digit "0" nor digit "1" in this system.

<p><p>
The letters "m", "c", "x" and "i" correspond to 1000, 100, 10 and 1, respectively, and the digits "2", ...,"9" correspond to 2, ..., 9, respectively. This system has nothing to do with the Roman numeral system.

<p><p>
For example, character strings

<p><p>
    "5m2c3x4i", "m2c4i" and "5m2c3x" 

<p><p>
correspond to the integral numbers 5234 (=5*1000+2*100+3*10+4*1), 1204 (=1000+2*100+4*1), and 5230 (=5*1000+2*100+3*10), respectively. The parts of strings in the above example, "5m", "2c", "3x" and "4i" represent 5000 (=5*1000), 200 (=2*100), 30 (=3*10) and 4 (=4*1), respectively.

<p><p>
Each of the letters "m", "c", "x" and "i" may be prefixed by one of the digits "2", "3", ..., "9". In that case, the prefix digit and the letter are regarded as a pair. A pair that consists of a prefix digit and a letter corresponds to an integer that is equal to the original value of the letter multiplied by the value of the prefix digit.

<p><p>
For each letter "m", "c", "x" and "i", the number of its occurrence in a string is at most one. When it has a prefix digit, it should appear together with the prefix digit. The letters "m", "c", "x" and "i" must appear in this order, from left to right. Moreover, when a digit exists in a string, it should appear as the prefix digit of the following letter. Each letter may be omitted in a string, but the whole string must not be empty. A string made in this manner is called an MCXI-string.

<p><p>
An MCXI-string corresponds to a positive integer that is the sum of the values of the letters and those of the pairs contained in it as mentioned above. The positive integer corresponding to an MCXI-string is called its MCXI-value. Moreover, given an integer from 1 to 9999, there is a unique MCXI-string whose MCXI-value is equal to the given integer. For example, the MCXI-value of an MCXI-string "m2c4i" is 1204 that is equal to 1000 + 2*100 + 4*1. There are no MCXI-strings but "m2c4i" that correspond to 1204. Note that strings "1m2c4i", "mcc4i", "m2c0x4i", and "2cm4i" are not valid MCXI-strings. The reasons are use of "1", multiple occurrences of "c", use of "0", and the wrong order of "c" and "m", respectively.

<p><p>
Your job is to write a program for Prof. Hachioji that reads two MCXI-strings, computes the sum of their MCXI-values, and prints the MCXI-string corresponding to the result. 

<p>

*******InputConstraints*******

<p>
The input is as follows. The first line contains a positive integer n (<= 500) that indicates the number of the following lines. The k+1 th line is the specification of the k th computation (k=1, ..., n).

<p><p>
    n<br>
    specification1<br>
    specification2<br>
    ...<br>
    specificationn<br>

<p><p>
Each specification is described in a line:

<p><p>
    MCXI-string1 MCXI-string2 

<p><p>
The two MCXI-strings are separated by a space.

<p><p>
You may assume that the sum of the two MCXI-values of the two MCXI-strings in each specification is less than or equal to 9999. 


*******OutputConstraints*******

<p>For each specification, your program should print an MCXI-string in a line. Its MCXI-value should be the sum of the two MCXI-values of the MCXI-strings in the specification. No other characters should appear in the output.


*******IOTestCases*******


<pre>
<b>Input:</b>
10
xi x9i
i 9i
c2x2i 4c8x8i
m2ci 4m7c9x8i
9c9x9i i
i 9m9c9x8i
m i
i m
m9i i
9m8c7xi c2x8i

<b>Output:</b>
3x
x
6cx
5m9c9x9i
m
9m9c9x9i
mi
mi
mx
9m9c9x9i
</pre>



______________________________________________________
TRSTAGE||||||true||||||


<p>Once upon a time, there was a traveler.

<br><br>
He plans to travel using stagecoaches (horse wagons). His starting point and destination are fixed, but he cannot determine his route. Your job in this problem is to write a program which determines the route for him.

<br><br>
There are several cities in the country, and a road network connecting them. If there is a road between two cities, one can travel by a stagecoach from one of them to the other. A coach ticket is needed for a coach ride. The number of horses is specified in each of the tickets. Of course, with more horses, the coach runs faster.

<br><br>
At the starting point, the traveler has a number of coach tickets. By considering these tickets and the information on the road network, you should find the best possible route that takes him to the destination in the shortest time. The usage of coach tickets should be taken into account.

<br><br>
The following conditions are assumed.

<br><br>
<ul>
<li> A coach ride takes the traveler from one city to another directly connected by a road. In other words, on each arrival to a city, he must change the coach.
<li> Only one ticket can be used for a coach ride between two cities directly connected by a road.
<li> Each ticket can be used only once.
<li> The time needed for a coach ride is the distance between two cities divided by the number of horses.
<li> The time needed for the coach change should be ignored. 
</ul>

<br><br>

*******InputConstraints*******

<p>The input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).

<br><br>
    n m p a b<br>
    t1 t2 ... tn<br>
    x1 y1 z1<br>
    x2 y2 z2<br>
    ...<br>
    xp yp zp<br>

<br><br>
Every input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.<br>

<br>
n is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.

<br><br>
a is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.

<br><br>
The second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1<=i<=n). You can assume that the number of horses is between 1 and 10.

<br><br>
The following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1<=i<=p). You can assume that the distance is between 1 and 100.

<br><br>
No two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions. 

<br>

*******OutputConstraints*******

<p> For each dataset in the input, one line should be output as specified below. An output line should not contain extra characters such as spaces.

<br><br>
If the traveler can reach the destination, the time needed for the best route (a route with the shortest time) should be printed. The answer should not have an error greater than 0.001. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.

<br><br>
If the traveler cannot reach the destination, the string "Impossible" should be printed. One cannot reach the destination either when there are no routes leading to the destination, or when the number of tickets is not sufficient. Note that the first letter of "Impossible" is in uppercase, while the other letters are in lowercase. 

<br>

*******IOTestCases*******


<pre>
<b>Input:</b>
3 4 3 1 4
3 1 2
1 2 10
2 3 30
3 4 20
2 4 4 2 1
3 1
2 3 3
1 3 3
4 1 2
4 2 5
2 4 3 4 1
5 5
1 2 10
2 3 10
3 4 10
1 2 0 1 2
1
8 5 10 1 5
2 7 1 8 4 5 6 3
1 2 5
2 3 4
3 4 7
4 5 3
1 3 25
2 4 23
3 5 22
1 4 45
2 5 51
1 5 99
0 0 0 0 0

<b>Output:</b>
30.000
3.667
Impossible
Impossible
2.856

Since the number of digits after the decimal point is
not specified, the above result is not the only
solution. For example, the following result is also acceptable.

30.0
3.66667
Impossible
Impossible
2.85595
</pre>



______________________________________________________
EOWAMRT||||||true||||||


<p>A new type of mobile robot has been developed for environmental earth observation. It moves around on the ground, acquiring and recording various sorts of observational data using high precision sensors. Robots of this type have short range wireless communication devices and can exchange observational data with ones nearby. They also have large capacity memory units, on which they record data observed by themselves and those received from others.

<p><p>
Figure 1 illustrates the current positions of three robots A, B, and C and the geographic coverage of their wireless devices. Each circle represents the wireless coverage of a robot, with its center representing the position of the robot. In this figure, two robots A and B are in the positions where A can transmit data to B, and vice versa. In contrast, C cannot communicate with A or B, since it is too remote from them. Still, however, once B moves towards C as in Figure 2, B and C can start communicating with each other. In this manner, B can relay observational data from A to C. Figure 3 shows another example, in which data propagate among several robots instantaneously. 

<center><img src='/content/steinersp:Mobile1.gif'alt='subir imagenes' border='0'><br>Figure 1: The initial configuration of three robots</center>

<p>
<center><img src='/content/steinersp:Mobile2.gif'alt='subir imagenes' border='0'><br>Figure 2: Mobile relaying</center>

<p>
<center><img src='/content/steinersp:Mobile3.gif'alt='subir imagenes' border='0'><br>Figure 3: Instantaneous relaying among multiple robots</center>

<p><p>
As you may notice from these examples, if a team of robots move properly, observational data quickly spread over a large number of them. Your mission is to write a program that simulates how information spreads among robots. Suppose that, regardless of data size, the time necessary for communication is negligible.

*******InputConstraints*******

<p>The input consists of multiple datasets, each in the following format.

<p><p>
    <i>N T R<br>
    nickname and travel route of the first robot<br>
    nickname and travel route of the second robot<br>
    ...<br>
    nickname and travel route of the N-th robot</i><br>

<p><p><br>
The first line contains three integers <i>N, T, and R</i> that are the number of robots, the length of the simulation period, and the maximum distance wireless signals can reach, respectively, and satisfy that 1 <= <i>N</i> <= 100, 1 <= <i>T</i> <= 1000, and 1 <= <i>R</i> <= 10.

<p><p>
The <i>nickname and travel route</i> of each robot are given in the following format.

<p><p>
    <i>nickname<br>
    t0 x0 y0<br>
    t1 vx1 vy1<br>
    t2 vx2 vy2<br>
    ...<br>
    tk vxk vyk</i><br>

<p><p>
<i>Nickname</i> is a character string of length between one and eight that only contains lowercase letters. No two robots in a dataset may have the same nickname. Each of the lines following nickname contains three integers, satisfying the following conditions.

<p><p>
    <i>0 = t<sub>0</sub> < t<sub>1</sub> < ... < t<sub>k</sub> = T<br>
    -10 <= vx<sub>1</sub>, vy<sub>1</sub>, ..., vx<sub>k</sub>, vy<sub>k</sub><= 10</i><br>

<p><p>
A robot moves around on a two dimensional plane. (x<sub>0</sub>, y<sub>0</sub>) is the location of the robot at time 0. From time t<sub>i-1</sub> to t<sub>i</sub> (0 < i <= k), the velocities in the x and y directions are vx<sub>i</sub> and vy<sub>i</sub>, respectively. Therefore, the travel route of a robot is piecewise linear. Note that it may self-overlap or self-intersect.

<p><p>
You may assume that each dataset satisfies the following conditions.

<ul>
<li> The distance between any two robots at time 0 is not exactly R.
<li> The x- and y-coordinates of each robot are always between -500 and 500, inclusive.
<li> Once any robot approaches within R + 10<sup>-6</sup>. of any other, the distance between them will become smaller than R - 10<sup>-6</sup>. while maintaining the velocities.
<li> Once any robot moves away up to R - 10<sup>-6</sup>. of any other, the distance between them will become larger than R + 10<sup>-6</sup>. while maintaining the velocities.
<li> If any pair of robots mutually enter the wireless area of the opposite ones at time t and any pair, which may share one or two members with the aforementioned pair, mutually leave the wireless area of the opposite ones at time t', the difference between t and t' is no smaller than 10<sup>-6</sup>. time unit, that is, |t - t' | >= 10<sup>-6</sup>. 
</ul>

<p><p>
A dataset may include two or more robots that share the same location at the same time. However, you should still consider that they can move with the designated velocities.

<p><p>
The end of the input is indicated by a line containing three zeros. 


*******OutputConstraints*******

<p>
For each dataset in the input, your program should print the nickname of each robot that have got until time <i>T</i> the observational data originally acquired by the first robot at time 0. Each nickname should be written in a separate line in dictionary order without any superfluous characters such as leading or trailing spaces.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 5 10
red
0 0 0
5 0 0
green
0 5 5
5 6 1
blue
0 40 5
5 0 0
3 10 5
atom
0 47 32
5 -10 -7
10 1 0
pluto
0 0 0
7 0 0
10 3 3
gesicht
0 25 7
5 -7 -2
10 -1 10
4 100 7
impulse
0 -500 0
100 10 1
freedom
0 -491 0
100 9 2
destiny
0 -472 0
100 7 4
strike
0 -482 0
100 8 3
0 0 0

<b>Output:</b>
blue
green
red
atom
gesicht
pluto
freedom
impulse
strike
</pre>



______________________________________________________
CLEANRBT||||||true||||||


<p>Here, we want to solve path planning for a mobile robot cleaning a rectangular room floor with furniture.

<p><p>
Consider the room floor paved with square tiles whose size fits the cleaning robot (1 ? 1). There are 'clean tiles' and 'dirty tiles', and the robot can change a 'dirty tile' to a 'clean tile' by visiting the tile. Also there may be some obstacles (furniture) whose size fits a tile in the room. If there is an obstacle on a tile, the robot cannot visit it. The robot moves to an adjacent tile with one move. The tile onto which the robot moves must be one of four tiles (i.e., east, west, north or south) adjacent to the tile where the robot is present. The robot may visit a tile twice or more.

<p><p>
Your task is to write a program which computes the minimum number of moves for the robot to change all 'dirty tiles' to 'clean tiles', if ever possible. 

<p>

*******InputConstraints*******

<p>IThe input consists of multiple maps, each representing the size and arrangement of the room. A map is given in the following format.

<p><p>
    w h<br>
    c11 c12 c13 ... c1w<br>
    c21 c22 c23 ... c2w<br>
    ...<br>
    ch1 ch2 ch3 ... chw<br>

<p><p>
The integers w and h are the lengths of the two sides of the floor of the room in terms of widths of floor tiles. w and h are less than or equal to 20. The character cyx represents what is initially on the tile with coordinates (x, y) as follows.

<p><p>
    '.' : a clean tile<br>
    '*' : a dirty tile<br>
    'x' : a piece of furniture (obstacle)<br>
    'o' : the robot (initial position)

<p><p>
In the map the number of 'dirty tiles' does not exceed 10. There is only one 'robot'.

<p><p>
The end of the input is indicated by a line containing two zeros. 


*******OutputConstraints*******

<p>For each map, your program should output a line containing the minimum number of moves. If the map includes 'dirty tiles' which the robot cannot reach, your program should output -1.


*******IOTestCases*******


<pre>
<b>Input:</b>
7 5
.......
.o...*.
.......
.*...*.
.......
15 13
.......x.......
...o...x....*..
.......x.......
.......x.......
.......x.......
...............
xxxxx.....xxxxx
...............
.......x.......
.......x.......
.......x.......
..*....x....*..
.......x.......
10 10
..........
..o.......
..........
..........
..........
.....xxxxx
.....x....
.....x.*..
.....x....
.....x....
0 0

<b>Output:</b>
8
49
-1
</pre>



______________________________________________________
ACMAKER||||||true||||||


<p>
The sadists who design problems for ACM programming contests often like to include the abbre-
viation &#8220;ACM&#8221; somewhere in their problem descriptions. Thus, in years past, the World Finals
has had problems involving &#8220;Apartment Construction Management,&#8221; the &#8220;Atheneum of Culture and
Movies,&#8221; the &#8220;Association of Cover Manufacturers,&#8221; &#8220;ACM Airlines,&#8221; the &#8220;Association for Computa-
tional Marinelife,&#8221; and even an insect named &#8220;Amelia Cheese Mite.&#8221; However, the number of word
combinations beginning with A, C, and M that make sense is finite and the problem writers are starting
to run out of ideas (it&#8217;s hard to think of problems about &#8220;Antidisestablishmentarianistic Chthonian
Metalinguistics&#8221;). Fortunately, modern culture allows more flexibility in designing abbreviations &#8212;
consider, for example:

<p><p>
<pre>
GDB &#8212; Gnu DeBugger
LINUX &#8212; either &#8220;LINus&#8217;s UniX&#8221; or &#8220;LINUs&#8217;s miniX&#8221; or &#8220;Linux Is Not UniX&#8221;
SNOBOL &#8212; StriNg Oriented symBOlic Language
SPITBOL &#8212; SPeedy ImplemenTation of snoBOL
</pre>

<p><p>
The rules used in these examples seem to be:

<p><p>
<ul>
<li> Insignificant words (such as &#8220;of&#8221;, &#8220;a&#8221;, &#8220;the&#8221;, etc.) are ignored.
<li> The letters of the abbreviation must appear, in the correct order, as an ordered sublist of the
letters in the significant words of the phrase to be abbreviated.
<li> At least one letter of the abbreviation must come from every significant word (multiple occurrences
of a letter are, of course, treated as distinct).
</ul>

<p><p>
Of course these rules are often broken in real life. For instance, RADAR is an abbreviation for &#8220;RAdio
Detecting And Ranging&#8221;. Under our rules (assuming that &#8220;and&#8221; is an insignificant word), this would
not be a valid abbreviation (however, RADR or RADRAN or DODGING would be valid). You have
been asked to take a list of insignificant words and a list of abbreviations and phrases and to determine
in how many ways each abbreviation can be formed from the corresponding phrase according to the
rules above.


*******InputConstraints*******

<p>
The input file consists of multiple scenarios. Each scenario begins with an integer 100 >= <i>n</i> >= 1 followed
by <i>n</i> insignificant words, all in lower case, one per line with no extra white space. (A line containing
0 indicates end of input.) Following this are one or more test cases for this scenario, one per line,
followed by a line containing the phrase &#8220;LAST CASE&#8221;. Each line containing a test case begins with
an abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The
abbreviation has length at least 1 and the phrase contains at least one significant word. No input line
(including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits,
however, abbreviations and phrase words may be any length.


*******OutputConstraints*******

<p>
For each test case, output the abbreviation followed by either

<i>
<p><p>
is not a valid abbreviation

<p><p>
or

<p><p>
can be formed in i ways</i>

<p><p>
where <i>i</i> is the number of different ways in which the letters of the abbreviation may be assigned to the
letters in the phrase according to the rules above. The value of <i>i</i> will not exceed the range of a 32-bit
signed integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
and
of
ACM academy of computer makers
RADAR radio detection and ranging
LAST CASE
2
a
an
APPLY an apple a day
LAST CASE
0

<b>Output:</b>
ACM can be formed in 2 ways
RADAR is not a valid abbreviation
APPLY can be formed in 1 ways
</pre>



______________________________________________________
CDOWN||||||true||||||


<p>
Ann Sister owns a genealogical database service, which maintains family tree history for her clients.
When clients login to the system, they are presented with a variety of services: searching, printing,
querying, etc. One recent question that came up which the system was not quite prepared for was
the following: &#8220;Which member of my family had the most grandchildren?&#8221; The client who posed this
question eventually had to answer it by manually searching the family tree database herself. Ann decided
to have software written in case this question (or ones similar to it asking for great-grandchildren, or
great-great-grandchildren, etc.) is asked in the future.


*******InputConstraints*******

<p>
Input will consist of multiple test cases. The first line of the input will contain a single integer indicating
the number of test cases. Each test case starts with a single line containing two positive integers n and
d, where n indicates the number of lines to follow containing information about the family tree, and d
indicates the specific question being asked about the tree: if d = 1, then we are interested in persons
with the most children (1 generation away); if d = 2, then we are interested in persons with the most
grandchildren (2 generations away), and so on. The next n lines are of the form

<p><p>
<i>name m dname<sub>1</sub> dname<sub>2</sub> ... dname<sub>m</sub></i>

<p><p>
where <i>name</i> is one of the family members&#8217; names, <i>m</i> is the number of his/her children, and <i>dname<sub>1</sub></i>
through <i>dname<sub>m</sub></i> are the names of the children. These lines will be given in no particular order. You
may assume that all n lines describe one single, connected tree. There will be no more than 1000 people
in any one tree, and all names will be at most 10 characters long.


*******OutputConstraints*******

<p>
For each test case, output the three names with the largest number of specified descendants in order of
number of descendants. If there are ties, output the names within the tie in alphabetical order. Print
fewer than three names if there are fewer than three people who match the problem criteria (you should
not print anyone&#8217;s name who has 0 of the specified descendants), and print more than three if there is
a tie near the bottom of the list. Print each name one per line, followed by a single space and then the
number of specified descendants. The output for each test case should start with the line

<p><p>
Tree <i>i</i>:

<p><p>
where <i>i</i> is the test case number (starting at 1). Separate the output for each problem with a blank line.

<p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
8 2
Barney 2 Fred Ginger
Ingrid 1 Nolan
Cindy 1 Hal
Jeff 2 Oliva Peter
Don 2 Ingrid Jeff
Fred 1 Kathy
Andrea 4 Barney Cindy Don Eloise
Hal 2 Lionel Mary
6 1
Phillip 5 Jim Phil Jane Joe Paul
Jim 1 Jimmy
Phil 1 Philly
Jane 1 Janey
Joe 1 Joey
Paul 1 Pauly
6 2
Phillip 5 Jim Phil Jane Joe Paul
Jim 1 Jimmy
Phil 1 Philly
Jane 1 Janey
Joe 1 Joey
Paul 1 Pauly

<b>Output:</b>
Tree 1:
Andrea 5
Don 3
Cindy 2
Tree 2:
Phillip 5
Jane 1
Jim 1
Joe 1
Paul 1
Phil 1
Tree 3:
Phillip 5
</pre>



______________________________________________________
GAMEFIL||||||true||||||


<p>
Almost anyone who has ever taken a class in computer science is familiar with the &#8220;Game of Life,&#8221; John
Conway&#8217;s cellular automata with extremely simple rules of birth, survival, and death that can give rise
to astonishing complexity.

<p><p>
The game is played on a rectangular field of cells, each of which has eight neighbors (adjacent cells). A
cell is either occupied or not. The rules for deriving a generation from the previous one are:

<ul>
<li> If an occupied cell has 0, 1, 4, 5, 6, 7, or 8 occupied neighbors, the organism dies (0, 1: of loneliness;
4 thru 8: of overcrowding).
<li> If an occupied cell has two or three occupied neighbors, the organism survives to the next gener-
ation.
<li> If an unoccupied cell has three occupied neighbors, it becomes occupied (a birth occurs).
</ul>

<p><p>
One of the major problems researchers have looked at over the years is the existence of so-called &#8220;Garden
of Eden&#8221; configurations in the Game of Life &#8212; configurations that could not have arisen as the result of
the application of the rules to some previous configuration. We&#8217;re going to extend this question, which
we&#8217;ll call the &#8220;Game of Efil&#8221;: Given a starting configuration, how many possible parent configurations
could it have? To make matters easier, we assume a finite grid in which edge and corner cells &#8220;wrap
around&#8221; (i.e., a toroidal surface). For instance, the 2 by 3 configuration:

<p><p>
<img src='/content/steinersp:efil1.png'alt='subir imagenes' border='0'>
<p><p>
has exactly three possible parent configurations; they are:

<p><p>
<img src='/content/steinersp:efil2.png'alt='subir imagenes' border='0'>

<img src='/content/steinersp:efil3.png'alt='subir imagenes' border='0'>

<img src='/content/steinersp:efil4.png'alt='subir imagenes' border='0'>

<p><p>
You should note that when counting neighbors of a cell, another cell may be counted as a neighbor
more than once, if it touches the given cell on more than one side due to the wrap around. This is the
case for the configurations above.

<p>

*******InputConstraints*******

<p>
There will be multiple test cases. Each case will start with a line containing a pair of positive integers <i>m</i>
and <i>n</i>, indicating the number of rows and columns of the configuration, respectively. The next line will
contain a nonnegative integer <i>k</i> indicating the number of &#8220;live&#8221; cells in the configuration. The following
<i>k</i> lines each contain the row and column number of one live cell, where row and column numbering
both start at zero. The final test case is followed by a line where <i>m</i> = <i>n</i> = 0 &#8212; this line should not be
processed. You may assume that the product of <i>m</i> and <i>n</i> is no more than 16.


*******OutputConstraints*******

<p>
For each test case you should print one line of output containing the case number and the number of
possible ancestors. Imitate the sample output below. Note that if there are 0 ancestors, you should
print out

<p><p>
<pre><b>Garden of Eden.</b></pre>


*******IOTestCases*******

<pre>
<b>Input:</b>
2 3
2
0 0
0 1
3 3
4
0 0
0 1
0 2
1 1
3 3
5
0 0
1 0
1 2
2 1
2 2
0 0

<b>Output:</b>
Case 1: 3 possible ancestors.
Case 2: 1 possible ancestors.
Case 3: Garden of Eden.
</pre>



______________________________________________________
QKP||||||true||||||


<p>
You all are familiar with the famous 8-queens problem which asks you to place 8 queens on a chess
board so no two attack each other. In this problem, you will be given locations of queens and knights
and pawns and asked to find how many of the unoccupied squares on the board are not under attack
from either a queen or a knight (or both). We&#8217;ll call such squares &#8220;safe&#8221; squares. Here, pawns will
only serve as blockers and have no capturing ability. The board below has 6 safe squares. (The shaded
squares are safe.)

<p>
<center><img src='/content/steinersp:QKP.png'alt='subir imagenes' border='0'></center>

<p><p>
Recall that a knight moves to any unoccupied square that is on the opposite corner of a 2x3 rectangle
from its current position; a queen moves to any square that is visible in any of the eight horizontal,
vertical, and diagonal directions from the current position. Note that the movement of a queen can be
blocked by another piece, while a knight&#8217;s movement can not.


*******InputConstraints*******

<p>
There will be multiple test cases. Each test case will consist of 4 lines. The first line will contain
two integers n and m, indicating the dimensions of the board, giving rows and columns, respectively.
Neither integer will exceed 1000. The next three lines will each be of the form

<p><p>
<i>k r<sub>1</sub> c<sub>1</sub> r<sub>2</sub> c<sub>2</sub> &#183; &#183; &#183; r<sub>k</sub> c<sub>k</sub></i>

<p><p>
indicating the location of the queens, knights and pawns, respectively. The numbering of the rows and
columns will start at one. There will be no more than 100 of any one piece. Values of n = m = 0
indicate end of input.


*******OutputConstraints*******

<p>
Each test case should generate one line of the form

<p><p>
<b><i>Board b has s safe squares.</i></b>

<p><p>
where <i>b</i> is the number of the board (starting at one) and you supply the correct value for <i>s</i>.


*******IOTestCases*******


<pre>
4 4
2 1 4 2 4
1 1 2
1 2 3
2 3
1 1 2
1 1 1
0
1000 1000
1 3 3
0
0
0 0

<b>Output:</b>
Board 1 has 6 safe squares.
Board 2 has 0 safe squares.
Board 3 has 996998 safe squares.
</pre>



______________________________________________________
RELINETS||||||true||||||


<p>
You&#8217;re in charge of designing a campus network between buildings and are very worried about its
reliability and its cost. So, you&#8217;ve decided to build some redundancy into your network while keeping it
as inexpensive as possible. Specifically, you want to build the cheapest network so that if any one line
is broken, all buildings can still communicate. We&#8217;ll call this a <i>minimal reliable net</i>.


*******InputConstraints*******

<p>
There will be multiple test cases for this problem. Each test case will start with a pair of integers n (<=15) and m (<= 20) on a line indicating the number of buildings (numbered 1 through n) and the
number of potential inter-building connections, respectively. (Values of n = m = 0 indicate the end of
the problem.) The following m lines are of the form b<sub>1</sub> b<sub>2</sub> c (all positive integers) indicating that it costs
c to connect building b<sub>1</sub> and b<sub>2</sub>. All connections are bidirectional.


*******OutputConstraints*******

<p>
For each test case you should print one line giving the cost of a minimal reliable net. If there is a
minimal reliable net, the output line should be of the form:

<p><p>
<b><i>The minimal cost for test case p is c.</i></b>

<p><p>
where <i>p</i> is the number of the test case (starting at 1) and <i>c</i> is the cost. If there is no reliable net possible,
output a line of the form:

<p><p>
There is no reliable net possible for test case p.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 5
1 2 1
1 3 2
2 4 2
3 4 1
2 3 1
2 1
1 2 5
0 0

<b>Output:</b>
The minimal cost for test case 1 is 6.
There is no reliable net possible for test case 2.
</pre>



______________________________________________________
SQCOUNT||||||true||||||


<p>
Little Bobby Roberts, age 8, has been dragged to yet another museum by his parents. While they while
away the hours studying Etruscan pottery and Warhol soup cans, Bobby must depend on himself for
entertainment. Having a mathematical bent, he recently started counting all the square tiles on the
floors of the museum. He soon realized that the tiles could be grouped into larger squares that needed
to be added to the count. The problem became a bit more complicated when he started counting squares
contained in multiple rooms, since some squares overlapped both rooms. For example, the two rooms
shown below contain a total of 86 squares: 45 1 ? 1 squares, 28 2 ? 2 squares and 13 3 ? 3 squares.
(Note the opening between the two rooms is only 3 squares wide.)

<p><p>
<center><img src='/content/steinersp:SQCount.png'alt='subir imagenes' border='0'></center>

<p><p>
While this helped kill several days&#8217; worth of museum visits, it soon became rather tedious, so Bobby is
now looking for a program to automate the counting process for him.


*******InputConstraints*******

<p>
Input will consist of multiple test cases. The first line of each case will be a positive integer n <= 1000
which will indicate the number of rooms in the museum. After this will be n lines, each containing a
description of one room. Each room will be rectangular in shape and will be described by a line of the
form

<p><p>
x<sub>1</sub> y<sub>1</sub> x<sub>2</sub> y<sub>2</sub>

<p><p>
where (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>) are opposing corner coordinates (integers) of the room. No two rooms will
overlap, though they may share a side. If the shared side is of length m > 2, then a door of length m&#8722;2
exists between the two rooms, centered along the shared length. No square of any size will overlap more
than two rooms. All <i>x</i> and <i>y</i> values will be <= 1, 000, 000. An input line of n = 0 terminates input and
should not be processed.


*******OutputConstraints*******

<p>
For each test case, output the total number of squares on a single line in the format shown below. All
answers will fit within a 32-bit integer and cases are enumerated starting at 1.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
0 0 9 3
10 6 4 3
3
11 20 15 24
11 17 15 20
15 16 20 24
0

<b>Output:</b>
Case 1: 86
Case 2: 152
</pre>



______________________________________________________
SWTHIN||||||true||||||


<p>
Hugh F. Oh, in his never-ending quest to prove the existence of extraterrestrials, has gotten hold of
a number of nighttime photographs taken by a research group that is examining glowing swamp gas.
Hugh wants to see if any of the photos show, not swamp gas, but Little Grey Men in glowing suits. The
photographs consist of bright dots appearing against a black background. Unfortunately, at the time
the photos were taken, trains were travelling through the area (there is a train trestle over the swamp),
and occasional lights from the train windows also appear in the photographs. Hugh, being a fastidious
researcher, wants to eliminate these spots from the images. He can&#8217;t tell from the photos exactly where
the tracks are, or from what direction the photos were taken, but he knows that the tracks in that
area are perfectly straight, so he&#8217;s decided on the following approach: he will find the line with the
maximum number of spots lying on it and, if there are four or more spots on the line, he will eliminate
those points from his calculations, assuming that those are windows on the train. If two or more lines
have the maximum number of points, Hugh will just randomly select one such set and delete it from
the photo (he&#8217;s not all that fastidious &#8211; after all, he believes in Little Grey Men). If there are fewer
than four points lying along a common line, Hugh will assume that there is no train in the photograph
and won&#8217;t delete any points. Please write a program for him to process a set of photographs.


*******InputConstraints*******

<p>
There will be a series of test cases. Each test case is one photograph described by a line containing
a positive integer n (<= 1000) the number of distinct spots in the photograph, followed by n lines
containing the integer coordinates of the spots, one (x, y) pair per line. All coordinates are between 0
and 10000. The last photo description is followed by a line containing a zero, marking the end of the
input. This line should not be processed.


*******OutputConstraints*******

<p>
For each test case, output the photo number followed by the number of points eliminated from the
photograph. Imitate the sample output below.



*******IOTestCases*******


<pre>
<b>Input:</b>
6
0 1
0 2
1 2
2 2
4 5
5 6
4
3 5
4 4
6 5
7 4
0

<b>Output:</b>
Photo 1: 4 points eliminated
Photo 2: 0 points eliminated
</pre>



______________________________________________________
TWENDS||||||true||||||


<p>
In the two-player game &#8220;Two Ends&#8221;, an even number of cards is laid out in a row. On each card, face
up, is written a positive integer. Players take turns removing a card from either end of the row and
placing the card in their pile. The player whose cards add up to the highest number wins the game.
Now one strategy is to simply pick the card at the end that is the largest &#8212; we&#8217;ll call this the greedy
strategy. However, this is not always optimal, as the following example shows: (The first player would
win if she would first pick the 3 instead of the 4.)

<p><p>
3 2 10 4

<p><p>
You are to determine exactly how bad the greedy strategy is for different games when the second player
uses it but the first player is free to use any strategy she wishes.


*******InputConstraints*******

<p>
There will be multiple test cases. Each test case will be contained on one line. Each line will start with
an even integer n followed by n positive integers. A value of <i>n</i> = 0 indicates end of input. You may
assume that <i>n</i> is no more than 1000. Furthermore, you may assume that the sum of the numbers in
the list does not exceed 1,000,000.


*******OutputConstraints*******

<p>
For each test case you should print one line of output of the form:

<p><p>
<b><i>In game m, the greedy strategy might lose by as many as p points.</i></b>

<p><p>
where <i>m</i> is the number of the game (starting at game 1) and <i>p</i> is the maximum possible difference
between the first player&#8217;s score and second player&#8217;s score when the second player uses the greedy strategy.
When employing the greedy strategy, always take the larger end. If there is a tie, remove the left end.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3 2 10 4
8 1 2 3 4 5 6 7 8
8 2 2 1 5 3 8 7 3
0

<b>Output:</b>
In game 1, the greedy strategy might lose by as many as 7 points.
In game 2, the greedy strategy might lose by as many as 4 points.
In game 3, the greedy strategy might lose by as many as 5 points.
</pre>



______________________________________________________
PRMLX||||||false||||||

<p align="justify">Given a string of characters, we can permute the individual characters to   make new strings. If we can impose an ordering on the characters (say alphabetic   sequence), then the strings themselves can be ordered and any given permutation   can be given a unique number designating its position in that ordering. For   example the string `acab' gives rise to the following 12 distinct permutations: </p>
<div align="center">
  <table width="149" border="0">
    <tr>
      <td width="29">aabc</td>
      <td width="10">1</td>
      <td width="29">acab</td>
      <td width="10">5</td>
      <td width="29">bcaa</td>
      <td width="16">9</td>
    </tr>
    <tr>
      <td>aacb</td>
      <td>2</td>
      <td>acba</td>
      <td>6</td>
      <td>caab</td>
      <td>10</td>
    </tr>
    <tr>
      <td>abac</td>
      <td>3</td>
      <td>baac</td>
      <td>7</td>
      <td>caba</td>
      <td>11</td>
    </tr>
    <tr>
      <td>abca</td>
      <td>4</td>
      <td>baca</td>
      <td>8</td>
      <td>cbaa</td>
      <td>12</td>
    </tr>
  </table>
</div>
<p align="justify">Thus the string `acab' can be characterised in this sequence as 5. </p>
<p align="justify">Write a program that will read in a string and determine its position in the   ordered sequence of permutations of its constituent characters. Note that   numbers of permutations can get very large; however we guarantee that no string   will be given whose position is more than 2^31 = 2.147.483.647</p>
<h2>Input and Output </h2>
<p>Input will consist of a series of lines, each line containing one string.   Each string will consist of up to 30 lower case letters, not necessarily   distinct. Test cases a separated by empty lines. The file will be terminated by a line consisting of a single   #. </p>
<p>Output will consist of a series of lines, one for each line of the input.   Each line will consist of the position of the string in its sequence, right   justified in a field of width 10. </p>
<h2>Sample Input </h2>
<pre>bacaa
abc
cba

bacaa
abc
cba
#</pre>
<p> </p>
<h2>Sample Output </h2>
<pre>
        15
         1
         6

        15
         1
         6
</pre>



______________________________________________________
SCALE||||||true||||||


<p>Kinh_Can has a set of precious weights P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub> in which the mass of the i<sup>th</sup> weight is P<sub>i</sub> = 3<sup>i-1</sup>, and a balance with 2 scales. On a nice day, Kinh_Can decided to show off his set of precious weights to his friends, and said that he can put them in equilibrium with any weight as long as its mass is not more than the mass of the sum of his weights. At first, his friends didn't believe, but after many trials they realized that Kinh_Can was right. In addition, while putting a thing whose mass is X on a scale, Kinh_Can could put right away the weights added on the 2 scales to keep their blance without any trial. 
With a random weight X (X is a natural number, X &#8800; 0). Your task is to put weights on scales in order to keep the 2 scales' balance like Kinh_Can. The first scale initially weights X, and the second one weights 0.



*******InputConstraints*******

<p>Input has exactly one line consisting 2 numbers, the first is N and the second is X.


*******OutputConstraints*******

<ul>
    <li>If there is no solution, you should write -1
    <li>If there is at least one solution for the problem, you should write exactly 2 lines:
        <ul>
            <li>The first line contains some numbers descripting the indices of the weights in the first disc
            <li>The second line contains some numbers description the indices of the weights in the second disc
            <li><b>Note:</b> One of 2 lines can be blank
        </ul>
</ul>


*******IOTestCases*******


<pre>
<b>Input 1:</b>
10 2

<b>Output 1:</b>
1
2

<b>Input 2:</b>
10 5

<b>Output 2:</b>
1 2
3

</pre>



______________________________________________________
NCKLCE||||||true||||||


<p align="justify">
<p>T Corporation is a company which produces colorful necklaces. The necklaces designed by them are unique and fashionable, and because of the price, they are popular with the youth. Now, T Corporation intends to design a self-help Producing System.<br>
<br>
This system includes hardware and software. The software is interactive and controls the hardware. Now the hardware has been completed, but the software is to develop. The workers find you, who is taking NOI. Could you please write a software system to simulate?<br>
<br>
A necklace includes N beads. The color of each bead is one of 1..c. The necklace is fixed in a plain. One position of the plain is marked as Position 1, and the other positions are marked as 2..n in clockwise.<br>
Your system should supply the orders as follow:<br>
</p>
<pre>
+------------+-------------------------------+--------------------------------------------------+
|OrderA A A A A A  |Parameters restrictionsA A A A A A A  |ContentA A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|RA  kA A A A A A A  |0 &lt; k &lt; NA A A A A A A A A A A A A A A A A A A A A  |It means Rotate K. Rotate the necklace by kA A A A A A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |positions in clockwise. i.e. The bead in former 1 |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |position will be transfer to position k+1, theA A A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |bead in former 2 position will be transfer toA A A A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |position k+2, and so on.A A A A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|FA A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |It means Flip. Flip the plain by the given axis.A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |The bead in position 1 doesn't move.The bead inA A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |position 2 will swap with the bead in positionA A A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |N,the bead in position 3 will swap with the beadA  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |in position n-1, and so on.A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|S i jA A A A A A  |1 &lt;= i,j &lt;= nA A A A A A A A A A A A A A A A A  |Swap the bead in position i and j.A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|P i j xA A A A  |1 &lt;= i,j &lt;= n , x&lt;= cA A A A A A A A A  |It means Paint. Paint color x from position i toA  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |position j in clockwise.A A A A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|CA A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |It means Count. Ask how many parts are there inA A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |the necklace. We define some consecutive beadsA A A  |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |in same color as a "part". Pay attention that C is|
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |different from CS 1,n.A A A A A A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
|CS i jA A A A A  |1 &lt;= i,j &lt;= nA A A A A A A A A A A A A A A A A  |It means CountSegment i,j. Ask how many parts are |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |there from position i to position j in clockwise, |
|A A A A A A A A A A A  |A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |i and j included.A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A  |
+------------+-------------------------------+--------------------------------------------------+
</pre>

*******InputConstraints*******

<p>The first line in input includes two integers N,C,  representing the beads in the necklace 
and the number of colors. The second line contains N integers x1,x2...xn, representing the colors of beads from position 1 to position n,1&lt;=xi&lt;=c. The third line includes a integer q, as the number of orders. There is an order in the next q lines, as mentioned above.<br>
<br>
For 60% test cases, n &lt;= 1000, Q &lt;= 1000;<br>
For 100% test cases, n &lt;= 500000, Q &lt;= 500000.</p>


*******OutputConstraints*******

<p>For every order starts with C and CS, print a integer as the answer.</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
1 2 3 2 1
4
C
R 2
P 5 5 2
CS 4 1

<b>Output:</b>
4
1
</pre>

<b>Test data is unofficial. If you have any questions, please contact me. </b>


______________________________________________________
GSS3||||||true||||||


<p>You are given a sequence A of N (N &lt;= 50000) integers between -10000 and 10000. On this sequence you have to apply M (M &lt;= 50000) operations: <br>
modify the i-th element in the sequence or for given x y print max{Ai + Ai+1 + .. + Aj | x&lt;=i&lt;=j&lt;=y }.

*******InputConstraints*******

<p>The first line of input contains an integer N. The following line contains N integers, representing the sequence A1..AN. <br>
The third line contains an integer M. The next M lines contain the operations in following form:<br>
0 x y: modify Ax into y (|y|&lt;=10000).<br>
1 x y: print max{Ai + Ai+1 + .. + Aj | x&lt;=i&lt;=j&lt;=y }.<br>

*******OutputConstraints*******

<p>For each query, print an integer as the problem required.

*******IOTestCases*******


<pre>
<b>Input:</b>
4
1 2 3 4
4
1 1 3
0 3 -3
1 2 4
1 3 3

<b>Output:</b>
6
4
-3
</pre>



______________________________________________________
RP||||||true||||||


<p>This problem tests your mathematic knowledge and your programming ability very much. Your task is to calculate the number of different Minimum Spanning Trees (MSTs) of a special undirected unweighted graph. The graph has n nodes numbered from 1 to n, and there is an edge between node i (1<=i<=n) and node j (1<=j<=n) if and only if 0<|i-j|<=k.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them(<=8) is given in the very first line.</p>
<p>Each test case contains one line with two space-separated numbers k(1<=k<=5) and n(1<=n<=10<sup>15</sup>).</p>

*******OutputConstraints*******

<p>For each test case you should output one line, the number of different MSTs of the corresponding graph modulo 65521. </p>

*******IOTestCases*******

<pre><b>Input:</b>
1
3 5

<b>Output:</b>
75
</pre>


______________________________________________________
BMJ||||||false||||||

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Documento sin t?­tulo</title>
<style type="text/css">
<!--
.Estilo1 {font-size: 12px}
-->
</style>
</head>

<body>
<p>Maja is a bee. She lives in a bee hive with   thousands of other bees. This bee hive consists of many hexagonal honey combs   where the honey is stored in. <br />
  But bee Maja has a problem. Willi told her   where she can meet him, but because Willi is a male drone and Maja is a female   worker they have different coordinate systems. <br />
</p>
<center>
  <table>
    <tbody>
      <tr>
        <th width="371"> <center>
          Maja's Coordinate System
        </center></th>
        <th width="367"> <center>
          Willi's Coordinate System
        </center></th>
      </tr>
      <tr>
        <td><p align="left" class="Estilo1">Maja who often flies directly to a special honey comb has laid an advanced   two dimensional grid over the whole hive. </p>
        <p align="center"><img src="http://www.spoj.pl/content/boodah:maja.jpg" alt="Maja" width="284" height="367" /></p></td>
        <td><p class="Estilo1"> Willi who is more lazy and often walks around just numbered the cells   clockwise starting from 1 in the middle of the hive. </p>
          <p align="center"><img src="http://www.spoj.pl/content/boodah:willi.jpg" alt="Willi" width="284" height="368" /></p></td>
      </tr>
    </tbody>
  </table>
  <p align="justify">Help Maja to convert Willi's system to hers. Write a program which for a given   honey comb number gives the coordinates in Maja's system.</p>
  <p align="justify"><strong>Input</strong></p>
  <p align="justify">    The input contains one or more integers which represent Willi's numbers.   Each number stands on its own in a separate line, directly followed by a   newline. The honey comb numbers are all less than 100 000.</p>
  <p align="justify"><strong>Output</strong></p>
  <p align="justify">    You should output the corresponding Maja coordinates to Willi's numbers,   each coordinate pair on a separate line.</p>
  <p align="justify"><strong>Sample Input</strong></br >
  </p>
  <p align="justify">1<br /> 
  2
<br /> 
3
<br /> 
4
<br /> 
5</p>
  <p align="justify">  <br />
    <strong>Sample Output</strong></br>
  </p>
  <p align="justify">0 0 <br />
0 1<br /> 
-1 1
<br /> 
-1 0
<br /> 
0 -1  </p>
</center>
</body>
</html>



______________________________________________________
TRICOUNT||||||true||||||


<p>We define the LEVEL of a triangle as in the following illustrative image:<br /> <img src="http://www.spoj.pl../../../content/duonghanguyen:tricount.png" alt="" /><br /> <strong>Task:</strong> Your task is very easy. All you have to do is to count all triangles in the biggest one (Level N).</p>

*******InputConstraints*******

<p>The first line of the input contains an integer T (T &le; 10000) - the number of test cases and T lines follow. Each line contains an integer N (1 &le; N &le; 10<sup>6</sup>) which is the level of the triangle in that test case.</p>

*******OutputConstraints*******

<p>For each test case, you should write a seperate line: the number of triangles in the biggest one (Level N). (All answers will fit within the range of a 64-bit integer)</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1<br />2<br />3<br /><br /><strong>Output:</strong><br />1<br />5<br />13<br /></pre>


______________________________________________________
IMPORT1||||||true||||||


<p>Given an undirected weighted graph {<i>V</i>,<i>E</i>}. Your task to calculate the importance of each node.</p>
<p>The importance of a node <i>v</i> (I(v)) can be defined as follow:</p>
<img src="http://www.spoj.pl/content/john_jones:import1.jpg">
<p>C<sub>s,t</sub> is the number of different shortest paths from s to t, C<sub>s,t</sub>(v) is the number of different shortest paths from s to t through v.</p>


*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line. </p>
<p>For each test case: </p>
<p>The first line contains two space-separated integers n(n<=100) and m(m<=4500), the number of nodes in the graph and the number of edges in the graph. The nodes are numbered from 1 to n. m lines follow, each contains 3 integers a, b, c, 1<=a, b<=n, 1<=c<=1000, a!=b, which denotes that there is an undirected edge between node a and node b weighted c. You may assume that there is at most one edge between any pair of nodes, and the number of shortest paths between any pair of nodes is at least 1 and at most 10<sup>10</sup>. </p>


*******OutputConstraints*******

<p>For each test case: </p>
<p>Your Output should contains n lines, each contains one single real number, with 3 decimal places after radix point. The number in the <i>i</i>th line denotes the importance of the <i>i</i>th node. </p>


*******IOTestCases*******

<pre><b>Input:</b>
1
4 4
1 2 1
2 3 1
3 4 1
4 1 1

<b>Output:</b>
1.000
1.000
1.000
1.000
</pre>


______________________________________________________
EXCHANGE||||||true||||||


<p>There are 3 kinds of money in a planet far away from the earth: Mone, Luck, and Rpin. There's a money exchange company in this planet. You must go to this company if you want to do some money exchange, and, more autocratically, this company regulate the exchange rate of each pair of these 3 kinds of money. </p>
<p>The money exchange will be done in the following two ways:</p>
<p>(A)</p>
<p>You give the company a real number <i>x</i> in the range (0,100], the company will exchange <i>x</i>% of your Mone and <i>x</i>% of your Luck to equal Rpin according to the exchange rate of that day.</p>
<p>(B)</p>
<p>You give the company a real number <i>x</i>, the company will exchange your <i>x</i> Rpin to some Mone and Luck, whose value is equal to <i>x</i> Rpin according to the exchange rate of that day, and, the value of Mone is <i>Rate</i> times of the value of Luck.</p>
<p>You can do many exchange operations in the same day.</p>
<p>Now, as the excellant spy in this planet, you know the exchange rate between Mone and Rpin of each of the next <i>n</i> days(a<sub>i</sub> Mone per Rpin), and the exchange rate between Luck and Rpin of each of the next <i>n</i> days(b<sub>i</sub> Luck per Rpin), and, each Rate of the next <i>n</i> days( Rate<sub>i</sub>). you have <i>S</i> Rpin in the start, and you want to get most Rpin in the <i>n</i>th day later.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them( <=5 ) is given in the very first line.</p>
<p>For each test case: </p>
<p>The first line contains a integer number n(1<=n<=100000) and a real number S.n lines follow, each contains 3 real numbers: a<sub>i</sub>(between 0 and 10), b<sub>i</sub>(between 0 and 10), Rate<sub>i</sub>(between 0 and 100).</p>

*******OutputConstraints*******

<p>For each test case, output one line contains a real number with 3 digits after decimal point, which denotes to the answer. You can assume it is less than 1000000000.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
3 100
1 1 1
1 2 2
2 2 3

<b>Output:</b>
225.000
</pre>
<b>Warning: large input/output data, be careful with certain languages; the time limit is somewhat strict for this problem</b>



______________________________________________________
CPRMT||||||true||||||


<p>Given
two strings of lowercase letters, <b style=""><i>a</i></b>
and <b style=""><i>b</i></b>, print the longest
string <b style=""><i>x</i></b> of lowercase letters
such that there is a permutation of <b style=""><i>x</i></b>
that is a subsequence of <b style=""><i>a</i></b>
and there is a permutation of <b style=""><i>x</i></b>
that is a subsequence of <b style=""><i>b</i></b>. 


*******InputConstraints*******


<p>Input file contains several lines of input.
Consecutive two lines make a set of input. That means in the input file line <b style="">1</b> and <b style="">2</b> is a set of input, line <b style="">3</b>
and <b style="">4</b> is a set of input and so on.
The first line of a pair contains <b style=""><i>a</i></b>
and the second contains <b style=""><i>b</i></b>.
Each string is on a separate line and consists of at most <b style="">1000</b> lowercase letters.


*******OutputConstraints*******


<p>For each set of input, output a line containing <b style=""><i>x</i></b>. If several <b style=""><i>x</i></b> satisfy the criteria above,
choose the first one in alphabetical order. 


*******IOTestCases*******


<pre>
<b>Sample input:</b>
pretty
women
walking
down
the
street
 
<b>Sample output:</b>
e
nw
et 
</pre>


______________________________________________________
NUMGUESS||||||false||||||

<p>You play a game with Bob:
He thinks of a number from a given range and you try to guess it. If you're right, you win. If you're wrong, he tells you if the number is too high or too low and you get to try again.
Try to win in the lowest possible number of guesses!
Beware: Bob isn't exactly known for playing fair.


______________________________________________________
TCOUNT2||||||true||||||


<p>We define the LEVEL of a triangle as in the following illustrative image:<br>
<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/duonghanguyen:tricount.png"></center><br>
<p>And we continue defining the LEVEL of a hexagon. It's called level N hexagon if it&#8217;s joined by 6 triangles, each one is a level N triangle.<br>
<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/duonghanguyen:tcount2.png"></center><br>
<p><b>Task:</b> All you have to do is to count all triangles in the &#8220;level N&#8221; hexagon.


*******InputConstraints*******

<p>The first line of the input contains an integer T - the number of test cases and T lines follow. Each line contains an integer N which is the level of the hexagon in that test case.


*******OutputConstraints*******

<p>For each test case, you should write a seperate line: the number of triangles in the &#8220;level N&#8221; hexagon. (All answers will fit within the range of a 64-bit positive integer)


*******IOTestCases*******


<pre>
<b>Input:</b>
1
1

<b>Output:</b>
6
</pre>

<center><b>Be careful with certain languages</b></center>



______________________________________________________
TCOUNT3||||||true||||||


<p><strong>Have you felt bored when counting triangles?</strong>
<p>Like TRICOUNT and TCOUNT2, we define the LEVEL of a triangle as in the following illustrative image:<br>
<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/duonghanguyen:tricount.png"></center><br>
<p>And now we will continue defining the LEVEL of a hexagram. It's called level N hexagram if it&#8217;s joined by 12 triangles, each one is a level N triangle.<br>
<center><img src="http://www.spoj.plhttps://www.spoj.pl/content/duonghanguyen:tcount3.png"></center><br>
<p><b>Task:</b> All you have to do is to count all triangles in the level N hexagram. 


*******InputConstraints*******

<p>The first line of the input contains an integer T - the number of test cases and T lines follow. Each line contains an integer N which is the level of the hexagram in that test case. 


*******OutputConstraints*******

<p>For each test case, you should write a seperate line: the number of triangles in the level N hexagram. (All answers will fit within the range of a 64-bit positive integer) 


*******IOTestCases*******


<pre>
<b>Input:</b>
1
1

<b>Output:</b>
20
</pre>
<center><b>The author allows only few languages</b></center>


______________________________________________________
EQU2||||||true||||||


<p>Consider the equation

<blockquote><p align=justify>

<p><i>x</i><sup>2</sup> - <i>n</i><i>y</i><sup>2</sup> = 1
</blockquote><p align=justify>

<p>where <i>n</i> is some integer.<br>

<p>Find the smallest strictly positive integer solutions (<i>x</i>, <i>y</i>) for a given <i>n</i>.


*******InputConstraints*******

<p>The number of test cases <i>t</i> (around 30), followed by a list of <i>t</i> values of <i>n</i> (2 &#8804; <i>n</i> &#8804; 1000). You can assume that the equation can be solved for all values of <i>n</i> in the input set.


*******OutputConstraints*******

<p>For every test case, the values of <i>x</i> and <i>y</i> separated by a space character, on separate lines.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
6
61

<b>Output:</b>
3 2
5 2
1766319049 226153980
</pre>



______________________________________________________
TETRIS3D||||||true||||||


<p>The authors of the game "Tetris" have decided to make a new, three-dimensional version, in which cuboids would fall down on a rectangular platform. The blocks fall down separately in a certain order, just like in the two-dimensional game. A block falls down until it reaches an obstacle: the platform or another block, that has already stopped - then it stops and remains in this exact position till the game is over. <br />
However, the authors wanted to change the spirit of the game, turning it from a simple arcade-game into a play far more puzzling. Knowing the order of the falling blocks and their flight path the player's task is to tell the height of the highest point of the arrangement after all blocks have fallen down (and stopped). All the blocks are falling down vertically and do not rotate while falling. For convenience we'll introduce a cartesian coordinate system on the platform, with the center in one of the platform's corners and the axes parallel to the platform's edges. <br />
Write a program that: <br />
&#8226;    reads the descriptions of subsequent falling blocks from the standard input, <br />
&#8226;    determines the height of the highest point of the arrangement of blocks after all have fallen down and stopped, <br />
&#8226;    writes the result to the standard output. <br />



*******InputConstraints*******

<p>In the first line of the input there are three integers D, S and N ( 1&lt;=N&lt;=20 000, 1&lt;=D, S&lt;=1 000), separated by single spaces and denoting respectively: the length and the depth of the platform and the number of blocks that are going to fall down on it. In the following N lines the descriptions of subsequent blocks are given, one in each line. <br />
Each description of a block consists of five integers: d, s, w, x and y (1&lt;=d, 0&lt;=x,d+x&lt;=D, 1&lt;=s,0&lt;=y,s+y&lt;=S, 1&lt;=w&lt;=100 000), representing a block of length d depth s and height w This very block will be falling down on the platform with its d?s face as the bottom, where the length and depth of the block are parallel to those of the platform. The coordinates of the vertices of the projection of the block on the platform are: (x, y), (x + d, y), (x, y + s) and (x + d, y + s). <br />


*******OutputConstraints*******

<p>The first and only line of the standard output should contain exactly one integer, the height of the highest point of the arrangement of blocks after all have fallen down ad stopped. <br />


*******IOTestCases*******

<pre>
<b>Input:</b>
7 5 4
4 3 2 0 0
3 3 1 3 0
7 1 2 0 3
2 3 3 2 2

<b>Output:</b>
6
</pre>



______________________________________________________
POLEVAL||||||true||||||


<p align="justify">Your task consists of evaluate a polynomial of degree <strong>n</strong> (<strong>0</strong> &lt;= <strong>n</strong> &lt;= <strong>999</strong>) represented by its <strong>n+1</strong> coefficients of the form:
 </p>
 
<center>
  <strong>p<sub>n</sub>(x)  = c<sub>n</sub>x<sup>n</sup> + c<sub>n-1</sub>x<sup>n-1</sup> + &#8230; + c<sub>2</sub>x<sup>2</sup> + c<sub>1</sub>x + c<sub>0</sub></strong>
</center>
<p align="justify">in each one of the <strong>k</strong> (<strong>1</strong> &lt;= <strong>k</strong> &lt;= <strong>100</strong>) points <strong>x<sub>1</sub></strong>, <strong>x<sub>2</sub></strong>,  &#8230;, <strong>x<sub>k</sub></strong>. The coefficients of the polynomial and the values where they will be evaluated are integers in the interval <strong>[-100, 100]</strong> that guarantees that the polynomial's evaluation is at the most <strong>2<sup>63</sup> &#8211; 1</strong>.
</p>


*******InputConstraints*******

<p align="justify">
There will be multiple test cases, each one with <strong> 4</strong> lines that are described below
<br>
<b>n</b>: degree of polynomial.<br>

<strong>c<sub>n</sub> c<sub>n-1 </sub>&#8230;  c<sub>2 </sub> c<sub>1</sub>  c<sub>0</sub></strong>: coefficients of the polynomial separated by a single space.<br>

<strong>k</strong>: number of points to evaluate the polynomial.<br>

<strong>x<sub>1</sub> x<sub>2 </sub>&#8230;<sub> </sub> x<sub>k-1</sub> x<sub>k</sub></strong>: points to evaluate the polynomial separated by a single space.<br>
<br>
The final test case is a single line where <strong>n = -1</strong> and this case should not be processed.
</p>


*******OutputConstraints*******

<p align="justify">
For each test case you should print <strong>k + 1</strong> lines of output, the very first line containing the case number and the following <strong>k</strong> lines with the result of the polynomial's evaluation in each one of the <strong>k</strong> given points. See the sample.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2<br>1 -2 -1<br>5<br>0 1 -1 2 -2<br>3<br>2 1 -2 -1<br>4<br>0 -1 2 -2<br>-1<br>
<b>Output:</b>
Case 1:<br>-1<br>-2<br>2<br>-1<br>7<br>Case 2:<br>-1<br>0<br>15<br>-9<br>
</pre>



______________________________________________________
SEQPAR2||||||true||||||


<p>Given a sequence of <i>N</i> ordered pairs of positive integers (<i>A<sub>i</sub></i>, <i>B<sub>i</sub></i>), you have to 

partition it into several contiguous parts. Let <i>p</i> be the number of these parts, whose boundaries are 

(<i>l</i><sub>1</sub>, <i>r</i><sub>1</sub>), (<i>l</i><sub>2</sub>, <i>r</i><sub>2</sub>), ... ,(<i>l<sub>p</sub></i>, 

<i>r<sub>p</sub></i>), which satisfy <i>l<sub>i </sub></i>=<i> r<sub>i-</sub></i><sub>1 </sub>+ 1, <i>l<sub>i 

</sub></i>&lt;=<i> r<sub>i</sub></i>, <i>l</i><sub>1<i> </i></sub>= 1, <i>r<sub>p </sub></i>= <i>n</i>. The parts themselves 

also satisfy the following restrictions:</p><ol><li><p>For any two pairs (<i>A<sub>p</sub></i>, <i>B<sub>p</sub></i>), 

(<i>A<sub>q</sub></i>,<i> B<sub>q</sub></i>), where (<i>A<sub>p</sub></i>,<i> B<sub>p</sub></i>) is belongs to the 

<i>T<sub>p</sub></i>th part and (<i>A<sub>q</sub></i>, <i>B<sub>q</sub></i>) the <i>T<sub>q</sub></i>th part. If 

<i>T<sub>p</sub> </i>&lt;<i> T<sub>q</sub></i>, then <i>B<sub>p </sub></i>><i> A<sub>q</sub></i>.</p></li><li><p>Let 

<i>M<sub>i</sub></i> be the maximum <i>A</i>-component of elements in the <i>i</i>th part, say<p><i>M<sub>i</sub></i> = max

{<i>A<sub>l<sub>i</sub></sub></i>, 

<i>A<sub>l<sub>i+</sub></sub></i><sub><sub>1</sub></sub>, ..., <i>A<sub>r<sub>i</sub></sub></i>}, 1 &lt;= <i>i</i> &lt;= 

<i>p</i><p>it is provided that</p><p><img src="http://www.spoj.pl../../content/crazyb0y:SEQPAR2_1.bmp"><br> 

where Limit is a given integer.</p></li></ol><p>Let <i>S<sub>i</sub></i> be the sum of <i>B</i>-components of elements 

in the <i>i</i>th part. <p>Now I want to minimize the value</p><p>max{<i>S<sub>i</sub></i>:1 &lt;= <i>i</i> &lt;= 

p} <p>Could you tell me the minimum?


*******InputConstraints*******

<p>The input contains exactly one test case. The first line of input contains two positive integers N (N &lt;= 50000), Limit 

(Limit &lt;= 2<sup>31</sup>-1). Then follow N lines each contains a positive integers pair (<i>A</i>, <i>B</i>). It's always 

guaranteed that<p> max{<i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, ..., <i>A<sub>n</sub></i>} &lt;= Limit<br><img 

src="../../content/crazyb0y:SEQPAR2_2.bmp">


*******OutputConstraints*******

<p>Output the minimum target value.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 6
4 3
3 5
2 5
2 4

<b>Output:</b>
9

</pre>

______________________________________________________
DIVSUM2||||||true||||||


<p>Given a natural number n (1 &lt;= n &lt;= 1e16), please output the summation of all its proper divisors.

<p><em>Definition:</em> A proper divisor of a natural number is the divisor that is strictly less than the number.

<p>e.g. number 20 has 5 proper divisors: 1, 2, 4, 5, 10, and the divisor summation is: 1 + 2 + 4 + 5 + 10 = 22.


*******InputConstraints*******

<p>An integer stating the number of test cases (equal to 500), and that many lines follow, each containing one integer between 1 and 1e16 inclusive.


*******OutputConstraints*******

<p>One integer each line: the divisor summation of the integer given respectively.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
10
20

<b>Output:</b>
1
8
22
</pre>

<b>warning: a naive algorithm may not run in time. </b>


______________________________________________________
NQUEEN||||||true||||||


<p>After solving <a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3239">Solution to the <em>n </em> Queens Puzzle</a> by constructing, LoadingTime wants to solve a harder version of the N-Queen Problem. Some queens have been set on particular locations on the board in this problem. Can you help him??

*******InputConstraints*******

<p>The input contains multiple test cases. Every line begins with an integer N (N&lt;=50), then N integers followed, representing the column number of the queen in each rows. If the number is 0, it means no queen has been set on this row. You can assume there is at least one solution. 

*******OutputConstraints*******

<p>For each test case, print a line consists of N numbers separated by spaces, representing the column number of the queen in each row. If there are more than one answer, print any one of them. 

*******IOTestCases*******


<pre>
<b>Input:</b>
4 0 0 0 0
8 2 0 0 0 4 0 0 0

<b>Output:</b>
2 4 1 3
2 6 1 7 4 8 3 5
</pre>



______________________________________________________
DETER2||||||true||||||


<p>In this problem you have to calculate the determinant of an N x N matrix whose entries are given by <b>m[i][j] = gcd(i,j)<sup>k</sup></b>, 1 &#8804; i,j &#8804; N.<br /><br />
Here gcd(i,j) denotes the greatest common divisor of i and j.<br /><br />
As the determinant D can grow very large, you have to print D%1000003.


*******InputConstraints*******

<p>First line of input consists of a single integer containing the number of test cases T ( equal to around 20), each of the following T lines contain two integers N and k where N is the size of the matrix and k is the exponent.<br />
1 &#8804; N &#8804; 1000000<br />
1 &#8804; k &#8804; 10<sup>9</sup><br />


*******OutputConstraints*******

<p>One line corresponding to each test case containing the determinant modulo 1000003 for the corresponding test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 2
2 4
4 3


<b>Output:</b>
288
15
10192
</pre>

<b>Note</b>: You may want to solve <a href="http://www.spoj.pl/problems/DETER">DETER</a> first, in case you havent already solved it.


______________________________________________________
ALL||||||true||||||


<p>

Operating systems are large software artefacts composed of many packages, usually distributed on several media, e.g., discs.
You probably remember the time when your favourite operating system was delivered on 21 floppy discs, or, a few years later, on 6 CDs.
Nowadays, it will be shipped on several DVDs, each containing tens of thousands of packages.

<p>

The installation of certain packages may require that other packages have been installed previously.
Therefore, if the packages are distributed on the media in an unsuitable way, the installation of the complete system requires you to perform many media changes, provided that there is only one reading device available, e.g., one DVD-ROM drive.
Since you have to start the installation somehow, there will of course be one or more packages that can be installed independently of all other packages.

<p>

Given a distribution of packages on media and a list of dependences between packages, you have to calculate the minimal number of media changes required to install all packages.
For your convenience, you may assume that the operating system comes on exactly 2 DVDs.


*******InputConstraints*******


<p>
The input contains several test cases.
Every test case starts with three integers <code>N<sub>1</sub>, N<sub>2</sub>, D</code>.
You may assume that <code>1&lt;=N<sub>1</sub>,N<sub>2</sub>&lt;=50000</code> and <code>0&lt;=D&lt;=100000</code>.
The first DVD contains <code>N<sub>1</sub></code> packages, identified by the numbers <code>1, 2, ..., N<sub>1</sub></code>.
The second DVD contains <code>N<sub>2</sub></code> packages, identified by the numbers <code>N<sub>1</sub>+1, N<sub>1</sub>+2, ..., N<sub>1</sub>+N<sub>2</sub></code>.
Then follow <code>D</code> dependence specifications, each consisting of two integers <code>x<sub>i</sub>, y<sub>i</sub></code>.
You may assume that <code>1&lt;=x<sub>i</sub>,y<sub>i</sub>&lt;=N<sub>1</sub>+N<sub>2</sub></code> for <code>1&lt;=i&lt;=D</code>.
The dependence specification means that the installation of package <code>x<sub>i</sub></code> requires the previous installation of package <code>y<sub>i</sub></code>.
You may assume that there are no circular dependences.
The last test case is followed by three zeros.



*******OutputConstraints*******


<p>
For each test case output on a line the minimal number of DVD changes required to install all packages.
By convention, the DVD drive is empty before the installation and the initial insertion of a disc counts as <code>one</code> change.
Likewise, the final removal of a disc counts as <code>one</code> change, leaving the DVD drive empty after the installation.


*******IOTestCases*******


<PRE>
<b>Input:</b>
3 2 1
1 2
2 2 2
1 3
4 2
2 1 1
1 3
0 0 0

<b>Output:</b>
3
4
3
</PRE>


______________________________________________________
BOOLE||||||false||||||

<p>

Propositions are logical formulas consisting of proposition symbols and connecting operators.
They are recursively defined by the following rules:

<ol>
<li>All proposition symbols (in this problem, lower-case alphabetic characters, e.g., <code>a</code> and <code>z</code>) are propositions.

<li>If <code>P</code> is a proposition, <code>(!</code><code>P</code><code>)</code> is a proposition, and <code>P</code> is a direct subformula of it.
<li>If <code>P</code> and <code>Q</code> are propositions, <code>(</code><code>P</code><code>&</code><code>Q</code><code>)</code>, <code>(</code><code>P</code><code>|</code><code>Q</code><code>)</code>, <code>(</code><code>P</code><code>--></code><code>Q</code><code>)</code>, and <code>(</code><code>P</code><code>&lt;-></code><code>Q</code><code>)</code> are propositions, and <code>P</code> and <code>Q</code> are direct subformulas of them.

<li>Nothing else is a proposition.
</ol>

The operations <code>!</code>, <code>&</code>, <code>|</code>, <code>--></code>, and <code>&lt;-></code> denote logical negation, conjunction, disjunction, implication, and equivalence, respectively.
A proposition <code>P</code> is a subformula of a proposition <code>R</code> if <code>P=R</code> or <code>P</code> is a direct subformula of a proposition <code>Q</code> and <code>Q</code> is a subformula of <code>R</code>.


<p>

Let <code>P</code> be a proposition and assign boolean values (i.e., <code>0</code> or <code>1</code>) to all proposition symbols that occur in <code>P</code>.
This induces a boolean value to all subformulas of <code>P</code> according to the standard semantics of the logical operators:

<p>

<center>
<table border>
<tr>
<td>negation
<td>conjunction
<td>disjunction
<td>implication
<td>equivalence
<tr>
<td><code>!</code><code>0</code>=<code>1</code>
<td><code>0</code><code>&</code><code>0</code>=<code>0</code>

<td><code>0</code><code>|</code><code>0</code>=<code>0</code>
<td><code>0</code><code>--></code><code>0</code>=<code>1</code>
<td><code>0</code><code>&lt;-></code><code>0</code>=<code>1</code>

<tr>
<td><code>!</code><code>1</code>=<code>0</code>
<td><code>0</code><code>&</code><code>1</code>=<code>0</code>
<td><code>0</code><code>|</code><code>1</code>=<code>1</code>

<td><code>0</code><code>--></code><code>1</code>=<code>1</code>
<td><code>0</code><code>&lt;-></code><code>1</code>=<code>0</code>
<tr>
<td>
<td><code>1</code><code>&</code><code>0</code>=<code>0</code>

<td><code>1</code><code>|</code><code>0</code>=<code>1</code>
<td><code>1</code><code>--></code><code>0</code>=<code>0</code>
<td><code>1</code><code>&lt;-></code><code>0</code>=<code>0</code>

<tr>
<td>
<td><code>1</code><code>&</code><code>1</code>=<code>1</code>
<td><code>1</code><code>|</code><code>1</code>=<code>1</code>
<td><code>1</code><code>--></code><code>1</code>=<code>1</code>

<td><code>1</code><code>&lt;-></code><code>1</code>=<code>1</code>
</table>
</center>

<p>

This way, a value for <code>P</code> can be calculated.
This value depends on the choice of the assignment of boolean values to the proposition symbols.
If <code>P</code> contains <code>n</code> different proposition symbols, there are <code>2<sup>n</sup></code> different assignments.
To evaluate all possible assignments we may use truth tables.


<p>

A truth table contains one line per assignment (i.e., <code>2<sup>n</sup></code> lines in total).
Every line contains the values of all subformulas under the chosen assignment.
The value of a subformula is aligned with the proposition symbol, if the subformula is a proposition symbol, and with the center of the operator otherwise.


______________________________________________________
DNALAB||||||false||||||

<p align="justify">Having started to build his own DNA lab just recently, the evil doctor Frankenstein is not quite
  up to date yet. He wants to extract his DNA, enhance it somewhat and clone himself. He has
  already figured out how to extract DNA from some of his blood cells, but unfortunately reading
  off the DNA sequence means breaking the DNA into a number of short pieces and analyzing those
  first. Frankenstein has not quite understood how to put the pieces together to recover the original<br />
sequence.</p>
<p align="justify">  His pragmatic approach to the problem is to sneak into university and to kidnap a number of
  smart looking students. Not surprisingly, you are one of them, so you would better come up with
a solution pretty fast.</p>
<p align="justify">  You are given a list of strings over the alphabet A (for adenine), C (cytosine), G (guanine), and T
  (thymine), and your task is to find the shortest string (which is typically not listed) that contains
  all given strings as substrings. If there are several such strings of shortest length, find the smallest
  in alphabetical/lexicographical order.<br />
</p>
<p align="justify"><strong>Input</strong><br />
  The fist line contains the number of scenarios. For each scenario, the first line contains the number
  n of strings with 1&lt;=n&lt;=15. Then these strings with 1 &lt;= length &lt;= 100 follow, one on each line,
  and they consist of the letters &#8216;A&#8217;, &#8216;C&#8217;, &#8216;G&#8217;, and &#8216;T&#8217; only.<br />
</p>
<p align="justify"><strong>Output</strong><br />
  The output for every scenario begins with a line containing &#8220;Scenario #i:&#8221;, where i is the number
  of the scenario starting at 1. Then print a single line containing the shortest (and smallest) string
  as described above. Terminate the output for the scenario with a blank line.<br />
</p>
<p align="justify"><strong>Sample Input</strong><br />
  1<br />
  2<br />
  TGCACA<br />
  CAT<br />
</p>
<p align="justify"><strong>Sample Output</strong><br />
</p>
<p align="justify">Scenario #1:<br />
  TGCACAT</p>



______________________________________________________
ICAMPSEQ||||||true||||||


<p>Let's say we have 4 N-elements sequences of real numbers: A[], B[], C[], D[] .<br>
Funtion F(i, j) is defined: F(i, j) = |A<sub>i</sub> - A<sub>j</sub>| + |B<sub>i</sub> - B<sub>j</sub>| + |C<sub>i</sub> - C<sub>j</sub>| + |D<sub>i</sub> - D<sub>j</sub>| (1 &#8804; i, j &#8804; N).<br>
Your task is very easy: you have to find the maximum of F(i, j).


*******InputConstraints*******

<p>The first line: N (N &#8804; 100000).<br>
Following are N lines: the i-th line contains four real numbers A<sub>i</sub>, B<sub>i</sub>, C<sub>i</sub>, D<sub>i</sub>. (-10<sup>9</sup> &#8804; A<sub>i</sub>, B<sub>i</sub>, C<sub>i</sub>, D<sub>i</sub> &#8804; 10<sup>9</sup>)


*******OutputConstraints*******

<p>Only one line is the maximum of F(i, j).<br>
(The result takes exactly 3 decimal places)

*******IOTestCases*******


<pre>
<b>Input:</b>
2
1.0 1.0 2.0 0.5
1.0 1.0 0.5 2.0


<b>Output:</b>
3.000

</pre>



______________________________________________________
CODE||||||false||||||

<p>

KEY Inc., the leading company in security hardware, has developed a new kind of safe.
To unlock it, you don't need a key but you are required to enter the correct <code>n</code>-digit code on a keypad (as if this were something new!).
There are several models available, from toy safes for children (with a 2-digit code) to the military version (with a 6-digit code).

</p><p>

The safe will open as soon as the last digit of the correct code is entered.
There is no "enter" key.
When you enter more than <code>n</code> digits, only the last <code>n</code> digits are significant.
For example (in the 4-digit version), if the correct code is 4567, and you plan to enter the digit sequence 1234567890, the door will open as soon as you press the 7 key.

</p><p>

The software to create this effect is rather simple.
In the <code>n</code>-digit version the safe is always in one of <code>10<sup>n-1</sup></code> internal states.
The current state of the safe simply represents the last <code>n-1</code> digits that have been entered.
One of these states (in the example above, state 456) is marked as the <code>unlocked</code> state.
If the safe is in the unlocked state and then the right key (in the example above, 7) is pressed, the door opens.
Otherwise the safe shifts to the corresponding new state.
For example, if the safe is in state 456 and then you press 8, the safe goes into state 568.

</p><p>

A trivial strategy to open the safe is to enter all possible codes one after the other.
In the worst case, however, this will require <code>n * 10<sup>n</sup></code> keystrokes.
By choosing a good digit sequence it is possible to open the safe in at most <code>10<sup>n</sup> + n - 1</code> keystrokes.
All you have to do is to find a digit sequence that contains all <code>n</code>-digit sequences exactly once.
KEY Inc. claims that for the military version (n=6) the fastest computers available today would need billions of years to find such a sequence - but apparently they don't know what some programmers are capable of...


</p>
______________________________________________________
DANGER||||||false||||||

<p>

Flavius Josephus and 40 fellow rebels were trapped by the Romans.
His companions preferred suicide to surrender, so they decided to form a circle and to kill every third person and to proceed around the circle until no one was left.
Josephus was not excited by the idea of killing himself, so he calculated the position to be the last man standing (and then he did not commit suicide since nobody could watch).

</p><p>

We will consider a variant of this "game" where every second person leaves.
And of course there will be more than 41 persons, for we now have computers.
You have to calculate the safe position.
Be careful because we might apply your program to calculate the winner of this contest!

</p>
______________________________________________________
ENCONDIN||||||false||||||

<p>

Your task is to write a program that performs a simple form of run-length encoding, as described by the rules below.

</p><p>

Any sequence of between 2 to 9 identical characters is encoded by two characters.
The first character is the length of the sequence, represented by one of the characters <code>2</code> through <code>9</code>.
The second character is the value of the repeated character.
A sequence of more than 9 identical characters is dealt with by first encoding 9 characters, then the remaining ones.

</p><p>

Any sequence of characters that does not contain consecutive repetitions of any characters is represented by a <code>1</code> character followed by the sequence of characters, terminated with another <code>1</code>.
If a <code>1</code> appears as part of the sequence, it is escaped with a <code>1</code>, thus two <code>1</code> characters are output.

</p>
______________________________________________________
FRACTAN||||||false||||||

To play the "fraction game" corresponding to a given list <code>f<sub>1</sub>, f<sub>2</sub>, ..., f<sub>k</sub></code> of fractions and starting integer <code>N</code>, you repeatedly multiply the integer you have at any stage (initially <code>N</code>) by the earliest <code>f<sub>i</sub></code> in the list for which the answer is integral.
Whenever there is no such <code>f<sub>i</sub></code>, the game stops.


</p><p>

Formally, we define a sequence by <code>S<sub>0</sub>=N</code>, and <code>S<sub>j+1</sub>=f<sub>i</sub>S<sub>j</sub></code>, if for <code>1&lt;=i&lt;=k</code>, the number <code>f<sub>i</sub>S<sub>j</sub></code> is an integer but the numbers <code>f<sub>1</sub>S<sub>j</sub>, ..., f<sub>i-1</sub>S<sub>j</sub></code> are not.


</p><p>

For example, if we have the list of eight fractions <code>f<sub>1</sub>=170/39</code>, <code>f<sub>2</sub>=19/13</code>, <code>f<sub>3</sub>=13/17</code>, <code>f<sub>4</sub>=69/95</code>, <code>f<sub>5</sub>=19/23</code>, <code>f<sub>6</sub>=1/19</code>, <code>f<sub>7</sub>=13/7</code>, <code>f<sub>8</sub>=1/3</code>, and start with <code>N=21</code>, we produce the (finite) sequence <code>(21,39,170,130,190,138,114,6,2)</code>.
In general, the sequence may be infinite.


</p><p>

Given a fraction list and a starting integer calculate a part of the defined sequence.
Actually, we are interested only in the powers of <code>2</code> that appear in the sequence.

</p>
______________________________________________________
GREEDULM||||||false||||||

<p>

In the following we define the basic terminology of trees.
A <b>tree</b> is defined inductively: It has a <b>root</b> which is either an <b>external node</b> (a leaf), or an <b>internal node</b> having a sequence of trees as its children.
An internal node is also called the <b>parent</b> of the roots of its child trees.
The <b>level</b> of a node in a tree is defined inductively: The root has level <code>0</code>, and the level of a node is <code>1</code> more than the level of its parent node.


</p><p>

Every internal node of a <b>binary tree</b> has precisely two children, its left sub-tree and its right sub-tree.
Every internal node of a <b>labelled binary tree</b> is additionally marked with a string, its label.
A <b>binary search tree</b> is a labelled binary tree where every internal node <code>t</code> satisfies the following condition: All labels of nodes in the left sub-tree of <code>t</code> are less than the label of <code>t</code> which is, in turn, less than all labels of nodes in the right sub-tree of <code>t</code>.
For this condition, we assume lexicographic, i.e., alphabetic order on the strings.


</p><p>

An <b>inorder traversal</b> of a tree is defined recursively: A leaf is just visited, and for an internal node first its left sub-tree is traversed inorder, then the node itself is visited, finally its right sub-tree is traversed inorder.
It follows that an inorder traversal of a binary search tree yields the labels in lexicographic order.
Note that binary search trees whose shapes differ may nevertheless yield the same sequence of strings while being traversed inorder.

</p><p>

When a given string <code>s</code> is looked for in a binary search tree, we compare <code>s</code> to the label <code>l</code> of the root.
We are done if <code>s=l</code>, otherwise if <code>s&lt;l</code> we continue to search in the left sub-tree, and if <code>s>l</code> in the right sub-tree.
If a leaf is reached, we know that <code>s</code> is not in the tree.


</p><p>

The number of comparisons performed in such a search procedure depends on <code>s</code> and the actual shape of the search tree.
Therefore, there is an interest in constructing binary search trees that store a given sequence of strings but provide as efficient access as possible.
Of course, we don't know in advance which strings will be looked up in the tree, so we need to make some assumptions.

</p><p>

Let <code>n</code> be the number of strings that are to be stored in the binary search tree.
Let <code>K<sub>1</sub>,...,K<sub>n</sub></code> be these strings in lexicographic order.
Let <code>p<sub>1</sub>,...,p<sub>n</sub></code> and <code>q<sub>0</sub>,...,q<sub>n</sub></code> be <code>2n+1</code> non-negative real numbers such that <code>&#8721;<sub>i=1..n</sub> p<sub>i</sub> + &#8721;<sub>i=0..n</sub> q<sub>i</sub> = 1</code>.
The interpretation of these numbers is:

</p><ul>
<li><code>p<sub>i</sub></code> = probability that the search argument <code>s</code> is <code>K<sub>i</sub></code>.
</li><li><code>q<sub>i</sub></code> = probability that <code>s</code> lies (lexicographically) strictly between <code>K<sub>i</sub></code> and <code>K<sub>i+1</sub></code>.

</li></ul>

<p>
By convention, <code>q<sub>0</sub></code> is the probability that <code>s</code> is less than <code>K<sub>1</sub></code>, and <code>q<sub>n</sub></code> is the probability that <code>s</code> is greater than <code>K<sub>n</sub></code>.
We want to find a binary search tree containing nodes with labels <code>K<sub>1</sub>,...,K<sub>n</sub></code> that minimises the expected number of comparisons in the search, namely

<center>
<code>cost = &#8721;<sub>i=1..n</sub> p<sub>i</sub>*(1 + level of internal node K<sub>i</sub>) + &#8721;<sub>i=0..n</sub> q<sub>i</sub>*(level of leaf between K<sub>i</sub> and K<sub>i+1</sub>)</code>.

</center>
<p>
The leaf between <code>K<sub>i</sub></code> and <code>K<sub>i+1</sub></code> is that leaf reached in the search for a string <code>s</code> that lies (lexicographically) strictly between <code>K<sub>i</sub></code> and <code>K<sub>i+1</sub></code>.
Adhere to the convention stated above for the border cases.


<p>

The following figure illustrates the first test case of the sample input.
It shows the two possible binary search trees, the probabilities and the associated costs.

</p><p>

</p><center>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/wanderley:GREEDULM.jpg">
</center>


______________________________________________________
HEAPULM||||||false||||||

<p>

Read the statement of problem G for the definitions concerning trees.
In the following we define the basic terminology of heaps.
A <b>heap</b> is a tree whose internal nodes have each assigned a <b>priority</b> (a number) such that the priority of each internal node is less than the priority of its parent.
As a consequence, the root has the greatest priority in the tree, which is one of the reasons why heaps can be used for the implementation of priority queues and for sorting.

</p><p>

A binary tree in which each internal node has both a label and a priority, and which is both a binary search tree with respect to the labels and a heap with respect to the priorities, is called a <b>treap</b>.
Your task is, given a set of label-priority-pairs, with unique labels and unique priorities, to construct a treap containing this data.

</p>
______________________________________________________
GEN2||||||true||||||


<p><a href="http://www.spoj.pl/users/g201513">HL</a>, <a href="http://www.spoj.pl/users/lcosvse">HJ</a> and <a href="http://www.spoj.pl/users/john_jones">FGD</a> set problem for <a href="http://www.spoj.pl/users/zmy">ZMY</a> everyday. The title of each problem bores them very much. The title is a string which consists only lower case letters. It's length is <i>L</i>, and, of course, the title must contain their names(hl, hj, fgd) as consecutive substrings.More apparently, <i>N</i> evil consecutive substrings should not appear in the title. Any string satisfying the two conditions above is OK.</p>
<p>The task ZMY is to do today is: if they give ZMY 8 problems every week, and the title of each problem should not be repeated, how many (complete) weeks can they set problems?</p>

*******InputConstraints*******

<p>Multiple test cases.Input terminates by EOF.</p>
<p>For each test case:</p>
<p>The first line contains two space-seperated integers L(0<=L<=10<sup>9</sup>) and N(0<=N<=20). N lines follow, each contains a string (contains only lowercase letters), which is evil.You can assume the total length of the N evil strings is no more than 20.</p>

*******OutputConstraints*******

<p>For each test case output one line contains the answer modudo 1000.</p>

*******IOTestCases*******

<pre><b>Input:</b>
10 1
zmy

<b>Output:</b>
245
</pre>


______________________________________________________
DRAGON2||||||true||||||


<p>The problem description is the same as the problem <a href="http://www.spoj.pl/problems/DRAGON">DRAGON</a>. </p>

*******InputConstraints*******

<p>The first line contains 3 integers N(1<=N<=3000),M(2<=M<=N),K(1<=K<=N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i,j,k separated by spaces denoted that there is a branch between fruit i(1<=i<=N) and fruit j(1<=j<=N) and the weight of illness of this branch is k(0<=k<=100000).</p>

*******OutputConstraints*******

<p>Output one line contains a single integer denoted the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output "-1"(without quotes).</p>

*******IOTestCases*******

<pre><b>Input:</b>
8 2 4
1 2 20
1 3 4 
1 4 13
2 5 10
2 6 12
3 7 15
3 8 5

<b>Output:</b>
4
</pre>
<p>Blue Mary's Note: some new test cases were added on Dec.7, 2007.</p>


______________________________________________________
CARD||||||false||||||

<html>
<p>
Zenek is a well known (at least in Byteotia) card-sharper. He spent most of his best 

years practicing one card shuffle with his deck of n cards, which for simplicity we will 

call 1,2,...,n. Unfortunately, it turns out that knowing this one card shuffle a is not 

enough to earn a good living. To become rich and famous Zenek needs to know k shuffles 

c<sub>1</sub>,...,c<sub>k</sub>. As he doesn't have 
enough time to learn all of them, he decided to learn only one shuffle b so that
using both a and b he will be able to perform as many of c<sub>i</sub> as it is possible.
<p>
Each shuffle is described by n numbers t<sub>1</sub>,t<sub>2</sub>,...,t<sub>n</sub>. 

Such description means that after performing shuffle, card that was originally at 

position i will be at position t<sub>i</sub>.

<h2>Task</h2>
<p>
Find shuffle b maximizing number of shuffles that can be performed.

<h2>Input</h2>
<p>
First line contains n (2&#8804;n&#8804;52). Second line contains n numbers 

a<sub>1</sub>,a<sub>2</sub>,...,a<sub>n</sub> describing shuffle that Zenek already 

knows.Third line contains k (2&#8804;k&#8804;6). i-th of the next k lines contains description 

of c<sub>i</sub>.

<h2>Output</h2>
<p>
First line contains description of the shuffle b that Zenek shoud learn. i-th of the next 

k lines contains:
<ul>
<li> -1 when it is not possible to perform c<sub>i</sub> using only a and b
<li> m,r<sub>1</sub>,r<sub>2</sub>,...,r<sub>m</sub></r> (0&#8804;m&#8804;500000, 

0&#8804;r<sub>i</sub>&#8804;10<sup>6</sup>) meaning that applying a r<sub>1</sub> times, then b 

r<sub>2</sub> times, then a r<sub>3</sub> times and so on is the same as applying shuffle 

c<sub>i</sub> once.
</ul>

<h2>Examples</h2>
<b>Input</b>
<pre>
5
2 3 4 5 1
3
1 3 2 4 5
1 2 3 4 5
5 4 3 2 1
</pre>
<b>Output</b>
<pre>
2 1 3 4 5
3 4 1 1
0
9 1 1 3 1 4 1 1 1 1
</pre>
<b>Input</b>
<pre>
5
1 2 3 4 5
3
1 3 2 4 5
5 4 3 2 1
1 2 5 4 3
</pre>
<b>Output</b>
<pre>
1 3 2 4 5
2 0 1
-1
-1
</pre>
</html>


______________________________________________________
ASSIST||||||false||||||

<p>

After the 1997/1998 Southwestern European Regional Contest (which was held in Ulm) a large contest party took place.
The organization team invented a special mode of choosing those participants that were to assist with washing the dirty dishes.
The contestants would line up in a queue, one behind the other.
Each contestant got a number starting with 2 for the first one, 3 for the second one, 4 for the third one, and so on, consecutively.

</p><p>

The first contestant in the queue was asked for his number (which was 2).
He was freed from the washing up and could party on, but every second contestant behind him had to go to the kitchen (those with numbers 4, 6, 8, etc).
Then the next contestant in the remaining queue had to tell his number.
He answered 3 and was freed from assisting, but every third contestant behind him was to help (those with numbers 9, 15, 21, etc).
The next in the remaining queue had number 5 and was free, but every fifth contestant behind him was selected (those with numbers 19, 35, 49, etc).
The next had number 7 and was free, but every seventh behind him had to assist, and so on.

</p><p>

Let us call the number of a contestant who does not need to assist with washing up a lucky number.
Continuing the selection scheme, the lucky numbers are the ordered sequence 2, 3, 5, 7, 11, 13, 17, etc.
Find out the lucky numbers to be prepared for the next contest party.

</p>
______________________________________________________
BOTTOM||||||false||||||

<p>

We will use the following (standard) definitions from graph theory.
Let <code>V</code> be a nonempty and finite set, its elements being called vertices (or nodes).
Let <code>E</code> be a subset of the Cartesian product <code>V?V</code>, its elements being called edges.
Then <code>G=(V,E)</code> is called a directed graph.

</p><p>

Let <code>n</code> be a positive integer, and let <code>p=(e<sub>1</sub>,...,e<sub>n</sub>)</code> be a sequence of length <code>n</code> of edges <code>e<sub>i</sub>&#8712; E</code> such that <code>e<sub>i</sub>=(v<sub>i</sub>,v<sub>i+1</sub>)</code> for a sequence of vertices <code>(v<sub>1</sub>,...,v<sub>n+1</sub>)</code>.
Then <code>p</code> is called a path from vertex <code>v<sub>1</sub></code> to vertex <code>v<sub>n+1</sub></code> in <code>G</code> and we say that <code>v<sub>n+1</sub></code> is reachable from <code>v<sub>1</sub></code>, writing <code>(v<sub>1</sub>&#8594;v<sub>n+1</sub>)</code>.


</p><p>

Here are some new definitions.
A node <code>v</code> in a graph <code>G=(V,E)</code> is called a sink, if for every node <code>w</code> in <code>G</code> that is reachable from <code>v</code>, <code>v</code> is also reachable from <code>w</code>.
The bottom of a graph is the subset of all nodes that are sinks, i.e., <code>bottom(G)={v&#8712;V|&#8704;w&#8712;V:(v&#8594;w)&#8658;(w&#8594;v)}</code>.
You have to calculate the bottom of certain graphs.


</p>
______________________________________________________
CONTEST||||||false||||||

<p>

A technique used in early programming contest strategies involved partitioning the available intellectual capacity of a team into a number of members with each member having a fixed amount of intelligence, different members potentially having different amounts.
The sum of the brightness of all members equals the total intellectual capacity of the team.

</p><p>

Given a set of problems, it was the task of the team to assign the problems to different team members, so that they could be solved concurrently.
This was made difficult due to the fact that the solution time of a problem might depend on the amount of intelligence available to it.
Every problem has a minimum intelligence requirement, but if assigned to a brighter member its solution time might increase or decrease.

</p><p>

In this task, you have to determine optimal assignments of problems to team members.
Your program is given the intellectual capacities of the team members available for the solution of problems, and for each problem a description of how its solution time depends on the amount of intelligence available to it.
Your program has to find the solution schedule of the problems that minimizes the average solution time for the problems.
A solution schedule is an assignment of problems to team members and times, such that no two problems use the same member at the same time, and no problem is assigned to a team member with less brightness than its minimum requirement.
The solution time of the problem is the difference between the time when the problem was submitted to be solved (which is the start of the contest at time zero for all problems in this task), and the time that the problem is solved.

</p>
______________________________________________________
DRINK||||||false||||||

<p>

A good drink is always served on ice.
That said, the amount of ice is what makes the difference.
If it is too much, the drink will be well cooled, however, this is a bit of fraud as there could be less ice (and more Vodka for example).
On the other hand, if there is too little ice the drink is warm which is unacceptable.
You are to help the bartender, of course neither with mixing nor drinking, but with calculating the expected outcome of such mixtures.

</p><p>

To make things easier, we assume that pure water is mixed with ice in a closed system, i.e., there is no problem with the outside temperature or the warming of the bottle, etc.
Therefore, after a some time has passed, the system may be regarded as balanced (there is no further change in temperature and no more melting or freezing).
Your job is to calculate the final temperature of this balanced system and the amount of ice and water in this equilibrium state.

</p><p>

As you know from physics, it takes 4.19 Joule to heat one gram of water one Kelvin, whereas it takes 2.09 Joule if it is ice.
We define the capacities <code>c<sub>w</sub> = 4.19 J/(g*K)</code> and <code>c<sub>i</sub> = 2.09 J/(g*K)</code>.
Melting one gram of ice takes 335 Joule, where the temperature remains constant at zero.
We define the constant <code>e<sub>m</sub> = 335 J/g</code>.
The total thermal energy of the ice and the water before the experiment is equal to the thermal energy of the final mixture.


</p><p>

The figure below shows the energy of one gram of ice, ice-water-mixture, or water, where the temperature is measured relative to -30 degrees Celsius.
The jump at 0 degrees represents the melting of ice to water.
The amount of energy gained is proportional to the amount of ice already melted.

</p>
______________________________________________________
EDGE||||||false||||||

<p>

For products that are wrapped in small packings it is necessary that the sheet of paper containing the directions for use is folded until its size becomes small enough.
We assume that a sheet of paper is rectangular and only folded along lines parallel to its initially shorter edge.
The act of folding along such a line, however, can be performed in two directions: either the surface on the top of the sheet is brought together, or the surface on its bottom.
In both cases the two parts of the rectangle that are separated by the folding line are laid together neatly and we ignore any differences in thickness of the resulting folded sheet.

</p><p>

After several such folding steps have been performed we may unfold the sheet again and take a look at its longer edge holding the sheet so that it appears as a one-dimensional curve, actually a concatenation of line segments.
If we move along this curve in a fixed direction we can classify every place where the sheet was folded as either <code>type A</code> meaning a clockwise turn or <code>type V</code> meaning a counter-clockwise turn.
Given such a sequence of classifications, produce a drawing of the longer edge of the sheet assuming 90 degree turns at equidistant places.


</p>
______________________________________________________
FOLD||||||false||||||

<p>

Read the statement of problem E: Edge to understand how to fold a sheet of paper and how to interpret the input.
We define a "stripe" to be a maximally large part of the sheet that has no folding line going through.
Since the turns occur at equidistant places, all stripes are congruent.

</p><p>

In this problem you are given the description of the result of performing several folding steps as in problem E: Edge, i.e., in the unfolded state.
Additionally, you know that the length of the sheet in its folded state is exactly the length of 1 stripe (again, we ignore thickness).

</p><p>

Find the minimum number of folding steps necessary to generate the described sheet from an initially flat sheet of paper.
Note that performing a folding step may create more than one turn in the result because parts of the sheet already overlay due to previous folding steps.
When a step is carried out, however, all overlaying parts of the sheet are affected, i.e., it is not allowed to fold, say, only the top three layers.

</p><p>

Finally, note that every result can be obtained by iterating through the turns in a fixed direction and performing a folding step at each turn, thereby accumulating a 1 stripe long stack of all stripes.
If <code>n</code> is the number of turns in the input description, this procedure in fact requires <code>n</code> folding steps, which is not necessarily minimal as can be observed in the sample output.


</p>
______________________________________________________
GENETIC||||||false||||||

<p>

The connections between mathematics and biology are complicated.
Most of the time they do not run along nice-looking links that merrily join at first glance, but they are abstract and not always easily established.

</p><p>

Lake Vostok - about 14000 square kilometers large, up to 650 meters deep, and covered by 3743 meters of ice - was recently discovered on the Antarctic continent.
The lake remained under conditions of high pressure and no sunlight for several millions of years.
It is believed that ordinary life has evolved to a more efficient form using a genetic code composed of only three bases (the current state of ignorance proclaims the four bases adenine, cytosine, guanine, and thymine).
Until reasonable names are found, the three bases will be abbreviated as <code>N</code>, <code>O</code>, and <code>P</code>.


</p><p>

Moreover, the genome is single-stranded and directed, i.e., we may see it as a sequence over the alphabet <code>{N,O,P}</code>.
Unless risking instability, it is necessary that the genome is a Thue-sequence, due to the Norwegian mathematician A. Thue (1863-1922).
Define a subsegment of a sequence to be a connected subsequence, and call two subsegments adjacent if one follows immediately after the other in the sequence.
A Thue-sequence is a sequence where no adjacent subsegments are equal.
For example, <code>NOPNO</code> is and <code>NOPNPNO</code> is not a Thue-sequence, so that the first may be a genome whereas the second may not.

</p><p>

To be able to simulate experiments with the new genomes, you are asked to generate genomes of certain lengths.

</p>
______________________________________________________
HISTOGRA||||||false||||||

<p>

A histogram is a polygon composed of a sequence of rectangles aligned at a common base line.
The rectangles have equal widths but may have different heights.
For example, the figure on the left shows the histogram that consists of rectangles with the heights 2, 1, 4, 5, 1, 3, 3, measured in units where 1 is the width of the rectangles:

</p><center>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/wanderley:HISTOGRA.gif">
</center>

<p>
Usually, histograms are used to represent discrete distributions, e.g., the frequencies of characters in texts.
Note that the order of the rectangles, i.e., their heights, is important.
Calculate the area of the largest rectangle in a histogram that is aligned at the common base line, too.
The figure on the right shows the largest aligned rectangle for the depicted histogram.


______________________________________________________
ORZ||||||true||||||


<p>The Great Plain of Algorithmia plays an extremely important role in the agriculture of the Bandulu Kingdom: this is the only place where barley (Hordeum vulgare), an essential ingredient of beer, can be produced. Unfortunately, it is not possible to grow barley on the full area of the plain, as several nuclear plants have recently been built, and you cannot grow barley near a nuclear plant (since you do not want to produce giant-size, aggressive, man-eating barley-mutants). Your task is to write a program that determines the size of the area that can be used for growing barley. 
<p>The Great Plain of Algorithmia is an n * m km<sup>2</sup> rectangle, the coordinates of the four corners being (0, 0),(0, m),(n, 0) and (n, m). There are two types of nuclear plants: small and large. You are not allowed to grow barley within 0.58km of a small nuclear plant or within 1.31km of a large nuclear plant. </p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each block begins with a line containing four integers: 1 <= n, m <= 10000 describe the size of the plain, ks <= 100 is the number of small nuclear plants, and kl <= 100 is the number of large nuclear plants. The next ks lines describe the coordinates of the small nuclear plants, each line contains two integers 0 <= x <= n and 0 <= y <= m . The next kl lines describe the large nuclear plants in a similar fashion. 
<p>The input is terminated by a block with n = m = ks = kl = 0 .</p>

*******OutputConstraints*******

<p>For each test case, you have to output a single line containing the area that can be used for growing barley. This number should be a real value with two digits of precision. To avoid rounding problems, we accept solutions with a maximum of 0.01(positive or negative) error.</p>

*******IOTestCases*******

<pre><b>Input:</b>
10 10 2 2
2 2
4 4
5 6
1 8
10 10 1 0
5 5
0 0 0 0

<b>Output:</b>
87.46
98.94
</pre>

<b>Time limit has been changed from 2 seconds to 5 seconds.</b>


______________________________________________________
LCS||||||true||||||


<p>A string is finite sequence of   characters over a non-empty finite set &#931;.</p>
<p>In this problem, &#931; is the set of  lowercase letters.</p>
<p>Substring, also called factor, is a consecutive  sequence of   characters occurrences at least once in a string.</p>
<p>Now your task is  simple, for two given strings, find the length of the longest common substring  of them.</p>
<p>Here common substring means a substring of two or more  strings.</p>

*******InputConstraints*******

<p>The input contains exactly two lines, each line consists of no more than   250000 lowercase letters, representing a string.</p>

*******OutputConstraints*******

<p>The length of the longest common substring. If such string doesn't exist,  print "0" instead.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
alsdfkjfjkdsal
fdjskalajfkdsla

<strong>Output:</strong>
3
</pre>
<p><strong>Notice: new testcases added</strong></p>


______________________________________________________
LCS2||||||true||||||


<p>A string is finite sequence of          characters over a non-empty finite set &#931;.</p>
<p>In this problem, &#931; is the set of         lowercase letters.</p>
<p>Substring, also called factor, is a consecutive         sequence of          characters occurrences at least once in a string.</p>
<p>Now your task is a bit        harder, for some given strings, find the length of the longest common substring         of them.</p>
<p>Here common substring means a substring of two or more         strings.</p>

*******InputConstraints*******

<p>The input contains at most 10 lines, each line consists of no more than 100000 lowercase letters, representing a        string.</p>

*******OutputConstraints*******

<p>The length of the longest common substring. If such string doesn't exist,  print "0" instead.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
alsdfkjfjkdsal
fdjskalajfkdsla
aaaajfaaaa

<strong>Output:</strong>
2
</pre>
<p><strong>Notice: new testcases added</strong></p>


______________________________________________________
WA||||||true||||||


<p>These ten problems come from Chinese National Olympiad in Mathematics - Province Contest. </p>
<p><b>Problem 1</b> Polynomial P(x)=x<sup>5</sup>+a<sub>1</sub>x<sup>4</sup>+a<sub>2</sub>x<sup>3</sup>+a<sub>3</sub>x<sup>2</sup>+a<sub>4</sub>x+a<sub>5</sub>, and we know when k=1, 2, 3, 4, P(k)=2007*k. Calculate P(10)-P(-5). </p>
<p><b>Problem 2</b> The sum of 100 positive integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>100</sub> is 2007. Calculate the maximum possible value of <img src="http://www.spoj.pl/content/john_jones:wa1.jpg">a<sub>i</sub>*a<sub>j</sub>*a<sub>k</sub>. </p>
<p><b>Problem 3</b> Calculate 100101102103104......498499500 modudo 126. </p>
<p><b>Problem 4</b> We define the sum of the first n numbers of geometric progression {a<sub>n</sub>} S<sub>n</sub>. Now we know S<sub>7</sub>=7, S<sub>14</sub>=2014. Calculate S<sub>7</sub>*(S<sub>21</sub>-S<sub>14</sub>). </p>
<p><b>Problem 5</b> Calculate the sum of this kind of positive integers n(n>=4): n satisfies that n! can be written as the product of n-3 consecutive positive integers.</p>
<p><b>Problem 6</b> Two vertexes of a square are on the beeline y=2x-17, and the other two are on the parabola y=x<sup>2</sup>. Calculate the sum of two different possible values of the area of this square. </p>
<p><b>Problem 7</b> A, B, C, D are four certain points in the space and they are not on the same plane. Calculate the number of different parallelepipeds, which satisfies that 4 vertexes of the parallelepiped are A, B, C and D. </p>
<p><b>Problem 8</b> Polynomial x<sup>2</sup>-x-1 exactly divides Polynomial a<sub>1</sub>x<sup>17</sup>+a<sub>2</sub>x<sup>16</sup>+1. Calculate a<sub>1</sub>*a<sub>2</sub>. </p>
<p><b>Problem 9</b> Suppose x is an acute angle, calculate the minimum possible value of (<i>sin</i> x +<i>cos</i> x)/(<i>sin</i> x +<i>tan</i> x) + (<i>tan</i> x +<i>cot</i> x)/(<i>cos</i> x +<i>tan</i> x) + (<i>sin</i> x +<i>cos</i> x)/(<i>cos</i> x +<i>cot</i> x) + (<i>tan</i> x +<i>cot</i> x)/(<i>sin</i> x +<i>cot</i> x). </p>
<p><b>Problem 10</b> Suppose x<sup>4</sup>+y<sup>4</sup>+z<sup>4</sup>=m/n, x, y, z  are all real numbers and satisfy x*y+y*z+z*x=1 and 5*(x+1/x)=12*(y+1/y)=13*(z+1/z), and m, n are positive integers and their greatest common divisor is 1. Calculate m+n. </p>

*******InputConstraints*******

<p>There is no input.</p>

*******OutputConstraints*******

<p>Ten lines, each contains a single integer denoted the answer to the correspoding problem.</p>

*******IOTestCases*******

<p>There is no example.</p>

______________________________________________________
FTOUR2||||||true||||||


<p>After the success of 2nd anniversary (take a look at problem <b>FTOUR</b> for more details), this 3rd year, Travel Agent SPOJ goes on with another discount tour.</p>

<p> The tour will be held on <i>ICPC</i> island, a miraculous one on the Pacific Ocean. We list <b>N</b> places (indexed from 1 to <b>N</b>) where the visitors can have a trip. Each road connecting them has an <i>interest value</i>, and this value can be <i>negative</i> (if there is nothing interesting to view there). Simply, these <b>N</b> places along with the roads connecting them form a <i>tree structure</i>. We will choose <i>two places</i> as the departure and destination of the tour.</p>

<p> Since September is the festival season of local inhabitants, some places are extremely crowded (we call them <i>crowded places</i>). Therefore, the organizer of the excursion hopes the tour will visit <i>at most <b>K</b> crowded places</i> (too tiring to visit many of them) and of course, the <i>total number of interesting value</i> should be maximum.</p>

<p>Briefly, you are given a map of <b>N</b> places, an integer <b>K</b>, and <b>M</b> id numbers of <i>crowded place</i>. Please help us to find the optimal tour. Note that we can visit each place only <i>once</i> (or our customers easily feel bored), also the departure and destination places <i>don't need to be different</i>.</p>


*******InputConstraints*******

<p>There is exactly one case. First one line, containing 3 integers <b>N K M</b>, with 1 <= <b>N</b> <= 200000, 0 <= <b>K</b> <= <b>M</b>, 0 <= <b>M</b> <= <b>N</b>.
<p>Next <b>M</b> lines, each line includes an id number of a <i>crowded place</i>.
<p>The last (<b>N</b> - 1) lines describe (<b>N</b> - 1) two-way roads connected <b>N</b> places, form <b>a b i</b>, with <b>a, b</b> is the id of 2 places, and <b>i</b> is its <i>interest value</i> (-10000 <= <b>i</b> <= 10000).


*******OutputConstraints*******

<p>Only one number, the maximum total interest value we can obtain.


*******IOTestCases*******


<pre>
<b>Input:</b>
8 2 3
3
5
7
1 3 1
2 3 10
3 4 -2
4 5 -1
5 7 6
5 6 5
4 8 3


<b>Output:</b>
12
</pre>


______________________________________________________
SUDOKU2||||||true||||||


<p>Oh no! Bill just realized that the sudoku puzzle he had spent the last
ten minutes trying to solve essentially was last week's puzzle, only
rotated counterclockwise. How cheap! Couldn't the magazine afford to
make a new one every week? Of course, he had no way of knowing about
this before he started to solve it, as the holes to fill with digits
were other than last week.  Nevertheless, realizing that this week's
puzzle was a simple derivative of last week's certainly took the fun
out of solving the rest of it.
</p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:sudoku2_1.png">
<p>
The sudoku board consists of 9?9 cells. These can be grouped
into 3?3 <em>regions</em> of 3?3 cells each. Some of the
cells are filled with a digit 1 through 9 while the rest of them are
left empty.  The aim of the game is to fill each empty cell with a
digit 1...9 so that every row, every column and every region
contains each of the numbers 1...9 exactly once. A proper sudoku
puzzle always has exactly one solution.

<p>
Help Bill avoid unpleasant surprises by creating a program that checks
whether an unsolved sudoku puzzle is in fact derived from an earlier
puzzle by simple operations.
</p>
<p>

The allowed operations are:
<ul>
<li> Rotating the entire puzzle clockwise or counterclockwise.
<li> Swapping two columns within a 3?9 column segment.
<li> Swapping two rows within a 9?3 row segment.
<li> Swapping entire row or column segments.  
<li> Applying a permutation <em>f</em> of the digits 1...9 to every
cell (i.e. replace <em>x</em> by <em>f(x)</em> in every cell).

</ul>
</p>
<p>
An operation is considered being performed on the sudoku solution
(rather than on the unsolved puzzle) and always guarantees that if the
board before the transformation was a solution to a sudoku puzzle, it
still is afterwards.
</p>


*******InputConstraints*******

<p>
The input starts with the number of test cases 0 &#8804; <em>N</em> &#8804;
50 on a single line.
</p>
<p>
Then for every test case follow nine lines describing last week's
puzzle solution, from top to bottom.  Each line corresponds to a row
in the puzzle and consists of nine digits (1...9), describing
the contents of the cell from left to right.
</p>
<p>
Last week's solution is followed by nine lines describing this week's
unsolved puzzle. Here, also, every line corresponds to a puzzle row
and every digit (0...9) describes the contents of a cell. 0
indicates that the cell is empty. The rows are presented ordered from
top to bottom, and within each row, the cells are ordered from left to
right.
</p>

<p>
After every test case except the last one follows a blank line. Every
unsolved puzzle is guaranteed to be uniquely solvable and last week's
solution is always a proper sudoku solution.
/p>


*******OutputConstraints*******

<p>For every test case, output <tt>Yes</tt> if the sudoku puzzle can be
derived from the given solved puzzle using the allowed operations, or
<tt>No</tt> if this is not possible.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
963174258
178325649
254689731
821437596
496852317
735961824
589713462
317246985
642598173
060104050
200000001
008305600
800407006
006000300
700901004
500000002
040508070
007206900

534678912
672195348
198342567
859761423
426853791
713924856
961537284
287419635
345286179
010900605
025060070
870000902
702050043
000204000
490010508
107000056
040080210
208001090

<b>Output:</b>
Yes
No
</pre>



______________________________________________________
SETSTACK||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:setstack1.jpg">
</p>
<p>
Background from Wikipedia:
<q>Set theory is a branch of mathematics created principally by the
German mathematician Georg Cantor at the end of the 19th
century. Initially controversial, set theory has come to play the role
of a foundational theory in modern mathematics, in the sense of a
theory invoked to justify assumptions made in mathematics concerning
the existence of mathematical objects (such as numbers or functions)
and their properties. Formal versions of set theory also have a
foundational role to play as specifying a theoretical ideal of
mathematical rigor in proofs.</q>
</p>
<p>
Given this importance of sets, being the basis of mathematics, a set
of eccentric theorist set off to construct a supercomputer operating on
sets instead of numbers. The initial SetStack Alpha is under
construction, and they need you to simulate it in order to verify the
operation of the prototype.
</p>
<p>
The computer operates on a single stack of sets, which is initially
empty. After each operation, the cardinality of the topmost set on the
stack is output. The cardinality of a set <em>S</em> is denoted
|<em>S</em>| and is the number of elements in <em>S</em>.  The
instruction set of the SetStack Alpha is <tt>PUSH</tt>, <tt>DUP</tt>,

<tt>UNION</tt>, <tt>INTERSECT</tt>, and <tt>ADD</tt>}.

<ul>
<li> <tt>PUSH</tt> will push the empty set {} on the stack.
<li> <tt>DUP</tt> will duplicate the topmost set (pop the stack, and then push that set on the stack twice).
<li> <tt>UNION</tt> will pop the stack twice and then push the union of the two sets on the stack.

<li> <tt>INTERSECT</tt> will pop the stack twice and then push the intersection of the two sets on the stack.
<li> <tt>ADD</tt> will pop the stack twice, add the first set to the second one, and then push the resulting set on the stack.
</ul>
</p>
<p>
For illustration purposes, assume that the topmost element of the stack is 
<p>
<em>A</em> = { {}, {{}} },
</p>
<p>

and that the next one is
</p>
<p>
<em>B</em> = { {}, {{{}}} }.
</p>
<p>
For these sets, we have |<em>A</em>| = 2 and |<em>B</em>| = 2. Then:
<ul>
<li> <tt>UNION</tt> would result in the set { {}, {{}}, {{{}}} }.  The
output is 3.
<li> <tt>INTERSECT</tt> would result in the set { {} }.  The output is 1.

<li> <tt>ADD</tt> would result in the set { {}, {{{}}}, {{},{{}}} }.
The output is 3.
</ul>
</p>

*******InputConstraints*******

<p>
An integer 0 &#8804; <em>T</em> &#8804; 5 on the first line gives the
cardinality of the set of test cases. The first line of each test case
contains the number of operations 0 &#8804; <em>N</em> &#8804; 2000. Then
follow <em>N</em> lines each containing one of the five commands. It
is guaranteed that the SetStack computer can execute all the commands
in the sequence without ever popping an empty stack.
</p>


*******OutputConstraints*******

<p>
For each operation specified in the input, there will be one line of
output consisting of a single integer. This integer is the cardinality
of the topmost element of the stack after the corresponding command
has executed. After each test case there will be a line with
<tt>***</tt> (three asterisks).
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
9
PUSH
DUP
ADD
PUSH
ADD
DUP
ADD
DUP
UNION
5
PUSH
PUSH
ADD
PUSH
INTERSECT

<b>Output:</b>
0
0
1
0
1
1
2
2
2
***
0
0
1
0
0
***
</pre>



______________________________________________________
PIE||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:pie1.jpg">
</p>
<p>
My birthday is coming up and traditionally I'm serving pie. Not just
one pie, no, I have a number <em>N</em> of them, of various tastes and
of various sizes. <em>F</em> of my friends are coming to my party and
each of them gets a piece of pie. This should be one piece of one pie,
not several small pieces since that looks messy. This piece can be one
whole pie though.
</p>
<p>
My friends are very annoying and if one of them gets a bigger piece
than the others, they start complaining. Therefore all of them should
get equally sized (but not necessarily equally shaped) pieces, even if
this leads to some pie getting spoiled (which is better than spoiling
the party).  Of course, I want a piece of pie for myself too, and that
piece should also be of the same size.
</p>
<p>
What is the largest possible piece size all of us can get?  All the
pies are cylindrical in shape and they all have the same height 1,
but the radii of the pies can be different.
</p>

*******InputConstraints*******

<p>
One line with a positive integer: the number of test cases. Then
for each test case:
<ul>
<li>
One line with two integers <em>N</em> and <em>F</em> with 1 &#8804;
<em>N, F</em> &#8804; 10000: the number of pies and the number of
friends.

<li>
One line with <em>N</em> integers <em>r<sub>i</sub></em> with 1 &#8804;
<em>r<sub>i</sub></em> &#8804; 10000: the radii of the pies.
</ul>
</p>

*******OutputConstraints*******

<p>
For each test case, output one line with the largest possible volume
<em>V</em> such that me and my friends can all get a pie piece of size
<em>V</em>.  The answer should be given as a floating point number
with an absolute error of at most 10<sup>-3</sup>.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
4 3 3
1 24
5
10 5
1 4 2 3 4 5 6 5 4 2

<b>Output:</b>
25.1327
3.1416
50.2655
</pre>



______________________________________________________
TICKET||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:ticket1.png">
</p>
<p>
Ticket to Ride is a board game for up to 5 players.  The goal of the
game is to set up train lines (and to thwart the opponents' attempts
at setting up their train lines).  At the beginning of play, each
player is assigned four train lines.  A player may choose to discard
as many of these four assignments as she likes.  Each assignment has a
score, corresponding to its difficulty (so, typically, a train line
between e.g. Stockholm and Tokyo would be worth more than a train
line between e.g. Stockholm and Utrecht).  At the end of the game,
each player gets points for the assignments that they have
successfully completed, and penalty points for the assignments that
they have failed to complete.

<p>
An assignment consists of a pair of cities that are to be connected by
a series of shorter railway routes.  A route can be claimed (for a
certain cost associated with the route), but things are complicated by
the fact that there is only a limited number of routes, and once a player
claims a route, none of the other players can claim it.  A player has
successfully set up a train line between two cities if there is a path
between the two cities using only routes that have been claimed by
this player.  For simplicity, we will ignore all additional aspects of
the game (including the actual process of claiming routes and
additional ways to score points).
</p>
<p>
For instance, if your assignment is to connect Stockholm and Amsterdam
in the Figure above, you would probably want to claim the routes
between Stockholm and Copenhagen, and between Copenhagen and
Amsterdam.  But if another player manages to claim the route between
Copenhagen and Stockholm before you, your train line would have to use
some other routes, e.g. by going to Copenhagen via Oslo.
</p>
<p>
In this problem, we will consider the rather bold strategy of trying
to complete all four assignments (typically, this will be quite
hard).  As a preliminary assessment of the difficulty of achieving
this, we would like to calculate the minimum cost of setting up all
four lines assuming that none of the other players interfere with our
plans.  Your job is to write a program to determine this minimum cost.
</p>

*******InputConstraints*******

<p>
The input consists of several (at most 20) games to be analyzed.  Each
game starts with two integers 1 &#8804; <em>n</em> &#8804; 30, 0 &#8804;

<em>m</em> &#8804; 1000, giving the number of cities and railway routes
in the map, respectively.  Then follow <em>n</em> lines, giving the
names of the <em>n</em> cities.  City names are at most 20 characters
long and consist solely of lower case letters
(<tt>'a'-'z'</tt>).
</p>
<p>
After this follow <em>m</em> lines, each containing the names of two
different cities and an integer 1 &#8804; <em>c</em> &#8804; 10000,
indicating that there is a railway route with cost <em>c</em> between
the two cities.  Note that there may be several railway routes between
the same pair of cities.  You may assume that it is always possible to
set up a train line from any city to any other city.
</p>

<p>
Finally, there will be four lines, each containing the names of two
cities, giving the four train line assignments.
</p>
<p>
The input is terminated by a case where <em>n</em> = <em>m</em> = 0.
This case should not be processed.
</p>

*******OutputConstraints*******

<p>
For each game, output a single line containing a single integer, the
minimum possible cost to set up all four train lines.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
10 15
stockholm
amsterdam
london
berlin
copenhagen
oslo
helsinki
dublin
reykjavik
brussels
oslo stockholm 415
stockholm helsinki 396
oslo london 1153
oslo copenhagen 485
stockholm copenhagen 522
copenhagen berlin 354
copenhagen amsterdam 622
helsinki berlin 1107
london amsterdam 356
berlin amsterdam 575
london dublin 463
reykjavik dublin 1498
reykjavik oslo 1748
london brussels 318
brussels amsterdam 173
stockholm amsterdam
oslo london
reykjavik dublin
brussels helsinki
2 1
first
second
first second 10
first first
first first
second first
first first
0 0

<b>Output:</b>
3907
10
</pre>



______________________________________________________
BOOKCASE||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:bookcase1.jpg">
</p>
<p>
No wonder the old bookcase caved under the massive piles of books Tom
had stacked on it. He had better build a new one, this time large
enough to hold all of his books. Tom finds it practical to have the
books close at hand when he works at his desk. Therefore, he is
imagining a compact solution with the bookcase standing on the back
of the desk.  Obviously, this would put some restrictions on the size
of the bookcase, it should preferably be as small as possible.  In
addition, Tom would like the bookcase to have exactly three shelves for
aesthetical reasons.
</p>
<p>
Wondering how small his bookcase could be, he models the problem as
follows. He measures the height <em>h<sub>i</sub></em> and thickness
<em>t<sub>i</sub></em> of each book <em>i</em> and he seeks a
partition of the books in three non-empty sets <em>S<sub>1</sub></em>,

<em>S<sub>2</sub></em>, <em>S<sub>3</sub></em> such that
</p>
<p>
<img class="figure" src="http://www.spoj.pl/content/overwise:bookcase2.png">
</p>
<p>
is minimized, i.e. the area of the bookcase as seen when standing in
front of it (the depth needed is obviously the largest width of all
his books, regardless of the partition).  Note that this formula does
not give the exact area of the bookcase, since the actual shelves
cause a small additional height, and the sides cause a small
additional width.  For simplicity, we will ignore this small
discrepancy.
</p>
<p>
Thinking a moment on the problem, Tom realizes he will need a computer
program to do the job.
</p>

*******InputConstraints*******

<p>
The input begins with a positive number on a line of its own telling
the number of test cases (at most 20).  For each test case there is
one line containing a single positive integer <em>N</em>, 3 &#8804;
<em>N</em> &#8804; 70 giving the number of books. Then <em>N</em> lines
follow each containing two positive integers <em>h<sub>i</sub></em>,
<em>t<sub>i</sub></em>, satisfying 150 &#8804; <em>h<sub>i</sub></em>

&#8804; 300 and 5 &#8804; <em>t<sub>i</sub></em> &#8804; 30, the height and
thickness of book <em>i</em> respectively, in millimeters.
</p>

*******OutputConstraints*******

<p>
For each test case, output one line containing the minimum area
(height times width) of a three-shelf bookcase capable of holding all
the books, expressed in square millimeters.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
220 29
195 20
200 9
180 30
6
256 20
255 30
254 15
253 20
252 15
251 9

<b>Output:</b>
18000
29796
</pre>



______________________________________________________
PQUEUE||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:pqueue1.jpg">
</p>
<p>
The only printer in the computer science students' union is
experiencing an extremely heavy workload. Sometimes there are
a hundred jobs in the printer queue and you may have to wait
for hours to get a single page of output.
</p>
<p>
Because some jobs are more important than others, the Hacker General
has invented and implemented a simple priority system for the print
job queue.  Now, each job is assigned a priority between 1 and 9 (with 9 being
the highest priority, and 1 being the lowest), and the printer
operates as follows.

<ul>
<li> The first job <em>J</em> in queue is taken from the queue.
<li> If there is some job in the queue with a higher priority than job <em>J</em>, then move <em>J</em> to the end of the queue without printing it.

<li> Otherwise, print job <em>J</em> (and do not put it back in the queue).
</ul>
</p>
<p>
In this way, all those important muffin recipes that the Hacker
General is printing get printed very quickly.  Of course, those
annoying term papers that others are printing may have to wait for
quite some time to get printed, but that's life.
</p>
<p>
Your problem with the new policy is that it has become quite tricky to
determine when your print job will actually be completed.  You decide
to write a program to figure this out.  The program will be given the
current queue (as a list of priorities) as well as the position of
your job in the queue, and must then calculate how long it will take
until your job is printed, assuming that no additional jobs will be
added to the queue.  To simplify matters, we assume that printing a
job always takes exactly one minute, and that adding and removing jobs
from the queue is instantaneous.
</p>

*******InputConstraints*******

<p>
One line with a positive integer: the number of test cases (at most 100). Then
for each test case:
<ul>
<li>
One line with two integers <em>n</em> and <em>m</em>, where <em>n</em>

is the number of jobs in the queue (1 &#8804; <em>n</em> &#8804; 100) and
<em>m</em> is the position of your job (0 &#8804; m &#8804; n-1).  The
first position in the queue is number 0, the second is number 1, and
so on.
<li>
One line with <em>n</em> integers in the range 1 to 9, giving the priorities
of the jobs in the queue.  The first integer gives the priority of the
first job, the second integer the priority of the second job, and so
on.

</ul>
</p>

*******OutputConstraints*******

<p>For each test case, print one line with a single integer; the number
of minutes until your job is completely printed, assuming that no
additional print jobs will arrive.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 0
5
4 2
1 2 3 4
6 0
1 1 9 1 1 1

<b>Output:</b>
1
2
5
</pre>



______________________________________________________
PPATH||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:ppath1.jpg">
</p>
<p>
The ministers of the cabinet were quite upset by the 
message from the Chief of Security stating that they
would all have to change the four-digit room numbers 
on their offices. <br>
&#8212; It is a matter of security to change such things
    every now and then, to keep the enemy in the dark.<br>
&#8212; But look, I have chosen my number 1033 for good
    reasons. I am the Prime minister, you know!<br>
&#8212; I know, so therefore your new number 8179 is also
    a prime. You will just have to paste four new
    digits over the four old ones on your office door.<br>
&#8212; No, it's not that simple. Suppose that I change the
    first digit to an 8, then the number will read 8033
    which is not a prime!<br>

&#8212; I see, being the prime minister you cannot stand
    having a non-prime number on your door even for a
    few seconds.<br>
&#8212; Correct! So I must invent a scheme for going from
    1033 to 8179 by a path of prime numbers where
    only one digit is changed from one prime to the
    next prime.

<p>
Now, the minister of finance, who had been eavesdropping,
intervened.<br>
&#8212; No unnecessary expenditure, please! I happen to
    know that the price of a digit is one pound.<br>
&#8212; Hmm, in that case I need a computer program to 
    minimize the cost. You don't know some very cheap
    software gurus, do you?<br>
&#8212; In fact, I do. You see, there is this programming
    contest going on...
</p>
<p>

Help the prime minister to find the cheapest prime path
between any two given four-digit primes! The first digit
must be nonzero, of course. Here is a solution in the 
case above.
<pre>
    1033
    1733     
    3733     
    3739     
    3779
    8779
    8179     
</pre>
The cost of this solution is 6 pounds.  Note that the digit 1
which got pasted over in step 2 can not be reused in the last step
&#8211; a new 1 must be purchased.
</P>

*******InputConstraints*******

<p>
One line with a positive number: the number of test cases (at most
100). Then for each test case, one line with two numbers separated by
a blank.  Both numbers are four-digit primes (without leading zeros).
</p>

*******OutputConstraints*******

<p>One line for each case, either with a number stating the minimal cost
or containing the word <tt>Impossible</tt>. 
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
1033 8179
1373 8017
1033 1033

<b>Output:</b>
6
7
0
</pre>



______________________________________________________
LINELAND||||||true||||||


<p>
Lineland is a strange country. As the name suggests, it's shape (as
seen from above) is just a straight line, rather than some
two-dimensional shape.  The landscape along this line is very
mountainous, something which occasionally leads to some problems. One
such problem now occurs: in this modern era the king wants to build an
airport to stimulate the country's economy. Unfortunately, it's
impossible for airplanes to land on steep airstrips, so a horizontal
piece of land is needed. To accommodate for the larger airplanes, this
strip needs to have length at least <em>L</em>.
</p>
<p>
Over the years, the inhabitants of Lineland have become very
proficient in flattening pieces of land. Given a piece a land, they
can remove rock quickly. They don't want to add rock for that may lead
to an unstable landing strip. To minimize the amount of effort,
however, they want to remove the least amount of rock necessary to
reach their goal: a flat piece of land of length <em>L</em>.  What is
this minimum amount?  Because of the low-dimensional nature of
Lineland, the amount of rock that needs to be removed is measured as
the total area of land above the place where the landing strip is
placed, rather than the volume (so in the Figure below, the amount of
land removed is given by the lightly shaded area).
</p>
<p>
<img class="figure" src="/content/overwise:lineland1.png">
</p>

*******InputConstraints*******

<p>
One line with a positive number: the number of test cases (at most 25). Then
for each test case:

<ul>

<li>
One line with an integer <em>N</em>, 2 &#8804; <em>N</em> &#8804; 500, the
number of points, and an integer <em>L</em>, 1 &#8804; <em>L</em> &#8804;

10000, the necessary length to flatten.

<li>
<em>N</em> lines with two integers <em>x<sub>i</sub></em> and
<em>y<sub>i</sub></em> with 0 &#8804; <em>x<sub>i</sub></em>,

<em>y<sub>i</sub></em> &#8804; 10000 describing the landscape of
Lineland. The <em>x<sub>i</sub></em> are in (strictly) ascending
order. At position <em>x<sub>i</sub></em> the height of the landscape
is <em>x<sub>i</sub></em>. Between two <em>x<sub>i</sub></em> the
landscape has constant slope. (So the landscape is piecewise
linear). The difference between <em>x<sub>N</sub></em> and

<em>x<sub>1</sub></em> is greater than or equal to <em>L</em>.
</ul>
</p>

*******OutputConstraints*******

<p>
For each test case, output one line with the minimum amount of rock
which must be removed in order to build the airport.  The answer
should be given as a floating point number with an absolute error of
at most 10<sup>-3</sup>.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
4
3 5
0 2
4 2
14 0
4 3
0 2
2 0
4 0
5 3
3 10
10 2
30 2
35 7
2 777
222 333
4444 5555

<b>Output:</b>
0.9000
0.3750
0.0000
373362.4867
</pre>



______________________________________________________
LEONARDO||||||true||||||


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/overwise:leonardo1.jpg">
</p>
<p>
&#8212; I just bought Leonardo's secret notebook!<br>
Rare object collector Stan Ucker was really agitated but
his friend, special investigator Sarah Keptic was unimpressed.<br>
&#8212; How do you know it is genuine?<br>
&#8212; Oh, it must be, at that price. And it is written in the
  da Vinci code.<br>
Sarah browsed a few of the pages. It was obvious
to her that the code was a substitution cipher, where each
letter of the alphabet had been substituted by another letter.<br>

&#8212; Leonardo would have written the plain-text and left it to his
    assistant to encrypt, she said. And he must have supplied the
    substitution alphabet to be used. If we are lucky, we can find
    it on the back cover!<br>
She turned up the last page and, lo and behold, there was a single
line of all 26 letters of the alphabet:<br>
<blockquote>
                QWERTYUIOPASDFGHJKLZXCVBNM
</blockquote>
<p>
&#8212; This may be Leonardo's instructions meaning that each A in the
  plain-text was to be replaced by Q, each B with W, etcetera. Let us see...<br>
To their disappointment, they soon saw that this could not be the
substitution that was used in the book. Suddenly, Stan brightened.<br>
&#8212; Maybe Leonardo really wrote the substitution alphabet on the
last page, and by mistake his assistant coded that line as he had
coded the rest of the book. So the line we have here is the result
of applying some permutation TWICE to the ordinary alphabet!<br>

Sarah took out her laptop computer and coded fiercely for a few
minutes. Then she turned to Stan with a sympathetic expression.<br>
&#8212; No, that couldn't be it. I am afraid that you have been duped
  again, my friend. In all probability, the book is a fake.<br>
Write a program that takes a permutation of the English alphabet as
input and decides if it may be the result of performing some
permutation twice.
</p>

*******InputConstraints*******

<p>
The input begins with a positive number on a line of its own telling
the number of test cases (at most 500).  Then for each test case there
is one line containing a permutation of the 26 capital letters of the
English alphabet.
</p>

*******OutputConstraints*******

<p>
For each test case, output one line containing <tt>Yes</tt> if the
given permutation can result from applying some permutation twice on
the original alphabet string ABC...XYZ, otherwise output

<tt>No</tt>.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
QWERTYUIOPASDFGHJKLZXCVBNM
ABCDEFGHIJKLMNOPQRSTUVWXYZ

<b>Output:</b>
No
Yes
</pre>



______________________________________________________
MICEMAZE||||||true||||||


<P align="justify">
A set of laboratory mice is being trained to escape a maze. 
The maze is made up of cells, and each cell is
connected to some other cells. 
However, there are obstacles in the passage between
cells and therefore there is a time penalty to overcome the passage
Also, some passages allow mice to go one-way,
but not the other way round.

<P align="justify">
Suppose that all mice are now trained and,  when placed  in  an  arbitrary
cell in the maze, take a path that leads them to  the  exit cell in minimum
time.

<P align="justify">
We are going to conduct the following experiment: 
a mouse is placed in each cell  of
the maze and a count-down timer is started.
When the timer stops we count the number of mice out of the maze.

<font color="#0000FF"><H2>Problem</H2></font>

<P align="justify">
Write a program that, given a description of the maze and the time limit,
predicts the number of mice that will exit the maze. Assume
that there are no bottlenecks is the maze, i.e. that all cells have
room for an arbitrary number of mice.


*******InputConstraints*******


<P align="justify">
The maze cells are numbered <IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg1.gif"
 ALT="$1,2,\ldots,N$">, where <IMG
 WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg2.gif"
 ALT="$N$"> is the total number
of cells. You can assume that <IMG
 WIDTH="70" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg3.gif"
 ALT="$N\leq 100$">.

<P align="justify">
The first three input lines contain 
<IMG
 WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg2.gif"
 ALT="$N$">, the number of cells in the
maze, <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg4.gif"
 ALT="$E$">, the number of the exit cell,
and the starting value <IMG
 WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg5.gif"
 ALT="$T$"> for the count-down timer 
(in some arbitrary time unit).

<P align="justify">
The fourth line contains the number <IMG
 WIDTH="23" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg6.gif"
 ALT="$M$"> of 
connections in the maze, and is followed by <IMG
 WIDTH="23" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg6.gif"
 ALT="$M$"> lines,
each specifying a connection
with three integer numbers: two cell numbers <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg7.gif"
 ALT="$a$"> and <IMG
 WIDTH="12" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg8.gif"
 ALT="$b$">
(in the range <IMG
 WIDTH="68" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg9.gif"
 ALT="$1,\ldots,N$">) and the number of time units
it takes to travel from <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg7.gif"
 ALT="$a$"> to <IMG
 WIDTH="12" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg8.gif"
 ALT="$b$">.

<P align="justify">
Notice that each connection is one-way, i.e., 
the mice can't travel from <IMG
 WIDTH="12" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg8.gif"
 ALT="$b$"> to <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg7.gif"
 ALT="$a$">
unless there is another line specifying that passage.
Notice also that the time required
to travel in each direction might be different.


*******OutputConstraints*******


<P align="justify">
The output consists of a single line with 
the number of mice that reached the exit cell <IMG
 WIDTH="18" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg4.gif"
 ALT="$E$"> in at
most <IMG
 WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:aimg5.gif"
 ALT="$T$"> time units.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 
2 
1
8
1 2 1
1 3 1
2 1 1
2 4 1
3 1 1
3 4 1
4 2 1
4 3 1

<b>Output:</b>
3
</pre>



______________________________________________________
PFDEP||||||true||||||


<P align="justify">
Project managers, such as the UNIX utility <TT>make</TT>,
are used to maintain large software projects made up from
many components.
Users write a <I>project file</I> specifying which components 
(called <I>tasks</I>) depend
on others and the project manager can
automatically update the components in the correct order.

<font color="#0000FF"><H2>Problem</H2></font>

<P align="justify">
Write a program that reads a project file 
and outputs the order in which the tasks should be performed.


*******InputConstraints*******

<P align="justify">
For simplicity we represent each task by an integer number
from <!-- MATH
 $1, 2, \ldots, N$
 -->
<IMG
 WIDTH="84" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg1.gif"
 ALT="$1,2,\ldots,N$"> (where <IMG
 WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg2.gif"
 ALT="$N$"> is the total number of tasks).
The first line of input specifies the number <IMG
 WIDTH="20" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg2.gif"
 ALT="$N$"> of tasks
and the number <IMG
 WIDTH="23" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg6.gif"
 ALT="$M$"> of rules,
such that <!-- MATH
 $N \leq 100,\; M\leq 100$
 -->
<IMG
 WIDTH="150" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg46.gif"
 ALT="$N \leq 100,\; M\leq 100$">.

<P align="justify">
The rest of the input consists of <IMG
 WIDTH="23" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg6.gif"
 ALT="$M$"> <I>rules</I>, one in each line,
specifying dependencies using the following syntax: 
<PRE><TT>
<IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg47.gif"
 ALT="$T_0$">    <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg48.gif"
 ALT="$k$">    <IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg49.gif"
 ALT="$T_1$">    <IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg50.gif"
 ALT="$T_2$">    ...    <IMG
 WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg51.gif"
 ALT="$T_k$">
</TT></PRE>
This rule means that task number <IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg47.gif"
 ALT="$T_0$"> depends on  
<IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg48.gif"
 ALT="$k$"> tasks <!-- MATH
 $T_1, T_2, \ldots T_k$
 -->
<IMG
 WIDTH="97" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg52.gif"
 ALT="$T_1, T_2, \ldots T_k$"> (we say that task <IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg47.gif"
 ALT="$T_0$"> is the <I>target</I>
and <IMG
 WIDTH="67" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg53.gif"
 ALT="$T_1\ldots T_k$"> are <I>dependents</I>).

<P align="justify">
Note that tasks numbers are separated by single spaces
and that rules end with a newline.
Rules can appear in any order, but each task can appear as target
only once.

<P align="justify">
Your program can assume that there are no circular dependencies in the 
rules, i.e. no task depends directly or indirectly on itself.


*******OutputConstraints*******

<P align="justify">
The output should be a single line
with the permutation of the tasks <IMG
 WIDTH="55" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:himg54.gif"
 ALT="$1\ldots N$"> to be performed,
ordered by dependencies (i.e. no task should appear before others
that it depends on).

<P align="justify">
To avoid ambiguity in the output, tasks that do not depend on each 
other should be ordered by their number (lower numbers first).


*******IOTestCases*******


<pre>
<b>Input:</b>
5 4
3 2 1 5
2 2 5 3
4 1 3
5 1 1

<b>Output:</b>
1 5 3 2 4
</pre>



______________________________________________________
NOCHANGE||||||true||||||


<P align="justify">
Though it might be hard to imagine, the
inhabitants of a small country Additivia do not know of such thing
as change, which probably has to do with them
not knowing subtraction either. 
When they buy something, 
they always need to have the exact amount of addollars, their currency. 
The only other option, but not 
a really attractive one, is over-paying.

<P align="justify">
Professor Adem, one of the Additivian mathematicians 
came up with an algorithm for keeping a balanced 
portfolio. The idea is the following. 
Suppose you have more coins of value <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg55.gif"
 ALT="$v_1$"> than coins of value 
<IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg56.gif"
 ALT="$v_2$">. In this case you should try to spend at least as many 
coins of value <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg55.gif"
 ALT="$v_1$"> as those of value 
<IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg56.gif"
 ALT="$v_2$"> on any buy you make. 
Of course spending too many <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg55.gif"
 ALT="$v_1$"> coins is not a good idea either, but to make 
the algorithm simpler professor Adem decided 
to ignore the problem. The algorithm became an instant hit
and professor Adem is now designing a kind of ``electronic portfolio'' 
with built-in Adem's algorithm.
All he needs now is a software for these machines, 
that will decide whether a given amount of
addollars can be paid using a given set of coins according 
to the rules of Adem's algorithm.
Needless to say, you are his chosen programmer for the task.

<font color="#0000FF"><H2>Problem</H2></font>

<P align="justify">
Write a program that 
reads the description of a set of coins and an amount of addollars
to be paid,
and determines whether you can pay that amount
according to Professor Adem's rules.


*******InputConstraints*******

<P align="justify">
The input starts with the amount of 
addollars to be paid <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg57.gif"
 ALT="$x$">, where <!-- MATH
 $1\le x \le 100\,000$
 -->
<IMG
 WIDTH="125" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg58.gif"
 ALT="$1\le x \le 100 000$">. 
The number of different coin values <IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg48.gif"
 ALT="$k$"> follows,
where <IMG
 WIDTH="78" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg59.gif"
 ALT="$1 \le k \le 5$">. 
The values of the coins <!-- MATH
 $v_1,\ldots,v_k$
 -->
<IMG
 WIDTH="76" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg60.gif"
 ALT="$v_1,\ldots,v_k$"> follow, 
where <!-- MATH
 $1 \le v_i \le 10\,000$
 -->
<IMG
 WIDTH="120" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg61.gif"
 ALT="$1 \le v_i \le 10 000$">. 

<P align="justify">
Notice that the order among coin values is significant:
you need to spend at least as many coins of value <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg55.gif"
 ALT="$v_1$"> as coins
of value <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg56.gif"
 ALT="$v_2$">, at least as many coins of value <IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg56.gif"
 ALT="$v_2$"> as those of value 
<IMG
 WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/overwise:iimg62.gif"
 ALT="$v_3$">, and so on. You may assume 
that you have a sufficiently large number of coins of each value.


*******OutputConstraints*******

<P align="justify">
Your program should output for each test case either 
a single word ``YES'', if the given amount can 
be paid according to the rules, or a single word ``NO'' otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
13 3 9 2 1
<b>Output:</b>
NO
</pre>



______________________________________________________
MKWAVES||||||true||||||


<p>Suppose we know a signal is generated by the function x sin (<i>f<sub>1</sub>t</i>) sin (<i>f<sub>2</sub>t</i>). F1 and f2 are two unique
frequencies, each having an integral value in the range 400 to 600 Hz (Hz = cycles per second), and t
represents time. In this problem, you will be given N samples of this function at equally-spaced time
intervals corresponding to t = 1/N, t = 2/N, and so forth. From these samples, you are to determine f1 and
f2.

<p><p>
For example, suppose f1 = 400 Hz, f2 = 500 Hz, and N = 100. The first sample, at time t = 1/100 sec, is
equal to sin(400 0.01) sin(500 0.01) sin(4) sin(5) 0.156912 . Similarly, the second sample, at
time t = 2/100 sec, is equal to sin(400 0.02) sin(500 0.02) sin(8) sin(10) 0.312821.


*******InputConstraints*******

<p>There will be multiple cases to consider. Each case begins with an integer N, no larger than 1000, that
specifies the number of signal samples. The next N data items are real numbers representing the signal
samples at time 1/N sec, 2/N sec, and so forth. A single integer 0 follows the last case.<p><p>
The number of samples for each case is guaranteed to be sufficient to allow the correct result to be
obtained.


*******OutputConstraints*******

<p>For each input case, display a single line that is formatted like this:<p>
Case 1, f1 = 400, f2 = 500


*******IOTestCases*******


<pre>
<b>Input:</b>
100
0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271
1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338
1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634
1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943
0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088
-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195
-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907
-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838
-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028
-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010
0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635
0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862
1.29596 1.29489 1.28558

0

<b>Output:</b>
Case 1, f1 = 400, f2 = 500
</pre>



______________________________________________________
MKPALS||||||true||||||


<p>A <i>palindrome</i> is a sequence that is the same when read forward or backward. For example, &#8220;pop&#8221; is a
palindrome, as are &#8220;Poor Dan is in a droop&#8221; (ignoring spaces and case), and &#8220;12321&#8221;.

<p><p>
In this problem, you are to find the &#8220;cheapest&#8221; way to transform a sequence of decimal digits into a
palindrome. There are only two types of modifications you may make to the sequence, but each of these
may be repeated as many times as necessary. You may delete a digit from either end of the sequence, or
you may add a digit to either end of the sequence. Each of these operations incurs a &#8220;cost&#8221; of 1. For each
input sequence, determine the smallest cost of transforming the sequence into a palindrome, and the length
of the resulting palindrome. If two palindromes can be produced with the same cost, the length of the
longer palindrome (the one with more digits) is to be reported.

<p><p>
For example, suppose the initial sequence was &#8220;911&#8221;. This can be transformed into a palindrome by deleting
the leading &#8220;9&#8221; (yielding &#8220;11&#8221;) or by adding an additional &#8220;9&#8221; to the right end of the sequence (yielding
&#8220;9119&#8221;). Since both of these transformations have a cost of 1, and the second transformation yields a
longer palindrome, it is this one which would be reported as your result.

<p><p>
Note that the particular palindrome produced by the cheapest sequence of transformations is not
necessarily unique, but since you are not required to report the resulting palindrome, any of these will
suffice.


*******InputConstraints*******

<p>There will be multiple cases to consider. Each case has a single line of input that contains one or more
decimal digits followed by the end of line. The maximum number of digits in a sequence will be 6. The last
case is followed by an empty line (that is, only an end of line).


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;), the input sequence, the cost of the cheapest
transformation, and the length of the resulting palindrome. Your output should follow the format shown in
the examples below.


*******IOTestCases*******


<pre>
<b>Input:</b>
911
9118
11234
<-- This line is blank

<b>Output:</b>
Case 1, sequence = 911, cost = 1, length = 4
Case 2, sequence = 9118, cost = 2, length = 4
Case 3, sequence = 11234, cost = 3, length = 8
</pre>



______________________________________________________
MKMONEY||||||true||||||


<p>A trick sometimes used by parents to teach their children the value of money is to give then a penny &#8211; just
a penny! &#8211; and the promise that for each day they don&#8217;t spend it, the parent will double it. All students of
computing know that long before a month has elapsed without spending a cent, the parents will not likely be
able to make good on their promise.

<p><p>
100-percent compound daily interest on an investment is, of course, unattainable in normal financial
dealings, but we are all continually reminded of the power of compound interest, even with the relatively
low interest rates available today.

<p><p>
But exactly how much money can be made with compound interest? Assume, for example, an initial
investment of $100.00 (US or Canadian &#9786;), an annual interest rate of 6.00 percent, and that interest is
compounded monthly. That is, the interest earned during the preceding month is added to the principal at
the end of the month. (For our purposes, we&#8217;ll assume a month is exactly 1/12th of a year.)

<p><p>
At the end of the first month, the money will have earned 0.5 percent interest (1/12th of 6.00 percent), or
$0.50. This is added to the $100.00 invested, so that during the next month, interest is paid on $100.50.
During the next month another 0.5 percent interest is earned, which is exactly $0.5025. We will assume
that the bank, being conservative, will not pay any interest less than $0.01, so our investment is credited
with an additional $0.50 at the end of the second month, for a whopping total of $101.00. Continuing in the
same manner, at the end of 12 months our investment will total $106.12, $0.12 more than simple 6.00
percent interest for a year with no compounding.

<p><p>
Given an amount P to be invested for a year with I percent interest, compounded C times during the year at
equal intervals, what is total return on the investment?


*******InputConstraints*******

<p>There will be multiple cases to consider. The input for each case is a single line containing the initial
investment amount, P, given in dollars and cents (but no fractional cents, and no larger than $100,000.00),
the annual interest rate (I) given as a real number with two fractional digits representing a percentage,
greater than zero but less than 100, and the number of compounding intervals per year (C), an integer
between 1 and 365. The last case will be followed by a line containing &#8220;0.00 0.00 0&#8221;.


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;), the initial investment (P), the annual interest rate
(I), the number of compounding intervals per year(C), and the value of the investment at the end of a year.
Your output should follow the format shown in the examples below.


*******IOTestCases*******


<pre>
<b>Input:</b>
100.00 6.00 1
100.00 6.00 12
1000.00 6.00 12
0.00 0.00 0

<b>Output:</b>
Case 1. $100.00 at 6.00% APR compounded 1 times yields $106.00
Case 2. $100.00 at 6.00% APR compounded 12 times yields $106.12
Case 3. $1000.00 at 6.00% APR compounded 12 times yields $1061.63
</pre>



______________________________________________________
MKMOOM||||||true||||||


<p>A macro processor is a symbol processing program. It takes a stream of characters as its input, and
produces a stream of characters as its output. A &#8220;macro&#8221; is similar to ordinary function in that it has a
definition, and when invoked, that definition is applied to the argument(s) to yield the result. In this
problem, you will develop a simple macro processor.

<p><p>
A &#8220;macro call&#8221; consists of a name and a list of arguments, separated by commas. The name is preceded by
'[' (a left bracket) and the last argument is followed by ']' (a right bracket). For example, &#8220;[doit,to,it]&#8221;
calls the macro named &#8220;doit&#8221; with two arguments, &#8220;to&#8221; and &#8220;it&#8221;. &#8220;[random]&#8221; calls the macro named &#8220;random&#8221;
with no arguments.

<p><p>
Before a macro can be called, it must be defined by associating its name with a symbol string. This
definition string may contain the special constructions &#8220;$1&#8221; through &#8220;$9&#8221; to reference the first through
the ninth macro parameters. &#8220;$0&#8221; references the macro&#8217;s name itself. When the macro is called, these
constructions are literally replaced by the values of the parameters. For example, suppose the definition
string for the macro named &#8220;321&#8221; was &#8220;$3-$2-$1&#8221;. The macro call &#8220;[321,This,is,fun]&#8221; would yield the output
&#8220;fun-is-This&#8221;. A macro call can appear anywhere. For example, the macro call &#8220;[321,[321,A,B,C],D,E]&#8221; would
yield the output &#8220;E-D-C-B-A&#8221;.

<p><p>
Input enclosed in '<' and '>' prevents the evaluation of the text enclosed, allowing special characters like
'[', ']', ',' and '$' to be used in other than their usual contexts. Thus the macro call &#8220;[321,<$>,<[>,<,>]&#8221; would
yield &#8220;,-[-$&#8221;.

<p><p>
Macros are defined using the predefined macro named &#8220;def&#8221;, which has two arguments. The first argument
is the name of the macro being defined, and the second argument is the defining symbol string for the
macro. The &#8220;321&#8221; macro definition is &#8220;[def,321,<$3-$2-$1>]&#8221;. Note that the definition is enclosed in '<' and
'>' to prevent &#8220;$1&#8221;, &#8220;$2&#8221;, and &#8220;$3&#8221; from being interpreted as parameter references to def. The def macro
produces no output. Naturally, the def macro isn&#8217;t defined using def, but is treated specially by the
implementation.

<p><p><p>
<b>Processing</b><p>
The input stream is processed character by character and copied to the output until a macro call is
encountered, or the input is exhausted (which terminates processing). A macro call is evaluated as
described below, with the result (if any) copied to the output.

<p><p>
<ol>
<li>The macro name and the parameters are evaluated in sequence from left to right. This may require
evaluating additional macro calls, which must be processed recursively.
<li>When the argument list is complete (that is, when the closing ']' is encountered) the definition of
the macro being called is scanned in the same manner as the original input stream except that
occurrences of &#8220;$0&#8221;, &#8220;$1&#8221;, and so forth are replaced literally by the corresponding arguments. The
result of the macro call is the symbol stream produced by this scan.
<li>When the macro call is completed, the macro name and the arguments are discarded, and processing
resumes at the point where it was interrupted by the macro call.
</ol>
<p><p>
<b>Limits and Caveats</b><p>
Macro names and arguments will contain no more than 32 characters each. The defining string for a macro
will contain no more than 100 characters. Macros will never be defined more than once (that is, the same
macro name will not be used more than once as the first argument to &#8220;def&#8221;). Macro calls will always provide
the correct number of arguments. Character case is significant in comparisons. All input characters,
including end of line characters, are to be processed through the macro processor. No output line will
contain more than 80 characters, including the end of line character. The input is guaranteed to be correct.


*******InputConstraints*******

<p>There will be multiple cases to consider. The input for each case begins with a line containing a single
integer between 1 and 10, that specifies the number of lines of text immediately following that will be used
as input to the macro processor. None of these lines will contain more than 80 characters, so the input to
the macro processor will contain at most 810 characters. The last case will be followed by a line containing
the integer 0.


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;), a line containing 79 hyphens, the output from the
macro processor, another line containing 79 hyphens, and a blank line.

<p><p>
In the sample input shown below, assume that the last visible character on each line is immediately followed
by the end of line character. Blank lines in the expected output are shown here as **BLANK** for clarity,
but these should actually be totally blank in your output.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
This is just copied (including end of line).
1
[def,321,<$3-$2-$1>][321,This,is,fun]
1
[def,321,<$3-$2-$1>][321,[321,A,B,C],D,E]
1
[def,321,<$3-$2-$1>][321,This,is,fun][321,[321,A,B,C],D,E]
3
[def,321,<$3-$2-$1>]
[321,This,is,fun]
[321,[321,A,B,C],D,E]
3
[def,A,<$1[B]$2>]
[def,B,*B*]
[A,1,2]
2
[def,#,<[-]$1[-]$2[-]$3[-]>][def,-,<$0>][def,DEF,def][[DEF],X,THIS IS X]
[X][#,DEF,#,X]
0

<b>Output:</b>
Case 1
-------------------------------------------------------------------------------
This is just copied (including end of line).
-------------------------------------------------------------------------------
**BLANK**
Case 2
-------------------------------------------------------------------------------
fun-is-This
-------------------------------------------------------------------------------
**BLANK**
Case 3
-------------------------------------------------------------------------------
E-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 4
-------------------------------------------------------------------------------
fun-is-ThisE-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 5
-------------------------------------------------------------------------------
**BLANK**
fun-is-This
E-D-C-B-A
-------------------------------------------------------------------------------
**BLANK**
Case 6
-------------------------------------------------------------------------------
**BLANK**
**BLANK**
1*B*2
-------------------------------------------------------------------------------
**BLANK**
Case 7
-------------------------------------------------------------------------------
**BLANK**
THIS IS X-DEF-#-X-
-------------------------------------------------------------------------------
**BLANK**
</pre>



______________________________________________________
MKLABELS||||||true||||||


<p>Trees comes in many varieties other than the popular binary tree. In general, a tree is a connected acyclic
graph. That is, it consists of some number of vertices N (which we&#8217;ll assume is at least one in this problem),
and N &#8211; 1 edges, each of which connects a pair of vertices.

<p><p>
A &#8220;labeled tree&#8221; is a tree in which each vertex has been given a &#8220;label.&#8221; For simplicity, let us assume these
labels are the integers 1 through N. In how many different ways may a tree with N vertices be labeled? By
&#8220;different&#8221; we mean that no rearrangement of two trees with the same number of vertices with different
labeling will be identical. (Note that although we commonly associate data with each vertex, and identify
one vertex as the root of the tree, that&#8217;s not significant in this problem.)

<p><p>
Let&#8217;s consider some examples. The figure below shows all possible arrangements of trees with N = 1, 2, 3,
4, or 5 vertices. The number shown below each tree is the number of different ways in which the vertices
in each tree can be labeled.

<p><p>
<center><img src='/content/steinersp:label1.jpg'alt='Illustration' border='0' width = 100%></center>

<p><p>
Clearly a tree with only one vertex can be labeled in only one way &#8211; by assigning the label &#8220;1&#8221; to the single
vertex. A tree with two vertices can also be labeled in only one way. For example, although the two trees
shown on the left below appear to be different, the first can be easily transformed into the second.
(Imagine the edges are strings, so the vertices can be easily repositioned without losing their connectivity.)

<p><p>
<center><img src='/content/steinersp:label2.jpg'alt='Illustration' border='0' width = 100%></center>

<p><p>
There are, however, three possible ways to label the vertices in a 3-vertex tree, as shown on the right
above. No matter how you rearrange the labeled vertices in any of the three trees, you cannot produce any
of the other labeled trees.

<p><p>
In a similar manner, the various arrangements of four vertices in a tree yield a total of 16 possible labelings
&#8211; 12 for the four vertices &#8220;in a row,&#8221; and 4 for the other configuration. There are three possible
arrangements of the vertices in a tree with N = 5, with a total of 125 possible


*******InputConstraints*******

<p>There will be multiple cases to consider. The input for each case is an integer N specifying the number of
vertices in a tree, which will always be between 1 and 10. The last case will be followed by a zero.


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;), the input value of N, and the number of different
ways in which a tree with N vertices may be labeled. Use the format shown in the examples below.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
4
5
0

<b>Output:</b>
Case 1, N = 2, # of different labelings = 1
Case 2, N = 3, # of different labelings = 3
Case 3, N = 4, # of different labelings = 16
Case 4, N = 5, # of different labelings = 125
</pre>



______________________________________________________
MKBUDGET||||||true||||||


<p>A company uses temporary employees (&#8220;temps&#8221;) to handle its varying workloads. By doing so, it avoids having
to pay for benefits normally provided to its permanent employees. However, the company must pay an
employment agency a fixed fee for each temp they hire, as well as paying the temp a fixed amount of
severance pay when they are terminated &#8211; in addition, of course, to the monthly salary each temp receives.
The company has a good understanding of when it needs temporary workers, and how many such workers it
will require each month. Depending on the fee paid to the employment agency, the temporary worker&#8217;s
salary, and the severance pay, it may make sense to retain an unneeded worker for one or more months if
it&#8217;s known that they will be needed again in the future.

<p><p>
Let&#8217;s consider an example. Suppose we know that in March the company will need 10 temps, in April they&#8217;ll
need 9, and in May they&#8217;ll need 11. Suppose a temp earns $500 per month, that the employment agency
receives $400 for each temp hired, and $600 is paid as severance to each temp that is terminated. If the
company employs just the minimum number of temps required, then their payments will be as follows (we
ignore the cost of terminating all employees at the end of the last month):

<p><p>
<center><img src='/content/steinersp:budget.jpg'alt='Illustration' border='0' width = 100%></center>
<p><p>

The total cost to the company is $20,400. But suppose they did not terminate the unneeded temp at the
end of March, but just let that person remain employed. They would then save $400 in employment agency
fees (since they&#8217;d need to hire just one additional temp for May), $600 in severance pay, and only have to
pay the temp worker $500, for an overall savings of $500.

<p><p>
In this problem you are given, as input, the number of months for which the company is to plan its temp
worker budget, the cost of hiring and firing a temp worker, the temp worker&#8217;s monthly salary, and the
required minimum number of workers needed each month. You are to determine the minimum cost to the
company to have at least the required minimum number of workers on hand each month. Assume there are
no temporary workers on hand before the first month, and that the cost of terminating the workers at the
end of the last month is not to be included in the cost. You may assume that the planning interval will be no
longer than 24 months, and the hiring cost, severance pay, and monthly salary for each temp worker is
greater than zero.


*******InputConstraints*******

<p>There will be multiple cases to consider. The input for each case begins with an integer N, the number of
months for which planning is required (never larger than 24). This is followed by three integers giving the
cost of hiring a worker, the worker&#8217;s monthly salary, and the severance pay for a terminated worker. Finally
there will appear N integers giving the required minimum number of workers needed in each month. The last
case will be followed by a zero.


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;) and the minimum cost to the company. Use the format
shown in the examples below.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 400 500 600 10 9 11
8 400 600 600 11 9 10 14 9 9 13 15
0

<b>Output:</b>
Case 1, cost = $19900
Case 2, cost = $66600
</pre>



______________________________________________________
ACARGO||||||false||||||

<div align="justify">
<p>
A cargo shipment containing N (1 &lt;= <b>N</b> &lt;= 10<sup>5</sup>) boxes, has just arrived and it requires some regrouping. 
All the cargo is currently placed on a long circular conveyor belt of length <b>L</b> metres (1 &lt;= <b>L</b> &lt;= 10<sup>9</sup>), 
which you can control and perform the following operations.
<ul>
<li>Rotate the wheel clock wise or anti-clockwise (free of cost).
<li>Hold the cargo at some point and not let it move, while the belt is rolling. 
This causes the cargo behind it to come closer to this cargo by one step. 
Any consecutive sequence of cargo is grouped together and called as a luggage. The aim of the program is to group all cargo as a single luggage. Now the cost of this holding operation for one second is equal to the weight of the <i>luggage</i> that is held fixed. Also please note that you can hold the luggage only at ends of the luggage and never at inbetween points.
</ul>
Each unit of cargo weighs exactly one Kg. The conveyor belt rotates at a speed of one meters per second.<br>
This cost function directly reflects the human effort required to group the cargo. Workers would be happy if you can write a program that prints the minimal required effort to group the cargo, assuming an intelligent sequence of operations. <br>
</p>
<br>
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
The first line of each testcase contains two integers, <b>N</b> and <b>L</b>. <br>
The following <b>N</b> lines contain one integer each specifying the position of the <b>i<sup>th</sup></b> cargo on the belt. The positions will be between 0 & <b>L-1</b>. <br>
Input terminates with a line containing N=0 and L=0 which must not be processed. <br>
<br>
<b>Output Format:</b><br>
For each testcase print one integer in a single line, which is the minimal required cost for grouping all the cargo into a single luggage.<br>
<br>
<b>Sample Input:</b><br>
<pre>
3 5
0
1
3
2 3
0
1
5 20
2
7
12
9
13
0 0
</pre>

<b>Sample Output:</b><br>
<pre>
1
0
10
</pre>

NOTE: Please use 64-bit integers.
</div>


______________________________________________________
BWHEELER||||||false||||||

<p>
The <b>Burrows-Wheeler transform</b> (<b>BWT</b>, also called <b>block-sorting compression</b>), is an algorithm used in data compression techniques such as bzip2. It was invented by Michael Burrows and David Wheeler.
<p>When a character string is transformed by the BWT, none of its characters change value. The transformation permutes the order of the characters. If the original string had several substrings that occurred often, then the transformed string will have several places where a single character is repeated multiple times in a row. This is useful for compression, since it tends to be easy to compress a string that has runs of repeated characters by techniques such as move-to-front transform and run-length encoding.</p>
<p>For example, the string:</p>
<pre>SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES
</pre>

<p>could be transformed into this string, which is easier to compress because it has many repeated characters:</p>
<pre> TEXYDST.E.IXIXIXXSSMPPS.B..E.S.EUSFXDIIOIIIT
</pre>
<p>
Now the Burrows-Wheeler algorithm works as follows:
<ul>
<li> Given an input string <b>S</b>, eg: "abcba".
<li> Find all rotations of <b>S</b>. <br>
<pre>
eg: "abcba", "bcbaa", "cbaab", "baabc", "aabcb"
</pre>
<li> Now sort the strings hence produced.
<pre>
eg: "aabcb", "abcba", "baabc", "bcbaa", "cbaab"
</pre>
<li> Arrange the strings in a len(S) x len(S) grid.
<pre>
aabcb
abcba
baabc
bcbaa
cbaab
</pre>
<li> Output the row number (1-based indexing) containing the original input string. Also output the strings formed by characters in the last column.<br>
eg: 2 bacab
</ul>
</p>
<br>
Now given the output of Burrows-Wheeler, can you recover the orginal string?<br>
<br>
<div align="justify">
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
The first line of each testcase contains one integer, <b>R</b>, indicating the row number containing the original input string in the sorted matrix. <br>
The second line of each testcase contains one string, <b>Col</b>, which is the last column of the grid. (1 &lt;= len(Col) &lt;= 1000) <br>
<b>Col</b> contains only lowercase characters. 1 &lt;= <b>R</b> &lt;= len(Col).<br>
Input terminates with a line containing R=0 which must not be processed. <br>
<br>
<b>Output Format:</b><br>
Print the original input string to the burrow wheeler's algorithm.<br>
<br>
<b>Testdata:</b><br>
30 testcases<br>
<b>Sample Input:</b><br>
<pre>
2
bacab
3
rwlb
11
baaabaaaabbbaba
0
</pre>

<b>Sample Output:</b><br>
<pre>
abcba
rbwl
baaabbbbaaaaaab
</pre>
</div>


______________________________________________________
COOLNUMS||||||false||||||

<div align="justify">
<p>
Cool numbers are those, whose digits can be partitioned into two sets such that the sum of the digits in either sets are equal. <br>
Example: 23450 is cool because 3+4+0 = 2+5; So is 91125;<br>
The numbers 567, 34523 are not cool, since there is no such digit partition.<br>
<br>
Write a program that prints the number of cool numbers in the inclusive range [A,B].<br>
</p>
<br>
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
Each case contains one line containing two 32-bit unsigned integers A and B. (1 &lt;= A &lt;= B &lt;= 4*10<sup>9</sup>).<br>
Input terminates with a line containing two zeros and must not be processed.<br>
<br>
<b>Output Format:</b><br>
For each testcase print a single line containing one integer saying the number of cool numbers between A and B, inclusive.<br>
<br>

<b>Sample Input:</b><br>
<pre>
1 11
12 20
1 20
3 100
6354 234363
123456789 234567891
0 0
</pre>

<b>Sample Output:</b><br>
<pre>
1
0
1
9
82340
54801678
</pre>
<br>
<b>Test Data:</b><br>
About 50 testcases.<br>
<br>
</div>


______________________________________________________
DRAGONCU||||||false||||||

<div align="justify">
<p>
Define <b>r(s)</b> to be the complement of the reverse of the binary string <b>s</b>. i.e. Reverse <b>s</b> and then convert all 1's to 0's and all 0's to 1's. <br>
Further define a sequence of binary string as follow: s<sub>0</sub> = 1 and s<sub>n</sub> = s<sub>n-1</sub>1r(s<sub>n-1</sub>). i.e.<br>
s<sub>0</sub> = 1<br>
s<sub>1</sub> = 110<br>
s<sub>2</sub> = 1101100<br>
s<sub>3</sub> = 110110011100100<br>
...<br>
<br>
We then program a robot to move at a steady speed of 1 unit per second and make a right-angle turn according to the characters of s<sub>10</sub> after every unit of movement. At the kth turn, the robot turns to left if the kth character of s<sub>10</sub> is a 1, and to right otherwise. The figure below shows the whole path of the robot.<br>
<img src="http://www.spoj.pl/content/myprasanna:dragoncurves.jpg"/>
<br>
The robot is placed at the origin (the small circle) and face east originally. It ends up at the coordinates (-32,32) (the small spot) after 2048 seconds. The path of the robot is known as a dragon curve, a pretty well-known pattern of fractal. <br>
<br>
If the robot is now programmed with input string s<sub>30</sub> (with identical initial conditions as above), it will keep moving and then stop after 2<sup>31</sup> seconds. We want to know the location of the robot at any given time.<br>
</p>
<br>

<b>Input Format:</b><br>
Input consists of multiple problem instances. Each instance consists of a single non-negative integer <b>n</b>, where <b>n</b> &lt;= 10<sup>9</sup>. The input data is terminated by a "-1". There will be less than 5000 test cases.<br>
<br>
<b>Output Format:</b><br>
For each input integer <b>n</b>, print out the location of the robot right after <b>n</b> second since the robot starts its journey with input string s<sub>30</sub>. The location should be printed with the format "(x,y)" in a single line.<br>
<br>
<b>Sample Input:</b><br>
<pre>
1
2
3
2048
1000000000
-1
</pre><br>
<b>Sample Output:</b><br>
<pre>
(1,0)
(1,1)
(0,1)
(-32,32)
(9648,-31504)
</pre>
</div>


______________________________________________________
EPURSE||||||false||||||

Jack plays this ball game for the first time in his club. Jack has a ball, which bounces with a width of <b>W</b>. Coins are arranged on a straight line at regular intervals. If the ball strikes the i-th coin, Jack gains <b>money</b>[i] (which could possibly be negative). Jack can take atmost <b>B</b> turns, to throw the ball. At each turn, jack can either throw the ball from left to right, or right to left, and choose which ball to start the knock out. If he chooses to knock out from ball i to the right, he will knock out i, i+W, i+2W, ...; Similarly if he chooses to knock out from right to left, starting from ball i he will knock out, i, i-W, i-2W, ...; Please note that once a ball is knocked out, it is removed and it's place contains a void. i.e., you cant gain <b>money[i]</b> for the same <b>i</b> twice.<br>
Jack wants to maximise his money gained, by carefully choosing his turns. If there is more than one way to gain the same money, jack wishes to minimise the number of times he throws.
</p>

______________________________________________________
FCATTLE||||||false||||||

<div align="justify">
<p>
Farmer john owns a single cow and he loves it a lot. The cow has a disease and is going to die. To survive, the cow needs medicine of a particular type each day. Let us say the cow needs <b>medicine</b>[i] to survive the i<sup>th</sup> day. (medicine[i] will be terminated by -1, which is an unavailable medicine, and the cow has to invariably die that day). <br>
To help the cow, john has decided to buy pastures of some medical value. Farmer sees a two-dimensional grid of pastures, each cell having exactly one medical herb. Now he needs to buy a sub-rectangular region of the grid, whose area cannot exceed <b>A</b> (<b>A</b> > 1). With this region the farmer intends to feed his cow, as long as possible.
</p>
<br>
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
The first line of each testcase contains three integers, <b>R</b>, <b>C</b> and <b>A</b>.<br>
The second line consists of sequence of integers describing <b>medicine</b>[i]. This list will be terminated by -1.<br>
The next <b>R</b> lines contain <b>C</b> integers each, specifying the medicinal type of the herb in that cell. (1 &lt;= <b>R,C</b> &lt;= 200). All herbs are specified by non negative integers.<br>
Input terminates with a line containing three zeros and must not be processed.<br>
<br>
<b>Output Format:</b><br>
For each testcase print a single line containing 5 integers: <br>
<i><b>days r1 c1 r2 c2</b></i><br>
(1 &lt;= r1 &lt;= r2 &lt;= R, 1 &lt;= c1 &lt;= c2 &lt;= C)<br>
<ul>
<li><b><i>days</b></i> is the number of days the cow survives. We wish to maximise this.
<li>If there are more than one solutions print the one with minimal r1.
<li>If there are more than one solutions still, print the one with minimal c1.
<li>If there are more than one solutions still, print the one with minimal r2.
<li>If there are more than one solutions still, print the one with minimal c2.
</ul>
<br>
<b>Sample Input:</b><br>
<pre>
3 4 6
12 30 12 100 22 -1
30 12 5 3
12 30 100 5
22 3 22 100
3 4 6
2 30 12 100 22 -1
30 12 5 3
12 30 100 5
22 3 22 100
3 4 6
12 30 12 100 22 -1
30 12 5 3
12 30 100 5
22 12 22 100
0 0 0
</pre>

<b>Sample Output:</b><br>
<pre>
4 1 1 2 3
0 1 1 1 1
5 1 2 3 3
</pre>
</div>


______________________________________________________
GAMETIME||||||false||||||

<div align="justify">
<p>
Jack has got a new game of Super Mario recently. There are <b>n</b> castles in the game, and Princess Peach has been kidnapped by the King Koopa and enjailed in castle n - 1 (0-based). The King Koopa has Son Koopas, and the Son Koopas has Grandson Koopas, and the Grandson Koopas has Great-Grandson Koopas... The whole Koopa family is taking possession of these n castles, and there is exactly one Koopa in each castle and the King Koopa is in castle n - 1. Super Mario's task is to conquer these castles and save Princess Peach. </p>
<p>
Each time, Super Mario can freely choose an unconquered castle and go in to fight with the Koopa. Super Mario has time <b>T[i]</b> to conquer castle <b>i</b> and beat the Koopa in it. If Super Mario fails to conquer the castle or fails to do that within the time limit, the game is over. Otherwise, the defeated Koopa will go to seek the Father Koopa for help. If any Koopa has two or more Son Koopas beaten by Super Mario, he will get angry. Super Mario has to go to the castle of the angry Koopa and beat him immediately; otherwise the Princess Peach will be killed. If castle n - 1 is conquered and King Koopa is defeated, the game will also end, but with triumph and Princess Peach saved.</p>
<p>
Jack loves this game a lot, but he has to prepare for the upcoming ACM/ICPC. So he guarantees to himself that he only plays the game once a month. However, Jack really loves playing game and hates programming, he wants to maximize the time he can spend on the game without breaking his promise.
</p>
<br>
<b>Input Format:</b><br>
The input consists of multiple test cases.<br>
Each test case starts with a number <b>N</b> (0 &lt; N &lt;= 100,000) in a single line, the number of castles and Koopas. There are two lines following and each contains N numbers. <br>
The first line is N numbers, <b>T[i]</b> (0 &lt; <b>T[i]</b> &lt;= 100) for Super Mario to conquer castle i. <br>
The second line is N numbers of <b>P[i]</b> (-1 &lt;= Pi &lt; N), the castle (0-based) in which the Parent of each Koopa resides. <br>
-1 means that there is no parent for him, and the last number will always be -1, since King Koopa has no Parent Koopa.

The input ends with 0(zero), which should not be processed.<br>
<br>
<b>Output Format:</b><br>
Output the maximal time Jack can play in a single line for each test case.<br>
<br>
<b>Sample Input:</b><br>
<pre>
5
1 2 3 4 5
4 4 4 4 -1
5
2 2 2 2 2
1 2 3 4 -1
9
1 1 1 1 1 1 1 1 1
6 6 6 7 7 7 8 8 -1
0
</pre>

<b>Sample Output:</b><br>
<pre>
12
10
8    
</pre>
</div>


______________________________________________________
HANOICAL||||||false||||||

<div align="justify">
<p>
Theory: 
<ul>
<li>Towers of hanoi is an arrangement consisting of three pegs and <b>N</b> discs of radius 1 to <b>N</b>.
<li>Each peg can hold zero or more discs, but at any point of time, the radius of the discs must be in decreasing order from bottom to top.
<li>A move consists of moving the topmost disc from one peg to another. After the move, the decending order property of pegs must hold.
</ul>
Traditional problem is: If all discs are stacked up on peg#1, how many moves will it take to move all the discs to peg#2? <br>
Recursive solution: Noting that for disc N to move, from peg #a to peg #b, all discs of size 1 to N-1 must be in peg #c. Hence there is exactly one minimal way to move the discs. After disc N has moved, all pegs from #c must be moved back to #a.
If moves(N) denote the number of moves required to transfer N discs between two pegs (both sorted configuration), then moves(N) = moves(N-1) + 1 + moves(N-1); Solving the recurrence yields moves(N) = 2<sup>N</sup> -1; The idea i am trying to share is that, there is exactly one such move sequence.<br><br>
Now the problem is that given any initial configuration of the discs, and any final configuration, Can you tell me the minimal number of moves required to change it from initial to final configuration?
</p>
<br>
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
The first line of each testcase contains one integer, <b>N</b> (1 &lt;= N &lt;= 30) <br>
The second line of each testcase contains N integers, each one of which will be between 1 and 3. The <b>i</b>-th integer tells you the peg number at which disc of radius <b>i</b> is present in the initial configuration.<br>
The third line contains a similar specification for the final configuration.<br>
Input terminates with a line containing a single zero, which must not be processed. <br>
<br>
<b>Output Format:</b><br>
For each testcase print one line containing a single integer, which is the minimal number of moves to make the transfer.
<br>
<b>Testdata:</b><br>
100 testcases<br>
<br>
<b>Sample Input:</b><br>
<pre>
4
1 1 1 1
2 2 2 2
3
1 3 3
2 1 1
5
1 3 2 2 2
2 3 2 1 2
0
</pre>

<b>Sample Output:</b><br>
<pre>
15
6
14
</pre>
<b>Output Explanation:</b><br>
TestCase#1: <br>
This is the moves(4) = 2^4 -1;<br>
TestCase#2:<br>
<pre>
[peg1, peg2, peg3] = 
#0 [ {1}, {}, {3,2} ]
#1 [ {1}, {2}, {3}  ]
#2 [ {}, {2,1}, {3} ]
#3 [ {3}, {2,1}, {} ]
#4 [ {3}, {2}, {1}  ]
#5 [ {3,2}, {}, {1} ]
#6 [ {3,2}, {1}, {} ]
</pre>
</div>


______________________________________________________
ICODER||||||false||||||

<div align="justify">
<p>
Mathews uses a brand new 16-bit instruction processor. (Yeah i am being sarcastic!). It has one register (say R) and it supports two instructions: <br>
<ul>
<li>ADD X; Impact: R = (R + X) mod 65536
<li>MUL X; Impact: R = (R * X) mod 65536
<li>[For both instructions 0 &lt;= X &lt;= 65535]
</ul>
Mathews sees a segment of code, but doesnot know what value the register had before the code was being executed. How many possible values can the register have after the segment completed execution?
</p>
<br>
<b>Input Format:</b><br>
The input file consists of multiple testcases. <br>
The first line of each testcase contains one integer, <b>N</b>. (1 &lt;= N &lt;= 100,000).<br>
The following <b>N</b> lines contain one instructions each. <br>
Input terminates with a line containing N=0, which must not be processed. <br>
<br>
<b>Output Format:</b><br>
For each testcase print one integer in a single line, denoting the number of different values the register can take after code execution.<br>
<br>
<b>Sample Input:</b><br>
<pre>
1
ADD 3
1
MUL 0
5
MUL 3
ADD 4
MUL 5
ADD 3
MUL 2
8
ADD 32
MUL 5312
ADD 7
MUL 7
ADD 32
MUL 5312
ADD 7
MUL 7
0
</pre>

<b>Sample Output:</b><br>
<pre>
65536
1
32768
16
</pre>
</div>


______________________________________________________
RECTANGL||||||true||||||


<p>You are given a set <i>S</i> of <i>N</i> points in the plane and must count the number of distinct axis-parallel rectangles whose four vertices all lie in <i>S</i> (that is, count those rectangles which have two sides parallel to the <b>x</b>-axis, and the other two sides parallel to the <b>y</b>-axis).


*******InputConstraints*******

<p>The first line of the input is <i>N</i> (1 &#8804; <i>N</i> &#8804; 250000), the number of points in <i>S</i>.  <i>N</i> lines then follow, where the <b>i</b>-th line is of the form "<i>x<sub>i</sub></i> <i>y<sub>i</sub></i>", giving the coordinates of a point (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) in <i>S</i>.  All given points are distinct, and all coordinates fit into a 32-bit signed integer.


*******OutputConstraints*******

<p> Your output should consist of a single number, the number of distinct axis-parallel rectangles whose four vertices all lie in <i>S</i>, followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
6
-1 0
-1 1
0 0
0 1
1 0
1 1

<b>Output:</b>
3
</pre>



______________________________________________________
ROMANRDS||||||true||||||


<p>Some 2000 years ago the Roman Empire covered a large part of Europe including the entire coast of the Mediterranean. The transportation network of that empire
consisted of roads and sea routes (the two are considered equivalent and simply called roads for this problem). Each road connected exactly two cities and the road network was such that every city can be reached from Rome. However, building this network required resources (cobblestone and buoys) proportional to the total length of the network. In order to cut down on building costs and maintainance and spend the rest of the money on wine, the empire built the cheapest possible network.

<p>Additionally, each road had a single signpost that listed all of the other roads it connected to (at any of its two cities). There were <i>N</i> roads in the empire labeled <i>1</i>, <i>2</i>, ..., <i>N</i>.  It is believed that a traveller once travelled all roads and for each road wrote down the numbers on its signpost, thus making a map.

<p>2000 years later a young archaeologist found something that looks suspiciously like that map. Your job is to write a program that determines if this can really be a map of the Roman empire and for each road output the two cities it connected.  Note that roads in a valid map are always between two distinct cities.

<p>(Disclaimer: The description of the transportation network is for this problem only and may not necessarily be what the Roman Empire actually did. Do not cite this in your history papers: I made it up.)


*******InputConstraints*******

<p>The first line of input contains <i>N</i>, <i>1</i> &#8804; <i>N</i> &#8804; <i>500</i>.
Each of the next <i>N</i> lines contains a space-separated list of integers. The <i>i</i>-th of these lines describes the "roads" that connect to "road" <i>i</i>. The first number on the line specifies the number of those "roads", <i>d<sub>i</sub></i>, and the following <i>d<sub>i</sub></i> numbers specify their labels.

<p>Note that although at this point we don't know if the map is valid, the input is consistent, i.e. if a road <i>x</i> is on the signpost of <i>y</i>, then <i>y</i> will be on the signpost of <i>x</i>. (Otherwise the archaeologist would know this is not a Roman map right away).


*******OutputConstraints*******

<p>If the input <i><b>cannot</b></i> describe a valid map according to the description, output "NO" on the first (and only) line of output.

<p>Otherwise, output "YES" and on each of the next <i>N</i> lines, write two integers separated by space, the numbers of the two cities that the road connected. City labeling is up to you with the only restriction that all city labels must be integers between <i>1</i> and <i>M</i>, where <i>M</i> is the total number of cities. Of course, a city can only have one label.

<p>Note that since we don't know the actual locations of the cities or whether the roads were straight, we have no idea what the total cost of the network might have been. 
The archaeologist is willing to accept any map for which she can't determine if there is a cheaper network without knowing the actual costs. It is assumed that each road had some positive cost.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2 3 2
2 1 3
2 2 1

<b>Output:</b>
YES
1 3
4 1
1 2
</pre>



______________________________________________________
CIRCLES||||||true||||||


<p>Little Gary plays the following video game. Circles pop up on the screen and disappear from it. When the screen flashes, Gary can draw a straight line on the screen and win as many points as there are circles intersected by the line. As a born-to-be-winner, Gary wants to maximize his score. Please, help him, and write a program that will determine the maximum number of points he can win each time the screen flashes.


*******InputConstraints*******

<p>The first line of the input contains <i>M</i> (<i>1</i> &#8804; <i>M</i> &#8804; <i>1000</i>), the number of events during the game. The next <i>M</i> lines contain descriptions of the events, one per line. They can be in one of the following three formats:
<br><br>
1 <i>x</i> <i>y</i> <i>r</i><br>
, representing a circle of radius <i>r</i> popping up with the position of its center at (<i>x</i>, <i>y</i>) in the plane
<br><br>
2 <i>i</i><br>
, representing a circle <i>i</i> disappearing, where circle <i>i</i> is the <i>i</i>th circle that popped up since the beginning of the game; and
<br><br>
3<br>
, representing the screen flashing.
<br><br>
<i>x</i>, <i>y</i>, and <i>r</i> are real numbers with at most two decimals, <i>-10<sup>6</sup></i> < <i>x</i>, <i>y</i>, <i>r</i> < <i>10<sup>6</sup></i>, <i>r</i> > 0.
<br><br>
Notes:
<ul>
<li>A line intersects a circle if it has at least two common points with it.</li>
<li>At any time, no two Circles on the screen have a common point.</li>
<li>At any time, there is no line that "touches" more than two circles (a line touches a circle if they have exactly one common point).</li>
<li>At any time, there are no more than 100 circles on the screen.</li>
<li>Each <i>i</i> determines a circle that is on the screen at the moment of removal.</li>
<li>No circle is removed twice.</li>
</ul>


*******OutputConstraints*******

<p>Each time the screen flashes, write an integer to a separate line, which is the maximum number of circles Gary can intersect.


*******IOTestCases*******


<pre>
<b>Input:</b>
9
1 3.00 0.00 1.00
1 -2.00 0.00 1.00
3
1 2.00 3.00 1.50
3
1 2.00 -4.00 1.00
3
2 3
3

<b>Output:</b>
2
2
3
2
</pre>



______________________________________________________
IMGPROJ||||||true||||||


<p>Given an image <i>I</i> with <i>N</i> columns and <i>M</i> rows, a diagonal projection is the vector (<i>d<sub>1</sub></i>, <i>d<sub>2</sub></i>, ..., <i>d<sub>M+N-1</sub></i>) where <i>d<sub>i</sub></i> = &#931;<i><sub>x+y-1=i</sub> I(x,y)</i>.
Here <i>I(x,y)</i>, <i>1</i> &#8804; <i>x</i> &#8804; <i>N</i>, <i>1</i> &#8804; <i>y</i> &#8804; <i>M</i>, is the image intensity (a non-negative integer less than 256) at column <i>x</i> and row <i>y</i>.

<p>You are given a set of images and you are asked to find the diagonal projection for each of them.


*******InputConstraints*******

<p>The first line of input contains a positive number, the number of images that follow. For each image there is a line with <i>N</i> and <i>M</i>. The following <i>M</i> lines describe one row each starting from row 1. A row is described in run-length encoding by pairs of numbers separated by spaces. The first number in each pair is the length of the run and the second number is the image intensity. Obviously, for each row, the run lengths add up to <i>N</i>.  As in the example input, there is a blank line between each two consecutive images and before the first one.

<p>The number of test cases is at most 10.
The width of each image is less than <i>10<sup>9</sup></i> and the height is less than <i>10<sup>3</sup></i>.
Additionally, the total size of the input does not exceed 4 MB.


*******OutputConstraints*******

<p>For each image you should output one line, the diagonal projection for the image in run length encoding. The number of output lines should be the same as the number of images in the input. All the numbers on a line should be separated by exactly one space.

<p>When encoding the output in run-length encoding, the runs should be as long as possible, i.e. no two consecutive runs should have the same intensity value.


*******IOTestCases*******


<pre>
<b>Input:</b>
2

3 3
1 1 1 2 1 3
1 1 1 2 1 3
1 3 1 2 1 1

3 2
3 1
3 1

<b>Output:</b>
1 1 1 3 1 8 1 5 1 1
1 1 2 2 1 1
</pre>



______________________________________________________
MMCUT||||||true||||||


<p>You are given a tree (a connected, acyclic graph) along with a set of <b>commodities</b>, i.e. pairs of vertices, (<i>s<sub>1</sub></i>,<i>t<sub>1</sub></i>),...,(<i>s<sub>m</sub></i>
,<i>t<sub>m</sub></i>) (<i>s<sub>i</sub></i> &#8800; <i>t<sub>i</sub></i>).  A <b>multicut</b> is a set of edges that when removed disconnects <i>s<sub>i</sub></i> from <i>t<sub>i</sub></i> for all <i>i</i>.  There is a unique path <i>P<sub>u,v</sub></i> between every pair of vertices
<i>u,v</i> in a tree, and the <b>max-cost</b> of a multicut <i>S</i> is max<sub><i>i</i></sub> |<i>S</i> &#8745; <i>P<sub>s<sub>i</sub>, t<sub>i</sub></sub></i>|.  You will be given a rooted tree of height <i>1</i> and a set of commodities and must return the minimum possible max-cost over all multicuts.


*******InputConstraints*******

<p>The first line of the input is "<i>N M</i>" (<i>1</i> &#8804; <i>N, M</i> &#8804; <i>100000</i>),
where <i>N</i> is the number of vertices in the tree and <i>M</i> is the number
of commodities.  All vertices are numbered <i>0, ...,N-1</i>, and the
root has label <i>N - 1</i>.  <i>M</i> lines then follow, where the <i>i</i>th line
is "<i>s<sub>i</sub> t<sub>i</sub></i>", representing a commodity (<i>s<sub>i</sub></i>, <i>t<sub>i</sub></i>) where <i>s<sub>i</sub></i> &#8800;
<i>t<sub>i</sub></i>.  Commodities are distinct: neither (<i>s<sub>i</sub></i>, <i>t<sub>i</sub></i>) = (<i>s<sub>j</sub></i>, <i>t<sub>j</sub></i>)
nor (<i>s<sub>i</sub></i>, <i>t<sub>i</sub></i>) = (<i>t<sub>j</sub></i>, <i>s<sub>j</sub></i>) will hold when <i>i</i> &#8800; <i>j</i>.


*******OutputConstraints*******

<p>Your output should consist of a single number, the minimum possible
max-cost of a multicut, followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
10 2
0 5
4 8

<b>Output:</b>
1
</pre>



______________________________________________________
SETCOV||||||true||||||


<p>In the set cover problem there is a collection <i>C =
{S<sub>1</sub>, ...,S<sub>m</sub>}</i> of subsets of the universe [<i>n</i>] = <i>{0, ...,n-1}</i>,
and one must
find a minimum-sized subcollection of <i>C</i> that still covers
[<i>n</i>] (it may be the case that <i>S<sub>i</sub></i> and <i>S<sub>j</sub></i> contain the exact same
elements for some <i>i</i> &#8800; <i>j</i>).  A <b>path of length r</b> is a graph on
<i>r+1</i> vertices <i>v<sub>0</sub>, ...,v<sub>r</sub></i> where <i>v<sub>i</sub></i> has an undirected edge
to <i>v<sub>i+1</sub></i> for <i>i = 0, ...,r-1</i> (these are the only edges).
A set cover instance <i>I</i> is
said to be <b>path-realizable</b> if there exists a mapping from <i>I</i> to a
path of length <i>m</i> where the <i>S<sub>i</sub></i> are mapped to edges in the path
and each <i>i</i> in [<i>n</i>] is mapped to a pair of (not-necessarily distinct)
vertices <i>s<sub>i</sub></i>, <i>t<sub>i</sub></i> on the path such that the edges lying between
<i>s<sub>i</sub></i> and <i>t<sub>i</sub></i> correspond exactly to the sets of <i>C</i> that
contain <i>i</i>.  Two sets <i>S<sub>i</sub>,S<sub>j</sub></i> must be mapped to different edges on
the path if <i>i</i> &#8800; <i>j</i>.  You will be given a set cover instance that is
guaranteed to be path-realizable and should output the size of a
minimum-sized subcollection of <i>C</i> still covering [<i>n</i>].


*******InputConstraints*******

<p>The first line of the input is "<i>N M</i>" (<i>1</i> &#8804; N, M &#8804; 300</i>),
where <i>N</i> is the size of the universe and <i>M</i> is the number of sets
<i>S<sub>i</sub></i> in the collection of subsets of <i>{0, ...,N - 1}</i>.  What follows
are <i>M</i> groups of lines.  The <i>i</i>th group starts with one line
containing |<i>S<sub>i</sub></i>|, the size of the <i>i</i>th subset.  If |<i>S<sub>i</sub></i>| = <i>0</i>, the
current group of lines ends.  Otherwise the next line is a
space-separated list of the elements contained in <i>S<sub>i</sub></i>.


*******OutputConstraints*******

<p>If [<i>n</i>] cannot be covered by a subcollection of <i>C</i> then
you should output <i>-1</i>, followed by a newline.  Otherwise, your output
should consist of two lines.  The first line is the size
of a minimum-sized set cover.  The second line is a space-separated
list of the 0-based indices of the sets in an optimal set cover.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 4
0
2
2 1
2
1 0
0

<b>Output:</b>
2
1 2
</pre>



______________________________________________________
SKIVALL||||||true||||||


<p>The Society of Sport of New Hampshire has decided to build a new attraction in White Mountains. For the first time, the world will see a ski-valley, a ski path that goes downhill then uphill. They believe that skiers can gain enough speed from going down in the first part in order to climb up the second part. To maximize the joy of visitors, they want to find the longest such path.

<p>To simplify calculations, they approximate the mountain terrain with a matrix of square fields and obtain the height of each field from the New Hampshire Geographical Institute. A ski-valley is a sequence of neighboring fields, such that height of fields only decreases along the sequence until some point, and then it only increases until its end. No field appears more than once in a ski-valley. Two fields are neighbors if they share a common edge. The length of a ski-valley is the number of fields in its sequence.

<p>More technically, the terrain is an <i>M</i> x <i>N</i> matrix of fields, where <i>(i, j)</i> denotes a field in the <i>i</i>th row and <i>j</i>th column, and <i>h(i, j)</i> denotes its height. A ski-valley is a sequence
<i>(x<sub>1</sub>, y<sub>1</sub>), (x<sub>2</sub>, y<sub>2</sub>), ..., (x<sub>l</sub>, y<sub>l</sub>)</i>, such that:
<ol>
<li>
for any <i>i</i> (<i>1</i> &#8804; <i>i</i> &#8804; <i>l-1</i>), either <i>x<sub>i</sub> = x<sub>i+1</sub></i> and |<i>y<sub>i</sub> - y<sub>i+1</sub></i>| = <i>1</i>, or <i>y<sub>i</sub> = y<sub>i+1</sub></i> and |<i>x<sub>i</sub> - x<sub>i+1</sub></i>| = <i>1</i> (neighbors rule)
<li>
if <i>i</i> &#8800; <i>j</i> (<i>1</i> &#8804; <i>i, j</i> &#8804; <i>l</i>), then either <i>x<sub>i</sub></i> &#8800; <i>x<sub>j</sub></i> or <i>y<sub>i</sub></i> &#8800; <i>y<sub>j</sub></i> (no repeating rule), and
<li>
There exists a <i>k</i> (<i>1</i> &#8804; <i>k</i> &#8804; <i>l</i>), such that <i>h(x<sub>1</sub>, y<sub>1</sub>)</i> > <i>h(x<sub>2</sub>, y<sub>2</sub>)</i> > ... > <i>h(x_<sub>k-1</sub>, y_<sub>k-1</sub>)</i> > <i>h(x<sub>k</sub>, y<sub>k</sub>)</i> < <i>h(x_<sub>k+1</sub>, y_<sub>k+1</sub>)</i> < ... < <i>h(x<sub>l</sub>, y<sub>l</sub>)</i> (down-up rule).
</ol>

<p>The length of such ski-valley is <i>l</i>.

<p>They hire you, a reputable programmer, to write a program that will find a ski-valley of maximum length. If there are multiple ski-valleys with the same (maximum) length, you can choose any of them.

<p>Note: Yes, they were not cautious and also allowed a ski-valley to bo only downhill or only uphill, but your job is only to adhere to the specification they gave you!


*******InputConstraints*******

<p>The first line of the input contains <i>M</i> and <i>N</i> (1 &#8804; M, N &#8804; 60), respectively, separated by a space character. Each of the next <i>M</i> lines contain <i>N</i> numbers, such that the <i>j</i>th number in the <i>i</i>th line represents <i>h(i, j)</i> (-10<sup>6</sup> &#8804; h(i, j) &#8804; 10<sup>6</sup>).  No two fields in the terrain are of the same height.  Numbers on a line are separated by a space character.


*******OutputConstraints*******

<p>In the first line of the output, write a single number <i>l<sub>max</sub></i>, which is the maximum length of a ski-valley. In the next <i>l<sub>max</sub></i> lines write a description of any ski-valley of that length. In each of the lines, write two integers separated by a space character, such that numbers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> in the <i>i</i>th line represent <i>(x<sub>i</sub>, y<sub>i</sub>)</i>, the <i>i</i>th field in the ski-valley.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 4
2 6 7 16
1 4 3 20
9 8 17 12

<b>Output:</b>
9
3 1
3 2
2 2
2 1
1 1
1 2
1 3
1 4
2 4
</pre>



______________________________________________________
ACFRAC||||||false||||||

<p>The problem description is the same as the problem <a href="http://www.spoj.pl/problems/CFRAC">CFRAC</a> and <a href="http://www.spoj.pl/problems/CFRAC2">CFRAC2</a>. </p>

______________________________________________________
BOX||||||true||||||


<p>There are n boxes on the circle. The boxes are numbered from 1 to n in clock wise order. There are balls in the boxes, and the number of all the balls in the boxes is not greater than n.
<p>
The balls should be displaced in such a way that in each box there remains no more than one ball. In one move we can shift a ball from one box to one of it's neighboring boxes.
<p>
Write a program that: 
reads from the standard input the number of boxes n and the arrangement of balls in the boxes, 
computes the minimal number of moves necessary to displace the balls in such a way that in each box there remains no more than one ball, 
writes the result in the standard output. 



*******InputConstraints*******

<p>
The first line of the input file contains an integer t representing the number of test cases. Then t test cases follows. Each test case has the following form:
<ul>
<li> The first line contains one positive integer n - the number of boxes
<li> The second line contains n nonnegative integer separated by single spaces. The i-th number is the number of balls in the i-th box.
</ul>


*******OutputConstraints*******

<p>For each test case, output one nonnegative integer - the number of moves necessary to displace the balls in such a way that in each box there remains no more than one ball. 


*******IOTestCases*******


<pre>
<b>Input:</b>
1
12
0 0 2 4 3 1 0 0 0 0 0 1

<b>Output:</b>
19
</pre>

______________________________________________________
RNG||||||true||||||


<p>LoadingTime got a RNG (<em>Random Number Generator</em>) from his classmate several weeks ago. And he spent a lot of time study it. He found that RNG can generate a real number in range [-<b>S</b>,<b>S</b>] by executing following steps. First RNG generates n integer <b>X</b><sub>1</sub>..<b>X</b><sub>n</sub>, the sum of which is equal to <b>S</b>. Then for each <b>X</b><sub>i</sub>, it generates a real number in range [-<b>X</b><sub>i</sub>,<b>X</b><sub>i</sub>] randomly. The output (a real number) of RNG will be the sum of the <b>N</b> generated real numbers. LoadingTime noticed that the distribution of the output was very interesting, and he wanted to know: for given <b>N</b> and <b>X</b>, what's the probability that the generated number is in range [<b>A</b>,<b>B</b>]. Could you help him? 

*******InputConstraints*******

<p>The first line contains an integer T representing the number of test cases.
<p>For each test case, the first line contains three integers <b>N</b>, <b>A</b>, <b>B</b>(1 &#8804; <b>N</b> &#8804; 10, -100 &#8804; <b>A</b> &#8804; <b>B</b> &#8804; 100) In the second line of the test case, you are given  <b>X</b><sub>1</sub>...<b>X</b><sub>n</sub>(1 &#8804; <b>X</b><sub>i</sub> &#8804; 10).

*******OutputConstraints*******

<p>For each test case, print a line contains a real number representing the probablity as the problem required. It must be printed with exactly nine decimal places.

*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 -100 100
10
1 10 90
10
1 -20 5
10
2 -20 5
5 5
5 -5 10
1 2 3 4 5

<b>Output:</b>
1.000000000
0.000000000
0.750000000
0.875000000
0.864720052

</pre>



______________________________________________________
MINUS||||||true||||||


<p>There are <em>n</em> integer numbers listed in one line. Every time you can arbitrarily choose two neighboring integers, kick them out and write down the result of the first number subtract the second number instead. Now, you want to get number <em>m</em> after you perform this operation <em>n-1</em> times.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line.</p>
<p>For each test case:</p>
<p>The first line contains two space-separated integers <em>n</em>(1&lt;= <em>n</em> &lt;=100) and <em>m</em>(-500&lt;= <em>m</em> &lt;=500). <em>n</em> lines follow, each contains a single integer (in the range [0,100]) denotes the original numbers.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>You should output <em>n-1</em> lines, each contains a single integer p<sub>i</sub>, which denotes that you are to wipe the p<sub>i</sub>-th and (p<sub>i</sub>+1)-th number in the current sequence and use their substraction instead. Each line of your output should not have any leading or trailing white spaces.</p>
<p>You may assume that there is always a valid solution to each test case in the input file. If there are multiple solutions, any of them will be accepted.</p>
<p>Print a blank line after each test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />5 4<br />12<br />10<br />4<br />3<br />5<br /><br /><strong>Output:</strong><br />2<br />3<br />2<br />1<br /></pre>


______________________________________________________
BALIFE||||||false||||||

<p>SuperComputer Inc. have built a super-fast computer server consisting of N hyper-scalar lightning-fast processors Beta 007. These processors are numbered from 1 to N and are used to process independent jobs. Every new incoming job is assigned to an arbitrary processor. Sometimes, a processor may be assigned too many jobs while other processors have a relatively light load (or even wait idly). In that case, the whole system undergoes rebalancing. </p>

<p>Rebalancing proceeds in rounds. In each round, every processor can transfer at most one job to each of its neighbors on the bus. Neighbors of the processor i are the processors i-1 and i+1 (processors 1 and N have only one neighbor each, 2 and N-1 respectively). The goal of rebalancing is to achieve that all processors have the same number of jobs. </p>

<p>Given the number of jobs initially assigned to each processor, you are asked to determine the minimal number of rounds needed to achieve the state when every processor has the same number of jobs, or to determine that such rebalancing is not possible. </p>


______________________________________________________
COUNT||||||true||||||


<h3>Background</h3>
<p>This problem is somewhat easier than the problem <a href="http://www.spoj.pl/problems/EASYPROB">A Very Easy Problem!</a> because of the super long time limit...</p>
<h3>Description</h3>
<p>Assurance Company of Moving (ACM) is a company of moving things for people. Recently, some schools want to move their computers to another place. So they ask ACM to help them. One school reserves <em>K</em> trucks for moving, and it has <em>N</em> computers to move. In order not to waste the trucks, the school ask ACM to use all the trucks. That is to say, there must be some computers in each truck, and there are no empty trucks. ACM wants to know how many partition shemes exists with moving N computers by K trucks, the ACM ask you to compute the number of different shemes with given N and K. You needn't care with the order. For example <em>N</em>=7,<em>K</em>=3, the the following 3 partition instances are regarded as the same one and should be counted as one sheme: "1 1 5","1 5 1","5 1 1". Each truck can carry almost unlimited computers!!</p>

*******InputConstraints*******

<p>Each line of the input contains two postisive integer N (1&lt;=N&lt;=5000) and K(1&lt;=K&lt;=N).Input is terminated by a line with N=K=0(this case should not be processed).</p>

*******OutputConstraints*******

<p>For each line, output the number of different partition sheme. To avoid big integers, you may output the answer modudo 1988.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 1<br />7 3<br />0 0<br /><br /><strong>Output:</strong><br />1<br />4<br /></pre>


______________________________________________________
BACKPACK||||||true||||||


<p>One day Blue Mary goes to a nearby supermarket to buy some goods. She has a backpack, whose capacity is <i>V-Max</i>. She finds that there are many goods in the market, each has a volume <i>V<sub>i</sub></i>(it will always be a multiple of 10 and less than 10000) and an importance <i>C<sub>i</sub></i>(1<= <i>C<sub>i</sub></i> <=5). Since she has almost unlimited money, the only problem she is to solve is how to choose goods such that the total volume won't exceed the capacity of the backpack and the sum of the product of the volume and the importance of each good is maximum. To be an excellent mathematician, she comes up with the answer quickly, and now she wants you to do a harder task. There are two kinds of goods: main goods and attachments. If you want to buy an attachment you must buy its main good before.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line.</p>
<p>For each test case:</p>
<p>The first line contains two space-separated integers <i>V-Max</i> (1<=<i>V-Max</i><=32000) and the number of the goods <i>N</i> (1<=<i>N</i><=60). N lines follow, each contains three space-separated integers <i>V<sub>i</sub></i>, <i>C<sub>i</sub></i> and a integer <i>u</i>. If <i>u</i> is not 0, this good is an attachment of good <i>u</i>(as the order in the input file).</p>
<p>To make the problem not too difficult, Blue Mary tells you that:</p>
<p>(A) An attachment won't have any attachments which belong to it.</p>
<p>(B) A main good will always have less than 3 attachments.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The first and the only line contains a single integer denoted the answer.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
1000 5
800 2 0
400 5 1
300 5 1
400 3 0
500 2 0

<b>Output:</b>
2200
</pre>



______________________________________________________
CRYPTO||||||false||||||

<p>Your task is to work as a cryptographer for some time, the reason is ...</p>
<p>Blue Mary has set a problem using English. Since the problem is too easy and it will be boring when solving it, she has deleted all the whitespaces and punctuations in the original problem description, and lowercased all the capital latin letters. Then, she randomly chose a permutation of the English lowercase letter alphabet, and then used the corresponding letters in place of the letters in the original text.</p>
<p>The encrypted text can be downloaded <a href="http://www.spoj.pl/content/john_jones:crypto.txt">here</a>.</p>
<p>There is no example for this problem.</p>
<p>Blue Mary's note: some tricky test cases were added on Nov. 25th, 2007 and the time limit has been changed. Programs have been rejudged and some "accepted" solutions got Wrong Answer. However, this problem can still be solved by quite clean code with length less than 1KB.</p>


______________________________________________________
ROLLBALL||||||false||||||

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Rolling Ball</TITLE>
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Problem</A></FONT></H2>

<P>A solid spherical ball of radius <b>R</b> rolls without slipping on the inside surface of a fixed cone, whose tip points downward. The half-angle at the
vertex of the cone is <b>u</b>. Initial conditions have been set up so that the ball travels around the cone in a horizontal circle of radius <b>l>R</b>, 
with the points on the ball that touch the cone tracing out a circle on the ball.
Determine the radius of the circle of these contact points, if you want the sphere to travel around the cone as fast as possible.
<p>


</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
Each line of input has integers <b>l</b> (R < l <= 1000000) <b>R</b> (0 < R <= 1000) and <b>u</b> (0 < u < 90) given in degrees.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input, output the radius of the circle of the contact points, round to integer.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
220000 100 29
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
46
</PRE>
</BODY>
</div>
<br />

<hr size="1" />
Problemsetter ---  Wu, Xiaogang
</HTML>



______________________________________________________
PEBBMOV||||||false||||||

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>A Game of Moving Pebbles</TITLE>
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Problem</A></FONT></H2>

<P>Two players play the following game.  At the beginning of the game they start with <b>n</b> (1<=<b>n</b><=100000) piles of stones. 
At each step of the game, the player chooses a pile and remove at least one stone from this pile and move zero or more stones from this pile to any other pile that still has stones.  A player loses if he has no more possible moves.  Given the initial piles, determine who wins: the first player, or the second player, if both play perfectly. 
<p>


</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
Each line of input has integers <b>0 < n <= 100000</b>, followed by <b>n</b> positive integers denoting
the initial piles.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input, output "first player" if first player can force a win, or "second player",
if the second player can force a win.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
3 2 1 3
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
first player
</PRE>
</BODY>
</div>
<br />

<hr size="1" />
Problemsetter ---  Chen, Jiahong
</HTML>



______________________________________________________
TRUTHORL||||||false||||||

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Truth Or Lie</TITLE>
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Problem</A></FONT></H2>

<P>Suppose you have <b>m</b> yes or no questions that you want to ask <b>n</b> people.  You are allowed to ask each person exactly
two different questions.  He/she will answer exactly one of them correctly and one of them incorrectly, you don't know which
is a correct answer and which is an incorrect one. Given their answers, determine the number of combinations of answers to the <b>m</b>
questions that can still be correct (i.e., no contradictions).<p>

</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
First line is the number of inputs.
For each set of input, start out with a line of  <b>n<=10000</b> and <b>m<=200</b>, followed by <b>n</b> lines.
The i-th line has four integers <b>a b c d</b>.  It means that the answer given by the i-th person for question a is b, and for question c is d.
Moreover, the answer "1" means yes, and "0" means no.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input, output "No Inference" if the answers do not help you eliminate any wrong combination
of answers or the number of combinations of possible answers is 0, otherwise output the size of the set of combinations of answers still possible.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
2
2 2
1 1 2 0
1 1 2 1
4 4
1 1 2 1
1 1 3 0
2 1 4 1
3 1 4 0
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
No Inference
2
</PRE>
</BODY>
</div>
<br />

<hr size="1" />
Problemsetter ---  sy
</HTML>



______________________________________________________
ONEINSTR||||||true||||||


<p>
A computer with only one instruction!
The instruction is: 

<pre>
SUBLEQ A B C
</pre>

This means: subtract the value in M(A) from M(B) and store it in M(B); if the result is non-positive jump to the instruction in position C. M(i) represents the value stored in memory position i. The computer has a memory of 9999 integer positions, numbered from 0 to 9998. C > 9996, indicates the end of the program.  Also, if A is negative, then the value of A is directly subtracted from M(B). <p>
Since there is only one instruction, it is unnecessary to represent its opcode explicitely in memory. Therefore, an instruction is stored in main memory using three consecutive memory positions, which correspond to the three instruction parameters.

The memory is organized as follows:

<pre>
Position Content
0-8      input/output variables (M0 to M8)
9-9998   program memory (instructions+data)
</pre>

The following pseudo-code shows the one instruction computer simulator:

<pre>
simulate(integer M[0..9998])
   integer pc,A,B,C
   pc = 9
   while (pc<9997)
      A = M[pc]; B = M[pc+1]; C = M[pc+2]
      if(A>=0) 
         M[B] = M[B] - M[A]
      else
         M[B] = M[B] - A
      if (M[B]>0)
         pc = pc + 3
      else
         pc = C
      end_if
   end_while
end_simulate
</pre>

Each iteration of the above while instruction is called a simulation cycle.  You are to translate postfix instructions into this machine language.  There are
at most 100 arithematic terms and 99 operators. Numerical constants are non-negative and less than or equal to 10000.


*******InputConstraints*******

<p>The input has several test cases, one test case per line. Each test case corresponds to an arithmetic expression in postfix notation. An expression may contain constants (integer values), input variables (M0 to M8) and arithmetic operators (+, -, *, /).  


*******OutputConstraints*******

<p>For each test case, a program must be printed using the following format: First line indicates m, the number of instructions of the program; and the following m lines contain the program, one instruction per line, where each instruction is represented by 3 integer values separated by one blank space.  Your outputed program must finish
within 10^7 simlation cycles for each test case.

*******IOTestCases*******


<pre>
<b>Input:</b>
100
M1 M2 -

<b>Output:</b>
4
0 0 12
-100 0 0
19 19 10000

4
0 0 12
1 2 15
2 0 18
21 21 10000
</pre>



______________________________________________________
YKH||||||true||||||


<h3>Background</h3>

<p>Poor You-Know-Who was out of business for quite some time,
being neither dead, nor alive. He would like to get rich so that
he can run for the post of Minister of Magic. From there he could
unfold at least some of his evil plots even if he lost most of
his magical powers. You are fed up with all this Harry Potter
business and decide to help You-Know-Who make some
dough. You-Know-Who inherited lots of magic powder that increases
one's sense of smell for a short period of time if inhaled. He
will sell it and you'll help him maximize the profit.
</p>

<h3>Problem</h3>

<p>You-Know-Who has <tt>C</tt> clients. Client <tt>i</tt> will
buy <tt>a[i]&#8722;b[i]*p</tt> powder if the unit price
is <tt>p</tt>. That is, if You-Know-Who shows a certificate
issued by the Minister saying that the asked price is the correct
price. Getting one such certificate involves paying a bribe
<tt>B</tt>. To maximize the profit he may buy several such
certificates and use for each client the one that maximizes his
profit. You must tell You-Know-Who what certificates he should
get. With some luck, Harry Potter is out!
</p>


*******InputConstraints*******

<p>The first line contains the number of testcases, which shall
be less than 20. The testcases follow. (Possible empty lines
between testcases should be ignored.)
</p>

<p>The first line of each testcase input contains two
non-negative integers: the bribe <tt>B</tt> and the number of
clients <tt>C</tt>. The next <tt>C</tt> lines describe each
client by two positive integers <tt>a[i]</tt> and <tt>b[i]</tt>
(on line <tt>i</tt>). You are guaranteed that all numbers in the
input are at most 2000.</p>


*******OutputConstraints*******

<p>For each testcase the output is a single
number, the maximum profit of You-Know-Who, and it should be
written on a line by itself. The answer should have either an
absolute or a relative error less than 1e-6.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
10 2
10 1
20 3
100 1
5 1

<b>Output:</b>
46.25
0
</pre>

<p>First testcase: If YKW would have only the first client then
he should choose to get a certificate for the price 5. This way
he will sell 5 grams of powder for a profit of 5x5-10=15.
Analogously, for the second client the optimal price would be
3.(3), which would make the client buy 10 grams of magic
powder. Choosing the optimal price for each client means that two
bribes must be payed, which leads to a profit of
5x5+10x3.(3)-2x10=38.(3). Nevertheless, YKW can win more money by
getting only one certificate for the price 3.75.  This way the
profit is 6.25x3.75+8.75x3.75-10=46.25.</p>

<p>The second testcase shows that sometimes it's better to
not sell magic powder to some clients.</p>



______________________________________________________
TILING||||||true||||||


<p>We say that a 2-dimensional, rectangular word w of size n?m (imagine it
as a board with letter written in the squares) can be tiled with a rectangular pattern p if there are such occurrences of p in w (but not necessarily
all of them) that no two of them overlap and each symbol (square) of w is covered by one of them.

Given such word w, find a rectangular pattern p of smallest size (area) wich the word w can be tiled with.

*******InputConstraints*******

<p>The first line of input contains a number t (1&#8804;t&#8804;100) that indicates the number of test cases to follow. Each test case begins with a line consisting of two positive integers n and m (1&#8804;n,m&#8804;1000) indicating dimensions of the board. n lines follow, each of them containing m small letters of the English alphabet (a,b,...,z).


*******OutputConstraints*******

<p>For each test case output the smallest possible area of a pattern p that can be used to tile the given board.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 3
aaa
aaa
aaa
aaa
4 4
abab
cdcd
abab
cdcd
3 4
aaaa
aaaa
aaab

<b>Output:</b>
1
4
12

</pre>



______________________________________________________
REMGAME||||||true||||||


<p>
Consider the following game. The game is played on a  5 x 5 board.  Initially  every  array  cell  has  a  piece 
in  it.  Two players  remove pieces alternatively  from  the  board.  The player  can  remove  any  number  of  consecutive pieces  in a row or column.
For example,  in  the configuration depicted below where one  indicates  a 
piece,  the  player  can  either  remove  one  piece  (<B>A1</B>, <B>A2</B>,  or 
<B>B1</B>),  or remove two pieces (<B>A1</B> and <B>A2</B>, or <B>A1</B> and
<B>B1</B>) simultaneously. The game ends when one player is forced to take the
last piece, and the other player wins the game.

<P>

<P>
<BR>

<DIV ALIGN="CENTER">
<TABLE CELLPADDING=3 BORDER="1">
<TR><TD ALIGN="CENTER">A </TD>
<TD ALIGN="CENTER"><B> 1</B></TD>
<TD ALIGN="CENTER"><B> 2</B></TD>
<TD ALIGN="CENTER"><B> 3</B></TD>
<TD ALIGN="CENTER"><B> 4</B></TD>
<TD ALIGN="CENTER"><B> 5</B></TD>
</TR>
<TR><TD ALIGN="CENTER"><B> A</B></TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> B</B></TD>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> C</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> D</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
<TR><TD ALIGN="CENTER"><B> E</B></TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
<TD ALIGN="CENTER">0</TD>
</TR>
</TABLE></DIV>

<P>

<P>
<BR>
Write  a  program  that  evaluates  board  configurations  from  this  game.  
The  program must  output  "winning" when there exists a winning move
that no matter how the opponent responds, it will force the opponent to take
the last piece. Otherwise, the program must output "losing". 


*******InputConstraints*******

<p> 
The first line contains <b>n</b>, the number
of test cases.  For each test case, a 5x5 grid
of an initial game configuration is shown.

*******OutputConstraints*******

<p>
For each case, output "winning" or "losing".


*******IOTestCases*******


<pre>
<b>Input:</b>
1 
1 0 0 0 0 
1 1 0 0 0 
1 1 1 0 0 
1 1 1 1 0 
1 1 1 1 1

<b>Output:</b>
winning
</pre>



______________________________________________________
CERC07B||||||true||||||


<p>The marketing and public-relations department of the Czech Technical University has designed
a new reconfigurable mechanical Flip-Flop Bill-Board (FFBB). The billboard is a regular two-
dimensional grid of R ? C square tiles made of plastic. Each plastic tile is white on one side and
black on the other. The idea of the billboard is that you can create various pictures by flipping
individual tiles over. Such billboards will hang above all entrances to the university and will be
used to display simple pictures and advertise upcoming academic events.
To change pictures, each billboard is equipped with a "reconfiguration device". The device is
just an ordinary long wooden stick that is used to tap the tiles. If you tap a tile, it flips over to
the other side, i.e., it changes from white to black or vice versa. Do you agree this idea is very
clever?

<p>Unfortunately, the billboard makers did not realize one thing. The tiles are very close to each
other and their sides touch. Whenever a tile is tapped, it takes all neighboring tiles with it and
all of them flip over together. Therefore, if you want to change the color of a tile, all neighboring
tiles change their color too. Neighboring tiles are those that touch each other with the whole
side. All inner tiles have 4 neighbors, which means 5 tiles are flipped over when tapped. Border
tiles have less neighbors, of course.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07b.jpg" alt="example"></img></center>

<p>For example, if you have the billboard configuration shown in the left picture above and tap the
tile marked with the cross, you will get the picture on the right. As you can see, the billboard
reconfiguration is not so easy under these conditions. Your task is to find the fastest way to
"clear" the billboard, i.e., to flip all tiles to their white side.


*******InputConstraints*******

<p>The input consists of several billboard descriptions. Each description begins with a line containing 
two integer numbers R and C (1 <= R,C <= 16) specifying the billboard size. Then there
are R lines, each containing C characters. The characters can be either an uppercase letter "X"
(black) or a dot "." (white). There is one empty line after each map. The input is terminated
by two zeros in place of the board size.


*******OutputConstraints*******

<p>For each billboard, print one line containing the sentence "You have to tap T tiles.", where
T is the minimal possible number of taps needed to make all squares white. If the situation
cannot be solved, output the string "Damaged billboard."instead.


*******IOTestCases*******

<pre>
<b>Input:</b>
5 5
XX.XX
X.X.X
.XXX.
X.X.X
XX.XX

5 5
.XX.X
.....
..XXX
..X.X
..X..

1 5
...XX

5 5
...X.
...XX
.XX..
..X..
.....

8 9
..XXXXX..
.X.....X.
X..X.X..X
X.......X
X.X...X.X
X..XXX..X
.X.....X.
..XXXXX..

0 0

<b>Output:</b>
You have to tap 5 tiles.
Damaged billboard.
You have to tap 1 tiles.
You have to tap 2 tiles.
You have to tap 25 tiles.

</pre>


______________________________________________________
CERC07C||||||true||||||


<p>Nowadays, everyone has a cellphone, or even two or three. You probably know where their
name comes from. Do you. Cellphones can be moved (they are "mobile") and they use wireless
connection to static stations called BTS (Base Transceiver Station). Each BTS covers an area
around it and that area is called a cell.

<p>The Czech Technical University runs an experimental private GSM network with a BTS right on
top of the building you are in just now. Since the placement of base stations is very important
for the network coverage, your task is to create a program that will find the optimal position
for a BTS. The program will be given coordinates of "points of interest". The goal is to find
a position that will cover the maximal number of these points. It is supposed that a BTS can
cover all points that are no further than some given distance R. Therefore, the cell has a circular
shape.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07c.jpg" alt="example"></center>

<p>The picture above shows eight points of interest (little circles) and one of the possible optimal
BTS positions (small triangle). For the given distance R, it is not possible to cover more than
four points. Notice that the BTS does not need to be placed in an existing point of interest.


*******InputConstraints*******

<p>The input consists of several scenarios. Each scenario begins with a line containing two integer
numbers N and R. N is the number of points of interest,1 <= N <= 2 000. R is the maximal
distance the BTS is able to cover, 0 <= R < 10 000. Then there are N lines, each containing two
integer numbers X_i, Y_i giving coordinates of the i-th point, |X_i|, |Y_i| < 10 000. All points are
distinct, i.e., no two of them will have the same coordinates.

<p>The scenario is followed by one empty line and then the next scenario begins. The last one is
followed by a line containing two zeros.

<p>A point lying at the circle boundary (exactly in the distance R) is considered covered. To avoid
floating-point inaccuracies, the input points will be selected in such a way that for any possible
subset of points S that can be covered by a circle with the radius R +0.001, there will always
exist a circle with the radius R that also covers them.


*******OutputConstraints*******

<p>For each scenario, print one line containing the sentence "It is possible to cover M points.",
where M is the maximal number of points of interest that may be covered by a single BTS.


*******IOTestCases*******

<pre>
<b>Input:</b>

8 2
1 2
5 3
5 4
1 4
8 2
4 5
7 5
3 3

2 100
0 100
0 -100

0 0

<b>Output:</b>

It is possible to cover 4 points.
It is possible to cover 2 points.
</pre>


<p><i>The first sample input scenario corresponds to the picture, providing that the X axis aims right
and Y axis down.</i>



______________________________________________________
CERC07H||||||true||||||


<p>A civil engineer that has recently graduated from the Czech Technical University encountered
an interesting problem and asked us for a help. The problem is more of economical than
engineering nature. The engineer needs to connect several buildings with an infrastructure.
Unfortunately, the investor is not the owner of all the land between these places. Therefore,
some properties have to be bought first.

<p>The land is divided into a regular "grid" of hexagonal parcels, each of them forms an independent
unit and has the same value. Some of the parcels belong to the investor. These parcels form
four connected areas, each containing one building to be connected with the others. Your task
is to find the minimal number of parcels that must be acquired to connect the four given areas.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07h.jpg" alt="example"></center>

<p>The whole land also has a hexagonal shape with six sides, each consisting of exactly H parcels.
The above picture shows a land with H = 4, parcels with letters represent the four areas to
be connected. In this case, it is necessary to buy four additional parcels. One of the possible
solutions is marked by crosses.


*******InputConstraints*******

<p>The input contains several scenarios. Each scenario begins with an integer number H,which
specifies the size of the land, 2 <= H <= 20. Then there are 2.H - 1 lines representing individual
"rows" of the land (always oriented as in the picture). The lines contain one non-space character
for each parcel. It means the first line will contain H characters, the second line H +1, and
so on. The longest line will be the middle one, with 2.H - 1 characters. Then the "length"
descends and the last line contains H parcels, again.

<p>The character representing a parcel will be either a dot (".") for the land that is not owned by
the investor, or one of the uppercase letters "A", "B", "C", or "D". The areas of parcels occupied
by the same letter will always be connected. It means that between any two parcels in the same
area, there exists a path leading only through that area.

<p>Beside the characters representing parcels, the lines may contain any number of spaces at any
positions to improve "human readability" of the input. There is always at least one space
between two letters (or the dots). After the land description, there will be one empty line and
then the next scenario begins. The last scenario is followed by a line containing zero.


*******OutputConstraints*******

<p>For each scenario, output one line with the sentence "You have to buy P parcels.", where
P is the minimal number of parcels that must be acquired to make all four areas connected
together.

<p>Areas are considered connected, if it is possible to find a path between them that leads only
through parcels that have been bought.


*******IOTestCases*******

<pre>
<b>Input:</b>
4
   B . . C
  . . . . C
 . A . . C .
. A A . . . .
 . A . . . .
  . . . D D
   . . . .

0

<b>Output:</b>
You have to buy 4 parcels.

</pre>


______________________________________________________
CERC07K||||||true||||||


<p>The Czech Technical University is rather old - you already know that it celebrates 300 years
of its existence in 2007. Some of the university buildings are old as well. And the navigation
in old buildings can sometimes be a little bit tricky, because of strange long corridors that fork
and join at absolutely unexpected places.

<p>The result is that some first-graders have often difficulties finding the right way to their classes.
Therefore, the Student Union has developed a computer game to help the students to practice
their orientation skills. The goal of the game is to find the way out of a labyrinth. Your task is
to write a verification software that solves this game.

<p>The labyrinth is a 2-dimensional grid of squares, each square is either free or filled with a wall.
Some of the free squares may contain doors or keys. There are four different types of keys and
doors: blue, yellow, red, and green. Each key can open only doors of the same color.
You can move between adjacent free squares vertically or horizontally, diagonal movement is
not allowed. You may not go across walls and you cannot leave the labyrinth area. If a square
contains a door, you may go there only if you have stepped on a square with an appropriate key
before.


*******InputConstraints*******

<p>The input consists of several maps. Each map begins with a line containing two integer numbers
R and C (1 <= R, C <= 100) specifying the map size. Then there are R lines each containing C
characters. Each character is one of the following:<br>
Hash mark '#' Wall<br>
Dot '.' Free square<br>
Asterisk '*' Your position<br>
Uppercase letter 'B','Y','R','G' Blue, yellow, red or green door<br>
Uppercase X 'X' Exit<br>

<p>Note that it is allowed to have
* more than one exit,<br>
* no exit at all,<br>
* more doors and/or keys of the same color, and<br>
* keys without corresponding doors and vice versa.<br>

<p>You may assume that the marker of your position ("*") will appear exactly once in every map.
There is one blank line after each map. The input is terminated by two zeros in place of the
map size.


*******OutputConstraints*******

<p>For each map, print one line containing the sentence "Escape possible in S steps.", where
S is the smallest possible number of step to reach any of the exits. If no exit can be reached,
output the string "The poor student is trapped!" instead.
One step is defined as a movement between two adjacent cells. Grabbing a key or unlocking
a door does not count as a step.


*******IOTestCases*******

<pre>
<b>Input:</b>
1 10
*........X

1 3
*#X

3 20
####################
#XY.gBr.*.Rb.G.GG.y#
####################

0 0

<b>Output</b>
Escape possible in 9 steps.
The poor student is trapped!
Escape possible in 45 steps.

</pre>


______________________________________________________
CERC07L||||||true||||||


<p>The Department of Computer Science and Engineering runs courses dealing not only with algo-
rithms but also with computer hardware. One such introductory course explains basic principles
of integrated circuits ("chips"), binary logic, boolean algebra, etc. As you may know, the very
basic units of logical circuits are called gates. A gate is an element performing one simple logical
operation. It can be connected to other gates using lines.


<p>Logical circuits may be drawn as pictures with the gates represented as squares with inputs on
the left and outputs on the right. In each square, there is a symbol that determines the gate
type: Number 1 denotes an OR gate (its outputs are 0 if and only if there is no input with the
value of 1), & is an AND gate (outputs are 1 if and only if there is no 0 input), and = is a XOR
gate (outputs are 1 if and only if there is an odd number inputs that have the value of 1).

<p>Your task is to scan such a "picture" and compute values of all named circuit outputs. The
lines may split and join again but you may assume that each "value consumer" (input port of
a gate or a named output) will be connected to exactly one "value source" (output port of a gate
or an input value). There will be no feedback loops, i.e., there exists no cycle that would lead
through the same gate twice.


*******InputConstraints*******

<p>The input contains several pictures. Each picture consists of at least one and at most 200 rows
composed of the following characters:
<p>* Space (" "). Empty space in the picture. Spaces are used to indent other characters to
appropriate locations, because the exact position of characters is often important. Trailing
spaces at the end of input rows may be present but may also be left out.
<p>* Dash ("-"). Horizontal line. It connects characters on its left and right together, those
characters will always exist and be able to "accept" the connection.
<p>* Pipe ("|"). Vertical line, connects characters that are directly above and below. Like
with the horizontal line, those characters will always accept the connection.
<p>* Plus sign ("+"). Line connection or a bend. Connects characters on all four sides. All
characters that are able to accept the connection are considered connected (there will
always be at least two). However, there may be sides that contain a non-empty character
that is not connected. For example, if a dash is present on a position directly below the
plus sign, they are not considered connected.
<p>* Lowercase letter x ("x"). Crossing of two lines without a connection. All four neigh-
boring characters will accept the connection. The character above is connected to the
one below and the character to the left with the one on the right, but there is no mutual
connection between these two pairs.
<p>* Equal sign ("="). Represents an input or output port. It always connects characters on
its left and right, at least one of these characters is the port. If there is a port on the
left, it may only be a value source. If there is a port on the right, it may only be a value
consumer.
<p>* Lowercase letter o ("o"). Negation. There will always be a gate on the left and a port
on the right of this character. It makes the particular gate output negated.
<p>* Hash mark ("#"). Gate, which has always a rectangular shape with two vertical and two
horizontal sides. The left vertical side may be connected to input ports, the right side to
output ports (possibly negated). No two gates will touch each other's side, which means
that any two vertically or horizontally neighboring hash marks are always parts of the
same gate.
<p>The rectangle size will always be at least 3 characters in both directions, which means there
is at least one character inside. All inner characters are empty (spaces), with exactly one
exception. That single non-empty character denotes the gate type (note that it may have
different meaning than outside the gate area) and will be a digit "one" ("1"), ampersand
("&"), or an equal sign ("=").

<p>* Binary digit ("0"and"1"). Input value of the circuit. It is connected to the character
on its right, which is always an equal sign.
<p>* Uppercase letter ("A" through "Z"). Named output of the circuit. It accepts connection
from its left, which is always an equal sign. Each letter will appear at most once, which
means the number of circuit outputs is between 0 and 26, inclusive.
Each picture will be terminated by a row consisting solely of asterisk ("*") characters (at least
one). The last picture will be followed by two such rows. No row in the input will be longer
than 200 characters.


*******OutputConstraints*******

<p>For each picture, print the values of all named outputs, sorted alphabetically. Each output row
should contain three characters: output name (one uppercase letter), equals sign, and a binary
value (zero or one). Print one empty line after each test case.


*******IOTestCases*******

<pre>
<b>Input:</b>
       0=+
         |
         | #######
         +=#     #
           # &   #o=--+
  1=------=#     #    |
           #     #    |
           #######    +--=### ###
                      |   #=#=#1#o==X
         1=-----------x--=# # ###
                 1=---x--=###
                      +------------=Y
***********************************
1=A
***
*


<b>Output:</b>
X=0
Y=1

A=1
</pre>


______________________________________________________
CERC07N||||||true||||||


<p>Binary numbers form the principal basis of computer science. Most of you have heard of other
systems, such as ternary, octal, or hexadecimal. You probably know how to use these systems
and how to convert numbers between them. But did you know that the system base (radix)
could also be negative. One assistant professor at the Czech Technical University has recently
met negabinary numbers and other systems with a negative base. Will you help him to convert
numbers to and from these systems.

<p>A number N written in the system with a positive base R will always appear as a string of
digits between 0 and R - 1, inclusive. A digit at the position P (positions are counted from
right to left and starting with zero) represents a value of R^P. This means the value of the 
digit is multiplied by R^P and values of all positions are summed together. 
For example, if we use the octal system (radix R = 8), a number written as 17024 has the following value:
<p>1.8^4 + 7.8^3 + 0.8^2 + 2.8^1 + 4.8^0 = 1.4096 + 7.512 + 2.8+4.1 = 7700

<p>With a negative radix -R, the principle remains the same: each digit will have a value of (-R)^P.
For example, a negaoctal (radix R = -8) number 17024 counts as:
<p>1.(-8)^4 + 7.(-8)^3 + 0.(-8)^2 + 2.(-8)^1 + 4.(-8)^0 = 1.4096 - 7.512 - 2.8+4.1 = 500

<p>One big advantage of systems with a negative base is that we do not need a minus sign to express
negative numbers. A couple of examples for the negabinary system (R = -2):
<p>
<table border=1>
 <tr><td>decimal</td>
     <td>negabinary</td>
     <td>decimal</td>
     <td>negabinary</td>
     <td>decimal</td>
     <td>negabinary</td>
 </tr>
 <tr>
     <td>-10<br>-9<br>-8<br>-7<br>-6<br>-5<br>-4</td>
     <td>1010<br>1011<br>1000<br>1001<br>1110<br>1111<br>1100</td>
     <td>-3<br>-2<br>-1<br>0<br>1<br>2<br>3</td>
     <td>1101<br>10<br>11<br>0<br>1<br>110<br>111</td>
     <td>4<br>5<br>6<br>7<br>8<br>9<br>10</td>
     <td>100<br>101<br>11010<br>11011<br>11000<br>11001<br>11110</td>
 </tr>
</table>

<p>You may notice that the negabinary representation of any integer number is unique, if no "leading
zeros" are allowed. The only number that can start with the digit "0", is the zero itself.


*******InputConstraints*******

<p>The input will contain several conversions, each of them specified on one line. A conversion
from the decimal system to some negative-base system will start with a lowercase word "to"
followed by a minus sign (with no space before it), the requested base (radix) R, one space, and
a decimal number N.

<p>A conversion to the decimal system will start with a lowercase word "from", followed by a minus
sign, radix R, one space, and a number written in the system with a base of -R.

<p>The input will be terminated by a line containing a lowercase word "end". All numbers will
satisfy the following conditions: 2 <= R <= 10, -1 000 000 <= N <= 1 000 000 (decimal).


*******OutputConstraints*******

<p>For each conversion, print one number on a separate line. If the input used a decimal format,
output the same number written in the system with a base -R. If the input contained such
a number, output its decimal value.

<p>Both input and output numbers must not contain any leading zeros. The minus sign "-"may
only be present with negative numbers written in the decimal system. Any non-negative number
or a number written in a negative-base system must not start with it.



*******IOTestCases*******

<pre>
<b>Input</b>
to-2 10
from-2 1010
to-10 10
to-10 -10
from-10 10
end

<b>Output</b>
11110
-10
190
10
-10

</pre>


______________________________________________________
CERC07P||||||true||||||


<p>In this problem, we will help the Faculty of Civil Engineering. They need a software to analyze
ground plans of buildings. Specifically, your task is to detect outlines of a building when all of
its corners are given.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07p.jpg" alt="example"></center>

<p>You may assume that each building is a rectangular polygon with each of its sides being parallel
either with X or Y axis. Therefore, each of its vertex angles is exactly either 90 or 270 degrees.


*******InputConstraints*******

<p>The input contains several buildings. The description of each building starts with a single
positive integer N, the number of corners (polygon vertices), 1 <= N <= 1000. Then there are N
pairs of integer numbers X_i,Y_i giving coordinates of individual corners, |X_i|, |Y_i| <= 10 000.

<p>You may assume that all corners are listed and no two of them have the same coordinates. The
polygon does always exist, it is closed, its sides do not intersect or touch (except neighboring
sides, of course), and it contains no "holes" inside. In other words, the outline is formed by one
closed line. The order of corners in the input file may be arbitrary.

<p>There is an empty line after each building, then the next one is described. After the last building,
there is a single zero that signals the end of input.


*******OutputConstraints*******

<p>For each building, output one line containing N characters without any whitespace between
them. The characters should be uppercase letters that specify directions of individual walls
(sides) when the building outline is followed. "N" stands for North (the positive direction of the
Yaxis), "E" for East (the positive direction of the X axis), "W" for West, and "S" for South.
The "walk" should start in the vertex that has been given first in the input and always proceed
in the clockwise direction.


*******IOTestCases*******

<pre>
<b>Input</b>
4
0 0
2 2
0 2
2 0

6
1 1
2 2
0 1
1 0
0 2
2 0

0

<b>Output</b>
NESW
WNESWN
</pre>

<p><i>The second sample input corresponds to the picture.</i>


______________________________________________________
CERC07R||||||true||||||


<p>Roshambo - this simple game is known all around the world. In German, it is called "Schnick,
Schnack, Schnuck", in Japanese "Janken", in Spanish "Cachip??n",in Polish "Papier, kamie?±, noA?yce".
The Czechs call it "K??men, n?¹A¾ky, pap?­r".

<p>Whatever is the name of the game, its principles remain the same. Two players simultaneously
form their hand into one of three possible shapes (symbols): Rock (closed fist), Paper (open
hand), or Scissors (two fingers extended). If both of them show the same symbol, it is a tie
and no points are given. Otherwise, one of the symbols wins: Rock blunts Scissors, Scissors cut
Paper, and Paper covers Rock.

<p>Czech Technical University students also know the game very well and use it to resolve small
disputes. Imagine, for example, two students living together in one room. Yesterday evening,
there was a small celebration, and in the morning, no one wants to go to the lectures. They
agreed that one person would be enough to take notices for both, but who will be the poor one.
Roshambo is a very effective way to decide.

<p>Did you know there are even the World Series of Roshambo. Our organizing team would like
to host the World Championships in 2009. Your task is to help us in developing a Roshambo
scoring system and write a program that evaluates one game between two players.

<p>Since the participants will come from different countries, the system must accept input in various
languages. The following table shows names of three Roshambo symbols. Note that in some
languages, there may be two different words for the same symbol.

<p>
<table border=1>
  <tr><td><b>Language</b></td>
      <td><b>Code</b></td>
      <td><b>Rock</b></td>
      <td><b>Scissors</b></td>
      <td><b>Paper</b></td>
  </tr>
  <tr><td>Czech<br>English<br>French<br>German<br>Hungarian<br>Italian<br>Japanese<br>Polish<br>Spanish</td>
  <td>cs<br>en<br>fr<br>de<br>hu<br>it<br>jp<br>pl<br>es</td>
  <td>Kamen<br>Rock<br>Pierre<br>Stein<br>Ko | Koe<br>Sasso | Roccia<br>Guu<br>Kamien<br>Piedra</td>
  <td>Nuzky<br>Scissors<br>Ciseaux<br>Schere<br>Ollo | Olloo<br>Forbice<br>Choki<br>Nozyce<br>Tijera</td>
  <td>Papir<br>Paper<br>Feuille<br>Papier<br>Papir<br>Carta | Rete<br>Paa<br>Papier<br>Papel</td>
 </tr>
</table>


*******InputConstraints*******

<p>The input contains several games. Each game starts with two lines describing players. Each of
these two lines contains two lowercase letters specifying the language used by the player (see the
language code in the table above), one space, and a player name. The name will consist from
at most twenty upper- or lower-case letters.

<p>After the players description, there are at most 100 lines containing individual rounds. Each
round is described by two words separated with one space. The words name the symbol shown
by the first and second player, respectively. All symbols are named in the mother tongue of the
concerned player. All allowed words are shown in the table above, the first letter will be always
in uppercase, all other letters in lowercase.

<p>The last round is followed by a line containing one single dash character ("-") and then the next game begins. The only exception is the last game in the input, which is terminated by a dot
(".") instead of the dash.



*******OutputConstraints*******

<p>For each game, print five lines of output. The first line should contain the string "Game #G:",
where G is the number of the game, starting with one.

<p>The second line will contain the first player name followed by a colon (":"), one space and the
number of rounds won by that player. The number should be followed by one space and the
word "points". Use the singular form "point" if (and only if) the number of points of the
player equals one.

<p>The third line has the same format and shows the second player's name and points.

<p>The fourth line displays the outcome of the game. It must contain the word "WINNER" followed
by a colon, space and the name of the player who gained more points. If both players have the
same number of points, the fourth line will contain words "TIED GAME" instead.

<p>The fifth line is left empty to visually separate individual games.


*******IOTestCases*******

<pre>
<b>Input</b>
cs Pepik
en Johnny
Nuzky Scissors
Papir Rock
Papir Scissors
-
de Gertruda
cs Lenka
Stein Papir
Schere Kamen
.

<b>Output</b>
Game #1:
Pepik: 1 point
Johnny: 1 point
TIED GAME

Game #2:
Gertruda: 0 points
Lenka: 2 points
WINNER: Lenka

</pre>


______________________________________________________
CERC07S||||||true||||||


<p>Somewhere deep in the Czech Technical University buildings, there are laboratories for examin-
ing mechanical and electrical properties of various materials. In one of yesterday's presentations,
you have seen how was one of the laboratories changed into a new multimedia lab. But there
are still others, serving to their original purposes.

<p>In this task, you are to write software for a robot that handles samples in such a laboratory.
Imagine there are material samples lined up on a running belt. The samples have different
heights, which may cause troubles to the next processing unit. To eliminate such troubles, we
need to sort the samples by their height into the ascending order.

<p>Reordering is done by a mechanical robot arm, which is able to pick up any number of consecutive
samples and turn them round, such that their mutual order is reversed. In other words, one
robot operation can reverse the order of samples on positions between A and B.

<p>A possible way to sort the samples is to find the position of the smallest one (P_1) and reverse
the order between positions 1 and P_1, which causes the smallest sample to become first. Then
we find the second one on position P_2 and reverse the order between 2 and P_2. Then the third
sample is located etc.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07s.jpg" alt="example"></center>

<p>The picture shows a simple example of 6 samples. The smallest one is on the 4th position,
therefore, the robot arm reverses the first 4 samples. The second smallest sample is the last one,
so the next robot operation will reverse the order of five samples on positions 2-6. The third
step will be to reverse the samples 3-4, etc.

<p>Your task is to find the correct sequence of reversal operations that will sort the samples using the above algorithm. If there are more samples with the same height, their mutual order must
be preserved: the one that was given first in the initial order must be placed before the others
in the final order too.



*******InputConstraints*******

<p>The input consists of several scenarios. Each scenario is described by two lines. The first line
contains one integer number N, the number of samples, 1 <= N <= 100 000. The second line lists
exactly N space-separated positive integers, they specify the heights of individual samples and
their initial order.

<p>The last scenario is followed by a line containing zero.



*******OutputConstraints*******

<p>For each scenario, output one line with exactly N integers P_1,P_2,...P_N, separated by a space.
Each P_i must be an integer (1 <= P_i <= N) giving the position of the i-th sample just before the
i-th reversal operation.

<p>Note that if a sample is already on its correct position P_i, you should output the number P_i
anyway, indicating that the "interval between P_i and P_i" (a single sample) should be reversed.


*******IOTestCases*******

<pre>
<b>Input</b>
6
3 4 5 1 6 2
4
3 3 2 1
0

<b>Output</b>
4 6 4 5 6 6
4 2 4 4

</pre>


______________________________________________________
CERC07W||||||true||||||


<p>Czech Technical University has the word "technical" in its name. Beside others, this means
that lectures in physics are important here. Do you still remember some of the basic physical
principles.

<p>For example, imagine a simple glass of water. Or, we will rather call it a cup to avoid ambiguity of this word. So, imagine a simple cup (made of glass) that is partially filled with water. You
might have noticed that the stability of such a cup depends on the amount of water inside. If
you brush against a full cup, it is relatively easy to knock it down and spill its contents. If the
cup is empty, there is fortunately nothing to be spilled, but other than that, the situation does
not improve much - it is still easy to knock the cup down with only a little force. The best
stability is usually achieved with a "half-full" cup.

<p>In this problem, your task is to determine the water level that makes a cup as much stable as
possible. For the purpose of this problem, we will make a simple assumption that the "stability"
of a cup is higher, if its center of mass (sometimes also called the center of gravity) is lower
(closer to the bottom).

<p>The center of mass can be informally defined as follows: Imagine that glass and water consist of
a very large number of very small particles. Then the center of mass is an average of the position
of all these particles. The average is weighted by particle masses. Since the density of glass is
approximately 2 500 kg.m-3 and the density of water only 1 000 kg.m-3, we will suppose that
the mass of a glass particle is 2.5 times higher than the mass of a water particle of the same
size.

<p>All cups considered in this problem will have an exact rotary shape. But their radius may vary
with the height - some cups are wider at the top, others are wider at the bottom. Also, the
thickness of the glass may not be constant.

<p><center><img src="http://www.spoj.pl/content/carl:cerc07w.jpg" alt="example"></center>

<p>The left figure shows a typical cup considered in this problem. It can be fully described by its
height (H), thickness of the bottom (B), and two functions R and T . Both of these functions
take a current height as their argument and they give the outer radius (R) and glass thickness (T )
in the appropriate height. Please note that the thickness is always measured strictly horizontally
and may therefore not reflect the "real thickness" of the glass in its usual meaning.


*******InputConstraints*******

<p>The input contains several cup descriptions. Each description consists of three lines. The first
line contains two numbers: H (cup height) and B (bottom thickness), 0 < B < H <= 100.
The second line contains an expression R(x) (radius), the third line an expression T (x) (glass
thickness). All data are given in centimeters. The last description is followed by a line with two
zeros.

<p>The expressions will contain only digits ("0" through "9"), decimal points ("."), four basic
operators ("+", "-", "*", and "/"), parentheses ("("and")"), and the lowercase letters "x"
denoting the input variable (height measured from the cup bottom).

<p>Vx, 0 <= x <= H, the radius will satisfy: 0.1 < R(x) <= 100
<p>Vx, B <= x <= H, the thickness will satisfy: 0.1 <= T (x) < R(x)

<p>Arithmetical operators have their usual meaning and priorities, i.e., multiplication and division have a higher priority than addition and subtraction.


*******OutputConstraints*******

<p>For each cup, output the sentence "Pour L litres / W cm of water.", where L is the
amount of water that must be poured into the cup to reach the maximal stability (in litres). W
is the water level (in centimeters) measured from the bottom of the cup. Both numbers must
be given with exactly three decimal digits.



*******IOTestCases*******

<pre>

<b>Input</b>
9 1
3+x/6
17/8-x/8
10 1
(x+10)
10/(x+10)
0 0

<b>Output</b>
Pour 0.030 litres / 3.365 cm of water.
Pour 0.878 litres / 2.193 cm of water.
</pre>


______________________________________________________
MINDIST||||||true||||||


<p>Given an weighted tree, you are to find two nodes A and B of the tree(A and B needn't to be different), such that the length of the path between A and B is less than or equals to a given integer S, and the maximum distance from each node of the tree to this path is minimum.</p>

*******InputConstraints*******

<p>The first line of the input contains a single integer T, the number of test cases. T blocks follow.</p>
<p>For each test case, the first line contains two space-separated integer N (1<=N<=100000) and S(0<=S<=100000000).N-1 lines follow, each contains three integers X(1<=X<=N), Y(1<=Y<=N) and Z(1<=Z<=1000), denotes that there is an (undirected) edge weighted Z between node X and Y. The input is correct.</p>

*******OutputConstraints*******

<p>T lines, each contains a single integer denoted the minimum distance.</p>

*******IOTestCases*******

<pre><b>Input:</b>
2
5 2
1 2 5
2 3 2
2 4 4
2 5 3
8 6
1 3 2
2 3 2
3 4 6
4 5 3
4 6 4
4 7 2
7 8 3

<b>Output:</b>
5
5

</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
CANDY||||||false||||||

<p>Jennifer is a teacher in the first year of a primary school. She has gone for a trip with her class today. She has taken a packet of candies for each child. Unfortunatelly, the sizes of the packets are not the same. </p>

<p>Jennifer is afraid that each child will want to have the biggest packet of candies and this will lead to quarrels or even fights among children. She wants to avoid this. Therefore, she has decided to open all the packets, count the candies in each packet and move some candies from bigger packets to smaller ones so that each packet will contain the same number of candies. The question is how many candies she has to move. </p>


______________________________________________________
FCTRL4||||||false||||||

<p>Tom is fascinated by big numbers. Most of all he likes factorials. First, he computed <strong>N!</strong> for some small values of <strong>N</strong>. But factorials were getting longer and longer very quickly and each of them had a long sequence of zeroes at its end. Since he was unable to consider so many digits in his research and he thought that the research on zeroes would be boring, he decided to focus on the last non-zero digit of factorials.</p>
<p>For example 4!=24 so the last non-zero digit is 4. For <strong>N</strong>=5 we have 5!=120 and the last non-zero digit 2.</p>
<p>Tom needs to know the last non-zero digit of <strong>N!</strong> for several specific values of <strong>N</strong>. Help him please.</p>

______________________________________________________
LABYR2||||||false||||||

<p>Fred is a robotic mouse built by a group of students of artificial intelligence. Fred can move around in the labyrinth shown in the picture below. Whenever Fred comes to a place marked by a number, he has to choose one of the possible directions. Behavior of the mouse should look chaotic and complex enough so that it will impress students' supervisor. </p>
<pre>
+--------4
|        |
|  8--9  |
|  |  |  |
2--7--0  |
|  |     |
1  6-----+
</pre>
<p>Numbered places in the labyrinth are called nodes. Fred has one integer X stored in its memory and can perform some calculations. In each node (except node 1) he chooses a direction according to X, decreases X by 1 and goes to the chosen node. The direction is chosen according to this rules: </p>
<pre>
Node 2: Compute X mod 3.
        If the result is 0, go to 7
                         1, go to 1
                         2, go to 4.

Node 4: Let Y be X written backwards (in decimal system).
        If Y>X then go to 6 otherwise go to 2.

Node 6: Compute the number of digits of X (in decimal system).
        If the result is even then go to 4 otherwise go to 7.

Node 7: Compute (X*X) mod 7.
        If the result is 0 go to 2
                         1 go to 6
                         2 go to 8
                         4 go to 0.

Node 8: Compute X mod 5.
        If the result is 2 or 3 then go to 7 otherwise go to 9.

Node 9: If you have come from 8 then go to 0.
        If you have come from 0 then go to 8.

Node 0: Let Y be the third least significant digit of X in decimal system
        (if X<100 then Y=0). If Y<=7 then go to 7 otherwise go to 9. 
</pre>
<p>At the beginning of each experiment, the experimenter puts the mouse in the node 0 and initializes value X by voice. After that, the mouse starts to move. The mouse displays current value of X on its digital display. The experiment finishes when the mouse enters the node 1, the result of the experiment is the number displayed. If the value of X decreases to zero, the experiment fails and its result is -1. </p>

______________________________________________________
RAIN3||||||false||||||

<p>Doctor Jones is a famous archeologist. He did some research on the Tiribaki Islands recently. His most famous discovery was the Meteoronome - a machine with a yellow button used by the Tiribakian highest priest to predict the weather. The Meteoronome had been set up by the gods at the Beginning of Time. Tiribakians pressed the button every day. As a result, the Meteoronome produced a number - the expected rainfall in millimetres for the next day. More precisely, after <i>i</i> button hits (counted since the Beginning of Time) Meteoronome gives the expected rainfall for the day <i>i</i> since the Beginning of Time. </p>

<p>Unfortunately, the Meteoronome has not been used for several thousands of years and nobody knows how many steps should be performed to reach the current date. Researchers have spent a lot of effort to find out how the Meteoronome works. A mathematical model has been proposed: The Meteoronome is initialized by a pair of integers, s[0] and t[0]. For the <i>i</i>-th step, the Meteoronome computes the values </p>
<pre>
s[i] = (78901 + 31*s[i-1]) mod  699037
t[i] = (23456 + 64*t[i-1]) mod 2097151
</pre>
<p>The output of the i-th step is the number</p>
<pre>
a[i]=(s[i] mod 100 + 1) * (t[i] mod 100 + 1)
</pre>
<p>Doctor Jones's friend, Ms. Linda Watson, is now planning a holiday on Tiribaki Islands. She would like to stay there as long as possible but she hates the rain. She can stand no more than M millimetres of rainfall during her entire stay on Tiribaki. </p>

<p>Doctor Jones wants to help his friend and to compute the longest period which she can safely stay on Tiribaki. He simulated <i>N</i> steps of the Meteoronome. This way, he obtained a sequence of numbers a[1],a[2],...,a[N] which represent predictions for <i>N</i> subsequent days. Now he wants to find the largest <i>K</i> such that for each period of at most <i>K</i> subsequent days from day <i>i</i> to day <i>j</i> the sum of the predictions a[i]+a[i+1]+...+a[j] is less than or equal to <i>M</i>. Linda can be sure that if she stays on Tiribaki for at most <i>K</i> days, she can endure the rain (provided that <i>N</i> is large enough). 


______________________________________________________
KROW||||||false||||||

<p>Hansel and Gretel do not listen to their teacher at school. Instead they secretly play a game called K-In-A-Row. One day in the evening they started to argue who had won more games that day. They collected all the papers they had used for playing the game and they started to count how many times each of them had won. But it was very tedious and they were sleepy. Help them to count how many games each of them had won.</p>
<p>K-In-A-Row is played in a square grid with M times N squares. Two players alternate in their moves. A player chooses an empty square and fills in his/her sign (Hansel uses cross 'x' and Gretel uses circle 'o'). The game is won by the player who first places at least K his/her own signs in a row (either horizontally, vertically or in one of the two diagonal directions). The game stops immediately after one of the players completes K of his/her signs in a row; thus it may never happen that both players have completed K of their signs in a row. If no player creates such a row, nobody wins.</p>

______________________________________________________
CAKE2||||||false||||||

<p>Some time ago a VERY huge cake was made in the village called Nalomena Trieska. Well, it was infinitely large and infinitely thin. For our needs it looked exactly like an infinite plane. It was not very tasty, so nobody wanted to eat it. Instead, local children started to play with it. Each of them drew one straight line on the plane. These lines divided the plane into many parts. For a few hours the children were happy, they jumped from one part into another and played other similar games. But then little Tommy suddenly asked: "How many parts does the cake have?" "1999." answered Martin. "No, 2000 !" replied Richard. "Well, I think it's only 1748." stated Michael. And they started to argue. Now their parents need your help, because the children spend all their time counting the parts of the cake. </p>


______________________________________________________
TROLLS||||||true||||||


<p>In a secret forest, there are many trolls. They are intelligent and most of them even knows programming languages C or PASCAL. They have written many programs. With their super computers, their programs will run for a very short time and they can get the correct answer. Being an excellent programmer, you can even come up with the answer without computers!!!</p>

*******InputConstraints*******

<p>There's no real input file. The four programs can be downloaded <a href="http://www.spoj.pl/content/john_jones:trolls.zip">here</a>.

*******OutputConstraints*******

<p>For <b>program1.txt</b> and <b>program2.txt</b> in the zip file:</p>
<p>Your output should contain a single integer denoting the number of "*" the program will output.</p>
<p>For <b>program3.txt</b> and <b>program4.txt</b> in the zip file:</p>
<p>Your output should contain a single integer denoting the number the program will output.</p>
<p>You can merge the 4 output lines together to get the real output file and submit it.</p>

*******IOTestCases*******

<p>If <b>program1.txt</b> is </p>
<pre>
var i:integer;
begin
  for i:=2 to 8 do write('*');
end.

#include &lt;stdio.h>
void main() {
  int i;
  for(i=2; i<=8; i++) printf("*");
}
</pre>
<p>The corresponding line should be:</p>
<pre>
7
</pre>
<p>If <b>program3.txt</b> is </p>
<pre>
var a, i: integer;

begin
  a := 0;
  for i:= 1 to 9 do
    a := a * 10 + i;
  writeln(a);
end.


#include &lt;stdio.h>

void main() {
  int i, a;
  a = 0;
  for(i=1; i<=9; i++)
    a = a * 10 + i;
  printf("%d\n", a);
}
</pre>
<P>The correspoding line should be</p>
<pre>
123456789
</pre>

______________________________________________________
GETBACK||||||false||||||

<p>Somewhere deep in a desert lives a small, completely forgotten tribe N'Gubara. All the men, women and children of the tribe live with a few camels in the N'Gubara oasis (the N'Gubara people don't have great creativity when it comes to geography names). These poor people have only the N'Gubara well, a few acres of irrigated land and the N'Gubara cave. Yes, the cave. </p>

<p>You do not remember exactly how you have come to N'Gubara. Maybe your car broke when you travelled across the desert. Maybe you jumped out of an airplane. Maybe you were brought here by Martians. But this does not matter now. You know that you are here, pretty far from any civilization. And you desperately want to go home. </p>

<p>The only possibility how to get home is to walk across the desert to Desertville, the closest city. You have to use paths in the desert shown in your map. Each such path connects two restpoints. The N'Gubara oasis and Desertville are also considered to be restpoints. You can walk, but you need water. For each mile travelled, you have to drink one unit of water. You are able to carry at most C units of water at once. Thus, you can never walk more than C miles without replenishing your water supply. The shortest way to Desertville is probably much longer than C miles. It would thus seem that you will stay in N'Gubara forever, but there's a trick: at the end of each path, there is a restpoint with an empty water reservoir. You can transport water into a reservoir from N'Gubara or from other reservoirs where you stored some water previously. You can then use the stored water later on (the water doesn't evaporate). Of course, you can take only as much water from any reservoir as you brought into it. You may use as much water from the N'Gubara oasis as you need, but since water is very valuable in the desert, you promised that you will use only the minimal amount needed for your return to Desertville. In this task, we want you to compute the minimal amount of water you need. </p>


______________________________________________________
PUZZLE2||||||false||||||

<p>Sam loves all kinds of puzzles. Recently he received a very special puzzle - a grid of N x M squares, each square is occupied either by a red or by a blue pebble. The puzzle is controlled by several buttons. </p>

<p>Each row of the grid has its corresponding black button. When you press a black button, a complicated mechanism of the puzzle flips the colors of all pebbles in the row corresponding to that button (all red pebbles in this row become blue and vice versa). </p>

<p>Each column of the grid has its corresponding white button. When you press exactly two white buttons simultaneously, the puzzle mechanism exchanges the contents of the two columns corresponding to those buttons without changing the order of the pebbles in the columns. </p>

<p>Sam has found the puzzle very interesting. Unfortunately, he lent it to his daughter Ann yesterday. She was able to understand the idea of the puzzle very quickly and she gave him this teasing task. She drew two arrangements - initial and final and she changed the colors of the pebbles according to the initial arrangement. Sam's task is to decide whether there exists a sequence of puzzle operations which transforms the initial arrangement of the puzzle to the final arrangement. </p>


______________________________________________________
CANDY2||||||false||||||

<p>Little Michael loves candies. Most of all, he likes chocolate, strawberry and banana flavored ones. No wonder that he has candy bags everywhere - there are at least four bags on his table, one or two in the pockets of his jeans, and one under his bed (just in case). Each bag contains some candies of all three flavors. Whenever he wants to eat a candy, he finds the nearest bag (which is usually is not very far because he has really A LOT of them) and eats the candy he wants.</p> 

<p>Yesterday, he wanted a strawberry one, so he opened one of his bags and... It is almost impossible to describe how great his disappointment was when he found out that there were no strawberry candies left in that bag. To make the matters worse, there were also none in the second bag he found. He was sure that he had lots of strawberry candies left, but he didn't know in which bags they were. Therefore, he decided to reorganize his candies, and keep the candies of the three different flavors in three distinct bags. He brought all his bags into the center of his room and realized, that there are really an awful lot of them. </p>

<p>Michael has N bags full of candies. He knows the number of candies of each flavor in each bag. He wants to put all chocolate ones into one bag, all strawberry ones into another bag and all banana ones into yet another bag. He has to move the candies one-by-one, because he always has to look at it to determine its flavor. Moving one candy from one bag into another takes 1 second. Your task is to select the bag for each flavor, so that the total time required for Michael to move all the candies into their bags would be minimal. </p>


______________________________________________________
PIB||||||false||||||

<p>
You might have heard of the Fibonacci numbers and of the number <b>pi</b>. If you let these two ideas
merge, a new and esoteric concept comes into being: <b>the Pibonacci numbers</b>. These can be defined for
real <b>x>=0</b> by:
</p>

<table width="90%" class="podklad2">
<tr>
<td nowrap><b>P(x) = 1</b></td>
<td>for <b>0&lt;=x&lt;4</b></td>
</tr>
<tr>
<td nowrap><b>P(x) = P(x-1) + P(x-pi)</b></td>
<td>for <b>4&lt;=x</b>,</td>
</tr>
</table>

<p>
where <b>pi = 3.1415926535... </b> In this problem, you are asked to compute <b>P(x)</b>
for a given <b>x</b>.
</p>


______________________________________________________
GOSSIPER||||||false||||||

<p>Doulnee Keltchow is a small town in the middle of nowhere; what makes it so famous is the number of gossipers who live there. Every morning, each gossiper finds out a new gossip, a gossip so unique that nobody else in the town knows it. The gossipers talk, gossip and exchange rumors all day long. What happens when two gossipers meet? Of course, they exchange all the gossips they have heard so far. Your task is to determine whether every gossiper will know all the gossips by the end of the day. </p>


______________________________________________________
FAIRONOT||||||false||||||

<p>It is not an easy job to be a coach of a football team. Especially if you do not coach great teams like Ajax, Inter, Dynamo (ok, fill in the name of your dream team), but only a mediocre one like FC Dead Horse, playing in the second league. The season is almost over, only a few matches are left to play. All of sudden the team manager comes to you and tells you bad news: the main sponsor of your club is not happy with your results and decided to stop sponsoring your team, which probably means the end of your club. The sponsor's decision is final and there is no way to change it unless... unless your team miraculously wins the league.

<p>The manager left you in deep thought. If you increase the number of practices and offer players a generous bonus for each match, you may be able to win all the remaining matches. Is that enough? You also have to make sure that teams with many points lose against teams with few points so that in the end, your team will have more points than any other team. You know some of the referees and can bribe them to manipulate the result of each match. But first you need to figure out how to manipulate the results and whether it is possible at all. </p>

<h3>Problem Description</h3>
<p>There are N teams numbered 1 through N, your team has the number N. The current number of points of each team and the list of remaining matches are given. Your task is to find out whether it is possible to manipulate each remaining match so that the team N will finish with strictly more points than any other team. In every match, the winning team gets 2 points, the losing team gets 0. If the match ends with a draw, both teams get 1 point. </p>


______________________________________________________
GARDEN||||||true||||||


<p>Little Jelly is playing in the Golden Garden alone. She is such a pretty girl that the Evil Uncle wants to catch her. The Evil Uncle drives his flying saucer over the Golden Garden and trys to inhale Little Jelly.
<p>It is known that the Golden Garden is a perfect rectangle and the Evil Uncle's flying saucer can inhale her if and only if she is in a circle with a certian radius around the flying saucer.
<p>Your task is to avoid the Evil Uncle catching Little Jelly. First of all, you should find out the common area of the gardan and the inhaling circle.</p>


*******InputConstraints*******

<p>There are multiple test cases in the input file.
First line of each test case are three integers x, y and r, For the coordinate of the center of the inhaling circle.
<p>The second line contains four integers x1, y1, x2 and y2. Which are the coordinate of the Gold Garden. The Gold Garden is such a perfect rectangle so that its sides are parallel to the axis.
<p>All numbers in the input are integers and do not reach 1000 by their absolute values. Sides of the Golden Garden are non-zero.</p>


*******OutputConstraints*******

<p>For each test cases, output only one line with one real number which is the common area of the garden and the circle. Your answer must be accurate up to 0.000001.</p>


*******IOTestCases*******

<pre><b>Input:</b>
0 0 5
3 3 7 7

<b>Output:</b>
0.547426365104
</pre>
<b>Warning: enormous input/output data, be careful with certain languages</b>


______________________________________________________
FLOWERS||||||false||||||

<p>Bratislava has a long tradition in organizing an international flower exhibition &#8211; Flora. Professor Andrew as a true flower lover visited the Flora exhibition also this year. He was pleased by the most beautiful flowers and other plants of the world &#8211; roses, orchids, magnolias, cactuses. All flowers were nicely arranged. 

<p>The flower arrangement that was the most appealing to him (at least mathematically) was composed of many kinds of flowers arranged in a rectangular grid, such that each row of the grid contained each kind of flowers exactly once and each column of the grid contained each kind of flowers at most once.

<p>Professor Andrew is a good mathematician and soon he realized that the number of columns of the grid has to be the same as the number of different kinds of flowers in the arrangement. But soon he encountered a problem he was unable to solve: He would like to add more rows of flowers to the arrangement without violating the rules stated above. (Note that he may not modify the existing rows and therefore he may not use any new kinds of flowers in the new rows.) Help him add as many rows as possible! </p>


______________________________________________________
DEPEND||||||false||||||

<p>We bought a brand new computer and now we would like to install an operating system. The only problem is that our chosen operating system consists of many packages and they cannot be installed in an arbitrary order. E.g. you cannot install the package tuxracer, which depends on the package libSDL, before you install libSDL. But libSDL can depend on another packages and so on. The packages may only be installed one at a time. You may install a package only if you already installed all packages it depends on. Your task is to determine how many packages can be installed on our computer. </p>


______________________________________________________
FOREST||||||true||||||


<p>Given a directed graph, may contains repeated edges. We assume that the graph contains and only contains K edge-disjoint branchings rooted by node 0.<br />A branching for a graph is a set of directed edges that from a certain root (root, in this problem, is node 0) we can find one path to every other node in the graph by only the edges in the branching.<br />K edge-disjoint branching is K branchings that share no common edges.<br />Your task which is easy and funny is to find out the K branchings.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer T, (T&lt;=20), denoting the number of test cases.<br />For each test case:<br />The first line contains two integers N and K, (2&lt;=N&lt;=500,2&lt;=K&lt;=6), which is the number of the nodes in the graph and the number of edge-disjoint branchings.<br />Then next (N-1)*K lines contains the information about the edges. There are 2 integers X and Y in every line, meaning there exist an edge from X to Y in the graph.</p>

*******OutputConstraints*******

<p>You should output the branchings you have found.<br />For every test cases, print the number of test case at the start of output, then you should output K lines.<br />Each line is about a branching which contains N-1 integers that the ID of the edges in this branching.<br />The ID of edges starts with 0. Every edge will appear and only appear once in the output.<br />See samples for further details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />2 2<br />0 1<br />0 1<br />3 2<br />0 1<br />0 2<br />2 1<br />1 2</pre>
<pre><strong>Output:</strong>
Case 1:<br />0<br />1<br />Case 2:<br />0 3<br />1 2</pre>
<p><strong>Test data have been enhanced.</strong></p>


______________________________________________________
ROOT||||||true||||||


<p>Given two nonnegative integers <i>a</i> and <i>b</i>, you are to generate the solution of the equation <b>b*x=a</b>.</p>

*******InputConstraints*******

<p>The number of test cases is given in the very first line. For each test case there is a single line containing two integers <i>a</i> and <i>b</i> without any leading zeroes, separated by a single space.</p>
<p><i>Tip</i>: For more than 95% of test cases, <b>int</b> in C/C++/Java or <b>longint</b> in Pascal is enough.</p>
<p>The input file is about 1.4 KB.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing the root in decimal cyclic notations, or "Invalid Input!!!"(without quotes) if the solution is not unique or the solution doesn't exist. See the example for more details.</p>
<p>The output file is about 1.3MB.</p>

*******IOTestCases*******

<pre><b>Input:</b>
8
1 1
1 2
1 3
1 4
1 6
24 2
15 7
1 89

<b>Output:</b>
1.0
0.5
0.(3)
0.25
0.1(6)
12.0
2.(142857)
0.(01123595505617977528089887640449438202247191)
</pre>


______________________________________________________
CANDY3||||||false||||||

<p>A class went to a school trip. And, as usually, all <b>N</b> kids have got their backpacks stuffed with candy. But soon quarrels started all over the place, as some of the kids had more candies than others. Soon, the teacher realized that he has to step in: "Everybody, listen! Put all the candies you have on this table here!" </p>

<p>Soon, there was quite a large heap of candies on the teacher's table. "Now, I will divide the candies into <b>N</b> equal heaps and everyone will get one of them." announced the teacher. </p>

<p>"Wait, is this really possible?" wondered some of the smarter kids. </p>

<h3>Problem specification</h3>
<p>You are given the number of candies each child brought. Find out whether the teacher can divide the candies into <b>N</b> exactly equal heaps. (For the purpose of this task, all candies are of the same type.) </p>


______________________________________________________
BAISED||||||false||||||

<p>Usually, results of competitions are based on the scores of participants. However, we are planning a change for the next year of IPSC. During the registration each team will be able to enter a single positive integer : their preferred place in the ranklist. We would take all these preferences into account, and at the end of the competition we will simply announce a ranklist that would please all of you. </p>

<p>But wait... How would that ranklist look like if it won't be possible to satisfy all the requests? </p>

<p>Suppose that we already have a ranklist. For each team, compute the distance between their preferred place and their place in the ranklist. The sum of these distances will be called the badness of this ranklist. </p>

<h3>Problem specification</h3>
<p>Given team names and their preferred placements find one ranklist with the minimal possible badness. </p>


______________________________________________________
SUBSEQ||||||false||||||

<p><b>"47 is the quintessential random number,"</b> states the 47 society. And there might be a grain of truth in that.</p>

<p>For example, the first ten digits of the Euler's constant are:</p>
<pre>
2 7 1 8 2 8 1 8 2 8
</pre>
<p>And what's their sum? Of course, it is 47.</p>

<p>Try walking around with your eyes open. You may be sure that soon you will start discovering occurences of the number 47 everywhere.</p>

<h3>Problem specification</h3>
<p>You are given a sequence <b>S</b> of integers we saw somewhere in the nature. Your task will be to compute how strongly does this sequence support the above claims. </p>

<p>We will call a <b>continuous</b> subsequence of <b>S</b> interesting if the sum of its terms is equal to 47. </p>

<p>E.g., consider the sequence <b>S</b> = (24, 17, 23, 24, 5, 47). Here we have two interesting continuous subsequences: the sequence (23, 24) and the sequence (47). </p>

<p>Given a sequence <b>S</b>, find the count of its interesting subsequences. </p>


______________________________________________________
CALCULAT||||||false||||||

<p>Dan likes playing with his pocket calculator during those long, boring math classes. Just now the teacher started to talk about the factorial function. </p>

<p><b>N</b> factorial, denoted by <b>N!</b>, is the product of all the integers between 1 and <b>N</b>, inclusive. For example 6! = 6*5*4*3*2*1 = 720. </p>

<p>Dan took out his calculator out of his pocket to play around with this new function. Unfortunately his calculator quickly ran out of digits and only showed overflow errors. Soon, Dan realized that the factorial function grows very quickly. Still, he would like to know at least some of its digits. </p>

<h3>Problem specification</h3>
<p>Given three positive integers <b>N</b>(1<= <b>N</b> <=10<sup>8</sup>), <b>K</b>(1<= <b>K</b> <=50), <b>L</b>(1<= <b>L</b> <=100), compute the first <b>K</b> digits and the last <b>L</b> digits of <b>N</b> factorial. </p>


______________________________________________________
FRACTAL||||||true||||||


<p>The Hilbert Mole is a small and very rare mole. The first and only specimen was found by David Hilbert
at his backyard. This mole lives in a huge burrow under the ground, and the border of this burrow forms
a Hilbert curve of n-th order (H<sub>n</sub>).</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:fractal1.jpg"></img>
<p>Figure 1.  Hilbert curves, order 1 to 4.</p>
<p>Hilbert curves can be defined as follows. H<sub>1</sub> is a unit square with open top side (figure 1(a)), H<sub>n</sub> consists
of four copies of H<sub>n-1</sub>: bottom left and bottom right are copied without changes, top left is rotated 90<sup>o</sup> counter-clockwise and top right is rotated 90<sup>o</sup> clockwise. These small copies are connected by three segments of unit length (figure 1(b),(c),(d)).</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:fractal2.jpg"></img>
<p>Figure 2.  Burrow, filled with water.</p>
<p>Trying to exterminate the mole, Mr. Hilbert fills the burrow with water (figure 2). But air inside the burrow
prevents water from filling it entirely. In this problem we suppose that air and water are incompressible
and cannot leak throw the borders of the burrow. Your task is to find the total area of the burrow, filled
with water.
<p>Note that water can flow over the obstacle only when its level is strictly higher. See examples on figure 3
for further clarification.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:fractal3.jpg"></img>
<p>Figure 3.  More examples of filled burrows.</p>

*******InputConstraints*******

<p>Multiple test cases. For each test case:
<p>The first line of the input file contains two integer numbers: n and alpha - order of Hilbert curve and slope angle of surface in degrees (1 <= n <= 12, 0 <= alpha < 90).
<p>Input terminates by EOF.</p>

*******OutputConstraints*******

<p>For each test case:
<p>The first line of the output file must contain a single real number - the total area of the burrow, filled
with water. The relative error of the answer must not exceed 10<sup>-6</sup>.</p>

*******IOTestCases*******

<pre><b>Input:</b>
5 30
3 45
4 10
3 0

<b>Output:</b>
190.803847577293
15.5
91.573591766702
26.0
</pre>


______________________________________________________
IMATCH||||||false||||||

<p>David has a problem. He wants to transfer a big file through the internet from his home computer to his computer at work. The size of his file is S kilobytes.</p>
<p>The internet consists of N computers, numbered from 1 to N. David's home computer has the number 1 and his computer at work has the number 2. Some pairs of computers are connected by different types of links (such as network cables or wi-fi). Some of these links (e.g., a satellite dish) may be unidirectional, thus for simplicity we will assume that all links are unidirectional.</p>
<p>The data are sent across the network in packets, each packet contains exactly one kilobyte of data. For each link David knows how faulty it is, i.e. the probability that a network packet gets from one computer to the other through the link. We assume that all transfers are independent from each other. That is, regardless of whether the previous packet was transferred successfully or not, the probability that the next one will pass through remains the same.</p>
<p>Since the network is faulty and the work computer might be many links away from the home computer, the transfer of David's file along even the best route between the two computers might take too long. Luckily, David has an account on some of the machines in the network. He may use these machines as temporary storage, and thus shorten the time of the transfer.</p>
<p>The file transfer will consist of several steps. In each step, David selects a series of links starting with a computer that already has the file and ending with a computer David has an account on. Prior to the transfer, the file is split into S packets. Then the packets are sent one after another along the chosen route. The probability that a packet successfully arrives at the destination computer is the product of probabilities that it passes all the links. If the packet is lost it is resent immediately. Each attempt to send a packet, successful or unsuccessful, takes exactly one millisecond, regardless of the number of links on the route. After the entire file is transferred, David may start another transfer from the new machine, and so on.</p>
<h3>Problem specification</h3>
<p>You are given the number of computers N and the file size S. For each pair of computers u, v we know the probability p(u, v) that a network packet passes successfully through the direct link from computer u to v. (The value zero means that there is no direct link from u to v.) Finally, you are given a list of servers where David has an account.</p>
<p>Find a way how to send David's file so that the expected transfer time is minimized, and output this expected time in milliseconds. You may assume that the expected transfer time is less than 1 000 000 000 (1 billion) milliseconds.</p>

______________________________________________________
KRUSKAL||||||false||||||

<p>A three-headed monkey was on his (theirs?) peaceful way from his dorm to the university. He decided to use the subway. But as soon as he descended into the station, he was stopped by a strange geek with a flashlight, saying strange words...</p> 

<p><i>"I am a servant of the Secret Group Order, wielder of the flame of Primes. Your limited knowledge of partial derivatives will not avail you, flame of Riemann! You shall not pass! You can't beat Kruskal in his game!" </i></p>

<p>The three-headed monkey shook his head. The left one. But there was no way out. If he wanted to get to the university in time, he had to play. </p>

<p>(Many others in his situation would use the distract-and-run tactics to get past the evil Kruskal into the subway. However, this was not possible in this case : nobody will turn around upon hearing <i>"Hey! Look behind you! A three-headed monkey!"</i> when he already sees the monkey in front of him...) </p>

<p>So, what was the game about? It is a two-player game. At the beginning there are <b>N</b> (not necessarily equal) heaps of matches. On each turn, a player may only remove matches from one heap only, and he has to remove between 1 and <b>K</b> matches, inclusive. A player wins if after his move the size of some heap is a prime number. The three-headed monkey moves first. </p>

<h3>Problem specification</h3>
<p>You will be given several starting positions. For each of them, determine whether the three-headed monkey can win this game. You may assume that Kruskal (the monkey's opponent) plays optimally. </p>


______________________________________________________
ABSYS||||||false||||||

<p>
Jimmy is a hard-working pupil in his second year at primary 
school. Recently he decided to convert all his notes into an
electronic version. Sadly, he found that 
his math notes were full of ink blots.
</p>

<p>
He scanned the notes and sent them through his own OCR package
(yes, he coded it all by himself at the age of 8).
The OCR package replaced all ink blots by the string "<code>machula</code>".
</p>

<h3>Problem specification</h3>

<p>
You are given Jimmy's notes, processed by the OCR. They contain simple 
math exercises, which were used to practice addition on positive integers. 
Your task is to recover the damaged part of the notes.
</p>


______________________________________________________
CAKE3||||||false||||||

<p>
Lenka likes to bake cakes since her childhood, when she has learned to bake from
her mom.  She soon became a cake expert able to bake chocolate cakes, apple
pies, muffins, cookies, cheese cakes, tortes and many other cakes. 
</p>

<p>
Recently, she has started her studies of math at Comenius University in
Bratislava.  In the first year she is taking combinatorics class. Today she is
studying for the final exam. Since the brain needs a lot of sugar to study math,
she has baked, just for herself, her favorite, very delicious, strawberry cake. 
</p>

<p>
The cake, still hot, is lying on an <b>N</b>?<b>M</b> inch sheet pan. 
Hungrily waiting for the cake to cool off Lenka came up with an interesting combinatorial question: 
How many different possibilities to cut the cake are there so that every 
connected piece consists of some number of 1?1 inch unit squares?
</p>

<H3>Problem specification</H3>

<p>
The cake can be viewed as a grid consisting of <b>N</b>?<b>M</b> unit squares.
We are allowed to cut the cake along the grid lines. As a result the cake splits into
several connected pieces. (Two unit squares remain connected 
if they share a side which was not cut.) How many different ways are there to cut the cake? 
We consider two cuttings of the cake to be the same if the resulting connected pieces 
of both cuttings have the same shape and are at the same positions within the cake.
In other words, we are only counting those cuttings where no cut leads between two
unit squares that are in the same connected piece.
</p>

<p>
The following picture ilustrates all the 12 different possible ways how to cut a 2?2 inch cake:
<img alt="12 possible ways of cutting a 2?2 cake" src="/content/john_jones:cake3a.gif"><br>
Note that cutting, for example, as on following picture<br> 
<img alt="Not a good way of cutting" src="/content/john_jones:cake3b.gif"><br>
is the same as not cutting at all.
</p>


<H3>Input specification</H3>

<p>
The first line of the input file contains an integer <b>T</b>
specifying the number of test cases.
Each test case is preceded by a blank line.
</p>

<p>
Each test case consists of a single line with two positive integers <b>N</b> and <b>M</b> &#8211; dimensions of the cake.
</p>

<H3>Output specification</H3>

<p>
For each test case output a line with a single positive integer &#8211; the number of
different possibilities how to cut the cake.
</p>

<h3>Example</h3>

<b>Input:</b><br/>
<pre>
2

1 2

2 2
</pre>

<b>Output:</b><br/>
<pre>
2
12
</pre>
<b>Note</b>
<p>For all the test cases, <i>min</i>(<b>N</b>,<b>M</b>)<=5, <i>max</i>(<b>N</b>,<b>M</b>)<=130.</p>

<b>Blue Mary's Note: The data has been enhanced on Feb.28, 2008 to avoid precalculated tables. Sorry to some users. </b>


______________________________________________________
HERE||||||false||||||

<p>Do you know the game Here-There? I presume you don't. It's a virtual board game, so you should first learn how this virtual board looks like. 

<p>The process of making the board is remarkably simple. You start by taking a square with side of length 3<sup>N</sup>, divide it into nine smaller squares of equal size and remove the central one. Then, you repeat the same divide-and-remove-the-centre process with each of the eight smaller squares over and over (N times in total), until you are left with a grid that consists of many little squares with side length 1 &#8211; and of many holes. By the way, the number N is called the degree of the board. 

<p>The game itself consists of two steps. First, your opponent chooses two squares on the board, one of them will be "Here" and the other one "There". Your task is to estimate the least number of steps you have to take if you started Here and wanted to get to There. One step consists of moving to another square, which has a common side with the one you're standing on. Obviously, you cannot move over the removed parts of the board. If you guess the number of steps correctly, you get a point. 

<p>You would really like to become a master of this game, so you have written down the sizes of the boards and the positions of the Here and There squares from several games in the past. Now, you'd like to find the exact number of steps you need to take to get from Here to There on each of the boards. Each square is described by two numbers between 1 and 3<sup>N</sup>, the first of them denoting the column and the second one the row the square is in. The square in the upper left corner of the board has coordinates (1, 1), as you can see on the picture below. </p>

<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:here1.png"></img>

<p>You can see one of the shortest paths between squares (1, 1) and (4, 8) on the picture, consisting of 10 steps.</p>

<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:here2.png"></img>

<h3>Problem specification</h3>
<p>You are given several boards and pairs of squares on them and your task is to find the steps-distances between the squares in each pair. </p>


______________________________________________________
JPIX||||||true||||||


<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix1.jpg"></img>
<p>Shuffling the pixels in a bitmap image sometimes yields random looking images. However, by repeating the shuffling enough times, one finally recovers the original images. This should be no surprise, since "shuffling" means applying a one-to-one mapping (or permutation) over the cells of the image, which come in finite number. 

<p>Your program should read a number n , and a series of elementary transformations that define a "shuffling" <img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix6.png"></img> of n * n images. Then, your program should compute the minimal number m (m > 0) , such that m applications of <img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix6.png"></img> always yield the original n * n image.

<p>For instance if <img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix6.png"></img> is counter-clockwise 90<sup>o</sup> rotation then m = 4.

<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix2.jpg"></img></p>

*******InputConstraints*******


<p>Test cases are given one after another, and a single 0 denotes the end of the input. For each test case:

<p>Input is made of two lines, the first line is number n (2 <= n <= 2<sup>10</sup> , n even). The number n is the size of images, one image is represented internally by a n * n pixel matrix (a<sup>j</sup><sub>i</sub>) , where i is the row number and j is the column number. The pixel at the upper left corner is at row 0 and column 0. 

<p>The second line is a non-empty list of at most 32 words, separated by spaces. Valid words are the keywords <b>id</b>, <b>rot</b>, <b>sym</b>, <b>bhsym</b>, <b>bvsym</b>, <b>div</b> and <b>mix</b>, or a keyword followed by <b>-</b>. Each keyword <b>key</b> designates an elementary transform (as defined by Figure 1), and <b>key-</b> designates the inverse of transform <b>key</b>. For instance, <b>rot-</b> is the inverse of counter-clockwise 90<sup>o</sup> rotation, that is clockwise 90<sup>o</sup> rotation. Finally, the list k<sub>1</sub>, k<sub>2</sub>, ..., k<sub>p</sub> designates the compound transform <img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix6.png"></img> = k<sub>1</sub>ok<sub>2</sub>o ... ok<sub>p</sub> . For instance, "bvsym rot-" is the transform that first performs clockwise 90o rotation and then vertical symmetry on the lower half of the image. 

<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix3.jpg"></img>

<p>Figure 1: Transformations of image (a<sup>j</sup><sub>i</sub>) into image (b<sup>j</sup><sub>i</sub>)

<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix4.jpg"></img></p>


*******OutputConstraints*******

<p>For each test case:
<p>Your program should output a single line whose contents is the minimal number m (m > 0) such that <img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:jpix6.png"></img> is the identity. You may assume that, for all test input, you have m < 2<sup>31</sup>.</p>


*******IOTestCases*******

<pre><b>Input:</b>
256
rot- div rot div
256
bvsym div mix
0

<b>Output:</b>
8
63457
</pre>


______________________________________________________
TOWER||||||true||||||


<p>One of the many problems in computer-generated graphics is realistically modeling the "orderly randomness" of things like mountain ranges and city skylines. A new student intern at a graphics company had an idea - use fluctuations in number representations to model height. In this problem you will compute several such number representations and show the "skylines" they produce.

<p>Let <b>n</b> be any positive integer, and let <b>b</b> be an integer greater than or equal to 2. The <i>complete base - <b>b</b> expansion of <b>n</b></i> is obtained as follows. First write the usual base - <b>b</b> expansion of <b>n</b>, which is just a sum of powers of <b>b</b>, each multiplied by a coefficient between 1 and <b>b</b> - 1, omitting terms with zero coefficients. For example, if <b>n</b> = 20000 and <b>b</b> = 3, the base - 3 expansion of 20000 is given by

<p>20000 = 3<sup>9</sup> + 3<sup>5</sup> + 2?3<sup>3</sup> + 2?3<sup>2</sup> + 2

<p>To obtain the complete base - <b>b</b> expansion, we apply the same procedure to the exponents until all numbers are represented in base <b>b</b>. For <b>n</b> = 20000 and <b>b</b> = 3 we would have

<p>20000 = 3<sup>3<sup>2</sup></sup> + 3<sup>3 + 2</sup> + 2?3<sup>3</sup> + 2?3<sup>2</sup> + 2

<p>As another example, consider <b>n</b> = 16647 and <b>b</b> = 2. The resulting expansion is

<p>16647 = 2<sup>2<sup>2 + 1</sup> + 2<sup>2</sup> + 2</sup> + 2<sup>2<sup>2 + 1</sup></sup> + 2<sup>2</sup> + 2 + 1

<p>The rising and falling heights of the numbers form the number's "skyline".

<p>For each pair of integers <b>n</b> and <b>b</b> in the input, display the complete base - <b>b</b> representation of <b>n</b>. Your display should use multiple output lines for different exponent heights. The display must begin with <i><b>n</b> = </i>, followed by the expansion. Answers should use an asterisk as the multiplication symbol between coefficients and powers of <b>b</b>. Zero terms must not be printed, and unnecessary coefficients and exponents must not be shown (for example, display 1 instead of b<sup>0</sup>, b<sup>2</sup> instead of 1*b<sup>2</sup> and b instead of b<sup>1</sup>). To assist in accurately viewing the skyline of the number, the display must show one character (either a digit, +, or *) per column of the multi-line display; there must be no unnecessary spaces. The correct format is illustrated in the sample output shown below.

<p>Answers must be displayed using no more than 80 columns. Expansions requiring more than 80 columns must be split between terms, into two or more sets of display lines to show the remaining portion of the expansion. The second and following parts of the answer must begin in the same column as the first part of the answer and should contain the same number of (possibly blank) lines. The split may only occur between terms of the number itself (the bottom line), not between terms in an exponent. See the sample output for an example. Note that each set of display lines starts with a blank line.</p>


*******InputConstraints*******


<p>Input is a sequence of pairs of integers, <b>n</b> and <b>b</b>, followed by a pair of zeroes. Each value for <b>n</b> will be positive, and each value for <b>b</b> will be greater than or equal to 2. All values will fit into 64 bits unsigned integers (the maximum is therefore 18446744073709551615).</p>


*******OutputConstraints*******


<p>For each input pair print the complete base - <b>b</b> expansion of <b>n</b> as described above. Print a line containing</p>
<pre>
<b>n</b> in complete base <b>b</b>:
</pre>
<p>preceding each expansion. Separate the output for consecutive pairs by a line of exactly 80 hyphens. All coefficients, bases, and exponents are to be displayed as standard base 10 integers.</p>


*******IOTestCases*******

<pre><b>Input:</b>
20000 3
16647 2
1000 12
85026244 3
0 0

<b>Output:</b>
20000 in complete base 3:

          2
         3   3+2    3    2
20000 = 3  +3   +2*3 +2*3 +2
--------------------------------------------------------------------------------
16647 in complete base 2:

          2+1  2     2+1
         2   +2 +2  2     2
16647 = 2         +2    +2 +2+1
--------------------------------------------------------------------------------
1000 in complete base 12:

           2
1000 = 6*12 +11*12+4
--------------------------------------------------------------------------------
85026244 in complete base 3:

             2           2         2         2         2       2       2
            3 +2*3+1    3 +2*3    3 +3+2    3 +3+1    3 +2    3 +1    3
85026244 = 3        +2*3      +2*3      +2*3      +2*3    +2*3    +2*3


               2*3+2  2*3+1    3
           +2*3     +3     +2*3 +3+1
</pre>

______________________________________________________
AMCODES||||||true||||||


<p>
An extensive area of research in computer science is the field of communications. With computer
networks being part of everyday life of many people, the development of ways for making
networks faster, more reliable and secure is constantly needed. This practical need motivates
an extensive research activity in the theory behind communications.<p><p>

The very first thing needed to establish any kind of communication is a common code. A code
is a way of changing the form of a piece of information into some other form, in general to make
it possible to convey that piece of information from one place to another. Flag codes used by
boats and the Morse code used in telegraphy are examples of codes for translating letters into
different forms to enable communication over different media.

<p><p>
More formally, a code is a set of strings composed of symbols from one alphabet. Each string
defined in the code is called a code word. A message is then composed concatenating a set
of code words to convey the information needed. For example, in Morse code the alphabet is
composed of the symbols hyphen and dot; letter &#8220;S&#8221; is represented by the code word &#8220;...&#8221;,
letter &#8220;O&#8221; is represented by the code word &#8220;---&#8221;, and therefore the distress message &#8220;SOS&#8221; in
Morse code is &#8220;...---...&#8221;.

<p><p>
Codes for communication can have many desirable and undesirable properties such as ambiguity,
entropy, redundancy, and many more. In this problem we will focus on ambiguity as a key
property.

<p><p>
A code is ambiguous when there exists a message using that code that can be partitioned into
different sequences of code words. In other words, in an ambiguous code a message may have
more than one meaning. For example, consider the binary alphabet, composed of symbols
{0,1}. For the code composed of the words {10, 01, 101} the message 10101 can be understood
as 10-101 or 101-01 and therefore the code is ambiguous. On the other hand, for the code
composed of the words {01, 10, 011} no ambiguous message exists and therefore the code is
unambiguous.

<p><p>
As a part of the computer science community, you are required to develop a tester that checks
if codes are ambiguous. In case a code is indeed ambiguous, you are also required to report the
length (i.e. the number of symbols) of the shortest ambiguous message for that code.
<p><p>


*******InputConstraints*******

<p>
Each test case will consist on several lines. In all test cases the alphabet will be the set of
hexadecimal digits (decimal digits plus the uppercase letters &#8220;A&#8221; to &#8220;F&#8221;). The first line of a test
case will contain an integer N (1 <= N <= 100), the number of code words in the code. Each
of the next N lines describes a code word and contains a different and non-empty string of at
most 50 hexadecimal digits.

<p><p>
Input is terminated by N = 0.


*******OutputConstraints*******

<p>For each test case, output a single line with the length of the shortest ambiguous message for
the provided code or -1 if the code is unambiguous.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10
01
101
3
AB
BA
ABB
0

<b>Output:</b>
5
-1
</pre>



______________________________________________________
BALLIGHT||||||true||||||


<p>The ICPC world finals will be held in a luxurious hotel with a big ballroom. A buffet meal will
be served in this ballroom, and organizers decided to decorate its walls with pictures of past
champion teams.

<p><p>
In order to avoid criticism about favouring some of those teams over others, the organizing
commitee wants to make sure that all pictures are appropiately illuminated. The only direct
way they&#8217;ve found for doing this is ensuring each picture has at least one lightbulb that directly
illuminates it.

<p><p>
In this way, the perimeter of the ballroom wall can be divided into illuminated parts (in which
pictures may be placed) and dark parts (which are not suitable for placing the pictures).

<p><p>
The ballroom has the shape of a box and contains several lightbulbs. Each lightbulb emits
light in all directions, but this light can be blocked by columns. All columns in the ballroom
have cylindrical shape and go from the floor to the ceiling, so light cannot pass over or above
them. Columns are of course placed so that its circular section is parallel to the ballroom floor.
Any given point p on the perimeter wall is said to be illuminated if there exists a line segment
(a light ray) which starts on a lightbulb, ends in p and does not touch or pass through any
column.

<p><p>
<center><img src='/content/steinersp:ballroom.jpg'alt='subir imagenes' border='0'></center>

<p><p>
Your task as a helper of the ICPC organization is to examine the blueprints of the ballroom
and determine the total length of illuminated sections of the perimeter wall. The blueprint
consist of a rectangle indicating a top view of the ballroom, with the lightbulbs and columns
marked in it.


*******InputConstraints*******

<p>Each test case will consist on several lines. The first line will contain four integers: L, the
number of lightbulbs, C, the number of columns, X, the size of the ballroom on the x coordinate
and Y , the size of the ballroom on the y coordinate. The lower-left corner of the ballroom is
at (0, 0) while the upper-right corner is at (X, Y ).

<p><p>
The next L lines will contain two integers each representing the x and y coordinate of each
lightbulb. The last C lines of the test case will contain three integers each, representing the x
and y coordinates of the center of a column and its radius, in that order. You can assume that
1 <= L,C <= 10<sup>3</sup> and 4 <= X, Y <= 10<sup>6</sup>. Also, for all pairs of coordinates (x,y), 0 < x < X and
0 < y < Y , both for lightbulbs and column center locations. All radii of the columns will be
positive. Finally, no two columns will overlap, although they may touch, and no column will
touch or intersect with the border of the ballroom. No lightbulb will be inside a column or in
its boundary and no two lightbulbs will be in the same place.
Input is terminated with L = C = X = Y = 0.


*******OutputConstraints*******

<p>For each test case, output a single line with the total length of the illuminated parts of the
perimeter wall. The result must be printed as a real number with exactly four decimal figures,
with the lowest-order decimal figure rounded up.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 1 8 8
6 6
2 6
4 4 2
1 4 7 7
3 3
2 4 1
4 2 1
2 2 1
4 4 1
2 2 9 7
1 2
5 5
3 3 2
7 5 1
0 0 0 0

<b>Output:</b>
28.0000
0.0000
25.8214
</pre>


______________________________________________________
CPC||||||true||||||


<p>Martin and Isa are very competitive. The newest competition they have created is about looking
at the plates of the cars. Each time one of them sees a car plate in the streets, he or she sends
to the other an SMS message with the content of that plate; the one who has seen the newest
plate is in the lead of the game. As the Automobile Car Management (ACM) office assigns the
plates sequentially in increasing order, they can compare them and find out who is the winner.

<p><p>
Martin has a very smart eye and he has stayed on the lead for several weeks. Maybe he keeps
looking at the streets instead of working, or maybe he stays all day in front of car selling
companies waiting for new cars to go out with new plates. Isa, tired of being always behind,
has written a program that generates a random plate, so the next time Martin sends a message
to her, she will respond with this generated plate. In this way, she hopes to give Martin a hard
time trying to beat her.

<p><p>
However, Martin has grown suspicious, and he wants to determine if Isa actually saw a car with
the plate she sent or not. This way, he will know if Isa is in the lead of the game.

<p><p>
He knows some facts about the plates assigned by the ACM:

<p><p>
<ul>
<li> Each plate is a combination of 7 characters, which may be uppercase letters (A-Z), or
digits (0-9).

<p><p>
<li> There exists two kinds of plate schemes: the old one, used for several years, and the new
one which has been in use for some months, when the combinations of the old one were
exhausted.

<p><p>
<li> In the old scheme, the first three characters were letters, and the last four were digits, so
the plates run from AAA0000 to ZZZ9999.

<p><p>
<li> In the new scheme, the first five characters are letters, and the last two are digits. Unfortunately
the chief of ACM messed up with the printing system while he was trying
to create a poster for his next campaign for mayor, and the printer is not able to write
the letters A, C, M, I, and P. Therefore, in this new scheme, the first plate is BBBBB00,
instead of AAAAA00.

<p><p>
<li> The plates are assigned following a sequential order. As a particular case, the last plate
from the old scheme is followed by the first plate from the new scheme.
</ul>

<p><p>
As Isa is not aware of all of this, she has just made sure that her random generator creates a
combination consisting of seven characters, where the first three characters are always uppercase
letters, the last two characters are always digits, and each one of the fourth and fifth characters
may be an uppercase letter or a digit (possibly generating an illegal combination, but she has
not much time to worry about that).

<p><p>
Of course, Martin will not consider Isa the winner if he receives an illegal combination, or if he
receives a legal plate, but equal to or older than his. But that&#8217;s not all of it. Since Martin knows
that new plates are not generated too fast, he will not believe that Isa saw a car with a plate
newer than the one he sent, but sequentially too far. For example, if Martin sends DDDDD45,
and receives ZZZZZ45, he will not believe that Isa saw a car with that plate, because he knows
that the ACM couldn&#8217;t have printed enough plates to get to ZZZZZ45 in the time he received
that answer.

<p><p>
So, Martin has decided to consider Isa the winner only if he receives a legal plate, newer than
his, and older than or equal to the C-th consecutive plate after the one he sent. He calls C his
confidence number. For example, if Martin sends ABC1234, and his confidence number is 6, he
will think that Isa is the winner only if he receives any plate newer than ABC1234, but older
than or equal to ABC1240.


*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains
two strings S<sub>M</sub> and S<sub>I</sub> , and an integer C, separated by single spaces. S<sub>M</sub> is the 7-character
string sent by Martin, which is always a legal plate. S<sub>I</sub> is the 7-character string answered
by Isa, which was generated using her random generator. C is Martin&#8217;s <i>confidence number</i>
(1 <= C <= 10<sup>9</sup>).
The end of input is indicated by S<sub>M</sub> = S<sub>I</sub> =&#8220;*&#8221; and C = 0.


*******OutputConstraints*******

<p>For each test case, output a single line with the uppercase character &#8220;Y&#8221; if, according to Martin,
Isa is the winner, and with the uppercase character &#8220;N&#8221; otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
ABC1234 ABC1240 6
ABC1234 ABC1234 6
ACM5932 ADM5933 260000
BBBBB23 BBBBC23 100
BBBBB23 BBBBD00 77
ZZZ9997 ZZZ9999 1
ZZZ9998 BBBBB01 3
ZZZZZ95 ZZZZZ99 10
BBBBB23 BBBBB22 5
* * 0

<b>Output:</b>
Y
N
N
N
Y
N
Y
Y
N
</pre>


______________________________________________________
DTT||||||true||||||


<p>The inhabitants of a small Caribbean island in the region known as Bermuda&#8217;s Triangle love to
spend their warm summer nights playing cards. As a tribute to the region where they live, all
of their card games have some connection to triangles. One of the most popular games in the
island is known as Triples, and has very simple rules.

<p><p>
The game is played between two players, with a set of standard playing cards. Cards are
distinguished only by their values, from 1 (Ace) to 13 (King). The cards are shuffled and
placed as a pile in the center of the table, face down. This pile is called the stock. The two
players take turns at playing. At each turn, a player
<p><p>

<ul>
<li> draws the top card from the stock, adding it to her/his hand; and
<p><p>
<li> decides whether she/he wants to &#8220;drop some triples&#8221;.
</ul>

<p><p>
Dropping a triple consists of choosing three cards (a <i>triple</i>) from the hand and placing them
on the table, face up. The dropped triples stay on the table until the end of the game. Only
some sets of three cards form a valid triple. There are two types of valid triples:

<p><p>
<ul>
<li> Perfect triples are made of three cards whose values represent the length of sides of an
equilateral triangle;

<p><p>
<li> Common triples are made by three cards whose values represent the length of sides of
any other (not equilateral) triangle.
</ul>

<p><p>
The figure below shows examples of perfect triples (a), common triples (b), and invalid triples
(c).

<p><p>
<center><img src='/content/steinersp:triples.jpg'alt='subir imagenes' border='0'></center>

<p><p>
Only valid triples can be dropped, but a player may drop any number of triples at a given
turn. In particular, since players know the number of cards in the stock at every turn, a player
may decide to drop all triples in her/his last turn. Some players, however, normally drop some
triples during the game, to maintain as few cards in their hands as possible.

<p><p>
The game finishes when the stock is empty. The winner is the player that dropped the largest
number of perfect triples. If both players dropped the same number of perfect triples, the winner is the player that dropped the largest number of common triples. If both players dropped the
same number of perfect triples and the same number of common triples, the result is a tie.

<p><p>
Given the description of the cards in the stock, write a program that determines the winner of
a game of Triples, considering both players play as best as possible.


*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains one integer N
representing the number of cards in the stock (6 <= N <= 10<sup>4</sup>). The next line contains N
integers X<sub>i</sub>, separated by single spaces, representing the cards in the stock (1 <= X<sub>i</sub> <= 13, for
1 <= i <= N). The cards are given in the order they are drawn by the players: the first card
in the input (X<sub>1</sub>) is the first card drawn, the second card in the input (X<sub>2</sub>) is the second card
drawn, and so on. Several cards with the same value may be present in the stock, and not
necessarily all card values are present in the stock. The end of input is indicated by N = 0.


*******OutputConstraints*******

<p>For each test case your program must output a single line, containing &#8216;1&#8217; if the first player to
play wins the game, &#8216;2&#8217; if the second player wins, or &#8216;0&#8217; if there is a tie.


*******IOTestCases*******


<pre>
<b>Input:</b>
7
5 6 5 6 5 6 8
12
13 13 13 13 13 13 1 3 2 9 3 9
12
1 2 1 2 1 2 3 1 4 2 5 3
0

<b>Output:</b>
0
2
1
</pre>


______________________________________________________
EMOTICON||||||true||||||


<p>Emoticons are used in chat and e-mail conversations to try to express the emotions that printed
words cannot. This may seem like a nice feature for many, but a lot of people find it really
annoying and wants to get rid of emoticons.

<p><p>
George is one of those people. He hates emoticons so bad, that he is preparing a plan to
remove all emoticons from all e-mails in the world. Since you share his visionary plans, you are
preparing a special program to help him.

<p><p>
Your program will receive the list of emoticons to proscribe. Each emoticon will be a string of
characters not including any whitespace. You will also receive several lines of text. What you
need to do is change some characters of the text into spaces to ensure no emoticon is left on
the text. For an emoticon to be considered to appear in the text it has to appear in a single
line and be made of consecutive characters.

<p><p>
To help George&#8217;s plan remain secret as long as possible, you need to do your job with the
minimum possible amount of character changes.


*******InputConstraints*******

<p>The input file contains several test cases. Each test case consists of several lines. The first
line of each test case will contain two integers separated by a single space: N, the number of
emoticons to proscribe, and M, the number of lines the text has. The next N lines contain one
emoticon each, a non-empty string of at most 15 characters. Each of the last M lines of the
test case contains a line of text of at most 80 characters. You can assume 1 <= N,M <= 100.

<p><p>
Valid input characters for emoticons are uppercase and lowercase letters, digits and the symbols
&#8220;!?.,:;-_&#8217;#$%&/=*+(){}[]&#8221; (quotes for clarity). Each line of the text may contain the same
characters with the addition of the space character.

<p><p>
The input is terminated by N = M = 0.


*******OutputConstraints*******

<p>For each test case, output exactly one line containing a single integer that indicates the minimum
number of changes you need to make to the entire text to ensure no emoticon on the list appears
in it.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 6
:-)
:-(
(-:
)-:
Hello uncle John! :-) :-D
I am sad or happy? (-:-(?
I feel so happy, my head spins
(-:-)(-:-)(-:-)(-:-) :-) (-: :-)
but then sadness comes :-(
Loves you, Joanna :-)))))
3 1
:)
):
))
:):)):)):)):(:((:(((:):)
0 0

<b>Output:</b>
11
8
</pre>



______________________________________________________
FSEATS||||||true||||||


<p>A group of K friends is going to see a movie. However, they are too late to get good tickets,
so they are looking for a good way to sit all nearby. Since they are all science students, they
decided to come up with an optimization problem instead of going on with informal arguments
to decide which tickets to buy.

<p><p>
The movie theater has R rows of C seats each, and they can see a map with the currently
available seats marked. They decided that seating close to each other is all that matters, even
if that means seating in the front row where the screen is so big it&#8217;s impossible to see it all at
once. In order to have a formal criteria, they thought they would buy seats in order to minimize
the <i>extension</i> of their group.

<p><p>
The <i>extension</i> is defined as the area of the smallest rectangle with sides parallel to the seats
that contains all bought seats. The area of a rectangle is the number of seats contained in it.
They&#8217;ve taken out a laptop and pointed at you to help them find those desired seats.


*******InputConstraints*******

<p>Each test case will consist on several lines. The first line will contain three positive integers R,
C and K as explained above (1 <= R,C <= 300, 1 <= K <= R ? C). The next R lines will contain
exactly C characters each. The j-th character of the i-th line will be &#8216;X&#8217; if the j-th seat on
the i-th row is taken or &#8216;.&#8217; if it is available. There will always be at least K available seats in
total.

<p><p>
Input is terminated with R = C = K = 0.


*******OutputConstraints*******

<p>For each test case, output a single line containing the minimum extension the group can have.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 5 5
...XX
.X.XX
XX...
5 6 6
..X.X.
.XXX..
.XX.X.
.XXX.X
.XX.XX
0 0 0

<b>Output:</b>
6
9
</pre>


______________________________________________________
GALOU||||||true||||||


<p>The famous witch is back. After killing an incredible amount of monsters in order to find a
hidden treasure, Zak Galou decided to buy vineyards in Burgundy and retired. Everything was
calm in his new life, until the day that his farm tractor stopped working.

<p><p>
His tractor&#8217;s engine works based on a mechanism of gears. The engine can be represented by
a bidimensional grid. At most one gear can be attached to each position of the grid. All the
gears are identical and can mesh with adjacent gears. In this grid, a gear can have up to six
other adjacent gears, see figure below:

<p><p>
<center><img src='/content/steinersp:galou1.jpg'alt='subir imagenes' border='0'></center>

<p><p>
Under normal utilization, when the tractor is started, some of the gears are initially activated
and try to turn clockwise. When a gear tries to turn in one direction, all the adjacent gears try
to turn in the opposite direction.

<p><p>
When Zak Galou opened his engine he noticed that it had been sabotaged (probably by a
jealous treasure hunter who was not able to find the treasure). Some of the gears were removed
from the engine and others have been added to it. As a consequence, some of the gears were
immobile. A gear can be immobile either if it is free or if it is blocked. A gear is free when it is
not an initially activated gear and no adjacent gear is trying to turn. A gear is blocked when it
is trying to turn in both directions at the same time. For example, consider that there are three
gears in the engine as shown in the figure below. If any of the gears is initially activated when
the tractor is started, all of them will be blocked. If none of the gears are initially activated,
all of them will be free.

<p><p>
<center><img src='/content/steinersp:galou2.jpg'alt='subir imagenes' border='0'></center>

<p><p>
As a part of the work of fixing his tractor, Zak Galou asks for your help to solve the following
problem. Given the description of the engine and the gears that are initially activated in the
clockwise direction, he wants to know for each gear, what is its state when the tractor is started:
turn clockwise, turn counter-clockwise, free or blocked.


*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains two integers R and
C, separated by a single space, representing respectively the number of rows and columns of the
engine grid (1 <= R,C <= 100). The next R lines describe the engine. The i-th line represents
the i-th row of the engine and contains C characters. The character &#8220;.&#8221; indicates that there
is no gear in the corresponding position, the character &#8220;*&#8221; indicates that there is a gear that
<i>is not</i> initially activated when the engine is started and an &#8220;I&#8221; indicates that there is a gear
that <i>is</i> initially activated when the engine is started. Notice that, for simplicity reasons, the
parallelogram representing the engine grid is described in the input as if it was a rectangle with
each row left aligned. The end of input is indicated by R = C = 0


*******OutputConstraints*******

<p>For each test case, your program must output R + 1 lines. The first line must be empty; each
of the following R lines must have C characters. The characters printed must represent the
state of each position of the grid when the engine is started. Print a &#8220;.&#8221; if there is no gear in
the position; a &#8220;(&#8221; if there is a gear turning in the clockwise direction; a &#8220;)&#8221; if there is a gear
turning in the counter-clockwise direction, an uppercase &#8220;F&#8221; if there is a gear that is free and
an uppercase &#8220;B&#8221; if there is a blocked gear.

*******IOTestCases*******


<pre>
<b>Input:</b>
4 3
...
.*.
.I.
...
4 4
....
.**.
.I..
..*.
0 0

<b>Output:</b>
...
.).
.(.
...
....
.BB.
.B..
..F.
</pre>


______________________________________________________
OFFSIDE||||||true||||||


<p>Hemisphere Network is the largest television network in Tumbolia, a small country located
east of South America (or south of East America). The most popular sport in Tumbolia,
unsurprisingly, is soccer; many games are broadcast every week in Tumbolia.

<p><p>
Hemisphere Network receives many requests to replay dubious plays; usually, these happen
when a player is deemed to be offside by the referee. An attacking player is <i>offside</i> if he is
nearer to his opponents&#8217; goal line than the second last opponent. A player is not offside if

<p><p>
<ul>
<li> he is level with the second last opponent or
<p><p>
<li> he is level with the last two opponents.
</ul>

<p><p>
Through the use of computer graphics technology, Hemisphere Network can take an image of
the field and determine the distances of the players to the defending team&#8217;s goal line, but they
still need a program that, given these distances, decides whether a player is offside.


*******InputConstraints*******

<p>The input file contains several test cases. The first line of each test case contains two integers
A and D separated by a single space indicating, respectively, the number of attacking and
defending players involved in the play (2 <= A,D <= 11). The next line contains A integers B<sub>i</sub>
separated by single spaces, indicating the distances of the attacking players to the goal line
(1 <= B<sub>i</sub> <= 10<sup>4</sup>). The next line contains D integers C<sub>j</sub> separated by single spaces, indicating the
distances of the defending players to the goal line (1 <= C<sub>j</sub> <= 10<sup>4</sup>). The end of input is indicated
by A = D = 0.


*******OutputConstraints*******

<p>For each test case in the input print a line containing a single character: &#8220;Y&#8221; (uppercase) if
there is an attacking player offside, and &#8220;N&#8221; (uppercase) otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 3
500 700
700 500 500
2 2
200 400
200 1000
3 4
530 510 490
480 470 50 310
0 0

<b>Output:</b>
N
Y
N
</pre>


______________________________________________________
ICPCS||||||true||||||


<p>Charles is the contest director for the ICPC Tumbolian regional contest. His responsibility is
ensuring the contest flows smoothly, that the contest rules are applied fairly, and, of course,
announcing the final contest ranking.

<p><p>
According to ICPC rules, a team with more solved problems ranks above a team with less
solved problems. If two teams have the same number of solved problems, the team with the
smaller total penalty ranks above the team with the larger total penalty (in case both teams
have the same number of solved problems and the same penalty, Charles considers them as
tied).

<p><p>
The <i>total penalty</i> for a team is the sum of all the problem penalties of the problems that team
has solved. The problem penalty for a problem is TP +EP ?FA, where TP is the time penalty
for that problem, EP is the contest&#8217;s error penalty and FA is the number of failed attempts
at solving the problem before submitting a correct solution.

<p><p>
The <i>time penalty</i> for a problem is the time since the start of the contest, in minutes, that the
team needed to solve the problem. The <i>error penalty</i> is a positive integer chosen by the contest
director, designed to reward teams that submit correct solutions on the first attempt.

<p><p>
Charles wants to change the error penalty from the &#8220;standard&#8221; value of 20 minutes to stir things
up. To study the effects of that change on the final rankings, he wants to know the range of
error penalties that <i>don&#8217;t</i> change the final standings.

<p><p>
In other words, if team A is ahead of team B in the original standings, then A should be ahead
of B in the modified standings; if A and B are tied in the original standings, they should also
be tied in the modified standings (the original standings are the ones obtained with an error
penalty of 20 minutes).

<p><p>
Charles has been very busy organizing the Tumbolian regional, so he asked you to make a
program that will compute the range for him.


*******InputConstraints*******

<p>The input contains several test cases. The first line of each test case contains two integers
T and P separated by a single space, indicating the number of teams and the number of
problems, respectively (2 <= T <= 100, 1 <= P <= 10). Each one of the next T lines describes
the performance of a team. A team&#8217;s performance description is a line containing P problem
descriptions separated by single spaces. Teams are not necessarily given in order of their final
standings.

<p><p>
Each problem description is a string &#8220;A/S&#8221;, where A is an integer representing the number of
attempts that the corresponding team made at solving that problem (0 <= A <= 100), and S
is either &#8220;-&#8221;, if the team did not solve that problem, or an integer indicating the number of
minutes it took for the team to submit a correct solution (1 <= S <= 300). Attempts made after
the first correct submission are not counted.


*******OutputConstraints*******

<p>For each test case in the input print two positive integers separated by a single space, indicating
the smallest and largest error penalties that would not change the final ranking. If there is no
upper bound for the error penalty, print a &#8220;*&#8221; instead of the upper bound.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
0/- 0/- 0/-
2/- 2/- 1/-
1/60 1/165 1/-
1/80 0/- 2/120
0/- 1/17 0/-
4 2
17/- 5/-
2/7 3/-
3/- 2/-
1/15 0/-
3 2
1/- 2/15
2/53 1/17
1/70 1/20
0 0

<b>Output:</b>
1 24
9 *
20 20
</pre>


______________________________________________________
JLEAGUE||||||true||||||


<p>Thirty five years ago, a group of super heroes was chosen to form the Justice League, whose
purpose was to protect the planet Earth from the villains. After all those years helping mankind,
its members are retiring and now it is time to choose the new members of the Justice League.

<p><p>
In order to keep their secret identity, let&#8217;s say, secret, super heroes usually use an integer number
to identify themselves. There are H super heroes on Earth, identified with the integers from 1
to H. With a brief look at the newspapers anyone can find out if two super heroes have already
worked together in a mission. If this happened, we say that the two heroes have a relationship.

<p><p>
There must be only <i>one</i> Justice League in the world, which could be formed by any number of
super heroes (even only one). Moreover, for any two heroes in the new league, they <i>must</i> have
a <i>relationship</i>.

<p><p>
Besides, consider the set of the heroes not chosen to take part in the Justice League. For any
two heroes on that set, they <i>must not</i> have a relationship. This prevents the formation of
unofficial justice leagues.

<p><p>
You work for an agency in charge of creating the new Justice League. The agency doesn&#8217;t know
if it is possible to create the League with the restrictions given, and asked for your programming
skills. Given a set of super heroes and their relationships, determine if it is possible to select
any subset to form the Justice League, according to the given restrictions.


*******InputConstraints*******

<p>The input is composed of several test cases. The first line of each test case contains two integers
separated by a single space, H (2 <= H <= 5?10<sup>4</sup>) and R (1 <= R <= 10<sup>5</sup>), indicating, respectively,
the number of heroes and the number of relationships. Each of the following R lines contains
two integers separated by a single space, A and B (1 <= A < B <= H), indicating that super
hero A has a relationship with super hero B. Note that if A has a relationship with B, B also
has a relationship with A. A relationship is never informed twice on a test case.

<p><p>
The end of input is indicated by H = R = 0.


*******OutputConstraints*******

<p>For each test case in the input print a single line, containing the uppercase letter &#8220;Y&#8221; if it
is possible to select a subset of heroes to form the Justice League according to the given
restrictions, or the uppercase letter &#8220;N&#8221; otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 5
1 2
2 3
1 3
1 4
3 5
9 8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
4 3
1 2
2 3
3 4
0 0

<b>Output:</b>
Y
N
Y
</pre>


______________________________________________________
MUSIC||||||true||||||


<p>Bessie the cow used to write musical melody. A musical melody is
represented as a sequence of N (1 <= N <= 100,000) notes numbered 1..N.
Note i is  represented by the integer A<sub>i</sub> (-10,000 <= A<sub>i</sub> <= 10,000).</p>

<p>To Bessie's cow-like mind, a musical melody is called 'perfect' if and only
if the sum of all the notes in any of its consecutive subsequences is
strictly positive.</p>

<p>For a given musical melody, Bessie wants to make it perfect, but she wants
to change the melody as little as possible.</p>

<p>Thus, to perfect the melody, she repeatedly chooses a consecutive
subsequence of the melody, [x, y] (1 < x <= y < N), whose sum S is
negative. Then she adds S to both A<sub>x-1</sub> and A<sub>y+1</sub>, while subtracting S from
both A<sub>x</sub> and A<sub>y</sub>. (It is possible to subtract from the same note twice if x
= y.)</p>

<p>Given a musical melody, compute the minimum number of steps to make the
melody perfect.</p>


*******InputConstraints*******


<p>* Line 1: The single integer N.</p>

<p>* Lines 2..N+1: Line i+1 contains the single integer A<sub>i</sub>.</p>


*******OutputConstraints*******


<p>* Line 1: A single integer that represents the minimum number of steps
        needed to make the given musical melody perfect. If there are
        no solutions, output -1 instead.</p>


*******IOTestCases*******


<pre><b>Input:</b>
5
13
-3
-4
-5
62

<b>Output:</b>
2
</pre>
<b>Explanation</b>
<p>There is a musical melody with length of 5. The notes are (13, -3, -4, -5, 62).</p>
<p>First, we choose the range [2, 4]; its sum is (-3) + (-4) + (-5) = -12.
After the first step, the melody becomes (1, 9, -4, 7, 50). Second, we
choose the range [3, 3], whose sum is -4, and the melody after the second
step becomes (1, 5, 4, 3, 50). The melody is perfect now.</p>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
MKPAIRS||||||true||||||


<p>The 2*N (3 <= N <= 1,000) cows have assembled the Bovine Accordion
and Banjo Orchestra!  They possess various levels of skill on their
respective instruments: accordionist i has an associated talent
level A<sub>i</sub> (0 <= A<sub>i</sub> <= 1,000); banjoist j has an associated talent
level B<sub>j</sub> (0 <= B<sub>j</sub> <= 1,000).</p>

<p>The combined `awesomeness' of a pairing between cows with talents
A<sub>i</sub> and B<sub>j</sub> is directly proportional to the talents of each cow in
the pair so a concert with those two cows will earn FJ precisely
A<sub>i</sub> * B<sub>j</sub> dollars in "charitable donations".  FJ wishes to maximize
the sum of all revenue obtained by his cows by pairing them up in
the most profitable way.</p>

<p>Unfortunately, FJ's accordionists are a bit stuck up and stubborn.
If accordionist i is paired with banjoist j, then accordionists
i+1..N refuse to be paired with banjoists 1..j-1. This creates
restrictions on which pairs FJ can form. FJ thus realizes that in
order to maximize his profits, he may have to leave some cows
unpaired.</p>

<p>To make matters worse, when one or more of the musicians is skipped,
they will be greatly upset at their wasted talent and will engage
in massive binge drinking to wash away their sorrows.</p>

<p>After all pairings are made, a list is constructed of the groups
of each of the consecutive skipped musicians (of either instrument).
Every group of one or more consecutive skipped cows will gather
together to consume kegs of ice cold orange soda in an amount
proportional to the square of the sum of their wasted talent.</p>

<p>Specifically, FJ has calculated that if the x-th to y-th accordionists
are skipped, they will consume precisely (A<sub>x</sub> + A<sub>x+1</sub> + A<sub>x+2</sub> + ...
+ A<sub>y</sub>)<sup>2</sup> dollars worth of orange soda in the process of drinking
themselves into oblivion. An identical relationship holds for the
banjoists. FJ realizes that he'll end up getting stuck with the
bill for his cows' drinking, and thus takes this into account when
choosing which pairings to make.</p>

<p>Find the maximum amount of total profit that FJ can earn after the
contributions are collected and the orange soda is paid for.</p>


*******InputConstraints*******


<p>* Line 1: A single integer: N</p>

<p>* Lines 2..N+1: Line i+1 contains the single integer: A<sub>i</sub></p>

<p>* Lines N+2..2*N+1: Line i+N+1 contains the single integer: B<sub>i</sub></p>



*******OutputConstraints*******


<p>* Line 1: A single integer that represents the maximum amount of cash
        that FJ can earn.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
1
1
5
5
1
1

<b>Output:</b>
17
</pre>

<b>Explanation</b>
<p>There are 6 cows: 3 accordionists and 3 banjoists. The accordionists have
talent levels (1, 1, 5), and the banjoists have talent levels (5, 1, 1).</p>

<p>FJ pairs accordionist 3 with banjoist 1 to get earn A<sub>3</sub> * B<sub>1</sub> = 5 * 5 = 25
in profit.  He loses a total of (1 + 1)<sup>2</sup> + (1 + 1)<sup>2</sup> = 8 dollars due to
the cost of soda for his remaining cows. Thus his final (net) profit is 25
- 8 = 17.</p>
<b>Time limit has been doubled on Aug.8, 2008, enjoy :)</b>


______________________________________________________
TAN1||||||true||||||


<h3>Background</h3>
<p>Tan always creates some interesting and strange games to kill time,and the Pick-Number Game on Tree is his favorite one.He got the idea from his another game(Pick-Number Game on sequence): there is an integer sequence, he picks a number from the head or the tail of the sequence each turn.When the sequence gets empty,he gets another sequence A,in which A[i] is the <i>i</i>-th integer he picks, then he calculates:</p>
<p>S=A[0]*5<sup>0</sup>+A[1]*5<sup>1</sup>+...+A[n-1]*5<sup>n-1</sup>, while n is the length of the sequence.If S modudo 8 equals to 3,he wins, otherwise he loses(Tan is such a strange person that he likes games with strange rules).</p>
<p>Tan got tired of generating sequence randomly before playing a game, and he changed the rule to avoid it.This time he plays the game on trees. He generates a big tree. Every time he wants to play, he chooses two nodes (A,B) randomly and he finds the path connected A,B (including A,B).In this way he gets a sequence and he can play games.He calls this game "Game(A,B)".He can play many times on a big tree without generating a new one.If he can win in Game(A,B),he says that Game (A,B) is a good game,otherwise Game(A,B) is a bad game.</p>
<p>If a game is a bad game,he can never win,so he has to find a way to identify if a game is bad or good.</p>
<p>He played this game for a long time,and he thought he found a great law: if Game(A,B) is a good game and Game(B,C) is a good game,then Game(A,C) is a good game.And if Game(A,B) is a bad game and Game(B,C) is a bad game,the (A,C) is a bad game.But soon he found it was wrong,but he wanted to know in how many cases it is right.</p>
<p>P.S:"Tan" in Chinese means funny and droll. And Mr.Tan in the story is a real person.</p>
<h3>Task</h3>
<p>The input data describes a tree with integer numbers on each of its nodes.You should count the number of triple (A,B,C) (A,B,C are distinct nodes) that (A,B),(B,C),(A,C) are all good games or all bad games((A,B,C) and (B,C,A) are supposed to be counted once).</p>

*******InputConstraints*******

<p>The first line of the test data is the number of test case t,then t test case follow.</p>
<p>For each test case:</p>
<p>The first line contains a single integer M,the number of nodes in the tree(M<=100000).</p>
<p>M lines follow, each contains two integers F<sub>i</sub> and V<sub>i</sub>. F<sub>i</sub> is the father of node i (F<sub>i</sub>=0 if node i is the root).V<sub>i</sub> is the number on the node i.(0<=V<sub>i</sub><=40000)</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The first and only line contains a single integer S, which means there are S triples(A,B,C) that (A,B),(B,C),(A,C) are all good games or all bad games.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
3
0 3
1 5
1 7

<b>Output:</b>
0
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
PPP07D||||||false||||||


<table class="problems" style="width: 99%;" border="0"><tbody><tr class="navigation">
	<td><a href="/problems/PPP07D/english/">English version</a></td>
	<td><a href="/problems/PPP07D/polski/">Wersja polska</a></td>
</tr></tbody></table>



<p>The task requires writing a program able to steer a certain character &#8211; a player who is 
looking for the labyrinth&#8217;s exit. Communication with the system has an 
interactive character: program is outputting the commands (marked blue in the 
description) and receives the information and statements in return from the 
system (marked red in the description).</p>

<h3>Rules</h3>

<p><b>The labyrinth&#8217;s structure.</b> Labyrinth consists of empty fields (marked with &#8216;.&#8217;) and parts of the walls (&#8216;X&#8217; character). Only one element of external wall that surrounds the whole labyrinth is marked as an exit (&#8216;E&#8217; character). Player&#8217;s position is marked as a plain field (&#8216;O&#8217; character). You can assume that the walls are made in a very elegant way which means that each element of the wall is adjacent to no more than 2 other wall elements; the parts of the wall which meet with their corners, have to have a common neighboring element of the wall on their edges. There is a complete darkness in the labyrinth. Player does not have a map of the labyrinth.</p>

<p><b>The beginning of the game.</b> At the begging of the game player is at an unknown empty field inside the labyrinth. He has a torch with him and a certain amount of dynamite (n>=0), which is stated by the system&#8217;s greeting statement:</p>

<p><FONT color=red>You wake up with a headache, completely lost in a dark maze.<br>
In your pockets you find a torch and <i>n</i> stick[s] of dynamite.</FONT></p>

<p><b>Actions allowed.</b> Player is allowed to move around the labyrinth and use the torch or dynamite giving one of the following commands (to realize the &#8220;basic&#8221; functionality you can only use the first two ones):</p>
<ul type="disc">
	<li>
	<span style="color:blue;">walk (north|south|east|west) <i>k</i></span> 
	&#8211; it moves the player by k fields in a chosen direction. Each field that a 
	player crosses should be empty or be an exit from the labyrinth. The return 
	statement can be:
	<ul type="circle">
		<li><span style="color:red;">You are still lost in a dark maze.</span> &#8211; if you did not find an exit</span></li>
		<li><span style="color:red;">Against all odds, you have found the exit. Congratulations!</span> &#8211; in case you entered a field marked &#8216;E&#8217; (the game is considered to be over &#8211; you have completed the task and are granted victory)</li>
	</ul>
	</li>
	<li>
	<span style="color:blue;">look around </span> &#8211; it lights up eight fields surrounding you and returns a proper statement from the system, for example:<br>
	<span style="color:red;">The maze around you looks like this:<br>
    X.X<br>
    .OX<br>
	.XX</span></li>
	<li>
	<span style="color:blue;">look (north|south|east|west) <i>k</i></span> &#8211; this command works very similarly to &#8216;look around&#8217;, but with a difference that looking to the chosen direction will have a k range (instead of 1). In case there is a wall that blocks the view in the row or column we have chosen, consecutive fields will not be displayed. An example return statement for &#8216;look north 4&#8217; command can look like that:<br>
	<span style="color:red;">The maze around you looks like this:<br>
    .XX<br>
	..X<br>
	X..<br>
	X.X<br>
    .OX<br>
	.XX</span>
    <br>
	In that case the &#8216;look north 10&#8217; command would give an identical effect 
	because of the wall that blocks the view.</li>
	<li>
	<span style="color:blue;">use dynamite</span> &#8211; this command will replace the eight fields surrounding the player with empty fields with no side effects for the player (although the number of dynamites he possesses is decreased by one). The return system&#8217;s statement would look like that:<br>
	<span style="color:red;">You light up a stick of dynamite.<br>
	The explosion knocks you to the ground, but amazingly you survive.</span></li>
</ul>

<p><b>Restrictions.</b> Player cannot give more than 10<sup>4</sup> commands to the system in one game. 
You also have to be really careful about spending your resources: the amount of oxygen used cannot exceed 10<sup>7</sup>, and crossing one field costs you 10 units of oxygen, using the torch costs you 1 unit of oxygen for every field you 
highlight and using the dynamite will cost you 1000 units of oxygen. If you exceed any of the limits or violate the rules (hitting the wall, using too much dynamite, giving an incorrect command) the system will output the following 
statement: <span style="color:red;">STOP. <i>Problem description.</i></span> and game is considered to be over.</p>


______________________________________________________
BALLOON||||||true||||||


<p>You must write a program that simulates placing spherical balloons into a rectangular box. 
<p>The simulation scenario is as follows. Imagine that you are given a rectangular box and a set of points. Each point represents a position where you might place a balloon. To place a balloon at a point, center it at the point and inflate the balloon until it touches a side of the box or a previously placed balloon. You may not use a point that is outside the box or inside a previously placed balloon. However, you may use the points in any order you like, and you need not use every point. Your objective is to place balloons in the box in an order that maximizes the total volume occupied by the balloons. 
<p>You are required to calculate the volume within the box that is not enclosed by the balloons. 

*******InputConstraints*******

<p>The input consists of several test cases. The first line of each test case contains a single integer n that indicates the number of points in the set (1<=n<=6). The second line contains three integers that represent the (x, y, z) integer coordinates of a corner of the box, and the third line contains the (x, y, z) integer coordinates of the opposite corner of the box. The next n lines of the test case contain three integers each, representing the (x, y, z) coordinates of the points in the set. The box has non-zero length in each dimension and its sides are parallel to the coordinate axes. 
<p>The input is terminated by the number zero on a line by itself. 

*******OutputConstraints*******

<p>For each test case print one line of output consisting of the test case number followed by the volume of the box not occupied by balloons. Round the volume to the nearest integer. Follow the format in the sample output given below. 
<p>Place a blank line after the output of each test case.

*******IOTestCases*******

<pre><b>Input:</b>
2
0 0 0
10 10 10
3 3 3
7 7 7
0

<b>Output:</b>
Box 1: 774

</pre>


______________________________________________________
UCODES||||||true||||||


<p>Phil Oracle has a unique ability that makes him indispensable at the National Spying Agency. His colleagues can bring him any new binary code and he can tell them immediately whether the code is uniquely decodable or not. A <i>code</i> is the assignment of a unique sequence of characters (a <i>codeword</i>) to each character in an <i>alphabet</i>. A binary code is one in which the codewords contain only zeroes and ones. For example, here are two possible binary codes for the alphabet {<b>a,c,j,l,p,s,v</b>}.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:ucodes.jpg"></img>
<p>The <i>encoding</i> of a string of characters from an alphabet (the <i>cleartext</i>) is the concatenation of the codewords corresponding to the characters of the cleartext, in order, from left to right. A code is <i>uniquely decodable</i> if the encoding of every possible cleartext using that code is unique. In the example above, Code 1 is uniquely decodable, but Code 2 is not. For example, the encodings of the cleartexts "<b>pascal</b>" and "<b>java</b>" are both <b>001010101010</b>. Even shorter encodings that are not uniquely decodable are <b>01</b> and <b>10</b>. 
<p>While the agency is very proud of Phil, he unfortunately gives only "yes" or "no" answers. Some members of the agency would prefer more tangible proof, especially in the case of codes that are not uniquely decodable. For this problem you will deal only with codes that are <i>not</i> uniquely decodable. For each of these codes you must determine the single encoding having the minimum length (measured in bits) that is ambiguous because it can result from encoding each of two or more different cleartexts. In the case of a tie, choose the encoding which comes first lexicographically.

*******InputConstraints*******

<p>One or more codes are to be tested. The input for each code begins with an integer m, 1<=m<=20, on a line by itself, where m is the number of binary codewords in the code. This is followed by m lines each containing one binary codeword string, with optional leading and trailing whitespace. No codeword will contain more than 20 bits.
<p>The input is terminated by the number zero on a line by itself.</p>

*******OutputConstraints*******

<p>For each code, display the sequential code number (starting with 1), the length of the shortest encoding that is not uniquely decodable, and the shortest encoding itself, with ties broken as previously described. The encoding must be displayed with 20 bits on each line except the last, which may contain fewer than 20 bits. Place a blank line after the output for each code. Use the format shown in the samples below.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
0
01
10
5
0110
00
111
001100
110
5
1
001
0001
00000000000000000001
10000000000000000000
0

<b>Output:</b>
Code 1: 3 bits
010

Code 2: 9 bits
001100110

Code 3: 21 bits
10000000000000000000
1

</pre>


______________________________________________________
DESERT||||||true||||||


<p>In this problem, you will compute how much food you need to purchase for a trip across the desert on foot.
<p>At your starting location, you can purchase food at the general store and you can collect an unlimited amount of free water. The desert may contain oases at various locations. At each oasis, you can collect as much water as you like and you can store food for later use, but you cannot purchase any additional food. You can also store food for later use at the starting location. You will be given the coordinates of the starting location, all the oases, and your destination in a two-dimensional coordinate system where the unit distance is one mile. 
<p>For each mile that you walk, you must consume one unit of food and one unit of water. Assume that these supplies are consumed continuously, so if you walk for a partial mile you will consume partial units of food and water. You are not able to walk at all unless you have supplies of both food and water. You must consume the supplies while you are walking, not while you are resting at an oasis. Of course, there is a limit to the total amount of food and water that you can carry. This limit is expressed as a carrying capacity in total units. At no time can the sum of the food units and the water units that you are carrying exceed this capacity. 
<p>You must decide how much food you need to purchase at the starting location in order to make it to the destination. You need not have any food or water left when you arrive at the destination. Since the general store sells food only in whole units and has only one million food units available, the amount of food you should buy will be an integer greater than zero and less than or equal to one million. </p>

*******InputConstraints*******

<p>The first line of input in each trial data set contains n (2 <= n <= 20), which is the total number of significant locations in the desert, followed by an integer that is your total carrying capacity in units of food and water. The next n lines contain pairs of integers that represent the coordinates of the n significant locations. The first significant location is the starting point, where your food supply must be purchased; the last significant location is the destination; and the intervening significant locations (if any) are oases. You need not visit any oasis unless you find it helpful in reaching your destination, and you need not visit the oases in any particular order. 
<p>The input is terminated by a pair of zeroes. </p>

*******OutputConstraints*******

<p>For each trial, print the trial number followed by an integer that represents the number of units of food needed for your journey. Use the format shown in the example. If you cannot make it to the destination under the given conditions, print the trial number followed by the word "Impossible."</p>
<p>Place a blank line after the output of each test case.</p>

*******IOTestCases*******

<pre><b>Input:</b>
4 100 
10 -20 
-10 5 
30 15 
15 35 
2 100 
0 0 
100 100 
0 0 	 

<b>Output:</b>
Trial 1: 136 units of food

Trial 2: Impossible

</pre>


______________________________________________________
FERRY||||||true||||||


<p>Millions of years ago massive fields of ice carved deep grooves in the mountains of Norway. The sea filled these grooves with water. The Norwegian people call them fjords. This landscape of mountains and water is beautiful, but it makes traveling difficult. The usual scheme is: drive some kilometers, wait for a ferry, cross a fjord with the ferry, drive some more kilometers, and so on until the destination has been reached. To reach a destination as early as possible, most people have the following strategy: drive as fast as allowed (the maximum speed is 80 km/h) to the next ferry, and wait until it goes. Repeat until the destination has been reached. 
<p>Since driving fast requires more fuel than driving slow, this strategy is both expensive and harmful to the environment. The new generation of cruise control systems is designed to help. Given the route you want to go, these systems will gather information about the ferries involved, calculate the earliest possible time of arrival at the final destination, and calculate a driving scheme that avoids driving faster than needed. The systems will calculate your road speed so that you board the next ferry the moment it leaves. 
<p>Given a route (a sequence of road-pieces and crossings with ferries), you must write a program to calculate the minimal time it takes to complete this route. Moreover, your program must find a driving scheme such that the maximal driving speed at any point during the trip is as small as possible. </p>

*******InputConstraints*******

<p>The input file contains one or more test cases. Each test case describes a route. A route consists of several sections, each section being either a piece of road or a crossing. The first line in the description contains a single number s (s > 0), which is the number of sections in the route. The next s lines contain the descriptions of the sections. Every line describing a section starts with two names: the place of departure and the place of arrival, followed by either the word &#8216;road&#8217; or the word &#8216;ferry&#8217; indicating what kind of section it is. If the section is a road, its length (a positive integer) is given in km. For example: </p>
<p><i>Dryna Solholmen road 32</i></p>
<p>Lines describing ferry sections have more information. Following the word &#8220;ferry&#8221;, the duration of the ferry crossing, in minutes (a positive integer) is given. This is followed by the frequency f (f > 0) of the ferry, that is, the number of times the ferry departs in a single hour. The next f integers give the departure times of the ferry, in ascending order. For example: </p>
<p><i>Manhiller Fodnes ferry 20 2 15 35 </i></p>
<p>The ferry travels from Manhiller to Fodnes in 20 minutes, and it leaves twice an hour (on 0h15, 0h35, 1h15, 1h35,&#8230;). The beginning of the entire trip always starts at a full hour. The sections in a route are consecutive, that is, if a section goes from A to B then the next section starts at B. Every route in the input can be traveled in no more than 10 hours. 
<p>The input is terminated by the number zero on a line by itself.

*******OutputConstraints*******

<p>Output for each test case is a single line containing three items. The first item is the test case number. The second is the total travel time for an optimal scheme in the form hh:mm:ss. The third item is the maximal road speed in an optimal scheme rounded to two digits to the right of the decimal point. 
<p>Place a blank line after the output of each test case.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
Bygd Bomvei road 7
2
Ferje Overfarten ferry 20 2 5 25
Overfarten Havneby ferry 30 3 10 30 50
5
Begynnelse Brygge road 30
Brygge Bestemmelse ferry 15 4 10 25 40 55
Bestemmelse Veiskillet road 20
Veiskillet Grusvei road 25
Grusvei Slutt ferry 50 1 10
0

<b>Output:</b>
Test Case 1: 00:05:15 80.00

Test Case 2: 01:00:00 0.00

Test Case 3: 03:00:00 45.00

</pre>


______________________________________________________
ISLHOP||||||true||||||


<p>The company Pacific Island Net (PIN) has identified several small island groups in the Pacific that do not have a fast internet connection. PIN plans to tap this potential market by offering internet service to the island inhabitants. Each groups of islands already has a deep-sea cable that connects the main island to the closest internet hub on the mainland (be it America, Australia or Asia). All that remains to be done is to connect the islands in a group to each other. You must write a program to help them determine a connection procedure. </p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:islhop.jpg"></img>
<p>For each island, you are given the position of its router and the number of island inhabitants. In the figure, the dark dots are the routers and the numbers are the numbers of inhabitants. PIN will build connections between pairs of routers such that every router has a path to the main island. PIN has decided to build the network such that the total amount of cable used is minimal. Under this restriction, there may be several optimal networks. However, it does not matter to PIN which of the optimal networks is built. 
<p>PIN is interested in the average time required for new customers to access the internet, based on the assumption that construction on all cable links in the network begins at the same time. Cable links can be constructed at a rate of one kilometer of cable per day. As a result, shorter cable links are completed before the longer links. An island will have internet access as soon as there is a path from the island to the main island along completed cable links. If <i>m<sub>i</sub></i> is the number of inhabitants of the <i>i</i>th island and t<sub>i</sub> is the time when the island is connected to the internet, then the average connection time is:</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:islhop2.jpg"></img>

*******InputConstraints*******

<p>The input consists of several descriptions of groups of islands. The first line of each description contains a single positive integer n, the number of islands in the group (n <= 50). Each of the next n lines has three integers x<sub>i</sub>, y<sub>i</sub>, m<sub>i</sub>, giving the position of the router (x<sub>i</sub>, y<sub>i</sub>) and number of inhabitants m<sub>i</sub>(m<sub>i</sub> > 0) of the islands. Coordinates are measured in kilometers. The first island in this sequence is the main island. 
<p>The input is terminated by the number zero on a line by itself. </p>

*******OutputConstraints*******

<p>For each group of islands in the input, output the sequence number of the group and the average number of days until the inhabitants are connected to the internet. The number of days should have two digits to the right of the decimal point. Use the output format in the sample given below. </p>
<p>Place a blank line after the output of each test case. </p>

*******IOTestCases*******

<pre><b>Input:</b>
7
11 12 2500
14 17 1500
9 9 750
7 15 600
19 16 500
8 18 400
15 21 250
0

<b>Output:</b>
Island Group: 1 Average 3.20

</pre>


______________________________________________________
OIL||||||true||||||


<p>Prospecting for new sources of oil has become a high-technology industry. With improved drilling technology it has become economically viable to seek out ever smaller and harder to reach deposits of oil. However, using exploratory drilling to locate these deposits is not cost-efficient, so researchers have developed methods to detect oil indirectly. </p>
<p>One such method to detect oil is sonar, which uses reflected sound waves to locate caves in underground rock formations. Determining how much oil can be contained in such a cave is a difficult problem. </p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:oil.jpg"></img>
<p>In this problem, you will be given some cross-sections of underground caves, represented by polygons such as the ones shown in the figure. Some of the points bounding the polygon may be holes through which oil can seep out into the surrounding rock (represented by black circles in the figure). Given the polygonal shape of the cave and the positions of the holes, you must compute the maximum amount of oil that could be in the cave (shown as gray shaded areas in the figure). This amount is limited by the fact that, in any connected body of oil, the oil level can never be above a hole, since it would drain into the surrounding rock instead. </p>

*******InputConstraints*******

<p>The input contains several cave descriptions, each in the form of a polygon that specifies a cross-section of a cave. The first line of each description contains a single integer n, representing the number of points on the polygon <b>(3 <= n <= 10000)</b>. </p>
<p>Each of the following n lines contains three integers xi, yi, hi. The values (xi, yi) give the positions of the points on the boundary of the polygon in counterclockwise order. The polygon is simple, that is, it does not cross or touch itself. The value of hi is equal to 1 if the point is a hole through which oil can seep out, and 0 otherwise. The "upward" direction in each case is the positive y-axis. </p>
<p>The input is terminated by a zero on a line by itself. </p>

*******OutputConstraints*******

<p>For each cave description, print its oil capacity. Approximate the oil capacity by the area within the given cross-section that may contain oil, rounded to the nearest integer.</p>

*******IOTestCases*******

<pre><b>Input:</b>
4 
10 0 0 
5 10 1 
0 20 0 
-10 0 0 
11 
0 6 0 
1 5 1 
6 0 0 
10 4 0 
8 6 0 
6 4 0 
4 6 0 
8 10 0 
10 8 0 
12 10 0 
8 14 1 
0

<b>Output:</b>
150
27
</pre>

<b>Test data has been corrected and enhanced on Sep. 13, 2010. Thanks to <a href="http://www.spoj.pl/users/darooha">Danny Sleator</a>'s help.</b>


______________________________________________________
RECTNG2||||||true||||||


<p>A partition of a rectangle is either a whole rectangle or a subdivision the rectangle into either a upper part and a lower part or a left part and a right part, and each part is a partition of the corresponding rectangle. Figure 1 shows several examples of partitions.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:rectng21.jpg"></img>
<p>Figure 2 shows three equal sized rectangles, partitioned into sub-rectangles. Partition B is obtained from partition A by partitioning two of the sub-rectangles of A. Generally, if a partition B is obtained from A by partitioning one or more of its sub-rectangles, we say that B is finer than A, or that A is coarser than B. This relation is partial: partition C is neither coarser nor finer than A or B.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:rectng22.jpg"></img>
<p>Given two partitions D and E of the same rectangle, infinitely many partitions exist that are finer than both D and E. In Figure 3 both F and G are finer than D and E. Among the partitions that are finer than both D and E, a unique one exists that is coarsest. This partition is called the infimum of D and E. In Figure 3, partition F is the infimum of D and E.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:rectng23.jpg"></img>
<p>In Figure 4, both H and J are coarser than D and E. Here J is the finest partition that is coarser than D and E. Then J is the supremum of D and E. </p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:rectng24.jpg"></img>
<p>Write a program that, given two partitions of the same rectangle, finds the infimum and the supremum of these partitions.</p>

*******InputConstraints*******

<p>The input file contains one or more test cases. The first line of each test case gives the width w and height h of the rectangle (0 < w, h <= 20). In the next h+1 lines the two partitions are given, as in the sample. Each of these lines contains 4*w+3 characters. The first 2*w+1 of these belong to the first partition; the last 2*w+1 of these belong to the second partition. A space separates the two partitions. Horizontal lines are created using underscores &#8216;_&#8217;, vertical lines using &#8216;|&#8217;. </p>
<p>The input is terminated by a pair of zeroes. </p>

*******OutputConstraints*******

<p>For every case in the input file the output contains a single line containing the case number (in the format shown in the sample), followed by the infimum and the supremum of the two partitions, using the same format as the input. 
<p>Place a blank line after the output of each test case.</p>

*******IOTestCases*******

<pre><b>Input:</b>
4 3
 _ _ _ _   _ _ _ _ 
|_ _ _ _| |_|_ _ _|
|   |   | |       |
|_ _|_ _| |_ _ _ _|
3 4
 _ _ _   _ _ _ 
| |   | | |   |
| |   | |_|_ _|
|_|_ _| |   | |
|_ _|_| |_ _|_|
0 0

<b>Output:</b>
Case 1:
 _ _ _ _   _ _ _ _ 
|_|_ _ _| |_ _ _ _|
|   |   | |       |
|_ _|_ _| |_ _ _ _|
Case 2:
 _ _ _   _ _ _ 
| |   | |     |
|_|_ _| |     |
|_|_|_| |     |
|_ _|_| |_ _ _|



______________________________________________________
SSORT||||||true||||||


<p>Your younger brother has an assignment and needs some help. His teacher gave him a sequence of numbers to be sorted in ascending order. During the sorting process, the places of two numbers can be interchanged. Each interchange has a cost, which is the sum of the two numbers involved.
<p>You must write a program that determines the minimal cost to sort the sequence of numbers.</p>

*******InputConstraints*******

<p>The input file contains several test cases. Each test case consists of two lines. The first line contains a single integer n (n>1), representing the number of items to be sorted. The second line contains n different integers (each positive and less than 1000), which are the numbers to be sorted.
<p>The input is terminated by a zero on a line by itself.</p>

*******OutputConstraints*******

<p>For each test case, the output is a single line containing the test case number and the minimal cost of sorting the numbers in the test case. 
<p>Place a blank line after the output of each test case.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
3 2 1
4
8 1 2 4
5
1 8 9 7 6
6
8 4 5 3 2 7
0

<b>Output:</b>
Case 1: 4

Case 2: 17

Case 3: 41

Case 4: 34

</pre>



______________________________________________________
LEXBRAC||||||true||||||


<p>Correct Bracket Sequence (CBS) is a sequence that can be obtained through following rules:
<br>1) An empty string is the CBS. 
<br>2) If A is a CBS, then B = (A) is also a CBS. 
<br>3) If A is a CBS, then B = [A] is also a CBS. 
<br>4) If A and B are CBS, then C = AB is also a CBS.
<br>Length of the CBS is the number of brackets in it, and this number is always even.
<br>Assume that '(' < ')' < '[' < ']'. 
<br>CBS a1a2 ... an is lexicografically smaller than the CBS b1b2 ... bn if and only if there exists an integer i, i <= n, so that aj=bj, for each j, 1 <= j < i and ai < bi.

<h3>Illustration</h3>
<p>Enumerate all CBS length 4 in lexicographical order: 
(()), ()(), ()[], ([]), [()], [[]], [](), [][].

<h3>Task</h3>
<p> Your task is to find k-th CBS with length n in lexicographical order


*******InputConstraints*******

<p>Contains 2 integers n (2..250) and k (1..10^120)


*******OutputConstraints*******

<p>Print the k-th CBS with length n in lexicographical order

*******IOTestCases*******

<pre>
<b>Input:</b>
4
3
<b>Output:</b>
()[]
</pre>



______________________________________________________
WORDS||||||true||||||


<p>
Consider the following game: you are given a word W that contains only lower-case letters ("a" to "z"). You are also given a set of words and you are allowed to do the following operation: choose a suffix of W and replace it with another word (you can do this only if that word contains the suffix as its prefix). For example, if the current words is "acmicpc" you can choose to replace the suffix "pc" with any word in the set you are given that starts with "pc", e.g. "pcaaargh" thus forming the word "acmicpcaaargh". You can then repeat this procedure as many times as you wish. You are free to choose any suffix of the current word as long as it matches a prefix of the word you are replacing it with. You can also choose not to do the operation at all. Each suffix you replace must have length at least 1 (you cannot replace the "null suffix" with a word). 

<p>You are also given an integer L, 1 &#8804; L &#8804; 5. Your task is to find how many different subwords of length exactly L can be produced using the following operation. A "subword" means a substring of length L.


*******InputConstraints*******

<p>The first line of the input file contains two integers, N and L separated by space. N, 1 &#8804; N &#8804; 100 is the number of words in the set (including the initial word). The next N lines describe one word each. No other symbols except small latin letters, and the end-of-line symbol are found on these lines.
Each word has length at least L and at most 128. The word you start with is the first word in this set.


*******OutputConstraints*******

<p>The only line of the output should contain one integer: the number of different subwords of length L that can be produced using the operation described above.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 5
acmicpc
pcaaaaaaargh

<b>Output:</b>
11
</pre>



______________________________________________________
BIGSEQ||||||true||||||


<p>You are given the sequence of all K-digit binary numbers:
0, 1,..., 2<sup>K</sup>-1.
You need to fully partition the sequence into M chunks.  Each chunk
must be a consecutive subsequence of
the original sequence.  Let S<sub>i</sub> (1 &#8804; i &#8804; M) be the total
number of 1's in all
numbers in the ith chunk when written in binary, and let S be the
maximum of all S<sub>i</sub>,
i.e. the maximum number of 1's in any chunk.  Your goal is to
minimize S.


*******InputConstraints*******

<p>In the first line of input, two numbers, K and M (1 &#8804; K &#8804;
100, 1 &#8804; M &#8804; 100, M &#8804; 2^K), are given,
separated by a single space character.


*******OutputConstraints*******

<p>In one line of the output, write the minimum S that can be obtained
by some split. Write it without leading zeros. The result is not
guaranteed to fit in a 64-bit integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 4

<b>Output:</b>
4
</pre>



______________________________________________________
DISTANCE||||||true||||||


<p>The L<sub>1</sub> distance of two d-dimensional points is the sum of
absolute values of their coordinate differences (i.e.
&#931;<sub>i=1</sub><sup>d</sup> |x<sub>i</sub> - y<sub>i</sub>| for two points x,y).  Given N points in
the plane you must find the farthest pair of points under the L<sub>1</sub>
distance metric and output their distance.


*******InputConstraints*******

<p>The first line of the input is "N d" (2 &#8804; N &#8804; 100000, 1 &#8804;
d &#8804; 6) signifying that there are N points in d-dimensional
space.  N lines then follow, where the ith line is a
space-separated list of d numbers, the coordinates of the ith point.
All given coordinates are integers that are at most 1000000 in
absolute value, and all given points are distinct.


*******OutputConstraints*******

<p>Your output should consist of a single integer, the farthest distance
between a pair of input points, followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 2
0 0
-5 0
1 1

<b>Output:</b>
7
</pre>



______________________________________________________
SEGMENTS||||||true||||||


<p>There are N horizontal line segments in the plane.  The ith segment
has some height h<sub>i</sub> (which may be negative) and runs from x = a<sub>i</sub>
to x = b<sub>i</sub> (a<sub>i</sub> < b<sub>i</sub>).  Segments do not contain their endpoints.
You must draw a set of vertical lines (note <i>lines</i> and not <i>line segments</i>) so that every given horizontal segment is
intersected at least once and at most R times by vertical lines in such a way that R
is minimized.


*******InputConstraints*******

<p>The first line of the input is N (1 &#8804; N &#8804; 400), the number of
horizontal line segments.  N lines then follow, where the ith line
is "a<sub>i</sub> b<sub>i</sub> h<sub>i</sub>".  Each of a<sub>i</sub>,b<sub>i</sub>,h<sub>i</sub> are 32-bit signed
integers.  Horizontal segments may overlap.


*******OutputConstraints*******

<p>Your output should consist of a single integer, the smallest value of
R that is achievable, followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
0 1 5
0 2 -2
1 2 7

<b>Output:</b>
2
</pre>



______________________________________________________
TREEGAME||||||true||||||


<p>A complete binary tree of depth h is given. You can asign the
value 0 or 1 to each leaf. Its internal nodes compute their values
based on the values
of their children, which is 0 if both children have value 1, and 1
otherwise.  You play a game with a computer.  The computer can ask you for
a value of any leaf, and you can tell him either 0 or 1.  The computer
wants to
know the root value, and he will keep asking until he is absolutely sure
what the root value is. Your goal is to make him ask as many questions as
possible.

It is known that you can make a computer ask for all leaves.  For a given
sequence of leaves determine a sequence of 0's and 1's as answers to
those leaves such that at no point before asking the last leaf value can
the computer be sure of the root value.  You must answer each question optimally (i.e. you should not make use of the knowledge of what the computer's (i+1)st query will be when you answer the ith query).


*******InputConstraints*******

<p>In the first line of input the number h is given (1 &#8804; h &#8804; 15). In
the second line a space-separated list of 2<sup>h</sup> numbers are given. They are
a permutation of the numbers 1, 2, ..., 2<sup>h</sup>, and they represent the
order of asked leaves (leaves of a tree are indexed from left to right).


*******OutputConstraints*******

<p>On a single line write a space-separated sequence of 0's and 1's
corresponding to the values of leaves in the given order of being asked. If
there are multiple solutions, write any of them.  Do not output a response for the last query.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
5 2 7 3 1 6 8 4

<b>Output:</b>
1 1 1 1 0 0 1
</pre>



______________________________________________________
COMPASS||||||true||||||


<p>A group of adventurers are on an expedition to reach the North Pole. The only instrument they have is a compass that points to the pole.
However, the compass is broken and although its measurements are consistent, the direction it points to is some fixed but unknown angle away from true North. For example, if the error angle is 90 degrees, the compass will always point East at times when it should point North. This error angle may be zero, in which case the compass is not broken.


*******InputConstraints*******

<p>To overcome this difficulty the group decided to take measurements at several different points and try to recover the location of the North pole from that. For simplicity, we assume that the region around the North pole is a plane in which a coordinate system is introduced.
Each point is then described by a pair of real numbers (x,y), x,y &#8712; [-200, 200]. One of those points (not necessarily (0,0)) is the location of the pole. The compass would always point to that location if it were not broken. Instead, it always points a fixed angle away from the true direction to the pole.

In this problem we assume that the magnetic pole is the same as the geographic pole and that it is a point source.


*******OutputConstraints*******

<p>The first line of input specifies one integer number N, N < 10, the number of measurements taken. Each of the next N lines contains four space separated real numbers: the first two are the x and y coordinates of the point at which the measurement was taken, the third and fourth are (u<sub>x</sub>, u<sub>y</sub>), the direction of a unit vector indicating where the compass needle points. 

There should be only one line of output that should contain two real numbers separated by space: the x and y coordinates of the pole. Your output is considered correct if it is within an additive 0.01 of the correct answer.

All measurements are consistent and it is always possible to determine the location of the North pole from them. None of the measurements is made on the pole.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1.000000 0.000000 -0.000000 -1.000000
-1.000000 0.000000 0.000000 1.000000
0.000000 1.000000 1.000000 0.000000
0.000000 -1.000000 -1.000000 0.000000

<b>Output:</b>
0.000000 0.000000
</pre>



______________________________________________________
MARIOGAM||||||true||||||


<p>Mario lives in an <i>N x M</i> maze grid.  In this maze there are coin
boxes, monsters, pipe systems, and walls.  Whenever Mario enters a
cell
containing a coin box, he jumps to hit the box and gets as many coins
as there are in the box (coin boxes do not disappear or lose coins
after being hit).  When Mario enters a cell with a monster, he loses a
life.  Pipe systems are like teleporters: for each system there is
exactly one exit with at least one (but possibly several) entrances
leading to that
exit.  When Mario walks into the entrance to a pipe system he is
teleported to that pipe system's unique exit.  Walking into a pipe
system's exit does nothing special.  Finally, Mario cannot walk into
walls.

<p>Mario decides to play a game.  In the beginning of the game he
starts with three lives at some given position, and at each time step
he looks at all neighboring cells (excluding walls) and chooses one
neighboring cell uniformly at random to walk to (x neighbors y if x is directly above, below, to the left, or to the right of y).  If Mario has no
non-wall neighboring cells then he stays at his current location.  The
game is over when either
Mario is out of lives or it is impossible for him to collect more
coins.  Help Mario figure out the expected number of coins he will
earn in one play of the game.


*******InputConstraints*******

<p>The first line of the input is "<i>N M</i>" (1 &#8804; <i>N,M</i> &#8804; 15), giving the
dimensions of the maze.  What follows are <i>N</i> lines, each of which are
<i>M</i> characters in length.  The ith line displays the contents of the
cells in the ith row of the maze.  Mario starts in the unique
cell with
an '$' (which, beside holding Mario, is otherwise an empty cell).
Cells with monsters are designated with '!'.  Cells with
coin boxes are represented by a number between <i>0</i> and <i>9</i>
(inclusive), which is the number of coins in that coin box.  Each
pipe system is associated with a distinct letter between 'a' and 'z'
(inclusive).  A pipe system's entrances are designated with lower
case letters,
and the unique exit for a given pipe system has the corresponding
capitalized letter
(e.g. a pipe system with entrances labeled 'c' has exactly one exit,
and it is labeled 'C').  Every pipe
system appearing in the maze is
guaranteed to have exactly one exit and at least one entrance.  The
character '#' designates a wall, and '.' designates an empty cell
that Mario can just walk through.


*******OutputConstraints*******

<p>If the expected number of coins Mario collects is infinite, output
-1.  Otherwise, output a
single real number, the expected number of
coins Mario collects before the game is over.  Your answer should be
accurate to within either an absolute or relative error of 10<sup>-6</sup> of the actual answer.
Your output should be followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 3
$1!
a.A

<b>Output:</b>
3.000000000
</pre>



______________________________________________________
STRDIST||||||true||||||


<p>Let A = a<sub>1</sub>a<sub>2</sub>...a<sub>k</sub> and B = b<sub>1</sub>b<sub>2</sub>...b<sub>l</sub> be strings of lengths
k and l,
respectively. The string distance between A and B is defined in the
following
way (d[i,j] is the distance of substrings a<sub>1</sub>...a<sub>i</sub> and b<sub>1</sub>...b<sub>j</sub>, where 0 &#8804; i &#8804; k and 0 &#8804; j &#8804; l -- i or j being 0
represents the empty substring). The definition for d[i, j] is d[0, 0] = 0 and for (i, j) &#8800; (0, 0) d[i, j] is the minimum of all that apply:
<ul>
<li>d[i, j - 1] + 1, if j > 0</li>
<li>d[i - 1, j] + 1, if i > 0</li>
<li>d[i - 1, j - 1], if i > 0, j > 0, and a<sub>i</sub> = b<sub>j</sub></li>
<li>d[i - 1, j - 1] + 1, if i > 0, j > 0, and a<sub>i</sub> &#8800; b<sub>j</sub></li>
<li>d[i - 2, j - 2] + 1, if i &#8805; 2, j &#8805; 2, a<sub>i</sub> = b<sub>j-1</sub>, and a<sub>i-1</sub> = b<sub>j</sub></li>
</ul>

<p>The distance between A and B is equal to d[k,l].

<p>For two given strings A and B, compute their distance knowing that it is not higher than 100.


*******InputConstraints*******

<p>In the first line, k and l are given, giving the lengths of the strings
A and
B (1 &#8804; k, l &#8804; 10<sup>5</sup>). In the second and third lines strings A and
B, respectively, are given.  A and B contain only lowercase
letters of the English alphabet.


*******OutputConstraints*******

<p>In the first line, write one number, the distance between A and B,
followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
8 8
computer
kmpjutre

<b>Output:</b>
4
</pre>



______________________________________________________
LIS2||||||true||||||


<p>Given a sequence of <b>N</b> pairs of integers, find the length of the <b>longest increasing subsequence</b> of it. 
<p>An <b>increasing sequence</b> <i>A<sub>1</sub>..A<sub>n</sub></i> is a sequence such that for every <i> i &lt; j</i>, <i>A<sub>i</sub> &lt; A<sub>j</sub></i>. 
<p>A <b>subsequence</b> of a sequence is a sequence that appears in the same relative order, but not necessarily contiguous. 
<p>A pair of integers <i> (x<sub>1</sub>, y<sub>1</sub>)</i> is less than <i> (x<sub>2</sub>, y<sub>2</sub>)</i> <b>iff</b> <i>x<sub>1</sub> &lt; x<sub>2</sub></i> and <i> y<sub>1</sub> &lt; y<sub>2</sub></i>. 


*******InputConstraints*******

<p>The first line of input contains an integer <b> N</b> (2 &#8804; <b> N</b> &#8804; 100000).
<p>The following <b> N</b> lines consist of <b> N</b> pairs of integers <i>(x<sub>i</sub>, y<sub>i</sub>)</i> (-10<sup>9</sup> &#8804; <i>x<sub>i</sub>, y<sub>i</sub></i> &#8804; 10<sup>9</sup>).


*******OutputConstraints*******

<p>The output contains an integer: the length of the longest increasing subsequence of the given sequence.  


*******IOTestCases*******


<pre>
<b>Input:</b>
8
1 3
3 2
1 1
4 5
6 3
9 9
8 7
7 6

<b>Output:</b>
3
</pre>



______________________________________________________
ARRANGE||||||true||||||


<p>Scientists at the TIFR, Mumbai, are doing some cutting edge research on the Propagation of Signals. A young researcher comes up with a method of progressively amplifying signals, as they progress along a path. The method involves the placing of Amplifiers at regular distances along the line. Each amplifier is loaded with a number a(i), which is called its amplification factor. The method of amplification is simple: an amplifier which recieves a signal of strength X, and has Y loaded in it, results in a signal of strength Y^X [ Y to the power X]. In course of his research, the young scientist tries to find out, that given a set of n amplifiers loaded with a(0), a(1), a(2), ...., a(n-1), which particular permutation of these amplifiers, when placed at successive nodes, with the initial node given a signal of strength 1, produces the strongest output signal.<br><br>

this is better illustrated by the following example : 5 6 4<br>
4^(5^(6^1)) is the strength of the strongest signal, which is generated by putting amplifier loaded with 6 in first place, 5 in second place and 4 in third place.<br><br>

Given a list of integers specifying the set of amplifiers at hand, you must find out the order in which they must be placed, to get the highest signal strength. In case their exist multiple permutations with same output, you should print the one which has bigger amplifiers first.<br>


*******InputConstraints*******

<p>First line of input contains T, the number of test cases. For each test case first line contains a number ni, which is equal to the number of amplifiers available. Next line contains n integers, separated by spaces which denote the values with which the amplifiers are loaded.


*******OutputConstraints*******

<p>Output contains T lines, one for each test case. Each line contains ni integers, denoting the order in which the amplifiers should be kept such that the result is strongest.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
5 6 4
2
2 3

<b>Output:</b>
6 5 4
2 3
</pre>


______________________________________________________
BUILD||||||true||||||


<p>A Millionaire Eccentric Mathematician purchases a small Island, to build his residence. In order to keep away Trespassers, he decides to Build some Beacons (Towers) on the perimeter of the Island. To build these Beacons, he visits the Mainland to purchase Stone. <br /><br>Being obsessed with Prime Numbers, the stone blocks he orders are all Regular Tridecagons (13 Sides). However, their heights are variable. On delivery of the Blocks, he orders them to be flattened perfectly from the top and the bottom, so that the Tridecagonal shape is viewable from the Top (or Bottom), in such a way that the Height of each block measures to a power of 2. The stones, procured from various sources, are of Variable strength.
He intends to build the Beacons by placing Stone Blocks one over the other. The heights of the Towers are specified by the Mathematician, and they are also Prime Numbers. He instructs the Architect to make sure that once the Beacons are complete, the strengths of the used stones add up to the Maximum Possible Number.<br><br/>

The Architect, not knowing how the job can be done, or even whether it CAN be done, with such complicated restrictions, approaches you to find this out for him.<br><br>



*******InputConstraints*******

<p>First line of input contains a positive integer T, the number of test cases. The first line of each test case contains a positive integer K, equal to the total number of stones available. This line is followed by K lines, each containing a pair of positive integers X,Y. Here X denotes the height of that stone (here the height would be 2<sup>X</sup>) and Y denotes its value. Followed is a line containing an integer N, the number of towers. Each of the next N lines contain a single positive number, which is the height H of the corresponding tower the mathematician wants to build.


*******OutputConstraints*******

<p>Output contains T lines, one for each test case, containing a number denoting the maximum sum total of strengths of rocks used to construct the Beacons if solution is possible, else the message "Plan Failed!".


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
2 3
0 4
1
5


<b>Output:</b>
7
</pre>



______________________________________________________
CCOST||||||true||||||


<p>In a small Village near the Himalayas, there is a rich Land-Owner, in Possession of a vast, rectangular tract of land. Unknown to him, a Major Oil Corporation has verified the existence of a vast Oil Resource beneath the land owned by him.<br/><br />

The Oil Company sends a Man to negotiate the purchase of a rectangular field from within the landowner's land, with sides parallel to those of his area. The Landowner, valuing his land according to the trees growing in it and the area to be purchased, gives the company man a Map of his Land, marking the location of trees of different types, and a list of the worth of each type of tree.<br/><br>

To ensure the most economic purchase of land with the required dimensions, the Company Man provides you with the
data in his possession, and alongwith that, a list of the land areas that he considers good by his judgement. <br /><br />

You must provide, for each land area that he has listed, the Sum Total of the values of the Trees that lie Within or On the Boundary of that land area.<br /><br />



*******InputConstraints*******

<p>The first line of the input contains an integer T, which is the number of test cases. For each test case, the first line contains an integer n, equal to the number of trees in the area. This line is followed by n lines each containing 3 integers separated by spaces which are coordinate of the tree ( x, y ) and value of that tree. Following this is an integer R, equal to the number of proposols of land areas given by the Company Man. Next R lines contain 4 integers each (x1, y1, x2, y2) which are the coordinates of lower left ( x1,y1 ) and upper right ( x2, y2 ) corner of the rectangular area.


*******OutputConstraints*******

<p>For each test case, your program should output R lines containing the sum of values of the Trees which lie inside or on the corresponding rectangular plot. There should NOT BE any blank lines between output of different test cases.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
1 1 2
2 2 3
3 3 4
2
1 1 1 2
0 0 5 5

<b>Output:</b>
2
9
</pre>



______________________________________________________
RESIST||||||true||||||



*******InputConstraints*******

<p>Multiple test cases. For each test case:</p>
<p>The first line contains integers N and M; N is a number of nodes in the circuit (2 < N <= 100), M is the number of resistors (0 <= M <= 300). Each of the next M lines consists of three integers A<sub>i</sub>, B<sub>i</sub> and R<sub>i</sub>  &#8212; description of a resistor that has resistance R<sub>i</sub> connecting the nodes A<sub>i</sub> and B<sub>i</sub> (1 <= A<sub>i</sub> , B<sub>i</sub> <= N; 1 <= R<sub>i</sub> <= 100).</p>
<p>Input terminates by EOF.</p>


*******OutputConstraints*******

<p>For each test case, output the total resistance between the nodes 1 and N rounded within two digits after a decimal points.</p>


*******IOTestCases*******

<pre><b>Input:</b>
4 5
1 2 15
2 4 5
1 3 10
3 4 10
2 3 1

<b>Output:</b>
9.40
</pre>


______________________________________________________
DSUBSEQ||||||true||||||


<p>Given a string, count the number of distinct subsequences of it ( including empty subsequence ). For the uninformed, A subsequence of a string is a new string which is formed from the original string by deleting some of the characters without disturbing the relative positions of the remaining characters.
<br/>For example, "AGH" is a subsequence of "ABCDEFGH" while "AHG" is not.


*******InputConstraints*******

<p>First line of input contains an integer T which is equal to the number of test cases. You are required to process all test cases. Each of next T lines contains a string s.


*******OutputConstraints*******

<p>Output consists of T lines. Ith line in the output corresponds to the number of distinct subsequences of ith input string. Since, this number could be very large, you need to output ans%1000000007 where ans is the number of distinct subsequences.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
AAA
ABCDEFG
CODECRAFT


<b>Output:</b>
4
128
496
</pre>


______________________________________________________
ENEMY||||||true||||||


<p>In a modification of the popular game 'Pacman', the player has to move in a two-dimensional grid. Several cells of the grid are blocked. The player can start from any cell that is not blocked and can move in any of the directions, i.e. north, west,south or east, provided that the cells are unblocked.<br/><br />
As soon as the player passes a cell, an enemy is generated in that cell, making it impossible for the player to pass through that cell again. Thus, the player can pass through any given cell only once. The player has to traverse all the unblocked cells in the grid in order to win .<br/><br/>
The player can begin at any free cell. Note that the same path with different starting points and even with the same
starting point but with different paths of traversal is treated as different routes. The problem requires you to print the total number of all such possible routes.


*******InputConstraints*******

<p>Each test case starts with a line containing two integers, m and n. Each of the next m lines contain a string of n characters describing the configuration of the grid. '*' denotes a blocked cell and '.' denotes unblocked cells. The input ends with a case having m = 0 and n = 0 and this case need not be processed.


*******OutputConstraints*******

<p>For each test case, print one line containing the total number of possible routes for the corresponding case. As this number can be quite large, you should print ans%1000000007 where ans is the required result.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
...
.*.
...
3 7
...*...
.*.*.*.
.......
3 3
***
*.*
***
0 0


<b>Output:</b>
16
8
1
</pre>


______________________________________________________
FFROG||||||true||||||


<p>WiseFrog, The King of FrogLand is on his Deathbed. He has 2 Sons, SensibleFrog and SmartFrog. Both of them are "Infinitely Intelligent". To decide who will succeed him as King, he devises a Strategy Game for the two Sons-<br/><br/>

An Arena is constructed, in the form of a Rectangle, having m X n Square Areas. They are labelled as (i,j), starting from the Upper Left extremity of the Arena [i=0,1,2...n-1; j=0,1,2...m-1]. The Squares in the Arena are filled with Flying Frogs, in a Random Manner, such that there can be any number of Frogs in each square.<br/><br/>

Once the Arena is ready, the 2 Frog Princes begin to play the Game, which is played in the following manner: SensibleFrog, being the King's favourite, starts the Game.<br/><br/>

Each Prince takes his turn alternately. In his turn, he is permitted a maximum of K moves, and a minumum of 1 move. A "Move" is defined as the Issuing of an Order to any Frog of his choice. The "order" consists of the Direction to jump in, and the Number of Squares to Cover ( which should be positive ), the directions of movement permitted being Up and Left Only. However, the Order must not be such that it causes the Frog to land outside the Arena. Being Flying Frogs, the frogs in the Arena can jump any distance without trouble.<br/><br/>

If there arrives a situation where the Prince having his turn does not have ANY move Possible ( that is, ALL the Flying Frogs are already at the top-left most square of the arena ), the other Prince is declared the Winner. Given all the Starting Conditions, your task is to find out who becomes the King of FrogLand.<br/>


*******InputConstraints*******

<p>First line of input contains an integer T, equal to the number of test cases. Followed is the description of each of the T test cases and you are required to process all test cases. First line of each test case contains three integers m,n,k ( in this order ). Each of the next m lines contain n integers separated by spaces. Jth integer in ith line corresponds to the number of Flying Frogs in Square (i,j) in the arena.


*******OutputConstraints*******

<p>Output contains one line for each test case. You have to output "SensibleFrog Wins!." if SensibleFrog wins and "SmartFrog Wins!." otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 1 1
837465
2 2 1
0 0
0 1
2 2 2
0 0
0 2


<b>Output:</b>
SmartFrog Wins!.
SmartFrog Wins!.
SensibleFrog Wins!.

</pre>


______________________________________________________
GLGRID||||||true||||||


<p>The 21st century introduces the multicores. As a result a research is going on in parallel Computing. With time the number of processor would grow very large. As of now, Professor Biloo  at IIIT asks a student to implement the following code on multiple G-line processors.<br><br/>

<pre>
        for(i=1;i<=x;i++){
                for(j=1;j<=x;j++){
                        for(k=1;k<=a;k++){
                                z=z%y;
                        }
                }
                for(j=1;j<=b;j++){
                        z=z/y;
                }
        }
        for(i=1;i<=c;i++){
                z=z%y;
        }
</pre>

<br/>

<p>The students experiments and finds that the only significant operations are the modulus(%) and division(/) operation which take almost equal time. The time taken by other operations may be ignored in the order analysis. He finds a algorithm to solve the problem in which these operations can be carried out in random order. For his testing he chooses M processors . Each processor will carry out exactly M operations (% or /) .The performance is optimal when such a scheme exactly covers all the operations.<br><br>

Puzzled, the student finds that this can only be done for some specific values of x for given a,b and c. He wants to trick the professor, so he needs few values of x for which his algorithm works. However, to make the professor feel that he manually did it these values of x need to be as small as possible.<br/><br/>

Given the values of a,b,c and k, output the first k values of x, for which the student's algorithm works.<br/><br/>

<b>Note:</b> The value of x should be greater than or equal to 0.<br/>


*******InputConstraints*******

<p>The first line of input contains an integer t , the number of testcases. For each testcase , there is exactly one line which contains 4 space separated a,b,c and k.


*******OutputConstraints*******

<p>For each test case, output the corresponding k values of x, each in successive different lines.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
1 2 1 4


<b>Output:</b>
0
1
2
3

</pre>


______________________________________________________
HHAND||||||true||||||


<p>In a remote part of the Country, there lies a group of towns, quite far from any other areas. These towns are connected by a set of roads, having the property that there is exactly one path connecting any two towns, and every town is connected.<br/><br/>

Apollo Hospitals Ltd. decides to invest in this area, and build some Hospitals. Their analyst has a monumental task ahead of him. His job is to find out a Set of continuous towns, from among them, to build one hospital in each. The path connecting the first town to the last town in the set (which obviously passes through all the remaining ones) should not be more than length L, to avoid inconvenience to the visiting doctors. Also, the analyst has to make sure that his selection of target towns is such that the people of the area have to cover the least distance to reach the hospital closest to them.<br/><br/>

Thus, the towns where Hospitals will be built have to be chosen keeping in mind that the sum of distances that people from each town will need to cover, in order to reach the Hospital closest to them, should be Minimum.
You have to find this minimum sum.<br/>



*******InputConstraints*******

<p>First line of input contains an integer T which is equal to the number of test cases. You are required to process all test cases.Each test case starts with 2 space separated integers N,L. N denotes the number of towns and L is the length of path connecting first and last town in the set. Next N-1 lines follow each contains two space separated integers a and b denoting a road between A and B. A and B are 0 based.


*******OutputConstraints*******

<p>Output consists of T lines. I<sup>th</sup> line in the output corresponds to the minimum sum total of the distances of all the towns with the nearest hospital for the I<sup>th</sup> test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 1
0 1
1 2
4 1
0 1
1 2
2 3


<b>Output:</b>
1
2
</pre>


______________________________________________________
ININT||||||true||||||


<p>Starting from the number '1', every time you can choose a digit from the current number and add it to the number itself.  23, for example, could be changed into 25 or 26. To get 100, using the above scheme, paths A and B are both possible. A requires 21 steps, but B needs only 17 (which is also the minimum) <br><br>

A. 1-2-4-8-16-17-18-19-20-22-24-28-36-39-48-56-62-68-76-83-91-100<br/>
B. 1-2-4-8-16-17-24-28-36-39-48-56-62-68-76-83-91-100<br/><br>

C is another 17 step solution for 100.<br/>
<br/>
C. 1-2-4-8-16-22-24-28-36-39-48-56-62-68-76-83-91-100<br/>
<br/>

Now, you are given several numbers, for each number, print the minimum steps S and number of solutions T. As T could be quite large, you should print T%1000000007 instead.<br />


*******InputConstraints*******

<p>Each line of input contains a integer K as a test case. Input ends with End Of File.


*******OutputConstraints*******

<p>For each test case print the minimum steps and solutions in a single line. If it's impossible to get the number, print "IMPOSSIBLE" instead. ( without the quotes ).


*******IOTestCases*******


<pre>
<b>Input:</b>
16
100
87

<b>Output:</b>
4 1
17 2
IMPOSSIBLE
</pre>


______________________________________________________
JAZZYJOB||||||true||||||


<p>With the magnification of the Energy Crisis, Chemists have decided to re-examine the existing procedures of preparation of various Chemical Substances.<br/><br/>

As part of this Project, they list all the elements that they commonly find as raw material (Initial Reactants), and the ones that they intend to produce (Final Products). They also prepare an extensive list of the various known reactions/processes that are used to convert one substance to another.<br/><br/>

One major issue that they find is that the Initiation of many reactions needs absurdly large amounts of energy. They wish to keep low the activation energies used in the new procedures.<br/><br/>

Knowing all this, they now attempt to find out such methods of preparing the target substances :<br/>

(1) in which the highest value of activation energy needed by any of the reactions that make up the path, in any of the methods, does not exceed a given upper value,<br/>
(2) which minimizes the Total reactions/procedures performed in All the (Initial Reactant) --> (Final Product) conversions.<br/><br/>

Each substance, on being given a specific amount of energy, converts into some other substance. The formed substance is unique for a particular value of Energy. The process of creating each successive Target Substance (Final Product) starts from one of the Source Substances Only, and leaves no by-products.<br/><br/>

Your task is to find the minimum value of upper bound such that all final products are obtainable with that upper bound and for this minimum value, find out the minimum
number of conversions to get all the final products. <br/><br/>

<b>Note:</b> None of the procedures are Reversible, unless explicity stated. Also, if a procedure Is reversible, the Energy requirement may or may not be same. You may assume that there is a limitless supply of the Initial Reactants.<br/>



*******InputConstraints*******

<p>The first line contains an integer t which is the number of test cases. Each test case begins with a line containing three integers : number of Initial eactants(S), Final Products(D) and the total number of elements (N). Then S+D lines follow, first S lines contain IDs of Initial reactant ( 0 based ) and next D lines contain ID's of Final products ( 0 based). Then follows a line containing an integer R which is number of reactions possible. Then follow R lines, each containing three integers, the Substance(S), the converted substance(C) and the activation energy(A) units required for the reaction. 0 &#8804; S,C  &lt; n.


*******OutputConstraints*******

<p>For each test case , output in a different line ,2 integers (a,b) separated by spaces where a is the minimum upper value and b is the minimum number of conversions required for corresponding a. In case that all final products are not obtainable for any value of upper bound, Print a single line with message "Excessive Energy.".


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 2 6
1
3
0
3
6
1 2 2
2 4 3
4 5 1
4 2 2
3 0 4
5 0 1


<b>Output:</b>
3 4
</pre>


______________________________________________________
MINTRIAN||||||true||||||


<p>Check whether the given graph is <a href="http://mathworld.wolfram.com/ChordalGraph.html">chordal</a>.


*******InputConstraints*******

<p>The first line contains an integer 1<=t<=200 denoting the number of test cases. Then t graphs are given (not necessarily connected). Each graph is described by two lines. The first line contains a string of the form:

n=nodes,m=edges:

The second line gives the edges of the graph separated by commas. Each edge is given as a pair of vertices: {u,v}. Vertices of the graph are denoted with integers 0...,n-1. 

*******OutputConstraints*******

<p>For each test case print YES if the graph is chordal, or NO if it isn't.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
n=6,m=4
{0,1} {2,3} {3,4} {3,5} 
n=6,m=7
{0,3} {1,2} {1,3} {2,4} {2,5} {3,4} {3,5} 

<b>Output:</b>
YES
NO
</pre>



______________________________________________________
PLD||||||true||||||


<p>
A palindrome is a word, phrase, number or other sequence of units that has the property of reading the same in either direction, e.g. 'racecar', 'solos'.

<h3>Task</h3>
<p> You are given a number k (2&#8804;k&#8804;30000) and a non-empty string S whose length does not exceed 30000 lowercase  letters.
<br> We say two palindromes are different when they start from different positions. How many different palindromes of the length k does S contains?



*******InputConstraints*******

<p>The first line contains  K. The second line contains S. K does not exceed the length of S. 


*******OutputConstraints*******

<p> The first and only line should consist of a single number - the number of palindromes found. 

*******IOTestCases*******

<pre>
<b>Input:</b>
5
ababab
<b>Output:</b>
2
</pre>


______________________________________________________
RABBIT1||||||true||||||


<p>Rabbits  are  incredible  animals.  One  of  their  more   interesting
characteristics  is  related with  their  reproduction. If  we  keep a
couple  of  adult  rabbits  in  optimal  conditions  of  life,  it  is
scientifically  proved that,  each month,  that couple  is capable  of
procreating a new couple of  young rabbits. You should know  that only
the adult couples  may procreate and  that the time  taken by a  young
couple of rabbits to  grow (that is, to  become adult) is of  1 month.
For the  convenience of  this task,  we will  be dealing with immortal
rabbits.

<p>Farmer Luis  (FL) is  a great  admirer of  rabbits. FL  bought in  the
market 1 couple of adult rabbits (alive, of course) and know wants  to
raise as  many rabbits  as he  can. Unfortunately,  there is  a little
problem, FL has boxes where he can only put exactly 2^M (1 <= M <= 20)
couples of rabbits (neither more nor  less). FL can use as many  boxes
as he wishes as long as he fulfils the condition above. FL would  like
to know how many couples of rabbits he will not be able to put  inside
boxes if he  raises rabbits for  N (1 <=  N <= 2147483647)  months and
then tries to &#8216;box&#8217; them (put  them inside boxes). You should help  FL
with these calculations. You must consider that FL starts with 1 adult
couple of rabbits the 1st month, and that couples of rabbits reproduce
and grow as stated in the 1st paragraph.


*******InputConstraints*******

<p>Line 1: C  (1 <= C  <= 100), the  number of calculations  your program
will be requested to do

<p>Lines 2-C+1: two integers N and M (in that order)


*******OutputConstraints*******

<p>Lines 1-C: on each  lines print S, which  is the number of  rabbits FL
will not be able to &#8216;box&#8217; for calculation # i


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 2

<b>Output:</b>
0

</pre>

Output explanation:

<p>After  growing couples  of rabbits  during 5  months, FL  has 5  adult
couples and 3 young couples (8  couples in total). FL has boxes  where
can put 2^2 = 4 couples of rabbits, so he can use 2 boxes to &#8216;box&#8217; all
the  8 couples.  If FL  had instead  grown couples  of rabbits  for 4
months, he would  have 5 couples  in total; thus  1 couple would  have
remained un-&#8216;boxed&#8217; (the answer would have been 1). 




______________________________________________________
PHONELIN||||||false||||||

There are several cities and towers on a straight line. Towers can be set to connection-accepting by paying a cost. We are given the location (on the X-axis), of the towers and the cities. Our job is to set up certain towers as connection-accepting. Now every city, pays you an amount equal to <b>D - distance_travelled_by_data</b>, for every unit of data (for every tower) it can send. (distance_travelled_by_data = cityX - towerX); Our job here is to setup connections on differrent towers to get maximal profit. <br>
Each city when it wants to route some data to a tower works with the following algorithm:<br>
(1) Find the nearest tower to the left of the city. <br>
(2) If it is within the range 'D', it sends the data to that tower. If this tower exceeds the range D, or if the tower doesnt accept connections, the city cant send the data and stops immediately. (Doesnt check the next available tower);<br>
(3) If the data is sent sucessfully: Then the city <br>
	(3.1) Skips three towers. (Doesnt care if these three towers are connection-accepting or not);<br>
	(3.2) Tries to send data to the next tower (the fouth one after the skipping), by using step (2);<br>
<br>
<p>Input format:<br>
Input consists of multiple testcases.<br>
First line of each test case, contains two integers: D C T; The range, the number of cities and the number of towers, respectively.<br>
Second line contains exactly C integers saying the location of the cities (on the X-axis). <br>
The next T lines contain exactly two integers: location[i] connection-cost[i]; which is the position of
tower i, and the cost to setup tower i as connection-accepting; <br>
The input ends with a line: "-1 -1 -1" <br>
</p>

<p>Output format:<br>
For each test case, output a single line saying the maximum amount of profit you can make.
</p>

<p>Constraints:<br>
Now two points (towers or cities), will have the same X-coordinate. T,C &lt;= 100.
</p>

Sample Input:<br><pre>
4 9 6
23
43
18
15
29
50
41
31
40
32 2
26 0
46 7
48 0
50 3
38 1
-1 -1 -1
</pre>
<br>
Sample Output:<br><pre>
5</pre>
<br>


______________________________________________________
MAGIC4||||||false||||||

<p><a href="http://www.spoj.pl/content/crazyb0y:MAGIC4.jpg">Click here to get the solution(TLE)</a>


______________________________________________________
GNY07A||||||true||||||


<p>Misspelling is an art form that students seem to excel at. Write a program that removes the nth
character from an input string.


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset consists of a single line of input containing M, a space, and a single word made up of
uppercase letters only. M will be less than or equal to the length of the word. The length of the
word is guaranteed to be less than or equal to 80.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, and the misspelled word. The
misspelled word is the input word with the indicated character deleted.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
4 MISSPELL
1 PROGRAMMING
7 CONTEST
3 BALLOON

<b>Output:</b>
1 MISPELL
2 ROGRAMMING
3 CONTES
4 BALOON
</pre>


______________________________________________________
GNY07B||||||true||||||


<p>Conversion between the metric and English measurement systems is relatively simple. Often, it
involves either multiplying or dividing by a constant. You must write a program that converts between
the following units:
<table>
<tr><th>Type</th><th>Metric</th><th>English equivalent</th></tr>
<tr><th>Weight</th><td>1.000 kilograms</td><td>2.2046 pounds</td></tr>
<tr><td></td><td>0.4536 kilograms</td><td>1.0000 pound</td></tr>
<tr><th>Volume</th><td>1.0000 liter</td><td>0.2642 gallons</td></tr>
<tr><td></td><td>3.7854 liters</td><td>1.0000 gallon</td></tr>
</table>


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset consists of a single line of input containing a floating point (double precision) number, a
space and the unit specification for the measurement to be converted. The unit specification is one of
kg, lb, l, or g referring to kilograms, pounds, liters and gallons respectively.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, and the appropriately converted value
rounded to 4 decimal places, a space and the unit specification for the converted value.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 kg
2 l
7 lb
3.5 g
0 l

<b>Output:</b>
1 2.2046 lb
2 0.5284 g
3 3.1752 kg
4 13.2489 l
5 0.0000 g
</pre>



______________________________________________________
GNY07C||||||true||||||


<p>Chip and Dale have devised an encryption method to hide their (written) text messages. They first
agree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a
matrix. The sender encodes an intermediate format using the following rules:
<ol>
<li>The text is formed with uppercase letters [A-Z] and &lt;space>.
<li>Each text character will be represented by decimal values as follows:

<p><tt>&lt;space> = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26</tt>
</ol>

<p>The sender enters the 5 digit binary representation of the characters&#8217; values in a spiral pattern along
the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For
example, if the text to encode is: "ACM" and R=4 and C=4, the matrix would be filled in as follows:

<p><img align="center" src="http://www.spoj.pl/content/marcog:GNY07_matrix.png">

<p><pre>A = 00001, C = 00011, M = 01101
         (one extra 0)</pre>

<p>The bits in the matrix are then concatenated together in row major order and sent to the receiver.
The example above would be encoded as: 0000110100101100


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset consists of a single line of input containing R (1&lt;=R&lt;=20), a space, C (1&lt;=C&lt;=20),
a space, and a text string consisting of uppercase letters [A-Z] and &lt;space>. The length of the text
string is guaranteed to be &lt;= (R*C)/5.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, and a string of binary digits (R*C) long
describing the encoded text. The binary string represents the values used to fill in the matrix in row-
major order. You may have to fill out the matrix with zeroes (0) to complete the matrix.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
4 4 ACM
5 2 HI
2 6 HI
5 5 HI HO

<b>Output:</b>
1 0000110100101100
2 0110000010
3 010000001001
4 0100001000011010110000010
</pre>



______________________________________________________
GNY07D||||||true||||||


<p>Chip and Dale have devised an encryption method to hide their (written) text messages. They first
agree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a
matrix. The sender encodes an intermediate format using the following rules:
<ol>
<li>The text is formed with uppercase letters [A-Z] and &lt;space>.
<li>Each text character will be represented by decimal values as follows:

<p><tt>&lt;space> = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26</tt>
</ol>

<p>The sender enters the 5 digit binary representation of the characters&#8217; values in a spiral pattern along
the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For
example, if the text to encode is: "ACM" and R=4 and C=4, the matrix would be filled in as follows:

<p><img align="center" src="http://www.spoj.pl/content/marcog:GNY07_matrix.png">

<p><pre>A = 00001, C = 00011, M = 01101
         (one extra 0)</pre>

<p>The bits in the matrix are then concatenated together in row major order and sent to the receiver.
The example above would be encoded as: 0000110100101100


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset consists of a single line of input containing R (1&lt;=R&lt;=20), a space, C (1&lt;=C&lt;=20),
a space, and a string of binary digits that represents the contents of the matrix (R * C binary digits).
The binary digits are in row major order.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, and the decoded text message. You
should throw away any trailing spaces and/or partial characters found while decoding.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
4 4 0000110100101100
5 2 0110000010
2 6 010000001001
5 5 0100001000011010110000010

<b>Output:</b>
1 ACM
2 HI
3 HI
4 HI HO
</pre>



______________________________________________________
GNY07E||||||true||||||


<p>The cook at the <i>Frobbozz Magic Pancake House</i> sometimes falls asleep on the job while cooking
pancakes. As a result, one side of a stack of pancakes is often burned. Clearly, it is bad business to
serve visibly burned pancakes to the patrons. Before serving, the waitress will arrange the stacks of
pancakes so that the burned sides are facing down. You must write a program to aid the waitress in
stacking the pancakes correctly.
<p>We start with a stack of <b><i>N</i></b> pancakes of distinct sizes, each of which is burned on one side. The
problem is to convert the stack to one in which the pancakes are in size order with the smallest on the
top and the largest on the bottom and burned side down for each pancake. To do this, we are
allowed to flip the top <b><i>k</i></b> pancakes over as a unit (so the <b><i>k-th</i></b> pancake is now on top and the pancake
previously on top is now in the <b><i>k-th</i></b> position and the burned side goes from top to bottom and vice
versa).
<p>For example (+ indicates burned bottom, - a burned top):
<p><pre>               +1 -3 -2 [flip 2] &#8658; +3 -1 -2 [flip 1] &#8658; -3 -1 -2 [flip 3] &#8658;
         +2 +1 +3 [flip 1] &#8658; -2 +1 +3 [flip 2] &#8658; -1 +2 +3 [flip 1] &#8658; +1 +2 +3</pre>

You must write a program which finds a sequence of at most <b><i>(3n &#8211; 2)</i></b> flips, which converts a given
stack of pancakes to a sorted stack with burned sides down.


*******InputConstraints*******

<p>The first line of the input contains a single decimal integer, N, the number of problem instances to
follow. Each of the following N lines gives a separate dataset as a sequence of numbers separated
by spaces. The first number on each line gives the number, M, of pancakes in the data set. The
remainder of the data set is the numbers 1 through M in some order, each with a plus or minus sign,
giving the initial pancake stack. The numbers indicate the relative sizes of the pancakes and the
signs indicate whether the burned side is up (-) or down (+). M will be, at most, 30.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, the number of flips (K, where K >= 0)
required to sort the pancakes and a sequence of K numbers, each of which gives the number of
pancakes to flip on the corresponding sorting step. There may be several correct solutions for some
datasets. For instance 3 2 3 is also a solution to the first problem below.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 +1 &#8211;3 &#8211;2
4 &#8211;3 +1 &#8211;2 &#8211;4
5 +1 +2 +3 +4 -5

<b>Output:</b>
1 6 2 1 3 1 2 1
2 6 4 1 4 3 1 2
3 3 5 1 5
</pre>



______________________________________________________
GNY07F||||||true||||||


<p>Deep in the Amazon jungle, exceptionally tall trees grow that support a rich biosphere of figs and
juniper bugs, which happen to be the culinary delight of brown monkeys.

<p>Reaching the canopy of these trees requires the monkeys to perform careful navigation through the
tall tree&#8217;s fragile vine system. These vines operate like a see-saw: an unbalancing of weight at any
vine junction would snap the vine from the tree, and the monkeys would plummet to the ground
below. The monkeys have figured out that if they work together to keep the vines properly balanced,
they can <i>all</i> feast on the figs and juniper bugs in the canopy of the trees.

<p>A <i>vine junction</i> supports exactly two <i>sub-vines</i>, each of which must contain the same number of
monkeys, or else the vine will break, leaving a pile of dead monkeys on the jungle ground. For
purposes of this problem, a <i>vine junction</i> is denoted by a pair of matching square brackets [ ], which
may contain nested information about junctions further down its <i>sub-vines</i>. The nesting of vines will
go no further than <b>25</b> levels deep.

<p><img align="center" src="http://www.spoj.pl/content/marcog:GNY07_monkeys.png">

<p>You will write a program that calculates the <i>minimum</i> number of monkeys required to balance a
particular vine configuration. There is <b>always</b> at least one monkey needed, and, multiple monkeys
may hang from the same vine.


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset consists of a single line of input containing a vine configuration consisting of a string of
[ and ] characters as described above. The length of the string of [ and ] will be greater than or
equal to zero, and less than or equal to 150.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The dataset
number as a decimal integer (start counting at one), a space, and the minimum number of monkeys
required to reach the canopy successfully. Assume that all the hanging vines are reachable from the
jungle floor, and that all monkeys jump on the vines at the same time.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
[]

[[][[]]]

<b>Output:</b>
1 2
2 1
3 8
</pre>



______________________________________________________
GNY07G||||||true||||||


<p>Just when you thought we had run out of model rocket height problems...
<p>Yet another method used to determine the height achieved by a model rocket is the vertical line
method. Two observers A and B are spaced D feet apart along a base line along one edge of the flat
test field. The launch platform is equidistant from observers A and B and L feet from the base line.
Each observer has a theodolite or some other device for measuring angle above the horizontal
(elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight
line makes with the line from A through B measured counter-clockwise). Each measuring device is on
a stand. A&#8217;s device is HA feet above the level of the launch platform and B&#8217;s device is HB feet above
the level of the launch platform. When a rocket is fired, near the top of its flight, it deploys a parachute
and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff
of smoke from their location. If the peak location is on the wrong side of the baseline or outside the
lines determined by A and B perpendicular to the base line, it is out of bounds and disqualified. From
this information, the height of the rocket may be determined as follows:
<p>Each sight line determines a vertical plane. These two planes intersect in a vertical line (thus the
name of the method). Each sight line intersects this vertical line in a point. If these points are more
than ERRDIST feet apart, an error is assumed and the flight is rejected. Otherwise, the point halfway
between the two points where a sight line intersects the vertical line is computed. The rocket height is
the distance of this midpoint above the launch platform.
<p>You must write a program which, given the parameters D (the distance in feet between observers A
and B), L (the distance in feet from the base line to the launch platform), HA (the distance of the
measuring device A above the launch platform in feet), HB (the distance of the measuring device B
above the launch platform in feet), ERRDIST (the maximum distance between the intersection points
of a sight line with the vertical line), &#945; (the elevation angle of the rocket in degrees measured by the
left observer A), &#946; (the elevation angle of the rocket in degrees observed by the right observer B), &#947;
(the azimuth angle in degrees measured by the left observer A) and &#948; (the azimuth angle in degrees
measured by the right observer B), computes the height of the rocket above the launch platform in
feet to the nearest foot.


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.
<p>The second line contains the parameters D, L, HA, HB and ERRDIST in that order as (floating point)
decimal values. These values would be measured once at the beginning of the day and remain fixed
through all rocket shots.
<p>Each succeeding line of input represents a single dataset. Each dataset will contain the angles &#945;, &#946;,
&#947; and &#948; in that order (measured in degrees) as (floating point) decimal values for a rocket shot.


*******OutputConstraints*******

<p>For each dataset of four angles, the output consists of a single line . If angles &#945;, &#946; and &#947; are not
strictly between 0 and 90 degrees or &#948; is not strictly between 90 degrees and 180 degrees, the line
should contain the dataset number, a space and the word &#8220;DISQUALIFIED&#8221; (without the quotes).
Otherwise, if the distance between the intersection points of a sight line with the vertical line is more
that ERRDIST feet, the line should contain the dataset number, a space and the word &#8220;ERROR&#8221;
(without the quotes). Otherwise, the line should contain the dataset number, a space and the height
above the launch platform in feet to the nearest foot.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
100.0 300.0 5.25 2.92 5.00
40.1 36.2 35.3 151.6
64.9 71.1 15.7 160.1
44.9 41.2 33.1 152.5
44.9 41.2 33.1 52.5

<b>Output:</b>
1 50
2 ERROR
3 58
4 DISQUALIFIED
</pre>



______________________________________________________
GNY07H||||||true||||||


<p>We wish to tile a grid 4 units high and <i><b>N</b></i> units long with rectangles (dominoes) 2 units by one unit (in
either orientation). For example, the figure shows the five different ways that a grid 4 units high and 2
units wide may be tiled.

<p><img align="center" src="http://www.spoj.pl/content/marcog:GNY07_tiles.png">

<p>Write a program that takes as input the width, <i><b>W</b></i>, of the grid and outputs the number of different ways
to tile a 4-by-<i><b>W</b></i> grid.


*******InputConstraints*******

<p>The first line of input contains a single integer <i><b>N</b></i>, (1 &#8804; <i><b>N</b></i> &#8804; 1000) which is the number of datasets that
follow.
<p>Each dataset contains a single decimal integer, the width, <i><b>W</b></i>, of the grid for this problem instance.


*******OutputConstraints*******

<p>For each problem instance, there is one line of output: The problem instance number as a decimal
integer (start counting at one), a single space and the number of tilings of a 4-by-<i><b>W</b></i> grid. The values
of <i><b>W</b></i> will be chosen so the count will fit in a 32-bit integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
3
7

<b>Output:</b>
1 5
2 11
3 781
</pre>



______________________________________________________
GNY07I||||||true||||||


<p>The Flathead Testing Corporation (FTC) supplies various tests for Human Resources departments at
many companies. One type of test they supply includes spatial concepts questions such as:

<p>When the following figure is folded back on the interior lines it forms a cube.

<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial1.png">

<p>Which of the following could be an image of one corner of the resulting cube?

<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial2.png">

<p>Unfortunately, FTC was recently embarrassed when one such question on a test had no solution
among the choices and another (given in the example) had two solutions among the choices (1 and
3).

<p>FTC needs a routine which will read in a specification of the unfolded cube and specifications of
corner views and determine, for each corner view, whether it is a view of a corner of the cube
specified in the unfolded part.

<p>FTC uses the following images as faces of each cube. Each image is symmetrical about the vertical
axis and has a distinguished end (up in each image).

<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial3.png">

<p>The unfolded cube is specified by a string of six pairs of a letter indicating the image on the face and
a number indicating the orientation of the distinguished end of the face: 1 is up, 2 is right, 3 is down
and 4 is left. The faces are specified in the order given in the following figure with the orientations
indicated in the square to the right:

<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial4.png"><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial4.png">

<p>So the unfolded cube in the example is specified as &#8220;F3E4E2D3C2F3&#8221;. FTC has a routine which
reads this specification and generates the unfolded image for the question.

<p>The answer images are specified by three pairs of a letter and a digit indicating a face image and an
orientation as indicated in the following diagram. The faces are specified in the order top, right, left
(indicated by numbers in brackets in the figures), that is clockwise around the center vertex starting at
the top. The orientation of the distinguished end of each face is indicated by the numbers on the
edges in the diagram. They circle each face clockwise, starting at the center vertex.

<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:GNY07_spatial6.png">

<p>For the example, the answer figures are specified as &#8220;C2D2F2&#8221;, &#8220;E3F3C4&#8221;, &#8220;F2C2D2&#8221;, &#8220;D1E1F3&#8221; and
&#8220;E1C1E1&#8221;. Again, FTC has a routine which reads this specification and generates each answer
image for the question. They just need your routine to make sure there is exactly one correct answer
to each question.


*******InputConstraints*******

<p>The first line of input contains a single integer N, (1 &#8804; N &#8804; 1000) which is the number of datasets that
follow.

<p>Each dataset consists of six lines of input. The first line of input is the specification for the folded out
cube as described above. This line is followed by five lines, each of which gives the specification of
one answer image as described above.


*******OutputConstraints*******

<p>For each dataset, output on a single line the dataset number, (1 through N), a blank, the number of
answers which are solutions of the problem (corners of the cube specified in the folded out line), a
blank and five &#8216;Y&#8217; or &#8216;N&#8217; characters separated by a blank indicating which of the answer images was a
solution (&#8216;Y&#8217; for a solution, &#8216;N&#8217; for not a solution).


*******IOTestCases*******


<pre>
<b>Input:</b>
2
F3E4E2D3C2F3
C2D2F2
E3F3C4
F2C2D2
D1E1F3
E1C1E1
A2F4F1A3A3C4
C3A4A2
F3F4A1
F3C4A1
A2C3A2
A4A4F1

<b>Output:</b>
1 2 Y N Y N N
2 0 N N N N N
</pre>



______________________________________________________
PERMUT3||||||true||||||


<p>Given a permutation of <b>n</b> elements (1, 2, ..., n): A = (a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>). We define a sequence P(A)=(p<sub>1</sub>, p<sub>2</sub>, &#8230;, p<sub>n-1</sub>) where p<sub>i</sub> = 0 if a<sub>i</sub> > a<sub>i+1</sub> and p<sub>i</sub> = 1 if a<sub>i</sub> < a<sub>i+1</sub>. Given a permutation B, find the number of all permutations C where P(C)=P(B) including the permutation B itself.</p>
<p><b>The length of your solution should not be more than 0.5kB.</b></p>

*******InputConstraints*******

<p>Multiple test cases. For each test case:</p>
<p>The first line contains an integer <b>n</b>(1<= <b>n</b> <=100).The second line contains <b>n</b> integers representing the permutation, all of which are separated by single spaces.</p>
<p>Input terminates by a single zero.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The output contains a single line with a single integer - the number of the permutations having the same value for P(A) when given the permutation A.</p>

*******IOTestCases*******

<pre><b>Input</b>:
2
1 2
4
1 3 2 4
0

<b>Output:</b>
1
5

</pre>



______________________________________________________
CLK||||||true||||||


<p> In Martin Gardner's book &laquo;Mathematical Games&raquo; the game of &laquo;Chomp!&raquo; is described as follows. 
<BR><BR>
For the game of &laquo;Chomp!&raquo; you need some pieces which are initially placed on a rectangular playing field and removed from it during the game. (If you are playing on paper then you can use a grid with zeros and cross them out during the game instead.) The game is played by 2 players, and moves are made in turns.
<BR><BR>
Each turn is played as follows. The player chooses one piece, and removes all pieces which lie in the top-right rectangle, i.e., the rectangle having the chosen piece as the bottom-left corner. Thus, turn by turn, the players bite off pieces of the rectangular cookie, biting into it from the north-east (and the game takes its name from the chomp of their jaws). The winner is the player who forces his/her opponent to chomp the last, poisoned piece in the bottom left corner of the initial field.
<BR><BR>
<center><img src="http://www.spoj.pl/ZEL08/content/Click.gif" alt="Game Chomp"><BR><i>Fig 1. Example of one particular game in "Chomp!". In the initial state the pieces make up a 5&#1093;6 rectangle</i></center>
<BR>
<p>Those are the rules. And now imagine the following situation. Two players begin to play the game of &laquo;Chomp!&raquo; on a 10x10 rectangular field. You can see an intermediate position which was obtained after some turn. The opponents are thinking deeply. How the game will end is not clear, because it's humans who are playing, not computers&#8230; By the way, talking of computers: write a program, which for the given position output its outcome. Is the player whose turn it is to move able to win, even if his/her opponent uses the best possible strategy?


*******InputConstraints*******

<p>The first line of input contains the total number of tests M, followed by M lines, with ten numbers on each of them (describing a single position on the playing field). These ten numbers are separated by spaces and describe the number of pieces in each column (columns are enumerated from left to right).


*******OutputConstraints*******

<p>You must output exactly M lines, containing the letter W if it is possible for the player who takes the next turn to win (even in case of the best possible strategy for the other player), or L otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2 2 0 0 0 0 0 0 0 0
2 1 0 0 0 0 0 0 0 0
10 10 10 10 10 10 10 10 10 10

<b>Output:</b>
W
L
W
</pre>

______________________________________________________
SC1||||||true||||||


<h3>Background</h3>
<p>You may play the game Starcraft I first before you do this problem ^_^. </p>
<h3>Description</h3>
<p>Suppose you are using Protoss. At the beginning of the game, you have <i>n</i> probes, a nexus and almost unlimited number of pylons. You can build a probe in the nexus per 3 Starcraft time units(STs), and this will cost you <i>z</i> units of minerals. A probe can gather <i>x</i> units of minerals or <i>y</i> units of gas per ST. What's the minimum time to get <i>A</i> units of minerals and <i>B</i> units of gas, if you build probes at nexus only and don't build any buildings?</p>
<p>Assume that in the current map there are almost unlimited mineral fields and unlimited vespene geysers, and on each vespene geyser, a Protoss Assimilator has been built successfully.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line.</p>
<p>Each test case contains one line with 6 positive integers <i>n</i>, <i>x</i>, <i>y</i>, <i>z</i>, <i>A</i>, <i>B</i> separated by one space. All numbers in the input file will be less than 21. </p>

*******OutputConstraints*******

<p>For each test case, output one line, which contains a single integer, the minimum time in ST.</p>

*******IOTestCases*******

<pre><b>Input</b>:
1
1 2 3 4 5 6

<b>Output:</b>
5
</pre>


______________________________________________________
KPARCH||||||true||||||


<p>
One of your friends wants to write his own archiver. He is going to replace neighboring equal substrings with only one copy. For example, he is going to change substring "AA" with something like "2(A)" and if "A" is long enough it will reduce the file size.
<br /><br />
But, before performing any coding stuff he wants to know how many such double substrings are there in the input file.
<br /><br />
He asks you to help him, because this task is very difficult for him.


*******InputConstraints*******

<p>Input file contains the text to be archived. It will only contain Latin letters (big and small). Its size will not exceed 200000 symbols. Letters are case sensitive, i.e. "X" is not equal to "x".


*******OutputConstraints*******

<p>Write a number of substrings of input text which can be written as "AA", i.e. consist of two equal concatenated parts.


*******IOTestCases*******


<pre>
<b>Input:</b>
abcdefg

<b>Output:</b>
0
</pre>

<pre>
<b>Input:</b>
blabla

<b>Output:</b>
1
</pre>

<pre>
<b>Input:</b>
aCacaacaa

<b>Output:</b>
4
</pre>


______________________________________________________
KPSORT||||||true||||||


<p>
You are given <b>N</b> integer numbers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>N</sub>. All you need to do is to sort them in non-decreasing order.
<br /><br />
The bad thing is you are only allowed to perform one action. You can pick any number in the sequence and then reverse all elements to the left and to the right of it.
<br /><br />
For example, suppose you were given the sequence (7, 1, 3, 9, 8) then, depending on the picked number you'll get the following results:<br />
<div align="center">
<table cellspacing="5">
<th>Picked number</th>
<th>Resulting sequence</th>
<tr><td style="text-align: center;">7</td><td style="text-align: center;">(7, 8, 9, 3, 1)</td></tr>
<tr><td style="text-align: center;">1</td><td style="text-align: center;">(7, 1, 8, 9, 3)</td></tr>
<tr><td style="text-align: center;">3</td><td style="text-align: center;">(1, 7, 3, 8, 9)</td></tr>
<tr><td style="text-align: center;">9</td><td style="text-align: center;">(3, 1, 7, 9, 8)</td></tr>
<tr><td style="text-align: center;">8</td><td style="text-align: center;">(9, 3, 1, 7, 8)</td></tr>
</table>
</div>
<p>
In this problem you are to figure out whether the given sequence can be sorted or not, applying allowed action zero or more times.


*******InputConstraints*******

<p>Input will contain multiple test cases (not more than 100). Each case will start with the number of elements in the sequence N (1 &#8804; N &#8804; 100), followed by the N integers not exceeding 1000 by the absolute value. Input ends with the value N = 0.


*******OutputConstraints*******

<p>For each test case write "1" if corresponding sequence can be sorted and "0" otherwise. Output must not contain spaces or line breaks.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
7 1 3 9 8
2
2 1
0

<b>Output:</b>
10
</pre>



______________________________________________________
WAR||||||true||||||


<p>The <em>Warring States Period</em> (473-22l BC) refers to the centuries of turmoil following the Spring and
Autumn Period. China was divided into many little kingdoms that were constantly fighting with each
other. Unlike in previous ages, when chivalry played an important role in battles and the states fought
mostly for balance of power or to resolve disputes, in this period the aim of battle was to conquer and
completely annihilate the other states. Eventually seven states, known as the ``Seven Great Powers'' rose
to prominence: Qi, Chu, Yan, Han, Zhao, Wei, and Qin. After numerous alliances and counter-alliances,
Qin defeated all the other states one by one, putting an end to the Warring States Period.</p>
<p>You are given a map that shows the position of the capital for each state, and the borders between the
states as a series of line segments. Your job is to determine which states were fighting with each other.
This is pretty easy to determine - if two states had a common border, then they were fighting.</p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each case begins with a line containing two integers:
the number 1<= <i>n</i> <=600 of states, and the number 1<= <i>m</i> <= 4000 of border segments. The next <i>n</i> lines describe the coordinates of capitals, there are two integers in each line. The next <i>m</i> lines after that
describe the <i>m</i> border segments. Each line contains four integers <i>x</i><sub><i>1</i></sub>, <i>y</i><sub><i>1</i></sub>,
<i>x</i><sub><i>2</i></sub> and <i>y</i><sub><i>2</i></sub> meaning that there is a border segment from (<i>x</i><sub><i>1</i></sub>, <i>y</i><sub><i>1</i></sub>) to (<i>x</i><sub><i>2</i></sub>, <i>y</i><sub><i>2</i></sub>).(It is not given in the input what the two states on the two sides of the border are, but it can be deduced from the way the borders go.)

<p>Each state is enclosed by a continuous borderline. The states are surrounded by an infinite wasteland,
thus a border segment either separates two states, or a state from the wasteland. It is not possible that
the same state is on both sides of a border segment, or the wasteland is on both sides of a border segment.
There is exactly one capital in each state, and there is no capital in the wasteland. The border segments
do not cross each other, they can meet only at the end points.</p>

<p>The input is terminated by a block with <i>n</i> = <i>m</i> = 0.</p>


*******OutputConstraints*******


<p>For each test case, you have to output <i>n</i> lines that describe the enemies of the <i>n</i> states (recall that if two
states share a border, then they are enemies). Each line begins with an integer, the number <i>x</i> of enemies
the given state has. This number is followed by  <i>x</i> numbers identifying the enemies of the state. These
numbers are between 1 and <i>n</i> and number 1 refers to the first capital appearing in the input, number <i>n</i> refers to the last.</p>


*******IOTestCases*******


<pre><b>Input:</b>
4 12
3 2
11 8
12 17
1 19
0 0 10 0
10 0 20 0
20 0 20 10
20 10 20 20
20 20 10 20
10 20 0 20
0 20 0 10
0 10 0 0
10 0 10 10
0 10 10 10
20 10 10 10
10 20 10 10
4 16
170 13
24 88
152 49
110 130
60 60 140 60
140 60 140 140
140 140 60 140
60 140 60 60
0 0 200 0
200 0 200 200
200 200 0 200
0 200 0 0
40 40 160 40
160 40 160 160
160 160 40 160
40 160 40 40
20 20 180 20
180 20 180 180
180 180 20 180
20 180 20 20
0 0

<b>Output:</b>
2 2 4
2 1 3
2 2 4
2 1 3
1 2
2 1 3
2 2 4
1 3
</pre>



______________________________________________________
EXAMPLE||||||true||||||


<p>As you may have probably noticed a problem statement in a programming contest consists of several
sections. The most important section is, of course, the "Example" section. Some seasoned contestants even
start reading the problem statement from the examples. And, unfortunately, the least read section is the
problem description section. It is quite disappointing for the problem authors because they feel that their
writing skills are largely wasted.</p>
<p>So the authors decided to describe examples in the same language, as the rest of the problem statement using
the following rules.</p>
<div align="justify">
<ul>
<li>
Natural integer numbers shall be written in plain English. The numbers shall be less than one hundred. The
designator number shall be written before numbers, except when the corresponding number is used as a
<b>repetition factor</b>. For example, <i>number zero</i>, <i>number sixteen</i>, or <i>number sixty one</i>.
<li>
Sequences of characters (strings) shall be written either in quotes, or in apostrophes, for example <i>"John's pen"</i>,
or <i>'5" tall'</i>. Note, that ' may be used in strings enclosed in " and vice versa. The designator string
shall be written before strings, for example <i>string 'Hello'</i>.
<li>
The designator <i>space</i> denotes one space character.
<li>
A number, string or space may be prefixed with a <b>repetition factor</b>. The repetition factor is a number greater
than one. The designator after the repetition factor is written in plural form. For example, <i>four numbers five</i>, or <i>six strings 'A'</i>. If the repetition factor is used for numbers, the numbers are separated with one space character. So, the former example means <i>5 5 5 5</i>, but the latter example <i>AAAAAA</i>.
<li>
Let the numbers, strings and spaces with possible repetition factors be called <b>fragments</b>. Fragments may be
organized into <b>sequences</b> using the <i>followed by</i> copulative. For example, <i>number five followed by number six</i>. One implicit space character is assumed between numbers, a number and a string, and a string
and a number so the example above means <i>5 6</i>.
<li>
An example is described line by line. The first line is always described as <i>The first line...</i>. The following
lines are described either as <i>The next line...</i> or as <i>The next # lines...</i>, where <i>#</i> is a number greater
than one. Empty lines are described as <i>is empty</i> or <i>are empty</i>. Other lines are described as <i>contains</i>
or <i>contain</i> followed by sequences. The first letter of a sentence is capitalized. The sentence is terminated by
a full stop (<b>.</b>). The full stop is not separated by space from the preceding word, but is separated by at least one
space from the next word.
</ul>
</div>

*******InputConstraints*******

<p>The input contains a free-flow text describing an example. Words are separated by an arbitrary number of
spaces and newlines. There are no whitespace characters after the last full stop. The total size of the input
will be no greater than 1 MB.</p>

*******OutputConstraints*******

<p>The output should contain the decoded example. The total size of the output shall be no greater than 1 MB.</p>

*******IOTestCases*******

<pre><b>Input:</b>
The first line contains four
numbers twenty eight. The next
line is empty. The next two
lines contain six strings '-'.
The next line contains number
four followed by number seventy
seven followed by string 'meat'
followed by three strings "!".

<b>Output:</b>
28 28 28 28

------
------
4 77 meat!!!

</pre>


______________________________________________________
ILLUM||||||true||||||


<p>Two cubes and a light bulb are placed in a three-dimensional euclidean space. You are expected to find out
if one of them casts shadow on the other one and if so, calculate the area of this shadow.</p>

*******InputConstraints*******

<p>Multiple test cases. For each test case: </p>
<p>The first line of the input contains the coordinates of the bulb. It is followed
by two groups of four lines each that describe the cubes. Each line of the
cube description contains the coordinates of a vertex (see the figure where
the vertices are marked and labeled in the same order as they are given in the
input).</p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:illum.jpg"></img></p>
<p>All the coordinates are given with 5 digits after decimal point. It is guaranteed that the cubes do not intersect,
the light bulb is outside both of them, and doesn&#8217;t lie on any of the planes that contain their faces. A light
bulb should be regarded as a point light source.</p>
<p>Input terminates by EOF.</p>

*******OutputConstraints*******

<p>For each test case: </p>
<p>The output should contain a single line with two numbers separated with a space character. The first one is
the number of the cube that has a shadow on it (1 or 2). The second is the area of the shadow. If none of the given cubes casts shadow on the other the output should contain a single number -1.</p>
<p><b>Note:</b> if your output has an error with absolute value less than 10<sup>-2</sup>, it will be judged as Accepted. i.e. You may output any number of digits after decimal point.</p>

*******IOTestCases*******

<pre><b>Input:</b>
-1.00000 1.00000 1.00000
0.00000 0.00000 0.00000
2.00000 0.00000 0.00000
0.00000 2.00000 0.00000
0.00000 0.00000 2.00000
5.00000 0.00000 0.00000
7.00000 0.00000 0.00000
5.00000 2.00000 0.00000
5.00000 0.00000 2.00000
0.00000 0.00000 0.00000
1.00000 1.00000 1.00000
2.00000 1.00000 1.00000
1.00000 2.00000 1.00000
1.00000 1.00000 2.00000
-1.00000 -1.00000 -1.00000
-1.00000 -2.00000 -1.00000
-2.00000 -1.00000 -1.00000
-1.00000 -1.00000 -2.00000

<b>Output:</b>
2 4.000
-1
</pre>


______________________________________________________
PUTIN||||||true||||||



*******InputConstraints*******

<p>Multiple test cases, the number of them is given in the very first line.</p>
<p>For each test case:</p>
<p>The first line contains 3 space-separated integers K(2<=K<=30), S(2<=S<=10000), M(0<=M<=20). M lines follow, each contains K non-negative integers a<sub>ij</sub>(1<=i<=M, 1<=j<=K), which shows that there is one point (a<sub>i1</sub>, a<sub>i2</sub>, ... a<sub>ik</sub>) in the K-D hyperspace. No two point will be the same, and none of them lies on any (coordinate) axis.

*******OutputConstraints*******

<p>For each test case:</p>
<p>Output a single integer which shows the number of the points B(b<sub>1</sub>, b<sub>2</sub>, ... b<sub>k</sub>) in the hyperspace satiesfied the following constraints:
<div align="justify">
<ul>
<li>
B is not on any (coordinate) axis.
<li>
For each 1<= <i>i</i> <= M, there exist <i>j</i>, 1<=j<=k, such that b<sub>j</sub> < a<sub>ij</sub>.
<li>
For each 1<=j<=k, b<sub>j</sub> is a non-negative integer.
<li>
The sum of b<sub>j</sub> doesn't exceed S.
</ul>
</div>

*******IOTestCases*******

<pre><b>Input:</b>
1
2 4 2
1 3
2 1

<b>Output:</b>
2

<b>Hint</b>
<p>The two points are (1,1) and (1,2).
</pre>


______________________________________________________
QTREE4||||||true||||||


<p>You are given a tree (an acyclic undirected connected graph) with N nodes, and nodes numbered 1,2,3...,N. Each edge has an integer value assigned to it(note that the value can be negative). Each node has a color, white or black.
We define dist(a, b) as the sum of the value of the edges on the path from node a to node b.
</p>
<p>
All the nodes are white initially.
</p>
<p>
We will ask you to perfrom some instructions of the following form:
</p>

<ul>
<li><b>C a</b> : change the color of node a.(from black to white or from white to black)<br>
<li><b>A</b> : ask for the maximum dist(a, b), both of node a and node b must be white(a can be equal to b). Obviously, as long as there is a white node, the result will alway be non negative. 
</ul>


*******InputConstraints*******

<ul>
<li>In the first line there is an integer N (N <= 100000)
<li>In the next N-1 lines, the i-th line describes the i-th edge: a line with three integers a b c denotes an edge between a, b of value c (-1000 <= c <= 1000)
<li>In the next line, there is an integer Q denotes the number of instructions (Q <= 100000)
<li>In the next Q lines, each line contains an instruction "C a" or "A"
</ul>


*******OutputConstraints*******

<p>For each "A" operation, write one integer representing its result.
If there is no white node in the tree, you should write "They have disappeared.".
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 2 1
1 3 1
7
A
C 1
A
C 2
A
C 3
A

<b>Output:</b>
2
2
0
They have disappeared.

</pre>

<p>
<b>Some new test data cases were added on Apr.29.2008, all the solutions have been rejudged.</b>
</p>



______________________________________________________
POLYSSQ||||||true||||||


<p>You are given N different points in the plane. No any 3 of them are collinear. Write a program that finds out the smallest area of a convex polygon with K vertices which are taken from the given points. 

*******InputConstraints*******

<p>Two integers, N and K, are written on the first line in the standard input. It follows N lines, each containing a pair of coordinates for the corresponding given point. Every two numbers on a line in the input are separated by a space. 
Constraints: 0 < N < 50, 0 < K < 11. The coordinates of the given points are nonnegative integers, less than 9999.

*******OutputConstraints*******

<p>Your program has to output an integer that is equal to the integer part of minimal area. If there does not exist any convex polygon as is described above, your program has to output 0. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3
0 0
1 1
0 10
10 0

<b>Output:</b>
5
</pre>



______________________________________________________
MSTS||||||true||||||


<p>Your task is simple in this problem: count the number of <b>minimum spanning tree</b> (<a href="http://en.wikipedia.org/wiki/Minimum_spanning_tree">Wikipedia</a>) in a simple undirected graph. The number of minimum spanning trees mean in how many ways you can select a subset of the edges of the graphs which forms a minimum spanning tree.


*******InputConstraints*******

<p>The first line of input contains two integers <b>N</b> (1 &#8804; <b>N</b> &#8804; 100), <b>M</b> (1 &#8804; <b>M</b> &#8804; 1000). Nodes are labeled from 1 to <b>N</b>. In the following <b>M</b> lines, every line contains three integers <b>a<sub>i</sub></b>, <b>b<sub>i</sub></b>, <b>c<sub>i</sub></b>, representing an undirected edge from node <b>a<sub>i</sub></b> to node <b>b<sub>i</sub></b>, with weight <b>c<sub>i</sub></b>. (1 &#8804; <b>a<sub>i</sub></b> &#8800; <b>b<sub>i</sub></b> &#8804; <b>N</b>, 1 &#8804; <b>c<sub>i</sub></b> &#8804; 1,000,000,000). You can assume there is at most one edge between two nodes, and the graph described by input is connected. 


*******OutputConstraints*******

<p>Print the <b>answer</b> % 31011. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4 6
1 2 1
1 3 1
1 4 1
2 3 2
2 4 1
3 4 1

<b>Output:</b>
8
</pre>



______________________________________________________
GANNHAT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/GANNHAT/en/">English</a></td> 
<td width="50%"><a href="/problems/GANNHAT/vn/">Vietnamese</a></td> 
</tr></table>

<p>The manhattan distance between two points A(x<sub>1</sub>,y<sub>1</sub>) and B(x<sub>2</sub>,y<sub>2</sub>) is defined as following:</p>
<p style="text-align:center;">D(A,B) = |x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|</p>
<p>Given N points A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>, 
for each point A<sub>i</sub> you need to calculate the minimum D(A<sub>i</sub> , A<sub>j</sub>) (j &#8800; i).</p>


*******InputConstraints*******

<ul>
<li>The first line contains a positive integer N (1 &#8804; N &#8804; 200000).
<li>The i-th line of the next N lines contains two integers x and y which are co-ordinates of the i-th point(0 &#8804; x, y &#8804; 10<sup>7</sup>)
</ul> 


*******OutputConstraints*******

<ul>
<li>Print N lines, in which the i-th line contains the minimum distance for the i-th point. 
</ul> 


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 0
0 1
1 0
1 1

<b>Output:</b>
1
1
1
1
</pre>




______________________________________________________
SPP||||||true||||||


<p>Sequence <i>(a<sub>i</sub>)</i> of natural numbers is defined as follows:<br><br>

   <i>a<sub>i</sub> = b<sub>i</sub></i> (for <i>i <= k</i>)<br>
   <i>a<sub>i</sub> = c<sub>1</sub>a<sub>i-1</sub> + c<sub>2</sub>a<sub>i-2</sub> + ... + 
c<sub>k</sub>a<sub>i-k</sub></i> (for <i>i > k</i>)<br><br>

where <i>b<sub>j</sub></i> and <i>c<sub>j</sub></i> are given natural numbers for <i>1<=j<=k</i>. Your task is to compute <i>a<sub>m</sub></i> + <i>a<sub>m+1</sub></i> + <i>a<sub>m+2</sub></i> + ... + <i>a<sub>n</sub></i> for given <i>m</i> <= <i>n</i> and output it modulo a given positive integer </i>p</i>.


*******InputConstraints*******

<p>On the first row there is the number <i>C</i> of test cases (equal to about 50).<br>
Each test contains four lines:<br>
<i>k</i> - number of elements of <i>(c)</i> and <i>(b)</i> (<i>1 <= k <= 15</i>)<br>

<i>b<sub>1</sub>,...,b<sub>k</sub></i> - <i>k</i> natural numbers where <i>0 <= b<sub>j</sub> <= 10<sup>9</sup></i> separated by spaces<br>

<i>c<sub>1</sub>,...,c<sub>k</sub></i> - <i>k</i> natural numbers where <i>0 <= c<sub>j</sub> <= 10<sup>9</sup></i> separated by spaces<br>

<i>m</i>, <i>n</i>, <i>p</i> - natural numbers separated by spaces (<i>1 <= m <= n <= 10<sup>18</sup></i>, <i>1<= p <= 10<sup>8</sup></i>)<br>


*******OutputConstraints*******

<p>Exactly <i>C</i> lines, one for each test case:
 (<i>a<sub>m</sub></i> + <i>a<sub>m+1</sub></i> + <i>a<sub>m+2</sub></i> + ... + <i>a<sub>n</sub></i>) modulo <i>p</i>.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
1 1
1 1
2 10 1000003

<b>Output:</b>
142
</pre>


______________________________________________________
UNTITLED||||||true||||||


<p>We consider a sequence <b>S<sub>1</sub></b> is <b>equal</b> to a sequence <b>S<sub>2</sub></b>, if and only if they satisfy the following conditions:</p>

<ul>
<li>The length of them are equal.
<li>Let <b>Len</b> be the length of them. For each i,j(1 <= i, j <= <b>Len</b>, i != j):If <b>S<sub>1</sub></b>[i] is smaller than <b>S<sub>1</sub></b>[j], <b>S<sub>2</sub></b>[i] must be smaller than <b>S<sub>2</sub></b>[j]; If <b>S<sub>1</sub></b>[i] is greater than <b>S<sub>1</sub></b>[j], <b>S<sub>2</sub></b>[i] must greater than <b>S<sub>2</sub></b>[j].
</ul>

<p>Now you are given a sequence <b>S</b> and another <b>N</b> sequences <b>T<sub>1</sub></b>, <b>T<sub>2</sub></b> &#8230;. <b>T<sub>N</sub></b>.</p>
<p>We say position <b>i</b> is <b>OK</b>, if and only if <b>S</b>[1..<b>i</b>] contains a suffix which is <b>equal</b> to a sequence from { <b>T<sub>1</sub></b>, <b>T<sub>2</sub></b> ... <b>T<sub>N</sub></b> }. You need to print the positions which is <b>OK</b> in increasing order.</p>


*******InputConstraints*******


<p>Multiple test cases, the number of them(no more than 3) is given in the very first line.</p>
<p>For each test case:</p>
<ul>
<li>The first line contains an integer <b>M</b> (<b>M</b> > 1) which denote the number of sequences. <b>i.e.</b> <b>M</b> = <b>N</b> + 1.
<li><b>M</b> * 2 lines follow, each two lines describe one sequence.For each two lines, the first line contains an integer <b>L</b> which denote the length of this sequence. The second line contains <b>L</b> integers(all the integers don't exceed 2<sup>31</sup>-1) that represent this sequence.
The first sequence described is <b>S</b>, the next <b>N</b> sequences represent <b>T<sub>1</sub></b> ... <b>T<sub>N</sub></b>.
<li>You can assume that there are no same integer in any one sequence.
<li>The length of <b>S</b> is no more than 400000, and the total length of <b>T</b> is no more than 100000.
</ul>


*******OutputConstraints*******

<p>For each test case: Print the positions which is <b>OK</b> in increasing order.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
1
1
1
2
3
3
3 1 2
2
4 5
2
10 1

<b>Output:</b>
1
2
3
</pre>



______________________________________________________
COWCAR||||||true||||||


<p>N (1 &#8804; N &#8804; 50,000) cows conveniently numbered 1, ..., N are driving in separate cars along a highway in Cowtopia. Cow i can drive in any of M different high lanes (1 &#8804; M &#8804; N) and can travel at a maximum speed of S<sub>i</sub> (1 &#8804; S<sub>i</sub> &#8804; 1,000,000) km/hour.</p>

<p>After their other bad driving experience, the cows hate collisions and take extraordinary measures to avoid them. On this highway, cow i reduces its speed by D (0 &#8804; D &#8804; 5,000) km/hour for each cow in front of it on the highway (though never below 0 km/hour). Thus, if there are K cows in front of cow i, the cow will travel at a speed of max(S<sub>i</sub> - D*K, 0). While a cow might actually travel faster than a cow directly in front of it, the cows are spaced far enough apart so crashes will not occur once cows slow down as described.</p>

<p>Cowtopia has a minimum speed law which requires everyone on the highway to travel at a a minimum speed of L (1 &#8804; L &#8804; 1,000,000) km/hour, so sometimes some of the cows will be unable to take the highway if they follow the rules above. Write a program that will find the maximum number of cows that can drive on the highway while obeying the minimum speed limit law.</p>



*******InputConstraints*******

<p>The first line contains the four integers N, M, D, and L. For the next N lines, line i+1 contains the integer S<sub>i</sub>.</p>


*******OutputConstraints*******

<p>Print a single integer denoting the maximum number of cows that can take the highway.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 1 1 5
5
7
5

<b>Output:</b>
2
</pre>

<p>We can obtain two cows by putting either cow with speed 5 first and the cow with speed 7 second.</p>


______________________________________________________
GLASNICI||||||true||||||


<p>A long straight road connects two villages. Along the road, N messengers are stationed and, when needed, they exchange messages using mostly their legs, but also their vocal cords and ears. The first messenger (the closest to the first village) has a radio-receiver which he uses to keep track of current ongoings in the country. When he finds out who has been evicted from whichever reality show is currently popular, he starts running as fast as he can to share the unfortunate (or fortunate) news with everyone else. While running, he shouts the name of the evicted person so that any fellow messengers that are close enough can hear him. Meanwhile, the remaining messengers do not merely sit and wait, but also run themselves, all with the selfless goal of sharing the news with everyone as fast as possible. The running and shouting proceeds as follows:</p>

<ul>
<li>Each of the messengers may run whenever, in either direction, at a speed of at most 1 unit per second, or may decide not to run at all and stand still.</li>
<li>All messengers that know the news shout it at all times. One messenger can hear another messenger shouting (and learn the news) if the distance between them is at most K units.</li>
</ul>

<p>Write a program that, given the initial locations of the messengers, determines the least amount of time (in seconds) needed for all messengers to learn the news. The location of every messenger is given with a positive real number &#8211; the distance from the first village. As mentioned above, initially only the first messenger knows the news.</p>


*******InputConstraints*******

<p>The first line contains the integer T (1 &#8804; T &#8804; 25), the number of test cases. Then for each test case, the first line contains the real number K (0 &#8804; K &#8804; 1,000,000), the largest distance at which two messengers can hear each other, and the integer N (1 &#8804; N &#8804; 100,000), the number of messengers. Each of the following N lines contains one real number D (0 &#8804; D &#8804; 1,000,000,000), the distance of one messenger from the first village. The distances will be sorted in ascending order. It is possible for multiple messengers to be at the same location.</p>


*******OutputConstraints*******

<p>For each test case, output a real number, the least time for all messengers to learn the news. Your output needs to be within 0.01 of the official output.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3.000 2
0.000
6.000
2.000 4
0.000
4.000
4.000
8.000

<b>Output:</b>
1.500
1.000
</pre>

<b>Warning: large input/output data.</b>


______________________________________________________
QUADAREA||||||true||||||


<p>You are trying to build a house, but unfortunately you currently have only four available walls with side lengths a, b, c, and d. You want your house to be as big as possible, so you would like to know the largest possible area of any quadrilateral you can construct with these four side lengths.</p>


*******InputConstraints*******

<p>The first line contains the integer T (1 &#8804; T &#8804; 2,000), the number of tests. Each test contains a single line with four real numbers: a, b, c, and d (0 < a, b, c, d < 1,000). Note that it will always be possible to form a valid quadrilateral with these lengths; that is, the sum of any three side lengths will be strictly larger than the other one.</p>


*******OutputConstraints*******

<p>For each test case, print a single line containing the largest possible area. Your output will be accepted if it is within 0.01 of the official answer.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 2 1 2
0.5 0.5 0.5 0.5

<b>Output:</b>
2.00
0.25
</pre>

<p>For the first test case, it is optimal to construct a rectangle, and for the second, a square is optimal.</p>


______________________________________________________
ARMY||||||false||||||

<p>The next MechaGodzilla invasion is on its way to Earth. And once again, Earth will be the battleground for an epic war.

<p>MechaGodzilla's army consists of many nasty alien monsters, such as Space Godzilla, King Gidorah, and MechaGodzilla herself.

<p>To stop them and defend Earth, Godzilla and her friends are preparing for the battle.</p>

<h3>Problem specification</h3>

<p>Each army consists of many different monsters. Each monster has a strength that can be described by a positive integer. (The larger the value, the stronger the monster.) 

<p>The war will consist of a series of battles. In each battle, the weakest of all the monsters that are still alive is killed. 

<p>If there are several weakest monsters, but all of them in the same army, one of them is killed at random. If both armies have at least one of the weakest monsters, a random weakest monster of MechaGodzilla's army is killed. 

<p>The war is over if in one of the armies all monsters are dead. The dead army lost, the other one won. 

<p>You are given the strengths of all the monsters. Find out who wins the war.</p>


______________________________________________________
BREAK||||||false||||||

<p>Mayco has recently been hired as a security consultant for a well-known software company. At the moment, he's working on his first assignment &#8211; trying to determine which of the company's servers would be the best targets for potential attackers. It is a bit difficult, though, because some of the servers "trust" some of the others. If an attacker compromises a server, he or she can also freely access all servers that trust it (and servers that trust them, and so on). 

<p>By definition, the importance of a server S is the number of servers the attacker would be able to access if he compromised S. The most important servers are those with the highest importance. (Note that there can be more than one most important server. This is also illustrated in the example below.) </p>

<h3>Problem specification</h3>

<p>The network consists of N computers, numbered 1 to N, inclusive. The trust between computers is described by M ordered pairs (A,B) of numbers, denoting that computer A trusts computer B. The trust is not assumed to be mutual &#8211; i.e., if a computer A trusts computer B, it does not necessarily imply that computer B trusts computer A.</p>


______________________________________________________
INVENT||||||false||||||

<p>Preparing a problem set is a very hard task. There are always issues with clarity of problem statements, bugs in our solutions, input or output data, and so on. Sometimes, despite our best efforts, these issues are only found during the contest, and this can really spoil it. 

<p>To prevent this from happening in the future, we already started to prepare data for IPSC 2009, and we decided to use your help in doing so. Currently we are working on a simple textbook problem: "Given a weighted undirected complete graph, find its minimum spanning tree." (See the Definitions below if you are not sure what a spanning tree is.) 

<p>Almost everythig is already prepared for this problem: the problem statement, our solution, and also the desired output data. The only (and quite important) thing left is the input data. But creating it is not as simple as it looks. 

<p>The bad thing that can happen is that a graph can have more than one minimum spanning tree. If we used such a graph in the input data, we would have to write a complicated checker. And we are too lazy to do this. Therefore we want to find an input data that avoids such cases. 

<p>Moreover, we want the test data to be good. If all the other edges were much more expensive, the minimum spanning tree would be obvious, and many incorrect algorithms would be able to find it. Therefore we want all the edge weights to be as small as possible. </p>

<h3>Definitions</h3>

<p>A graph is a set of nodes, and a set of links. Each link connects two nodes. Each pair of nodes is connected by at most one link. Each link is assigned a positive integer (its weight). The sum of the weights of all links in a graph is the weight of that graph. 

<p>If every two nodes are connected by a link we say that the graph is complete. 

<p>A sequence of nodes v<sub>0</sub>, &#8230;, v<sub>n</sub> such that for each i the nodes v<sub>i</sub> and v<sub>i+1</sub> are connected by a link, is called a path. 

<p>If every two nodes in a graph are connected by a path, we say that the graph is connected. 

<p>If there is exactly one path between any two nodes we say that graph is a tree. 

<p>A spanning subgraph of a connected graph G is a connected graph that contains all nodes of G and some (not necessarily all) of its links. 

<p>A spanning subgraph T of a graph G is called the minimum spanning tree of G if and only if no other spanning subgraph has a smaller weight. 

<p>Note that a given graph can have more than one spanning tree. Also note that a spanning tree is always a tree. </p>

<h3>Problem specification</h3>

<p>Given a weighted tree T, you are to find the minimum possible weight of a complete graph G such that T is the only minimum spanning tree of G.</p>


______________________________________________________
KEQ||||||false||||||

<p>Every once in a while, Mishka Jabereen sends an interesting mathematical puzzle to his friends. This week's puzzle will be about so-called "repetitive" numbers &#8211; the ones whose decimal expansion has just one kind of digit in it. (Examples of such numbers include 7, 11, and 5555.) The puzzle is about finding the largest repetitive number subject to two additional restrictions:</p>
<pre>
(A) It must be divisible by at least one number from a given set. 
(B) It can not have more than a given number of digits.
</pre>
<p>A concrete example of such a problem statement would be: Find the largest repetitive number with at most 47 digits, which is divisible by 42 or 47! Mishka is currently playing around with a few such problem statements and he'd like to know all the answers, so that he can choose the nicest one.</p>

<h3>Problem specification</h3>

<p>A puzzle is described by a number K, the maximal number of digits allowed in the repetitive number, and a set of numbers d<sub>1</sub>, d<sub>2</sub>, &#8230;, d<sub>R</sub>. Your task is to find the greatest repetitive number X that has at most K digits when written in decimal notation, and it is divisible by at least one of the d<sub>i</sub>. 


______________________________________________________
LARGE||||||false||||||

<p>Irena and Sirup are organizing their engagement party next weekend. They want to invite almost everybody. They have just bought a very big round table for this occasion. But they are now wondering how should they distribute people around the table. Irena claimed that when there are more than K women next to each other, this group will chat together for the whole night and won't talk to anybody else.
<p>Sirup had no other choice but to agree with her. However, being a mathematician, he quickly became fascinated by all the possible patterns of men and women around the table.</p>
<h3>Problem specification</h3>
<p>There will be N people sitting at the round table. Some of them will be men and the rest will be women. 
<p>Your task is to count in how many ways it is possible to assign the places to men and women in such a way that there will not be more than K women sitting next to each other. 
<p>If one assignment can be made from another one by rotating all the people around the table, we consider them equal (and thus count this assignment only once).</p>

______________________________________________________
RAIL||||||false||||||

<p>The Slovak national railroad company has recently built new tracks. They want to update their railroad map according to these changes. But they want the map to be as simple as possible. So they decided to remove from the map all the stations that have exactly two other direct connections to other stations (i.e., a single railroad passing through the station).</p>

<h3>Problem specification</h3>

<p>You will be given the complete map of Slovak railroads. It consists of railway stations numbered from 1 to N, and railroad segments between some pairs of these stations. For each railroad segment we are given its length.</p>

<p>Your task is to remove all such stations that are directly connected with exactly two other stations, and output the new map. The new map must contain correct distances between the remaining stations.</p>


______________________________________________________
PRHYME||||||false||||||

<pre><i>A perfect rhyme is not a crime,
it is something that exceeds time, 
a bit of science, a piece of art, 
soft as a pillow, sharp as a dart.</i></pre>
<p>Everyone tried it, but only few chosen ones succeeded. It is a hard task with an unclear path, but a famous end &#8211; should you reach it. Many compare it to finding the Holy Grail, or even to finding Waldo. The task is to find a perfect rhyme.</p>

<h3>Problem specification</h3>

<p>Given is a wordlist <b>L</b>, and a word <b>w</b>. Your task is to find a word in <b>L</b> that forms a perfect rhyme with <b>w</b>. This word <b>u</b> is uniquely determined by these properties:</p>
<div align="justify">
       <ul>
               <li>
               It is in <b>L</b>. 
               <li>
               It is different from <b>w</b>.
               <li>
               Their common suffix is as long as possible. 
               <li>
               Out of all words that satisfy the previous points, <b>u</b> is the lexicographically smallest one.
               </li>
       </ul>
</div>
<h3>Notes</h3>
<p>A prefix of a word is any string that can be obtained by repeatedly deleting the last letter of the word. Similarly, a suffix of a word is any string that can be obtained by repeatedly deleting the first letter of the word. 

<p>For example, consider the word <i>different</i>. 

<p>This word is both its own prefix and suffix. Its longest other prefix is <i>differen</i>, and its longest other suffix is <i>ifferent</i>. The string <i>rent</i> is its yet another, even shorter suffix. The strings <i>eent</i> and <i>iffe</i> are neither prefixes nor suffixes of the word <i>different</i>. 

<p>Let <b>u</b> and <b>v</b> be two different words. We say that <b>u</b> is lexicographically smaller than <b>v</b> if either <b>u</b> is a prefix of <b>v</b>, or if <i>i</i> is the first position where they differ, and the <i>i</i>-th letter of <b>u</b> is earlier in the alphabet than the <i>i</i>-th letter of <b>v</b>. 

<p>For example, <i>dog</i> is smaller than <i>dogs</i>, which is smaller than <i>dragon</i> (because <i>o</i> is less than <i>r</i>). 


______________________________________________________
GUESSING||||||false||||||

<p>Please login first to view this problem. :-)



______________________________________________________
SUMSUMS||||||true||||||


<p>The N (1 &#8804; N &#8804; 50,000) cows, conveniently numbered 1, 2, ..., N, are trying to learn some encryption algorithms. After studying a few examples, they have decided to make one of their own! However, they are not very experienced at this, so their algorithm is very simple:</p>

<p>Each cow i is given a starting number C<sub>i</sub> (0 &#8804; C<sub>i</sub> < 90,000,000), and then all the cows perform the following process in parallel:</p>

<ul>
<li>First, each cow finds the sum of the numbers of the other N-1 cows.</li>
<li>After all cows are finished, each cow replaces her number with the sum she computed. To avoid very large numbers, the cows will keep track of their numbers modulo 98,765,431.</li>
</ul>

<p>They told Canmuu the moose about it in November; he was quite impressed. Then one foggy Christmas Eve, Canmuu came to say:</p>

<blockquote>"Your algorithm is too easy to break! You should repeat it T (1 &#8804; T &#8804; 1,414,213,562) times instead."</blockquote>

<p>Obviously, the cows were very frustrated with having to perform so many repetitions of the same boring algorithm, so after many hours of arguing, Canmuu and the cows reached a compromise: You are to calculate the numbers after the encryption is performed!</p>


*******InputConstraints*******

<ul>
<li>Line 1: Two space-separated integers: N and T.</li>
<li>Lines 2..N+1: Line i+1 contains a single integer: C<sub>i</sub>.</li>
</ul>


*******OutputConstraints*******

<ul>
<li>Lines 1..N: Line i contains a single integer representing the number of cow i (modulo 98,765,431) at the end of the encryption.</li>
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 4
1
0
4

<b>Output:</b>
26
25
29
</pre>

<p>The following is a table of the cows' numbers for each turn:</p>

<pre>
          Cows' numbers
Turn    Cow1  Cow2  Cow3
 0        1     0     4
 1        4     5     1
 2        6     5     9
 3       14    15    11
 4       26    25    29
</pre>

<b>Warning: large input/output data.</b>


______________________________________________________
PRETILE||||||true||||||


<p>You are given a string S with N (1 &#8804; N &#8804; 100,000) characters from 'A' to 'Z', inclusive. For an integer L between 1 and N, inclusive, we define match (L) as the length of the longest prefix of S that can be tiled by the length-L prefix of S; more specifically, match (L) is the smallest 0-based index k such that S [k] &#8800; S [k mod L], or N if no such k exists. For example, when S = "ABCAB", match (1) = 1, match (3) = 5, and match (4) = 4. Compute the sum match (1) + match (2) + ... + match (N).


*******InputConstraints*******

<p>The first line contains the integer T (1 &#8804; T &#8804; 10), the number of tests. For each test, there is a single line containing the string S.</p>


*******OutputConstraints*******

<p>For each test case, print a single line containing one integer: the value of match (1) + match (2) + ... + match (N).</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
ABCAB
ZZZZZZ

<b>Output:</b>
17
36
</pre>

<p>For the first test case, match (1) + match (2) + match (3) + match (4) + match (5) = 1 + 2 + 5 + 4 + 5 = 17. For the second, the sum is equal to 6 * 6 = 36.</p>

<b>Warning: large input/output data.</b>


______________________________________________________
INCSEQ||||||true||||||


<p>Given a sequence of N (1 &#8804; N &#8804; 10,000) integers S<sub>1</sub>, ..., S<sub>N</sub> (0 &#8804; S<sub>i</sub> < 100,000), compute the number of increasing subsequences of S with length K (1 &#8804; K &#8804; 50 and K &#8804; N); that is, the number of K-tuples i<sub>1</sub>, ..., i<sub>K</sub> such that 1 &#8804; i<sub>1</sub> < ... < i<sub>K</sub> &#8804; N and S<sub>i<sub>1</sub></sub> < ... < S<sub>i<sub>K</sub></sub>.</p>


*******InputConstraints*******

<p>The first line contains the two integers N and K. The following N lines contain the integers of the sequence in order.</p>


*******OutputConstraints*******

<p>Print a single integer representing the number of increasing subsequences of S of length K, modulo 5,000,000.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3
1
2
2
10

<b>Output:</b>
2
</pre>

<p>The two 3-tuples are (1, 2, 4) and (1, 3, 4), both corresponding to the subsequence 1, 2, 10.</p>


______________________________________________________
CSUBSEQS||||||true||||||


<p>You are given four strings, each consisting of at most 50 lower case letters ('a'-'z'). Count the number of non-empty common subsequences of them (the number of distinct non-empty strings which are subsequences of all four strings). Note that a subsequence does not have to be contiguous.</p>


*******InputConstraints*******

<p>Four lines: each line consists of a single string.</p>


*******OutputConstraints*******

<p>An integer representing the answer.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
aabb
abab
baba
acba

<b>Output:</b>
4
</pre>

<p>The four sequences are "a", "b", "aa", and "ab".</p>


______________________________________________________
INCDSEQ||||||true||||||


<p>Given a sequence of N (1 &#8804; N &#8804; 10,000) integers S<sub>1</sub>, ..., S<sub>N</sub> (0 &#8804; S<sub>i</sub> < 1,000,000,000), compute the number of distinct increasing subsequences of S with length K (1 &#8804; K &#8804; 50 and K &#8804; N).</p>


*******InputConstraints*******

<p>The first line contains the two integers N and K. The following N lines contain the integers of the sequence in order.</p>


*******OutputConstraints*******

<p>Print a single integer representing the number of distinct increasing subsequences of S of length K, modulo 5,000,000.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3
1
2
2
10

<b>Output:</b>
1
</pre>

<p>The only increasing subsequence of length 3 is 1, 2, 10.</p>


______________________________________________________
RRSCHED||||||true||||||


<p>A computer processor is given N tasks to perform (1 &#8804; N &#8804; 50,000). The i-th task requires T<sub>i</sub> seconds of processing time (1 &#8804; T<sub>i</sub> &#8804; 1,000,000,000). The processor runs the tasks as follows: each task is run in order, from 1 to N, for 1 second, and then the processor repeats this again starting from task 1. Once a task has been completed, it will not be run in later iterations. Determine, for each task, the total running time elapsed once the task has been completed.</p>


*******InputConstraints*******

<p>The first line of the input contains the integer N, and the next N lines contain the integers T<sub>1</sub> through T<sub>N</sub>.</p>


*******OutputConstraints*******

<p>Output N lines, the i-th of which contains an integer representing the time elapsed when task i has been processed.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
8
1
3
3
8

<b>Output:</b>
22
2
11
12
23
</pre>

<p>The second task is completed during the first iteration, finishing 2 seconds in. On the third iteration, the third and fourth tasks complete at 11 seconds and 12 seconds, respectively. Finally, on the eighth iteration, the first and last tasks complete at 22 seconds and 23 seconds, respectively.</p>

<center><b>Warning: large input/output data.</b></center>
<br>

<i><font size=1>Note: This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2006, TopCoder, Inc. All rights reserved.</font></i>

<p><font size=1>(See <a href="http://forums.topcoder.com/?module=Thread&threadID=608536&start=0&mc=30#956263">this post</a> for more information.)</font></p>


______________________________________________________
TLE||||||true||||||


<p>Given integers N (1 &#8804; N &#8804; 50) and M (1 &#8804; M &#8804; 15), compute the number of sequences a<sub>1</sub>, ..., a<sub>N</sub> such that:</p>

<ul>
<li>0 &#8804; a<sub>i</sub> < 2<sup>M</sup></li>
<li>a<sub>i</sub> is not divisible by c<sub>i</sub> (0 < c<sub>i</sub> &#8804; 2<sup>M</sup>)</li>
<li>a<sub>i</sub> & a<sub>i+1</sub> = 0 (that is, a<sub>i</sub> and a<sub>i+1</sub> have no common bits in their binary representation)</li>
</ul>


*******InputConstraints*******

<p>The first line contains the number of test cases, T (1 &#8804; T &#8804; 10). For each test case, the first line contains the integers N and M, and the second line contains the integers c<sub>1</sub>, ..., c<sub>N</sub>.</p>


*******OutputConstraints*******

<p>For each test case, output a single integer: the number of sequences described above, modulo 1,000,000,000.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 2
3 2

<b>Output:</b>
1
</pre>

<p>The only possible sequence is 2, 1.</p>

______________________________________________________
DETER3||||||true||||||


<p>Given a NxN matrix A, find the <a href="http://en.wikipedia.org/wiki/Determinant">Determinant</a> of A % P.


*******InputConstraints*******

<p>Multiple test cases (the size of input file is about 3MB, all numbers in each matrix are generated randomly).
<p>The first line of every test case contains two integers , representing N (0 < N < 201) and P (0 < P < 1,000,000,001). The following N lines each contain N integers, the j-th number in i-th line represents A[i][j] (- 1,000,000,001 < A[i][j] < 1,000,000,001).


*******OutputConstraints*******

<p>For each test case, print a single line contains the answer. 


*******IOTestCases*******


<pre>
<b>Input:</b>
1 10
-528261590
2 2
595698392 -398355861
603279964 -232703411
3 4
-840419217 -895520213 -303215897
537496093 181887787 -957451145
-305184545 584351123 -257712188

<b>Output:</b>
0
0
2
</pre>



______________________________________________________
SDGAME||||||true||||||


<p>Alice and Bob are playing a game.  The game consists of a circular track of M (2 <= M <= 1,000,000,000) cells labeled 0 through M - 1.  Initially both players start at cell 0.  The game progresses by having each player take turns rolling one of N (1 <= N <= 10,000) 'super-dice' labeled 0 through N - 1.  The actual mechanics of the 'super-dice' is not very well understood; however, it is known that they will only ever turn up a number between 0 and 1,000,000,000 inclusive after a roll.  After rolling the super-dice the number of spaces a player moves is determined by the product of a contiguous subsequence of the values shown on the dice (There are special rules for determining the range that vary each move that will not be  discussed).</p>

<p>To make matters more complicated, after any turn if Alice and Bob land on the same cell the value shown on all dice is multiplied by the label of the cell they are on.  Note in this way it is possible for some dice to show numbers greater than 1,000,000,000.  This multiplier does not apply to future rolls.</p>

<p>After playing this game for a while, Alice and Bob have grown frustrated because the calculations became too difficult.  Given the series of R (1 <= R <= 100,000) dice rolls and ranges, help Alice and Bob determine their position after each move.  Assume that all dice start out showing 1.</p>


*******InputConstraints*******

<p>The first line contains R, N, and M each separated by a space.  R lines follow.  Each line will contain d v a b separated by a space.  d indicates the label of the dice rolled.  v indicates the value shown on the dice.  a and b indicate the range of dice used to determine the move distance.</p>


*******OutputConstraints*******

<p>R lines containing the position of the player that just rolled after their roll.


*******IOTestCases*******


<pre>
<b>Input:</b>
6 4 20
1 5 1 1
3 10 2 3
2 3 0 3
1 2 0 3
1 5 1 2
0 7 0 1

<b>Output:</b>
5
10
15
10
10
0

<b>Output Explanation:</b>

For your assistance, here is the state of the dice after each turn:
[1, 5, 1, 1]
[1, 5, 1, 10]
[1, 5, 3, 10]
[1, 2, 3, 10]
[10, 50, 30, 100]
[7, 50, 30, 100]
</pre>

<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
MLE||||||true||||||


<p>Given <b>n</b> points on X-Y plane. To each point, you are to find the other point who is closest to it with respect to the Euclidean distance.</p>

*******InputConstraints*******

<p><b>T</b> (<= 15) test cases. Each starts with an integer <b>n</b> (2<= <b>n</b> <=100000). Then <b>n</b> lines follow. Each contains two space-seperated integers, the X and Y coordinate of the corresponding point, respectively. No two points in one test case will coincide.</p>

*******OutputConstraints*******

<p>For each test case, output <b>n</b> lines. The i-th of them should contain the squared distance between the i-th
point from the input and its nearest neighbour.</p>

*******IOTestCases*******

<pre><b>Input:</b>
2
10
17 41
0 34
24 19
8 28
14 12
45 5
27 31
41 11
42 45
36 27
15
0 0
1 2
2 3
3 2
4 0
8 4
7 4
6 3
6 1
8 0
11 0
12 2
13 1
14 2
15 0

<b>Output:</b>
200
100
149
100
149
52
97
52
360
97
5
2
2
2
5
1
1
2
4
5
5
2
2
2
5
</pre>
<b>Warning: enormous input/output data, be careful with certain languages</b>

<p>Note: In Sphere Online Judge system, "Memory Limit Exceeded" will be shown as "Runtime Error(other)", with the 0.00 second run-time & 92-200k memory used, or "Runtime Error(SIGSEGV)" with 250M memory used.</p>


______________________________________________________
BROKEN||||||true||||||


<p>
Bruce Force's keyboard is broken, only a few keys are still working. Bruce has
figured out he can still type texts by switching the keyboard layout whenever
he needs to type a letter which is currently not mapped to any of the <i>m</i>
working keys of the keyboard.
</p>
<p>
You are given a text that Bruce wishes to type, and he asks you if you can tell him
the maximum number of consecutive characters in the text which can be typed without
having to switch the keyboard layout.
For simplicity, we assume that each key of the keyboard will be mapped to exactly one character, and it is not possible to type other characters by combination of different keys.
This means that Bruce wants to know the length of the largest substring of the text
which consists of at most <i>m</i> different characters.
</p>

*******InputConstraints*******

<p>The input contains several test cases, each test case consisting of two lines.
The first line of each test case contains the number <i>m</i> (<i>1 &#8804; m &#8804; 128</i>),
which specifies how many keys on the keyboard are still working.
The second line of each test case contains the text which Bruce wants to type.
You may assume that the length of this text does not exceed 1 million characters.
Note that the input may contain space characters, which should be handled like any other character.
</p>
<p>
The last test case is followed by a line containing one zero.
</p>

*******OutputConstraints*******

<p>For each test case, print one line with the length of the largest substring
of the text which consists of at most <i>m</i> different characters.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
5
This can't be solved by brute force.
1
Mississippi
0

<b>Output:</b>
7
2
</pre>



______________________________________________________
PDECODE||||||true||||||


<p><p>
Bruce Force has had an interesting idea how to encode strings.
The following is the description of how the encoding is done:
</p>
<p>
Let x<sub>1</sub>,x<sub>2</sub>,...,x<sub><i>n</i></sub> be the sequence of characters of the string to be encoded.
<ol>
<li>Choose an integer <i>m</i> and <i>n</i> pairwise distinct numbers p<sub>1</sub>,p<sub>2</sub>,...,p<sub><i>n</i></sub> from the set {<i>1</i>, <i>2</i>, ..., <i>n</i>}
(a permutation of the numbers <i>1</i> to <i>n</i>).</i>

<li>Repeat the following step <i>m</i> times.</li>
<li>For <i>1</i> &#8804; i &#8804; <i>n</i> set y<sub>i</sub> to x<sub>p<sub>i</sub></sub>, and then for <i>1</i> &#8804; i &#8804; <i>n</i> replace x<sub>i</sub> by y<sub>i</sub>.

</ol>
<p>
For example, when we want to encode the string "hello", and we choose the value <i>m = 3</i>
and the permutation <i>2, 3, 1, 5, 4</i>, the data would be encoded in 3 steps:
"hello" -> "elhol" -> "lhelo" -> "helol".
</p>
<p>
Bruce gives you the encoded strings, and the numbers <i>m</i> and p<sub>1</sub>, ..., p<sub><i>n</i></sub> used to encode these strings.
He claims that because he used huge numbers <i>m</i> for encoding, you will need a lot of time to decode the strings.
Can you disprove this claim by quickly decoding the strings?
</p>


*******InputConstraints*******

<p>The input contains several test cases.
Each test case starts with a line containing two numbers <i>n</i> and <i>m</i> (<i>1 &#8804; n &#8804; 80</i>, <i>1 &#8804; m &#8804; 10<sup>9</sup></i>).
The following line consists of <i>n</i> pairwise different numbers p<sub>1</sub>,...,p<sub><i>n</i></sub> (<i>1</i> &#8804; p<sub>i</sub> &#8804; <i>n</i>).
The third line of each test case consists of exactly <i>n</i> characters, and represent the encoded string.
The last test case is followed by a line containing two zeros.
</p>

*******OutputConstraints*******

<p>For each test case, print one line with the decoded string.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
2 3 1 5 4
helol
16 804289384
13 10 2 7 8 1 16 12 15 6 5 14 3 4 11 9
scssoet tcaede n
8 12
5 3 4 2 1 8 6 7
encoded?
0 0

<b>Output:</b>
hello
second test case
encoded?
</pre>



______________________________________________________
FOREST2||||||true||||||


<p>
Bruce Force is standing in the forest.  He wonders what is the tree trunk the farthest
away which is not blocked from his view by other tree trunks.
</p>
<p>
Bruce has made a map of the trees in the forest.
The map shows his current position as the origin of a cartesian coordinate system.
Tree <i>i</i> is shown on the map as a circle with the center (<i>x<sub>i</sub>, y<sub>i</sub></i>) and radius <i>r<sub>i</sub></i>.
You may assume that a tree trunk is visible if and only if there exists a line segment on
the map from the origin (0,0) to a point on the border of the circle representing the tree trunk, where the line segment
does not intersect or touch another circle.
</p>


*******InputConstraints*******

<p>The input contains several test cases.
The first line of each test case contains one number <i>n</i> (<i>1 &le; n &le; 1000</i>),
where <i>n</i> specifies how many trees are on the map.
The following <i>n</i> lines contain 3 integers <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>, <i>r<sub>i</sub></i> each,
(<i>-10000 &le; x<sub>i</sub>, y<sub>i</sub> &le; 10000 </i>, <i>1 &le; r<sub>i</sub> &le; 1000 </i>)
where (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) is the center of the circle representing tree trunk <i>i</i>,
and <i>r<sub>i</sub></i> is the radius of the circle.
You may assume that no two circles in the input intersect, i.e., for
any two circles, the distance between their centers is more than the sum of their radii.
Moreover, you may assume that no circle contains the origin.

</p>
<p>
The last test case is followed by a line containing one zero.
</p>


*******OutputConstraints*******

<p>For each test case, print one line with the maximum euclidean distance from
the origin to a visible tree. The distance to a tree should be measured
using the point of the tree closest to the origin, no matter if this point is
in fact visible or not.
</p>
<p>
Round the answer to 3 digits after the decimal point.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10 10 11
1 1 1
-20 -10 20
5
1 2 2
-2 1 1
2 -1 1
-1 -2 2
10000 -10000 1000
0
<b>Output:</b>
3.142
1.236
</pre>



______________________________________________________
HELPBOB||||||true||||||


<p>
Bob loves Pizza but is always out of money. One day he reads in the newspapers that his favorite pizza restaurant,
Alfredo's Pizza Restaurant, is running a competition: they will donate a big pizza to the first person who will tell
them the lowest price per area that can be achieved by buying any of the pizzas at most once. "That task is easy!",
thinks Bob, "For each pizza I just calculate the average price and the lowest quotient will be the answer.".
</p>
<p>
Unfortunately the problem is a bit more complicated: with some pizzas Alberto gives out discount coupons for getting
another pizza cheaper and even worse, those coupons can be combined. The pizzas have to be bought one after the other,
and it is not possible to use a coupon to get a discount retrospectively for a pizza which has already been bought.
Can you help Bob to become the first to solve this task and to get a pizza for free?
</p>


*******InputConstraints*******

<p>
The input file contains several test cases. Each test case starts with a number <i>m</i>, the number of pizzas
Alfredo offers. Input is terminated by <i>m=0</i>. Otherwise, <i>1 &le; m &le; 15</i>. Then follow <i>m</i>

lines describing the pizzas. Each of those following lines describes pizza <i>i</i> (<i>1 &le; i &le; m</i>)
and starts with 3 integer numbers <i>p<sub>i</sub></i>, <i>a<sub>i</sub></i> and <i>n<sub>i</sub></i> specifying
the price of the pizza, its area and the number of discount coupons you get when buying it,

<i>1 &le; p<sub>i</sub> &le; 10000</i>, <i>1 &le; a<sub>i</sub> &le; 10000</i> and <i>0 &le; n<sub>i</sub> &lt; m</i>.
Then follow <i>n<sub>i</sub></i> pairs of integer numbers <i>x<sub>i,j</sub></i> and <i>y<sub>i,j</sub></i> specifying
the index <i>x<sub>i,j</sub></i> (<i>1 &le; x<sub>i,j</sub> &le; m, x<sub>i,j</sub> &ne; i</i>) of the pizza you get a
discount coupon for and the discount in percentage terms <i>y<sub>i,j</sub></i> (<i>1 &le; y<sub>i,j</sub> &le; 50</i>)
you get when buying pizza <i>x<sub>i,j</sub></i>.
You may assume that for each <i>i</i> the values <i>x<sub>i,j</sub></i> are pairwise distinct.

</p>


*******OutputConstraints*******

<p>
For each test case print one line containing the lowest price per area that can be achieved by buying any of the pizzas
at most once. Round this number to 4 places after the decimal point. Note that you can combine an arbitrary number of
discount coupons: for a pizza with price 10 and two rabatt coupons for that pizza with a 50 and a 20 on it, you would
only have to pay 10 * 0.8 * 0.5 = 4 monetary units.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
80 30 0
2
200 100 1 2 50
200 100 0
5
100 100 2 3 50 2 50
100 100 1 4 50
100 100 1 2 40
600 600 1 5 10
1000 10 1 1 50
0
<b>Output:</b>
2.6667
1.5000
0.5333
</pre>



______________________________________________________
SDGAME2||||||true||||||


<p>When we were trying to solve the problem SDGAME, we got a misunderstanding of it.We didn't get AC until we were told the original meaning.But we think our kind of understanding is also interesting and is worthy of doing.So enjoy the problem.

<p>Alice and Bob are playing a game.  The game consists of a circular track of M (2 <= M <= 1,000,000,000) cells labeled 0 through M - 1.  Initially both players start at cell 0.  The game progresses by having each player take turns rolling one of N (1 <= N <= 10,000) 'super-dice' labeled 0 through N - 1.  The actual mechanics of the 'super-dice' is not very well understood; however, it is known that they will only ever turn up a number between 0 and 1,000,000,000 inclusive after a roll.  After rolling the super-dice the number of spaces a player moves is determined by the product of a contiguous subsequence of the values shown on the dice <b>(which are available)</b>(There are special rules for determining the range that vary each move that will not be discussed).<b>If all the values are unavailable,the player moves one space.Iff the number on the dice is more than 1,000,000,000 or less than 0, the dice is unavailable.</b>

<p>To make matters more complicated, after any turn if Alice and Bob land on the same cell the value shown on all dice<b>(neither available nor unavailable)</b> is multiplied by the label of the cell they are on.  Note in this way it is possible for some dice to show numbers greater than 1,000,000,000.

<p>After playing this game for a while, Alice and Bob have grown frustrated because the calculations became too difficult.  Given the series of R (1 <= R <= 100,000) dice rolls and ranges, help Alice and Bob determine their position after each move.  Assume that all dices start out showing 1 <b>and all dices are available</b>.


*******InputConstraints*******

<p>The first line contains R, N, and M each separated by a space.  R lines follow.  Each line will contain d v a b separated by a space.  d indicates the label of the dice rolled.  v indicates the value shown on the dice.  a and b indicate the range of dice used to determine the move distance.


*******OutputConstraints*******

<p>R lines containing the position of the player that just rolled after their roll.



*******IOTestCases*******


<pre>
<b>Input:</b>
6 4 4
0 1000000000 1 1
1 999999998 1 1
2 500000000 3 3
0 1 2 2
3 1 0 3
0 6 0 3

<b>Output:</b>
1
2
2
2
0
0

<b>Output Explanation:</b>

For your assistance, here is the state of the dice after each turn:(* means unavailable)
Before all rolls:
[1,1,1,1](0,0)
After first roll:
[1000000000,1,1,1](1,0)
After second roll:
[1000000000,999999998,1,1](1,2)
After third roll:
[1000000000,999999998,500000000,1](2,2)
All dices multiply 2:
[*,*,1000000000,2](2,2)
After forth roll:
[1,*,1000000000,2](2,2)
All dices multiply 2:
[2,*,*,4](2,2)
After fifth roll:
[2,*,*,1](0,2)
After sixth roll:
[6,*,*,1](0,0)
All dices multiply 0:
[0,0,0,0](0,0)


______________________________________________________
KNIGHTS||||||true||||||


<p>Being a knight is a very attractive career: searching for the Holy Grail, saving damsels in distress, and drinking with the other knights are fun things to do. Therefore, it is not very surprising that in recent years the kingdom of King Arthur has experienced an unprecedented increase in the number of knights. There are so many knights now, that it is very rare that every Knight of the Round Table can come at the same time to Camelot and sit around the round table; usually only a small group of the knights is there, while the rest are busy doing heroic deeds around the country. 
<p>Knights can easily get over-excited during discussions-especially after a couple of drinks. After some unfortunate accidents, King Arthur asked the famous wizard Merlin to make sure that in the future no fights break out between the knights. After studying the problem carefully, Merlin realized that the fights can only be prevented if the knights are seated according to the following two rules:
<p>* The knights should be seated such that two knights who hate each other should not be neighbors at the table. (Merlin has a list that says who hates whom.) The knights are sitting around a round table, thus every knight has exactly two neighbors. 
<p>* An odd number of knights should sit around the table. This ensures that if the knights cannot agree on something, then they can settle the issue by voting. (If the number of knights is even, then it can happen that "yes" and "no" have the same number of votes, and the argument goes on.)
<p>Merlin will let the knights sit down only if these two rules are satisfied, otherwise he cancels the meeting. (If only one knight shows up, then the meeting is canceled as well, as one person cannot sit around a table.) Merlin realized that this means that there can be knights who cannot be part of any seating arrangements that respect these rules, and these knights will never be able to sit at the Round Table (one such case is if a knight hates every other knight, but there are many other possible reasons). If a knight cannot sit at the Round Table, then he cannot be a member of the Knights of the Round Table and must be expelled from the order. These knights have to be transferred to a less-prestigious order, such as the Knights of the Square Table, the Knights of the Octagonal Table, or the Knights of the Banana-Shaped Table. To help Merlin, you have to write a program that will determine the number of knights that must be expelled. </p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each case begins with a line containing two integers 1 <= <i>n</i> <= 1000 and 1 <= <i>m</i> <= 1000000. The number <i>n</i> is the number of knights. The next <i>m</i> lines describe which knight hates which knight. Each of these <i>m</i> lines contains two integers <i>k<sub>1</sub></i> and <i>k<sub>2</sub></i> , which means that knight number <i>k<sub>1</sub></i> and knight number <i>k<sub>2</sub></i> hate each other (the numbers <i>k<sub>1</sub></i> and <i>k<sub>2</sub></i> are between 1 and <i>n</i>).
<p>The input is terminated by a block with n = m = 0.</p>

*******OutputConstraints*******

<p>For each test case you have to output a single integer on a separate line: the number of knights that have to be expelled.</p>

*******IOTestCases*******

<pre><b>Input:</b>
5 5
1 4
1 5
2 5
3 4
4 5
0 0

<b>Output:</b>
2
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
DOCTOR||||||true||||||


<p>Texas is the state having the largest number of cows in the US: according to the 2005 report of the NationalAgricultural Statistics Service, the bovine population of Texas is 13.8 million. This is higher than thepopulation of the two runner-up states combined: there are only 6.65 million cows in Kansas and 6.35millions cows in Nebraska. 

<p>There are several diseases that can threaten a herd of cows, the most feared being "Mad Cow Disease" or Bovine Spongiform Encephalopathy (BSE); therefore, it is very important to be able to diagnose certain illnesses. Fortunately, there are many tests available that can be used to detect these diseases. 

<p>A test is performed as follows. First a blood sample is taken from the cow, then the sample is mixed with a test material. Each test material detects a certain number of diseases. If the test material is mixed with a blood sample having any of these diseases, then a reaction takes place that is easy to observe. However, if a test material can detect several diseases, then we have no way to decide which of these diseases is present in the blood sample as all of them produce the same reaction. There are materials that detect many diseases (such tests can be used to rule out several diseases at once) and there are tests thatdetect only a few diseases (they can be used to make an accurate diagnosis of the problem). 

<p>The test materials can be mixed to create new tests. If we have a test material that detects diseases A and B; and there is another test material that detects diseases B and C, then they can be mixed toobtain a test that detects diseases A, B, and C. This means that if we have these two test materials, then there is no need for a test material that tests diseases A, B, and C-such a material can be obtained bymixing these two. 

<p>Producing, distributing, and storing many different types of test materials is very expensive, and inmost cases, unnecessary. Your task is to eliminate as many unnecessary test materials as possible. Ithas to be done in such a way that if a test material is eliminated, then it should be possible to mix an equivalent test from the remaining materials. ("Equivalent" means that the mix tests exactly the samediseases as the eliminated material, not more, not less). </p>


*******InputConstraints*******


<p>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 <= n <= 300 of diseases, and the number 1 <= m <= 200 of test materials. The next m lines correspond to the m test materials. Each line begins with an integer, the number 1 <= k <= 300 of diseases that the material can detect. This is followed by k integers describing the k diseases. These integers are between 1 and n . 

<p>The input is terminated by a block with n = m = 0 .</p>


*******OutputConstraints*******


<p>For each test case, you have to output a line containing a single integer: the maximum number of test materials that can be eliminated. </p>


*******IOTestCases*******

<pre><b>Input:</b>
10 5
2 1 2
2 2 3
3 1 2 3
4 1 2 3 4
1 4
3 7
1 1
1 2 
1 3
2 1 2
2 1 3
2 3 2
3 1 2 3
0 0

<b>Output:</b>
2
4
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
WILD||||||true||||||


<p>Once upon a time in the west... The quiet life of the villages on the western frontier are often stirred up by the appearance of mysterious strangers. A stranger might be a bounty hunter looking for a notorious villain, or he might be a dangerous criminal escaping the hand of justice. The number of strangers has become so large that they formed the Mysterious Strangers' Union. If you want to be a mysterious stranger, then you have to apply to the Union, and you have to pass three exams that test the three most important skills: shooting, fist-fighting, and harmonica playing. For each skill, the Admission Committeegives a score between 1 (worst) and m (best). Interestingly enough, there are no two members in the Union having exactly the same skills: for every two member, there is always at least one skill for which they have diofferent scores. Furthermore, it turns out that for every possible combination of scores there is exactly one member having these scores. This means that there are exactly m<sup>3</sup> strangers in the union. 

<p>Recently, some members left the Union and they formed the Society of Evil Mysterious Strangers. The aim of this group is to commit as many evil crimes as possible, and they are quite successful at it. Therefore, the Steering Committee of the Union decided that a Hero is needed who will destroy this evil society. A Hero is a mysterious stranger who can defeat every member of the Society of Evil Mysterious Strangers. A Hero can defeat a member if the Hero has a higher score in at least one skill. For example, if the evil society has two members, Colonel Bill, with a score of 7 for shooting, 5 for knife throwing and 3 for harmonica playing, and Rabid Jack, with a score 10 for shooting, 6 for knife throwing and 8 for harmonica playing, then a Hero with score 8 for shooting, 7 for knife throwing and 3 for harmonica playing can defeat both ofthem. However, someone with a score of 8 for shooting 6 for knife throwing and 8 for harmonica playing cannot be the Hero. Moreover, the Hero cannot be a member of the evil society. 

<p>Your task is to determine whether there is a member in the Union who can be the Hero. If so, thenyou have to count how many members are potential heroes. </p>


*******InputConstraints*******


<p>The input contains several blocks of test cases. Each block begins with a line containing two integers: the number 1 <= n <= 100000 of members in the Society of Evil Mysterious Strangers and the maximum value 2 <= m <= 100000 of the scores. The next n lines describe these members. Each line contains three integers between 1 and m: the scores for the three skills. 

<p>The input is terminated by a block with n = m = 0. </p>


*******OutputConstraints*******


<p>For each test case, you have to output a single line containing the number of members in the Union who satisfy the requirements for becoming a Hero. If there is no such member, then output <i>0</i>. It can be assumed that the output is always at most 10<sup>18</sup>.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3 10
2 8 5
6 3 5
1 3 9
1 3
2 2 2
1 10000
2 2 2
0 0

<b>Output:</b>
848
19
999999999992
</pre>
<p><b>Warning: enormous input/output data, be careful with certain languages</b>
<p><b>Note: The input is too large, so we have 4 input files and the total time limit is 17s.</b></p>


______________________________________________________
CLONE||||||true||||||


<p>Doubleville, a small town in Texas, was attacked by the aliens. They have abducted some of the residents and taken them to the a spaceship orbiting around earth. After some (quite unpleasant) human experiments, the aliens cloned the victims, and released multiple copies of them back in Doubleville. So now it might happen that there are 6 identical person named Hugh F. Bumblebee: the original person and its 5 copies. The Federal Bureau of Unauthorized Cloning (FBUC) charged you with the task of determining how many copies were made from each person. To help you in your task, FBUC have collected a DNA sample from each person. All copies of the same person have the same DNA sequence, and different people have different sequences (we know that there are no identical twins in the town, this is not an issue). </p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 <= n <= 20000 people, and the length 1 <= m <= 20 of the DNA sequences. The next n lines contain the DNA sequences: each line contains a sequence of m characters, where each character is either 'A', 'C', 'G' or 'T'. 
<p>The input is terminated by a block with n = m = 0 .</p>

*******OutputConstraints*******

<p>For each test case, you have to output n lines, each line containing a single integer. The first line contains the number of different people that were not copied. The second line contains the number of people that were copied only once (i.e., there are two identical copies for each such person.) The third line contains the number of people that are present in three identical copies, and so on: the i -th line contains the number of persons that are present in i identical copies. For example, if there are 11 samples, one of them is from John Smith, and all the others are from copies of Joe Foobar, then you have to print '1' in the first andthe tenth lines, and '0' in all the other lines. </p>

*******IOTestCases*******

<pre><b>Input:</b>
9 6
AAAAAA
ACACAC
GTTTTG
ACACAC
GTTTTG
ACACAC
ACACAC
TCCCCC
TCCCCC
0 0

<b>Output:</b>
1
2
0
1
0
0
0
0
0
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
WARE||||||true||||||


<p>Secret Agent OmeGa-7 has found the secret weapon warehouse of the mad scientist Dr. Matroid. The warehouse is full of large boxes (possibly with deadly weapons inside the boxes). While inspecting the warehouse, OmeGa-7 accidentally triggered the alarm system. The warehouse has a very effective protection against intruders: if the alarm is triggered, then the floor is filled with deadly acid. Therefore, the only way OmeGa-7 can escape is to climb onto the boxes and somehow reach the exit on top of them. The exit is a hole in the ceiling,if OmeGa-7 can climb through this hole then he can escape using the helicopter parked on the roof. There is a ladder and a box below the hole, thus the goal is to reach this box. 

<p>The floor of the warehouse can be divided into a grid containing n * n cells, the size of each cell is 1 meter * 1 meter. Each cell is either fully occupied by one box or unoccupied. Each box is rectangular: the size of the base is 1 meter * 1 meter, and the height is either 2, 3, or 4 meters. In figure (a), you can see an example warehouse, where the numbers show the height of the boxes, E shows the exit, and the circle shows that Secret Agent OmeGa-7 is currently on the top of that box. 

<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:ware.jpg"></img>

<p>OmeGa-7 can do two things: 

<p>If he is standing on top of a box, and in an adjacent cell there is another box, then he can move to the top of this other box. For example, in the situation depicted in figure (a), he can move either to north or east, but not to west or south. Note that only these four directions are allowed, diagonal moves are not possible. The height difference between the two boxes does not matter. 

<p>The second thing OmeGa-7 can do is that he can topple the box he is standing on in one of the four directions. The effect of toppling is best shown by an example: in the situation shown in figure (b), he can topple the box west (figure (c)) or north (figure (d)). If a box of height h is toppled north (west, south, etc.) then it will occupy h consecutive cells to the north (west, south, etc.) of its original position. The original position will be unoccupied (but can be later occupied again by toppling another box). A box can only be toppled if the cells where it will fall are unoccupied. For example, in figure (a), the box where OmeGa-7 is standing cannot be toppled in any of the four directions. 

<p>By toppling a box, OmeGa-7 jumps one step in the direction that the box is toppled (see figures (c) and(d)). If a box is toppled, then it cannot be toppled again later. Recall that there is a box below the exit (at the cell marked with E in the figure), thus it is not possible to topple a box over this cell. The alarm system will soon release mutant poisonous biting bats, so OmeGa-7 has to leave the warehouse as quickly as possible. You have to help him by writing a program that will determine the minimum number of steps required to reach the exit. Moving to an adjacent box, or toppling a box is counted as one step. </p>


*******InputConstraints*******


<p>The input contains several blocks of test cases. The first line of each block contains three integers: the size 1 <= n <= 8 of the warehouse, and two integers i , j that describe the starting position of the secret agent. These numbers are between 1 and n ; the row number is given by i , the column number is given by j . The next n lines describe the warehouse. Each line contains a string of n characters. Each character corresponds to a cell of the warehouse. If the character is '.', then the cell is unoccupied. The characters '2', '3' and '4' correspond to boxes of height 2, 3 and 4, respectively. Finally, the character 'E' shows the location of the exit. 

<p>The input is terminated by a block with n = i = j = 0. </p>


*******OutputConstraints*******


<p>For each test case, you have to output a single line containing an integer: the minimum number of steps required to reach the exit. If it is not possible to reach the exit, then output the text 'Impossible.'(without quotes).</p>


*******IOTestCases*******

<pre><b>Input:</b>
5 5 3
.2..E
...2.
4....
....4
..2..
0 0 0

<b>Output:</b>
18
</pre>


______________________________________________________
WIDGET||||||true||||||


<p>The widget factory produces several different kinds of widgets. Each widget is carefully built by a skilled widgeteer. The time required to build a widget depends on its type: the simple widgets need only 3 days, but the most complex ones may need as many as 9 days. 
<p>The factory is currently in a state of complete chaos: recently, the factory has been bought by a new owner, and the new director has fired almost everyone. The new staff know almost nothing about building widgets, and it seems that no one remembers how many days are required to build each diofferent type of widget. This is very embarrassing when a client orders widgets and the factory cannot tell the client how many days are needed to produce the required goods. Fortunately, there are records that say for each widgeteer the date when he started working at the factory, the date when he was fired and what types of widgets he built. The problem is that the record does not say the exact date of starting and leaving the job, only the day of the week. Nevertheless, even this information might be helpful in certain cases: for example, if a widgeteer started working on a Tuesday, built a Type 41 widget, and was fired on a Friday,then we know that it takes 4 days to build a Type 41 widget. Your task is to figure out from these records (if possible) the number of days that are required to build the different types of widgets. </p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 <= n <= 300 of the different types, and the number 1 <= m <= 300 of the records. This line is followed by a description of the m records. Each record is described by two lines. The first line contains the total number 1 <= k <= 10000 of widgets built by this widgeteer, followed by the day of week when he/she started working and the day of the week he/she was fired. The days of the week are given bythe strings 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT' and 'SUN'. The second line contains k integers separated by spaces. These numbers are between 1 and n , and they describe the diofferent types of widgets that the widgeteer built. For example, the following two lines mean that the widgeteer started working on a Wednesday, built a Type 13 widget, a Type 18 widget, a Type 1 widget, again a Type 13 widget,and was fired on a Sunday. </p>
<pre>
4 WED SUN 
13 18 1 13 
</pre>
<p>Note that the widgeteers work 7 days a week, and they were working on every day between their first and last day at the factory (if you like weekends and holidays, then do not become a widgeteer!).
<p>The input is terminated by a test case with n = m = 0 . </p>

*******OutputConstraints*******

<p>For each test case, you have to output a single line containing n integers separated by spaces: the number of days required to build the different types of widgets. There should be no space before the first number or after the last number, and there should be exactly one space between two numbers. If there is more than one possible solution for the problem, then write 'Multiple solutions.' (without the quotes). If you are sure that there is no solution consistent with the input, then write 'Inconsistent data.'(without the quotes).</p>

*******IOTestCases*******

<pre><b>Input:</b>
2 3
2 MON THU
1 2
3 MON FRI
1 1 2
3 MON SUN
1 2 2
10 2
1 MON TUE 
3
1 MON WED
3
0 0

<b>Output:</b>
8 3
Inconsistent data.
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
MARTIAN||||||true||||||


<p>The NASA Space Center, Houston, is less than 200 miles from San Antonio, Texas (the site of the ACM Finals this year). This is the place where the astronauts are trained for Mission Seven Dwarfs, the next giant leap in space exploration. The Mars Odyssey program revealed that the surface of Mars is very rich in yeyenum and bloggium. These minerals are important ingredients for certain revolutionary new medicines, but they are extremely rare on Earth. The aim of Mission Seven Dwarfs is to mine these minerals on Mars and bring them back to Earth. 

<p>The Mars Odyssey orbiter identified a rectangular area on the surface of Mars that is rich in minerals. The area is divided into cells that form a matrix of n rows and m columns, where the rows go from east to west and the columns go from north to south. The orbiter determined the amount of yeyenum and bloggium in each cell. The astronauts will build a yeyenum refinement factory west of the rectangular area and a bloggium factory to the north. Your task is to design the conveyor belt system that will allow them to mine the largest amount of minerals. 

<p>There are two types of conveyor belts: the first moves minerals from east to west, the second moves minerals from south to north. In each cell you can build either type of conveyor belt, but you cannot build both of them in the same cell. If two conveyor belts of the same type are next to each other, then they can be connected. For example, the bloggium mined at a cell can be transported to the bloggium refinement factory via a series of south-north conveyor belts. 

<p>The minerals are very unstable, thus they have to be brought to the factories on a straight path without any turns. This means that if there is a south-north conveyor belt in a cell, but the cell north of it contains an east-west conveyor belt, then any mineral transported on the south-north conveyor beltwill be lost. The minerals mined in a particular cell have to be put on a conveyor belt immediately, in the same cell (thus they cannot start the transportation in an adjacent cell). Furthermore, any bloggium transported to the yeyenum refinement factory will be lost, and vice versa. 
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:martian.jpg"></img>
<p>Your program has to design a conveyor belt system that maximizes the total amount of minerals mined,i.e., the sum of the amount of yeyenum transported to the yeyenum refinery and the amount of bloggium transported to the bloggium refinery. </p>

*******InputConstraints*******

<p>The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 <= n <= 500 of rows, and the number 1 <= m <= 500 of columns. The next n lines describe the amount of yeyenum that can be found in the cells. Each of these n lines contains m integers. The first line corresponds to the northernmost row; the first integer of each line corresponds to the westernmost cell of the row. The integers are between 0 and 1000. The next n lines describe in a similar fashion theamount of bloggium found in the cells. 
<p>
The input is terminated by a block with n = m = 0.</p>

*******OutputConstraints*******

<p>
For each test case, you have to output a single integer on a separate line: the maximum amount of mineralsthat can be mined. </p>

*******IOTestCases*******

<pre><b>Input:</b>
4 4
0 0 10 9
1 3 10 0
4 2 1 3 
1 1 20 0
10 0 0 0
1 1 1 30
0 0 5 5
5 10 10 10
0 0

<b>Output</b>
98
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
WORDRING||||||true||||||


<p>A word ring is a sequence of words where the last two letters of each word are the same as the first two letters of the next word (and the last two letters of the last word are the same as the first two letters of the first word). For example, the following sequence is a word ring: </p>
<pre>
intercommunicational
alkylbenzenesulfonate
tetraiodophenolphthalein
</pre>
<p>Your task is to write a program that, given a list of words, finds a word ring. You have to make the word ring as impressive as possible: the average length of the words in the ring has to be as large as possible. In the above example, the average length is (20 + 21 + 24)/3 = 21.6666 , which makes it somewhat impressive. Note that each word can be used at most once in the ring, and the ring can consist of a single word.</P>


*******InputConstraints*******


<p>The input contains several blocks of test cases. Each case begins with a line containing a single integer 1 <= n <= 100000 , the number of possible words that can be used. The next n lines contain these words. The words contain only the characters 'a'-'z' and the length of each word is at most 1000.

<p>The input is terminated by a block with n = 0.</p>


*******OutputConstraints*******


<p>For each test case in the input, you have to output a single number on a separate line: the maximum average length of a ring composed from (a subset of) the words given in the input. The average length should be presented as a real number with two digits of precision. If it is not possible to compose a ring from these words, then output 'No solution.' (without quotes). To avoid rounding problems, we accept solutions with a maximum of 0.01(positive or negative) error. </p>

*******IOTestCases*******

<pre><b>Input:</b>
3
intercommunicational
alkylbenzenesulfonate
tetraiodophenolphthalein
0

<b>Output:</b>
21.66
</pre>
<b>Warning: large input/output data, be careful with certain languages</b>


______________________________________________________
PARTY2||||||true||||||


<p><em>N</em> (1&lt;= <em>N</em> &lt;=100000) perfect killers (we number them 1, 2, 3, ..., <em>N</em>) meet at Blue Mary's house. Every killer has a kind of skill - cloak. No one can see them when they are cloaked - except only a small group of people, which will be discussed later.</p>
<p>We can group these killers into <em>M</em> (<em>M</em> &gt;=3) groups, called group No.1, group No.2, group No.3, etc. If killer A is in group No. <em>x</em> and killer B is in group No. (<em>X</em>%<em>M</em>+1), A can see B even if B is cloaked. This prevent killers from doing some bad things without the risk of being punished.</p>
<p>To keep their identity secret, every killer keep cloaked during the party. After the party, Blue Mary asked everyone a question, "Which killers can you see in the party?" Although some killers forget some person they have ever seen during the party, Blue Mary collects extremely much information. Now she needs you help to determine the value of <em>M</em>, because no killer is willing to share this value with her.</p>

*******InputConstraints*******

<p>Ten test cases(given one after another, you have to process all!). For each test case:</p>
<p>The first line contains two integers <em>N</em> and <em>E</em>(1&lt;= <em>E</em>&lt;= 180000). E lines follow, each line contains two space-seperated integers A and B - killer No. A can see killer No.B even if he is cloaked.</p>

*******OutputConstraints*******

<p>For each test case, output one line:</p>
<p>If the information given is contradictory, output one line "-1 -1". Otherwise output the largest and the smallest possible value of <em>M</em>, seperated by a single space.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6 5
1 2
2 3
3 4
4 1
3 5
3 3
1 2
2 1
2 3
[and 8 test cases more]

<strong>Output:</strong>
4 4
-1 -1
[and 8 test cases more]</pre>
<p><strong>Warning: large input/output data, be careful with certain languages</strong></p>


______________________________________________________
VOL||||||true||||||


<p>ACM ICPC World Finals 2009, sponsored by IBM and hosted by KTH, Royal Institute of Technology will be held in Stockholm, Sweden. This contest will last for <em>N</em>(1&lt;= <em>N</em> &lt;= 1000) days. We need at least <em>A<sub>i</sub></em> volunteers in the <em>i</em>-th day. Now there are <em>M</em>(1&lt;= <em>M</em> &lt;=10000) kind of volunteers. The <em>i</em>-th type of volunteers will work from <em>S<sub>i</sub></em>-th day to <em>T<sub>i</sub></em>-th day, we will pay them $<em>C<sub>i</sub></em>. Now your task is to minimize the money KTH pay for all the volunteers.</p>

*******InputConstraints*******

<p>Ten test cases(given one after another, you have to process all!). For each test case:</p>
<p>The first line contains two space-seperated integers <em>N</em> and <em>M</em>. The second line contains N nonnegative integers <em>A<sub>i</sub></em>. <em>M</em> lines follow, each contains three integers <em>S<sub>i</sub></em>, <em>T<sub>i</sub></em> and <em>C<sub>i</sub></em>. You may assume you can hire almost unlimited number of every type of volunteers.</p>
<p><em>Tip</em>: During your calculation, <strong>int</strong> in C/C++/Java or <strong>longint</strong> in Pascal is enough.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>Output one line with an integer - the minimum cost.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 3
2 3 4
1 2 2
2 3 5
3 3 2
[and 9 test cases more]

<strong>Output:</strong>
14
[and 9 test cases more]
</pre>


______________________________________________________
GEOPROB||||||true||||||


<p>
This is a problem of Euclidean Geometry. See the figure below.
<p>
<IMG SRC="/content/frankr:ff"></img>
<p>
<p>

Your task is as follows: given the lengths of segments b, c, and d, calculate the length of segment a.


*******InputConstraints*******

<p>
The input begins with the number t of test cases in a single line (t<=300). In each of
the next t lines there are three integers b, c and d  (0 <= b, c and d <= 10<sup>200</sup> ; b,d < c)
separated by a space.


*******OutputConstraints*******

<p>
For every test case print the length of the segment a, one number per line.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 8 5
10 18 12

<b>Output:</b>
8
14
</pre>



______________________________________________________
TRANSP1||||||true||||||


<p>Blue Mary, the queen of Protoss, is planning a war against Zerg. Before the war she plans to make her base as safe as possible. Now there are <em>N</em> (1&lt;= <em>N</em> &lt;= 60) nexuses available in the region controlled by Protoss, numbered 1, 2, ..., <em>N</em>. (Those who don't know what nexus is, please visit <a href="http://www.blizzard.com">Blizzard Entertainment</a>.) All the mineral and vespene gas stored in nexus <em>i</em> can be transported directly to nexus <em>S<sub>i</sub></em>.(<em>i</em> and <em>S<sub>i</sub></em> won't be the same.) Blue Mary's base is nexus 1, So all the mineral and vespene gas can be transported to base 1 directly or indirectly.</p>
<p>Blue Mary defines the safety of nexus <em>i</em>, <strong>R(i)</strong>, as the following:</p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:transp1.jpg" alt="" /></p>
<p><em>C<sub>i</sub></em> and <em>k</em> are numeral constants which will be given in the input file.</p>
<p>Suppose for a fixed <em>i</em>, set T={P<sub>1</sub>, P<sub>2</sub>, P<sub>3</sub>, ..., P<sub>w</sub>}, then <strong>x</strong> is a member of T if and only if S<sub><strong>x</strong></sub> is <em>i</em>. Any two P<sub>j</sub>s must be different.</p>
<p>Now Blue Mary wants to modify at most <em>M</em> (0&lt;= <em>M</em> &lt;= <em>N</em>) <em>S<sub>i</sub></em> s, so that the safety of her base <strong>R(1)</strong> is maximized. To be a terran captive, also a great programmer, you must help her to solve this problem. Price is your life. Be careful! Blue Mary tells you that <em>S<sub>1</sub></em> can't be modified. Don't ask your queen about the reason please.</p>

*******InputConstraints*******

<p>Ten test cases(given one after another, you have to process all!). For each test case:</p>
<p>The first line contains <em>N</em>, <em>M</em> and a real number <em>k</em> (0.3&lt;= <em>k</em> &lt;1). The second line contains <em>N</em> space seperated integers <em>S<sub>i</sub></em>. The third line contains <em>N</em> positive real numbers <em>C<sub>i</sub></em>.</p>
<p>There is a single blank line between consecutive test cases.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>A single line - the maximized safety of nexus 1, rounded to two decimal places.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4 1 0.5
2 3 1 3
10.0 10.0 10.0 10.0</pre>
<pre>[and 9 test cases more]

<strong>Output:</strong>
30.00
[and 9 test cases more]
</pre>

______________________________________________________
NOTATRI||||||true||||||


<p>You have N (3 &#8804; N &#8804; 2,000) wooden sticks, which are labeled from 1 to N. The i-th stick has a length of L<sub>i</sub> (1 &#8804; L<sub>i</sub> &#8804; 1,000,000). Your friend has challenged you to a simple game: you will pick three sticks at random, and if your friend can form a triangle with them (degenerate triangles included), he wins; otherwise, you win. You are not sure if your friend is trying to trick you, so you would like to determine your chances of winning by computing the number of ways you could choose three sticks (regardless of order) such that it is impossible to form a triangle with them.</p>


*******InputConstraints*******

<p>The input file consists of multiple test cases. Each test case starts with the single integer N, followed by a line with the integers L<sub>1</sub>, ..., L<sub>N</sub>. The input is terminated with N = 0, which should not be processed.</p>


*******OutputConstraints*******

<p>For each test case, output a single line containing the number of triples.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 2 10
3
1 2 3
4
5 2 9 6
0

<b>Output:</b>
1
0
2

</pre>

<p>For the first test case, 4 + 2 < 10, so you will win with the one available triple. For the second case, 1 + 2 is equal to 3; since degenerate triangles are allowed, the answer is 0.</p>


______________________________________________________
GCD2||||||true||||||


<p>

Frank explained its friend Felman the algorithm of Euclides to calculate the GCD 
of two numbers. Then Felman implements it algorithm 

<pre>
int gcd(int a, int b)
{
	if (b==0)
		return a;
	else
		return gcd(b,a%b);
}
</pre>
and it proposes to Frank that makes it 
but with a little integer and another integer that has up to 250 digits. <p>
Your task is to help Frank programming an efficient code for the challenge of Felman.



*******InputConstraints*******

<p>The first line of the input file contains a number representing the number of lines to follow.
Each line consists of two number A and B (0 <= A <= 40000 and A <= B < 10^250).


*******OutputConstraints*******

<p>Print for each pair (A,B) in the input one integer representing the GCD of A and B.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
2 6
10 11


<b>Output:</b>
2
1

</pre>



______________________________________________________
GSS5||||||true||||||


<p>
You are given a sequence A[1], A[2], ..., A[N] . ( |A[i]| <= 10000 , 1 <= N <= 10000 ). A query is
defined as follows:
Query(x1,y1,x2,y2) = Max { A[i]+A[i+1]+...+A[j] ; x1 <= i <= y1 , x2 j <= y2 and x1 <= x2 , y1 <= y2 }.
Given M queries (1 <= M <= 10000), your program must output the results of these queries.



*******InputConstraints*******

<p>
The first line of the input consist of the number of tests cases <= 5.
Each case consist of the integer N and the sequence A. Then the integer M. 
M lines follow, contains 4 numbers x1, y1, x2 y2.



*******OutputConstraints*******

<p>
Your program should output the results of the M queries for each test case, one query per line.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
6 3 -2 1 -4 5 2
2
1 1 2 3
1 3 2 5
1 1
1
1 1 1 1

<b>Output:</b>
2
3
1


</pre>



______________________________________________________
QTREE5||||||true||||||


<p>You are given a tree (an acyclic undirected connected graph) with N nodes. The tree nodes are numbered from 1 to N. We define dist(a, b) as the number of edges on the path from node a to node b.
</p>
<p>Each node has a color, white or black. All the nodes are black initially.
</p>
<p>We will ask you to perfrom some instructions of the following form:
</p>

<ul>
<li>0 i : change the color of i-th node(from black to white, or from white to black).
<li>1 <b>v</b> : ask for the minimum dist(u, <b>v</b>), node u must be white(u can be equal to <b>v</b>). Obviously, as long as node <b>v</b> is white, the result will alway be 0. 
</ul>



*******InputConstraints*******

<ul>
<li>In the first line there is an integer N (N <= 100000)
<li>In the next N-1 lines, the i-th line describes the i-th edge: a line with two integers a b denotes an edge between a and b.
<li>In the next line, there is an integer Q denotes the number of instructions (Q <= 100000)
<li>In the next Q lines, each line contains an instruction "0 i" or "1 <b>v</b>"
</ul>



*******OutputConstraints*******

<p>For each "1 <b>v</b>" operation, print one integer representing its result.
If there is no white node in the tree, you should write "<b>-1</b>".
</p>




*******IOTestCases*******


<pre>
<b>Input:</b>
10
1 2
1 3
2 4
1 5
1 6
4 7
7 8
5 9
1 10
10
0 6
0 6
0 6
1 3
0 1
0 1
1 3
1 10
1 4
1 6

<b>Output:</b>
2
2
2
3
0

</pre>



______________________________________________________
UNTITLE1||||||true||||||


<p>You are given a sequence of N integers A<sub>1</sub>, A<sub>2</sub> .. A<sub>N</sub>. (-10000 <= A<sub>i</sub> <= 10000, N <= 50000)
</p>
<p>Let S<sub>i</sub> denote the sum of A<sub>1</sub>..A<sub>i</sub>. You need to apply M (M <= 50000) operations:
</p>

<ul>
<li>0 x y k: increase all integers from A<sub>x</sub> to A<sub>y</sub> by k(1 <= x <= y <= N, -10000 <= k <= 10000).
<li>1 x y: ask for max{ S<sub>i</sub> | x <= i <= y }.(1 <= x <= y <= N)
</ul>



*******InputConstraints*******

<ul>
<li>In the first line there is an integer N.
<li>The following line contains N integers that represent the sequence.
<li>The third line contains an integer M denotes the number of operations.
<li>In the next M lines, each line contains an operation "0 x y k" or "1 x y".
</ul>



*******OutputConstraints*******
	
<p>For each "1 x y" operation, print one integer representing its result.
</p>




*******IOTestCases*******


<pre>
<b>Input:</b>
5
238 -9622 5181 202 -6943
5
1 3 4
0 5 5 4846
1 3 5
0 3 5 -7471
1 3 3

<b>Output:</b>
-4001
-4001
-11674

</pre>


______________________________________________________
SHOOTING||||||true||||||


<p>After the end of all the shooting competitions in XXIX Olympic Games in Beijing, Matthew Emmons will be known to more and more people because of his last - which is also his worst - shooting in the 50m Rifle 3*40 Men competitions. Four years before in Athens, he shot a wrong target and lost the gold metal which is almost at hands in the 50m Rifle 3*40 Men competition.</p>
<p><b>The following is Blue Mary's imagination :P</b></p>
<p>Emmons decides to practise shooting more assiduously. Because he is an excellent shooter, only 1 year later, he can even shoot precisely without collimation! To him, getting the gold metal of 50m Rifle 3*40 Men in XXX Olympic Games doesn't have any difficulty now.</p>
<p>His wife - Katerina Emmons, also a well-known excellent shooter - make a game to keep his interests with shot. The player has <i>n</i> (1<= <i>n</i> <=2000) bullets, each one has a value (a integer whose absolute value is less than 10000). There are <i>m</i> (1<= <i>m</i> <= <i>n</i>) targets, each with a point counter next to it. In the beginning of the game, all the counter are set to integer 1.</p>
<p>During the game, the player must choose a bullet and shoot any target. He must use all the bullet, each with at least(of course, at most) 1 time. And each target must be shot at least one time.</p>
<p>If the player shoot a target with a bullet valued <b>X</b>, the counter of the target will multiplied by <b>X</b>.</p>
<p>The final score of the game is sum of all the <i>m</i> counters.</p>
<p>Now Matthew needs your help to make his final score as high as possible. After that, he will show you his excellent shooting skills to get this score.</p>
<p><b>P.S.</b> Even the things above is my imagination, I hope Matthew Emmons has good luck and wins the gold metal of 50m Rifle 3*40 Men in XXX Olympics in London.</p>

*******InputConstraints*******

<p>Multiple test cases, the number of them (<=50) is given in the very first line.</p>
<p>For each test case:</p>
<p>The first line contains two integers <i>n</i> and <i>m</i>. The second line contains <i>n</i> integers, the value for each bullet.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The first and the only line contains a single integer - the highest possible final score.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
10 2
0 -1 -2 0 1 2 3 2 10 1
10 3
0 -1 -2 0 1 2 3 2 10 1
5 3
10 0 0 -1 -1

<b>Output:</b>
240
241
11

<b>Hint:</b>
For the first example, a possible solution is (0,0)(-1,-2,1,2,3,2,10,1).
For the second example, a possible solution is (0,0)(1,1)(-1,-2,2,3,2,10).
</pre>


______________________________________________________
ECLIPSE||||||true||||||


<p>Every so often we hear on the news that there is going to be either a solar or lunar eclipse. Eclipses
have a long history dating back well into the BC&#8217;s. Astronomers study total solar eclipses very closely
as they provide the rare opportunity to observe the corona.
<p>An eclipse occurs when two celestial bodies and a star are (nearly) linearly aligned and the shadow
cast by the one body intersects the other body, creating darkness on the latter body.
<p>We are interested in determining when a solar eclipse will next occur. In Figure 1 you can see two
labelled regions. The umbra is the area of total darkness &#8212; a body in this region will experience a total
solar eclipse. The penumbra is the area of partial darkness &#8212; a body in this region will experience a
partial solar eclipse.
<p>You will be given the size and location of a star and two celestial bodies. Your task is to determine if
the first celestial body creates a solar eclipse on the second celestial body. If it does then you are to
determine whether it is a total or partial eclipse and whether the entire body is in eclipse. If part of
the body is experiencing total eclipse while the entire body is experiencing at least a partial eclipse,
we are only interested in the part that is in total eclipse.
<p>Consider a scaled model of our solar system with the sun at the origin (0, 0, 0) with radius 700, the
moon at position (49900, 1000, 149700) with radius 2 and Earth at position (50000, 1000, 150000) with
radius 7. In Figure 1, the sun would be the star on the left and the moon would be the smaller body
on the right. Part of Earth would then fall in the black umbra region and hence partly experience a
total solar eclipse.
<p>For any body:
<li> 1 &#8804; r &#8804; 10<sup>6</sup>
<li> 0 &#8804; x, y, z &#8804; 10<sup>9</sup>
<p>It is guaranteed that any two bodies will be at least 1
unit apart, and that moving any one of the bodies by 1
unit (in any direction) will not change the answer.</p>
<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/marcog:eclipse.png"/>


*******InputConstraints*******

<p>A test case is described by three lines, each describing the size and location of a single body. The
first line contains four space-separated integers xs , ys , zs and rs , describing the center (xs , ys , zs ) and
radius rs of the star. The following two lines define the two celestial bodies in the same manner.
<p>Test cases follow directly after one another with a &#8722;1 representing the end of the test cases.


*******OutputConstraints*******

<p>Each test case has a single line of output describing the type of eclipse for that case. If the second
celestial body listed in the test case is experiencing an eclipse, then one of the following lines must be
output:
<li>Entire total solar eclipse
<li>Part total solar eclipse
<li>Entire partial solar eclipse
<li>Part partial solar eclipse
<p>If there is no solar eclipse, the line &#8220;No solar eclipse&#8221; must be output.


*******IOTestCases*******


<pre><b>Input:</b>
0 0 0 700
49900 1000 149700 2
50000 1000 150000 7
0 0 0 10
50 0 100 40
60 0 200 1
-1

<b>Output:</b>
Part total solar eclipse
Entire total solar eclipse</pre>


______________________________________________________
TRIOMINO||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TRIOMINO/en/">English</a></td> 
<td width="50%"><a href="/problems/TRIOMINO/vn/">Vietnamese</a></td> 
</tr></table>


<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/racer:Figure2" style="float:right">
X and Y are playing the following game:
They start with an empty 2xN board and move alternately. X moves first. In a move, a player must place an L-triomino (shown on the right), in any of the 4 possible orientations, on the board. The piece placed must not overlap with a piece that has already been placed. The player that is unable to make a valid move loses. </p>
<p>
Given the size of the board, find out who will win the game assuming that both X and Y play optimally


*******InputConstraints*******

<p>
Input consists of multiple test-cases. The first line contains a single integer T, the number of test cases. (T<=50)</p> <p> 
Each test-case consists of a single line containing a single integer N, the size of the board. (N<=800) 

*******OutputConstraints*******

<p>
For each test-case, output a single line containing "X" or "Y" depending on who wins that game. 

*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
4

<b>Output:</b>
X
Y
</pre>





______________________________________________________
PAINTBLK||||||true||||||


<p><i>n</i> blocks are put in a line. You have <i>k</i>(1<=<i>k</i><=15) kinds of dope, the <i>i</i>-th dope is enough to paint c<sub>i</sub> (1<=c<sub>i</sub><=5) blocks. You may assume the sum of all the c<sub>i</sub> equals to <i>n</i>. Your task is to calculate the number of ways to paint the blocks with these kinds of dope, such that no two adjacent blocks are painted with the same kind of dope.</p>

*******InputConstraints*******

<p>Ten test cases(given one after another, you have to process all!). For each test case, the first line contains an integer <i>k</i>, the second line contains <i>k</i> integers, c<sub>1</sub>, c<sub>2</sub>, ...c<sub>k</sub>.</p>

*******OutputConstraints*******

<p>Ten lines, each contains an integer, the number of ways modulo 1000000007.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
1 2 3
5
2 2 2 2 2
10
1 1 2 2 3 3 4 4 5 5
[and 7 test cases more]

<b>Output:</b>
10
39480
85937576
[and 7 test cases more]
</pre>


______________________________________________________
PAINTBLC||||||true||||||


<p><i>n</i> blocks are put in a line. You have <i>k</i>(1<=<i>k</i><=15) kinds of dope, the <i>i</i>-th dope is enough to paint c<sub>i</sub> (1<=c<sub>i</sub><=6) blocks. You may assume the sum of all the c<sub>i</sub> equals to <i>n</i>. Your task is to calculate the number of ways to paint the blocks with these kinds of dope, such that no two adjacent blocks are painted with the same kind of dope.</p>

*******InputConstraints*******

<p>Input consists of multiple test cases, the number of them (<=2000) is given in the very first line. For each test case, the first line contains an integer <i>k</i>, the second line contains <i>k</i> integers, c<sub>1</sub>, c<sub>2</sub>, ...c<sub>k</sub>.</p>

*******OutputConstraints*******

<p>For each test case, output one line with an integer, the number of ways modulo 1000000007.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
3
1 2 3
5
2 2 2 2 2
10
1 1 2 2 3 3 4 4 5 5

<b>Output:</b>
10
39480
85937576
</pre>



______________________________________________________
ELECTRO||||||true||||||


<p>Scientist Frank, majoring in electrochemistry, has developed line-shaped strange electrodes called F-electrodes.
During being activated, each F-electrode causes a special potential on and between the two lines touching the
F-electrode's endpoints at a right angle. Then electrically-charged particles located inside the potential area get
to move in the direction parallel to the potential boundary (i.e. perpendicular to the F-electrode), either toward or
against F-electrode. The moving direction can be easily controlled between the two possibles; it is also possible
to get particles to pass through F-electrodes. In addition, unlike ordinary electrodes, F-electrodes can affect
particles even infinitely far away, as long as those particles are located inside the potential area. On the other
hand, two different F-electrodes cannot be activated at a time, since their potentials conflict strongly.
<p>We can move particles on our will by controlling F-electrodes. However, in some cases, we cannot lead them to
the desired positions due to the potential areas being limited. To evaluate usefulness of F-electrodes from some
aspect, Frank has asked you the following task: to write a program that finds the shortest distances from the
particles' initial positions to their destinations with the given sets of F-electrodes.
<center><img src="http://www.spoj.pl/content/crazyb0y:ELECTRO.jpg"></center>


*******InputConstraints*******

<p>The input consists of multiple test cases. The first line of each case contains N(1 &#8804; N &#8804; 100) which represents
the number of F-electrodes. The second line contains four integers xs, ys, xt and yt, where (xs, ys) and (xt , yt)
indicate the particle&#8217;s initial position and destination. Then the description of N F-electrodes follow. Each line
contains four integers F<sub>xs</sub>, F<sub>ys</sub>, F<sub>xt</sub> and F<sub>yt</sub>, where (F<sub>xs</sub>, F<sub>ys</sub>) and (F<sub>xt</sub> , F<sub>yt</sub>) indicate the two endpoints of an
F-electrode. All coordinate values range from 0 to 100 inclusive.
<p>The input is terminated by a case with N = 0.


*******OutputConstraints*******

<p>Your program must output the case number followed by the shortest distance between the initial position to
the destination. Output "<tt>Impossible</tt>" (without quotes) as the distance if it is impossible to lead the elementary
particle to the destination. Your answers must be printed with five digits after the decimal point.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2 1 2 2
0 0 1 0
0 1 0 2
0

<b>Output:</b>
Case 1: 3.00000
</pre>



______________________________________________________
FILTER||||||true||||||


<p>The median filter is a nonlinear digital filter used to reduce noise in images, sounds, and other kinds of signals.
It examines each sample of the input through a <i>window</i> and then emits the <i>median</i> of the samples in the window.
Roughly speaking, a window is an interval that contains a target sample and its preceding and succeeding
samples; the median of a series of values is given by the middle value of the series arranged in ascending (or
descending) order.</p>
<p>Let us focus on a typical median filter for black-and-white raster images. The typical filter uses a 3 ? 3 window,
which contains a target pixel and the eight adjacent pixels. The filter examines each pixel in turn through this
3 ? 3 window, and outputs the median of the nine pixel values, i.e. the fifth lowest (or highest) pixel value, to the
corresponding pixel. We should note that the output is just given by the pixel value in majority for black-andwhite
images, since there are only two possible pixel values (i.e. black and white). The figure below illustrates
how the filter works.</p>
<center><img src="http://www.spoj.pl/content/crazyb0y:FILTER_A.jpg"></center>
<p>The edges of images need to be specially processed due to lack of the adjacent pixels. In this problem, we extends
the original images by repeating pixels on the edges as shown in the figure below. In other words, the lacked
pixels take the same values as the nearest available pixels in the original images.</p>
<center><img src="http://www.spoj.pl/content/crazyb0y:FILTER_B.jpg"></center>
<p>You are requested to write a program that reads images to which the filter is applied, then finds the original
images containing the greatest and smallest number of black pixels among all possible ones, and reports the
difference in the numbers of black pixels.</p>


*******InputConstraints*******


<p>The input contains a series of test cases.</p>
<p>The first line of each test case contains two integers W and H (1 &#8804; W, H &#8804; 8), which indicates the width and
height of the image respectively. Then H lines follow to describe the filtered image. The <i>i</i>-th line represents
the <i>i</i>-th scan line and contains exactly W characters, each of which is either '#' (representing black) or '.'
(representing white).</p>
<p>The input is terminated by a line with two zeros.</p>


*******OutputConstraints*******


<p>For each test case, print a line that contains the case number followed by the difference of black pixels. If there
are no original images possible for the given filtered image, print "<tt>Impossible</tt>" instead.</p>
<p>Obey the format as shown in the sample output.</p>


*******IOTestCases*******

<pre><b>Input:</b>
5 5
#####
#####
#####
#####
#####
4 4
####
####
####
####
4 4
#...
....
....
...#
4 4
.#.#
#.#.
.#.#
#.#.
0 0

<b>Output:</b>
Case 1: 10
Case 2: 6
Case 3: 2
Case 4: Impossible
</pre>



______________________________________________________
LIFEGAME||||||true||||||


<p>You are working at a production plant of biological weapons. You are a maintainer of a terrible virus weapon
with very high reproductive power. The virus has a tendency to build up regular hexagonal colonies. So as a
whole, the virus weapon forms a hexagonal grid, each hexagon being a colony of the virus. The grid itself is in
the regular hexagonal form with <i>N</i> colonies on each edge.
<p>The virus self-propagates at a constant speed. Self-propagation is performed simultaneously at all colonies.
When it is done, for each colony, the same number of viruses are born at every neighboring colony. Note that,
after the self-propagation, if the number of viruses in one colony is more than or equal to the limit density <i>M</i>,
then the viruses in the colony start self-attacking, and the number reduces modulo <i>M</i>.
<p>Your task is to calculate the total number of viruses after <i>L</i> periods, given the size <i>N</i> of the hexagonal grid and
the initial number of viruses in each of the colonies.
<center><img src="http://www.spoj.pl/content/crazyb0y:LIFEGAME.jpg"></center>


*******InputConstraints*******

<p>The input consists of multiple test cases.
<p>Each case begins with a line containing three integers <i>N</i> (1 &#8804; <i>N</i> &#8804; 6), <i>M</i> (2 &#8804; <i>M</i> &#8804; 10<sup>9</sup>), and <i>L</i> (1 &#8804; <i>L</i> &#8804; 10<sup>9</sup>).
The following 2<i>N</i> - 1 lines are the description of the initial state. Each non-negative integer (smaller than <i>M</i>)
indicates the initial number of viruses in the colony. The first line contains the number of viruses in the <i>N</i> colonies
on the topmost row from left to right, and the second line contains those of <i>N</i> + 1 colonies in the next row, and
so on.
<p>The end of the input is indicated by a line "0 0 0".


*******OutputConstraints*******

<p>For each test case, output the test case number followed by the total number of viruses in all colonies after <i>L</i>
periods.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3 1
1 0 0
0 0 0 0
0 0 0 0 0
0 0 0 0
0 0 1
3 3 2
1 0 0
0 0 0 0
0 0 0 0 0
0 0 0 0
0 0 1
0 0 0

<b>Output:</b>
Case 1: 8
Case 2: 18
</pre>



______________________________________________________
LAND||||||true||||||


<p>Indigo Real-estate Company is now planning to develop a new housing complex. The entire complex is a square,
all of whose edges are equally <i>a</i> meters. The complex contains <i>n</i> subdivided blocks, each of which is a <i>b</i>-meter
square. Here both <i>a</i> and <i>b</i> are positive integers.

<p>However the project is facing a big problem. In this country, a percentage limit applies to the subdivision of a
land, under the pretext of environmental protection. When developing a complex, the total area of the subdivided
blocks must not exceed 50% of the area of the complex; in other words, more than or equal to 50% of the newly
developed housing complex must be kept for green space. As a business, a green space exceeding 50% of the
total area is a <i>dead space</i>. The primary concern of the project is to minimize it.

<p>Of course purchasing and developing a land costs in proportion to its area, so the company also wants to minimize
the land area to develop as the secondary concern. You, a member of the project, were assigned this task, but can
no longer stand struggling against the problem with your pencil and paper. So you decided to write a program to
find the pair of minimum <i>a</i> and <i>b</i> among those which produce the minimum dead space for given <i>n</i>.


*******InputConstraints*******

<p>The input consists of multiple test cases. Each test case comes in a line, which contains an integer <i>n</i>. You may
assume 1 &#8804; <i>n</i> &#8804; 10000.
<p>The end of input is indicated by a line containing a single zero. This line is not a part of the input and should not
be processed.


*******OutputConstraints*******

<p>For each test case, output the case number starting from 1 and the pair of minimum <i>a</i> and <i>b</i> as in the sample
output.
<p>You may assume both <i>a</i> and <i>b</i> fit into 64-bit signed integers.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
0

<b>Output:</b>
Case 1: 3 2
Case 2: 2 1

</pre>



______________________________________________________
LINE||||||true||||||


<p>Your dear son Arnie is addicted to a puzzle named <i>Connect Line Segments</i>.</p>
<p>In this puzzle, you are given several line segments placed on a two-dimensional area. You are allowed to add
some new line segments each connecting the end points of two existing line segments. The objective is to form a
single polyline, by connecting all given line segments, as short as possible. The resulting polyline is allowed to
intersect itself.</p>
<center><img src="http://www.spoj.pl/content/crazyb0y:LINE.jpg"></center>
<p>Arnie has solved many instances by his own way, but he is wondering if his solutions are the best one. He knows
you are a good programmer, so he asked you to write a computer program with which he can verify his solutions.</p>
<p>Please respond to your dear Arnie&#8217;s request.</p>


*******InputConstraints*******

<p>The input consists of multiple test cases.</p>
<p>Each test case begins with a line containing a single integer <i>n</i> (2 &#8804; <i>n</i> &#8804; 14), which is the number of the initial
line segments. The following <i>n</i> lines are the description of the line segments. The <i>i</i>-th line consists of four real
numbers: <i>x<sub>i,1</sub></i>, <i>y<sub>i,1</sub></i>, <i>x<sub>i,2</sub></i>, and <i>y<sub>i,2</sub></i> (-100 &#8804; <i>x<sub>i,1</sub></i>, <i>y<sub>i,1</sub></i>, <i>x<sub>i,2</sub></i>, <i>y<sub>i,2</sub></i> &#8804; 100). (<i>x<sub>i,1</sub></i>, <i>y<sub>i,1</sub></i>) and (<i>x<sub>i,2</sub></i>, <i>y<sub>i,2</sub></i>) are the coordinates of
the end points of the <i>i</i>-th line segment.</p>
<p>The end of the input is indicated by a line with single "0".</p>


*******OutputConstraints*******

<p>For each test case, output the case number followed by the minimum length in a line.</p>
<p>The output value should be printed with five digits after the decimal point.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 1 0 9
10 1 10 9
1 0 9 0
1 10 9 10
2
1.2 3.4 5.6 7.8
5.6 3.4 1.2 7.8
0

<b>Output:</b>
Case 1: 36.24264
Case 2: 16.84508
</pre>



______________________________________________________
OILCOMP||||||true||||||


<p>Irving & Cohen Petroleum Corporation has decided to develop a new oil field in an area. A preliminary survey
has been done and they created a detailed grid map of the area which indicates the reserve of oil.</p>
<p>They are now planning to construct mining plants on several grid blocks according this map, but they decided
not to place any two plants on adjacent positions to avoid spreading of fire in case of blaze. Two blocks are
considered to be adjacent when they have a common edge. You are one of the programmers working for the
company and your task is to write a program which calculates the maximum amount of oil they can mine, given
the map of the reserve.</p>


*******InputConstraints*******

<p>The first line of the input specifies N, the number of test cases. Then N test cases follow, each of which looks
like the following:</p>
<pre>W H
r<sub>1,1</sub> r<sub>2,1</sub> ... r<sub>W,1</sub>
 ... 
r<sub>1,H</sub> r<sub>2,H</sub> ... r<sub>W,H</sub></pre>
<p>The first line of a test case contains two integers W and H (1 &#8804; W, H &#8804; 20). They specifies the dimension of
the area. The next H lines, each of which contains W integers, represent the map of the area. Each integer rx,y
(0 &#8804; rx,y < 10000) indicates the oil reserve at the grid block (x, y).</p>


*******OutputConstraints*******

<p>For each test case, output the case number (starting from 1) and the maximum possible amount of mining in a
line. Refer to the sample output section about the format.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2 2
2 3
3 5
3 2
4 1 1
2 1 4

<b>Output:</b>
Case 1: 7
Case 2: 8
</pre>



______________________________________________________
RPS||||||true||||||


<p>A company "ACM Foods" is preparing for opening its chain shop in a certain area, but another company "ICPC
Pizza" is also planning to set up its branch shop in the same area. In general, two competitive shops gain less
incomes if they are located so close to each other. Thus, if both "ACM Foods" and "ICPC Pizza" went on
opening, they would be damaged financially. So, they had a discussion on this matter and made the following
agreement: only one of them can branch its shop in the area. It is determined by Rock-Paper-Scissors (RPS)
which to branch the shop.</p>
<p>ACM Foods is facing financial difficulties and strongly desires to open their new shop in that area. The executives
have decided to make every effort for finding out a very strong RPS player. They believes that players who win
consecutive victories must be strong players. In order to find such a player for sure, they have decided their
simple strategy.</p>
<p>In this strategy, many players play games of RPS repeatedly, but the games are only played between players with
the same number of consecutive wins. At the beginning, all the players have no wins, so any pair of players
can play a game. The games can be played by an arbitrary number of pairs simultaneously. Let us call a set of
simultaneous games as a turn. After the first turn, some players will have one win, and the other players will
remain with no wins. In the second turn, some games will be played among players with one win, and some
other games among players with no wins. For the former games, the winners will have two consecutive wins,
and the losers will lose their first wins and have no consecutive wins. For the latter games, the winners will have
one win, and the losers will remain with no wins. Therefore, after the second turn, the players will be divided
into three groups: players with two consecutive wins, players with one win, and players with no wins. Again,
in the third turn, games will be played among players with two wins, among with one win, and among with no
wins. The following turns will be conducted so forth. After a sufficient number of turns, there should be a player
with the desired number of consecutive wins.</p>
<p>The strategy looks crazy? Oh well, maybe they are confused because of their financial difficulties.
Of course, this strategy requires an enormous amount of plays. The executives asked you, as an employee of
ACM Foods, to estimate how long the strategy takes. Your task is to write a program to count the minimum
number of turns required to find a player with M consecutive wins among N players.</p>


*******InputConstraints*******

<p>The input consists of multiple test cases. Each test case consists of two integers N (2 &#8804; N &#8804; 20) and M (1 &#8804; M < N) in one line.</p>
<p>The input is terminated by the line containing two zeroes.</p>


*******OutputConstraints*******

<p>For each test case, your program must output the case number followed by one integer which indicates the minimum number of turns required to find a person with M consecutive wins.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2 1
10 5
15 10
0 0

<b>Output:</b>
Case 1: 1
Case 2: 11
Case 3: 210
</pre>



______________________________________________________
VORONOI||||||true||||||


<p>A discrete Voronoi diagram is a derivation of a Voronoi diagram. It is represented as a set of pixels. Each of the
generatrices lies on the center of some pixel. Each pixel belongs to the generatrix nearest from the center of the
pixel in the sense of Manhattan distance. The Manhattan distance d between two points (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) and (<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>) is
given by the following formula:
<center><i>d</i> = |<i>x</i><sub>1</sub> - <i>x</i><sub>2</sub>| + |<i>y</i><sub>1</sub> - <i>y</i><sub>2</sub>|</center>
<p>Your task is to find a set of generatrices which generates a given discrete Voronoi diagram. In the given diagram,
each generatrix is given a unique lowercase letter as its identifier, and each pixel is represented by the identifier
of the generatrix the pixel belongs to. If a pixel has multiple generatrices at the same distance from its center, it
belongs to the generatrix with the most preceding identifier among them (i.e. the smallest character code).


*******InputConstraints*******

<p>The input consists of multiple test cases.
<p>Each test case begins with a line containing two integers <i>W</i> (1 &#8804; <i>W</i> &#8804; 32) and <i>H</i> (1 &#8804; <i>H</i> &#8804; 32), which denote the
width and height of the discrete Voronoi diagram.
<p>The following <i>H</i> lines, each of which consists of <i>W</i> letters, give one discrete Voronoi diagram. Each letter
represents one pixel.
<p>The end of input is indicated by a line with two zeros. This is not a part of any test cases.


*******OutputConstraints*******

<p>For each test case, print the case number and the coordinates of generatrices as shown in the sample output. Each
generatrix line should consist of its identifier, <i>x</i>-coordinate, and <i>y</i>-coordinate. Generatrices should be printed in
alphabetical order of the identifiers. Each coordinate is zero-based where (0, 0) indicates the center of the top-left
corner pixel of the diagram.
<p>You may assume that every test case has at least one solution. If there are multiple solutions, any one is acceptable.
<p>Print a blank line after every test case including the last one.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3
ooxx
ooxx
ooxx
4 1
null
4 4
aabb
aabb
ccdd
ccdd
0 0

<b>Output:</b>
Case 1:
o 0 0
x 2 0

Case 2:
l 2 0
n 0 0
u 1 0

Case 3:
a 0 0
b 2 0
c 0 2
d 2 2

</pre>



______________________________________________________
WALL||||||true||||||


<p>A new lord assumed the position by the death of the previous lord in a Far Eastern province.
<p>The new greedy lord hates concave polygons, because he believes they need much wasted area to be drawn on
paper. He always wants to modify them to convex ones.
<p>His castle is currently surrounded by a wall forming a concave polygon, when seen from the above. Of course
he hates it. He believes more area could be obtained with a wall of a convex polygon. Thus he has ordered his
vassals to have new walls built so they form a convex polygon.
<p>Unfortunately, there is a limit in the budget. So it might be infeasible to have the new walls built completely. The
vassals has found out that only up to <i>r</i> meters of walls in total can be built within the budget. In addition, the new
walls must be built in such a way they connect the polygonal vertices of the present castle wall. It is impossible
to build both of intersecting walls.
<p>After long persuasion of the vassals, the new lord has reluctantly accepted that the new walls might not be built
completely. However, the vassals still want to maximize the area enclosed with the present and new castle walls,
so they can satisfy the lord as much as possible.
<p>Your job is to write a program to calculate, for a given integer <i>r</i>, the maximum possible area of the castle with
the new walls.


*******InputConstraints*******

<p>The input file contains several test cases.
<p>Each case begins with a line containing two positive integers <i>n</i> and <i>r</i>. <i>n</i> is the number of vertices of the concave
polygon that describes the present castle wall, satisfying 5 &#8804; <i>n</i> &#8804; 64. <i>r</i> is the maximum total length of new castle
walls feasible within the budget, satisfying 0 &#8804; <i>r</i> &#8804; 400.
<p>The subsequent <i>n</i> lines are the <i>x</i>- and <i>y</i>-coordinates of the <i>n</i> vertices. The line segments (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>)&#8211;(<i>x<sub>i+1</sub></i>, <i>y<sub>i+1</sub></i>)
(1 &#8804; <i>i</i> &#8804; <i>n</i> - 1) and (<i>x<sub>n</sub></i>, <i>y<sub>n</sub></i>)&#8211;(<i>x<sub>1</sub></i>, <i>y<sub>1</sub></i>) form the present castle wall of the concave polygon. Those coordinates are
given in meters and in the counterclockwise order of the vertices.
<p>All coordinate values are integers between 0 and 100, inclusive. You can assume that the concave polygon is
simple, that is, the present castle wall never crosses or touches itself.
<p>The last test case is followed by a line containing two zeros.


*******OutputConstraints*******

<p>For each test case in the input, print the case number (beginning with 1) and the maximum possible area enclosed
with the present and new castle walls. The area should be printed with exactly one fractional digit.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 4
0 0
4 0
4 4
2 2
0 4
8 80
45 41
70 31
86 61
72 64
80 79
40 80
8 94
28 22
0 0

<b>Output:</b>
Case 1: 16.0
Case 2: 3375.0
</pre>



______________________________________________________
MUL2COM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MUL2COM/en/">English</a></td> 
<td width="50%"><a href="/problems/MUL2COM/vn/">Vietnamese</a></td> 
</tr></table>

<p>In this problem, you have to multiply two n-bit binary numbers in 2s complement form. The result should be also a n-bit binary number in 2s complement form. In case there is an arithmetic overflow, you program should be able to detect it.</p>
<p>For your information, the 2s complement form of -x is the number 2^n-x. A n-bit 2s complement number ranges from -2<sup>n-1</sup> to 2<sup>n-1</sup>-1.</p>

*******InputConstraints*******

<p>There are multiple test cases (no more than 40). For each test case, there are three input lines. The first line contains n (0 &#8804; n &#8804; 1024). n=0 signals the end of the input. Otherwise, the second and third lines contain the two n-bit binary numbers.</p>

*******OutputConstraints*******

<p>For each test case, output "overflow" if there is an arithmetic overflow. Otherwise, print the result in 2s complement form.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
3
110
011
4
0011
1110
0

<b>Output</b>
overflow
1010
</pre>




______________________________________________________
SOLDIER||||||true||||||


<p>Igor, a famous russian soldier, must go to war in Afghanistan (we are in late 80&#8217;s). His superiors allowed him to buy himself his equipment. So, he must buy 6 items: helmet, bulletproof vest, trousers, boots,  tunic and a firearm. This items are represented with numbers from 1 to 6. There are N( 6 < N < 101 ) items of this 6 types. Each item is characterized by its price p[i] (in rublas ) and is quality q[i]. Igor has T (0 < T < 1001 ) rublas and he wants to maximize the total quality of his equipment. The total quality is the quality of the item with the lowest quality. Help him.


*******InputConstraints*******

<p>On the first line there are two integers N and T. On the lines 2 ... N+1 there are 3 integers, type[i] (from 1 to 6) p[i] and q[i]. ( 0 < p[ i ], q[ i ] < T )


*******OutputConstraints*******

<p>Output the total quality.


*******IOTestCases*******


<pre>
<b>Input:</b>
7 53
5 8 2
2 4 8
6 8 13
1 13 12
4 5 1
3 2 7
3 13 5

<b>Output:</b>
1

<b>Note:</b>
If there is no answer, output 0.
There can be less than 6 types of items.
</pre>



______________________________________________________
SEQ5||||||true||||||


<p>
Tom has again maths , and the teacher writes countless tables with exercises .... so boring. Then he remembers an old problem of informatics that he thought in a dream .


He remembered , he has a number of positive integers and the job was to know how many subsequences that have between L and U distinct elements exist in that range.
So the boring hour will pass quicker .

But he needs your help , he is to exhausted after two hours of math with the agitated teacher .

*******InputConstraints*******

<p>
The first line of input file contains positive N, L, U. following N lines will contain a positive integer, each representing an element of the series.


*******OutputConstraints*******

<p>
The first line of the output will display the number of sequences containing between L and U distinct elements.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 1 2
231
19
7
19


<b>Output:</b>
8

<b>Notes:</b>

1<= L <= U <= N <= 2^20
The value of an item number is a positive integers [1,2^32-1];
A subsequence is a lot of items that appear on consecutive positions in the initial row.
<b>Be carefull with certain languages.Large imput data.</b>
Tom thanks you for solving this problem and he awards you with points.


______________________________________________________
COPYDNA||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/COPYDNA/en/">English</a></td> 
<td width="50%"><a href="/problems/COPYDNA/vn/">Vietnamese</a></td> 
</tr></table>


<p>
Evolution is a seemingly random process which works in a way
which resembles certain approaches we use to get approximate
solutions to hard combinatorial problems. You are now to do
something completely different.
</p>
<p>
Given a DNA string S from the alphabet {A,C,G,T}, find the
minimal number of copy operations needed to create another string
T. You may reverse the strings you copy, and copy both from S
and the pieces of your partial T. You may put these pieces together
at any time. You may only copy contiguous parts of your partial
T, and all copied strings must be used in your final T. </p>
<p>Example:
From S = &#8220;ACTG&#8221; create T = &#8220;GTACTATTATA&#8221;</p>
<ol>
<li>Get GT......... by copying and reversing &#8220;TG&#8221; from S.</li>
<li>Get GTAC....... by copying &#8220;AC&#8221; from S.</li>
<li>Get GTAC...TA.. by copying &#8220;TA&#8221; from the partial T.</li>
<li>Get GTAC...TAAT by copying and reversing &#8220;TA&#8221; from the partial T.</li>
<li>Get GTACAATTAAT by copying &#8220;AAT&#8221; from the partial T.</li>
</ol>

*******InputConstraints*******

<p>
The first line of input gives a single integer, 1 &#8804; t &#8804; 100, the number of test cases. Then
follow, for each test case, a line with the string S of length 1 &#8804; m &#8804; 18, and a line with
the string T of length 1 &#8804; n &#8804; 18.
</p>


*******OutputConstraints*******

<p>Output for each test case the number of copy operations needed to create T from S, or
&#8220;impossible&#8221; if it cannot be done.
</p>


*******IOTestCases*******

<pre>
<b>Input</b>
5
ACGT
GTAC
A
C
ACGT
TGCA
ACGT
TCGATCGA
A
AAAAAAAAAAAAAAAAAA

<b>Output</b>
2
impossible
1
4
6
</pre>
</h3>





______________________________________________________
MOD||||||true||||||


<p>Given 3 positive integers <i>x</i>, <i>y</i> and <i>z</i>, you can find <i>k = x<sup>y</sup>%z</i> easily, by fast power-modulo algorithm. Now your task is the inverse of this algorithm. Given 3 positive integers <i>x</i>, <i>z</i> and <i>k</i>, find the smallest non-negative integer <i>y</i>, such that <i>k%z = x<sup>y</sup>%z</i>.</p>


*******InputConstraints*******

<p>About 600 test cases.
<p>Each test case contains one line with 3 integers <i>x</i>, <i>z</i> and <i>k</i>.(1<= <i>x</i>, <i>z</i>, <i>k</i> <=10<sup>9</sup>)
<p>Input terminates by three zeroes.</p>


*******OutputConstraints*******

<p>For each test case, output one line with the answer, or "No Solution"(without quotes) if such an integer doesn't exist.</p>


*******IOTestCases*******

<pre><b>Input:</b>
5 58 33
2 4 3
0 0 0

<b>Output:</b>
9
No Solution
</pre>


______________________________________________________
DICTSUB||||||true||||||


<p>You have a dictionary of strings, and you want to perform some queries on the strings.  In particular, you're given a single string T, and for each word W in the dictionary, you want to determine if W is a subsequence of T.
A string B is a subsequence of a string C if you can remove zero or more of C's letters to form a string equal to B (but the order of remaining letters may not be rearranged).
<br><br>
Each word W in the dictionary will be described in the input as a run length encoded (RLE) string.  That is, W will be described by several pairs of data values, where each pair of data values consists of a positive integer K
with no leading zeros and a letter L.  A data pair with values K and L represents a string with K occurrences of the character L.  To get the uncompressed string, we concatenate all strings represented by the data pairs.
For example, the RLE string 2A1B5C12A represents the string AABCCCCCAAAAAAAAAAAA.



*******InputConstraints*******

<p>The first line of the input contains a positive integer C (0&lt;C&lt;10), the number of test cases to follow.  Each case begins with a line containing a positive integer D (0&lt;D&lt;10000) representing the number of dictionary words and a string T
with length between 1 and 10000.  D lines follow, with each line containing a string with length between 1 and 200 in RLE format, which represents a dictionary word with uncompressed length between 1 and 10000. All uncompressed strings
(T and dictionary words) will consist only of uppercase letters ('A'-'Z').


*******OutputConstraints*******

<p>Output for each case consists of several lines.  There should be one line per dictionary word W (in the order of appearance in input) that will say either "YES" if W is a subsequence of T, or "NO" otherwise.  Print a blank line after each test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 EFFERVESCENCE
2E
1E1F1V1C1E
1E2F1C1R
1S2E
1P1E2F


<b>Output:</b>
YES
YES
NO
YES
NO
</pre>



______________________________________________________
ODDDIV||||||true||||||


<p>Given a positive odd integer K and two positive integers low and high, determine how many integers between low and high contain exactly K divisors.


*******InputConstraints*******

<p>The first line of the input contains a positive integer C (0&lt;C&lt;100,000), the number of test cases to follow. Each case consists of a line containing three integers: K, low, and high (1&lt;K&lt;10000, 0&lt;low&le; high&lt;10^10). K will always be an odd integer.


*******OutputConstraints*******

<p>Output for each case consists of one line: the number of integers between low and high, inclusive, that contain exactly K divisors.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 2 49
9 1 100
5 55 235

<b>Output:</b>
4
2
1

</pre>



______________________________________________________
GRAPHGAM||||||true||||||


<p>Charlesbert and Merangelou are playing a two-player game on a game board. The game board consists of several circles, where some circles are connected to other circles. Charlesbert uses a game piece called the GoalPiece, and Merangelou uses a game piece called the ChasePiece.
<br><br>
The game is played as follows: at the start of the game, Charlesbert chooses a circle on the board and places the Goalpiece on it, and at the same time Merangelou places the ChasePiece on circle 1. During the next K seconds, Merangelou makes a sequence of moves (at one move per second), where a move consists of either leaving the ChasePiece on its current circle, or moving the ChasePiece from its current circle to a circle that is directly connected to it. If the ChasePiece and the GoalPiece lie on the same circle before or exactly K seconds after Charlesbert last placed the ChasePiece, Merangelou wins. Otherwise, Charlesbert chooses a new circle on the board and places the GoalPiece on it, and Merangelou will make K more moves (Charlesbert moves the GoalPiece before Merangelou makes another move). This process is repeated until the ChasePiece and the GoalPiece lie on the same circle. Note that it is possible for Merangelou to win in fewer than K moves.
<br><br>
Merangelou wants to win the game as quickly as possible, while Charlesbert wants to keep the game going for as long as possible. Assuming both players play optimally, find the shortest amount of time (in seconds) after which Merangelou is guaranteed to have won the game. If Merangelou cannot win the game (i.e. if Charlesbert can keep the game going forever), then print "INFINITE GAME" instead.



*******InputConstraints*******

<p>The first line of the input contains a positive integer C (0&lt;C&lt;100), the number of test cases to follow. Each case begins with a line containing a two positive integers M and K (1&lt;M&lt;100, 0&lt;K&lt;100), representing the number of circles on the game board and the number of seconds between times that Charlesbert moves the ChasePiece. Each of the following M lines is a string of 'Y' and 'N' characters, with M characters per line. If the jth character of the ith line is 'Y', then circles i and j are connected, otherwise circles i and j are not connected. The jth character of line i will always be the same as the ith character of the jth line, and the kth character of the kth line will always be 'N'.  In other words, these M lines form an adjacency matrix for the circles. The ChasePiece always starts on the first circle.


*******OutputConstraints*******

<p>For each case, if Merangelou can win then print the shortest amount of time required for her to win. Otherwise, print "INFINITE GAME". The output for each case should appear on its own line.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
5 1
NNNNY
NNNNY
NNNNY
NNNNY
YYYYN
4 2
NYNN
YNYN
NYNY
NNYN
4 1
NYNY
YNYN
NYNY
YNYN


<b>Output:</b>
2
4
INFINITE GAME

</pre>



______________________________________________________
STRLCP||||||true||||||


<p>The LCP (Longest Common Prefix) of two strings A[1..la] and B[1..lb] is defined as follows:
<br><br>
LCP(A[1..la],B[1..lb]) = max{L | L<=la && L<=lb && A[1..L] == B[1..L]}
<br><br>
Given an original string and several operations, you should write a program to process all the operations.


*******InputConstraints*******

<p>The first line will be number of test cases T.<br>
The first line of each test case is a string S with length L (1 <= L <= 100000).<br>
The second line contains an integer Q(1 <= Q <= 150000), representing the number of operations.<br><br>
Each of the following Q lines represents an operation:<br>
Q i j: print LCP(S[i..L], S[j..L])<br>
R i char: replace the i-th character of S with char<br>
I i char: insert character char after the i-th character of S<br>


*******OutputConstraints*******

<p>For each "Q i j" operation, print the answer.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
madamimadam
7
Q 1 7
Q 4 8
Q 10 11
R 3 a
Q 1 7
I 10 a
Q 2 11

<b>Output:</b>
5
1
0
2
1
</pre>



______________________________________________________
PALNUM||||||true||||||


<p>A postive integer A is called a "palindrome number" if the reverse of the decimal representaion is the same as the original one. Ex. 13231 is a palindrome number, but 13333 is not.
<br><br>
Given a number A(1 <= A <= 1e18), find the number of pairs (a,b) such that a,b are both palindrome numbers, and the sum of a and b is A.
<br><br>
If A is 391, there are 6 ways:
8 + 383 = 383 + 8 = 391
88 + 303 = 303 + 88 = 391
99 + 292 = 292 + 99 = 391


*******InputConstraints*******

<p>The first Line contains the number of test cases T <= 10.
Each test case contains a number A.


*******OutputConstraints*******

<p>Output the number of ways.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
391

<b>Output:</b>
6
</pre>



______________________________________________________
STABARDS||||||true||||||


<p>In a galaxy far far away, there exists a silicon based form of life, who call themselves stabards. Unlike humans, the stabards are multi-gendered. Therefore, when two stabards form a partnership (known as mating in earth parlance), one stabard would be the donor of genetic material and the other would be the combinator of the genetic material. Of course, the combinator had the tougher task, to combine the genetic material and create a new stabard.
<br><br>
Early on, the wise stabards realized that due to the increased number of genders, every stabard was likely to waste his time trying to find a suitable partner. After that, due to the tremendous opportunity, every stabard would waste some more time trying to cheat on his partner by forming more partnerships (especially the donors since they had nothing much to do). Therefore, the wise ones made the following rules about partnerships:
<ol>
<li> Each stabard can form at most two partnerships.</li>
<li>In order to maintain a sense of balance, a stabard cannot play the same role (donor/combinator) in both partnerships.</li>
<li>The partnerships shall be formed such that the total number of them is maximized.</li>
</ol>

<p>To ensure all rules are being followed, the wise ones send the stabard data every year to earth and wish to know the maximum number of partnerships that can be formed.


*******InputConstraints*******

<p>For each test case, two integers M (the number of stabard genders) and N (the total number of stabards) are given on the first line. M lines follow, each consisting of M characters. The j-th character on the i-th line denotes what would happen if a stabard of gender i formed a partnership with a stabard of gender j. It will be either
<br><br>
'X' &#8211; such a partnership is forbidden.
<br><br>
'D' &#8211; stabard of gender i would be the donor.
<br><br>
'C' &#8211; stabard of gender i would be the combinator.
<br><br>
After the M lines, N space separated integers are given on a single line. The i-th integer gives the gender of the i-th stabard.
<br><br>
The end of the test cases is given by a line with M and N both being 0. This test case should not be processed. The total number of test cases will be <= 100.


*******OutputConstraints*******

<p>For each test case, a single integer giving the total number of partnerships. Each integer must be on its own line.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 4
XD
CX
0 0 1 1
3 3
XDC
CXD
DCX
0 1 2
0 0

<b>Output:</b>
2
3
</pre>



______________________________________________________
STSTRING||||||true||||||


<p>Given two strings A and B, we define the operator &#265; on {A,B} for string C as C &#265; {A,B}.
<pre>
if length(A) < length(C) < length(B), then C satisfies the above operator.
else
      if length(A)=length(C), then C must be lexicographically greater than A.
      if length(B)=length(C), then C must be lexicographically smaller than B.
</pre> 


*******InputConstraints*******

<p>Given two strings A,B with length(A) < = length(B) <= 6.  A,B can contain any characters between A and J (capital letters).


*******OutputConstraints*******

<p>Print the number of strings satisfying the above criteria.
C must also satisfy criteria of A and B. Any two adjacent
characters in string C may neither be the same nor consecutve (i.e. the absoulte difference between the ASCII values of adjacent characters is greater than 1). 


*******IOTestCases*******


<pre>
<b>Input:</b>
A J
AA BCD
ABC DEFG

<b>Output:</b>
8
129
1770

</pre>



______________________________________________________
GORELIAN||||||true||||||


<p>The Gorelians are a warlike race that travel the universe conquering new
   worlds as a form of recreation. Given their violent, fun-loving nature,
   keeping their leaders alive is of serious concern. Part of the Gorelian
   security plan involves changing the traffic patterns of their cities on a
   daily basis, and routing all Gorelian Government Officials to the Government
   Building by the fastest possible route.</p>

   <p>Fortunately for the Gorelian Minister of Traffic (that would be you), all
   Gorelian cities are laid out as a rectangular grid of blocks, where each
   block is a square measuring 2520 rels per side (a rel is the Gorelian
   Official Unit of Distance). The speed limit between two adjacent
   intersections is always constant, and may range from 1 to 9 rels per blip (a
   blip, of course, being the Gorelian Official Unit of Time). Since Gorelians
   have outlawed decimal numbers as unholy (hey, if you're the dominant force
   in the known universe, you can outlaw whatever you want), speed limits are
   always integer values. This explains why Gorelian blocks are precisely 2520
   rels in length: 2520 is the least common multiple of the integers 1 through
   9. Thus, the time required to travel between two adjacent intersections is
   always an integer number of blips.</p>

   <p>In all Gorelian cities, Government Housing is always at the northwest
   corner of the city, while the Government Building is always at the southeast
   corner. Streets between intersections might be one-way or two-way, or
   possibly even closed for repair (all this tinkering with traffic patterns
   causes a lot of accidents). Your job, given the details of speed limits,
   street directions, and street closures for a Gorelian city, is to determine
   the fastest route from Government Housing to the Government Building. (It is
   possible, due to street directions and closures, that no route exists, in
   which case a Gorelian Official Temporary Holiday is declared, and the
   Gorelian Officials take the day off.)</p>

   <div align="center">
      <img src="http://www.spoj.plp3850.png" alt="Gorelian city">
   </div>

   <p>The picture above shows a Gorelian City marked with speed limits, one way
   streets, and one closed street. It is assumed that streets are always
   traveled at the exact posted speed limit, and that turning a corner takes
   zero time. Under these conditions, you should be able to determine that the
   fastest route from Government Housing to the Government Building in this
   city is 1715 blips. And if the next day, the only change is that the closed
   road is opened to two way traffic at 9 rels per blip, the fastest route
   becomes 1295 blips. On the other hand, suppose the three one-way streets are
   switched from southbound to northbound (with the closed road remaining
   closed). In that case, no route would be possible and the day would be
   declared a holiday.</p>


*******InputConstraints*******

<p>The input consists of a set of cities for which you must
   find a fastest route if one exists. The first line of an input case contains
   two integers, which are the vertical and horizontal number of city blocks,
   respectively. The smallest city is a single block, or 1 by 1, and the
   largest city is 20 by 20 blocks. The remainder of the input specifies speed
   limits and traffic directions for streets between intersections, one row of
   street segments at a time. The first line of the input (after the dimensions
   line) contains the data for the northernmost east-west street segments. The
   next line contains the data for the northernmost row of north-south street
   segments. Then the next row of east-west streets, then north-south streets,
   and so on, until the southernmost row of east-west streets. Speed limits and
   directions of travel are specified in order from west to east, and each
   consists of an integer from 0 to 9 indicating speed limit, and a symbol
   indicating which direction traffic may flow. A zero speed limit means the
   road is closed. All digits and symbols are delimited by a single space. For
   east-west streets, the symbol will be an asterisk '*' which indicates travel
   is allowed in both directions, a less-than symbol '&lt;' which indicates
   travel is allowed only in an east-to-west direction, or a greater-than
   symbol '>' which indicates travel is allowed only in a west-to-east
   direction. For north-south streets, an asterisk again indicates travel is
   allowed in either direction, a lowercase "vee" character 'v' indicates
   travel is allowed only in a north-to-south directions, and a caret symbol
   '^' indicates travel is allowed only in a south-to-north direction. A zero
   speed, indicating a closed road, is always followed by an asterisk. Input
   cities continue in this manner until a value of zero is specified for both
   the vertical and horizontal dimensions.</p>


*******OutputConstraints*******

<p>For each input scenario, output a line specifying the
   integer number of blips of the shortest route, a space, and then the word
   "blips". For scenarios which have no route, output a line with the word
   "Holiday".</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
2 2
9 * 9 *
6 v 0 * 8 v
3 * 7 *
3 * 6 v 3 *
4 * 8 *
2 2
9 * 9 *
6 v 9 * 8 v
3 * 7 *
3 * 6 v 3 *
4 * 8 *
2 2
9 * 9 *
6 ^ 0 * 8 ^
3 * 7 *
3 * 6 ^ 3 *
4 * 8 *
0 0

<b>Output:</b>
1715 blips
1295 blips
Holiday
</pre>



______________________________________________________
PERMSG||||||true||||||


<p>Alice, a permutation aficionado, has thought up a permutation of <b>N</b> (1 <= <b>N</b> <= 100000) elements, <b>P</b>.  So impressed with herself she has told her friend Bob about <b>P</b>.

<p>Normally Alice would call it a day after creating such an impressive permutation but today she decided that she wanted to raise <b>P</b> to the power k as well!  Unfortunately, after working on the problem for a while she gave up because it was taking too long.  Not wanting her efforts to go to waste she once again tells Bob about all the elements she has determined so far.  Unfortunately, she neglected to tell Bob the value k.

<p>Bob, very interested in Alice's work, needs your help to try and determine any additional elements of <b>P</b>^k.  Bob is suspicious of Alice's work so he also asks you to check it for errors.


*******InputConstraints*******

<p>The first line of input contains <b>N</b> (1 <= <b>N</b> <= 100000), the number of elements in the permutation.  The next line contains a permutation of the integers 0 through <b>N</b>-1 each separated by a space.  The following line will contain the result of applying the permutation k times with the exception that elements that are not known will be -1 instead.


*******OutputConstraints*******

Print <b>P</b>^k as a space separated list on its own line with as many elements as possible determined.  If an element can't be determined leave it as -1.  If there is no k such that <b>P</b>^k has the values given in the input print "Inconsistent" (quotes for clarity) on its own line instead.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1 2 3 0
3 -1 -1 -1

<b>Output:</b>
3 0 1 2
</pre>



______________________________________________________
DPEQN||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/DPEQN/en/">English</a></td> 
<td width="50%"><a href="/problems/DPEQN/vn/">Vietnamese</a></td> 
</tr></table>


<p>
Given a congruence equation:
</p>
<pre>
a<sub>1</sub>x<sub>1</sub> + ... a<sub>2</sub>x<sub>2</sub> + ... + a<sub>n</sub>x<sub>n</sub> = b (mod m)
</pre>
<p>In which, a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, b and m are positive integer constants; x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub>
are unknowns.</p>
<p>Find a solution for this equation, or show that the equation has no solution.</p>


*******InputConstraints*******

<p>First line: number of test cases. Each test case has the following form:</p>
<ul>
<li>Line 1: n (1 &#8804; n &#8804; 100)</li>
<li>Line 2: n integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 &#8804; a<sub>i</sub> &#8804; 10<sup>8</sup>)</li>
<li>Line 3: b, m (1 &#8804; b, m &#8804; 10<sup>8</sup>)</li>
</ul>
<p>Each test case is separated by a blank line.</p>


*******OutputConstraints*******

<p>For each test case, if the equation has no solution, print "NO". Otherwise, print n integers x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub> (0 &#8804; x<sub>i</sub> < m) that is one solution to the equation.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
2

2
4 6
6 10

2
4 6
3 8

<b>Output</b>
1 2
NO
</pre>





______________________________________________________
LINES||||||true||||||


<p>Farmer John has challenged Bessie to the following game: FJ has a board with dots marked at N (2 &#8804; N &#8804; 200) distinct lattice points. Dot i has the integer coordinates X<sub>i</sub> and Y<sub>i</sub> (-1,000 &#8804; X<sub>i</sub>, Y<sub>i</sub> &#8804; 1,000).</p>

<p>Bessie can score a point in the game by picking two of the dots and drawing a straight line between them; however, she is not allowed to draw a line if she has already drawn another line parallel to it. Bessie would like to know her chances of winning, so she has asked you to help find the maximum score she can obtain.</p>


*******InputConstraints*******

<p>There will be multiple test cases. For each case, the first line contains the integer N, and each of the next N lines gives a pair of integers, X<sub>i</sub> and Y<sub>i</sub>. The file ends with the case N = 0, which should not be processed.</p>


*******OutputConstraints*******

<p>For each test case, print a single integer representing the maximum number of lines Bessie can draw, no two of which are parallel.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
-1 1
-2 0
0 0
1 1
0

<b>Output:</b>
4
</pre>

<p>Bessie can draw lines of the following four slopes: -1, 0, &#8531;, and 1.</p>


______________________________________________________
DOORSPEN||||||true||||||


<p>The organizers of the Annual Computing Meeting have invited a number of vendors to set up booths in a large exhibition hall during the meeting to showcase their latest products. As the vendors set up their booths at their assigned locations, they discovered that the organizers did not take into account an important fact &#8212; each vendor supports either the Doors operating system or the Penguin operating system, but not both. A vendor supporting one operating system does not want a booth next to one supporting another operating system.

Unfortunately the booths have already been assigned and even set up. There is no time to reassign the booths or have them moved. To make matter worse, these vendors in fact do not even want to be in the same room with vendors supporting a different operating system.

Luckily, the organizers found some portable partition screens to build a wall that can separate the two groups of vendors. They have enough material to build a wall of any length. The screens can only be used to build a straight wall. The organizers need your help to determine if it is possible to separate the two groups of vendors by a single straight wall built from the portable screens. The wall built must not touch any vendor booth (but it may be arbitrarily close to touching a booth). This will hopefully prevent one of the vendors from knocking the wall over accidentally. 


*******InputConstraints*******

<p>The input consists of a number of cases. Each case starts with 2 integers on a line separated by a single space: D and P, the number of vendors supporting the Doors and Penguins operating system, respectively (1 &#8804; D, P &#8804; 500). The next D lines specify the locations of the vendors supporting Doors. This is followed by P lines specifying the locations of the vendors supporting Penguins. The location of each vendor is specified by four positive integers: x1, y1, x2, y2. (x1, y1) specifies the coordinates of the southwest corner of the booth while (x2, y2) specifies the coordinates of the northeast corner. The coordinates satisfy x1 < x2 and y1 < y2. All booths are rectangular and have sides parallel to one of the compass directions. The coordinates of the southwest corner of the exhibition hall is (0, 0) and the coordinates of the northeast corner is (15000, 15000). You may assume that all vendor booths are completely inside the exhibition hall and do not touch the walls of the hall. The booths do not overlap or touch each other.

The end of input is indicated by D = P = 0. 


*******OutputConstraints*******

<p>For each case, print the case number (starting from 1), followed by a colon and a space. Next, print the sentence:

It is possible to separate the two groups of vendors.

if it is possible to do so. Otherwise, print the sentence:

It is not possible to separate the two groups of vendors.

Print a blank line between consecutive cases. 


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
10 40 20 50
50 80 60 90
30 60 40 70
30 30 40 40
50 50 60 60
10 10 20 20
2 1
10 10 20 20
40 10 50 20
25 12 35 40
0 0


<b>Output:</b>
Case 1: It is possible to separate the two groups of vendors.

Case 2: It is not possible to separate the two groups of vendors.

</pre>



______________________________________________________
DIVREL||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/DIVREL/en/">English</a></td> 
<td width="50%"><a href="/problems/DIVREL/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given n positive integers. Your task is to select a maximum number of integers so that there are no two numbers a, b in which a is divisible by b.</p> 

*******InputConstraints*******

<ul>
<li>Line 1: n (1 &#8804; n &#8804; 200).</li>
<li>Line 2: n positive integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 &#8804; a<sub>i</sub> &#8804; 10<sup>9</sup>).</li>
</ul>


*******OutputConstraints*******

<ul>
<li>Line 1: k, the maximum number of integers that can be selected.</li>
<li>Line 2: k selected integers.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
8
1 2 3 5 6 8 7 9

<b>Output</b>
5
5 6 8 7 9

<b>Input</b>
4
2 3 2 3

<b>Output</b>
2
2 3
</pre>






______________________________________________________
TREECST||||||true||||||


<table class="problems" width="100%"><tr  

class="navigation">
<td width="50%"><a href="/problems/

TREECST/en/">English</a></td> 
<td width="50%"><a href="/problems/

TREECST/vn/">Vietnamese</a></td> 
</tr></table>


<p>Moles are tidy and hard-working animals. Our mole likes to 

keep its underground residence in utmost
order, so that everyone living there knows where to find 

things.</p>
<p>To achieve this, the mole connected rooms with tunnels so 

that there is a single unique way to get from
one room to any other room. The distance between two rooms 

is the number of halls passed on the
way from one to the other.</p>
<p>Despite all the effort, some of the mole's guests are 

complaining that it takes too long to walk between
certain pairs of rooms.</p>
<p>The mole decided to reconstruct her residence, closing 

one tunnel and opening a new one, so that the
distance between the farthest two rooms is the smallest 

possible, but so that it is still possible to
reach every room from every other room.</p>
<p>Write a program which determines the distance between 

the farthest two rooms after reconstruction,
which tunnel to close and which to open.</p>


*******InputConstraints*******

<p>The first line contains an integer N (1 &#8804; N &#8804; 300 000), the 

number of rooms. The rooms are numbered
1 to N.</p>
<p>Each of the next N&#8722;1 lines contains two integers, the 

numbers of rooms a tunnel connects.</p>


*******OutputConstraints*******

<p>Output on separate lines, in order:</p>
<ul>
<li>The distance between the two farthest rooms after 

reconstruction.</li>
<li>A pair of integers representing a previously existing tunnel, 

which should be closed.</li>
<li>A pair of integers, the rooms between which a new tunnel 

should be opened.</li>
</ul>
<p>Note: The solution will not necessarily be unique. Output 

any reconstruction plan which achieves the
smallest distance between the farthest two rooms.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
4
1 2
2 3
3 4

<b>Output</b>
2
3 4
4 2

<b>Input</b>
7
1 3
2 3
2 7
4 3
7 5
3 6

<b>Output</b>
3
2 3
7 3
</h3>
</pre>




______________________________________________________
PALIM||||||true||||||


<p>A string is called a palindrome if it's the same when read from left to right and from right to left. For example, <tt>"abdba"</tt> is a palindrome, but <tt>"abbaa"</tt> is not.
<p>Given a string, print the length of the longest consecutive sequence of characters occurrences at least once in this string, which is a palindrome.


*******InputConstraints*******

<ul>
<li>Line 1: a string consists of at most 100000 characters. The ASCII code of all characters are between 32 and 127, inclusive. </li>
<li>Line 2: a magical key(for security purpose).</li>
</ul>


*******OutputConstraints*******

<ul>
<li>Line 1: the length of the longest palindrome.</li>
<li>Line 2: the magical key.</li>
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
abaabbabaaba
MAGICAL KEY

<b>Output:</b>
6
MAGICAL KEY
</pre>


______________________________________________________
TYPESET||||||true||||||


<p>Modern fonts are generally of two varieties: outline fonts, whose glyphs
   (the individual character shapes) are specified mathematically as a set of
   curves, and bitmap fonts, whose glyphs are specified as patterns of pixels.
   Fonts may also include embedded information such as kerning pairs (adjusting
   the spacing between certain pairs of glyphs, such as "AW", so that they
   appear spaced correctly), tracking hints (for managing inter-glyph spacing),
   antialiasing hints (smoothing of pixellated edges), and much more. To be
   sure, modern fonts are more than a simple collection of shapes, and
   displaying them properly is a common programming challenge.</p>

   <p>For this problem we will concern ourselves with bitmapped fonts and a
   simple form of typesetting called glyph packing. Essentially, the idea is to
   pack the glyphs as tightly as possible while maintaining at least one
   horizontal pixel of separation between glyphs. For example, consider the
   glyphs shown to the left below for the Roman characters "P" and "J". The
   figure to the right shows them after glyph packing. Note that they are as
   close as possible without touching horizontally.</p>

   <p><img alt="PJ" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/PJ.png"></p>Here's another example. In this case, notice that
   the final glyph cannot be packed at all.

   <p><img alt="Fiji" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/Fiji.png"></p>After packing, pixels from distinct glyphs may be
   adjacent diagonally or vertically, but not horizontally. The following
   example shows that pixels may be adjacent diagonally. The "Love" test case
   in the example input section shows that they may be adjacent vertically.

   <p><img alt="two slashes" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/Slashes.png"></p>Glyph packing has the nice property that it's
   easy to build "fancy" glyphs into the font so that glyph packing creates
   special effects with no extra work. Look at the "Toy" example below. The
   same simple packing process has been applied to these glyphs as to the ones
   above, but the result is more dramatic:

   <p><img alt="Toy" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/Toy.png"></p>Glyph packing has a few caveats, however, one of
   which we must concern ourselves with for this problem. Consider the example
   on the left below where a glyph for a hyphen is followed by a glyph for an
   underscore. Based on our one horizontal pixel of separation rule, how would
   this pack? Clearly something more is needed, and that something more is
   hinting within the glyphs themselves. Recall that in actual practice, fonts
   contain kerning pairs, tracking hints, etc. For our purposes, our hinting
   will be limited to "invisible" pixels that count as a pixel for the purpose
   of packing, but not for display. The center image below represents invisible
   pixels as open dots instead of closed dots. Now the two glyphs can be
   properly packed, resulting in the output shown on the right.

   <p><img alt="hidden pixels" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/HU.png"></p>

   <p>Now for the formal definition of a proper packing: (1) Glyphs are packed
   as close as possible without allowing any pixels from different glyphs to be
   immediately horizontally adjacent; (2) Given two glyphs, they may not be
   packed in such a way that any pixel of the leftmost glyph at a given height
   ends up positioned to the right of any pixel at the same height in the
   rightmost glyph.</p>

   <p>Condition (2) above is easily understood by visualizing two glyphs
   sitting side by side, separated by a small space. If you "squeeze" them
   together, condition (2) says that their pixels are not allowed to "pass
   through" one another. Consider the example to the left below. The center
   image is not the proper packing, because it violates condition (2) of the
   formal definition. The image on the right is the proper packing of these
   glyphs.</p>

   <p><img alt="hooks" src="http://mcpc.cigas.net/archives/2007/mcpc2007/typesetting/Hooks.png"></p>


*******InputConstraints*******

<p>The input for this problem is sets of glyphs to be packed.
   In a given test case, all glyphs are the same height, and an integer, N, on
   the first line of the test case specifies this height. The next N lines
   contain the glyphs to be packed. Empty pixels in a glyph are represented by
   a dot '.' character. Non-empty pixels are represented by a hash mark '#' for
   visible pixels, and a zero '0' for invisible pixels. Glyphs are separated by
   a single column of space characters. The input will always consist of more
   than one glyph, at least one of which will always contain at least one
   visible pixel. A glyph will always have at least one non-empty pixel in its
   leftmost and rightmost column, and every glyph will have at least one
   non-empty pixel at the same height as at least one other glyph in the input.
   The minimum dimension of a glyph is 1 x 1, the maximum dimension is 20 x 20,
   and the maximum number of glyphs that will appear in any test case is 20.
   Test cases continue until a value of zero is specified for N.</p>



*******OutputConstraints*******

<p>For each test case, first output the number of that test
   case (starting with 1) on a line by itself. Then output the proper packing
   of the input glyphs, using the dot '.' character for empty pixels and for
   invisible pixels, and the hash mark '#' character for visible pixels. Omit
   leading and trailing empty columns (columns with no visible pixels) so that
   both the leftmost and rightmost output columns contain at least one visible
   pixel.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
8
###. ...#
#..# ...#
#..# ...#
###. ...#
#... ...#
#... ...#
#... #..#
#... ####
8
############# .... .............
..#.......... .... .............
..#.......... .##. .........#..#
..#.......... #..# .........#..#
..#.......... #..# .........#..#
..#.......... .##. ..........###
............. .... ............#
............. .... ############.
8
############# .............
..#.......... .............
..#.......... .........#..#
..#.......... .........#..#
..#.......... .........#..#
..#.......... ..........###
............. ............#
............. ############.
5
0..0 0..0
0..0 0..0
#### 0..0
0..0 0..0
0..0 ####
5
#.... .###.
#.... #...#
#...# #...#
#...# ....#
.###. ....#
3
### 0.0 ###
#.# 0.0 #.#
### 0.0 ###
3
0.0 ### 0.0
0.0 #.# 0.0
0.0 ### 0.0
8
#.... .... ..... ....
#.... .... ..... ....
#.... .##. #...# .##.
#.... #..# .#.#. #..#
#.... #..# .#.#. #..#
#.... #..# .#.#. ###.
#.... .##. ..#.. #...
##### .... ..#.. .###
0

<b>Output:</b>
1
###..#
#..#.#
#..#.#
###..#
#....#
#....#
#.#..#
#.####
2
#############
..#..........
..#..##..#..#
..#.#..#.#..#
..#.#..#.#..#
..#..##...###
............#
############.
3
.....#############
.......#..........
.......#.#..#.....
.......#.#..#.....
.......#.#..#.....
.......#..###.....
............#.....
############......
4
.........
.........
####.....
.........
.....####
5
#......###.
#.....#...#
#...#.#...#
#...#.....#
.###......#
6
###.....###
#.#.....#.#
###.....###
7
###
#.#
###
8
#..............
#..............
#..##.#...#.##.
#.#..#.#.#.#..#
#.#..#.#.#.#..#
#.#..#.#.#.###.
#..##...#..#...
#####...#...###

</pre>



______________________________________________________
SLINK||||||true||||||


<p>Slitherlink is a puzzle published by Nikoli, the Japanese company that
   popularized Sudoku. Slitherlink puzzles are gaining momentum, and books of
   Slitherlink puzzles have started showing up around the world. The puzzles
   are simple to understand, but can be challenging to solve. The puzzle is
   simply a rectangular grid of dots that forms a collection of cells, every
   cell being either blank or containing an integer from zero to three. The
   challenge is to connect the dots with line segments to form a cycle (a
   connected path such that every vertex has precisely two incident edges), in
   such a way that every cell with a value has exactly the number of incident
   edges as the digit it contains. Cells with no value may have any number of
   incident edges. A valid Slitherlink puzzle always contains sufficient
   non-empty cells to guarantee a unique solution. Below is an example from the
   Nikoli web site of a Slitherlink puzzle and its solution.</p>

   <p><img alt="slitherlink example" src="http://mcpc.cigas.net/archives/2007/mcpc2007/slink/slitherlink.png"></p>

   <p>It was shown by Takayuki Yato at the University of Tokyo that the general
   Slitherlink problem is NP-complete. (If you are not familiar with this
   concept, informally it means there is no "efficient" algorithm to solve the
   problem.) With a slight modification and some simple heuristics, however,
   programmatic solutions are possible. Our new puzzle, which we will term
   Slink, differs from Slitherlink only in that the puzzle may not have empty
   cells. That is, every cell must specify the number of incident edges. Below
   is the Slitherlink puzzle above converted to Slink (the added numbers are
   shown in gray). Note that the solution does not change, only the information
   given in the puzzle itself.</p>

   <p><img alt="slink example" src="http://mcpc.cigas.net/archives/2007/mcpc2007/slink/slink.png"></p>

   <p>The heuristics for solving Slink arise from the nature of the puzzle
   itself. For example, consider a cell containing a zero. There must be no
   incident edges, therefore all edges incident to all zeros can be immediately
   removed from consideration as part of the solution path. Consider a three
   next to a zero. Because all the edges incident to the zero will be
   eliminated, the common edge shared with the three is also eliminated. But
   that leaves only three edges around the three, and therefore those three
   edges must be part of the solution path. The following table specifies the
   heuristic rules that must be properly applied to solve a Slink puzzle. The
   "x" characters between vertices mark edges that are not part of the solution
   path, while line segments between vertices mark edges that form part of the
   solution. Grey elements are the pattern the rule is based on, black elements
   indicate the additional edges that should be included or excluded if the
   rule is matched. Note that the pictured examples are for demonstration
   purposes only and do <i>not</i> illustrate every possible arrangement of the
   stated rule!</p>

<a href="http://mcpc.cigas.net/archives/2007/mcpc2007/slink/slink.html"> Look here for more pictures </a>

   <table border="1" cellpadding="3">
      <tr>
         <th>Examples</th>

         <th>Rule Specification</th>

         <td bgcolor="8 8
1 0 1 1 2 2 1 3
3 3 3 3 2 3 3 2
2 2 0 1 1 2 2 0
2 3 1 1 0 1 2 2
2 1 2 3 1 1 0 2
1 2 2 2 2 3 2 1
3 2 1 3 1 1 3 2
1 0 0 2 3 2 3 2
6 6
0 0 1 1 0 0
0 2 2 2 2 0
1 2 0 0 2 1
1 2 0 0 2 1
0 2 2 2 2 0
0 0 1 1 0 0
2 2
2 2
2 2
3 5
3 3 3 2 3
1 2 1 3 2
3 3 2 2 2
0 0#CCCCCC"> </td>

         <th>Examples</th>

         <th>Rule Specification</th>
      </tr>

      <tr>

         <td><img alt="case 1" src="r01.png"></td>

         <td>The easiest and most obvious of all the rules. Cells containing a
         zero have no incident edges, so all the edges around a zero should be
         removed from consideration as part of the solution path.</td>8 8
1 0 1 1 2 2 1 3
3 3 3 3 2 3 3 2
2 2 0 1 1 2 2 0
2 3 1 1 0 1 2 2
2 1 2 3 1 1 0 2
1 2 2 2 2 3 2 1
3 2 1 3 1 1 3 2
1 0 0 2 3 2 3 2
6 6
0 0 1 1 0 0
0 2 2 2 2 0
1 2 0 0 2 1
1 2 0 0 2 1
0 2 2 2 2 0
0 0 1 1 0 0
2 2
2 2
2 2
3 5
3 3 3 2 3
1 2 1 3 2
3 3 2 2 2
0 0

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 2" src="r02-1.png"><br>
         <br>
         <img alt="case 3" src="r02-3.png"></td>

         <td>If a cell contains the value <i>n</i> and only <i>n</i> incident
         edges remain (i.e. have not been eliminated), then the <i>n</i>
         remaining edges must be part of the solution path. Two examples of
         this occurring are shown here.</td>
      </tr>

      <tr>
         <td><img alt="case 4" src="r03-2.png"><br>
         <br>
         <img alt="case 5" src="r03-3.png"></td>

         <td>If a cell contains the value <i>n</i> and <i>n</i> incident edges
         have already been included in the path, the remaining edges can be
         eliminated. Two examples of this occurring are shown here.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 6" src="r04.png"></td>
8 8
1 0 1 1 2 2 1 3
3 3 3 3 2 3 3 2
2 2 0 1 1 2 2 0
2 3 1 1 0 1 2 2
2 1 2 3 1 1 0 2
1 2 2 2 2 3 2 1
3 2 1 3 1 1 3 2
1 0 0 2 3 2 3 2
6 6
0 0 1 1 0 0
0 2 2 2 2 0
1 2 0 0 2 1
1 2 0 0 2 1
0 2 2 2 2 0
0 0 1 1 0 0
2 2
2 2
2 2
3 5
3 3 3 2 3
1 2 1 3 2
3 3 2 2 2
0 0
         <td>If two 3's are adjacent to one another, the common edge between
         the cells as well as the outer edges of both cells are part of the
         solution path. One example of this arrangement occurring is shown
         here.</td>
      </tr>

      <tr>
         <td><img alt="case 7" src="r05.png"></td>

         <td>If two 3's occur diagonally adjacent, the opposing corners as
         shown here must be part of the solution path. One example of such an
         arrangement is shown here.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 8" src="r06-a.png"></td>

         <td>If an edge enters a vertex for which only a single exit remains,
         that exit must be part of the solution path. One such example is shown
         here.</td>
      </tr>

      <tr>
         <td><img alt="case 9" src="r07-b.png"></td>

         <td>If a vertex has two incident edges, the other edges can be
         eliminated from consideration as part of the solution path. One such
         example is shown here.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 10" src="r08.png"></td>

         <td>If any vertex has three incident edges excluded, the fourth
         incident edge can be excluded as well. One possible arrangement of
         this occurring is shown here.</td>
      </tr>

      <tr>
         <td><img alt="case 11" src="r09.png"></td>

         <td>A 3 for which two of the exits are blocked as shown, such as in a
         corner of the puzzle, must include the two edges incident to the
         blocked vertex.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 12" src="r10.png"></td>

         <td>If the exits at one corner of a 2 are blocked, and one exit at an
         adjacent vertex around the 2 is also blocked, then the unblocked exit
         at that adjacent vertex must be part of the solution path. One example
         of this arrangement is shown here.</td>
      </tr>

      <tr>
         <td><img alt="case 13" src="r11.png"></td>

         <td>A 1 for which the exit paths at one of its incident vertices are
         both blocked as shown, such as might occur in the corner of the
         puzzle, must also eliminate the other two edges incident to that
         vertex as shown.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 14" src="r12.png"></td>

         <td>If the solution path enters the corner of a 3, and the exit that
         goes away from the 3 at that same corner is blocked, then the two
         edges around the three incident to the opposite corner must be part of
         the solution path.</td>
      </tr>

      <tr>
         <td><img alt="case 15" src="r15.png"></td>

         <td>If a 3 and 1 are diagonally adjacent, and the corner of the 3
         furthest from the 1 has the exit segments blocked as shown, then the
         edges incident to the far corner of the 1 becomes blocked. The
         opposite is also true; if the far corner of the 1 had been blocked,
         then the exit segments at the far corner of the 3 would become blocked
         in the same manner.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td><img alt="case 16" src="r16.png"></td>

         <td>If the solution path enters the corner of 2 and the path leading
         away from the 2 at the same corner is blocked, then if one of the
         paths leading away from the 2 at the diagonally opposite corner is
         also blocked, the other edge leading away from the 2 at that same
         corner must be part of the solution path. One example of this
         arrangement occurring is shown here.</td>
      </tr>

      <tr>
         <td><img alt="case 17" src="r14.png"></td>

         <td>If the solution path enters the corner of a 1, and the exit that
         goes away from the 1 at that same corner is blocked, then the two
         edges around the three incident to the opposite corner must be
         eliminated from the solution path.</td>

         <td bgcolor="#CCCCCC"> </td>

         <td> </td>

         <td> </td>
      </tr>
   </table>


*******InputConstraints*******

<p>The input for this problem is a set of Slink puzzles to be
   solved. The first line of a Slink problem's input contains two integers,
   <i>r</i> and <i>c</i>, separated by a space, the number of rows and the
   number of columns in the puzzle. The next <i>r</i> rows of the input contain
   <i>c</i> integers, space delimited, valued from 0 to 3, which specify the
   content of the puzzle. The minimum dimension of a puzzle is 2 by 2 cells,
   and the maximum dimension is 20 by 20 cells. It is guaranteed that a unique
   solution to every input puzzle exists and can be determined with the above
   rules if a rule is always applied when it can be applied. A line with values
   of zero for <i>r</i> and <i>c</i> marks the end of the input.</p>


*******OutputConstraints*******

<p>The output for this problem is a graphical representation
   of the Slink puzzle solution. The first data set is 1, the second data set
   is 2, etc. On a line by itself display the data set number, followed by the
   solution in exactly the format demonstrated below. Vertical edges are output
   as the vertical bar '|' character, horizontal edges are output as dash '-'
   characters, vertices where the path changes direction are output as plus
   signs '+', and cell numbers are always displayed with a blank to the left
   and to the right. Further, surround the entire output with a border made up
   of hash marks '#' such that the number in the upper left cell of the puzzle
   always occurs four positions to the right of the border and three position
   below the border, and the number in the lower right cell always occurs four
   positions to the left of the border and three positions above the
   border.<br></p>




*******IOTestCases*******


<pre>
<b>Input:</b>
8 8
1 0 1 1 2 2 1 3
3 3 3 3 2 3 3 2
2 2 0 1 1 2 2 0
2 3 1 1 0 1 2 2
2 1 2 3 1 1 0 2
1 2 2 2 2 3 2 1
3 2 1 3 1 1 3 2
1 0 0 2 3 2 3 2
6 6
0 0 1 1 0 0
0 2 2 2 2 0
1 2 0 0 2 1
1 2 0 0 2 1
0 2 2 2 2 0
0 0 1 1 0 0
2 2
2 2
2 2
3 5
3 3 3 2 3
1 2 1 3 2
3 3 2 2 2
0 0

<b>Output:</b>
1
#####################################
#                                   #
#                 +---------------+ #
#   1   0   1   1 | 2   2   1   3 | #
# +---+   +---+   |   +---+   +---+ #
# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #
# |   +---+   +---+   |   +---+     #
# | 2   2   0   1   1 | 2   2   0   #
# +-------+           +-------+     #
#   2   3 | 1   1   0   1   2 | 2   #
# +-------+   +---+           +---+ #
# | 2   1   2 | 3 | 1   1   0   2 | #
# |       +---+   |   +---+       | #
# | 1   2 | 2   2 | 2 | 3 | 2   1 | #
# |   +---+   +---+   |   +---+   | #
# | 3 | 2   1 | 3   1 | 1   3 | 2 | #
# +---+       +---+   |   +---+   | #
#   1   0   0   2 | 3 | 2 | 3   2 | #
#                 +---+   +-------+ #
#                                   #
#####################################
2
#############################
#                           #
#                           #
#   0   0   1   1   0   0   #
#         +-------+         #
#   0   2 | 2   2 | 2   0   #
#     +---+       +---+     #
#   1 | 2   0   0   2 | 1   #
#     |               |     #
#   1 | 2   0   0   2 | 1   #
#     +---+       +---+     #
#   0   2 | 2   2 | 2   0   #
#         +-------+         #
#   0   0   1   1   0   0   #
#                           #
#                           #
#############################
3
#############
#           #
# +-------+ #
# | 2   2 | #
# |       | #
# | 2   2 | #
# +-------+ #
#           #
#############
4
#########################
#                       #
# +---+   +---+   +---+ #
# | 3 | 3 | 3 | 2 | 3 | #
# |   +---+   |   |   | #
# | 1   2   1 | 3 | 2 | #
# |   +---+   +---+   | #
# | 3 | 3 | 2   2   2 | #
# +---+   +-----------+ #
#                       #
#########################

</pre>



______________________________________________________
EDS||||||true||||||


<p>The Tyrell corporation uses a state-of-the-art electronic document system
   that controls all aspects of document creation, viewing, editing, and
   distribution. Document security is handled via <dfn>access control
   lists</dfn> (ACLs). An ACL defines a set of entities that have access to the
   document, and for each entity defines the set of rights that it has.
   Entities are denoted by uppercase letters; an entity might be a single
   individual or an entire division. Rights are denoted by lowercase letters;
   examples of rights are <i>a</i> for <i>append</i>, <i>d</i> for
   <i>delete</i>, <i>e</i> for <i>edit</i>, and <i>r</i> for <i>read</i>.</p>

   <p>The ACL for a document is stored along with that document, but there is
   also a separate ACL <dfn>log</dfn> stored on a separate log server. All
   documents start with an empty ACL, which grants no rights to anyone. Every
   time the ACL for a document is changed, a new entry is written to the log.
   An entry is of the form <i>ExR</i>, where <i>E</i> is a nonempty set of
   entities, <i>R</i> is a nonempty set of rights, and <i>x</i> is either "+",
   "&#8211;", or "=". Entry <i>E</i>+<i>R</i> says to grant all the rights
   in <i>R</i> to all the entities in <i>E</i>, entry
   <i>E</i>&#8211;<i>R</i> says to remove all the rights in <i>R</i> from
   all the entities in <i>E</i>, and entry <i>E</i>=<i>R</i> says that all the
   entities in <i>E</i> have exactly the rights in <i>R</i> and no others. An
   entry might be redundant in the sense that it grants an entity a right it
   already has and/or denies an entity a right that it doesn't have. A log is
   simply a list of entries separated by commas, ordered chronologically from
   oldest to most recent. Entries are cumulative, with newer entries taking
   precedence over older entries if there is a conflict.</p>

   <p>Periodically the Tyrell corporation will run a security check by using
   the logs to compute the current ACL for each document and then comparing it
   with the ACL actually stored with the document. A mismatch indicates a
   security breach. Your job is to write a program that, given an ACL log,
   computes the current ACL.</p>


*******InputConstraints*******

<p>The input consists of one or more ACL logs, each
   3&#8211;79 characters long and on a line by itself, followed by a line
   containing only "#" that signals the end of the input. Logs will be in the
   format defined above and will not contain any whitespace.</p>


*******OutputConstraints*******

<p>For each log, output a single line containing the log
   number (logs are numbered sequentially starting with one), then a colon,
   then the current ACL in the format shown below. Note that (1) spaces do not
   appear in the output; (2) entities are listed in alphabetical order; (3) the
   rights for an entity are listed in alphabetical order; (4) entities with no
   current rights are not listed (even if they appeared in a log entry), so
   it's possible that an ACL will be empty; and (5) if two or more consecutive
   entities have exactly the same rights, those rights are only output once,
   after the list of entities.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
MC-p,SC+c
YB=rde,B-dq,AYM+e
GQ+tju,GH-ju,AQ-z,Q=t,QG-t
JBL=fwa,H+wf,LD-fz,BJ-a,P=aw
#

<b>Output:</b>
1:CSc
2:AeBerMeYder
3:
4:BHJfwLPaw
</pre>



______________________________________________________
GUARD||||||true||||||


<p><p style="text-align: center;"><img style="width: 436px; height: 337px;"
   alt="Guard Placement" src="http://mcpc.cigas.net/archives/2007/mcpc2007/guard/guards.png"></p>

   <p>The Bluewater Security Company provides guards for clients with valuable
   possessions. Bluewater has found that clients are interested in having
   guards posted where they can see everything that is valuable merely by
   turning their heads, and also like guards to be posted particularly close to
   particularly valuable items. A sample site layout is shown above. Ignore the
   three black dots for now. Various locations are labeled and assigned values.
   For instance location A at coordinates (0,8) is the position of an item with
   value 4. Locations showing a value 0, like G, do not have a valuable item.
   The straight lines indicate corridors. For simplicity, corridors are modeled
   as line segments with 0 width. A guard at an intersection point of several
   corridors can see and therefore guard the items on each of the corridors. If
   Bluewater were contracted to supply 3 guards, they might choose to post them
   at the positions indicated with the small black dots. The guard not at an
   already labeled position is at (15.5, 6). To model the desire for guards to
   be closer to items of higher value, Bluewater calculates the <span style=
   "font-style: italic;">risk</span> to a valuable item to be the value of the
   item times the minimum distance to a guard that can <span style=
   "font-style: italic;">see</span> the item. Even if a guard is close to an
   item that is around a corner, that guard does <span style=
   "font-style: italic;">not</span> affect the risk to the item, since the
   guard cannot see around a corner. In the diagram shown, the risks to the
   items are A: 4x5=20, C: 4x2.5=10, D: 2x0=0, .... The largest risks are
   for H: 50x7.5=375 and I: 50x7.5=375, so the maximum risk to any one item is
   375. With this site layout, no arrangement of 3 guards would provide a lower
   maximum risk, so this arrangement of 3 guards minimizes the maximum risk.
   Bluewater would like to be able to tell any client who requests a particular
   number of guards for a particular site layout, what the minimized maximum
   risk will be.</p>



*******InputConstraints*******

<p>The input will consist of one to sixteen data
   sets, followed by a line containing only 0. On each line the data will
   consist of blank separated tokens.</p>

   <p>The first line of a dataset contains integers <span style=
   "font-style: italic;">p c g</span>, where <span style=
   "font-style: italic;">p</span> is the number of points specified,
   <span style="font-style: italic;">c</span> is the number of corridors, and
   <span style="font-style: italic;">g</span> is the number of guards to be
   placed. Constraints are 1<span style="font-style: italic;">&lt; p</span>

   &lt; 12; 0 &lt; <span style="font-style: italic;">c</span> &lt; 12; 0 &lt;
   <span style="font-style: italic;">g</span> &lt; 5.  </p>

   <p>Next in the dataset are a total of <span style=
   "font-style: italic;">p</span> groups of four tokens, each consisting of a
   capital letter and three nonnegative integers <span style=
   "font-style: italic;">L</span> <span style="font-style: italic;">x y
   v</span> indicating the point (<span style="font-style: italic;">x</span>,
   <span style="font-style: italic;">y</span>) with label <span style=
   "font-style: italic;">L</span> contains an item with value <span style=
   "font-style: italic;">v</span>. If <span style=
   "font-style: italic;">p</span> is no greater than 6, these groups will all
   be on one line. If <span style="font-style: italic;">p</span> is greater
   than 6, then the seventh and further groups will be on the next line. Labels
   will be consecutive letters starting from A. All the numbers are less than
   1000. Each of the points is unique. A value of 0 for <span style=
   "font-style: italic;">v</span> means there is no item of value there. The
   number of locations with items of value will be at least as large as the

   number of guards. </p>

   <p>The last line of a dataset contains <span style=
   "font-style: italic;">c </span>strings of letters, one for each corridor.
   For each corridor the letters are labels for points along the corridor, in
   order along the line segment from one end to the other, including both
   endpoints, all intersection points with other corridors, and all locations
   on the corridor with a valuable item. Each of the points given in the
   dataset will lie on at least one of the corridors.  </p>



*******OutputConstraints*******

<p>There is one line of output for each data set.  If there
   are not enough guards supplied to be able to see all the valuables, the line
   is "too few guards".  Otherwise the line is an unsigned number <span style=
   "font-style: italic;">r</span> rounded to two places beyond the decimal
   point, where r is the minimum value over all placements of <span style=
   "font-style: italic;">g</span> guards of the maximum "risk" to the
   valuables.</p>

   <p>The first example dataset matches the illustration above, and the next
   three examples only vary the number of guards.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
11 5 3
A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1
G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5
ABCDE AG FGB GHCI JDK
11 5 2
A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1
G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5
ABCDE AG FGB GHCI JDK
11 5 1
A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1
G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5
ABCDE AG FGB GHCI JDK
11 5 4
A 0 8 4 B 5 8 0 C 14 8 4 D 21 8 2 E 25 8 1 F 5 22 1
G 5 20 0 H 11 12 50 I 20 0 50 J 19 10 5 K 25 4 5
ABCDE AG FGB GHCI JDK
3 3 1
A 0 0 50 B 0 3 60 C 4 0 20
AB CB CA
0

<b>Output:</b>
375.00
1250.00
too few guards
21.21
150.00

</pre>



______________________________________________________
RACETIME||||||true||||||


<p>As another one of their crazy antics, the N (1 &#8804; N &#8804; 100,000) cows want Farmer John to race against the clock to answer some of their pressing questions.</p>

<p>The cows are lined up in a row from 1 to N, and each one is holding a sign representing a number, A<sub>i</sub> (1 &#8804; A<sub>i</sub> &#8804; 1,000,000,000). The cows need FJ to perform Q (1 &#8804; Q &#8804; 50,000) operations, which can be either of the following:</p>

<ul>
<li>Modify cow i's number to X (1 &#8804; X &#8804; 1,000,000,000). This will be represented in the input as a line containing the letter M followed by the space-separated numbers i and X.</li>

<li>Count how many cows in the range [P, Q] (1 &#8804; P &#8804; Q &#8804; N) have A<sub>i</sub> &#8804; X (0 &#8804; X &#8804; 1,000,000,000). This will be represented in the input as a line containing the letter C followed by the space-separated numbers P, Q, and X.</li>
</ul>

<p>Of course, FJ would like your help.</p>


*******InputConstraints*******

<p>The first line gives the integers N and Q, and the next N lines give the initial values of A<sub>i</sub>. Finally, the next Q lines each contain a query of the form "M i X" or "C P Q X".</p>


*******OutputConstraints*******

<p>Print the answer to each 'C' query, one per line.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4 6
3
4
1
7
C 2 4 4
M 4 1
C 2 4 4
C 1 4 5
M 2 10
C 1 3 9

<b>Output:</b>
2
3
4
2
</pre>

<p>FJ has 4 cows, whose initial numbers are 3, 4, 1, and 7. The cows then give him 6 operations; the first asks him to count the how many of the last three cows have a number at most 4, the second asks him to change the fourth cow's number to 1, etc.</p>

<b>Warning: large input/output data.</b>


______________________________________________________
DQUERY||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/DQUERY/en/">English</a></td> 
<td width="50%"><a href="/problems/DQUERY/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given a sequence of n numbers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> and a number of d-queries. A d-query is a pair (i, j) (1 &#8804; i &#8804; j &#8804; n). For each d-query (i, j), you have to return the number of distinct elements in the subsequence a<sub>i</sub>, a<sub>i+1</sub>, ..., a<sub>j</sub>.</p>

*******InputConstraints*******

<ul>
<li>Line 1: n (1 &#8804; n &#8804; 30000).</li>
<li>Line 2: n numbers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 &#8804; a<sub>i</sub> &#8804; 10<sup>6</sup>).</li>
<li>Line 3: q (1 &#8804; q &#8804; 200000), the number of d-queries.</li>
<li>In the next q lines, each line contains 2 numbers i, j representing a d-query (1 &#8804; i &#8804; j &#8804; n).</li>
</ul>


*******OutputConstraints*******

<ul>
<li>For each d-query (i, j), print the number of distinct elements in the subsequence a<sub>i</sub>, a<sub>i+1</sub>, ..., a<sub>j</sub> in a single line.</p>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
5
1 1 2 1 3
3
1 5
2 4
3 5

<b>Output</b>
3
2
3 
</pre>





______________________________________________________
ORDERSET||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/ORDERSET/en/">English</a></td> 
<td width="50%"><a href="/problems/ORDERSET/vn/">Vietnamese</a></td> 
</tr></table>


<p>In this problem, you have to maintain a dynamic set of 

numbers which support the two fundamental operations</p>
<ul>
<li>INSERT(S,x): if x is not in S, insert x into S</li>
<li>DELETE(S,x): if x is in S, delete x from S</li>
</ul>
<p>and the two type of queries</p>
<ul>
<li>K-TH(S) : return the k-th smallest element of S</li>
<li>COUNT(S,x): return the number of elements of S smaller 

than x</li>
</ul>


*******InputConstraints*******

<ul>
<li>Line 1: Q (1 &#8804; Q &#8804; 200000), the number of 

operations</li>
<li>In the next Q lines, the first token of each line is a character 

I, D, K or C meaning that the corresponding operation is 

INSERT, DELETE, K-TH or COUNT, respectively, following 

by a whitespace and an integer which is the parameter for that 

operation.</li>
</ul>
<p>If the parameter is a value x, it is guaranteed that 0 &#8804; |x| 

&#8804; 10<sup>9</sup>. If the parameter is an index k, it is 

guaranteed that 1 &#8804; k &#8804; 10<sup>9</sup>.</p>


*******OutputConstraints*******

<p>For each query, print the corresponding result in a single 

line. In particular, for the queries K-TH, if k is larger than the 

number of elements in S, print the word 'invalid'.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
8
I -1
I -1
I 2
C 0
K 2
D -1
K 1
K 2

<b>Output</b>
1
2
2
invalid
</pre>





______________________________________________________
SA04C||||||true||||||


<p>In ancient times, patrollers were used to ensure that all the cities of the Roman Empire were
under control. A patroller&#8217;s job consisted in continuously visiting the cities of the empire, trying
to minimise the interval between two visits to each city. The Military Society (MS) wants to
simulate the behavior of one such patroller to see how effective they were.<br><br>
Each cycle of the simulation corresponds to one time unit. The instantaneous city idleness
(ICI) for a city X after T cycles of the simulation is the number of cycles elapsed since the
last visit of the patroller to the city X (i.e. the number of time units the city X remained
unvisited). All of the cities have initial instantaneous city idleness equal to zero at the start of
the simulation. The instantaneous empire idleness (IEI) after each given cycle is the sum of
the instantaneous city idleness of all cities after that given cycle. Finally, the empire idleness
(EI) for an N-cycle simulation is the sum of the instantaneous empire idleness after each of
the N cycles of simulation.<br><br>
After visiting a city X, the patroller always chooses to visit the neighbour city Y with the
highest instantaneous city idleness (if more than one city has the highest idleness, the one with
the lowest identifier is chosen). Cities X and Y are neighbour if there is a road linking the two
cities directly, without going through any intermediate city. In the beginning of the simulation,
the patroller is located in one of the cities, and is given a map of the Roman Empire containing
a description of all the roads in the empire, indicating the length (in kilometers) and which two
cities each road connects. A road between cities X and Y can be used both to go from X to Y
and from Y to X.<br><br>
Assuming that a patroller travels one kilometer in one time unit (one simulation cycle) and
that the time to visit a city is negligible (equal to zero), MS asks you to determine the empire
idleness after an N-cycle simulation.<br><br>
For clarity, consider the example of an empire which contains 3 cities (1, 2 and 3) and two roads
of length 1 km. The first road connects cities 1 and 2, while the second road connects cities 2
and 3. Below you find a trace of a 3-cycle simulation for such a scenario, considering that the
patroller starts at city 1.
<br><br>
Start of the simulation<br>
Patroller at: 1<br>
ICI1 = 0, ICI2 = 0, ICI3 = 0<br>
IEI = 0<br>
EI = 0
<br><br>
After cycle 1<br>
Patroller at: 2<br>
ICI1 = 1, ICI2 = 0, ICI3 = 1<br>
IEI = 2<br>
EI = 2
<br><br>
After cycle 2<br>
Patroller at: 1<br>
ICI1 = 0, ICI2 = 1, ICI3 = 2<br>
IEI = 3<br>
EI = 5
<br><br>
After cycle 3
Patroller at: 2<br>
ICI1 = 1, ICI2 = 0, ICI3 = 3<br>
IEI = 4<br>
EI = 9
<br><br>
Therefore, for such a scenario, after 3 simulation cycles the empire idleness is 9.


*******InputConstraints*******

<p>The input consists of several test cases. The first line of a test case contains four integers
C,R,N, and S, indicating respectively the quantity of cities in the empire (2 &#183; C &#183; 1000), the
number of roads (1 &#183; R &#183; C(C &#8722; 1)/2), the number of cycles to be simulated (1 &#183; N &#183; 1000)
and the identifier of the starting city of the patroller (1 &#183; S &#183; C). Each city is identified
by a distinct integer from 1 to C. Each of the following R lines contains three integers X, Y
and D describing a road; X and Y represent cities (1 &#183; X 6= Y &#183; C) and D represents the
distance (1 &#183; D &#183; 1000), in kilometers, of the road that connects X and Y directly, without
passing through any other city. Each pair of cities X and Y will appear at most once in a road
description. You can assume that it is always possible to travel from any city to any other city
in the empire using the roads available. The end of input is indicated by C = R = N = S = 0.<br>


*******OutputConstraints*******

<p>For each test case in the input, your program must produce one line containing the empire
idleness after the N-cycle simulation.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 1 1 1
1 2 2
2 1 2 1
1 2 2
2 1 3 1
1 2 2
2 1 4 1
1 2 2
3 2 3 1
1 2 1
2 3 1
0 0 0 0

<b>Output:</b>
2
4
8
10
9
</pre>



______________________________________________________
SA04D||||||true||||||


<p>
Special Box Company (SBC) is a small family-owned and family-run business which produces decorated carton boxes for wrapping gifts. The boxes are hand-made, produced individually from &#64257;ne materials. When accepting an order from a client, they always produce a few more boxes than needed, to keep a stock of boxes to be sold in the future, if needed. Over the years their stock has been growing, with boxes all over the place, and they decided they needed to organize it a bit more. They have therefore made a list registering the dimensions of every box in their stock.<br>
SBC has just received an order from a client that must be delivered tomorrow, so there is no time to produce new boxes. The client wants a certain number N of boxes all of the same size; each box will be used to pack one item of dimensions X, Y and Z. As the carton used in the
boxes is very thin, you may assume that a box of size (X, Y, Z) would &#64257;t perfectly the item the client wants to wrap. If there are not at least N boxes that &#64257;t perfectly, the client wants N boxes that &#64257;t the items as tightly as possible. The box size that &#64257;ts the items as tightly as possible is the one which minimizes the empty space when the item is put inside the box. An item can be rotated in any direction to be accomodated inside a box; therefore, a box of size(X, Y, Z) is as good as a box of size (Y, Z, X), for example.<br><br>
Can you help SBC &#64257;nding whether they can ful&#64257;ll the customer order?<br><br>


*******InputConstraints*******

<p>The input consists of several test cases. The &#64257;rst line of a test case contains two integers N and M, indicating respectively the number of boxes the client needs to buy (1 &#8804; N &#8804; 1500) and the number of boxes in the stock list (1 &#8804; M &#8804; 1500). The second line contains three integers X, Y and Z, representing the dimensions of the item the client wants to wrap (0 < X, Y, Z &#8804; 50). <br>
Each of the next M lines contains three integers A, B and C representing the dimensions of a box in the stock list (0 < A, B, C &#8804; 50). A test case with N = 0 indicates the end of the input. <br><br>
The input must be read from standard input.



*******OutputConstraints*******

<p><p>
For each test case in the input your program must produce one line, containing either:<br><br>
-> The single word &#8216;impossible&#8217;, in case it is not possible to ful&#64257;ll the client&#8217;s order (because there are not at least N boxes of the same size in stock that can contain the item); or<br><br>
-> one integer V , which speci&#64257;es the volume of empty space left when one of the N items packed in one of the boxes chosen.<br />
<p><p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1 1
2 4 3
2 3 4
2 6
3 1 3
7 4 7
10 8 2
2 8 10
6 2 9
7 7 4
6 2 9
1 1
3 3 3
1 1 1
0 0


<b>Output:</b>
0
99
impossible

</pre>



______________________________________________________
HEXTILE||||||true||||||


<p>An amusing puzzle consists of a collection of hexagonal tiles
packed together with each tile showing a digit or '=' or an arithmetic
operation '+', '-', '*', or '/'.  Consider
continuous paths going through each tile exactly once, with each
successive tile being an immediate neighbor of the previous tile.
 The object is to choose such a path so the sequence of
characters on the tiles makes an <span style="font-style: italic;">acceptable</span>

equation, according to the restrictions listed below. A sequence is illustrated in each figure above.  In
Figure 1, if you follow the gray path from the top,
the character sequence is"6/3=9-7".
 Similarly, in Figure 2, start from the bottom left 3 to get "3*21+10=73". </p>

<p>There are a lot of potential paths through a moderate sized
hex tile pattern.  A puzzle player may get frustrated and want
to see the answer.  Your task is to automate the solution.</p><p>The arrangement of hex tiles and choices of characters in each puzzle satisfy these rules:</p>
<ol>
</ol><ol><li>The hex pattern has an odd number of rows greater
than 2.  The odd numbered rows will all contain the same number of
tiles.  Even numbered rows will have one more hex tile than the odd
numbered rows and these longer even numbered rows will stick out both to
the left and the right of the odd numbered rows.</li><li>There is exactly one '=' in the hex pattern.</li><li>There are no more than two '*' characters in the hex
pattern.</li><li>There will be fewer than 14 total tiles in the hex
pattern.</li><li>With the restrictions on allowed character sequences
described below, there will be a unique acceptable solution in the hex pattern.</li></ol><ol>




</ol>
<p>To have an acceptable solution from the characters in some path, the
expressions on each side of the equal sign must be in acceptable form
and evaluate to the same numeric value.  The following rules
define acceptable form of the expressions on each side of the
equal sign and the method of expression evaluation:</p>
<ul></ul><ol start="6"><li>The operators '+', '-', '*', and '/' are only considered as
binary operators,
so no character sequences where '+' or '-' would be a
unary operator are acceptable.  For example "-2*3=-6" and "1 =5+-4" are not acceptable.</li><li>The usual precedence of operations is not used.  Instead all
operations have equal precedence and operations are carried out from
left to right.  For example "44-4/2=2+3*4" is acceptable and "14=2+3*4" is not acceptable.</li><li>If
a division operation is included, the equation can only be acceptable
if the division operation works out to an exact
integer result.  For example "10/5=12/6" and 
"7+3/5=3*4/6" are acceptable.  "5/2*4=10" is not acceptable
because the sides would only be equal with exact mathematical
calculation including an intermediate fractional result.
 "5/2*4=8" is not acceptable because the sides of the
equation would only be equal if division were done with truncation.</li><li>At most two digits together are acceptable.  For example, "123+1 = 124" is not acceptable.</li><li>A
character sequences with a '0' directly followed by another digit is
not acceptable.  For example, "3*05=15" is not acceptable.</li></ol><ul>



</ul>
<p>With the assumptions above, an acceptable expression will never involve an intermediate or final arithmetic result with
magnitude over three million.</p>



*******InputConstraints*******

<p>The input will
consist of one to fifteen data
sets, followed by a line containing only 0.  </p>

<p>The first line of a dataset contains blank separated
integers <span style="font-style: italic;">rA c</span>,
where <span style="font-style: italic;">r</span>
is the number of rows in the hex pattern and <span style="font-style: italic;">c</span> is the number of entries
in the odd numbered rows.  The next <span style="font-style: italic;">r</span> lines contain the
characters on the hex tiles, one row per line.  All hex tile
characters for a row are blank separated.  The lines for odd
numbered rows also start with a blank, to better simulate the
way the hexagons fit together.   Properties 1-5 apply.  </p>



*******OutputConstraints*******

<p>There is one line of output for
each data set.  It is the unique acceptable equation according to rules 6-10 above.  The line includes no spaces.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
5 1
 6
/ 3
 =
9 -
 7
3 3
 1 + 1
* 2 0 =
 3 3 7
5 2
 9 -
* 2 =
 3 4
+ 8 3
 4 /
0

<b>Output:</b>
6/3=9-7
3*21+10=73
8/4+3*9-2=43

</pre>



______________________________________________________
BRIDGES2||||||true||||||


<p>You work at a military training facility in the jungles of San
Motchi.  One of the training exercises is to cross a series of rope
bridges set high in the trees.  Every bridge has a maximum capacity,
which is the number of people that the bridge can support without
breaking.  The goal is to cross the bridges as quickly as possible,
subject to the following tactical requirements:</p>

<dl>
<dt><i>One unit at a time!</i></dt>
<dd>If two or more people can cross a bridge at the same time (because
they do not exceed the capacity), they do so as a unit; they walk as
close together as possible, and they all take a step at the same time.
It is never acceptable to have two different units on the same bridge
at the same time, even if they don't exceed the capacity.  Having
multiple units on a bridge is not tactically sound, and multiple units
can cause oscillations in the rope that slow everyone down.  This rule
applies even if a unit contains only a single person.</dd>

<dt><i>Keep moving!</i></dt>
<dd>When a bridge is free, as many people as possible begin to cross
it as a unit.  Note that this strategy doesn't always lead to an
optimal overall crossing time (it may be faster for a group to wait
for people behind them to catch up so that more people can cross at
once).  But it is not tactically sound for a group to wait, because
the people they're waiting for might not make it, and then they've not
only wasted time but endangered themselves as well.</dd>

</dl>

<p>Periodically the bridges are reconfigured to give the trainees a
different challenge.  Given a bridge configuration, your job is to
calculate the minimum amount of time it would take a group of people
to cross all the bridges subject to these requirements.</p>

<p>For example, suppose you have nine people who must cross two
bridges: the first has capacity 3 and takes 10 seconds to cross; the
second has capacity 4 and takes 60 seconds to cross.  The initial
state can be represented as (9A 0A 0), meaning that 9 people
are waiting to cross the first bridge, no one is waiting to cross the
second bridge, and no one has crossed the last bridge.  At 10 seconds
the state is (6A 3A 0).  At 20 seconds the state is
(3A 3A /3:50/A 0), where /3:50/ means that a unit of three
people is crossing the second bridge and has 50 seconds left.  At 30
seconds the state is (0A 6A /3:40/A 0); at 70 seconds it's
(0A 6A 3); at 130 seconds it's (0A 2A 7); and at 190
seconds it's (0A 0A 9).  Thus the total minimum time is 190
seconds.</p>



*******InputConstraints*******

<p> The input consists of one or more bridge
configurations, followed by a line containing two zeros that signals
the end of the input.  Each bridge configuration begins with a line
containing a negative integer &#8211;B and a positive integer P, where
B is the number of bridges and P is the total number of people that
must cross the bridges.  Both B and P will be at most 20.  (The reason
for putting &#8211;B in the input file is to make the first line of a
configuration stand out from the remaining lines.)  Following are B
lines, one for each bridge, listed in order from the first bridge that
must be crossed to the last.  Each bridge is defined by two positive
integers C and T, where C is the capacity of the bridge (the maximum
number of people the bridge can hold), and T is the time it takes to
cross the bridge (in seconds).  C will be at most 5, and T will be at
most 100.  Only one unit, of size at most C, can cross a bridge at a
time; the time required is always T, regardless of the size of the
unit (since they all move as one).  The end of one bridge is always
close to the beginning of the next, so the travel time between bridges
is zero.</p>



*******OutputConstraints*******

<p>For each bridge configuration, output one line
containing the minimum amount of time it will take (in seconds) for
all of the people to cross all of the bridges while meeting both
tactical requirements.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
-1 2
5 17
-1 8
3 25
-2 9
3 10
4 60
-3 10
2 10
3 30
2 15
-4 8
1 8
4 30
2 10
1 12
0 0 

<b>Output:</b>
17
75
190
145
162

</pre>


