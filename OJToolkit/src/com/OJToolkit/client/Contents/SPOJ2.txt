BULLETIN||||||true||||||


<p>The ACM Student Chapter has just been given custody of a number of
school bulletin boards. Several members
agreed to clear off the old posters.  They found posters
plastered many levels deep.  They made a bet about
how much area was left clear, what was the greatest depth of posters on
top of each other, and
how much of the area was covered to this greatest depth.  To
determine each bet's winner, they
made very accurate measurements of all the poster positions as they
removed them.  Because of the large number of posters, they now
need a program to do the calculations.  That is your job. </p><p>A
simple illustration is shown above:  a bulletin board 45 units
wide by 40 high, with three posters, one with corners at coordinates
(10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last 
with corners at (25, 5) and (30, 30).  The total area not covered
by any poster is 1300.  The maximum number of posters on top of
each other is 2.  The total area covered by exactly 2 posters
is 75.</p>



*******InputConstraints*******

<p>The input will
consist of one to twenty data
sets, followed by a line containing only 0.  On each
line the data will consist of blank separated nonnegative integers.
 </p>
<p>The first line of a dataset contains integers <span style="font-style: italic;">n w h</span>,
where <span style="font-style: italic;">n</span>
is the number of posters on the bulletin board,  <span style="font-style: italic;"></span><span style="font-style: italic;">w</span> and <span style="font-style: italic;">h</span> are the width
and height of the bulletin board<span style="font-style: italic;"></span>.  Constraints are 0 &lt; <span style="font-style: italic;">n</span> &#8804;

100;Â 0 &lt;<span style="font-style: italic;"> w</span>Â &#8804; 50000; 0 &lt; <span style="font-style: italic;">h</span> &#8804; 40000.  </p>
<p>The dataset ends with n lines, each describing the location of
one poster.  Each poster is rectangular and has horizontal
and vertical sides.  The x and y coordinates are measured from one
corner of the bulletin board.  Each line contains four numbers  <span style="font-style: italic;">xl</span> <span style="font-style: italic;">yl</span> <span style="font-style: italic;">xh</span> and <span style="font-style: italic;">yh</span>, where <span style="font-style: italic;">xl</span> and <span style="font-style: italic;">yl</span>, are the lowest values of the x and y coordinates in one corner of the poster and <span style="font-style: italic;">xh</span> and <span style="font-style: italic;">yh</span> are the highest values in the diagonally opposite corner.  Each poster fits on the bulletin board, so 0

&#8804; <span style="font-style: italic;">xl</span>  &lt; <span style="font-style: italic;">xh</span>
&#8804; <span style="font-style: italic;">w</span>, and 0
&#8804; <span style="font-style: italic;">yl</span>  &lt; <span style="font-style: italic;">yh</span>
&#8804; <span style="font-style: italic;">h</span>.  </p>


*******OutputConstraints*******

<p>There is one line of output for
each data set containing three integers, the total area of the bulletin board that is not covered by any poster, <span style="font-style: italic;"></span>the maximum depth of posters on top of each other, and <span style="font-style: italic;"></span>the total area covered this maximum number of times.  </p>Caution:  An approach examining every pair of integer coordinates might need to deal with 2 billion coordinate pairs.<br>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 45 40
10 10 35 20
20 25 40 35
25 5 30 30
1 20 30
5 5 15 25
2 2000 1000
0 0 1000 1000
1000 0 2000 1000
3 10 10
0 0 10 10
0 0 10 10
0 0 10 10
0

<b>Output:</b>
1300 2 75
400 1 200
0 1 2000000
0 3 100

</pre>



______________________________________________________
SERIALN||||||true||||||


<p>A manufacturer keeps an ordered table of serial numbers by listing in each row of the table a range of serial numbers along with two corresponding pieces of information called the status code and the transfer code. A four-column table stores information about ranges of serial numbers in this order: starting serial number, ending serial number, status code, transfer code. Serial numbers as well as transfer codes are integers from 1 to 2<sup>31</sup>-1 (2<sup>31</sup>-1 = 2147483647), and status codes are a single upper-case letter. The table is maintained in increasing order of serial numbers, serial number ranges are never allowed to overlap, and for any given serial number, the table must always accurately represent the most recent data (status code and transfer code) for that serial number.</p>

<p>Let's say that 100,000 serial numbers are created with a status of "A" and a transfer code of "1". An entry for those serial numbers might look like this:</p>

<pre>1 100000 A 1</pre>

<p>This is obviously far more efficient than storing 100,000 individual rows all with the same status and transfer codes. The challenge arises when serial numbers within already defined ranges need to be given different status or transfer codes. For example, if serial number 12345 needs to change to status B, the above table would need to become three separate entries:</p>

<pre>1 12344 A 1
12345 12345 B 1
12346 100000 A 1</pre>

<p>Now let's change the transfer code of all serial numbers in the range 12000 to 12999 to 2. This gets us:</p>

<pre>1 11999 A 1
12000 12344 A 2
12345 12345 B 2
12346 12999 A 2
13000 100000 A 1</pre>

<p>Now change all existing serial numbers from 10000 to 100000 to status C and transfer code 2:</p>

<pre>1 9999 A 1
10000 100000 C 2</pre>

<p>Once created a serial number will never be deleted, but it is possible to have ranges of undefined serial numbers between ranges of defined ones. To demonstrate, let's now set all serial numbers from 1000000 to 1999999 to status Z and transfer code 99:</p>

<pre>1 9999 A 1
10000 100000 C 2
1000000 1999999 Z 99</pre>

<p>Finally, the table is always maintained with a minimal number of rows, meaning specifically that there will never be two adjacent rows in the table where one would suffice. For example, consider the following serial number table:</p>

<pre>1 10 A 1
11 20 A 1
21 30 B 1</pre>

<p>The first two rows could actually be represented by a single row, meaning that the table above does not have a minimal number of rows. The same data represented by a minimal number of rows would look like this:</p>

<pre>1 20 A 1
21 30 B 1</pre>

<p>The following table, however, because the first two rows have non-matching transfer codes, already contains the minimal number of rows:</p>

<pre>1 10 A 1
11 20 A 2
21 30 B 1</pre>

<p>Similarly, the following table cannot be reduced further because the first two rows do not represent a continuous series of serial numbers:</p>

<pre>1 10 A 1
12 20 A 1
21 30 B 1</pre>



*******InputConstraints*******

<p> Each input case begins with a single line that is a character string naming the test case. This string contains at most 80 characters. The name "END" marks the end of the input. Following this will be 1 to 100 lines of the form "A B S T", where A, B, and T are integers in the range 1 to 2<sup>31</sup>-1, S is an uppercase letter, and A&lt;=B. These lines are, in the order they are to be applied, the serial number transactions to be recorded, where A is the start of the serial number range, B is the end of the serial number range, S is the status code, and T is the transfer code. The list of serial number transactions is terminated by a line containing only a 0 (zero) character.</p>




*******OutputConstraints*******

<p>For each input case, echo the test case name to the output on a line by itself, followed by the resulting minimal-rows serial number table that results after all serial number transactions have been applied.</p>




*******IOTestCases*******


<pre>
<b>Input:</b>
First Example
1 100000 A 1
12345 12345 B 1
0
And Another
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
0
Test Case Three
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
10000 100000 C 2
0
Example Four
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
10000 100000 C 2
1000000 1999999 Z 99
0
Example 5
1 10 A 1
21 30 B 1
11 20 A 1
0
Example 6
21 30 B 1
1 10 A 1
11 20 A 2
0
Example 7
12 20 A 1
21 30 B 1
1 10 A 1
0
END


<b>Output:</b>
First Example
1 12344 A 1
12345 12345 B 1
12346 100000 A 1
And Another
1 11999 A 1
12000 12344 A 2
12345 12345 B 2
12346 12999 A 2
13000 100000 A 1
Test Case Three
1 9999 A 1
10000 100000 C 2
Example Four
1 9999 A 1
10000 100000 C 2
1000000 1999999 Z 99
Example 5
1 20 A 1
21 30 B 1
Example 6
1 10 A 1
11 20 A 2
21 30 B 1
Example 7
1 10 A 1
12 20 A 1
21 30 B 1

</pre>



______________________________________________________
UMNOZAK||||||true||||||


<p>The digit-product of a positive integer is the product of the number's decimal digits. For example, the digit-product of 2612 is 2 &#183; 6 &#183; 1 &#183; 2 = 24.</p>

<p>The self-product of a number is the product of the number and its digit-product. For example, the self-product of 2612 is 2612 &#183; 24 = 62688.</p>

<p>Write a program that, given two positive integers A and B (1 &#8804; A &#8804; B < 10<sup>18</sup>), calculates the number of positive integers whose self-product is between A and B, inclusive.</p>


*******InputConstraints*******

<p>The first line of input contains the integer T (1 &#8804; T &#8804; 20). The next T lines each contain a pair of integers A and B.</p>


*******OutputConstraints*******

<p>For each test case, print a line with the number of positive integers whose self-product is between A and B.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
20 30
145 192
2224222 2224222

<b>Output:</b>
2
4
1
</pre>

<p>For the second example, the self-products of the numbers 19, 24, 32, and 41 are 171, 192, 192 and 164, respectively.</p>


______________________________________________________
DOUBLE||||||true||||||


<p>Some numbers have a curious property: when rotating the number to the right,
the new number is the double of the original. Rotating the number to
the right means choosing the last digit and moving it to the beginning of the number,
as the leftmost digit. For example, the number 421052631578947368 when
rotated to the right gives 842105263157894736, which is the double
of the original. These numbers are expressed in the decimal system. In any
numeral system such numbers exist, for example, in the binary (base 2)
numeral system, numbers 01 and 0101 have this property.
Note that leading zeros are required in this case.

<p>Write a program that, for any given base B (2 <= B <= 250), finds the
smallest number in that numeral system which has this property. Try not to
precompute the numbers, the solution is very easy and pretty.


*******InputConstraints*******


<p>The input consists of several test cases. The first line contains an
integer T (T <= 20), the number of test cases. The following T lines
contain one number B, each.


*******OutputConstraints*******


<p>For each number B, output one or more numbers separated by a blank
space that represent the digits in base B (written as decimal numbers) of the smallest number which has
this property.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
10
35
<b>Output:</b>
0 1
0 5 2 6 3 1 5 7 8 9 4 7 3 6 8 4 2 1
11 23
</pre>


______________________________________________________
HIGHWAY||||||true||||||


<p>In a single day, N of Luka's trucks travel a specific highway. The highway has a number of exits and entrances. An exit with a particular number is in the same location as the entrance with that number.</p>

<p>Upon entering the highway, a truck driver receives a ticket which indicates the entrance he used. When exiting, the driver pays a toll equal to the absolute difference of the entrance and exit numbers. For example, if a ticket says he used entrance 30, then exiting at exit 12 will cost him 18.</p>

<p>Luka has figured out a way to save toll money that his company daily spends. Any two drivers can meet on the highway and exchange tickets, even if their routes don't overlap. Tickets can be exchanged an arbitrary number of times.</p>

<p>However, a driver cannot use an exit if his ticket says he used the same entrance, since that would be suspicious.</p>

<p>Write a program that calculates the least total amount of tolls that the drivers can achieve by exchanging tickets.</p>


*******InputConstraints*******

<p>On the first line of the input is the integer T (1 &#8804; T &#8804; 5), the number of test cases. T cases follow, each beginning with the single integer N (2 &#8804; N &#8804; 100,000). Each of the next N lines contains two integers between 1 and 1,000,000,000 inclusive, representing the entrance and exit numbers of a truck. Note that no two trucks will have the same entrance or exit numbers.</p>


*******OutputConstraints*******

<p>For each test case, output the least total amount of tolls Luka's company must pay.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
3 65
45 10
60 25
3
5 5
6 7
8 8

<b>Output:</b>
32
5
</pre>

<p>In the first example, the first and third drivers will exchange tickets. After this, the second and third drivers exchange tickets. After this, the drivers will have the tickets 60, 3, 45, respectively. The total amount in tolls is |65 - 60| + |10 - 3| + |25 - 45| = 32.</p>

<b>Warning: large input/output data.</b>


______________________________________________________
STACK||||||true||||||


<p>Alan loves to construct a stack of building bricks. His stack consists of many cuboids with square
base. All cuboids have the same height 1. Alan puts the consecutive cuboids one over another.
<p>Recently in math class, the concept of volume was introduced to Alan. Consequently, he wants to
compute the volume of his stack now. The lengths of cuboids bases (from top to bottom) are constructed
by Alan in the following way:</p>
<div align="justify">
    <ul>
        <li>
	 Length of edge of the first square is one. i.e. <b>a<sub>1</sub></b> = 1.
        <li>
        Next, Alan fixes the length of the edge of the second square <b>a<sub>2</sub></b>.
        <li>
        Next, Alan calculates the length <b>a<sub>n</sub></b> (n > 2) by <b>2*a<sub>2</sub>*a<sub>n-1</sub> - a<sub>n-2</sub></b>. Do not ask why he chose such a formula; let us just say that he is a really peculiar young fellow.
        </li>
    </ul>
</div>
<p>For example, if Alan fixes <b>a<sub>2</sub></b> = 2, then <b>a<sub>3</sub></b> = 7. If Alan fixes <b>a<sub>2</sub></b> = 1, then <b>a<sub>n</sub></b> = 1 holds for all n.
<p>Now Alan wonders if he can calculate the volume of stack of <b>N</b> consecutive building bricks. Help
Alan and write the program that computes this volume. Since it can be quite large, it is enough to
compute the answer modulo given natural number <b>m</b>.</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line contains the number t (t <= 100000) denoting the number
of test cases. Then t test cases follow. Each of them is given in a separate line containing three integers
<b>a<sub>2</sub></b>, <b>N</b>, <b>m</b> (1 <= <b>a<sub>2</sub></b>, <b>m</b> <= 10<sup>9</sup>, 2 <= <b>N</b> <= 10<sup>9</sup>) separated by a single space.</p>

*******OutputConstraints*******

<p>For each test case compute the volume of stack of <b>N</b> consecutive bricks constructed by Alan
according to steps 1 to 3 and output its remainder modulo <b>m</b>.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
2 3 100
1 4 1000
3 3 1000000000

<b>Output:</b>
54
4
299
</pre>
<p><b>Warning: large input/output data, be careful with certain languages</b>
<p><b>Warning: A naive algorithm won't terminate in even 2 minutes.</b></p>


______________________________________________________
IMGREC2||||||true||||||


<h3>Description</h3>
<p><i>According to Wikipedia, image processing is any form of signal processing for which the input is an image, such as photographs or frames of video; the output of image processing can be either an image or a set of characteristics or parameters related to the image. Most image-processing techniques involve treating the image as a two-dimensional signal and applying standard signal-processing techniques to it. </i></p>
<p>The task you are facing here is a relatively easy one (compared to our general conception of image processing!). Given a black-and-white image of size R * C with some digits (and possibly other shapes) on it, your program needs to figure out the digits written on the image. Specifically, the digits drawn on the graph will adhere to the following rules:
<p>1) Digits are drawn with a series of <i>strokes</i>. A <b>stroke</b> can be regarded as a <b>rectangle</b> of any size on the image, and its edges will always be parallel to either <b>x-axis</b> or <b>y-axis</b>. The number of strokes required to draw each digit will be exactly as follows:</p>
<pre>
0 	1 	2 	3 	4 	5 	6 	7 	8 	9
4 	1 	5 	4 	3 	5 	5 	2 	5 	5
</pre>
<p>Refer to the <b>figure below</b> if you are unclear about how the digits are drawn.</p>
<p>2) Although the <b>width</b> of strokes used to draw a digit might be <b>different</b>, the <b>outer shapes of digits</b> will strictly follow those specified in the <b>figure below</b>. 
<p>3) In order for a digit to be recognizable, <b>all</b> parts (<b>strokes</b> and <b>joints</b>) presented in the graph below must also be clearly <b>distinguishable</b> in the image. 
<p><i>(Refer to the last sample test case if you are unsure about this requirement; in that test case, when the middle stroke of 2 is omitted, the number should not be considered as recognizable.)</i> 
<p>4) You may assume that the image is not rotated, and there is <b>no noise</b> in the input.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:imgrec2.jpg">
<p>Please output the sum of digits recognizable in the graph. In the case that no characters is recognizable, please output 0 instead.</p>

*******InputConstraints*******

<p>There are multiple test cases in the input file. 
<p>Each test case starts with two integers, R and C (1 <= R,C <= 500), specifying the number of rows / columns of the graph. Each of the following R lines contains consecutive C characters ("0" or "1"), describing the image to be processed. 
<p>Two successive test cases are separated by a blank line. A case with R = 0, C = 0 indicates the end of the input file, and should not be processed by your program. </p>

*******OutputConstraints*******

<p>For each test case, please print a single integer, the sum of recognizable numbers. See the sample output for format details.</p>

*******IOTestCases*******

<pre><b>Input:</b>
5 12
001101011111
000101000011
000101001111
001101000011
000000000111

5 3
111
010
110
010
110

6 14
11111000011111
11001000000011
11111001000000
11111001001110
11001011001010
11111000001110

5 2
11
01
11
01
11

6 9
111100111
000100001
000100011
011100010
010000011
011110000

0 0

<b>Output:</b>
Case #1: 4
Case #2: 0
Case #3: 15
Case #4: 3
Case #5: 2
</pre>


______________________________________________________
CAVLI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/CAVLI/en/">English</a></td> 
<td width="50%"><a href="/problems/CAVLI/vn/">Vietnamese</a></td> 
</tr></table>


<p>Mirko found a wooden board and N nails in his attic. Mirko hammered the nails into the board as fast
as possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails
have the same x or the same y coordinate.</p> <p>
In order to keep having fun, Mirko stole his sister's elastic hair band, spread it over all nails and then let
go.The elastic, naturally, tightened around the nails.</p>
<p>
Mirko then repeats these steps while there are at least three nails in the board:
<ul>
<li>1. Write down the area of the shape enclosed by the hair band.
<li>2. Picks the leftmost, rightmost, topmost or bottommost nail in the board.
<li>3. Remove the chosen nail from the board; the elastic tightens again around the remaining nails.
</ul>
Write a program that calculates the numbers written in step 1 of each iteration,if we know the nail Mirko picks in step 2 of each iteration.

*******InputConstraints*******

<p>The first line contains the integer N (3 &#8804; N &#8804; 300 000), the number of nails.</p> <p>
Each of the following N lines contains two integers separated by a space, the coordinates of a nail. All
coordinates will be between 1 and 1 000 000 000. No two nails will share the same x or y coordinate.</p> <p>
The next line contains N-2 letters 'L', 'R', 'U' or 'D'. The letters represent the nails Mirko picked in
order:
<ul>
<li> 'L' for the leftmost nail (smallest x coordinate),
<li> 'R' for the rightmost nail (largest x coordinate),
<li> 'U' for the topmost nail (largest y coordinate),
<li> 'D' for the bottommost nail (smallest y coordinate).
</ul>

*******OutputConstraints*******

<p>
Output N-2 numbers, each on a separate line. The numbers are, in order, the areas that Mirko wrote
down. Output numbers with one digit after the decimal point.


*******IOTestCases*******


<pre>
<b>Input:</b>
8
1 6
2 4
3 1
4 2
5 7
6 5
7 9
8 3
URDLUU

<b>Output:</b>
34.0
24.0
16.5
14.0
9.5
5.0
</pre>




______________________________________________________
SETNJA||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/SETNJA/en/">English</a></td> 
<td width="50%"><a href="/problems/SETNJA/vn/">Vietnamese</a></td> 
</tr></table>



<p>In an infinite binary tree:
<ul>
<li> Each node has exactly two children &#8211; a left and a right child.
<li> If a node is labeled with the integer X, then its left child is labeled 2*X and its right child
2*X+1.
<li>The root of the tree is labeled 1.
</ul>
<p>A walk on the binary tree starts in the root. Each step in the walk is either a jump onto the left child,
onto the right child, or pause for rest (stay in the same node).
<p>A walk is described with a string of letters 'L', 'R' and 'P':
<ul>
<li> 'L' represents a jump to the left child;
<li> 'R' represents a jump to the right child;
<li> 'P' represents a pause.
</ul>
<p>The value of the walk is the label of the node we end up on. For example, the value of the walk LR is
5, while the value of the walk RPP is 3.
<p>A set of walks is described by a string of characters 'L', 'R', 'P' and '*'. Each '*' can be any of the three
moves; the set of walks contains all walks matching the pattern.
<p>For example, the set L*R contains the walks LLR, LRR and LPR. The set ** contains the walks LL, LR,
LP, RL, RR, RP, PL, PR and PP.
<p>Finally, the value of a set of walks is the sum of values of all walks in the set.
<p>Calculate the value of the given set of walks.

*******InputConstraints*******

<p>A string describing the set. Only characters 'L', 'R', 'P' and '*' will appear and there will be at most
10000 of them.

*******OutputConstraints*******

<p>Output the value of the set.


*******IOTestCases*******


<pre>
<b>Input:</b>
L*R

<b>Output:</b>
25

</pre>




______________________________________________________
SVADA||||||true||||||


<p>The local zoo has acquired a large open garden in which animals may freely move as in their natural
habitats and entertain visitors with their usual shenanigans.
<p>The most popular animals are monkeys. With their climbing and jumping and other skills, they delight
old and young visitors alike.
<p>One species of monkey has specialized in climbing tall trees and picking off coconuts. Another species
has specialized in breaking them open.
<p>There are N monkeys of the first type (numbered 1 through N) and M monkeys of the second type
(numbered 1 through M).
<p>Monkey k of the first type takes Ak seconds to find a good spot on the tree, after which it picks off its
first coconut. After that the monkey produces a new coconut every Bk seconds.
<p>Monkey k of the second type takes Ck seconds to find a good tool for opening the coconuts, after
which it opens its first coconut. After that the monkey opens another coconut every Dk seconds.
<p>Unfortunately, the second type of monkey is extremely aggressive so the two types may not be in the
garden at the same time. Therefore, zoo keepers will chase away the first type of monkeys as soon as
they have picked off all the coconuts. Similarly, if monkeys of the same type stay too long after opening
all the coconuts, fights will ensue. Because of that, zoo keepers will send them away as soon as they
have opened all the coconuts.
<p>The zoo keepers first arrive immediately after all coconuts have been picked, and again immediately
after the monkeys open them all. The time needed for monkeys to enter or leave the garden is also
negligibly small.
<p>Tomislav especially likes the second type of monkey, but can never guess when to arrive in order to see
them. Help him calculate the time when the second type arrives if he knows the total time that
monkeys spent in the garden, but does not know the number of coconuts in the garden.


*******InputConstraints*******

<p>The first line contains the integer T (1 &#8804; T &#8804; 1 000 000 000), the total time that monkeys spent in the
garden, in seconds.
<p>The next line contains the integer N (1 &#8804; N &#8804; 100), the number of monkeys of the first type.
<p>Each of the following N lines contains two integers Ak and Bk (1 &#8804; Ak, Bk &#8804; 1 000 000 000), how fast
monkey k of the first type is.
<p>The next line contains the integer M (1 &#8804; M &#8804; 100), the number of monkeys of the second type.
<p>Each of the following M lines contains two integers Ck and Dk (1 &#8804; Ck, Dk &#8804; 1 000 000 000), how fast
monkey k of the second type is.


*******OutputConstraints*******

<p>Output the number of seconds between the arrival of the first type of monkeys and the arrival of the
second type.


*******IOTestCases*******


<pre>
<b>Input:</b>
20
2
3 2
1 3
3
3 1
4 1
5 1

<b>Output:</b>
13

</pre>



______________________________________________________
ROUNDT||||||true||||||


<p>We have a round table with 2*N seats (1<= N <= 2000). The seats are numbered with the numbers from 1 to 2*N in order. This round table is in a round room with two doors. Door 1 is between seats 1 and 2N on the table, and door 2 is between seats N and N+1. We have 2N guests that we want to seat. Each guest has a id from 1 to 2N and we want to seat him/her exactly at the seat corresponding to his id. All the guest are split into two groups of N and each group is waiting in front of a door in a line. This room unfortunately has the problem that if you let a person go from door 1 and he/she has to seep at position p, to get to his seat he has to make either all people seating on seats from 1 to p-1 or all people seating on seats p+1 to 2N to get up to let him in. This presents you with the problem of how to let the guests in to cause minimum number of getting ups. The only thing you control is from which door to let the next guest. The guests that are waiting in front of door 1 can only get in from door 1 the same is true with door 2. 


*******InputConstraints*******

<p>On the first line there will one integer - N. Two more lines of input follow each with N integers in the range [1, 2N] - the guests waiting in front of door 1 and door 2 respectively. The first people in the list is the first to enter the room.


*******OutputConstraints*******

<p>Single integer the total min number of stand-ups that will happen if we choose the best sequence of letting guest in.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 5 3
6 2 1

<b>Output:</b>
3
</pre>



______________________________________________________
PERMCODE||||||true||||||


<p>As the owner of a computer forensics company, you have just been given
     the following note by a new client:<br>
           </p>

<table cellpadding="2" cellspacing="2" border="1"
 style="text-align: left; width: 800px; margin-left: auto; margin-right: auto;">
           <tbody>
             <tr>
               <td valign="top">

      <p>I, Albert Charles Montgomery, have just discovered the most amazing
    cypher for encrypting messages. Let me tell you about it.Â <br>
           </p>



      <p>To begin, you will need to decide on a set of symbols, call it <span
 style="font-style: italic;">S</span>,   perhaps with the letters <span
 style="font-family: monospace;">RATE</span>. The size of this set must be
a  power of 2 and the order of the symbols in <span
 style="font-style: italic;">S</span> is important.   You must note that
      <span style="font-family: monospace;">R</span> is at position 0, <span
 style="font-family: monospace;">A</span> at 1, <span
 style="font-family: monospace;">T</span> at 2, and <span
 style="font-family: monospace;">E</span> at 3. You will   also need one permutation
      <span style="font-style: italic;">P</span> of all those symbols, say
      <span style="font-family: monospace;">TEAR</span>. Finally you will
 need an integer, call it <span style="font-style: italic;">x</span>. Together,
 these make up the key. Given a key,  you are now ready to convert a plaintext
 message <span style="font-style: italic;">M</span> of length       <span
 style="font-style: italic;">n</span> (<span style="font-style: italic;">M</span>[0],
      <span style="font-style: italic;">M</span>[1]... <span
 style="font-style: italic;">M</span>[<span style="font-style: italic;">n</span>-1]),
 that has some but not necessarily all of the symbols  in <span
 style="font-style: italic;">S</span>, into  a cyphertext string <span
 style="font-style: italic;">C</span>, also of length <span
 style="font-style: italic;">n</span> (<span style="font-style: italic;">C</span>[0],
       <span style="font-style: italic;">C</span>[1],...<span
 style="font-style: italic;">C</span>[<span style="font-style: italic;">n</span>-1]),
  that has  some but not necessarily all of the symbols in <span
 style="font-style: italic;">S</span>. <br>

           </p>

      <p>The encrypting algorithm computes <span
 style="font-style: italic;">C</span> as follows:</p>

      <ol>
         <li>Calculate an integer <span
 style="font-style: italic;">d</span> as the remainder after dividing the
 integer part of (<span style="font-style: italic;">n</span><sup>1.5</sup>

 + <span style="font-style: italic;">x</span>) by <span
 style="font-style: italic;">n</span>. This can be expressed more succinctly
 as <span style="font-style: italic;">d</span> = (int)(<span
 style="font-style: italic;">n</span><sup>1.5</sup> + <span
 style="font-style: italic;">x</span>) % <span
 style="font-style: italic;">n</span>, where "%" is the remainder operator.</li>

         <li>   Set <span style="font-style: italic;">C</span>[<span
 style="font-style: italic;">d</span>] to be the symbol in <span
 style="font-style: italic;">S</span> whose position is the  same   as the
 position of <span style="font-style: italic;">M</span>[<span
 style="font-style: italic;">d</span>] in <span
 style="font-style: italic;">P</span>.<br>

         </li>
         <li>    For each <span style="font-style: italic;">j</span> &#8800; <span
 style="font-style: italic;">d</span> in 0..<span
 style="font-style: italic;">n</span>-1,
              set <span style="font-style: italic;">C</span>[<span
 style="font-style: italic;">j</span>] to be the symbol in <span
 style="font-style: italic;">S</span> whose position is the  value   obtained
 by xor-ing the position of <span style="font-style: italic;">M</span>[<span
 style="font-style: italic;">j</span>] in <span
 style="font-style: italic;">P</span> with the position  of <span
 style="font-style: italic;">M</span>[(<span style="font-style: italic;">j</span>+1)
% <span style="font-style: italic;">n</span>]   in <span
 style="font-style: italic;">S</span>. Note that the bitwise xor operator
 is "^" in C, C++, and Java. </li>

      </ol>
<p>For example, consider this scenario where <span
 style="font-style: italic;">S</span>=<span
 style="font-family: monospace;">RATE</span>, <span
 style="font-style: italic;">P</span>=<span
 style="font-family: monospace;">TEAR</span>, <span
 style="font-style: italic;">x</span>=102,  <span
 style="font-style: italic;">M</span>=<span
 style="font-family: monospace;">TEETER</span>, and <span
 style="font-style: italic;">n</span>=6. To compute <span
 style="font-style: italic;">d</span>, first calculate 6<sup>1.5</sup> + 102
= 116.696938, then take the remainder after dividing by 6. So  <span
 style="font-style: italic;">d</span> = 116 % 6 = 2. The following table
 shows the steps in filling in the cyphertext  <span
 style="font-style: italic;">C</span>. Note  that the order of the steps is
not important.</p>

      <table cellpadding="2" cellspacing="2" border="1"
 style="text-align: left; width: 90%; margin-left: 40px;">
            <tbody>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top">0<br>
                </td>
                <td valign="top">1<br>

                </td>
                <td valign="top">2<br>
                </td>
                <td valign="top">3<br>
                </td>
                <td valign="top">4<br>
                </td>

                <td valign="top">5<br>
                </td>
                <td valign="top"><br>
                </td>
              </tr>
              <tr>
                   <td valign="top"><span style="font-style: italic;">S</span>
 =<br>

                   </td>
                   <td valign="top" style="font-family: monospace;">R<br>
                   </td>
                   <td valign="top" style="font-family: monospace;">A<br>
                   </td>
                   <td valign="top" style="font-family: monospace;">T<br>
                   </td>

                   <td valign="top" style="font-family: monospace;">E<br>
                   </td>
                   <td valign="top" style="font-family: monospace;"><br>
                   </td>
                   <td valign="top" style="font-family: monospace;"><br>
                   </td>
                   <td valign="top"><br>
                   </td>

                 </tr>
                 <tr>
                   <td valign="top"><span style="font-style: italic;">P</span>
 = <br>
                   </td>
                   <td valign="top" style="font-family: monospace;">T<br>
                   </td>

                   <td valign="top" style="font-family: monospace;">E<br>
                   </td>
                   <td valign="top" style="font-family: monospace;">A<br>
                   </td>
                   <td valign="top" style="font-family: monospace;">R<br>
                   </td>
                   <td valign="top" style="font-family: monospace;"><br>

                   </td>
                   <td valign="top" style="font-family: monospace;"><br>
                   </td>
                   <td valign="top"><br>
                   </td>
                 </tr>
                 <tr>
                <td valign="top"><span style="font-style: italic;">M</span>

 =<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>

                </td>
                <td valign="top" style="font-family: monospace;">T<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">R<br>
                </td>

                <td valign="top"><br>
                </td>
              </tr>
              <tr>
                   <td valign="top"><br>
                   </td>
                   <td valign="top"><br>
                   </td>
                   <td valign="top"><br>

                   </td>
                   <td valign="top"><br>
                   </td>
                   <td valign="top"><br>
                   </td>
                   <td valign="top"><br>
                   </td>
                   <td valign="top"><br>
                   </td>

                   <td valign="top"><span style="font-style: italic;"></span><br>
                 </td>
                 </tr>
                 <tr>
                <td valign="top"><span style="font-style: italic;">C</span>
 = <br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>

                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>

                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top"><span style="font-style: italic;"></span><span
 style="font-style: italic;">M</span>[0] is <span
 style="font-family: monospace;">T</span>, <span
 style="font-family: monospace;">T</span> is at <span
 style="font-style: italic;">P</span>[0]. <span
 style="font-style: italic;">M</span>[1] is <span
 style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">S</span>[3]. <span
 style="font-style: italic;">C</span>[0] = <span
 style="font-style: italic;">S</span>[0 xor 3] = <span
 style="font-style: italic;">S</span>[3]<br>

                </td>
              </tr>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>

                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>

                <td valign="top"><span style="font-style: italic;">M</span>[1]
 is <span style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">P</span>[1]. <span
 style="font-style: italic;">M</span>[2] is <span
 style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">S</span>[3].    <span
 style="font-style: italic;">C</span>[1] = <span
 style="font-style: italic;">S</span>[1 xor 3] = <span
 style="font-style: italic;">S</span>[2]<br>

                </td>
              </tr>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>

                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>

                </td>
                <td valign="top"><span style="font-style: italic;"></span><span
 style="font-style: italic;">2 is d. M</span>[2] is <span
 style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">P</span>[1], so <span
 style="font-style: italic;">C</span>[2] =Â  <span
 style="font-style: italic;">S</span>[1]<br>

                </td>
              </tr>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>

                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top" style="font-family: monospace;"><br>

                </td>
                <td valign="top"><span style="font-style: italic;">M</span>[3]
 is <span style="font-family: monospace;">T</span>, <span
 style="font-family: monospace;">T</span> is at <span
 style="font-style: italic;">P</span>[0]. <span
 style="font-style: italic;">M</span>[4] is <span
 style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">S</span>[3]. <span
 style="font-style: italic;">C</span>[3] = <span
 style="font-style: italic;">S</span>[0 xor 3] = <span
 style="font-style: italic;">S</span>[3]<br>

                </td>
              </tr>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>

                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>

                <td valign="top" style="font-family: monospace;"><br>
                </td>
                <td valign="top"><span style="font-style: italic;">M</span>[4]
 is <span style="font-family: monospace;">E</span>, <span
 style="font-family: monospace;">E</span> is at <span
 style="font-style: italic;">P</span>[1]. <span
 style="font-style: italic;">M</span>[5] is <span
 style="font-family: monospace;">R</span>, <span
 style="font-family: monospace;">R</span> is at <span
 style="font-style: italic;">S</span>[0].    <span
 style="font-style: italic;">C</span>[4] = <span
 style="font-style: italic;">S</span><span style="font-style: italic;"></span>[1
 xor 0] = <span style="font-style: italic;">S</span>[1]<br>

                </td>
              </tr>
              <tr>
                <td valign="top"><br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">T<br>

                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>
                <td valign="top" style="font-family: monospace;">E<br>
                </td>
                <td valign="top" style="font-family: monospace;">A<br>
                </td>

                <td valign="top" style="font-family: monospace;">A<br>
                </td>
                <td valign="top"><span style="font-style: italic;">M</span>[5]
 is <span style="font-family: monospace;">R</span>, <span
 style="font-family: monospace;">R</span> is at <span
 style="font-style: italic;">P</span>[3]. <span
 style="font-style: italic;">M</span>[0] is <span
 style="font-family: monospace;">T</span>, <span
 style="font-family: monospace;">T</span> is at <span
 style="font-style: italic;">S</span>[2].    <span
 style="font-style: italic;">C</span>[5] = <span
 style="font-style: italic;">S</span>[3 xor 2] = <span
 style="font-style: italic;">S</span>[1]<br>

                </td>
              </tr>


        </tbody>

      </table>

      <div style="margin-left: 40px;"> </div>
          <br>

           I have included additional examples of encrypted messages at the
 end   of  this note for you to experiment with. However, first, I need to
 tell  you about the decryption algorithm.</td>
             </tr>

  </tbody>
</table>

<p>Unfortunately, the next page of the note, with the decrypting algorithm,
     is completely unreadable because it is covered with huge, overlapping,
  messy   ink blots. Given your considerable skill in unravelling puzzles,
 your task   is to write the decoder based on your knowledge of the encoding
 algorithm.</p>


*******InputConstraints*******

<p> The input for the decoder
   consists of one or more sets of {key, encrypted   message} pairs. The
key    is on 3 separate lines. The first line contains the  single integer
<span style="font-style: italic;">x</span>, 0 &lt; <span
 style="font-style: italic;">x</span> &lt; 10,000; the second line contains
 the string <span style="font-style: italic;">S</span>; and the third line
 contains the string <span style="font-style: italic;">P</span>, which
   will be a permutation of <i>S</i>.  The length of
 <span style="font-style: italic;">S</span> (and therefore <span
 style="font-style: italic;">P</span>)
   will always be one of the following powers of two: 2, 4, 8, 16, or
   32.  Following the key is a line containing
  the encrypted message string <span style="font-style: italic;">C</span>, which
 will contain at least one and at most sixty characters.
 The strings <span style="font-style: italic;">S</span>, <span
 style="font-style: italic;">P</span>, and <span
 style="font-style: italic;">C</span> will not contain whitespace, but may
   contain printable characters other than letters and digits.
 The end of the input is a line  which contains
 the single integer 0. </p>



*******OutputConstraints*******

<p>For each input set print
  the decrypted string on a single line, as shown    in the  sample output.
  </p>



*******IOTestCases*******


<pre>
<b>Input:</b>
102
RATE
TEAR
ETAEAA
32
ABCDEFGHIJKLMNOPQRSTUVWXYZ._!?,;
;ABCDEFGHIJKLMNOPQRSTUVWXYZ._!?,
MOMCUKZ,ZPD
1956
ACEHINT_
ACTN_IHE
CIANCTNAAIECIA_TAI
0

<b>Output:</b>
TEETER
HELLO_WORLD
THE_CAT_IN_THE_HAT

</pre>



______________________________________________________
SCAVHUNT||||||true||||||


<p>Bill has been the greatest boy scout in America and has become quite a superstar because he
always organized the most wonderful scavenger hunts (you know, where the kids have to find a
certain route following certain hints). Bill has retired now, but a nationwide election quickly found
a successor for him, a guy called George. He does a poor job, though, and wants to learn from
Bill&#8217;s routes. Unfortunately Bill has left only a few notes for his successor.
Bill never wrote his routes completely, he only left lots of little sheets on which he had written two
consecutive steps of the routes. He then mixed these sheets and memorized his routes similarly to
how some people learn for exams: practicing again and again, always reading the first step and
trying to remember the following. This made much sense, since one step always required something
from the previous step.
George however would like to have a route written down as one long sequence of all the steps in
the correct order. Please help him make the nation happy again by reconstructing the routes.



*******InputConstraints*******

<p>The first line contains the number of scenarios. Each scenario describes one route and its first line
tells you how many steps (3 &#8804; S &#8804; 333) the route has. The next S &#8722; 1 lines each contain one
consecutive pair of the steps on the route separated by a single space. The name of each step is
always a single string of letters.



*******OutputConstraints*******

<p>The output for every scenario begins with a line containing &#8220;Scenario #i:&#8221;, where i is the number
of the scenario starting at 1. Then print S lines containing the steps of the route in correct order.
Terminate the output for the scenario with a blank line.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
SwimmingPool OldTree
BirdsNest Garage
Garage SwimmingPool
3
Toilet Hospital
VideoGame Toilet


<b>Output:</b>
Scenario #1:
BirdsNest
Garage
SwimmingPool
OldTree

Scenario #2:
VideoGame
Toilet
Hospital

</pre>



______________________________________________________
STAMPS||||||true||||||


<p>Everybody hates Raymond. He&#8217;s the largest stamp collector on planet earth and because of that
he always makes fun of all the others at the stamp collector parties. Fortunately everybody loves
Lucy, and she has a plan. She secretly asks her friends whether they could lend her some stamps,
so that she can embarrass Raymond by showing an even larger collection than his.
Raymond is so sure about his superiority that he always tells how many stamps he&#8217;ll show.And
since Lucy knows how many she owns, she knows how many more she needs. She also knows how
many friends would lend her some stamps and how many each would lend. But she&#8217;s like to borrow
from as few friends as possible and if she needs too many then she&#8217;d rather not do it at all. Can
you tell her the minimum number of friends she needs to borrow from?



*******InputConstraints*******

<p>The first line contains the number of scenarios. Each scenario describes one collectors party and
its first line tells you how many stamps (from 1 to 1000000) Lucy needs to borrow and how many
friends (from 1 to 1000) offer her some stamps. In a second line you&#8217;ll get the number of stamps
(from 1 to 10000) each of her friends id offering.



*******OutputConstraints*******

<p>The output for every scenario begins with a line containing &#8220;Scenario #i:&#8221;, where i is the number
of the scenario starting at 1. Then print a single line with the minimum number of friends Lucy
needs to borrow stamps from. If it&#8217;s impossible even if she borrows everything from everybody,
write impossible. Terminate the output for the scenario with a blank line.



*******IOTestCases*******


<pre>
<b>Input:</b>
3
100 6
13 17 42 9 23 57
99 6
13 17 42 9 23 57
1000 3
314 159 265


<b>Output:</b>
Scenario #1:
3

Scenario #2:
2

Scenario #3:
impossible

</pre>



______________________________________________________
PARKINGL||||||true||||||


<p>At a certain college, a small parking lot is arranged in a rectangular shape, with 20 spaces numbered
1, 2, 3..... 19, 20. Traffic flow is one way in a counter- clockwise direction. The lot looks something
like this:
<br>
<p><p>
<center><img src='/content/dilaang:Parking_Lot.png'alt='subir imagenes' border='0'></center/>
<p><p>
<br>
Note that the first position encountered upon entering is 1 and the last is 20. Cars may exit or
continue to drive in a counter-clockwise direction. The following assumptions apply to this problem:
<br><br>
&#8226; At the start, class is in session and the lot is full (all 20 spaces are occupied by parked cars).<br><br>
&#8226; In addition to the (20) cars already parked in the lot, K autos are in the lot waiting for positions to become available (1 &#8804; K &#8804; 20).<br><br>
&#8226; Each waiting auto is positioned behind one of the occupied spaces. When a position empties, the space is filled either by the car waiting at that position or, if no car is waiting at that position, by the closest car, bearing in mind that the traffic flow is one way. (There is sufficient room at each position for the car parked in that position to leave and the car waiting at that position to then park.)<br><br>
&#8226; When an auto advances N positions to a free spot, all other cars advance N positions. Since the lot is circular, advancing 4 positions from position 18 means advancing to position 2.<br><br>
&#8226; None of the waiting cars exits.


*******InputConstraints*******

<p>Write a program that reads data from standard input. Input consist of a line indicating the number
of datasets, a blank line, and the datasets separated by a blank line. Each dataset is in two parts.
The first part consists of integers, one per line beginning in column 1, representing initial positions
of waiting autos. An integer 99 signals the end of this part of the data. The second part consists
of integers, in the same format, representing positions vacated.
Positions are vacated in the order in which their numbers appear in the second part of the data.



*******OutputConstraints*******

<p>The output of each dataset should consist a series of lines giving, for each initial (waiting) car posi-
tion, the initial position and the final position of that car based on the description and assumptions
stated above. The output lines must appear in the same order as the order of the initial positions
given in the input. Print a blank line between datasets.



*******IOTestCases*******


<pre>
<b>Input:</b>
1

6
19
17
13
1
99
1
3
20
16

<b>Output:</b>
Original position 6 parked in 16
Original position 19 parked in 3
Original position 17 did not park
Original position 13 parked in 20
Original position 1 parked in 1

</pre>



______________________________________________________
BUGLIFE||||||true||||||


<p>Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that
they feature two different genders and that they only interact with bugs of the opposite gender. In
his experiment, individual bugs and their interactions were easy to identify, because numbers were
printed on their backs.<br><br>
Given a list of bug interactions, decide whether the experiment supports his assumption of two
genders with no homosexual bugs or if it contains some bug interactions that falsify it.



*******InputConstraints*******

<p>The first line of the input contains the number of scenarios. Each scenario starts with one line
giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to
1000000) separated by a single space. In the following lines, each interaction is given in the form of
two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting
from one.



*******OutputConstraints*******

<p>The output for every scenario is a line containing &#8220;Scenario #i:&#8221;, where i is the number of the
scenario starting at 1, followed by one line saying either &#8220;No suspicious bugs found!&#8221; if the
experiment is consistent with his assumption about the bugs&#8217; sexual behavior, or &#8220;Suspicious
bugs found!&#8221; if Professor Hopper&#8217;s assumption is definitely wrong.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 3
1 2
2 3
1 3
4 2
1 2
3 4


<b>Output:</b>
Scenario #1:
Suspicious bugs found!
Scenario #2:
No suspicious bugs found!

</pre>



______________________________________________________
MIRRORED||||||true||||||


<p>The letters b and d are mirror images of each other, as are p and q. No other pairs of letters are
mirrors, except for letters like H that are mirrors of themselves, and what&#8217;s the interest in a pair
that&#8217;s just two of the same letter? We refuse to count self-mirrors as mirrored pairs.



*******InputConstraints*******

<p>Input is a list of lines with two characters on each line. Your program should end immediately
when it encounters a line with two spaces.



*******OutputConstraints*******

<p>The first line of output should contain only Ready. For each pair of characters (prior to a pair
of spaces), print the line Mirrored pair if the characters are mirrors, otherwise print the line
Ordinary pair.



*******IOTestCases*******


<pre>
<b>Input:</b>
Fr
qp
HH
db
  
pq

<b>Output:</b>
Ready
Ordinary pair
Mirrored pair
Ordinary pair
Mirrored pair

</pre>



______________________________________________________
SSHUFFLE||||||true||||||


<p>Given three strings consisting of just lowercase letters, count the number of ways that the third
string can be constructed by combining two subsequences from the first two strings.<br><br>
One derives a subsequence of the string by deleting zero or more characters from a string. For
example, &#8220;&#8221;, &#8220;a&#8221;, &#8220;b&#8221;, &#8220;c&#8221;, &#8220;ab&#8221;, &#8220;ac&#8221;, &#8220;bc&#8221;, and &#8220;abc&#8221; are all the subsequence strings of &#8220;abc&#8221;.
(Note that the empty string, &#8220;&#8221;, is a subsequence of any string.)<br><br>
The two subsequences are combined to make a third string by shuffling them together. That is,
the relative order of the letters from the subsequence cannot be changed in the target string; but
the two subsequences can be interleaved arbitrarily. For example, consider the two subsequences
&#8220;abc&#8221; and &#8220;de&#8221;. By combining them, one can get the following strings: &#8220;abcde&#8221;, &#8220;abdce&#8221;, &#8220;abdec&#8221;,
&#8220;adbce&#8221;, &#8220;adbec&#8221;, &#8220;adebc&#8221;, &#8220;dabce&#8221;, &#8220;dabec&#8221;, &#8220;daebc&#8221;, and &#8220;deabc&#8221;.
<br><br>


*******InputConstraints*******

<p>The first line of the input contains a single integer t that indicates the number of test cases. Each
test case contains 3 strings, each containing only lowercase characters. The length of each string is
between 1 and 60, inclusive.



*******OutputConstraints*******

<p>For each test case, output a line with a single integer that denotes the number of ways that one
can construct the third string from the first two strings as described above.



*******IOTestCases*******


<pre>
<b>Input:</b>
3
abc abc abc
aa aa aa
abbcd bccde abcde


<b>Output:</b>
8
10
18

</pre>



______________________________________________________
TOURIST||||||true||||||


<p>A lazy tourist wants to visit as many interesting locations in a city as possible without going one
step further than necessary. Starting from his hotel, located in the north-west corner of city, he
intends to take a walk to the south-east corner of the city and then walk back. When walking to
the south-east corner, he will only walk east or south, and when walking back to the north-west
corner, he will only walk north or west. After studying the city map he realizes that the task is not
so simple because some areas are blocked. Therefore he has kindly asked you to write a program
to solve his problem.<br><br>
Given the city map (a 2D grid) where the interesting locations and blocked areas are marked,
determine the maximum number of interesting locations he can visit. Locations visited twice are
only counted once.<br><br>



*******InputConstraints*******

<p>The first line in the input contains the number of test cases (at most 20). Then follow the cases.
Each case starts with a line containing two integers, W and H (2 &#8804; W , H &#8804; 100), the width and
the height of the city map. Then follow H lines, each containing a string with W characters with
the following meaning:<br><br>
   . Walkable area<br>
   * Interesting location (also walkable area)<br>
   # Blocked area<br><br>
You may assume that the upper-left corner (start and end point) and lower-right corner (turning
point) are walkable, and that a walkable path of length H + W &#8722; 2 exists between them.<br><br>



*******OutputConstraints*******

<p>For each test case, output a line containing a single integer: the maximum number of interesting
locations the lazy tourist can visit.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
9 7
*........
.....**#.
..**...#*
..####*#.
.*.#*.*#.
...#**...
*........
5 5
.*.*.
*###.
*.*.*
.###*
.*.*.


<b>Output:</b>
7
8

</pre>



______________________________________________________
HIGHWAYS||||||true||||||


<p>A number of cities are connected by a network of highways. Each highway is bidirectional and
connects two cities, with a given travel time. What is the shortest time to get from a given city to
another given city?


*******InputConstraints*******

<p>The first line of input contains the number of test cases.<br><br>
Each test case starts with a line containing the number of cities n (2 &#8804; n &#8804; 100000), the number
of highways m (1 &#8804; m &#8804; 100000), the starting city and the ending city. Cities are numbered from
1 to n.<br><br>
Then m lines follow, each describing one highway. The decription consists of the two distinct city
numbers and the time in minutes to travel along the highway. The time will be between 1 and
1000.<br>



*******OutputConstraints*******

<p>For each test case output a single line containing the minimum time it takes to get from the start
to the destination. If no connection exists, output NONE.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
4 2 1 4
1 2 5
3 4 5
4 4 1 4
1 2 5
2 3 5
3 4 5
4 2 6


<b>Output:</b>
NONE
11

</pre>



______________________________________________________
MONSTER||||||true||||||


<p>Once upon a time when people still believed in magic, there was a great wizard Aranyaka Gondlir.
After twenty years of hard training in a deep forest, he had finally mastered ultimate magic, and
decided to leave the forest for his home.<br><br> 
Arriving at his home village, Aranyaka was very surprised at the extraordinary desolation. A gloom
had settled over the village. Even the whisper of the wind could scare villagers. It was a mere
shadow of what it had been.<br><br>
What had happened? Soon he recognized a sure sign of an evil monster that is immortal. Even
the great wizard could not kill it, and so he resolved to seal it with magic. Aranyaka could cast a
spell to create a monster trap: once he had drawn a line on the ground with his magic rod, the line
would function as a barrier wall that any monster could not get over. Since he could only draw
straight lines, he had to draw several lines to complete a monster trap, i.e., magic barrier walls
enclosing the monster. If there was a gap between barrier walls, the monster could easily run away
through the gap.<br><br>
For instance, a complete monster trap without any gaps is built by the barrier walls in the left
figure, where &#8220;M&#8221; indicates the position of the monster. In contrast, the barrier walls in the right
figure have a loophole, even though it is almost complete.


<br>
<p><p>
<center><img src='/content/dilaang:monster.png'alt='subir imagenes' border='0'></center/>
<p><p>
<br>
Your mission is to write a program to tell whether or not the wizard has successfully sealed the
monster.



*******InputConstraints*******

<p>The input consists of multiple data sets, each in the following format.<br>

<br>
<p><p>
<center><img src='/content/dilaang:monster_input.png'alt='subir imagenes' border='0'></center/>
<p><p>
<br>
The first line of a data set contains a positive integer n, which is the number of the line segments
drawn by the wizard. Each of the following n input lines contains four integers x, y, x , and
y , which represent the x&#8211; and y&#8211;coordinates of two points (x, y) and (x , y ) connected by a line
segment. You may assume that all line segments have non&#8211;zero lengths. You may also assume that
n is less than or equal to 100 and that all coordinates are between &#8722;50 and 50, inclusive.<br><br>
For your convenience, the coordinate system is arranged so that the monster is always on the origin
(0, 0). The wizard never draws lines crossing (0, 0).<br><br>
You may assume that any two line segments have at most one intersection point and that no three
line segments share the same intersection point. You may also assume that the distance between
any two intersection points is greater than 10^&#8722;5 .<br><br>
An input line containing a zero indicates the end of the input.

*******OutputConstraints*******

<p>For each data set, print &#8220;yes&#8221; or &#8220;no&#8221; in a line. If a monster trap is completed, print &#8220;yes&#8221;.
Otherwise, i.e., if there is a loophole, print &#8220;no&#8221;.


*******IOTestCases*******


<pre>
<b>Input:</b>
8
-7 9 6 9
-5 5 6 5
-10 -5 10 -5
-6 9 -9 -6
6 9 9 -6
-1 -2 -3 10
1 -2 3 10
-2 -3 2 -3
8
-7 9 5 7
-5 5 6 5
-10 -5 10 -5
-6 9 -9 -6
6 9 9 -6
-1 -2 -3 10
1 -2 3 10
-2 -3 2 -3
0

<b>Output:</b>
yes
no

</pre>



______________________________________________________
YODA||||||true||||||


<p>According to a very famous web site, which in this case we will trust, defines a palindrome
as &#8216;a word, phrase, verse, or sentence that reads the same backward or forward&#8217;. For
example, the phrase A man, a plan, a canal, Panama! is a palindrome. Actually, writing
texts consisting of only palindromes is part of a literary technique called constrained writing.<br><br>
Now imagine the wise Yoda, the master of all, whose proficiency putting words together
in sentences is one of his well-kwnown abilities. He is now interested in enriching his long-
lasting, and maybe boring, inactivity periods by &#8216;composing&#8217; palindromic sentences. That
is, he has plans to use only palindromic sentences for his chats. For this matter, he needs
to practice. The first task in his practice plan is to count all the palindromes that can be
arranged out of a collection of characters.<br><br>
Today, you will be Yoda&#8217;s assistant for this first task. Your only mission is to, given
a sequence of characters, determine how many palindromes can be obtained with some
of the characters in the sequence; you will only take into account uppercase or lowercase
letters. Put in other way, you need to determine how many permutations of a give sequence
of characters are palindromes. Your solution will help definitively master Yoga.



*******InputConstraints*******

<p>The input consists of several test cases, one per line. For each test case, the input consist of a
sequence of ASCII characters.



*******OutputConstraints*******

<p>For each test case you should print in a single line, and according to the order of the test cases,
the total number of palindromes generated by the input sequence of ASCII characters. For your
purpose, you should only consider uppercase or lowercase characters appearing in the input; any
other character should be ignored in the calculations. Uppercase and lowercase characters are not
considered different; for example, A and a should not be considered different. In any case, the
total number of palindromes will not exceed the number e^43 , where e is approximately 2.71828.
Remember that the empty sequence is a palindrome itself.



*******IOTestCases*******


<pre>
<b>Input:</b>
A man, a plan, a canal, Panama!
arD,R!A
B.a.C1/
12[&#8217;;. =1

<b>Output:</b>
15120
2
0
1

</pre>



______________________________________________________
QUALITY||||||false||||||

<p>Write a program to score a small, three-problem programming contest. Each input line contains
six space-separated integers representing raw score data. The first three integers are in the range
0 . . . 100000. They represent seconds taken to solve the first, second, and third problems, respec-
tively. Zero seconds indicates that a problem has not been solved. The last three integers are in
the range 0 . . . 100, representing the attempts taken to solve the first, second, and third problems,
respectively. Every failed attempt is penalized with 20 minutes, but only for problems that are
eventually solved.<br><br>
Each output line should begin with the string team, followed by a single space, the input line
number, a colon, a single space, the number of solved problems, a comma, a single space, and the
total number of seconds including penalties it took for the solved problems.

<pre>
<b>Input:</b>
0 777 0 4 1 1
1 1 1 1 1 1

<b>Output:</b>
team 1: 1, 777
team 2: 3, 3
</pre>



______________________________________________________
CHMAZE||||||true||||||


<p>Luke Skywalker and his sister/love interest Leia are trying to get through a killer maze. And I
mean killer! Every time step, the boundaries change. If our twins/lovebirds ever visit a square the
same time a boundary appears, they&#8217;re toast. There is no need to panic; the Force will guide them
through the maze, and they will not die. However, the Force needs to know what advice to give
and is therefore asking you for help.<br><br>
Luke and Leia begin in the northwest corner of a maze. They want to make it to the southeast
corner of the maze. At any given time step, Luke and Leia can move one square north, south, east,
or west, or they can stay where they are. At every time step, the boundaries of the maze change:
there is a finite list of patterns; if Luke and Leia are still in the maze when the list of patterns
is exhausted, the maze cycles through again from the beginning of the list. You need to compute
whether Luke and Leia can make it to the southeast corner of the maze, and, if so, the minimum
number of time steps necessary for them to get there. Remember, the Force is counting on you! If
you give the Force bad advice, we&#8217;ll have to wait around for A Newer Hope and Force Knows how
long that could take!



*******InputConstraints*******

<p>The input consists of several test cases. Each case (but the last) will begin with a line containing
three decimal integers. The first is the number of rows in the maze; the second is the number of
columns in the maze; the third is the number of patterns in the list. The first two numbers will
be inclusively between 1 and 20; the third will be inclusively between 1 and 10. The integers will
be separated by exactly one space and will be followed by one <EOL>. Immediately following this
line will be a number of patterns, equal to the number specified on the first line. Each pattern will
consist of r lineas each containing c characters, where r is the number of rows and c is the number
of columns indicated on the first line. Each character will be either 0 (indicating no boundary) or
1 (indicating a boundary). Each line will be terminated by <EOL>, and an extra <EOL> will follow
each pattern. The northwest corner of the first pattern will always be zero, since Luke and Leia
will be starting from there. The last case will be three zeros, separated by exactly one space and
followed by exactly one <EOL>. This case is not to be processed; it indicates the end of input.



*******OutputConstraints*******

<p>The output cases are to appear in the same order in wich they appear in the input. Each output
case should be of the form <i>Case c: Luke and Leia can escape in s steps.</i> or of the form
<i>Case c: Luke and Leia cannot escape.</i> c and s are decimal integers. c in the number of the
case being processed (starting with 1) and s is the minimum number of time steps Luke and Leia
require to reach the southeast corner. Each line should be terminated by exactly one <EOL>.



*******IOTestCases*******


<pre>
<b>Input:</b>
5 5 1
00000
00000
00000
00000
00000
5 5 2
00000
00000
00000
00000
00000
01110
01110
11111
01110
01110
0 0 0

<b>Output:</b>
Case 1: Luke and Leia can escape in 8 steps.
Case 2: Luke and Leia cannot escape.

</pre>



______________________________________________________
DNPALIN||||||true||||||


<p>C-3PO is an expert in pretty much every language. His conversation with R2-D2 are always fun to
observe un that R2-D2 speaks in Droid, C-3PO speak in English, and they understand each other
perfectly! Anyway, humans and droids both enjoy playing word games. A palindrome is a word or
sequence of one or more letters that reads the same forwards and backwards. A near palindrome is
a word or sequence that can be changed to or kept a palindrome by changing exactly one letter to a
different letter. For example. BAT is a near palindrome, since changing the T to a B woluld make
the word a palindrome: BAB. PEEP is not a near palindrome: although PEEP is palindrome,
changing any letter would remove its palindrome status. A double near palindrome is a word or
sequence that consist of two near palindromes concatenated together. For example, BATMAN is
a double near palindrome, since BAT and MAN are both near palindromes. Given a list of words,
you are to determine wich words are double near palindromes and wich are not.



*******InputConstraints*******

<p>The input consists of one or more words. All words (except the last) will be inclusively between 1
and 25 letters long and will consist of entirely of capital letters. The last word will be *END* and
is not be processed; it simply indicates the end of the input. There may be any number of spaces
and <EOL> characters before, after, and between words.



*******OutputConstraints*******

<p>The output cases are to appear in the same order in wich they appear in the input. For each input
case, you are to print either w is a double near palindrome. or w is not a double near
palindrome. wichever is appropriate, where w is the input word. Exactly one <EOL> should follow
each output case (meaning there should be no blank lines in the output).



*******IOTestCases*******


<pre>
<b>Input:</b>
BATMAN
CONSTANTINOPLE
*END*

<b>Output:</b>
BATMAN is a double near palindrome.
CONSTANTINOPLE is not a double near palindrome.

</pre>



______________________________________________________
KNIGHTSR||||||true||||||


<p>A group of Jedi Knights is having a competition. One of the Knights at random stands
within a circle. The other Knights, in a random order, challenge him. If a challenger de-
feats the Knight of the Round Circle, that Knight must leave the contest. The challenger
then becomes the new Knight of the Round Circle and, as such, will face all subsequent
challengers until he is defeated. If the current Knight of the Round Circle wins the chal-
lenge, he stays within the circle and the challenger must leave the competition. The Knight
within the circle at the end of the competition is deemed the winer. You may assume that
no two Knights have exactly the same skill and that a stronger Knight will always defeat
a weaker Knight.<br><br>
Suppose there are three Knights in the competition. If the strongest one happens to stand
in the circle first, he will not be defeated, so no one will ever leave the circle. If the weakest
one happens to be first in the circle, he will be kicked out after his first match. If th e
Knight that defeated him was the strongest, he will win the final challenge as well (so only
one Knight will ever leave the circle),otherwise the strongest Knight will kick the middle
Knight out of the circle during his challenge (so that two Knights leave the circle). If the
middle Knight stands in the circle first, he will be the only one kicked out of the circle, no
matter what order the other two come at him. All in all, an average of 5/6 or 0.83 Knight
will leave the circle during the competition.<br><br>
You are to compute the average number of Knights to leave the circle during a competition
given the number of Knights in the competition.



*******InputConstraints*******

<p>The input consists of several lines. Each line (but the last) will contain one positive decimal
integer no larger than 10000. This integer is followed by exactly one <EOL>. These integers
represent the number of Knights in the competition. The last line will contain one zero,
followed by <EOL>. This line is not to be processed; it merely signifies the end of the input.



*******OutputConstraints*******

<p>The output cases are to appear in the same order in wich they appear in the input. For
each case, you are to print With c competitors, a Jedi Knight will be replaced
approximately t times. c is the number of competitors in this case and should be a
decimal integer. t is the average number of times a Jedi Knight leaves the circle and
should be a floating point decimal number with exactly two digits following the decimal
point. There should always be at least one digit before the decimal point (use 0.50 rather
.50, for example) The statement should be followed by two <EOL>&#8217;s, wich is to say that a
blank line should follow every output case.



*******IOTestCases*******


<pre>
<b>Input:</b>
3
1000
0

<b>Output:</b>
With 3 competitors, a Jedi Knight will be replaced approximately 0.83 times.

With 1000 competitors, a Jedi Knight will be replaced approximately 6.49 times.

</pre>



______________________________________________________
TRIBE2||||||true||||||


<p>The Kazooba tribe contains N men, who want to gather for a tribe council. The men are all descendants of a single one, who is the chief of the tribe. Since the people of this tribe are quite long lived, every person's ancestors, including the chief, are alive and will be attending the council.
<p>The men arrive at the council in some particular order and they are seated as they arrive. The men sit in a row of parallel tables. The first table is at the base of the Holy Mountain and the row extends indefinitely to the West (away from the Mountain). Unfortunately, each man doesn't get along with his father and his sons, so he doesn't want to sit at the same table with any of them. On the other hand, each man wants to be as close to divinity as possible, so, when he arrives at the council, he goes to the table closest to the Holy Mountain, where none of his children or father is already seated.
<p>As usual, the Gods of the tribe have a certain inclination for grandeur. Therefore, they would like to command the men to arrive in such an order, as to maximize the number of tables that are occupied. Unfortunately, they do not have any inclination for programming, so they have ordered you to write a program for that.
<p>Write a program that determines the maximum number of tables that can end up being occupied.


*******InputConstraints*******

<p>The first line of the input file contains an integer N, representing the number of men in the tribe. All men are numbered from 1 to N; the chief is number 1. Each of the following lines describe a father&#8211;son relation and
contains two integers A B separated by a blank, meaning that person number A is the father of the person number
B. The relations described in the file are correct (for instance, there are no "cycles" and each person is a
descendent of the chief).



*******OutputConstraints*******

<p>The output file should contain a single line with the maximum number of tables that can be occupied.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 4
3 2
1 3
3 5

<b>Output:</b>
3


<b>Explanation:</b> 
If men arrive in the order 2 4 1 5 3, the following happens:
<ul><li>2 goes to the first table</li><li>4 goes to the first table</li><li>1 has a son (4) at the first table, so he goes to the second table</li><li>5 goes to the first table</li><li>3 has two sons at the first table (2 and 5) and his father (1) is at
the second table, so he goes to the third table</li>
</pre>


______________________________________________________
NOTOKNOT||||||true||||||


<p>Disentangling of string loops is a classical 3D- puzzle. A designer of one of these puzzles wants
to know if two given string loops can be disentangled or not. <br> <br>
The designer says that a string loop configuration that can be disentangled is a Notknot. In
fact, he says that knots are those string loops that can not be disentangled. <br> <br>
Your task is to write a program to help the puzzle designer deciding if some configurations
can or cannot be disentangled. In the problems that you are going to solve, loops are defined by
straight segments in the space between points with integer coordinates. Then, a loop is described
with a list of p points with integral coordinates for some p &#8805; 3. <br> <br>


*******InputConstraints*******

<p>Input consists of N test cases (1 &#8804; N &#8804; 1000). The number N is given in the first line of the input.<br><br> 
Each test case contains the description of two loops, each one in a line. A description for a p points loop (3 &#8804; p &#8804; 20) is given in one input line with 3p integer numbers separated by blanks:<br> <br><p><p>
<center> x1 y1 z1 x2 y2 z2 . . . xp yp zp </center>
<br><br><p><p>
    what represents the loop:<br><br><p><p>
                     <p> <center>(x1 , y1 , z1 ) &#8722; (x2 , y2 , z2 ) &#8722; &#183; &#183; &#183; &#8722; (xp , yp , zp ) &#8722; (x1 , y1 , z1 )</center><br><br><p><p>
    where there is a straight segment between adjacent coordinates.<br>

*******OutputConstraints*******

<p>For each analyzed case, one line classifying the case: Notknot or Knot.


*******IOTestCases*******

<pre>
<b>Input:</b>
3
10 0 0 0 0 -10 0 10 0 0 0 10
5 0 0 -10 -10 0 0 5 0 10 10 0
10 0 0 0 0 -10 0 10 0 0 0 10
15 0 0 -10 -10 0 0 5 0 10 10 0
1 0 0 0 1 0 0 0 1
10 10 0 0 10 0 0 0 10 10 0 0 25 5 0 3 3 0


<b>Output:</b>
Notknot
Knot
Notknot

</pre>



______________________________________________________
LAGRANGE||||||true||||||


<p>The fact that any positive integer has a representation as the sum of at most four positive squares (i.e. squares of positive integers) is known as Lagrange's Four-Square Theorem. The first published proof of the theorem was given by Joseph-Louis Lagrange in 1770. Your mission however is not to explain the original proof nor to discover a new proof but to show that the theorem holds for some specific numbers by counting how many such possible representations there are.
For a given positive integer n, you should report the number of all representations of n as the sum of at most four positive squares. The order of addition does not matter, e.g. you should consider 4^2 + 3^2 and 3^2 + 4^2 are the same representation.
<br><br>
For example, let's check the case of 25. This integer has just three representations 1^2+2^2+2^2+4^2, 3^2 + 4^2, and 5^2. Thus you should report 3 in this case. Be careful not to count 4^2 + 3^2 and 3^2 + 4^2 separately. 


*******InputConstraints*******

<p>The input is composed of at most 255 lines, each containing a single positive integer less than 2^15 , followed
by a line containing a single zero. The last line is not a part of the input data.



*******OutputConstraints*******

<p>The output should be composed of lines, each containing a single integer. No other characters should
appear in the output. The output integer corresponding to the input integer n is the number of all
representations of n as the sum of at most four positive squares.



*******IOTestCases*******


<pre>
<b>Input:</b>
1
25
2003
211
20007
0

<b>Output:</b>
1
3
48
7
738

</pre>



______________________________________________________
SAMER08A||||||true||||||


<p>Finding the shortest path that goes from a starting point to a destination point given a set of points and route lengths connecting them is an already well known problem, and it's even part of our daily lives, as shortest path programs are widely available nowadays.<br /><br /> Most people usually like very much these applications as they make their lives easier. Well, maybe not that much easier.<br /><br /> Now that almost everyone can have access to GPS navigation devices able to calculate shortest paths, most routes that form the shortest path are getting slower because of heavy traffic. As most people try to follow the same path, it's not worth it anymore to follow these directions.<br /><br /> With this in his mind, your boss asks you to develop a new application that only he will have access to, thus saving him time whenever he has a meeting or any urgent event. He asks you that the program must answer not the shortest path, but the almost shortest path. He defines the almost shortest path as the shortest path that goes from a starting point to a destination point such that no route between two consecutive points belongs to any shortest path from the starting point to the destination.<br /><br /> For example, suppose the figure below represents the map given, with circles representing location points, and lines representing direct, one-way routes with lengths indicated. The starting point is marked as S and the destination point is marked as D. The bold lines belong to a shortest path (in this case there are two shortest paths, each with total length 4). Thus, the almost shortest path would be the one indicated by dashed lines (total length 5), as no route between two consecutive points belongs to any shortest path. Notice that there could exist more than one possible answer, for instance if the route with length 3 had length 1. There could exist no possible answer as well.<br /></p>
<p><img src="http://www.spoj.pl../../../content/disatoba:almost.gif" border="0" alt="subir imagenes" /></p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains two integers <em>N</em> (2   &le; <em>N</em> &le; 500) and <em>M</em> (1   &le; <em>M</em> &le; 10<sup>4</sup>), separated by a single space, indicating respectively the number of points in the map and the number of existing one-way routes connecting two points directly. Each point is identified by an integer between 0 and <em>N</em> -1.  The second line contains two integers <em>S</em> and <em>D</em>, separated by a single space, indicating respectively the starting and the destination points (<em>S</em> &ne; <em>D</em>; 0   &le; <em>S</em>, <em>D</em> &lt;  <em>N</em>). <br /><br /> Each one of the following <em>M</em> lines contains three integers <em>U</em>, <em>V</em> and <em>P</em> (<em>U</em> &ne; <em>V</em>; 0   &le; <em>U</em>, <em>V</em> &lt;  <em>N</em>; 1   &le; <em>P</em> &le; 10<sup>3</sup>), separated by single spaces, indicating the existence of a one-way route from <em>U</em> to <em>V</em> with distance <em>P</em>.  There is at most one route from a given point <em>U</em> to a given point <em>V</em>, but notice that the existence of a route from <em>U</em> to <em>V</em> does not imply there is a route from <em>V</em> to <em>U</em>, and, if such road exists, it can have a different length. The end of input is indicated by a line containing only two zeros separated by a single space.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing  <tt>-1</tt> if it is not possible to match the requirements, or an integer representing the length of the almost shortest path found. <br /></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
7 9
0 6
0 1 1
0 2 1
0 3 2
0 4 3
1 5 2
2 6 4
3 6 2
4 6 4
5 6 1
4 6
0 2
0 1 1
1 2 1
1 3 1
3 2 1
2 0 3
3 0 2
6 8
0 1
0 1 1
0 2 2
0 3 3
2 5 3
3 4 2
4 1 1
5 1 1
3 0 1
0 0


<strong>Output:</strong>
5
-1
6

</pre>


______________________________________________________
SAMER08B||||||true||||||


<p>What do you get if you multiply 6 by 9? The answer, of course, is 42, but only if you do the calculations in base 13.</p>
<p>Given an integer <em>B</em> &ge; 2, the <em>base <em>B</em> numbering system</em> is a manner of writing integers using only digits between 0 and <em>B</em> -1, inclusive. In a number written in base <em>B</em>, the rightmost digit has its value multiplied by 1, the second rightmost digit has its value multiplied by <em>B</em>, the third rightmost digit has its value multiplied by <em>B</em><sup>2</sup>, and so on.</p>
<p>Some equations are true or false depending on the base they are considered in. The equation 2+2=4, for instance, is true for any <em>B</em> &ge; 5 - it does not hold in base 4, for instance, since there is no digit '4' in base 4. On the other hand, an equation like 2+2=5 is never true.</p>
<p>Write a program that given an equation determines for which bases it holds.</p>

*******InputConstraints*******

<p>Each line of the input contains a test case; each test case is an equation of the form "<tt>EXPR=EXPR</tt>", where both  "<tt>EXPR</tt>" are arithmetic expressions with at most 17 characters.</p>
<p>All expressions are valid, and contain only the characters '<tt>+</tt>', '<tt>*</tt>' and the digits from '<tt>0</tt>' to '<tt>9</tt>'. No expressions contain leading plus signs, and no numbers in it have leading zeros.</p>
<p>The end of input is indicated by a line containing only "<tt>=</tt>".</p>

*******OutputConstraints*******

<p>For each test case in the input your program should produce a single line in the output, indicating for which bases the given equation holds.</p>
<p>If the expression is true for infinitely many bases, print  "<tt>B+</tt>", where <em>B</em> is the first base for which the equation holds.</p>
<p>If the expression is valid only for a finite set of bases, print them in ascending order, separated by single spaces.</p>
<p>If the expression is not true in any base, print the character '<tt>*</tt>'.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6*9=42
10000+3*5*334=3*5000+10+0
2+2=3
2+2=4
0*0=0
=


<strong>Output:</strong>
13
6 10
*
5+
2+

</pre>


______________________________________________________
SAMER08C||||||true||||||


<p>Little Charlie is a nice boy addicted to candies. He is even a subscriber to  All Candies Magazine and was selected to participate in the International Candy Picking Contest.</p>
<p>In this contest a random number of boxes containing candies are disposed in <em>M</em> rows with <em>N</em> columns each (so, there are a total of <em>M</em> &times;<em>N</em> boxes). Each box has a number indicating how many candies it contains.</p>
<p>The contestant can pick a box (any one) and get all the candies it contains. But there is a catch (there is always a catch): when choosing a box, all the boxes from the rows immediately above and immediately below are emptied,  as well as the box to the left and the box to the right of the chosen box.  The contestant continues to pick a box until there are no candies left.</p>
<p>The figure bellow illustrates this, step by step. Each cell represents one box and the number of candies it contains. At each step, the chosen box is circled and the shaded cells represent the boxes that will be emptied. After eight steps the game is over and Charlie picked 10+9+8+3+7+6+10+1 = 54 candies. <br /><br /></p>
<img src="http://www.spoj.pl../../../content/disatoba:candy.png" border="0" alt="subir imagenes" />
<p><br /><br /> For small values of <em>M</em> and <em>N</em>, Charlie can easily find the maximum number of candies he can pick, but when the numbers are really large he gets completely lost. Can you help  Charlie maximize the number of candies he can pick?</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains two positive integers <em>M</em> and <em>N</em> (1   &le; <em>M</em> &times;<em>N</em> &le; 10<sup>5</sup>), separated by a single space, indicating the number of rows and columns respectively. Each of the following <em>M</em> lines contains <em>N</em> integers separated by single spaces, each representing the initial number of candies in the corresponding box. Each box will have initially at least 1 and at most 10<sup>3</sup> candies.</p>
<p>The end of input is indicated by a line containing two zeroes separated by a single space.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing a single value, the integer indicating the maximum number of candies that Charlie can pick.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

5 5
1 8 2 1 9
1 7 3 5 2
1 2 10 3 10
8 4 7 9 1
7 1 3 1 6
4 4
10 1 1 10
1 1 1 1
1 1 1 1
10 1 1 10
2 4
9 10 2 7
5 1 1 5
0 0

<strong>Output:</strong>
54
40
17

</pre>


______________________________________________________
SAMER08D||||||true||||||


<p>Thomas, a computer  scientist that works with DNA  sequences, needs to compute  longest  common  subsequences  of  given  pairs  of  strings. Consider   an    alphabet   &Sigma;    of   letters   and    a   word <em>w</em>=<em>a</em><sub>1</sub><em>a</em><sub>2</sub> &hellip;<em>a</em><sub><em>r</em></sub>, where  <em>a</em><sub><em>i</em></sub> &isin; &Sigma;, for  <em>i</em> = 1, 2,  &hellip;,<em>r</em>.      A     <em>subsequence</em> of     <em>w</em> is     a     word <em>x</em>=<em>a</em><sub><em>i</em><sub>1</sub></sub><em>a</em><sub><em>i</em><sub>2</sub></sub> &hellip;<em>a</em><sub><em>i</em><sub><em>s</em></sub></sub> such that 1  &le; <em>i</em><sub>1</sub> &lt;  <em>i</em><sub>2</sub> &lt;   &hellip; &lt; <em>i</em><sub><em>s</em></sub> &le; <em>r</em>.    Subsequence  <em>x</em> is  a  <em>segment</em> of  <em>w</em> if <em>i</em><sub><em>j</em>+1</sub>=<em>i</em><sub><em>j</em></sub> + 1, for  <em>j</em> = 1,2, &hellip;,<em>s</em> -1.   For example  the word <tt>ove</tt> is a segment  of the  word <tt>lovely</tt>,  whereas the word  <tt>loly</tt> is  a subsequence  of <tt>lovely</tt>,  but  not a segment.</p>
<p>A word is a <em>common subsequence</em> of two words <em>w</em><sub>1</sub> and <em>w</em><sub>2</sub> if it is a subsequence of each  of the two words.  A <em>longest common   subsequence</em> of <em>w</em><sub>1</sub> and <em>w</em><sub>2</sub> is a common subsequence of <em>w</em><sub>1</sub> and <em>w</em><sub>2</sub> having  the largest possible length.  For  example, consider the words  <em>w</em><sub>1</sub>=<tt>lovxxelyxxxxx</tt> and <em>w</em><sub>2</sub>=<tt>xxxxxxxlovely</tt>. The words <em>w</em><sub>3</sub>=<tt>lovely</tt> and <em>w</em><sub>4</sub>=<tt>xxxxxxx</tt>, the latter of  length 7, are  both common  subsequences of  <em>w</em><sub>1</sub> and  <em>w</em><sub>2</sub>.  In fact, <em>w</em><sub>4</sub> is their longest common subsequence. Notice that the empty word, of  length zero,  is always a  common subsequence,  although not necessarily the longest.</p>
<p>In the case of Thomas,  there is an extra requirement: the subsequence must be  formed from  common segments having  length <em>K</em> or  more. For example,   if   Thomas  decides   that   <em>K</em>=3,   then  he   considers <tt>lovely</tt> to   be   an   acceptable  common   subsequence   of <tt>lovxxelyxxxxx</tt> and     <tt>xxxxxxxlovely</tt>,     whereas <tt>xxxxxxx</tt>, which has length 7 and is also a common subsequence, is not acceptable. Can you help Thomas?</p>

*******InputConstraints*******

<p>The input contains  several test cases. The first line  of a test case contains an integer <em>K</em> representing the minimum length of common segments, where 1   &le; <em>K</em> &le; 100.   The next  two lines  contain each  a  string on lowercase letters from the regular  alphabet of 26 letters. The length <em>l</em> of each  string satisfies  the  inequality 1   &le; <em>l</em> &le; 10<sup>3</sup>.  There are no spaces on any  line in the input.  The end of the input is indicated by a line containing a zero.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each  test case  in the  input, your program  must print  a single line,  containing the  length  of the  longest  subsequence formed  by consecutive segments of length at  least <em>K</em> from both strings.  If no such  common subsequence  of  length greater  than  zero exists,  then <tt>0</tt> must be printed.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
lovxxelyxxxxx
xxxxxxxlovely
1
lovxxelyxxxxx
xxxxxxxlovely
3
lovxxxelxyxxxx
xxxlovelyxxxxxxx
4
lovxxxelyxxx
xxxxxxlovely
0


<strong>Output:</strong>
6
7
10
0

</pre>


______________________________________________________
SAMER08E||||||true||||||


<p>Martin and Isa stopped playing crazy games and finally got married. It's good news! They're pursuing a new life of happiness for both and, moreover, they're moving to a new house in a remote place, bought with most of their savings.</p>
<p>Life is different in this new place. In particular, electricity is very expensive, and  they want to keep everything under control. That's why Martin proposed to keep a daily record of how much electricity has been consumed in the house. They have an electricity meter, which displays a number with the amount of KWh (kilowatt-hour) that has been consumed since their arrival.</p>
<p>At the beginning of each day they consult the electricity meter, and write down the consumption. Some days Martin does it, and some days Isa does. That way, they will be able to look at the differences of consumption between consecutive days and  know how much has been consumed.</p>
<p>But some days they simply forget to do it, so, after a long time, their register is now incomplete. They have a list of dates and consumptions, but not all of the dates are consecutive. They want to take into account only the days for which the consumption can be precisely determined, and they need help.</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of each test case contains one integer <em>N</em> indicating the number of measures that have been taken (2   &le; <em>N</em> &le; 10<sup>3</sup>). Each of the <em>N</em> following lines contains four integers <em>D</em>, <em>M</em>, <em>Y</em> and <em>C</em>, separated by single spaces,  indicating respectively the day (1   &le; <em>D</em> &le; 31), month (1   &le; <em>M</em> &le; 12), year (1900   &le; <em>Y</em> &le; 2100), and consumption (0   &le; <em>C</em> &le; 10<sup>6</sup>) read at the beginning of that day. These <em>N</em> lines are increasingly ordered by date, and may include leap years. The sequence of consumptions is strictly increasing (this is, no two different readings have the same number). You may assume that <em>D</em>, <em>M</em> and <em>Y</em> represent a valid date.</p>
<p>Remember that a year is a leap year if it is divisible by 4 and not by 100, or well, if the year is divisible by 400.</p>
<p>The end of input is indicated by a line containing only one zero.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line containing two integers separated by a single space:  the number of days for which a consumption can be precisely determined, and the sum of the consumptions for those days.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
9 9 1979 440
29 10 1979 458
30 10 1979 470
1 11 1979 480
2 11 1979 483
3
5 5 2000 6780
6 5 2001 7795
7 5 2002 8201
8
28 2 1978 112
1 3 1978 113
28 2 1980 220
1 3 1980 221
5 11 1980 500
14 11 2008 600
15 11 2008 790
16 12 2008 810
0


<strong>Output:</strong>
2 15
0 0
2 191

</pre>


______________________________________________________
SAMER08F||||||true||||||


<p>Richard Phillips Feynman was a well known American physicist and a recipient of the Nobel Prize in Physics. He worked in theoretical physics and also pioneered the field of quantum computing.  He visited South America for ten months, giving lectures and enjoying life in the tropics.  He is also known for his books "Surely You're Joking, Mr.  Feynman!" and "What Do You Care What Other People Think?", which include some of his adventures below the equator.</p>
<p>His life-long addiction was solving and making puzzles, locks, and cyphers.  Recently, an old farmer in South America, who was a host to the young physicist in 1949, found some papers and notes that is believed to have belonged to Feynman. Among notes about mesons and electromagnetism, there was a napkin where he wrote a simple puzzle: "how many different squares are there in a grid of <em>N</em> &times;<em>N</em> squares?".</p>
<p>In the same napkin there was a drawing which is reproduced below, showing that, for <em>N</em>=2, the answer is 5. <br /><br /></p>
<img src="http://www.spoj.pl../../../content/disatoba:feynman.gif" border="0" alt="subir imagenes" />

*******InputConstraints*******

<p>The input contains several test cases. Each test case is composed of a single line, containing only one integer <em>N</em>, representing the number of squares in each side of the grid (1   &le; <em>N</em> &le; 100).</p>
<p>The end of input is indicated by a line containing only one zero.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing the number of different squares for the corresponding input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1
8
0


<strong>Output:</strong>
5
1
204

</pre>


______________________________________________________
SAMER08G||||||true||||||


<p>In car races, there is always a high pole next to the finish line of the track. Before the race starts, the pole is used to display the starting grid. The number of the first car in the grid is displayed at the top of the pole, the number of the car in second place is shown below that, and so on.</p>
<p>During the race, the pole is used to display the current position of each car: the car that is winning the race has its number displayed at the top of the pole, followed by the car that is in second place, and so on.</p>
<p>Besides showing the current position of a car, the pole is also used to display the number of positions the cars have won or lost, relative to the starting grid. This is done by showing, side by side to the car number, an integer number.  A positive value <em>v</em> beside a car number in the pole means that car has won <em>v</em> positions relative to the starting grid. A negative value <em>v</em> means that car has lost <em>v</em> positions relative to the starting grid. A zero beside a car number in the pole means the car has neither won nor lost any positions relative to the starting grid (the car is in the same position it started).</p>
<p>&nbsp;</p>
<p><img src="http://www.spoj.pl../../../content/disatoba:pole.gif" border="0" alt="subir imagenes" /></p>
<p>&nbsp;</p>
<p>We are in the middle of the Swedish Grand Prix, the last race of the World Championship. The race director, Dr.&nbsp;Shoo Makra, is getting worried: there have been some complaints that the software that controls the pole position system is defective, showing information that does not reflect the true race order.</p>
<p>Dr.&nbsp;Shoo Makra devised a way to check whether the pole system is working properly.  Given the information currently displayed in the pole, he wants to reconstruct the starting grid of the race. If it is possible to reconstruct a valid starting grid, he plans to check it against the real starting grid.  On the other hand, if it is not possible to reconstruct a valid starting grid, the pole system is indeed defective.</p>
<p>Can you help Dr.&nbsp;Shoo Makra?</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains one integer <em>N</em> indicating the number of cars in the race (2  &le; <em>N</em> &le; 10<sup>3</sup>). Each of the next <em>N</em> lines contains two integers <em>C</em> and <em>P</em>, separated by one space, representing respectively a car number (1   &le; <em>C</em> &le; 10<sup>4</sup>) and the number of positions that car has won or lost relative to the starting grid ( -10<sup>6</sup> &le; <em>P</em> &le; 10<sup>6</sup>), according to the pole system. All cars in a race have different numbers.</p>
<p>The end of input is indicated by a line containing only one zero.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing the reconstructed starting grid, with car numbers separated by single spaces.  If it is not possible to reconstruct a valid starting grid, the line must contain only the value <tt>-1</tt>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1 0
3 1
2 -1
4 0
4
22 1
9 1
13 0
21 -2
3
19 1
9 -345
17 0
7
2 2
8 0
5 -2
7 1
1 1
9 1
3 -3
0


<strong>Output:</strong>
1 2 3 4
-1
-1
5 8 2 3 7 1 9

</pre>


______________________________________________________
SAMER08H||||||true||||||


<p>It's been 100 years since the detection of the first Higgs boson and now particle physics is a mainstream subject in all high schools. Obviously, kids love the fact that they can create tiny black holes using only their portable particle accelerators and show off to their friends and colleagues. Although the creation of big black holes that could swallow the whole planet is possible even with these portable particle accelerators, the devices are programmed to only thrown particles when this undesirable side effect is impossible.</p>
<p>Your granddaughter is trying to create her own black holes with a portable accelerator kit, which is composed of two small particle accelerators that throw, each one, a boson-sized particle. Both particles are thrown at the same time, and a black hole appears when the particles collide. However, your granddaughter doesn't know how much time she'll have to wait before this happens. Fortunately, each accelerator can predict the particle's trajectory, showing four integer values into its display, called <em>A</em>, <em>B</em>, <em>C</em> and <em>D</em>. Each value can be replaced into the following equations:</p>
<table style="width: 100%;" border="0">
<tbody>
<tr>
<td>
<table border="0" cellspacing="0" cellpadding="0" align="center">
<tbody>
<tr>
<td align="center">&nbsp;</td>
<td align="center">
<table border="0">
<tbody>
<tr>
<td align="center">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td align="center"><em>r</em> = <em>At</em> + <em>B</em></td>
</tr>
</tbody>
</table>
</td>
</tr>
<tr>
<td align="center">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td align="center">&theta; =  <em>Ct</em> + <em>D</em></td>
</tr>
</tbody>
</table>
</td>
</tr>
</tbody>
</table>
</td>
<td align="center">&nbsp;</td>
</tr>
</tbody>
</table>
</td>
</tr>
</tbody>
</table>
<p>in order to determine the trajectory of the particle, in polar coordinates. The radius (r) is represented in distance units and the angle (&theta;) in degrees. The time (t) is given in time units and it is always a rational value which can be represented by an irreducible fraction. Your granddaughter knows that in polar coordinates a point has infinite representations. In general, the point (<em>r</em>, &theta;) can be represented as (<em>r</em>, &theta; &plusmn;<em>k</em> &times;360<sup><em>o</em></sup>) or ( -<em>r</em>, &theta; &plusmn;(2<em>k</em> + 1) &times;180<sup><em>o</em></sup>), where <em>k</em> is any integer. Besides, the origin (<em>r</em> = 0) can be represented as (0, &theta;) for any &theta;.</p>
<p>Using these parameters informed by each particle accelerator, your granddaughter wants to determine whether the particles will eventually collide and, if they do, the time when they will collide. After the first collision it is impossible to predict the particle's trajectory, therefore, only the first possible collision should be considered.</p>
<p>Although your granddaughter is really intelligent and has a deep knowledge of particle physics, she does not know how to program computers and is looking for some notes in her grandfather's (or grandmother's) ICPC notebook (don't forget, she is <em>your</em> granddaughter!). Fortunately for you, there is a note on your notebook which says that you wrote that code during the 2008 ICPC South America Regional Contest (or, to be more specific, <em>this</em> contest).</p>

*******InputConstraints*******

<p>The input consists of several test cases, one per line. Each test case contains eight integer numbers separated by single spaces, <em>A</em><sub>1</sub>, <em>B</em><sub>1</sub>,<em>C</em><sub>1</sub>, <em>D</em><sub>1</sub>, <em>A</em><sub>2</sub>, <em>B</em><sub>2</sub>, <em>C</em><sub>2</sub>, <em>D</em><sub>2</sub> ( -10<sup>4</sup> &le; <em>A</em><sub>1</sub>, <em>B</em><sub>1</sub>, <em>C</em><sub>1</sub>, <em>D</em><sub>1</sub>, <em>A</em><sub>2</sub>,<em>B</em><sub>2</sub>, <em>C</em><sub>2</sub>, <em>D</em><sub>2</sub> &le; 10<sup>4</sup>).  The first four input values (<em>A</em><sub>1</sub>, <em>B</em><sub>1</sub>,<em>C</em><sub>1</sub>, <em>D</em><sub>1</sub>) correspond to the four parameters displayed by the first portable particle accelerator and the following input values (<em>A</em><sub>2</sub>,<em>B</em><sub>2</sub>, <em>C</em><sub>2</sub>, <em>D</em><sub>2</sub>) correspond to the four parameters displayed by the second portable particle accelerator when both particles are thrown. The end of the input is represented by <em>A</em><sub>1</sub> = <em>B</em><sub>1</sub> = <em>C</em><sub>1</sub> = <em>D</em><sub>1</sub> = <em>A</em><sub>2</sub> = <em>B</em><sub>2</sub> = <em>C</em><sub>2</sub> = <em>D</em><sub>2</sub> = 0, which should not be processed as a test case, since these are the values displayed by the particle accelerators when a big black hole would be created if the particles were trown. Although the end of input is represented by a line with eight zeroes, note that the number zero is a possible input value.</p>

*******OutputConstraints*******

<p>For each test case, your program must output a line containing two non-negative integers <em>t</em><sub><em>a</em></sub> and <em>t</em><sub><em>b</em></sub> separated by a single space. If there is no possibility of collision, <em>t</em><sub><em>a</em></sub> = <em>t</em><sub><em>b</em></sub> = 0, otherwise, <em>t</em><sub><em>a</em></sub>/<em>t</em><sub><em>b</em></sub> must be an irreducible fraction representing the earliest collision time. Even if the fraction results in an integer value, you still must output the number 1 as the denominator (see samples below).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1 1 180 0 2 0 180 360
10 10 360 0 -24 18 180 72
5 5 180 0 -12 9 10 40
-9 5 5 180 2 5 5 180
0 0 0 0 0 0 0 0


<strong>Output:</strong>
1 1
0 0
4 17
0 1

</pre>


______________________________________________________
SAMER08I||||||true||||||


<p>Once upon a time there was a very peaceful country named Nlogonia. Back then, Poly the Shoemaker could come to the country and travel freely from city to city doing his job  without any harassment. This task was very easy, as every city in Nlogonia had a direct road to every other city in the country. He could then easily travel the whole country visiting each city exactly once and fixing everybody's shoes.</p>
<p>But not anymore. The times have changed and war has come to Nlogonia. The age when people could travel freely is over.</p>
<p>Confederations identified by colors were formed among the cities all over the country, and now each city belongs to at least one and at most two confederations. When trying to enter a city, you must give to the border officer a ticket from one of the confederations this city belongs to. When leaving the city, you receive a ticket from the other confederation the city belongs to (i.e. different from the one you gave when entering) or from the same confederation if the city only belongs to one.</p>
<p>As Poly the Shoemaker is a long time friend of Nlogonia, he is allowed to choose a ticket and a city he wants to enter as the first city in the country,  but after that he must obey the confederations rules. He wants to do the same routine he did before, visiting each city exactly once in Nlogonia, but now it's not easy for him to do this, even though he can choose where to start his journey.</p>
<p>For example, suppose there are four cities, labeled from 0 to 3. City 0 belongs to confederations <em>red</em> and <em>green</em>; city 1 belongs only to <em>red</em>; city 2 belongs to <em>green</em> and <em>yellow</em>; and city 3 belongs to <em>blue</em> and <em>red</em>. If Poly the Shoemaker chooses to start at city 0, he can enter it carrying either the <em>red</em> or the  <em>green</em> ticket and leave receiving the other.  Should he choose the <em>red</em> ticket, he will leave with a <em>green</em> ticket,  and then there is only city 2 he can travel to. When leaving city 2 he receives the <em>yellow</em> ticket and now can't go anywhere else. If he had chosen the <em>green</em> ticket as the first he would receive the <em>red</em> one when leaving,  and then he could travel to cities 1 or 3. If he chooses city 3, when leaving he will receive the <em>blue</em> ticket and again can't go anywhere else. If he chooses city 1, he receives the <em>red</em> ticket again when leaving (city 1 belongs only to the <em>red</em> confederation) and can only travel to city 3 and will never get to city 2. Thus, it is not possible to visit each city exactly once starting at city 0. It is possible, however, starting at city 2 with the <em>yellow</em> ticket,  leaving the city with the <em>green</em> ticket, then visiting city 0, leaving with <em>red</em> ticket, then visiting city 1, leaving with <em>red</em> ticket again and, at last, visiting city 3.</p>
<p>As you can see, it got really difficult for Poly the Shoemaker to accomplish the task, so he asks you to help him. He wants to know if it's possible to choose a city to start such that he can travel all cities from Nlogonia exactly once.</p>
<p>Can you help Poly the Shoemaker?</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains two integers <em>N</em> and <em>C</em>, separated by one space, indicating  respectively the number of cities (1   &le; <em>N</em> &le; 500) and confederations  (1   &le; <em>C</em> &le; 100) in the country. Each of the next <em>C</em> lines describes a confederation. It starts with one integer <em>K</em> (0   &le; <em>K</em> &le; <em>N</em>) and then <em>K</em> integers representing the cities which belong to this confederation. All integers are separated by single spaces  and cities are numbered from 0 to <em>N</em> -1. Each city will appear at least once and at most twice and no city will be repeated on the same confederation.</p>
<p>The end of input is indicated by a line containing two zeroes separated by a single space.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing the integer <tt>-1</tt> if it's not possible to match the requirements or one integer representing the city where Poly the Shoemaker can start his journey. If there are multiple correct answers, print the smallest one.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4 4
1 3
3 0 1 3
2 0 2
1 2
3 4
1 0
3 0 1 2
1 1
1 2
3 4
1 1
2 1 0
2 0 2
1 2
0 0


<strong>Output:</strong>
2
-1
1

</pre>


______________________________________________________
SAMER08J||||||true||||||


<p>Bora Bora is a simple card game for children, invented in the South Pacific Island of the same name. Two or more players can play, using a deck of standard cards. Cards have the usual ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen and King. Each card has also one of four suits: Clubs, Diamonds, Hearts and Spades.</p>
<p>Players sit on a circle around the table and play by turns.  The next player to play may be the one to the left (clockwise direction) or to the right (counter-clockwise direction) of the current player, depending on the cards played, as we will see. At the start, the direction of play is clockwise.</p>
<p>The deck is shuffled and each player is dealt a hand of cards. The remaining of the deck is placed, face down, on the table; this is called the <em>stock</em> pile.  Then the first (topmost) card is removed from the stock and placed on the table, face up, starting another pile, called the <em>discard</em> pile.</p>
<p>The objective of the game is for a player to discard all his cards. At each turn, a player discards at most one card. A card can be discarded only if it has the same rank or the same suit as the topmost card on the discard pile. A player discards a card by placing it, face up, in the discard pile (this card becomes the topmost). If a player does not have a suitable card to discard on his turn, he must draw one card from the stock and add it to his hand; if he can discard that card, he does so, otherwise he does nothing else and his turn ends.  A player always discards the highest valued card he possibly can. The <em>value</em> of a card is determined first by the card rank and then by the card suit. The rank order is the rank itself (Ace is the lowest, King is the highest), and the suit order is, from lowest to highest, Clubs, Diamonds, Hearts and Spades. Therefore, the highest valued card is the King of Spades and the lowest valued card is the Ace of Clubs. As an example, a Queen of Diamonds has a higher value than a Jack (any suit) but has a lower value than a Queen of Hearts.</p>
<p>Some of the discarded cards affect the play, as follows:</p>
<p>&nbsp;</p>
<ul>
<li> when a Queen is discarded, the direction of play is reversed: if   the direction is clockwise, it changes to counter-clockwise, and   vice-versa;<br /><br /></li>
<li> when a Seven is discarded, the next player to play must draw two   cards from the stock (the number of cards in his hand   increases by two), and misses his turn (does not discard any   card);<br /><br /></li>
<li> when an Ace is discarded, the next player to play must draw one   card from the stock (the number of cards in his hand increases   by one), and misses his turn (does not discard any card);<br /><br /></li>
<li> when a Jack is discarded, the next player to play misses his turn   (does not discard any card).<br /><br /></li>
</ul>
<p>Notice that the penalty for the first card in the discard pile (the card draw from the stock at the beginning) is applied to the first player to play. For example, if the first player to play is <em>p</em> and the first card on the discard pile is an Ace, player <em>p</em> draws a card from the stock and does not discard any card on his first turn.  Also notice that if the first card is a Queen, the direction of play is reversed to counter-clockwise, but the first player to play remains the same.</p>
<p>The winner is the player who first discards all his cards (the game ends after the winner discards his last card).</p>
<p>Given the description of the shuffled deck and the number of players, write a program to determine who will win the game.</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case contains three integers <em>P</em>, <em>M</em> and <em>N</em>, separated by single spaces, indicating respectively the number of players (2   &le; <em>P</em> &le; 10), the number of cards distributed to each of the players at the beginning of the game (1   &le; <em>M</em> &le; 11) and the total number of cards in the shuffled deck (3   &le; <em>N</em> &le; 300). Each of the next <em>N</em> lines contains the description of one card.  A card is described by one integer <em>X</em> and one character <em>S</em>, separated by one space, representing respectively the card rank and the card suite. Card ranks are mapped to integers from 1 to 13 (Ace is 1, Jack is 11, Queen is 12 and King is 13).  Card suits are designated by the suit's first letter: '<tt>C</tt>' (Clubs), '<tt>D</tt>' (Diamonds), '<tt>H</tt>' (Hearts) or '<tt>S</tt>' (Spades).</p>
<p>Players are identified by numbers from 1 to <em>P</em>, and sit on a circle, in clockwise direction, 1, 2  &hellip;<em>P</em>, 1. The first <em>P</em>&times;<em>M</em> cards of the deck are dealt to the players: the first <em>M</em> cards to the first player (player 1), the next <em>M</em> to the second player (player 2), and so on. After dealing the cards to the players, the next card on the deck - the (<em>P</em> &times;<em>M</em> + 1)-th card - is used to start the discard pile, and the remaining cards form the stock. The (<em>P</em> &times;<em>M</em> + 2)-th card to appear on the input is the topmost card on the stock, and the last card to appear on the input (the <em>N</em>-th card) is the bottommost card of the stock (the last card that can be drawn). Player 1 is always the first to play (even when the card used to start the discard pile is a Queen). All test cases have one winner, and in all test cases the number of cards in the deck is sufficient for playing to the end of the game.</p>
<p>The end of input is indicated by a line containing only three zeros, separated by single spaces.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single line, containing the number of the player who wins the game.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 2 10
1 D
7 D
1 S
3 C
13 D
1 S
5 H
12 D
7 S
2 C
3 2 11
1 S
7 D
11 D
3 D
7 D
3 S
11 C
8 C
9 H
6 H
9 S
3 3 16
1 H
10 C
13 D
7 C
10 H
2 S
2 C
10 S
8 S
12 H
11 C
1 C
1 C
4 S
5 D
6 S
0 0 0


<strong>Output:</strong>
1
3
2

</pre>


______________________________________________________
SAMER08K||||||true||||||


<p>A polygon is said to be <em>inscribed</em> in a circle when all its vertices lie on that  circle.  In this problem you will be given a polygon inscribed in a circle, and you  must determine the minimum number of vertices that should be removed to  transform the given polygon into a <em>regular polygon</em>,  i.e., a polygon that is equiangular (all angles are  congruent) and equilateral (all edges have the same length).</p>
<p>When you remove a vertex <em>v</em> from a polygon you first remove  the vertex and the edges connecting it to its adjacent vertices <em>w</em><sub>1</sub> and   <em>w</em><sub>2</sub>, and then create a new edge connecting <em>w</em><sub>1</sub> and <em>w</em><sub>2</sub>.  Figure (a) below illustrates a polygon inscribed in a circle, with  ten vertices, and figure (b) shows a pentagon (regular polygon with  five edges) formed by removing five vertices from the polygon in (a). <br /><br /></p>
<img src="http://www.spoj.pl../../../content/disatoba:polygons.gif" border="0" alt="subir imagenes" />
<p>&nbsp;</p>
<p>In this problem, we consider that any polygon must have at least three edges.</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line of a test case  contains one integer <em>N</em> indicating the number of vertices of the  inscribed polygon (3   &le; <em>N</em> &le; 10<sup>4</sup>). The second line  contains <em>N</em> integers  <em>X</em><sub><em>i</em></sub> separated by single spaces (1   &le; <em>X</em><sub><em>i</em></sub> &le; 10<sup>3</sup>, for 0   &le; <em>i</em> &le; <em>N</em> -1).  Each <em>X</em><sub><em>i</em></sub> represents the length of the arc defined  in the inscribing circle, clockwise, by vertex <em>i</em> and vertex  (<em>i</em>+1)  mod <em>N</em>. Remember that  an <em>arc</em> is a segment of the circumference of a circle; do not  mistake it for a <em>chord</em>, which is a line segment whose  endpoints both lie on a circle.</p>
<p>The end of input is indicated by a line containing only one zero.</p>

*******OutputConstraints*******

<p>For each test case in the input, your program must print a single  line, containing the minimum number of vertices that must be removed  from the given polygon to form a regular polygon. If it is not  possible to form a regular polygon, the line must contain only the  value <tt>-1</tt>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
1000 1000 1000
6
1 2 3 1 2 3
3
1 1 2
10
10 40 20 30 30 10 10 50 24 26
0


<strong>Output:</strong>
0
2
-1
5

</pre>


______________________________________________________
FALLINGI||||||true||||||


<p>Imagine disks of ice falling, one at a time, into a box, each ending
up at the lowest point it can reach without overlapping or moving
previous disks.  Each disk then freezes into place, so it cannot
be moved by later disks.  Your job is to find the
overall height of the final combination of disks.</p>

<p>So that the answer is unique, assume that any disk reaching the
bottom of the box rolls as far to the left as possible.  Also the
data is chosen so there will be a unique lowest position for any disk
that does not reach the bottom.  The data is also such that there
are no "perfect fits":  each disk that lands will be in contact
with only two other points, on previous circles or the sides of the
box.  The illustrations above show white filled disks labeled with
the order in which they fall into their boxes.  The gray circle in
the fourth illustration is not intended to be a disk that fell in.
 The gray disk is included to demonstrate a point:  the gray
disk is the same size as disk 2, so there is <span style="font-style: italic;">space</span> 
for disk 2 on the very bottom of its box, but disk 2 cannot <span style="font-style: italic;">reach</span> 
that position by falling from the top.  It gets caught on disk 1 and the side of the box.  

</p>

<p>One way to find the top
intersection point of two intersecting circles is as follows.
Suppose circle 1 has center (x1, y1) and radius r1, and suppose circle 2 has center (x2, y2),
and radius r2. Also assume that circle 1 is to the left of circle 2, i.e., x1 &lt; x2. Let</p>

<p>dx = x2 - x1,<br>
dy = y2 - y1,<br>
D = sqrt(dx*dx + dy*dy),<br>
E = (r1*r1 - r2*r2 + D*D)/(2*D),<br>
F = sqrt(r1*r1 - E*E);</p>
<p>then the upper intersection point is (x1 + (E*dx - F*dy)/D, y1 + (F*dx + E*dy)/D).</p>



*******InputConstraints*******

<p>The input consists of one or more data
sets, followed by a line containing only 0 that signals the end of the input. Each data set is on
a line by itself and contains a sequence of three or more blank-separated
positive integers, in the format <span style="font-style: italic;">w</span>, 

<span style="font-style: italic;">n</span>, 
<span style="font-style: italic;">d</span><sub style="font-style: italic;">1</sub>,
<span style="font-style: italic;"> d</span><sub style="font-style: italic;">2</sub>, 
<span style="font-style: italic;">d</span><sub style="font-style: italic;">3</sub>, ..., 
<span style="font-style: italic;">d</span><sub style="font-style: italic;">n</sub>, where 
<span style="font-style: italic;">w</span> is the width of the box, 

<span style="font-style: italic;">n</span> is the number of disks, and the remaining numbers are 
the diameters of the disks, in the order in which they fall into the box.  
You can assume that <span style="font-style: italic;">w</span> &lt; 100, 
that <span style="font-style: italic;">n</span> &lt; 10, and that each diameter is less than 
<span style="font-style: italic;">w</span>.
</p>



*******OutputConstraints*******

<p> For each data set, output a single line
containing the height of the pile of disks, rounded to two places
beyond the decimal point.</p>

<p>The example data matches the illustrations above.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
10 3 5 2 3
8 2 5 5
11 3 10 2 4
9 3 4 4 6
10 6 5 4 6 3 5 2
0 

<b>Output:</b>
5.00
9.00
12.99
9.58
14.19

</pre>



______________________________________________________
OROSNAKE||||||true||||||


<p>
Ouroboros is a mythical snake from ancient Egypt. It has its tail in its mouth and continously devours itself.<br><br>

The Ouroboros numbers are binary numbers of 2^n bits that have the property of "generating" the whole set of numbers from 0 to 2^n - 1. The generation works as follows: given an Ouroboros number, we place its 2^n bits wrapped in a circle. Then, we can take 2^n groups of n bits starting each time with the next bit in the circle. Such circles are called Ouroboros circles for the number n. We will work only with the smallest
Ouroboros number for each n.<br><br>

Example: for n = 2, there are only four Ouroboros numbers. These are 0011;0110;1100; and 1001. In this case, the smallest one is 0011. Here is the Ouroboros circle for 0011: <br><br>

<br>
<p><p>
<center><img src='/content/dilaang:oroboros.png'alt='subir imagenes' border='0'></center/>
<p><p>
<br>
The table describes the function o(n;k) which calculates the k-th number in the Ouroboros circle of the smallest Ouroboros number of size n. This function is what your program should compute. <br><br>

*******InputConstraints*******

<p>The input consists of several test cases. For each test case, there will be a line containing two integers n and k (1<=n<=15; 0<=k<2^n). The end of the input file is indicated by a line containing two zeros. Don't process that line.


*******OutputConstraints*******

<p>For each test case, output o(n;k) on a line by itself.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 0
2 1
2 2
2 3
0 0

<b>Output:</b>
0
1
3
2

</pre>



______________________________________________________
HIST2||||||true||||||


<p>
In statistics, a histogram is a graphical display of tabulated frequencies, shown as bars.
 It shows what proportion of cases fall into each of several categories. It is a polygon composed of a sequence of rectangles aligned at a common base line. In this problem all rectangles have a width of unit length. But their heights are distinct. Some permutation of the heights will give the maximum perimeter. Your task is to find the maximum perimeter of the histogram and the number of permutations that give the maximum perimeter.
</p>

<center>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/swarnaprakash:hist2.jpg">
</center>
<p>
In the image Figure (a) shows a histogram with heights {1,2,3,4} (1st sample testcase) and has a perimeter of 16 units. Figure (b) shows one of the permutations {3,1,2,4} having the maximum perimeter of 20 units.
</p>


*******InputConstraints*******

<p>Input consists of multiple test cases. Each test case describes a histogram and starts with an integer <b>N</b>, 2 &#8804; N &#8804; 15, denoting the number of rectangles it is composed of. Next line consists of N space separated positive integers representing the heights of the rectangles. All heights are distinct and less than or equal to 100. N=0 indicates the end of tests. There are atmost 50 test cases.
</p>

*******OutputConstraints*******

<p>For each test case output the maximum possible perimeter of the histogram and the number of permutations that give maximum perimeter in a single line, separated by a single space.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1 2 3 4
3
2 6 5
0

<b>Output:</b>
20 8
24 2

</pre>


______________________________________________________
LASTDIG||||||true||||||


<p>Nestor was doing the work of his math class about three days but he is tired of make operations a lot and he should deliver his task tomorrow. His math&rsquo;s teacher gives two numbers a and b. The problem consist in find the last digit of the potency of base a and index b. Help Nestor with his problem. You are given two integer numbers: the base a (0 &lt;= a &lt;= 20) and the index b (0 &lt;= b &lt;= 2,147,483,000). You have to find the last digit of a^b.</p>

*******InputConstraints*******

<p>The first line of input contains an integer t, the number of test cases (t &lt;= 30). t test cases follow. For each test case will appear a and b separated by space.</p>

*******OutputConstraints*******

<p>For each test case output an integer per line representing the result.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 10
6 2
<strong>Output:</strong>
9
6
</pre>


______________________________________________________
CEPC08B||||||true||||||


<p>In a seaside village, there is an avenue of skyscrapers. Each skyscrapers is 100m wide and has certain
height. Due to very high price of parcels, any two consecutive skyscrapers are adjacent. The avenue lies close to the beach so the street is exactly at the sea level.
Unfortunately, this year, due to the global warming, the sea level started to increase by one meter
each day. If the skyscraper height is no greater than the current sea level, it is considered &#64258;ooded.
A region is a maximal set of non-&#64258;ooded, adjacent skyscrapers. This term is of particular importance, as
it is su&#64259;cient to deliver goods (like current, carrots or cabbages) to any single skyscraper in each region.
Hence, the city major wants to know how many regions there will be in the hard days that come.
An example of an avenue with 5 skyscrapers after 2 days is given below.
</p>
<img src="http://www.spoj.pl/content/er2er:skyscrapers.png" />


*******InputConstraints*******

<p>The input contains several test cases. The &#64257;rst line contains an
integer <span style="font-style: italic;">t</span>
(t &#8804; 15) denoting the number<br>
of test cases. Then <span style="font-style: italic;">t</span>
test cases follow. Each of them begins with a line containing two
numbers <span style="font-style: italic;">n</span>
and<br>
<span style="font-style: italic;">d</span> (1 &#8804; n, d
&#8804; 10<sup>6</sup>), <span style="font-style: italic;">n</span>
is the number of skyscrapers and <span style="font-style: italic;">d</span>
is the number of days which the major wants<br>
to query. Skyscrapers are numbered from left to right. The next line
contains n integers h<sub>1</sub>, h<sub>2</sub>,
. . . , h<sub>n</sub><br>
where 1 &#8804; h<sub>i</sub> &#8804; 10<sup>9</sup> is the
height of skyscraper<span style="font-style: italic;"> i</span>.
The third line of a single test case contains <span
 style="font-style: italic;">d</span> numbers<br>
t<sub>j</sub> such that 0 &#8804; t<sub>1</sub>
&lt; t<sub>2</sub> &lt; . . . &lt; t<sub>d&#8722;1</sub>
&lt; t<sub>d</sub> &#8804; 10<sup>9</sup>.
</p>


*******OutputConstraints*******

<p>For each test case output d numbers r<sub>1</sub>, r<sub>2</sub>,
. . . , r<sub>d</sub>, where r<sub>j</sub> is
the number of regions on day t<sub>j</sub> .
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 3
1 2 3
1 2 3
5 3
1 3 5 1 3
0 2 4


<b>Output:</b>
1 1 0
1 2 1
</pre>



______________________________________________________
SONG||||||true||||||


<p>Every year, the continent of Cacophonea organises the Cacophonean Song Contest, for which each
of its nations presents an act by a national singer or group. Each Cacophonean inhabitant may
televote for any act which is not from his nation, so a nation can never vote for its own act. In
the end, each of the <b>s</b> Cacophonean nations will award points to <b>r</b> acts. The act which received
most votes from a certain nation will get <b>r</b> points from this nation, the act with the second largest
amount of votes will get <b>r</b> - 1 points, etc., so the act with the <b>r</b>th largest amount of votes gets 1
point and less popular acts get no points from the voting nation. The final ranking of the song
contest will then be decided by the total amount of points each nation received.
<p>Music producer Dustin has been eagerly following the Cacophonean Song Contest for many
years. Lately, he has observed that in certain nations, televotes are politically rather than artistically motivated:
<p>(1) Politically voting nations prefer acts from neighbouring nations. More specifically, the Euclidean distance between their capital and another nation's capital is their popularity measure, irregardless of the artistic quality of the corresponding act. Hence, the nation with the
closest capital will get most votes and the nation with the farthest capital will receive the
least votes, which could yield no points at all if <b>r</b> < <b>s</b> - 1. It will never occur that two or
more capitals will have the same distance to a certain capital.
<p>(2) Nations that vote quality-motivated will, as the name suggests, award points to nations
according to an indisputable act ranking based on each act's artistic quality. In this ranking,
there will be no ties so each nation has its own unique rank.
<p>However, Dustin has heard he can influence the voting behaviour of other nations: an artist can
find favour of politically voting nations by giving them special attention during his act (e.g. by
singing parts in their local dialects, waving their flags, etcetera). The more a politically voting
nation will receive such attention in an act, the higher it will rank it. Of course this will be at the
cost of the original act and might result in terribly campy results. Therefore, nations that vote
according to artistic quality will punish such behaviour.
<p>More specifically, Dustin can divide an act into exactly <b>s</b> - 1 parts. Originally, all parts are
dedicated to the nation of the performer (i.e. they reflect his original artistic ideas), but this can
be changed:
<p>(1) For each part in the act that will be dedicated to a certain politically voting nation, that
nation will rank the performer's nation one place higher (unless the performer's nation is
already ranked first). As each nation has a unique ranking position, the nation that originally
was at that higher rank will then be ranked one place lower.
<p>(2) Quality-motivated voting nations do not like these soft-soaping attempts at all. Therefore,
for each part in the act that will be dedicated to a nation which is not the original performer's
nation, quality-motivated nations will rank the original performer's nation one place lower
(unless the performer's nation is already ranked lowest).
<p>Only the fact that a certain amount of parts is dedicated to a certain nation will influence voting
behaviour: the exact part dedication sequence in the total act is not of interest here.
<p>Dustin wants to use this knowledge (which no other Cacophonean producer has) to produce a
smashing act, yielding as much points in the overall results as possible. You are asked to determine
what the largest possible overall point score is he can obtain for an act, when he optimally exploits
the described act-changing practices.</p>

*******InputConstraints*******

<p>The first line of input consists of the integer number <b>n</b>, the number of test cases;
<p>Then, for each test case:
<p>A line with an integer number <b>s</b> (1 < <b>s</b> <= 100), indicating the number of participating
nations in the song contest;
<p>Then, for each nation:
<p>(1) A line containing:
<p>(1.1) A string <b>c</b> (not containing any spaces) with the nation's name, followed by a
space. Within a test case, there will not be multiple nations sharing the same
name;
<p>(1.2) A character indicating the nation's voting behaviour: <i>q</i> if the voting behaviour
is quality-motivated and <i>p</i> if the behaviour is politically motivated.
<p>(2) A line containing:
<p>(2.1) The location of the nation's capital, expressed in an (x, y) integer coordinate
(-10000 <= x <= 10000, -10000 <= y <= 10000). x and y are separated by a
space. Furthermore, y is followed by a space;
<p>(2.2) The actual artistic quality rank <b>q</b> of the nation's act. This is a unique number
in the range 1...<b>s</b>.
<p>After description of each nation:
<p>A line with an integer number <b>r</b> (0 < <b>r</b> <= <b>s</b> - 1), indicating to how many nations each
nation will attribute points;
<p>A line with the name of the nation for which Dustin should produce a song, achieving
as much points as possible.</p>

*******OutputConstraints*******

<p>For each test case, the output contains a single line with a single integer number: the maximal amount of points an act can obtain in the overall final score, if act-changing practices were performed in an optimal way.</p>


*******IOTestCases*******

<pre><b>Input:</b>
2
3
Aulatrias q
0 0 1
Binen q
5 0 2
Cahin q
0 -4 3
2
Cahin
3
Aulatrias p
0 0 1
Binen p
5 0 2
Cahin p
0 -4 3
2
Binen

<b>Output:</b>
2
4
</pre>


______________________________________________________
RAMP||||||true||||||


<p>The local skating park has been given a financial incentive by the city to make the park interesting for skaters of all levels. The park wants to use the incentive to build a series of ramps, somewhat resembling a mountain range. When talking to some of the volunteers in the committee responsible for the project, you find out they're having dificulties deciding about the best conguration of the ramps. They know the number of ramps to be built, and for each ramp they agree on the range of the height for that ramp. They are still discussing exactly how high each ramp should be, since they can't afford to have them all at their highest, but they do want to spend all of the budget. This is the most important issue in the debate: they can't agree whether they want the differences between the ramps to be small, to give the full ride a more consistent feeling, or as big as possible, to create a more diverse set of challenges.</p>
<p>You also notice they don't really have a good idea what the possibilities are, leaving them stranded in 'what-if' discussions. You decide to help them out by showing them the options they have, both the ones where the dierence between the highest and lowest ramp is kept as small as
possible, as well as the one where that difference is as much as possible. Since the committee is mainly bickering over the allowable differences, you decide to start out by just presenting them the minimum and maximum difference between the highest and lowest ramp. Luckily, the park has a lot of space, so you won't need to take the placement of the ramps into account. All ramps have the same inclination, which is such that a ramp of height <i>h</i> will have a length 4<i>h</i> (measuredflat, not over the ramp).</p>

*******InputConstraints*******

<p>The first line of input consists of the integer number n, the number of test cases. For each test case:
<p>A line with the integer number r (2 <= r <= 10000), the number of ramps the park will place;
<p>A line with the integer number m (0 <= m <= 200000000), the number of cubic meters of concrete the park has money for;
<p>r lines with two numbers, l and t (0.00 <= l <= t <= 100.00), separated by one space, the minimum and maximum height in meters of the r-th ramp.</p>
<p>You may assume all ramps are made entirely of concrete, and shaped as 1 meter wide prisms, with a triangle with two equal sides as base. A series of ramps within the given constraints and using all concrete is guaranteed to exist.</p>

*******OutputConstraints*******

<p>For each test case, the output contains one line with two numbers, separated by one space: the minimum difference between the highest and lowest ramp and the maximum difference between the highest and the lowest ramp. These numbers are rounded to two decimals.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
3
36
1.00 4.00
1.00 4.00
1.00 4.00

<b>Output:</b>
0.00 3.00
</pre>



______________________________________________________
ROBIN||||||true||||||


<p>It is during the great war in the year 2240 that the Robinson family decides to leave the human
empire, in search for more peaceful and quiet places. The Robinsons already have a planet in
mind to which they wish to travel and want to get there as soon as possible. However, because
all vehicles capable of spaceflight are being used for the war, the Robinson family has no way to
escape to other planets by means of ordinary spaceflight. It is therefore that Joe Robinson, the
father of the family, created the Robintron. The Robintron is a vehicle that is capable of travelling
from one planet's surface to another by only using the forces of gravity.
<p>It is the gravitational pull of a planet that keeps the Robintron on a planet's surface. This
pull extends as far as the planet's gravity well, a circular area around the center of the planet,
which is generated by the planet's mass. However, these gravity wells can also be used to assist
the Robintron in leaving a planet by the way of planet hopping. Planet hopping can be performed
when the Robintron is on the surface of a planet and comes within the area of another planet's
gravity well. The Robintron uses the other planet's gravity well to gain enough momentum to
escape into space, and to land on the other planet's surface. Leaving a planet and subsequently
landing on another one takes no significant amount of time.
<p>Planet hopping has some disadvantages. The Robintron must be within the gravity well of a
planet other than the one it resides on, to be able to effectively use it for planet hopping. However,
as the planets rotate around a star (which they all do in perfectly circular orbits), their position
continuously changes according to their rotational speed. Thus, it can take up some time for the
Robintron to enter the gravity well of a particular planet. Also, as soon as the Robintron chooses
to enter the gravity well of a planet, it will move along with that planet around the star. Therefore,
this could mean that another planet's gravity well may never come in reach of the Robintron.
<p>Given a list of planets in a star system, a starting position and destination, write a program
that determines how many days it will take (using the ceiling function, i.e. ceiling(2.3) = 3) for
the Robintron to travel to its destination, given that it travels via the fastest route possible.
<p>Because in most star systems all planets are positioned around the star in a disc, only two
dimensions have to be taken into account. Also, a planet is assumed to be a single point in space,
and the Robintron's coordinates are equal to those of the planet it resides on.</p>

*******InputConstraints*******

<p>The first line of input consists of the integer number <i>n</i>, the number of test cases;
<p>Then, for each test case:
<p>A line containing the positive integer number <i>m</i> (0 < <i>m</i> < 1000), the number of planets
in the star system (excluding the star which always resides at position [0, 0]);
<p>Per planet a line containing 4 floating-point numbers <i>x</i> (-1e10 <= <i>x</i> <= 1e10) and <i>y</i> (-1e10 <= <i>y</i> <=
1e10), the x-coordinate and y-coordinate of the planet relative to the star at the start of
the Robintron's journey respectively; <i>r</i> (0 < <i>r</i> <= 1e5) the radius of the planet's gravity
well and s (0 <= s <= 2 * Pi) the speed, in radians per day, at which the planet rotates
(counterclockwise) around the central star. The numbers are separated by a space.
<p>The Robintron's journey always starts at the first listed planet and its destination is always
the last listed planet, which is always reachable from the Robintron's starting position. The star
(at position [0, 0]) is too hot for the Robintron and cannot be used for planet hopping.</p>

*******OutputConstraints*******

<p>For each test case, the output consists of a line with one integer number: the number of days
(rounded up, or 0 if the Robintron can reach its destination immediately) that the Robintron
must travel to reach its destination.</p>

*******IOTestCases*******

<pre><b>Input:</b>
2
3
10.0 0.0 1.0 1.570796325
-13.0 0.0 3.1 3.14159265
17.0 0.0 4.1 0.0
5
10.0 0.0 1.1 1.0
12.0 0.0 1.1 2.0
13.0 0.0 1.1 1.0
0.0 11.0 1.1 3.14159265
14.0 0.0 1.1 1.0

<b>Output:</b>
3
7
</pre>


______________________________________________________
DRIVE||||||true||||||


<p>MegaCity of the future is a rectangular grid of streets. Each intersection has integer Cartesian coordinates x and y. To get from intersection a with coordinates x<sub>a</sub>, y<sub>a</sub> to intersection b with coordinates x<sub>b</sub>, y<sub>b</sub> you need to drive exactly | x<sub>a</sub> - x<sub>b</sub> | + | y<sub>a</sub> - y<sub>b</sub> | blocks. Usually, it takes 10 time units to drive one block, so one can easily compute the time it takes to get from a to b. However, traffic jams that occur in MegaCity turn estimation of minimal driving time into a complex problem that you have to solve.
<p>Traffic jams in MegaCity affect a rectangular area that is specified by coordinates of its bottom-left and top-right corners. The time to travel one block in the traffic jam is specified. All streets that are strictly inside the rectangular region are affected by the traffic jam. Sometimes, it is better to drive around the traffic jams to save time, but sometimes it is better to drive through some traffic jams as shown in the example - 17 blocks are driven outside of traffic jams, taking 10 time units per block, and 2 blocks in the light traffic jam with 11 time units per block.</p>
<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:drive.jpg"></img>

*******InputConstraints*******

<p>Multiple test cases. The number of them is given in the very first line. For each test case:</p>
<p>The first line contains four integer numbers x<sub>a</sub>, y<sub>a</sub>, x<sub>b</sub> and y<sub>b</sub>, coordinates of the start and finish intersections. The second line contains a single integer number n (0 <= n <= 1000) which specifies the number of traffic jams. The following n lines describe traffic jams. Each traffic jam is described by five integer numbers x<sub>1,i</sub>, y<sub>1,i</sub>, x<sub>2,i</sub>, y<sub>2,i</sub> and t<sub>i</sub>, where first four numbers are coordinates of the bottom-left and top-right corners of the jammed area (x<sub>1,i</sub> < x<sub>2,i</sub>, y<sub>1,i</sub> < y<sub>2,i</sub>), and t<sub>i</sub> (10 < t<sub>i</sub> <= 10<sup>8</sup>) is the time it takes to travel one block inside this traffic jam. All coordinates are from 0 to 10<sup>8</sup> inclusive. Areas of traffic jams neither intersect nor touch each other. Start and finish points are different and do not lie inside nor on the border of any traffic jam.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>A single integer - the minimal driving time from intersection a to intersection b.</p>

*******IOTestCases*******

<pre><b>Input:</b>
1
1 6 15 3
4
2 1 3 7 44
5 2 10 4 33
8 5 11 9 22
12 1 14 8 11

<b>Output:</b>
192
</pre>

<p><b>Warning: A naive algorithm may not run in time!</b></p>
<p>Note: In Sphere Online Judge system, "Memory Limit Exceeded" will be shown as "Runtime Error(other)", with the 0.00 second run-time & 92-200k memory used, or "Runtime Error(SIGSEGV)" with 250M memory used.</p>


______________________________________________________
DEPOSIT||||||true||||||


<p>Banks offer deposit schemes of various kinds to attract customers. In an r -year progressively reducing recurring deposit scheme (PRRDS) of a bank, a customer is required to deposit progressively reducing amounts every year for r  years. Depending on the duration r  of the scheme and the total amount T  deposited in r  years, the bank offers to return on maturity, i.e., after the expiry of r  years, an amount R , which is equal to k  times the amount deposited in the first year. The bank ensures that the return R  looks attractive by making a suitable choice of k ; k  being a natural number.
</p>
<p>
In a PRRDS, the amount to be deposited in each but the last two years is exactly equal to the sum of amounts to be deposited in the next two years. The amounts to be deposited in the last two years, say x in the last year and y in the last but one year, are progressively reducing (x, y > 0;y > x) and are determined so that the total amount deposited in r years is exactly equal to the specified amount T . Assume that all deposits are in whole number of Rupees.
</p>
<p>
Write a program for the bank, so that given r , k and T , the program computes x and y for which the return R is maximum. For example in a 4-year scheme with r = 4 , k = 3 and T = 500 , the progressively reducing recurring deposits 248, 126, 122 and 4, ensures the maximum return R = 744 with x = 4 and y = 122 .
</p>

*******InputConstraints*******

<p>The input may contain multiple test cases.</p>
<p>For each test case there is only one input line. The line gives values of r , k and T . Assume that r is not greater than 20.</p>
<p>A line containing a zero `0' as the first character follows the last case.</p>


*******OutputConstraints*******

<p>For each test case there is only one output line. The line gives the computed values of x , y and R .</p>


*******IOTestCases*******

<pre>
<b>Input</b>
4 3 500 
5 3 10000 
6 4 8000 
8 5 12000 
0

<b>Output</b>
4 122 744 
5 1425 12855 
1 666 13332 
1 363 23635
</pre>


______________________________________________________
BABY||||||true||||||


<p>A baby tries to solve the well-known eight-queen puzzle: the problem of placing eight chess queens on an 8Ã—8  chessboard so that no two queens share the same row, column, or diagonal. The baby understands the concept of row and column quite well but diagonal is not very clear to her. As a result she succeeds placing eight queens on the board so that no two queens share the same row or column but there remains the possibility that some queens share the same diagonal.</p>
<p>
Given baby's queens (a solution by the baby) and a valid eight-queen solution, it is possible to move baby's queens to positions of queens in the valid solution. Assume that in a single move, a queen can be moved one unit row-wise or column-wise into an unoccupied position.
</p>
<p>Write a program to find the minimum number of moves required to move baby's queens to positions of queens in the valid solution. The program should be usable for a more general n -queen puzzle where n queens are placed on an nÃ—n chessboard, 4 &le; n &le; 16 . Assume that rows and columns of the chessboard are numbered 1, 2,..., n .
</p>

*******InputConstraints*******

<p>
The input consists of multiple test cases.</p>
<p>
Each case begins with a line containing the integer n .
</p>
<p>
Each of the next two lines contains a sequence of n integers. Integers in the first line represent column numbers of baby's queens appearing in rows 1, 2,..., n respectively. In the same way, the second line contains column numbers of queens in the given valid solution. A space separates two consecutive integers in the sequence.
</p>
<p>
A line containing a zero `0' as the first character follows the last case.
</p>

*******OutputConstraints*******

<p>
For each test case, print the minimum number of moves required.
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
4 
1 2 3 4 
3 1 4 2 
4 
3 2 4 1 
3 1 4 2 
5 
5 3 1 4 2 
5 3 1 4 2 
5 
1 5 2 4 3 
3 1 4 2 5 
0

<b>Sample Output</b>
6 
2 
0 
8
</pre>


______________________________________________________
BEGIN||||||true||||||


<p>Begin a sequence of distinct natural numbers Ni , i = 0, 1, 2,... , with the number B  (= N0) ; generate numbers Ni , i = 1, 2,... , recursively and end the sequence with the last generated number E . The characteristic of numbers and the process for generation are stated below:</p>
<p>
    * Each number in the sequence contains an even number of decimal digits and is of the form f1d1f2d2fk...dk where d1, d2,..., dk , are k distinct digits in increasing order and each fj is a non-zero digit.</p>
<p>    * For i = 0, 1, 2,... , if Ni = f1d1f2d2...fkdk then Ni+1 = F1D1F2D2...FKDK , where K$ \ge$k ; D1, D2,..., DK , are distinct digits that occur in Ni and appear in increasing order in Ni+1 ; and FJ is the frequency of DJ in Ni , for J = 1, 2,..., K . For example if Ni = 102335 then Ni+1 = 1011122315 .</p>
<p>
Write a program to find for a given E , the longest sequence of numbers that ends with E and begins with the smallest B .
</p>
<p>
Again consider an example; if E =1011122315 then the required sequence of numbers is 303355 103325 1011122315.
</p>

*******InputConstraints*******

<p>The input may contain multiple test cases.</p>
<p>Each test case contains only one input, viz., E .</p>
<p>The input terminates when a line containing 0 appears as a test case.</p>

*******OutputConstraints*******

<p>
For each test case, print the longest sequence of numbers that ends with E and begins with the smallest B . Use space to separate two consecutive numbers in the sequence.
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
1011122315
22
112213
0

<b>Sample Output</b>
303355 103325 1011122315
22
13 1113 3113 2123 112213
</pre>


______________________________________________________
CROSSBIT||||||true||||||


<p>Crossbits are like Crosswords; instead of entering words you enter binary bits 01  in a Crossbit under certain given conditions, assuming that a solution exists. An empty Crossbit of size N  is an empty grid of size NÃ—N.</p>
<p>Given a natural number N , consider entering N<sup>2</sup> binary bits in an empty Crossbit, satisfying the following conditions:</p>
<ul>
<li>Each square in the grid contains either a 0-bit or a 1-bit with no 1-bit in two major diagonals.</li>
<li>The total number of 1-bit in each row / column is exactly equal to K , K being a given natural number less than N.</li>
<li>A 0-bit has at least another adjacent 0-bit either in the same row or in the same column.</li>
<li>The Crossbit represents the N2 -bit binary number B formed by placing bits in the 1st , the 2nd , ... the Nth row from left to right.</li>
</ul>
<p>You are required to write a program that enters bits in an empty Crossbit so that the Crossbit represents the least binary number B for given N and K .</p>
<p>As an illustration consider the case with N = 4 and K = 1 . The Crossbit shown below represents the least binary number B = 0010100000010100 of 16 bits satisfying the specified conditions.</p>
<pre>
0 	0 	1 	0
1 	0 	0 	0
0 	0 	0 	1
0 	1 	0 	0
</pre>

*******InputConstraints*******

<p>The input may contain multiple test cases.</p>
<p>For each test case parameters N and K of the Crossbit are given in one line. Assume that N does not exceed 10.
</p>
<p>The input terminates with a line containing 0 as input.
</p>

*******OutputConstraints*******

<p>
For each test case, print the Crossbit in N rows; each row contains N bits with a space between two neighbouring bits. Keep a blank line after the last output line of each test case.
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
4 1
6 2
0

<b>Sample Output</b>
0 0 1 0 
1 0 0 0 
0 0 0 1 
0 1 0 0 

0 0 0 1 1 0 
1 0 0 1 0 0 
0 0 0 0 1 1 
1 1 0 0 0 0 
0 0 1 0 0 1 
0 1 1 0 0 0
</pre>


______________________________________________________
ELIM||||||false||||||

<P>
Elimination of contestants from a live IQ contest on a TV channel is decided in phases.

<P>
Initially at phase 0, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> contestants, where <SPAN CLASS="MATH"><I>N</I> = 2<SUP>n</SUP></SPAN>

<tex2html_verbatim_mark>,
<SPAN CLASS="MATH"><I>n</I> &lt; 10</SPAN>
<tex2html_verbatim_mark>, are selected through a special online IQ contest in which a total of
<SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>M</I> > <I>N</I>)</SPAN>

<tex2html_verbatim_mark> contestants participate.
The contestants are identified by distinct registration numbers <!-- MATH
 $1, 2, \ldots , M$
 -->
<SPAN CLASS="MATH">1, 2,..., <I>M</I></SPAN>
<tex2html_verbatim_mark>. The
selected contestants are ranked distinctly from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> according to their
performance in the online contest. They are qualified to participate in the
live contest.

<P>
In the <SPAN CLASS="MATH"><I>p</I><SUP>th</SUP></SPAN>
<tex2html_verbatim_mark> phase, <!-- MATH
 $p=1, 2, \ldots , n, K_{p}$
 -->

<SPAN CLASS="MATH"><I>p</I> = 1, 2,..., <I>n</I>, <I>K</I><SUB>p</SUB></SPAN>
<tex2html_verbatim_mark>
contestants participate in the live contest, where <!-- MATH
 $K_{p}=2^{n-p+1}$
 -->
<SPAN CLASS="MATH"><I>K</I><SUB>p</SUB> = 2<SUP>n-p+1</SUP></SPAN>

<tex2html_verbatim_mark>.
On the basis of response to questions presented during the show, <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN>
<tex2html_verbatim_mark>
of <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB></SPAN>
<tex2html_verbatim_mark> contestants are ranked distinctly from 1 to <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN>
<tex2html_verbatim_mark>.
These <SPAN CLASS="MATH"><I>K</I><SUB>p</SUB>/2</SPAN>

<tex2html_verbatim_mark> contestants qualify to participate in the next phase. At
the <SPAN CLASS="MATH"><I>n</I><SUP>th</SUP></SPAN>
<tex2html_verbatim_mark> phase there are only two contestants and the one selected at
this phase is the winner of the contest.

<P>
You are required to write a program that identifies the
winner of the contest, given the following information:

<P>

<UL>
<LI>INFO_1: Registration numbers of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> contestants who are selected through the online IQ
contest, in order of the rank in the online IQ contest, and 

</LI>
<LI>INFO_2: A total of <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>
<tex2html_verbatim_mark> qualified contestants in different phases; <SPAN CLASS="MATH"><I>K</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> in phase 1, <SPAN CLASS="MATH"><I>K</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>

in phase 2, <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>K</I><SUB>n+1</SUB></SPAN>
<tex2html_verbatim_mark> in phase <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. Qualified contestants of
different phases appear in order of phases, i.e., phase 1, phase 2, <SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark>, phase
<SPAN CLASS="MATH"><I>n</I></SPAN>

<tex2html_verbatim_mark>. Further, qualified contestants in a phase, say phase <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, appear in the order
of the rank in the phase, i.e., the rank in phase <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>. A qualified contestant of
a phase, say phase <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, is identified by his/her rank in the previous phase,
i.e., in phase <SPAN CLASS="MATH"><I>p</I> - 1</SPAN>
<tex2html_verbatim_mark>.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>Â </FONT>
</H2>

<P>
Input may contain multiple test cases. For each case there are two input lines. 

<P>
The first line gives <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> integers representing INFO_1
while the second line gives <SPAN CLASS="MATH"><I>N</I> - 1</SPAN>

<tex2html_verbatim_mark> integers representing INFO_2. 

<P>
In each input line integers are
separated by space. The input terminates with a line containing <TT>0</TT> as input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>Â </FONT>
</H2>

<P>
For each test case there is only one output line. The line
prints the registration number of the winner of the contest.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>Â </FONT>
</H2>

<P>
<PRE>
23 18 6 20
4 2 2
29 57 4 33 5 12 16 18
7 1 5 3 2 1 1
0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>Â </FONT>
</H2>

<P>
<PRE>
18
29
</PRE> 



______________________________________________________
TOPCODE||||||false||||||

<P>
A word is a string of two or more letters while a code is a string of one or more distinct words
in lexicographic order. Thus a string of letters may represent either a word or
a code. An optimum code is a code that contains the maximum number of words.

<P>
For a given string of letters there may be one or more optimum codes. The optimum code of top
priority is the optimum code that appears at the top when all optimum codes are arranged in
lexicographic order.

<P>
Given a string of letters, you are required to write a program that finds the
following:

<P>

<UL>
<LI>The total number of words, <SPAN CLASS="MATH"><I>m</I></SPAN> in an optimum code,

</LI>
<LI>The total number of optimum codes, <SPAN CLASS="MATH"><I>n</I></SPAN> represented by the string,
</LI>
<LI>The optimum code of top priority, the top-code.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>Â </FONT>
</H2>

<P>
Input consists of multiple test cases.

<P>
For each test case there is only one line of input. It contains a string of at most
100 letters.

<P>
A line consisting of a single letter terminates input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>Â </FONT>
</H2>

<P>
For each test case, present output in two lines.

<P>
The first line gives the two integers <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> defined above. The next line gives the optimum
code of top priority, the top-code.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>Â </FONT>
</H2>

<P>
<PRE>
aaaaaa
words
lexicographic
a
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>Â </FONT>

</H2>

<P>
<PRE>
2 1
aa aaaa
1 1
words
3 2
lexic og raphic
</PRE>

<P>

______________________________________________________
HIDTRI||||||false||||||

<P>
Assume that each `<TT>0</TT>' or `<TT>1</TT>' in the array represents a point on a plane and the distance
between each pair of neighbouring
points row wise or column wise is unity. Assume further that every
neighbouring pair of <TT>1</TT>'s,
row wise, column wise or diagonally is connected by a line segment. Two line segments emerging
from a point, either join together to
form a longer line segment or form an angle of <SPAN CLASS="MATH">45<SUP><TT>o</TT></SUP></SPAN>, <SPAN CLASS="MATH">90<SUP><TT>o</TT></SUP></SPAN>

or <SPAN CLASS="MATH">135<SUP><TT>o</TT></SUP></SPAN>, thus forming right-angled isosceles triangles. The
existence of hidden right-angled isosceles triangles in an array is illustrated
in the figure below.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3258.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/p3258.jpg"
 ALT="\epsfbox{p3258.eps}">
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>Â </FONT>
</H2>

<P>
Input consists of multiple test cases.

<P>
For each test case the first line gives
three integers: the case number <SPAN CLASS="MATH"><I>k</I></SPAN>, the number of rows <SPAN CLASS="MATH"><I>m</I></SPAN> and the number of
columns <SPAN CLASS="MATH"><I>n</I></SPAN> of the given array. A space appears between two
neighbouring integers.

<P>
Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> lines gives a string
of <TT>0</TT>'s and <TT>1</TT>'s of length <SPAN CLASS="MATH"><I>n</I></SPAN>; the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line gives the <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of the array.


<P>
Input terminates with a value zero for case number <SPAN CLASS="MATH"><I>k</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>Â </FONT>
</H2>

<P>
For each test case, display output in
one line. The line contains the case number <SPAN CLASS="MATH"><I>k</I></SPAN> and the area of the largest
right-angled isosceles triangle hidden in the array. The area is a real number
with one digit after the decimal point. If a triangle does
not exist then output `<TT>0.0</TT>' as the area.


<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>Â </FONT>
</H2>

<P>
<PRE>
1 3 3
101
100
101
2 4 6
001001
010101
111111
000001
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>Â </FONT>

</H2>

<P>
<PRE>
1 0.0
2 4.0
</PRE>

<P>

______________________________________________________
BRAILLE||||||false||||||

<P>
Visually handicapped people use Braille
system of codes for reading and writing. The basic Braille symbol (or cell) is
composed of six dots arranged in two vertical columns, each column being three
dots high. This pattern produces 64 one-cell symbols with character index <!-- MATH
 $\# (2^{0}a_{1}
+ 2^{1}a_{2} + 2^{2}a_{3} + 2^{3}a_{4} + 2^{4}a_{5} + 2^{5}a_{6})$
 -->
<SPAN CLASS="MATH">#(2<SUP>0</SUP><I>a</I><SUB>1</SUB> + 2<SUP>1</SUP><I>a</I><SUB>2</SUB> + 2<SUP>2</SUP><I>a</I><SUB>3</SUB> + 2<SUP>3</SUP><I>a</I><SUB>4</SUB> + 2<SUP>4</SUP><I>a</I><SUB>5</SUB> + 2<SUP>5</SUP><I>a</I><SUB>6</SUB>)</SPAN>, where <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB> = 1</SPAN>, if dot <SPAN CLASS="MATH"><I>i</I></SPAN> is
embossed up and zero otherwise. The positions of these dots are numbered as
follows:


<P>

<P>
<BR>
<DIV ALIGN="CENTER">
A cell without numbers   A cell with numbers
</DIV>
<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3254.eps}$
 -->
<IMG
 ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/p3254.jpg"
 ALT="\epsfbox{p3254.eps}">
</DIV>

<P>
Many Braille codes are in use; one such is the
Simple Braille System (SBS). In SBS alphabets in lower case are default
characters; letters `<TT>a</TT>, <TT>b</TT>,..., <TT>z</TT>' have character indices
`<TT>1</TT>, <TT>2</TT>, ..., <TT>26</TT>' respectively. The ``letter sign'' (dots 5-6) may be used optionally
before a string of alphabets in lower case. Each numeric digit 0-9 requires one
cell, with character index the digit itself. However the ``number sign'' (dots
3-4-5-6) is added before a string of numerals. In order to revert back to
normal alphabets after a string of numerals, the ``letter sign'' is used. The
blank cell is used as a space in alphabetic context and zero in numeric
context. For example the numerals 1 - 10 are the same as the first ten letters
of the alphabet, index of #<TT>a</TT> being 1 and #<TT>j</TT> being 10. SBS allows the
contraction of `<TT>th</TT>', by a single cell with dots
1-4-5-6. A two-cell contraction for `<TT>tion</TT>' is allowed
with dots 5-6 and dots 1-3-4-5.


<P>
There are no single-cell codes for capital letters
in SBS. So a ``capital sign'' (dot 6) is inserted before a capital letter. Two
``capital signs'' are inserted to indicate that the string of alphabets that
follows is capitalized. To revert back to normal alphabets (or numerals), the
``letter sign'' (or the ``number sign'') is used. SBS ignores punctuation marks
altogether.

<P>

<P>
<BR>
You are required to write a program for
SBS transcription that converts an SBS code to English.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>Â </FONT>
</H2>

<P>
Input consists of multiple test cases.

<P>

In each test case there is an SBS code. It is given in three input
lines containing a certain number of Braille cells. Each Braille cell is
represented by a <SPAN CLASS="MATH">3Ã—2</SPAN> array of <TT>0</TT>'s and <TT>1</TT>'s, appearing in an odd and the next
even numbered column of the three input lines, where `<TT>1</TT>' is used for an embossed
dot and `<TT>0</TT>' otherwise.

<P>
A line that is not a part of an SBS code, containing a single zero in
column 1 terminates input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>Â </FONT>
</H2>

<P>
For each test
case, output the SBS code
in English, in one line. In case the input does not conform to SBS rules stated
above output simply the sign `<TT>?</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>Â </FONT>
</H2>

<P>

<PRE>
110010
011100
011110
110110
010100
011110
000011
000101
010110
00001110
00000100
01010110
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>Â </FONT>
</H2>

<P>
<PRE>
?
th5
Tion
THE
</PRE>

<P>


______________________________________________________
NBLTHIEF||||||false||||||

<p>
The Nobel Prize of Kabiguru Rabindranath
Thagore was stolen from a museum of Viswa Bharati University
in West Bengal. The Central Bureau of Investigation (CBI) has
been assigned the job to investigate the crime and recover the prize. CBI has
identified some suspects and linked each one of them to a distinct subset of a
set of clues.

<P>
Let there be <SPAN CLASS="MATH"><I>p</I></SPAN> suspects and <SPAN CLASS="MATH"><I>q</I></SPAN> clues. Integers 1 to <SPAN CLASS="MATH"><I>p</I></SPAN> identify suspects while <SPAN CLASS="MATH"><I>q</I></SPAN> distinct
letter-codes identify clues. The clues are of varying importance. The
alphabetic order of letter-codes determines the priority order in the clues;
letter-codes `<TT>a</TT>' to `<TT>z</TT>' vary from highest to lowest priority.


<P>
Let <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN>
be the set of all suspects. Based on a clue `<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img1.png"
 ALT="$ \alpha$"></SPAN>', a subset <SPAN CLASS="MATH"><I>L</I></SPAN> of <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN>
may be split into two disjoint subsets <!-- MATH
 $L_{+\alpha}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN> and <!-- MATH
 $L_{-\alpha}$
 -->

<SPAN CLASS="MATH"><I>L</I><SUB>- <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN>.
The subset <!-- MATH
 $L_{+\alpha}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN> includes all elements of <SPAN CLASS="MATH"><I>L</I></SPAN> that are linked to a
subset of clues containing `<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img1.png"
 ALT="$ \alpha$"></SPAN>' and <!-- MATH
 $L_{-\alpha}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>- <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN> includes all other
elements of <SPAN CLASS="MATH"><I>L</I></SPAN>. Let <SPAN CLASS="MATH"><I>n</I></SPAN>, <!-- MATH
 $n_{+\alpha}$
 -->

<SPAN CLASS="MATH"><I>n</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN>, and <!-- MATH
 $n_{-\alpha}$
 -->
<SPAN CLASS="MATH"><I>n</I><SUB>- <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN>
denote respectively the total number of elements in <SPAN CLASS="MATH"><I>L</I></SPAN>, <!-- MATH
 $L_{+\alpha}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN> and
<!-- MATH
 $L_{-\alpha}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>- <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB></SPAN>. The discriminatory power of a clue `<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img1.png"
 ALT="$ \alpha$"></SPAN>' to
discriminate suspects in <SPAN CLASS="MATH"><I>L</I></SPAN> is defined by <!-- MATH
 $\delta_{\alpha}= -(|n_{+\alpha}-n_{-\alpha}|)$
 -->

<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img3.png"
 ALT="$ \delta_{\alpha}^{}$"> = - (| <I>n</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB> - <I>n</I><SUB>- <IMG
 WIDTH="13" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img2.png"
 ALT="$\scriptstyle \alpha$"></SUB>|)</SPAN>

<P>
Let <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> denote a set of disjoint subsets of <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN>, each subset containing two
or more elements. The discriminatory power <!-- MATH
 $\delta_{\alpha}^*$
 -->

<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img4.png"
 ALT="$ \delta_{\alpha}^{*}$"></SPAN>
of a clue `<SPAN CLASS="MATH"><IMG
 WIDTH="16" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img1.png"
 ALT="$ \alpha$"></SPAN>' to discriminate suspects in subsets contained in <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> is
defined to be the sum of all <!-- MATH
 $\delta_{\alpha}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img3.png"
 ALT="$ \delta_{\alpha}^{}$"></SPAN>'s corresponding to each subset in <SPAN CLASS="MATH"><I>L</I>*</SPAN>.

<P>

<P>
<BR>
CBI wants to select a set <SPAN CLASS="MATH"><I>D</I></SPAN> of dominant clues so that the presence or absence of
some or all of these clues can identify each suspect uniquely. The selection is
to be done in stages.


<P>
Let <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN>
contain only <SPAN CLASS="MATH"><I>L</I><SUB>0</SUB></SPAN> initially. At each stage of selection a clue
`<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img5.png"
 ALT="$ \beta$"></SPAN>' with highest discriminatory power <!-- MATH
 $\delta_{\beta}^*$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img6.png"
 ALT="$ \delta_{\beta}^{*}$"></SPAN>
is selected. Selecting the clue `<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img5.png"
 ALT="$ \beta$"></SPAN>' with highest priority breaks tie, if
any. After a selection of `<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="32" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img5.png"
 ALT="$ \beta$"></SPAN>' each <SPAN CLASS="MATH"><I>L</I></SPAN> in <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> is split into
disjoint subsets <!-- MATH
 $L_{+\beta}$
 -->

<SPAN CLASS="MATH"><I>L</I><SUB>+ <IMG
 WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img7.png"
 ALT="$\scriptstyle \beta$"></SUB></SPAN> and `<!-- MATH
 $L_{-\beta}$
 -->
<SPAN CLASS="MATH"><I>L</I><SUB>- <IMG
 WIDTH="13" HEIGHT="30" ALIGN="MIDDLE" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/3251img7.png"
 ALT="$\scriptstyle \beta$"></SUB></SPAN>' all resulting
subsets with less than two elements are dropped from <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN>. The process of
selection continues until <SPAN CLASS="MATH"><I>L</I><SUP>*</SUP></SPAN> becomes empty. All the clues thus selected form
the set of dominant clues <SPAN CLASS="MATH"><I>D</I></SPAN>.


<P>
You are required to write a program to find the set of dominant clues <SPAN CLASS="MATH"><I>D</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>Â </FONT>
</H2>

<P>
Input may contain multiple test cases. For each test case input is given
in one line. It contains an integer <SPAN CLASS="MATH"><I>k</I></SPAN> representing the case number
and a certain number of strings of clues. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th string represents the
subset of clues to which the <SPAN CLASS="MATH"><I>i</I></SPAN>-th suspect
is linked. A space separates two consecutive fields in input.


<P>
Input terminates with an input 0 for the case number <SPAN CLASS="MATH"><I>k</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>Â </FONT>
</H2>

<P>
For each test case, present output in one line. The line contains the case number <SPAN CLASS="MATH"><I>k</I></SPAN>
and a string of letters. The letters in the string correspond to the clues in <SPAN CLASS="MATH"><I>D</I></SPAN>

and appear in the order of their selection.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>Â </FONT>
</H2>

<P>
<PRE>
1 cbx cpxb bc brc
2 bac adce cbd d
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>Â </FONT>

</H2>

<P>
<PRE>
1  xpr
2  ab
</PRE>

<P>

______________________________________________________
CPRIME||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/CPRIME/en/">English</a></td> 
<td width="50%"><a href="/problems/CPRIME/vn/">Vietnamese</a></td> 
</tr></table>


<p>In number theory, the Prime Number Theorem describes the asymptotic distribution of prime numbers. Let &#960;(x) be the number of prime numbers not greater than x. The Prime Number Theorem states that:</p>
<img src='http://upload.wikimedia.org/math/c/9/3/c93061b930d29877a2364a62e5ecc1a5.png' />
<p>Your task is to write a program to verify how well the Prime Number Theorem can estimate &#960;(x). To be more precise, for a given x, you have to calculate the percent error |&#960;(x) - x/lnx| / &#960;(x) %.</p>


*******InputConstraints*******

<p>The input contains several test cases (no more than 1000). Each test case contains a value of x (2 &#8804; x &#8804; 10<sup>8</sup>) given in one line. A number 0 terminates the input.</p>


*******OutputConstraints*******

<p>For each value of x, output the percent error of the estimation of &#960;(x), rounded to 1 decimal digit.</p>


*******IOTestCases*******

<pre>
<b>Input:</b>
10000000
2
3
5
1234567
0

<b>Output:</b>
6.6
188.5
36.5
3.6
7.7
</pre>




______________________________________________________
BGAME||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/BGAME/en/">English</a></td> 
<td width="50%"><a href="/problems/BGAME/vn/">Vietnamese</a></td> 
</tr></table>


<p>Two players, A and B, play a game on a square board of size nÃ—n. The squares of the board are either white or black. The game is played only on the white squares &#8212; the black ones are excluded from the game. Each player has
one piece, initially placed at this player&#8217;s starting point &#8212; one of the white squares on the board. The starting point of A is different than that of B.</p>
<p>In each move a player moves his piece to one of the neighboring white squares (either up, down, left or right). If the player moves his piece to the
square currently occupied by his opponent&#8217;s piece, he gets an extra move (this way he jumps over the opponent). Note that in this case the direction of the second move can be different than that of the first move. </p> <p>
Player A moves first, then players alternate. The goal of the game is to reach the opponent&#8217;s starting point. The player whose piece reaches his opponent&#8217;s starting point first, wins the game. Even if the player&#8217;s last move consists of two jumps, and he only jumps over his opponent&#8217;s starting point (since it is occupied by his opponent), the player wins. We want to determine which player has a winning strategy (a player has a winning  trategy if he can win regardless of his opponent&#8217;s moves).</p>
<h3>Task</h3>
<p>
Write a program, that:<ul>
<li>	reads the layout of the grid and the starting points of the two players from the standard input,
<li>	finds the player who has a winning strategy,
<li>	writes the result to the standard output.
</ul>
</p>

*******InputConstraints*******

<p>The first line of the standard input contains one integer t the number of test cases (1 &#8804; t &#8804; 10 ). After it the description of t tests appears. Each test is described as follows. In the first line of the test there is one integer n (2 &#8804; n &#8804; 300 ), the length of the side of the grid. Then next n lines contain the description of the grid. Each line consists of n characters (with no whitespaces between them). Each character is either &#8217;.&#8217; a white square), &#8217;#&#8217; (a black square), &#8217;A&#8217; (the starting point of A) or &#8217;B&#8217; (the starting point of B).</p><p>

You may assume that there exists a path of white squares between the starting points of A and B.
</p>

*******OutputConstraints*******

<p>For each test case exactly one line should be printed to standard output containing a single character &#8217;A&#8217; or &#8217;B&#8217;, indicating the player who has a winning strategy.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
A...
.#..
....
...B
4
A...
....
..#.
...B


<b>Output:</b>
B
A

</pre>








______________________________________________________
MATRICA||||||true||||||


<p>A matrix is a rectangular table of letters. A square matrix is a matrix with an equal number of rows and columns. A square matrix M is called symmetric if its letters are symmetric with respect to the main diagonal (M<sub>i,j</sub> = M<sub>j,i</sub> for all pairs of i and j).</p>

<p>For example, the following two matrices are symmetric:</p>

<pre>
AAB          AAA
ACC          ABA
BCC          AAA
</pre>

<p>However, the following two are not:</p>

<pre>
ABCD          AAB
ABCD          ACA
ABCD          DAA
ABCD
</pre>

<p>Given a collection of available letters, you are to output a subset of columns in the lexicographically smallest symmetric matrix which can be composed using all the letters. If no such matrix exists, output "IMPOSSIBLE".</p>

<p>To determine if matrix A is lexicographically smaller than matrix B, consider their elements in row-major order (as if you concatenated all rows to form a long string). If the first element in which the matrices differ is smaller in A, then A is lexicographically smaller than B.</p>


*******InputConstraints*******

<p>The first line of input contains two integers N (1 &#8804; N &#8804; 30000) and K (1 &#8804; K &#8804; 26). N is the dimension of the matrix, while K is the number of distinct letters that will appear.</p>

<p>Each of the following K lines contains an uppercase letter and a positive integer, separated by a space.</p>

<p>The integer denotes how many corresponding letters are to be used. For example, if a line says "A 3", then the letter A must appear three times in the output matrix.</p>

<p>The total number of letters will be exactly N<sup>2</sup>. No letter will appear more than once in the input.</p>

<p>The next line contains an integer P (1 &#8804; P &#8804; 50), the number of columns that must be output.</p>

<p>The last line contains P integers, the indices of columns that must be output. The indices will be between 1 and N inclusive, given in increasing order and without duplicates.</p>


*******OutputConstraints*******

<p>If it is possible to compose a symmetric matrix from the given collection of letters, output the required columns on N lines, each containing P character, without spaces. Otherwise, output "IMPOSSIBLE" (quotes for clarity).</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
A 3
B 2
C 4
3
1 2 3

<b>Output:</b>
AAB
ACC
BCC

<b>Input:</b>
4 5
E 4
A 3
B 3
C 3
D 3
2
2 4

<b>Output:</b>
AC
BE
DE
ED

<b>Input:</b>
4 6
F 1
E 3
A 3
B 3
C 3
D 3
4
1 2 3 4

<b>Output:</b>
IMPOSSIBLE
</pre>

<b>Warning: large input/output data.</b>

<p>Note: The test data for this problem consist of the official test cases from the contest, as well some cases of my own.</p>


______________________________________________________
BST||||||true||||||


<p>A binary search tree is a tree in which every node has at most two children nodes (a left and a right child). Each node has an integer written inside it. If the number X is written inside a node, then the numbers in its left subtree are less than X and the numbers in its right subtree are greater than X.</p>

<p>You will be given a sequence of integers between 1 and N (inclusive) such that each number appears in the sequence exactly once. You are to create a binary search tree from the sequence, putting the first number in the root node and inserting every other number in order. In other words, run insert (X, root) for every other number:</p>

<pre>
insert (number X, node N)
          increase the counter C by 1
          if X is less than the number in node N
                   if N has no left child
                           create a new node with the number X and set it to be the left child of node N
                   else
                           insert (X, left child of node N)
          else (X is greater than the number in node N)
                   if N has no right child
                           create a new node with the number X and set it to be the right child of node N
                   else
                           insert (X, right child of node N)
</pre>

<p>Write a program that calculates the value of the counter C after every number is inserted. The counter is initially 0.</p>


*******InputConstraints*******

<p>The first line contains the integer N (1 &#8804; N &#8804; 300 000), the length of the sequence.</p>

<p>The remaining N lines contain the numbers in the sequence, integers in the interval [1, N]. The numbers will be distinct.</p>


*******OutputConstraints*******

<p>Output N integers, each on its own line, the values of the counter C after each number is inserted into the tree.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
8
3
5
1
6
8
7
2
4

<b>Output:</b>
0
1
2
4
7
11
13
15
</pre>

<b>Warning: large input/output data.</b>
<br> <br>
<b>Warning: A naive algorithm may not run in time; do not simply implement the above algorithm.</b>

<p>Note: The test data for this problem consist of the official test cases from the contest, as well some cases of my own.</p>


______________________________________________________
NAJKRACI||||||true||||||


<p>A road network in a country consists of N cities and M one-way roads. The cities are numbered 1 through N. For each road we know the origin and destination cities, as well as its length.</p>

<p>We say that the road F is a continuation of road E if the destination city of road E is the same as the origin city of road F. A path from city A to city B is a sequence of road such that origin of the first road is city A, each other road is a continuation of the one before it, and the destination of the last road is city B. The length of the path is the sum of lengths of all roads in it.</p>

<p>A path from A to B is a shortest path if there is no other path from A to B that is shorter in length.</p>

<p>Your task is to, for each road, output how many different shortest paths containing that road, modulo 1 000 000 007.</p>


*******InputConstraints*******

<p>The first line contains two integers N and M (1 &#8804; N &#8804; 1500, 1 &#8804; M &#8804; 5000), the number of cities and roads.</p>

<p>Each of the following M lines contains three positive integers O, D and L. These represent a one-way road from city O to city D of length L. The numbers O and D will be different and L will be at most 10000.</p>


*******OutputConstraints*******

<p>Output M integers, each on its own line &#8211; for each road, the number of different shortest paths containing it, modulo 1 000 000 007. The order of these numbers should match the order of roads in the input.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
4 4
1 2 5
2 3 5
3 4 5
1 4 8

<b>Output:</b>
2
3
2
1

<b>Input:</b>
5 8
1 2 20
1 3 2
2 3 2
4 2 3
4 2 3
3 4 5
4 3 5
5 4 20

<b>Output:</b>
0
4
6
6
6
7
2
6
</pre>

<p>Note: The test data for this problem consist of the official test cases from the contest, as well some cases of my own.</p>


______________________________________________________
GLOVE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/GLOVE/en/">English</a></td> 
<td width="50%"><a href="/problems/GLOVE/vn/">Vietnamese</a></td> 
</tr></table>

<p>
In the dark basement of chemistry professor Acidrain&#8217;s house there are two drawers with gloves &#8212; one with left hand and other with right hand gloves. In each of them there are gloves of n different colours. Professor knows how many gloves of each colour there are in each drawer (the number of gloves of the same colour may differ in both drawers). He is also sure that it is possible to find a pair of gloves of the same colour. </p><p>

Professor&#8217;s experiment may be successful only if he uses gloves of the same colour (it does not matter which one), so before every experiment he goes to the basement and takes gloves from the drawers hoping that there will be at
least one pair of the same colour. It is so dark in the basement that there is no possibility to recognize colour of any glove without going out of the basement. Professor hates going to the basement more than once (in case there was no pair of gloves of the same colour), as well as  bringing unnecessarily large amounts of gloves to the laboratory.</p><p>

<h3>Task</h3>
<p>
Write a program that:
<ul>
<li>	reads the number of colours and the number of gloves in each colour in each drawer from the standard input,
<li>	calculates the smallest total number of gloves which must be taken to be sure that among them it is possible to find at least one pair of gloves of the same colour (it is necessary to specify the exact number of gloves to be taken from each drawer),
<li>	writes the result to the standard output.
</ul>
</p>

*******InputConstraints*******

<p>The first line of the standard input contains one positive integer n (1 &#8804; n &#8804; 20 ) describing the number of distinct colours. The colours are numbered from 1 to n. The second line of input contains n non-negative integers
0 &#8804; a1,a2, . . .an &#8804; 10^8, where ai corresponds to the number of gloves of colour number i in the drawer with left hand gloves. Finally, the third line of input contains n non-negative integers 0 &#8804; b1, b2, . . . , bn &#8804; 10^8, where bi corresponds to the number of gloves of colour number i in the drawer with right hand gloves.


*******OutputConstraints*******

<p>The first line of the standard output should contain a single integer &#8212; the number of gloves which must be taken from the drawer with left hand gloves. The second line of output should contain a single integer &#8212; the number of gloves which must be taken from the drawer with right hand gloves. The sum of these two numbers should be as small as possible. If there are several correct results, your program should output any of them.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 7 1 6
1 5 0 6


<b>Output:</b>
2
8





______________________________________________________
BOYSCOUT||||||true||||||


<p>Boy Scouts of New England organize Scout Olympics every year. They
ask each team to perform certain tasks, sum up their points, announce
winners, and then stay up all night by the fire plying guitar and
singing scout songs.

This year, Scouts decided to organize the Olympics in one of the most
beautiful forests in Maine. There will be only one difficult task.
A team picks one tree as a starting point, then goes to another tree
in a straight line, then to another, etc. until they come back to the
starting one. They win as many points as there are trees on their route.
However, they are only allowed to move in a counter-clockwise manner,
i.e. after reaching a tree, they can only rotate to the left by less than 180
degrees. Furthermore, when they reach the starting tree again, they
should be able to repeat the same route, still going couter-clockwise. More specifically, their path should trace out the boundary of a convex polygon.

As they don't bring laptops to the Olympics, the Boy Scouts wants you to compute
the maximum possible score a team can achieve.


*******InputConstraints*******

<p>The first line of the input contains a single integer N (3 &#8804; N &#8804; 100),
which is the number of trees in the forest. Each of the next N lines
contain two real numbers x and y separated by a space character
(-10<sup>6</sup> &#8804; x, y &#8804; 10<sup>6</sup>), that represent coordinates of one tree.
Coordinates are given with at most two decimal digits. There are no three
colinear trees.


*******OutputConstraints*******

<p>Output one integer, the maximum number of points a team can score, followed
by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
0 0
1.5 -0.25
0 -1
-1 0.5
0.5 1

<b>Output:</b>
4
</pre>


______________________________________________________
PARITY||||||true||||||


<p>You are given n binary strings s<sub>1</sub>,...,s<sub>n</sub>, each of the same
length m.  Along with each s<sub>i</sub> you are given a bit b<sub>i</sub>.  You are
also given some nonnegative integer k and want to know whether there
exists a subset S of {0,1,...,m-1} of size at most k such
that for each i=1,2,...,n, the bit b<sub>i</sub> is the XOR of the bits
of s<sub>i</sub> at the indices in S.  The s<sub>i</sub> are 0-indexed strings.
Recall that the XOR of a set of bits
is 1 if the number of bits equal to 1 is odd, else the XOR is 0
(in particular, the XOR of an empty set of bits is 0).

For example, if s<sub>1</sub> = 1010 and S = {0,3}, then b<sub>1</sub> would be
1 (the first bit of s<sub>1</sub>) XOR'd with 0 (the last bit of s<sub>1</sub>),
which is 1.

Given n, k, and the strings s<sub>1</sub>,...,s<sub>n</sub> and their
corresponding b<sub>i</sub>, find a set S of size at most k which produces
the given b<sub>i</sub>.  You should also detect when no such S exists.


*******InputConstraints*******

<p>The first line contains n and k, space-separated (1 &#8804; n &#8804;
64, 0 &#8804; k &#8804; 10).  n lines then follow, where the ith line
contains s<sub>i</sub>, followed by a space, then b<sub>i</sub>.  In a given test case
all strings s<sub>i</sub> are of the same length m (1 &#8804; m &#8804; 50).  k
will not be bigger than m.


*******OutputConstraints*******

<p>If no set S of size at most k exists producing the given b<sub>i</sub>,
output -1 followed by a newline.  Otherwise, on the first line
output the size of a possible S.  If the size of that S is not
0, on
the second line, output a space-separated list of the indices in S,
followed by a newline.  If there exist multiple valid S to be
output, you can output any one of your choosing.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 1
111 1
001 0
011 1

<b>Output:</b>
1
1
</pre>


______________________________________________________
HASH||||||true||||||


<p>Consider the hash function h(y) = a*y + b (mod m) which maps each
integer to some integer between 0 and m-1.  You are given
x,n,c,d and are curious how many of the hash values
h(x),h(x+1),...,h(x+n) land in the interval [c,d].


*******InputConstraints*******

<p>The first line contains a positive integer t, the number of test
cases (1 &#8804; t &#8804; 10^5).  t lines then follow, where the ith
line gives the values a,b,x,n,c,d,m,
space-separated, for the ith test case.  All given values are
non-negative.  Also,
1 &#8804; m &#8804; 10<sup>15</sup>, c &#8804; d < m, a,b < m, x+n &#8804;
10<sup>15</sup>, and a*(x+n) + b &#8804; 10<sup>15</sup>.


*******OutputConstraints*******

<p>For each test case in order output the number of i, 0 &#8804; i &#8804; n,
such that c &#8804; a*(x+i) + b (mod m) &#8804; d in that test case,
followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2 3 1 3 0 1 7
1 0 0 8 0 8 9

<b>Output:</b>
1
9
</pre>


______________________________________________________
DISJPATH||||||true||||||


<p>One of your classes has K students in it who really don't like each other.  In fact, they dislike each other so much that they want to find routes to class that don't cross at any intersection so that they won't ever see each other outside of class.  Can you find such routes?


*******InputConstraints*******

<p>The input file will contain multiple cases. The first line of each
case is K N, where K is the number of routes you need
to find and N is the number of intersections in MIT's floor plan.
The intersections are numbered 1,...,N. This is followed
by N lines, one for each intersection, containing the indices of
the adjacent intersections, separated by spaces.  (This means that
if the line for intersection 2 contains a 3, then the line for
intersection 3 will contain a 2.)  Every intersection is adjacent
to at least one other intersection.

Each case is followed immediately by the next case. The end of the
input is indicated by a line containing only "0 0".

You may assume that 1 &#8804; K &#8804; 100 and 2 &#8804; N &#8804; 5000.

The students all start at intersection 1 and their class is at intersection 2.


*******OutputConstraints*******

<p>For each case, output the case number, in the format "Case #:", followed by a newline.

If there are K non-intersecting routes from the start (1) to the end (2),
then this must be followed K lines, each one giving a list of corners,
in order, on one such route from 1 to 2.  If not, then output one line
with the word "Impossible".

Output a blank line after each test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 5
3 4 5
3 4 5
1 2
1 2
1 2
4 5
3 4 5
3 4 5
1 2
1 2
1 2
0 0

<b>Output:</b>
Case 1:
1 3 2
1 4 2
1 5 2

Case 2:
Impossible
</pre>


______________________________________________________
COMPANY||||||true||||||


<p>In Plumsoft company, there is a hierarchy among employees, i.e. some of
them are bosses to the others. Person A is in charge of person B if
there is a sequence of employees P<sub>1</sub> = A, P<sub>2</sub>, ..., P<sub>k</sub> = B, such that
P<sub>1</sub> is P<sub>2</sub>'s boss, P<sub>2</sub> is P<sub>3</sub>'s boss, ..., and P<sub>k-1</sub> is
P<sub>k</sub>'s boss. As Plumsoft is a pretty sane company, you can assume that
no two employees can be in charge of each other.

The management wants to cut the costs of meetings (they eat a lot of food),
so they plan to minimize the number of "A is boss of B" relations by
keeping only some of the existing ones. However they want to keep all
"A is in charge of B" relations. Please, help them to successfully
make this transition.


*******InputConstraints*******

<p>The first line of the input contains two integers N and M separated
by a space character (1 &#8804; N &#8804; 1000, 1 &#8804; M &#8804; 10000).
N is the number of employees, and M is the number of "boss"
relations in the company. Employees are labeled with numbers 1
through N. Each of the next M lines contain two labels A and B separated
by a space character, meaning that A is a boss of B.


*******OutputConstraints*******

<p>In the first line of the output, write a single number M<sub>min</sub>, which is the minimum
number of "boss" relations that the company has to keep. In the next M<sub>min</sub> lines
write the relations that are kept. In each line, write two labels A and B
separated by a space character, meaning that A is still a boss of B. If there
are multiple solutions, write any of them. Relations can be listed in any order.
Each line of the output should be followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 8
3 5
1 4
4 3
1 3
4 5
1 2
1 5
2 3

<b>Output:</b>
5
3 5
1 4
4 3
1 2
2 3
</pre>


______________________________________________________
TREESIM||||||true||||||


<p>You are given two labeled and ordered rooted trees T and T' and
would like to calculate the <i>distance</i> from T to T', which is
the minimum number of operations you can perform on T to make it
<i>equivalent</i>
to T'.  For each operation you can choose to do one of three things:
<ol>
<li>change
the label of one node in T</li>
<li>delete a non-root node in T</li>
<li> insert a new node in T at a position somewhere below its root</li>
</ol>

<p>Recall the trees T and T' are ordered, which means that if a
non-leaf node has c children, its children are ordered from 1 to
c.  That is, there is a 1st child, a 2nd child, etc., all the
way up to a cth child.  When we say a tree X is equivalent
to a tree Y, we mean the root of X should have the same label
as the root of Y, their roots should have the same number of
children (call it c), and the subtree rooted at the ith child of the
root of X should be equivalent to the subtree rooted at the ith
child of the root of Y for i=1,2,...,c.

We now describe what we mean by deletion and insertion of non-root
nodes in T.  When deleting a non-root node w with d children,
let u be its
parent and suppose w is u's ith child.  Then the first child of
w becomes u's ith child, the second child of w becomes u's
(i+1)st child, etc.  For j < i, the jth child of u remains the
same, but for all j > i, the child which was formerly the jth
child of u now becomes its (j+d-1)st child (they get "shifted
over" due to the insertion of w's children into u's child list).
To insert a non-root node w into the tree, we can choose any node
u to be its parent, and we can choose any contiguous subsequence
(possibly empty) of u's children to become w's children, putting
w in their place.  When inserting a node, we can give it any label
we want at the time of insertion.

The root of T can never be deleted, and you can never
insert a new node above the root to become the old root's parent.  You
can, however, change the label of the root.

<br><br>

<center><img src="http://www.spoj.plhttp://web.mit.edu/acmicpc/www/2008/indiv/edit.png"></img></center>


*******InputConstraints*******

<p>The first line contains n and m separated by a space, the sizes of
the trees T and T', respectively (1 &#8804; n,m &#8804; 60).  The next
n lines describe
T.  On the ith line is a description of the ith node in the
tree: its label, the number of children it has, then a list of its
children in order from first to last, all space-separated.  The next
m lines similarly describe T'.  Labels are nonnegative
integers fitting in a 32-bit signed integer.  The root of each tree is the node which is not the child of
any other node in the tree.


*******OutputConstraints*******

<p>On a single line output the minimum number of operations that can be
performed on T to make it equivalent to T', followed by a newline.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 2
6 0
1 2 0 2
4 0
2 1 1
4 0

<b>Output:</b>
2
</pre>


______________________________________________________
RSTAURNT||||||true||||||


<p>After eating dinner at a restaurant with some friends, you determine
how much money each person owes. Each of you has some cash and some
change, but very few of you have exact change. Can you make change
for each other so that each person ends up paying the exact right
amount?


*******InputConstraints*******

<p>The input file will contain multiple cases. The first line of each
case is N, the number of people at the table. This is followed
by N lines, one for each i &#8712; [1,N], containing

<br>

<center><table width="100%" border="0">
<tr>
<td>x<sub>i</sub></td> <td>c<sub>i,1</sub></td> <td>c<sub>i,5</sub></td> <td>c<sub>i,10</sub></td> <td>c<sub>i,25</sub></td> <td>c<sub>i,100</sub></td> <td>c<sub>i,500</sub></td> <td>c<sub>i,1000</sub></td> <td>c<sub>i,2000</sub></td> <td>c<sub>i,5000</sub></td> <td>c<sub>i,10000</sub></td>
</tr>
</table></center>

<p>where x<sub>i</sub> is the amount in cents that person i owes and c<sub>i,v</sub>
is the number of coins or bills worth v cents that person i
starts out with. For example, person 1 has c<sub>1,1</sub> pennies, c<sub>1,5</sub>
nickels, etc.

Each case is followed immediately by the next case. The end of the
input is indicated by a line containing only a zero.

You may assume that no person owes more money than they have (i.e.
x<sub>i</sub> &#8804; &#931;<sub>j</sub> j*c<sub>i,j</sub>) and that the total amount of money in cents that
everyone starts with fits in a signed 32-bit integer. You may also
assume that N &#8804; 100000.


*******OutputConstraints*******

<p>For each case, output the case number, in the format "Case #:" (where # is the case number, starting at 1), followed by
a space, followed by "YES" if all of the money can
be rearranged so that each person ends up paying the correct amount
and "NO" if not.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
10 0 0 1 0 0 0 0 0 0 0
2
0 0 0 0 0 2 0 0 0 0 0
500 0 0 0 0 0 1 0 0 0 0
1
100 4 0 2 3 0 1 0 0 0 0
0

<b>Output:</b>
Case 1: YES
Case 2: YES
Case 3: NO
</pre>


______________________________________________________
PAGAIN||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PAGAIN/en/">English</a></td> 
<td width="50%"><a href="/problems/PAGAIN/vn/">Vietnamese</a></td> 
</tr></table>

<p>In this problem, you have to find the nearest prime number smaller than N. (3 <= N <= 2^32)


*******InputConstraints*******

<p>The first line contains an integer T specifying the number of test cases. (T <= 10000) </p>
<p>T lines follow, each line contains an integer N.


*******OutputConstraints*******

<p>For each test case, output the result on one line.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
5 
10
17

<b>Output:</b>
3
7
13
</pre>




______________________________________________________
PATHEADS||||||true||||||


<p>It's Bessie's birthday and time for party games! Bessie has instructed the N (1 &le; N &le; 100,000) cows conveniently numbered 1..N to sit in a circle (so that cow i [except at the ends] sits next to cows i-1 and i+1; cow N sits next to cow 1). Meanwhile, Farmer John fills a barrel with one billion slips of paper, each containing some integer in the range 1..1,000,000.</p>
<p>Each cow i then draws a number A<sub>i</sub> (1 &le; A<sub>i</sub> &le; 1,000,000) (which is not necessarily unique, of course) from the giant barrel.  Taking turns, each cow i then takes a walk around the circle and pats the heads of all other cows j such that her number A<sub>i</sub> is exactly divisible by cow j's number A<sub>j</sub>; she then sits again back in her original position.</p>
<p>The cows would like you to help them determine, for each cow, the number of other cows she should pat.</p>

*******InputConstraints*******

<ul>
<li>Line 1: A single integer: N.</li>
<li>Lines 2..N+1: Line i+1 contains a single integer: A<sub>i</sub>.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>Lines 1..N: On line i, print a single integer that is the number of other cows patted by cow i.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
2
1
2
3
4

<strong>Output:</strong>
2
0
2
1
3
</pre>
<p>The first cow pats the second and third cows; the second cows pats no cows; etc.</p>


______________________________________________________
MINMOVE||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MINMOVE/en/">English</a></td>
<td width="50%"><a href="/problems/MINMOVE/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p> </p>
<p>Given a string S[1..n] . A rotation on S is that we move the first character to the right-most of the string. More specific, after a rotation, S becomes T = S[2..n] + S[1].</p>
<p>For example: S = abcaa, then after a rotation we have S = bcaaa.</p>
<p>Find the minimum number of rotations to make S become the smallest lexicographical order string.</p>

*******InputConstraints*******

<p>A single line contains a string S. S contains only small letters of English alphabet (&lsquo;a&rsquo; .. &lsquo;z&rsquo;), and the length of S is not more than 100000.</p>

*******OutputConstraints*******

<p>A single line contains an integer which represents the minimum number of rotations.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
mississippi

<strong>Output:</strong>
10

</pre>
<p><strong>Test cases and time limit have been updated. Some accepted solution got TLE.</strong> </p>


______________________________________________________
WORDCNT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/WORDCNT/en/">English</a></td> 
<td width="50%"><a href="/problems/WORDCNT/vn/">Vietnamese</a></td> 
</tr></table>



<p>
Nguyen is writing a small software for counting words in a string. He becomes bored after finishing the software very fast. He now wants to find the number of words P in the longest consecutive sequence of words of the same length. 
</p>
<p>
Given a string containing only characters a...z and spaces (ASCII code is 32), a word is defined to be the longest sequence of non-space characters. Your task is to write a program to help Nguyen find the number P.
</p>

*******InputConstraints*******

<p>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data test, there is one single line containing the string to count words. There are less than 1000 words in the string. The length of each word does not exceed 20 characters.
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line the number P Nguyen wants to find.
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
2
a aa bb cc def ghi
a a a a a bb bb bb bb c c	

<b>Sample Output</b>
3
5
</pre>





______________________________________________________
LUCKYNUM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/LUCKYNUM/en/">English</a></td> 
<td width="50%"><a href="/problems/LUCKYNUM/vn/">Vietnamese</a></td> 
</tr></table>


<p>In some Asian countries, 8 and 6 are considered lucky digits. Any number containing only 8s and 6s is considered lucky number, e.g. 6, 8, 66, 668, 88, 886 &#8230;.
Nguyen is a student who likes mathematics very much. Nguyen likes lucky numbers but only of the form
</p>
<p>
                      S = 8&#8230;86&#8230;6
</p>
<p>
where S has at least one digit and the number of 8s or 6s can be zero. Examples of S are 8, 88, 6, 66, 86, 886, 8866 &#8230;
</p>
<p>
Given a positive integer X (1 < X < 10 000), Nguyen wants to find the smallest lucky number S which has at most 200 digits and is divisible by X.
</p>
<p>
Your task is to write a program to find that number for Nguyen.
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data test, there is one single line containing the integer X.
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line the smallest lucky number S which is divisible by X. In case there is no such a number which has at most 200 digits, write -1.
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
4
6
8
43
5	

<b>Sample Output</b>
6
8
86
-1
</pre>





______________________________________________________
HNSUBWAY||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/HNSUBWAY/en/">English</a></td> 
<td width="50%"><a href="/problems/HNSUBWAY/vn/">Vietnamese</a></td> 
</tr></table>


<p>
Hanoi is constructing a subway system. The subway system consists of M stations which are numbered from 1 to M and K two-way subway lines connecting pairs of stations directly. Hanoi metropolitan area is covered by T separated resident blocks each described as convex polygons. Subway lines can run under resident blocks.  When running under resident blocks including their boundary, the speed of the subway train is v1 while its speed is v2 when running under other parts (v1 < v2). The travel time between two stations a and b is the shortest time to go from a to b, possibly via intermediate stations (the transit time is not significant). They now have to select the central station from those existing stations so that the travel time from the central station to the farthest station, whose travel time to the central station is longest, is shortest. 
</p>

<p>
The figure below describes a subway system with four subway stations and four subway lines.  There are three resident blocks in the metropolitan area. In this figure, there are two segments of subway lines under resident blocks where the subway train has to travel with speed of v1.
</p>

<img src='http://vn.spoj.pl/SPOJVN/content/HNSUBWAY.gif'/>

 
<p>
Given a subway system, your task is to write a program to find the central station and to find the travel time from the farthest station to the central station.
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>

<p>
For each data set, the first line contains five integers M, K, T, v1, v2 (M < 31, K < 50, T < 10, 0 < v1 < v2 < 100) separated by space indicating number of stations, number of subway lines, number of resident blocks, the subway train speed when travelling under resident blocks, and the subway train speed when not travelling under resident blocks respectively. The ith line of the following M lines contains two integers Xi and Yi (-10000 &#8804; Xi,Yi &#8804; 10000) separated by space representing the coordinates of the ith station. The jth line of the following K lines contains two integers separated by space representing the two stations of the jth subway line. The gth line of the following T lines contains the description of the gth resident block. The line starts with an integer Vg (Vg < 8) which is the number of vertices followed by Vg pairs of integers (with absolute value not exceeding 10000) separated by space indicating the coordinates of Vg vertices of the polygon in a traversal order around the polygon, representing the gth resident block.
</p>


*******OutputConstraints*******

<p>For each data set, write in one line an integer indicating the integer part of (tmax * 100) where tmax is the travel time from the farthest station to the central station.</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
1
4 4 3 1 2
1 8
7 8
7 1
14 8
1 2
2 3
2 4
3 4
3 4 8 6 5 2 5
4 7 6 9 6 9 4 7 4
6 10 8 11 9 12 9 13 8 12 7 11 7	

<b>Sample Output</b>
500
</pre>





______________________________________________________
EARTHQK||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/EARTHQK/en/">English</a></td> 
<td width="50%"><a href="/problems/EARTHQK/vn/">Vietnamese</a></td> 
</tr></table>


<p>
In 3010, a group of people from the Earth has moved to live in the planet Alpha. Because the climatic condition of the planet is very severe, only a certain part of land can be cultivated.
</p>
<p> 
Suppose that the surface of the planet is a plane, and the cultivable land has the shape of a non self-cutting polygon which has N vertices with coordinates (X1, Y1), (X2, Y2), ..., (Xn , Yn), listed in a traversal order around the polygon. On the cultivable land, the group of people from Earth lives in a research station at position (Xp, Yp).
</p>
<img src='http://vn.spoj.pl/SPOJVN/content/EARTHQK.gif' />
<p>
On the planet Alpha, earthquakes often occur. Each time an earthquake occurs, a crack is created that people can not move through. This crack can go through the cultivable land and divide the cultivable land into separated parts. Luckily, the crack never crosses the research station. The example in the figure above shows two cracks divide the cultivable land into three separated parts, and the area of cultivable land that the group of people living in the research station can reach after two earthquakes is 22.
</p>
<p>
Let's assume that there are M earthquakes occurred, which are numbered from 1 to M. Each earthquake generated a crack that is described by a line passing through two points (Xj1, Yj1) and (Xj2, Yj2) (j=1..M).
</p>
<p> 
Your task is to write a program to calculate the area of cultivable land that the group of people living in the research station in position (Xp, Yp) can reach after M earthquakes.
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data test, the first line contains the integer N (3 &#8804;  N &#8804;  1000). The ith line of the following N lines contains two integers Xi and Yi (-10000 &#8804; Xi,Yi &#8804; 10000) separated by space, denoting the coordinates of ith vertex of the polygon, representing the cultivable land. The next line contains two integers (Xp,Yp) (-10000 &#8804; Xp,Yp &#8804; 10000) separated by space, denoting the coordinates of the research station. The next line contains the integer M (1 &#8804; M &#8804; 1000). The jth line of the following M lines contains four integers Xj1, Yj1, Xj2, and Yj2 separated by space, describing the line representing the crack created by the jth earthquake.
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line an integer indicating the integer part of (s * 100) where s is the area of reachable cultivable land after M earthquakes.
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
2
3
0 0
2 0
0 2
0 0
1
1 1 1 0
6
1 1
9 1
9 5
5 5
5 8
1 8
5 3
2
1 1 5 8
7 1 7 2	

<b>Sample Output</b>
150
2200
</pre>





______________________________________________________
PRETTYP||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PRETTYP/en/">English</a></td> 
<td width="50%"><a href="/problems/PRETTYP/vn/">Vietnamese</a></td> 
</tr></table>


<p>
An IT company decided to publish an internal newsletter describing the projects that have been successfully completed. Each department submits a text paragraph that will be printed in a corresponding designated box of the newsletter. Let&#8217;s assume that the paragraph contains only characters a...z and spaces (ASCII code is 32) in several lines, and a word is defined to be the longest sequence of non-space characters on a line.
</p>
<p>The printing has to satisfy the following rules:</p>
<ul>
<li>Text will be printed in a fixed-width font (meaning that every character occupies a fixed size width) from left to right and going down to the next line at the end of every line.</li>
<li>The number of printed characters in every line must be the same.</li>
<li>Words are printed in the box in the same order as they appear in the given paragraph. A word cannot be split or printed on more than one line. </li>
<li>Consecutive words on the same line are separated by exactly one space. </li>
<li>Every line contains only words from the original paragraph and spaces.</li>
<li>Any line that starts with a space must contain only spaces. </li>
</ul>
<p>
The newsletter editor wants to formally assess the prettiness level of a paragraph printing by defining the unbalance of it as the sum of the cubes of the number of space characters at the end of each line including lines containing only spaces. The smaller the unbalance, the prettier the paragraph printing is.
</p>
<p>
Consider the following example where the paragraph is printed in a box with three lines and each line has a 20-characters width in two ways:
</p>
<table border="1">
<tr>
<td>
<pre>
aaa bbbbbbbbb c dddd
eeeeeee ffffff
ggggggggg		
</pre>
</td>
<td>
<pre>
aaa bbbbbbbbb      
c dddd eeeeeee       
ffffff ggggggggg
</pre>
</td>
</tr>
</table>

<p>
In this example, the unbalance of the paragraph printing on the left is 0^3 + 6^3 + 11^3 = 1547 while the unbalance of the paragraph printing on the right is 7^3 + 6^3 + 4^3 = 623. The paragraph printing on the right is considered prettier.
</p>
<p>
Given a text paragraph and a box to be printed, your task is to write a program to find the prettiest printing that has the smallest unbalance. 
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data set, the first line contains an integer L (0 < L &#8804; 100) representing the number of lines in the designated box. The second line contains an integer W (0 < W &#8804; 1000) representing the number of characters width of the box. The remaining lines contain the paragraph with no more than 1000 words ended with a blank line. 
</p>


*******OutputConstraints*******

<p>
For each data test, write on one line the corresponding unbalance of the prettiest paragraph printing in the designated box. Write -1 in case there does not exist any way to print the paragraph in the designated box.
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
3
3
20
aaa bbbbbbbbb 
c dddd
eeeeeee ffffff
ggggggggg

2
5
abcde abcde

2
5
abcde abcde 
a

<b>Sample Output</b>
623
0
-1
</pre>





______________________________________________________
TRAFFICN||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TRAFFICN/en/">English</a></td> 
<td width="50%"><a href="/problems/TRAFFICN/vn/">Vietnamese</a></td> 
</tr></table>


<p>
The city traffic network consists of n nodes numbered from 1 to n and m one-way roads connecting pairs of nodes. In order to reduce the length of the shortest path between two different critical nodes s and t, a list of k two-way roads are proposed as candidates to be constructed. 
Your task is to write a program to choose one two-way road from the proposed list in order to minimize the resulting shortest path between s and t.
</p>


*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>

<p>
For each data set, the first line contains five positive integers n (n &#8804; 10 000), m (m &#8804; 100 000), k (k < 300), s (1 &#8804; s &#8804; n), t (1 &#8804; t &#8804; n) separated by space. The ith line of the following m lines contains three integers di, ci, li separated by space, representing the length li ( 0< li &#8804; 1000) of the ith one-way road connecting node di to ci. The jth line of the next k lines contains three positive integers uj, vj and qj (qj &#8804; 1000) separated by space, representing the jth proposed two-way road of length qj connecting node uj to vj.
</p>


*******OutputConstraints*******

<p>For each data set, write on one line the smallest possible length of the shortest path after building the chosen one two-way road from the proposed list. In case, there does not exist a path from s to t, write -1.
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
1
4 5 3 1 4
1 2 13
2 3 19
3 1 25
3 4 17
4 1 18
1 3 23
2 3 5
2 4 25	

<b>Sample Output</b>
35
</pre>




______________________________________________________
WINSTRAT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/WINSTRAT/en/">English</a></td> 
<td width="50%"><a href="/problems/WINSTRAT/vn/">Vietnamese</a></td> 
</tr></table>


<p>
A table has n rows labeled by numbers from 0 to n-1 and n columns also labeled by numbers from 0 to n-1. The coordinate of a cell belonging to the ith row and jth column is (i,j). Each cell has a value of 0 or 1. In this table, there are m cells having the value of 0. The remaining cells in the table have the values of 1. Two players play a game by making moves in turn until no more moves can be made. The first player will make the move first. Each player can only make one move at each step. The player who cannot make a move loses and the other player wins the game. A legal move is an action to flip the value (from 0 to 1 or from 1 to 0) of four cells at four corners of a rectangle inside the table which satisfies the following conditions:
</p>
<ul>
<li>the rectangle is has more than 1 row and more than 1 column,</li>
<li>the cell with the highest row-column coordinates among the four cells must have the value of 0.</li>
<li>Given the values of cells in the table, your task is to write a program to help the first player to find a winning strategy so that he will win the game no matter how the other player plays.</li>
</ul>

*******InputConstraints*******

<p>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data set, the first line contains an integer n (0 < n < 1000) representing the size of the table. The next line contains an integer m (0 < m <100). Each of the next m lines contains two integers x, y (0 &#8804; x,y < n)  separated by space representing the coordinates of a cell with the value of 0.
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line 1 if there exists a winning strategy for the first player with the given table or 0 otherwise.
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
4
100
1
0 0 
100
3
0 1
0 20
0 30 
100
2
2 3
3 2
10
2
1 2 
2 3	

<b>Sample Output</b>
0
0
0
1
</pre>




______________________________________________________
HEADQRT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/HEADQRT/en/">English</a></td> 
<td width="50%"><a href="/problems/HEADQRT/vn/">Vietnamese</a></td> 
</tr></table>


<p>Microhoo and Googloo are two competing IT companies from the same city. Each company has offices scattered across the city. To protect their critical information from each other, both companies have agreed to locate their headquarters as far from each other as possible.
</p>

<p>
Given the locations of Microhoo and Googloo existing offices, your task is to write a program to help the two companies to select their headquarters from existing offices so that the distance between their headquarters is longest. 
</p>


*******InputConstraints*******

<p>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>For each data set, the first line contains the integer n (2 &#8804; n &#8804; 30000) representing the total number of offices for both companies. The ith line of the next n line contains three integers xi, yi, ci (0 &#8804; |xi|, |yi| &#8804; 10<sup>8</sup>, 0 &#8804; ci &#8804; 1) separated by space, where (xi, yi) is the coordinate of the ith office and it is Microhoo&#8217;s office if ci = 0 and Googloo&#8217;s if ci = 1.
</p>
<p>It is guaranteed that each company has at least one office. 
</p>


*******OutputConstraints*******

<p>For each data test, write in one line the integer part of the longest distance between Microhoo&#8217;s and Googloo&#8217;s headquarters. 
</p>


*******IOTestCases*******

<pre>
<b>Sample Input</b>
2
2
0 0 0
3 -2 1
5
1 5 1 
-5 2 0
3 7 1
6 -2 0 
5 1 0

<b>Sample Output</b>
3
9
</pre>






______________________________________________________
ATOURISM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/ATOURISM/en/">English</a></td> 
<td width="50%"><a href="/problems/ATOURISM/vn/">Vietnamese</a></td> 
</tr></table>


<p>
There has been a growing interest in adventure tourism lately. However, organizing adventure tours is not an easy task. It requires very careful preparation with attention to specific details.
</p>
<p>
This tour has p young male and q female participants. In addition to the logistic and rescue team, the organizers also assign k more guides to join the tour. In the first stage of the tour, the road is quite narrow passing a cliff; the group will have to go in one line. To be able to help each other, a female participant has to go next to, i.e. before or after, a male participant or a guide. Furthermore, there must be at least one participant next to a guide. Given these constraints, there are several ways the group can form a line. Let&#8217;s denote B, G and M as a male participant, a female participant and a guide respectively. A line formation can be represented by a string of length (p+q+k) containing characters from the set (B, G, M). Two line formations are different if their string representations are different. For example, the group having 2 male, 2 female and a guide (p = q = 2, k = 1) has 24 different way to form a line as follows:
</p>
<style>
<!--
 /* Font Definitions */
 @font-face
	(font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1107304683 0 0 159 0;)
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	(mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	mso-ascii-font-family:Arial;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:Arial;
	mso-fareast-theme-font:minor-latin;
	mso-hansi-font-family:Arial;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;
	mso-fareast-language:EN-US;)
.MsoChpDefault
	(mso-style-type:export-only;
	mso-default-props:yes;
	mso-ascii-font-family:Arial;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:Arial;
	mso-fareast-theme-font:minor-latin;
	mso-hansi-font-family:Arial;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;
	mso-fareast-language:EN-US;)
.MsoPapDefault
	(mso-style-type:export-only;
	margin-bottom:10.0pt;
	line-height:115%;)
@page Section1
	(size:595.3pt 841.9pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;)
div.Section1
	(page:Section1;)
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	(mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin-top:0cm;
	mso-para-margin-right:0cm;
	mso-para-margin-bottom:10.0pt;
	mso-para-margin-left:0cm;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	mso-ascii-font-family:Arial;
	mso-ascii-theme-font:minor-latin;
	mso-hansi-font-family:Arial;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;
	mso-fareast-language:EN-US;)
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=VI style='tab-interval:36.0pt'>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid #F79646 1.0pt;
 mso-yfti-tbllook:1184;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:
 1.0pt solid #F79646;mso-border-insidev:1.0pt solid #F79646'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=41 style='width:30.4pt;border:solid #F79646 1.0pt;border-bottom:
  solid #F79646 2.25pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='margin-bottom:6.0pt;text-align:center'>
	<b><i><span style="font-size: 11.0pt; font-family: Times New Roman">Index</span></i></b></p>
  </td>

  <td width=72 style='width:54.0pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='margin-bottom:6.0pt;text-align:center'>
	<b><i>Group Line</i></b></p>
  </td>
  <td width=41 style='width:30.4pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class="MsoNormal" align="center" style="margin-bottom: 6.0pt"><b><i>
	<span style="font-size: 11.0pt; font-family: Times New Roman">Index</span></i></b></td>
  <td width=78 style='width:58.5pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class="MsoNormal" align="center" style="margin-bottom: 6.0pt"><b><i>Group 
	Line</i></b></td>
  <td width=41 style='width:30.4pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class="MsoNormal" align="center" style="margin-bottom: 6.0pt"><b><i>
	<span style="font-size: 11.0pt; font-family: Times New Roman">Index</span></i></b></td>
  <td width=78 style='width:58.5pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='margin-bottom:6.0pt;text-align:center'>
	<b><i>Group Line</i></b></p>
  </td>
  <td width=41 style='width:30.4pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class="MsoNormal" align="center" style="margin-bottom: 6.0pt"><b><i>
	<span style="font-size: 11.0pt; font-family: Times New Roman">Index</span></i></b></td>
  <td width=78 style='width:58.5pt;border-top:solid #F79646 1.0pt;border-left:
  none;border-bottom:solid #F79646 2.25pt;border-right:solid #F79646 1.0pt;
  mso-border-left-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='margin-bottom:6.0pt;text-align:center'>
	<b><i>Group Line</i></b></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;background:#FDE4D0;
  padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>1<o:p></o:p></b></p>
  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-align:justify'>BBGGM<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>7<o:p></o:p></p>

  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>BGMBG<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>13<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>MGBBG<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>19<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GBGMB<o:p></o:p></p>

  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>2<o:p></o:p></b></p>
  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-align:justify'>BBGMG<o:p></o:p></p>

  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>8<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>BGMGB<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>14<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>MGBGB<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>20<o:p></o:p></p>

  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GBMBG<o:p></o:p></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;background:#FDE4D0;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>3<o:p></o:p></b></p>

  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-align:justify'>BGBGM<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>9<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>BMGBG<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>15<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>MGGBB<o:p></o:p></p>

  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>21<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>GBMGB<o:p></o:p></p>
  </td>
 </tr>

 <tr style='mso-yfti-irow:4'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>4<o:p></o:p></b></p>
  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>BGBMG<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>10<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>BMGGB<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>16<o:p></o:p></p>

  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GBBGM<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>22<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal>GMBBG<o:p></o:p></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;background:#FDE4D0;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>5<o:p></o:p></b></p>
  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal>BGGBM<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>11<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>MBGBG<o:p></o:p></p>

  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>17<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GBBMG<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>23<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  background:#FDE4D0;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GMBGB<o:p></o:p></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;mso-yfti-lastrow:yes'>
  <td width=41 valign=top style='width:30.4pt;border:solid #F79646 1.0pt;
  border-top:none;mso-border-top-alt:solid #F79646 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'><b>6<o:p></o:p></b></p>
  </td>
  <td width=72 valign=top style='width:54.0pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>BGGMB<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>12<o:p></o:p></p>

  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>MBGGB<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>18<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>

  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>GBGBM<o:p></o:p></p>
  </td>
  <td width=41 valign=top style='width:30.4pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='margin-bottom:6.0pt;text-align:justify'>24<o:p></o:p></p>
  </td>
  <td width=78 valign=top style='width:58.5pt;border-top:none;border-left:none;
  border-bottom:solid #F79646 1.0pt;border-right:solid #F79646 1.0pt;
  mso-border-top-alt:solid #F79646 1.0pt;mso-border-left-alt:solid #F79646 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>GMGBB<o:p></o:p></p>

  </td>
 </tr>
</table>

<p>
Given p, q, and k, let&#8217;s denote n as the number of different ways to form a line. Your task is to write a program to calculate the remainder of n divided by 10<sup>7</sup>.
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data test, there is only one line containing three integers p, q and k (0 &#8804; p, q &#8804; 1 000, 0 &#8804; k &#8804; 10) separated by space.
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line the remainder of the number of different line formations divided by 10<sup>7</sup>.
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
1
2 2 1	

<b>Sample Output</b>
24
</pre>




______________________________________________________
MOEBIUS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MOEBIUS/en/">English</a></td> 
<td width="50%"><a href="/problems/MOEBIUS/vn/">Vietnamese</a></td> 
</tr></table>


<p>The game of Moebius is not well known, but there are some fanatics who spend their whole day playing Moebius. In this game, the player is to find the way to clear a pair of squares containing x and z on a Moebius with the minimum cost.
</p>
<table width='100%'>
<tr>
<td align='justify'>
A Moebius is made from a rectangular   paper, namely ABCD. Each face of this paper consists of a rectangular grid of equivalent squares  . On both grids, columns are sequentially numbered from   to  and rows are sequentially numbered from   to , all starting at A corner. In addition, every square , located at row   and column , can contain ,  or nothing (empty square). Taking this paper and giving it a half-twist, then joining the ends together, A with C and B with D, to form a single band, we have a Moebius, which has only one surface, for this game.
</td>
<td>
<img src='http://vn.spoj.pl/SPOJVN/content/MOEBIUS1.jpg' />
</td>
<tr>
<td>
<img src='http://vn.spoj.pl/SPOJVN/content/MOEBIUS2.jpg' />
</td>
<td>
<img src='http://vn.spoj.pl/SPOJVN/content/MOEBIUS3.jpg' />
</td>
</tr>
</table>
<p>        
One clearance of a pair of squares containing x and z could be executed only if there is a direct path between two squares through consecutive 4-neighbouring empty squares with at most two turns, either turn left or turn right. The intermediate empty squares may locate out of the Moebius. The cost to clear a pair of squares containing x and z is the length of the shortest direct path between two squares. After a clearance, the two original squares containing  and   become empty. The figure above shows two consecutive clearances with the cost of 5 and 8 respectively. 
</p>
<p>
Your task is to write a program to perform one clearance to clear a given pair of squares containing x and z with the minimum total cost using at most one extra intermediate clearance.
</p>

*******InputConstraints*******

<p>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.
</p>
<p>
For each data test, the first line contains 2 integers   and   (  separated by space. The next line contains two 3-tuples of the form C u v describing the two squares to remove, where   is either   for the front surface or   for the back surface,    and    are integer coordinates on the original rectangular surface. 
</p>
<p>
The next M lines describing the front surface of the Moebius. The ith line in these M lines contains N consecutive characters where each character can be x, z or &#8220;.&#8221; (&#8220;.&#8221; for empty), describing the ith row of the front surface.
</p>
<p>
The next M lines describing the back surface of the Moebius. The jth line contains N consecutive characters where each character can be x, z or &#8220;.&#8221; (&#8220;.&#8221; for empty), describing the jth row of the back surface. 
</p>

*******OutputConstraints*******

<p>
For each data test, write in one line the minimum total cost. Write   if the given pair cannot be cleared using at most one intermediate clearance. 
</p>

*******IOTestCases*******

<pre>
<b>Sample Input</b>
1
3 10
F 2 7
B 2 1
.....xxx.z
.....xzx.x
.....xxx.z
.z........
xz........
zz........	

<b>Sample Output</b>
13
</pre>




______________________________________________________
CATTLEB||||||true||||||


<p>
Canmuu is out for revenge after being utterly defeated by Bessie in paintball and has challenged Bessie to a video game.
</p>
<p>
In this game, Bessie starts out at point (BX, BY) in the coordinate grid (-1,000 <= BX <= 1,000; -1000 <= BY <= 1,000), and tries to escape, starting at time 0. She moves continuously at a velocity of (BVX, BVY) units/second (-100 <= BVX <= 100; -100 <= BVY <= 100). Thus, at time 1 she will be at point (BX + BVX, BY + BVY); at time
1.5 she will be at (BX + 1.5*BVX, BY + 1.5*BVY).
</p>
<p>
Unfortunately, Canmuu has sent N (1 <= N <= 50,000) cattle bruisers to pursue Bessie.  At time t=0, cattle bruiser i is at position (X_i, Y_i) (-1,000 <= X_i <= 1,000; -1,000 <= Y_i <= 1,000) with velocity (VX_i, VY_i) units/second (-1,000 <= VX_i <= 1,000; -1,000 <= VY_i <= 1,000).
</p>
<p>
Each cattle bruiser carries a "proximity" weapon to fire at Bessie; the weapon can hurt Bessie when the cattle bruiser is no further than R (1 <= R <= 2,500) units from her.
</p>
<p>
Bessie has a shield to protect herself from these attacks. However, she does not want to waste any of her shield's power, so she would like to know the maximum number of cattle bruisers within firing range for any (potentially non-integer) time t >= 0.
</p>
<p>
In order to avoid precision errors with real numbers, it is guaranteed that the answer produced will be the same whether the attack range is decreased to R-0.0001 or increased to R+0.0001.
</p>

*******InputConstraints*******

<p>

* Line 1: Six space-separated integers: N, R, BX, BY, BVX, and BVY

* Lines 2..N+1: Line i+1 contains four space-separated integers: X_i,
        Y_i, VX_i, and VY_i


*******OutputConstraints*******

<p>

* Line 1: Print a single integer denoting the maximum number of cattle
        bruisers within attack range at any point in time.

*******IOTestCases*******


<pre>
<b>Input:</b>

3 1 0 0 0 2
0 -3 0 4
1 2 -1 1
1 -2 2 -1
</pre>

<b>Input details:</b>
<p>
Bessie starts at point (0, 0) and is moving at 2 units per second in the (positive) y-direction. There are 3 cattle bruisers, the first of which starts at point (0, -3) and travels 4 units per second in the y-direction. The maximum distance for a cattle bruiser to be in range of Bessie is 1 unit.
</p>
<pre>
<b>Output:</b>

2
</pre>
<b>Output details:</b>
<p>
At time 1.5, Bessie is at point (0, 3), and the three bruisers are at points (0, 3), (-0.5, 3.5), and (4, -3.5). The first two cattle bruisers are within 1 unit of Bessie, while the third will never be within 1 unit of Bessie, so 2 is the most achievable.
</p>




______________________________________________________
MOOPIZZA||||||true||||||


<p>
Moo U's cafeteria has run out of hay and so must order pizzas for
the C (1 <= C <= 1,000) calves attending Moo U.  Conveniently, a
large pizza from the local pizzeria, Pizza Farm, serves exactly one
calf.
</p>
<p>
Pizza Farm is willing to make a pizza for each calf, but, due to
the size of the order, has three constraints on the order:</p>
<p>
   * Although Pizza Farm has long list of T (1 <= T <= 30) vegetarian
     toppings, each of the pizzas must have exactly K (1 <= K <=
     T) toppings<br><br>
   * No topping on a pizza can be duplicated (a pizza cannot have
     onions and onions, for example).<br><br>
   * No two pizzas in the order can have the same set of toppings.<br><br>
     For example, if pizza 1 has onions, green peppers, pineapples,
     and wheat grass, then it can be the only pizza with that exact
     set of toppings, although pizza 2 might have onions, green
     peppers, pineapples, and also olives.<br></p>
<p>
For ordering purposes, the toppings are numbered 1..T.</p>
<p>
The calves at Moo U are very picky when it comes to their pizza
toppings.  Some calves might not like all of the toppings available.
A calf will eat a pizza only she likes every single one of the
toppings on that pizza.  Determine the maximum number of calves
that can be fed.</p>

*******InputConstraints*******

<p>
* Line 1: Three integers: C, T, and K.

* Lines 2..C+1: Each line of space-separated integers describes which
        toppings one of the calves likes.  The first integer on a line
        is the number of topping the calf likes.  The remaining
        integers on the line are the toppings that the calf likes.

*******OutputConstraints*******

<p>

* Line 1: A single integer, the maximum number of calves that can be
        fed.
*******IOTestCases*******


<pre>
<b>Input:</b>

3 2 1
2 2 1
1 1
1 2

</pre>

<b>Input details:</b>
<p>
There are three calves.  Pizza Farm has two toppings and each pizza
must have exactly one topping.  The first calf likes both of the
toppings, the second calf likes only the first topping, and the
third calf likes only the second topping.
</p>
<pre>
<b>Output:</b>

2
</pre>
<b>Output details:</b>
<p>
There are only two pizzas that can be made: a pizza with topping 1 and a
pizza with topping 2.  If the first pizza is given to the first
calf (since she likes topping 1) and the second pizza to the third calf
(since she likes topping 2), two calves will be fed.  There is no way to
feed
all three calves.</p>




______________________________________________________
KGSS||||||true||||||


<div align="left">
You are given a sequence A[1], A[2], ..., A[N] ( 0 &#8804; A[i] &#8804; 10^8 , 2 &#8804; N &#8804; 10^5 ). There are two types of operations and they are defined as follows:</p>
<b>Update:</b>
<p>
This will be indicated in the input by a 'U' followed by space and then two integers i and x.<p>
<B>U i x</b>, 1 &#8804; i &#8804; N, and x, 0 &#8804; x &#8804; 10^8.<p>
This operation sets the value of A[i] to x.</p>
<b>Query:</b>
<p>
This will be indicated in the input by a 'Q' followed by a single space and then two integers i and j.<p>
<b>Q x y</b>, 1 &#8804; x &lt; y &#8804; N. <p>
You must find i and j such that x &#8804; i, j &#8804; y and i != j, such that the sum A[i]+A[j] is maximized. Print the sum A[i]+A[j].
</p>

*******InputConstraints*******

<p>The first line of input consists of an integer <b>N</b> representing the length of the sequence. Next
line consists of N space separated integers A[i]. Next line contains an integer <b>Q</b>, Q &#8804; 10^5, representing the number of operations. Next Q lines contain the operations.


*******OutputConstraints*******

<p>Output the maximum sum mentioned above, in a separate line, for each Query.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 2 3 4 5
6
Q 2 4
Q 2 5
U 1 6
Q 1 5
U 1 7
Q 1 5

<b>Output:</b>
7
9
11
12

</pre>
<div align="center">
<b>Warning: large Input/Output data, be careful with certain languages</b>
</div>


______________________________________________________
PROOT||||||true||||||


<p>In the field of Cryptography, prime numbers play an important role. We are interested in a scheme called "Diffie-Hellman" key exchange which allows two communicating parties to exchange a secret key. This method requires a prime number <b>p</b> and <b>r</b> which is a primitive root of p to be publicly known. For a prime number p, r is a primitive root if and only if it's exponents r, r<sup>2</sup>, r<sup>3</sup>, ... , r<sup>p-1</sup>  are distinct (mod p).
<p>
Cryptography Experts Group (CEG) is trying to develop such a system. They want to have a list of prime numbers and their primitive roots. You are going to write a program to help them. Given a prime number p and another integer r < p , you need to tell whether r is a primitive root of p.


*******InputConstraints*******

<p>There will be multiple test cases. Each test case starts with two integers <b>p</b> ( p < 2 <sup> 31 </sup> ) and <b>n</b> (1 &#8804; n &#8804; 100 ) separated by a space on a single line. p is the prime number we want to use and n is the number of candidates we need to check. Then n lines follow each containing a single integer to check. An empty line follows each test case and the end of test cases is indicated by p=0 and n=0 and it should not be processed. The number of test cases is atmost 60.</p>


*******OutputConstraints*******

<p>For each test case print "YES"  (quotes for clarity) if r is a primitive root of p and "NO" (again quotes for clarity) otherwise.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 2
3
4

7 2
3
4

0 0


<b>Output:</b>
YES
NO
YES
NO
</pre>



______________________________________________________
SNOOKER||||||true||||||


<p>Consider a rectangular snooker table with pockets only at the 4 corners of the rectangle as shown in the image below. Consider all integer points on the boundary of the table. At each point, except the four corners (four pockets), you are allowed to hit the ball at an angle of <strong>45</strong> degrees from the side of the table from which you are hitting the ball.</p>
<p>From any point on the boundary you can hit the ball in two directions and they are considered to be two different ways. For instance in the image shown below, from the point S the ball can be hit in two ways as shown.</p>
<p>Given the dimensions of the board your task is to find the number of ways in which the ball can be hit so that it <em>eventually</em> reaches one of the four holes.</p>
<p>Consider the ball to be of negligible size, like a point. Also assume that the ball does not lose energy due to collisions or friction - it keeps moving until it drops into a hole.</p>
<p><img src="http://www.spoj.pl../../../content/swarnaprakash:snooker.jpg" alt="" /></p>

*******InputConstraints*******

<p>The input has multiple test cases. Each test case consists of two space separated integers <strong>M</strong> and <strong>N</strong>, 2 &le; M,N &le; 10^5, representing the dimensions of the table. M=N=0 indicates the end of tests. There are atmost 300 testcases.</p>

*******OutputConstraints*******

<p>For each test case output the number of ways as described, in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 2
2 4
3 5
0 0

<strong>Output:</strong>
0
4
24

</pre>


______________________________________________________
RAINBOW||||||true||||||


<p>Mr.Raju and his extended family are on vacation in Chennai. They visit MGM and see the Rainbow ride. They want to enjoy the ride. However, there are some problems.
<p>
Each person in the family likes some other people in the family. Each person insists that he or she will go on the ride only if all the people whom that person likes and all the people who like that person also go on the ride. If someone doesn't like anyone and no one likes him, he may come for the ride.
<p>
You have been roped in to solve this dilemma. Given the weight of the each person in the family, and the list of people they like, and the maximum weight that the Rainbow can bear safely, calculate the maximum number of people in the family who can go on the rainbow. 


*******InputConstraints*******

<p> There will be multiple test cases in the input. For our convenience the family members are numbered from 1 to n. Each test case begins with a line containing two   integers <b>n</b> ( 1 &#8804; n &#8804; 1000 ) and <b>C</b> ( 0 &#8804; C &#8804; 1000 ), where n is the number of people in the family and C the maximum capacity of the ride in kilograms.</p>
<p>
The next line contains n space separated integers with the <b>i</b>th integer giving the weight of the <b>i</b> th family member. These weights are positive and less than or equal to 200 kilograms. Then n lines follow. Each line contains a sequence of integers separated by spaces. The first integer <b>k<sub>i</sub></b> gives the number of people in the family person <b>i</b> likes, followed by the persons <b>i</b> likes. An empty line separates each test case. The end of input is indicated by n=0 and C=0 and it should not be processed.There are atmost 50 test cases.


*******OutputConstraints*******

<p>For each test case output on a separate line the maximum number of persons that can take the ride under the given conditions.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 200
50 50 50 50 50
1 2
1 3
0
1 5
1 4

3 200
100 100 100
1 2
1 3
1 1

0 0

<b>Output:</b>
3
0
</pre>


______________________________________________________
TREX||||||true||||||


<p><p>Although evolution theory suggests that mammals started to dominate this world only after the mass extinction of the dinosaurs, there are some people who say man and dinosaurs may have co-existed for some time. Some argue that man even tamed and used some of these animals like the Flintstones. Shankar is such a believer and Sunil is a skeptic.
<p>
One day Sunil asked Shankar, "If your argument is right how would you tame a T-REX and what would you use it for?". Shankar replied, "We can use it for cow transportation from one village to another and we can keep it calm by feeding it at constant intervals". Sunil argued that the T-REX would have a maximum capacity <b>C</b> to carry. Let us say the distance is <b>d</b> km. If it is long, the T-REX would eat all the cows before it reaches the other village. Shankar argued that he knew a method that takes the maximum possible number of cows <b>M</b> to the destination. Sunil replied, "Oh really? I will give a few conditions. The T-REX will eat 1 cow every km until it reaches the destination. It may do so at any time during a 1 km stretch. So,there can not be a situation where the TREX has no cow to eat. If you drop cows in the middle, you can do so only at distances which are a multiple of 1 km. And, finally all the cows at the destination need to be alive i.e you can not cut a cow (fractions are not allowed)".
<p>
Shankar was stunned. He needs your help. Given <b>I</b> (the number of cows at the starting village) , <b>d</b> and <b>C</b> find <b>M</b>, the maximum number of cows that can be taken to the destination subject to the mentioned constraints.


*******InputConstraints*******

<p>There will be multiple test cases in the input. The input begins with a line containing a single integer <b>n</b>,n &#8804; 300, which gives the number of test cases. Then n lines follow each containing the three integers <b>I</b>, 1 &#8804; I &#8804; 10<sup>6</sup>, <b>d</b>, 1 &#8804; d &#8804; 10<sup>5</sup>, and <b>C</b>, 1 &#8804; I &#8804; 10<sup>6</sup>, in that order separated by spaces. <b>d</b> is in kilometers.


*******OutputConstraints*******

<p>For each test case print on a separate line the maximum number of cows that can be transported to the destination village under the given conditions.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3000 1000 1000
30 10 10


<b>Output:</b>
533
5
</pre>



______________________________________________________
SLIKAR||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/SLIKAR/en/">English</a></td> 
<td width="50%"><a href="/problems/SLIKAR/vn/">Vietnamese</a></td> 
</tr></table>


<p>Josip is a strange painter. He wants to paint a picture consisting of NÃ—N pixels, where N is a power of
two (1, 2, 4, 8, 16 etc.). Each pixel will be either black or white. Josip already has an idea of how each
pixel will be coloured.</p>
<p>This would be no problem if Josip's painting process wasn't strange. He uses the following recursive
process:</p>
<ul>
<li> If the picture is a single pixel, he colours it the way he intended. </li>
<li> Otherwise, split the square into four smaller squares and then: 
<ul>
<li>1. Select one of the four squares and colour it white.</li>
<li>2. Select one of the three remaining squares and colour it black.</li>
<li>3. Consider the two remaining squares as new paintings and use the same three-step process
on them. </li></ul>
</li>
</ul>
<p>Soon he noticed that it was not possible to convert all his visions to paintings with this process. Your
task is to write a program that will paint a picture that differs as little as possible from the desired
picture. The difference between two pictures is the number of pairs of pixels in corresponding
positions that differ in colour. </p>


*******InputConstraints*******

<p>The first line contains an integer N (1 &#8804; N &#8804; 512), the size of the picture Josip would like to paint. N
will be a power of 2.</p>
<p>Each of the following N lines contains N digits 0 or 1, white and black squares in the target picture.</p>


*******OutputConstraints*******

<p>On the first line, output the smallest possible difference that can be achieved.</p>
<p>On the next N lines, output a picture that can be painted with Josip's process and achieves the smallest
difference. The picture should be in the same format as in the input.</p>
<p>Note: The second part of the output (the picture) may not be unique. Any correct output will
be accepted.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
8
01010001
10100011
01010111
10101111
01010111
10100011
01010001
10100000

<b>Output:</b>
16
00000001
00000011
00000111
00001111
11110111
11110011
11110001
11110000
</pre>






______________________________________________________
TREZOR||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TREZOR/en/">English</a></td> 
<td width="50%"><a href="/problems/TREZOR/vn/">Vietnamese</a></td> 
</tr></table>



<p>Mirko decided to open a new business &#8211; bank vaults. A branch of the bank can be visualized in a plane,vaults being points in the plane. Mirko's branch contains exactly L&#183;(A+1+B) vaults, so that each point
with integer coordinates inside the rectangle with corners (1, &#8722;A) and (L, B) contains one vault.</p>
<p>The vaults are watched by two guards &#8211; one at (0, &#8722;A), the other at (0, B). A guard can see a vault if
there are no other vaults on the line segment connecting them.</p>
<p>A vault is not secure if neither guard can see it, secure if only one guard can see it and super-secure if
both guards can see it.</p>
<p>Given A, B and L, output the number of insecure, secure and super-secure vaults.</p>


*******InputConstraints*******

<p>The first line contains integers A and B separated by a space (1 &#8804; A &#8804; 2000, 1 &#8804; B &#8804; 2000).</p>
<p>The second line contains the integer L (1 &#8804; L &#8804; 1 000 000 000).</p>


*******OutputConstraints*******

<p>Output on three separate lines the numbers of insecure, secure and super-secure vaults.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1 1
3

<b>Output:</b>
2
2
5
</pre>


<pre>
<b>Input:</b>
2 3
4

<b>Output:</b>
0
16
8
</pre>

<pre>
<b>Input:</b>
7 11
1000000

<b>Output:</b>
6723409
2301730
9974861
</pre>






______________________________________________________
PERIODNI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PERIODNI/en/">English</a></td> 
<td width="50%"><a href="/problems/PERIODNI/vn/">Vietnamese</a></td> 
</tr></table>



<p>Luka is bored in chemistry class so he is staring at a large periodic table of chemical elements hanging
from a wall above the blackboard. To kill time, Luka decided to make his own table completely
different from the one in the classroom.</p>
<p>His table consists of N columns, each with some height, aligned at the bottom (see example below).
After he draws the table he needs to fill it with elements. He first decided to enter the noble gases of
which there are K. Luka must put them in the table so that no two noble gases are close to each other.</p>
<p>Two squares in the table are close to each other if they are in the same column or row, and all squares
between them exist. In the example below, the 'a' squares are not close, but the 'b' squares are.</p>

<img height=160 src="http://vn.spoj.pl/SPOJVN/content/periodni.jpg" width=200>


<p>Write a program that, given N, K and the heights of the N columns, calculates the total number of
ways for Luka to place the noble gases into the table. This number can be large, so output it modulo
1 000 000 007.</p>

*******InputConstraints*******

<p>The first line contains the integers N and K separated by a space (1 &#8804; N &#8804; 500, 1 &#8804; K &#8804; 500), the
number of columns in Luka's table and the number of noble gases.</p>
<p>The next line contains N positive integers, separated by spaces. These are heights of the columns from
left to right. The heights will be at most 1 000 000.</p>


*******OutputConstraints*******

<p>Output the number of ways for Luka to fill his table with noble gases, modulo 1 000 000 007.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 2
2 3 1 2 4

<b>Output:</b>
43
</pre>




______________________________________________________
SUBSUMS||||||true||||||


<p>Given a sequence of N (1 &#8804; N &#8804; 34) numbers S<sub>1</sub>, ..., S<sub>N</sub> (-20,000,000 &#8804; S<sub>i</sub> &#8804; 20,000,000), determine how many subsets of S (including the empty one) have a sum between A and B (-500,000,000 &#8804; A &#8804; B &#8804; 500,000,000), inclusive.</p>


*******InputConstraints*******

<p>The first line of standard input contains the three integers N, A, and B. The following N lines contain S<sub>1</sub> through S<sub>N</sub>, in order.</p>


*******OutputConstraints*******

<p>Print a single integer to standard output representing the number of subsets satisfying the above property. Note that the answer may overflow a 32-bit integer.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 -1 2
1
-2
3

<b>Output:</b>
5
</pre>

<p>The following 5 subsets have a sum between -1 and 2:</p>
<ul>
<li>0 = 0 (the empty subset)</li>
<li>1 = 1</li>
<li>1 + (-2) = -1</li>
<li>-2 + 3 = 1</li>
<li>1 + (-2) + 3 = 2</li>
</ul>


______________________________________________________
JEDNAKOS||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/JEDNAKOS/en/">English</a></td>
<td width="50%"><a href="/problems/JEDNAKOS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>While browsing a math book, Mirko found a strange equation of the form A=S.What makes the equation strange is that A and S are not the same,which makes the equation incorrect. Mirko realized that the left side of the equation should have addition operations between some pairs of digits in A. Write a program that inserts the smallest number of addition operations on the left side to make the equation correct. The numbers in the corrected equation may contain arbitrary amounts of eading zeros.</p>

*******InputConstraints*******

<p>The first line contains the equation in the form A=S.</p>
<p>A and S will both be positive integers without leading zeros. They will be different.</p>
<p>A will contain at most 1000 digit</p>
<p>S will be less than or equal to 5000</p>
<p>Note: The input data will guarantee that a solution, although not necessarily unique, will always exist.</p>

*******OutputConstraints*******

<p>Output the number of addition operations needed</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
143175=120

<strong>Output:</strong>
2
</pre>
<pre><strong>Input:</strong>
5025=30

<strong>Output:</strong>
1
</pre>
<pre><strong>Input:</strong>
999899=125

<strong>Output:</strong>
4
</pre>
<p> </p>


______________________________________________________
GONDOR||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/GONDOR/en/">English</a></td>
<td width="50%"><a href="/problems/GONDOR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></span></h3>
<p>The legendary land of Gondor had a network of sparks to quickly alert the entire land of an emergency.</p>
<p>Every spark is manned by an archer with several arrows and instruction in which order to light the other sparks.</p>
<p>More precisely,when his own spark is lit,the archer next to it lights his arrows and shoots one at every other spark that has not yet been lit, in the order in which his instructions say. The archer does so until he is out of arrows (or sparks to shoot at).The archers are very precise so every arrow hits its target. The time or an arrow to travel some distance is equal to that distance,while the time or an archer to shoot all his arrows is negligible. Sauron's army is approaching Gondor so the spark at Minas Tirith has been lit. Write a program that, given the layout o sparks in the coordinate plane, the number of arrows and instructions or every archer,calculates the time indices at which each of the sparks will be lit.</p>

*******InputConstraints*******

<p>The first line contains an integer N (1 &le;N &le;100),the number o sparks.The sparks are numbered  from 1 to N. The spark in Minas Tirith, which has been lit at time 0, is spark number 1.</p>
<p>Each of the following N lines describes one spark. The description of one spark is composed of :</p>
<p>The integers X and Y (1 &le;X,Y &le;1000),the coordinates of the spark;</p>
<p>An integer S (1 &le;S &le;100),the number of arrows;</p>
<p>N-1 distinct integers between 1 and N, the instructions or the archer. The instructions are the order in which, once his spark is lit, the archer will consider shooting arrows at other sparks.</p>
<p>No number will appear more than once in the list, nor will an archer be instructed to shoot an arrow at his own spark.</p>
<p>The input will be such that no two sparks will be lit at the same time.</p>

*******OutputConstraints*******

<p>Output N decimal numbers,each on a single line,the times at which the sparks light up,in order from spark 1 to N. Your output must be accurate to &plusmn;0.01.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1 1 1 2 3 4
1 2 1 4 1 3
2 1 1 2 1 4
2 2 1 3 2 1


<strong>Output:</strong>
0.000000
1.000000
3.000000
2.000000

</pre>
<pre><strong>Input:</strong>
5
4 3 2 5 2 4 3
4 5 1 4 1 5 3
4 4 1 1 4 5 2
2 4 1 5 2 3 1
3 4 2 2 4 3 1


<strong>Output:</strong>
0.000000
2.000000
4.414214
2.414214
1.414214

</pre>
<p> </p>


______________________________________________________
MAJMUN||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MAJMUN/en/">English</a></td>
<td width="50%"><a href="/problems/MAJMUN/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></span></h3>
<p>Coming home after a hard day at school, Ivica is ready to relax playing the computer game "Monkey &amp;banana". In the game, the monkey is located in a jungle, modeled as a coordinate plane.Every point with integer coordinates represents a tree. The monkey is initially located at tree (XM ,YM ) facing up i.e.towards the tree (XM ,YM +1).The monkey is controlled with the keys 0 to 7.When the key K is pressed,the monkey turns 45 degrees left K times and then jumps to the first tree he sees in his new direction.</p>
<p>The game lasts until the monkey jumps exactly N times.After that,the score is calculated from the distance between the monkey and the banana tree,which is located at coordinates (XB ,YB ).The lower the distance,the bigger the score. Ivica played one game and is now interested if he could have done better changing at most one key press. Write a program that determines the smallest possible ending (Euclidean) distance between the monkey and the banana tree (it is possible that the current score cannot be improved).</p>

*******InputConstraints*******

<p>The first line of input contains our integers XM ,YM ,XB and YB (0 &#61603;&#61472;XM ,YM ,XB ,YB &#61603;&#61472;1 000 000),the initial coordinates of the monkey and the coordinates o the banana tree. The next line contains the integer N (1 &le;N &le;100 000),the number o jumps (key presses)in the game played.</p>
<p>The last line contains a string o N digits between 0 and 7,the keys that Ivica pressed.</p>

*******OutputConstraints*******

<p>Output a single decimal number,the smallest achievable distance.Your output must be accurate to &plusmn;0.01.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
0 0 2 3
5
15102


<strong>Output:</strong>
0.000000
</pre>
<pre><strong>Input:</strong>
5 5 10 5
3
000


<strong>Output:</strong>
2.000000
</pre>
<pre><strong>Input:</strong>
0 0 10 10
9
700003000


<strong>Output:</strong>
1.414214
</pre>
<p> </p>


______________________________________________________
BRTREE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/BRTREE/en/">English</a></td> 
<td width="50%"><a href="/problems/BRTREE/vn/">Vietnamese</a></td> 
</tr></table>


<p>Breadtree is a kind of tree that produces bread. At its first year, a breadtree is only a node with a bread of weight 0 on this node which is also called zeronode. Every year after that, the weight of bread on each node of the tree will increase by 1, and another branch with a zeronode will grow at the end of each node. However, there is a limit of branches on each node. That is, when the number of branches of a node reaches the limit, there won't be any more branches, but the weight of its bread will still increase. What's more, a breadtree remains unchanged when the total weight of bread is larger than 1234567890. 


*******InputConstraints*******

<p>There are two integers N and K on each line. N is a positive integer fit in signed 32-bit integer. K is a non-negative integer fit in signed 32-bit integer. An N equals to 0 signals the end of input, which should not be processed. 


*******OutputConstraints*******

<p>Output the total weight of bread on a breadtree with branches limit K in the N-th year in a line for each case. 


*******IOTestCases*******


<pre>
<b>Input:</b>
10000 0
101 1
10 2
1221 128
0 0


<b>Output:</b>
9999
5050
221
2147483647

</pre>




______________________________________________________
GEORGE||||||true||||||


<p>Last week Mister George visited Croatia. Since Mister George is a very important person, while he was in a street, the police <b>disallowed entry</b> to that street, but vehicles that entered the street before Mister George could continue driving.</p>
<p>While Mister George was visiting, Luka drove his truck around town. But because of some of the streets being closed off, he couldn't make his delivery in time and almost lost his job. Although it is late now, he is wondering how he could have planned his delivery better i.e. what would have been the least time needed to make his delivery while Mister George was visiting. He knows the route mister George took.</p>
<p>The city is modeled with intersections and two-way streets connecting them. For each street, Luka knows how much time he needs to traverse it (mister George needs he same amount of time).</p>
<p>For example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it, this street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during minutes 9 and earlier, or 15 and later.</p>
<p>Write a program that calculates the least amount of time Luka needs to make his delivery, if he starts driving K minutes after the arrival of Mister George.</p>



*******InputConstraints*******

<p>The first line contains two integers N and M (2 <= N <= 1000, 2 <= M <= 10 000), the number of intersections and the number of streets. The intersections are numbered 1 to N.
The second line contains four integers A, B, K and G (1 <= A, B <= N, 0 <= K <= 1000, 0 <= G <= 1000).
These are, in order:
<ul>
<li>The intersection where Luka starts;</li>
<li>The intersection Luka must get to;</li>
<li>The difference in starting times between mister George and Luka (Luka starts at intersection A exactly K minutes after mister George starts his route);</li>
<li>The number of intersections on Mister George's route.</li>
</ul>
The third line contains G integers, the labels of intersections mister George will visit. Every pair of adjacent integers denotes a street he will traverse. That street will exist and Mister George will traverse every street at most once.
Each of the following M lines contains three integers A, B and L, meaning that there is a street between intersection A and B, and it takes L minutes to traverse. L will be between 1 and 1000.</p>


*******OutputConstraints*******

<p>Output the least amount of time (in minutes) Luka needs to make his delivery.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
6 5
1 6 20 4
5 3 2 4
1 2 2
2 3 8
2 4 3
3 6 10
3 5 15

<b>Output:</b>
21
</pre>

<hr align="center" width=50% />

<pre>
<b>Input:</b>
8 9
1 5 5 5
1 2 3 4 5
1 2 8
2 7 4
2 3 10
6 7 40
3 6 5
6 8 3
4 8 4
4 5 5
3 4 23

<b>Output:</b>
40
</pre>

<hr align="center" />
<a href="http://www.hsin.hr/coci/">Croatian Open Competition in Informatics (COCI) - 2007/2008 Contest #6</a>


______________________________________________________
STREET||||||false||||||

<p>There are <b>n</b> lots on one side of a street (where <b>n</b> &#8804; 500). We would like to erect at
most <b>k</b> apartment buildings on these lots. Each building must occupy an interval of
at most <b>t</b> consecutive lots. Moreover, each lot <b>i</b> has a height restriction <b>r[i]</b> (where
<b>r[i]</b> &#8804; 100). A building cannot exceed any of the height restriction of any lot on which
it is built (that is, the maximal height of the building that can be erected on lot <b>i</b> to
<b>j</b> is: </p> 
<center>
<p> <b>H = min{r[i], r[i + 1], ..., r[j]})</b></p>
</center>
<p>Hence, the maximum usable facade space of
the building is: <b>H Ã— (j &#8722; i + 1)</b>. We would like to have a program to select at most <b>k</b>
non-overlapping intervals to erect the buildings such that the total usable facade space
is maximized.
</p>

<h3>Example 1</h3>
<p>
Consider a street of length 10. The height restriction of each lot is as follows:
<pre>7, 3, 12, 11, 13, 4, 8, 6, 6, 20</pre>
Suppose we would like to erect at most <b>k</b> = 2 buildings and each building occu-
pies at most <b>t</b> = 4 lots. Then, to maximize the total usable facade space, we choose
two intervals <b>r</b>[3..5] = (12, 11, 13) and <b>r</b>[7..10] = (8, 6, 6, 20) (see &#8220;Example 1&#8221; in
the figure below). The maximum usable facade space is 3 &#8727; min{12, 11, 13} + 4 &#8727;
min{8, 6, 6, 20} = 57.
</p>
<p>
<center><img src="http://www.spoj.pl/content/andmej:street.png" alt="Example" /></center>
</p>

<h3>Example 2</h3>
<p>Suppose we would like to erect at most <b>k</b> = 3 buildings on the same street with the
same height restrictions as in Example 1, and each building occupies at most <b>t</b> = 4 lots.
Then, to maximize the total usable facade space, we choose three intervals <b>r</b>[3..5] =
(12, 11, 13), <b>r</b>[7..9] = (8, 6, 6) and <b>r</b>[10..10] = (20) (see &#8220;Example 2&#8221; in the figure
above). The maximum usable facade space is 3 &#8727; min{12, 11, 13} + 3 &#8727; min{8, 6, 6} +
1 &#8727; 20 = 71.
</p>


______________________________________________________
LUBEN||||||true||||||


<p>Children in school are having fun instead of listening to the teacher. With their iPhone devices the children throw watermelons at each other on the Facebook social site.</p>
<p>The game started when Goran threw one watermelon at each of his friends during the first class that day. During subsequent classes, all children (including Goran) behaved like this:
<ul>
<li>If they had been hit by an odd number of watermelons during the previous class, they threw exactly one watermelon at each of their friends;</li>
<li>If they had been hit by an even number of watermelons (including zero), then they hit each of their friends with two watermelons.</li>
</ul>
</p>
<p>The children are numbered 1 through N, Goran obviously being number 1. The friend relationships between the children are also known.</p>
<p>Write a program that will calculate the total number of watermelons thrown after H classes.</p>


*******InputConstraints*******

<p>The first line contains two integers N and H (1 &#8804; N &#8804; 20, 1 &#8804; H &#8804; 1 000 000 000), the number of kids and classes.</p>
<p>Each of the following N lines contains a string of N characters '0' or '1'. The character (A, B) in this matrix is '1' if children A and B are friends.</p>
<p>No child will be their own friend. The input matrix will be symmetric</p>


*******OutputConstraints*******

<p>Output the number of watermelons after H classes.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
01000
10110
01000
01001
00010

<b>Output:</b>
26
</pre>



______________________________________________________
KRUS||||||true||||||


<p>Aladdin has become bored of life at the palace. He has a steady job, his wife Jasmine, kids are on the way and life is becoming monotonous. Prompted by all this, he has decided to have one more adventure before settling down.</p>
<p>He has decided to find the Golden Pear, an extremely valuable legendary artifact that no one has been able to find.</p>
<p>The desert Aladdin is searching is can be modeled as an NÃ—N grid of cells. Rows and columns are numbered 1 through N top to bottom and left to right. Some of the cells in the desert contain wizards that help Aladdin's quest in an unusual way.</p>
<p>Aladdin starts his quest in the top left corner of the desert on a Monday facing right. His movement involves repeating these steps:</p>
<ul>
<p>1. If the current cell contains a wizard that is awake, then Aladdin turns 90 degrees left or right, depending on what the wizard says.</p>
<p>2. If moving forward would take Aladdin out of desert, he turns 180 degrees.</p>
<p>3. Aladdin moves forward one cell and it takes him exactly one day.</p>
</ul>
<p>For each wizard we know his location and his activity schedule for each day of the week. The schedule is a string of exactly seven letters 'L', 'R' or 'S', each character telling us what the wizard does on one day of the week (starting with Monday). The letter 'L' means that Aladdin will be told to turn left, 'R' that Aladdin will be told to turn right, while 'S' means the wizard sleeps that day.</p>
<p>An old prophecy says that after K changes in direction (in steps 1 and/or 2) Aladdin will find the Pear.</p>
<p>Write a program that calculates how many days the search will last, according to the ancient prophecy.</p>

*******InputConstraints*******

<p>The first line contains two integers N and K (2 &#8804; N &#8804; 200, 1 &#8804; K &#8804; 1 000 000 000), the size of the desert and the number of direction changes in the prophecy.</p>
<p>The second line contains an integer M (0 &#8804; M &#8804; 10 000), the number of wizards.</p>
<p>Each of the following M lines contains two integers R and C (1 &#8804; R, C &#8804; N), and a string of seven letters 'L', 'R' or 'S'. The numbers represent the row and column where the wizard is located, while the string is his schedule.</p>
<p>No two wizards will share the same cell, nor will there be a wizard in cell (1, 1).</p>


*******OutputConstraints*******

<p>Output the length of the search in days.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 2
2
1 3 RRSRRRR
1 5 RRRRLRR

<b>Output:</b>
4
</pre>



______________________________________________________
TRES||||||true||||||


<p>Lana lives in a small but merry village. There is a row of cherry trees next to the main street. Lana numbered the trees with consecutive integers starting with 1.</p>
<p>After much studying, Lana noticed that the number of the tree uniquely determines the amount of cherries the tree gives.</p>
<p>For one tree, consider consecutive groups of digits in the tree's number. For each group of digits, multiply the digit by the square of the length of the group. Adding these numbers for all groups gives the total number of cherries the tree gives.</p>
<p>For example, in tree number 77744007, the groups are 777, 44, 00 and 7. The amount of cherries will be 7&#183;3^2 + 4&#183;2^2 + 0&#183;2^2 + 7&#183;1^2 = 86 units.</p>
<p>The time has come to pick the cherry trees and the villagers have agreed to pick all trees numbered A through B (inclusive). Write a program that will calculate the total amount of cherries picked.</p>


*******InputConstraints*******

<p>Input consists of two integers A and B (1 &#8804; A &#8804; B &#8804; 10^15), the first and last trees to be picked.</p>


*******OutputConstraints*******

<p>Output a single integer, how many units of cherries will be picked.


*******IOTestCases*******


<pre>
<b>Input:</b>
100 111

<b>Output:</b>
68
</pre>



______________________________________________________
MLASERP||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MLASERP/en/">English</a></td> 
<td width="50%"><a href="/problems/MLASERP/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
The cows have a new laser-based system so they can have casual
conversations while out in the pasture which is modeled as a W x H
grid of points (1 &lt;= W &lt;= 100; 1 &lt;= H &lt;= 100).

The system requires a sort of line-of-sight connectivity in order
to sustain communication. The pasture, of course, has rocks and
trees that disrupt the communication but the cows have purchased
diagonal mirrors ('/' and '\' below) that deflect the laser beam
through a 90 degree turn. Below is a map that illustrates the
problem.

H is 8 and W is 7 for this map.  The two communicating cows are
notated as 'C's; rocks and other blocking elements are notated as
'*'s:

7 . . . . . . .         7 . . . . . . .
6 . . . . . . C         6 . . . . . /-C
5 . . . . . . *         5 . . . . . | *
4 * * * * * . *         4 * * * * * | *
3 . . . . * . .         3 . . . . * | .
2 . . . . * . .         2 . . . . * | .
1 . C . . * . .         1 . C . . * | .
0 . . . . . . .         0 . \-------/ .
  0 1 2 3 4 5 6           0 1 2 3 4 5 6

Determine the minimum number of mirrors M that must be installed
to maintain laser communication between the two cows, a feat which
is always possible in the given test data.

</pre>

<cen><h3>INPUT</h3></cen>
<pre>
* Line 1: Two space separated integers: W and H

* Lines 2..H+1: The entire pasture.

SAMPLE INPUT  

7 8
.......
......C
......*
*****.*
....*..
....*..
.C..*..
.......
</pre>
<b>OUTPUT </b>
<pre>
* Line 1: A single integer: M

SAMPLE OUTPUT 

3
</pre>
 <b>Any suggestted testcase will be welcomed.</b>

 


______________________________________________________
VCIRCLES||||||true||||||


<p>Given N circles. Calculate the total area that these N circles cover.
</p> 


*******InputConstraints*******

<p>First line: N (1 <= n <= 50)</p> 

<p>- In the i-th line of the next n lines contains 3 integers Xi, Yi and Ri, separated by spaces. These are the coordinates of the center and the radius of the i-th circle (-10000<=Yi-Ri,Yi+Ri,Xi-Ri,Xi+Ri<=10000)</p>


*******OutputConstraints*******

<p> The total area that these N circles cover with 5 digits after decimal point </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5 6 3
5 5 5

<b>Output:</b>
78.53982
</pre>



______________________________________________________
RELJEF||||||true||||||


<p>Two groups of cavemen got into a land dispute and decided to settle it the old fashion-way, by throwing sticks at each other. The fight was organized in a cave, high enough that the ceiling is of no concern, but mineral deposits on the ground get in the way of flying sticks.</p>
<p>The cave can be divided into R rows and C columns, so that the entire cave consists of RÃ—C cells. Each cell in the cave is either empty or contains a chunk of mineral. Two chunks of minerals are part of the same cluster if they are adjacent in one of the four main directions (up, down, left, right).</p>
<p>One group of cavemen is on the left side of the cave, the other on the right side. The groups alternate throwing sticks at the other group; first a group chooses the height at which the stick will fly and then (climbing on each others' shoulders as necessary) they throw it and the stick flies horizontally through the cave at the chosen height.</p>
<p>If the stick hits a chunk of mineral on the way, it destroys the chunk, the cell becomes empty and the stick stops its journey.</p>
<p>When a chunk is destroyed, it is possible that a cluster falls apart. If a newly created cluster would float in the air, then it falls down because of gravity. While falling, the cluster does not change shape i.e. all chunks in it fall together. As soon as some chunk in the falling cluster lands on a chunk from a different cluster or the ground, the entire cluster stops falling. Of  ourse, if a cluster lands on another, they merge and become one.</p>
<p>Your program will be given the layout of minerals in the cave and the heights at which sticks were
thrown. Determine the layout of minerals after the sticks are exchanged.</p>

*******InputConstraints*******

<p>The first line contains two integers R and C (1 &#8804; R, C &#8804; 100), the dimensions of the cave.</p>
<p>Each of the following R lines will contain C characters. The character '.' represents an empty cell, while the letter 'x' represents a chunk of mineral. </p>
<p>The next line contains an integer N (1 &#8804; N &#8804; 100), the number of sticks thrown.</p>
<p>The last line contains N integers separated by spaces, the heights at which sticks were thrown. All heights will be between 1 and R (inclusive), with height 1 being the bottom of the matrix and height R the top. The first tick is thrown left to right, the second right to left and so on.</p>
<p>No cluster will initially float in the air. Also, the input data will be such that at no point will two or
more clusters fall simultaneously, so that there will be no ambiguous situations.</p>


*******OutputConstraints*******

<p>The output should consist of R lines, each containing C characters, the final layout of the cave, in the
same format as in the input.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
8 8
........
........
...x.xx.
...xxx..
..xxx...
..x.xxx.
..x...x.
.xxx..x.
5
6 6 4 3 1

<b>Output:</b>
........
........
........
........
.....x..
..xxxx..
..xxx.x.
..xxxxx.
</pre>



______________________________________________________
VPALIN||||||true||||||


<p>A word is called a palindrome if we read from right to left is as same as we read from left to right. For example, "dad", "eye" and "racecar" are all palindromes, but "odd", "see" and "orange" are not palindromes. </p>

<p>Given n palindromes, you can generate n Ã— n pairs of them and concatenate the pairs into single words. The task is to count how many of the so generated words are palindromes.</p>


*******InputConstraints*******

<p>The first line of input file contains the number of strings n. The following n lines describe each string:

The i+1-th line contains the length of the i-th string li, then a single space and a string of li small letters of English alphabet.

You can assume that the total length of all strings will not exceed 2,000,000. Two strings in different line may be the same. </p>


*******OutputConstraints*******

<p>Print out only one integer, the number of palindromes. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 a
2 bb
2 aa


<b>Output:</b>
5
The 5 palindromes are:
aa aaa aaa bbb aaaa 
</pre>



______________________________________________________
VBOSS||||||true||||||


<p>Several surveys indicate that the taller you are, the higher you can climb the corporate ladder. At TALL Enterprises Inc. this "de facto standard" has been properly formalized: your boss is always at least as tall as you are. Furthermore, you can safely assume that your boss earns a bit more than you do. In fact, you can be absolutely sure that your immediate boss is the person who earns the least among all the employees that earn more than you and are at least as tall as you are. Furthermore, if you are the immediate boss of someone, that person is your subordinate, and all his subordinates are your subordinates as well. If you are nobody's boss, then you have no subordinates. As simple as these rules are, many people working for TALL are unsure of to whom they should be turning in their weekly progress report and how many subordinates they have. Write a program that will help in determining for any employee who the immediate boss of that employee is and how many subordinates they have. Quality Assurance at TALL have devised a series of tests to ensure that your program is correct. These test are described below.</p>


*******InputConstraints*******

<p>On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and q, where m (at most 30000) is the number of employees and q (at most 200) is the number of queries. The following m lines each list an employee by three integers on the same line: employee ID number (six decimal digits, the first one of which is not zero), yearly salary in Euros and finally height in &#956;m (1 &#956;m = 10-6 meters - accuracy is important at TALL). The chairperson is the employee that earns more than anyone else and is also the tallest person in the company. Then there are q lines listing queries. Each query is a single legal employee ID.</p>
<p>The salary is a positive integer which is at most 10 000 000. No two employees have the same ID,and no two employees have the same salary. The height of an employee is at least 1 000 000 &#956;m and at most 2 500 000 &#956;m.</p>


*******OutputConstraints*******

<p>For each employee ID x in a query output a single line with two integers y k, separated by one space character, where y is the ID of x's boss, and k is the number of subordinates of x. If the query is the ID of the chairperson, then you should output 0 as the ID of his or her boss (since the chairperson has no immediate boss except, possibly, God). </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 3
123456 14323 1700000
123458 41412 1900000
123457 15221 1800000
123456
123458
123457
4 4
200002 12234 1832001
200003 15002 1745201
200004 18745 1883410
200001 24834 1921313
200004
200002
200003
200001

<b>Output:</b>
123457 0
0 2
123458 1
200001 2
200004 0
200004 0
0 3
</pre>



______________________________________________________
MTOTALF||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTOTALF/en/">English</a></td> 
<td width="50%"><a href="/problems/MTOTALF/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Farmer John always wants his cows to have enough water and thus has
made a map of the N (1 <= N <= 700) water pipes on the farm that
connect the well to the barn. He was surprised to find a wild mess
of different size pipes connected in an apparently haphazard way.
He wants to calculate the flow through the pipes.

Two pipes connected in a row allow water flow that is the minimum
of the values of the two pipe's flow values. The example of a pipe
with flow capacity 5 connecting to a pipe of flow capacity 3 can
be reduced logically to a single pipe of flow capacity 3:

  +---5---+---3---+    ->    +---3---+

Similarly, pipes in parallel let through water that is the sum of
their flow capacities:

    +---5---+
 ---+       +---    ->    +---8---+
    +---3---+

Finally, a pipe that connects to nothing else can be removed; it
contributes no flow to the final overall capacity:

    +---5---+
 ---+               ->    +---3---+
    +---3---+--

All the pipes in the many mazes of plumbing can be reduced using
these ideas into a single total flow capacity.

Given a map of the pipes, determine the flow capacity between the
well (A) and the barn (Z).

Consider this example where node names are labeled with letters:

                 +-----------6-----------+
        A+---3---+B                      +Z
                 +---3---+---5---+---4---+
                         C       D

Pipe BC and CD can be combined:

                 +-----------6-----------+
        A+---3---+B                      +Z
                 +-----3-----+-----4-----+
                             D

Then BD and DZ can be combined:

                 +-----------6-----------+
        A+---3---+B                      +Z
                 +-----------3-----------+

Then two legs of BZ can be combined:

                 B
        A+---3---+---9---+Z

Then AB and BZ can be combined to yield a net capacity of 3:

        A+---3---+Z

Write a program to read in a set of pipes described as two endpoints
and then calculate the net flow capacity from 'A' to 'Z'. All
networks in the test data can be reduced using the rules here.

Pipe i connects two different nodes a_i and b_i (a_i in range
'A-Za-z'; b_i in range 'A-Za-z') and has flow F_i (1 <= F_i <=
1,000). Note that lower- and upper-case node names are intended
to be treated as different.
</pre>

<br><c><h3>INPUT</h3></c>
<pre>
* Line 1: A single integer: N

* Lines 2..N + 1: Line i+1 describes pipe i with two letters and an
        integer, all space-separated: a_i, b_i, and F_i

SAMPLE INPUT  

5
A B 3
B C 3
C D 5
D Z 4
B Z 6

</pre>
<c><h3>OUTPUT </h3></c>
<pre>
* Line 1: A single integer that the maximum flow from the well ('A')
        to the barn ('Z')

SAMPLE OUTPUT  

3
</pre>

 


______________________________________________________
VMILI||||||true||||||


<p>Military headquaters plan to develop a better protection for a spaceport. They suppose that the spaceport would be best protected if it is surrounded with as many fences as possible and each fence is patroled by armed guards. The corresponding order was issued and military engineers started to develop a project.</p>
<p>Wishing to be promoted, sergeant Stupid sent soldiers to dig in fence poles before the project was actually ready. Without much thinking, the soldiers put a lot of poles at random. Help the sergeant to decide how to make barbwire fences using the poles so that the number of fences is maximal. 


*******InputConstraints*******

<p>The first line contains an integer 3 &#8804; N &#8804; 4000, which is the number of the poles. Each of the following N lines contains two integers 0 &#8804; x, y &#8804; 10000, which are the coordinates of a corresponding pole. No two poles have the same position. 


*******OutputConstraints*******

<p>The output should contain a single integer number, which is the maximal possible number of nested fences that can be constructed. Each fence is a closed polygonal line without self-crossing whose vertices are poles. Different fences should not have common points.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
100 100
200 100
100 200
300 300


<b>Output:</b>
1
</pre>



______________________________________________________
GCDEX||||||true||||||


<p>Given the value of N, you will have to find the value of G. The meaning of G is given in the following code </p>
<p>G=0;

<p>  for(k=i;k< N;k++) </p>

<p>     for(j=i+1;j<=N;j++)

<p>{

  <p>  G+=gcd(k,j);

<p>}

<p>/*Here gcd() is a function that finds the greatest common divisor of the two input numbers*/


*******InputConstraints*******

<p>The input file contains at most 20000 lines of inputs. Each line contains an integer N (1<N<1000001). The meaning of N is given in the problem statement. Input is terminated by a line containing a single zero.  


*******OutputConstraints*******

<p>For each line of input produce one line of output. This line contains the value of G for the corresponding N. The value of G will fit in a 64-bit signed integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
10
100
200000
0

<b>Output:</b>
67
13015
143295493160

Time limit has been changed. Some AC solutions get TLE
</pre>



______________________________________________________
VPARTY||||||true||||||


<p>Today there is a party at school. N girls and M boys attend this party. The principal wants to give some presents to the girl and he decides to make the boy do that. Each boy has told the principal the name of the two girls that he wants to give the present to so the principal wants the form teacher to choose some boys to do that. However, he is short in cash now so he wants the number of boys selected is minimum but he also wants all the girls to have at least one present. If you select a boy, then he will give the presents to both of the girls he has chosen.


*******InputConstraints*******

<p>The first line contains two integers N and M (2 &#8804; N &#8804; 1000, 1 &#8804; M &#8804; 1000) which is the number of the girls and boys. </p>
<p>The i-th line of the following M lines contains two integers ai and bi (1 &#8804; ai, bi &#8804; N) which are the two girls that the i-th boy wants to give present to


*******OutputConstraints*******

<p>One single integer number, which is the minimum boys the form teacher should choose.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
1 2
2 3
1 3

<b>Output:</b>
2
</pre>


______________________________________________________
TABLIC||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TABLIC/en/">English</a></td> 
<td width="50%"><a href="/problems/TABLIC/vn/">Vietnamese</a></td> 
</tr></table>


<p>Ivo has an NÃ—N table. The table has the integers 1 through N<sup>2</sup> inscribed in row-major order. The following operations can be done on the table:</p>
<p>1. Rotate a row &#8211; all cells in a single row are rotated right, so that the number in the last column moves to the first.</p>
<p>2. Rotate a column &#8211; all cells in a single column are rotated down, so that the number in the last
row moves to the first.</p>
<p>Ivo occasionally feels the urge to move a number X to cell (R, C) and proceeds as follows:</p>
<ul>
<li>While X is not in column C, rotate the row it is in.</li>
<li>While X is not in row R, rotate the column it is in.</li>
</ul>
<p>Ivo wants to move K numbers one after another. Write a program that calculates the number of
rotations needed.</p>

*******InputConstraints*******

<p>The first line contains two integers N (2 &#8804; N &#8804; 10 000) and K (1 &#8804; K &#8804; 1000), the table dimension and
the number of moves.</p>
<p>Each of the following K lines contains three integers X (1 &#8804; X &#8804; N<sup>2</sup>), R and C (1 &#8804; R, C &#8804; N), the
description of one move Ivo wants to make. Ivo does the moves in the order in which they are given.</p>


*******OutputConstraints*******

<p>Output K lines; for each move, output the number of rotations needed.</p>


*******IOTestCases*******


<pre>
Input
4 1
6 3 4

Output
3


Input
4 2
6 3 4
6 2 2

Output
3
5


Input
5 3
1 2 2
2 2 2
12 5 5

Output
2
5
3
</pre>




______________________________________________________
CVJETICI||||||true||||||


<p>On a faraway planet, strange plants with two stems can be found. Every plant on the planet can be
described by three numbers: the x-coordinates of the stems L and R, and the height H at which the
stems are connect. The image depicts a plant with L=2, R=5 and H=4.</p>

<img src = "http://vn.spoj.pl/content/cv1.jpg" width = "176" height = "134">

<p>Every day a new plant grows on the planet. The plant that grows on day 1 is of height 1, and every
subsequent plant is one higher than the previous one.</p>
<p>When a stem of a new plant intersects the horizontal segment of another plant, a small flower grows
(if one wasn't there already). If segments merely touch in a point, a flower will not grow there.
The following images are a visualization of the first example.</p>

<img src = "http://vn.spoj.pl/content/cv2.jpg" width = "176" height = "134">

<img src = "http://vn.spoj.pl/content/cv3.jpg" width = "176" height = "134">

<img src = "http://vn.spoj.pl/content/cv4.jpg" width = "176" height = "134">

<img src = "http://vn.spoj.pl/content/cv5.jpg" width = "176" height = "134">

<p>Write a program that, given the coordinates of all plants, calculates the number of new flower every
day.</p>


*******InputConstraints*******

<p>The first line contains an integer N (1 &#8804; N &#8804; 100 000), the number of days.</p>
<p>Each of the following N lines contains two integers L and R (1 &#8804; L < R &#8804; 100 000), the coordinates of
the stems of a plant.</p>


*******OutputConstraints*******

<p>Output N lines, the number of new flowers after each plant grows.</p>


*******IOTestCases*******


<pre>
Input
4
1 4
3 7
1 6
2 6

Output
0
1
1
2


Input
5
1 3
3 5
3 9
2 4
3 8

Output
0
0
0
3
2
</pre>


______________________________________________________
MMAXPER||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMAXPER/en/">English</a></td> 
<td width="50%"><a href="/problems/MMAXPER/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Given  are n  rectangles,  numbered  from 1  to n. We place  them  
tightly on  the  axis OX,  from  left  to right, according to 
rectangles' numbers. Each rectangle stays on the axis OX either by its 
shorter or by its longer side (see the picture below). Compute the 
length of the upper envelop line, i.e. perimeter's length of the obtained 
figure minus  the  length of  the  left, right and 
bottom straight line segments of the picture. Write program to 
find the maximum possible length of the upper envelop line.
</pre>
<a href="http://tinypic.com" target="_blank"><img height = 70% width=70% src="http://i39.tinypic.com/dc5tls.jpg" border="0" alt="Image and video hosting by TinyPic"></a>
<br><c><h3>INPUT</h3></c>
<pre>
On  the  first  line  of  the  standard  input,  the  value  of  n 
is written. On  each  of  the  next  n  lines,  two integers are given 
&#8211; a_i  and b_i &#8211; the side lengths of the i_th rectangle.  
Constraints:  0 < n < 1000; 0 < a_i < b_i < 1000, for each i = 1, 2, &#8230;, n. 

SAMPLE INPUT:
5 
2 5 
3 8 
1 10 
7 14 
2 5 
</pre>
<c><h3>OUTPUT </h3></c>
<pre>
On a line of the standard output, your program should write the 
result as a positive integer

SAMPLE OUTPUT  

68
</pre>
<b>Explanation: </b>
<pre>A configuration, that yields the maximum length of the upper envelop
line, is presented on the picture. 
The  upper  envelop  line  consists  of  segments DC, CG, GF, FJ,  JI,  IM,
ML, LP,  and PO. 
The  total length is 5 + 6 + 3 + 7 + 10 + 13 + 7 + 12 + 5 = 68</pre>
<b>Problem for kid - Please, think like kid.</b>

 


______________________________________________________
MAJSTOR||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MAJSTOR/en/">English</a></td> 
<td width="50%"><a href="/problems/MAJSTOR/vn/">Vietnamese</a></td> 
</tr></table>


<p>Rock-paper-scissors is a popular two-player game. In the game, each of the players uses their hand to
show one of three symbols: rock, paper or scissors. If both players show the same symbol, the game is
a tie. Otherwise, scissors beat paper, paper beats rock and rock beats scissors.</p>
<p>Sven has been studying the psychological intricacies of the game for years and has become a real master
at the game, his friends not standing a chance against him in one-on-one games.</p>
<p>With the world championships around the corner, Sven is practicing his skills playing simultaneous
games with N of his friends. One such game consists of R rounds. In each round, Sven and each of his
friends show one of the three symbols.</p>
<p>When calculating the score, in each round, Sven's symbol is independently compared to each of his
friends' symbols. Sven scores two points for every win and one point for every tie. Sven does not get
points for losing.</p>
<p>Write a program that calculates Sven's total score, and also his largest possible score had he known in
advance all the symbols his friends would show.</p>


*******InputConstraints*******

<p>The first line contains the integer R (1 &#8804; R &#8804; 50), the number of rounds played.</p>
<p>The second line contains a string of R letters 'S', 'P' or 'R'. The string represents symbols that Sven
showed in each round. 'S' is for scissors, 'P' for paper, 'R' for rock.</p>
<p>The third line contains the integer N (1 &#8804; N &#8804; 50), the number of friends.</p>
<p>Each of the following N lines contains a string of R letters 'S', 'P' or 'R'. These are the symbols shown
by each of the N friends in each of the R rounds.</p>


*******OutputConstraints*******

<p>Output Sven's actual score on the first line.</p>
<p>Output his largest possible score on the second line, assuming his friends didn't change their symbols.</p>

*******IOTestCases*******


<pre>
Input
5
SSPPR
1
SSPPR

Output
5
10


Input
5
SSPPR
2
PPRRS
RRSSP

Output
10
15


Input
4
SPRS
4
RPRP
SRRR
SSPR
PSPS

Output
12
21
</pre>




______________________________________________________
CIJEVI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/CIJEVI/en/">English</a></td> 
<td width="50%"><a href="/problems/CIJEVI/vn/">Vietnamese</a></td> 
</tr></table>


<p>To help design the new gas pipeline which will be used to deliver Russian gas to Croatia, Zagreb and
Moscow are using the computer game Pipe Mania. In the game, Europe is divided into R rows and C
columns. Each cell can be empty or contain one of the seven basic pipeline building blocks:</p>

<img src = "http://vn.spoj.pl/SPOJVN/content/civ1.jpg" width = "342" height = "206">

<p>Gas flows from Moscow to Zagreb. Gas can flow in either direction through the building blocks.
Block '+' is special in that gas must flow in two directions (one vertical, one horizontal), as in the
following example:</p>

<img src = "http://vn.spoj.pl/SPOJVN/content/civ2.jpg" width = "384" height = "230">

<p>Work on the new pipeline had already started when it was found that malicious hackers got hold of the
plan and erased exactly one building block from the plan i.e. replaced it with an empty cell.</p>
<p>Write a program that determines where the block was erased from and what type it was.</p>


*******InputConstraints*******

<p>The first line contains two integers R and C, the dimensions of Europe (1 &#8804; R, C &#8804; 25) </p>
<p>The following R lines contain the plan, each consisting of exactly C characters. The characters are:</p>
<ul>
<li>Period ('.'), representing an empty cell;</li>
<li>The characters '|' (ASCII 124), '-', '+', '1', '2', '3', '4', representing the building block types;</li>
<li>The letters 'M' and 'Z', representing Moscow and Zagreb. Each of these will appear exactly
once in the plan.</li>
</ul>
<p>The flow of gas will be uniquely determined in the input; exactly one building block will be adjacent to
each of Moscow and Zagreb. Additionally, the plan will not have redundant blocks i.e. all blocks in the
plan must be used after the missing block is added.</p><p>
The input will be such that a solution will exist and it will be unique.</p>


*******OutputConstraints*******

<p>Output the row and column of the erased block, and the type of the block (one of the seven characters
as in the input).</p>


*******IOTestCases*******


<pre>
Input
3 7
.......
.M-.-Z.
.......
Output
2 4 -


Input
3 5
..1-M
1-+..
Z.23.

Output
2 4 4


Input
6 10
Z.1----4..
|.|....|..
|..14..M..
2-+++4....
..2323....
..........

Output
3 3 |
</pre>





______________________________________________________
M3TILE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/M3TILE/en/">English</a></td> 
<td width="50%"><a href="/problems/M3TILE/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
In how many ways can you tile a 3xn rectangle with 2x1 dominoes?

Here is a sample tiling of a 3x12 rectangle.

Input consists of several test cases followed by a line containing -1.
Each test case is a line containing an integer 0 &#8804; n &#8804; 30. For each test
case, output one integer number giving the number of possible tilings. 
</pre>
<img src="http://www.spoj.plhttp://online-judge.uva.es/p/v109/p10918b.gif"/> 
<c><h3>SAMPLE INPUT </h3></c>
<pre>
2
8
12
-1
</pre>
<h3>SAMPLE OUTPUT  </h3>
<pre>
3
153
2131
</pre>

 


______________________________________________________
WHEN||||||true||||||


<p>It's said: there can be miracles, when you believe. The following programming language shows the power of "when". It has a very simple (case insensitive) grammar, shown below:</p>
<blockquote><pre>
PROGRAM := WHEN | PROGRAM WHEN
WHEN := 'when ' EXPRESSION &lt;ENTER> STATEMENTS 'end when' &lt;ENTER>
STATEMENTS := STATEMENT | STATEMENTS STATEMENT
STATEMENT := PRINT | SET
PRINT := 'print '  EXPRESSION_LIST &lt;ENTER>
SET := 'set ' ASSIGNMENT_LIST &lt;ENTER>
EXPRESSION_LIST := EXPRESSION | EXPRESSION_LIST ',' EXPRESSION
ASSIGNMENT_LIST := ASSIGNMENT | ASSIGNMENT_LIST ',' ASSIGNMENT
ASSIGNMENT := VARIABLE '=' EXPRESSION
EXPRESSION := '(' EXPRESSION OP EXPRESSION ')' | VARIABLE | NUMBER 
OP :=  '&lt;' | '+' | '-' | 'and' | 'or' | 'xor'
VARIABLE := '$' NOT_DOLLAR_STRING '$'
NUMBER := DIGIT | NUMBER DIGIT
DIGIT := '0' | .. | '9'
NOT_DOLLAR_STRING := any sequence of printable characters (including blanks) 
                     that does not contain a $ symbol.
</pre></blockquote></p>
<p>In the above, any string enclosed in single quotes are to be treated literally.  &lt;ENTER> is the end of line.</p>

<p>In words, Spaces are allowed before or after any literal except inside a number. Spaces are allowed in variable names, 
and each non-empty sequence of spaces is treated as a single underscore, so the following refer to the same variable:</p>
<pre> 
$Remote Switch#1$ 
$Remote_Switch#1$ 
$Remote   switch#1$ 
</pre>

<p>All numbers appearing in the program will be integers between 0 and 1000000000, inclusive. All variable and literal values are integers between -1000000000 and 1000000000, inclusive.  All variables are global and initially zero.  The programs you will be tested on will never have an
<tt>EXPRESSION</tt> that evaluates to a value outside of this range. The logical operators evaluate to 0 for false and 1 for true, and
treat any nonzero value as true.</p>

<p>Running the program amounts to executing all the active when clauses until none are active.  More specifically, the active list of when clauses is initially empty, then the following steps are repeated:

<ul>
<li>In the order they appear in the program, the conditions of all when clauses that are not currently active are evaluated.  If true, the clause is added to the end of the active list, with its first statement marked as "ready".  Each active when clause has one "ready" statement.</li>
<li>If the active list is empty after this step, the program terminates.</li>
<li>The "ready" statement from the "current" when clause (initially the first clause in the active list) is executed.</li>
<li>The statement marked as "ready" is advanced, removing the when clause from the active list if this is the last statement in the "current" when clause.</li>
<li>The when clause marked as "current" is advanced, cycling to the beginning of the active list if the end is reached.</li>
</ul>
</p>

<p>In other words, inactive when conditions are evaluated to determine if these clauses are added to the active list.  Then one statement (set or print) is executed from the current active when clause.  If this is the last statement in that clause, it is removed from the active list.  One the next iteration, one statement is executed from the next active when clause, etc.</p>

<p>A set statement executes all the assignments concurrently, so that</p>
<pre>
set $x$=$y$,$y$=$x$
</pre>
<p>swaps the values of $x$ and $y$.  The same variable cannot appear twice on the left hand part of the same set statement (so set $x$=1,$x$=2 is illegal).</p>

<p>A print statement evaluates and prints the given expressions in the output, separated by commas and followed by a new line.  So</p>
<pre>
print 1,(2+3)
</pre>
<p>results in the line</p>
<pre>
1,5
</pre>
<p>in the output.</p>

    
*******InputConstraints*******

    <p>The input consists of a single syntactically correct program.  You
       may assume that the program will not execute more than 100000
       set statements and 100000 print statements.</p>

    
*******OutputConstraints*******

    <p>Print the output produced by executing the given program. Both the input and output file will not exceed 100KB.</p>

    
*******IOTestCases*******

<pre><b>Input:</b>
When ($Mr. Bill$&lt;5)
   Set $mr._bill$=($mr.  bill$+1),$Y$=($Y$+10)
End When
When ($mr. Bill$&lt;10)
  Set $MR. BILL$=($mr. bill$+1)
  Print $mr. bill$,$Y$
End When

<b>Output:</b>
3,20
6,40
7,40
8,40
9,40
10,40
</pre>


______________________________________________________
MCOINS||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MCOINS/en/">English</a></td>
<td width="50%"><a href="/problems/MCOINS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Asen and Boyan are playing the following game. They choose two different positive integers K and L, and start the game with a tower of N coins. Asen always plays first, Boyan &ndash; second, after that &ndash; Asen again, then Boyan, and so on. The boy in turn can take 1, K or L coins from the tower. The winner is the boy, who  takes  the  last  coin  (or  <br />coins). After  a  long,  long playing, Asen  realizes  that  there  are cases in which he could win, no matter how Boyan plays. And in all other cases Boyan being careful can win, no matter how Asen plays.</p>
<p><br />So, before the start of the game Asen is eager to know what game case  they have. Write a program coins which help Asen  to predict  the game  result  for given K, L and N.</p>
<h3>INPUT</h3>
<pre><br /></pre>
<p>The input describes m games.</p>
<p>The first line of the standard input contains the integers K, L and m, 1 &lt; K &lt; L &lt; 10, 3 &lt; m &lt; 50. The second  line contains m integers N1, N2, &hellip;, Nm, 1 &le; Ni &le; 1 000 000,  i = 1, 2, &hellip;., m, representing  the number of coins in each of the m towers</p>
<pre>SAMPLE INPUT<br />2 3 5 <br />3 12 113 25714 88888</pre>
<h3>OUTPUT</h3>
<p>The  standard output contains a  string of  length m composed of letters A and B.  If Asen wins  the  ith game (no matter how the opponent plays), the ith letter of the string has to be A. When Boyan wins the ith game (no matter how Asen plays), the ith letter of the string has to be B.</p>
<pre><br />SAMPLE OUTPUT<br />ABAAB<br /></pre>
<p><strong>Problem for kid - Please, think like kid.</strong>  </p>


______________________________________________________
MCLONUM||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCLONUM/en/">English</a></td> 
<td width="50%"><a href="/problems/MCLONUM/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Consider  two n-digit positive decimal  integers A and B with no  leading
zeroes. We need  to  find  the two closest to A n-digit numbers (the 
first one &#8211; greater or equal to A, the other &#8211; strictly less than A), 
with decimal writings containing all the digits of B in some order.  
For example  if A=3022  and B=1232, using B&#8217;s digits we can obtain  
the  following 4-digit numbers: 1223,  1232,  1322,  2123,  2132,  2213,
2231,  2312,  2321,  3122,  3212  and  3221.  The  least  number greater 
or equal to A obtained by B&#8217;s digits is 3122, and the biggest one, 
strictly less then A is 2321. If A=1232 and B=3022, the possible numbers
are 2023, 2032, 2203, 2230, 2302, 2320, 3022, 3202 and 
3220. The  least number greater or equal  to A obtained by B&#8217;s digits
is 2023, and  there  is no number less than A. 
Write a program closest  to find  these &#8220;closest  to A&#8221; numbers for
given A and B, or  to determine that one of them does not exist.</pre>
<h3>INPUT </h3>
<pre>
Two lines are read from the standard input, each of them containing an
n-digit positive integer with no leading zeroes, with A read from the
first, and B read from the second line (1&#8804;n &#8804; 60).</pre>

<pre>
SAMPLE INPUT
Example 1        Example 2
3075             3000203 
6604             4562454</pre>

<h3>OUTPUT  </h3>
<pre>
Write to the standard output: 
-  Line  1:  the  least  n-digit  number with  no  leading  zeroes,
not  less  than  A,  containing  all  the digits of B in some order. 
If such number does not exist, the output should be 0. 
-  Line 2: the biggest n-digit number with no leading zeroes, less
than A, containing all the digits of B in some order. If such number 
does not exist, the output should be 0.
SAMPLE OUTPUT
Example 1      Example 2
4066           4244556 
0              2655444 
</pre>
<b>Problem for kid - Please, think like kid.</b>

 


______________________________________________________
MRECTCNT||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MRECTCNT/en/">English</a></td>
<td width="50%"><a href="/problems/MRECTCNT/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /><p>Let R be a rectangle with integer side lengths. The rectangle is  divided into unit squares.  Considering one of the diagonals, we denote by f(R) the number of squares which have a common interior point with it. For example, if the side lengths of R are 2 and 4 then  f(R)=4.  Write a program to find out the number of all different rectangles R for which  f(R)= N. Two rectangles with sides  a x b  and b x a are not different.</p><br /><h3>INPUT </h3><br /><p>In a single line of the standard input the integer N (0 &lt; N &lt; 10^6) is given.</p><br /><br /><pre>SAMPLE INPUT<br />4</pre>
<br /><br />
<h3>OUTPUT</h3>
<br /></pre>
<p>The only line of the standard output should contain an integer &ndash; the calculated number of rectangle.</p>
<pre style="text-align: center;"><pre>SAMPLE OUTPUT<br />4</pre>
<br /><a href="http://tinypic.com" target="_blank"></a><br /><br /><br /><strong>Problem for kid - Please, think like kid.</strong><br /><br /></pre>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://i43.tinypic.com/30uxxco.jpg" border="0" alt="Image and video hosting by TinyPic" /></p>


______________________________________________________
SPACESET||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/SPACESET/en/">English</a></td> 
<td width="50%"><a href="/problems/SPACESET/vn/">Vietnamese</a></td> 
</tr></table>


<p>A long time ago in a galaxy far far away ... The empire has built a grand new space colony. This colony has m levels and each level consists of n settlements. Space settlements are connected by routes along which spacecrafts fly. </p>
<p>A level is a ring shaped construction with the n space settlements lying on it. The ring provides routes for the spacecrafts. Within a level, travelling is only possible along the ring. The ring shaped route will be present irrespective of the number of settlements in the level.</p> 
<p>Levels are organised in a heirarchy. Excellent connectivity is provided between levels. Each settlement in a level is connected by a route to every settlement in the levels immediately above and below it. The topmost and the bottom-most levels are also connected in a similar fashion.</p> 
<p>Our adventurous space pilot -- Han Solo wants to ferry people between space settlements. Solo's spacecraft can navigate a path having exactly k stops, no more no less.</p>
<p>Given the values of k, n and m you have to find the number of paths in the space colony that he can use for his work.</p>
<b>Notes:</b>
<ul>
<p>1. A settlement can be visited any number of times in a journey.</p>
<p>2. A path is considered as a sequence of vertices such that there is an edge between consecutive vertices. Two path's are considered to be different if they differ in any one vertex.</p>
<p>3. The topmost and bottom-most levels are connected only if they are different.</p>
<p>4. Image for clarification</p>
<img src = "http://vn.spoj.pl/SPOJVN/content/loop.jpg">
<p>Here the black dots represent the settlements. The connections are showm as rings and lines. </p>
</ul>

*******InputConstraints*******

<p>First line of input contains T, the number of test cases. Every test case will contain the values of m, n and k. 


*******OutputConstraints*******

<p>Output contains T lines, one for each test case. Every line will consist of the total number of routes possible mod 12345678. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 1 1
1 2 1
3 3 56
4 3 4
691 60 97764

<b>Output:</b>
1
2
8019378
6144
470730 
</pre>


______________________________________________________
BOBALLS||||||true||||||


<p>Consider a grid having NxM squares. The top left square is (0,0) and the bottom right is (N-1,M-1). Each square in the grid is either occupied by a platform or has a number written on it. Two balls are released from the top of the grid (from locations (0,Y1) and (0,Y2), 0 <= Y1,Y2 < M). Each ball falls down vertically, unless either it falls down the bottom row, or encounters a platform beneath. When the ball encounters a platform beneath, it rolls either to the left or to the right, each with an equal probability. The score obtained by a ball is the sum of the numbers on the squares that it passes (including the starting square). However, if both the balls pass over the same square, points corresponding to that square are obtained only once, and not twice. Your goal is to choose Y1 and Y2 such that the expected score obtained by the two balls is maximized. For example, consider the grid below : (P reprsents a platform)</p>
<pre>
N = 6, M = 6
112214
211243
30PPP2
423378
1P9753
220102
</pre>
<p>Here, dropping a ball from position (0,3) could result in one of the following three scores :</p>
<pre>
1) 2 + 2 + 1 + 1 + 0 + 2 + 4 + 1 + 2 = 15 
2) 2 + 2 + 1 + 1 + 0 + 2 + 3 + 9 + 0 = 20
3) 2 + 2 + 4 + 3 + 2 + 8 + 3 + 2 = 26
</pre>
<p>The expected score is (considering only 1 ball) :</p>
<pre>1/2*(1/2*(15) + 1/2*(20)) + 1/2*(26)</pre>



*******InputConstraints*******

<p>The first line contains the number of test cases.</p>
<p>The first line for each test case consists of N and M.</p>
<p>Lines 2..N+1 for each test case consist of M characters each. Each character is either a digit from 0 to 9, or the letter 'P'.</p>


*******OutputConstraints*******

<p>The maximum expected score accurate upto 4 decimal places. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
5 5
53214
53214
53214
54214
53214
5 5
00000
0P0P0
00000
01P20
00000
5 5
09090
0P0P0
00000
01P20
00000
6 6
112214
211243
30PPP2
423378
1P9753
220102


<b>Output:</b>
45.0000
2.2500
19.3125
35.5000

</pre>


______________________________________________________
MTRGAME||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTRGAME/en/">English</a></td> 
<td width="50%"><a href="/problems/MTRGAME/vn/">Vietnamese</a></td> 
</tr></table>


<p>Players P1 and P2 are playing a game. The game is played using a matrix M of integers, the size of which is given to be m x n. </p>
<p>In each turn, P1 selects a number i lying between 0 and m-1 (inclusive) while P2 selects a number j lying between 0 and n-1 (again inclusive). The fun part is that each of them remains unaware of what the other has chosen...</p>
<p> After the choices have been finalized, they reveal their numbers to each other. M[i][j] is the element of the matrix decided by the choices the players made. If M[i][j] is Negative, P1 pays P2 an amount equal to the absolute value of M[i][j]. However, if M[i][j] is Positive, then P2 pays P1 an amount equal to M[i][j].</p> <p>Given the Matrix M and the fact that both the players are infinitely intelligent, find out the average amount paid by P2 to P1 per turn in the game.</p> 
<p>Note: P1 plays to maximize the money he gets while P2 tries to minimize the money he has to pay. </p>


*******InputConstraints*******

<p>First line contains T, the number of test cases.</p> <p>For each test case the first line contains two integers m and n, denoting the size of the matrix. The next m lines contains n integers each denoting the elements of the matrix. </p>


*******OutputConstraints*******

<p>The output should consist of T lines, each containing a real number with exactly 3 digits precision, denoting the average payoff which P1 receives per turn in the game. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 1
-1
2 2
1 2
3 4
2 2
1 4
4 3


<b>Output:</b>
-1.000
3.000
3.250
</pre>


______________________________________________________
MAXISET||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MAXISET/en/">English</a></td> 
<td width="50%"><a href="/problems/MAXISET/vn/">Vietnamese</a></td> 
</tr></table>


<p>You are given an unweighted undirected graph G. Each vertex has a positive weighted associated with it. Weight of a set of vertices is defined as the sum of weights of all vertices in the set.</p>
<p> A set of vertices is called independent if there is no edge in the graph with both endpoints on vertices of this set. </p>
<p>A subgraph induced by a set of vertices is a graph with vertex set as the given set of vertices and edges in the original graph with both endpoints in the given set.</p> 
<p>If s denotes a set of vertices, then Query(s, G) = Maximal weighted independent set in the subgraph induced by s. </p>
<p>Given q queries and the description of the graph, you are to output the weight of the Maximal weighted independent set corresponding to each of the queries. 
</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases. </p>
<p>Each test case description starts with one line containing 2 integers n and m, denoting the number of vertices and number of edges. </p>
<p>Next line contains n space separated integers denoting the weight of vertices from 0 to n - 1 ( inclusive ). </p>
<p>Next m lines contains two integers u and v ( u != v, 0 &#8804; u,v < n ), denoting an undirected edge from u to v. </p>
<p>Next line contains q, the number of querries.</p>
<p> Next q lines contain description of a query. Description of a query starts with an integer denoting the size of set s, followed by the vertices which are members of vertex set s. </p>


*******OutputConstraints*******

<p>For each test case, output q lines containing the answer to each query. Print a blank line BETWEEN the output of multiple test cases. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5 1
1 2 3 4 5
0 1
3
3 0 1 2
3 1 2 3
2 0 1
3 3
1 2 3
0 1
0 2
1 2
1
3 0 1 2

<b>Output:</b>
5
9
2

3 
</pre>

______________________________________________________
CVXPOLY||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/CVXPOLY/en/">English</a></td> 
<td width="50%"><a href="/problems/CVXPOLY/vn/">Vietnamese</a></td> 
</tr></table>


<p>You are given n points in the 2-D cartesian coordinate system. You are to determine the number of convex polygons with 3 or more vertices which can be formed by choosing a subset of the given points. To make matters simple, the input obeys the following conditions: </p>
<ul>
<p>(1) No 3 points in the input are collinear. </p>
<p>(2) No 2 points will have the same coordinates. </p>
</ul>
<p>Since the result can be quite large, you are required to output ( result % 1234567 ) instead. </p>


*******InputConstraints*******

<p>First line contains an integer T, the number of test cases. In each test case, first line contains n, the number of points in the corresponding test case, next n lines contain 2 space separated integers denoting the coordinate of ith point. Absolute value of the coordinates do not exceed 10000. </p>


*******OutputConstraints*******

<p>T lines each corresponding to the answer of corresponding test case. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
0 0
2 0
2 2
0 2
6
0 0
2 0
2 2
0 2
1 -1
1 3

<b>Output:</b>
5
42
</pre>

______________________________________________________
PALDR||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/PALDR/en/">English</a></td>
<td width="50%"><a href="/problems/PALDR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p> </p>
<p>Palindrome is a string that has the property of reading the same in either direction ( left to right or right to left ). You are to determine whether a given string can be expressed as a concatenation of palindromes of even length.</p>
<p>Note: A string can be formed by concatenation of any number of even palindrome strings.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases. T lines follow, each containing the string corresponding to that particular test case.</p>
<p><strong>Note:</strong></p>
<p>There might be a new-line character (i.e '\r' in C++) at the end of each line. Be careful with your languages.</p>

*******OutputConstraints*******

<p>Output consists of T lines, one corresponding to each test case. You should output "YES" if the string can be expressed as concatination of even length palindromes and "NO" otherwise. ( quotes are for clarity only ).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
madam
aA
aabb

<strong>Output:</strong>
NO
NO
YES 
</pre>

______________________________________________________
FINFRAC||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/FINFRAC/en/">English</a></td> 
<td width="50%"><a href="/problems/FINFRAC/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given a,b,c,d, find a fraction p/q with minimum q, and satisfied a/b < p/q < c/d .</p>


*******InputConstraints*******

<p>For each test case, one line contains four integers a,b,c,d . </p>


*******OutputConstraints*******

<p>For each test case, print the fraction(see the sample for details).If multiple solution exists, output the one with minimum p. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1 3 1 2
2 1 3 1
2 1 4 1
1000 1001 1001 1002

<b>Output:</b>
2/5
5/2
3/1
2001/2003
</pre>


______________________________________________________
MCQUERY||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCQUERY/en/">English</a></td> 
<td width="50%"><a href="/problems/MCQUERY/vn/">Vietnamese</a></td> 
</tr></table>


<p>You are given a weighted undirected graph with edge weight denoting the capacity of the edge. </p>
<p>Now given a number x, output how many unordered (s,t) pairs are there in the graph such that minCut(s,t) <= x. </p>
<p>A Cut is a partition of the vertices of a graph into two sets such that s and t belong to different set after the partition. </p>
<p>In weighted graphs, the size of a cut is defined to be the sum of weights of the edges crossing the cut. minCut is a cut whose size is the least possible.</p>


*******InputConstraints*******

<p>First line contains T, the number of test cases.</p> <p>For each test case the first line contains two integers n and m, denoting the number of vertices and the number of edges in the graph.</p>
<p> Next m lines contain 3 integers u,v,c denoting an undirected of capacity c between vertices u and v; 1 <= u,v <= n.</p> 
<p>Next line contains q, the number of queries. Next q line contains one number each which denotes the input x for ith query.</p><p>
Note: there can be multiple edges between a pair of vertices. </p>


*******OutputConstraints*******

<p>The output for each test case should consist of q lines with one integers in each of them denoting the number of unordered (s,t) pairs corresponding to that query. Output a blank line BETWEEN the test cases.
</p>
<p>Note: The timelimit for the problem is somewhat strict. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 0
1
0

<b>Output:</b>
10
</pre>


______________________________________________________
BNWNIM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/BNWNIM/en/">English</a></td> 
<td width="50%"><a href="/problems/BNWNIM/vn/">Vietnamese</a></td> 
</tr></table>




<p>Black-White-Nim is played as follows. There are one or more horizontal rows, each containing several black and white beads. Two players take turns removing beads until there are none left. During each turn, a player must remove one or more consecutive beads from the left end of a single row. The removed beads must contain either no black beads or exactly one black bead. If one black bead is removed, that bead must be the rightmost of the removed beads. The player who takes the last turn wins.</p>
<p>Given the number of black and white beads in each rows. The order of beads in each row is randomly generated at the beginning of the game. Each distinct row ordering is equally likely. Black beads are indistinguishable from one another, and white beads are indistinguishable from one another. Output the probability that the first player will win the game assuming that both players follow an optimal strategy.</p>


*******InputConstraints*******

<p>The first line of input contains a number representing the number of tests.</p> 
<p>Each test cases contains three lines, the first line contains N representing the number of rows.</p> 
<p>The second line contains N numbers, representing the number of black beads in each row. There will be at most 100 black beads in each row. </p>
<p>The third line contains N numbers, representing the number of white beads in each row. There will be at most 100 white beads in each row. There will be at least one beads in each row.</p>


*******OutputConstraints*******

<p>For each test case, output a line contains a float-number, representing the answer. It must be printed with exactly six decimal places.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1
0
2
1
2
0
1
2
2
2
2 5
2 0

<b>Output:</b>
1.000000
0.000000
0.666667
0.666667
</pre>


______________________________________________________
FWFUNC||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/FWFUNC/en/">English</a></td> 
<td width="50%"><a href="/problems/FWFUNC/vn/">Vietnamese</a></td> 
</tr></table>


<p>Multiplicative functions are defined as functions such that f(m*n) = f(m) * f(n). Now, we put an extra constraint on multiplicative functions that if m and n are coprime , then f(m) and f(n) are also coprime. Additionally it is also provided that f(1)=1. f(x) is defined for positive integers and it returns positive integers.</p>
<p>
Now, you are provided with some x and corresponding f(x). Your task is to find out , if you can uniquely determine the value of f(y) given y and if yes, find the value. 
</p>


*******InputConstraints*******

<p>The first line of input contains a number representing the number of test cases. For each test case, the first line contains a number N representing the number of (x,f(x)) pairs to be provided. N Lines follow, each line containing a pair of space separated numbers : the first one corresponding to x and second one to f(x). Next line contains q, the number of queries. q lines follow, each containing a number y.</p>


*******OutputConstraints*******

<p>For each test case output q lines, one corresponding to each query. The output should contain "YES f(y)" where f(y) is replaced by the integer denoting f(y) with no leading zeroes if given the data, we can uniquely determine f(y), or "NO" if the input data is inconsistent with the properties of the function or with the given information provided about the function, we can not uniquely determine f(y).</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3
2 2
3 2
7 19
1
7
1
6 6
1
6
2
2 2
3 3
1
12

<b>Output:</b>
NO
YES 6
YES 12
</pre>


______________________________________________________
MTREECOL||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MTREECOL/en/">English</a></td>
<td width="50%"><a href="/problems/MTREECOL/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the "root" of the tree, and there is a unique path from the root to each of the other nodes. <br /> <br />Bob intends to color all the nodes of a tree with a pen. A tree has  N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br /> <br />Each node has a &ldquo;coloring cost factor&rdquo;, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br /> <br />For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the&nbsp; order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.</p>
<p><a href="http://tinypic.com" target="_blank"></a></p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://i40.tinypic.com/whxkld.jpg" border="0" alt="Image and video hosting by TinyPic" height="400" /></p>
<p>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.</p>

______________________________________________________
MPOLSTAR||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPOLSTAR/en/">English</a></td> 
<td width="50%"><a href="/problems/MPOLSTAR/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
After counting so many stars in the sky in his childhood, Isaac, now an astronomer
and a mathematician, uses a big astronomical telescope and lets his image
processing program count stars. The hardest part of the program is to judge
if a shining object in the sky is really a star. As a mathematician, the
only way he knows is to apply a mathematical definition of stars.

The mathematical definition of a star shape is as follows: A planar
shape F is star-shaped if and only if there is a point C in F such that, 
for any point P in F, the line segment CP is contained in F. Such a point C
is called a center of F. To get accustomed to the definition, let's
see some examples below. 

<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i40.tinypic.com/2iktto0.gif" border="0" height = 300 width = 400 alt="Image and video hosting by TinyPic"></a>

The first two are what you would normally call stars. According to the
above definition, however, all shapes in the first row are star-shaped. 
The two in the second row are not. For each star shape, a center is indicated
with a dot. Note that a star shape in general has infinitely many 
centers. For example, for the third quadrangular shape, all points in it
are centers.

Your job is to write a program that tells whether a given polygonal shape
is star-shaped or not. 
</pre>

______________________________________________________
BYTESE1||||||true||||||


<p>LUCIUS&#8217; DUNGEON (5 points)

There are a set of rooms in a dungeon, arranged in an M Ã— N rectangular grid. In one of the rooms, evil Lucius Malfoy has imprisoned Hermione, owing to his hatred towards the mudbloods. The noble Harry potter is on his way to rescue Hermione. Harry potter starts in the room at the top left corner of the grid, which is labeled (1,1). Each room contains some guards. It takes some time for Harry potter to kill all the guards in the room he is in. The time taken to kill the guards varies from room to room. Once he has killed all the guards in a room, he can move on to any one of its neighbors by going left, right, up or down, provided, of course, that there is a neighboring room in the corresponding direction. He cannot move diagonally.<br/>Lucius Malfoy, knowing that Harry Potter is on his way, has set a time bomb that will kill Hermione after T seconds. You will be given the position of Hermione, the time left for the bomb to go off and the time it takes for Harry to kill the guards in each of the rooms in the dungeon. Your task is to determine if it is possible for Harry to reach Hermione and save her by defusing the bomb before the T seconds expire.
For example, suppose the dungeon is described by the following grid of numbers where the numbers start from (1,1):<br/>
2 3 2<br/>
2 5 1<br/>
5 3 1<br/>
3 1 1<br/>
The number at position (i,j) indicates the time taken for Harry Potter to overpower the guards in room (i,j). Suppose Hermione is in the room at position (4,2). If T = 10. There is no way Harry Potter can reach Hermione in time. However, if M = 15, Harry Potter can reach Hermione with 4 seconds to spare, as follows. Starting from (1,1), he moves right to (1,2) and then (1,3), comes down all the way to (4,3) and then moves to (4,2). This takes 11 seconds (note that he must also overpower the guard in the room where Hermione is incarcerated). You can check that he cannot reach Hermione with more than 4 seconds to spare by any route.<br/>Note: If Harry reaches Hermione at exactly &#8216;T&#8217; seconds from the start then the answer is &#8220;YES&#8221; with 0 seconds to spare.



*******InputConstraints*******

<p>The first line consists of the number of test cases K (1<=K<=20). In each test case, the first line contains two integers M and N indicating the number of rows and columns in the rectangular dungeon(1 &#8804; M,N&#8804; 100). Next M lines contain N integers (single digits only). The jth integer on ith line is the time taken to overpower the guards at room (i,j). The last line in each test case, contains three integers a, b and T, where (a,b) is the position of the cell where Hermione is held and T is the amount of time before the bomb goes off.


*******OutputConstraints*******

<p>For each of the test case, if it is not possible for Harry Potter to save Hermione then print NO. Otherwise, print two lines. The first line should say YES. The second line should contain a single integer indicating the maximum possible time to spare when Harry Potter rescues the Hermione.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4 3 
2 3 2
2 5 1
5 3 1
3 1 1
4 2 15
2 2
1 2
1 1
2 2 2

<b>Output:</b>
YES
4
NO
</pre>



______________________________________________________
BYTESE2||||||true||||||


<p>The Great Ball (5 points)

Hogwarts has organized The Great Ball to welcome the schools participating in the Triwizard Tournament. The ball is being held in the Great Hall and The Weird Sisters have been called to play the band. The students drift in to dance and then go out when they get tired. Hagrid is stationed at the gate and is noting down the time at which people enter and leave the hall. At the end of the day, he wonders what the maximum number of dancers was during the course of the ball.
For convenience, he writes down for each person entering, the number of minutes from the start of the ball at which the person entered and left. The door of the hall is narrow, so at any time, either one person can enter or one person can exit, but not both. 
For example, suppose the observations noted down by Hagrid are the following: 
<table>
<tr><td>Serial No</td><td>Enters at</td><td>Leaves at</td></tr>
<tr><td>1</td><td>1</td><td>7</td></tr>
<tr><td>2</td><td>2</td><td>4</td></tr>
<tr><td>3</td><td>6</td><td>9</td></tr>
<tr><td>4</td><td>3</td><td>8</td></tr>
<tr><td>5</td><td>5</td><td>10</td></tr></table>
Each line denotes the entry time and exit time of one person. (The identity of the person is not important - the same person may enter and leave many times. For instance, in the example, it might well be that the entries and exits recorded at serial no. 2 & 5 refer to the same person).
In this example, the maximum size of the dancers during the ball was 4. This was achieved between time 6 & 7. Hagrid is not good at Math so he requires your help. Your task is to read the list of entry and exit times and compute the maximum number of dancers during the ball.


*******InputConstraints*******

<p>The first line is a single integer, T (1<=T<=100), which is the number of test cases. For each of the test case, the first line contains a single integer N, (1<=N<=100), the number of entries and exits recorded. This is followed by N lines. Each of these lines consists of two integers, separated by a space, describing the entry and exit time of that person. The entry and exit times are guaranteed to be distinct, and the entry time will be less than the exit time.
The constraint on entry and exit times is 10000000.


*******OutputConstraints*******

<p>A total of T lines each of them containing a single integer, denoting the maximum number of dancers during the ball.



*******IOTestCases*******


<pre>
<b>Input:</b>
1
5
1 7
2 4
6 9
3 8
5 10

<b>Output:</b>
4
</pre>



______________________________________________________
BYTESM1||||||true||||||


<p>Harry Potter was punished for his impudence by Snape and was sent to the forbidden forest for detention. He has now lost his way amidst the forest. He has come across 3 mystical rivers flowing in his way to the school but he is not sure which river does he have to cross.
Alongside each mystical river are stones after every meter with a number written on them. The numbers start with 1, 3 and 9 respectively for the three rivers. The number on a stone is equal to the no. on the previous stone plus the sum of its digits. For example, if one no. is 403 then the next no. is 403+4+0+3=410, the next no. is 410+4+1+0=415 and so on. Harry calls this a &#8216;stone river&#8217;.
Harry knows that he has to cross at the stone number which is part of the stone river of the number he remembers. He has to now find the point of intersection of the stone river generated by the no. &#8216;N&#8217; that he remembers, with the rivers of 1 or 3 or 9.
Your task is to find which mystical river intersects the stone river generated by Harry&#8217;s number. Also find the point of intersection at which Harry can cross the mystical river.
For example, if Harry remembers that he has to cross at the stone number which is part of the stone river of 29 then he has to cross at the stone number 107 which is also in the river of number 1.
Stone river of 29: 29,40,44,52,59,73,83,94,107,&#8230;.
River of 1: 1,2,4,8,16,23,28,38,49,62,70,77,91,101,103,107,&#8230;.
Both the rivers meet at 107 and hence Harry has to cross at stone number 107.

It is possible that the stone river might intersect with more than one of the mystical rivers. In that case, output the least intersection number.


*******InputConstraints*******

<p>The first line consists of a single integer &#8216;T&#8217; (1<=T<=50) which is the total number of test cases. Each of the next T lines consist of a single integer &#8216;N&#8217; (1<=N<=99999999) which is the number that Harry remembers.


*******OutputConstraints*******

<p>A total of T lines, where each line consists of two integers separated by a space. The first integer represents the river out of 1, 3 and 9 which intersects with the stone river of &#8216;N&#8217;. The second integer represents the stone number at which Harry can cross.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
29
42

<b>Output:</b>
1 107
3 111
</pre>



______________________________________________________
BYTESM2||||||true||||||


<p>One of the secret chambers in Hogwarts is full of philosopher&#8217;s stones. The floor of the chamber is covered by h Ã— w square tiles, where there are h rows of tiles from front (first row) to back (last row) and w columns of tiles from left to right. Each tile has 1 to 100 stones on it.

Harry has to grab as many philosopher&#8217;s stones as possible, subject to the following restrictions:
<ul><li>He starts by choosing any tile in the first row, and collects the philosopher&#8217;s stones on that tile. Then, he moves to a tile in the next row, collects the philosopher&#8217;s stones on the tile, and so on until he reaches the last row.</li>
<li>
When he moves from one tile to a tile in the next row, he can only move to the tile just below it or diagonally to the left or right.</li></ul>

Given the values of h and w, and the number of philosopher&#8217;s stones on each tile, write a program to compute the maximum possible number of philosopher&#8217;s stones Harry can grab in one single trip from the first row to the last row.


*******InputConstraints*******

<p>The first line consists of a single integer T, the number of test cases. In each of the test cases, the first line has two integers. The first integer h (1<=h<=100) is the number of rows of tiles on the floor. The second integer w (1<=w<=100) is the number of columns of tiles on the floor.
Next, there are h lines of inputs. The ith line of these, specifies the number of philosopher&#8217;s stones in each tile of the ith row from the front. Each line has w integers, where each integer m (0<=m<=100) is the number of philosopher&#8217;s stones on that tile. The integers are separated by a space character.

*******OutputConstraints*******

<p>The output should consist of T lines, (1<=T<=100), one for each test case. Each line consists of a single integer, which is the maximum possible number of philosopher&#8217;s stones Harry can grab, in one single trip from the first row to the last row for the corresponding test case.

*******IOTestCases*******


<pre>
<b>Input:</b>
1
6 5
3 1 7 4 2
2 1 3 1 1
1 2 2 1 8
2 2 1 5 3
2 1 4 4 4
5 2 7 5 1

<b>Output:</b>
32 	

//7+1+8+5+4+7=32
</pre>



______________________________________________________
BYTESH1||||||true||||||


<p>Filch&#8217;s Dilemma (15 points)

Argus Filch, the caretaker of Hogwarts, has been given the task to carpet the way to Hogwarts through the grounds. The way is 2 units wide and &#8216;N&#8217; units long. He has only two types of carpets available, one is 1 unit wide and 2 units long and the other one is L shaped, having 3 square units. Here are their pictures:
<br/>
<img src="http://www.spoj.plhttp://www.dcetech.com/events/troika/bytes/images/tiles1.jpg" align="center"/>
<br/>
Filch can rotate the carpets when he lays them and has an infinite supply of both types of carpets.
As Filch is a squib he cannot magically arrange the carpets and has to resort to logic to find out all possible ways of carpeting the way. He wishes to calculate the number of different ways of carpeting the way.<br/>
For instance, a 2x3 way can be carpeted in 5 different ways as follows:<br/>
<br/>
<img src="http://www.spoj.plhttp://www.dcetech.com/events/troika/bytes/images/tiles2.jpg" align="center"/>
<br/>
Notice that both types of carpets can be used simultaneously. Consider, for instance the following way of carpeting a 2x4 way:<br/>
<br/>
<img src="http://www.spoj.plhttp://www.dcetech.com/events/troika/bytes/images/tiles3.jpg" align="center"/>
<br/>
Given N, you have to help Filch determine the number of ways to carpet the way of size 2XN. Since this number may be very large, it is sufficient to report the last four digits of the answer. For instance the number of ways to carpet a 2x13 way is 13465. Your program should just print 3465. If the answer is in 4 digits or less it should print the entire answer. For example, if N=3 you should print 5.<br/>



*******InputConstraints*******

<p>The first line of the input consists of a single integer T(1<=T<=100). Each of the next T lines consists of a single integer N (1<=N<=1000000), indicating the size of the way.


*******OutputConstraints*******

<p>For each test case, output the last four digits of the number of ways of carpeting the 2xN way. If the answer involves fewer than 4 digits, print the entire number.<br/>
<strong>Important Update - If the output of last four digits has leading zeros, print the output without the leading zeros</strong>



*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
13

<b>Output:</b>
5
3465
</pre>



______________________________________________________
MMAHWIRE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTEMP/en/">English</a></td> 
<td width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
There is a rectangular area containing n Ã— m cells. Two cells are marked
with &#8220;2&#8221;, and another two with &#8220;3&#8221;. Some cells are occupied by obstacles. 
You should connect the two &#8220;2&#8221;s and also the two &#8220;3&#8221;s with non-intersecting
lines. Lines can run only vertically or horizontally connecting centers
of cells without obstacles.

Lines cannot run on a cell with an obstacle. Only one line can run on
a cell at most once. Hence, a line cannot intersect with the other line, 
nor with itself. Under these constraints, the total length of the two
lines should be minimized. The length of a line is defined as the
number of cell borders it passes. In particular, a line connecting cells
sharing their border has length 1.

Fig. 1(a) shows an example setting. Fig. 1(b) shows two lines satisfying the
constraints above with minimum total length 18.

<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i43.tinypic.com/20j21ax.png" border="0" alt="Image and video hosting by TinyPic"></a>

Figure 1: An example of setting and its solution
</pre> 

______________________________________________________
MPOLGRID||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPOLGRID/en/">English</a></td> 
<td width="50%"><a href="/problems/MPOLGRID/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
The ultimate Tantra is said to have been kept in the most distinguished 
temple deep in the sacred forest somewhere in Japan. Paleographers 
finally identified its location, surprisingly a small temple in Hiyoshi
, after years of eager research. The temple has an underground secret 
room built with huge stones. This underground megalith is suspected to be
where the Tantra is enshrined.

The room door is, however, securely locked. Legends tell that the key of
the door lock was an integer, that only highest priests knew. As the sect 
that built the temple decayed down, it is impossible to know the integer
now, and the Agency for Cultural Affairs bans breaking up the door. Fortunately,
a figure of a number of rods that might be used as a clue to guess that secret
number is engraved on the door.

Many distinguished scholars have challenged the riddle, but no one could
have ever succeeded in solving it, until recently a brilliant young 
computer scientist finally deciphered the puzzle. Lengths of the rods are 
multiples of a certain unit length. He found that, to find the secret 
number, all the rods should be placed on a grid of the unit length to 
make one convex polygon. Both ends of each rod must be set on grid points.
Elementary mathematics tells that the polygon's area ought to be an 
integer multiple of the square of the unit length. The area size of the 
polygon with the largest area is the secret number which is needed to 
unlock the door.

For example, if you have five rods whose lengths are 1, 2, 5, 5, and 5,
respectively, you can make essentially only three kinds of polygons, 
shown in Figure 1. Then, you know that the maximum area is 19 

<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i44.tinypic.com/238xg7.jpg" border="0" alt="Image and video hosting by TinyPic"></a>

Convex polygons consisting of five rods of lengths 1, 2, 5, 5, and 5

Your task is to write a program to find the maximum area of convex polygons 
using all the given rods whose ends are on grid points.

______________________________________________________
MDIGITS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MDIGITS/en/">English</a></td> 
<td width="50%"><a href="/problems/MDIGITS/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Given two integers a and b, we write the numbers between a and b, inclusive,
in a list. Your task is to calculate the number of occurrences of each digit. 

For example, if a = 1024 and b = 1032, the list will be 
1024 1025 1026 1027 1028 1029 1030 1031 1032
there are ten 0s in the list, ten 1s, seven 2s, three 3s, and etc. 
</pre>

______________________________________________________
MDIGITS1||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MDIGITS1/en/">English</a></td> 
<td width="50%"><a href="/problems/MDIGITS1/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Given a positive integer n, your task is to find a positive integer m, 
which is a multiple of n, and that m contains the least number of different
digits when represented in decimal. For example, number 1334 contains three
different digits 1, 3 and 4. 
</pre> 

______________________________________________________
MPART||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPART/en/">English</a></td> 
<td width="50%"><a href="/problems/MPART/vn/">Vietnamese</a></td> 
</tr></table>

<p>
Jamie is a very popular girl and has quite a lot of friends, so she always keeps a very long contact list in her cell phone. The lontact list has become so long that it often takes a long time for her to browse through the 
whole list to find a friend&#8217;s number.</p>
<p>
As Jamie&#8217;s best friend and a programming genius, you suggest that she group the contact list and minimize the size of the largest group, so that it will be easier for her to search for a friend&#8217;s number among the groups. Jamie takes your advice and gives you her entire contact list containing her friends&#8217; names, the number of groups she wishes to have and what groups every friend could belong to.</p>
<p>Your task is to write a program that takes the list and organizes it into groups such that each friend appears in only one of those groups and the size
of the largest group is minimized. 
</p>
 

______________________________________________________
MTRIAREA||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MTRIAREA/en/">English</a></td>
<td width="50%"><a href="/problems/MTRIAREA/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>&nbsp;</p>
<p>Given n distinct points on a plane, your task is to &#64257;nd the triangle that  have the maximum area, whose vertices are from the given points.</p>
<p>&nbsp;</p>

______________________________________________________
MCIRGAME||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCIRGAME/en/">English</a></td> 
<td width="50%"><a href="/problems/MCIRGAME/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
This is a small but ancient game. You are supposed to write down the 
numbers 1, 2, 3, . . . , 2n &#8722; 1, 2n consecutively in clockwise order
on the ground to form a circle, and then, to draw some straight line
segments to connect them into number pairs. Every number must be connected
to exactly one another.
And, no two segments are allowed to intersect. It&#8217;s still a simple game, isn&#8217;t it? 
But after you&#8217;ve written down the 2n numbers, can you tell me in how
many di&#64256;erent ways can you connect the numbers into pairs? Life is harder, right!
</pre>
 

______________________________________________________
MMINPER||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMINPER/en/">English</a></td> 
<td width="50%"><a href="/problems/MMINPER/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
The inversion number of an integer sequence a1, a2, . . . , an is the number
of pairs (ai, aj) that satisfy i < j and ai > aj . Given n and the inversion
number m, your task is to &#64257;nd the smallest permutation of the set { 1, 2, . . . , n } , 
whose inversion number is exactly m. A permutation a1, a2, . . . , an is smaller 
than b1, b2, . . . , bn if and only if there exists an integer k such that aj = bj 
for 1 &#8804; j < k but ak < bk.
</pre>
 

______________________________________________________
MRECAMAN||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/MRECAMAN/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MRECAMAN/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>The Recaman&rsquo;s sequence is de&#64257;ned by a0 = 0 ; for m &gt; 0, a(m) = a(m&minus;1) &minus; m if the resulting a(m) is positive and not already in the sequence, otherwise a(m) = a(m&minus;1) + m. The &#64257;rst few numbers in the Recaman&rsquo;s Sequence is 0, 1, 3,6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9 &middot; &middot; &middot; .</p>
<p>Given k, your task is to calculate ak.</p>

______________________________________________________
MMATRIX||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMATRIX/en/">English</a></td> 
<td width="50%"><a href="/problems/MMATRIX/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Given an nÃ—n matrix A, whose entries Ai,j are integer numbers ( 0 &#8804; i < n,
0 &#8804; j < n ). An operation SHIFT at row i ( 0 &#8804; i < n ) will move the integers
in the row one position right, and the rightmost integer will wrap around
to the leftmost column.
</pre>
<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i42.tinypic.com/29ff6u8.jpg" border="0" alt="Image and video hosting by TinyPic"></a>
<pre>
You can do the SHIFT operation at arbitrary row, and as many times as you like. 
Define Cj=A0,j+A1,j+..+A(n-1),j and M = max {Cj|0<=j < n } . 
Cj is the sum of all number in column ith.
Your job is to minimize M. 
</pre>
 

______________________________________________________
MCONSTR||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCONSTR/en/">English</a></td> 
<td width="50%"><a href="/problems/MCONSTR/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
The amount of information on the World Wide Web is growing quite rapidly.
In this information explosion age, we must survive by accessing only the 
Web pages containing information relevant to our own needs. One of the key
technologies for this purpose is keyword search. By using
well-known search 
engines, we can easily access those pages containing useful information about
the topic we want to know. 
</p><p>
There are many variations in keyword search problems. If a single string is 
searched in a given text, the problem is quite easy. If the pattern to be 
searched consists of multiple strings, or is given by some powerful notation 
such as regular expressions, the task requires elaborate
algorithms to accomplish e&#64259;ciently.</p><p>
In our problem, a number of strings (element strings) are given, but they are not directly
searched for. Concatenations of all the element strings in any order are the 
targets of the search here.
</p><p>
For example, consider three element strings aa, b and ccc are given. In this case, 
the following six concatenated strings are the targets of the search, i.e. 
they should be searched in the text.
</p><pre>
aabccc
aacccb
baaccc
bcccaa
cccaab
cccbaa
</pre><p>
The text may contain several occurrences of these strings. You are requested 
to count the number of occurrences of these strings, or speaking more precisely, 
the number of positions of occurrences in the text. Two or more concatenated 
strings may be identical. In such cases, it is necessary to consider subtle 
aspects of the above problem statement. For example, if two element strings 
are x and xx, the string xxx is an occurrence of both the concatenation 
of x and xx and that of xx and x. Since the number of positions of occurrences 
should be counted, this case is counted as one, not two.
</p><p>
Two occurrences may overlap. For example, the string xxxx has occurrences of 
the concatenation xxx in two di&#64256;erent positions. This case is counted as two.
</p><p>

______________________________________________________
MKTHPATH||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MKTHPATH/en/">English</a></td>
<td width="50%"><a href="/problems/MKTHPATH/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<pre>Isaac is tired of his daily trip to his office, using the same shortest route everyday. <br />Although this saves his time, he must see the same scenery again<br />and again. He cannot stand such a boring commutation any more. <br /><br />One day, he decided to improve the situation. He would change his route <br />everyday at least slightly. His new scheme is as follows. On the first day, <br />he uses the shortest route. On the second day, he uses the second shortest<br />route, namely the shortest except one used on the first day. In general, <br />on the k-th day, the k-th shortest route is chosen. Visiting the same <br />place twice on a route should be avoided, of course.<br /><br />You are invited to help Isaac, by writing a program which finds his route<br />on the k-th day. The problem is easily modeled using terms in the <br />graph theory. Your program should find the k-th shortest path in the given directed graph.<br /></pre>

______________________________________________________
MDOLLS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MDOLLS/en/">English</a></td> 
<td width="50%"><a href="/problems/MDOLLS/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Dilworth is the world's most prominent collector of Russian nested dolls:
he literally has thousands of them! You know, the wooden hollow dolls of 
different sizes of which the smallest doll is contained in the second smallest,
and this doll is in turn contained in the next one and so forth. One day he
wonders if there is another way of nesting them so he will end up with
fewer nested dolls? After all, that would make his collection even 
more magnificent! He unpacks each nested doll and measures the width 
and height of each contained doll. A doll with width w1 and height h1 will
fit in another doll of width w2 and height h= if and only if w1 < w2 and 
h1 < h2. Can you help him calculate the smallest number of nested dolls 
possible to assemble from his massive list of measurements? 
</pre>

______________________________________________________
MBEEWALK||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MBEEWALK/en/">English</a></td> 
<td width="50%"><a href="/problems/MBEEWALK/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
A bee larva living in a hexagonal cell of a large honey comb decides to creep 
for a walk. In each &#8220;step&#8221; the larva may move into any of the six adjacent cells
and after n steps, it is to end up in its original cell.
Your program has to compute, for a given n, the number of different such larva walks.
</pre>
<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i39.tinypic.com/iwu9nr.jpg" border="0" alt="Image and video hosting by TinyPic"></a>

______________________________________________________
MKTHNUM||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MKTHNUM/en/">English</a></td> 
<td width="50%"><a href="/problems/MKTHNUM/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
You are working for Macrohard company in data structures department. After 
failing your previous task about key insertion you were asked to write a
new data structure that would be able to return quickly k-th order statistics
in the array segment.
</p><p>
That is, given an array a[1 ... n] of different integer numbers, your 
program must answer a series of questions Q(i, j, k) in the form: "What would
be the k-th number in a[i ... j] segment, if this segment was sorted?"
</p><p>
For example, consider the array a = (1, 5, 2, 6, 3, 7, 4). Let the question
be Q(2, 5, 3). The segment a[2 ... 5] is (5, 2, 6, 3). If we sort this 
segment, we get (2, 3, 5, 6), the third number is 5, and therefore the
answer to the question is 5. 
</p><p>

______________________________________________________
MPOLEVAL||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MPOLEVAL/en/">English</a></td>
<td width="50%"><a href="/problems/MPOLEVAL/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Mr. O'Cruel is teaching Math to ninth grade students. Students of course are very lazy, so they do not like to do their homework. On the other side, Mr. O'Cruel doesn't like lazy students.Recently Andrew failed to do his homework again, so he was given a special task. If he doesn't do it, he will be expelled from his school. The task seems very easy, but it is very technical, so it would take a lot of time. Andrew is given a polynomial p(x) = anxn + an-1xn-1 + . . . + a1x + a0 with integer coefficients.</p>
<p>He must calculate the value of the polynomial for k successive integer numbers starting from l. Of course writing all these numbers would require too much paper. So as a proof of completing the task, for each number x from l to l + k - 1 Andrew is asked to provide the sum of squares of m last digits in decimal notation of p(x). Since Andrew is lazy, he doesn't want to do the task by himself. So he asks you to write the program that calculates the values requested.</p>

______________________________________________________
MMINPAID||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTEMP/en/">English</a></td> 
<td width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
A network of m roads connects N cities (numbered from 1 to N). There may
be more than one road connecting one city with another. Some of the roads
are paid. There are two ways to pay for travel on a paid road i from city
ai to city bi:

    * in advance, in a city ci (which may or may not be the same as ai);
    * after the travel, in the city bi. 

The payment is Pi in the first case and Ri in the second case.

Write a program to find a minimal-cost route from the city 1 to the city N. 


</pre>

______________________________________________________
MJOURNEY||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MJOURNEY/en/">English</a></td> 
<td width="50%"><a href="/problems/MJOURNEY/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Farmer John has a pig farm near town A. He wants to visit his friend living
in town B. During this journey he will visit n small villages so he decided
to earn some money. He tooks n pigs and plans to sell one pig in each 
village he visits. Pork prices in villages are di&#64256;erent, in the j-th village
the people would buy a pork at pj rubles per kilogram. The distance from town
A to the j-th village along the road to town B is dj kilometers.
Pigs have di&#64256;erent weights. Transporting one kilogram of pork per one kilometer
of the road needs t rubles for addition fuel.

Help John decide, which pig to sell in each town in order to earn as much money
as possible.
</pre>

______________________________________________________
MELE2||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%; background-color: #ee7b10;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/MELE2/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MELE2/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<pre>Edward works as an engineer for Non-trivial Elevators: Engineering, <br />Research and Construction (NEERC). His new task is to design a brand new <br />elevator for a skyscraper with h &#64258;oors.<br />Edward has an idee &#64257;xe: he thinks that four buttons are enough to control<br />the movement of the elevator.<br />His last proposal suggests the following four buttons:<br />&bull; Move a &#64258;oors up.<br />&bull; Move b &#64258;oors up.<br />&bull; Move c &#64258;oors up.<br />&bull; Return to the &#64257;rst &#64258;oor.<br />Initially, the elevator is on the &#64257;rst &#64258;oor. A passenger uses the &#64257;rst <br />three buttons to reach the &#64258;oor she needs. If a passenger tries to move <br />a, b or c &#64258;oors up and there is no such &#64258;oor (she attempts to move<br />higher than the h-th &#64258;oor), the elevator doesn&rsquo;t move.<br />To prove his plan worthy, Edward wants to know how many &#64258;oors are actually <br />accessible from the &#64257;rst &#64258;oor via his elevator. Help him calculate this number.<br /></pre>

______________________________________________________
MINVEST||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>
<p>John never knew he had a grand-uncle, until he received the notary&rsquo;s letter. He learned that his late grand-uncle had gathered a lot of money, somewhere in South-America, and that John was the only inheritor. </p><p>John did not need that much money for the moment. But he realized that it 
would be a good idea to store this capital in a safe place, and have it
grow until he decided to retire. The bank convinced him that a certain kind of 
bond was interesting for him. This kind of bond has a &#64257;xed value, and gives
a &#64257;xed amount of yearly interest, payed to the owner at the end of each year. </p><pre><br /></pre>
</pre>
<p>The bond has no &#64257;xed term. Bonds are available in different sizes.  The larger ones usually give a better interest. Soon John realized that the optimal set of bonds to buy was not trivial to &#64257;gure out. Moreover, after a few  years his capital would have grown, and the schedule had to be re-evaluated. Assume the following bonds are available:</p>
<pre><pre>Value Annual interest
4000 400
3000 250

<br /></pre>
</pre>
<p>With a capital of 10 000$ one could buy two bonds of 4000$, giving a yearly interest  of 800$. Buying two bonds of 3000$, and one of 4000$ is a better idea, as it gives a  yearly interest of e900. After two years the capital has grown to 11800$, and it  makes sense to sell a 3000$ one and buy a 4000$ one, so the annual interest  grows to 1050$.</p>
<p>This iswhere this story grows unlikely: the bank does not charge for buying and selling bonds. Next year the total sum is 12850$, which allows for three times 4000$, giving a yearly interest of 1200$. Here is your problem: given an amount to begin with, a number of years, and a set of bonds with their values and interests, &#64257;nd out how big the amount may grow  in the given period, using the best schedule for buying and selling bonds.</p>
<pre>
______________________________________________________
MMINMAX||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMINMAX/en/">English</a></td> 
<td width="50%"><a href="/problems/MMINMAX/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Triangulation of surfaces has applications in the Finite Element Method of 
solid mechanics. The objective is to estimate the stress and strain on complex
objects by partitioning theminto small simple objects which are considered
incompressible. It is convenient to approximate a plane surface with a simple
polygon, i.e., a piecewise-linear, closed curve in the plane on m distinct
vertices, which does not intersect itself. A chord is a line segment between two
non-adjacent vertices of the polygon which lies entirely inside the polygon, 
so in particular, the endpoints of the chord are the only points of the chord 
that touch the  boundary of the polygon. 
</p><p>
A triangulation of the polygon, is any choice of m &#8722;3 chords, such 
that the polygon is divided into triangles. In a triangulation, 
o two of the chosen chords intersect each other, except at endpoints, 
and all of the remaining (unchosen) chords cross at least one of the
chosen chords. Fortunately, &#64257;nding an arbitrary triangulation is a
fairly easy task, but what if you were asked to &#64257;nd the best triangulation 
according to some measure?
</p>
<a href="http://tinypic.com" target="_blank"><img width=85% src="http://i40.tinypic.com/20577mu.jpg" border="0" alt="Image and video hosting by TinyPic"></a>

______________________________________________________
MMMGAME||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMMGAME/en/">English</a></td> 
<td width="50%"><a href="/problems/MMMGAME/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Little John is playing very funny game with his younger brother. There  is 
one big box filled with M&Ms of different colors. At first John has 
to eat several M&Ms of the same color. Then his opponent has to make a turn. 
And so on. Please note that each player has to eat at least one M&M 
during his turn. If John (or his brother) will eat the last M&M from the 
box he will be considered as a looser and he will have to buy a new candy box. 

Both of players are using optimal game strategy. John starts first always. 
You will be given information about M&Ms and your task is to determine a 
winner of such a beautiful game.
</pre>

______________________________________________________
MCONVERT||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MCONVERT/en/">English</a></td>
<td width="50%"><a href="/problems/MCONVERT/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /></pre>
<p>Life can be taught, but sometimes simple problems are just very well hidden among difficult ones. Once identifying those simple problems you are almost on a half way of solving them as well as making one big step towards winning the contest. Just be careful, this is NOT the simplest problem!</p>
<p>Are you ready for that challenge?</p>
<p>Your task is to write a program that transforms numbers from various numeric systems to decade one (base=10).</p>
<pre>
______________________________________________________
STARGATE||||||false||||||

<p>   </p>
<table class="problems" style="width: 666px; height: 15px;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/STARGATE/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/STARGATE/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /></pre>
<p>"A Long Time Ago, in a Galaxy Far, Far Away..." one advanced civilization discovered a manner of instant traveling between  solar  systems. Since  that moment,  they have  devoted all  their efforts  to  constructing pairs of stargates that connect distant planets. Soon enough communication network became so complex that they require help to maintain information about the connected worlds.</p>
<p>Write a program  that will help  them maintain  information about the connected systems and we will make sure that the best of your solutions will be forwarded to their space-time continuum.</p>
<p>Planets A and B are connected if there is a direct stargate connection between them, or there is a planet sequence  P1,  P2,..Pn where  P1=A,  Pn=B and  there  is  a  direct stargate  connection  between  Pk  and  Pk-1, k &isin; {2,..n}.</p>
<p>Connections are bidirectional. There can be multiple connection paths between two planets.</p>
<pre><br /><h1 style="text-align: center;">Input</h1></pre>
<p>Input file consist of multiple data sets. Each data set occupies one or more lines. There are no empty lines in the input file. Each  line starts with a single letter &lsquo;D&rsquo;, &lsquo;C&rsquo; or &lsquo;Q&rsquo; (upper or lower case) followed by 1 to 5 integers with following meaning:</p>
<ul>
<li>&lsquo;D&rsquo; (define) has only one argument which defines number of planets N considered in following data set (N&lt;=6000000, planets are numerated from 1..N).</li>
</ul>
<ul>
<li>&lsquo;C&rsquo; (connect) creates a connection between a given pair(s) of planets. </li>
<li>&lsquo;Q&rsquo; (query) examines if a given pair(s) of planets are connected. </li>
</ul>
<p>Both &lsquo;C&rsquo; and &lsquo;Q&rsquo; command (&lsquo;X&rsquo; in following text) share the same syntax:</p>
<p>X src dst &ndash; Creates a connection (or query) between given pair of planets (src, dst).</p>
<p>X src dst nnn &ndash; Creates a connection (or query) between src planet and nnn consecutive planets numerated from dst.</p>
<p>Example: C 1 100 3 creates following links (1,100), (1,101), (1,102).</p>
<p>X  src  dst  nnn  step  &ndash;  Creates  a  connection  (or  query)  between  src planet  and  nnn  planets numerated from dst with given step.</p>
<p>Example: C 1 100 3 5 creates following links (1,100), (1,105), (1,110).</p>
<p>X src dst nnn dststep srcstep &ndash; Creates a connection  (or query) between nnn pairs of planets numerated from src with srcstep and dst with dststep respectively.</p>
<p>Example: C 1 100 3 5 15 creates following links (1,100), (16,105), (31,110).</p>
<h3>Output</h3>
<pre><p>Output  file  contains one  line pre each query  (&lsquo;Q&rsquo;)  line  in  the  input  file.  Each  line  contains two  numbers </p><p>separated by a space. First value represents number of connected planet pairs from appropriate query while second</p><p>represents number of disconnected planet pairs. </p><br /><h3>Sample</h3><br /><pre>Sample input: <br />d 5 <br />C 1 3 <br />D 20 <br />q 1 3 <br />c 1 10 10 <br />Q 1 2 18 1 1 <br /><br />Sample output: <br />0 1 <br />9 9  <br /><br />Sample input 1:<br />d 5<br />d 1<br />q 1 1<br />d 10<br />q 1 6 5 1 1<br />c 1 2 9<br />q 1 6 5 1 1<br />Sample output 1:<br />1  0<br />0  5<br />5  0<br /></pre>
<br /><br /><br /><br /><br /><br /><strong>Notice : &lsquo;D&rsquo;, &lsquo;C&rsquo; or &lsquo;Q&rsquo; can be upper or lower case</strong><br /><br /></pre>


______________________________________________________
M00PAIR||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/M00PAIR/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/M00PAIR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>A sequence consisting of one digit,  the number 1  is  initially written into a computer. At each successive  time  step,  the  computer  simultaneously tranforms each digit 0 into  the  sequence 1 0 and each digit 1  into the sequence 0 1.</p>
<p>So, after  the  first time step,  the sequence 0 1  is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1 0 0 1 and so on.</p>
<p>How many pairs of consequitive zeroes will appear in the sequence after n steps?</p>

______________________________________________________
MTREE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTREE/en/">English</a></td> 
<td width="50%"><a href="/problems/MTREE/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
As  you  are  bound  to  know  by  now,  a  tree  is  a  connected  graph
consisting  of N  vertices  and N&#8722;1 edges. Trees  also  have  the  property
of  there  being  exactly  a  single  unique path  between  any  pair  of 
vertices. 
You will be given a tree in which every edge is assigned a weight &#8211; 
a non negative integer. The weight of a path is the product of the
weights of all edges on the path. The weight of the tree is the sum of 
the  weights  of  all  paths  in  the  tree.  Paths  going  in  opposite
directions  (A  to  B  and  B  to  A)  are considered the same and, when 
calculating the weight of a tree, are counted only once. 
Write a program that, given a tree, calculates its weight modulo 1000000007. </pre>

______________________________________________________
MKUHAR||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MKUHAR/en/">English</a></td>
<td width="50%"><a href="/problems/MKUHAR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Lisa works as a waitress  in a restaurant. Tonight  is her birthday so Lisa asked  the chef  to prepare his special meal for her friends. The chef's meal  is made of N  ingredients. To prepare one serving of the meal he needs a certain amount of each ingredient.</p>
<p>There  are  some  ingredients  already  available  in  the  kitchen  and Lisa will  buy  the  rest  at  the  grocery store. The store has all the necessary ingredients, each coming in smaller and larger packages. Lisa has M dollars and wants to spend them so that the chef can make the most servings of his meal.</p>
<pre><br /></pre>
<h1>Input</h1>
<p>The first line contains two integers N and M, 1 &le; N &le; 100, 1 &le; M &le; 100 000. Each  of  the  following N  lines  contains  6  positive  integers, information  about  one  ingredient. These specify, in order:</p>
<p style="padding-left: 30px;">&bull;  X, 10 &le; X &le; 100, the amount of the ingredient needed in one serving;</p>
<p style="padding-left: 30px;">&bull;  Y, 1 &le; Y &le; 100, the amount of the ingredient already available in the kitchen;</p>
<p style="padding-left: 30px;">&bull;  SM, 1 &le; SM &lt; 100, the size of the smaller package at the store;</p>
<p style="padding-left: 30px;">&bull;  PM, 10 &le; PM &lt; 100, the price of the smaller package;</p>
<p style="padding-left: 30px;">&bull;  SV, SM &lt; SV &le; 100, the size of the larger package; and</p>
<p style="padding-left: 30px;">&bull;  PV, PM &lt; PV &le; 100, the price of the larger package.</p>
<pre style="padding-left: 30px;"></pre>
<h1>Output</h1>
<p>Output the largest number of servings the chef can make if Lisa spends her money wisely.</p>
<h1>Sample</h1>
<pre>input <br /> <br />2 100 <br />10 8 10 10 13 11 <br />12 20 6 10 17 24 <br /> <br />output <br /> <br />5<br /><br />input <br /> <br />3 65 <br />10 5 7 10 13 14 <br />10 5 8 11 14 15 <br />10 5 9 12 15 16 <br /> <br />output <br /> <br />2<br /></pre>
<p>In  the  first  example,  for  99  dollars  Lisa  will  buy  three  smaller and  one  larger  package  of  the  first ingredient, as well as one smaller and two larger packages of the second ingredient (3x10 + 1x11 + 1x10 + 2x24 = 99).</p>
<p>The chef will then have 51 units (8 + 3x10 + 1x13) of the first ingredient and 60 units (20 + 1x6 + 2x17) of the second ingredient, enough for 5 servings.</p>
<pre> </pre>
<p> </p>


______________________________________________________
POLQUERY||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/POLQUERY/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/POLQUERY/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /></pre>
<p>To  help  capture  criminals  on  the  run,  the  police are  introducing a  new  computer  system.  The  area covered  by  the  police  contains N cities  and  E  bidirectional  roads  connecting  them.  The  cities  are labelled 1 to N. The police often want to catch criminals trying to get from one city to another. Inspectors, looking at a map,  try  to determine where to  set up barricades  and  roadblocks.</p>
<p>The new  computer  system  should answer the following two types of queries:</p>
<p>1.  Consider  two  cities A  and B,  and  a  road  connecting  cities G1  and G2. Can  the  criminals get from city A to city B if that one road is blocked and the criminals can't use it?</p>
<p>2.  Consider three cities A, B and C. Can the criminals get from city A to city B if the entire city C is cut off and the criminals can't enter that city?</p>
<p>Write a program that implements the described system</p>
<pre><br /><h1 style="text-align: center;">Input</h1></pre>
<p>The  first  line  contains  two  integers  N  and  E  (2  &lt;=  N  &lt;=  100000,1  &lt;=  E  &lt;=  500000),  the  number  of  cities  and  roads. Each  of  the  following  E  lines  contains  two distinct  integers between  1  and  N  &ndash;  the  labels  of  two  cities connected  by  a  road. There  will  be  at  most  one  road  between  any  pair  of  cities.</p>
<p>The  following  line  contains  the  integer  Q  (1  &lt;=  Q  &lt;=  100000),  the  number  of  queries  the  system  is  being tested  on. Each  of  the  following  Q  lines  contains  either  four  or  five integers.  The  first  of  these  integers  is  the  type  of  the query  &ndash;  1  or  2.</p>
<p>If  the  query  is  of  type  1,  then  the  same  line  contains  four more  integers  A,  B,  G1  and  G2  as  described earlier.  A  and  B will  be  different.  G1  and  G2  will  represent  an existing  road.</p>
<p>If  the  query  is  of  type  2,  then  the  same  line contains  three more  integers  A,  B  and  C.  A,  B  and  C  will  be distinct  integers.</p>
<p>The  test  data  will  be  such  that  it  is  initially  possible  to  get from  each  city  to  every  other  city.</p>
<pre><br /></pre>
<h1 style="text-align: center;"><span style="font-size: medium;">Output</span></h1>
<p style="text-align: left;">Output the answers to all Q queries, one per line. The answer to a query can be "da" (yes) or "ne" (no).</p>
<pre style="text-align: left;"><h1 style="text-align: center;">Sample</h1><br /><pre style="text-align: left;">Input:<br />13 15 <br />1 2 <br />2 3 <br />3 5 <br />2 4 <br />4 6 <br />2 6 <br />1 4 <br />1 7 <br />7 8 <br />7 9 <br />7 10 <br />8 11 <br />8 12 <br />9 12 <br />12 13 <br />5 <br />1 5 13 1 2 <br />1 6 2 1 4 <br />1 13 6 7 8 <br />2 13 6 7 <br />2 13 6 8 <br /><br />Output:<br /> <br />da <br />da <br />ne<br />da<br /> </pre>
<br /><br /></pre>


______________________________________________________
DISQUERY||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/DISQUERY/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/DISQUERY/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /><p>The traffic network in a country consists of N cities (labeled with integers from 1 to N) and N-1 roads connecting</p><p>the cities. There is a unique path between each pair of different cities, and we know the exact length of each road. <br /><br />Write a program that will, for each of the K given pairs of cities, find the length of the shortest and the length </p><p>of the longest road on the path between the two cities. </p><br />
______________________________________________________
MZVRK||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MZVRK/en/">English</a></td> 
<td width="50%"><a href="/problems/MZVRK/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
By removing all digits left of the rightmost digit one in the binary 
representation of some integer, we get what is called the "whirligig" of that number. 
For example, the whirligig of 6 i.e. (110)2 is 2 i.e. (10)2, and the 
whirligigof 40 i.e. (101000)2 is 8 i.e. (1000)2. 

Write a program that will calculate the sum of the whirligig of all numbers 
between two given numbers A and B (inclusive).  
</pre>

______________________________________________________
MPOINT||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPOINT/en/">English</a></td> 
<td width="50%"><a href="/problems/MPOINT/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
N points are given in a plane. Any point has integer coordinates and no
two points have the same x coordinates or the same y coordinates. 
A pair of points A and B uniquely define a rectangle R(A,B) whose sides
are parallel to coordinate axes such that the points A and B are endpoints
of one of its diagonals. A pair of two given points A and B are  very visible 
if there are  no other given points within a rectangle R(A,B). A pair of points 
consists of two different points and in this problem pairs (A,B) and (B,A)
are regarded to be the same pair and are counted as one pair. 

At the beginning a coordinate plane has no given points. Your program should read 
coordinates of the given points and after reading coordinates of a point, 
it should write number of pairs of currently very visible given points.  
</pre>

______________________________________________________
MBRACKET||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MBRACKET/en/">English</a></td>
<td width="50%"><a href="/problems/MBRACKET/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<pre>Lets observe sequences made only of round and square brackets, i.e. <br />characters '( ) [ ]'. <br />A sequence of brackets is regular if it satisfies this inductive definition: <br />1. '( )' and '[ ]' are regular sequences <br />2. If A is regular, then (A) and [A] are regular sequences <br />3. If A and B are regular, then AB is regular sequence.<br /><br />For example '( ) ( ) [ ]', '( [ ] ) [ ( ) ]' and '[ ( ( ) ) ] [ ]' are regular, <br />while '(', '] [', '[ ( ]' and '( [ ) ]' are not regular. <br />The sequence of brackets is given. <br /><br />In every step, one bracket is inserted  at the beginning  or at the end of the <br />sequence (round or square, left or right). <br /><br />Write a program that will,  after each step, determine  the length of the  <br />shortest regular subsequence of consecutive characters that contains the <br />bracket added in that step. <br /> <br /></pre>

______________________________________________________
MSTRING||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSTRING/en/">English</a></td> 
<td width="50%"><a href="/problems/MSTRING/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Substring of some string A is defined as one or more (not necessary succeeding)
elements of the string with maintaining the sequence. 
</p><p>
There are given two strings, string VOKI and string TOKI. Write the program that
will calculate the length of any shortest substring of string VOKI such 
as it is not substring of string TOKI.  
</p><p>

______________________________________________________
RIGHTTRI||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/RIGHTTRI/en/">English</a></td>
<td width="50%"><a href="/problems/RIGHTTRI/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /></pre>
<p>N points are placed in the coordinate plane. Write a program which calculates  in how many ways a  right  triangle can be  formed by  three of  the given points. A right triangle is one in which one of the angles is 90 degrees.</p>
<pre style="text-align: center;"></pre>
<h1 style="text-align: center;">Input</h1>
<pre style="text-align: center;"></pre>
<p>The first line of input contains an integer N (3 &lt;= N &lt;= 1500), the number of points. Each of the following N lines contains the coordinates of one point, two integers separated by a space. The coordinates will be between -10^9 and 10^9. No two points will be located at the same coordinates.</p>
<pre></pre>
<h1 style="text-align: center;">Output</h1>
<pre><p>Output the number of right triangles. </p><br /><h3>Sample</h3><br /><pre>Sample input<br /> <br />input <br /> <br />5 <br />-1 1 <br />-1 0 <br />0 0 <br />1 0 <br />1 1 <br /> <br />output <br /> <br />7 <br /><br />input <br /> <br />4 <br />5 0 <br />2 6 <br />8 6 <br />5 7 <br /> <br />output <br /> <br />0  <br /></pre>
<br /><br /></pre>


______________________________________________________
FROGGER||||||true||||||


<p>&#8220;Frogger&#8221; was one of the first really popular arcade games after it was introduced by SEGA in 1981. The game consists of helping a frog cross a multi-lane motorway without getting run over by a car. You are given a
view of an n-lane motorway where each lane consists of m different spaces that can either be empty or be occupied by a car. On each side of the motorway is a curb on which the frog can move freely. In the traffic lanes the frog can only move on the spaces not occupied by cars. The motorway is constructed in such a way that the direction in which the cars travel alternates between the lanes, with cars in the first lane (the one closest to the starting point of the frog) moving to the right. The cars never switch lanes and only move one step forward in each turn. To ensure a steady supply of traffic, a car that reaches the boundary of its lane is reentered at the opposite end of its lane.

In one turn of the game all the cars move one step in their assigned direction while the frog can either move one step to the right or to the left, or one step up or down (between lanes or between the curb and the adjoining lane), or it can stand still. Contrary to the cars the frog cannot &#8220;wrap-around&#8221; i.e. move in one step between the first and last position of a lane or a curb.
The frog and the cars move simultaneously. Thus the frog can move to a space given that there will be no car on it in the next round. If the frog is on the same space at the same time as a car it is run over and dies. Note
that the frog can jump over an adjacent approaching car in the same lane as itself.
Your job is to write a computer program that will calculate the minimum number of turns needed for the frog to get from its starting position on the curb to its final position on the curb on the other side of the road or to determine that this is not possible within a given number of rounds.


*******InputConstraints*******

<p>First there will be a line containing the number of scenarios you are asked to help the frog in. For each scenario there will first be a line containing a
positive integer x <= 10^5 giving the maximum number of rounds that can be used. The next line contains the number of lanes n, 1 <= n <= 20, and the length of each lane m, 1 <= m <= 50. Each of the next n + 2 lines will contain a string of m characters. The character X indicates a car, the character O (letter O) indicates a free space, the character F gives the starting position
of the frog, and the character G gives the final destination of the frog. The first line indicates the destination curb, consisting of O&#8217;s and exactly one G
while the last line gives the starting curb consisting of O&#8217;s and exactly one F, while the intermediate lines each represent one lane of the motorway.


*******OutputConstraints*******

<p>The output will be one line per scenario, either giving the minimum number of turns needed before the frog can get from its starting position to the final position without getting run over by a car or a statement indicating that this was not possible within the maximum number of allowed turns.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
10
4 4
OOGO
XXOO
XOOX
XXOO
XXOO
OOFO
2
2 2
OG
XX
OO
FO

<b>Output:</b>
The minimum number of turns is 9.
The problem has no solution.
</pre>



______________________________________________________
GALLUP||||||true||||||


<p>Often, we see results of gallups, like this:
Prefer red: 3.5%
Prefer green: 4.5%
Prefer yellow: 22.0%
Prefer blue: 70.0%
and you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are interested in the minimum number of people).
Your task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.


*******InputConstraints*******

<p>The input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 <= n <= 20) giving the number of percentages in the set. If n > 0, the percentages follow as n numbers; these numbers may have 0&#8211;5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding
errors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.


*******OutputConstraints*******

<p>For each set of data, print a line starting with &#8220;Case i :&#8221;, where &#8220;i&#8221; is the data set&#8217;s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1&#8211;9999 exists,
print &#8220;error&#8221; instead of the number.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 20 40 40
3 33.3 33.3 33.3
2 33 67
1 100.0000
4 3.75 4.25 22.00 70.00
2 49 51
2 50 51
2 49 50
0

<b>Output:</b>
Case 1: 5
Case 2: 3
Case 3: 3
Case 4: 1
Case 5: 400
Case 6: 35
Case 7: 200
Case 8: error
</pre>



______________________________________________________
SUBWAYPL||||||true||||||


<p>The government in a foreign country is looking into the possibility of establishing a subway system in its capital. Because of practical reasons, they would like each subway line to start at the central station and then go in a straight line in some angle as far as necessary. You have been hired to investigate whether such an approach is feasible. Given the coordinates of important places in the city as well as the maximum distance these
places can be from a subway station (possibly the central station, which is already built), your job is to calculate the minimum number of subway lines needed. You may assume that any number of subway stations can be
built along a subway line.
<br>
Figure 1: The figure above corresponds to the first data set in the example input.
<br>
<br>

<img src="http://www.spoj.pl/fabio:subway.gif" alt="subway example">
<br><br>


*******InputConstraints*******

<p>The first line in the input file contains an integer N, the number of data sets to follow. Each set starts with two integers, n and d (1 <= n <= 500, 0 <= d < 150). n is the number of important places in the city that must
have a subway station nearby, and d is the maximum distance allowed between an important place and a subway station. Then comes n lines, each line containing two integers x and y (&#8722;100 <= x, y <= 100), the coordinates of an important place in the capital. The central station will always have coordinates 0, 0. All pairs of coordinates within a data set will be distinct (and none will be 0, 0).


*******OutputConstraints*******

<p>For each data set, output a single integer on a line by itself: the minimum number of subway lines needed to make sure all important places in the city is at a distance of at most d from a subway station.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
7 1
-1 -4
-3 1
-3 -1
2 3
2 4
2 -2
6 -2
4 0
0 4
-12 18
0 27
-34 51

<b>Output:</b>
4
2
</pre>



______________________________________________________
CPU||||||true||||||


<p>The well known hardware manufacturing company Processors for Professors is about to release a highly specialized CPU with exceptional functionality in, amongst other areas, number theory. It has, for example, an instruction PFACT that takes one parameter and returns all prime factors of that parameter, with an outstanding execution speed. It has, however, one considerable problem. The scientists at the testing lab has just found out that the PFACT instruction for some special input values freaks out and makes the entire processor explode. Even though this could be an amusing effect, it is not the way it was intended to work. The skilled mathematicians have, by trial and error, found that the explosive numbers all share the same interesting number theoretic properties, which might be of help when troubleshooting. An explosive number is a number x = p0p1p2 . . . pn where all pis are distinct prime numbers such that pi = Api&minus;1 +B for i = 1, 2, . . . , n. n &gt;= 3, p0 = 1. A and B are always integers, and might be different for different explosive numbers. For example, the processor will explode when factorizing the number 4505, because 4505 = 1 &middot; 5 &middot; 17 &middot; 53 and 5 = 3 &middot; 1 + 2, 17 = 3 &middot; 5 + 2 and 53 = 3 &middot; 17 + 2 and the numbers 5, 17 and 53 are all prime numbers. In this case A = 3 and B = 2. You are kindly asked to write a computer program that will aid this company in estimating the impact of the errors, by calculating the amount of explosive numbers that exists within a given range of integers.</p>

*******InputConstraints*******

<p>The input starts with a row containing the number 0 &lt;= N &lt;= 100 of test cases that will follow. For each test case, there will be one row containing two integers, xL and xH separated by a single space. These numbers are such that 0 &lt;= xL &lt;= xH &lt;= 2,000,000,000.</p>

*******OutputConstraints*******

<p>For each test case, output the number of explosive numbers that exist in the range xL &lt;= x &lt;= xH.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4505 4505
0 5000

<strong>Output:</strong>
1
5
</pre>


______________________________________________________
MBIPALIN||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MBIPALIN/en/">English</a></td>
<td width="50%"><a href="/problems/MBIPALIN/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>&nbsp;</p>
<p>Pero and Slavko are two students who  love math. Pero  is very creative  and often comes up with new ideas. Slavko later spends days thinking  about Pero's ideas.  One day Pero and Slavko learned what a palindrome was: a string read the  same in either direction (for example,  "ANA",  "1991"  and  "RADAR"   are palindromes). Later  that day Pero  came up with  a new concept &ndash;  a bipalindrome (bipalin for short).</p>
<p>A  bipalin  is  a  number,  composed  of  two  palindromes  of   the  same  length.  Both  of  these palindromes are strings of decimal digits, the first which may not start with the digit 0 (therefore, the  entire bipalin may not start with a 0). For example, 393020 is a  bipalin (composed of the palindromes 393 and 020), while 222 and 010202  are not.</p>
<p>After hearing about bipalins, Slavko started thinking. After half an  hour he found that there is only one bipalin of length 6 that is divisible by 12345. This is the bipalin 555525. Shocked by this finding, he wants  you to write a program that, given two integers N and M, calculates the  number of different bipalins of length N that are divisible by M.</p>
<p>&nbsp;</p>

______________________________________________________
MMASS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMASS/en/">English</a></td> 
<td width="50%"><a href="/problems/MMASS/vn/">Vietnamese</a></td> 
</tr></table>

</p><p> 
A molecule can be defined as a sequence of atoms and represented by 
a chemical formula consisting of letters denoting these atoms. E.g. 
letter H denotes atom of hydrogen, C denotes atom of carbon, O denotes
atom of oxygen, formula COOH represents molecule consisting of 
one atom of carbon, two atoms of oxygen and one atom of hydrogen.</p><p>
To write some formulas efficiently, we use the following rules.
Letters denoting some atoms can be grouped by enclosing in parentheses, 
e.g. formula CH(OH) contains group OH. Groups can be nested &#8211; a 
group can also contain other groups. To simplify a formula, 
consecutive occurrences of the same letter can be replaced with 
that letter followed by a number of these occurrences. E.g. formula 
COOHHH can be written as CO2H3 and it represents a molecule consisting
of one atom of carbon, two atoms of oxygen and three atoms of hydrogen. 
Furthermore, consecutive occurrences of the same group can be replaced
with that group followed by a number of these occurrences. 
E.g. formula CH (CO2H) (CO2H) (CO2H) can be written as CH(CO2H)3 and  
molecule represented by both those formulas consists of four atoms of 
carbon, four atoms of hydrogen and six atoms of oxygen.
A number written 
after a letter or a group is always greater than or equal to 2 and less 
than or equal to 9.
A mass of a molecule is a sum of masses of all its atoms. One atom of 
hydrogen has mass 1, one atom of carbon has mass 12 and one atom of oxygen
has mass 16.</p><p>
Write a program that will calculate a mass of a molecule.

 </p><p>

______________________________________________________
PHONELST||||||true||||||


<p>Phone List
Given a list of phone numbers, determine if it is consistent in the
sense that no number is the prefix of another. Let&#8217;s say the phone
catalogue listed these numbers:

<p>&#8226; Emergency 911

<p>&#8226; Alice 97 625 999

<p>&#8226; Bob 91 12 54 26

<p>In this case, it&#8217;s not possible to call Bob, because the central would
direct your call to the emergency line as soon as you had dialled the
first three digits of Bob&#8217;s phone number. So this list would not be
consistent.


*******InputConstraints*******

<p>The first line of input gives a single integer, 1 <= <VAR>t</var> <= 40, the number of test cases. Each
test case starts with <VAR>n</var>, the number of phone numbers, on a separate line, 1 <= <VAR>n</var> <= 10000.
Then follows <VAR>n</var> lines with one unique phone number on each line. A phone number is a sequence of at most ten digits.


*******OutputConstraints*******

<p>For each test case, output &#8220;YES&#8221; if the list is consistent, or &#8220;NO&#8221; otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
911
97625999
91125426
5
113
12340
123440
12345
98346

<b>Output:</b>
NO
YES
</pre>



______________________________________________________
MDOSTAVA||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MDOSTAVA/en/">English</a></td> 
<td width="50%"><a href="/problems/MDOSTAVA/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Little Ivica recently got a job delivering pizzas for the most popular 
pizzeria in town.</p><p>
At the start of his work day, he receives a list with the locations to 
which he needs to deliver pizzas, inorder in which the locations are given.</p><p>
The city is divided into RÃ—C cells. The rows are numbered 1 through R, 
columns 1 through C.</p><p>
From every cell, it is possible to move to neighbouring cells to the 
left and right. Moving up or down is only allowed in the first and last
columns (columns 1 and C).</p><p>
The pizzeria is in the top left corner (1, 1) and this is the location Ivica
starts from. Ivica takes with him all the pizzas he will deliver that day 
so he does not have to return to the pizzeria between deliveries or
after the last delivery.</p><p>
For each location in the city, Ivica knows how much time he will spend every 
time he is in it (trying to get through the intersection, for example).
Write a program that calculates the smallest amount of time for Ivica to 
deliver all the pizzas.</p><p>

 

______________________________________________________
MNERED||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MNERED/en/">English</a></td>
<td width="50%"><a href="/problems/MNERED/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Â </p>
<p>In the nearby kindergarten they recently made up an attractive game  of strength and agility that kids love. The surface for the game is a large flat area divided into NÃ—N squares. The children lay large spongy cues onto the surface. The sides of the cubes are the same length as the sides of the squares. When a cube is put on  the surface, its sides are aligned with some square. A cube may be put  on another cube too. Kids enjoy building forts and hiding them, but they  always leave behind a huge mess. Because of this, prior to closing the  kindergarten, the teachers rearrange all the cubes so that they occupy  a rectangle on the surface, with exactly one cube on every square in the rectangle. In one moving, a cube is taken off the top of a square to the top of any other square.</p>
<p>Write a program that, given the state of the surface, calculates the  smallest number of moves needed to arrange all cubes into a rectangle.</p>
<p>Â </p>

______________________________________________________
CUCKOO||||||true||||||


<p>
One of the most fundamental data structure problems is
the dictionary problem: given a set <VAR>D</var> of words you want to
be able to quickly determine if any given query string <VAR>q</var> is
present in the dictionary <VAR>D</var> or not. Hashing is a well-known
solution for the problem. The idea is to create a function
<VAR>h</var> : &#931; <SUP>&#8727;</SUP> &#8594; [0..<VAR>n</var> &#8722; 1] from all strings to the integer range
0,1,..,<VAR>n</var> &#8722; 1, i.e. you describe a fast deterministic program
which takes a string as input and outputs an integer between
0 and <VAR>n</var>&#8722;1. Next you allocate an empty hash table <VAR>T</var> of size
<VAR>n</var> and for each word <VAR>w</var> in <VAR>D</var>, you set <VAR>T</var>[<VAR>h</var>(<VAR>w</var>)] = <VAR>w</var>. Thus, given a query string <VAR>q</var>, you only
need to calculate <VAR>h</var>(<VAR>q</var>) and see if <VAR>T</var>[<VAR>h</var>(<VAR>q</var>)] equals <VAR>q</var>, to determine if <VAR>q</var> is in the dictionary.
Seems simple enough, but aren&#8217;t we forgetting something? Of course, what if two words
in <VAR>D</var> map to the same location in the table? This phenomenon, called collision, happens
fairly often (remember the Birthday paradox: in a class of 24 pupils there is more than
50% chance that two of them share birthday). On average you will only be able to put
roughly
&#8730;<VAR>n</var>-sized dictionaries into the table without getting collisions, quite poor space
usage!
<p>A stronger variant is Cuckoo Hashing. The idea is to use two hash functions <VAR>h</var><SUB>1</sub>
and <VAR>h</var><SUB>2</sub>. Thus each string maps to two positions in the table. A query string <VAR>q</var> is now handled
as follows: you compute both <VAR>h</var><SUB>1</sub>(<VAR>q</var>) and <VAR>h</var><SUB>2</sub>(<VAR>q</var>), and if <VAR>T</var>[<VAR>h</var><SUB>1</sub>(<VAR>q</var>)] = <VAR>q</var>, or <VAR>T</var>[<VAR>h</var><SUB>2</sub>(<VAR>q</var>)] = <VAR>q</var>, you
conclude that <VAR>q</var> is in <VAR>D</var>. The name &#8220;Cuckoo Hashing&#8221; stems from the process of creating
the table. Initially you have an empty table. You iterate over the words <VAR>d</var> in <VAR>D</var>, and
insert them one by one. If <VAR>T</var>[<VAR>h</var><SUB>1</sub>(<VAR>d</var>)] is free, you set <VAR>T</var>[<VAR>h</var><SUB>1</sub>(<VAR>d</var>)] = <VAR>d</var>. Otherwise if <VAR>T</var>[<VAR>h</var><SUB>2</sub>(<VAR>d</var>)] is
free, you set <VAR>T</var>[<VAR>h</var><SUB>2</sub>(<VAR>d</var>)] = <VAR>d</var>. If both are occupied however, just like the cuckoo with other
birds&#8217; eggs, you evict the word <VAR>r</var> in <VAR>T</var>[<VAR>h</var><SUB>1</sub>(<VAR>d</var>)] and set <VAR>T</var>[<VAR>h</var><SUB>1</sub>(<VAR>d</var>)] = <VAR>d</var>. Next you put <VAR>r</var> back
into the table in its alternative place (and if that entry was already occupied you evict
that word and move it to its alternative place, and so on). Of course, we may end up
in an infinite loop here, in which case we need to rebuild the table with other choices of
hash functions. The good news is that this will not happen with great probability even if
<VAR>D</var> contains up to <VAR>n</var>/2 words

*******InputConstraints*******

<p>On the first line of input is a single positive integer 1 &#8804; <VAR>t</var> &#8804; 50 specifying the number of
test cases to follow. Each test case begins with two positive integers 1 &#8804; <VAR>m</var> &#8804; <VAR>n</var> &#8804; 10000
on a line of itself, <VAR>m</var> telling the number of words in the dictionary and <VAR>n</var> the size of the
hash table in the test case. Next follow <VAR>m</var> lines of which the <VAR>i</var>:th describes the <VAR>i</var>:th word
<VAR>d</var><SUB><VAR>i</var></sub> in the dictionary <VAR>D</var> by two non-negative integers <VAR>h</var><SUB>1</sub>(<VAR>d</var><SUB><VAR>i</var></sub>) and <VAR>h</var><SUB>2</sub>(<VAR>d</var><SUB><VAR>i</var></sub>) less than <VAR>n</var> giving the two hash function values of the word <VAR>d</var><SUB><VAR>i</var></sub>. The two values may be identical.




*******OutputConstraints*******

<p>For each test case there should be exactly one line of output either containing the string
&#8220;successful hashing&#8221; if it is possible to insert all words in the given order into the
table, or the string &#8220;rehash necessary&#8221; if it is impossible.



*******IOTestCases*******


<pre>
<b>Input:</b>
2
3 3
0 1
1 2
2 0
5 6
2 3
3 1
1 2
5 1
2 5
<b>Output:</b>
successful hashing
rehash necessary
</pre>



______________________________________________________
MREPLBRC||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MREPLBRC/en/">English</a></td> 
<td width="50%"><a href="/problems/MREPLBRC/vn/">Vietnamese</a></td> 
</tr></table>

<p>
A regular bracket sequence is a string of characters consisting only of
opening and closing brackets, and satisfying the following conditions: </p><p>
&#8226;  An empty string is a regular bracket sequence. </p><p>
&#8226;  If A is a regular bracket0sequence, then (A), [A] and {A} are also 
regular bracket sequences. </p><p>
&#8226;  If A and B are regular bracket sequences, then AB is also a regular
bracket sequence. </p><p>
For  example,  the  sequences  [({})],  [](){}  i  [{}]()[{}]  
are  regular,  but  the  sequences  [({{([,  []({)}  and 
[{}])([{}] are not. </p><p>
Ivica has found a string which looks like it could be a regular bracket 
sequence. Some of the characters have become smudged and illegible, and 
could have been any character. </p><p>
Write a program that calculates how many ways the illegible characters
in the string can be replaced by brackets so that the result is a 
regular bracket sequence. This number can be very large, so output only 
its last 5 digits.</p><p>


______________________________________________________
MGAME1||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MGAME1/en/">English</a></td> 
<td width="50%"><a href="/problems/MGAME1/vn/">Vietnamese</a></td> 
</tr></table>

<b>Note : C,S,B are used instead of H,F,I, respectively, in test case. </b>

<pre>
Hal and Dave are playing an interesting game on a rectangular 
chess like board consisting of squares arranged in R rows and C columns. 
Here are the rules of the game:
&#8226;	There is only one piece on a board alternately moved by the 
players.
&#8226;	One move of the piece consists of moving it to an adjacent square
in one of following directions: down, right or diagonally right&#8211;down.
&#8226;	Some squares on a board are &#8216;forbidden&#8217;, i.e. the piece cannot
enter such squares.
&#8226;	A square may contain at most one of the following: a 
hamburger, french fries, ice cream. A player who moves the piece to
a square with a hamburger receives 1 point, with french fries 3 points
and with ice cream 5 points.
&#8226;	The game ends when a player who should make a move cannot 
make it (because piece would fall off of board or enter a forbidden 
square in all three directions).
&#8226;	If at the end of a game both players have same number of 
points, then the one who cannot make a legal move lost that game.
&#8226;	If at the end of a game players have different numbers of 
points, then the player with more points won the game.
&#8226;	Both players have 0 points at the beginning of a game. Hal 
makes first move. The initial position of the piece is a square that 
is not forbidden and it does not contain any food.

Since there is a finite number of sequence of moves finishing any 
given game, it can be proved that for any given initial position of 
the piece either Dave or Hal can win no matter how the other player 
plays, i.e. he has a winning strategy.
A board, positions of forbidden squares, positions of squares with 
food and some initial positions are given. Write a program that 
will determine for each given initial position which player has a 
winning strategy.

</pre>

______________________________________________________
MCARDS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCARDS/en/">English</a></td> 
<td width="50%"><a href="/problems/MCARDS/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Dave&#8217;s little son Maverick likes to play card games, but being only four
years old, he always lose when playing with his older friends. Also,
arranging cards in his hand is quite a problem to him. 
</p><p>
When Maverick gets his cards, he has to arrange them in groups so that
all the cards in a group are of the same color. Next, he has to sort 
the cards in each group by their value &#8211; card with lowest value should
be the leftmost in its group. Of course, he has to hold all the cards 
in his hand all the time.</p><p>
He has to arrange his cards as quickly as possible, i.e. making as 
few moves as possible. A move consists of changing a position of 
one of his cards.</p><p>
Write a program that will calculate the lowest number of moves needed 
to arrange cards.</p><p>
 
 

______________________________________________________
KPGAME||||||true||||||


<p>Alice and Bob play the following game. First, they collect N small stones and put them together in one pile.
After that, they throw a coin one by one. Alice starts first. If a player throws heads then he takes exactly one
stone from the pile. In case of tails he don't do anything. The one who takes the last stone wins.
For each player, his skill of throwing a coin is known (to everyone, including himself and his opponent).
More precisely, if Alice wants to throw some specific side of the coin, she always succeeds with probability P.
The same probability for Bob is Q.

You are to find probability that Alice will win the game if both guys play optimally.


*******InputConstraints*******

<p>Input starts with a line containing one integer T - a number of test cases (1 <= T <= 50).
Then T test cases follow. Each of them is one line with three numbers N, P, and Q separated with a space
(1 <= N <= 99999999, 0.5 <= P, Q <= 0.99999999). P and Q have not more than 8 digits after decimal point.


*******OutputConstraints*******

<p>For each test case output one line with a probability that Alice will win the game.
Your answer must be precise up to 10^-6.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
1 0.5 0.5

<b>Output:</b>
0.666666667
</pre>



______________________________________________________
MPOLY||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPOLY/en/">English</a></td> 
<td width="50%"><a href="/problems/MPOLY/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
There are N points in a plane whose coordinates are natural numbers.
A convex polygon with maximal number of vertices is a convex polygon 
whose vertices are some of given points and the origin having maximal 
possible number of vertices. Origin, i.e. point with coordinates 
(0,0), must be one of vertices of a convex polygon with maximal number
of vertices.</p><p>
Write a program that will determine number of vertices in such polygon.</p><p>
A polygon is convex if every line segment whose endpoints are inside 
that polygon is also completely inside it.
Consecutive edges of a polygon must not be parallel.</p><p>

 
</pre>

______________________________________________________
MSAFE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSAFE/en/">English</a></td> 
<td width="50%"><a href="/problems/MSAFE/vn/">Vietnamese</a></td> 
</tr></table>

<p>
Mirko has decided to rob mini-safe owned by his son so that he could
take away some football stickers which are missing in his big sticker 
collection. </p><p>
Lock on the safe consists of N equal discs, each of them being divided
in 10,000,000 equal segments numbered from 1 to 10,000,000 
clockwise. In the begining, segments on discs having the same number 
are placed one above (beneath) the other. Discs are layed one on the 
other such that the segments are overlaping and each disc is missing 
exactly one segment that is called hole. 
In order to unlock the lock, all holes must be one above (beneath) the other. 
In  one second, Mirko can turn one disc in  one direction (clockwise or 
counterclockwise) for  one segment. </p><p>
Write a program which will find the minimal time that Mirko needs to
open the safe.</p>
 

______________________________________________________
MPIGS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPIGS/en/">English</a></td> 
<td width="50%"><a href="/problems/MPIGS/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Mirko works on a pig farm that consists of M  locked pig-houses 
and Mirko  can't unlock any pig-house because he doesn't have the keys. 
Customers come to the farm one after another. Each of them has keys 
to some pig-houses and wants to buy a certain number of pigs. 
All data concerning customers planning to visit the farm on that 
particular day are available to Mirko early in the morning so that 
he can make a sales-plan in order to maximize the number of pigs sold. 
More precisely, the procedure is as following: the customer arives, 
opens all pig-houses to which he has the key, Mirko sells a certain number 
of pigs from all the unlocked pig-houses to him, and, if Mirko wants, 
he can redistribute the remaining pigs across the unlocked pig-houses. 
An unlimited number of pigs can be placed in every pig-house. 
Write a program that will find the maximum number of pigs that he can 
sell on that day
</pre>

______________________________________________________
MORPH||||||true||||||


<p>Morphic is a tree that grows very rapidly, bringing happiness to its owner. It has a single trunk
consisting of a number of cells stacked one on top of another. Each cell has one of n possible colors
which determine the way it mutates during the night, while nobody can see it. Florists denote these
colors by the first <b>n</b> small letters of the English alphabet and know exactly into how many cells, and of
what colors, a cell of each color divides. In fact, they have wrote their knowledge down simply with <b>n</b>
nonempty words, each word representing the resulting sequence of colors.
<p>A seed of a Morphic has a single cell of color a and is rooted firmly in the ground. As long as the
Morphic is still alive, each night all its cells simultaniously morph according to the aforementioned rules,
possibly causing an exponential growth because each new cell is of the same size as the original one. For
example, if rules say that a becomes ab, and b becomes ca, then after two nights a seed will evolve to
a trunk consisting of 4 cells: abca.
<p>Therefore the top of a Morphic is usually hidden in clouds. The only way to tell if it is still alive is
to check if visible part of the trunk is changing colors. In order to do so, one can build enormously high
(yet still of constant height) tower, and watch from its top a fixed fragment of the trunk.
<p>As you can easily see, it is either sufficient to observe first <b>k</b> cells from the bottom for some fixed <b>k</b>,
or no matter how high the tower is, you will not be able to tell for sure if a Morphic died. The latter
happens when for every <b>k</b>, rules cause the <b>k</b>-th cell to eventually stop changing colors, even though the
tree is still alive and mutating.
<p>To prevent waste of money on building such enormous towers, you are to write a program that
determines if it is possible to monitor health of a Morphic.</p>

*******InputConstraints*******

<p>The input contains several Morphics descriptions. The first line contains the number of descriptions <b>t</b>
(<b>t</b> <= 10000) that follow. Each of them begins with the number of colors <b>n</b> (1 <= <b>n</b> <= 26). Next <b>n</b> lines
contain the rules by which the Morphic grows. The i-th one describes the sequence of colors in bottom-up
order obtained from a single cell of i-th color. Each line contains at most 100 lowercase English letters.</p>

*******OutputConstraints*******

<p>For each test case output one line containing YES if building of a tower is pointless (as in: YES, we can
save money!). Otherwise output NO.</p>

*******IOTestCases*******

<pre><b>Input:</b>
4
2
ab
a
3
ba
c
c
3
ba
c
b
3
bbbbbbbbbbbbbbb
ccccccccccccccc
c

<b>Output:</b>
YES
YES
NO
YES
</pre>
<b>Warning: enormous input/output data, be careful with certain languages</b>



______________________________________________________
TWOPROF||||||true||||||


<p>There are two professors at the great Academy of X that really do not get along with each other. In
order not to reveal their names, we will call them 1 and 2. The Academy employs exactly n professors,
each of them has to give exactly one lecture. As their schedules are rather tight (they are professors,
remember?), the starting and the ending time of each lecture is already fixed. However, it is not yet fixed where each lecture will take place. Obviously, it is impossible to schedule two lectures in the same
room if their durations overlap; on the other hand, it is possible if one of them starts exactly at the same
time that the other one ends. Your tasks is to find the minimal number of rooms allowing to arrange all
the lectures. But know that professors 1 and 2 hate each other so much that they will never give their
lectures in the same room.</p>

*******InputConstraints*******

<p>The input contains several test cases. The first line contains the number of test cases t (t <= 250). Each
test begins with a line containing the number of professors n (2 <= n <= 100000). Next n lines follow, i-th of
which contains two integers start<sub>i</sub> and end<sub>i</sub> (0 <= start<sub>i</sub> < end<sub>i</sub> <= 1000000000), the starting and the ending time of the lecture that the i-th professor gives, respectively.</p>

*******OutputConstraints*******

<p>For each test case output the minimal number of rooms necessary to schedule all the lectures.</p>

*******IOTestCases*******

<pre><b>Input:</b>
4
2
0 10
10 20
3
0 10
10 20
10 20
5
4 14
3 13
2 12
1 11
0 10
4
0 10
10 20
20 30
30 40

<b>Output:</b>
2
2
5
2
</pre>
<p><b>Warning: enormous input/output data, be careful with certain languages</b></p>

<p><b>Note: The input is too large, so we have 4 input files and the total time limit is 17 seconds.</b></p>


______________________________________________________
MBLAST||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MBLAST/en/">English</a></td> 
<td width="50%"><a href="/problems/MBLAST/vn/">Vietnamese</a></td> 
</tr></table>

<p>
There are given two strings, A and B. 
An expansion of some string X is a string created by adding or 
inserting any number (zero, one or more) of blanks anywhere in 
the string, or in the beggining or the end of the string. Eg., if the 
string X is &#8216;abcbcd&#8217;, then the strings 'abcb-cd', '-a-bcbcd-' 
and 'abcb-cd-' are expansions of the string X (blanks are denoted by 
the character &#8216;-&#8216;). </p><p>
If A1 is an expansion of the string A, and B1 is and expansion of 
the string B, and if A1 and B1 are of the same length, then we define 
the distance of the strings A1 and B1 as the sum of the distances of the 
characters on the same positions in these strings. We define the 
distance of two characters as the absolute difference of their ASCII codes, 
except the distance of the blank and another character, 
which is given 
(and equal for all characters). </p><p>
You are to write a program which finds the expansions A1 and B1 of 
strings A and B, that have the smallest difference. </p>
  
</pre>

______________________________________________________
MTELE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTELE/en/">English</a></td> 
<td width="50%"><a href="/problems/MTELE/vn/">Vietnamese</a></td> 
</tr></table>

<p>
A TV-network plans to broadcast an important football match. Their
network of transmitters and users can be represented as a  tree. The
root of the tree is a transmitter that emits the football match, the 
leaves of the tree are the potential users and other vertices 
in the tree are relays (transmitters). 
The price of transmission of a signal from one transmitter 
to another or to the user is given. A price of 
the entire 
broadcast is the sum of prices of all individual signal transmissions. 
Every user is ready to pay a certain amount of money to watch the 
match and the TV-network then decides whether or not to provide the
user with the signal. 
Write a program that will find the maximal number of users able 
to watch the match so that the TV-network&#8217;s doesn&#8217;t lose money from 
broadcasting the match.
  
</p>

______________________________________________________
MTRAIN||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MTRAIN/en/">English</a></td> 
<td width="50%"><a href="/problems/MTRAIN/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Mirko and Slavko have finally gotten jobs as locomotive drivers on 
the Croatian Railroad. As early as the first day of work, they got an 
assignment. Each of them was to take their locomotive from a certain
town and visit as many towns as possible. </p><p>
Mirko is an experienced driver, so he is afraid of nothing. 
This was, however, Slavko&#8217;s first train ride and he can do absolutely 
nothing by himself. Luckily, all the locomotives have radios, so Slavko 
can drive the locomotive normally as long as he is within the range 
of Mirko&#8217;s radio to give him instructions. </p><p>
N towns have been given in a coordinate plane. Some of the towns are 
connected by railroad. Mirko and Slavku start their tour in different 
towns, and so that they are at most D kilometers away from each other. </p><p>
The locomotives can use all railroads, at any speed and in any 
direction. Locomotives can switch railroad tracks in towns only. 
Mirko and Slavko may be at most D kilometers away from each other at
any moment in time. </p><p>
Write a program that will determine all possible towns that Slavko 
can visit, as was described above. 
</p><p>

______________________________________________________
MVECTOR||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MVECTOR/en/">English</a></td>
<td width="50%"><a href="/problems/MVECTOR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>We can represent a 2D vector as a pair (X,Y).  The sum of two or more vectors is a vector whose coordinates  are the sums of the corresponding coordinates of all the vectors in  the sum.  e.g. (1,2)+(3,4)+(5,6) = (1+3+5,2+4+6) = (9,12)  Weight of a vector (x,y) is defined as x*x+y*y.  You are given N vectors on a plain.</p>
<p>Your task is to write a program that will determine a subset of  those vectors so the weight of the sum of all vectors in that subset is  maximal.</p>
<p>Note: Use 64-bit integers (int64 in pascal or long long in c)</p>

______________________________________________________
EPALIN||||||false||||||

<p>
Your task is, given an integer N, to make a palindrome (word that reads the same when you reverse it) of length at least N (1 <= N <= 100,000). Any palindrome will do.</p>
<p>
Easy, isn't it? That's what you thought before you passed it on to your inexperienced team-mate. When the contest is almost over, you find out that that problem still isn't solved. The problem with the code is that the strings generated are often not palindromic. There's not enough time to start again from scratch or to debug his messy code.</p>
<p>
Seeing that the situation is desperate, you decide to simply write some additional code that takes the output and adds just enough extra characters to it to make it a palindrome and hope for the best. Your solution should take as its input a string and produce the smallest palindrome that can be formed by adding zero or more characters at its end. The input string will consist of  only upper and lower case letters.
</p>
<h3>Example</h3>

<pre>
<b>Input:</b>

aaaa
abba
amanaplanacanal
xyz

<b>Output:</b>

aaaa
abba
amanaplanacanalpanama
xyzyx
</pre>

<em>Note: 
</br>1. All palindromes are considered case-sensitive (i.e. 'Aa' is not a palindrome).
</br>2. Large I/O. Be careful in certain languages.
</em>


______________________________________________________
FASTFLOW||||||true||||||


<p>Given a graph with N (2 &#8804; N &#8804; 5,000) vertices numbered 1 to N and M (1 &#8804; M &#8804; 30,000) undirected, weighted edges, compute the <a href="http://en.wikipedia.org/wiki/Maximum_flow_problem">maximum flow / minimum cut</a> from vertex 1 to vertex N.</p>


*******InputConstraints*******

<p>The first line contains the two integers N and M. The next M lines each contain three integers A, B, and C, denoting that there is an edge of capacity C (1 &#8804; C &#8804; 10<sup>9</sup>) between nodes A and B (1 &#8804; A, B &#8804; N). Note that it is possible for there to be duplicate edges, as well as an edge from a node to itself.</p>


*******OutputConstraints*******

<p>Print a single integer (which may not fit into a 32-bit integer) denoting the maximum flow / minimum cut between 1 and N.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4 6
1 2 3
2 3 4
3 1 2
2 2 5
3 4 3
4 3 3

<b>Output:</b>
5
</pre>

<p>Viewing the problem as max-flow, we may send 3 units of flow through the path 1 - 2 - 3 - 4 and 2 units of flow through the path 1 - 3 - 4. Viewing the problem as min-cut, we may cut the first and third edges. Either way the total is 5.</p>

<p>Note: see also <a href="http://www.spoj.pl/problems/MATCHING/">http://www.spoj.pl/problems/MATCHING/</a>.</p>


______________________________________________________
ETF||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/ETF/en/">English</a></td> 
<td width="50%"><a href="/problems/ETF/vn/">Vietnamese</a></td> 
</tr></table>


<p>In number theory, the totient <img src = "http://vn.spoj.pl/SPOJVN/content/phi.jpg"> of a positive integer n is defined to be the number of positive integers less than or equal to n that are coprime to n.</p>
<p>Given an integer n (1 <= n <= 10^6). Compute the value of the totient <img src = "http://vn.spoj.pl/SPOJVN/content/phi.jpg">. </p>


*******InputConstraints*******

<p>
First line contains an integer T, the number of test cases. (T <= 20000)
</p>
<p>
T following lines, each contains an integer n.
</p>

*******OutputConstraints*******

<p>
T lines, one for the result of each test case.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
5
1
2
3
4
5

<b>Output:</b>
1
1
2
2
4

</pre>




______________________________________________________
ELLIPSE||||||true||||||


<p>Given 5 points on a ellipse, calculate the area of the ellipse. We accept solutions with <b>absolute error less than 10<sup>-6</sup> or relative error less than 10<sup>-9</sup></b>.</p>

*******InputConstraints*******

<p>Many test cases. Each contains a line with 10 integers with absolute value less than 1000 - the X and Y coordinates of the 5 points, respectively.
<p>Input terminates by EOF. Note that there can be extra spaces in a single line.</p>

*******OutputConstraints*******

<p>Each line contains a single float-point number - the area of the corresponding ellipse, or "IMPOSSIBLE" if the ellipse doesn't exist or can't be unique determined.</p>

*******IOTestCases*******

<pre><b>Input:</b>
6 1 3 2 -2 -3 -3 -2 1 6
7 -3 2 7 6 3 5 5 -2 -9

<b>Output:</b>
IMPOSSIBLE
157.079633
</pre>
<p><b>Note: You can click on "Wrong Answer" to get further information.</b>
<p><b>Note: Judge is slightly modified to avoid some precision problems. </b></p>


______________________________________________________
IZBORI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/IZBORI/en/">English</a></td> 
<td width="50%"><a href="/problems/IZBORI/vn/">Vietnamese</a></td> 
</tr></table>


<p>It is election time. V voters attend the election, each casting their vote for one of N political parties. M
officials will be elected into the parliament.</p>
<p>The conversion from votes to parliament seats is done using the D'Hondt method with a 5% threshold.
More precisely, suppose that the parties are numbered 1 through N and that they receive V1, V2, ..., VN
votes. Parliament seats are allocated as follows:</p>
<ul>
<p>1. All parties that receive strictly less than 5% of V votes are erased from the list of parties.</p>
<p>2. The parliament is initially empty i.e. every party has zero seats allocated.</p>
<p>3. For each party P, the quotient QP=VP/(SP+1) is calculated, where VP is the total number of
votes received by party P, and SP is the number of seats already allocated to party P.</p>
<p>4. The party with the largest quotient QP is allocated one seat. If multiple parties have the same
largest quotient, the lower numbered party wins the seat.</p>
<p>5. Repeat steps 3 and 4 until the parliament is full.
The votes are being counted and only part of the V votes has been tallied. It is known how many votes
each party has received so far.</p>
</ul>
<p>Write a program that calculates for each party, among all possible outcomes of the election after all V
votes are counted, the largest and smallest number of seats the party wins.</p>


*******InputConstraints*******

<p>The first line contains the integers V, N and M (1 &#8804; V &#8804; 10,000,000, 1 &#8804; N &#8804; 100, 1 &#8804; M &#8804; 200), the
numbers of votes, parties and seats in the parliament.</p>
<p>The second line contains N integers &#8211; how many votes (of those that have been counted) each party
got. The sum of these numbers will be at most V.</p>


*******OutputConstraints*******

<p>On the first line output N integers separated by spaces &#8211; the largest number of seats each party can
win.</p>
<p>On the second line output N integers separated by spaces &#8211; the smallest number of seats each party can
win.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
20 4 5
4 3 6 1

<b>Output:</b>
3 3 3 2
1 0 1 0


<b>Input:</b>
100 3 5
30 20 10

<b>Output:</b>
4 3 3
1 1 0

</pre>

<p>In the first example, 14 votes have been tallied and 6 are yet to be counted. To illustrate one possible
outcome, suppose that the first party receives 2 of those 6 votes, the second none, the third 1 vote and
the fourth 3 votes. The parties' totals are 6, 3, 7 and 4 votes. All parties exceeded the 5% threshold.
Seats are allocated as follows:</p>
<ul>
<p>1. The quotients are initially 6/1, 3/1, 7/1 and 4/1; the largest is 7/1 so party 3 wins a seat.</p>
<p>2. The quotients are 6/1, 3/1, 7/2 and 4/1; the largest is 6/1 so party 1 wins a seat.</p>
<p>3. The quotients are 6/2, 3/1, 7/2 and 4/1; the largest is 4/1 so party 4 wins a seat.</p>
<p>4. The quotients are 6/2, 3/1, 7/2 and 4/2; the largest is 7/2 so party 3 wins a seat.</p>
<p>5. The quotients are 6/2, 3/1, 7/3 and 4/2; parties 1 and 2 are tied with quotients 6/2 and 3/1,
but party 1 is lower numbered so it wins the last seat.</p>
</ul>
<p>In this outcome, the numbers of seats won by the parties are 2, 0, 2 and 1. Since it is possible for the
second party not to win any seats, the second number on the second line of output is zero.</p>




______________________________________________________
OTOCI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/OTOCI/en/">English</a></td> 
<td width="50%"><a href="/problems/OTOCI/vn/">Vietnamese</a></td> 
</tr></table>


<p>Some time ago Mirko founded a new tourist agency named "Dreams of Ice". The agency purchased N
icy islands near the South Pole and now offers excursions. Especially popular are the emperor
penguins, which can be found in large numbers on the islands.</p>
<p>Mirko's agency has become a huge hit; so big that it is no longer cost-effective to use boats for the
excursions. The agency will build bridges between islands and transport tourists by buses. Mirko
wants to introduce a computer program to manage the bridge building process so that fewer mistakes
are made.</p>
<p>The islands are numbered 1 through N. No two islands are initially connected by bridges. The initial
number of penguins on each island is known. That number may change, but will always be between 0
and 1000 (inclusive).</p>
<p>Your program must handle the following three types of commands:
<ul>
<li>"bridge A B" &#8211; an offer was received to build a bridge between islands A and B (A and B will
be different). To limit costs, your program must accept the offer only if there isn't already a
way to get from one island to the other using previously built bridges. If the offer is accepted,
the program should output "yes", after which the bridge is built. If the offer is rejected, the
program should output "no".</li>
<li>"penguins A X" &#8211; the penguins on island A have been recounted and there are now X of them.
This is an informative command and your program does not need to respond.</li>
<li>"excursion A B" &#8211; a group of tourists wants an excursion from island A to island B. If the
excursion is possible (it is possible to get from island A to B), the program should output the
total number of penguins the tourists would see on the excursion (including islands A and B).
Otherwise, your program should output "impossible".</li>
</ul>
</p>


*******InputConstraints*******

<p>The first line contains the integer N (1 &#8804; N &#8804; 30 000), the number of islands.</p>
<p>The second line contains N integers between 0 and 1000, the initial number of penguins on each of the
islands.</p>
<p>The third line contains an integer Q (1 &#8804; Q &#8804; 300 000), the number of commands.</p>
<p>Q commands follow, each on its own line.</p>


*******OutputConstraints*******

<p>Output the responses to commands "bridge" and "excursion", each on its own line.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
4 2 4 5 6
10
excursion 1 1
excursion 1 2
bridge 1 2
excursion 1 2
bridge 3 4
bridge 3 5
excursion 4 5
bridge 1 3
excursion 2 4
excursion 2 5

<b>Output:</b>
4
impossible
yes
6
yes
yes
15
yes
15
16


<b>Input:</b>
6
1 2 3 4 5 6
10
bridge 1 2
bridge 2 3
bridge 4 5
excursion 1 3
excursion 1 5
bridge 3 4
excursion 1 5
penguins 3 10
excursion 1 3
bridge 1 5

<b>Output:</b>
yes
yes
yes
6
impossible
yes
15
13
no
</pre>





______________________________________________________
PLAHTE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PLAHTE/en/">English</a></td> 
<td width="50%"><a href="/problems/PLAHTE/vn/">Vietnamese</a></td> 
</tr></table>



<p>Mirko washed his sheets and is on his way to hang them to dry in front of his house. However, strong
winds have pulled the clothesline out of the ground so Mirko temporarily laid out the sheets on the
grass.</p>
<p>The grass field can be modeled by an infinite square grid, where every unit square is represented by a
pair of coordinates. Sheets are rectangles in the grid with sides parallel to the coordinate axes. Sheets
may overlap.</p>
<p>In an effort to put his clothesline back up, Mirko slammed a pole into the ground at coordinates (0, 0).
An entirely unexpected turn of events followed. Oil sprung from the ground and the shock caused
Mirko to faint. While Mirko lay unconscious, the oil is spreading, staining his sheets.</p>
<p>Time is measured from the moment the oil starts spreading &#8211; at time zero only square (0, 0) is covered
in oil. The oil is spreading at a speed of one square per second in all eight directions, as shown in
the figure below. When oil enters a square, it stains that square of fabric on all sheets covering the
square.</p>

<img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/plahte.jpg">

<p>Write a program that, given M points in time, calculates the total area of stained fabric on all sheets
for each of the given time points.</p>


*******InputConstraints*******

<p>The first line contains an integer N (1 &#8804; N &#8804; 100 000), the number of sheets.</p>
<p>Each of the following N lines contains four integers x1, y1, x2 and y2 (&#8722;1 000 000 &#8804; x1 &#8804; x2 &#8804; 1 000 000),
(&#8722;1 000 000 &#8804; y1 &#8804; y2 &#8804; 1 000 000). The coordinates (x1, y1) and (x2, y2) represent diagonally opposite
corners of a sheet (again, these coordinates are unit squares, not points on the plane). None of the
sheets will cover the square (0, 0).</p>
<p>The next line contains an integer M (1 &#8804; M &#8804; 100 000), the number of points in time.</p>
<p>The next line contains M integers between 0 and 1 000 000, the time points. They will be given in
strictly ascending order.</p>


*******OutputConstraints*******

<p>For each of the time points, output on a separate line the total area of stained fabric on all sheets, in the
order the time points are given in the input.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
-2 1 1 2
1 0 2 1
-3 -3 -2 0
2
1 2

<b>Output:</b>
5
15

<b>Input:</b>
4
5 1 8 4
-8 1 -5 4
-10 2 10 3
6 0 8 10
6
1 2 3 4 7 9

<b>Output:</b>
0
5
14
18
70
100


<b>Input:</b>
1
1 1 1000000 1000000
3
100 10000 1000000

<b>Output:</b>
10000
100000000
1000000000000

</pre>




______________________________________________________
DOMINO2||||||true||||||


<p>You have an <b>n</b>x<b>m</b> rectangle, some cells have some obstacles in. A domino piece is a 1x2 or 2x1 rectangle. You're going to place some domino pieces in this rectangle so that there's no empty cell is covered more than once and no cell with obstacles is covered. For some unknown reason, you have to ensure there's at least one piece covering some cell in row i and some cell in row i+1 at the same time for all i in 1..<b>n</b>-1. Similarly there's at least one piece covering some cell in column i and column i+1 for all i in 1..<b>m</b>-1. Your task is to count the number of different valid domino covering.</p>


*******InputConstraints*******

<p>The first line of the input contains two integer numbers <b>n</b>, <b>m</b> (1&#8804;<b>n</b>,<b>m</b>&#8804;15).</p>
<p>The following <b>n</b> lines describe the rectangle. Each line contains <b>m</b> characters. The j-th character of line i+1 may be either a '<tt>x</tt>'(ASCII code 120), representing obstacles in cell (i, j), or a '<tt>.</tt>'(ASCII code 46), representing an empty cell. </p>


*******OutputConstraints*******

<p>One number, representing the number of different valid domino placing.</p>
<p>Since the number could be quite large, output the answer modulo 19901013.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3
...
...
...

<b>Output:</b>
2
</pre>


______________________________________________________
MA1||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MA1/en/">English</a></td> 
<td width="50%"><a href="/problems/MA1/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Our country needs to be connected by highways that need to be repaired 
every once in a while. A committee chosen by the government of 
our country tries to continually improve the condition of the main highway 
imaginatively named &#8220;A1&#8221; by finding the first damage that needs to 
be fixed.</p><p> Starting with the first damage the highway is divided into 
segments of the same length. A damage fixing team is 
then being 
sent to each segment containing damage. Since there usually are 
much more damages than teams available, it would be advisable to 
divide the highway into segments of given length in such a way that 
the number of segments containing damages is as small as possible. </p><p>
There are N known damages on the highway, each described by an integer 
representing its distance from the beginning of the highway in 
meters. The length of a segment is M meters (an integer). 
There are no damages within the first M meters. The first segment has 
to start within the first M meters of the highway. If the first segment 
starts at the Kth meter then Lth segment starts at the (K+(L-1)*M)th
meter of the highway. A team can fix all damages occurring within
one segment starting with the first meter of the segment and ending 
with the last meter of that segment. </p><p>
Write a program that will determine the minimal number of damage fixing 
teams needed to fix all damages occurring on the highway &#8220;A1&#8221; and all 
possible beginnings of the first segment. 
 
</p><p>

______________________________________________________
HS08PAUL||||||true||||||


<p>In number theory there is a very deep unsolved conjecture of the Hungarian Paul ErdÃµs (1913-1996), that there exist infinitely many primes of the form <em>x</em><sup>2</sup>+1, where <em>x</em> is an integer. However, a weaker form of this conjecture has been proved: there are infinitely many primes of the form <em>x</em><sup>2</sup>+<em>y</em><sup>4</sup>. You don't need to prove this, it is only your task to find the number of (positive) primes not larger than <em>n</em> which are of the form <em>x</em><sup>2</sup>+<em>y</em><sup>4</sup> (where <em>x</em> and <em>y</em> are integers).</p>

*******InputConstraints*******

<p>An integer <em>T</em>, denoting the number of testcases (<em>T</em>&le;10000). Each of the <em>T</em> following lines contains a positive integer <em>n</em>, where <em>n</em>&lt;10000000.</p>

*******OutputConstraints*******

<p>Output the answer for each <em>n</em>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1
2
10
9999999

<strong>Output:</strong>
0
1
2
13175
</pre>


______________________________________________________
HS08FOUR||||||true||||||


<p>Let there be given <em>n</em> points: P<sub>1</sub>,P<sub>2</sub>...,P<sub><em>n</em></sub> arranged in this order on a line. We would like to color them using four colors: white, black, red, and blue, in such a way that for every three consecutive points it is true that either <br /> <strong>1.</strong> the colors of these three points are pairwise distinct, or <br /> <strong>2.</strong> the color of some point is white.</p>

*******InputConstraints*******

<p>An integer <em>T</em>, denoting the number of testcases (<em>T</em>&lt;100000). In each line you are given one positive integer ( n&lt;1000000000 ). There are 5 input sets.</p>

*******OutputConstraints*******

<p>Find the number of possible colorings of the <em>n</em> points. Since the answer can be very big, output only the answer modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />1<br />2<br />3<br />1000<br /><br /><strong>Output:</strong><br />4<br />16<br />43<br />283570349<br /></pre>
<p><strong>Warning: large input/output data, be careful with certain languages </strong> <br /><br /></p>
<p><strong>Warning: A naive algorithm will probably solve only the first input set. </strong></p>


______________________________________________________
SQFREE||||||true||||||


<p>In number theory we call an integer square-free if it is not divisible by a perfect square, except 1. You have to count them!


*******InputConstraints*******

<p>First line contains an integer <i>T</i>, the number of test cases (<i>T</i>&#8804;100).
The following T lines each contains one positive integer: <i>n</i>, where n &#8804; 10<sup>14</sup>

*******OutputConstraints*******

<p><i>T</i> lines, on each line output the number of (positive) square-free integers not larger than n.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1
1000
100000000000000

<b>Output:</b>
1
608
60792710185947
</pre>

<b>Warning: A naive algorithm probably not works. </b>


______________________________________________________
DROOT||||||true||||||


<p>For an integer find the multiplicative digital root of it! Multiple all nonzero digits of that number and repeat this process until it is only a single digit. We call that digit the multiplicative digital root of the number. For example the multiplicative digital root of <i>n</i>=2009 is 8, because the first iteration is: 2*9=18, the second is 1*8=8, and we stop here.


*******InputConstraints*******

<p>
The first line of the input file contains one integer <i>T</i>, the number of test cases.
The following <i>T</i> lines each contains a big positive integer: <i>n</i>, where <i>n</i><10<sup>10000</sup>


*******OutputConstraints*******

<p>Output the mulplicative digital root for each n.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
6
2009
555555555
847938630482747410708417738635300464477112059683336648877683

<b>Output:</b>
6
8
5
2
</pre>
<b>Warning: large input data, be careful with certain languages </b>
<br><br>
<b>Warning: not every languages are available for this task </b>


______________________________________________________
KPURSUIT||||||true||||||


<p>In chess, game pieces move about an chessboard in a fashion defined by their type. The object of the game is to capture opposing pieces by landing on their squares, and eventually trapping the king piece.<br><br>

In our version of the game, we shall use a variable sized board with only 2 pieces on it: A white pawn which moves relentlessly towards the top row of the chessboard one square at a time per move; and a black knight which can move from its current location in any of up to eight ways: two squares up or down and one square left or right, or one square up or down and two squares left or right. The knight must remain on the board at all times; any move that would take it off the board is therefore disallowed. In the diagram below, the knight's position is labelled K and its possible moves are labelled 1 to 8. <br>

<br>   . . . . . . .
<br>   . . 8 . 1 . .
<br>   . 7 . . . 2 .
<br>   . . . K . . .
<br>   . 6 . . . 3 .
<br>   . . 5 . 4 . .
<br>   . . . . . . .<br>
<br>

The pawn moves first; then the knight and pawn alternate moves. The knight tries to land either on the square occupied by the pawn (a win) or on the square immediately above the pawn (a stalemate). If the pawn reaches the top row of the board the game ends immediately and the knight loses (a loss).


*******InputConstraints*******

<p>The first line of input contains a positive integer, n, the number of games to analyze. For each game there are six lines on input:
<br>
<br>r, the number of rows in the chessboard.
<br>c, the number of columns in the chessboard.
<br>pr, the row of the starting position of the pawn.
<br>pc, the column of the starting position of the pawn.
<br>kr, the row of the starting position of the knight.
<br>kc, the column of the starting position of the knight.
<br><br>

All numbers in the input don't exceed 100.  (Thanks to Blue Mary for pointing that out).<br><br>

The pawn and the knight will have different starting positions. Row 1 is at the bottom of the board and Row r is at the top of the board. Column 1 is at the left and column c is at the right.


*******OutputConstraints*******

<p>If the knight can win and, output the minimum number of moves it must make to do so. If the knight cannot win, your program should determine if it can cause a stalemate and, if it can, the minimum number of moves it must make to do so. Finally if the knight cannot win or cause a stalemate, your program should compute the number of moves the knight makes before the pawn wins.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
99
99
33
33
33
35
3
3
1
1
2
3
99
99
96
23
99
1

<b>Output:</b>
Win in 1 knight move(s).
Stalemate in 1 knight move(s).
Loss in 2 knight move(s).
</pre>



______________________________________________________
HERDING||||||true||||||


<p>Oh no! A number of stray cats have been let loose in the city, and as the City Cat Catcher, you have been assigned the vital task of retrieving all of the cats. This is an ideal opportunity to test your latest invention, a cat trap which is guaranteed to retrieve every cat which walks into a square-shaped subsection of the city.<br><br>

Fortunately, you have the assistance of one of the world's foremost cat psychologists, who has the amazing ability of predicting, given a square subsection of the city, exactly which of the four cardinal directions (north, east, south or west) the cat will head. While this information is handy, you still don't know where all the cats currently are.<br><br>

In order to prove the cost-effectiveness of your method to the City it would, of course, be important to minimize the number of traps used.<br><br>


*******InputConstraints*******

<p>The input will begin with a line consisting of two numbers n and m, separated by a space (1 &#8804; n, m &#8804; 1000). The city will be an n x m grid of square subsections. The next n lines will each consist of a string of length m, consisting of the letters `N', `E', `S', or `W', representing north, east, south and west, respectively. (The first character of the first line will be the northwesternmost point.) The direction in the square is the direction which cats will head if they are in that square. The cat psychologist assures you that cats have no interest in leaving the city.


*******OutputConstraints*******

<p>Output the minimum number of traps needed.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 4
SWWW
SEWN
EEEN

<b>Output:</b>
2



______________________________________________________
LATTICE||||||true||||||


<p>Let L to be an <i>nXn</i> square lattice, you can consider its points as <i>(x,y)</i>, where <i>x</i> and <i>y</i> are integers from the [1,<i>n</i>] interval.
And let f(<i>n</i>) to be the expected distance between two not neccesserily distinct points on the lattice. For example f(1)=0 and f(2)=(2 + <span style="white-space: nowrap; font-size:larger">
&#8730;<span style="text-decoration:overline;">Â 2Â </span>
</span>)/4.


*******InputConstraints*******

<p>There is no input.


*******OutputConstraints*******

<p>5000 lines, on the n-th line give the value of f(<i>n</i>) by 2 digits after the decimal point.


*******IOTestCases*******


<pre>
<b>Input:</b>
No input.

<b>Output:</b>
0.00
0.85
1.45
2.01
2.55
.
.
.
2607.03
</pre>



______________________________________________________
TEMPTISL||||||true||||||


<p>On Monday, the number of frosh were reduced in half.  To further reduce the number of engineers to a manageable number, the following challenge was devised for the second day.  Each of the students would have to take this challenge individually.<br><br>
Each student would be placed at a vertex of perimeter fence of Waterloo (oh yeah, some background: to keep UofT&#8217;s engineering Lady Godiva band out of Waterloo, a fence was erected surrounding the university.  The fence just happens to be an N-gon).  At some other vertex along the fence would be located a temptation so seductive that no Waterloo student could resist &#8211; an extra-credit assignment.  The challenge of each student is to go from his starting vertex to the vertex with the prize.  There are however 3 rules:
<br><br>
a)	The student can only travel from vertex to vertex (backwards or forwards) along the polygonal fence.<br><br>
b)	The student has to make contact with exactly K vertices (the vertex he starts at doesn&#8217;t count unless he returns to it).  The K vertices need not be unique.  The final vertex has to be the one with the prize.<br><br>
c)	If the student cannot reach the prize and make contact with exactly K vertices, he fails the test and is kicked out of the university.<br><br>

Of course, no Waterloo student is satisfied with only 1 solution to any problem.  Therefore, inevitably, each student determines all ways that he/she can win.  Note that there may be no solution to the problem (the astute student has figured out that this will result in a class size of 0 &#8211; this is entirely allowable as the variable used to quantify enrollment was incorrectly defined as a whole number instead of a natural number).<br><br>


*******InputConstraints*******

<p>N K (N, K <= 50)<br>
A B (A = the starting vertex number, B = destination vertex number)<br>
-1 -1 terminates input<br><br>


*******OutputConstraints*******

<p>The total number of ways of reaching the destination from the starting point by following the above rules.  The total number of ways will be less than 2<sup>63</sup> - 1.  Output 0 if there are no solution.


*******IOTestCases*******


<pre>
<b>Input:</b>
8 5
1 4
-1 -1

<b>Output:</b>
6
</pre>



______________________________________________________
PIZZALOC||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PIZZALOC/en/">English</a></td> 
<td width="50%"><a href="/problems/PIZZALOC/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Our friend Picko is very reach and he wants to open lots of restaurants
with delivery. The main food will be, of course, pizza. 
He has certain number of potential locations for the restaurants, 
and he knows the locations of the solitairs with lots of people which 
will often be his customers. 
Delivery of each restaurant will cover all the solitairs in given radius. </p><p>
Picko can open only limited number of restaurants, and he wants that 
restaurants on the locations which will cover maximal 
number of people 
in solitairs. </p><p>
Write a program that will calculate maximal number of people which 
we can cover with delivery.
 
</p><p>

______________________________________________________
MELE3||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MELE3/en/">English</a></td> 
<td width="50%"><a href="/problems/MELE3/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Solitaire has N elevators. Each elevator are connecting exactly two 
floors and it does not stop on the floors between that two floors 
The speed of all the elevators are the same, 5 seconds to pass one floor. </p><p>
On the beginning, each elevator is in its lower position and they 
are starting cruising to the upper floor. After some elevator come 
to its upper position, it  immediatly starts to go back to its lower 
position, and so on... </p><p>
Mirko is on the  first (the lowest) floor and he wants as quick as 
possible come to the  top of the solitaire. He can change elevators 
only on the floors that are common to both elevators, and if the other 
elevator is in that moment on that floor, that change 
does not take 
any time. </p><p>
Write a program that will calculate minimal time in which Mirko can get 
to the top of the solitaire.
</p><p>

______________________________________________________
FCANDY||||||true||||||


<p>You and a friend have a big bag of candy. You want to keep slim and trim, and so you would like to equalize the candy which you are sharing with your friend in terms of calorie count. That is, your task is to divide the candies into two groups such that the number of calories in each group is as close together as possible.



*******InputConstraints*******

<p>The first line of input contains the number of different kinds of candy you have in your bag of candy N (1 &#8804; N &#8804; 100). On the following N lines, there are pairs of numbers describing each type of candy. The candy description is of the form k<sub>i</sub> c<sub>i</sub> where k<sub>i</sub> is the number of that particular type of candy contained in the bag and ci is the calorie count for each piece of that type of candy. You may assume that 1 &#8804; k<sub>i</sub> &#8804; 500 and 1 &#8804; c<sub>i</sub> &#8804; 200.


*******OutputConstraints*******

<p>Your output is one integer which is the minimum difference of calories between friends


*******IOTestCases*******


<pre>
<b>Input:</b>
4
3 5
3 3
1 2
3 100

<b>Output:</b>
74
</pre>



______________________________________________________
CCCCUBE||||||true||||||


<p>Imagine a cube formed from solid interlocking pieces of various shapes. If the pieces are sufficiently intertwined, the only way to separate them would be to cut some of them. We can ask the question, "is the cube stable?" That is, is it physically impossible to separate the cube into 2 or more fragments without deforming and cutting any individual piece?</p>
<p>Your program must answer this question for a variety of such cubes. The pieces that make up a cube will be specified as follows: divide the cube into a grid of <em>n</em>*<em>n</em>*<em>n</em> miniature cubes, each labelled by a capital letter. Two adjacent (face-sharing) are joined together if and only if they are labelled by the same letter. For instance, the first example cube given consists of 3 solid pieces.</p>

*******InputConstraints*******

<p>Your program will be given the specification of up to 10 different cubes. The first two lines of each specification will consist of the size of that cube, <em>n</em> (1 &le; n &le; 10), and a blank line. There will be no spaces in the input. The input will be terminated by a number 0 on a line by itself.</p>

*******OutputConstraints*******

<p>For each cube given, in the order specified, print "Yes" if that cube is stable, and "No" if it is not.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2

AB
AB

BB
BA

3

AAA
BBB
AAA

AAA
ABA
AAA

ABA
ABA
ABA

0

<strong>Output:</strong>
No
Yes

</pre>

<?echo("LOL");?>


______________________________________________________
HS08CODE||||||true||||||


<p>Today, Gerrob's RSA company has featured a New RSA cryptosystem: its public key is <em>n</em>, the secret keys are three distinct primes <em>p</em>, <em>q</em> and <em>r</em>, where <em>n</em>=<em>p</em>*<em>q</em>*<em>r</em>. Note that the ordinary RSA uses only 2 primes! Unfortunately some hackers have stolen a DVD from the company. It does not store the secret keys, only some information about the system, namely, the values of: <br /> &#966; (<em>n</em>) - Euler's totient function and  <br /> &#963; (<em>n</em>) - the sum of the divisors.<br /> Obviously you know also <em>n</em>, because that's public.</p>
<p>Now, Gerrob's RSA employees are trying to determine  if hackers will be able to break the system. Could you help them to answer this question?</p>

*******InputConstraints*******

<p>The first line contains a single integer <em>T</em>, the number of test cases, where <em>T</em>&#8804; 20000. The following <em>T</em> lines each contains three numbers n, &#966; (<em>n</em>) and &#963; (<em>n</em>) in this order. There are 5 input sets.</p>

*******OutputConstraints*******

<p>Output <em>T</em> lines, the values of <em>p</em>, <em>q</em> and <em>r</em> in increasing order. It is guaranteed that <em>p</em>, <em>q</em>, <em>r</em>&lt;10<sup>6</sup>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
30 8 72
61321 54912 68040
451464315257 451286179344 451642497600
91896729624994213 91896040105364880 91897419147616160
<strong>Output:</strong>
2 3 5
13 53 89
6397 8039 8779
231859 574261 690187
</pre>
<p><strong>Warning: large input/output data, be careful with certain languages </strong> <br /><br /></p>
<p><strong>Warning: A naive algorithm will probably solve only the first input set. </strong></p>


______________________________________________________
HS08EQ||||||true||||||


<p>The definition of a perfect number is about 2300 years old. A perfect number is defined as a positive integer which is the sum of its proper positive divisors, that is, the sum of the positive divisors excluding the number itself. What can we get if,  in the sum,  we replace each divisor by its square? You can prove that there is no such number. But there are many numbers for which the sum of some divisors' squares is equal to <em>n</em>, so n=d<sub>1</sub><sup>2</sup>+d<sub>2</sub><sup>2</sup>+...+d<sub>k</sub><sup>2</sup>, where d<sub>1</sub>, d<sub>2</sub>, ...,d<sub>k</sub> are distinct (positive) divisors of <em>n</em>. You have to count how many times this happens. For example: the divisors of <em>n</em>=120 are 1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 40, 60, 120. And there are exactly two amazing equalities: <br /> 120=2<sup>2</sup>+4<sup>2</sup>+10<sup>2</sup> <br /> 120=2<sup>2</sup>+4<sup>2</sup>+6<sup>2</sup>+8<sup>2</sup></p>

*******InputConstraints*******

<p>The first number is <em>T</em>, denoting the number of test cases (<em>T</em>&lt;1000). <em>T</em> lines follow, each of which contains one positive integer (<em>n</em>&lt;10<sup>10</sup>).</p>

*******OutputConstraints*******

<p>Output <em>T</em> lines, the answer for each <em>n</em>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6
120
720
1000
1200
92070
123618780

<strong>Output:</strong>
2
13
0
10
6448
292
</pre>


______________________________________________________
LANDING||||||true||||||


<p>Keep watching the skies! Alien spacecraft are due to land any day now to share all of their advanced programming secrets with us.<br /><br />In preparation for this day, you've been asked with preparing a landing pad for our visitors in a given field. Unfortunately, due to enviromental considerations, you will not be permitted to remove any of the trees which currently exist on the field. These trees are of immense scientific research, since they have zero radius and only grow at points with integer co-ordinates. However, this could be a blessing in disguise. For security reasons, the landing pad must be in contact with atleast three trees. Security cameras will be placed at the tops of these trees.<br /><br />Alien spacecraft are perfectly circular craft of various sizes, so the landing pad will also be circular. Since it would be polite to warn potential visitors ahead of time if their spacecraft is too large for our landing pad, you must now determine the size of largest circular region that we can place on the field which contacts at least three trees, but does not contain any trees within.<br /><br /></p>

*******InputConstraints*******

<p>The first line of input consists of the number n of trees (3 &le; n &le; 100 000). the next n lines will each consist of a pair of integers x and y (-10000 &le; x, y &le; 10000), separated by a space, giving the co-ordinates of a tree. You may assume that no two trees are at the same co-ordinates.</p>

*******OutputConstraints*******

<p>Output the radius of the largest possible landing pad. If the correct answer is R, you should output number a such that</p>
<p><img src="http://www.spoj.plhttp://spoj.pl/content/bleung91:Formula_Landing.png" alt="" /></p>
<p><br /><br />The above calculation is used to define an acceptable range or tolerance for the answer you find. You may also assime that r &lt; 10<sup>9</sup>. You may assume there exists at least one landing pad.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1 1
1 -1
-1 -1
-1 1

<strong>Output:</strong>
1.414214<br /><br />

<img src="http://www.spoj.plhttp://spoj.pl/content/bleung91:Landing_picture.png" alt="" /><br /><br />

</pre>


______________________________________________________
MSKYCODE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSKYCODE/en/">English</a></td> 
<td width="50%"><a href="/problems/MSKYCODE/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Stancu likes space travels but he is a poor software developer and 
will never be able to buy his own spacecraft. That is why he is 
preparing to steal the spacecraft of Petru. There is only one problem &#8211; 
Petru has locked the spacecraft with a sophisticated cryptosystem 
based on the ID numbers of the stars from the Milky Way Galaxy. For 
breaking the system Stancu has to check each subset of 
four stars 
such that the only common divisor of their numbers is 1. Nasty, isn&#8217;t it? </p><p>
Fortunately, Stancu has succeeded to limit the number of the interesting 
stars to N but, any way, the possible subsets of four stars can 
be too many. Help him to find their number and to decide if there is 
a chance to break the system. </p><p>
 

______________________________________________________
MSE08G||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE08G/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE08G/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
 
John has recently arrived in Bucharest for the South Eastern 
European Regional Contest. John is famous for his theory of lucky 
numbers. That&#8217;s why all the contestants and spectators are very happy. 
According to that theory  4 and  7 are lucky digits, and all the 
other digits are not lucky. A lucky number is a number that contains 
only lucky digits in decimal notation. A very lucky number is a number 
that can be expressed as a product of several lucky numbers. A lucky 
number by itself is considered to be very lucky. For  example, numbers 
47, 49, 112 are very lucky. </p><p>
Your task is to calculate the number of very lucky numbers that are 
not less than A and not greater than B. Of course, numbers A and B are 
given by John. </p><p>
 
 

______________________________________________________
MSE08H||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE08H/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE08H/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
We say that a set S = {x1, x2, &#8230;, xn} is factor closed if for any xi &#8712; S 
and any divisor  d of  xi we have d &#8712; S. Let&#8217;s build a GCD matrix 
(S) = (sij), where  sij = GCD(xi, xj) &#8211; the greatest common divisor 
of xi and xj. Given the factor closed set S, find the value of the determinant: 
</p><p>
<a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i44.tinypic.com/k99cfb.jpg" border="0" alt="Image and video hosting by TinyPic"></a>

______________________________________________________
DOMINOES||||||true||||||


<p>Johnny is playing with some dominoes one afternoon. His dominoes come in a variety of heights and colors.<br /> <br /> Just like any other child, he likes to put them in a row and knock them over.<br /> He wants to know something: how many pushes does it take to knock down all the dominoes?<br /> Johnny is lazy, so he wants to minimize the number of pushes he takes.<br /> A domino, once knocked over, will knock over any domino that it touches on the way down.<br /> <br /> For the sake of simplicity, imagine the floor as a one-dimensional line, where 1 is the leftmost point. Dominoes will not slip along the floor once toppled. Also, dominoes do have some width: a domino of length 1 at position 1 can knock over a domino at position 2. <br /> For the mathematically minded:<br /> A domino at position <em>x</em> with height <em>h</em>, once knocked over to the right, will knock all dominoes at positions <em>x</em>+1, <em>x</em>+2, ..., <em>x</em>+<em>h</em> rightward as well.<br /> Similarly, the same domino knocked over to the left will knock all dominoes at positions <em>x</em>-1, <em>x</em>-2, ..., <em>x</em>-<em>h</em> leftward.</p>

*******InputConstraints*******

<p>The input starts with a single integer <em>N</em> (<em>N</em> &le; 100000), the number of dominoes, followed by <em>N</em> pairs of integers.<br /> Each pair of integers represents the location and height of a domino, in that order (0 &le; location &le; 10<sup>9</sup>, 0 &le; height &le; 10<sup>9</sup>).<br /> No two dominoes will have the same location.</p>

*******OutputConstraints*******

<p>A single integer on a single line: the minimum number of pushes Johnny must make in order to ensure that all dominoes are knocked over.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6
1 1
2 2
3 1
5 1
6 1
8 3
<strong>Output:</strong>
2
<strong>Explanation</strong>
              |
  |           |
| | |   | |   |
1 2 3 4 5 6 7 8
</pre>
<p>Pushing 1 causes 2 and 3 to fall, while pushing 8 causes 6 to fall and gently makes 5 tip over as well.</p>


______________________________________________________
LEGO||||||false||||||

<p>It's Christmas morning, and you've got what you wanted: a box of Lego&trade;! (Okay, maybe not, but better than nothing)<br /> <br /> Lego is pretty fun to tinker with, and you've decided to build some sort of shape.<br /> (For the sake of this problem, let's say your shape is basically 2-dimensional - it'll be a slab)<br /> <br /> But once you pick it up, you discover that you didn't plan it properly, and your wonderful shape just falls apart.<br /> Now, you're planning to build something big, and so you're going to use the computer to help you.<br /> Write a program, that given the layout of a Lego design, outputs the number of pieces it would break into if picked up.<br /> (Assume that the bricks bind together perfectly)<br /> <br /> The Legos will be built on a x-y coordinate plane, with (0,0) being the bottom left corner.<br /> The blocks are flat on your carpet, so a block will never 'fall down'.<br /> (If you haven't seen a Lego brick before: A Lego brick has grooves on its top that match with notches on the bottom.<br /> If a groove and a notch bind, the bricks will stay together. See the diagram.<br /> A brick will bind with another brick securely even if just a single notch touches another groove.</p>

______________________________________________________
HAMSTER1||||||true||||||


<p>There is a competition of flying hamsters in Hamsterburg. Each competing hamster is thrown from a sling. The judges rate the flight according to its length and height. Let X meters be the distance of the flight, and Y meters &#8211; maximum height to which the hamster rose during the flight. The hamster will receive K1*X + K2*Y points for such a flight. The initial speed of the hamsters is V0 m/s. Free fall acceleration is g = 10 m/s<sup>2</sup>. There is no air friction. The size of the hamster and the sling are negligible. When the hamster is thrown from the sling its height is 0 meters. You should determine the angle at which the hamster must be thrown so that he receives maximum points.</p>


*******InputConstraints*******

<p>The first line of input contains number t &#8211; the amount of tests. Then  t tests follow one per line. The description of each test consists of three integers separated by single spaces. The first integer is V0, the second &#8211; K1, the third &#8211; K2.</p>


*******OutputConstraints*******

<p>For each test output the angle in radians at which the hamster must be thrown, and the amount of points it will receive. The numbers should be separated with spaces. Print the numbers with exactly three digits in the fractional part.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10 10 0
10 0 10
10 10 10

<b>Output:</b>
0.785 100.000
1.571 50.000
0.908 128.078
</pre>



______________________________________________________
RATING||||||false||||||

<p>Some of the more elite (and not-so-elite) coders around take part in a certain unnamed programming contest. In said contest, there are multiple types of competitions. Here, we consider the Open and High School competition types. For each type, each competitor receives a <em>rating</em>, an integer between 1 and 100000, inclusive. A coder's rating is based upon his or her level of performance in matches and is calculated using a complicated formula which, thankfully, you will not be asked to implement.<br /> <br /> Although the Open and High School ratings for a coder who has participated in both competition types lately are usually close, this is not always the case. In particular, High School matches are more about speed, since many coders are able to solve all the problems, whereas Open matches require more thinking and there is a steeper curve in terms of problem difficulty.<br /> <br /> <strong>Problem Statement</strong><br /> You are given <em>N</em> coders (1 &le; <em>N</em> &le; 300000), conveniently numbered from 1 to <em>N</em>. Each of these coders participates in both High School and Open matches. For each coder, you are also given an Open rating <em>A<sub>i</sub></em> and a High School rating <em>H<sub>i</sub></em>. Coder <em>i</em> is said to be <em>better</em> than coder <em>j</em> if and only if both of coder <em>i</em>'s ratings are greater than or equal to coder <em>j</em>'s corresponding ratings, with at least one being greater. For each coder <em>i</em>, determine how many coders coder <em>i</em> is better than.<br /> <br /> <strong>Input Format</strong><br /> On the first line of input is a single integer <em>N</em>, as described above.<br /> <em>N</em> lines then follow. Line <em>i</em>+1 contains two space-separated integers, <em>A<sub>i</sub></em> and <em>H<sub>i</sub></em>.<br /> <br /> <strong>Output Format</strong><br /> Line <em>i</em> should contain the number of coders that coder <em>i</em> is better than.<br /> <br /> <strong>Sample Input</strong></p>
<pre>8
1798 1832
862 700
1075 1089
1568 1557
2575 1984
1033 950
1656 1649
1014 1473
</pre>
<p>&nbsp;</p>
<p><strong>Sample Output</strong></p>
<pre>6
0
2
4
7
1
5
1</pre>
<p>&nbsp;</p>


______________________________________________________
BRPAR||||||true||||||


<p>Count the number of different correct bracket sequences consisting of k1 pairs of brackets of the 1st type, k2 pairs of brackets of the 2nd type, &#8230;, km pairs of brackets of the m-th type. The bracket sequence is considered correct in the following cases:<ul><li>empty sequence is correct;</li><li>if A is correct and B is correct then AB is correct;</li><li>if A is correct then (<sub>i</sub>A)<sub>i</sub> is correct where (<sub>i</sub> and )<sub>i</sub> are opening and closing brackets of the same type.</li></ul></p>



*******InputConstraints*******

<p>The first line of input is the number 0 < n <= 1000 of test cases. Each of the following n lines describe a test case. Each line starts with number 0 < m <= 100 the amount of different bracket types. Then m positive numbers k1, k2, &#8230;, km follow each separated with a space. Number ki is the amount of pairs of brackets of i-th type. The total amount of pairs of brackets is not greater than 1000.</p>


*******OutputConstraints*******

<p>For each test case output a line containing single integer &#8211; the answer to the problem modulo 1000000007.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1 4
2 2 2
3 1 2 3

<b>Output:</b>
14
84
7920
</pre>



______________________________________________________
MSE07E||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE07E/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE07E/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
 
Data-mining huge data sets can be a painful and long lasting process
if we are not aware of tiny patterns existing within those data sets. 
One reputable company has recently discovered a tiny bug in their 
hardware video processing solution and they are trying to create software
workaround. To achieve maximum performance they use their chips in pairs 
and all data objects in memory should have even number of references. 
Under certain circumstances this rule became violated and exactly one 
data object is referred by odd number of references. They are ready to 
launch product and this is the only showstopper they have. They need YOU 
to help them resolve this critical issue in most 
efficient way. 
Can you help them? </p><p>
</pre>

______________________________________________________
MATCHING||||||true||||||


<p>FJ has N (1 &#8804; N &#8804; 50,000) cows and M (1 &#8804; M &#8804; 50,000) bulls. Given a list of P (1 &#8804; P &#8804; 150,000) potential matches between a cow and a bull, compute the greatest number of pairs that can be matched. Of course, a cow can be matched to at most one bull, and vice versa.</p>


*******InputConstraints*******

<p>The first line contains three integers, N, M, and P. Each of the next P lines contains two integers A (1 &#8804; A &#8804; N) and B (1 &#8804; B &#8804; M), denoting that cow A can be matched with bull B.</p>


*******OutputConstraints*******

<p>Print a single integer that is the maximum number of pairs that can be obtained.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5 4 6
5 2
1 2
4 3
3 1
2 2
4 4

<b>Output:</b>
3
</pre>

<p>Cow 1 can be matched to bull 2, cow 3 to bull 1, and cow 4 to bull 3.</p>

<p>Note: see also <a href="http://www.spoj.pl/problems/FASTFLOW/">http://www.spoj.pl/problems/FASTFLOW/</a>.</p>


______________________________________________________
MSE06E||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE06E/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE06E/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
 
The payment system  in  the University of Mineral Water Production  is
completely automated (written entirely in Tomato Programming Language)
and lets you input the amount of money you want  to withdraw. Due  
to  the high payment  rates of  the professors  they may  input  the
amounts in exponential forms. So if you want to withdraw 16 MWU (mineral 
water units) you can enter 16, 2^4 or 2^2^2. </p><p>
One day, Stanescu  tried  to withdraw  some money  from his account 
which had balance of 80MWU. He mistakenly entered 2^3^2 and  for his
surprise he got 512MWU, although he should not be able to take more than 80. </p><p>
The system was composed of two main modules &#8211; the  first module checks 
whether  the account has enough money  to execute  the  transaction
and the second module gives the money to the user. It turned out 
that the first module has a problem with  the  '^'  operator.  It  
evaluates  it  from  left  to  right, while  the  second  evaluates
them from right to left (the correct way). Thus for the first module 
2^3^2=(2^3)^2=64 while for the second it&#8217;s 2^3^2=2^(3^2)=512. </p><p>
You have to write program which helps Stanescu get as much as he can
from the university system.  If you  think  it&#8217;s not  legal or something, 
be sure  that  the University of Mineral Water
Production is bad and evil. </p><p>
In the input file the amounts of the accounts of Stanescu will be given. 
Each amount is given on a separate line and is an integer between 2 and 10^100-1. </p><p>
For  each  given  amount,  your  program  should  print  to  the  
standard  output what  Stanescu should enter to get maximal number
of money. The output should: </p><p>
&#8226;  consists only of integers and the '^' operator between them.  </p><p>
&#8226;  pass the check of the first module and be as much as possible for 
the second. </p><p>
&#8226;  not contain the number 1 (it is useless anyway).  </p><p>
If more  than one answers exist, output  the one whose  first number  
is minimal,  if still more exist, choose the one whose second number 
is minimal and so on. </p><p>
 
<h3>Sample</h3>
<pre>
Input :
16 
80 
49 
1025 
12341234 
12345678901234567890 
Ouput: 
2^2^2 
2^3^2 
7^2 
2^2^5 
2^2^2^5 
2^2^2^2^3^2
</pre>

 


______________________________________________________
MSE06H||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE06H/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE06H/vn/">Vietnamese</a></td> 
</tr></table>

 
<p>
Japan plans to welcome the ACM ICPC World Finals and a lot of roads 
must be built for the venue. Japan is tall island with N cities on the 
East coast and M cities on the West  coast  (M  &#8804;  1000, N  &#8804;  1000).  
K  superhighways  will  be  build. Cities  on  each 
coast are numbered 1, 2, ... from North to South. Each superhighway is 
straight line and connects city on  the East coast with city of  the 
West coast. </p><p>
The  funding  for  the construction is guaranteed by ACM. A major portion 
of the sum is determined by the number of  crossings between  superhighways. 
At most  two  superhighways  cross at one  location. Write a program  
that calculates  the number of  the crossings between 
superhighways. 
<p> 
The input file starts with T - the number of test cases. Each test case 
starts with three numbers &#8211; N, M, K. Each of the next K lines contains 
two numbers &#8211; the numbers of cities connected by  the superhighway. 
The first one  is  the number of  the city on  the 
East coast and second one is the number of the city of the West coast. 
</p> <p>
For each test case write one line on the standard output: 
</p> <p>Test case "case number": "number of crossings" </p>

<h3>Sample</h3>
<pre>
Input :
1 
3 4 4 
1 4 
2 3 
3 2 
3 1 
Ouput: 
Test case 1: 5
</pre>


 


______________________________________________________
MSE06I||||||false||||||

<p></p><table class="problems mceItemTable" width="100%"><tbody><tr class="navigation">
<td width="50%"><a href="%7B$base%7Dproblems/%7B$code%7D/en/" mce_href="/problems/MSE06I/en/">English</a><br mce_bogus="1"></td> 
<td width="50%"><a href="%7B$base%7Dproblems/%7B$code%7D/vn/" mce_href="/problems/MSE06I/vn/">Vietnamese</a><br mce_bogus="1"></td> 
</tr></tbody></table><p>

<p>
A chemical company has an unusual shortest path problem.   
There  are N  depots  (vertices) where  chemicals  can  be  stored.  
There  are M  individual  shipping methods (edges) connecting pairs 
of depots.   Each  individual shipping method has a cost.    In  
the usual problem,  the company would  need  to  find  a way  to  route  
a  single  shipment  from  the  first  depot  (0)  to  the  last  (N  -  1).
That's easy.  The problem they have seems harder.  They have to ship 
two chemicals from the first depot (0) to the last (N - 1). The chemicals
are dangerous and cannot safely be placed together.  The regulations say
the company cannot use  the same shipping method  for both chemicals. 
Further,  the company cannot place the two chemicals in same depot 
(for any length of time) without special storage handling --- available only at
the  first  and last  depots.   </p>
<p>
To  begin,  they  need  to  know  if  it's  possible  to  ship  both  
chemicals  under  these constraints.   Next,  they  need to  find  the  
least  cost  of  shipping  both chemicals  from  first  depot to  the  
last depot.  In brief,  they need  two completely separate paths  
(from  the  first depot  to  the  last) where  the overall
cost of both is minimal. 
Your  program must  simply  determine  the minimum  cost  or,  if  it's  
not  possible,  conclusively  state  that  the
shipment cannot be made. </p>

<p>The  input will  consist  of multiple  cases.   The  first  line  of  
each  input will  contain N  and M where N  is  the number of depots 
and M is the number of individual shipping methods.  You may assume 
that N is less than 20 and  that  M  is  less  than  200.    
The  next  M  lines  will  contain  three  values,  i,  j,  and  v.    
Each  line corresponds a single, unique shipping method.  The values i 
and j are the indices of two depots, and v is the cost of 
getting from i to j.  
Note that these shipping methods are directed.  If something can 
be shipped from i to j with cost 10, that says nothing about shipping 
from j to i.  Also, there may be more than one way to ship between 
any pair of depots, and that may be important here. 
</p>
<p>A line containing two zeroes signals the end of data and should not 
be processed.   </p>
</pre>
<h3>Sample</h3>
<pre>Input :
2 1 
0 1 20 
2 3 
0 1 20 
0 1 20 
1 0 10 
4 6 
0 1 22 
1 3 11 
0 2 14 
2 3 26 
0 3 43 
0 3 58 
0 0
Ouput: 
Instance #1:  Not possible 
Instance #2:  40 
Instance #3:  73 
</pre><p>
 

</p>


______________________________________________________
QUEEN||||||true||||||


<p>There is a checkmates board with <b>n</b> rows and <b>m</b> columns. Some of the cells of the board are occupied. There is a queen standing on a certain cell. It wants to move to another cell of this board. Help it do this making the least possible moves. The queen can go any number of cells in any of eight directions in a single move, but it can't pass through or stand on the occupied cells and leave the board.</p>


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. The first line of each test consists of two numbers <b>n</b> and <b>m</b> separated with a space. Then <b>n</b> lines follow each containing <b>m</b> characters describing the board. Character &#8216;.&#8217; means a free cell, character &#8216;X&#8217; &#8211; an occupied cell, character &#8216;S&#8217; &#8211; the starting cell of the queen, character &#8216;F&#8217; &#8211; the cell where the queen wants to go. It is guaranteed that there will be exactly one character &#8216;S&#8217; and one character &#8216;F&#8217; on each board.</p>


*******OutputConstraints*******

<p>For each test case print the minimum number of moves the queen has to do to reach the desired cell. Print &#8216;-1&#8217; if the queen can&#8217;t reach the cell.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
S..
...
..F
3 3
S..
XX.
F..
3 3
S..
XXX
..F

<b>Output:</b>
1
3
-1
</pre>



______________________________________________________
MPILOT||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MPILOT/en/">English</a></td> 
<td width="50%"><a href="/problems/MPILOT/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Charlie acquired airline transport company and to stay in business he needs to lower the expenses by 
any means possible. 
There are N pilots working for his company (N is even) and N/2 plane crews needs to be made. A 
plane crew consists of two pilots - a  captain and his  assistant. A captain must be older than his 
assistant. Each pilot has a contract granting him two possible salaries - one as a captain and the other as 
an assistant. A captain's salary is larger than assistant's for the same pilot. However, it is possible that an 
assistant has larger salary than his captain.  
Write a program that will compute the minimal amount of money Charlie needs to give for the pilots' 
salaries if he decides to spend some time to make the optimal (i.e. the cheapest) arrangement of pilots 
in crews. 
 
</p><p>

______________________________________________________
TTTABLE||||||true||||||


<p>A train line has two stations on it, A and B. Trains can take trips from A to B or from B to A multiple times during a day. When a train arrives at B from A (or arrives at A from B), it needs a certain amount of time before it is ready to take the return journey - this is the turnaround time. For example, if a train arrives at 12:00 and the turnaround time is 0 minutes, it can leave immediately, at 12:00.
<br><br>
A train timetable specifies departure and arrival time of all trips between A and B. The train company needs to know how many trains have to start the day at A and B in order to make the timetable work: whenever a train is supposed to leave A or B, there must actually be one there ready to go. There are passing sections on the track, so trains don't necessarily arrive in the same order that they leave. Trains may not travel on trips that do not appear on the schedule.


*******InputConstraints*******

<p>The first line of input gives the number of cases, <b>N(1<=N<=100)</b>. <b>N</b> test cases follow.

<br><br>
Each case contains a number of lines. The first line is the turnaround time, <b>T(0<=T<=60)</b>, in minutes. The next line has two numbers on it, <b>NA</b> and <b>NB</b>. <b>NA</b> is the number of trips from A to B, and <b>NB</b> is the number of trips from B to A<b>(0<=NA,NB<=100)</b>. Then there are <b>NA</b> lines giving the details of the trips from A to B.

<br><br>
Each line contains two fields, giving the HH:MM departure and arrival time for that trip. The departure time for each trip will be earlier than the arrival time. All arrivals and departures occur on the same day. The trips may appear in any order - they are not necessarily sorted by time. The hour and minute values are both two digits, zero-padded, and are on a 24-hour clock (00:00 through 23:59).

<br><br>
After these <b>NA</b> lines, there are <b>NB</b> lines giving the departure and arrival times for the trips from B to A.



*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x: " followed by the number of trains that must start at A and the number of trains that must start at B.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5
3 2
09:00 12:00
10:00 13:00
11:00 12:30
12:02 15:00
09:00 10:30
2
2 0
09:00 09:01
12:00 12:02 

<b>Output:</b>
Case #1: 2 2
Case #2: 2 0 
</pre>



______________________________________________________
BFROTATE||||||true||||||


<p>Rotate the given string starting at the given place from the end with wrapping around at the end. You are allowed to use only BrainFck!</p>

*******InputConstraints*******

<p>Given an integer of strictly 2 digits and a string (length &lt;= 99) in the same line without space between them. You may assume that the string consists of only printable characters and that the length of string is more than the given integer.</p>

*******OutputConstraints*******

<p>One string of the same length as input and which has same characters in different order as described by problem.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />04abcdefgh<br /><br /><strong>Output:</strong><br />efghabcd<br /></pre>


______________________________________________________
AE00||||||false||||||

<p>
    Byteman has a collection of N squares with side 1.
    How many different rectangles can he form using these squares?
</p>
<p>
    Two rectangles are considered different if none of them can be rotated
    and moved to obtain the second one.
    During rectangle construction, Byteman can neither deform the squares
    nor put any squares upon any other ones.
</p>
    <h2>Input</h2>
<p>
    The first and only line of the standard input contains one
    integer N (1 &#8804; N &#8804; 10000).

</p>
    <h2>Output</h2>
<p>
    The first and only line of the standard output should contain
    a single integer equal to the number of different rectangles
    that Byteman can form using his squares.
</p>
<h2>Example</h2>

<p>For the input data:</p><pre>6</pre>
<p>the correct result is:</p><pre>8</pre>

<p><img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/ae00.jpg"/></p>

<p><i>Task author: Jakub Radoszewski.</i></p>


______________________________________________________
AE1B||||||false||||||

<p>
  Byteman works as a carpenter.
  He has just received an order for s pine-wood tables.
  Although he has plenty of pine-wood boards in his workshop, he has just
  run out of screws.
  Therefore he needs to walk to the warehouse and bring back some boxes
  with screws.
  What is the minimum number of boxes that he needs to bring in order
  to have enough screws to make the tables?
</p>
    <h2>Input</h2>
<p>
    The first line of the standard input contains three integers
    n, k, and s (1 &#8804; n, k, s &#8804; 1000) separated with single
    spaces.
    They denote the number of boxes with screws in Byteman's warehouse,
    the number of screws needed to make a table and the number of tables
    to be made by Byteman, respectively.
    The second line contains n (not necessarily different)
    integers a<sub>i</sub> (1 &#8804; a<sub>i</sub> &#8804; 1000)
    separated with single spaces, such that a<sub>i</sub> is the number of screws
    in the i<sup>th</sup> box in the warehouse.
    </p>

	
    <h2>Output</h2>
    <p>
    The first and only line of the standard output should contain a single integer
    - the minimal number of boxes with screws that Byteman needs to bring
    from his warehouse in order to make s tables.
    You may assume that Byteman has enough screws in the warehouse to
    make all tables.
</p>

<h2>Example</h2>

<p>For the input data:</p><pre>5 6 3
3 9 5 7 3</pre>

<p>the correct result is:</p><pre>3</pre>

<p>
  <b>Explanation of the example.</b>
  To make three tables, each of which requires six screws, Byteman has to
  bring three boxes with screws from the warehouse.
  These can be either the ones containing 3, 7 and 9 screws,
  or the ones with 9, 5 and 7 screws.
</p>
<p><i>Task author: Jakub Lacki.</i></p>


______________________________________________________
AE2B||||||false||||||

<p>
  Bytean chess is one of the most peculiar variants of chess in the world.
  Playing each match is a major difficulty, because the game is played on an infinite chessboard.
  The basic ability learnt by young enthusiasts of Bytean chess is considering
  all possible situations on a chessboard after millions of moves.
  To perform this, they need to know whether a given chess piece can get from one given square to another one.
</p>
<p>
  The most powerful chess piece in Bytean chess is a (K, N)-knight.
  Its moves resemble the moves of a knight in traditional chess.
  Each of its moves consists of: either moving K squares vertically
  and afterwards N squares horizontally, or moving N squares vertically and afterwards
  K squares horizontally.
  The knight from traditional chess can therefore be thought of as (2, 1)-knight or
  (1, 2)-knight.

</p>
<p>
  The task is to verify, for two given squares of the chessboard, if a (K, N)-knight can get
  from the first square to the second one (the number of necessary moves is not important).
</p>
    <h2>Input</h2>
<p>
  The first line of the standard input contains one integer T
  (1 &#8804; T &#8804; 20000) denoting the number of test cases.
  Each of the following T lines contains a description of a single test case
  in the form of six integers K, N, x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>

  (0 &#8804; K, N &#8804; 10<sup>9</sup>, K + N > 0, -10<sup>9</sup> &#8804; x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub> &#8804; 10<sup>9</sup>)
  separated by single spaces.
  K and N describe the possible moves of the knight.
  The knight starts its movement in square (x<sub>1</sub>, y<sub>1</sub>). We would like to check if it can get to square (x<sub>2</sub>, y<sub>2</sub>).
  </p>
	
    <h2>Output</h2>
    <p>

  For each test case exactly one line should be written to the standard output.
  It should contain a word <tt>TAK</tt> (meaning YES) or <tt>NIE</tt> (meaning NO)
  depending on whether a (K, N)-knight starting from square (x<sub>1</sub>, y<sub>1</sub>)
  can get to square (x<sub>2</sub>, y<sub>2</sub>).
</p>

<h2>Example</h2>

<p>For the input data:</p><pre>3
2 1 0 0 3 3
1 1 1 1 1 2
1 0 2 3 4 6</pre>
<p>the correct result is:</p><pre>TAK
NIE
TAK</pre>

<p><i>Task author: Jakub Onufry Wojtaszczyk.</i></p>


______________________________________________________
AE2A||||||false||||||

<p>
Jack claims that he has telekinetic powers.
He has made a bet with Mike that he would throw a die n times and would get exactly k pips in total.
Jack's die has 6 faces with numbers from 1 to 6 written on them and is perfectly symmetric.
Mike does not believe in Jack's telekinetic powers (in general, being a tenacious rationalist,
he does not believe in telekinesis), but he is concerned that Jack could win the bet
simply by luck.
Therefore, he would like to know what is the chance (in percent) of such an unlucky event,
and asked you to write a program that would help him solve this problem.
</p>
    <h2>Input</h2>
<p>
The first line of the standard input contains a single integer t (1 &#8804; t &#8804; 20) denoting the number of
test cases.
Each of the following t lines contains a description of one test case in the form of two integers n<sub>i</sub> and k<sub>i</sub>

(1 &#8804; n<sub>i</sub>, k<sub>i</sub> &#8804; 10<sup>6</sup>) separated by a single space.
</p>
	
    <h2>Output</h2>
    <p>
To the standard output t lines should be written, containing the answers to respective test cases.
The answer to one test case is the probability (in percent) that Jack wins the bet, rounded <i>down</i>
to the nearest integer.
</p>

<h2>Example</h2>

<p>For the input data:</p><pre>1
1 6</pre>
<p>the correct result is:</p><pre>16</pre>

<p><i>Task author: Jakub Onufry Wojtaszczyk.</i></p>


______________________________________________________
AE3A||||||true||||||


<pByteman is the person in charge of a team that is looking for crude oil reservoirs. He has made two boreholes:
he found crude oil in point A and found out that there is no crude oil in point B. It is known that the oil
reservoir occupies a connected fragment of segment AB with one end at point A. Now Byteman has to check,
how far, along the segment connecting points A and B, does the oil reservoir reach. It is not that simple,
however, because in some locations one can drill faster than in other locations. Moreover, Byteman&#8217;s team is
rather small, so they can drill in at most one location at a time. Byteman&#8217;s boss would like him to predetermine
when he will be able to identify the boundary of the oil reservoir.</p>
<p>Byteman has asked you for help. He has divided the segment connecting points A and B into n+1 segments
of equal length. If we assume that point A has coordinate 0, and point B coordinate n + 1, then there are
n points with coordinates 1, 2, . . . , n between them. It is enough to find the farthest from A of these points
in which some crude oil occurs. Byteman has informed you about the amounts of time necessary for making
boreholes in these points &#8212; they are equal to t<sub>1</sub>, t<sub>2</sub>, . . . , t<sub>n</sub> respectively. You should create such a plan of
drilling, that the time necessary to identify the oil reservoir&#8217;s boundary is shortest possible, assuming the
worst-case scenario.</p>


*******InputConstraints*******

<p>The first line of the standard input contains a single positive integer n (1 &#8804; n &#8804; 2000). The second line contains
n positive integers t1, t2, . . . , tn separated by single spaces (1 &#8804; t<sub>i</sub> &#8804; 10<sup>6</sup>).</p>


*******OutputConstraints*******

<p>Your program should write a single integer to the standard output&#8212;the smallest amount of time that Byteman
has to spend (assuming the worst-case scenario) drilling in search of oil, to be sure that he will identify the
reservoir&#8217;s boundary.</p>

*******IOTestCases*******

<p>
For the input data:
<pre>
4
8 24 12 6
</pre>
</p>
<p>the correct result is:
<pre>
42
</pre>
</p>
<p><b>Explanation of the example.</b>
<p>Assume that Byteman makes the first borehole at point 1, what takes him
time 8. It can then turn out that he finds crude oil there and he will have to check, how far to the right does
the reservoir reach. He will need two more boreholes, making which requires 36 units of time in the worst case.
Therefore, in this case Byteman will spend in total 44 units of time drilling.</p>
<p>It turns out that it is better to start at point 2. If there is no crude oil there, it is sufficient to check point
1. However, in the worst case Byteman will have to make two more boreholes in points 3 and 4 and end his
work in total time equal to 42. </p></p>


______________________________________________________
AE4B||||||true||||||


<p>Byteman woke up early this morning, just after dawn. He is planning to get to the top of Bytemountain, so
the spent the night in a mountain hostel right in the middle of picturesque mountain range of Lower Bytehills.
Since Bytemountain in the highest mountain of the range, at each trail crossing there is a signpost pointing
at the trail leading towards its peak.</p>
<p>In the mountain hostel Byteman met a guide who knows Lower Bytehills like the back of his hand. The
guide informed Byteman that the signposts are being reorganized and because of that he should not rely too
much on the signposts. In particular, the very peak of Bytemountain is also a crossing and at this crossing
there is a signpost pointing to some trail &#8220;leading&#8221; to Bytemountain!</p>
<p>The guide will explain Byteman how to get to the peak. Luckily, all trail crossings are numbered from 1
to n and each crossing contains a tablet with the number of the crossing written on it. The guide&#8217;s directions
will have the following form: &#8220;Walk along the trails pointed by the signposts until you reach crossing s<sub>1</sub>, then
take a map and choose the trail connecting crossing s<sub>1</sub> with crossing c<sub>1</sub>. Afterwards keep walking along the
trails pointed by the signposts until you reach crossing s<sub>2</sub>. The take a look at the map and choose the trail
connecting s<sub>2</sub> and c<sub>2</sub>. . . Finally, when you reach s<sub>i</sub>, take the last look at the map and walk along the trail
connecting s<sub>i</sub> and c<sub>i</sub>. If you keep walking along the trails pointed by the signposts since then, you will reach
the peak of Bytemountain.&#8221;</p>
<p>Byteman would not like the description of the route to be too complicated, so he asked the guide for a route
that would not require looking at the map more than k times.</p>
<p>The guide had to take a deeper thought, because he knows that some trails are more exciting than others
and he would like to show Byteman the most interesting route.</p>
<p>The route may lead through the same trails and crossing many times (some trails are so exciting that they
may be worth visiting multiple times!)</p>
<p>Byteman ends his walk when he reaches the peak for the first time after using all instructions provided by
the guide. This means that Byteman can visit the peak of Bytemountain multiple times during the walk, but
he will end his walk only after all instructions have been used.</p>
<p>How interesting can the route provided by the guide be?</p>


*******InputConstraints*******

<p>The first line of the standard input contains two integers n and k (1 &#8804; n &#8804; 50000, 0 &#8804; k &#8804; 100) separated by
a single space. They denote the number of trail crossings and the maximum number of times Byteman would
like to look at the map. The crossings are numbered from 1 to n, the mountain hostel is located at crossing 1,
and the peak of Bytemountain is the crossing number n.</p>

<p>The following n lines contain descriptions of the respective trail crossings. Each crossing&#8217;s description
consists of a single line and is composed of integers separated by single spaces. The first one of these numbers, m<sub>i</sub> (1 &#8804; m<sub>i</sub> &#8804; n-1), denotes the number of trails going out of the crossing. After that there are m<sub>i</sub> pairs of numbers a<sub>i,j</sub> , b<sub>i,j</sub> (1 &#8804; a<sub>i,j</sub> &#8804; n, 1 &#8804; b<sub>i,j</sub> &#8804; 10000), meaning that from the ith crossing there is a trail leading to
crossing a<sub>i,j</sub> with beauty equal to b<sub>i,j</sub> . The first pair of numbers denotes the trail that leads to Bytemountain
according to the signpost at the crossing. Each trail is bidirectional and connects two different crossings. Each
two crossings can be connected by at most one trail. The total number of all trails does not exceed 100000.</p>

<p>Each trail connecting crossings i and j will appear in the input twice: first time in the list of trails going
out of the i<sup>th</sup> crossing and second time in the list of trails going out of the j<sup>th</sup> crossing. In both cases the
beauty of the trail will be the same.</p>

*******OutputConstraints*******

<p>The first and only line of the standard output should contain a single integer denoting the maximum possible
sum of beauties of consecutive trails on the route from the mountain hostel to the peak of Bytemountain that
satisfies Byteman&#8217;s requirements. You can assume that there exists at least one such route.</p>

*******IOTestCases*******

<p>For the input data:</p>
<pre>
5 2
2 3 4 2 2
3 1 2 5 4 4 3
2 1 4 4 3
3 2 3 5 5 3 3
2 2 4 4 5
</pre>
<p>the correct result is:</p>
<pre>14</pre>

<img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/rys.jpg">


<p>Explanation of the example. In the above figure the edges represent trails connecting respective crossings,
the numbers next to the edges &#8212; the beauties of the trails, and the arrows denote the trails pointed by the
signposts at respective crossings.</p>
<p>The guide will ask Byteman to look at the map twice, at crossings number 3 and 2. This way Byteman&#8217;s
walk will lead along the route 1 &#8211; 3 &#8211; 4 &#8211; 2 &#8211; 5. The total beauty of the trails on this route is 14.</p>


______________________________________________________
AE4A||||||true||||||


<p>Little Johnny is playing with his small magical stamp, trying to draw a bunny on a piece of paper that is a
square k by k divided into unit squares with side 1. Johnny&#8217;s stamp is a square with side 3 and consists of
smaller squares with side 1. Exactly two of these squares are protuberant. Moreover, both protuberant squares
are in the same row or in the same column. If Johnny wants to draw pictures using this stamp, he presses it
to the piece of paper in such a way that its protuberant squares exactly match some squares of the piece of
paper. If some protuberant square touches the piece of paper, the touched square on the piece of paper changes
its colour &#8212; from black to white or from white to black. The small stamp may lay partially outside the piece
of paper, but the protuberant squares always have to lay inside. The stamp can be shifted in any way, but it
cannot be rotated.</p><p>
In the beginning the piece of paper is whole white. The bunny consists of some number of squares that
are black (all the remaining ones have to be white). Johnny tried to draw the bunny with his small stamp for
quite a long time, but he did not succeed (this does not necessarily mean that the bunny cannot be drawn,
but only that it is very difficult to draw pictures on such a large piece of paper using such a small stamp!). So
he asked his older brother, big John, for help.</p><p>
Big John can help little Johnny by giving him his big magical stamp. The big stamp has size s by s and
has an arbitrary number of protuberant squares (these squares do not necessarily need to be located in the
same row or column). This stamp works just like the small stamp, but enforces one additional constraint &#8212; it
can only be pressed at the piece of paper if it lies totally inside the piece of paper.</p><p>
Before big John gives little Johnny his big stamp, he would like to make sure that the stamps used together
are sufficient to draw the bunny. He asked you for help in determining that.</p>

*******InputConstraints*******

<p>The first line of the standard input contains one integer t (1 &#8804; t &#8804; 10) denoting the number of test cases.</p><p>
A description of a single test case starts with a line with two integers s and k (1 &#8804; s &#8804; k &#8804; 1000, 1 &#8804; s &#8804; 200)
separated by a single space. They denote the size of big John&#8217;s stamp and the size of the piece of paper.</p><p>
The following three lines contain a description of the little Johnny&#8217;s stamp. Each of these lines contains three
characters 0 or 1. Such a description shows how does a white piece of paper look like after pressing the small
stamp: 0 represents a white square, and 1 &#8212; a black square. Exactly two characters in these three lines are
ones and are both located either in the same row or in the same column. Please note that such description
does not illustrate the design of the stamp itself &#8212; the stamp is symmetric to the figure drawn by it on the
piece of paper.</p><p>
The following s lines contain a description of the big John&#8217;s stamp in a similar format; this description
may, however, contain an arbitrary number of ones.
The following k lines describe the bunny, in the same format as the one used in the descriptions of stamps.
A one represents a black square, whereas a zero &#8212; a white square.</p>


*******OutputConstraints*******

<p>For each test case write out to the standard output a single line with a word TAK (&#8217;yes&#8217; in Polish) or NIE (&#8217;no&#8217;
in Polish), depending on whether the bunny from the test case can be drawn using the stamps from the test
case (together).</p>


*******IOTestCases*******

<p>For the input data:</p>
<pre>
2
3 8
010
000
010
000
010
011
01100000
00100000
00010000
00001100
00011110
10111100
01111100
01111110
5 10
001
001
000
00000
10100
00001
00001
00100
0011110000
0000111000
0010011100
0111001110
1110000000
1101001000
1000001100
0110110110
0001001000
0000110000
</pre>
<p>the correct result is:</p>
<pre>
NIE
TAK
</pre>
<p>Remark: In the test data, the pictures that little Johnny is trying to draw do not need to resemble a &#8216;real&#8217;
bunny.</p>


______________________________________________________
AE5B1||||||true||||||


<p>&#8220;Segment is the shortest path connecting two points&#8221; &#8212; this motto was the main motivation for road designers
in the Byteantean Empire. For this reason all roads constructed in the Empire were straight and led across
the whole country. At each crossing of two roads Byteanteans planted a town. To avoid misunderstandings,
Byteanteans never constructed more than two roads that would intersect at a single point.</p><p>
The Emperor of Byteantis would now like to divide his country into two provinces, as equal in the sense
of the number of towns as possible. One of the roads of the Empire will become the borderline between the
provinces. The towns that are located strictly on the borderline will not be under authority of any of the
provinces, but only of the Emperor himself. He, therefore, would like to compute, for each road, the absolute
value of the difference between the number of towns located on one side of the road and on the other side of
the road.</p><p>
Byteman, the court cartographer, spent many days trying to fulfill the Emperor&#8217;s order. Your task is to
write a program that will help perform his work.</p>

*******InputConstraints*******

<p>The first line of the standard input contains an integer n (1 &#8804; n &#8804; 1 000) denoting the number of roads in the Empire. Each of the following n lines contains a description of a single road &#8212; four of integers x1, y1, x2, y2 (&#8722;1 000 &#8804; x1, y1, x2, y2 &#8804; 1 000, points (x1, y1) and (x2, y2) do not coincide) separated by single spaces. Each such quadruple represents a single road that is a straight line passing through points (x1, y1) and (x2, y2). No
two roads coincide. No three roads intersect at a single point. We assume that the Empire is so large that all
intersections of lines representing roads are located within its boundary.</p>

*******OutputConstraints*******

<p>Your program should write out n lines to the standard output &#8212; the answers for all roads from the input (in
the same order as in the input). The answer for a road is the absolute value of the difference of numbers of
towns at both sides of the road.</p>

*******IOTestCases*******

<p>For the input data:</p>
<pre>
4
1 -1 1 10
0 0 1 0
2 0 2 1
4 4 -1 -1
</pre>
<p>the correct result is:</p>
<pre>
1
2
3
2
</pre>
<img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/bajrys.jpg">

<p>There are five towns in the example, with coordinates (0, 0), (1, 0), (1, 1), (2, 0), and (2, 2).</p>


______________________________________________________
AE5A1||||||true||||||


<p>In the &#8221;circular game&#8221; the board consists of m fields arranged on a circle and numbered from 1 to m. On
the board there are b white and c black pieces, at most one on each field. Two players are playing the game,
the white player and the black player. Starting from the white player, the players perform their moves on the
board alternately. A move consists of moving a piece of the player&#8217;s colour any number of free fields forward
or backward. For instance, for the board depicted below, the white player can move the piece from field 3 to
field 4 or the piece from field 8 to any of the fields 7, 9 and 1.</p>

<img src = "http://vn.spoj.pl/SPOJVN/content/grarys.jpg">

<p>If a player can perform no moves in his turn, he loses. Knowing that both players play optimally, check
who wins the game. It can happen that none of the players wins (the game never ends).</p>

*******InputConstraints*******

<p>The first line of the standard input contains one integer t representing the number of boards to be considered.</p>
<p>The following lines contain descriptions of respective boards, each of which consists of three lines. In the first line there are three integers m, b and c (1 &#8804; m &#8804; 10<sup>9</sup>, 1 &#8804; b, c) separated by single spaces and denoting the
length of the board, the number of white pieces and the number of black pieces. In the second line there is an
increasing sequence of b integers (in the range 1, . . . ,m) representing the positions of white pieces. In the third line there is an increasing sequence of c integers (in the range 1, . . . ,m) representing the positions of black pieces. The total number of pieces in all boards does not exceed 10<sup>6</sup>.</p>

*******OutputConstraints*******

<p>Exactly t lines with answers for consecutive boards should be written to the standard output. The answer is
always a single character: B, C, or R, depending on whether the white player wins (B), the black player wins
(C) or the game never ends (R).</p>

*******IOTestCases*******

<p>For the input data:</p>
<pre>
3
9 2 3
3 8
2 5 6
6 2 2
5 6
2 4
7 1 1
3
4
</pre>
<p>the correct result is:</p>
<pre>
C
B
R
</pre>


______________________________________________________
AE5B2||||||true||||||


<p>You are given a sequence of positive integers a<sub>1</sub>, a<sub>2</sub>, . . . , a<sub>n</sub>. We would like to order the numbers from 1 to
n in such a way, that the i-th number is not greater than a<sub>i</sub> (for each i). In other words, we are looking for
a permutation p of numbers from 1 to n, which satisfies: p<sub>i</sub> &#8804; a<sub>i</sub> for each 1 &#8804; i &#8804; n. There is one more problem,
the sequence ai may change over time. . .</p>

*******InputConstraints*******

<p>The first line of standard input contains one integer n (1 &#8804; n &#8804; 200 000), the number of elements of the a<sub>i</sub>
sequence. In the second line, there is a sequence of n positive integers a<sub>i</sub> (1 &#8804; a<sub>i</sub> &#8804; n), separated by single
spaces. The third line contains one integer m (0 &#8804; m &#8804; 500 000), representing the number of modifications
made to the ai sequence. The following m lines describe these modifications. Each description consists of two
integers j<sub>i</sub> and w<sub>i</sub> (1 &#8804; j<sub>i</sub>, w<sub>i</sub> &#8804; n for 1 &#8804; i &#8804; m), separated by single spaces and meaning that j<sub>i</sub>-th element
of the sequence becomes w<sub>i</sub>. The operations take place in turns, so the i-th modification is applied to the
sequence altered by (i &#8722; 1) previous modifications.</p>

*******OutputConstraints*******

<p>Your program should output exactly m + 1 lines to the standard output. Each of those lines should contain
one word TAK (meaning YES) or NIE (meaning NO). The word in the first line should tell if there exists
a permutation p, which satisfies p<sub>i</sub> &#8804; a<sub>i</sub> for each i (for the original a<sub>i</sub> sequence), whereas the words from
following lines answer the question whether there exist any (potentially different) permutations that satisfy
the given conditions for the ai sequence after each modification.</p>

*******IOTestCases*******

<p>For the input data:</p>
<pre>
5
3 4 3 2 5
2
5 4
1 5
</pre>
<p>the correct result is:</p>
<pre>
TAK
NIE
TAK
</pre>
<p>Explanation of the example. For the original ai sequence, the condition is satisfied by permutation
2, 4, 3, 1, 5. After the first modification, the sequence becomes 3, 4, 3, 2, 4 and for this sequence no valid
permutation exists. After the second modification, the sequence is 5, 4, 3, 2, 4. An example of a permutation
p satisfying all constraints for this sequence is 5, 1, 3, 2, 4.</p>


______________________________________________________
AE5A2||||||true||||||


<p>A template of a word v is such a word s that all occurrences of s within v cover the whole word v (i.e. each letter of the word v appears within some fragment of consecutive letters of v equal to s). By quasi-template
of a word v we mean such a word s that s is a substring (i.e. a fragment of consecutive letters) of v and s is
a template of some superstring of v. The figure below shows why the word aabaa is a quasi-template of the
word aaaabaabaaaba:</p>

<img src = "http://vn.spoj.pl/SPOJVN/content/szarys.jpg">

<p>For a given word v we would like to compute the number of its quasi-templates and the shortest one of them.</p>


*******InputConstraints*******

<p>The only line of the standard input contains a non-empty word v that is not longer than 200000 letters. It consists of small letters of English alphabet.</p>

*******OutputConstraints*******

<p>The first line of the standard output should contain the number of quasi-templates of word v. The second line
should contain the shortest word being a quasi-template of word v. If there is more than one such shortest
word, output the lexicographically smallest from the shortest quasi-templates.</p>

*******IOTestCases*******

<p>For the input data:</p>
<pre>
aaaabaabaaaba
</pre>
<p>the correct result is:</p>
<pre>
10
aabaa
</pre>
<p>The word from the sample input has 10 quasi-templates: aaaabaabaaab, aaaabaabaaaba, aaabaaba, aaabaabaa,
aaabaabaaa, aaabaabaaaba, aabaa, aabaabaa, aabaabaaa, and abaabaaa.</p>


______________________________________________________
MFISH||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MFISH/en/">English</a></td>
<td width="50%"><a href="/problems/MFISH/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>&nbsp;</p>
<p>During his childhood, Mirko liked to play &ldquo;Sea battle&rdquo; a lot, but once he got bored of it and invented a  new game imaginatively called &ldquo;Ships catch fish on a river&rdquo;.</p>
<p>The game board consists of N fields lined up in a row and numbered 1 to N in ascending order from  left to right. These fields represent a river on which M ships are to be placed. For each field  the  amount of fish swimming in that part of the river is known. Every ship has a specific length, i.e. it  occupies the specific number of consecutive fields. A ship must somewhere drop an anchor but is  allowed to do that in a certain field only. That means that one of the fields a ship will occupy is  predetermined.</p>
<p>There can be only one ship or a part of only one ship on a single field of the board. We define the total  amount of fish caught as the sum of amounts of fish swimming in all fields occupied by ships.  Goal of the game is to place all ships on the river in a way that the total amount of fish caught is  maximal.</p>
<p>While playing an instance of this game, Mirko is in doubt whether the way he placed ships is optimal.  Therefore he asked you to help him calculate the maximum possible amount of fish caught.</p>
<p>&nbsp;</p>

______________________________________________________
EVERLAST||||||true||||||


<p>In order to help terraform Mars, astronauts have brought (among other things) N (0&lt;=N&lt;5) young, healthy pineapple plants.</p>
<p>This particular type of pineapple reproduces asexually in the following way:</p>
<ol>
<li>A single pineapple plant produces K (0&lt;=K&lt;15) new pineapple in one growing season. </li>
<li>At the end of the growing season, the new pineapples are adults, and the old ones are dead. </li>
<li>Increased levels of radiation have a P (0&lt;=P&lt;=1) chance of sterilizing any new pineapple that develops on Mars.  This probability is independent for each pineapple. </li>
</ol>
<p>What is the probability that the pineapple population will never die out?</p>

*******InputConstraints*******

<p>The first line is the number of test cases (no more than 10^5). Each of the following lines describes a test case. The integers N and K and the decimal number P are separated by single spaces.</p>

*******OutputConstraints*******

<p>There will be one line for each test case.  Each line will have the probability of eventual survival in percent, to two decimals, followed by the percent sign.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
1 3 0.6666666666666666
1 3 0.65
1 1 0
1 0 1
3 4 0.7101634622811129

<strong>Output:</strong>
0.00%
13.83%
100.00%
0.00%
70.94%
</pre>


______________________________________________________
KRECT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/KRECT/en/">English</a></td> 
<td width="50%"><a href="/problems/KRECT/vn/">Vietnamese</a></td> 
</tr></table>


<p>
Given a M*N square board. Each square contains a letter of the English alphabet ('A' .. 'Z').
</p>

<p>
A K-rectangle of the board is a rectangle whose sides are parallel to the sides of the board, and contains exactly K different types of letter.
</p>

<p>
For example, with this 4*3 board:
</p>

<pre>
CED
CEB
CBC
DDA
</pre>

<p>The rectangle [(1,1), (2,2)] is a 2-rectangle of the board because it contains 2 different letters: C and E.
</p>

<p>
Given M, N, K and the M*N board. Determine how many K-rectangles there are in the board.
</p>


*******InputConstraints*******

<p>The first line contains 3 integers M, N and K. (1 &#8804; M, N &#8804; 100, 1 &#8804; K &#8804; 26)</p>
<p>The following M lines, each contains N letters of the English alphabet ('A' .. 'Z')</p>


*******OutputConstraints*******

<p>Write one integer - the number of K-rectangles in the given board.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 3 3
CED
CEB
CBC
DDA


<b>Output:</b>
12

</pre>




______________________________________________________
EBOXES||||||true||||||


<p><b>N</b> large empty boxes (assume they are of type:1) are initially placed on a table. An unknown number of 
boxes (type:1) are selected and in each of
them <b>K</b> smaller boxes (type:2) are placed.
Again an unknown number of type:2 boxes are selected and <b>K</b> boxes of type:3 are placed inside. This process is repeated
<b>T</b> times. Now a box is assumed to be empty when it has no smaller boxes inside it. Finally after all the 
processes are complete let there be <b>F</b> empty boxes in total.

<h3>LIMITS</h3>
1< N,K,T,F <1000000


*******InputConstraints*******

<p>First line of the input file contains the number of test cases. Then each line contains 4 integers N,K,T,F as described
above.


*******OutputConstraints*******

<p>Each line should contain the total number of boxes on the table.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
11 8 2 102

<b>Output:</b>
115
</pre>



______________________________________________________
QMAX3VN||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/QMAX3VN/en/">English</a></td> 
<td width="50%"><a href="/problems/QMAX3VN/vn/">Vietnamese</a></td> 
</tr></table>

<p> Following the journey to explore the real power of special data stuctures, two adventurers <b><i>pirate</i></b> and <b><i>duyhung123abc</i></b> continued to find new challenges with new more and more complicated problems. But what they earned was unremarkable. Being tired and stucked, they decided to review the problems they had solved to see what they had had so far. Suddenly, a mysterious light came to their mind: <i>"why not combine some of them into one !"</i>. And here, <b>QMAX3VN</b> was born, as natural as the way fire had come to humankind. 
</p>
<p> It is said that in a morning at a military camp. All soldiers were gathering in a line to prepare for morning excercises. But the problem was they did not get up simultaneously. The line was initially empty. After sometime, a soldier got up and ran hurrily to join the line. Also, each of them liked to stand near their friends so they would elbow themselves to some position of the current line. What a messy and unacceptable scene for a military camp! The soldiers knew what they had done and were ready to be punished. The strict commander decided to give them a lesson. Everytime he gave an <b>order(x,y)</b>, all soldiers in the line had to say loudly the height of <b>the highest man</b> among those were standing from position x to position y. Orders were made <b>continuously</b> since the first soldier entered the line. Punishment was waiting for whom would carried out the order incorrectly. The yard was full of worry from young soldiers. They really needed help ! </p>


*******InputConstraints*******

<p>The input contains several lines:
<ul>
<li> Line 1 : An integer n (1 &#8804; n &#8804; 100000): The number of events occuring in that morning.</li> 
<li> Line 2 to line n+1: Each line is one of the following two events: 
<ul> 
<li><b>A x y</b> : A soldier with height x had just entered the line and elbowed himself into the position between position y-1 and position y of the line (-10<sup>9</sup> &#8804; x &#8804; 10<sup>9</sup>; 1 &#8804; y &#8804; k+1 , k denotes the number of soldiers in the line right before this soldier came).</li>
<li><b>Q x y</b> : An order of the commander. Find the height of the highest man among those were standing from position x to position y of the line (1 &#8804; x &#8804; y &#8804; k , k denotes the number of soldiers was currently in the line). </li>
</ul>
</ul>
</p>


*******OutputConstraints*******

<p>The output contains several lines:
<ul>
<li>
For each order of the commander, write in one line the number all soldiers had to say loudly.
</li>
</ul>
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
10
A 1 1
A 2 2
Q 1 2
A 3 1
A 4 3
Q 2 4
A 5 2
Q 2 3
A 6 3
Q 1 4

<b>Output:</b>
2
4
5
6
</pre>




______________________________________________________
TWINSNOW||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TWINSNOW/en/">English</a></td>
<td width="50%"><a href="/problems/TWINSNOW/vn/">Ti&#7871;ng Vi&#7879;t</a></td> 
</tr></table>

<p>
You may have heard that no two snowflakes are alike. Your task is to write a program to determine whether this is really true. Your program will read information about a collection of snowflakes, and search for a pair that may be identical. Each snowflake has six arms. For each snowflake, your program will be provided with a measurement of the length of each of the six arms. Any pair of snowflakes which have the same lengths of corresponding arms should be agged by your program as possibly identical.
</p>

<center><img src="http://www.spoj.plhttp://www.spoj.pl/content/anhdq:twinsnow_snowflake.jpg" /></center>


______________________________________________________
TABLE5X5||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TABLE5X5/en/">English</a></td>
<td width="50%"><a href="/problems/TABLE5X5/vn/">Ti&#7871;ng Vi&#7879;t</a></td> 
</tr></table>

<p>Having a 5x5-table, we make a right-table by filling letters from 'A'..'Y' into the table satisfying:
<ul>
<li>Each letter is used exactly one time.</li>
<li>The letters is ascending on every row.</li>
<li>The letters is ascending on every column.</li>
</ul>
<p>Each right-table is described by a 25-length string, see the example below for detail:
<p>The right-table:
<table>
<tr><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td></tr>
<tr><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td></tr>
<tr><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td></tr>
<tr><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td></tr>
<tr><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td></tr>
</table>
<p>is described by the string "ABCDEFGHIJKLMNOPQRSTUVWXY".
<p>All descriptions are sorted ascending (following the dictionary order) and numbered from 1.
<p><h3>Task</h3>
<ul>
<li>Give an order, find the right description.</li>
<li>Give a description, find the right order.</li>
</ul>

*******InputConstraints*******

<p>
<ul>
<li>The first line contains a number (an order).</li>
<li>The second line contains a description.</li>
</ul>

*******OutputConstraints*******

<p>
<ul>
<li>The first line contains the 25-length string desribing the order given.</li>
<li>The second line contains the order of the given description.</li>
</ul>

*******IOTestCases*******


<pre>
<b>Input:</b>
1
ABCDEFGHIJKLMNOPQRSTUVWXY

<b>Output:</b>
ABCDEFGHIJKLMNOPQRSTUVWXY
1
</pre>





______________________________________________________
CARDSHUF||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/CARDSHUF/en/">English</a></td>
<td width="50%"><a href="/problems/CARDSHUF/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>"Ph&uacute; &ocirc;ng" has a card deck consits of n cards. He writes on each card a number from 1 to n from the top to the bottom of the deck. <br /> Then he does shuffle the card deck several times, each time is described by <strong>S(i, j)</strong> meaning: pull out the i<sup>th</sup> card then put it on the j<sup>th</sup> of the remaining cards (1 &le; i, j &le; n). If j = n, the i<sup>th</sup> card will be the bottom card of the new one. <br /> For example (<strong>n=6</strong>): <br /> <img src="http://www.spoj.pl../../../content/anhdq:cardshuf_sample.jpg" alt="" /> <br /> Afer x times of shuffing, "Ph&uacute; &ocirc;ng" gives "B&#7901;m" the card deck and chanllenges him to make it into the original order. Please help "B&#7901;m"!</p>

*******InputConstraints*******

<p>- The first line contains two integer n, x. <br /> - Next x line(s), the p<sup>th</sup> line contains two integer i<sub>p</sub>, j<sub>p</sub> describing the p<sup>th</sup> time of shuffing (<strong>S(i<sub>p</sub>, j<sub>p</sub>)</strong>).</p>

*******OutputConstraints*******

<p>- A single integer means the minimal number of times of shuffing the card deck to help "B&#7901;m".</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />6 4<br />2 3<br />1 2<br />4 5<br />1 6<br /><br /><strong>Output:</strong><br />2<br /></pre>

______________________________________________________
DAGCNT||||||true||||||


<p><em>"In graph theory, an arborescence is a directed graph in which, for a vertex v called the root and any other vertex u, there is exactly one directed path from v to u. In other words, an arborescence is a directed, rooted tree in which all edges point away from the root. Every arborescence is a directed acyclic graph."</em></p>
<p>-- from Wikipedia, the free encyclopedia</p>
<p>You are given a directed graph with <em>N</em> vertices, and your task is to count the number of different arborescences of size <em>N</em> that can be found in the given graph.</p>
<p>Two arborescences are considered different when they consist of different edges.</p>

*******InputConstraints*******

<p>Input consists of multiple test cases.</p>
<p>For each test case, the first line contains one integer <em>N</em> described as above.</p>
<p>N lines follows, each consists of <em>N</em> characters, either '0' or '1', representing the adjacency matrix of the graph.</p>
<p>The directed graph contains edge (<em>i</em>,<em>j</em>) if and only if the <em>j</em>th character of the <em>i</em>th line of the matrix is '1'.</p>
<p>The graph consists of no more than 8 vertices.</p>
<p>End of input is indicated by a line consisting of a single 0.</p>

*******OutputConstraints*******

<p>For each test case, output one line consisting of one single integer, the number of arborescences.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
00
00
2
01
10
0

<strong>Output:</strong>
0
2
</pre>


______________________________________________________
FENCE1||||||true||||||


<p>There is a wall in your backyard. It is so long that you can&rsquo;t see its endpoints. You want to build a fence of length <em>L</em> such that the area enclosed between the wall and the fence is maximized. The fence can be of arbitrary shape, but only its two endpoints may touch the wall.</p>

*******InputConstraints*******

<p>The input consists of several test cases.</p>
<p>For every test case, there is only one integer <em>L</em> (1&lt;=<em>L</em>&lt;=100), indicating the length of the fence.</p>
<p>The input ends with <em>L</em>=0.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing the largest area. Your answer should be rounded to 2 digits after the decimal point.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
0

<strong>Output:</strong>
0.16</pre>


______________________________________________________
AREA1||||||true||||||


<p>You are given a triangle and a circle in a plane. You can arbitrarily rotate or move them. What's the maximum possible area of their overlapping region?</p>

*******InputConstraints*******

<p>Input consists of one or more lines. For each line, there are four integers describing one test case: the lengths of three sides of a triangle <em>a</em>, <em>b</em>, <em>c</em>; and the radius of a circle <em>r</em>; where 1&lt;= <em>a</em> &lt;= <em>b</em> &lt;= <em>c</em> &lt;= 100, 1&lt;= <em>r</em> &lt;= 100, <em>a+b>c </em>.</p>
<p>End of input is indicated by a line consisting four zeros.</p>

*******OutputConstraints*******

<p>For each test case, output a single line showing the largest overlapping area of the circle and the triangle. We accept solutions with absolute error less than 10<sup>-2</sup>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 4 5 1
5 5 8 4
0 0 0 0

<strong>Output:</strong>
3.14
12.00
</pre>

<b>Judge is modified on Feb 23,2010. Now you can click on "Wrong Answer" for further information.</b>


______________________________________________________
REPAIR1||||||true||||||


<p>Once upon a time, there was a famous university called Famous University. As thousands of students studied and lived in FU, a gigantic residential building was built, which is called 'B37'. All students lived in B37 happily.</p>
<p>After decades, FU is still as famous as it had been in the past; however, the students living in it are now unhappy, because B37 is too old. Although the door of the building looks fine, it can be easily broken when being opened by some careless student too forcefully.</p>
<p>So, Blue Mary, the accommodation officer of B37, is facing an extremely serious problem.</p>
<p>With some mysterious methods, Blue Mary has predicted that exactly <em>N</em> students will enter or exit B37 during the next term. Unfortunately she doesn't know who the careless ones are, so she assumes that every student opening the door has a probability of <em>P</em> percent to be a careless one. When the door is broken by some careless guy, Blue Mary may repair it immediately or after some time, with a cost of <em>A</em> yuan. Unfortunately when a student goes through the door and finds it already broken and not repaired, she will report it to the headmaster, and Blue Mary will be subject to a fine of <em>B</em> yuan. The door is in good condition before the term begins, and will be repaired by the university after the term ends, so Blue Mary can leave the door unrepaired at the end of the term.</p>
<p>Being good at mathematics, Blue Mary has made a strategy, to decide when to and when not to repair the door, in order to minimize her expense.</p>
<p>Please write a program to calculate the expectation of her expense.</p>

*******InputConstraints*******

<p>The input consists of multiple test cases, the number of them is about 200000.</p>
<p>For each test case, there is one line containing four non-negative integers <em>N</em>, <em>P</em>, <em>A</em>, <em>B</em> described as above, with 0&lt;=<em>N</em>&lt;=100000, 0&lt;=<em>P</em>&lt;=100, 0&lt;=<em>A</em>&lt;=100, 0&lt;=<em>B</em>&lt;=100.</p>
<p>End of input is indicated by a line consisting of four zeros.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing the expectation of Blue Mary's minimal expense. We accept solutions with absolute error less than 10<sup>-4</sup>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
10 100 0 1
10 100 1 0
2 50 2 1
0 0 0 0

<strong>Output:</strong>
0.0000
0.0000
0.5000
</pre>

______________________________________________________
EXPR3||||||true||||||


<p>Count the number of distinct expressions involving <em>n</em> different operands <strong>a</strong>, <strong>b</strong>, <strong>c</strong>, etc. Only operators +, -, *, / and parentheses are permitted.</p>
<p>Two expression are distinct if for some valid input values (i.e. You won't divide some number by zero) <strong>a</strong>, <strong>b</strong>, <strong>c</strong>, ... , the two expressions leads to different results. For example, a/b/c and a/(b*c) are the same expressions, but a/b+c and a/(b+c) are not.</p>

*******InputConstraints*******

<p>Multiply test cases. For each test case:</p>
<p>A single line - <em>n</em>.(1&lt;= <em>n</em> &lt;=50).</p>
<p>Input terminates by a single zero.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The number of different expressions, modulo 499999999999993.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
0

<strong>Output:</strong>
68
</pre>


______________________________________________________
FACTOR1||||||true||||||


<p>Factorize <em>x<sup>n</sup>-1</em> into several irreducible polynomials over the integers.</p>

*******InputConstraints*******

<p>Multiply test cases. For each test case:</p>
<p>A single line - <em>n</em>.(2&lt;= <em>n</em> &lt;= 1200).</p>
<p>Input terminates by a single zero.</p>

*******OutputConstraints*******

<p>For each test case, output the factorization of the given polynomial.</p>
<p>There are multiple ways to express the factorization of a polynomial. To make it unique, we sort the irreducible polynomials according to the following rules:</p>
<p>Lower order polynomials are always lexicographically smaller than higher order polynomials. Same order polynomials should be sorted by their coefficients. We compare the coefficients from high degree terms to low degree terms, including the omitted terms, which the coefficients are regard as 0. Coefficients are being compared first by absolute value then by sign. Smaller absolute values are lexicographically smaller. For the same absolute value, negative coefficients are lexicographically smaller than positive coefficients.</p>
<p>See example for more output format details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
12
0

<strong>Output:</strong>
(x-1)(x+1)(x^2+1)(x^2-x+1)(x^2+x+1)(x^4-x^2+1)
</pre>

______________________________________________________
GEM||||||true||||||


<p>You are given a board with 8*8 squares. In each square, there can be either a colored gem or no gem at all. Gems with different colors are represented by different integers. It is guaranteed that there are no more than two consecutive gems with the same color either in a row or in a column.</p>
<pre>........
........
........
........
........
..43366.
..121556
44212335
</pre>
<p>For two neighboring (up, down, left or right, we don't consider diagonal neighbors) squares, you can exchange the gems.</p>
<pre>........
........
........
........
........
..43366.
..111556
44222335
</pre>
<p>You can also exchange a gem with a space. After that, if there are more than two consecutive gems with the same color in a row or in a column after exchange, these gems will be taken away simultaneously. Note that a gem could be counted both in its row and in its column; refer to the sample test cases for details.</p>
<pre>........
........
........
........
........
..43366.
.....556
44...335
</pre>
<p>If there is no gem under a gem, the gem will fall to the square below.</p>
<pre>........
........
........
........
........
.....66.
.....556
44433335
</pre>
<p>After all the squares falling down to the floor or another gem square, repeat the procedure until there's no gem can be taken away: if there are more than two gems with the same color in a row or in a column, these gems will be taken away simultaneously. Then some gems will fall to the squares below, if there are no gems under those gems.</p>
<pre>........
........
........
........
........
.....66.
.....556
.......5

........
........
........
........
........
........
.....666
.....555

........
........
........
........
........
........
........
........
</pre>
<p>Given a board with 8*8 squares. This board is stable and you can't take away any gems in the original board. Your task is to determine whether all gems can be taken away by a single exchange or not.</p>

*******InputConstraints*******

<p>The input consists of several test cases. Each test case will be eight lines, and each line contains eight characters. If in a square there is no gem, &lsquo;.&rsquo; is used to identify it, otherwise an integer <em>k</em> is used to identify the gem's color, 1&lt;= <em>k</em> &lt;=9.</p>
<p>There is a blank line between two consecutive test cases.</p>
<p>End of input is indicated by a line consisting of 0.</p>

*******OutputConstraints*******

<p>For each test case, output a single line. If all gems can be taken away by a single exchange, output <strong>Yes</strong>; otherwise output <strong>No</strong>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
........
........
........
........
........
..43366.
..121556
44212335

........
........
........
.2......
.2.22...
.1.11...
.2.22...
.2.22...

12121212
21212121
12121212
21212121
12121212
21212121
12121212
21212121

........
........
........
........
........
...96...
...96...
.996966.

0

<strong>Output:</strong>
Yes
Yes
No
Yes
</pre>


______________________________________________________
HIGHWAY1||||||true||||||


<p>As we all know, every day, there are hundreds of trucks passing through the highway. As some of the trucks might carry several tons of goods, the highway will be damaged unless it is frequently repaired. The administration of highway is worried about this, so it invented repairing cars to ensure that the cars can pass through the highway.</p>
<p>The highway has an initial durability. If a truck with x tons&rsquo; goods pass the highway, its durability will be decreased by x. Once the highway&rsquo;s durability is less or equal to zero, it will be broken and can never be repaired. The trucks can&rsquo;t pass through the broken ones.</p>
<p>There are two kinds of repairing cars: T1 can increase the highway&rsquo;s durability by r, T2 can increase the highway&rsquo;s durability to p, if the highway&rsquo;s durability is less than p. Although the repairing cars can pass through the broken parts, the broken parts can&rsquo;t be repaired.</p>

*******InputConstraints*******

<p>The input consists of several test cases.</p>
<p>For every test case, there are three integers N (1&lt;=N&lt;=100000), M (1&lt;=M&lt;=100000), I (1&lt;=I&lt;=1000) in the first line, indicating the highway&rsquo;s length, the numbers of cars and the initial durability of the highway.</p>
<p>Each of the next M lines described the information of cars in the following format:<br />1 s t d&nbsp;-- There is a truck with d tons&rsquo; goods wanted to pass the interval [s, t]. You should check whether the truck can pass it. Notice that if the truck can't pass the whole interval, it will give up the whole passing; otherwise it can pass the highway freely, even if the highway will be broken after the truck&rsquo;s passing.<br />2 s t r&nbsp;-- A T1 car will pass the interval [s, t] and increase its durability by r.<br />3 s t p&nbsp;-- A T2 car will pass the interval [s, t] and increase its durability to p.</p>
<p>You can assume that 1&lt;=s&lt;=t&lt;=N, 1&lt;=d, p, r&lt;=1000</p>
<p>The input ends with N=M=I=0.</p>

*******OutputConstraints*******

<p>For each case, you should return how many trucks can successfully pass the interval.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5 5 5
1 1 3 3
2 2 3 10
1 1 3 3
1 1 3 1
1 2 3 1
5 3 10
1 1 2 5
1 2 3 5
1 1 3 5
0 0 0

<strong>Output:</strong>
3
2
</pre>

______________________________________________________
INTEGER1||||||true||||||


<p>For a given positive integer <em>y</em>(<em>y</em> &gt; 1), if we can find a largest integer k and a smallest positive integer <em>x</em>, such that <em>x^k=y</em>, then the power of <em>y</em> is regarded as <em>k</em>.</p>
<p>Calculate the sum of the power of the integers from a to b. (2&lt;= <em>a</em> &lt;= <em>b</em> &lt;=10<sup>18</sup>)</p>

*******InputConstraints*******

<p>The input consists of multiple test cases.</p>
<p>For each test case, there is one line containing two integers <em>a</em> and <em>b</em>.</p>
<p>End of input is indicated by a line containing two zeros.</p>

*******OutputConstraints*******

<p>For each test case, output the sum of the power of the integers from <em>a</em> to <em>b</em>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 10
248832 248832
0 0

<strong>Output:</strong>
13
5
</pre>


______________________________________________________
JUMP1||||||true||||||


<p>In Shanghai, there are some famous clock towers built more than 100 years ago, such as the office building of Shanghai Customs, Xujiahui Church, etc. Every clock tower&rsquo;s clock-face consists of three hands: an hour hand, a minute hand, and a second hand. The hands are not move smoothly as time passing. When a second passes, the hands jump to the next place clockwise: the second hand moves 1/60 ring, the minute hand moves 1/3600 ring and the hour hand moves 1/43200 ring.</p>
<p>We assume that every hand&rsquo;s mass is evenly distributed, and its thickness can be ignored. In other words, every hand&rsquo;s centre of gravity is at the middle position of the respective hand. Suppose <em>p</em><sub>1</sub>, <em>p</em><sub>2</sub> and <em>p</em><sub>3</sub> are, respectively, the position of the centre of gravity of the hour hand, that of the minute hand, and that of the second hand. The position of all three hands&rsquo; centre of gravity, <em>P</em>, is the average of <em>p</em><sub>1</sub>, <em>p</em><sub>2</sub> and <em>p</em><sub>3</sub> weighted by the hands&rsquo; mass.</p>
<p>Suppose <em>P</em><sub>1</sub> and <em>P</em><sub>2</sub> are the positions of the three hands&rsquo; centre of gravity at the start time and at the end time, respectively. Your task is to calculate the length of the path from <em>P</em><sub>1</sub> to <em>P</em><sub>2</sub>. That is, if <em>P</em><sub>3</sub> is the position of the three hands&rsquo; centre of gravity on the clock-face at a point of time between start time and end time, <em>X</em> is the length of the path from <em>P</em><sub>1</sub> to <em>P</em><sub>3</sub>, and <em>Y</em> is the length of the path from <em>P</em><sub>3</sub> to <em>P</em><sub>2</sub>, the length of the path from <em>P</em><sub>1</sub> to <em>P</em><sub>2</sub> is <em>X+Y</em>.</p>

*******InputConstraints*******

<p>Input consists of one or more lines, each line describing one data set. Each line begins with 6 integers: <em>L</em><sub>1</sub>, <em>L</em><sub>2</sub>, <em>L</em><sub>3</sub>, <em>M</em><sub>1</sub>, <em>M</em><sub>2</sub>, <em>M</em><sub>3</sub>, followed by start time and end time. <em>L</em><sub>1</sub>, <em>L</em><sub>2</sub> and <em>L</em><sub>3 </sub>indicate the lengths of hour hand, minute hand and second hand respectively, where 1&lt;= <em>L</em><sub>1</sub>&lt;<em>L</em><sub>2</sub>&lt;<em>L</em><sub>3&nbsp; </sub>&lt;=100. <em>M</em><sub>1</sub>, <em>M</em><sub>2</sub> and <em>M</em><sub>3 </sub>indicate the weights of hour hand, minute hand and second hand respectively, where 1&lt;= <em>M</em><sub>1</sub>, <em>M</em><sub>2</sub>, <em>M</em><sub>3</sub> &lt;=100. The format of start time and end time is <em>hh:mm:ss</em>, where 0&lt;= <em>hh &lt;=</em>23, 0&lt;= <em>mm &lt;=</em>59, and 0&lt;= <em>ss &lt;=</em>59. Start time and end time should be in the same day.</p>
<p>End of input is indicated by a line consisting of -1.</p>

*******OutputConstraints*******

<p>For each data set, output a single line. Each line should give the length of the path for the positions of three hands&rsquo; centre of gravity<em> </em>at the start time and at the end time. We accept solutions with absolute error less than 10<sup>-2</sup>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1 2 3 1 2 3 00:00:00 00:00:01
3 4 5 1 1 1 09:00:00 18:00:00
-1

<strong>Output:</strong>
0.08
2826.27
</pre>


______________________________________________________
KPGRAPHS||||||true||||||


<p>In this problem your task is to count the amount of graphs of different types. We only consider undirected graphs without self-loops. Every pair of vectices can be connected with at most one edge. Graphs are labeled, i.e. if a graph has N vertices, then each of them has a unique label from 1 to N.</p>
<p>We will be interested in three types of graphs - connected, eulerian and bipartite. A graph is connected, if and only if there is at least one path between any pair of vertices. A graph is eulerian, if and only if it's connected and there is a cycle that goes through every edge exactly once. A graph is bipartite, if and only if we can split all of its vertices into two subsets A and B, such that every edge has one endpoint in A and another in B.</p>

*******InputConstraints*******

<p>The first line of the input contains one integer number T (1 &lt;= T &lt;= 1000) - the number of test cases.</p>
<p>Next T lines contain different test cases. Each test case contains one integer number N (1 &lt;= N &lt;= 1000) - the number of vertices in a graph.</p>

*******OutputConstraints*******

<p>For each test case, output the number of connected graphs, the number of euleran graphs and the number of bipartite graphs - all modulo 1000000007. See examples for the required format. Output one additional empty line after each test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1<br />2<br /><br /><strong>Output:</strong><br />Connected: 1<br />Eulerian: 1<br />Bipartite: 1<br /><br />Connected: 1<br />Eulerian: 0<br />Bipartite: 2<br /><br /></pre>


______________________________________________________
GF2||||||true||||||


<p>Find the number of degree <strong>n</strong> irreducible polynomials over GF(2). For example: for n=1 there are two such polynoms: x and x+1. For <strong>n</strong>=2 there is only one: x<sup>2</sup>+x+1. Note that in R[x] the polynom x<sup>2</sup> +1 is irreducible, but not over GF(2), because x<sup>2</sup>+1=(x+1)*(x+1)</p>

*******InputConstraints*******

<p>A single positive integer <strong>n</strong>, where <strong>n</strong>&lt;500000</p>

*******OutputConstraints*******

<p>Output the answer for <strong>n.</strong></p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />201<br /><strong>Output:</strong><br />15989433276208858463104100421305100522608250813995004946218<br /><br /><strong>Input:<br /></strong>1<br /><strong>Output:<br /></strong>2<br /><br /><strong>Input:<br /></strong>2<br /><strong>Output:<br /></strong>1<br /><br /><strong>Input:<br /></strong>3<br /><strong>Output:<br /></strong>2<br /><br /></pre>


______________________________________________________
MIB||||||true||||||


<p>J, of the Men In Black,&nbsp; has been learning an alien language and has has a spelling test tomorrow.&nbsp; J, however, is bored of studying the nonsensical (and often unpronouncable) words.</p>
<p>Instead, he is seeing how many ways he can reorder his spelling list.&nbsp; After making all possible permutations of word on his list, he sorts the rearranged lists lexiographically (by the first word, then the second...).&nbsp; After the sort, in what position, with&nbsp; the lexiographically first list being in position 1, is his original spelling list?</p>

*******InputConstraints*******

<p>The first line is the number of spelling lists (no more than 10).</p>
<p>For each spelling list, a line with the number of words (no more than 1000) is given, followed by the original list on the next line.</p>
<p>All words within a spelling list are unique.&nbsp; Each word is composed of the letters a-z, is fewer than 100 characters, and is followed by a single space.</p>

*******OutputConstraints*******

<p>On separate lines, give the positions of the original lists.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />4<br />a b c d <br />4<br />d c b a <br />1<br />mrsmith <br />6<br />a aaaaaa aaaaa aaaa b bb <br /><br /><strong>Output:</strong><br />1<br />24<br />1<br />55<br /></pre>


______________________________________________________
ARITH2||||||false||||||

<p>While browsing aimlessly, Peter stumbled upon an old riddle he used to solve on his calculator when he was still young. It was the kind of a riddle where you punch in a bunch of numbers and operators into a simple pocket calculator and then turn it upside down to get the answer:</p>
<p><em>These come in many different sizes but they are always exactly one foot long. Answer: 103 * 103 * 5.</em></p>
<p><em>What are made of ice to keep people warm? Answer: 50 * 40 * 250 + 791. </em></p>
<p>After a few minutes he found a large amount of such riddles and full of excitement he went to solve them. He turned his computer screen upside down...</p>
<p>... only to find out that he does not have a reasonable calculator program installed on his computer.</p>
<h3>Problem specification</h3>
<p>You are given multiple sequences of button presses of a simple pocket calculator that consist of digits and arithmetic operators. For each such sequence find the number it would produce on a pocket calculator's display.</p>
<p>Note that the pocket calculator evaluates the operators in the order in which they are given. (i.e., there is no operator precedence.) Assume that the display of the calculator is large enough to show the result, and that its memory is sufficient to store all intermediate results.</p>

______________________________________________________
BOBALLS2||||||false||||||

<p>"Behold, my queen", said the jester, "the great Bouncing Ball Bowl!" The queen boredly waved her hand and sarcastically replied: "Let the fun begin!". And the fun begun! The jester spoke a magic word and all the colorful balls in his bowl started to roll and bounce, creating interesting pictures.</p>
<p>The queen watched vividly for a few minutes, but then she started to be bored again. "Just wait a moment, Your Majesty, in a minute they'll&hellip;" started the jester, but the queen interrupted: "I'm a queen! I don't want to wait! Can't you just fast forward it or something?"</p>
<h3>Problem specification</h3>
<p>The jester's box is an <em>X</em> * <em>Y</em> (1&lt;= <em>X</em>, <em>Y</em> &lt;=5000)rectangle. The rectangle contains <em>N</em>(<em>N</em> &lt;=3001) small balls. At any moment, each ball is travelling at the same speed in one of the four diagonal directions.</p>
<p>The movement of the balls is continuous and for the purpose of this problem we may consider them to be points. When two or more balls meet, they bounce in a way described below.</p>
<p>Your task is to determine the state of the box at given moments in time.</p>
<h3>Bouncing specification</h3>
<p>Bouncing does not change the speed of the balls. Following images show how the balls bounce off each other, and also off walls. Each image can be rotated arbitrarily. For example, the first image shows that whenever two balls meet at a right angle, they bounce and depart at a right angle again. One particularly tricky case is shown in the third image.</p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:boballs2.jpg" alt="" /></p>

______________________________________________________
BRCKTS2||||||false||||||

<p>Peter is preparing slides for his lecture on parsing arithmetic expressions. In the first part of the lecture he wants to focus just on parsing brackets. He invented an interesting geometric representation of a correct bracket sequence for his students, because one image is better than a thousand words:</p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:brckts1.png" alt="" /></p>
<p>Formally, the definition of the geometric representation looks as follows. The simplest correct bracket sequence () is represented by a 1 * 1 square. If A is a correct bracket sequence and g(A) its represenation, then the representation for (A) is g(A) surrounded by a rectangle two units wider than g(A) and one unit taller than the highest point of g(A). If A and B are two correct bracket sequences and g(A) and g(B) are their representations, then we get g(AB) by placing g(B) one unit to the right of g(A).</p>
<p>After he finished his slides, Peter started to play with the images he prepared. He painted the bounded areas of the images alternately black and white, in such a way that the outer-most areas are all painted black. For the example above this coloring looks as follows:</p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:brckts2.png" alt="" /></p>
<h3>Problem specification</h3>
<p>You are given a correct bracket sequence. Calculate the area that is colored black.</p>

______________________________________________________
MOVIE||||||false||||||

<p>N(N &lt;= 120) friends decided to go to the local cinema together. They all bought tickets to the same row. As there was still some time left, each of them took her ticket and went shopping until the movie starts.</p>
<p>They all arrived back late, the movie already started. The usher standing at the door agreed to let them in one by one. Each of the girls was supposed to find her place and sit down.</p>
<p>However, the machine that printed their tickets was broken. Instead of consecutive numbers, each girl received a random seat number between 1 and K, where K is the number of seats in their row. The seat numbers they received were not necessarily distinct.</p>
<p>When a girl tries to sit down, she enters the row at the end where seat number 1 is, and walks until she reaches the number on her ticket. If her desired seat is free, she just sits down. If it is already taken, she continues to walk in the same direction until she finds the first free seat, and sits there.</p>
<p>Of course, it is possible that some unfortunate girl will reach the end of the row without finding a place to sit. In that case, the usher comes and throws her out.</p>
<h3>Problem specification</h3>
<p>You are given the numbers N and K.(1&lt;= K &lt;=200)</p>
<p>Assume that each girl's ticket had a number between 1 and K, inclusive. Each number was drawn uniformly at random, and draws were independent.</p>
<p>Also assume that the entire row was empty when the first girl started to look for her seat.</p>
<p>Compute the probability that at least one girl suffered the sad fate of being thrown out by the usher.</p>

______________________________________________________
AIRLINES||||||false||||||

<p>The new catchphrase of Jumbo Airlines is "No annoying neighbors, each flight a unique experience!"</p>
<p>And as in most cases, the advertisement was produced by the marketing department, without ever consulting the engineers. They only learned about it after the boss asked them to "handle it ASAP".</p>
<p>There are M seats in each row, and there are N rows of seats in the airplane. Hence the seats form an M * N grid. (For the purpose of this problem we will ignore the presence of aisles.) The airline sells exactly K tickets for each flight.</p>
<p>To make sure that the "no annoying neighbors" part of the motto is satisfied, the seating must obey the following rule: Whenever a seat is occupied, the seats immediately in front of it and behind it, as well as the seats immediately to the left and to the right must remain free.</p>
<p>An allowed arrangement is a set of K occupied seats that obeys the rule above.</p>
<p>The "unique experience" part of the motto is then satisfied by using a different arrangement of occupied seats for each flight. (Two seating arrangements are different if there is at least one seat which is occupied in one arrangement and free in the other.)</p>
<h3>Problem specification</h3>
<p>You are given the numbers M, N and K. Find the number of different allowed seating arrangements.</p>
<p>As this number can be very large, we're only interested in its value modulo 420047.</p>

______________________________________________________
SHOP2||||||false||||||

<p>Karl is going to spend his holiday in Nothingland. Since there is nothing there, he has to buy all supplies now. At the moment, he is waiting at the checkout counter with a shopping cart full of stuff.</p>
<p>Of course, he has a sufficient amount of money in his wallet. However, he prefers to use alternate means of payment if possible: luncheon vouchers, gift certificates, different types of coupons, etc. What makes the matter complicated is that the use of these items is often limited: e.g., luncheon vouchers can only be used to buy food, and gift certificates are often limited to a certain type of gifts.</p>
<h3>Problem specification</h3>
<p>You are given the number N(1&lt;= N &lt;=2000) of items in Karl's shopping cart and their prices. You are also given the number M(1&lt;= M &lt;=2000) of vouchers in his wallet, together with the information on their allowed use.</p>
<p>When paying for his shopping, Karl may use vouchers for a larger sum than the cost of the things he is buying. It is also possible to split an item's cost between multiple vouchers and use a voucher to pay for more than one item.</p>
<p>Compute the minimum amount of additional cash money Karl needs to pay for his shopping.</p>

______________________________________________________
ANTTT||||||true||||||


<p>There are <strong>n</strong> sticks lying on the ground. The Ant can move only along the sticks. It can go from one stick to another only if the sticks intersect or touch each other. Help the Ant find out if it can  reach the stick <strong>y</strong> from the stick <strong>x</strong>.</p>

*******InputConstraints*******

<p>The first line of the input contains number <strong>t</strong> &#8211; the amount of tests. Then <strong>t</strong> test descriptions follow.Â The first line of each test contains two  integers <strong>n</strong> and <strong>m</strong> - the number of stick and the number of queries. Next<strong> n</strong> lines contain four integers <strong>Ax</strong>,<strong> Ay</strong>, <strong>Bx</strong>, <strong>By</strong> - the coordinates of the endpoints of a stick. You may consider stick to be straight segment on a plane. The next <strong>m</strong> lines contain two integers each <strong>x</strong> and <strong>y</strong> which are the queries.</p>

*******OutputConstraints*******

<p>For each query print "YES" if the Ant can reach the stick number <strong>y</strong> from the stick number <strong>x</strong>, otherwise print "NO".</p>

*******IOTestCases*******

<pre><strong>Input:<br /><p><span style="font-weight: normal;">2<br />3 3<br />1 3 4 3<br />3 4 3 1<br />3 1 5 1<br />1 2<br />1 3<br />2 2<br />3 3<br />1 1 3 1<br />2 1 3 1<br />3 2 4 1<br />1 2<br />1 3<br />2 3</span></p></strong></pre>
<pre><strong><br />Output:<p><span style="font-weight: normal;">YES<br />YES<br />YES<br />YES<br />NO<br />NO</span><span style="font-weight: normal;"><span style="font-weight: normal;">Â </span></span></p></strong></pre>


______________________________________________________
PLAYFAIR||||||true||||||


<p>In this problem, you will crack Playfair cyphers or decide a multiple solutions exist, or decide no solution exist.</p>
<p>Rules:</p>
<p>1) Convert all letters in the text to uppercase and omit all non-alphabetic characters.</p>
<p>2) Replace all letters 'J' by 'I'.</p>
<p>3) Form digraphs, but avoid having twice the same letter in a digraph. Insert an extra 'X' between the identical letters if necessary. If the repeated letter is an 'X', insert a 'Q' instead.</p>
<p><br />4) If the last digraph would be incomplete, append an extra 'X' to the text (or a 'Q' if the last letter in the text is an 'X').</p>
<p>Consider the following message: "Programming in C and Pascal is easy; I will learn Java next year." The digraph representation would be:&nbsp;<br /><br />PR OG RA MX MI NG IN CA ND PA SC AL IS EA SY IW IL LX LE AR NI AV AN EX TY EA RX<br /><br />Note the extra 'X' between the two 'M's of 'programming'. There is no extra 'X' between the two 'L's of 'will', because they are in different digraphs, but there is one between 'will' and 'learn'. There is also an extra 'X' at the end of the message. The 'J' in 'Java' is replaced by an 'I'.<br />To illustrate the exceptions for the letter 'X' in the original text, consider the message "I am an ex-xenophobe, attempting to relax!". This becomes:&nbsp;<br /><br />IA MA NE XQ XE NO PH OB EA TX TE MP TI NG TO RE LA XQ<br /><br />The next stage is the replacement of each digraph by an other digraph according to the following rules:</p>
<p><img src="http://www.spoj.plhttp://uva.onlinejudge.org/external/109/p10955.gif" alt="" width="212" height="211" /></p>
<p>The uppercase letters, 'J' excluded, are placed in a 5X5 square in some predetermined order. This is the key for the encryption.</p>
<p><br />If the two letters of the digraph are in the same row of the square, replace them by the letters occuring at the immediate right of each one. If one of the letters is in the rightmost column, replace it by the letter in the first column of the same row (wrap around).</p>
<p><br />If the two letters of the digraph are in the same column of the square, replace them by the letters occuring immediately below each one. Wrap around to the same column in the top row if one of them is in the bottom row.&nbsp;<br />If the letters are neither in the same row nor the same column, replace the first letter by the letter in the same row as the first letter and the same column as the second letter. Replace the second letter by the letter in the same row as the second letter and the same column as the first letter.&nbsp;<br /><br />The resulting digraphs form the encrypted code.<br /><br /></p>

*******InputConstraints*******

<p>The input contains several cases, the number of which is on the first line. Every case has three parts. The first part is the plaintext and consists of one or more lines of ordinary text. The second part is the code that is the result of encrypting the first part. The third part is code for the text you are to decrypt. The parts are terminated by a hashmark ('#') on a line by itself. Code parts are printed as uppercase digraphs, 20 digraphs on a line, separated by one space. The last line of a code part can contain fewer than 100 digraphs. No code part will contain more than 5000 digraphs.</p>

*******OutputConstraints*******

<p>For each case, first output a line "Case x:" where x is the case number (starting from 1).<br />Then output the decrypted code represented as digraphs in the same format as the code parts in the input. &nbsp;If more than one solution exist, output the following on a single line.</p>
<p>MULTIPLE SOLUTIONS</p>
<p>If no solutions exist output in one line:</p>
<p>NO SOLUTIONS</p>
<p>Separate the cases by an empty line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />Programming in C and Pascal is easy; I will learn Java next year.<br />#<br />FV CV GE PH PW AS UX GL UY ZX GY LZ UV HE NS UI UQ IA QA EG<br />XU XG EA HN KC HE VE<br />#<br />LX ZH AH EI NH XY MX KV HE OE RQ PD OQ AS KY EQ ZL EI<br />#<br />It is full moon!<br />Meet me at Hammersmith Bridge tonight.<br />#<br />MP PI NZ AZ RN QV UG GD DO GD RQ AR KY GD HD NK PR DA MS OG<br />UP GK IC QY<br />#<br />HL WT UP MC HQ RW PI CX DC ZD HB HG KL PM GI FP SK GE QR MF<br />MP AR BH HM HA SP DP TC WM DZ PO RL SG MU DC SB OD SM MU CS<br />UH RX BL MH HG WS DC BH MF KR MZ GT CD PU CS HD GH LK DP CT<br />GI RZ CD EV KY GD MF IP GT IF KG IC EH TE SD QV QG PR RQ EV<br />MU HK IF RC CR EQ OU PR SB GE CD PR PI UP DR UE EV FS BH MF<br />EV FS DA BC MK GI<br />#<br />
<strong><br />Output:</strong>
Case 1:<br />IA MA NE XQ XE NO PH OB EA TX TE MP TI NG TO RE LA XQ<br /><br />Case 2:<br />CR YP TO GR AP HY IS AV ER YF AS CI NA TI NG SU BI EC TA ND<br />IT HA SA RI CH HI ST OR YI FY OU AR EI NT ER ES TE DI NT HE<br />PL AY FA IR CI PH ER SA ND MA NY MO RE OT HE RS IC AN ST RO<br />NG LY RE CO MX ME ND SI MO NS IN GH SC OD EB OX OK TH AT CO<br />NT AI NS AL LA BO UT TH ES EC RE TH IS TO RY OF CO DE SA ND<br />CO DE BR EA KI NG<br /><br />
</pre>


______________________________________________________
FLOWGROW||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/FLOWGROW/en/">English</a></td>
<td width="50%"><a href="/problems/FLOWGROW/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>The farmer AnhDQ grows flower in his MxN garden (M rows and N columns). He wants to grow flower satisfying that: Each row of the garden has at least k color(s) of flower; and he has 7 types of flower: red, orange, yellow, green, blue, indigo, and violet to use.</p>
<h3>Request</h3>
<p>Count the number of ways to grow flower on his garden.</p>

*******InputConstraints*******

<p>- Contains several lines, there are three number M, N, k on each.</p>

*******OutputConstraints*******

<p>- Contains the answer for each line of Input, mod <strong>2370823708</strong>, written on separate lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1 7 7

<strong>Output:</strong>
5040
</pre>

______________________________________________________
EXPR4||||||true||||||


<p>Count the number of distinct expressions involving <em>n</em> different operands <strong>a</strong>, <strong>b</strong>, <strong>c</strong>, etc. Only operators +, -, *, / and parentheses are permitted.</p>
<p>Two expression are distinct if for some valid input values (i.e. You won't divide some number by zero) <strong>a</strong>, <strong>b</strong>, <strong>c</strong>, ... , the two expressions leads to different results. For example, a/b/c and a/(b*c) are the same expressions, but a/b+c and a/(b+c) are not.</p>

*******InputConstraints*******

<p>Multiply test cases. For each test case:</p>
<p>A single line - <em>n</em>.(1&lt;= <em>n</em> &lt;=2000).</p>
<p>Input terminates by a single zero.</p>

*******OutputConstraints*******

<p>For each test case:</p>
<p>The number of different expressions, modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
0

<strong>Output:</strong>
68
</pre>


______________________________________________________
MCHAOS||||||false||||||

<p>   </p>
<table style="width: 100%; background-color: #41bd46;" border="1">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/MCHAOS/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MCHAOS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>&nbsp;</p>
<p>Little Lovro likes to play games with words. During the last few weeks he realized that some words don't like each other.</p>
<p><br />The words A and B don't like each other if the word A is lexicographically before the word B, but the word B' is lexicographically before the word A', where X' stands for the word X reversed (if X="kamen" then X'="nemak"). For example, the words "lova" and "novac" like each other, but the words "aron" and "sunce" don't like each other.</p>
<p>Given some set of the words, we define&nbsp; the degree of chaos of the set as&nbsp; the number of pairs of different words that don't like each other.</p>
<p>Write a program that, given a set of words, finds the chaos degree for the set.</p>
<p>&nbsp;</p>

______________________________________________________
MROADS||||||false||||||

<p>   </p>
<table style="border: 1px solid #2dd254; width: 100%; background-color: #d5d229;" border="1">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/MROADS/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MROADS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>The traffic network in a country consists of N cities (labeled with integers 1 to N) and N-1 roads connecting the cities. There is a unique path between each pair of different cities.</p>
<p><br />Because of the many years of lazy maintenance the roads are pretty damaged and for each road two numbers A and B are known &ndash; the integer A represents the current time (in seconds) needed to travel along the road, and the integer B represents the smallest possible time (in seconds) needed to travel along this road if we repair all the damage.</p>
<p><br />We want to invest a certain amount of money into road repair. For a particular road, the result will be proportional to the amount of invested money. For each euro invested in some road, the time needed to travel along that road will be reduced by one second (the amount of money invested in some road has to be an integer). The travel time cannot be reduced beyond the smallest possible time B described above.</p>
<p><br />We are given a certain amount of money. We want to distribute this money along different roads in such a way that the time needed to travel from the city 1 to the most distant city (after all the repairs) is as small as possible.</p>
<p><br />Write a program that will find this smallest time.</p>

______________________________________________________
MOBIVINA||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MOBIVINA/en/">English</a></td>
<td width="50%"><a href="/problems/MOBIVINA/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>KTuan and AnhDQ, CEOs of two telecommunication corporations MobiZone and VinaGone have signed a contract to use their network in common. N people have accepted to try this new service. The i<sup>th</sup> people accepts to pay M<sub>i</sub> to use MobiZone's service or V<sub>i</sub> to use VinaGone's one; and any two people i<sup>th</sup> and j<sup>th</sup> accept to pay C<sub>ij</sub> in common whether they use different services (the network cost).</p>
<h3>Request</h3>
<p>Find a way of choosing networks for N people satisfying the sum of total cost is minimum.</p>

*******InputConstraints*******

<p>- The first line contains number N. <br />- The second line contains N number(s) M<sub>i</sub>. <br />- The third line contains N number(s) V<sub>i</sub>. <br />- The last N line(s), each of them contains N number(s) C<sub>ij</sub> (C<sub>ij</sub> = C<sub>ji</sub>).</p>

*******OutputConstraints*******

<p>- Contains the minimum total cost.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1 1 10<br />10 10 1<br />0 0 1<br />0 0 1<br />1 1 0<br /><br /><strong>Output:</strong><br />5<br /></pre>

______________________________________________________
GSS6||||||true||||||


<p>Given a sequence A of N <em>(N &lt;= 100000)</em> integers, you have to apply Q <em>(Q &lt;= 100000)</em> operations:<br /><br />Insert, delete, replace an element, find the maximum contiguous(non empty) sum in a given interval.</p>

*******InputConstraints*******

<p>The first line of the input contains an integer N.<br />The following line contains N integers, representing the starting<br />sequence A1..AN, <em>(|Ai| &lt;= 10000)</em>.<br /><br />The third line contains an integer Q. The next Q lines contains the operations in following form:<br /><br /><strong>I x y</strong>: insert element y at position x <em>(between x - 1 and x)</em>.<br /><strong>D x</strong>&nbsp; : delete the element at position x.<br /><strong>R x y</strong>: replace element at position x with y.<br /><strong>Q x y</strong>: print max{Ai + Ai+1 + .. + Aj | x &lt;= i &lt;= j &lt;= y}.<br /><br />All given positions are valid, and given values are between -10000 and +10000.<br /><br />The sequence will never be empty.</p>

*******OutputConstraints*******

<p>For each <strong>"Q"</strong> operation, print an integer(one per line) as described above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />3 -4 3 -1 6<br />10<br />I 6 2<br />Q 3 5<br />R 5 -4<br />Q 3 5<br />D 2<br />Q 1 5<br />I 2 -10<br />Q 1 6<br />R 2 -1<br />Q 1 6<br /><br /><strong>Output:</strong><br />8<br />3<br />6<br />3<br />5<br /></pre>


______________________________________________________
PGCD||||||true||||||


<p>Johnny has created a table which encodes the results of some operation -- a function of two arguments. But instead of a boring multiplication table of the sort you learn by heart at prep-school, he has created a GCD (greatest common divisor) table! So he now has a table (of height <var>a</var> and width <var>b</var>), indexed from (1,1) to (<var>a</var>,<var>b</var>), and with the value of field (<var>i</var>,<var>j</var>) equal to gcd(<var>i</var>,<var>j</var>). He wants to know how many times he has used prime numbers when writing the table.</p>

*******InputConstraints*******

<p>First, <var>t</var> &le; 10, the number of test cases. Each test case consists of two integers, 1 &le; <var>a</var>,<var>b</var> &lt; 10<sup>7</sup>.</p>

*******OutputConstraints*******

<p>For each test case write one number - the number of prime numbers Johnny wrote in that test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>2<br />10 10<br />100 100<br /></pre>
<strong>Output:</strong><br />
<pre>30<br />2791<br /></pre>
</pre>


______________________________________________________
UCI2009B||||||true||||||


<p style="text-align: justify;">We all got too excited when we learned (A + B)^2 = A^2 + 2AB + B^2. After solving this problem, maybe you could get even more excited because you will have to calculate (A + B)^N, where (0 &lt;= N &lt;= 1000).</p>
<p style="text-align: justify;">Follow the rules below when giving the answer:</p>
<ol>
<li style="text-align: justify;">Consecutive terms must be separated by a '+' character.</li>
<li style="text-align: justify;">At the i-th term, A must be raised to N - i and B must be raised to i (0&lt;=i&lt;=N).</li>
<li style="text-align: justify;">Binomial coefficients must not be printed, print their prime factorization instead.</li>
<li style="text-align: justify;">Use '^' for exponentiation and 'x' for multiplication in step 3.</li>
<li style="text-align: justify;">Avoid the use of number 1 when possible.</li>
</ol>
<p style="text-align: justify;">See sample output for clarification.</p>

*******InputConstraints*******

<p style="text-align: justify;">Input starts with an integer T, representing the number of test cases (1&lt;=T&lt;=15). T lines follow, each one consisting of an integer N, (0&lt;=N&lt;=1000).</p>

*******OutputConstraints*******

<p style="text-align: justify;">For each test case, print (A + B)^N, on a single line.</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />6<br />0<br />1<br />2<br />3<br />4<br />5<br /><br /><strong>Output:</strong><br />1<br />A+B<br />A^2+2xAB+B^2<br />A^3+3xA^2B+3xAB^2+B^3<br />A^4+2^2xA^3B+2x3xA^2B^2+2^2xAB^3+B^4<br />A^5+5xA^4B+2x5xA^3B^2+2x5xA^2B^3+5xAB^4+B^5<br /><br /><strong>Warning: Large output. Be careful with certain languages.</strong><br /></pre>


______________________________________________________
UCI2009D||||||true||||||


<p style="text-align: justify;">After many years spent playing Digger, little Ivan realized he was not taking advantage of the octaves. Oops, sorry! Most of you were not born when Digger came to light!</p>
<p style="text-align: justify;">Digger is a Canadian computer game, originally designed for the IBM personal computer, back in 1983. The aim of the game is to collect precious gold and emeralds buried deep in subterranean levels of and old abandoned mine.</p>
<p style="text-align: justify;">We Digger gurus call a set of eight consecutive emeralds an octave. Notice that, by consecutive we mean that we can collect them one after another. Your Digger Mobile is able to move in the four directions: North, South, West and East.</p>
<p style="text-align: justify;">In a simplified Digger version, consisting only of emeralds and empty spaces, you will have to count how many octaves are present for a given map.</p>

*******InputConstraints*******

<p style="text-align: justify;">Input starts with an integer T, representing the number of test cases (1&lt;=T&lt;=20). Each test case consists of a map, described as follows:</p>
<p style="text-align: justify;">An integer N (1&lt;=N&lt;=8), representing the side length of the square-shaped map. N lines follow, N characters each. A 'X' character represents an emerald, and a '.' represents an empty space.</p>

*******OutputConstraints*******

<p style="text-align: justify;">For each test case print the number of octaves on a single line.</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />2<br />3<br />XXX<br />X.X<br />XXX<br />3<br />XXX<br />XXX<br />XXX<br /><br /><strong>Output:</strong>
1<br />5</pre>


______________________________________________________
FROGS||||||true||||||


<p>Billy Jean loves collecting frogs.&nbsp; Recently, she developed the sport of frog wrestling.&nbsp; Now she wants to rank her frogs by their wrestling prowess.</p>
<p>Billy Jean has made a algorithm for sorting her frogs.</p>
<ol>
<li>She arranges N cages, numbered 1,2,...N, each with one frog.</li>
<li>For each pair of cages in a specified, pre-determined list of K pairs of cages,<ol>
<li>she removes the frogs from the two cages,</li>
<li>has the frogs wrestle,</li>
<li>puts the winner in the higher-numbered cage, and</li>
<li>puts the loser in the lower-numbered cage.</li>
</ol></li>
</ol>
<p>When she is finished, she hopes to have all her frogs sorted from worst to best in the cages 1 to N.&nbsp; Will her algorithm work regardless of the initial order of the frogs?</p>
<p>Note:</p>
<ul>
<li>Assume that a strict ordering by wrestling ability is possible.</li>
<li>Billy Jean isn't the sharpest tool in the shed.&nbsp; Sometimes she has written the same two numbers for a pair.&nbsp; In this case, that frog is simply taken out and then put back.</li>
</ul>
<h3>Constraints</h3>
<p>1&lt;=N&lt;=20</p>
<p>1&lt;=K&lt;=1000</p>

*******InputConstraints*******

<p>The first line is the number of test cases.&nbsp; Each test cases is preceded by a blank line.</p>
<p>The first line of each test case is N.&nbsp; The next line is K.&nbsp; The next K lines are the pairs, separated by a single space.</p>

*******OutputConstraints*******

<p>On separate lines, output whether Billy Jean's algorithm is correct.&nbsp; Output "YES" (without quotes) if it is or "NO" (without quotes) if it is not.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br /><br />2<br />1<br />2 1<br /><br />2<br />1<br />1 1<br /><br />1<br />1<br />1 1<br /><br />4<br />5<br />1 2<br />3 4<br />1 3<br />2 4<br />2 3<br /><br /><strong>Output:</strong>
YES<br />NO<br />YES<br />YES</pre>


______________________________________________________
STREDUCE||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/STREDUCE/en/">English</a></td>
<td width="50%"><a href="/problems/STREDUCE/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Given a string containing only characters of 'a' and 'b'. You can reduce this string by replacing a substring forming a?a or b?b by ?; ? is 'a' or 'b'.</p>
<h3>Request</h3>
<p>Find a way to minimize the length of given string by reducing it. Output that minimum length.</p>

*******InputConstraints*******

<p>- A string.</p>

*******OutputConstraints*******

<p>- The minimum length found.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />baaba<br /><br /><strong>Output:</strong><br />1<br /></pre>

______________________________________________________
BANDMATR||||||true||||||


<p>Computing the determinant of a matrix using Gaussian elimination takes O(n^3). &nbsp;On the other hand, computing the determinant of tridiagonal matrix is O(n) using a recurrence. &nbsp;In this problem you will compute the determinant of banded matrices. &nbsp;A band matrix is a sparse matrix, whose non-zero entries are confined to a diagonal band, comprising the main diagonal and zero or more diagonals on either side. &nbsp;In this problem, given a banded <strong>NxN </strong>square integer matrix with <strong>M</strong> bands on each side of the diagonal, we ask you to compute the determinant of this matrix. &nbsp;For example a tridiagonal matrix has exactly 1 band on each side, and the 8x8 Matrix in the sample input has 2 bands on each side. &nbsp;For a good discussion of banded matrices, see Thorson's paper at:</p>
<p>http://sepwww.stanford.edu/oldreports/sep20/20_11_abs.html</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>A total of &lt;10 inputs. &nbsp;For each input,</p>
<p>First line has dimension, <strong>N (1&lt;N&lt;501)</strong>, of the matrix, followed by <strong>N</strong> lines with <strong>N</strong> integers, each less than <strong>10001</strong>, and greater than <strong>-10001</strong>. &nbsp;It is guarantteed that the number of bands on each side of the diagonal, <strong>M &lt; 51. &nbsp;</strong>That is there are at most <strong>101 </strong>bands in total including the diagonal. &nbsp;Use scanf IO, and avoid stl IO.</p>

*******OutputConstraints*******

<p>For each input matrix, output its determinant <strong>modulo 10^9+7.</strong></p>
<p><em>Hint:</em> Use Montgomery multiplication for fast computation, i.e., see:<br />http://everything2.com/title/Montgomery%2520multiplication</p>

*******IOTestCases*******

<pre><strong>Input:<br /></strong><strong><br /></strong><strong>2<br />2 0<br />0 2<br /></strong><strong>2<br />1 0<br />0 1<br />8<br />1 0 -1 0 0 0 0 0<br />-1 1 0 -1 0 0 0 0<br />-1 0 -1 1 -1 0 0 0<br />0 -1 0 -1 0 -1 0 0<br />0 0 -1 0 1 0 -1 0<br />0 0 0 -1 -1 1 0 -1<br />0 0 0 0 -1 0 -1 1<br />0 0 0 0 0 -1 0 -1<br /></strong><strong><br />Output:<br />4<br />1<br />36<br /><br /></strong>

</pre>


______________________________________________________
ANARC08A||||||true||||||


<p>The game of Tobo is played on a plastic board designed into a 3X3 grid with cells numbered from 1 to 9 as shown in figure (a). The grid has four dials (labeled 'A' to 'D' in the figure.) Each dial can be rotated in 90 degrees increment in either direction. Rotating a dial causes the four cells currently adjacent to it to rotate along. For example, figure (b) shows the Tobo after rotating dial 'A' once in a clockwise direction. Figure (c) shows the Tobo in figure (b) after rotating dial 'D' once in a counterclockwise direction.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/ahmed_aly:ANARC08A.png" alt="" /></p>
<p>Kids love to challenge each other playing the Tobo. Starting with the arrangement shown in figure (a), (which we'll call the standard arrangement,) one kid would randomly rotate the dials, X  number of times, in order to shuffle the board. Another kid then tries to bring the board back to its standard arrangement, taking no more than X  rotations to do so. The less rotations are needed to restore it, the better. This is where you see a business opportunity. You would like to sell these kids a program to advise them on the minimum number of steps needed to bring a Tobo back to its standard arrangement.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a line by itself. Each line is made of 10 decimal digits. Let's call the first digit Y . The remaining 9 digits are non-zeros and describe the current arrangement of the Tobo in a row-major top-down, left-to-right ordering. The first sample case corresponds to figure (c). <br /><br /> The last line of the input file is a sequence of 10 zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the result using the following format: <br /><br /> k. R <br /><br /> where k is the test case number (starting at 1,) is a single space, and R is the minimum number of rotations needed to bring the Tobo back to its standard arrangement. If this can't be done in Y dials or less, then R = -1.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3413569728<br />1165432789<br />0000000000<br /><br /><br /><strong>Output:</strong><br />1. 2<br />2. -1<br /><br /></pre>


______________________________________________________
ANARC08B||||||true||||||


<p>A seven segment display, similar to the one shown on the right, is composed of seven light-emitting elements. Individually on or off, they can be combined to produce 127 different combinations, including the ten Arabic numerals. The figure below illustrates how the ten numerals are displayed. 7-seg displays (as they're often abbreviated) are widely used in digital clocks, electronic meters, and calculators.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/ahmed_aly:ANARC08B1.PNG" alt="" /></p>
<p>A 7-seg has seven connectors, one for each element, (plus few more connectors for other electrical purposes.) Each element can be turned on by sending an electric current through its pin. Each of the seven pins is viewed by programmers as a single bit in a 7-bit number, as they are more comfortable dealing with bits rather than electrical signals. The figure below shows the bit assignment for a typical 7-seg, bit 0 being the right-most bit.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/ahmed_aly:ANARC08B2.PNG" alt="" /></p>
<p>For example, in order to display the digit 1, the programmer knows that only bits 1 and 3 need to be on, i.e. the 7-bit binary number to display digit 1 is "0001010", or 10 in decimal. Let's call the decimal number for displaying a digit, its display code, or just code for short. Since a 7-seg displays 127 different configurations, display codes are normally written using 3 decimal places with leading zeros if necessary, i.e. the display code for digit 1 is written as 010. <br /><br /> In a 9-digit calculator, 9 7-seg displays are stacked next to each other, and are all controlled by a single controller. The controller is sent a sequence of 3n digits, representing n display codes, where 0 &lt; n &lt; 10 . If n &lt; 9 , the number is right justified and leading zeros are automatically displayed. For example, the display code for 13 is 010079 while for 144 it is 010106106 <br /><br /> Write a program that reads the display codes of two numbers, and prints the display code of their sum.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a single line in the form of A+B= where both A  and B  are display codes for decimal numbers a  and b  respectively where 0 &lt; a , b &lt; a + b &lt; 1, 000, 000, 000 . The last line of the input file is the word "BYE" (without the double quotes.)</p>

*******OutputConstraints*******

<p>For each test case, print A+B=C  where C  is the display code for a + b .</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
010079010+010079=
106010+010=
BYE

<strong>Output:</strong>
010079010+010079=010106106
106010+010=106093
</pre>


______________________________________________________
ANARC08C||||||true||||||


<p>In Computer Science, pattern matching is the act of checking if a certain sequence conforms (matches) a given pattern. Patterns are usually specified using a language based on regular expression. In this problem, we'll use a simple regular expression to express patterns on sequences of decimal digits. A pattern is a sequence of one or more decimal digits '0' ...'9', asterisks '*', and hash signs '#'. A '*' denotes a sequence of an even number of digits, whereas a '#' denotes a sequence of an odd number of digits. For example, the pattern "129" only matches the sequence 129. The pattern "1*3" matches all sequences beginning with 1, ending with 3, and having an even number of decimal digits between the first and last digits. As another example, the pattern "#55" matches the sequences 155, 12355, 1234555, but none of the sequences 55, 1255, 123455. Your task is to write a program to find if a given sequence matches a given pattern.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more data sets. Each data set contains a single pattern and one or more sequences to match. The first line of each data set specifies the pattern, and the remaining lines specify the sequences to match against that pattern. The end of a data set (except the last) is identified by the word "END" (without the double quotes.) The end of the last data set is identified by the word "QUIT". All lines are 100,000 characters long or shorter.</p>

*******OutputConstraints*******

<p>k.s. result <br /><br /> Where k is the test case number (starting at one,) and s is the sequence number (starting at one within each test case,) and result is either the word "match" if the given string matches the pattern, or the word "not" if it doesn't.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
129
1299
129
1129
END
1*3
123
1223
END
#55
155
12355
55
1255
QUIT

<strong>Output:</strong>
1.1. not
1.2. match
1.3. not
2.1. not
2.2. match
3.1. match
3.2. match
3.3. not
3.4. not
</pre>


______________________________________________________
ANARC08D||||||true||||||


<p>Take a look at the triangle on the left of the figure below. It is made of 9 (unit) triangles arranged in three rows (N = 3 ). Needless to say, a unit triangle is a triangle with N = 1 .</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/ahmed_aly:ANARC08D.png" alt="" /></p>
<p>If you study the figure for few seconds, you'll realize that you can find 13 different triangles (which we'll call sub-triangles.) Of these 13 sub-triangles we have: Nine unit triangle; three with N = 2 , and one with N = 3 . The following table lists the number of sub-triangles in arrangements with N &lt; 5 .</p>
<pre># of Rows:            N = 1   N = 2   N = 3   N = 4
# of Sub-triangles: 	1 	5 	13 	27 
</pre>
<p>Let's define the value of a unit triangle to be the integer value written in that triangle. In general, the value of a triangle is the sum of values in all its unit triangles. The triangle on the right is the same as the other one but with the sub-triangle having the largest value being highlighted. Write a program to determine the sub-triangle with the largest value.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified in a single line made of integers (separated by spaces.) The first integer is the number of rows in the test case, and the remaining integers are the values of the unit triangles specified in a top-down, left-to-right order. (the first test case in the example below is the same as the one in the figure.) The last line of the input file contains the number 0 (which is not part of the test cases.) <br /><br /> The maximum number of rows is 400. The absolute value of a unit triangle is less than 1000.</p>

*******OutputConstraints*******

<p>For each test case, print the result using the following format: <br /><br /> k. V <br /><br /> where k is the test case number (starting at 1,) is a single space, and V is the maximum value of a sub-triangle in that test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 6 -24 0 12 -10 12 40 -4 6
4 1 1 -1 1 1 -1 1 -1 1 1 -1 1 -1 1 -1 1
0
<br /><br /><strong>Output:</strong><br />1. 54
2. 4
<br /></pre>


______________________________________________________
ANARC08E||||||true||||||


<p>
You: What's the score? Did I miss much?
<br><br>Me: It's 2-1 for elAhli and the second half just started. The first half was quite boring.
<br><br>You: Who scored first? elAhli or ezZamalek?
<br><br>Me: What difference does it make?
<br><br>You: Big difference! I can predict the outcome of the match if I knew the order of which goals were scored in the first half.
<br><br>Me: What do you mean?
<br><br>You: It's 2-1 for elAhli, right? One of three things could have happened: elAhli scored two goals then ezZamalek scored; Or, elAhli scored its first goal, then ezZamalek, then elAhli again; Or, ezZamalek scored first, then elAhli scored its two goals.
<br><br>Me: So?!! I still don't understand what difference does that make? It's still 2-1 for elAhli! Why don't you just relax and let us continue watching the game in peace.
<br><br>You: You don't understand!! I believe the probability of who'll win depends on the order of how goals were scored. Now I have to predict the outcome for 3 possibilities.
<br><br>Me: And what if the score was 3-2? What would you have done then?
<br><br>You: I would have to work for 5 different possibilities. No?
<br><br>Me: Of course not! The number of possibilities isn't always equal to the sum.
<br><br>You: Can you tell me when will it be equal to the sum?
<br><br>Me: You're a programmer, why don't you write a program that counts the number of possibilities and compare it to the sum?
<br><br>You: I don't have the time, I want to watch the match. Besides, I have nine other problems to worry about.
<br><br>Me: I'll give you a hint. The possibilities will be equal to the sum only if one of the teams scored a certain number of goals.

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case specifies two natural numbers (A  and B ) (separated by one or more spaces) representing the score of the first half. No team will be able to score more than 10 goals. The last line of the input file contains two -1's (which is not part of the test cases.)


*******OutputConstraints*******

<p>Format For each test case where the number of possibilities is equal to the sum, print:
<br><br>
A+B=C
<br><br>
Where A and B are as above and C is their sum. If the number of possibilities is not equal to the sum, replace the '=' sign with '!=' (without the quotes.) 


*******IOTestCases*******


<pre>
<b>Input:</b>
2 1
1 0
-1 -1

<b>Output:</b>
2+1=3
1+0=1
</pre>



______________________________________________________
ANARC08F||||||true||||||


<p>Einbahnstrasse (German for a one-way street) is a street on which vehicles should only move in one direction. One reason for having one-way streets is to facilitate a smoother flow of traffic through crowded areas. This is useful in city centers, especially old cities like Cairo and Damascus. Careful planning guarantees that you can get to any location starting from any point. Nevertheless, drivers must carefully plan their route in order to avoid prolonging their trip due to one-way streets. Experienced drivers know that there are multiple paths to travel between any two locations. Not only that, there might be multiple roads between the same two locations. Knowing the shortest way between any two locations is a must! This is even more important when driving vehicles that are hard to maneuver (garbage trucks, towing trucks, etc.)
<br><br>
You just started a new job at a car-towing company. The company has a number of towing trucks parked at the company's garage. A tow-truck lifts the front or back wheels of a broken car in order to pull it straight back to the company's garage. You receive calls from various parts of the city about broken cars that need to be towed. The cars have to be towed in the same order as you receive the calls. Your job is to advise the tow-truck drivers regarding the shortest way in order to collect all broken cars back in to the company's garage. At the end of the day, you have to report to the management the total distance traveled by the trucks.


*******InputConstraints*******

<p>Your program will be tested on one or more test cases. The first line of each test case specifies three numbers (N , C , and R ) separated by one or more spaces. The city has N  locations with distinct names, including the company's garage. C  is the number of broken cars. R  is the number of roads in the city. Note that 0 < N < 100 , 0 <= C < 1000 , and R < 10000 . The second line is made of C + 1  words, the first being the location of the company's garage, and the rest being the locations of the broken cars. A location is a word made of 10 letters or less. Letter case is significant. After the second line, there will be exactly R  lines, each describing a road. A road is described using one of these three formats:
<br><br>
A --v-> B
<br>A <-v-- B
<br>A <-v-> B
<br><br>
A and B are names of two different locations, while v is a positive integer (not exceeding 1000) denoting the length of the road. The first format specifies a one-way street from location A to B , the second specifies a one-way street from B to A , while the last specifies a two-way street between them. A , "the arrow", and B are separated by one or more spaces. The end of the test cases is specified with a line having three zeros (for N , C , and R .)
<br><br>
The test case in the example below is the same as the one in the figure.
<br><center>
<img src=http://www.spoj.pl/content/ahmed_aly:ANARC08F.png></center>


*******OutputConstraints*******

<p>For each test case, print the total distance traveled using the following format:
<br><br>
k. V
<br><br>
Where k is test case number (starting at 1,) is a space, and V is the result. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4 2 5
NewTroy Midvale Metrodale
NewTroy   <-20-> Midvale
Midvale   --50-> Bakerline
NewTroy    <-5-- Bakerline
Metrodale <-30-> NewTroy
Metrodale  --5-> Bakerline
0 0 0

<b>Output:</b>
1. 80
</pre>



______________________________________________________
ANARC08G||||||true||||||


<p>Falling Stocks. Bankrupted companies. Banks with no Cash. Seems like the best time to invest: "Think I'll buy me a football team!"
<br><br>
No seriously, I think I have the solution to at least the problem of cash in banks. Banks nowadays are all owing each other great amounts of money and no bank has enough cash to pay other banks' debts even though, on paper at least, they should have enough money to do so. Take for example the inter-bank loans shown in figure (a). The graph shows the amounts owed between four banks (A ...D). For example, A owes B 50M while, at the same time, B owes A 150M. (It is quite common for two banks to owe each other at the same time.) A total amount of 380M in cash is needed to settle all debts between the banks. 
<br>
<img src=http://www.spoj.pl/content/ahmed_aly:ANARC08G.png>
<br>
In an attempt to decrease the need for cash, and after studying the example carefully, I concluded that there's a lot of cash being transferred unnecessarily. Take a look:
<br><br>
1. C owes D the same amount as D owes A, so we can say that C owes A an amount of 30M and get D out of the picture.
<br><br>2. But since A already owes C 100M, we can say that A owes C an amount of 70M.
<br><br>3. Similarly, B owes A 100M only, (since A already owes B 50M.) This reduces the above graph to the one shown in figure (b) which reduces the needed cash amount to 190M (A reduction of 200M, or 53%.)
<br><br>4. I can still do better. Rather than B paying A 100M and A paying 70M to C, B can pay 70M (out of A's 100M) directly to C. This reduces the graph to the one shown in figure (c). Banks can settle all their debts with only 120M in cash. A total reduction of 260M or 68%. Amazing!
<br><br>
I have data about inter-bank debts but I can't seem to be able to process it to obtain the minimum amount of cash needed to settle all the debts. Could you please write a program to do that? 

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on N + 1  lines where N < 1, 000  is the number of banks and is specified on the first line. The remaining N  lines specifies the inter-bank debts using an NXN  adjacency matrix (with zero diagonal) specified in row-major order. The ith row specifies the amounts owed by the ith bank. Amounts are separated by one or more spaces. All amounts are less than 1000. The last line of the input file has a single 0.


*******OutputConstraints*******

<p>For each test case, print the result using the following format:
<br><br>
k. B A
<br><br>
where k is the test case number (starting at 1,) is a space character, B is the amount of cash needed before reduction and A is the amount of cash after reduction. 


*******IOTestCases*******


<pre>
<b>Input:</b>
4
  0  50 100   0
150   0  20   0
  0   0   0  30
 30   0   0   0
0

<b>Output:</b>
1. 380 120
</pre>



______________________________________________________
ANARC08H||||||true||||||


In the traditional game of Musical Chairs, N + 1  children run around N  chairs (placed in a circle) as long as music is playing. The moment the music stops, children run and try to sit on an available chair. The child still standing leaves the game, a chair is removed, and the game continues with N  children. The last child to sit is the winner.
<br><br>
In an attempt to create a similar game on these days' game consoles, you modify the game in the following manner: N Children are seated on N chairs arranged around a circle. The chairs are numbered from 1 to N . Your program pre-selects a positive number D . The program starts going in circles counting the children starting with the first chair. Once the count reaches D , that child leaves the game, removing his/her chair. The program starts counting again, beginning with the next chair in the circle. The last child remaining in the circle is the winner.<br>
<p style="text-align: center;"><img src=http://www.spoj.pl/content/ahmed_aly:ANARC08H.png></p>
<p style="text-align: left;">For example, consider the game illustrated in the figure above for N = 5  and D = 3 . In the figure, the dot indicates where counting starts and Ã—  indicates the child leaving. Starting off, child #3 leaves the game, and counting restarts with child #4. Child #1 is the second child to leave and counting restart with child #2 resulting in child #5 leaving. Child #2 is the last to leave, and child #4 is the winner. Write a program to determine the winning child given both N  and D .


*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case specifies two positive integers N  and D  on a single line, separated by one or more spaces, where N, D < 1,000,000 .
<br><br>
The last line of the input file contains two 0's and is not part of the test cases. 


*******OutputConstraints*******

<p>For each test case, write the winner using the following format:
<br><br>
N D W
<br><br>
Where N and D are as above, is a space character, and W is the winner of that game. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
7 4
0 0

<b>Output:</b>
5 3 4
7 4 2
</pre>



______________________________________________________
ANARC08I||||||true||||||


<p>According to Wikipedia, a Walsh matrix is a specific square matrix, with dimensions equal to a power of 2, the entries of which are +1 or -1, and the property that the dot product of any two distinct rows (or columns) is zero. Below are the first three Walsh Matrices. (The gray lines are imaginary lines for illustration purpose only.)
<p style="text-align: center;">
<img src=http://www.spoj.pl/content/ahmed_aly:ANARC08I1.PNG>
<p style="text-align: left;">
A Walsh Matrix of size 2^(N+1)  can be constructed as the "union" of 4 Walsh Matrices of size 2^N  arranged such that the lower right matrix is inverted whereas the other 3 matrices are not, i.e.:
<p style="text-align: center;">
<img src=http://www.spoj.pl/content/ahmed_aly:ANARC08I2.PNG>
<p style="text-align: left;">
Let's number the rows of a given Walsh Matrix from the top starting with row 0. Similarly, let's number the columns of the matrix from the left starting with column 0. Given the four integers N , R , S , and E , write a program that will construct a Walsh Matrix of size 2^N  and will print the sum of all the numbers in row #R between columns #S and #E (inclusive.)

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified using a single line listing four integers in the following order: N , R , S , and E , where 0 <= N <= 60 , 0 <= R < 2^N  , 0 <= S <= E < 2N  , and E - S <= 10,000 . The last line of the input file has four -1's and is not part of the test cases.


*******OutputConstraints*******

<p>For each test case, print the output on a single line.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 1 0 1
48 0 0 47
-1 -1 -1 -1

<b>Output:</b>
0
48
</pre>



______________________________________________________
ANARC08J||||||true||||||


<p>Formula One is the highest class of car racing sports. A typical Formula One season consists of a series of races called "Grands Prix" which constructors like Ferrari, Renault, etc. and others participate with one or more cars driven by the best drivers in the world. During the season, teams compete in two parallel championships: the drivers championship and the teams championship.
<br><br>
In the drivers championship, drivers compete to achieve the maximum total number of points by the end of the season, the rules of the competition states that the top eight drivers at each Grand Prix receive 10,8,6,5,4,3,2,1 points respectively. In case of points tie, the driver with the highest number of first places leads. If still tied, then the highest second places, and so on till the highest 8th places. If still tied, then drivers are sorted lexicographically by their last and then by their first names.
<br><br>
After each race, the points received by each driver are added to his team's pocket, and at the end of the season the team with the highest number of points wins the teams championship. To add excitement to the season, team sponsors are allowed to buy drivers from other teams even within the same season. In case of points tie between teams, teams are sorted lexicographically by their names. In this problem, you are given data of a formula one season and you're asked to process these data according to the rules above to determine both the drivers and teams standings. 


*******InputConstraints*******

<p>Your program will be tested on one or more data-sets, each representing a Formula One season. All input lines are 255 characters or less. Studying the sample I/O you'll discover that the first line of each season has an integer N , where 0 < N < 32  and representing the number of Grands Prix in that season. For each Grand Prix, the name of the Grand Prix appears on a line by itself (maximum length is 64 characters) followed by a table of the first name, last name and team name of the top eight drivers, from 1 to 8, in that Grand Prix. Each of the first and last names is a sequence of printable ASCII characters, no longer than 12 characters, and contains no spaces. Each team name is a sequence of printable ASCII characters, no longer than 18 characters, and may contain spaces (but no leading or trailing spaces.) Each team name is followed by a single period '.' which is not part of the name. Trailing white space may follow. A line of three -'s follows the listing of each Grand Prix. The last line of the input file contains a single zero. 


*******OutputConstraints*******

<p>For each data set in the input you must print "Season k :" where k  is the data-set number (starting from 1.) The next line must state "Drivers Standing:". On subsequent lines list the drivers standing for that season. For each driver, print their first and last names separated by exactly one space and left justified in a field of width 25, followed by a single space, followed by the total number of points achieved by the driver during the season. The drivers standing should be followed by a blank line.
<br><br>
The next line must state "Teams Standing:" On subsequent lines list the teams standing for the that season. For each team, print the team name left justified in a field of width 25, followed by a single space, followed by the total number of points the team has scored during the season. The teams standing should be followed by a blank line. 


*******IOTestCases*******


<pre>
<b>Input:</b>
2 
FORMULA 1 Gran Premio Telefonica de Espana 2006
Pos  Driver                    Team
1    Fernando Alonso           Renault.
2    Michael Schumacher        Ferrari.
3    Giancarlo Fisichella      Renault.
4    Felipe Massa              Ferrari.
5    Kimi Raikkonen            McLaren-Mercedes.
6    Jenson Button             Honda.
7    Rubens Barrichello        Honda.
8    Nick Heidfeld             Sauber-BMW.
---
FORMULA 1 Grand Prix de Monaco 2006
Pos  Driver                    Team
1    Fernando Alonso           Renault.
2    Jaun-Pablo Montoya        McLaren-Mercedes.
3    David Coulthard           RBR-Ferrari.
4    Rubens Barrichello        Honda.
5    Michael Schumacher        Ferrari.
6    Giancarlo Fisichella      Renault.
7    Nick Heidfeld             Sauber-BMW.
8    Ralf Schumacher           Toyota.
---
0

<b>Output:</b>
Season 1:
Drivers Standing:
Fernando Alonso          20
Michael Schumacher       12
Giancarlo Fisichella     9
Jaun-Pablo Montoya       8
Rubens Barrichello       7
David Coulthard          6
Felipe Massa             5
Kimi Raikkonen           4
Jenson Button            3
Nick Heidfeld            3
Ralf Schumacher          1

Teams Standing:
Renault                  29
Ferrari                  17
McLaren-Mercedes         12
Honda                    10
RBR-Ferrari              6
Sauber-BMW               3
Toyota                   1
</pre>



______________________________________________________
ANARC05B||||||false||||||

<p>   </p>
<table style="width: 100%; background-color: #5ed22c;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC05B/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC05B/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Two &#64257;nite, strictly increasing, integer sequences are given. Any common integer between the two sequences constitute an intersection point. Take for example the following two sequences where intersection points are<br />printed in bold:<br />First= 3 5 <strong>7</strong> 9 20 <strong>25</strong> 30 40 <strong>55</strong> 56 <strong>57</strong> 60 62<br />Second= 1 4 <strong>7</strong> 11 14 <strong>25</strong> 44 47 <strong>55</strong> <strong>57</strong> 100<br />You can &lsquo;walk&rdquo; over these two sequences in the following way:<br />1. You may start at the beginning of any of the two sequences. Now start moving forward.<br />2. At each intersection point, you have the choice of either continuing with the same sequence you&rsquo;re currently on, or switching to the other sequence.<br />The objective is &#64257;nding a path that produces the maximum sum of data you walked over. In the above example, the largest possible sum is 450&nbsp; which is the result of adding 3, 5, 7, 9, 20, 25, 44, 47, 55, 56, 57, 60, and 62</p>

______________________________________________________
ANARC05H||||||false||||||

<p>&nbsp;</p>
<p>   </p>
<table style="width: 100%; background-color: #44c23c;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC05H/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC05H/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Given a non-empty string composed of digits only, we may group these digits into sub-groups (but maintaining their original order) if, for every sub-group but the last one, the sum of the digits in a sub-group is less than or equal to the sum of the digits in the sub-group immediately on its right. Needless to say, each digit will be in exactly one sub-group.</p>
<p><br />For example, the string 635 can only be grouped in one sub-group [635] or in two sub-groups as follows: [6-35] (since 6 &lt; 8.) Another example is the string 1117 which can be grouped in one sub-group [1117] or as in the<br />following: [1-117], [1-1-17], [1-11-7], [1-1-1-7], [11-17],and [111-7] but not any more, hence the total number of possibilities is 7.</p>
<p><br />Write a program that computes the total number of possibilities of such groupings for a given string of digits.</p>
<h1 style="text-align: center;">Input</h1>
<p>Your program will be tested on a number of test cases. Each test case is speci&#64257;ed on a separate line. Each line contains a single string no longer than 25, and is made of decimal digits only.</p>
<p><br />The end of the test cases is identi&#64257;ed by a line made of the word "bye" (without the quotes.) Such line is not part of the test cases.</p>
<h1 style="text-align: center;">Output</h1>
<p>For each test case, write the result using the following format:</p>
<pre>k. n</pre>
<p>where k is the test case number (starting at 1,) and n is the result of this test case.</p>
<h1 style="text-align: center;">Sample</h1>
<pre style="text-align: justify;">input<br />635<br />1117<br />9876<br />bye<br /><br />output<br />1. 2<br />2. 7<br />3. 2<br /></pre>
<p> </p>


______________________________________________________
ANARC05I||||||false||||||

<p>&nbsp;</p>
<p>   </p>
<table style="width: 100%; background-color: #44c23c;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="%7B$base%7Dproblems/%7B$code%7D/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="%7B$base%7Dproblems/%7B$code%7D/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Imagine a 2D diagram drawn in the following way: Starting at the origin, you&rsquo;re given a sequence of letters which is entirely made of the following four letters &rsquo;U&rsquo;, &rsquo;D&rsquo;, &rsquo;L&rsquo;,and &rsquo;R&rsquo;.A &rsquo;U&rsquo; is an instruction for you to move one unit upward and drawing a segment at the same time. Similarly, &rsquo;D&rsquo; is for moving down, &rsquo;L&rsquo; for left, and &rsquo;R&rsquo; for right.</p>
<p>For example, &#64257;gure (a) is drawn by giving the sequence &rsquo;UURDLL&rsquo; while &#64257;gure (b) is the result of &rsquo;UURRRDLLLLUURRRDDD&rsquo; (in both &#64257;gures, the starting point is identi&#64257;ed by a small circle.)</p>
<p><br />While segments are allowed to intersect, they&rsquo;re not allowed to overlap. In other words, any two segments will have, at most, one point in common. We&rsquo;re interested in knowing the number of closed polygons, not containing any lines inside, in such diagrams. Figure (a), has only one closed polygon while &#64257;gure (b) has three. Write a program to do exactly that.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://i42.tinypic.com/30kgi9i.jpg" alt="" width="194" height="325" /></p>
<h1 style="text-align: center;">Input</h1>
<p>Your program will be tested on one or more test cases. Each test case is speci&#64257;ed on a separate line. The diagram is speci&#64257;ed using a sequence made entirely of (U|D|L|R) and terminated by the letter &rsquo;Q&rsquo;. All letters are capital letters. None of the segments in a test case will overlap.</p>
<p><br />The end of test cases is identi&#64257;ed by the letter &rsquo;Q&rsquo; on a line by itself.</p>
<p>Length of each sequence is smaller than 1000.</p>
<h1 style="text-align: center;">Output</h1>
<p>For each test case, write the answer on a separate line.</p>
<h1 style="text-align: center;">Sample</h1>
<pre style="text-align: justify;">input<br />UURDLLQ<br />UURRRDLLLLUURRRDDDQ<br />Q<br /><br />output<br />1<br />3<br /></pre>
<p> </p>


______________________________________________________
ANARC07C||||||false||||||

<p>&nbsp;</p>
<p>   </p>
<table style="width: 100%; background-color: #44c23c;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC07C/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC07C/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Any square grid can be viewed as one or more rings, one inside the other. For example, as shown in &#64257;gure (a), a 5 x 5 grid is made of three rings, numbered 1,2 and 3 (from outside to inside.) A square grid of size N is said to be sorted, if it includes the values from 1 to N^2 in a row-major order, as shown in &#64257;gure (b) for N = 4. We would like to determine if a given square grid can be sorted by only rotating its rings. For example, the grid in &#64257;gure (c) can<br />be sorted by rotating the &#64257;rst ring two places counter-clockwise, and rotating the second ring one place in the clockwise direction.</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://i39.tinypic.com/ael5xh.jpg" alt="" width="136" height="447" /></p>
<h1 style="text-align: center;">Input</h1>
<p>Your program will be tested on one or more test cases. The &#64257;rst input line of a test case is an integer N which is the size of the grid. N input lines will follow, each line made of N integer values specifying the values in the grid in a row-major order. Note than 0 &lt;N &le; 1, 000 and grid values are natural numbers less than or equal to 1,000,000.</p>
<p>The end of the test cases is identi&#64257;ed with a dummy test case with N =0.</p>
<p>&nbsp;</p>
<p style="text-align: center;">&nbsp;</p>
<h1 style="text-align: center;">Output</h1>
<p>For each test case, output the result on a single line using the following format:</p>
<pre>k. result</pre>
<p>Where k is the test case number (starting at 1,) and result is "YES" or "NO" (without the double quotes.) and single space between "." and "result".</p>
<h1 style="text-align: center;">Sample</h1>
<pre style="text-align: justify;">input<br />4<br />9 5 1 2<br />13 7 11 3<br />14 6 10 4<br />15 16 12 8<br />3<br />1 2 3<br />5 6 7<br />8 9 4<br />0<br /><br />output<br />1. YES<br />2. NO<br /></pre>
<p> </p>


______________________________________________________
ANARC07G||||||false||||||

<pre><br /></pre>
<p>   </p>
<table style="width: 100%; background-color: #44c23c;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC07G/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/ANARC07G/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>A favorite pastime for big families in Acmestan is going to the movies. It is quite common to see a number of these multi-generation families going together to watch a movie. Movie theaters in Acmestan have two types of tickets: A single ticket is for exactly one person while a family ticket allows a parent and their children to enter the theater.&nbsp; Needless to say, a family ticket is always priced higher than a single ticket, sometimes as high as &#64257;ve times the price of a single ticket.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://i39.tinypic.com/a9pwqo.jpg" alt="" /></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">It is quite challenging for families to decide which ticket arrangement is most economical to buy. For example, the family depicted in the &#64257;gure on the right has four ticket arrangements to choose from: Seven single tickets; Two family tickets; One family ticket (for adam, bob, cindy)plus four single tickets for the rest; Or, one family ticket (for bob and his four children) plus single tickets for the remaining two.</p>
<p style="text-align: justify;"><br />Write a program to determine which ticket arrangement has the least price. If there are more than one such arrangement, print the arrangement that has the least number of tickets.</p>
<h1 style="text-align: center;">Input</h1>
<p>Your program will be tested on one or more test cases. The &#64257;rst line of each test case includes two positive integers (S and F)where S is the price of a single ticket and F is the price of a family ticket. The remaining lines of the test case are either the name of a person going by him/herself, or of the form:</p>
<pre>N1 N2 N3 ... Nk<br /><br /></pre>
<p>where N1 is the name of a parent, with N2 ... Nk being his/her children. Names are all lower-case letters, and no longer than 1000 characters. No parent will be taking more than 1000 of their children to the movies :-). Names are unique, the name of a particular person will appear at most twice: Once as a parent, and once as a child. There will be at least one person and at most 100,000 people in any test case.</p>
<p>The end of a test case is identi&#64257;ed by the beginning of the following test case (a line made of twointegers.) The end of the last test case is identi&#64257;ed by two zeros.</p>
<h1 style="text-align: center;">Output</h1>
<p>For each test case, write the result using the following format:</p>
<pre>k. NS NF T</pre>
<p>Where k is the test case number (starting at 1,) NS is the number of single tickets, NF is the number of family tickets, and T is the total cost of tickets.</p>
<h1 style="text-align: center;">Sample</h1>
<pre style="text-align: justify;">input<br />1 3<br />adam bob cindy<br />bob dima edie fairuz gary<br />1 2<br />john<br />paul<br />george<br />ringo<br />1 3<br />a b c<br />0 0<br /><br />output<br />1. 2 1 5<br />2. 4 0 4<br />3. 0 1 3<br /></pre>
<p> </p>


______________________________________________________
CYCLERUN||||||true||||||


<p>There are N cities, numbered from 1 to N,&nbsp;in the country you are living. <strong>Each pair</strong> of the cities is connected with exactly one road. However, <strong>each road is a one-way road</strong>, so it is either possible to go&nbsp;directly from A to B or from B to A for each pair of cities (A, B).</p>
<p>You are living in city #1 and you are practicing for upcoming cycling marathon, so you want to construct the following training plan:</p>
<p>First day you have to ride over 3 roads starting from and finishing in city #1.</p>
<p>Second day you have to ride over 4 roads in the same manner.</p>
<p>Third day you have to ride over 5 roads.</p>
<p>...</p>
<p>The last, (N-2)-th, day you have to ride over N roads starting from and finishing in city #1.</p>
<p>You don't like to visit the same city more than once per day, so you have to find a training route for each day that passes through <strong>each city at most once</strong>. City #1 should appear only at the start and at the end of each route.</p>
<p>Write the program that, given the layout of the network, outputs training route for each day, or writes "impossible" if such training plan is not achievable.</p>

*******InputConstraints*******

<p>The first line of input contains the integer N (3 &le; N &le; 1000), number of cities.</p>
<p>Each of the next N lines contains exactly N characters that describes network layout. <em>j</em>-th character in&nbsp;<em>i</em>-th of these lines is '1' if it is possible to ride from city number <em>i</em> to city number <em>j</em>, or '0' otherwise.</p>

*******OutputConstraints*******

<p>You should output training route for each day in a separate line. Training route consists of space separated integers - numbers of the cities in order they should be visited. Each training route starts and ends with 1.</p>
<p>If there is no achievable training plan, output word 'impossible' in a single line, instead.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
01000
00011
11001
10100
10010

<strong>Output:</strong>
1 2 5 1
1 2 4 3 1
1 2 4 3 5 1
</pre>


______________________________________________________
ABCDEF||||||false||||||

<p>You are given a set S of integers between -30000 and 30000 (inclusive).</p>
<p>Find the total number of sextuples <img style="border: 0px initial initial;" src="../../../content/kalinov:abcdef1" alt="" width="255" height="20" />&nbsp;that satisfy:&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/kalinov:abcdef2" alt="" width="107" height="42" /></p>
<p style="text-align: center;">&nbsp;</p>

______________________________________________________
GCJ08C||||||true||||||


<p>Near the planet Mars, in a faraway galaxy eerily similar to our own, there is a fight to the death between the imperial forces and the rebels. The rebel army has N ships which we will consider as points (xi, yi, zi). Each ship has a receiver with power pi. The rebel army needs to be able to send messages from the central cruiser to all the ships, but they are tight on finances, so they cannot afford a strong transmitter.
<br><br>
If the cruiser is placed at (x, y, z), and one of the other ships is at (xi, yi, zi) and has a receiver of power pi, then the power of the cruiser's transmitter needs to be at least:
<br><br>
(|xi - x| + |yi - y| + |zi - z|) / pi
<br><br>
Your task is to find the position for the cruiser that minimizes the power required for its transmitter, and to output that power. 


*******InputConstraints*******

<p>The first line of input gives the number of cases, T. T test cases follow.
<br><br>
Each test case contains on the first line the integer N, the number of ships in the test case.
<br><br>
N lines follow, each line containing four integer numbers xi, yi, zi and pi, separated by single spaces. These are the coordinates of the i-th ship, and the power of its receiver. There may be more than one ship at the same coordinates.
<br><br>1 &#8804; T &#8804; 20
<br>0 &#8804; xi, yi, zi &#8804; 10^6
<br>1 &#8804; pi &#8804; 10^6
<br>1 &#8804; N &#8804; 1000


*******OutputConstraints*******

<p>For each input case, you should output:
<br><br>
Case #X: Y
<br><br>
where X is the number of the test case and Y is the minimal power that is enough to reach all the fleet's ships. Answers with a relative or absolute error of at most 10-6 will be considered correct. 


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4
0 0 0 1
1 2 0 1
3 4 0 1
2 1 0 1
1
1 1 1 1
3
1 0 0 1
2 1 1 4
3 2 3 2

<b>Output:</b>
Case #1: 3.500000
Case #2: 0.000000
Case #3: 2.333333
</pre>



______________________________________________________
WLOO0707||||||true||||||


<p>After a day trip with his friend Dick, Harry noticed a strange pattern of tiny holes in the door of his SUV. The local American Tire store sells fiberglass patching material only in square sheets. What is the smallest patch that Harry needs to fix his door?
<br><br>
Assume that the holes are points on the integer lattice in the plane. Your job is to find the area of the smallest square that will cover all the holes.


*******InputConstraints*******

<p>The first line of input contains a single integer T expressed in decimal with no leading zeroes, denoting the number of test cases to follow. The subsequent lines of input describe the test cases.
<br><br>
Each test case begins with a single line, containing a single integer n expressed in decimal with no leading zeroes, the number of points to follow; each of the following n lines contains two integers x and y, both expressed in decimal with no leading zeroes, giving the coordinates of one of your points.
<br><br>
You are guaranteed that T <= 30 and that no data set contains more than 30 points. All points in each data set will be no more than 500 units away from (0,0).


*******OutputConstraints*******

<p>Print, on a single line with two decimal places of precision, the area of the smallest square containing all of your points. An answer will be accepted if it lies within 0.01 of the correct answer.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
-1 -1
1 -1
1 1
-1 1
4
10 1
10 -1
-10 1
-10 -1

<b>Output:</b>
4.00
242.00
</pre>



______________________________________________________
FENCE3||||||true||||||


<p> Farmer John has decided to construct electric fences. He has fenced his fields into a number of bizarre shapes and now must find the optimal place to locate the electrical supply to each of the fences.
<br><br>
A single wire must run from some point on each and every fence to the source of electricity. Wires can run through other fences or across other wires. Wires can run at any angle. Wires can run from any point on a fence (i.e., the ends or anywhere in between) to the electrical supply.
<br><br>
Given the locations of all F (1 <= F <= 150) fences (fences are always parallel to a grid axis and run from one integer gridpoint to another, 0 <= X,Y <= 100), your program must calculate both the total length of wire required to connect every fence to the central source of electricity and also the optimal location for the electrical source.
<br><br>
The optimal location for the electrical source might be anywhere in Farmer John's field, not necessarily on a grid point. 


*******InputConstraints*******

<p>The first line contains F, the number of fences.
<br>F subsequent lines each contain two X,Y pairs each of which denotes the endpoints of a fence.


*******OutputConstraints*******

<p> On a single line, print three space-separated floating point numbers, each with a single decimal place. Presume that your computer's output library will round the number correctly.
<br><br>
The three numbers are:
<br><br>
* the X value of the optimal location for the electricity,
<br>* the Y value for the optimal location for the electricity, and
<br>* the total (minimum) length of the wire required. 


*******IOTestCases*******


<pre>
<b>Input:</b>
3
0 0 0 1
2 0 2 1
0 3 2 3

<b>Output:</b>
1.0 1.6 3.7
</pre>



______________________________________________________
NWERC04H||||||true||||||


<p>For some years, quite a lot of work has been put into listening to electromagnetic radio signals received from space, in order to understand what civilizations in distant galaxies might be trying to tell us. One signal source that has been of particular interest to the scientists at UniversitÂ´e de Technologie Spatiale is the Nebula Stupidicus.
<br><br>
Recently, it was discovered that if each message is assumed to be transmitted as a sequence of integers a0, a1, ...an-1 the function f(k) = <img src=http://www.spoj.pl/content/ahmed_aly:NWERC04H.PNG> (mod p) always evaluates to values 0 <= f(k) <= 26 for 1 <= k <= n, provided that the correct value of p is used. n is of course the length of the transmitted message, and the ai denote integers such that 0 <= ai < p. p is a prime number that is guaranteed to be larger than n as well as larger than 26. It is, however, known to never exceed 30 000.
<br><br>
These relationships altogether have been considered too peculiar for being pure coincidences, which calls for further investigation.
<br><br>
The linguists at the faculty of Langues et Cultures Extraterrestres transcribe these messages to strings in the English alphabet to make the messages easier to handle while trying to interpret their meanings. The transcription procedure simply assigns the letters a..z to the values 1..26 that f(k) might evaluate to, such that 1 = a, 2 = b etc. The value 0 is transcribed to &#8217;*&#8217; (an asterisk). While transcribing messages, the linguists simply loop from k = 1 to n, and append the character corresponding to the value of f(k) at the end of the string.
<br><br>
The backward transcription procedure, has however, turned out to be too complex for the linguists to handle by themselves. You are therefore assigned the task of writing a program that converts a set of strings to their corresponding Extra Terrestial number sequences.


*******InputConstraints*******

<p>On the first line of the input there is a single positive integer N, telling the number of test cases to follow. Each case consists of one line containing the value of p to use during the transcription of the string, followed by the actual string to be transcribed. The only allowed characters in the string are the lower case letters &#8217;a&#8217;..&#8217;z&#8217; and &#8217;*&#8217; (asterisk). No string will be longer than 70 characters.


*******OutputConstraints*******

<p>For each transcribed string, output a line with the corresponding list of integers, separated by space, with each integer given in the order of ascending values of i.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
31 aaa
37 abc
29 hello*earth

<b>Output:</b>
1 0 0
0 1 0
8 13 9 13 4 27 18 10 12 24 15
</pre>



______________________________________________________
ARITHSEQ||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/ARITHSEQ/en/">English</a></td>
<td width="50%"><a href="/problems/ARITHSEQ/vn/">Ti&#7871;ng Vi&#7879;t</a></td> 
</tr></table>


<p>
Given an arithmetic sequence a, a + d, a + 2*d, ..., a + n*d.
</p>

<h3>Request</h3>
<p>
Count the number of digit x appearing in the given sequence.
</p>


*******InputConstraints*******

<p>
- A line containing a, d, n, x.
</p>


*******OutputConstraints*******

<p>
- The result found.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
10 5 2 0

<b>Output:</b>
2
</pre>


______________________________________________________
PMATRIX||||||true||||||


<p style="text-align: justify;">Consider the following exercise, found in a generic linear algebra textbook.Let A be an n &times; n matrix. Prove that the following statements are equivalent:</p>
<ul>
<li>(a) A is invertible.</li>
<li>(b) Ax = b has exactly one solution for every n &times; 1 matrix b.</li>
<li>(c) Ax = b is consistent for every n &times; 1 matrix b.</li>
<li>(d) Ax = 0 has only the trivial solution x = 0.</li>
</ul>
<p style="text-align: justify;">The typical way to solve such an exercise is to show a series of implications. For instance,one can proceed by showing that (a) implies (b), that (b) implies (c), that (c) implies (d),and &#64257;nally that (d) implies (a). These four implications show that the four statements are equivalent. Another way would be to show that (a) is equivalent to (b) (by proving that (a) implies (b) and that (b) implies (a)), that (b) is equivalent to (c), and that (c) is equivalent to (d).</p>
<p style="text-align: justify;"><br />However, this way requires proving six implications, which is clearly a lot more work than just proving four implications! I have been given some similar tasks, and have already started proving some implications. Now I wonder, how many more implications do I have to prove? Can you help me determine this ?</p>

*******InputConstraints*******

<p>On the &#64257;rst line one positive number: the number of testcases, at most 100. After that per testcase:</p>
<ul>
<li style="text-align: justify;"> One line containing two integers n (1 &le; n &le; 20 000) and m (0 &le; m &le; 50 000): the number of statements and the number of implications that have already been proved.</li>
<li style="text-align: justify;">m lines with two integers s1 and s2 (1 &le; s1, s2 &le; n and s1 = s2) each, indicating that it has been proved that statement s1 implies statement s2.</li>
</ul>

*******OutputConstraints*******

<p style="text-align: justify;">Per testcase:<br />One line with the minimum number of additional implications that need to be proved in order to prove that all statements are equivalent.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />4 0<br />3 2<br />1 2<br />1 3<br /><br /><strong>Output:</strong><br />4<br />2<br /></pre>


______________________________________________________
CCROSS||||||true||||||


<p style="text-align: justify;">Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier. To do so, we will model the mountain as follows: the mountain consists of n adjacent stacks of stones, and each of the stacks is hi high. The successive height differences are therefore h<sub>i+1</sub> &minus; h<sub>i </sub>(for 1 &lt;=  i &lt;=  n &minus; 1). We would like all absolute values of these height differences to be smaller than or equal to some number d.</p>
<p style="text-align: justify;"><br />We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number?</p>

*******InputConstraints*******

<p style="text-align: justify;">On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p>
<ul style="text-align: justify;">
<li>One line with two integers n (2 &lt;= n &lt;= 100) and d (0  &lt;= d &lt;= 10^9): the number of stacks of stones and the maximum allowed height difference.</li>
<li style="text-align: justify;">One line with n integers hi (0 &lt;= h<sub>i </sub>&lt;= 10^9): the heights of the stacks.</li>
</ul>
<p style="text-align: justify;">&nbsp;</p>

*******OutputConstraints*******

<p style="text-align: justify;">Per testcase:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; One line with the minimum number of stones that have to be added or removed or &ldquo;impossible&rdquo; if it is impossible to achieve the goal.</p>
<p style="text-align: justify;">&nbsp;</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />3<br />10 2<br />4 5 10 6 6 9 4 7 9 8<br />3 1<br />6 4 0<br />4 2<br />3 0 6 3<br /><br /><strong>Output:</strong><br />6<br />impossible<br />4<br /></pre>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; text-align: justify;">Problem text...</div>
<p>&nbsp;</p>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; text-align: justify;">Problem text...</div>


______________________________________________________
GASWARS||||||true||||||


<p>As the result of the gas wars the following agreement was made. The transit of the gas was allowed under the following conditions. There are <b>n</b> transit nodes and <b>m</b> pipes connecting those nodes. There <b>k</b> nodes where the gas enters and <b>l</b> nodes where it should be moved. Each pipe has a carrying capacity of <b>c<sub>i</sub></b> cubic meters of gas per day. Gas can go through the pipes in either direction. It is needed to move <b>g</b> cubic meters of gas in total through the pipeline every day. The cost of the transit is defined as <b>maxC</b>*100 thousand dollars, where <b>maxC</b> &#8211; maximum of carrying capacities of the used in the transit pipes (even those which are not fully used). You are to find the minimum possible cost of transit for the given pipeline.


*******InputConstraints*******

<p>The first line of the input file contains <b>t</b> &#8211; the amount of test cases. The description of each test case follows. The first line of each test case contains five integers separated by spaces &#8211; <b>n</b>, <b>m</b>, <b>k</b>, <b>l</b>, <b>g</b>. Then <b>m</b> lines containing three integers <b>a</b>, <b>b</b>, <b>c</b> follow. Each lines means that nodes with numbers <b>a</b> and <b>b</b> are connected by the pipe with the carrying capacity of <b>c</b>. Next line contains <b>k</b> integers &#8211; the numbers of nodes where the gas should enter the pipeline. The last line of the test case contains <b>l</b> integers &#8211; the numbers of nodes where the gas should be moved. The gas can enter the pipeline in any of the <b>k</b> entrance nodes and can be moved to any of the <b>l</b> exit nodes. The nodes are numbered from 1 to <b>n</b>.


*******OutputConstraints*******

<p>For each test case output a single integer on a separate line &#8211; the minimum cost of transit in thousands of dollars. If the transit of the needed volume is impossible, then output -1.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
6 8 1 1 1
1 2 1
1 3 2
2 4 3
2 5 3
3 4 4
3 5 2
4 6 4
5 6 1
1
6

<b>Output:</b>
200
</pre>



______________________________________________________
HHEMANT||||||true||||||


<p style="text-align: justify;">Steganography is a method of cryptography where a message or entire document can be hidden inside of another file or image which shows no evidence that there is data hidden in it. Typically, the message or document to be sent is first encrypted and compressed, and then combined with an existing file in the bits that are less significant.<br /><br />Hemant Verma is a secret agent who wants to send some classified information to his head office , the amount of data is very large , he needs your help to encode the message into image . You will be given an "image" and you will encode a given message into it and return the new image. The returned image should be in the same format as the original image.<br /><br /><br />The image will be in the format of a string of various lines where each three digits represent a number from 0 to 255, inclusive (leading zeros will be added as necessary), which is a pixel value in the image.You will also be given a&nbsp; message which contains the message you would like to encode into the image. <br /><br />You will first encode the message into numbers representing the characters in the message - spaces will be 0, 'A'-'Z' will be 1-26, 'a'-'z' will be 27-52, '0'-'9' will be 53-62, and 63 will be used for any space after the message. All these numbers can be represented in binary with 6 digits. You will put each pair of bits (representing a number between 0 and 3) into the lowest two bits of the values in the image. For each character, you will put in the lowest two bits, then the middle two, then the highest two, and then continue to the next character. You will put them in the lowest two bits of the first pixel on the first row, then the second pixel on the first row, and so on until you get to the end of the first row, then the first pixel on the second row, and so on. Once you are out of characters, continue substituting the lowest two bits of each pixel value as if the current character were represented by number 63.</p>

*******InputConstraints*******

<p>First line contain T representing number of test case , for each test case first line contain message&nbsp; then follow N the number of lines for image then following N line contain image.</p>
<p style="text-align: center;"><br />0&lt;Length(message)&lt;1000<br />0 &lt; T,N &lt; 10000</p>

*******OutputConstraints*******

<p>For each test case output the image in same format as input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />hi<br />1<br />255123212001201222<br />hi<br />2<br />255123212<br />001201222<br /><br /><strong>Output:</strong><br />254120214003200222<br />254120214<br />003200222</pre>


______________________________________________________
WIRELESS||||||false||||||

<p>Bob is sitting at home with his computer. He would like to experience more social interaction, so he is planning a trip to a coffee shop with his computer.</p>
<p>Bob has lots of data about wireless networks and coffee shops in the city. In Bob&rsquo;s city, there is one coffee shop at every intersection of streets. Specifically, Bob happens to live in a city with <em>M</em> streets (1 &le; <em>M</em> &le; 30000) that run east and west, and <em>N</em> streets (1 &le; <em>N</em> &le; 1000) that run north and south. As an added benefit, the distance between consecutive parallel streets is 1 metre (it is a very compact city).</p>
<p>It also turns out that inside <em>K</em> (1 &le; <em>K</em> &le; 1000) of the coffee shops, there is a wireless network station. Each wireless network station will have a particular bitrate <em>B</em> (1 &le; <em>B</em> &le; 1000) and can reach <em>R</em> metres (1 &le; <em>R</em> &le; 30000) from the coffee shop. In other words, a wireless network station from one coffee shop forms a circle with radius <em>R</em> centered at that particular coffee shop. Moreover, if someone is at distance <em>R</em>, the wireless network would be available, but if someone is at a distance larger than <em>R</em>, they cannot access that wireless point.</p>
<p>You can assume that each coffee shop has at most one wireless network stationed in it, but that multiple wireless networks may be available while sitting in that one coffee shop, due to the proximity of other wireless network stations.</p>
<p>Bob has a special device in his computer that can use all of the available bitrates of as many wireless networks as he can connect to.</p>
<p>Bob would like to find out the maximum bitrate he can obtain, and how many coffee shops would have that maximum capacity.</p>

______________________________________________________
GREMLINS||||||false||||||

<p>Gremlins are small funny furry creatures. Once they were considered to be evil but that time has past and most gremlins live a decent family life now.&nbsp;There are N distinct types of gremlins.</p>
<p>Their origin is rather mysterious. Legend says that T years ago, N gremlins, one of each type, were born in a lab accident.</p>
<p>Their reproduction method is, however, well studied. No mating ritual is required for gremlins to multiply. All they need is a few drops of water and the magic happens.</p>
<p>Once a <em>type i</em> gremlin starts its reproduction process, K<sub>i</sub> small furry balls are created. For each furry ball we know what is the type of gremlin that will hatch from the furry ball and how long will it take for that to happen. Unfortunately, the original gremlin dies in the process.&nbsp;A <em>type i</em> gremlin will start its reproduction process exactly Y<sub>i</sub> years after it is <strong>born</strong>&nbsp;(ie. hatched from the furry ball).</p>
<p>Knowledge about the ancestors of a gremlin is passed on genetically, so each gremlin knows a list of his ancestors as soon as it is born.</p>
<p>Write a program that will find the length of the longest list of ancestors among all gremlins that ever lived (gremlins that still live are included, but unhatched furry balls are not), given the information about reproduction process and time elapsed since the lab accident that created initial gremlins, assuming<strong>&nbsp;all gremlins that were supposed to hatch this year have already hatched</strong>.</p>

______________________________________________________
CCROSSX||||||true||||||


<p style="text-align: justify;">Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier. To do so, we will model the mountain as follows: the mountain consists of n adjacent stacks of stones, and each of the stacks is h<sub>i</sub> high. The successive height differences are therefore h<sub>i+1</sub> &minus; h<sub>i </sub>(for 1 &le; i &le; n&minus;1). We would like all absolute values of these height differences to be smaller than or equal to some number d.</p>
<p style="text-align: justify;">We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number?</p>

*******InputConstraints*******

<p style="text-align: justify;">On the first line one positive number: the number of test cases, at most 50. After that, for each test case:</p>
<ul style="text-align: justify;">
<li>One line with two integers n (2 &le; n &le; 10000) and d (0 &le; d &le; 10^9): the number of stacks of stones and the maximum allowed height difference.</li>
<li style="text-align: justify;">One line with n integers hi (0 &le; h<sub>i&nbsp;</sub>&le; 10^9): the heights of the stacks.</li>
</ul>

*******OutputConstraints*******

<p>For each test case, output one line with the minimum number of stones that have to be added or removed, or &ldquo;impossible&rdquo; if it is impossible to achieve the goal.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />10 2<br />4 5 10 6 6 9 4 7 9 8<br />3 1<br />6 4 0<br />4 2<br />3 0 6 3<br /><br /><strong>Output:</strong><br />6<br />impossible<br />4<br /></pre>


______________________________________________________
FUNPROB||||||true||||||


<p style="text-align: justify;">Yanu is a great fan of Harry Potter.So on the day of the movie release, Yanu rushes to the movie theatre to watch the movie. On the release of the 6th movie, on reaching the theatre she found a long queue for tickets already.As the distirbution was about to start, the ticket counter did not have any change to start with. There are N+M people in queue,where N have Rs 10.00 and M have Rs 5.00. The ticket costs Rs 5.00.<br /><br /><br />Now Yanu is math geek too , now she wonders What is the probability that the theatre can always provide change.</p>

*******InputConstraints*******

<p style="text-align: justify;">Each line contain N and M , seperated by a space , End of Input is marked by 0 0 which should not be processed. Both N and M fits in integer range.</p>

*******OutputConstraints*******

<p>For each input , output the respective probability upto 6 decimal digits.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 0<br />0 1<br />41 41<br />0 0<br /><br /><strong>Output:</strong><br />0.000000<br />1.000000<br />0.023810<br /><br /></pre>


______________________________________________________
TWICE||||||true||||||


<p>Given a string S, find the longest substring that appears at least twice in S (occurrences may overlap).</p>

*******InputConstraints*******

<p>The first line contains an integer L (1 &le; L &le; 200000), the length of S.</p>
<p>The second line contains the string S, consisting of exactly L lowercase letters ('a'-'z').</p>

*******OutputConstraints*******

<p>Output the length of the longest substring that appears at least twice in S. If there is no such substring, output 0.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />11<br />sabcabcfabc<br /><br /><strong>Output:</strong><br />3<br /><br /><strong>Input:</strong><br />18<br />trutrutiktiktappop<br /><br /><strong>Output:</strong><br />4<br /></pre>


______________________________________________________
GPINTRI||||||true||||||


<p>How many points (x, y) with non-negative integer coordinates satisfy y &lt;= ax / b and x &lt;= n?</p>

*******InputConstraints*******

<p>The first line contains an integer T (T &lt;= 100000). T lines follow, each contains three positive integers n, a, b, where n, a, b &lt;= 10<sup>9</sup> and a &lt;= b.</p>

*******OutputConstraints*******

<p>T lines, each contains a single integer denoting to the number of points according to the description.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />8 2 10<br />8 4 4<br />7 1 5<br />713241932 127894722 957823358<br />759096725 496666160 980149020<br /><br /><strong>Output:</strong><br />13<br />45<br />11<br />33963383064794976<br />145994569610845896<br /></pre>
<p><strong>Warning: enormous input/output data, be careful with certain languages</strong></p>


______________________________________________________
ZSEQ||||||true||||||


<p>You will be given a sequence A containing <strong>N</strong> positive integers, <strong>a<sub>1</sub></strong>, <strong>a<sub>2</sub></strong>, ..., <strong>a<sub>N</sub></strong>.<br />Let <strong>S(i, j)</strong> = <strong>a<sub>i</sub></strong> + <strong>a<sub>i + 1</sub></strong> + ... + <strong>a<sub>j</sub></strong>, if i &lt;= j.<br />You should find <strong>K</strong> - 1 indexes, <strong>m<sub>1</sub></strong> &lt; <strong>m<sub>2</sub></strong> &lt; ... &lt; <strong>m<sub>K - 1</sub></strong> such that <strong>lb<sub>1</sub> </strong>&lt;= <strong>S(1, m<sub>1</sub>)</strong> &lt;= <strong>ub<sub>1</sub></strong>, ..., <strong>lb<sub>i</sub></strong> &lt;= <strong>S(m<sub>i - 1</sub> + 1, m<sub>i</sub>)</strong> &lt;= <strong>ub<sub>i</sub></strong> and <strong>lb<sub>K</sub></strong> &lt;= <strong>S(m<sub>K - 1</sub> + 1, N)</strong> &lt;= <strong>ub<sub>K</sub></strong>.<br />If the case of multiple solution, print the first lexicographically.</p>

*******InputConstraints*******

<p>The first line of the standard input contains two space-separated integers <strong>N</strong> (2 &lt;= <strong>N</strong> &lt;= 5 000) and <strong>K</strong> (1 &lt;= <strong>K</strong> - 1 &lt;= <strong>N</strong> - 1). Next <strong>N</strong> lines contain integers <strong>a<sub>1</sub></strong>, <strong>a<sub>2</sub></strong>, ..., <strong>a<sub>N</sub></strong>, respectively, 1 &lt;= <strong>a<sub>i</sub></strong> &lt;= 10<sup>5</sup>.<br /><strong>i</strong>-th of the next <strong>K</strong> lines contain integers <strong>lb<sub>i</sub></strong> and <strong>ub<sub>i</sub></strong>, 1 &lt;= <strong>lb<sub>i</sub></strong> &lt;= <strong>ub<sub>i</sub></strong> &lt;= 10<sup>9</sup>.</p>

*******OutputConstraints*******

<p>On the first line of the standard ouput you should print space-separated <strong>K</strong> - 1 indices of the solution as already explained. If such solution does not exist, you should print only one integer -1.</p>
<p>&nbsp;</p>
<p><strong>Note:</strong></p>
<p>Memory limit is 16MBs.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 3<br />1<br />2<br />3<br />4<br />1 3<br />2 4<br />3 10<br /><br /><strong>Output:</strong>
1 2<br /><br /><br /><strong>Input:<br /></strong>4 3<br />1<br />2<br />3<br />4<br />1 3<br />2 4<br />3 4<br /><br /><strong>Output:<br /></strong>2 3<br /><br /><br /><strong><strong>Input:<br /></strong></strong>4 3<br />1<br />2<br />3<br />4<br />1 3<br />2 4<br />3 3<br /><strong><strong><br />Output:</strong></strong><br />-1</pre>


______________________________________________________
PA06ANT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PA06ANT/en/">English</a></td>
<td width="50%"><a href="/problems/PA06ANT/vn/">Ti&#7871;ng Vi&#7879;t</a></td> 
</tr></table>


<p>
A Byteotian ant is walking along the edges of ABCDEFGH cube: <br/>
<center>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/anhdq:pa06ant_img1.png" />
</center>
</p>

<p>It tries to find out, in how many ways it can go from one given vertex, to another given vertex, walking along exactly <b>k</b> edges (when the ant enters an edge, it will not turn back and will finally reach the second end of this edge). If the ant goes through some edge <b>x</b> times, we count this edge <b>x</b> times. The ant would like to have interesting routes, that is if the ant is in some vertex, it would like to leave this vertex using an edge other than the edge recently used to enter this vertex (i.e. it want not to use the same edge twice in a row).
</p>

<p>
Our ant is not so smart, because it can only count using integers from <b>0</b> to <b>p-1</b>, for some <b>p</b>, so you should compute the result modulo <b>p</b>.
</p>

<h3>Request</h3>
<p>
Write a program which:<br/>
    * reads the starting and the ending vertex of the ant's route, number of edges on the ant's route, and integer <b>p</b>,<br/>
    * computes number of interesting routes, which satisfy the ant's requests, modulo <b>p</b>,<br/>
    * writes the answer to the standard output.
</p>


*******InputConstraints*******

<p>
The first line of the standard input contains two capital English letters <b>v<sub>1</sub></b> and <b>v<sub>2</sub></b>, separated by a single space. The two letters denote the starting and ending vertex of the ant's route respectively. The second line contains two integers <b>k</b> and <b>p</b>, separated by a single space.
</p>


*******OutputConstraints*******

<p>
Exactly one integer is to be written on the standard output. This integer is the number of interesting routes from the vertex <b>v<sub>1</sub></b> to the vertex <b>v<sub>2</sub></b>, containing exactly <b>k</b> edges, modulo <b>p</b>.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
A B
3 100

<b>Output:</b>
2
</pre>

<p>
<center>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/anhdq:pa06ant_img2.png" />
</center>
</p>


______________________________________________________
BRI||||||true||||||


<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">Find a place to build a bridge over the river, so as to minimize total cost of the route between two cities A and B, located on opposite sides of the river.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../content/shkoorah:bridge.png" alt="" /></p>

*******InputConstraints*******

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">There is a single positive integer <var>T</var> on the first line of input (equal to about 100000). It stands for the number of test cases to follow. Each test case is exactly one line, containing six integers a, b, c, h, s1 and s2 (0 &lt; a, b, c, h, s1, s2 &lt; 100), separated by spaces. a - the distance from city A to the river (the length of segment AE in the figure), b - the distance from city B to the river (the length of segment FG in the figure), c - the distance between A and B along the axis parallel to the river (the length of segment BF in the figure) and h - the width of the river (EG in the figure). s1 and s2 are the costs of unit of road and bridge respectively.</p>

*******OutputConstraints*******

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">For each test case your program should write a single number to the standard output, equal to the minimal total cost of the route between A and B, accurate up to two digits after the decimal dot.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } --><br />1<br />1 1 1 1 1 1<br /><br /><br /><strong>Output:</strong><br /><!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } --><br />3.16<br /><br /></pre>


______________________________________________________
AMBIG||||||false||||||


______________________________________________________
DAGCNT2||||||true||||||


<p>You are given a weighted <acronym title="Directed Acyclic Graph">DAG</acronym>. For each vertex, calculate the sum of the weights of the vertices within its reach (including itself).</p>

*******InputConstraints*******

<p>The first line contains an integer T, denoting the number of test cases.</p>
<p>For each test case, the first line contains two positive integers n and m, denoting the number of vertices and the number of edges in the DAG.</p>
<p>The second line contains n positive integers w<sub>1</sub>..w<sub>n</sub>, denoting the weights of vertices.</p>
<p>The next m lines contain two positive integers u,v, denoting an edge from u to v.</p>

*******OutputConstraints*******

<p>For each test case, print a line consisting of n numbers, denoting the sum for each vertex.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />4 3<br />510 713 383 990 <br />4 1<br />4 2<br />2 1<br />4 4<br />450 379 230 520 <br />3 4<br />2 4<br />2 3<br />2 4<br /><br /><strong>Output:</strong><br />510 1223 383 2213<br />450 1129 750 520<br /></pre>

______________________________________________________
RLM||||||false||||||

<p>Run-length encoding of a number replaces a run of digits (that is, a sequence of consecutive equivalent digits) with the number of digits followed by the digit itself. For example, 44455 would become 3425 (three fours, two fives). Note that run-length encoding does not necessarily shorten the length of the data: 11 becomes 21, and 42 becomes 1412. If a number has more than nine consecutive digits of the same type, the encoding is done greedily: each run grabs as many digits as it can, so 111111111111111 is encoded as 9161.</p>
<p>Implement an integer arithmetic calculator that takes operands and gives results in run-length format. You should support addition, subtraction, multiplication, and division. You won't have to divide by zero or deal with negative numbers.</p>

______________________________________________________
FACT1||||||true||||||


<p>This is a problem to test the robustness of your Integer Factorization algorithm.</p>
<p>
Given some integers, you need to factor them into product of prime numbers.
</p>
<p>
The largest integer given in the input file has 20 digits.
<a href='/problems/FACT2'>FACT2</a> is a harder version of this problem (the numbers are larger).
</p>
<p>You may need to use a general factorization algorithm since no special numbers (e.g. Fermat numbers) are considered when designing the input data.</p>


*******InputConstraints*******

<p>There are several numbers given, each one in a line. </p>
<p>The input ends with a number 0.</p>
<p>The number of test cases is about 10.</p>


*******OutputConstraints*******

<p>For each number, print in a line the factorization of it. See examples below for the output format.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3111989
13091989
2432902008176640000
77145199750673
0

<b>Output:</b>
317^1 9817^1
17^2 89^1 509^1
2^18 3^8 5^4 7^2 11^1 13^1 17^1 19^1
328439^1 234884407^1
</pre>



______________________________________________________
FACT0||||||true||||||


<p>This is a problem to test the robustness of your Integer Factorization algorithm.</p>
<p>
Given some integers, you need to factor them into product of prime numbers.
</p>
<p>
The largest integer given in the input file has 15 digits.
<a href='/problems/FACT1'>FACT1</a> is a harder version of this problem (the numbers are larger).
</p>
<p>You may need to use a general factorization algorithm since no special numbers (e.g. Fermat numbers) are considered when designing the input data.</p>


*******InputConstraints*******

<p>There are several numbers given, each one in a line. </p>
<p>The input ends with a number 0.</p>
<p>The number of test cases is about 10.</p>


*******OutputConstraints*******

<p>For each number, print in a line the factorization of it. See examples below for the output format.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3111989
13091989
77145199750673
0

<b>Output:</b>
317^1 9817^1
17^2 89^1 509^1
328439^1 234884407^1
</pre>



______________________________________________________
FACT2||||||true||||||


<p>This is a problem to test the robustness of your Integer Factorization algorithm.</p>
<p>
Given some integers, you need to factor them into product of prime numbers.
</p>
<p>
The largest integer given in the input file has 29 digits.
</p>
<p>You may need to use a general factorization algorithm since no special numbers (e.g. Fermat numbers) are considered when designing the input data.</p>


*******InputConstraints*******

<p>There are several numbers given, each one in a line. </p>
<p>The input ends with a number 0.</p>
<p>The number of test cases is about 10.</p>


*******OutputConstraints*******

<p>For each number, print in a line the factorization of it. See examples below for the output format.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3111989
13091989
2432902008176640000
77145199750673
0

<b>Output:</b>
317^1 9817^1
17^2 89^1 509^1
2^18 3^8 5^4 7^2 11^1 13^1 17^1 19^1
328439^1 234884407^1
</pre>



______________________________________________________
BRII||||||true||||||


<p>Problem <a href="/problems/BRI/">BRIDGE</a> has shown that you are able to build the cheap bridge through the river very quickly. Now you will not have problems with time limit. You will have problems with number of bridges.</p>

<p style="text-align: center;"><img src="http://www.spoj.pl../../content/shkoorah:bridge2.png" alt="" /></p>


*******InputConstraints*******

<p>There is a single positive integer <i>T</i> on the first line of input. It stands for the number of test cases to follow. Each test case is exactly five lines, containing description of the route between two cities A and B, located on opposite sides of the rivers.</p>

<p><i>
n<br />
a<sub>0</sub> a<sub>1</sub> a<sub>2</sub> ...  a<sub>n</sub><br />
h<sub>1</sub> h<sub>2</sub> ...  h<sub>n</sub><br />
c<br />
s<sub>0</sub> s<sub>1</sub> s<sub>2</sub> ...  s<sub>n</sub><br />
</i></p>

<p>Here <i>n</i> is the number of the rivers which are parallel to each other, <i>a<sub>i</sub></i> - the distances between rivers or between rivers and cities, <i>h<sub>i</sub></i> - the widths of the rivers, <i>c</i> - the distance between A and B along the axis parallel to the river, <i>s<sub>i</sub></i> - the costs of the unit of the bridge through <i>i<sub>th</sub></i> river and <i>s<sub>0</sub></i> - the cost of the unit of the road. Example for <i>n</i>=2 you can see on the picture.</p>

<p>All integers in input are positive and less than 50, except <i>c</i> - it is less than 2000.</p>



*******OutputConstraints*******

<p>For each test case your program should write a single number to the standard output, equal to the minimal total cost of the route between A and B, accurate up to two digits after the decimal dot.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
1 1 1
1 1
1
1 1 1

<b>Output:</b>
5.10
</pre>



______________________________________________________
GOALFR||||||true||||||


<h1>Goal for Ra&uacute;l</h1>
<p>What would a Madrid programming contest be without some task about Real Madrid? It's a team with a marvellous history of records. For example, the team's topscorer Ra&uacute;l Gonz&aacute;lez has scored 318 goals so far (in 704 games). In this task you are going to help Ra&uacute;l shoot his 319th.<br /><br />Consider a game between Real Madrid and FC Barcelona. The match is in a critical situation: 10 seconds before the end, the score is 3:3 and Ra&uacute;l has the opportunity of a direct free kick. The question you have to answer is: Is it possible for Ra&uacute;l to score a goal by kicking the ball in a straight line?<br /><br />To model a soccer game, think of the pitch as a rectangle in a coordinate grid, aligned to the axes. The pitch is centred at (0, 0). It is 105m long and 68m wide, thus x &isin; [-52.5, +52.5] and y &isin; [-34, +34]. The goal is 7.32m long and centred on the short side of the field. The coordinates of the four goal posts are thus (&plusmn;52.5, &plusmn;3.66). Real Madrid is on the left side and has to shoot the ball into the right goal (where x&gt;0).<br /><br />To simplify things a bit, we think of the ball and the goal posts as points in space without any volume. Players, on the other hand, have an action radius, i.e. the maximum distance from their position where they can still reach the ball.</p>

*******InputConstraints*******

<p>The input consists of several test cases. The first line of the input file contains one integer N, the number of cases that follow.<br /><br />Each test case starts with a blank line. Then follow the x and y coordinates of the ball. The third line contains the x coordinate, y coordinate and action radius of the FC Barcelona Goalkeeper.<br /><br />Have a look at the images and the corresponding sample input given:</p>
<table border="0" align="center">
<tbody>
<tr>
<th scope="col">Sample input 1</th><th scope="col">Sample input 2</th>
</tr>
<tr>
<td><img title="Sample input 1: Goal!" src="../../../content/jbw:goal_for_raul_1.png" alt="Sample input 1: Goal!" width="150" height="89" /></td>
<td><img title="Sample input 2: no Goal" src="http://www.spoj.pl/content/jbw:goal_for_raul_2.png" alt="Sample input 2: no Goal" width="150" height="87" /></td>
</tr>
<tr>
<td>Goal</td>
<td>No Goal</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case, print a line containing one of the following words:<br /><br />"Goal!" if it is possible to shoot the ball in a straight line into the goal, without the goalkeeper intercepting it.<br /><br />"No goal..." if it is not possible to do so.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br /><br />15.0 -20.0<br />42.5 2.0 5.0<br /><br />20.0 11.0<br />34.0 6.0 5.0<br /><br /><strong>Output:</strong><br />Goal!<br />No goal...<br /></pre>


______________________________________________________
MOWS||||||true||||||


<p>As you know, PolyProg wants to send EPFL's best coders to Madrid. Now an important question that arises is where they should stay. Apart from being a cheap place, it should also be close to the contest location and the main tourist spots.<br /><br />Now the problem is that there are mostly one-way streets in Madrid (actually there aren't, but this problem is so nice that we wanted to include it in this contest nevertheless). We would like to get to the contest and back to the hotel without breaking any traffic rules... can you help finding a hotel that allows to do so?<br /><br />To be precice, we'd like to find a hotel that allows us to go to each place of interest and back again. If that's not possible, we'd like a hotel that allows us to travel to and from as many places of interest as possible. If the same number of places can be accessed from several hotels, you should choose the hotel with the smallest id.</p>

*******InputConstraints*******

<p>The first line of the input contains 1 &le; <em>N</em> &le; 10, the number of test cases. Then follow three numbers 1&nbsp;&le;&nbsp;<em>H</em>&nbsp;&le;&nbsp;1000, 1&nbsp;&le;&nbsp;<em>P</em>&nbsp;&le;&nbsp;100'000 and 1&nbsp;&le;&nbsp;<em>S</em>&nbsp;&le;&nbsp;1'000'000 denoting the number of hotels, places of interest and streets, respectively.<br /><br />In order to simplify things, we just represent hotels and places of interests as numbers: Hotels are numbered from 1 to <em>H</em>, whereas places are numbered from 1001 to 1000&nbsp;+&nbsp;<em>P</em>.</p>
<p>Each of the following <em>S</em> lines contains two numbers <em>A<sub>s</sub></em> and <em>B<sub>s</sub></em>, indicating that there is a one-way street from object <em>A<sub>s</sub></em> to <em>B<sub>s</sub></em>.</p>
<p>A blank line precedes each test case.</p>
<p>The sample input corresponds to the following graph:</p>
<p style="text-align: center;"><img title="Graph for sample input" src="../../../content/jbw:madrids_one_way_streets.png" alt="Graph for sample input" width="400" height="348" /></p>

*******OutputConstraints*******

<p>For each testcase, print the id of the best hotel followed by the number of places of interest accessible from this hotel (and vice versa) on a line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br /><br />2 4 10<br />1 1001<br />2 1001<br />2 1002<br />2 1003<br />2 1004<br />1001 1002<br />1002 1<br />1002 1003<br />1004 2<br />1004 1001<br /><br /><strong>Output:</strong><br />1 2<br /></pre>


______________________________________________________
FAKETSP||||||true||||||


<p>According to Wikipedia, "The Traveling Salesman Problem (TSP) is a problem in combinatorial optimization studied in operations research and theoretical computer science. Given a list of cities and their pairwise distances, the task is to find a shortest possible tour that visits each city exactly once.  The problem was first formulated as a mathematical problem in 1930 and is one of the most intensively studied problems in optimization. It is used as a benchmark for many optimization methods. Even though the problem is computationally difficult, a large number of heuristics and exact methods are known, so that some instances with tens of thousands of cities can be solved."</p>
<p>Fortunately, you won't have to solve TSP. You're working for a very clever traveling salesman who has already figured out the path he is going to take. All he needs from you is a quick way to figure out how far he traveled after every segment of his tour.</p>

*******InputConstraints*******

<p>The salesman kept detailed records of his travels. You'll be getting a series of lines of the form "Some text (X, Y)." indicating that the salesman has been at the point X kilometers east and Y kilometers north of the origin of a Cartesian plane.</p>

*******OutputConstraints*******

<p>For each segment of the trip, output the total distance traveled up to that point as a line in the format "The salesman has traveled a total of D kilometers." Show three digits after the decimal point when printing D. Note that the salesman only travels in straight lines (even after a couple of drinks).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
I started out at (0, 5).
Then I traveled to (3.7, 5).
After a couple of drinks I wobbled to (2.7, 4).
The next morning I woke up near (4, 3).
I finished my journey in (-.2, 8).

<strong>Output:</strong>
The salesman has traveled a total of 3.700 kilometers.
The salesman has traveled a total of 5.114 kilometers.
The salesman has traveled a total of 6.754 kilometers.
The salesman has traveled a total of 13.284 kilometers.
</pre>


______________________________________________________
LIM||||||true||||||


<h1>Lost in Madrid</h1>
<p>Programming contests can be very exhausting. After five hours of intensive programming, you want to get some well-deserved rest and make yourself on the way to your hotel. Unfortunately, you don't quite remember the way to get there... but that doesn't matter: In good spirits (due to a successful contest?) you set out.</p>
<p>As you don't know the exact way, you decide to walk around in the following fashion: Start at the contest site (denoted by id&nbsp;0) and choose a street at random. Follow the street to the next intersection, and choose another street at random. Every street at an intersection has the same probability of being chosen. You might even decide to take the street back where you came from. As you're on foot, you can use the streets in both directions, unlike in "Madrid's One Way Streets".</p>
<p>Your walk stops once you encounter your hotel (id&nbsp;=&nbsp;300) or one of the tourist information booths (id&nbsp;&gt;&nbsp;290) where you can ask for the way. You can assume there is at least one path connecting you to either type of object.</p>
<p>Because you don't speak a lot of spanish (apart from some verbs that you can conjugate thanks to problem "Spanish Verbs"), you'd like to know the probability that you arrive at your hotel directly, without first arriving at a tourist information booth.</p>

*******InputConstraints*******

<p>The input consists of several testcases, separated by an empty line.</p>
<p>Each testcase starts with <em>S</em>, the number of streets. The following <em>S</em> lines contain two numbers 0&nbsp;&le;&nbsp;<em>A,&nbsp;B</em>&nbsp;&le;&nbsp;300 each. This means that there is a street connecting intersection <em>A</em> to intersection <em>B</em>. The same street will not appear multiple times in the input.</p>
<p>The input ends with <em>S</em>=0. This testcase should not be processed.</p>

*******OutputConstraints*******

<p>For each testcase, print the probability to arrive directly at the hotel, rounded to three decimal places.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />0 291<br />0 292<br />0 300<br /><br />2<br />0 300<br />291 300<br /><br />2<br />0 291<br />291 300<br /><br />7<br />0 292<br />0 88<br />0 14<br />0 300<br />292 88<br />88 300<br />14 300<br /><br />0<br /><br /><strong>Output:</strong><br />0.333<br />1.000<br />0.000<br />0.579<br /></pre>


______________________________________________________
LFM||||||true||||||


<h1>Library for Madrid</h1>
<p>Good preparation is essential for winning programming contests. Thus, if you read this document, you're on the right track ;) Knowing your algorithms and the programming language you use is of prime importance. However, you don't have to learn everything by heart; each team is allowed to bring 25 pages of documentation to the contest.</p>
<p>Now the difficult question is: What should you put on those 25 pages? You know that you can fit 10 paragraphs of text on a page, but your stock of useful code snippets and handy texts is much larger than that. To make things more complicated, some topics depend on each other. You cannot include the line-circle intersection formula if you do not also include the code for lines, circles and points.</p>
<p>As a programmer, you decide to let your computer do the hard work for you. Given a set of topics, their space requirements and dependencies, write a program that prints the maximum number of topics that fit into the library.</p>

*******InputConstraints*******

<p>The input consists of several testcases. Each problem description starts with the numbers 1&nbsp;&le;&nbsp;<em>M</em>&nbsp;&le;&nbsp;100 and 0&nbsp;&le;&nbsp;<em>D</em>&nbsp;&le; 10, the number of topics and the number of dependencies. The following <em>M</em> lines contain the name of a topic (one word) and the number <em>L<sub>t</sub></em> of paragraphs (1&nbsp;&le;&nbsp;<em>L<sub>t</sub></em>&nbsp;&le;&nbsp;1000) of the topic, separated by a space.&nbsp; The next <em>D</em> lines each contain two topic names separated by space, indicating that the first topic depends on the second.</p>
<p>The input file ends with a testcase having <em>M</em>=0, which should not be processed.</p>

*******OutputConstraints*******

<p>For each test case, print a single line containing the maximum number of topics that you can fit in the library, followed by the number of free paragraphs that remain. If several solutions yield the same number of topics, choose the one that leaves as much empty space as possible.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 4<br />Dijkstra 50<br />Intersections 30<br />Lines 70<br />Circles 120<br />Points 40<br />Intersections Lines<br />Intersections Circles<br />Lines Points<br />Circles Points<br /><br />0 0<br /><br /><strong>Output:</strong><br />3 90<br /></pre>

______________________________________________________
CRAZYR||||||true||||||


<p>After having been wandering around Madrid for several hours, you finally reach the NH Zurbano hotel where all competitors will be located for the SWERC weekend. Each team received an ID number when it registered for SWERC. At your arrival, the receptionist at NH Zurbano asks you for that ID number and assigns you a room according to your team&rsquo;s registration ID and the one of the delegations that arrived prior to you.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../content/imuteb:crazy_receptionist.gif" alt="Crazy Receptionist" width="173" height="118" /></p>
<p>The hotel is as long and as high that it would be possible to accommodate all delegations either on the same floor or on different floors each. The elevator is at the reception side (left) and rooms are located at the first floor and above, on the right-hand side to the elevator. Now the receptionist&rsquo;s room assignment strategy is the following:</p>
<p>The receptionist takes you with the elevator to the first floor. Then you walk along the corridor until you arrive at a room that currently hosts a delegation with larger ID than yours. If no such team is on that floor, you get the first empty room you come across. In the opposite case, the team that currently occupies the room has to free it for you! Then the receptionist takes this team to the second floor and uses the same method to find a new room for this team. If the receptionist brings a team to a floor on which currently no other team is hosted, it is assigned the first room at that floor.</p>
<p>Although this placement strategy seems quite unorthodox, some members of the EPFL delegation got used to interlaced travel and rest, especially at airports and railway stations. Instead of being shocked by the fact of having to potentially change the room as further delegations arrive, your coach is even more impressed by that placement strategy and challenges you with the following question:<br /><br />Given the current assignment of the rooms, can you list all possible orders of arrival of the teams?</p>

*******InputConstraints*******

<p>The first line contains the number of test cases C (C&le;25). Each test case starts with the number of occupied floors F. The following F lines contain information about floors F, &hellip;, 1, starting from the top. First on each of these lines is an integer N, the number of teams at that floor. Following that, there are N integers on the line: the ID of the teams on that floor, starting from the elevator side (left). All IDs satisfy (1&le;ID&le;60). There are never more than T (T&le;15) teams in the hotel at the moment your coach challenges you. A blank line precedes each test case.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case, output first the number of the test case, then the number <em>P</em> of possible arrival orders. See the sample output for the exact format.</p>
<p>On the following min(10, <em>P</em>) lines, print the lexicographically smallest possible arrival orders.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br /><br />3<br />1 3<br />2 2 9<br />3 1 4 5<br /><br />2<br />1 3<br />2 1 2<br /><br /><strong>Output:</strong><br />Case 1 : 16<br />3 2 1 4 9 5<br />3 2 1 9 4 5<br />3 2 4 1 9 5<br />3 2 4 9 1 5<br />3 2 4 9 5 1<br />3 2 9 1 4 5<br />3 2 9 4 1 5<br />3 2 9 4 5 1<br />3 4 2 1 9 5<br />3 4 2 9 1 5<br /><br />Case 2 : 2<br />1 3 2<br />3 1 2<br /><br /><br /></pre>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 281px; width: 1px; height: 1px;"><!-- 		@page { margin: 20mm } 		P { margin-bottom: 2.12mm } -->
<p style="margin-bottom: 0mm;" align="justify"><span style="font-family: Arial,sans-serif;"><span style="font-size: x-small;"><span lang="en-GB">Given the current assignment of the rooms, can you list all possible orders of arrival of the teams?</span></span></span></p>
</div>


______________________________________________________
CASTANET||||||true||||||


<p>The contest just finished and you head out to show all the balloons you won to your coach who&rsquo;s amazed! Contest organizers know that coders can get really excited during the five hours of contest, so they planned to take you to a flamenco performance in order to relax you a bit before the awards ceremony starts. Flamenco is indeed a traditional Spanish musical genre. The music itself is complex, and the footwork is lightning fast and must be executed with extraordinary precision. In addition the dancer may have to dance while using props such as castanets, shawls and fans.</p>
<p style="text-align: center;"><img title="castanets" src="../../../content/imuteb:castanets_2.jpg" alt="castanets" width="100" height="133" /></p>
<p>The performer of this afternoon will be none other than Don Quijote de la Mancha! Unfortunately Don Quijote cannot find the scope for the castanets, nor does he remember it by heart. But he has always an encoded version of that scope with him, so that he can have a quick look at it just before the performance. As time is short, he needs your help to decode the encrypted version of the scope.<br /><br />The scope can be represented as a binary string b1..bN of N digits. &lsquo;1&rsquo; stands for clap the castanet, &lsquo;0&rsquo; means leave it quiet. Now the encryption was as follows:</p>
<p style="text-align: center;"><img title="matrix" src="../../../content/imuteb:castanets_1.jpg" alt="matrix" width="152" height="155" /></p>
<p>Given the original scope, the below matrix is formed from the rotated versions of the string.<br /><br />Then the rows of the matrix are sorted in alphabetical order (&lsquo;0&rsquo; &lt; &lsquo;1&rsquo;). The last column of this matrix, read from top to bottom, is the encrypted version of the scope Don Quijote is giving you. Your task would be to find the Fth line of the matrix, which is the original version of the castanet scope.</p>

*******InputConstraints*******

<p>The input consists of no more than T (T&le;100) test cases. Each test case starts with two integers, which denote the number of bits N and the desired line F respectively (1&le;F&le;N&le;1&rsquo;000). The next line contains N binary digits, the encrypted scope.</p>

*******OutputConstraints*******

<p>For each test case, output the scope for the castanets.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />2 2<br />10<br />5 1<br />11100<br /><br /><strong>Output:</strong><br />10<br />01011<br /></pre>

______________________________________________________
GUERNICA||||||true||||||


<p>Guernica is a famous painting by Pablo Picasso, depicting the bombing of the Basque town of Guernica during the Spanish Civil War. It shows the tragedies war inflicts upon individuals, particularly innocent civilians. The work has gained a monumental status, becoming a perpetual reminder of the tragedies of war, an anti-war symbol and an embodiment of peace.</p>
<p><br /><br />After you were told that the painting was moved from the Museo del Prado to the Museo Nacional Centro de Arte Reina Sofia in 1992, you are on your way to that place. At your arrival, a creepy sight awaits you: Malicious vandals have cut the Guernica painting into several pieces and distributed them throughout the whole museum. A team already gathered all N pieces they could find. All these pieces have the same dimensions! Observing the dimensions, they conclude that there are far too many pieces to rebuild only Guernica. The vandals did in fact not only disassemble the original painting by Picasso but also several copies of it! Exactly P pieces are needed to reconstruct Guernica (or any of its copies).<br /><br />Now experts have to evaluate how probable it is that sets of P pieces belonged to one and the same initial painting and assigned each such combination a matching score. By maximizing the total matching score, they would be able to determine which pieces belonged to the same initial painting. Can you help them calculating the overall maximum matching score for all of the paintings?</p>
<p style="text-align: center;"><img title="Guernica" src="../../../content/imuteb:guernica.jpg" alt="Guernica" width="631" height="283" /></p>

*******InputConstraints*******

<p>The input consists of several test cases (T&le;10), each of which starts by 3 integers on a line: the number of pieces found N, the number of pieces per painting P and Z, the number of possible combinations. (P, N&le;15, Z&le;1&rsquo;000) The next Z lines each contains P+1 positive integers (i1, i2, &hellip;, iP, s), that means a score of s is given to the combination (i1, i2, &hellip;, iP). (i1,..,iP &le;N, 0&lt;s&lt;10&rsquo;000) The last test case is followed by a single line with 3 zeros, which should not be processed.</p>

*******OutputConstraints*******

<p>For each test case, print the case number and the largest score. If it is impossible to group all pieces so that entire paintings result out of them, print -1.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />9 3 3<br />1 2 3 1<br />4 5 6 2<br />7 8 9 3<br />9 3 4<br />1 2 3 1<br />1 4 5 2<br />1 6 7 3<br />1 8 9 4<br />3 3 1<br />1 2 3 9<br />5 4 1<br />2 1 5 3 10<br />0 0 0<br /><br /><strong>Output:</strong><br />Case 1: 6<br />Case 2: -1<br />Case 3: 9<br />Case 4: -1<br /></pre>


______________________________________________________
STRGAMB||||||true||||||


<p>Madrid is a tremendously historic and monumental city that attracts several millions of visitors each year. Where there are tourists, there are also artists that entertain the crowds in the streets and gamblers that challenge pedestrians to often snaky games. One of them is just about to ask you for a game. Although you learned in problem X some basics of Spanish conjugation, you are not proficient enough to understand the rules of the game. This is why you decide to observe first some games, from which you succeede to extract the rules correctly:</p>
<table border="0">
<tbody>
<tr>
<td style="border-style: solid; border-width: 1px; text-align: center;">1</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">2</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">3</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">4</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">5</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">6</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">7</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">8</td>
</tr>
<tr>
<td style="border-style: solid; border-width: 1px; text-align: center;">&nbsp;</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">&nbsp;</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">O</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">&nbsp;</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">O</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">O</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">O</td>
<td style="border-style: solid; border-width: 1px; text-align: center;">O</td>
</tr>
</tbody>
</table>
<p>It is a two player game and players take alternate turns on a board with squares numbered from 1 to N. Some of the squares contain one Spanish 1 cent coin, others don&rsquo;t. At each turn, the player has to select one square containing a coin and removes the coin from the square, leaving that square empty. At the same time this player may, if he wishes so, select a second square to the left from the first one. In the left square, the player is allowed either to put 1 coin if this square is empty or to empty that box in case it contained a coin. The game finishes when there is no coin left on the board and the player to make the last move wins. <br /><br />Here are the turns you observed for the initial game constellation of the above figure:</p>
<pre>XXOXOOOO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tourist empties 7 and puts a coin in 4<br />XXOOOOXO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gambler empties 8 as well as 4<br />XXOXOOXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tourist empties 6 and puts a coin in 1<br />OXOXOXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gambler empties 5 and puts a coin in 2<br />OOOXXXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tourist empties 1<br />XOOXXXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gambler empties 3 as well as 2<br />XXXXXXXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tourist lost the game, as no coin is left</pre>
<p>You are a bit surprised that the gambler wins most of the games. He must indeed have several years of experience and know some tricks. As you are smart, you discover his trick. Supposing that both of you play optimally, that is, once you are in a winning constellation, <br /><br />you&rsquo;ll find the correct moves to win the game, can you tell for a given constellation whether you should make the first move or leave it to the gambler? Of course you want to win!</p>

*******InputConstraints*******

<p>The input consists of several test cases (T300), one per line that describes the initial board constellation as a string of &lsquo;O&rsquo;s and &lsquo;X&rsquo;s. Read from left to right, this string describes the board constellation from position 1 to position N (N255). &lsquo;O&rsquo; stands for a square with coin, &lsquo;X&rsquo; for an empty square. The input terminates on the string &ldquo;end&rdquo; that should obviously not be processed.</p>

*******OutputConstraints*******

<p>Output &ldquo;I&rsquo;d like to play first&rdquo; or &ldquo;After you&rdquo;, so that you will win the game.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />XXOOOX<br />OOOXX<br />XOOOOOOOO<br />XXXXOXXXXXXXOXOXXXXXXOXXXXXXXXX<br />end<br /><br /><strong>Output:</strong><br />I'd like to play first<br />After you<br />After you<br />I'd like to play first<br /></pre>


______________________________________________________
GCD3||||||true||||||


<p>Given N, M and K (1 &lt;= N, M &lt;= 100^200 and 1 &lt;= K &lt;= 16) which<br /><br />N = a + b<br />M = a^2 + b^2 - (2^K - 2) * a * b<br /><br />with a &gt; 0, b &gt; 0 and gcd(a, b) = 1.<br /><br />Your task is to find gcd(N, M).</p>

*******InputConstraints*******

<p>The input file consists of several data sets. The first line contains<br />the number of data sets T (1 &lt;= T &lt;= 10000). The fallowing T lines<br />describe the data sets, one triple (N, M, K) for each.</p>

*******OutputConstraints*******

<p>For each data test in the input write the gcd(N, M).</p>

*******IOTestCases*******

<pre><strong>Input:<br /><br /></strong>2<br />648570884104668119354133 420644191708310845403065233058235585438328857465 10<br />8017723549 59173349743176010825 9<br />
<strong>Output:<br /><br /></strong>1<br />1<br /><hr /><br />Note: For the first trio a = 648570884104668119354126 and b = 7.<br />For the second a = 8016478423 and b = 1245126.<br /></pre>


______________________________________________________
MBALL||||||true||||||


<p>A popular event at the feline Olympics is watching and wagering on the outcome of the house cats playing Mouseball [which has the same scoring rules as American football] but is played with a catnip mouse. Wagers often involved predicting the score and, of course, some scores are more likely to occur than others. Multiples of 7 are good bets, because teams typically go for touchdowns (6 points) then attempt to kick the football between the uprights for an extra point. A score of 4 is unlikely because safeties (2 points each) are rare.</p>
<p>A score of exactly 1 is nearly (though not) impossible to achieve: suppose Team A has just scored a touchdown; during the extra point attempt, Team A fumbles the ball; it is recovered by a player from Team B, who returns it almost the entire length of the field, but fumbles right before reaching the endzone; the ball is recovered by a player from Team A, who voluntarily enters his own endzone, where he is tackled by Team B; this counts as a safety, but because it was scored during an extra point attempt, Team B will only be awarded 1 point.</p>
<p>Not surprisingly, such a scenario is not known to have ever occurred in the history of the game. So for simplicity, we will ignore this possibility altogether and consider only the following ways of scoring points:<ul>
<li>a safety: 2 points, always</li>
<li>a field goal: 3 points</li>
<li>a touchdown: 6 points</li>
</ul></p>
<p>Additionally, after scoring a touchdown, a team attempts a "try." This may be either an extra point or a two-point conversion and will give, if successful, 1 or 2 points, respectively.</p>
<p>Write a program that, given a score, outputs the number of ways that score can be achieved. As an example, a team could score 10 points in exactly 5 ways:
<ul>
<li>5 safeties</li>
<li>2 field goals and 2 safeties</li>
<li>a touchdown, extra point good, and a field goal</li>
<li>a touchdown, a two-point conversion, and a safety</li>
<li>a touchdown with a failed try and 2 safeties</li>
</ul></p>
<p>Note that order is not important: a touchdown followed by a field goal is considered equivalent to a field goal followed by a touchdown.</p>

*******InputConstraints*******

<p>The first line of input will contain an integer N &lt;= 100, indicating the number of test cases. Each of the next N lines will contain an integer S, the number of points scored by a team in a game. S will be between 0 and 100000 inclusive. (Hey, the orange &amp; blue [Flame-point Siamese] team could make it happen.)</p>

*******OutputConstraints*******

<p>For each test case, output one line containing a single integer: the number of ways a team can score exactly S points.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
10
6

<strong>Output:</strong>
5
3
</pre>


______________________________________________________
PRETTY||||||true||||||


<p>Let S = {1, 2, 3, ..., N}.<br />For a given positive integer K, the function f : S --&gt; S is called "pretty" if, for every X in S, it holds that<br />f ( f ( f ( ... f ( X ) ... ) ) ) = X, where f is repeated exactly K times.<br /> <br />How many pretty functions are there, modulo M?</p>

*******InputConstraints*******

<p>Three natural numbers N, K and M. It holds that 1 &lt;= K &lt;= N &lt;= 30 000 and M &lt;= 10^9.</p>

*******OutputConstraints*******

<p>Number of pretty functions modulo M.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 1<br />1000<br /><br /><strong>Output:</strong><br />1</pre>
<pre><strong>Input:</strong><br />3 2<br />1000<br /><br /><strong>Output:</strong><br />4</pre>
<p>Explanation of the example input 2: there are four pretty functions, namely:<br />a) f(1) = 1, f(2) = 2, f(3) = 3; <br />b) f(1) = 2, f(2) = 1, f(3) = 3;<br />c) f(1) = 3, f(2) = 2, f(3) = 1;<br />d) f(1) = 1, f(2) = 3, f(3) = 2.</p>
<p>&nbsp;</p>


______________________________________________________
MYSTIC||||||false||||||

<p>In the Ancient Clash of Mystic Pandas (ACM Pandas) game, the player plays the role of a Panda Knight who needs to defend Panda Land by defeating evil Panda Wizards. As the wizards have special magical powers, they need to be defeated using specific types of Mystic Sticks (regular bamboo sticks are ineffective against them). To obtain a Mystic Stick, Panda Knight needs to craft it by infusing his regular bamboo stick with several different kinds of magic shards according to the known recipe for that particular type of Mystic Stick.</p>
<p>Normally, all kinds of shards can be purchased for 1 gold/piece from the Panda Magic Store (therefore Panda Knight will have no problem of acquiring the shards, as long as he has enough gold to buy them all from the Store). However due to the recent invasion, to conceal the shards from the incoming Panda Wizards, Panda Magic Store has packaged all the shards into inconspicuous Mystery Boxes. A Mystery Box contains a random piece of magic shard which type can&rsquo;t be determined prior to buying and opening the box, which Panda Knight can also buy for the same price (1 gold/box).</p>
<p>As his Panda Knight character is not rich, Mr. Wah is concerned about the possibility that he&rsquo;s unable to buy all the necessary shards due to not getting the required amount of a specific type of shard. He needs your help! Your task as Mr. Wah&rsquo;s best programmer friend is to compute the probability that he will be able to get all the shards and craft the Mystic Stick, so that he can plan his playing strategy accordingly. You can safely assume that all the required shards are available on the store via the Mystery Boxes, that the boxes will only contain the needed types of shard, and that each type of shard has equal probability of being contained inside any particular Mystery Box.</p>

______________________________________________________
TOP10||||||false||||||

<p>Given a dictionary containing less than N = 20000 words labeled from 1 to N. Each word consists of lowercase characters (from 'a' to 'z') with arbitrary length. The total number of characters in the dictionary is at most 100,000. Your task is to answer at most Q = 100000 queries. Each query qi is also a word (as defined above). For each query, you have to print the "Top 10" words in the dictionary with the following rules: <br /><br />All the words in the "Top 10" have to contain the substring qi. <br /><br />All the words in the "Top 10" have to be sorted in this order: <br /><br />1. The words with shorter length come first, if they have equal length then <br /><br />2. The lexicographically smaller words come first, otherwise <br /><br />3. The words with smaller label come first. <br /><br />If the number of words in the dictionary that contains the substring qi is less than 10 then print all the words otherwise, print only the top-10 words (note: the words are printed using their labels). <br /><br />If there is no word in the dictionary that contains the substring qi then print "-1" (without the quotes). <br /><br /><strong>Input</strong> <br />The first line contains the number N. The next N lines contains the N words in the dictionary (the ith line is the word with label i). The next line contains the number Q followed by the Q lines containing the queries. <br /><br /><strong>Output</strong> <br />For each query, print one line containing the labels of the "Top 10" words (separated by a space) in the dictionary using the rules defined above. <br /><br /><strong>Sample Input </strong><br />17 <br />acm <br />icpc <br />regional <br />asia <br />jakarta <br />two <br />thousand <br />and <br />nine <br />arranged <br />by <br />universitas <br />bina <br />nusantara <br />especially <br />for <br />you <br />5 <br />a <br />an <br />win <br />b <br />z</p>
<p><strong>Output for Sample Input</strong></p>
<p>1 8 4 13 5 10 3 7 14 15 <br />8 10 7 14 <br />-1 <br />11 13 <br />-1</p>


______________________________________________________
SPAMD||||||false||||||

<p>It is well-known that the number of occurrences of the term "free" can distinguish spam and non-spam emails. <br />Your task is to build a spam detection module, based on the number of term "free" in an email. <br />The core of this detection module is a spam classifier, which is represented by two variables: Low and High. <br />An email that contains X "free" words is classified by this module as a spam if Low &le; X &le; High, otherwise it is not. <br />To measure the goodness of a classifier, we introduce several information-retrieval terminologies: <br /> <br />Actual        <br />Spam     Non-Spam        <br />Predicted     Spam     TP     FP        <br />Non-Spam     FN     TN      <br /><br />TP (true positive) is the number of emails which are truly predicted as spam; FN (false negative) is the number of emails which are wrongly predicted as non-spam, and so on. <br />The portion of emails that are correctly identified as spam is denoted as precision (P), which is formulated as P = TP / (TP + FP). <br />The portion of spam emails that are successfully identified is denoted as recall (R), which is formulated as R = TP / (TP + FN). <br />To balance between precision and recall, we use the F-measure which is formulated as F = 2 x P x R / (P + R). <br />For example, when TP = 5, FP = 3, FN = 2, TN = 4, we have R = 5/7, P = 5/8, and F = 2/3. <br />When there is no spam, we can report all emails as non-spam with F = 1.0 (perfect classifier). <br />Our data mining team has manually analyzed several emails and labeled them as spam or non-spam. <br />Your task is to find the values of Low and High that yield the best classifier, i.e., the one that maximizes the F-measure. <br /><br /><strong>Input</strong> <br /><br />The input consists of several test cases, where each case contains of two lines: <br /><br />N : The maximum number of term &ldquo;free&rdquo; in any emails (1 &le; N &le; 2 x106) <br />a0 A B M : parameters of random number generator. (2 &le; M &le; 10; 0 &le; a0, A, B &lt; M) <br /><br />This random number generator generates a sequence of number: <br />ai = (A * ai-1 + B) MOD M for i &gt;= 1 <br /><br />Specifying: <br />posi = a2i (0 &le; i &le; N) : the number of spam emails with i number of term &ldquo;free&rdquo;. <br /><br />negi = a2i+1 (0 &le; i &le; N) : the number of non-spam emails with i number of term &ldquo;free&rdquo;. The input is terminated by EOF. <br /><br /><strong>Output</strong></p>
<p>For each simulation print the F-measure of the best classifier (accurate to 6 decimal places). <br /> <br /><strong>Sample Input</strong> <br />3 <br />1 1 1 3 <br />5 <br />2 3 4 5</p>
<p><strong>Output for Sample Input</strong></p>
<p>0.666667 <br />0.923077      <br /><br />Explanation for the 1st case: This random number generator generates a sequence of 1, 2, 0, 1, 2, &hellip; The number of spam emails is: posi = {1, 0, 2, 1}, and the number of non-spam emails is negi = {2, 1, 0, 2}. <br /><br />The optimal classifier treats emails with number of term &ldquo;free&rdquo; between 2 and 3 as spam, with R = 3/4 and P = 3/5, resulting F = 2/3. Another way of producing optimal classifier is to consider emails with number of term &ldquo;free&rdquo; equals to 2 as spam.</p>


______________________________________________________
TUTMRBL||||||true||||||


<p>Playing with marbles is one of the king's favorite pastimes. He especially enjoys a game which was taught to him by Eratosthenes, a visiting mathematician from Greece. The rules are very complicated but it all boils down to arranging marbles in a (filled) rectangular shape to score points. If playing with 24 marbles, for example, King Tut could make a 4 by 6 rectangle, or a 3 by 8 rectangle, or a 2 by 12 rectangle. Even the boring 1 by 24 rectangle is allowed. Other numbers of marbles, however, such as 23, make things difficult for the king. Try as he might, the only rectangle he can make is 1 by 23. (Note that rectangles are equivalent under rotation, so a 23 by 1 rectangle would not be a new shape.)</p>
<p>King Tut has decided to call numbers n which can form only the unexciting 1 by n rectangle "non-rectangular." Conversely, numbers like 24, which allow for the formation of more than one rectangle, shall henceforth be referred to as "rectangular." Playing with a single marble is not very interesting at all, so the number 1 will by definition considered neither rectangular nor non-rectangular.</p>
<p>After playing for some time, the king started to notice that every integer greater than 1 could be written as a product of non-rectangular numbers. Were he a mathematician, he would try to prove this claim (which, incidentally, is true). However, the king is more of the engineer type, so he's going to make you verify the claim using brute force! While you're at it, also tell the king how many rectangles can be constructed given a certain number of marbles.</p>

*******InputConstraints*******

<p>There will be several test cases, one per line, each consisting of a single integer between 2 and 10<sup>7</sup> inclusive. An input of zero will be used to tell your program to stop processing.</p>

*******OutputConstraints*******

<p>For each test case, print out two lines! The first should show the given number of marbles written as a product of non-rectangular numbers, following the example of the sample output. Factors must be written in non-decreasing order and separated by multiplication signs. Also print out spaces around the equals and multiplication signs to improve readability. The second line of output for each test case should be in the format: "With X marbles, Y different rectangles can be constructed." Again, don't forget to replace X and Y with the proper values.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
24
23
0

<strong>Output:</strong>
24 = 2 * 2 * 2 * 3
With 24 marbles, 4 different rectangles can be constructed.
23 = 23
With 23 marbles, 1 different rectangles can be constructed.
</pre>


______________________________________________________
SPHIWAY||||||true||||||


<p>There are N places and M bidirectional way. No two places have more than one direct way. Ana wants to walk from S to T and return to S by a itinerary that satisfy:</p>
<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No way can be go twice.</p>
<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Length of itinerary is the minimum.</p>

*******InputConstraints*******

<p>Line 1: 4 integers: N, M, S, T (N &lt;= 10<sup>4</sup>; M &lt;= 10<sup>5</sup>)</p>
<p>Next M line: Line i include 3 integers u<sub>i</sub>, v<sub>i</sub>, c<sub>i</sub>: distance of two places u<sub>i</sub> and v<sub>i</sub> is c<sub>i</sub>. (c<sub>i</sub> &lt;= 2000000000).</p>

*******OutputConstraints*******

<p>Length of the itinerary if it exists. Else print -1.</p>

*******IOTestCases*******

<pre><strong>Input:<br /></strong>5 7 1 5<br />1 2 3<br />1 4 8<br />2 3 5<br />2 4 4<br />3 5 5<br />4 3 8<br />4 5 3<br /><br /><strong>Output:</strong><br />24<br /></pre>


______________________________________________________
GERGOVIA||||||true||||||


<p>Gergovia consists of one street, and every inhabitant of the city is a wine salesman. Everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each inhabitant gets what he wants.</p>
<p>There is one problem, however: Transporting wine from one house to another results in work. Since all wines are equally good, the inhabitants of Gergovia don't care which persons they are doing trade with, they are only interested in selling or buying a specific amount of wine.</p>
<p>In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity we will assume that the houses are built along a straight line with equal distance between adjacent houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work.</p>

*******InputConstraints*******

<p>The input consists of several test cases.</p>
<p>Each test case starts with the number of inhabitants N (2 &le; N &le; 100000).</p>
<p>The following line contains n integers a<sub>i</sub> (-1000 &le; a<sub>i</sub> &le; 1000).</p>
<p>If a<sub>i</sub> &ge; 0, it means that the inhabitant living in the i<sup>th</sup> house wants to buy a<sub>i</sub> bottles of wine. If a<sub>i</sub> &lt; 0, he wants to sell -a<sub>i</sub> bottles of wine.</p>
<p>You may assume that the numbers a<sub>i</sub> sum up to 0.</p>
<p>The last test case is followed by a line containing 0.</p>

*******OutputConstraints*******

<p>For each test case print the minimum amount of work units needed so that every inhabitant has his demand fulfilled.</p>

*******IOTestCases*******

<pre><strong>Input<br /></strong>5<br />5 -4 1 -3 1<br />6<br />-1000 -1000 -1000 1000 1000 1000<br />0<br /><br /><strong>Output:</strong><br />9<br />9000<br /></pre>


______________________________________________________
MINSEQ||||||true||||||


<p>Given two strings A and B, your are to find the lexicographically smallest string after inserting B into A.</p>
<p>For example, string A is "369", and string B is "4799". There are 4 ways that I can insert B into A, and I&rsquo;ll get 4 different results: 4799369, 3479969, 3647999, 3694799. Thus, 3479969 is the lexicographically smallest one.</p>

*******InputConstraints*******

<p>Input contains several cases. Each case has 2 strings A and B with length no longer than 100000 in 2 lines. Process the input until EOF. The strings consist of only digit 1-9.</p>

*******OutputConstraints*******

<p>For each case, output the minimal possible result.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />369<br />4799<br />666<br />12345<br /><br /><strong>Output:</strong><br />3479969<br />12345666</pre>


______________________________________________________
BOMB||||||true||||||


<p>You want to destroy a bridge with bombs. The lower-left corner of the bridge is at (0,0) and the upper-right corner is at (w,l). There are already b bombs exploded, the i-th bomb created a hole of radius ri centering at (xi,yi). You want to throw exactly one more bomb so that the bridge is split into two connected parts(though the two parts can share a finite number of points), so that no one can go through the bridge from y = 0 to y = l. Your task is to find the minimal radius of the last bomb to split the bridge, assuming that the last bomb can explode precisely at the position you want (possibly at non-integer coordinates). Note that you are only allowed to use bombs with integer radius. That is, even if a bomb with radius 1.01 is sufficient, you have to use a bomb with radius 2, since you only have bombs with integer radius.</p>

*******InputConstraints*******

<p>The first line contains t (1&le;t&le;10), the number of test cases followed. Each test case begins with three integers w,l,b(1&le;w,1&le;100, 0&le;b&le;10). Each of the following b lines contains three integers integers xi,yi,ri(0&le;x&le;w, 0&le;y&le;l, 0&#65308;r&le;100). The bridge is guaranteed to be connected before the last bomb.</p>

*******OutputConstraints*******

<p>For each test case, print the minimal radius of the last bomb.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>3<br />100 100 2<br />15 50 20<br />90 50 30<br />100 100 1<br />50 50 40<br />100 100 1<br />10 50 10</p><p>&nbsp;</p>
<strong>Output:</strong>
13<br />50<br />40<br /></pre>


______________________________________________________
HELLOKIT||||||true||||||


<p style="text-align: justify;">Kitty sends a kind of original email messages to her friend Garf. To write a message, she<br />chooses a word W and a number n and replicates W n times horizontally. Then she repeats this<br />string in the next line, but rotating the characters once to the left. And she repeats this 'rotate-<br />and-output' process until the word W appears displayed as the rst column of the rectangular<br />pattern that she produces.<br />As an example, when she chooses the word Hello and the number 3, she gets the pattern:</p>
<p style="text-align: center;"><br />HelloHelloHello<br />elloHelloHelloH<br />lloHelloHelloHe<br />loHelloHelloHel<br />oHelloHelloHell</p>
<p style="text-align: justify;"><br />Kitty has been sending such emails during the last three years. Recently, Garf told her that<br />perhaps her work may be automatized with a software to produce Kitty's patterns. Could you<br />help her?</p>

*******InputConstraints*******

<p>The input le contains several test cases, each one of them in a separate line. Each test case<br />has a word and a positive integer that should generate the corresponding rectangular pattern.<br />The word is a string of alphabetic characters (a..z). The number is less than 10.<br />A line whose contents is a single period character means the end of the input (this last line<br />is not to be processed).</p>

*******OutputConstraints*******

<p style="text-align: justify;">Output texts for each input case are presented in the same order that input is read. For each<br />test case the answer must be a left aligned Kitty pattern corresponding to the input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />Love 1<br />Kitty 2<br />.<br /><br /><strong>Output:</strong><br />Love<br />oveL<br />veLo<br />eLov<br />KittyKitty<br />ittyKittyK<br />ttyKittyKi<br />tyKittyKit<br />yKittyKitt</pre>


______________________________________________________
PAIRGRPH||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem A in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
BNYINT||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem B in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
CRYPTO6||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem C in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
DEJAVU||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem D in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
CABLEXPR||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem E in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
FCSYS||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem F in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
STCKHOLM||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem G in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
HISTORY||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem H in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
JMFILTER||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:hangzhou2008.pdf">here</a> to download a PDF version of the contest problems. The problem is problem J in the PDF. Remember that you must use stdin/stdout at SPOJ.


______________________________________________________
ALICECUB||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem A in the PDF.


______________________________________________________
BFALG||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem B in the PDF. But the data limits is slightly modified: 1&#8804;P&#8804;1000000 in the original description, but in this EXTREME version, 1&#8804;P&#8804;1000000000.


______________________________________________________
COMPRESS||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem C in the PDF.


______________________________________________________
CRYPTO7||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem D in the PDF.


______________________________________________________
TETRIS2D||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem E in the PDF.


______________________________________________________
FLOWERS2||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem F in the PDF.


______________________________________________________
TRACTOR||||||false||||||

<p>Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem G in the PDF.</p>
<p>Since this problem is added as an classical problem in SPOJ, the users who get this problem Accepted (by himself/herself, I'll look at your code) before 2011.10.25 8:00:00 SPOJ time (two years right after the on-site contest's end) will be e-mailed some pictures of the problem setters of this contest - <a href="http://www.spoj.pl/users/g201513">g201513</a>, <a href="http://www.spoj.pl/users/lcosvse">lcosvse</a> and <a href="http://www.spoj.pl/users/john_jones">Blue Mary</a>.</p>

<p><b>Log</b>: 
<p>
(1)Thanks to Thomas Schnattinger, who points out a small bug in the sample input. The corrected sample should be:</p>
<pre>
<b>Input:</b>
1

O Charles 2 2
S6S6S7S7 SASKSJST STS8S4S4 S3S5SJSQ
S9S9 H3D3 C3DT SAD3
DA DQ DK D4
SKS8S5S3 RJC2D2H2 C6C8CJD9 H3CKDTD5
H7H7 H6H4 HJHQ H9H9
DJDJ DKH5 D5D4 D6D6
D8D8 C4C3 HTH5 D9D7
C5C5 C6CT H8HQ C7C4
H8 C7 HA HA
H2 RJ BJ CK
DA BJ C8 HK
S2S2C2 CQCAD2 HTHJHK C9CQCA

<b>Output:</b>
Case #1:
50
3 2 Alice
</pre>

<p>(2) The bug about '\r\n' has been fixed.</p>


______________________________________________________
HEROARR||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem H in the PDF.


______________________________________________________
IEXPOLRE||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem I in the PDF.


______________________________________________________
O2JAM||||||false||||||

Please click <a href="http://www.spoj.pl/content/john_jones:shanghai2009.pdf">here</a> to download a PDF version of the contest problems. The problem is problem J in the PDF.


______________________________________________________
FACVSPOW||||||true||||||


<p>Consider two integer sequences <b>f(n) = n!</b> and <b>g(n) = a<sup>n</sup></b>, where <b>n</b> is a positive integer. For any integer <b>a > 1</b> the second sequence is greater than the first for a finite number of values. But starting from some integer <b>k</b>, <b>f(n)</b> is greater than <b>g(n)</b> for all <b>n >= k</b>. You are to find the least positive value of <b>n</b> for which <b>f(n) > g(n)</b>, for a given positive integer <b>a > 1</b>.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consist of a single number <b>a</b>.


*******OutputConstraints*******

<p>For each test print the least positive value of <b>n</b> for which <b>f(n) > g(n)</b>.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
3
4

<b>Output:</b>
4
7
9
</pre>



______________________________________________________
VIENTIAN||||||true||||||


<p>The Tower of Hanoi is a mathematical game or puzzle. It consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly stacked in order of size on one rod, the smallest at the top, thus making a conical shape.
The objective of the puzzle is to move the entire stack to another rod, obeying the following rules:
<ul>
<li>Only one disk may be moved at a time.</li>
<li>Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod.</li>
<li>No disk may be placed on top of a smaller disk.</li>
</ul></p>
<p>It is known that the puzzle can be solved in <b>2<sup>n</sup>-1</b> steps for n disks.</p>
<p>Now consider the puzzle called The Tower of Vientiane. The rules are almost the same as for The Tower of Hanoi. But additionally there are limitations on the allowed moves. Let the initial rod be numbered 1, the target rod - 3, and the auxiliary rod - 2. The matrix of allowed moves is given. For example is can be allowed to move disks from rod 1 to rod 2 only, from rod 2 to rod 3 and from rod 3 to rod 1. You are to find out the minimal number of moves in which the puzzle can be solved given some limitations on the allowed moves.</p>


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. The test starts with a <b>3x3</b> matrix, consisting of <b>1s</b> and <b>0s</b>. The <b>1</b> in <b>i-th</b> row and <b>j-th</b> column of the matrix means that the move from rod <b>i</b> to rod <b>j</b> is allowed, otherwise it is not allowed. The next line of each test contains the number <b>n</b> - the amount of disks for the corresponding testcase.


*******OutputConstraints*******

<p>For each test print the minimal number of moves in which the puzzle can be solved or "Epic Fail..." if it's impossible to solve the puzzle under such limitations.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
011
101
110
5
010
101
010
5
010
001
010
5


<b>Output:</b>
31
242
Epic Fail...

</pre>



______________________________________________________
PAIRSORT||||||true||||||


<p>Here we describe a typical problem. There are <i>n</i> balls and <i>n</i> boxes. Each ball is labeled by a unique
number from 1 to <i>n</i>. Initially each box contains one of these balls. We can swap two balls in adjacent
boxes. We are to sort these balls in increasing order by swaps, i.e. move the ball labeled by 1 to the first
box, labeled by 2 to the second box, and so forth. The question is how many swaps are needed.

<p>Now let us consider the situation where the balls are doubled, that is, there are <i>2n</i> balls and <i>n</i> boxes,
exactly two balls are labeled by <i>k</i> for each 1 &#8804; <i>k</i> &#8804; <i>n</i>, and the boxes contain two balls each. We can swap
two balls in adjacent boxes, one ball from each box. We are to move the both balls labeled by 1 to the
first box, labeled by 2 to the second box, and so forth. The question is again how many swaps are needed.

<p>Here is one interesting fact. We need 10 swaps to sort [5; 4; 3; 2; 1] (the state with 5 in the first box, 4 in
the second box, and so forth): swapping 5 and 4, then 5 and 3, 5 and 2, 5 and 1, 4 and 3, 4 and 2, 4 and
1, 3 and 2, 3 and 1,and finally 2 and 1. Then how many swaps we need to sort [5, 5; 4, 4; 3, 3; 2, 2; 1, 1]
(the state with two 5&#8217;s in the first box, two 4&#8217;s in the second box, and so forth)? Some of you might think
20 swaps &#8212; this is not true, but the actual number is 15.

<p>Write a program that calculates the number of swaps for the two-ball version and verify the above fact.



*******InputConstraints*******

<p>The input has the following format:
<pre><i>
       n
       ball<sub>1,1</sub> ball<sub>1,2</sub>
       ball<sub>2,1</sub> ball<sub>2,2</sub>
       ...
       ball<sub>n,1</sub> ball<sub>n,2</sub>
</i></pre>
<p><i>n</i> is the number of boxes (1 &#8804; <i>n</i> &#8804; 8). ball<sub>i,1</sub> and ball</sub>i,2</sub> , for 1 &#8804; <i>i</i> &#8804; <i>n</i>, are the labels of two balls initially
contained by the <i>i</i>-th box.



*******OutputConstraints*******

<p>Print the minumum possible number of swaps.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
5 5
4 4
3 3
2 2
1 1

<b>Output:</b>
15
</pre>



______________________________________________________
MONONUM||||||true||||||


<p>Some integers possess interesting quality: each of their digits is not greater than the digit to the right. Let us define such integers as increasing integers. And let's call integers for which each digit is not lesser than the digit to the right decreasing integers. For example 24558 is increasing, 888410 is decreasing and 5 - is both increasing and decreasing. Given <b>n</b> calculate the ratio of the decreasing <b>n</b>-digit integers to the increasing <b>n</b>-digit integers. We consider only positive integers. Leading zeros are not allowed.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consists of the single integer <b>n</b>


*******OutputConstraints*******

<p>For each test print the needed ratio with six digits in the fractional part.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1
2

<b>Output:</b>
1.000000
1.200000
</pre>



______________________________________________________
DIFFDIAG||||||true||||||


<p>Daniel enjoys watching TV series. One of his favorite is "Doctor Chaos". In this series the medical genius is saving people by making difficult diagnosis. In his work he employs the differential diagnosis method. Doctor Chaos writes all the symptoms the patient have on the white board and his team tries to find out the disease which explains those symptoms best. Sometimes some symptoms are not caused by the disease itself. Sometimes some symptoms are not revealed yet and are not written on the board. Anyhow the team chooses come candidate-diseases and then runs the tests to identify the right one. Help Doctor Chaos by making a program which find out the diseases that are explaining the set of symptoms the best way. We'll say that the disease explains the set of symptoms the best way if it explains the most symptoms from the set among all known diseases.


*******InputConstraints*******

<p>The first line of the input file contains number <b>n</b> - the amount of diseases known to Chaos and his team. Then <b>n</b> lines follow describing each disease. The description of the disease starts with the name of the disease. Then number <b>k</b> follows, that is the amount of different symptoms caused by the disease. Then there go the names of the symptoms separated by spaces. After the description of all the diseases there is number <b>t</b> - the amount of cases to diagnose. After that <b>t</b> lines follow each containing a set of symptoms. Each set starts with the number <b>q</b> - the amount of different symptoms. Then <b>q</b> names of the symptoms follow separated by spaces. The names of all diseases and symptoms consist of only small latin letters and don't exceed 20 characters. Each symptom in each set is explained by at least one disease.


*******OutputConstraints*******

<p>For each case to diagnose first print the line "Diagnosis #x:" where <b>x</b> is the case number starting from one. Then list all the diseases which explains the corresponding set of symptoms best. The diseases should be listed one in line and in the same order in which they were given in the input file.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
migraine 2 headache nausea
poisoning 3 nausea stomachache fever
flu 3 fever cough headache
4
1 fever
2 nausea headache
2 nausea cough
4 fever nausea cough headache

<b>Output:</b>
Diagnosis #1:
poisoning
flu
Diagnosis #2:
migraine
Diagnosis #3:
migraine
poisoning
flu
Diagnosis #4:
flu
</pre>



______________________________________________________
GARDENAR||||||true||||||


<p>One rich person decided to make himself a great garden. The garden should have a from of equilateral triangle. There should be a gazebo inside the garden. The gazebo will be connected with the triangle vertexes by roads. The lengths of all three roads are known. Those numbers are sacred for this rich man. The expense of building such a garden will depend on the area of the garden. Help the rich man by calculating what will be the area of his garden.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consist of three integers <b>a</b>, <b>b</b>, <b>c</b> - the lengths of the roads. It is guaranteed that it's possible to build such a garden.


*******OutputConstraints*******

<p>For each test print the area of the garden with two digits in the fractional part.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 4 5

<b>Output:</b>
19.83
</pre>



______________________________________________________
XOINC||||||false||||||

<p align="left"></p>
<p align="left"></p>
<p align="left"></p>
<p align="left"></p>
<p align="left"></p>
<p align="left">Farmer John's cows like to play coin games so FJ has invented with a new two-player coin game called Xoinc for them.</p>
<p align="left">Initially a stack of N (5 &lt;= N &lt;= 2,000) coins sits on the ground; coin i from the top has integer value C_i (1 &lt;= C_i &lt;= 100,000).</p>
<p align="left">The first player starts the game by taking the top one or two coins (C_1 and maybe C_2) from the stack. If the first player takes just the top coin, the second player may take the following one or two coins in the next turn. If the first player takes two coins then the second player may take the top one, two, three or four coins from the stack. In each turn, the current player must take at least one coin and at most two times the amount of coins last taken by the opposing player. The game is over when there are no more coins to take.</p>
<p align="left">Afterwards, they can use the value of the coins they have taken from the stack to buy treats from FJ, so naturally, their purpose in the game is to maximize the total value of the coins they take. Assuming the second player plays optimally to maximize his own winnings, what is the highest total value that the first player can have when the game is over?</p>
<p align="left"><strong>Input</strong></p>
<p align="left">Line 1: A single integer: N</p>
<p align="left">Lines 2..N+1: Line i+1 contains a single integer: C_i</p>
<p align="left"><strong>Output</strong></p>
<p align="left">A single integer representing the maximum value that can be made by the first player.</p>
<p align="left"><strong>Example</strong></p>
<p align="left"><strong>Input:</strong><br /> <br /> 5<br /> 1<br /> 3<br /> 1<br /> 7<br /> 2<br /> <br /> <strong>Output:</strong><br /> 9<br /> <br /> <strong><br /> Explanation:</strong></p>
<p align="left">The first player starts by taking a single coin (value 1). The opponent takes one coin</p>
<p align="left">as well (value 3). The first player takes two more coins (values 1 and 7 -- total 9).</p>
<p align="left">The second player gets the leftover coin (value 2-- total 5).</p>
<p align="left"></p>
<p align="left"></p>


______________________________________________________
REC||||||true||||||


<p>Let F0 = 1. Fn = a*Fn-1 + b for n &gt;= 1. Find Fn (mod M).</p>

*******InputConstraints*******

<p>The first line contains T the number of test cases. Each of the next T lines contains 4 space seperated integers a, b, n and M.</p>

*******OutputConstraints*******

<p>Output T lines, one corresponding to each test case.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1 1 1 10<br />2 1 2 5<br />5 2 20 30<br /><br /><strong>Output:</strong><br />2<br />2<br />7<br /><br /></pre>


______________________________________________________
GNYR09F||||||true||||||


<p style="text-align: left;">For a string of n bits x1,x2,x3,...,Xn the adjacent bit count of the string (AdjBC(x)) is given by</p>
<p style="text-align: center;"><br />X1*X2 + X2*X3 + X3*X4 + ... + Xn-1 * Xn</p>
<p><br />which counts the number of times a 1 bit is adjacent to another 1 bit. For example:<br />AdjBC(011101101) = 3<br />AdjBC(111101101) = 4<br />AdjBC(010101010) = 0</p>
<p>Write a program which takes as input integers n and k and returns the number of bit strings x of n bits (out of 2&#8319;) that satisfy AdjBC(x) = k. For example, for 5 bit strings, there are 6 ways of getting AdjBC(x) = 2:<br />11100, 01110, 00111, 10111, 11101, 11011</p>

*******InputConstraints*******

<p>The first line of input contains a single integer P, (1 &le; P &le; 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number (n) of bits in the bit strings, followed by a single space, followed by a decimal integer (k) giving the desired adjacent bit count. The number of bits (n) will not be greater than 100 and the parameters n and k will be chosen so that the result will fit in a signed 32-bit integer.</p>

*******OutputConstraints*******

<p>For each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of n-bit strings with adjacent bit count equal to k.</p>

*******IOTestCases*******

<pre><span style="color: #ff0000;"><strong>Input:</strong>
</span>10<br />1 5 2<br />2 20 8<br />3 30 17<br />4 40 24<br />5 50 37<br />6 60 52<br />7 70 59<br />8 80 73<br />9 90 84<br />10 100 90
<strong></strong></pre>
<pre><strong><span style="color: #ff0000;">Output:</span></strong>
1 6<br />2 63426<br />3 1861225<br />4 168212501<br />5 44874764<br />6 160916<br />7 22937308<br />8 99167<br />9 15476<br />10 23076518
</pre>


______________________________________________________
COMBAT||||||true||||||


<p style="text-align: justify;">An air combat is on the way, you are asked to command this war. Now planes of enemy are full of the sky. A plane is described with three-dimensional coordinate (x, y, z)(1000&lt;x, y, z&lt;1200), and all coordinates are integers. As is show below:</p>
<p style="text-align: center;"><img style="vertical-align: middle;" title="Example " src="../../content/fameoflight:1.jpg" alt="" width="422" height="279" /></p>
<p style="text-align: justify;">You have created a missile which can destroy all the planes in a cube whose center is (x, y, z), and the cube can be as large as (x-r, y-r, z-r) (x+r, y+r, z+r). This missile is so fierce that it will destroy not only enemy in that space, but also friends. And after that a position is occupied by a plane belongs to the opposite side before the explosion, that is to say an enemy plane will be replaced by a friend, a friend will be replaced by an enemy.</p>
<p style="text-align: justify;">You want to reduce our loss, so you need to know which side a plane belongs to in a position.</p>
<p><img src="http://www.spoj.plfile:///C:/DOCUME%7E1/ADMINI%7E1/LOCALS%7E1/Temp/moz-screenshot.png" alt="" /></p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line contains the number of scenarios. <br /> For each scenario you are given a line containing x1 y1 z1 x2 y2 z2, defining the two corners A(x1, y1, z1), B(x2, y2, z2) (1000&lt;= x1&lt;x2, y1&lt;y2, z1&lt;z2 &lt;=1200) of the sky. The combat is so fierce that every point in the cube is occupied by an enemy plane at first.</p>
<p>Next line is a number of operation q.</p>
<p>Next q lines: (0&lt;q&lt;10000)</p>
<p>A character &lsquo;U&rsquo;:&nbsp; followed by 4 integers, a center point M(xi, yi, zi) ,the range is ri.</p>
<p>A character &lsquo;Q&rsquo;:&nbsp; followed by 3 integers, a position N(xi, yi, zi), if a plane belongs to us, print &rdquo;Friend&rdquo; else print &rdquo;Enemy&rdquo;.</p>
<p>Points M and N are all in cube given above.</p>

*******OutputConstraints*******

<p>Print a line for every &lsquo;Q&rsquo; operation.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><p>1</p><p>1000 1000 1000 1002 1002 1002</p><p>4</p><p>U 1000 1000 1000 0</p><p>U 1001 1001 1001 1</p><p>Q 1000 1000 1000</p><p>Q 1001 1001 1001</p><strong>Output:</strong><br /><p>Enemy</p><p>Friend</p></pre>


______________________________________________________
FAMILYP||||||true||||||


<p style="text-align: justify;">Asif and Nafisa are very interested in solving puzzles.They always try to give one another puzzles to see who is the best.So ,as usual, one day, Nafisa gave Asif a matrix.</p>
<p style="text-align: justify;">The matrix is as follows <br /><br />A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C ......<br />B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D ......<br />C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E ......<br />D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F .......<br />.........................................................................................<br />.<br />.<br /><br />Assume that the matrix is very huge(both row and column wise). Nafisa describes a special sequence as a sequence&nbsp; whose first term is 'A'[element at (0,0)], second term is 'B'[element at&nbsp; (0,1)],third term is 'B'[element at (1,0)],fourth term is 'C'[element at (2,0)]. Now,she asks Asif to find the nth term of this special sequence. Help Asif To solve the problem.</p>

*******InputConstraints*******

<p>There will be multiple test cases with number N(1&lt;=N&lt;=1000000) per line.</p>

*******OutputConstraints*******

<p>A character ['A'-'Z'] per line for each number N representing the Nth number in the special sequence.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />6<br />10<br /><br /><strong>Output:</strong>
TERM 3 IS B<br />TERM 6 IS C<br />TERM 10 IS D</pre>


______________________________________________________
INTERVA2||||||true||||||


<p>Give you N ( 1 &lt;= N &lt;= 200000 ) intervals, represented as [A, B], for example , interval s represented as [As,Bs].</p>
<p>For two intervals s and t, we say S covered by T if&nbsp; At &lt;= As and Bs &lt;= Bt. Now my problem is easy, just tell me the question below: For each interval, how many intervals can cover it but not covered by it ?</p>

*******InputConstraints*******

<p align="left">The input contains multiple test cases. <br /> For each test case, the first line is an integer N ( 1 &lt;= N &lt;= 200000 ), which is the number of intervals. Then come N lines, the i-th of which contains two integers: A<sub>i</sub> and Bi ( A<sub>i </sub>, B<sub>i </sub>will not exceed the 32-bit integer) specifying the two parameters described above.</p>

*******OutputConstraints*******

<p align="left">For each test case, output one line containing n space-separated integers, the i-th of which specifying the number of intervals that can cover it but not covered by it.&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input</strong><p>3</p><p>0 1</p><p>-1 2</p><p>-2 3</p><p>&nbsp;</p><p>2</p><p>0 1</p><p>0 1</p><strong>Output:</strong><br /><p align="left">2 1 0</p><p align="left">0 0</p></pre>


______________________________________________________
MEXICAN||||||true||||||


<p>The town of San Saba is too small for more than one gunslinger. Unfortunately, all of them turned up on the same day, one fine spring morning. As it turned out, love was in the air and they were all trying to woo Alice, the sheriff's daughter. As only one of them could win her love, they decided to do the only gentlemanly thing left to do - they decided to have a Mexican Standoff.</p>
<p>&nbsp;</p>
<p>There are multiple rounds in this standoff. In each round, all gunslingers still alive first form a large circle, with each of them facing the centre of the circle. To prevent a fight for position while forming the circle, the men have decided that they will line up in the lexicographic order of their names, and then connect the ends of the line to form the required circle. Once they have taken their positions Alice drops a scarf from her hand, and the moment it hits the ground all the men simultaneously draw out their two guns (one from the left holster and one from the right) and fire both of them. Each man aims the gun from the left holster at the person to his immediate left in the circle and the other gun at the person to his immediate right. Of course, not all gunslingers are equal - they have different reaction times and hence fire their guns at different times. If a man is fired upon before he can fire, he dies and is thus unable to fire his own gun. If two men fire at each other at exactly the same time, they both die. After the round is over, the bodies of the dead men are removed from the circle by those alive, who then head to the next round. If there is only one man left standing after a round, the standoff is over and the lucky survivor gets to marry Alice. If no one survives after a particular round, then Alice remains single of course.</p>
<p>&nbsp;</p>
<p>Unfortunately, Alice only likes some of the men. So she decided that before each round, she would remove a single bullet from the gun in either the left or the right holster (but not both) of at most one of the men. Being a little lazy, she wants to know the minimum number of rounds in which she must remove a bullet so that she gets to marry one of the men she likes. If she does not likes anyone, it means that she wants to remain single.</p>

*******InputConstraints*******

<p>The first line contains T the number of test cases (1 &lt;= T &lt;= 30). The first line of each test case contains N, the number of gunslingers in town (2 &lt;= N &lt;= 60). Each of the next N lines contains the name of the gunslinger (between 1 and 20 lower case letters, each gunslinger will have a unique name), his reaction time in milliseconds (1 &lt;= reaction time &lt;= 1000) and whether Alice likes him or not (Y or N), separated by spaces.</p>

*******OutputConstraints*******

<p>For each test case, a line containing a single integer equal to the minimum number of rounds in which Alice needs to remove a bullet, or -1 if it is impossible for her desire to be fulfilled.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />3<br />good 100 Y<br />bad 200 N<br />ugly 100 N<br />3 <br />good 100 N<br />bad 200 N<br />ugly 100 N<br />3 <br />good 100 Y<br />bad 100 N<br />ugly 100 N<br /><br /><strong>Output:</strong>
1<br />0 <br />-1<br /><br /><strong>Explanation</strong><br />1. Alice likes only Good, so she removes a bullet from the gun which Ugly will use to fire at Good.<br />Good survives while Bad and Ugly are killed.<br />2. Alice doesn't like any of them, and she doesn't have to lift a finger to remain single.<br />3. Alice likes only Good, but all of them are equally fast, so she can't save him and will remain<br />single in his memory.</pre>


______________________________________________________
QUERYSTR||||||true||||||


<p><br />McFn interesed in string problem recently.He found a interesing function and he felt he could use this function to invent a new match algorithm.<br /><br />For a string S [1 ... n] and i &iexcl;&Ecirc; [1, n], define F (i) is the length of the longest common suffix of S and S [1 ... i]. <br />For example, for the string S [1 ... 11] = zaaxbaacbaa, then F (1) = 0, F (2) = 1, F (3) = 2 (note that S [1 ... 3] = zaa), F (4) = 0, ... ... F (10) = 1, F (11) = 11; <br />For the string S [1 ... n], i &iexcl;&Ecirc; [1, n], S [i ... n] is its suffix;</p>

*******InputConstraints*******

<p>The first line is a integer T.the number of test cases<br />for each test case<br />The first line is a string S, composed of only lowercase letters,&nbsp; len (s) is the length of s,&nbsp; 1 &lt;= len (s) &lt;= 1000000; <br />Next line, a number N (1 &lt;= N &lt;= 100000), denote that the number of quiries; <br />The next N lines, each line contains a number x (1 &lt;= x &lt;= len (s)).</p>

*******OutputConstraints*******

<p>For each x the output F (x);</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />zaaxbaacbaa<br />11<br />1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br /><br /><strong>Output:</strong>
0<br />1<br />2<br />0<br />0<br />1<br />3<br />0<br />0<br />1<br />11</pre>


______________________________________________________
TETRAVEX||||||true||||||


<p style="text-align: justify;">TetraVex is a challenging computer brain teaser.&nbsp; The object of the game is to fill the grid with the tiles so that the numbers on the adjacent edges of each tile match, much like aligning domino tiles.</p>
<p style="text-align: justify;">Given the 9 tiles, you have to find out whether it is possible to solve the puzzle. Each tile is represented using 4 digits. A tile is given in the order A B C D in the clockwise direction starting from top cell.&nbsp;So the top left tile is denoted as &lsquo;2 1 4 9&rsquo; and the bottom right as &lsquo;2 1 6 6&rsquo;. You cannot rotate the tiles, that is the original order must be preserved.</p>
<p style="text-align: center;"><img style="vertical-align: middle; border: 0px initial initial;" title="tetravex.png" src="../../content/fameoflight:tetravex.png" alt="" width="120" height="120" /></p>

*******InputConstraints*******

<p style="text-align: justify;">There will be many cases in the input file. The first line gives the number of test cases ( &lt;= 20 ). Each case consists of 9 lines giving 4 integers each. Each line gives the information of a tile in the order A B C D. The tiles are randomly given.</p>

*******OutputConstraints*******

<p style="text-align: justify;">For each case, output YES or NO. Follow the sample for exact format</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>2</p><p>2 8 4 6</p><p>1 1 3 5</p><p>0 4 2 8</p><p>2 5 3 3</p><p>7 6 0 4</p><p>7 3 0 6</p><p>4 8 7 7</p><p>0 3 1 2</p><p>2 2 2 8</p><p>&nbsp;</p><p>1 1 1 1</p><p>2 2 2 2</p><p>3 3 3 3</p><p>4 4 4 4</p><p>5 5 5 5</p><p>6 6 6 6</p><p>7 7 7 7</p><p>8 8 8 8</p>9 9 9 9

<strong>Output:</strong>
<p>Case 1: YES</p>Case 2: NO</pre>
<pre><strong><br /></strong></pre>


______________________________________________________
MINES4||||||true||||||


<p>A Company&nbsp;that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from four different non-overlapping mines. You are to choose these mines to maximize the total profit.</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A Company that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from &lt;b&gt;four&lt;/b&gt; different non-overlapping mines. You are to choose these mines to maximize theA Company that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from &lt;b&gt;four&lt;/b&gt; different non-overlapping mines. You are to choose these mines to maximize the total profit.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A Company that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from &lt;b&gt;four&lt;/b&gt; different non-overlapping mines. You are to choose these mines to maximize the total profit.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;total profitA Company that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from <strong>four</strong>&nbsp;different non-overlapping mines. You are to choose these mines to maximize the total profit.A Company that Makes Everything (ACME) has entered the surface mining business. They bought a rectangular field which is split into cells, with each cell having a profit value. A mine is a non-empty rectangular region, and the profit of a mine is equal to the sum of the values of all its cells. ACME wants to extract ore from &lt;b&gt;four&lt;/b&gt; different non-overlapping mines. You are to choose these mines to maximize the total profit.&nbsp;</div>

*******InputConstraints*******

<p>The first line contains an integer T (1&nbsp;&le;&nbsp;T&nbsp;&le;&nbsp;5), denoting the number of test cases.</p>
<p>For each test case, the first line contains two positive integers R and C (2 &le;&nbsp;R,C&nbsp;&le;&nbsp;100), denoting the number of rows and columns of a rectangular field.</p>
<p>Each of next R lines contain C integers between -10000 and 10000, denoting a profit value for each cell in that row.</p>

*******OutputConstraints*******

<p><span style="font-size: 13px; color: #000020; ">For each test case, print a number on its own line, denoting the maximum total profit that can be extracted from four mines.</span></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
5 5
10 10 -1 -1 10
10 -1 -1 -1 10
-1 -1 -1 -1 -1
-1 -1 -1 10 10
10 -1 -1 10 10
2 3
-1 -2 -3
-4 -5 66

<strong>Output:</strong>
99
60
</pre>


______________________________________________________
FISHNET||||||true||||||


<p>In a highly modernized fishing village, inhabitants there make a living on fishery. Their major tools, fishing nets, are produced and fixed by computer. After catching fishes each time, together with plenty of fishes, they will bring back the shabby fishing nets, which might be full of leaks. Then they have to inspect those nets. If there exist large leaks, they have to repair them before launching out again.</p>
<p>Obviously, the smaller the leaks in the fishing nets are, the more fishes they will catch. So after coming back, those fishermen will input the information of the fishing nets into the computer to check whether the nets have leaks. The checking principle is very simple: The computer regards each fishing net as a simple graph constructed by nodes and edges. In the graph, if any circle whose length (the number of edges) is larger than 3 must has at least one chord, the computer will output "<tt>Perfect</tt>" indicating that the fishnet has no leaks. Otherwise, "<tt>Imperfect</tt>" will be displayed and the computer will try to repair the net.</p>
<p>&nbsp;</p>
<p><br /><strong>Note:</strong>&nbsp;A circle is a closed loop, which starts from one node, passes through other distinct nodes and back to the starting node. A chord is an edge, which connects two different nodes on the circle, but it does not belong to the set of edges on the circle.</p>

*******InputConstraints*******

<p>The input file contains several test cases representing different fishing nets. The last test case in the input file is followed by a line containing&nbsp;<tt>0 0</tt>.</p>
<p>The first line of each test case contains two integers,&nbsp;<span><em>n</em></span>&nbsp;and&nbsp;<span><em>m</em></span>&nbsp;, indicating the number of nodes and edges on the net respectively,&nbsp;<span>1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/2424img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>n</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/2424img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000</span>&nbsp;. It is followed by&nbsp;<span><em>m</em></span>&nbsp;lines accounting for the details of the edges. Each line consists of two integers&nbsp;<span><em>x</em><sub>i</sub></span>&nbsp;and&nbsp;<span><em>y</em><sub>i</sub></span>&nbsp;, indicating there is an edge between node&nbsp;<span><em>x</em><sub>i</sub></span>&nbsp;and node&nbsp;<span><em>y</em><sub>i</sub></span>&nbsp;.</p>

*******OutputConstraints*******

<p>For each test case, display its checking results. The word "<tt>Imperfect</tt>" suggests that the corresponding fishing net is leaking, while the word "<tt>Perfect</tt>" stands for a fishing net in good condition.</p>
<p>Follow the output for each net with a blank line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
</pre>
<pre><pre>4 4
1 2
2 3
3 4
4 1
3 3
1 2
2 3
3 1
0 0</pre>
<strong>Output:</strong></pre>
<pre><pre>Imperfect

Perfect</pre>
</pre>


______________________________________________________
ANARC09A||||||true||||||


<p>I&rsquo;m out of stories. For years I&rsquo;ve been writing stories, some rather silly, just to make simple problems look difficult and complex problems look easy. But, alas, not for this one.</p>
<p>You&rsquo;re given a non empty string made in its entirety from opening and closing braces. Your task is to find the minimum number of &ldquo;operations&rdquo; needed to make the string stable. The definition for being stable is as follows:</p>
<ol>
<li>An empty string is stable.</li>
<li>If S is stable, then {S} is also stable.</li>
<li>If S and T are both stable, then ST (the concatenation of the two) is also stable.</li>
</ol>
<p>All of these strings are stable: {}, {}{}, and {{}{}}; But none of these: }{, {{}{, nor {}{. <br />The only operation allowed on the string is to replace an opening brace with a closing brace, or visa-versa.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more data sets. Each data set is described on a single line. The line is a non-empty string of opening and closing braces and nothing else. No string has more than 2000 braces. All sequences are of even length.</p>
<p>The last line of the input is made of one or more &rsquo;-&rsquo; (minus signs.)</p>

*******OutputConstraints*******

<p>For each test case, print the following line:</p>
<p>k. N</p>
<p>Where k is the test case number (starting at one,) and N is the minimum number of operations needed to convert the given string into a balanced one.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
}{<br />{}{}{}<br />{{{}<br />---<br /><br /><strong>Output:</strong>
1. 2<br />2. 0<br />3. 1</pre>


______________________________________________________
ANARC09B||||||true||||||


<p>You&rsquo;ve really messed up this time. &ldquo;Go buy some square tiles&rdquo; your supervisor told you. But as usual, you were either busy reading that message, answering that e-email, or updating your wall status on facebook. &ldquo;Go buy some tiles&rdquo; was all that you could remember. Your supervisor is<br />now complaining that the tiles you bought were not squares and you&rsquo;ll be fired if you don&rsquo;t fix it! &ldquo;Fix it? How am I supposed to fix it?&rdquo; you say to yourself. &ldquo;I&rsquo;m a programmer, The only tiles I know are those of the game Tetris!&rdquo; There is no way you can afford to be fired either. This is your third job in less than a month. &ldquo;I have to fix it!&rdquo; you keep repeating.You call the store you bought the tiles from, but they won&rsquo;t take them back or even exchange. &ldquo;We cannot cancel orders once the merchandise has left the store&rdquo;, they tell you. You take a look at the tiles, they&rsquo;re all rectangle- shaped and all of the same size. You&rsquo;d be losing a lot if you cut them, not that you&rsquo;d be able to cut them into perfect squares in the first place. &ldquo;Wait a minute!&rdquo; you say to yourself. You grab a bunch of tiles, put them in some arrangement and Voila, that&rsquo;s a square. But that won&rsquo;t convince your boss. Tiles are supposed to be small, and what you came-up with is rather big. You take another look at your arrangement, and it hits you again. &ldquo;I&rsquo;m on a roll today!&rdquo; you say proudly to yourself. You just figured out how to find the smallest number of tiles needed to form the smallest possible square.</p>
<p>You rush and bring your supervisor to show him your discovery. He&rsquo;s not that much impressed. You&rsquo;re not making sense anyway (given all the blood rushing in your head trying to explain your algorithm.) You know that the calculation is definitely much simpler than what you&rsquo;re saying, but you just can&rsquo;t seem to think clearly. Finally, your supervisor shouts: &ldquo;First of all, the tiles have to be laid-down in the same orientation. Second, I&rsquo;m running a construction site here, not a software shop! How do you expect the workers to figure out that number! You either write me a program to do the calculation you&rsquo;re describing, or you go collect your netbook, your cell, your ipod, and your blackberry, and you get out of here this minute!&rdquo;</p>
<h3><img src="http://www.spoj.plhttp://img412.imageshack.us/img412/8599/square1j.jpg" alt="" width="170" height="170" /><img src="http://www.spoj.plhttp://img412.imageshack.us/img412/8599/square1j.jpg" alt="" width="90" height="90" /></h3>

*******InputConstraints*******

<p>Your program will be tested on one or more data sets. Each test set is described on a single line made of two positive numbers: (0 &lt; W, H &lt; 1, 000, 000) which are the width and height of each tile. The last line is made of two zeros.</p>

*******OutputConstraints*******

<p>For each test case, write the answer on a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 3<br />1 2<br />0 0<br /><br /><strong>Output:</strong><br />6<br />2<br /></pre>


______________________________________________________
ANARC09C||||||true||||||


<p>Any positive integer v can be written as p<sub>1</sub><sup>a1</sup> &lowast; p<sub>2</sub><sup>a2</sup> &lowast; . . . &lowast; p<sub>n</sub><sup>an</sup> where pi is a prime number and ai &ge; 0. For example: 24 = 2<sup>3</sup> &lowast; 3<sup>1</sup> .</p>
<p>Pick any two prime numbers p1 and p2 where p<sub>1</sub> != p<sub>2</sub> . Imagine a two dimensional plane where the powers of p<sub>1</sub> are plotted on the x-axis and the powers of p<sub>2</sub> on the y-axis. Now any number that can be written as p<sub>1</sub><sup>a1</sup> &lowast; p<sub>2</sub><sup>a2</sup> can be plotted on this plane at location (x, y) = (a1 , a2 ). The figure on the right shows few examples where p<sub>1</sub> = 3 and p<sub>2</sub> = 2.</p>
<p>This idea can be extended for any N -Dimensional space where each of the N axes is assigned a unique prime number. Each N -Dimensional space has a unique set of primes. We call such set the Space Identification Set or S for short. |S| (the ordinal of S) is N .</p>
<p>Any number that can be expressed as a multiplication of pi &isin; S (each raised to a power (ai &ge; 0) can be plotted in this |S|-Dimensional space. The figure at the bottom illustrates this idea for N = 3 and S = {2, 3, 7}. Needless to say, any number that can be plotted on space A can also be plotted on space B as long as S<sub>A</sub> &sub; S<sub>B</sub> .</p>
<p>We define the distance between any two points in a given N -Dimensional space to be the sum of units traveled to get from one point to the other while following the grid lines (i.e. movement is always parallel to one of the axes.) For example, in the figure below, the distance between 168 and 882 is 4.</p>
<p>Given two positive integers, write a program that determines the minimum ordinal of a space where both numbers can be plotted in. The program also determines the distance between these two integers in that space.</p>
<p><img src="http://www.spoj.plhttp://img41.imageshack.us/img41/9091/61244571.jpg" alt="" /><img src="http://www.spoj.plhttp://img41.imageshack.us/img41/9091/61244571.jpg" alt="" /></p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a line with two positive integers (0 &lt; A, B &lt; 1, 000, 000) where A &lowast; B &gt; 1.<br />The last line is made of two zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:</p>
<p>k. X:D</p>
<p>Where k is the test case number (starting at one,) X is the minimum ordinal needed in a space that both A and B can be plotted in. D is the distance between these two points.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />168 882<br />770 792<br />0 0<br /><br /><strong>Output:</strong><br />1. 3:4<br />2. 5:6</pre>


______________________________________________________
ANARC09D||||||true||||||


<p>Kermit The Frog is a classic video game with a simple control and objective but requires a good deal of thinking. You control an animated frog that can walk and hop, in both forward and backward directions. The frog stands in a space between an otherwise a contiguous line of tiles. Each tile is painted black on one side, and white on the other. The frog can walk (forward, or backward) over an adjacent tile (in front or behind him.) When the frog walks over a tile, the tile slides to the space where the frog was standing. For example, in the adjacent figure, the frog has two tiles behind him, and three in front. We&rsquo;ll use the notation BWFBBW to refer to this situation where F refers to the space (where the frog is standing,) B is a tile with its black face showing, while W is a tile with its white face showing. The forward direction is from left to right. If the frog were to walk forward, the resulting situation is BWBFBW. Similar behavior when the frog walks backward, the tile behind the frog slides to where the frog was standing. The frog can also hop over the tiles. The frog can hop over an adjacent tile landing on the tile next to it. For example, if the frog was to hop backward, it would land on the first (left-most) tile, and the tile would jump to the space where the frog was standing. In addition, the tile would flip sides. For example, hopping backward in the figure would result in the situation: FWWBBW. We challenge you to write a program to determine the minimum number of moves (walks or hops) to transform one tile configuration into another.</p>
<p><img src="http://www.spoj.plhttp://img209.imageshack.us/img209/7104/forg.jpg" alt="" /></p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a single line that specifies string S representing the initial tile arrangement. S is a non-empty string and no longer than 100 characters and is made of the letters &rsquo;B&rsquo;, &rsquo;W&rsquo;, and exactly one &rsquo;F&rsquo;. The last line of the input file has one or more &rsquo;-&rsquo; (minus) characters.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. M<br />Where k is the test case number (starting at one,) and M is the minimum number of moves needed<br />to transform the given arrangement to an arrangement that has no white tile(s) between any of<br />its black tiles . The frog can be anywhere. M is -1 if the problem cannot be solved in less than 10<br />moves.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />WWBBFBW<br />WWFBWBW<br />FWBBWBW<br />---<br /><br /><strong>Output:</strong><br />1. 0<br />2. 1<br />3. 2</pre>


______________________________________________________
ANARC09F||||||true||||||


<p>General Gee is the commander of a military base. He has just received alarming news from one of his spies: the enemy&#8217;s preparing an air missile strike. The base contains two magnetic towers. When activated and given sufficient power, each of the magnetic towers creates a powerful horizontal magnetic disk. If any missile passes through this disk it deflects away from the base. Although those towers seem to be an excellent air defense method, there is a problem: The area of the disk generated by a tower is proportional to the amount of energy it receives. The base has enough power plants to generate a certain amount of energy, which has to be divided among those two towers. That means that the total area of the two disks generated from the towers should not exceed the total energy generated by the power plants. Fortunately, the spy was able to know the exact target co-ordinates of the incoming missiles and he reported them to General Gee. The General needs your help in distributing the energy on the two magnetic towers to minimize the number of missiles that will not get deflected by the magnetic towers and therefore will hit the base. You may assume the following:</p>
<ul>
<li>The towers have different heights and therefore there are no problems associated with the magnetic disks interfering with each other.</li>
<li>A missile will deflect if it passes through the magnetic disk of a tower or even if it just touches its boundary.</li>
<li>A missile hitting a tower (landing exactly on its location) will deflect, even if the tower is not given any energy.</li>
<li>All incoming missiles will go down simultaneously at the exact instant; therefore, there will not be any time available to redistribute the energy amongst the two towers during the strike.</li>
</ul>
<p><img src="http://www.spoj.plhttp://img198.imageshack.us/img198/1425/circles.jpg" alt="" /></p>

*******InputConstraints*******

<p>Input consists of several test cases. Each test case is specified on N +2 lines. The first line contains an integer (1 &#8804; N &#8804; 1, 000) representing the number of missiles. The second line contains 5 real numbers X1 , Y1 , X2 , Y2 and T : (X1 , Y1 ) is the coordinates of the first tower, (X2 , Y2 ) is the coordinates of the second tower and (0 &#8804; T ) is the total amount of energy generated from the power plants (the total area of the two magnetic disks). Each line of the remaining N lines contains two real numbers representing the landing coordinates of a missile. The absolute value of all the given real numbers is less than or equal to 100 and may include a decimal point followed by up to 3 digits. Any two consecutive numbers on the same line are separated by one or more white-space characters. Zero or more blank lines may appear between test cases.<br />The last line of the input file is made of a single zero.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. M<br />Where k is the test case number (starting at one,) and M is the minimum number of missiles that will NOT be deflected in the best distribution of energy among the two towers. Use &#960; = 3.141.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />6<br />-3 0 3 0 40.833<br />-1 4<br />-2 2.5<br />1 2<br />5 2<br />-4 0<br />-3 -1<br />2<br />0 0Â Â  1 1 0<br />0 0<br />1 1<br />0<br /><br /><strong>Output:</strong><br />1. 2<br />2. 0<br /></pre>


______________________________________________________
BIRD||||||false||||||

<p>You are studying animals in a forest, and are trying to determine which animals are birds and which are not.</p>
<p><br />You do this by taking two measurements of each animal &ndash; their height and their weight. For an animal to be a bird, its height needs to be within some range, and its weight needs to be within another range, but you're not sure what the height and weight ranges are. You also know that every animal that satisfies these ranges is a bird.</p>
<p><br />You have taken some of the animals you have measured and shown them to biologists, and they have told you which are birds and which are not. This has given you some information on what the height and weight ranges for a bird must be. For the remaining animals, your program should determine if they are definitely birds, definitely not birds, or if you don't know from the information you have.</p>
<p><br />Input<br />One line containing an integer C, the number of test cases in the input.<br />For each of the C test cases:<br />&bull; One line containing an integer N, the number of animals you have shown to the<br />biologists.<br />&bull; N lines, one for each of these animals, each of the format "H W X", where H is the height<br />of the animal, W is the weight of the animal, and X is either the string "BIRD" or "NOT<br />BIRD". All numbers are positive integers.<br />&bull; One line containing an integer M, the number of animals you have not shown to the<br />biologists.<br />&bull; M lines, one for each of these animals, each of the format "H W", where H is the height<br />of the animal and W is the weight of the animal. All numbers are positive integers.</p>
<p><br />Output<br />For each of the C test cases:<br />&bull; One line containing the string "Case #X:" where X is the number of the test case, starting<br />from 1.<br />&bull; M lines, each containing one of "BIRD", "NOT BIRD", or "UNKNOWN" (quotes are<br />just for clarity and should not be part of the output).</p>
<p><br />Limits<br />1 &lt;= C &lt;= 20<br />1 &lt;= all heights and weights &lt;= 1000000<br />1 &lt;= N &lt;= 1000<br />1 &lt;= M &lt;= 1000</p>
<p>Sample input<br />3<br />5<br />1000 1000 BIRD<br />2000 1000 BIRD<br />2000 2000 BIRD<br />1000 2000 BIRD<br />1500 2010 NOT BIRD<br />3<br />1500 1500<br />900 900<br />1400 2020<br />3<br />500 700 NOT BIRD<br />501 700 BIRD<br />502 700 NOT BIRD<br />2<br />501 600<br />502 501<br />1<br />100 100 NOT BIRD<br />3<br />107 93<br />86 70<br />110 115</p>
<p><br />Sample output<br />Case #1:<br />BIRD<br />UNKNOWN<br />NOT BIRD<br />Case #2:<br />UNKNOWN<br />NOT BIRD<br />Case #3:<br />UNKNOWN<br />UNKNOWN<br />UNKNOWN</p>


______________________________________________________
CT||||||false||||||

<p>Consider a 2D integer grid with lower left corner at (0, 0) and upper right corner at (X, Y). We are interested in isosceles right triangles which all the 3 corners at the grid node (integer coordinates). Your task is to count the number of those triangles.</p>
<p><br />Input<br />The input begins with C &ndash; number of test cases.<br />Each test case consists of X, Y.</p>
<p><br />Output<br />For each test case, output the result in a line.</p>
<p><br />Limits<br />C &lt;= 20<br />0 &lt;= X, Y &lt;= 1000</p>
<p><br />Sample input<br />2<br />0 3<br />1 1</p>
<p><br />Sample output<br />0<br />4</p>


______________________________________________________
DP||||||false||||||

<p>Tom McCoffee owns the only pizza delivery place in the mountains. The terrain is represented as a rectangular grid of squares, where each square either contains a building or is empty. Each empty square has an integer height between 0 and 9, inclusive. Today, each building in the area has ordered one pizza, and Tom must use his two delivery boys to fulfill all the orders in the shortest total amount of time possible.</p>
<p><br />From each square in the grid, you can only move to adjacent squares. Two squares are adjacent if they share an edge. You can only move between two empty squares if the absolute difference of their heights is less than or equal to 1. If the height difference is 0, it takes 1 minute to make the move, and if the absolute height difference is 1, it takes 3 minutes.</p>
<p>You can always move to a building from any of its adjacent squares and vice versa, regardless of height. This is because all buildings are taller than the highest terrain, and each building has entrances and exits for all its adjacent squares at the correct heights. Moving to or from a square containing a building takes 2 minutes. The delivery boys are allowed to enter buildings even if they are not their final destinations. Note that the pizza place itself is also a building.</p>
<p><br />Each delivery boy can only carry one pizza at a time. This means that after each delivery, the delivery boy must return to the pizza place to pick up another pizza if there are more deliveries left to do.</p>
<p><br />Your task is to print the minimum time in minutes at which the last delivery can be made. If it is not possible to deliver all the pizzas, print -1 instead.</p>
<p><br />Input<br />One line containing an integer C, the number of test cases in the input.<br />For each of the C test cases:<br />&bull; The first line consists of M and N the size of the grid. M is the number of rows and N is<br />the number of columns.<br />&bull; The next M lines consists of a string which length is N. Each character could be &lsquo;$&rsquo;, &lsquo;X&rsquo;<br />or digits from &lsquo;0&rsquo; to &lsquo;9&rsquo;. '$' represents a building from which a pizza was ordered, 'X'<br />represents the location of the restaurant, and the digits '0'-'9' represent the heights of<br />empty squares.</p>
<p><br />Output<br />For each test case, print the minimum time in minutes at which the last delivery can be made. If<br />it is not possible to deliver all the pizzas, print -1 instead.</p>
<p><br />Limits<br />1 &lt;= C &lt;= 30<br />1 &lt;= M &lt;= 50<br />1 &lt;= N &lt;= 50<br />There are at most 20 buildings.</p>
<p>Sample input<br />2<br />3 7<br />3442211<br />34$221X<br />3442211<br />3 7<br />001000$<br />$010X0$<br />0010000</p>
<p><br />Sample output<br />8<br />13</p>


______________________________________________________
EQ||||||false||||||

<p>The train station has just used a new electronic queue system. Now passengers who want to buy tickets have to get the service ordering number and wait until it is his turn.</p>
<p><br />In this station, there are N cashers; each can serve one passenger at a time. When it&rsquo;s your turn, you will go to an assigned cashier to chose a ticket and pay for it. If you want to buy K tickets it will take you 5 minutes to chose the train, the time, the seats, etc and K more minutes for your tickets to be printed. If there are several available cashiers, a passenger would be assigned to the one with the lowest number.</p>
<p><br />Given the arrival time of passengers at the station and the amount of tickets they want to buy, your task is to calculate the total time P passengers spend buying their tickets (waiting time and buying time).</p>
<p><br />Input<br />The first line is C, the number of test cases.<br />For each test case:<br />&bull; The first line is N &ndash; number of cashiers.<br />&bull; The next line consists of P &ndash; the number of passengers.<br />&bull; The next P lines contain a pair of integers: the arrival time and the number of tickets he<br />wants to buy.<br />&bull; The arrival time of these P passengers will be distinct and will be sorted increasingly.</p>
<p><br />Output<br />For each test case, print total time of P passengers spend buying their tickets.</p>
<p><br />Limits<br />1 &lt;= C &lt;= 15<br />1 &lt;= N &lt;= 50<br />1 &lt;= P &lt;= 10000<br />All others numbers in the input are positive and less than 1000.</p>
<p><br />Sample input<br />1<br />2<br />3<br />1 1<br />2 10<br />3 2</p>
<p><br />Sample output<br />32</p>


______________________________________________________
FP||||||false||||||

<p>Bom has a list of n favorite numbers which are birthday, driving license, passport number, etc After creating an email account, Bom wants to choose a password as the largest number P among all possible numbers generated by the combinations of k (1 &lt;= k &lt;= n) positive numbers in the favorite list so that P is divisible by 9.</p>
<p><br />Your task is writing a program to help find P the password for Bom&rsquo;s email.</p>
<p><br />Input<br />The first line contains a positive integer T as the number of test cases in the input file. The<br />following lines describe information of each test case including:<br />&bull; One line containing two positive integers n and k,<br />&bull; n following lines are n favorite numbers.</p>
<p><br />Output<br />The output file contains T lines; each line is the solution of the corresponding test case that is<br />either password P or -1 in case of not finding a feasible number.</p>
<p><br />Limits<br />T &lt;= 30<br />1 &lt;= k &lt;= n &lt;= 100<br />1 &lt;= all favorite numbers &lt;= 10^6</p>
<p><br />Sample input<br />2<br />3 2<br />1<br />2<br />3<br />5 2<br />1<br />2<br />3<br />4<br />5</p>
<p><br />Sample output<br />-1<br />54</p>


______________________________________________________
GS||||||false||||||

<p>Your family has just moved to small town with simple transportation system: there are N conjunctions and N - 1 roads connecting the conjunctions. These roads guarantee that it&rsquo;s possible to travel between any two conjunctions. Each road connects two conjunctions and has a preferred value.</p>
<p><br />You are new here and not familiar with the roads. So when you stay at a conjunction which is not your destination, you will choose one of incident roads to walk (even it makes you get farther from your destination). The probability of choosing one road equals to its preferred value divide to total preferred value of all incident roads. For example, if there are three incident roads at current conjunction with preferred value 1, 2 and 3, the probability of choosing each road is 1/6, 2/6 and 3/6, respectively.</p>
<p><br />Given the starting conjunction where your house is and the final conjunction where is your school, what is the expected number of roads you have to walk to reach the destination?</p>
<p><br />Input<br />The input begins with T &ndash; number of test cases. For each test case, there will be:<br />&bull; The first line consists of N, st, en - number of conjunctions, starting and final<br />conjunction.<br />&bull; In next N - 1 lines, each line consists of three positive integers u, v and c indicate that<br />there is a road between conjunction u and v with preferred value c.</p>
<p><br />Output<br />For each test case, print the expected number of roads you have to walk, round to exactly 5<br />precision digits.</p>
<p><br />Limits<br />T &lt;= 20<br />1 &lt;= N &lt;= 15<br />All numbers in input &lt;= 100</p>
<p><br />Sample input<br />1<br />3 2 3<br />1 2 1<br />2 3 1</p>
<p><br />Sample output<br />3.00000</p>
<p><br />Explanation<br />There are 50% chance of going 2-3 directly; 25% chance of going 2-1-2-3, 12.5% of going 2-1-<br />2-1-2-3 and so on. The result equals 1 &times; 50% + 3 &times; 25% + 5 &times; 12.5% + &hellip; = 3</p>


______________________________________________________
HOUSES2||||||false||||||

<p>You are given three triangle houses. Each house is presented by three points in the 2D coordination. Houses are not overlap but can share points on their border.</p>
<p>You stay at point (sx, sy) and want to reach (ex, ey) by a shortest path. Your path can not intersect with a house but you can go a long a house&rsquo;s border. However, you can not &ldquo;go through&rdquo; the walls as follow (just an example, please use natural meaning):</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/huy391992:houses" alt="" width="273" height="191" /></p>
<p>You are to write a program to print the length of the shortest path.</p>
<p><br />Input<br />The input begins with T &ndash; number of test cases. For each test case:<br />&bull; The first line of each test case consists of sx, sy, ex, ey.<br />&bull; In next three lines, each line consists of 6 numbers x1, y1, x2, y2, x3, y3 denote<br />coordinates of a house.</p>
<p><br />Output<br />For each test case, print the length of the shortest path with exactly 5 precision digits.</p>
<p><br />Limits<br />T &lt;= 20<br />The absolute values of coordinates are less than 1000.</p>
<p><br />Sample input<br />1<br />0 0 3 0<br />1 0 2 0 1 1<br />2 0 2 -1 3 -1<br />2 1 3 1 2 2</p>
<p><br />Sample output<br />3.65028</p>


______________________________________________________
HSEQ||||||true||||||


<p>Given a sequence S of N integers, indexed from 0 to N-1, we define the weight of its continuous subsequence as the product of its length and its number of occurrences in the main sequence, and in case of uniqueness, we say its weight is 0.<br /><br />&nbsp;&nbsp; Let's see an example:<br /><br />&nbsp;&nbsp; N = 5<br />&nbsp;&nbsp; S = { 1, 7, 3, 1, 7 }</p>
<p>The continuous subsequence S[ 0, 1 ], which is equal to { 1, 7 }, has a weight of 4, by definition. The continuous subsequence S[ 2, 2 ] thus has a weight of 0.</p>
<p>Your task is to find the continuous subsequence of maximum weight. To break ties, choose the lexicographically smallest of the candidates ( a sequence A is lexicographically smaller than another sequence B if the first element at which they differ is smaller in A, or if A is a prefix of B ).<br /><br />If the maximum weight of all the continuous subsequences is 0, we say the sequence is invalid.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer, N ( 1 &lt;= N &lt;= 10<sup>5</sup> ).<br />The second line of input contains a sequence S of N integers, ( 0 &lt;= S<sub>i</sub> &lt;= 10<sup>9</sup> ).</p>

*******OutputConstraints*******

<p>In case of an invalid subsequence, output -1.<br />A continuous subsequence of the input sequence with the property defined above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />1 7 3 1 7<br />&nbsp;<br /><strong>Output:</strong><br />1 7</pre>


______________________________________________________
PHU09H||||||true||||||


<p style="text-align: justify;">You are going to buy a house and hence communicated with a real estate development company, which has just started their business and you are going to be the first buyer. So they are offering you something special. The real estate company has a rectangular shaped land of width W and height H. They are using coordinate system for measuring lands. (0, 0) is the lower left corner of their land and any point which has distance x from lower edge of the land and distance y from left edge of the land is known as (x, y) in the coordinate system.</p>
<p style="text-align: justify;">The real estate company has already built some houses in that piece of land. All of them are<br />rectangular shaped and their edges are parallel to edges of the main land. The location of a house can be addressed by four integers x1, y1, x2, y2. Where (x1, y1) is the lower left corner and (x2, y2) upper right corner of the house.</p>
<p style="text-align: justify;"><br />The special offer is that you can choose any rectangular shaped region that contains<br />exactly one house with any amount of adjacent open space. You may not have enough money to afford open space and choose to buy only the region that a house occupies. If you have enough money, you can keep open space in front of your house for gardening!</p>
<p style="text-align: justify;"><br />But still there are some restrictions. For the ease of their future use of rest of their land<br />you can only choose a rectangular shaped region and the edges of which are parallel to the edges of the main land. The corners of your selected region should be integer coordinates. It can be (3, 2) but cannot be (3.5, 2). You cannot chose a region for which part of a house is inside the region and another part of that house is outside the region. You cannot choose a region having more than one house and a region having no house. How many ways you can choose your land following the above rules?</p>

*******InputConstraints*******

<p style="text-align: justify;">Input will start with an integer T (T is around 500), the number of test cases. Each of the test cases starts with two integers W and H (1 &lt;= W, H &lt;= 1000000000), width and height of the land and the next line contains an integer N (1 &lt;= N &lt;= 50), the number of houses in the land.</p>
<p style="text-align: justify;">Each of the next N lines will contain four integer x1, y1, x2, y2 ( 0 &lt;= x1 &lt; x2 &lt;= W and<br />0 &lt;= y1 &lt; y2 &lt;= H ), which describes the location of the house. Note that no house can overlap with another house and all the given coordinates will be non negative integers.</p>

*******OutputConstraints*******

<p style="text-align: justify;">For each input, print a single line of the form &ldquo;Case #: W&rdquo;, where &lsquo;#&rsquo; will be replaced by the<br />case number and W will be replaced by the number of ways you can choose your land. Here W<br />can be very large, so you should print the number of ways modulo 1000000007 as W.</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />2<br />3 3<br />1<br />1 1 2 2<br />10 10<br />2<br />1 1 4 4<br />6 6 8 8<br /><br /><strong>Output:</strong><br />Case 1: 16<br />Case 2: 429<br /><br /></pre>


______________________________________________________
PHU09K||||||true||||||


<p style="text-align: justify;">Crimes in city of Megacity are going high. To fight the crimes, the authorities have created a highway patrol. The city consists of a number of oneway roads. At the ends of each road, there is a base station for the patrol troops. Each base station has a number of troops. At the beginning, each station sends a troop along all the outgoing highways from that station. The troop patrols the highway and whenever it reaches the station on the other side of the highway, it waits there, and the troop that has been waiting there the most, is sent along the highway that has not been patrolled the longest time.</p>
<p style="text-align: justify;">Soon, they faced some difficulties, cause, the frequency of patrolling a highway is more and more dependent on the number of highways that started and ended at the base station. If the number of highways started at a base station is more than the number of highways ended there, the roads are patrolled less frequently. And if, no highways end at some base station, then, the highways started from there, will not be patrolled more than once. In this situation, the highway patrol decided to remove some highways from the patrolling schedule, so that, at each base station, the number of highways started and ended at any base station will be equal. The rest of the highways will be monitored using video surveillance. But, due to some security issues, there are some highways that have to be patrolled.</p>
<p style="text-align: justify;"><br />Now, given the cost of patrolling highways, and that of installing video surveillance, find the minimum cost of monitoring the whole city. Please keep in mind that, video surveillance can not substitute the highway patrol completely. So, there has to be at least one highway that will be patrolled.</p>

*******InputConstraints*******

<p style="text-align: justify;">First line of the input contains an integer T(T&le; 70), the number of test cases. This is followed by T test cases. Each test case starts with two integers N(1 &le; N &le; 100) and M(1 &le; M &le; 1000), the number of base stations and highways. This is followed by M lines, each containing 5 integers, u,v,p,s,x(1 &le; u,v &le; N,0 &le; p,s &le; 1000000) where u and v means, the highway starts from base station u, and ends at v, p is the cost of patrolling and s is the cost of installing video surveillance. If the highway must be patrolled, then x will be one. Otherwise it will be zero.</p>

*******OutputConstraints*******

<p>For each test case, output the case number, followed by the minimum cost to monitor the highways. If it is not possible to patrol satisfying the given constraints, output &ldquo;impossible&rdquo; (without quotes).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />2<br />4 5<br />1 2 10 25 0<br />2 3 10 5 0<br />3 1 10 5 0<br />2 4 10 5 0<br />4 3 30 5 0<br />4 5<br />1 2 10 25 0<br />2 3 10 5 0<br />3 1 10 5 0<br />2 4 10 5 0<br />4 3 30 5 1<br /><br /><strong>Output:</strong><br /><br />Case 1: 40<br />Case 2: 65<br /></pre>


______________________________________________________
BSMATH1||||||false||||||

<p>Little Ben had just learned different bases in math. He learned very quickly how to add and subtract in multiple bases, so his teacher provided him with a worksheet to work on. Each section provided a different base and gave an example.</p>
<p>Unfortunately, Little Ben's teacher forgot to write what base each question was in! Please help Little Ben do his homework; he'll be very grateful!</p>
<p style="text-align: center;"><strong>Input</strong></p>
<p>The first line of input contains an integer <code>n</code> (1 &le; n &lt; 36) that indicates the amount of sections (test cases). Each test case is as follows:</p>
<pre><span style="font-family: 'courier new', courier;">A - B = C
I
X1 op Y1 =
X2 op Y2 =
...
XI op YI =</span></pre>
<p>where <code>A - B = C</code> is the correct example, <code>I</code> (1 &le; I &le; 1000) is the number of questions in that section, <code>Xi</code> and <code>Yi</code> are the operands of each problem (<code>Xi</code> = |<code>Xi</code>|, <code>Yi</code> = |<code>Yi</code>|), and <code>op</code> is either + or -, denoting addition or subtraction.</p>
<p style="text-align: center;"><br /> <strong>Output</strong></p>
<p>Your program should output in the following format:</p>
<pre><span style="font-family: 'courier new', courier;">SECTION 1 (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi<br />SECTION 2 (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi<br />...<br />SECTION N (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi</span></pre>
<p>where <code>Zi</code> is the solution to <code>Xi op Yi</code>, and <code>b</code> is the base used. (2 &le; b &le; 36). <em>If the base is ambiguous, use the smallest base for which the example is correct and the questions are valid.</em>&nbsp;You may assume all solutions fit inside a 64-bit integer and that each base will appear at most once.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><strong>Input:</strong></p>
<pre><span style="font-family: 'courier new', courier;">4
110 - 101 = 1
2
1111111 + 1 =
100 - 1 =
177 + 1 = 200
2
7712347 + 7 =
11111 + 7777 =
ZAP + DZ = ZOO
1
E + PI =
10 + 1 = 11
1
5 + 5 =</span></pre>
<p><strong>Output:</strong></p>
<pre><span style="font-family: 'courier new', courier;">SECTION 1 (BASE 2)
  1111111 + 1 = 10000000
  100 - 1 = 11
SECTION 2 (BASE 8)
  7712347 + 7 = 7712356
  11111 + 7777 = 21110
SECTION 3 (BASE 36)
  E + PI = PW
SECTION 4 (BASE 6)
  5 + 5 = 14</span></pre>
<p style="text-align: center;"><strong>Notes: </strong></p>
<ul>
<li>large input/output data, be careful with certain languages</li>
<li>Tricky input/output; please read problem statement carefully</li>
</ul>


______________________________________________________
KUTH||||||true||||||


<p>One day Mirko was cleaning up his room and found a straightedge and a compass. He went to the school the next day and challenged his friend Slavko to a geometric construction battle. Mirko knows how to construct some angles using the straightedge and compass and knows how to subtract and add any two angels he constructs. Slavko now shouts random angles and Mirko must draw them as fast as possible. You are observing this battle and would like to know if Mirko can construct the angles Slavko shouts at all.</p>

*******InputConstraints*******

<p>The first line of input contains two integers, N (1 &le; N &le; 100000), number of angles Mirko knows how to construct initially and K (1 &le; K &le; 100000), number of angles Slavko selected. The second line of input contains N positive real numbers with exactly 6 decimal digits, all smaller than 360, the angles Mirko knows how to construct initially. The third line contains K positive real numbers with exactly 6 decimal digits, all smaller than 360, the angles Slavko selected.</p>

*******OutputConstraints*******

<p>Output consist of K lines, one for each angle Slavko selected. The i-th line should contain "YES" if Mirko can construct the i-th angle, and "NO" otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 1
30.000000 70.000000
40.000000

<strong>Output:</strong>
YES

<strong>Input:</strong>
1 1
100.000000
60.000000

<strong>Output:</strong>
YES

<strong>Input:</strong>
3 2
10.000000 20.000000 30.000000
5.000000 70.000000

<strong>Output:</strong>
NO
YES
</pre>


______________________________________________________
SEQUOIA||||||true||||||


<blockquote>
<p><em><strong>"</strong></em><em>Sequoiadendron giganteum (giant sequoia, Sierra redwood, or Wellingtonia) is the sole species in the genus Sequoiadendron, and one of three species of coniferous trees known as redwoods, classified in the family Cupressaceae in the subfamily Sequoioideae, together with Sequoia sempervirens (Coast Redwood) and Metasequoia glyptostroboides (Dawn Redwood). The common use of the name "sequoia" generally refers to Sequoiadendron, which occurs naturally only in the various groves that exist on the western slopes of the Sierra Nevada Mountains of California.</em> " - Wikipedia.</p>
</blockquote>
<p>We'll slightly redefine this beautiful tree to fit our needs:</p>
<p>We say our tree is infinite, and rooted in 0. We recursively define the tree as follows:</p>
<p>Let x be the root of a subtree. For all i from [ 0, lg( x - dad(x) )&gt;, we say the children of x are of the form 2<sup>i</sup> + x, where dad(x) is the index of x's parent. 0 has infinitely many childern. Odd nodes have no children.</p>
<p>&nbsp;</p>
<p>You will be given several queries, each consisting of two integers: A and B. You're asked to output the index of the lowest common ancestor of A and B. We define the lowest common ancestor of two nodes to be the node closest to A and B that lies on paths from A to 0 and from B to 0.</p>

*******InputConstraints*******

<p>The first line of input contains an integer N, the number of queries. ( 1 &lt;= N &lt;= 100000 )</p>
<p>The next N lines contain a pair of integers, A and B. ( 0 &lt;= A, B &lt;= 10<sup>18</sup> )</p>

*******OutputConstraints*******

<p>You are asked to output N lines, where the i-th line corresponds to the answer to the i-th query.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />15 13<br />11 7<br /><strong>Output:</strong>
12<br />0</pre>


______________________________________________________
CPAIR||||||true||||||


<p>You're given a sequence A of N non-negative integers. Answer Q queries, where each query consists of three integers: v, a, b. The answer is number of pairs of integers i and j that satisfy these conditions:
<p>1 <= i <= j <= N
<p>a <= j-i+1 <= b
<p>A[k] >= v for every integer k between i and j, inclusive
<h3>Constraints</h3>
<p>1 <= N <= 100 000
<p>1 <= Q <= 100 000
<p>0 <= A[k] <= 1000, for every integer k between 1 and N, inclusive
<p>0 <= v <= 1000
<p>1 <= a <= 100 000
<p>1 <= b <= 100 000



*******InputConstraints*******

<p>The first line of input contains two integers, N and Q. The second line contains the sequence A, consisting of N integers. Each of the next Q lines contains three numbers, v, a and b, defining a query.


*******OutputConstraints*******

<p>In the i-th line output only one integer denoting the answer to the i-th query.


*******IOTestCases*******


<pre>
<b>Input:</b>
5 3
5 3 2 7 4
3 2 3
2 2 5
4 1 1

<b>Output:</b>
2
10
3
</pre>



______________________________________________________
BSMATH2||||||false||||||

<p>With <a href="../BSMATH1/">your previous help</a>, Little Ben managed to get a perfect score on his homework. He came running home to show his brother, Big Ben. Big Ben had done this type of thing before, you see, so he naturally wasn't too impressed. Big Ben boasted, "Back in my day, we had to multiply and divide as well, the numbers were much bigger, AND we had to do it in base 64."</p>
<p>Little Ben became intrigued by this and searched the Internet for a worksheet. It turns out that his teacher made a worksheet for one of the higher grades that was just like Big Ben's. She also forgot to write what base each question was in... again!</p>
<p>According to the worksheet,</p>
<p style="padding-left: 30px; text-align: center;"><span style="font-family: 'courier new', courier;">The digits used for Base 64 are the same as that of Base 62, with the single- and double-quotes as the last two; the digits used are 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'".</span></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p>The first line of input contains an integer <code>n</code> (1 &lt; n &lt; 64) that indicates the amount of sections (test cases). Each test case is as follows:</p>
<pre><span style="font-family: 'courier new', courier;">A - B = C
I
X1 op Y1 =
X2 op Y2 =
...
XI op YI =</span></pre>
<p>where <code>A - B = C</code> is the correct example, <code>I</code> (1 &le; I &le; 5000) is the number of questions in that section, <code>Xi</code> and <code>Yi</code> are the operands of each problem (0 &lt; X, Y &le; 2<sup>100</sup>), and <code>op</code> is one of <br />[+, -, *, %], denoting addition, subtraction, multiplication, or modulo.</p>
<p style="text-align: center;"><br /> <strong>Output</strong></p>
<p>Your program should output in the following format:</p>
<pre><span style="font-family: 'courier new', courier;">SECTION 1 (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi<br />SECTION 2 (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi<br />...<br />SECTION N (BASE b)<br />  X1 op Y1 = Z1<br />  X2 op Y2 = Z2<br />  ...<br />  Xi op Yi = Zi</span></pre>
<p>where <code>Zi</code> is the solution to <code>Xi op Yi</code>, and <code>b</code> is the base used. (2 &le; b &le; 64). <em>If the base is ambiguous, use the smallest base for which the example is correct and the questions are valid</em>.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><strong>Input:</strong></p>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: x-small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">4
K72Q - 9C5U = APRR
3
11JH4 - BMEB =
PB04 % DQ9O =
F0GM - UQR0 =
A654A - 9A60E = AE3B
2
B94BA + 3460A =
123A29 % 5E065 =
37CR - olh = 2KSm
5
157W % 1bIJ =
1P56 % 1Eob =
1C6I * 1"uX =
1Ktc % 1BMf =
20ne * 22V" =
BQfC -</span><span style="font-family: 'courier new', courier;"> 4Kdb = 761H
2</span></span><span style="font-size: small;"><span style="font-family: 'courier new', courier;">
9aFL * 3WU3 =
5fc</span></span><span style="font-size: small;"><span style="font-family: 'courier new', courier;">V + 7fWL =</span></span></span></pre>
<p><strong>Output:</strong></p>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">SECTION 1 (BASE 31)
  11JH4 - BMEB = KS2O
  PB04 % DQ9O = BFLB
  F0GM - UQR0 = -FQA9
SECTION 2 (BASE 15)
  B94BA + 3460A = EDAC5
  123A29 % 5E065 = 5594E
SECTION 3 (BASE 64)
  157W % 1bIJ = 157W
  1P56 % 1Eob = AIX
  1C6I * 1"uX = 2O3gS"I
  1Ktc % 1BMf = 9Wz
  20ne * 22V" = 46bA3EO
SECTION 4 (BASE 42)
  9aFL * 3WU3 = bBafS</span></span><span style="font-size: small;"><span style="font-family: 'courier new', courier;">4L
  5fcV + 7fWL = DfTA</span></span></pre>
<p style="text-align: center;"><strong>Notes: large input/output data</strong></p>


______________________________________________________
ISUN1||||||true||||||


<p>When LL and ErBao were young, they liked jumping rubber-rope (Tiao Pi Jin) very much. They jumped every day happily. But one day HH came and brought away the peaceful days. HH sometimes threw stones to them, and sometimes pushed them down suddenly. Seeing ErBao crying sadly, LL got angry finally, and decided to give HH some color see see.<br />There were n trees on the ground (regarded as points), and LL planed to use his rubber-rope to wrap all the trees and form a big circle, then fooled HH into it and threw stones to him. Before finding out how to fool HH into the circle, LL wants to know how big the rubber-rope circle would be, say, the perimeter.<br />But LL found it difficult than expected, because their playing territory and the trees were in a bigger fence (a simple polygon with m vertices). So, the rubber-rope mustn&rsquo;t be out of the fence either. It&rsquo;s your turn to help LL find the perimeter of the circle.</p>
<p>&nbsp;</p>
<p><strong>sample 1</strong></p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/davii:ISUN1_p1" alt="" width="298" height="214" /></p>
<p>&nbsp;</p>
<p><strong>sample 2</strong></p>
<p><img src="http://www.spoj.plhttp://www.spoj.pl/content/davii:ISUN1_p2" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The input contains multiple cases terminated with EOF.<br />For each case, first line contains two integers: m, n.<br />(3 &lt;= m &lt;= 500, 0 &lt;= n &lt;= 500)<br />Next m lines each contain two integers: Xfi, Yfi ----coordinate of the fence&rsquo;s ith vertex, in Counterclockwise order.<br />Next n lines each contain two integers: Xti, Yti ----coordinate of the ith tree.<br />It&rsquo;s guaranteed that all trees were strictly in the fence, and the fence doesn&rsquo;t intersect or touch itself.<br />The absolute value of the coordinates doesn&rsquo;t exceed 10000.</p>

*******OutputConstraints*******

<p>For each case output the perimeter of the rubber-band with three digits after the dot.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />8 2<br />0 0<br />30 0<br />30 20<br />20 20<br />20 10<br />10 10<br />10 20<br />0 20<br />5 15<br />25 15<br /><br />12 5<br />5 5<br />5 20<br />-5 20<br />-5 5<br />-20 5<br />-20 -5<br />-5 -5<br />-5 -20<br />5 -20<br />5 -5<br />20 -5<br />20 5<br />0 0<br />0 17<br />0 -17<br />17 0<br />-17 0<br /><br /><strong>Output:</strong><br />Case #1: 48.284<br />Case #2: 104.000<br /><br /></pre>


______________________________________________________
SERVICEH||||||true||||||


<p>A company provides service for its partners that are located in different towns. The company  has three mobile service staff employees. If a request occurs at some location, an employee of  the  service  staff  must  move  from  his  current  location  to  the  location  of  the  request  (if  no  employee  is  there)  in  order  to  satisfy  the  request.  Only  one  employee  can  move  at  any  moment.  They  can  move  only  on  request  and  are  not  allowed  to  be  at  the  same  location.  Moving  an  employee  from  location  p  to  location  q  incurs  a  given  cost  <strong>C(p,q)</strong>.  The  cost  function  is  not  necessarily  symmetric,  but  the  cost  of  not  moving  is  0,  i.e.  <strong>C(p,p)=0</strong>.  The  company must satisfy the received requests in a strict first-come, first-serve basis. The goal is  to minimize the total cost of serving a given sequence of requests.</p>
<p><strong>Task</strong></p>
<p>You are to write a program that decides which employee of the service staff is to move for  each request such that the total cost of serving the given sequence of requests is as small as  possible.</p>

*******InputConstraints*******

<p>The first line contains two integers, L and N. L (3 &lt;= L &lt;= 300) is the number of locations and N (1 &lt;= N &lt;= 3000) is the number of requests. Locations are identified by the integers from 1 to L. Each of the next L lines contains L non-negative integers. The jth number in the line i+1 is the cost C(i,j), and it is less than 2001.</p>
<p>The last line contains N integers, the list of the requests. A request is identified by the identifier of the location where the request occurs. Initially, the three service staff employees are located at location 1, 2 and 3, respectively.</p>

*******OutputConstraints*******

<p>The first line contains one integer, M, the minimal total cost of serving the input sequence of the requests. The second line contains exactly N integers. The ith number is the identifier of the service staff employee (1, 2 or 3) who will serve the ith request. If there are multiple possibilities, your program should output one sequence only; it does not matter which one.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 9<br />0 1 1 1 1<br />1 0 2 3 2<br />1 1 0 4 1<br />2 1 5 0 1<br />4 2 3 4 0<br />4 2 4 1 5 4 3 2 1<br /><br /><strong>Output:</strong><br />5<br />1 2 1 2 2 1 3 1 3<br /></pre>


______________________________________________________
NG0FRCTN||||||true||||||


<p><span style="font-size: small;">A fraction tree is an infinite binary tree&nbsp; defined as follows:</span></p>
<p><span style="font-size: small;">1)Every node of tree contains a fraction<br /></span></p>
<p><span style="font-size: small;">2)Root of tree contains the fraction 1/1<br /></span></p>
<p><span style="font-size: small;">3)Any node with fraction i/j has two children : left child with fraction i/(i+j) and right child with fraction (i+j)/j&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span style="font-size: small;">For example , fraction tree upto 3 levels is as shown:</span></p>
<h3 style="text-align: center;"><span style="font-size: small;"><img title="Fraction tree upto 3 levels" src="http://www.mathlesstraveled.com/custom/images/cw-small.png" alt="Fraction tree upto 3 levels" width="428" height="219" /></span></h3>
<p><span style="font-size: small;">We number the nodes according to increasing levels ( root is at level 1) and at any same level , nodes are numbered from left to right. So first node holds the fraction 1/1 , second one holds 1/2 , third one holds 2/1 fourth one holds 1/3 and so on.</span></p>
<p><br /><span style="font-size: small;">Your task is simple. Given a number n , you are to find the fraction at the nth node.</span></p>
<p><span style="font-size: small;">&nbsp;</span></p>

*******InputConstraints*******

<p><span style="font-size: small;">Every line of the input contains a single number n. You are to find the fraction at nth node of fraction tree. Input file terminates with a 0 which is not to be processed.</span></p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each input , print numerator and denominator of the lowest form of the fraction seperated by a /. Output of each case to be done in seperate lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />2<br />3<br />7<br />0<br /><br /><strong>Output:</strong><br />1/1<br />1/2<br />2/1<br />3/1<br /><br />Constraints : 1&lt;= # of test cases &lt;=30000  1&lt;=N&lt;=10^10<br /></pre>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 65px; width: 1px; height: 1px;">1<br />1<br />uQs<br />+<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br /><br /><br /><br /><br /><br /><br /><br /><br />1 <br />2 u<br />e<br />e<br />e<br />e<br />e<br />e<br />%<br />%<br />%<br />%<br />%<br />%<br />2<br />u1<br />e<br />e<br />e<br />e<br />e<br />e<br />%<br />%<br />%<br />%<br />%<br />1 %<br />3<br />u<br />A<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />3<br />2<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />2<br />3<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />3<br />1<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br />1 <br />4<br />uA<br />A<br /><br /><br />4<br />3<br />uA<br />A<br /><br /><br />3<br />5<br />uA<br />A<br /><br /><br />5<br />2<br />uA<br />A<br /><br /><br />2<br />5<br />uA<br />A<br /><br /><br />5<br />3<br />uA<br />A<br /><br /><br />3<br />4<br />uA<br />A<br /><br /><br />4<br />1<br />uA</div>


______________________________________________________
PATULJCI||||||false||||||

<p>Snow White and the N dwarfs live in the forest. While the dwarfs mine away Snow White hangs&nbsp;around social networks.</p>
<p>Each morning the dwarfs form a long line and go whistling away to the mine. Snow White runs around&nbsp;them and snaps pictures to upload onto her favorite social network.</p>
<p>When dwarfs enter the mine, Snow White goes back to their house and goes through the pictures,&nbsp;selecting pretty ones. Each dwarf has a colored cap, and there are C different colors. A picture is pretty&nbsp;if more than half caps on it are of the same color. In other words, if there are K dwarfs on the picture,&nbsp;it is pretty if strictly more than K / 2 dwarfs have same colored caps.</p>
<p>Write a program that will check for a set of M pictures if they are pretty, and what color is dominating&nbsp;if they are.</p>
<h3><strong>Input</strong></h3>
<p>First line contains two integers N and C (3 &le; N &le; 300000, 1 &le; C &le; 100000) number of dwarfs and&nbsp;number of colors.</p>
<p>Second line contains N integers between 1 and C (inclusive), colors of dwarves hats, ordered the way&nbsp;they formed the line that morning.</p>
<p>Third line contains M (1 &le; M &le; 100000), number of pictures.</p>
<p>Next M lines contain two integers A and B (1 &le; A &le; B &le; N). Each line describes one picture. On it&nbsp;there are all dwarves starting from A-th all the way to the B-th.</p>
<h3>Output</h3>
<p>Output M lines. For each picture output &ldquo;no&rdquo; if Snow White doesn't think the picture is pretty, and&nbsp;&ldquo;yes X&rdquo;, where X is the color dominating on the picture, if she does.</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
10 3
1 2 1 2 1 2 3 2 3 3
8
1 2
1 3
1 4
1 5
2 5
2 6
6 9
7 10

<strong>Output:</strong>
no
yes 1
no
yes 1
no
yes 2
no
yes 3<span style="white-space: normal;">
</span></pre>


______________________________________________________
NG1FRCTN||||||true||||||


<p><span style="font-size: small;">A fraction tree is an infinite binary tree&nbsp; defined as follows:</span></p>
<p><span style="font-size: small;">1)Every node of tree contains a fraction<br /></span></p>
<p><span style="font-size: small;">2)Root of tree contains the fraction 1/1<br /></span></p>
<p><span style="font-size: small;">3)Any node with fraction i/j has two children : left child with fraction i/(i+j) and right child with fraction (i+j)/j&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p><span style="font-size: small;">For example , fraction tree upto 3 levels is as shown:</span></p>
<h3 style="text-align: center;"><span style="font-size: small;"><img title="Fraction tree upto 3 levels" src="http://www.mathlesstraveled.com/custom/images/cw-small.png" alt="Fraction tree upto 3 levels" width="428" height="219" /></span></h3>
<p><span style="font-size: small;">We number the nodes according to increasing levels ( root is at level 1) and at any same level , nodes are numbered from left to right. So first node holds the fraction 1/1 , second one holds 1/2 , third one holds 2/1 fourth one holds 1/3 and so on.</span></p>
<p><br /><span style="font-size: small;">Your task is simple, as always !. Given two numbers a and b , you are to find the product of&nbsp; fractions at all those nodes whose number is between a and b both inclusive.<br /></span></p>
<p><span style="font-size: small;">&nbsp;</span></p>

*******InputConstraints*******

<p><span style="font-size: small;">Every line of the input contains two&nbsp; numbers a and b seperated by a space. You are to find the product of all fractions which are at node having number between a and b both inclusive. Input file terminates with a 0 0 which is not to be processed.</span></p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each input , print numerator and denominator of the lowest form of the fraction seperated by a /. Output of each case to be done in seperate lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 1<br />1 2<br />2 4<br />0 0<br /><br /><strong>Output:</strong><br />1/1<br />1/2<br />1/3<br /><br />Constraints : 1&lt;=T &lt;=30000  1&lt;=a&lt;=b&lt;=10^10<br /></pre>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 65px; width: 1px; height: 1px;">1<br />1<br />uQs<br />+<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br />Q<br /><br /><br /><br /><br /><br /><br /><br /><br />1 <br />2 u<br />e<br />e<br />e<br />e<br />e<br />e<br />%<br />%<br />%<br />%<br />%<br />%<br />2<br />u1<br />e<br />e<br />e<br />e<br />e<br />e<br />%<br />%<br />%<br />%<br />%<br />1 %<br />3<br />u<br />A<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />3<br />2<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />2<br />3<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br /><br />3<br />1<br />uA<br />A<br />A<br />A<br />A<br />A<br /><br /><br /><br /><br /><br />1 <br />4<br />uA<br />A<br /><br /><br />4<br />3<br />uA<br />A<br /><br /><br />3<br />5<br />uA<br />A<br /><br /><br />5<br />2<br />uA<br />A<br /><br /><br />2<br />5<br />uA<br />A<br /><br /><br />5<br />3<br />uA<br />A<br /><br /><br />3<br />4<br />uA<br />A<br /><br /><br />4<br />1<br />uA</div>


______________________________________________________
RESN04||||||true||||||


<p>Alice and Bob play the following game : There are N piles of stones with Si stones in the ith pile. Piles are numbered from 1 to N. Alice and Bob play alternately, with Alice starting. In a turn, the player chooses any pile i which has atleast i stones in it, and removes exactly i stones from it. The game ends when there is no such pile. The player who plays last wins the game. Assuming Alice and Bob play optimally, who will win the game?</p>

*******InputConstraints*******

<p>The first line contains the number of test cases T (&lt;= 100). There follow 2T lines, 2 per test case. The first line of each test case conains N (&lt;= 100), the number of piles. The second line contains N space seperated integers, specifying the number of stones in pile 1, pile 2, ..., pile N. There will be atleast 1 and atmost 1000 stones in any pile.</p>

*******OutputConstraints*******

<p>Output T lines, one per test case. For each test case, output "ALICE" if Alice wins the game, and "BOB" if Bob wins the game.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1<br />1<br />2<br />1 1<br /><br /><strong>Output:</strong><br />ALICE<br />ALICE<br /></pre>


______________________________________________________
LASTDIG2||||||false||||||

<p style="text-align: justify;">Pappu was doing the work of his math class about three days but he is tired of make operations a lot and he should deliver his task tomorrow. His math&rsquo;s teacher gives two numbers a and b. The problem consist in find the last digit of the potency of base a and index b. Help Pappu with his problem. You are given two integer numbers: the base a (number of digits d, such that 1&lt;=d&lt;=1000) and the index b (0 &lt;= b &lt;= 922*10^15). You<br />have to find the last digit of a^b.</p>
<p style="text-align: justify;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="text-decoration: underline;"><strong>Input</strong></span><br />The first line of input contains an integer t, the number of test cases (t &lt;= 30). t test cases follow. For<br />each test case will appear a and b separated by space.</p>
<p style="text-align: justify;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="text-decoration: underline;"><strong>Output</strong></span><br />For each test case output an integer per line representing the result.</p>
<p style="text-align: justify;"><span style="text-decoration: underline;"><strong>Example</strong></span><br />Input:<br />3<br />3 10<br />6 2<br />150 53<br />Output:<br />9<br />6<br />0</p>


______________________________________________________
LPRIME||||||true||||||


<p><a href="../../../users/tonyxty/">Lambda</a> checks primality in a weird way. He checks the following two conditions.</p>
<ul>
<li>All the digits of the number in the decimal system are primes or one, namely 1, 2, 3, 5 or 7.</li>
<li>It isn't a multiple of 2, 3, 5, 7, 11 or 47 (Why 47? I don't know).</li>
</ul>
<p>In order to estimate the accuracy of his approach, he asks you to calculate the number of decimal integers of a specific length that satisfy the conditions.</p>

*******InputConstraints*******

<p>The first and only line contains  an integer <em>n</em>, denoting the length of integers.</p>

*******OutputConstraints*******

<p>The only line contains the answer <strong>modulo 9973</strong>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br /><br /><strong>Output:</strong><br />1<br /><br /><strong>Input:</strong><br />2<br /><br /><strong>Output:</strong><br />8<br /><br /><strong>Input:</strong><br />4<br /><br /><strong>Output:</strong><br />182<br /><br /><strong>Input:</strong><br />1000000000<br /><br /><strong>Output:</strong><br />4589<br /><br /></pre>

______________________________________________________
KSEQ||||||true||||||


<p>A 123 sequence is defined as a non-decreasing sequence of length&gt;=2, where each number is 1 or 2 or 3. The difference between all unique pairs of numbers is given i.e. for a 123 sequence a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ..., an the differences are a<sub>j</sub>-a<sub>i</sub> for 1&lt;=i&lt;j&lt;=n.</p>
<p>Since the 123 seq contains only 1, 2, 3 the difference between any pair can be 0, 1, 2. Given the number of 0s, 1s, 2s in the difference sequence X, Y, Z respectively, your task is to find the number of distinct 123 sequences that could result in X, Y, Z.</p>
<p>Two 123 sequences A and B are considered different if there exists atleast one i such that A<sub>i</sub> is not equal to B<sub>i</sub>.</p>

*******InputConstraints*******

<p>First line of the input contains the number of test cases T. <strong>T&lt;=10000</strong>. Then follow T lines each containing 3 space separated integer X, Y, Z. <strong>0&lt;=X,</strong><strong>Y,</strong><strong>Z,&lt;=10<sup>8</sup></strong>. <strong>X+</strong><strong>Y+</strong><strong>Z&gt;0</strong>.</p>

*******OutputConstraints*******

<p>For each test case output the number of distinct 123 sequences in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />0 2 1<br />1 2 3<br />1 3 2<br /><br /><strong>Output:</strong><br />1<br />0<br />2<br /></pre>

______________________________________________________
PARADOX||||||true||||||


<p>A paradox is a statement or group of statements that leads to a contradiction. Consider the following two statements.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The statement below is false."<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "The statement above is true."</p>
<p>If we assume that 1st statement is true then according to 1st statement the 2nd statement is false. Since the 2nd statement is false and it says that 1st statement is true, 1st statement must be false which is a contradiction. If we assume that 1st statement is false then the 2nd statement must be true (since 1st statement says 2nd statement is false). Then according to 2nd statement 1st statement must be true which is a contradiction. Thus the statement cannot be classified as true or false. This is a paradox.</p>
<p>Given N statements of the form "Statement X is true/false", 1&lt;=X&lt;=N, your task is to find if these set of statements are paradoxical or not. A set of statements is paradoxical if one or more statements cannot be classified as true or false.</p>

*******InputConstraints*******

<p>Multiple test cases. Each test cases begins with an integer N representing the number of statements. <strong>1&lt;=N&lt;=100</strong>. Then follow N lines, representing N statements in the order 1,2,3, ...,N. Each line contains an integer X and a string S separated by a space. <strong>1&lt;=X&lt;=N</strong>. <strong>S is either "true" or "false"</strong> (quotes for clarity), which means the statement is "Statement X is S". N=0 indicates the end of testcases and should not be processed. There are atmost <strong>10000</strong> testcases.</p>

*******OutputConstraints*******

<p>For each test case print <strong>"PARADOX"</strong> if the set of statements are paradoxical, else print <strong>"NOT PARADOX"</strong>, in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />2 false<br />1 true<br />2<br />2 false<br />1 false<br />0<br /><br /><strong>Output:</strong><br />PARADOX<br />NOT PARADOX<br /></pre>


______________________________________________________
ALTPERM||||||false||||||

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">You are given K indices, A[1], A[2], ... , A[K].</p>
<p style="margin-bottom: 0in;">A[1] &lt; A[2] &lt; ... &lt; A[K].</p>
<p style="margin-bottom: 0in;">A[1] = 1 and A[K] = N.</p>
<p style="margin-bottom: 0in;">A permutation of the numbers between 1 and N is called valid if :</p>
<p style="margin-bottom: 0in;">The numbers in the permutation between indices A[1] and A[2] (inclusive) form an increasing sequence, the numbers in the permutation between indices A[2] and A[3] (inclusive) form a decreasing sequence, those between A[3] and A[4] (inclusive) form an increasing sequence and so on.</p>
<p style="margin-bottom: 0in;">Count the number of valid permutations.</p>
<p style="text-align: center;"><strong>Input</strong></p>
<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">There will be multiple test cases. The first line contains the number of test cases T.</p>
<p style="margin-bottom: 0in;">There follow 2*T lines, 2 lines for each test case. The first line for each test case contains the numbers N and K. The second line contains K space seperated numbers, ie. A[1] to A[K].</p>
<p>&nbsp;</p>
<p style="text-align: center;"><strong>Output</strong></p>
<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in;">Output T lines, one for each test case.  All answers should be output MOD 1000000007.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<pre>Sample Input :<br />3
3 3
1 2 3
4 3
1 3 4
10 6
1 2 5 7 8 10<strong><br /><br /></strong>Sample Output :
2
3
6166<br /><br /><br /><!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->
<p style="margin-bottom: 0in; text-align: center;"><span style="font-family: arial,helvetica,sans-serif;"><strong>Constraints</strong></span></p>
T &lt;= 111
2 &lt;= N &lt;= 20000
2 &lt;= K &lt;= 22<p style="margin-bottom: 0in;">K &lt;= N</p><p style="margin-bottom: 0in;">A[1] &lt; A[2] &lt; ... &lt; A[K].
A[1] = 1 and A[K] = N.</p></pre>


______________________________________________________
PERMJUMP||||||false||||||

<p>John likes playing the game Permutation Jumping. First he writes down a permutation A of the first n numbers. Then, he chooses any cell to start on. If he is currently at cell x and hasnt visited the cell A[x], he jumps to cell A[x]. He keeps doing this till he cannot move to the cell A[x], because he has already visited it. In the end, he counts all the cells that he visited during the game, including the cell on which he started. <br />&nbsp;<br />He does not want the game to go on for too long, and thus he wishes that irrespective of the choice of his starting cell, he does not ever have to visit more than K cells. On the other hand, he does not want the game to be too short either. Thus, irrespective of the choice of his starting cell, he should be able to visit atleast two cells. <br />&nbsp;<br />Now he wonders how many permutations could he have chosen in the first place which would allow him to have the game duration as above. i.e. He should visit atleast 2 cells and atmost K cells, no matter which cell he started on.</p>
<p style="text-align: center;"><br />&nbsp;<br />&nbsp;<br /><strong>Input</strong></p>
<p><br />The first line contains the number of test cases T (T &lt;= 1000). The next T lines contain 2 space seperated integers N and K. (2 &lt;= K &lt;= N &lt;= 100)</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one corresponding to each test case. For each test case output a single integer which is the answer for the corresponding test case. Since the answer can be very large, output the answer modulo 1000000007.</p>
<p style="text-align: center;"><br /><strong>Example</strong></p>
<p><br />Sample Input : <br />2 <br />4 2 <br />6 4 <br />&nbsp;<br />Sample Output : <br />3 <br />145 <br />&nbsp;<br />Note : <br />For the first case, the valid permutations are {2 1 4 3}, {3 4 1 2} and {4 3 2 1}.</p>


______________________________________________________
ANDROUND||||||false||||||

<p>You are given a cyclic array A having N numbers. In an AND round, each element of the array A is replaced by the bitwise AND of itself, the previous element, and the next element in the array. All operations take place simultaneously. Can you calculate A after K such AND rounds ?</p>
<p style="text-align: center;"><br /><strong>Input</strong></p>
<p><br />The first line contains the number of test cases T (T &lt;= 50). <br />There follow 2T lines, 2 per test case. The first line contains two space seperated integers N (3 &lt;= N &lt;= 20000) and K (1 &lt;= K &lt;= 1000000000). The next line contains N space seperated integers Ai (0 &lt;= Ai &lt;= 1000000000), which are the initial values of the elements in array A. &nbsp;</p>
<p style="text-align: center;"><br />&nbsp;<br /><strong>Output</strong></p>
<p><br />Output T lines, one per test case. For each test case, output a space seperated list of N integers, specifying the contents of array A after K AND rounds.</p>
<p style="text-align: center;"><br /><strong>&nbsp;Example</strong></p>
<p><br />Sample Input : <br />2 <br />3 1 <br />1 2 3 <br />5 100 <br />1 11 111 1111 11111 <br />&nbsp;<br />Sample Output : <br />0 0 0 <br />1 1 1 1 1</p>


______________________________________________________
XORROUND||||||false||||||

<p>You are given a cyclic array A having N numbers. In an XOR round, each element of the array A is replaced by the bitwise XOR (Exclusive OR) of itself, the previous element, and the next element in the array. All operations take place simultaneously. Can you calculate A after K such XOR rounds ?</p>
<p style="text-align: center;">&nbsp;<br /><strong>Input</strong></p>
<p><br />The first line contains the number of test cases T (T &lt;= 50). <br />There follow 2T lines, 2 per test case. The first line contains two space seperated integers N (3 &lt;= N &lt;= 500) and K (1 &lt;= K &lt;= 1000000000). The next line contains N space seperated integers Ai (0 &lt;= Ai &lt;= 1000000000), which are the initial values of the elements in array A. &nbsp;<br />&nbsp;<br /></p>
<p style="text-align: center;"><strong>Output </strong></p>
<p><br />Output T lines, one per test case. For each test case, output a space seperated list of N integers, specifying the contents of array A after K XOR rounds.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input : <br />2 <br />3 1 <br />1 2 3 <br />5 100 <br />1 11 111 1111 11111 <br />&nbsp;<br />Sample Output : <br />0 0 0 <br />11117 101 1075 12127 12081</p>


______________________________________________________
TROOPS||||||true||||||


<p>Under the command of the Evil Vizier there are N unique troops of sand monsters, where each&nbsp; troop contains Ci sand monsters. The Vizier in his desperate battle against the Prince of Persia has ordered all his troops to attack him simultaneously. <br />&nbsp;<br />The Prince realizes that he cannot defeat all of the sand monsters, as they are invincible&nbsp; when they are active. So he uses the Eye of the Storm spell to freeze all the sand monsters of all troops. Now the Prince can kill any monster by stabbing each monster once using the Dagger of Time. Once the monster is killed, it can never become active again and releases a certain quantity of the Sands of Time. It takes one unit of time to kill any monster. <br />&nbsp;<br />Each troop i, consits of Ci similar monsters, all with the same spell resistance time Ti - after which it becomes active again and therefore invulnerable - and Sand Si - which can be taken by the Prince after killing it. <br />&nbsp;<br />The spell lasts only for a limited duration of time. So, the Prince has to kill as many sand monsters as possible and take maximum sand from the monsters before they become active again. It is not necessary for The Prince to kill all the monsters in a troop before moving on to next troop.</p>

*******InputConstraints*******

<p>The first line contains K &lt;=70&nbsp; the number of testcases. Each testcase begins with 'N' (&lt;=1000) the number of troops of monsters. Next N lines contain 3 integers Ci, Ti, Si. 1&lt;i&lt;=N,&nbsp; 1&lt;=Ci&lt;=15000, 1&lt;=Ti&lt;=1000000, 1&lt;=Si&lt;=100,</p>

*******OutputConstraints*******

<p>Single Line containing the maximum amount of sand that Prince can get if he kills some or all the monsters.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 <br />4 <br />2 1 2 <br />2 3 6 <br />2 5 5 <br />2 7 8<br /><br /><strong>Output:</strong><br />40<br /><br />
______________________________________________________
CEOI09TR||||||false||||||

<p><span style="font-size: medium;"><strong>Task</strong></span></p>
<p>You are given <strong>K</strong> points with positive integer coordinates. You are also given <strong>M</strong> triangles, each of them having one vertex in the origin and the other 2 vertices with non-negative integer coordinates.</p>
<p>You are asked to determine for each triangle whether it has at least one of the <strong>K</strong> given points inside. (None of the K points are on any edge of any triangle.)</p>
<p><span style="font-size: medium;"><strong>Input</strong></span></p>
<p>The first line of the input file will contain <strong>K</strong> and <strong>M</strong>. The following <strong>K</strong> lines will contain 2 positive integers <strong>x</strong> <strong>y</strong> separated by one space that represent the coordinates of each point. The next <strong>M</strong> lines have 4 non-negative integers separated by one space, (<strong>x1</strong>, <strong>y1</strong>) and (<strong>x2</strong>, <strong>y2</strong>), that represent the other 2 vertices of each triangle, except the origin.</p>
<p><span style="font-size: medium;"><strong>Output</strong></span></p>
<p>The output file should contain exactly <strong>M</strong> lines. The <em>k</em>-th line should contain the character <strong>Y</strong> if the <em>k</em>-th triangle (in the order of the input file) contains at least one point inside it, or <strong>N</strong> otherwise.</p>
<p><strong>Constraints</strong></p>
<ul>
<li>1 &le; <strong>K</strong>,<strong>M</strong> &le; 100 000</li>
<li>1 &le; each coordinate of the <strong>K</strong> points &le; 10<sup>9</sup></li>
<li>0 &le; each coordinate of the triangle vertices &le; 10<sup>9</sup></li>
<li>Triangles are not degenerate (they all have nonzero area).</li>
<li>In 50% of the test cases, all triangles have vertices with coordinates <strong>x1=0</strong> and<br /><strong>y2=0</strong>. That is, one edge of the triangle is on the <em>x</em>-axis, and another is on the <em>y</em>-axis.</li>
</ul>
<p><span style="font-size: medium;"><strong>Sample input 1</strong></span></p>
<p><span style="font-size: small;"><span style="font-family: courier new,courier;">4 3<br />1 2<br />1 3<br />5 1<br />5 3<br />1 4 3 3<br />2 2 4 1<br />4 4 6 3</span></span></p>
<p><span style="font-size: medium;"><strong>Sample output 1</strong></span></p>
<p><span style="font-family: courier new,courier;"><span style="font-size: small;">Y<br />N<br />Y</span></span></p>
<p><span style="font-size: medium;"><strong>Explanation for sample 1</strong></span></p>
<p><img src="http://www.spoj.pl../../../content/andmej:tri1.png" alt="Explanation for sample 1" width="269" height="233" /></p>
<p><span style="font-size: medium;"><strong>Sample input 2</strong></span></p>
<p><span style="font-size: small;"><span style="font-family: courier new,courier;">4 2<br />1 2<br />1 3<br />5 1<br />4 3<br />0 2 1 0<br />0 3 5 0</span></span></p>
<p><span style="font-size: medium;"><strong>Sample output 2</strong></span></p>
<p><span style="font-size: small;"><span style="font-family: courier new,courier;">N<br />Y</span></span></p>
<p><strong>Explanation for sample 2</strong></p>
<p><strong><img src="http://www.spoj.pl../../../content/andmej:tri2.png" alt="Explanation for sample 2" width="272" height="234" /></strong></p>
<p><a href="http://www.ceoi2009.ro"><strong> 
<hr />
</strong></a></p>
<pre id="line1"><a href="http://www.ceoi2009.ro">CEOI 2009 - T&icirc;rgu MureÂº, Romania</a></pre>


______________________________________________________
SQFFACT||||||true||||||


<p align="justify">Given the positive integers N = p<sub>1</sub> * p<sub>2</sub> * ... * p<sub>k</sub> and M = (p<sub>1</sub>-1) * (p<sub>2</sub>-1) * ... * (p<sub>k</sub>-1),    i.e M = &phi;(N) (Euler's totient function),   where k &ge; 1, p<sub>i</sub> &ne; p<sub>j</sub> for all i&ne;j with i,j=1,2, ..., k and p<sub>i</sub> is prime number for all i=1,2,...,k, your task is factor n.</p>

*******InputConstraints*******

<p>The first line contains a positive integer T, the number of test cases, where T &le; 100. The following T lines each contains two numbers N and M in this order,  where N &lt; 10<sup>100</sup>.</p>

*******OutputConstraints*******

<p>Output T lines, with prime factorization of N according with example.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
210 48
983 982
14351 14112

<strong>Output:</strong>
210 = 2 * 3 * 5 * 7
983 = 983
14351 = 113 * 127

</pre>


______________________________________________________
LENGFACT||||||true||||||


<p>Given integer <strong>n</strong>, print length of <strong>n!</strong> (which is factorial of <strong>n</strong>).</p>

*******InputConstraints*******

<p>The first line of the standard input contains one integer <strong>t</strong> (t&lt;10001) which is the number of test cases.</p>
<p>In each of the next <strong>t</strong> lines there is number <strong>n</strong> (0&lt;=n&lt;=5*10^9).</p>

*******OutputConstraints*******

<p>For each test, print the length of <strong>n!</strong> (which is factorial of <strong>n</strong>).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1<br />10<br />100<br /><strong>Output:</strong><br />1<br />7<br />158</pre>


______________________________________________________
FINDMAX||||||false||||||

<p style="text-align: left;">One way of finding the maximum element in an array is to initialize a variable to the first element in the array, iterate through the remaining array, and update the variable whenever a value strictly greater than it is found. Assuming that the array contains N elements each in the range 1..K, how many such arrays exist such that the above algorithm performs exactly P updates? Initialization of the variable is not counted as an update.<br /><br />For example,the possible arrays for N = 4,K = 3 and P = 2 are<br />1) {1,1,2,3}<br />2) {1,2,1,3}<br />3) {1,2,2,3}<br />4) {1,2,3,1}<br />5) {1,2,3,2}<br />6) {1,2,3,3}</p>
<p style="text-align: center;"><br /><strong>Input<br /></strong></p>
<p style="text-align: left;"><br />The first line contains T the number of test cases. There follow T lines, containing 3 space seperated integers N,K and P.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p style="text-align: left;">Output T lines, one for each test case. On each line, output the answer as asked above. Since the answers can get very big, output the answer modulo 1000000007.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p style="text-align: left;">Sample Input :<br />3<br />4 3 2<br />2 3 1<br />3 4 1<br /><br />Sample Output :<br />6<br />3<br />30</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p style="text-align: left;"><br />1 &lt;= T &lt;= 100<br />1 &lt;= n &lt;= 100<br />1 &lt;= K &lt;= 300<br />0 &lt;= P &lt; n</p>


______________________________________________________
FINDPRM||||||false||||||

<p>One commonly used method to calculate all primes in the range [2..n] is to start with the number 2, mark it as prime, and mark all its multiples (excluding itself) as not prime. Then, we find the next smallest unmarked number, mark it as prime, and mark all its multiples (excluding itself) as not prime. Continuing this way, we get a list of all primes. <br /><br />Now, let us say that we modified the above algorithm, and start with n instead of 2. We mark it as prime, and mark all its factors (excluding itself) as not prime. Then we find the next greatest unmarked number, mark it as prime, and mark all its factors (excluding itself) as not prime. Continuing this way, we get a list of all primes.<br /><br />Now you wonder, given a value of n, how many numbers are such that both the above algorithms will mark them as prime?</p>
<p style="text-align: center;"><br /><strong>Input</strong></p>
<p><strong></strong><br />The first line contains T the number of test cases. Each of the next T lines contain an integer n.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one for each test case, containing the required answer.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p>Sample Input :<br />3<br />2<br />4<br />7<br /><br />Sample Output :<br />1<br />1<br />2<br /><br /></p>
<p style="text-align: center;"><strong>Constraints</strong></p>
<p>1 &lt;= T &lt;= 100000<br />2 &lt;= n &lt;= 10000000</p>


______________________________________________________
LCMSUM||||||false||||||

<p>Given n, calculate the sum LCM(1,n) + LCM(2,n) + .. + LCM(n,n), where LCM(i,n) denotes the Least Common Multiple of the integers i and n.<br /><br /></p>
<p style="text-align: center;"><strong>Input<br /></strong></p>
<p><br />The first line contains T the number of test cases. Each of the next T lines contain an integer n.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p><br />Output T lines, one for each test case, containing the required sum.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p>Sample Input :<br />3<br />1<br />2<br />5<br /><br />Sample Output :<br />1<br />4<br />55</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p>1 &lt;= T &lt;= 300000<br />1 &lt;= n &lt;= 1000000</p>


______________________________________________________
MAXSUMSQ||||||false||||||

<p>Given an array A having n elements, let X be the maximum sum of any contiguous sequence in the array. How many contiguous sequences in A sum up to X ?</p>
<p style="text-align: center;"><br /><br /><strong>Input</strong></p>
<p>The first line contains T the number of test cases. There follow 2T lines, 2 for each test case. The first line contains the n, the number of elements in the array. The second line contains n space seperated integers Ai.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p><br />Output T lines, one for each test case. On each line, output two space seperated integers; the maximum sequence sum, and the number of sequences which obtain this maximum sum.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p>Sample Input :<br />2<br />3<br />-1 -1 -1<br />4<br />2 0 -2 2<br /><br />Sample Output :<br />-1 3<br />2 4</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p><br />1 &lt;= T &lt;= 35<br />1 &lt;= n &lt;= 100000<br />-1000 &lt;= Ai &lt;= 1000</p>


______________________________________________________
SELTEAM||||||false||||||

<p>There are n players out of which atmost k players are chosen to form the team squad. Out of those players, some subset of them are selected to form a team, and a player of the selected team is appointed as the captain of the team. Given n and k, determine how many possible configurations exist. Two configurations differ if either the players in the team squad differ, or if the number of players in the team differ, or the players in the team differ, or if the captain differs.<br /><br />For example,the possible configurations for n = 2 and k = 2 are :<br />1) Team squad : {1}, Team : {1}, Captain : 1<br />2) Team squad : {2}, Team : {2}, Captain : 2<br />3) Team squad : {1,2}, Team : {1}, Captain : 1<br />4) Team squad : {1,2}, Team : {2}, Captain : 2<br />5) Team squad : {1,2}, Team : {1,2}, Captain : 1<br />6) Team squad : {1,2}, Team : {1,2}, Captain : 2<br /><br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p><br />The first line contains T the number of test cases. Each of the next T lines contain 2 integers : n,k</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one for each test case, containing the required total number of configurations. Since the answers can get very big, output the answer modulo 8388608.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p style="text-align: left;"><br />Sample Input :<br />3<br />2 2<br />7 1<br />5 3<br /><br />Sample Output :<br />6<br />7<br />165</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p style="text-align: left;">1 &lt;= T &lt;= 10000<br />1 &lt;= k &lt;= n &lt;= 100000</p>


______________________________________________________
TRKNIGHT||||||false||||||

<p>Your task is simple. A knight is placed on the top left corner of a chessboard having 2n rows and 2n columns. In how many ways can it move such that it ends up at a corner after atmost K moves ?<br /><br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p><br />The first line contains T the number of test cases. Each of the next T lines contain 2 integers : n,k</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one for each test case, containing the required total number of configurations. Since the answers can get very big, output the answer modulo 1000007.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p>Sample Input :<br />3<br />2 1<br />2 2<br />3 3<br /><br />Sample Output :<br />1<br />5<br />7<br /><br /></p>
<p style="text-align: center;"><strong>Constraints</strong></p>
<p><br />1 &lt;= T &lt;= 20<br />2 &lt;= n &lt;= 12<br />1 &lt;= k &lt;= 1000000000</p>


______________________________________________________
TRGRID||||||false||||||

<p>Starting at the top left corner of an N*M grid and facing towards the right, you keep walking one square at a time in the direction you are facing. If you reach the boundary of the grid or if the next square you are about to visit has already been visited, you turn right. You stop when all the squares in the grid have been visited. What direction will you be facing when you stop ?<br /><br />For example : Consider the case with N = 3,M = 3. The path followed will be (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; (2,1) -&gt; (2,0) -&gt; (1,0) -&gt; (1,1). At this point, all squares have been visited, and you are facing right.<br /><br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p><br />The first line contains T the number of test cases. Each of the next T lines contain two integers N and M, denoting the number of rows and columns respectively.</p>
<p style="text-align: center;"><br /><br /><strong>Output</strong></p>
<p>Output T lines, one for each test case, containing the required direction you will be facing at the end. Output L for left, R for right, U for up, and D for down.</p>
<p style="text-align: center;"><strong>Eample</strong></p>
<p><br />Sample Input :<br />4<br />1 1<br />2 2<br />3 1<br />3 3<br /><br />Sample Output :<br />R<br />L<br />D<br />R</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p>1 &lt;= T &lt;= 10000<br />1 &lt;= N,M &lt;= 1000000000</p>


______________________________________________________
WEIRDFN||||||false||||||

<p>Let us define :<br />F[1] = 1<br />F[i] = (a*M[i] + b*i + c)%1000000007 for i &gt; 1<br /><br />where M[i] is the median of the array {F[1],F[2],..,F[i-1]}. <br />The median of an array is the middle element of that array when it is sorted. If there are an even number of elements in the array, we choose the first of the middle two elements to be the median.<br /><br />Given a,b,c and n, calculate the sum F[1] + F[2] + .. + F[n].<br /><br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p><br />The first line contains T the number of test cases. Each of the next T lines contain 4 integers : a,b,c and n.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one for each test case, containing the required sum.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p>Sample Input :<br />2<br />1 0 0 3<br />3 1 2 6<br /><br />Sample Output :<br />3<br />103</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p>1 &lt;= T &lt;= 100<br />0 &lt;= a,b,c &lt; 1000000007<br />1 &lt;= n &lt;= 200000</p>


______________________________________________________
FRQPRIME||||||false||||||

<p>A range [L..H] is called a K-Frequent Prime range if there are atleast K primes amongst the numbers L,L+1,..,H. Given N and K, calculate how many subranges of the range [2..N] are K-Frequent Prime.<br /><br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p>The first line contains the number of test cases T. Each of the next T lines contains 2 integers N and K.</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines, one corresponding to each test case, containing the required answer.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input :<br />4<br />2 1<br />5 2<br />5 1<br />9 3<br /><br />Sample Output :<br />1<br />4<br />9<br />8<br /><br />Note : For the first test case, the only valid subrange is [2..2], whereas for the second test case, the valid subranges are : [2..3],[2..4],[2..5],[3..5].</p>
<p style="text-align: center;"><strong>Constraints</strong></p>
<p style="text-align: left;">1 &lt;= T &lt;= 100</p>
<p style="text-align: left;">2 &lt;= N &lt;= 100000</p>
<p style="text-align: left;">0 &lt;= K &lt;= 10000</p>


______________________________________________________
YAPP||||||false||||||

<p>How many permutations of the first N numbers exist such that the maximum element between the indices [i..j] is either present at index i, or at index j ?</p>
<p style="text-align: center;"><br /><strong>Input</strong></p>
<p style="text-align: left;">The first line contains the number of test cases T. Each of the next T lines contains an integer N</p>
<p style="text-align: center;"><br /><strong>Output</strong></p>
<p>Output T lines containing the required answer for the corresponding test case. Since the answers can get really big, output the result modulo 1000000007.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input :<br />1<br />2<br /><br />Sample Output :<br />2</p>
<p>&nbsp;</p>
<p style="text-align: center;"><strong>Constraints</strong></p>
<p>&nbsp;</p>
<p>1 &lt;= T &lt;=10000</p>
<p>1 &lt;= N &lt;= 1000000000</p>


______________________________________________________
MATGAME||||||false||||||

<p>Two players A and B play the following game. <br />&nbsp;<br />1) First, a matrix M of size N*M is chosen, and filled with non-zero numbers. <br />2) Player A starts the game and the players play alternately. <br />3) In his turn, a player chooses any row which has atleast one non zero nuumber in it. In this row, the leftmost non zero number is chosen. Let this number be K. The player subtracts any number between 1 and K inclusive from it. <br />4) The game ends when all the numbers in the matrix M are 0. <br />5) The player who plays last wins the game. <br />&nbsp;<br />&nbsp;<br />Given N,M and the initial matrix, determine who wins the game. Assume that both players play optimally.<br />&nbsp;<br /></p>
<p style="text-align: center;"><strong>Input</strong></p>
<p><br />&nbsp;<br />The first line contains the number of test cases T. <br />Each test case consists of 2 numbers N and M. There follow N lines each having M integers. The jth number on the ith line is the number M[i][j]. There is a blank line between consecutive test cases. <br />&nbsp;<br /></p>
<p style="text-align: center;"><strong>Output</strong></p>
<p><br />Output T lines, one for each case. Output "FIRST" if player A wins, else output "SECOND".</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input : <br />3 <br />2 2 <br />1 1 <br />1 1 <br />&nbsp;<br />1 3 <br />2 1 1 <br />&nbsp;<br />2 2 <br />3 2 <br />3 2 <br />&nbsp;<br />Sample Output: <br />&nbsp;<br />SECOND <br />FIRST <br />SECOND</p>
<p style="text-align: center;"><br /><strong>Constraints</strong></p>
<p>T &lt;= 1000 <br />1 &lt;= N,M &lt;= 50 <br />The initial matrix values are between 1 and 50 inclusive.</p>


______________________________________________________
DINGRP||||||false||||||

<p>On the way to dinner, the CCC competitors are lining up for their delicious curly fries. The <var>N</var> (1 &le; <var>N</var> &le; 100) competitors have lined up single-file to enter the cafeteria.</p>

<p>Doctor V, who runs the CCC, realized at the last minute that programmers simply hate standing in line next to programmers who use a different language. Thankfully, only two languages are allowed at the CCC: Gnold and Helpfile. Furthermore, the competitors have decided that they will only enter the cafeteria if they are in a group of at least <var>K</var> (1&nbsp;&le;&nbsp;<var>K</var>&nbsp;&le;&nbsp;6) competitors.</p>

<p>Doctor V decided to iterate the following scheme:</p>
<ul>
  <li> He will find a group of <var>K</var> or more competitors who use the same language standing next to each other in line and send them to dinner.</li>
  <li> The remaining competitors will close the gap, potentially putting similar-language competitors together.</li>
</ul>

<p>So Doctor V recorded the sequence of competitors for you. Can all the competitors dine? If so, what is the minimum number of groups of competitors to be sent to dinner?</p>


______________________________________________________
QCJ1||||||true||||||


<p>In this problem your task is to program a robot that will output some data about a terrain after traversing it. Input will be in the form a 2D picture containing only 4 types of characters :-</p>
<pre><li> '/' :  Forward slash, indicating ascent</li><li> '\' :  Backward slash, indicating descent</li><li> '_' :  Underscore, denoting horizontal plane</li></pre>
<p>Additionally there will be only SPACE (Ascii value = 32) charecters. ( Refer the below figure).</p>
<p>The robot starts its journey at bottom left corner of the terrain and after traversing stops at the bottom right corner. Also note that the robot will always start and end at the SAME LEVEL.</p>
<p>Given the picture as input you will have to output 2 things. The "Total Walk Distance" i.e, the total length of the path and the type of steps taken to complete the Journey. For the sake of simplification we will assume that each charecter('/' , '\' &amp; '_') has length = 1.</p>
<p>Now Consider the following example:</p>
<pre>		   _<br />		  / \/\<br />		 /     \<br />		/       \<br /></pre>
<p>The robot starts at the bottom left corner and takes the following path:</p>
<pre><li> Ascends 3 steps</li><li> Moves forward by 1 step</li><li> Descends 1 step</li><li> Ascends 1 step</li><li> Descends 3 steps</li></pre>
<p>and robot ends it journey at bottom right corner (At the same level). The Total Walk Distance = 9.</p>

*******InputConstraints*******

<p>First line of input will be an integer N (N&lt;20). The next line will be an empty. Then exactly N lines follow describing the terrain.<br /> You can assume the following for the input (terrain).</p>
<pre><li> Input will contain only four types of characters (" ","_","/","\").</li><li> The terrain will start and end at the same level.</li><li> Each line is guarenteed to have atleast one non white space charecter.</li><li> Maximum width of any line wont be larger than 200.</li><li> There will be no trailing white spaces.</li></pre>

*******OutputConstraints*******

<p>First line of output should be the Total Walk Distance followed by the description the the the terrain. Each line must be ONE of the following</p>
<pre><li> Up xx steps</li><li> Down xx steps</li><li> Walk xx steps</li></pre>
<p>Where xx is an integer.<br /> Refer Examples for exact specification.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br /><br />  /\<br /> /  \<br />/    \<br /><br /><strong>Output:</strong><br />Total Walk Distance = 6<br />Up 3 steps<br />Down 3 steps<br /><br /></pre>
<pre><strong>Input:</strong><br />2<br /><br /> _____  ___<br />/     \/   \<br /><br /><br /><strong>Output:</strong><br />Total Walk Distance = 12<br />Up 1 steps<br />Walk 5 steps<br />Down 1 steps<br />Up 1 steps<br />Walk 3 steps<br />Down 1 steps<br /><br /></pre>
<pre><strong>Input:</strong><br />5<br /><br />        _<br />   /\__/ \<br />  /       \<br /> /         \/\_<br />/              \<br /><br /><strong>Output:</strong><br />Total Walk Distance = 16<br />Up 4 steps<br />Down 1 steps<br />Walk 2 steps<br />Up 1 steps<br />Walk 1 steps<br />Down 3 steps<br />Up 1 steps<br />Down 1 steps<br />Walk 1 steps<br />Down 1 steps<br /><br /></pre>


______________________________________________________
QCJ2||||||true||||||


<p>There are N numbered boxes placed on a table, let Bi denote the ith box in the line. Write a program that finds the total number of ways to place N identical balls such that atmost k balls are present in the boxes B1, .... ,Bk for 1&lt;=k&lt;=N. Since the number can be quite large you are supposed to output the answer modulo 761238923.</p>

*******InputConstraints*******

<p>Input will contain multiple testcases, on each line N (1&lt;=N&lt;=100) will be given. The last line contains 0 which should not be processed.</p>

*******OutputConstraints*******

<p>For each testcase output exactly one line, the total number possible of ways modulo 761238923.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />2<br />0<br /><strong>Output:</strong>
<br />1<br />2<br /></pre>


______________________________________________________
QCJ3||||||true||||||


<p>Tom and Hanks play the following game. On a game board having a line of squares labelled from 0,1,2 ... certain number of coins are placed with possibly more than one coin on a single square. In each turn a player can move exactly one coin to any square to the left i.e, if a player wishes to remove a coin from square i, he can then place it in any square which belongs to the set (0,1, ... i-1) . The game ends when all coins are on square 0 and player that makes the last move wins. Given the description of the squares and also assuming that Tom always makes the first move you have tell who wins the game (Assuming Both play Optimally).</p>

*******InputConstraints*******

<p>The first line will contain N the number of test cases and then 2N lines follow. For each test case the first line will have S the size of the board and in the next line S integers follow. The i<sup>th</sup> integer gives the the number of coins in the i<sup><sub>th</sub></sup> square (starting from 1) . Atleast one of the S integers will be non zero. All the numbers in the input will be less than 25.</p>

*******OutputConstraints*******

<p>For each test case output one line containing either "Tom Wins" or "Hanks Wins".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />1<br />1<br />1<br />2<br /><strong><br />Output:</strong>
<br />Tom Wins<br />Hanks Wins</pre>


______________________________________________________
QCJ4||||||true||||||


<p>Given n points in a plane find the diameter of the smallest circle that encloses all the points. A point lying on the circle is also considered to be inside it</p>

*******InputConstraints*******

<p>First line of input contains the n (&lt;301) the number of points in the plane , followed by n lines of input<br />Each line gives the coordinates of one point on the plane. Each coordinate is an integer in the range [0,1000]</p>

*******OutputConstraints*******

<p>Output consists of a single real number, the diameter of the circle rounded to two decimal places.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>4<br />1 1<br />1 0<br />0 1<br />0 0<br /></pre>
<br /><br /><strong>Output:</strong> <br />1.41</pre>


______________________________________________________
PBCGAME||||||true||||||


<p align="justify">The company "PBC" has made a game which consists of small platforms and  pipes. There are 3 types of platforms: starting platforms (there are N1 of  them), finishing platforms (there are N3 of them) and middle platforms (there  are N2 of them). All starting platforms stand at identical height. Finishing  platforms stand also at identical height. All heights of middle platforms are  various. They have less height than starting, but greater height than finishing  platforms. Each platform has an unique number from 1 up to N1+N2+N3. First N1  numbers are starting platforms, next N2 numbers are middle platforms, and the  last N3 numbers are finishing platforms. All middle platforms are numbered in  order of decrease of height. It means that if number of middle platform A is  less than number of platform B, than height of A is greater than height of B.</p>
<p align="justify">There is a ball on each of starting platforms. The ball can move from  platform A to platform B if they are connected by a pipe, and height A is  greater than height B. Each finishing platform can hold only one ball. If there  is a ball on a platform the player can choose a direction of the further way of  the ball, it means that he can choose a platform, where the ball will go. Also  given a number C for each middle platform which means a maximum quantity of  balls which can pass it during the game. The goal of the game is to drive the  greatest possible number of ball to the finishing platforms.</p>
<p align="justify">You need to find out what maximum quantity of balls can appear on finishing  platforms at the end of the game.</p>

*******InputConstraints*******

<p>The input file has the following order:<br />N1 N2  N3<br />C<sub>N1+1</sub><br />...<br />C<sub>N1+N2</sub><br />K1 A[1,1] ...  A[1,K1]<br />K2 A[2,1] ... A[2,K2]<br />...<br />K<sub>N1+N2</sub> A[N1+N2,1] ...  A[N1+N2,K<sub>N1+N2</sub>]<br />Where N1, N2, N3 are the amounts of starting,  middle and finishing platforms. Cj is the maximum amount of balls, which can  pass the middle platform with the number j (N1+1 &lt;= j &lt;= N1+N2) during the  game. Ki is the number of pipes, connected with the platform i (1 &lt;= i &lt;=  N1+N2). The elements of the array A, are the numbers of platforms where the ball  can move from the appropriate platform (platforms with numbers i and A[i] are  connected with a pipe).</p>

*******OutputConstraints*******

<p align="justify">The output file must contain a number, which means the max amount of balls,  which can appear at the finishing platforms at the end of the game.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>3 4 3<br />3<br />2<br />1<br />2<br />1 4<br />1 4<br />1 4<br />2 5 6<br />1 7<br />1 7<br />3 8 9 10</pre>
<br /><strong>Output:</strong> 2<br /><br />
<h5>Limitations:</h5>
All the numbers are integer.<br />0&lt; N1, N3 &lt; 51<br />1  &lt; N1+N2+N3 &lt; 201<br />0 &lt;= Cj &lt;= 50<br />There are no pipes between  starting platforms.<br />There are no pipes between finishing platforms.</pre>


______________________________________________________
GCDSQF||||||false||||||

<p><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;"><span style="font-size: x-small;">A number is </span><a title="Square-free" href="http://en.wikipedia.org/wiki/Square-free_integer"><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">square-free</span></span></a><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">&nbsp;</span></span></span></span><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">if its prime descomposition contains no repeated factors. </span></span><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">For example: 1001 = 7 * 11 * 13 is square-free, but 20 = 2 * 2 * 5 is not square-free.</span></span></p>
<p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;"><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Square-free numbers can encoding as binary numbers. Here are examples to illustrate: <br /><br />Sequence of prime numbers 2 3 5 7 11 13 17 ... <br /><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">42 = 2 * 3 * 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&gt;&nbsp;&nbsp;&nbsp;&nbsp; 1101</span></span></span></span></span><br />1001 = 7 * 11 * 13&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&gt;&nbsp;&nbsp;&nbsp;&nbsp; 000111<br />10 = 2 * 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;=&gt;&nbsp;&nbsp;&nbsp;&nbsp; 101</span></span></span></span></span></p>
<p>&nbsp;<br /><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Your task is given two square-free integers A and B in binary representation<br />compute gcd (A + B, lcm (A, B)). If the result is a square-free number your answer should <br />have the binary format, if the answer&nbsp;is 1 print "relatively prime", and if <br />is neither of these two cases print the result in base 10.</span></span></p>
<p style="text-align: center;"><strong><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Input</span></span></strong></p>
<p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">In the first line an integer T (1 &lt;= T &lt;= 100) the number of test cases.<br />The following 2 * T lines will appear integers A and B. The length of the integers<br />A and B encoded in binary form must not exceed 1000 characters.</span></span></p>
<h3 style="TEXT-ALIGN: center"><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Output</span></span></h3>
<p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">For each of the T pairs A, B print in the specified format gcd (A + B, lcm (A, B)).</span></span></p>
<p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Example</span></span></p>
<pre><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;"><strong>Input:</strong></span></span><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;"><strong>&nbsp;</strong>
</span></span></pre>
<pre><p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">2 <br />000111 <br />101 <br />11 <br />011</span></span></p>

<strong><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Output:</span></span></strong></pre>
<pre><p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">relatively prime <br />01</span></span></p></pre>
<p>
<hr />
</p>
<p><span style="font-size: x-small;"><span style="font-family: arial,helvetica,sans-serif;">Note: In the input may have unnecessary zeros on the right of the numbers A and B, but<br />Your answer only must be with necessary zeros.</span></span></p>


______________________________________________________
SOCOLA||||||false||||||

<p>Chocolate in its many forms is enjoyed by millions of people around the world every day. It is a truly universal candy, available in virtually every country around the world.
<p>You find that the only thing better than eating chocolate is to share it with friends. Unfortunately, your friends are very picky and have different appetites: some would like more and others less of the chocolate that you offer them. You have found it increasingly difficult to determine whether their demands can be met. It is time to write a program that solves the problem once and for all!
<p>Your chocolate comes as a rectangular bar. The bar consists of same-sized rectangular pieces. To share the chocolate, you may break one bar into two pieces along a division between rows or columns of the bar. You may then repeatedly break the resulting pieces in the same manner. Each of your friends insists on a getting a single rectangular portion of the chocolate that has a specified number of pieces. You are a little bit insistent as well: you will break up your bar only if all of it can be distributed to your friends, with none left over.
<p>For example, Figure 9 shows one way that a chocolate bar consisting of 3 x 4 pieces can be split into 4 parts that contain 6, 3, 2, and 1 pieces respectively, by breaking it 3 times. (This corresponds to the first sample input.)

<img src='http://www.spoj.pl/content/paulmcvn:socola.png' />

<p>
Figure 9



______________________________________________________
BRIDGE||||||true||||||


<p>The tribe soon discovers that just communication is not enough and wants to meet each other to form a joint force against the terminator. But there is a deep canyon that needs to crossed. Points have been identified on both sides on which bridge ends can be made. But before the construction could be started, a witch Chudael predicted that a bridge can only be built between corresponding end points, i.e. a bridge starting from the i<sup>th</sup>&nbsp;end point on one side can only end on the i<sup>th</sup>&nbsp;end point on the other side, where the position of end points is seen in the order in which the points were identified. If not, it would lead to the end of the tribe. The tribe just wants to make as many non-overlapping bridges as possible, with the constraint in mind.</p>

*******InputConstraints*******

<p>The first line of the input contains test cases t (1&lt;=t&lt;=50). It is followed by 3*t lines, 3 for each test case. The first line of input for each test case contains the number of end points identified on each side, n (1&lt;=n&lt;=10<sup>3</sup>). The second line contains x-coordinates of end points identified on the first side and similiarly the third line contains the x-coordinates of corresponding end points identified on the other side. The end points are inputted in the order in which they were identified.&nbsp;The x-coordinates can range between -10<sup>3</sup>&nbsp;to 10<sup>3</sup>.</p>

*******OutputConstraints*******

<p>You are required to output a single line for each test case. The line contains a single integer &ndash; the maximum number of bridges possible with the constraints explained above.</p>

*******IOTestCases*******

<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Input:</strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-weight: normal;">3</span></strong><p>4</p><p>2 5 8 10</p><p>6 4 1 2</p><p>3</p><p>5 3 10</p><p>6 4 1</p><p>6</p><p>1 2 3 4 5 6</p>3 4 5 6 1 2<br /><br /><strong>Output:</strong><br /><p>2</p><p>2</p><p>4</p><p>&nbsp;</p><p>Expalanation: For the first test case, two non-overlapping bridges can be formed between the 3rd and 4th end points on each side.</p></pre>


______________________________________________________
SSEQ||||||true||||||


<p>Now that the two tribes met, a joint force was formed. Colonel Prateek was ordered to lead the force. He needs to instruct his men on how to stand. The n men in the force have been given ranks from 1(lowest) to n(highest) and on parade they should be lined up from left to right in increasing order of rank. He soon discovered that his elite commandos preferred to do the fighting, and leave the thinking to their superiors. So,  when at the first roll call the soldiers lined up in fairly random order it was not because of their lack of discipline, but simply because they couldn&rsquo;t work out how to form a line in correct order of ranks. Colonel Prateek was not at all amused, particularly as he soon found that none of the soldiers even remembered his own rank. Over the years of service every soldier had only learned which of the other soldiers were his superiors. But Colonel Prateek was not a man to give up easily when faced with a true military challenge. After a moment&rsquo;s thought a solution of brilliant simplicity struck him and he issued the following order: "men, starting from the left, one by one, do: (step forward; go left until there is no superior to the left of you; get back in line).". This did indeed get the men sorted in a few minutes. The problem was solved... for the time being.</p>
<p>The next day, the soldiers came in exactly the same order as the day before, and had to be rearranged using the same method. History repeated. After some weeks, Colonel Prateek managed to force each of his soldiers to remember how many men he passed when going left, and thus make the sorting process even faster.</p>
<p>If you know how many positions each man has to walk to the left, can you try to find out what order of ranks the soldiers initially line up in?</p>

*******InputConstraints*******

<p>The first line of input contains an integer t&lt;=50, the number of test cases. It is followed by t test cases, each consisting of 2 lines. The first line contains a single integer n (1&lt;=n&lt;=200000). The second line contains n space separated integers w<sub>i </sub>, denoting how far the i<sup>th</sup> soldier in line must walk to the left when applying Colonel Prateek&rsquo;s algorithm.</p>

*******OutputConstraints*******

<p>For each test case, output a single line consisting of n space separated integers - the ranks of the soldiers, given from left to right in their initial arrangement.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>2</p><p>3</p><p>0 1 0</p><p>5</p>0 1 2 0 1
<strong><br /></strong></pre>
<pre><strong>Output:</strong>
<p>2 1 3</p><p>3 2 1 5 4</p></pre>


______________________________________________________
HOMEC||||||true||||||


<p>It was a tough battle but the humans won it comprehensively in the end. It was made possible due to combined efforts of both the human tribes but the 2<sup>nd</sup> tribe wants to take all the credit and rule the world by killing the first tribe. Now that the war has ended, the tribes would be returning to their cities. The warriors would be travelling over the bridges built earlier, in small groups. It is then that the 2<sup>nd</sup> tribe wants to execute their plan. The king of the 1<sup>st</sup> tribe knows this and wants to ensure that this doesn&rsquo;t happen. So he puts a constraint, that it should never happen at any time that the number of people of the 2nd tribe outnumber the number of people of the 1st tribe either on both sides or on the bridge.&nbsp;Also, it is night time and a torch needs to be carried for travel to be possible. But unfortunately, there&rsquo;s just one torch available and hence atleast someone would have to come back every time, with the torch. To make matters worse, there&rsquo;s a restriction on the number of warriors that can cross the bridge in one pass.</p>

*******InputConstraints*******

<p>The first line of input contains test cases t (1&lt;=t&lt;=50). Then t lines follow, one for each test case. It contains three integers, n (1&lt;=n&lt;=100) the number of warriors of first tribe, m (1&lt;=m&lt;=100) the number of warriors of second tribe and c (1&lt;=c&lt;=50) the number of warriors that can cross the bridge in a single pass.&nbsp;</p>

*******OutputConstraints*******

<p>Display a single line for each test case, containing a single integer which gives the total number of times the bridge is crossed. A round trip counts as 2. Output -1 if travel is not possible with the given constraints.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>3</p><p>3 3 2</p><p>4 4 2</p><p>100 100 20</p>
<strong>Output:</strong>
<p>11</p><p>-1</p><p>21</p></pre>


______________________________________________________
MAJOR||||||true||||||


<p>The human tribe has just discovered some other tribe and wants to communicate with them. To make sure it is not intercepted by the terminators, they ask their chief computer engineer Rohit to design a system for the purpose. In the design that Rohit proposes, data is transmitted n times. If it is received more than half-the times, it is said to be successfully transmitted. If not, the data is said to be lost. Rohit obviously got a lot of fame and respect for his work. Nitish doesn&rsquo;t like it and wants to challenge Rohit&rsquo;s supremacy. He wants to check out the system and has hired you for the process.</p>

*******InputConstraints*******

<p>The first line of the input contains test cases t(1&lt;=t&lt;=100). It is followed by 2*t lines, 2 for each test case. The first line of input for each test case contains a number n (0&lt;=n&lt;=10<sup>6</sup>), followed by n elements in the next line. Each number is from -10^3 to +10^3</p>

*******OutputConstraints*******

<p>You are required to output &lsquo;YES&rsquo; followed by the number transmitted, if it was transmitted successfully, and &lsquo;NO&rsquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>3</p><p>4</p><p>2 1 2 2</p><p>6</p><p>1 1 1 2 2 2</p><p>5</p><p>1 2 4 5 1</p>
<strong>Output:</strong>
<p>YES 2</p><p>NO</p><p>NO</p></pre>


______________________________________________________
OAE||||||true||||||


<p>Having joined forces and preparing for the war with the terminators the humans do know that it will be a tough battle. They plan to strike each base of the terminator and destroy them one by one. A genius computer engineer UD willing to extend his help to his fellow humans found out that each base of the terminator has password protected doors. He was able to recognise the pattern between the passwords. The password is an n character string having even number of zeroes. As you know many strings of this type exist. Help him to find out the total number of such strings. Each character in the password string is a digit from 0 to 9.</p>

*******InputConstraints*******

<p>The first line of input contains an integer t&lt;=50, the number of test cases. Then t test cases follow each containing a line with a single integer n (1&lt;=n&lt;=10<sup>6</sup>).</p>

*******OutputConstraints*******

<p>A single line for each test case, containing the answer modulo 314159.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>2</p><p>2</p><p>1</p>
<strong>Output:</strong>
<p>82</p><p>9</p></pre>


______________________________________________________
JANE||||||true||||||


<p>Jane and Tarzan have got cellphones and now they want to be available all the time. They live in a long line of trees and they are available iff the absolute difference between the heights of the two trees which they are on is not greater than D.</p>
<p>Jane and Tarzan are moving by the following rules: each second both Jane and Tarzan (simultaneously) jump, from the tree which they are on, on one of the adjacent trees (the left or the right one). It is forbidden to stay on the same tree. Moreover, in the very beginning and after each second they have to be available.</p>
<p>The trees in the line are numbered from 1 to N, respectively. Jane is interested in the pairs of trees (J, T) &#8211; let's call them good pairs &#8211; for which it holds: if Jane begins on the J-th tree, and Tarzan on the T-th tree, they can swap their positions after some time (moving by the rules) &#8211; so that Tarzan ends on the J-th tree, and Jane on the T-th tree.</p>
<p>Have a look on the first test example. D = 0 means that the heights of the trees which Jane and Tarzan are on have to differ by at most 0 (therefore, have to be equal) all the time. Pair (1, 5) is a good pair since we can take 1-2-3-4-5-6-5 as Jane's route, and 5-6-5-4-3-2-1 as Tarzan's route &#8211; this results in Jane and Tarzan swapping their initial positions (and being available all the time).</p>
<p>Output all the good pairs (J, T) in which J &lt; T.</p>

*******InputConstraints*******

<p>In the first line of input there are integers N (1 &#8804; N &#8804; 100 000) and D (0 &#8804; D &#8804; 10<sup>9</sup>).</p>
<p>In the next N lines there are N natural numbers less than 10<sup>9</sup> &#8211; heights of the trees in the line (from the 1st tree to the N-th tree).</p>

*******OutputConstraints*******

<p>Output all the requested pairs in sorted order. We define a pair (A, B) to be smaller than the pair (C, D) iff (A &lt; C) or (A = C and B &lt; D).</p>
<p>In all of the test data, the number of these pairs will not exceed 100 000.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6 0
2
1
2
3
2
1

<strong>Output:</strong>
1 3
1 5
2 6
3 5
</pre>
<pre><strong>Input:</strong>
5 10
10
20
10
5
10

<strong>Output:</strong>
1 2
1 3
1 4
2 3
2 5
3 4
3 5
4 5
</pre>


______________________________________________________
EDIST||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You are given two strings, A and B. Answer, what is the smallest number of operations you need to transform A to B.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Operations are:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>1) Delete one letter from one of strings</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>2) Insert one letter into one of strings</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>3) Replace one of letters from one of strings with another letter&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Input</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">T - number of test cases</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For each test case:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>String A</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>String B</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Both strings will contain only lowercase characters and they won't</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">be longer than 2000 characters.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Output</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For each test case, one line, minimum number of operations.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Example</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Input:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">1</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">FOOD</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">MONEY&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Output:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">4</div>
<p>You are given two strings, A and B. Answer, what is the smallest number of operations you need to<br />transform A to B?</p>
<p>Operations are:</p>
<p><span style="white-space: pre;"> </span>1) Delete one letter from one of strings<br /><span style="white-space: pre;"> </span>2) Insert one letter into one of strings<br /><span style="white-space: pre;"> </span>3) Replace one of letters from one of strings with another letter&nbsp;</p>
<p><strong>Input</strong></p>
<p>T - number of test cases</p>
<p>For each test case:</p>
<p><span style="white-space: pre;"> </span>String A<br /><span style="white-space: pre;"> </span>String B</p>
<p>Both strings will contain only uppercase characters and they won't<br />be longer than 2000 characters.&nbsp;</p>
<p>There will be 10 test cases in data set.</p>
<p><strong>Output</strong></p>
<p>For each test case, one line, minimum number of operations.</p>
<p><strong>Example</strong></p>
<p><strong>Input:</strong></p>
<p>1<br />FOOD<br />MONEY&nbsp;</p>
<p><strong>Output:</strong></p>
<p>4</p>


______________________________________________________
INCPOWK||||||true||||||


<p>Let's define S<sub>k</sub> as the increasing sequence a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... consisting of all those <br />positive integers which are powers of K or sums of distinct powers of K. <br />&nbsp;<br />For example S<sub>3</sub> = {1,3,4,9,10,12,13,27,28,30,...} <br />&nbsp;<br />Your task is given N and K find the N<sup>th</sup> term of the sequence S<sub>k</sub>.</p>

*******InputConstraints*******

<p>The first line of the input contains a single integer T(1 &lt;= T &lt;= 10<sup>4</sup>) representing the <br />number of test cases. The next T lines consist of two numbers each one separated by a single space: &nbsp;<br />K (3 &lt;= K &lt;= 9) and N (1 &lt;= N &lt;= 10<sup>200</sup>).</p>

*******OutputConstraints*******

<p>For each test case print a single line, the N<sup>th</sup> term of the sequence S<sub>k</sub>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />8 <br />3 4 <br />3 100 <br />4 3 <br />5 12 <br />6 7 <br />7 239 <br />8 17 <br />9 500<br /><br /><strong>Output:</strong><br />9 <br />981 <br />5 <br />150 <br />43 <br />958399 <br />4097 <br />48426822<br /></pre>


______________________________________________________
FERT21_0||||||true||||||


<p>Upon a table there are two boxes.  Each  box has N matches inside. We want to know what is the probability of choose N times a random box and take one match from it, at the end have an empty box.</p>
<p>You have to print all digits.</p>
<p>Constrains<br />1 &lt;= T &lt;= 1000<br />1 &lt;= N &lt;= 1000</p>

*******InputConstraints*******

<p>T<br />N1<br />N2<br />...<br />NT</p>

*******OutputConstraints*******

<p>P1<br />P2<br />...<br />PT</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1<br />2<br /><br /><strong>Output:<br /></strong>0.5<br /> </pre>


______________________________________________________
INVCNT||||||false||||||

<p style="text-align: justify;"><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">Let A[0...n - 1] be an array of n distinct positive integers. If i &lt; j and A[i] &gt; A[j] then the pair (i, j) is called an inversion of A. Given n and an array A your task is to find the number of inversions of A.</span></span></p>
<h3><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">Input</span></span></h3>
<p style="text-align: justify;"><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">The first line contains t, the number of testcases followed by a blank space. Each of the t tests start with a number n (n &lt;= 200000). Then n + 1 lines follow. In the ith line a number A[i - 1] is given (A[i - 1] &lt;= 10^7). The (n + 1)th line is a blank space.</span></span></p>
<h3><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">Output</span></span></h3>
<p><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">For every test output one line giving the number of inversions of A.<br /></span></span></p>
<h3><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;">Example</span></span></h3>
<p><span style="font-family: arial,helvetica,sans-serif;"><span style="font-size: small;"><strong>Input:</strong></span></span></p>
<pre><span style="font-size: small;"><span style="font-family: verdana,geneva;"><span style="font-size: medium;">2<br /><br />3<br />3<br />1<br />2<br /><br />5<br />2<br />3<br />8<br />6<br />1<br /></span><br /><br /></span></span></pre>
<p><span style="font-size: small;"><span style="font-family: verdana,geneva;"><span style="font-family: arial,helvetica,sans-serif;"><strong>Output:</strong></span> <br /></span></span></p>
<pre><span style="font-size: small;"><span style="font-family: verdana,geneva;"><span style="font-size: medium;">2<br />5</span><br /></span></span></pre>


______________________________________________________
FNRANK||||||false||||||

<p style="text-align: justify;"><span style="font-size: small;">Let us consider a set of fractions x/y, such that 0 &lt;= x/y &lt;= 1, y &lt;= n and gcd (x, y) = 1.<br /></span></p>
<p style="text-align: justify;"><span style="font-size: small;">For example, say n = 5. Then we have the following set in increasing order :</span></p>
<p style="text-align: justify;"><span style="font-size: small;"><sup>0</sup>&frasl;<sub>1</sub>, <sup>1</sup>&frasl;<sub>5</sub>, <sup>1</sup>&frasl;<sub>4</sub>, <sup>1</sup>&frasl;<sub>3</sub>, <sup>2</sup>&frasl;<sub>5</sub>, <sup>1</sup>&frasl;<sub>2</sub>, <sup>3</sup>&frasl;<sub>5</sub>, <sup>2</sup>&frasl;<sub>3</sub>, <sup>3</sup>&frasl;<sub>4</sub>, <sup>4</sup>&frasl;<sub>5</sub>, <sup>1</sup>&frasl;<sub>1</sub></span></p>
<p style="text-align: justify;"><span style="font-size: small;">You are given n, a and b. The task is to find the rank of a/b in a set of fractions as stated above which is in increasing order.<br /></span></p>
<p style="text-align: justify;"><span style="font-size: small;"><br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Input</span></h3>
<p style="text-align: justify;"><span style="font-size: small;">The first line of the input contains t (t &lt;= 20), the number of testcases. Then t lines follow. In each of the t lines you are given n, a and b.&nbsp; (n &lt;= 100000)</span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Output</span></h3>
<p style="text-align: justify;"><span style="font-size: small;">Print t lines. The ith line contains the rank of a fraction a/b for a given n, a and b in the (i + 1)th line of input. All answers fit within a signed integer.<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Example</span></h3>
<p style="text-align: justify;"><span style="font-size: small;"><strong>Input:<br /></strong>2<br />5 3 4<br />8 5 7</span><span style="font-size: small;"><strong>&nbsp;</strong></span></p>
<p style="text-align: justify;"><span style="font-size: small;"><strong><br /></strong><strong>Output:</strong><br />9<br />17<br /><br /></span>&nbsp;</p>


______________________________________________________
NGM2||||||false||||||

<p style="text-align: justify;"><span style="font-size: small;">Little Chikoo likes to play with numbers. Often he plays the following game :</span></p>
<ol style="text-align: justify;">
<li><span style="font-size: small;">He chooses a number N and a set of positive integers.</span></li>
<li><span style="font-size: small;">He writes down all the numbers from 1 to N.</span></li>
<li style="text-align: justify;"><span style="font-size: small;">He chooses the first number (say x) from the set and cancels out all the multiples of x from 1 to N, including x.</span></li>
<li style="text-align: justify;"><span style="font-size: small;">He repeats step 3 for all the numbers from the set.</span></li>
</ol>
<p style="text-align: justify;"><span style="font-size: small;">One day Little Chikoo was in a mood to play pranks. So his brother asked him to play the game with a certain challenge. He made the game a little harder and asked him to find out the number of integers which aren't cancelled after he completes step 4. If he does that then Little Chikoo gets to play on his brother's Nintendo for one full day. Now Little Chikoo is in a hurry and wants to finish the job as soon as possible. He has asked for your help.</span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Input</span></h3>
<p style="text-align: justify;"><span style="font-size: small;">The first line of the input contains N and K. (N &lt;= 10^9, K &lt;= 15)</span></p>
<p style="text-align: justify;"><span style="font-size: small;">Then K numbers follow all in a single line. All numbers are &lt;= 100.</span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Output</span></h3>
<p style="text-align: justify;"><span style="font-size: small;">The output file must contain the number of integers that&nbsp;aren't cancelled&nbsp;after he finishes step 4 of the game.</span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Example</span></h3>
<p style="text-align: justify;"><span style="font-size: small;"><strong>Input:</strong></span></p>
<p style="text-align: justify;"><span style="font-size: small;">10 3</span></p>
<p style="text-align: justify;"><span style="font-size: small;">2 4 5</span></p>
<p style="text-align: justify;"><span style="font-size: small;"><strong>Output:</strong></span></p>
<p style="text-align: justify;"><span style="font-size: small;">4</span></p>
<p style="text-align: justify;"><span style="font-size: small;">(The numbers 1, 3, 7 and 9 weren't cancelled).</span></p>


______________________________________________________
SUMMUL||||||true||||||


<p>One boy Petya decided to practice in addition and multiplication of numbers. For this he chose some positive integer n, and ordered all the ways to decompose it into two or more terms of positive integers, and the ways in different order terms are considered to be different (for example, for n = 3 there are three ways: 1 + 2, 2 + 1 and 1 + 1 + 1). Then he replaced all the plus signs with multiplication, and added the results (for n = 3: 1 Ã— 2 + 2 Ã— 1 + 1 Ã— 1 Ã— 1 = 5). After practicing for the day he decided to check the correctness of his calculations. Help Petya find the right answers.


*******InputConstraints*******

<p>The first line contains T (1 <= T <= 1000) - the number of tests. Following T lines contain n (1 <= n <= 10 ^ 9).


*******OutputConstraints*******

<p>For each n from the input print the result Petya should get modulo 1000000007.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1
2
3

<b>Output:</b>
0
1
5

</pre>


______________________________________________________
PYRA||||||true||||||


<p>Daniel is building towers. He has a big amount of block of the size 1x1xK (for any K). Out of them he is building towers according to the following rules: the longest block is put in the basement of the tower. Several towers built by the same rules can be put on this block. The distance between the bases of those towers should be 1 and the distance between the bases of the towers and the edges of the common basement should be 1. There should be a block of the length 1 on the top of each tower. Daniel encodes every tower with root tree. For example:

<div><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:pyramids"></div>
 
<p>The root of the tree corresponds to the basement of the tower. Its descendants correspond to the towers standing on it. The leaves correspond to the blocks of the size 1x1x1 on the tops. Given the root tree describing one of those structures, calculate the total volume of the structure.


*******InputConstraints*******

<p>The first line of input contains the number t - the number of tests. Next comes the description of t tests. Each test starts with an integer n - the number of nodes of the tree. This is followed by n-1 line, consisting of two integers a and b - number of nodes connected by an edge. Nodes are numbered from 0 to n-1. The root of the tree will always be a node with number 0. Otherwise the nodes and edges can go in any order.


*******OutputConstraints*******

<p>For each test case print the total volume of the structure build according to the rules in the problem statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
7
0 1
2 0
0 3
2 4
5 2
6 3
3
1 2
1 0

<b>Output:</b>
25
9

</pre>


______________________________________________________
BOMBER||||||true||||||


<p>Alice and Bob love to play Bomberman. They decided to upgrade the game. Their version is played on a rectangular board divided into cells. The first player puts a bomb on any cell. The bomb destroys this cell, as well as all consecutive undestroyed cells left, right, above and below it. Then the second player puts his bomb, then again the first and so on. The player who destoys the last cell wins the game. Given the dimensions of the board, determine which player wins the game assuming that both players play optimally.


*******InputConstraints*******

<p>The first line contains T (1 <= T <= 1000) - the number of tests. The next T lines contain two integers m and n (1 <= m, n <= 100) - the size of the board.


*******OutputConstraints*******

<p>For each test print 1 if the first player wins the game, or 2 if the second wins.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 2

<b>Output:</b>
2

</pre>


______________________________________________________
ROBBERY2||||||true||||||


<p><b>k</b> bandits robbed a bank. They took away <b>n</b> gold coins. Being a progressive group of robbers they decided to use the following procedure to divide the coins. First the most respected bandit takes <b>1</b> coin, then the second respected takes <b>2</b> coins, ..., the least respected takes <b>k</b> coins, then again the most respected takes <b>k+1</b> coins, ans so on, until one of the bandits takes the remaining coins. Calculate how much gold each of the bandits gets.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consists of two integers <b>n</b> and <b>k</b> - the amount of coins and bandits respectively.


*******OutputConstraints*******

<p>For each test print the amounts of coins each bandit gets separated by spaces.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1000000 2
1234567 3
123456789 4

<b>Output:</b>
499849 500151
411602 411887 411078
30869901 30858368 30862296 30866224

</pre>


______________________________________________________
SHMOOGLE||||||true||||||


<p>Shmoogle company developed new protocol &lt;&lt;Wave>> for the multi-user online editing of the text data. Using it, any client can send commands to the server for editing the text and the server would broadcast it to all other connected clients. Each command consists of a sequence of operations of the following type:
</p><blockquote class="table"><div class="center"><div class="center"></div>
<table border="1" cellpadding="1" cellspacing="0"><tbody><tr><td align="center" nowrap="nowrap" valign="top"> Operation</td><td align="left" valign="top">Description</td></tr>
<tr><td align="center" nowrap="nowrap" valign="top"> <tt>R</tt> <i>k</i></td><td align="left" valign="top">Moves the cursor <i>k</i> positions right. The cursor is positioned at before the first character of the text at the start of performing the command.</td></tr>
<tr><td align="center" nowrap="nowrap" valign="top"> <tt>C</tt> <i>k</i> <i>s</i></td><td align="left" valign="top">Inserts the string <i>s</i> of length <i>k</i> at the cursor position. After this operation the cursor is positioned to the right of the inserted string.</td></tr>
<tr><td align="center" nowrap="nowrap" valign="top"> <tt>D</tt> <i>k</i></td><td align="left" valign="top">Deletes <i>k</i> characters right of the cursor.</td></tr>
</tbody></table>
<div class="center"></div></div></blockquote><p>When the new client connects the server needs to send it all the command this client missed. In order to save traffic the server merges all the commands in one equivalent command. Help Shmoogle company implement merging of commands effectively.</p><p>The resulting command should consist of the least possible number of operations. The delete operations should precede the insert operations if possible.</p>


*******InputConstraints*******

<p>The first line contains T (1 <= T <= 10) &#8212; the number of test cases. The description of T tests follow.

The first line of each test case contains the amount of commands n (1 <= n <= 10000). The description of each command follows. The first line of each command contains the amount of operations m (1 <= m <= 10). The next m lines contain the description of each operation in the format given above. 1 <= k <= 100000 for R and D operations, and 1 <= k <= 10 for C operations. The strings in C operations consist of latin letters and digits only.


*******OutputConstraints*******

<p>For each test case your program should print the result of merging the commands. The format of the command should be the same as in the input file, except for the limitations on m and k. The result should consist of the least possible number of operations. The delete operations should precede the insert operations if possible. If the result of merging consist of no operations print 0.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2
4
R 4
C 3 abc
R 2
C 3 xyz
3
R 7
C 3 def
D 3

<b>Output:</b>
3
R 4
D 2
C 8 abcdefyz

</pre>


______________________________________________________
YODANESS||||||true||||||


<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:yoda" style="float:left">Yoda is the wisest, and perhaps the most powerful Jedi of his time. Yoda is a mysterious figure and he has many oddities. One of them is that Yoda often changes the order of words in the sentence. For example, one of such phrases is "Or I will help you not." Let's call the yodaness level of any statement the number of pairs of words that changed their order, as to the order in which they were supposed to go in a normal statement. Write a program that determines the yodaness level of different statement of Yoda.
<div style="clear:both">Â </div>


*******InputConstraints*******

<p>The first line of input contains the number t - the number of tests. Next comes the description of t tests. Each test consists of three rows. The first line of the test contains an integer n - number of words in the statement. The next line contains n words separated by spaces - the statement as Yoda says it. The next line is n words separated by spaces - the same statement as it should be said normally. All the words in the statement are different and consist of small latin letters.


*******OutputConstraints*******

<p>For each test print the yodaness level of the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
6
in the force strong you are
you are strong in the force
6
or i will help you not
or i will not help you

<b>Output:</b>
11
2

</pre>


______________________________________________________
EXPER||||||true||||||


<p>The following experiment is taking place. There are n points of a plane. Each point is moving with the uniform velocity. It is needed to determine the minimum circle which encloses all the points after each second of the experiment during the fixed time T.


*******InputConstraints*******

<p>The first line of input contains the number t - the number of tests. Next comes the description of t tests. The first line of each test consists of two integers n - number of points and T - the duration of the experiment in seconds. The next n lines contain four integers separated by spaces x, y, vx, vy - initial coordinates and velocities of each point.


*******OutputConstraints*******

<p>For each test case print T real numbers Ri for i from 1 to T rounded to two decimals after the point. Ri should be the radius of the minimal circle which encloses all the points.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 5
1 0 1 0
3 4 1 2
5 5 -2 -1

<b>Output:</b>
3.16
4.12
5.41
7.43
9.55

</pre>


______________________________________________________
ROOTCIPH||||||true||||||


<p>Radar scanned the approaching enemy aircraft on the border. However due to some error part of the tranmitted data can't be deciphered. It was possible only to obtain the coefficients of the cubic polynomial, whose roots are the coordinates of the aircraft relative to the radar. Now you need to calculate the distance to the aircraft. Write the program to solve this task.


*******InputConstraints*******

<p>The first line contains T (1 <= T <= 1000) - number
tests. The next T lines contain three integers a, b and c - coefficients of the polynomial <i>x</i><sup>3</sup> + <i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i>, whose roots are the coordinates
(the absolute value of the coordinates do not exceed 10<sup>8</sup>).


*******OutputConstraints*******

<p>For each test print the square of the distance to the enemy aircraft.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
-6 11 -6

<b>Output:</b>
14

</pre>


______________________________________________________
MOVMRBL||||||false||||||

<p style="text-align: justify;"><span style="font-size: small;">You have N marbles and K slots. You have to follow the below mentioned rules :</span></p>
<ol style="text-align: justify;">
<li><span style="font-size: small;">You can put in a marble or take out a marble from slot numbered 1 at any time.</span></li>
<li style="text-align: justify;"><span style="font-size: small;">You can put in a marble or take out a marble from slot numbered i only if there exists a marble at the slot i - 1.</span></li>
<li style="text-align: justify;"><span style="font-size: small;">The game stops when a marble reaches the slot numbered K for the first time.<br /></span></li>
</ol>
<p style="text-align: justify;"><span style="font-size: small;">Your task is to finish the game in minimum number of valid moves.</span></p>

______________________________________________________
ARDA1||||||true||||||


<p style="text-align: justify;"><em>Along the skirts of the Dead Marshes I followed it, and then I had him. Lurking by a stagnant mere, peering in the water as the dark eve fell, I caught him, Gollum. He was covered with green slime. He will never love me, I fear; for he bit me, and I was not gentle. Nothing more did I ever get from his mouth than the marks of his teeth.</em></p>
<p style="text-align: right;"><em><br />&ldquo;The Lord of the Rings: The fellowship of the Ring&rdquo;</em></p>
<p>&nbsp;</p>
<p>Hearing Gandalf&rsquo;s advice, Aragorn has started hunting creature Gollum. After several days following his footprints, he has arrived to the Dead Marshes. He has a map of the marshes, that can be viewed as an M<sub>1</sub> * M<sub>2</sub> matrix containing lowercase letters form English alphabet (i.e. letters from &lsquo;a&rsquo; to &lsquo;z&rsquo;).</p>
<p>Being a skilled ranger, Aragorn has been able to fully characterize Gollum preferred place (if you are interested, you should know that it must be dark, wet, creepy and full of fishes!). It can be described as an N<sub>1</sub> * N<sub>2</sub> matrix containing lowercase letters form English alphabet.</p>
<p>Your task is simple: write a program that, given Gollum&rsquo;s preferred place description and Aragorn&rsquo;s map, output all possible locations of the creature.</p>
<p>Let&rsquo;s look at an example: suppose Gollum&rsquo;s preferred place is described by the following 3 * 3 matrix:</p>
<p>aba</p>
<p>bab</p>
<p>aba</p>
<p>and that Aragorn&rsquo;s map looks something like this:</p>
<p>aababa</p>
<p>ababab</p>
<p>bababa</p>
<p>ababab</p>
<p>ababab</p>
<p>bababa</p>
<p>ababab</p>
<p>Then your program must output the following: (1,2), (1,4), (2,1), (2,3), (5,1) and (5,3), these being the upper-left corners of all places on the Dead Marshes that match Gollum&rsquo;s preferred place description. If none match is found, you should output the string &ldquo;NO MATCH FOUND...&rdquo; without the quotes.</p>

*******InputConstraints*******

<p>Line 1: Two integers: N<sub>1</sub> and N<sub>2</sub>.</p>
<p>Lines 2&hellip; N<sub>1</sub> + 1: A string with N<sub>2</sub> characters as described above.</p>
<p>Lines N<sub>1</sub> + 2: Two integers: M<sub>1</sub> and M<sub>2</sub>.</p>
<p>Lines N<sub>1</sub> + 3&hellip; N<sub>1</sub> + M<sub>1</sub> + 3: A string with M<sub>2</sub> characters as described above.</p>
<p><strong>Restrictions</strong></p>
<p><br />1 &le; N<sub>1</sub>, N<sub>2</sub> &le; 300</p>
<p>1 &le; M<sub>1</sub> * M<sub>2</sub> &le; 2000</p>
<p>N<sub>1</sub> &le; M<sub>1</sub></p>
<p>N<sub>2</sub> &le; M<sub>2</sub></p>

*******OutputConstraints*******

<p>On each line print the upper-left corner of all places that match Gollum&rsquo;s preferred place description on the form &ldquo;(x,y)&rdquo; without the quotes, where x stands for the row and y for the column. They should be lexicographically sorted, i.e. imagine them as an ordered pair. Then (x<sub>1</sub>,y<sub>1</sub>) &lt; (x<sub>2</sub>,y<sub>2</sub>) if and only if x<sub>1</sub> &lt; x<sub>2</sub> or, if they are equal, y<sub>1</sub> &lt; y<sub>2</sub>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><p>3 3</p><p>aba</p><p>bab</p><p>aba</p><p>7 6</p><p>aababa</p><p>ababab</p><p>bababa</p><p>ababab</p><p>ababab</p><p>bababa</p><p>ababab</p><br /><strong>Output:</strong><br /><p>(1,2)</p><p>(1,4)</p><p>(2,1)</p><p>(2,3)</p><p>(5,1)</p><p>(5,3)</p></pre>


______________________________________________________
NGON||||||true||||||


<p>There is a regular n-gon. We mark some points on its sides: a1 points on the first side, a2 on the second ... an on the last. Marked points do not coincide with the vertices n-gon. The question is, how many different convex nondegenerate (n-1)-gons you can build, using marked points as vertices?


*******InputConstraints*******

<p>The first line of input contains the number t - the number of tests. Next comes the description of t tests. Each test consists of two lines. The first line of the test contains an integer n - number of vertices of original n-gon. Second line of the test lists n integers a1, a2, ..., an - number of points marked on each side.


*******OutputConstraints*******

<p>For each test, print out the answer to the problem modulo 1000000007.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4
2 2 2 2
5
2 2 2 2 2
5
10 20 30 40 50

<b>Output:</b>
56
210
16207125

</pre>


______________________________________________________
ZUMA||||||true||||||


<p>One day Mirko, while he was walking through the high grass, stumbled upon a sequence of N colored marbles. Soon he noticed that if he touches K or more consecutive marbles of the same color, they start to twinkle and then he could wish them to magically vanish, although he doesn't have to do that immediately (see 2. sample). Fortunately, Mirko brought an inexhaustible supply of marbles from home, so he can insert a marble of any color<br />anywhere in the array (at the beginning, between any two existing marbles, or at the end). Help Mirko find the smallest number of marbles he must insert into the sequence before he could make all of the marbles vanish</p>

*******InputConstraints*******

<p>The first line of input contains two integers N (1 &le; N &le; 100) and K (2 &le; K &le;5) - the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly N integers between 1 and 100 (inclusive),separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.</p>

*******OutputConstraints*******

<p>The output should contain only one line with a single integer number - the minimal number of marbles Mirko has to insert to achive the desired effect.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 5<br />1 1<br /><strong>Output:</strong><br />3<strong><br /><br />Input<br /></strong>10 4<br />3 3 3 3 2 3 1 1 1 3<strong><br /><br />Output:</strong><br />4</pre>


______________________________________________________
RPSSL||||||true||||||


<p>Daniel enjoys watching TV series. One of his favorite is "The Big Bang Theory". The main characters of this series are: Sheldon &#8211; genius theoretical physicist, his friend Leonard &#8211; talented experimental physicist, their attractive, blonde neighbor Penny, and also their friends  an aerospace engineer Howard and a particle astrophysicist Rajesh.<br /> 
One time Rajesh tells Sheldon:<br />
&#8220;I'll tell you what. How about we go rock-paper-scissors?&#8221;<br />
&#8220;Ooh&#8221;, &#8211; Sheldon replies &#8211; &#8220;I don't think so. Anecdotal evidence suggests that in the game of rock-paper-scissors, players familiar with each other will tie 75 to 80% of the time due to the limited number of outcomes. I suggest rock-paper-scissors-lizard-Spock&#8221;.<br />
&#8220;What?&#8221;<br />
&#8220;It's very simple. Scissors cuts paper. Paper covers rock. Rock crushes lizard. Lizard poisons Spock. Spock smashes scissors. Scissors decapitates lizard. Lizard eats paper. Paper disproves Spock. Spock vaporizes rock. And as it always has, rock crushes scissors&#8221;.<br />
&#8220;Okay, I think I got it&#8221;.<br />
And the friends decided to play rock-paper-scissors-lizard-Spock. And we would determine what the probability that Rajesh beats Sheldon in this game. We know the probabilities that any of the friends choose any object in the game. Also we know that they play till two wins, so the winner of the game is the person who first wins two rounds.


*******InputConstraints*******

<p>The first line of input contains the number t - the number of tests. Next comes the description of t tests. Each test case consists of two lines. The first line contains five integers R<sub>R</sub>, R<sub>Sc</sub>, R<sub>P</sub>, R<sub>L</sub>, R<sub>Sp</sub> &#8211; the probabilities that Rajesh chooses rock, scissors, paper, lizard or Spock respectively. The second line contains five integers S<sub>R</sub>, S<sub>Sc</sub>, S<sub>P</sub>, S<sub>L</sub>, S<sub>Sp</sub> &#8211; the probabilities that Sheldon chooses rock, scissors, paper, lizard or Spock respectively. (<b>Note:</b> the order of the objects in the input is rock, scissors, paper, lizard, Spock. The original problem is in Russian and we have scissors before paper in Russian variant of the game. Otherwise the rules are the same.)


*******OutputConstraints*******

<p>For each test case print the probability that Rajesh beats Sheldon in percent rounded to the nearest integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
10 20 30 40 0
10 10 10 10 60
20 20 20 20 20
20 20 20 20 20

<b>Output:</b>
66
50

</pre>


______________________________________________________
SAMTWARR||||||true||||||


<p>You are given two arrays each of length N(1 &lt;= N &lt;= 100000) which are initially filled with zeros. You have to apply M (1 &lt;= M &lt;= 100000) queries of three kind:&nbsp;</p>
<p><strong>0 arr left right :</strong>&nbsp;&nbsp;calculate and output sum of elements from left to right in array arr (arr = 0 -- first array, arr = 1 -- second &nbsp; &nbsp; array);&nbsp;<br /><strong>1 arr idx newValue :</strong>&nbsp;change value of element at index idx of array arr on newValue;<br /><strong>2 left right :</strong>&nbsp;&nbsp;swap range of elements of two arrays from left to right ( for i = left to right do swap(a[i], b[i]) );</p>

*******InputConstraints*******

<p>The first line of input contains two integers - N, M. The folowing M lines contains information about queries. <br />On each query - one line: <br />First integer number cmd contains 0, 1 or 2 (type of query described above). <br />if cmd equals <strong>0</strong>, then following 3 integers arr, left, right - 0 &lt;= arr &lt;= 1, 0 &lt;= left &lt;= right &lt;= N - 1. <br />if cmd equals <strong>1</strong>, then following 3 integers arr, idx, newValue - 0 &lt;= arr &lt;= 1, 0 &lt;= idx &lt;= N - 1, -10000 &lt;= newValue &lt;= 10000. <br />if cmd equals <strong>2</strong>, then following 2 integers left, right - 0 &lt;= left &lt;= right &lt;= N - 1.</p>

*******OutputConstraints*******

<p>On each query with cmd equals 0 you should output corresponding value described above.</p>

*******IOTestCases*******

<p><strong>Input:</strong><br />5 10 <br />1 0 0 1 <br />1 1 4 2 <br />0 0 0 4 <br />0 1 0 4 <br />2 0 0 <br />0 0 0 4 <br />0 1 0 4 <br />2 0 4 <br />0 0 0 4 <br />0 1 0 4<br /><br /><strong>Output:</strong><br />1 <br />2 <br />0 <br />3 <br />3 <br />0</p>


______________________________________________________
KKKCT2||||||true||||||


<p>This is a new version of problem CT with the new limit: X,Y&lt;=10000, and the result will be written in modulo 2009</p>

*******InputConstraints*******

<p>The input begins with C &ndash; number of test cases.<br />Each test case consists of X, Y.</p>

*******OutputConstraints*******

<p><br />For each test case, output the result in a line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />0 3<br />1 1<br /><br /><strong>Output:</strong><br />0<br />4</pre>


______________________________________________________
MB1||||||true||||||


<p>PP numbers are prime numbers and palindromes in decimal notation at once. Your task is to find <em>n</em>-th PP number in ascending order. Then calculate product of its non-zero digits - let's call it <em>m</em> - and find <em>m</em>-th prime number in ascending order.</p>

*******InputConstraints*******

<p>In the first line of input there is one positive integer <em>Z</em> (1 &#8804; <em>Z</em> &#8804; 1000) which states the number of test cases. Following <em>Z</em> lines contain test cases.</p>
<p>Each test case consists of one positive integer <em>n</em> (1 &#8804; <em>n</em> &#8804; 113) which states the number of PP number to find.</p>

*******OutputConstraints*******

<p>For each test case print in separate line two numbers: <em>n</em>-th PP number and <em>m</em>-th prime number.</p>

*******IOTestCases*******

<p><strong>Input:</strong></p>
<pre>
3
1
5
2
</pre>
<p><strong>Output:</strong></p>
<pre>
2 3
11 2
3 5
</pre>


______________________________________________________
TDKPRIME||||||true||||||


<p>The problem statement is really simple. There are some queries. You are to give the answers.


*******InputConstraints*******

<p>An integer stating the number of queries Q(equal to 50000), and Q lines follow, each containing one integer K between 1 and 5000000 inclusive.


*******OutputConstraints*******

<p>Q lines with the answer of each query: the Kth prime number.



*******IOTestCases*******


<pre>
<b>Input:</b>
8
1
10
100
1000
10000
100000
1000000

<b>Output:</b>
2
29
541
7919
104729
1299709
15485863
</pre>


______________________________________________________
TDPRIMES||||||true||||||


<p>The problem statement is really simple. You are to write all primes less than 10^8


*******InputConstraints*******

<p>There is not input


*******OutputConstraints*******

<p>To make the problem less output related write out only the 1st, 101st, 201st, ... 1st mod 100.


*******IOTestCases*******


<pre>
<b>Input:</b>

<b>Output:</b>
2
547
1229
...
99995257
99996931
99998953

</pre>


______________________________________________________
BOWLING1||||||true||||||


<p>It is well known that programmers enjoy bowling. Bowling is a competitive sport in which a player (the &#8220;bowler&#8221;) rolls a bowling ball down a wooden or synthetic lane with the objective of scoring points by knocking down as many pins as possible.<br /><br />
For a beginner, scoring is probably the part of bowling which people find hard to understand. Fortunately, but it is not as hard as it seems.<br /><br />
As most bowling centers have a scoring computer, you do not usually have to score yourself. I am sure that this makes people lazy and there are probably some regular bowlers who would not be able to score manually if they had to. One day, when it all breaks down, or you are needed to correct a mistake (yes, computers do make mistakes sometimes), an understanding of the scoring rules are necessary.<br /><br />
The most difficult part of bowling scoring to comprehend is when a strike or spare is scored, as the score on the scorecard does not get updated immediately.<br /><br />
A game consists of ten frames, which start with a full rack of ten pins. In each frame, you have two deliveries of your ball, in which to knock down as many of the ten pins as you can.<br /><br />
If you knock down all the pins on your first ball, it is called a strike. The score doesn't get added on straight away because for a strike, you get the values of your next two balls as a bonus. For example, if you score a strike in the first frame, then an 7 and 1 in the second frame, you would score 18 (10+7+1) for the first frame, and 8 for the second frame, making a total of 26 after two frames.
If you knock down some of the pins on the first ball, and knocked down the remainder of the pins in the second ball, it is known as a spare. Again, the score doesn't get added on straight away because for a spare, you get the values of your next ball as a bonus. For example, you if score a spare in the first frame, say an 6 and a 4, then got an 8 and a 1 in the second frame, you would score 18 (6+4+8) for the first frame, and 9 for the second frame, making a total of 27 after two frames.<br /><br />
When it comes to the final frame, it is slightly different. In the final frame, you get bonus balls if you strike or spare, to a maximum of three deliveries. If you strike in the first delivery you have the opportunity to strike in the remaining two and have three deliveries in total. If you scored strikes in each of your final three deliveries, the score for the final frame would be 30 (10+10+10). If you spare the final frame, you get the third delivery as a bonus. So, a spare, 9 and 1, followed by a strike would equal 20 (9+1+10).<br /><br />
You have to write a program which will calculate the score the player gets for the game given the information about the pins knocked down after each delivery of the ball.



*******InputConstraints*******

<p>The first line of the input contains number t <= 1000 &#8211; the amount of test cases. Then the description of each of t test cases follow one per line. Each test case consists of several integers 0 <= a <= 10 &#8211; the amount of pins knocked down after each delivery of the ball. Each test case describes a full game for one player. All the games in the input file are correct.


*******OutputConstraints*******

<p>For each test case output the number of points the player gets in a game on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10 10 10 10 10 10 10 10 10 10 10 10
3 5 1 5 7 1 10 1 6 10 6 2 1 2 0 5 8 1
9 1 5 0 3 0 8 1 6 4 7 2 7 1 6 3 10 4 4

<b>Output:</b>
300
89
101

</pre>



______________________________________________________
HAMSTER2||||||true||||||


<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:hamster" style="float:left">There is a competition of flying hamsters in Hamsterburg. Each competing hamster is thrown from a sling. The initial speed of the hamsters is V0 m/s. Free fall acceleration is g = 10 m/s2. There is no air friction. The size of the hamster and the sling are negligible. When the hamster is thrown from the sling its altitude is 0 meters. There is a number of vertical gates in the air. Each gate has a lower and an upper bound. If we mark the points directly under each of the gates on the ground &#8211; those points are positioned in one line and on one side from the starting point. A hamster gets as many points as the amount of gates he flies through. You have to calculate the maximal amount of points that a hamster can get in one flight. It is considered that a hamster flies through the gate if he touches the bounds of the gate during the flight or flies between the bounds.
<div style="clear:both">Â </div> 


*******InputConstraints*******

<p>The first line of the input contains number 0 < t <= 10 the amount of test cases. The description of each test case follows. Each test starts with two integers 0 < V0 <= 1000 &#8211; the initial speed of the hamster ans 0 < n <= 20000 &#8211; the total amount of gates. Each of the next n lines contains the description of one of the gates: three integers 0 < x <= 10000 &#8211; the distance from the starting point to the point directly under the gate, 0 < y1 <= y2 <= 10000 &#8211; lower and upper bound of the gate.


*******OutputConstraints*******

<p>For each test case output the maximal amount of gates a hamster can fly through in one flight on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10 2
3 1 2
3 2 3
10 3
1 1 1
2 2 3
3 4 6
10 3
1 1 2
2 3 4
3 5 6

<b>Output:</b>
2
1
2

</pre>



______________________________________________________
VGCD||||||true||||||


<p>Given two integers a and b find their greatest common divisor.


*******InputConstraints*******

<p>The first line of the input file contains number 0 < n < 1000 the amount of tests. The description of n test cases follow. The description of a test case consists of two lines. The first line contains integer a (0 < a < 10^12540), the second &#8211; integer b (0 < b < 10^12540). It is also known that all the numbers in the input file are the determinants of the square matrix of the form:
<div><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:fibb" /></div>


*******OutputConstraints*******

<p>For each test case print the greatest common divisor of integers a and b on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
3
3
21
6765
610

<b>Output:</b>
1
3
5

</pre>



______________________________________________________
PRIMES2||||||true||||||


<p>The problem statement is really simple (the constraints maybe not). You are to write all primes less than 10^9


*******InputConstraints*******

<p>There is not input


*******OutputConstraints*******

<p>To make the problem less output related write out only the 1st, 501st, 1001st, ... 1st mod 500.


*******IOTestCases*******


<pre>
<b>Input:</b>

<b>Output:</b>
2
3581
7927
...
999978527
999988747
999999151
</pre>



______________________________________________________
KPRIMES2||||||true||||||


<p>The problem statement is really simple (the constraints maybe not). There are some queries. You are to give the answers.


*******InputConstraints*******

<p>An integer stating the number of queries Q(equal to 100000), and Q lines follow, each containing one integer K between 1 and 50000000 inclusive. 


*******OutputConstraints*******

<p>Q lines with the answer of each query: the Kth prime number.


*******IOTestCases*******


<pre>
<b>Input:</b>
8
1
10
100
1000
10000
100000
1000000
10000000

<b>Output:</b>
2
29
541
7919
104729
1299709
15485863
179424673

</pre>



______________________________________________________
BCHOCO||||||true||||||


<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">Bored of setting  problems for Bytecode, Venkatesh and Akhil decided to take some time  off and started to play a game. The game is played on an R*C bar of  chocolate consisting of Black and White chocolate cells. Both of them  do not like black chocolate, so if the bar consists only of black chocolate  cells, it is discarded (Discarding the bar is not considered as a move).  If the bar consists only of white chocolate cells, they do not break  it further and the bar can be consumed at any time (Eating the bar is  considered as a move). If the bar consists of both black and white chocolate  cells, it must be broken down into two smaller pieces by breaking the  bar along any horizontal or vertical line (Breaking the bar is considered  as a move). The player who cannot make a move on any of the remaining  bars loses.</span></span></p>
<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">Assuming Venkatesh  starts the game and both players are infinitely intelligent, determine  who wins the game.</span></span></p>

*******InputConstraints*******

<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">The first line  of input contains a number 't', the number of test cases.</span></span></p>
<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">For each testcase,  first line contains two space separated integers 'R' and 'C'. The following  R lines contain C space separated integers which are either 0 (White)  or 1 (Black).</span></span></p>

*******OutputConstraints*******

<p><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">For each testcase output &ldquo;Venkatesh  wins&rdquo; or &ldquo;Akhil wins&rdquo; (quotes for clarity).</span></span></p>

*******IOTestCases*******

<pre><span style="font-family: arial black,avant garde;"><strong>Input:</strong></span><br /><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">4</span></span><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">3 3</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">0 0 0</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">0 0 0</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">0 0 0 <br /></span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">3 3</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 1 1</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 1 1</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 1 1 <br /></span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 2</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 0 <br /></span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">3 3</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 0 1</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">0 1 0</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">0 0 1</span></span></p><p><span style="font-family: arial black,avant garde;"><strong>Output:</strong></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">Venkatesh wins</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">Akhil wins</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">Akhil wins</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">Venkatesh wins</span></span></p></pre>
<p><span style="font-family: arial black,avant garde;"><strong><strong>Explanation:</strong></strong></span></p>
<pre><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;"><strong>Case 1:</strong> Venkatesh can win in one move by eating all the 0's, which is the only move possible.</span><span style="font-family: arial,helvetica,sans-serif;"><br /><br /><strong>Case 2:</strong> The initial bar consists only of Black chocolate cells, so it has to be discarded. So no move is possible in the game.</span><span style="font-family: arial,helvetica,sans-serif;"><br /><br /><strong>Case 3:</strong> Venkatesh is forced to cut the bar into two. Now Akhil can eat the White chocolate cell and the black cell is discarded.</span></span><strong><strong><span style="font-size: medium;"><br /><br /></span><span style="font-family: arial black,avant garde;">Constraints:</span></strong></strong><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;"><br /></span></span></pre>
<pre><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">t &lt;= 25</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 &lt;= R, C &lt;= 30</span></span></p></pre>


______________________________________________________
DCOUNT||||||true||||||


<p style="text-align: left;"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">Given an integer 'K', construct a set 'S' containing all integers from 1 to 2*K-1 (both inclusive). Construct a graph 'G' with vertices represented by all the K-1 element subsets of 'S'. There is an&nbsp; edge from vertex 'u' to vertex 'v' in 'G', if the corresponding subsets of 'u' and 'v' do not have any element in common. The distance d(u,v) between a vertex 'u' to a vertex 'v' is defined as the shortest path from 'u' to 'v' in 'G'. The diameter of 'G' is defined as the longest distance between any two vertices in 'G'. Output the diameter of the graph and the number of pairs of vertices which have distance equal to the diameter.</span></span></p>

*******InputConstraints*******

<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">The first line  of input contains a number 't', the number of test cases.</span></span></p>
<p align="justify"><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">Each of the  following 't' lines contains an integer 'K'.</span></span></p>

*******OutputConstraints*******

<p><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">For each testcase output two space separated integers, the diameter and the number of pairs. Since the numbers can be huge, output all the numbers modulo 1,000,000,007.</span></span></p>

*******IOTestCases*******

<pre><span style="font-family: arial black,avant garde;"><strong>Input:</strong></span></pre>
<pre><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">2</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">2</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">3</span></span></p></pre>
<pre><span style="font-family: arial black,avant garde;"><strong>Output:</strong></span></pre>
<pre><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">1 6</span></span></p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">2 60</span></span><strong><br /></strong></pre>
<pre><span style="font-family: arial black,avant garde;"><strong>Explanation:</strong></span></pre>
<p>
<p><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;"><strong>For Case 1:</strong></span></span></p>
<p><span style="font-size: small;"><span style="font-family: arial,helvetica,sans-serif;">The graph is a triangle, so&nbsp; the diameter is 1 and the distance between any 2 pairs of different&nbsp; vertices is 1. The 6 pairs are: ({1},{2}), ({2},{1}), ({1},{3}),({3},{1}),&nbsp; ({2},{3}), ({3},{2}).</span></span></p>
</p>
<pre><span style="font-family: arial black,avant garde;"><strong><strong>Constraints:</strong></strong></span></pre>
<pre><pre><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">t &lt;= 25</span></span></p><p><span style="font-size: medium;"><span style="font-family: arial,helvetica,sans-serif;">2 &lt;= K &lt;= 100,000</span></span></p></pre>
</pre>


______________________________________________________
TSPAGAIN||||||false||||||

<p>There are N cities numbered from 0..N-1. A salesman is located at city 0. He wishes to visit all cities exactly once and return back to city 0. There are K toll booths. Each toll booth has a certain range of functioning. The parameters for toll k are given as x_k and y_k. If the salesman travels from city i to j, he has to pay 1 dollar toll fee to each toll p having x_p &gt;= i and y_p &lt;= j. Calculate the cheapest way for the salesman to complete his tour.</p>
<p><br />Input :</p>
<p>The first line contains T the number of test cases. T test cases follow. The first line of each test case contains two space seperated integers N and K. Each of the next K lines contains 2 integers, the ith line containing x_i and y_i (0 &lt;= x_i,y_i &lt; N). A blank line seperates two test cases.<br /><br /><br />Output :<br /><br />Output T lines, one for each test case, containing the required answer.<br /><br /><br />Sample Input :<br /><br />2<br />3 2<br />2 0<br />0 2<br /><br />3 4<br />1 0<br />2 1<br />0 1<br />1 2<br /><br />Sample Output :<br /><br />3<br />6<br /><br />Constraints :</p>
<p>1 &lt;= T &lt;= 50<br />2 &lt;= n &lt;= 1000<br />1 &lt;= K &lt;= 10000</p>


______________________________________________________
JOCHEF||||||false||||||

<p>Chief Farmer Josef aka Sepp needs to crop hay several times through the summer. Due to high petrol costs he can currently use his truck exactly once to drive to a spot where he will harvest the dried grass. Lazy by nature,&nbsp;John does not want to harvest those parts of the field which contain cows, since this would involve too much energy. Furthermore, John just crops a rectangular part of the field.</p>
<p><strong>Input</strong></p>
<p>Input contains multiple test cases. You are given three integers M,N,F (0&lt;M,N&lt;=4000), (0&lt;=F&lt;=1000000) which describe the size of the field (M rows, N columns,<span style="white-space: pre;"> </span>F<span style="white-space: pre;"> </span>unit area of such a field).&nbsp;Then follows the actual map which consists of M lines, each line containing<span style="white-space: pre;"> </span>N times the letters 'H' or 'C' standing for "Hay" or "Cow". Input terminates with M=N=0.</p>
<p><strong>Output</strong></p>
<p>Print the size of the largest field, which "Sepp" would harvest.</p>
<p><strong>Example</strong></p>
<pre><strong>Input:</strong>
9 10 1
CHCHHHCCCC
CCHCHCHHHC
CCHCHHCCCC
CHHHHHCHHH
CHCHHHCCCH
CCCCHHHCHH
HHHCCHCCCC
HCHHHHCCCH
CHHCCCCHHC
0 0

<strong>Output:</strong>
8</pre>


______________________________________________________
NDIVPHI||||||true||||||


<h3>Given an integer N &lt;= 10<sup>40</sup> find the smallest m &lt;= N such that m/phi(m) is maximum.</h3>

*******InputConstraints*******


*******OutputConstraints*******

<p>m1<br />m2<br />.<br />.<br />.<br />m20</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
10
.</pre>
<pre>.</pre>
<pre><strong>Output:</strong>
6</pre>
<pre>.</pre>
<pre>.</pre>


______________________________________________________
NDIVPHI2||||||true||||||


<p>Given an integer N &lt;= 10<sup>25000</sup> find the smallest m &lt;= N such that m/phi(m) is maximum. Where phi is euler's totient function.</p>

*******InputConstraints*******

<p>The first line in the input gives the number of test cases T (T&lt;=200), and then T lines follow each containing an integer N.</p>

*******OutputConstraints*******

<p>Output the smallest required value of m.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />10<br /><br /><strong>Output:</strong><br />6<br /><br /></pre>


______________________________________________________
PRUBALL||||||false||||||

<p align="center"><strong></strong><strong>Balls</strong></p>
<p>The classic <em>Two Glass Balls </em>brain-teaser is often posed as: "Given two identical glass spheres, you would like to determine the lowest floor in a 100-story building from which they will break when dropped. Assume the spheres are undamaged when dropped below this point. What is the strategy that will minimize the worst-case scenario for number of drops?" Suppose that we had only one ball. We'd have to drop from each floor from 1 to 100 in sequence, requiring 100 drops in the worst case. Now consider the case where we have two balls. Suppose we drop the first ball from floor <strong><em>n</em></strong>. If it breaks we're in the case where we have one ball remaining and we need to drop from floors 1 to <strong><em>n</em></strong>-1 in sequence, yielding <strong><em>n </em></strong>drops in the worst case (the first ball is dropped once, the second at most <strong><em>n</em></strong>-1 times). However, if it does not break when dropped from floor <strong><em>n</em></strong>, we have reduced the problem to dropping from floors <strong><em>n</em></strong>+1 to 100. In either case we must keep in mind that we've already used one drop. So the minimum number of drops, in the worst case, is the minimum over all <strong><em>n</em></strong>. You will write a program to determine the minimum number of drops required, in the worst case, given <strong><em>B </em></strong>balls and an <strong><em>M</em></strong>-story building.</p>
<p><strong>Input</strong></p>
<p><strong>&nbsp;</strong>The first line of input contains a single integer <strong><em>P</em></strong>, (1 &le; <strong><em>P </em></strong>&le; 1000), which is the number of data sets that follow. Each data set consists of a single line containing three (3) decimal integer values: the problem number, followed by a space, followed by the number of balls <strong><em>B</em></strong>, (1 &le; <strong><em>B </em></strong>&le; 50), followed by a space and the number of floors in the building <strong><em>M</em></strong>, (1 &le; <strong><em>M </em></strong>&le; 1000).</p>
<p>&nbsp;<strong>Output</strong></p>
<p><strong>&nbsp;</strong>For each data set, generate one line of output with the following values: The data set number as a decimal integer, a space, and the minimum number of drops needed for the corresponding values of <strong><em>B </em></strong>and <strong><em>M</em></strong>.</p>
<p><strong>Sample Input</strong></p>
<p>4</p>
<p>1 2 10</p>
<p>2 2 100</p>
<p>3 2 300</p>
<p>4 25 900<strong></strong></p>
<p><strong>Sample Output</strong></p>
<p>1 4</p>
<p>2 14</p>
<p>3 24</p>
<p>4 10<strong></strong></p>


______________________________________________________
DIVCON||||||true||||||


<p>Anne and Brenda found some cookies scattered on the lattice points in the 2D coordinate system. They agreed to divide them in the following manner.</p>
<p>First, Anne draws a vertical line (that is, a line with the equation x = c, for any real number c) somewhere in the plane. Then Brenda draws a horizontal line (y = d) somewhere in the plane. Now they have divided the plane in four quadrants.</p>
<p>Anne gets all the cookies lying in the upper right and the lower left quadrant, and Brenda gets all the cookies lying in the upper left and the lower right quadrant. Cookies which lie on the vertical or the horizontal line are ignored.</p>
<p>Anne's goal is to maximize the number of cookies she gets, knowing that Brenda plays optimally (in order to maximize her number of cookies).</p>

*******InputConstraints*******

<p>In the first line of input there is an integer T (1 &le; T &le; 600), the number of test cases.</p>
<p>Each test case starts with an integer N (1 &le; N &le; 1000), the number of cookies. In the next N lines there are coordinates (Xi, Yi) of the cookies, integers in the interval [1, 1000]. There can be multiple cookies at the same point.</p>

*******OutputConstraints*******

<p>For each of the T cases, output in a separate line the maximal number of cookies Anne can surely get.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />5<br />1 1<br />4 1<br />4 5<br />5 1<br />3 3<br />11<br />7 10<br />7 11<br />7 10<br />7 11<br />6 6<br />5 5<br />4 8<br />1 5<br />1 6<br />1 4<br />7 1<br />
<strong>Output:</strong>
2<br />5</pre>


______________________________________________________
SEGTREE||||||false||||||

<p>It was Arbor Day. Alice implemented an <a href="http://en.wikipedia.org/wiki/Red-black_tree" target="_blank">RB-tree</a>, Bob composed a <a href="http://en.wikipedia.org/wiki/Segment_tree" target="_blank">segment tree</a>, I made a <a href="http://en.wikipedia.org/wiki/Binary_tree" target="_blank">binary tree</a> - we all have a bright outlook.<br /><br />Lambda is always making mistakes while implementing segment trees (See his history of submissions). He then decides to draw a "segment tree". He puts <em>n</em> points on a plane, link certain pairs of them to form segments and all the segments form a tree. As a normal tree, it satisfies the following conditions:</p>
<ol>
<li>Consider points as vertices, segments as edges, it forms a <a href="http://en.wikipedia.org/wiki/Tree_%28graph_theory%29" target="_blank">rooted tree</a>.</li>
<li>Each node <em>u</em> is <strong>strictly higher</strong> than its parent, namely <em>y<sub>u</sub></em> &gt; <em>y</em><sub><em>parent_of_u</em></sub>.</li>
<li>Segments may only intersect on their endpoints.</li>
</ol>
<p>Lambda wants to minimize the total length of segments. <strong>The tree can be rotated to satisfy above conditions.</strong></p>

______________________________________________________
HCHAINS||||||false||||||

<p>In Croatia there are N small islands. For the purposes of further tourism development, the government has decided to build exactly one hotel on the each island. The government has contracts with two hotel chains: let's call them A and B. Unfortunately, there is a problem since each hotel chain wants to build as many hotels as possible.</p>
<p>Thus, the following agreement has been made: the hotels will be built such that, for each horizontal or vertical line (that is, if we imagine the problem in the 2D coordinate system, for each line with the equation y = c or x = c), the absolute difference between the number of hotels (on that line) of the chain A and the number of hotels (on that line) of the chain B is at most 1.</p>
<p>Write a program that will, for each small island, determine the hotel chain (A or B) which will build the hotel on that island, such that the upper agreement holds.</p>
<p style="text-align: center;"><span style="font-size: small;"><strong>Input</strong><strong>&nbsp;</strong></span></p>
<p>In the first line of input there is an integer T, the number of test cases.</p>
<p>For each test case, in the first line there is an integer N, the number of islands.</p>
<p>In the next line there are eight integers: X(1), Y(1), Ax, Bx, Mx, Ay, By, My; each from the interval [1, 100 000], except for X(1) and Y(1) which are from the interval [0, Mx-1] and [0, My-1], respectively.</p>
<p>2D coordinates of the i-th island (for 2 &le; i &le; N) are:</p>
<p>X(i) = ( Ax * X(i-1) + Bx ) mod Mx;</p>
<p>Y(i) = ( Ay * Y(i-1) + By ) mod My.</p>
<p>It is guaranteed that no two islands will have the same position and the solution, not necessarily unique, will always exist.</p>
<p><strong>Note:</strong> Author's solution doesn't depend on properties of pseudo-random generator.</p>
<p>Data set is divided into 2 parts:<br />&nbsp;&nbsp;&nbsp;&nbsp; First part: &nbsp;&nbsp;&nbsp;&nbsp;1 &lt;= T &lt;= 100, 1 &lt;= N &lt;= 5000<br />&nbsp;&nbsp;&nbsp;&nbsp; Second part: 1 &lt;= T &lt;= 10, 1 &lt;= N &lt;= 100 000</p>
<p style="text-align: center;"><span style="font-size: small;"><strong>Output</strong><strong>&nbsp;</strong></span></p>
<p>For each test case, output in a separate line a string of size N, containing only the letters A and B. The i-th letter of the string denotes the hotel chain which will build the hotel on the i-th island.</p>
<p style="text-align: center;"><span style="font-size: small;"><strong>Example</strong><strong>&nbsp;</strong></span></p>
<p><strong>Input: <br /></strong></p>
<p>1<br />10<br />2 4 8 2 5 6 9 5</p>
<p><br /> <strong>Output:</strong></p>
<p>AAAABBBBBA</p>
<p>&nbsp;</p>
<p><em>The points in this example are:</em></p>
<p><em>2 4<br />3 3<br />1 2<br />0 1<br />2 0<br />3 4<br />1 3<br />0 2<br />2 1<br />3 0</em></p>


______________________________________________________
SNOWGAME||||||true||||||


<p>Farmer John's N (1 &lt;= N &lt;= 10<sup>18</sup>) cows went for a trip around the world. Now they are at the North Pole. They decided to play a snowball game. Each of the cows made one snowball. As it is known, heavier snowballs make more harm. FJ is sure that cows' snowballs are of the same weight except one snowball, which is heavier. FJ has one balance scale. With it he can know which of two snowball groups is heavier. Snowballs get damaged when weighed, so each snowball can take part in a weighing at most K (1 &lt;= K &lt;= 10000) times. Help FJ find the minimal number of weighings after which he can find the heaviest snowball.</p>

*******InputConstraints*******

<p>The only line of input file contains numbers N and K.</p>

*******OutputConstraints*******

<p>The only line of output file contains minimum number of weighings.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
19 2</pre>
<pre><strong>Output:</strong>
3</pre>


______________________________________________________
SEQ6||||||true||||||


<p>We define consecutive sequence as a sequence of numbers {n, n+1, n+2, ..., n+m}. For each given positive integer NÂ &lt;Â 10<sup>7</sup> calculate number of such sequences which sum is equal to N.


*******InputConstraints*******

<p>The input file consists of multiple lines (about 10<sup>3</sup> in the first data set and 10<sup>5</sup> in the second), each line contains integer N. The input is terminated with N = 0, which should not be processed.


*******OutputConstraints*******

<p>Expected number in each line


*******IOTestCases*******


<pre>
<b>Input:</b>

500
0

<b>Output:</b>

8
</pre>



______________________________________________________
ELCS||||||true||||||


<p>In this problem, a string only consists of lowercase letters.</p>
<p>Substring, is a consecutive sequence of characters occurrences at least once in a string.</p>
<p>Common substring means a substring of two strings.</p>
<p>After getting TLE on LCS and LCS2, lqp18_31 felt really depressed. So he came up with an interesting idea. He want to modify the definition of LCS and call it ELCS.</p>
<p>ELCS: for two given strings s1[0&hellip;n-1] and s2[0&hellip;m-1], the ELCS of them is a string p[0&hellip;k-1]&nbsp; k&lt;=min(n,m) so that s1[i]=s2[i]=p[i] ( for 0&lt;=i&lt;k ) and s1[k]!=s2[k] or k==n or k==m .</p>
<p>Now your task is easy.</p>
<p>You are given N strings and Q queries.</p>
<p>Each query consists two intergers a and b. You must answer the length of the ELCS of the a-th string and b-th string.</p>

*******InputConstraints*******

<p>Firtst line consists one interger N.</p>
<p>Next N lines consist N strings.</p>
<p>Next one line consists one interger Q.</p>
<p>Next Q lines consist two intergers a and b. (0&lt;=a,b&lt;N)</p>
<p>30% of the testdata : N&lt;=100 Q&lt;=10000 length(string[i])&lt;=100</p>
<p>100% of the testdata : the number of total characters&lt;=500000 N&lt;=100000 Q&lt;=100000</p>

*******OutputConstraints*******

<p>Q lines. Each line consists the length of the ELCS of the a-th string and b-th string</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><strong><p>5</p><p>dy</p><p>ljq</p><p>lqp</p><p>ws</p><p>jzt</p><p>3</p><p>0 1</p><p>1 2</p><p>0 2</p>Output:</strong><br /><p>0</p><p>1</p><p>0</p></pre>


______________________________________________________
GCJ101C||||||false||||||

<h3>Problem</h3>
<p>Now that you have won Code Jam and been hired by Google as a software engineer, you have been assigned to work on their wildly popular programming contest website.</p>
<p>Google is expecting a lot of participants (<strong>P</strong>) in Code Jam next year, and they want to make sure that the site can support that many people at the same time. During Code Jam 2010 you learned that the site could support at least <strong>L</strong> people at a time without any errors, but you also know that the site can't yet support <strong>P</strong> people.</p>
<p>To determine how many more machines you'll need, you want to know within a factor of <strong>C</strong> how many people the site can support.  This means that there is an integer <strong>a</strong> such that you know the site can support <strong>a</strong> people, but you know the site can't support <strong>a</strong> * <strong>C</strong> people.</p>
<p>You can run a series of <em>load tests</em>, each of which will determine whether the site can support at least <strong>X</strong> people for some integer value of <strong>X</strong> that you choose. If you pick an optimal strategy, choosing what tests to run based on the results of previous tests, how many load tests do you need in the worst case?</p>

______________________________________________________
MRECT1||||||false||||||

<p>&nbsp;</p>
<p>   </p>
<p>&nbsp;</p>
<table style="cursor: default; width: 642px; background-color: #44c23c; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MRECT1/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MRECT1/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p></p>
<p style="text-align: justify;">The government  is planing  to build a walkway  for  tourists  in  the middle of an oak  forest.&nbsp;The  forest can be represented as plane with N special lattice points representing oaks. &nbsp;The  walkway  is  represented  as  a  rectangle  with  sides  parallel  to  the  axes.  If  the  sides &nbsp;of  walkway rectangle intersect any oak lattice points, such oaks need to be axed down.&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">Oaks inside the rectangle do not represent problems and need not be cut down.&nbsp;Ljubo  is  the state secretary of Forestry and an passionate nature  lover, so he ordered  the&nbsp;secretary of Tourism to provide him with a list of P possible rectangle walkways that are attractive&nbsp;enough to draw in tourists.</p>
<p style="text-align: justify;">Ljubo plans to select the walkway that needs the smallest amount of oak trees to be cut down.&nbsp;</p>
<p style="text-align: justify;">Since we also like trees, would you be so kind and write a program that will determine the number&nbsp;of oaks that will be cut down for each walkway. Remember only  the oaks  intersecting  the sides of&nbsp;<span style="white-space: pre;">the rectangle need to be cut. </span></p>
<pre style="text-align: justify;"><h1 style="font-size: 2em; text-align: center;">Input</h1><span style="font-size: small;"><p style="text-align: justify;"><span style="font-family: 'courier new', courier;">The first line of input contains one integer N (1 &le; N &le; 300 000), number of oaks. </span></p><p style="text-align: justify;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">The next N lines contain two integers each X i Y (1 &le; X, Y &le; 10^9) coordinates of oaks. There will be at </span></span></p><p style="text-align: justify;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">most one oak on each lattice point. </span></span></span></p><p style="text-align: justify;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">The next line contains one integer P (1 &le; P &le; 100 000), number of walkways. </span></span></span></p><p style="text-align: justify;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">The next P lines contain four integers each X1, Y1, X2 , Y2 (1 &le; X1 &lt; X2 &le; 10^9, 1 &le; Y1 &lt; Y2 &le; 10^9) &nbsp;</span></span></span></p></span></pre>
<p style="text-align: left;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">coordinates of the lower left (X1, Y1) and upper right (X2, Y2) corner of the rectangle.</span></span></span></span></p>
<p style="text-align: justify;"><span style="font-size: small;"><br /></span></p>
<p style="text-align: center;"><a href="http://tinypic.com" target="_blank"><img src="http://www.spoj.plhttp://i47.tinypic.com/9uq2qx.jpg" border="0" alt="Image and video hosting by TinyPic" /></a></p>
<pre><p>&nbsp;</p><h1 style="font-size: 2em; text-align: center;">Output</h1>
<p><span style="font-size: medium;">Output P integers, one per line, the number of oaks that need to be cut down for each walkway in the 
order they are presented in the input. </span></p><h1 style="text-align: center;"><span style="font-size: large;">Sample</span></h1><span style="font-size: small;">
</span><p><span style="font-size: small;"><span style="font-family: 'courier new', courier;"> input 
 
6 
1 2 
3 2 
2 3 
2 5 
4 4 
6 3 
4 
2 2 4 4 
2 2 6 5 
3 3 5 6 
5 1 6 6 
 
output 
 
3 
4 
0 
1 </span></span></p>
<p> </p>
</pre>


______________________________________________________
BOCOMP||||||false||||||

<p style="text-align: center;"><strong>PROBLEM A</strong></p>
<p style="text-align: center;"><strong>COMPARISON EXPRESSIONS</strong></p>
<p>Automated Compilers Manufacture, is developing a new, inteligent compiler. One of the problems its scientists are facing is how to determine whether two expressions are equivalent. An expression consists of one or more alphabetic lowercase letters, representing <em>variables</em>, separated by addition and multiplication signs, respectively + and *, totally parenthesized. Recursively, an expression is either a variable, or a string of the form (E1 + E2) or (E1 * E2), where E1 and E2 are both expressions. Examples of expressions: a, (a+b), ((a*b)*b). Examples of non-expressions: ab, a*(b+c).</p>
<p>&nbsp;</p>
<p>Two expressions are <em>equivalent </em>if, for every integer assignment to their variables, both expressions assume the same value. For example, ((a+b)*c) and ((b*c)+(c*a)) are equivalent, whereas (a+(b*c)) and ((a+b)*c) are not equivalent. Your task is to write a program that decides whether two given expressions are equivalent.</p>
<p><strong>Input</strong></p>
<p>The input contains several test cases, each case consists of one line, containing two expressions separated by precisely one space. The variables of the expressions are represented by lowercase alphabetic letters. The number of occurrences of variables in an expression is at most 20 (for example, ((a+b)*a) has three occurrences of variables). Thus, an expressions consists of at most 77 characters, including variables, parentheses, plus and multiplication signs. The end of the input is indicated by a line containing only one zero.</p>
<p><strong>Output</strong></p>
<p>For each test case in the input, your program must print a single line, containing one single character, a Y if the two expressions are equivalent, an N otherwise.<strong>&nbsp;</strong></p>
<p><strong>Sample Input&nbsp;&nbsp;&nbsp; </strong></p>
<p>(a+(b*c)) ((a+b)*c)</p>
<p>((a+b)*c) ((c*b)+(a*c))</p>
<p>0<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong></p>
<p><strong>Sample Output</strong></p>
<p>N</p>
<p>Y</p>


______________________________________________________
GCJ101BB||||||true||||||


<p>A flock of chickens are running east along a straight, narrow road. Each one is running with its own constant speed. Whenever a chick catches up to the one in front of it, it has to slow down and follow at the speed of the other chick. You are in a mobile crane behind the flock, chasing the chicks towards the barn at the end of the road. The arm of the crane allows you to pick up any chick momentarily, let the chick behind it pass underneath and place the picked up chick back down. This operation takes no time and can only be performed on a pair of chicks that are immediately next to each other, even if 3 or more chicks are in a row, one after the other.</p>
<p>Given the initial locations (<strong>X<sub>i</sub></strong>) at time 0 and natural speeds (<strong>V<sub>i</sub></strong>) of the chicks, as well as the location of the barn (<strong>B</strong>), what is the minimum number of swaps you need to perform with your crane in order to have at least&nbsp;<strong>K</strong>&nbsp;of the&nbsp;<strong>N</strong>&nbsp;chicks arrive at the barn no later than time&nbsp;<strong>T</strong>?</p>
<p>You may think of the chicks as points moving along a line. Even if 3 or more chicks are at the same location, next to each other, picking up one of them will only let one of the other two pass through. Any swap is instantaneous, which means that you may perform multiple swaps at the same time, but each one will count as a separate swap.</p>

*******InputConstraints*******

<p>The first line of the input gives the number of test cases,&nbsp;<strong>C</strong>.&nbsp;<strong>C</strong>&nbsp;test cases follow. Each test case starts with 4 integers on a line --&nbsp;<strong>N</strong>,&nbsp;<strong>K</strong>,&nbsp;<strong>B</strong>&nbsp;and&nbsp;<strong>T</strong>. The next line contains the&nbsp;<strong>N</strong>different integers&nbsp;<strong>X<sub>i</sub></strong>, in increasing order. The line after that contains the&nbsp;<strong>N</strong>&nbsp;integers&nbsp;<strong>V<sub>i</sub></strong>. All distances are in meters; all speeds are in meters per second; all times are in seconds.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x:&nbsp;<strong>S</strong>", where x is the case number (starting from 1) and&nbsp;<strong>S</strong>&nbsp;is the smallest number of required swaps, or the word "IMPOSSIBLE".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />5 3 10 5<br />0 2 5 6 7<br />1 1 1 1 4<br />5 3 10 5<br />0 2 3 5 7<br />2 1 1 1 4<br />5 3 10 5<br />0 2 3 4 7<br />2 1 1 1 4

<strong>Output:</strong>
Case #1: 0<br />Case #2: 2<br />Case #3: IMPOSSIBLE</pre>


______________________________________________________
BOLESSON||||||false||||||

<p style="text-align: center;"><strong>Problem B</strong></p>
<p style="text-align: center;"><strong>&nbsp;Esperanto Lessons</strong></p>
<p>In a Latin American high school the directors had decided to implement esperanto lessons, because they have observed many of their students started studying the universal language on their own. Because of this, all kids have really different levels before the courses are implemented. The directors decided to implement two levels: basic and advanced. Because of bureaucracy, they cannot put students of different divisions in the same English course. Also, to be fair, the basic and advanced levels have to be equal among all divisions of the school.</p>
<p>Therefore, each division will be partitioned in two subgroups, one for the basic level and one for the advanced level (note that it is possible that a division does not contain any students in one of the levels). To determine the levels, an Esperanto test has been taken by all students of all division, each getting a grade between 0 and 1000, inclusive. To accomplish their mentioned goals, the directors have decided that all students with a score greater than or equal to T will be assigned the advanced level and all students with a score less than T will be assigned the basic level.</p>
<p>However, they cannot decide on the best value of T. They decided to choose the value that better splits all divisions. For this, they have come up with a metric: They want the value of T that minimizes the accumulated difference. That is, the sum of the difference of the number of students in the two groups (basic and advanced) within each division.<strong></strong></p>
<p><strong>Input</strong></p>
<p>Each test case will be given in several lines. The first line contains a single integer N (1&lt;= N&lt;= 10<sup>6</sup>), the number of divisions in the school. 2N lines follow, with each division being described in 2 consecutive lines. The first line of each group of two contain a single integer K (1&lt;=K&lt;=10<sup>6</sup>) the number of people on the division. The second line contains K integers separated by single spaces with the scores of each of the students in the division. The scores will all be between 0 and 1000, inclusive. Total number of students within each test case (that is, the sum of the values of all K lines) will not be greater than 10<sup>6</sup>.<strong></strong></p>
<p><strong>Output</strong></p>
<p>For each test case, output a single line with a single integer representing the value of the accumulated difference if T is chosen optimally.<strong></strong></p>
<p><strong>Sample Input</strong></p>
<p>2</p>
<p>2</p>
<p>1 2</p>
<p>2</p>
<p>3 4</p>
<p>2</p>
<p>2</p>
<p>1 4</p>
<p>2</p>
<p>2 3</p>
<p>3</p>
<p>4</p>
<p>1 10 100 1000</p>
<p>3</p>
<p>5 55 555</p>
<p>5</p>
<p>4 16 64 256 1000</p>
<p>1</p>
<p>4</p>
<p>500 500 500 500</p>
<p>-1<strong></strong></p>
<p><strong>Sample Output</strong></p>
<p>2</p>
<p>0</p>
<p>2</p>
<p>4</p>


______________________________________________________
BOKO||||||false||||||

<p style="text-align: center;"><strong>PROBLEM C</strong></p>
<p style="text-align: center;"><strong>&nbsp;KARAOKE</strong></p>
<p>&ldquo;But I sing awfully!&rdquo; - Gonzo kept saying. &ldquo;Come on! Nobody cares, it just for fun!&rdquo; &ndash; was the common reply of his friends. &ldquo;And we&rsquo;ll give you all our support!&rdquo;. But Gonzo was not convinced. Although he was an accomplished shower singer, he didn&rsquo;t like to do it in public. He had played karaoke games before and his problems were always the same: he could pronounce the words and keep a note very well, but typically it was not the right one, and not at the correct time. That&rsquo;s why in these games his scores were always poor.</p>
<p>But there was something in his pocket to save the day. He had a friend who just came from a programming contest and had given him a pendrive with the solution: A Corrector for Music (ACM), a program that can adjust the notes that the game detects, so that he could achieve the a better score. Gonzo was relieved. For once he wouldn&rsquo;t be the worst singer of the group. Now he had just to use the program properly. The karaoke game displays a screen with several horizontal bars, representing words of the song, at different heights over a time axis. The y-coordinate of each bar indicates the <em>pitch </em>of that word. This is, the note that the game expects to detect from the singer. The game receives the voice of the singer from the microphone, and detects the pitch and the time interval where the note was detected. By comparison with the original song, the game displays a new set of horizontal bars in the same graph of the originals, and calculates the score according to the following rules:</p>
<p>&bull; The singer starts the game with 0 points.</p>
<p>&bull; If the song pitch and the singer pitch coincides, the singer wins 100 points by each second that the coincidence continues.</p>
<p>&bull; If the song pitch and the singer pitch differ, the singer loses the absolute difference between the pitches each second that such difference exists.</p>
<p>&bull; If there is no song pitch, but the singer sings; or inversely, if there is a song pitch, but the singer doesn&rsquo;t make a sound, the singer loses 100 points each second that this happens.</p>
<p>&bull; While there is no song pitch, and no input from the microphone, the score remains the same.</p>
<p>ACM modifies the pitch of all the singer words by adding an integer to all of them. There is no possibility of modifying just an specific part of the singer&rsquo;s notes. The pitch is always a positive number. If by any chance a pitch number drops to zero or less, the game interprets that no sound has been received. The program can also delay the time when the song begins or the time when the singer&rsquo;s voice begins to be read, by adding an integer number of seconds in order to better adjust the intervals. The figure shows an example with the song words (solid lines) and the singer&rsquo;s words (dashed lines).</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../UMSA4/content/ImagenKaraoke.png" alt="Figura1" width="611" height="200" /></p>
<p>You will receive the details of the song that is stored in the game, and the words detected by the microphone. With that information you must determine the maximum possible score that can be obtained by adjusting the pitch of the singer&rsquo;s words, and delaying the song or the voice.</p>
<p><strong>Input</strong></p>
<p>The input contains several test cases. The first line of a test case contains one integer N indicating the number of words that are included in the song (1&lt;=N&lt;=200). Each of the next N lines contain six integers s<sub>i1</sub>, f<sub>i1</sub>, p<sub>i1</sub>, s<sub>i2</sub>, f<sub>i2</sub> and p<sub>i2</sub>. The first three of those integers represent the continuous interval of time [s<sub>i1</sub>, f<sub>i1</sub>), where the word i must be sung with pitch pi1. The following three integers represent the continuous interval [s<sub>i2</sub>, f<sub>i2</sub>), where the word i of the singer is detected with pitch p<sub>i2</sub>. For all cases, 0 &lt; s<sub>i1</sub> &lt; f<sub>i1</sub>, 0 &lt; s<sub>i2</sub> &lt; f<sub>i2</sub>, 20 &lt; p<sub>i1</sub>, p<sub>i2</sub> &lt; 120. The end of input is indicated by a line containing only one zero.</p>
<p><strong>Output</strong></p>
<p>For each test case in the input, your program must print a single line, containing the maximum score that can be achieved in the game by using the ACM program.<strong>&nbsp;</strong></p>
<p><strong>Sample Input</strong></p>
<p>1</p>
<p>1 4 60 6 9 70</p>
<p>1</p>
<p>1 4 60 6 8 70</p>
<p>2</p>
<p>0 2 50 1 3 40</p>
<p>3 6 80 4 7 60</p>
<p>0</p>
<p><strong>Sample Output</strong></p>
<p>300</p>
<p>100</p>
<p>280</p>


______________________________________________________
BOMARBLE||||||false||||||

<p style="text-align: center;"><strong>PROBLEM D</strong></p>
<p style="text-align: center;"><strong>&nbsp;PLAYING WITH MARBLES</strong></p>
<p>Pablo was assigned in his class to construct pentagons inside pentagons with marbles but he doesn&rsquo;t know how many marbles he will need. He knows that for one pentagon he needs 5 marbles</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../UMSA4/content/Imagenmarble.png" alt="Imagen2" width="457" height="150" />&nbsp;</p>
<p>The only way he knows to insert a second pentagon is putting a marble in the middle of each segment and drawing three lines as shown. He puts a marble in the intersecting lines and removes them. To insert a third pentagon inside he first divides all segments in two including the ones that are not needed, and repeats the procedure. Drawing a second pentagon will require 12 marbles. A third pentagon will require 22 marbles. Given the information of how many pentagons will be created, write a program to calculate the number of marbles needed.</p>
<p><strong>Input</strong></p>
<p>The input contains several test cases. Each test case contains one integer N indicating the number of pentagons to create (1&lt;=N&lt;=10<sup>3</sup>). The end of input is indicated by a line containing only one zero.</p>
<p><strong>Output</strong></p>
<p>For each test case in the input, your program must print a single line, containing one single integer, the number of marbles required.<strong>&nbsp;</strong></p>
<p><strong>Sample Input</strong></p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>0</p>
<p><strong>Sample Output</strong></p>
<p>5</p>
<p>12</p>
<p>22</p>


______________________________________________________
BOPERISH||||||false||||||

<p style="text-align: center;"><strong>PROBLEM E</strong></p>
<p style="text-align: center;"><strong>&nbsp;PUBLISH OF PERISH</strong></p>
<p>&ldquo;Publish or perish&rdquo; is the academic life&rsquo;s fundamental motto. It refers to the fact that publishing your work frequently is the only way to guarantee access to research funds, bright students and career advances. But publishing is not enough. It is necessary that your work is <em>referenced </em>(or <em>cited</em>). That is, your papers must be mentioned as source of information in other people&rsquo;s publications, to attest the quality and relevance of your research. The more citations a paper receives from other authors, the more it is considered influential.</p>
<p>In 2005 Jorge E. Hirsch, a physicist at the University of California at San Diego, proposed a way to evaluate the scientific impact of a researcher, based on the citations his or her papers have received. The <em>h-index</em>, as Hirsch&rsquo;s proposal became known, is a number based on the set of a researcher&rsquo;s most cited papers. It is defined in Hirsch&rsquo;s own words as: A scientist has index h if h of his N<sub>p</sub> papers have at least h citations each, and the other (N<sub>p</sub> &minus; h) papers have at most h citations each.</p>
<p>Albert Einstein, for example, published 319 papers in scientific journals and has an h-index equal to 46. It means 46 of his papers have received 46 or more citations each, and all of his remaining 273 papers have 46 citations or less each. Given the information of how many citations each paper from a given researcher has received, write a program to calculate that researcher&rsquo;s h-index.</p>
<p><strong>Input</strong></p>
<p>The input contains several test cases. The first line of a test case contains one integer N indicating the number of papers a researcher has published (1&lt;=N&lt;=10<sup>3</sup>). The second line contains a list of N integers M<sub>i</sub>, separated by one space, representing the number of citations each of the N papers from that author has received (0&lt;=M<sub>i</sub> &lt;=10<sup>3</sup>, for 1&lt;= i &lt;= N). The end of input is indicated by a line containing only one zero.<strong></strong></p>
<p><strong>Output</strong></p>
<p>For each test case in the input, your program must print a single line, containing one single integer, the h-index for the given list of citations.<strong></strong></p>
<p><strong>Sample Input</strong></p>
<p>4</p>
<p>1003 1 200 2</p>
<p>10</p>
<p>1 1 1 0 1 1 0 1 1 1</p>
<p>7</p>
<p>6 5 4 3 2 1 0</p>
<p>0</p>
<p><strong>Sample Output</strong></p>
<p>2</p>
<p>1</p>
<p>3</p>


______________________________________________________
GCJ101AB||||||true||||||


<p>You have a one-dimensional array of <b>N</b> pixels. Each pixel has a value, represented by a number between 0 and 255, inclusive. The distance between two pixels is the absolute difference of their numbers.
<p>You can perform each of the following operations zero or more times:
<ol>
<li>With cost <b>D</b>, delete any pixel, so its original neighbors become neighboring pixels.
<li>With cost <b>I</b>, insert one pixel of any value into any position - either between two existing pixels, or before the first pixel, or after the last pixel.
<li>You can change the value of any pixel. The cost is the absolute difference of the old value of the pixel and the new value of the pixel.
</ol>
<p>
The array is smooth if any neighboring pixels have distance at most <b>M</b>. Find the minimum possible cost of a sequence of operations that makes the array smooth.
<p>
Note: The empty array - the array containing no pixels - is considered to be smooth.


*******InputConstraints*******

<p>The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow, each with two lines. The first line is in the form "<b>D I M N</b>", the next line contains <b>N</b> numbers <b>a<sub>i</sub></b>: the values of the pixels from left to the right.


*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1), and y is the minimum cost to make the input array smooth.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
6 6 2 3
1 7 5
100 1 5 3
1 50 7

<b>Output:</b>
Case #1: 4
Case #2: 17
</pre>



______________________________________________________
CT101CC||||||true||||||


<p>The chess board industry has fallen on hard times and needs your help. It is a little-known fact that chess boards are made from the bark of the extremely rare Croatian Chess Board tree, (<em>Biggus Mobydiccus</em>). The bark of that tree is stripped and unwrapped into a huge rectangular sheet of chess board material. The rectangle is a grid of black and white squares.</p>
<p>Your task is to make as many large square chess boards as possible. A chess board is a piece of the bark that is a square, with sides parallel to the sides of the bark rectangle, with cells colored in the pattern of a chess board (no two cells of the same color can share an edge).</p>
<p>Each time you cut out a chess board, you must choose the largest possible chess board left in the sheet. If there are several such boards, pick the topmost one. If there is still a tie, pick the leftmost one. Continue cutting out chess boards until there is no bark left. You may need to go as far as cutting out 1-by-1 mini chess boards.</p>
<p>Here is an example showing the bark of a Chess Board tree and the first few chess boards that will be cut out of it.</p>
<p><img src="http://www.spoj.plhttp://code.google.com/codejam/contest/images/?image=mcb.png&amp;p=563116&amp;c=619102" alt="" width="400" height="300" /></p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input gives the number of test cases, <strong>T</strong>.  <strong>T</strong> test cases follow.  Each one starts with a line containing the dimensions of the bark grid, <strong>M</strong> and <strong>N</strong>. <strong>N</strong> will always be a multiple of 4. The next <strong>M</strong> lines will each contain an (<strong>N</strong>/4)-character hexadecimal integer, representing a row of the bark grid. The binary representation of these integers will give you a strings of <strong>N</strong> bits, one for each row. Zeros represent black squares; ones represent white squares of the grid. The rows are given in the input from top to bottom. In each row, the most-significant bit of the hexadecimal integer corresponds to the leftmost cell in that row.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x: <strong>K</strong>", where x is the case number (starting from 1) and <strong>K</strong> is the number of different chess board sizes that you can cut out by following the procedure described above. The next <strong>K</strong> lines should contain two integers each -- the size of the chess board (from largest to smallest) and the number of chess boards of that size that you can cut out.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><code> 4<br /> 15 20<br /> 55555<br /> FFAAA<br /> 2AAD5<br /> D552A<br /> 2AAD5<br /> D542A<br /> 4AD4D<br /> B52B2<br /> 52AAD<br /> AD552<br /> AA52D<br /> AAAAA<br /> 5AA55<br /> A55AA<br /> 5AA55<br /> 4 4<br /> 0<br /> 0<br /> 0<br /> 0<br /> 4 4<br /> 3<br /> 3<br /> C<br /> C<br /> 4 4<br /> 6<br /> 9<br /> 9<br /> 6</code><br /><br /><strong>Output:</strong><br /><code> Case #1: 5<br /> 6 2<br /> 4 3<br /> 3 7<br /> 2 15<br /> 1 57<br /> Case #2: 1<br /> 1 16<br /> Case #3: 2<br /> 2 1<br /> 1 12<br /> Case #4: 1<br /> 2 4</code><br /></pre>


______________________________________________________
MBR||||||false||||||

<p>Multiplication of natural numbers in general is a cumbersome operation. In some cases however the product can be obtained by moving the last digit to the front.<br /><br />Example: 179487 * 4 = 717948<br /><br />Of course this property depends on the numbersystem you use, in the above example we used the decimal representation. In base 9 we have a shorter example:<br /><br />17 * 4 = 71 (base 9)<br />as (9 * 1 + 7) * 4 = 7 * 9 + 1</p>
<p><strong>Input</strong><br /><br />The input for your program is a textfile. Each line consists of three numbers separated by a space: the base (&lt;=36) of the number system, the least significant digit of the first factor, and the second factor. This second factor is one digit only hence less than the base. The input file ends with the standard end-of-file marker.</p>
<p>All Numbers in input are greater than 1 and will fit in the standard "int" data type. For base &gt; 10 you can assume the digits to be 'A' ... 'Z'.</p>
<p>Note: Numbers in Input may or may not be expressed using the above digits (refer example)</p>
<p><strong>Output<br /></strong><br />Your program determines for each input line the number of digits of the smallest first factor with the rotamultproperty. The output-file is also a textfile. Each line contains the answer for the corresponding input line.<br /><strong></strong></p>
<p><strong>Example</strong></p>
<p><strong><br />Input</strong><br />10 7 4<br />9 7 4<br />17 14 12<br />17 E C</p>
<p><br /><strong>Output:&nbsp;</strong></p>
<p>6<br />2<br />4<br />4</p>
<p>The Last two inputs are actually the same.</p>


______________________________________________________
BLOCK||||||true||||||


<p>An integer sequence is called <strong>block</strong> iff it is made of two identical and neighboring sequences. For example, (3, 3) and (5, 2, 5, 2) are blocks, while (9, 6, 6, 9) and (1, 1, 1) are not blocks.</p>
<p>An integer sequence is called <strong>non-descreasing</strong> iff its each element (except the last one) is less than or equal to the next one. A sequence containing one or zero elements is also non-decreasing.</p>
<p>You are given an integer sequence and you are to transform it into a <strong>non-decreasing</strong> sequence by multiple using of two types of operations:</p>
<p><strong>Type 1</strong>: removing a block from the sequence (if that block is a consecutive subsequence);</p>
<p><strong>Type 2</strong>: inserting a block into the sequence (so that it becomes a consecutive subsequence).</p>
<p>In all of the test data there will be at least one solution.</p>

*******InputConstraints*******

<p>In the first line there is an integer N (3 &le; N &le; 40), the size of the given sequence.</p>
<p>In the next line there are N space-separated integers (of size 0 - 100), the elements of the sequence (in order).</p>

*******OutputConstraints*******

<p>Output at most 2340 operations.</p>
<p>For each operation, write two or three lines (depending on the type of operation). In the first line write the type of the operation (1 or 2).</p>
<p>If the type of the operation is 1 (removing the block), in the next line write the two numbers: positions in the sequence of the first and the last element of the block you are removing.</p>
<p>If the type of the operation is 2 (adding the block), in the second line write the two numbers: positions in the sequence of the first and the last element of the block after it is added to the sequence. In the next line, write all the elements of the added block (in order). The elements must be integers from the interval [-1000, 1000].</p>
<p>There must be less than 1000 elements in the sequence at any time.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><p>6</p><p>10 20 70 20 70 80</p><br /><strong>Output:</strong>
<p>1 </p><p>2 5</p><p>&nbsp;</p><strong>Input:</strong><pre><p>6</p><p>0 4 0 4 4 0</p><p><strong><br /></strong></p><p><strong>Output:</strong></p><p>2</p><p>3 4</p><p>4 4</p><p>1</p><p>3 8</p></pre>
</pre>


______________________________________________________
TWOPATHS||||||true||||||


<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">In Flatland there are <em>N</em>&nbsp;cities, connected by <em>N-1</em>&nbsp;two-way roads. The cities are numbered from 1 to <em>N</em>. You can get from one city to another moving along the roads.</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">The "Two Paths" company, has won a tender to repair two paths in Flatland. A path is a sequence of different cities, connected sequentially by roads. The company is allowed to choose by itself the paths to repair. The only condition they have to meet is that the two paths shouldn't cross (i.e. shouldn't have common cities).</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">It is known that the profit, the "Two Paths" company will get, equals the product of the lengths of the two paths. Let's consider the length of each road equals 1, and the length of a path equals the amount of roads in it. Find the maximum possible profit for the company.</p>

*******InputConstraints*******

<p>The first line contains an integer <em>N</em> (2 &le;&nbsp;<em>N</em> &le;&nbsp;100000), where <em>N</em>&nbsp;is the amount of cities in the country. The following <em>N-1&nbsp;</em>lines contain the information about the roads. Each line contains a pair of numbers of the cities, connected by the road <em>a</em> and <em>b (1 &le;&nbsp;a, b &le;&nbsp;N)</em></p>

*******OutputConstraints*******

<p>Output the maximum possible profit.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre><strong><span style="font-weight: normal;">4</span></strong></pre>
<pre>1 2</pre>
<pre>2 3</pre>
<pre>3 4</pre>
<pre><strong><br /></strong></pre>
<pre><strong>Output:</strong></pre>
<pre>1</pre>


______________________________________________________
PFOLD||||||false||||||

<div id="doc-contents" style="direction: inherit; margin: 6px;">
<p style="direction: inherit; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; text-align: justify; "><strong><span style="font-size: large;"><span style="font-weight: normal; font-size: small; ">Sedrak likes making various things from paper (and he's very good at that). But after he finishes the job, his table is covered with a lot of useless creased, scrappy paper. Can he use them somehow?</span></span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;">Imagine a thin strip of paper marked with creases at regular intervals, which we can think of as a line segment divided into equal-length subsegments. Each crease point is marked with as&nbsp;<em>mountain, valley,&nbsp;</em>or<em>&nbsp;flat&nbsp;</em>to specify the orientation of the crease (&#8896;,&#8897;,-</span><span style="font-size: small;">).</span>&nbsp;<span style="font-size: small;">For example the input might look as follows:</span></p>
<div id="czon" style="margin-top: 0px; margin-bottom: 0px; direction: inherit; text-align: center;"><img style="height: 39px; width: 349px;" src="http://docs.google.com/File?id=dgb6gzgk_204dd477wd5_b" alt="" /></div>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;">Sedrak thinks, he can use the scrap, if it is possible to fold it using&nbsp;<em>all</em>&nbsp;the marked creases with the specified orientations. The operations he is allowed are as follows.&nbsp;&nbsp;</span><span style="font-size: small;">Given a particular crease (&#8896;</span><span style="font-size: small;">&nbsp;or &#8897;)</span><span style="font-size: small;">,&nbsp;<em>simple fold&nbsp;</em>rotates the portion of the segment to the left of the crease around the portion of the segment to the right of the crease. The rotation is counterclockwise for a mountain fold, and clockwise for a valley fold. When multiple layers of paper come in contact, they become inseparable; in other words, each simple fold must fold all layers of paper. For example, here is how he might fold the example above:</span></p>
<div id="k9ey" style="margin-top: 0px; margin-bottom: 0px; direction: inherit; text-align: center;"><img style="height: 262px; width: 350px;" src="http://docs.google.com/File?id=dgb6gzgk_205htwhbkgc_b" alt="" /></div>
<div style="margin-top: 0px; margin-bottom: 0px; direction: inherit; text-align: justify;"><span style="font-size: small;">Notice that when a subsegment is folded, the crease turns upside-down, inverting &#8896;&harr;&#8897;</span><span style="font-size: small;">. Thus, for a simple fold to be&nbsp;<em>valid,&nbsp;</em>the inversions of the creases to the left must match the creases to the right.</span></div>
<div style="margin-top: 0px; margin-bottom: 0px; direction: inherit; text-align: justify;"><span style="font-size: small;"><br /></span></div>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;">Input</span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;"><br /></span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;">The first line of input file contains the number&nbsp;</span><span style="font-size: small;">&nbsp;1&le;N&le;20 - the number of paper scraps on Sedrak&rsquo;s table. &nbsp;Next&nbsp;<span style="font-size: small;">N&nbsp;</span></span><span style="font-size: small;">lines contain descriptions of paper scraps as a string containing symbols&nbsp;</span><span style="font-family: 'courier new';"><span style="font-size: small;">&lsquo;^&rsquo;, &lsquo;v&rsquo;&nbsp;</span></span><span style="font-size: small;">and</span><span style="font-family: 'courier new';"><span style="font-size: small;">&nbsp;&lsquo;-&lsquo;.&nbsp;</span></span><span style="font-size: small;">The length of a single description does not exceed 10^6.</span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;"><br /></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;">Output</span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;"><br /></span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;">For each description line of the input file, output a single line containing&nbsp;</span><span style="font-family: 'courier new';"><span style="font-size: small;">&ldquo;Yes&rdquo;,</span></span><span style="font-size: small;">&nbsp;if Sedrak can use the scrap, and&nbsp;</span><span style="font-family: 'courier new';"><span style="font-size: small;">&ldquo;No&rdquo;&nbsp;</span></span><span style="font-size: small;">otherwise.</span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;"><br /></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;">Example</span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><strong><span style="font-size: large;"><br /></span></strong></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;">Input:</span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: sylfaen, serif;"><span style="font-size: small;">6</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">-^vv-</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">--v-</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">-vv-</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">^vv^</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">v-v^-^^</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">--^-v^^-v--</span></span></p>
<br />
<p style="direction: inherit; margin: 0px;"><span style="font-size: small;">Output:</span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">Yes</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">Yes</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">No</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">Yes</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">No</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-family: 'courier new';"><span style="font-size: small;">Yes</span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0px;"><span style="font-size: small;"><br />NOTE: The last example corresponds to the scrap in the figure.</span></p>
</div>


______________________________________________________
GOLDG||||||true||||||


<p>Christian Goldbach sent a letter to Leonhard Euler in 1742 in which he made the following conjecture:</p>
<blockquote>
<p><em>"Every even number greater than 4 can be written as the sum of two odd prime numbers"</em></p>
</blockquote>
<p>To find the solutions of Goldbach's conjecture for a given even number <em>n</em> (<em>n </em>&gt; 0), let us define the directed graph GG(<em>n</em>) (the Goldbach Graph of <em>n</em>) as follows:</p>
<p>Nodes are prime numbers <em>p </em>such that 1 &lt; <em>p </em>&lt; <em>n</em>.<br />For each node <em>p</em> there are zero or more outgoing edges, determined by the following rules:<br />If <em>p </em>+ <em>q </em>= <em>n</em> and <em>q </em>= 1, then no outgoing edges are related to <em>p</em>.<br />If <em>p </em>+ <em>q </em>= <em>n</em> and <em>q </em>= <em>p</em><sub>1</sub> <em>p</em><sub>2</sub> <em>p</em><sub>3</sub> .... <em>p</em><sub>k</sub> is the prime factorization of <em>q</em> (asuming <em>q</em> &gt; 1), then for each <em>i </em>= 1..<em>k</em> an edge <em>p</em>-&gt;<em>p<sub>i</sub></em> is added to graph GG(<em>n</em>). Notice that each <em>p<sub>i</sub></em> must be a prime number. Besides, if <em>k </em>= 1 then <em>q</em> is prime and we have a solution to Goldbach's conjecture.</p>
<p><strong>For example:</strong></p>
<ul>
<li>GG(2) is empty (it has zero nodes)</li>
<li>GG(4) has two nodes and one edge.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nodes = {2, 3}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edges = {2-&gt;2}</li>
<li>GG(6) has three nodes and three edges<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nodes = {2, 3, 5}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; edges = {2-&gt;2, 2-&gt;2, 3-&gt;3}<br />Notice that edge 2-&gt;2 appears twice in GG(6) because when <em>p</em> = 2 then <em>q</em> = 4 = 2*2</li>
</ul>
<p>Solutions to Goldbach's conjecture are cycles in graph GG(<em>n</em>) of the following types:</p>
<ul>
<li>Single-node cycles (Type I): a node <em>p</em> with only one outgoing edge <em>p</em>-&gt;<em>p</em>.</li>
<li>Double-node cycles (Type II): two nodes <em>p</em><sub>1</sub> and <em>p</em><sub>2</sub>, such that each one has a unique outgoing edge (<em>p</em><sub>1</sub>-&gt;<em>p</em><sub>2</sub>,<sub> </sub><em>p</em><sub>2</sub>-&gt;<em>p</em><sub>1</sub>).</li>
</ul>
<p>Your task is to inspect the directed graph GG(<em>n</em>) starting from a given node <em>x</em> and searching every node reachable from <em>x </em>for a solution to Goldbach's conjecture.&nbsp; The procedure is successfull if a node belonging to a Type I or Type II cycle is found. In such a case the minimum distance from<em> x</em> to the first node of the cycle found must be reported. Otherwise it should be stated that a solution can not be found.</p>
<p>Your algorithm should take into account that GG(<em>n</em>) can contain other types of cycles besides the ones described here. Otherwise, it can run forever.</p>

*******InputConstraints*******

<p>The input contains several lines each one with a different test case. Each line includes a pair of numbers representing the values <em>n</em> and <em>x</em>. You should assume that <em>n</em> is even and also that 2 &lt;= <em>n </em>&lt;= 1000. Although 0 &lt; <em>x </em>&lt; <em>n</em> is true, do not assume that <em>x</em> is a valid node of GG(<em>n</em>). The last line of the input contains the number 0 (it is not a test case).</p>

*******OutputConstraints*******

<p>For each test case output a single line with one of the following:</p>
<ul>
<li>Solution found at distance <em>D</em>.</li>
<li>Solution not reachable.</li>
<li><em>x</em> is not a node!</li>
</ul>
<p>Where <em>D</em> is the minimum distance from <em>x</em> to the solution found, as described before.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<p style="padding-left: 30px;">2 1<br />4 2<br />6 2<br />6 3<br />12 3<br />12 11<br />14 7<br />20 5<br />38 11<br />50 17<br />540 340<br />540 31<br />540 33<br />0</p>
<pre><strong>Output:</strong></pre>
<p style="padding-left: 30px;">1 is not a node!<br />Solution found at distance 0.<br />Solution not reachable.<br />Solution found at distance 0.<br />Solution not reachable.<br />Solution not reachable.<br />Solution found at distance 0.<br />Solution found at distance 1.<br />Solution found at distance 2.<br />Solution found at distance 1.<br />340 is not a node!<br />Solution found at distance 0.<br />33 is not a node!</p>
<pre>&nbsp;</pre>


______________________________________________________
COEF||||||true||||||


<p>The problem is to calculate the coefficients in expansion of polynomial <em>(x<sub>1</sub>+x<sub>2</sub>+...+x<sub>k</sub>)<sup>n</sup></em>.</p>

*******InputConstraints*******

<p>The input will consist of a set of pairs of lines. The first line of the  pair consists of two integers <em>n</em> and <em>k</em> separated with space (<em>0&lt;K,N&lt;13</em>). This integers define the power of the polynomial and the amount of the variables. The second line in each pair consists of <em>k</em> non-negative integers <em>n<sub>1</sub>, ...,  n<sub>k</sub>,</em> where <em>n<sub>1</sub>+...+n<sub>k</sub>=n</em>.</p>

*******OutputConstraints*******

<p>For each input pair of lines the output line should consist one integer,  the coefficient by the monomial <em>x<sub>1</sub><sup>n1</sup>x<sub>2</sub><sup>n2</sup>...x<sub>k</sub><sup>nk</sup></em> in expansion of the polynomial <em>(x<sub>1</sub>+x<sub>2</sub>+...+x<sub>k</sub>)<sup>n</sup></em>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>2 2<br />1 1<br />2 12<br />1 0 0 0 0 0 0 0 0 0 1 0<br /></pre>
<br /><br /><br /><strong>Output:</strong><br /><br />
<pre>2<br />2<br /></pre>
<br /><br /></pre>


______________________________________________________
CT14E||||||true||||||


<div>
<p>Bob likes to draw camels: with a single hump, two humps, three humps, etc. He draws a camel by connecting points on a coordinate plane. Now he's drawing camels with <span><em>t</em></span> humps,representing them as polylines in the plane. Each polyline consists of <span><em>n</em></span> vertices withcoordinates <span>(<em>x</em><sub>1</sub>,&thinsp;<em>y</em><sub>1</sub>)</span>, <span>(<em>x</em><sub>2</sub>,&thinsp;<em>y</em><sub>2</sub>)</span>, ..., <span>(<em>x</em><sub><em>n</em></sub>,&thinsp;<em>y</em><sub><em>n</em></sub>)</span>. The first vertex has a coordinate <span><em>x</em><sub>1</sub>&thinsp;=&thinsp;1</span>, the second&mdash; <span><em>x</em><sub>2</sub>&thinsp;=&thinsp;2</span>, etc. Coordinates <span><em>y</em><sub><em>i</em></sub></span> might be any, but should satisfy the following conditions:</p>
<ul>
<li> there should be <span><em>t</em></span> humps precisely, i.e. such indexes <span><em>j</em></span> (<span>2&thinsp;&le;&thinsp;<em>j</em>&thinsp;&le;&thinsp;<em>n</em>&thinsp;-&thinsp;1</span>), so that <span><em>y</em><sub><em>j</em>&thinsp;-&thinsp;1</sub>&thinsp;&lt;&thinsp;<em>y</em><sub><em>j</em></sub>&thinsp;&gt;&thinsp;<em>y</em><sub><em>j</em>&thinsp;+&thinsp;1</sub></span>, </li>
<li> there should be precisely <span><em>t</em>&thinsp;-&thinsp;1</span> such indexes <span><em>j</em></span> (<span>2&thinsp;&le;&thinsp;<em>j</em>&thinsp;&le;&thinsp;<em>n</em>&thinsp;-&thinsp;1</span>), so that <span><em>y</em><sub><em>j</em>&thinsp;-&thinsp;1</sub>&thinsp;&gt;&thinsp;<em>y</em><sub><em>j</em></sub>&thinsp;&lt;&thinsp;<em>y</em><sub><em>j</em>&thinsp;+&thinsp;1</sub></span>, </li>
<li> no segment of a polyline should be parallel to the <span><em>Ox</em></span>-axis, </li>
<li> all <span><em>y</em><sub><em>i</em></sub></span> are integers between 1 and 4. </li>
</ul>
<p>For a series of his drawings of camels with <span><em>t</em></span> humps Bob wants to buy a notebook, but he doesn'tknow how many pages he will need. Output the amount of different polylines that can be drawn to represent camels with <span><em>t</em></span> humps for a given number <span><em>n</em></span>.</p>
</div>

*******InputConstraints*******

<p>The first line of input contains the number of testcases , Ntest.</p>
<p>Each testcase contains a pair of integers <span><em>n</em></span> and <span><em>t</em></span> (<span>3&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le;&thinsp;20</span>, <span>1&thinsp;&le;&thinsp;<em>t</em>&thinsp;&le;&thinsp;10</span>).</p>

*******OutputConstraints*******

<p>For each testcase ,output the required amount of camels with <span><em>t</em></span> humps.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />6 1<br /><strong>Output:</strong><br />6<br /><br /><strong>Note</strong><div><div>In the first sample test sequences of <span><em>y</em></span>-coordinates for six camels are: 123421, 123431,<br />&nbsp;123432, 124321, 134321 &#1080; 234321 (each digit corresponds to one value of <span><em>y</em><sub><em>i</em></sub></span>).</div><br /><br /></div></pre>


______________________________________________________
CHEFMAY||||||true||||||


<p>There are n points with integer coordinates. We can form different quadrangles out of them by taking four different points and connecting them with lines. Let&#8217;s call a quadrangle ABCD nice if and only if:</p>
<ul>
<li>Ax > 0 and Ay > 0;</li>
<li>Bx > 0 and By < 0;</li>
<li>Cx < 0 and Cy < 0;</li>
<li>Dx < 0 and Dy > 0;</li>
<li>ABCD has an integer area.</li>
</ul><br />
<p>Your task is to count all different nice quadrangles that can be formed on the given points.</p>


*******InputConstraints*******

<p>The first line of input file contains number t &#8211; the number of test cases. Then the description of each test case follows. The first line of each test case contains number n &#8211; the number of points. Then n lines follow each consisting of two integers x, y &#8211; the coordinates of a point. No two points in the same test case coincide.


*******OutputConstraints*******

<p>For each test case print the number of nice quadrangles that can be formed using given points.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
6
1 1
2 2
-1 -1
-2 2
2 -1
-3 -4

<b>Output:</b>
2

</pre>



______________________________________________________
SEQFUN||||||true||||||


<p>We define a sequence {x}: {x}={x_0, x_1, &hellip; , x_n-1 } where x_i is a interger.</p>
<p>We have a function f: {x}-&gt;{x&rsquo;} where {x} is a finite sequence.</p>
<p>After we have a finite sequence {x}, we can get f({x}) follow these rules :</p>
<p>&nbsp;</p>
<p>(1). Remove all 0 in x : a 0 b 0 c d 0 e f 0 g =&gt; a b c d e f g</p>
<p>(2). Turn 1 into 100 and -1 into -100 : a 1 b 1 -1 c d e f g =&gt; a 100 b 100 -100 c d e f g</p>
<p>(3). Add all 2^k (k&gt;1) at the end of the sequence : a 2 b 8 c d e 1024 f g =&gt; a 2 b 8 c d e 1024 f g 2 8 1024</p>
<p>(4). Add any positive odd prime x at the end of the sequence x-1 times: a 3 b c 7 d e f 5 g =&gt; a 3 b c 7 d e f 5 g 3 3 7 7 7 7 7 7 5 5 5 5</p>
<p>(5). For any positive composite number (not 2^k, k&gt;1 ), we just keep it once: a 6 b 6 c d 6 e 4 4 f g =&gt; a 6 b c d e 4 4 f g</p>
<p>(6). Keep any t (t&lt;-1) in the sequence.</p>
<p>For a example:</p>
<p>{x}={-5 1 0 2 9 16 7 5 3 2 9 9 -1}</p>
<p>f({x})={-5 100 2 9 16 7 5 3 2 -100 2 2 16 7 7 7 7 7 7 5 5 5 5 3 3}</p>
<p>&nbsp;</p>
<p>We define g({x}) is the sum of all the element in sequence x.</p>
<p>We define h({x}) = g(f({x}))-g({x}).</p>
<p>&nbsp;</p>
<p>A consecutive sequence of x is a sequence {x_i, x_i+1, x_i+2, &hellip; , x_j} where 0&lt;=i&lt;=j&lt;n.</p>
<p>&nbsp;</p>
<p>Now I will give you a sequence {x} .</p>
<p>I want to ask you the maximal h({y}) where {y} is a consecutive sequence of {x}.</p>

*******InputConstraints*******

<p>One line consists one interger N, the length of {x}. &nbsp; (N&lt;=10^5, |x_i|&lt;=10000)</p>
<p>Next N lines, each line consists one interger.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>The maximal h({y}) where {y} is a consecutive sequence of {x}. ( |h({y})|&lt;=2^63-1 )</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>5</p><p>1</p><p>2</p><p>6</p><p>6</p><p>3</p><strong>Output:</strong></pre>
<pre><strong>&nbsp;</strong>101
</pre>


______________________________________________________
HC||||||false||||||

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size: medium;">&nbsp; <span style="font-family: Times New Roman;"><span style="color: blue;">Happy Coins</span></span></span></p>
<p><span style="font-size: medium;">A line of coins are given, some belongs to lxh while others belongs to hhb. Now the two guys are about to play a game. In every round of game, each player can select any two consecutive coins and change them into one coin, if the two coins belongs to the same person, the new one will be gained to hhb, or else it will belongs to lxh. The two guys take turns playing this game, lxh always play first. The game runs round by round. You can easily make sense that we will get only one coin at the end of game. Now the question is, suppose the two players perform optimally in the game, which person does the final coin belongs to? </span></p>
<p><span style="font-size: medium;"><span lang="en">

______________________________________________________
DINONUM||||||true||||||


<p align="justify">Recents archaeological discoveries of researchers from the University of Alberta in Canada showed that a strange  sequence of numbers were found on the walls of the pyramids of Egypt, the ruins of Macchu Picchu and the stones  of Stonehenge. Intrigued by the apparent coincidence researchers triggered the Department of Mathematics to  decipher what were special about that sequence or numbers.<br /><br /> The discovery was startling. All numbers were generated by matrices of Dinostratus. Dinostratus was a famous Greek mathematician who lived from 390 to 320 BC and worked in major geometry problems like squaring the circle. Dinostratus studied matrices M of size 3 x 3 formed by nine distinct integers with the property that for  every position (i, j), i = 1 ,..., 3, j = 1 ,..., 3 of matrix, the element m<sub>i,j</sub> is a multiple of  its neighbors m<sub>i-1,j</sub>, m<sub>i-1,j-1</sub> and m<sub>i,j-1</sub> (if they exist). In his honor, we say that n is a <strong>Dinostratus number</strong> if exist a matrix M with the property above such that m<sub>3,3</sub> = n.<br /><br /> See an example with n = 36.</p>
<pre>1   2   4<br />3   6   12<br />9   18  36<br /></pre>
<p>The relationship between the Dinostratus numbers, the pyramids of Egypt, Stonehenge and the stones of the ruins  of Machu Picchu still remains a great mystery. But researchers in Alberta are willing to study these magic numbers. Your task  is to make a program that receives an integer n and checks whether this is a Dinostratus number.</p>

*******InputConstraints*******

<p>The input consists of several instances. Each instance is given by a line containing an integer n (1 &lt;= n &lt;= 1048576). The input ends with end of file.</p>

*******OutputConstraints*******

<p>For each instance, you must print an identifier Instance k, where k is the number of the current instance.  On the next line print <em>yes</em> if n is a Dinostratus number otherwise print <em>no</em>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />36<br />37<br />38<br /><br /><strong>Output:</strong><br />Instance 1<br />yes<br /><br />Instance 2<br />no<br /><br />Instance 3<br />no<br /></pre>
<p>&nbsp;</p>


______________________________________________________
GSS7||||||true||||||


<p>Given a tree with N ( <em>N&lt;=100000</em> ) nodes. Each node has a interger value x_i (<em> |x_i|&lt;=10000 </em>).</p>
<p>You have to apply Q ( <em>Q&lt;=100000</em> ) operations:</p>
<p>1. <em>1 a b </em>: answer the maximum contiguous sum (maybe empty,will always larger than or equal to 0 )&nbsp;from the path <em>a-&gt;b</em> ( inclusive ).</p>
<p>2. <em>2 a b c</em> : change all value in the path <em>a-&gt;b</em> ( inclusive ) to c.</p>

*******InputConstraints*******

<p>first line consists one interger N.</p>
<p>next line consists N interger x_i.</p>
<p>next N-1 line , each consists two interger u,v , means that node u and node v are connected</p>
<p>next line consists 1 interger Q.</p>
<p>next Q line : <em>1 a b </em>or <em>2 a b c</em> .</p>

*******OutputConstraints*******

<p>For each query, output one line the maximum contiguous sum.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5</pre>
<pre>-3 -2 1 2 3</pre>
<pre>1 2</pre>
<pre>2 3</pre>
<pre>1 4</pre>
<pre>4 5</pre>
<pre>3</pre>
<pre>1 2 5</pre>
<pre>2 3 4 2</pre>
<pre>1 2 5

<strong>Output:</strong>
5
</pre>
<pre>9</pre>


______________________________________________________
ABSURD||||||true||||||


<p>Surely you know that supermarkets, shopping centres, and indeed all kind of vendors seem to have fallen in love with the digit <em>9</em>, for that digit occurs most often in the price of a product, preferably at the least significant positions. Your favourite chocolate bar might cost <em>99</em> cents, just right to be able to advertise that it costs less than <em>1</em> euro. Your new bicycle might cost <em>499.98</em> euros, which, of course, is less than <em>500</em> euros.</p>
<p>While such comparisons are mathematically sound, they seem to impose a certain amount of stupidity on the customer. Moreover, who wants to carry home those annoying small coins you get back as change?</p>
<p>Fortunately, the FIFA has not adopted this weird pricing scheme: a ticket for the final in the first category for example costs <em>900</em> dollar, in the second category <em>600</em> dollar and in the third category <em>400</em> dollar. These prices may only be regarded weird for other reasons.</p>
<p>We want to distinguish between <strong>absurd</strong> prices like <em>99</em> cents, <em>499.98</em> euros, etc. and normal prices. To measure the absurdity of a positive integer, do the following:</p>
<ul>
<li>Eliminate all trailing zeros, i.e., those in the least significant positions, from the number. You now have a positive integer, say <em>x</em>, with a non-zero digit <em>d</em> at its end.</li>
<li>Count the number of digits, say <em>a</em>, of the number <em>x</em>.</li>
<li>if <em>d=5</em> the absurdity of the number is <em>2 * a - 1</em></li>
<li>otherwise, the absurdity of the number is <em>2 * a</em></li>
</ul>
<p>For example, the absurdity of <em>350</em> is <em>3</em> and the absurdity of <em>900900</em> is <em>8</em>. Using the measure of absurdity, we can define what we call an absurd price: A price <em>c</em> is absurd if and only if the closed interval [<em>0.95 * c,1.05 * c</em>] contains an integer <em>e</em> such that the absurdity of <em>e</em> is less than the absurdity of <em>c</em>. Given a price in cents, go ahead and tell whether it is absurd!</p>

*******InputConstraints*******

<p>The first line of the input consists of the number <em>t</em> of test cases to follow. Each test case is specified by one line containing an integer <em>c</em>. You may assume that <em>1 &le; c &le; 10<sup>9</sup></em>.</p>

*******OutputConstraints*******

<p>For each test case output if <em>c</em> is absurd or not. Adhere to the format shown in the sample output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
99
49998
90000
970000000

<strong>Output:</strong>
absurd
absurd
not absurd
absurd
</pre>


______________________________________________________
CHEATING||||||true||||||


<p>For the organizers of a soccer world championship the final draw is a very delicate job. It determines the compositions of the groups for the first stage of the tournament and indirectly also the possible matches in the knockout stage. The importance lies in the fact that the success of a team might depend on the opponents it faces - and, maybe, even the winner of the tournament.</p>
<p>The final draw is often subject to accusations of fraud. Some teams tend to think that their group is stronger than others and therefore complain they were cheated. Your job is to provide some facts that can help convince them of the opposite.</p>
<p>The draw is somewhat complicated due to a number of fairness considerations. The objective is not to assign too many good teams to the same group. Also teams from the same confederation should be drawn into different groups. This is ensured by the following rules.</p>
<ul>
<li>There are <em>g</em> groups with <em>m</em> members each. </li>
<li>The hosting nation will be seeded first in the first group.</li>
<li><em>g-1</em> selected teams will be seeded first in the remaining groups.</li>
<li>The remaining positions are drawn from <em>m-1</em> pots, one team from each pot per group.</li>
<li>You will be told which teams belong to the same confederation and you have to ensure that no two teams of the same confederation are in the same group. For confederations with more than <em>g</em> teams this is impossible, so for these confederations you can ignore this rule.</li>
<li>You may assume that for confederations with at most <em>g</em> teams, all teams of the confederation which are not seeded are in the same pot.</li>
<li>Note that each team belongs to exactly one confederation and each team is either seeded or contained in exactly one pot.</li>
</ul>
<p>We want to compute the average strength of the opponents of a given team. The strengths of the teams will be given in the input. Now you have to compute the average of the sum of the strengths of the other teams in the group of the given team. The average is evaluated over all correct draws which are assumed to have the same likelihood.</p>

*******InputConstraints*******

<p>The input starts with the number of test cases. Each test case is described as follows.</p>
<p>The first line contains the number of groups <em>g &le; 8</em> and the number of teams per group <em>m &le; 4</em>. A line with <em>g * m</em> integers follows. The <em>i</em>-th integer <em>0 &le; s<sub>i</sub> &le; 10000</em> denotes the strength of the <em>i</em>-th team.</p>
<p>The team indices start from <em>0</em>. By convention, the hosting nation is assigned number <em>0</em>. The next line lists the <em>g-1</em> seeded teams by their numbers. Each of the <em>m-1</em> following lines contains <em>g</em> teams which are allocated to the same pot.</p>
<p>The next line specifies the number of confederations <em>c</em>. <em>c</em> lines follow which describe one confederation each. Each confederation description starts with the number of teams <em>n<sub>i</sub> &gt; 0</em>. Then <em>n<sub>i</sub></em> numbers with the team indices follow.</p>
<p>The last line contains the number <em>t</em> of the team, whose average group strength has to be evaluated.</p>

*******OutputConstraints*******

<p>Output the average of the sum of strengths of the opponents of team <em>t</em> in the group stage with 3 decimals on a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2 3
1 2 3 4 5 6
1
2 5
3 4
1
6 0 1 2 3 4 5
5
2 3
1 2 3 4 5 6
1
2 5
3 4
2
2 0 5
4 1 2 3 4
5

<strong>Output:</strong>
6.000
6.500
</pre>


______________________________________________________
CATTACK||||||true||||||


<p>At our soccer training camp, we have rehearsed a lot of motion sequences. In case we are defending, all players except the two strikers of our team are in our half. As soon as we are getting the ball, we are starting a counterattack with a long-range pass to one of our strikers. They know each others motion sequences and may pass the ball to the other striker at fixed points.</p>
<p>There are a lot of decisions: the defender has to select the striker to pass the ball to, and the ball possessing striker has to decide at each of the <em>n</em> fixed points if to pass to the other striker or to run and to dribble. At the last position in the motion sequence of a striker he shoots on the goal. Each of the four actions (long-range pass, dribble, pass, and shoot on the goal) may fail (e.g.  because of a defending player of the opposite team) - so our coach has assigned difficulties.</p>
<p>What is the minimal difficulty of a goal assuming your team plays optimally?</p>
<p align="center"><img src="http://www.spoj.pl../../../content/ak15:counterattack.png" alt="example image" width="50%" height="50%" /></p>
<p>In the example depicted in the picture, the defending player (cross in left half) passes the ball to one of the strikers (crosses in right half). The strikers move along fixed paths simultaneously. At each of the fixed positions (circles), the ball possessing striker either dribbles with the ball or passes to the other striker. At the last position, he shoots on the goal.</p>

*******InputConstraints*******

<p>The first line of the input consists of the number of test cases <em>c</em> that follow (<em>1 &le; c &le; 100</em>). Each test case consists of five lines. The first line of each test case contains <em>n</em> (<em>2 &le; n &le; 100000</em>), the number of fixed points in each strikers motion sequence. It is followed by <em>l<sub>0</sub></em>, <em>l<sub>1</sub></em>, <em>s<sub>0</sub></em> and <em>s<sub>1</sub></em>, the difficulty of a long-range pass to the corresponding striker and the difficulties of the shoots of the strikers. Each striker is described in two lines (first striker <em>0</em>, then striker <em>1</em>): The first line contains <em>n-1</em> difficulties, where the <em>i</em>th number stands for passing from point <em>i</em> to the other player at point <em>i + 1</em>. The second line also contains <em>n-1</em> difficulties, where the <em>i</em>th number stands for dribbling from point <em>i</em> to point <em>i+1</em>. You may safely assume that each difficulty is a non-negative integer less than <em>1000</em>.</p>

*******OutputConstraints*******

<p>For each test case in the input, print one line containing the minimal difficulty of a move sequence leading to a goal.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 3 5 7 999
9 13
60 5
22 6
5 5
5 3 5 7 999
9 13 8 4
60 5 17 13
22 6 15 11
5 5 18 29

<strong>Output:</strong>
23
42
</pre>


______________________________________________________
CAPCITY||||||false||||||

<p><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'Times New Roman'; font-size: 16px;"> </span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-family: 'liberation serif';"><span style="font-size: small;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">T</span></span></span></span></span></span></span></span></span></span></span></span></span><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">here are N cities in Flatland connected with M unidirectional roads. The cities are numbered from 1 to N. The Flat Circle of Flatland (FCF) wants to set up a new capital city for his kingdom. For security reasons,&nbsp;</span></span></span></span></span></span></span><span style="font-family: 'liberation serif';"><em><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">the capital must be reachable from all other cities</span></span></span></span></span></span></em></span><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&nbsp;of Flatland. FCF needs the list of&nbsp;</span></span></span></span></span></span></span><span style="font-family: 'liberation serif';"><em><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">all&nbsp;</span></span></span></span></span></span></em></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">candidate cities. You are the chief programmer at FACM (Flat Association for Computing Machinery) responsible for providing the list to FCF as soon as possible.</span></span></span></span></span></span></span></span></p>
<p style="direction: inherit; text-align: justify; margin: 0pt;"><strong><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">Input</span></span></span></span></span></strong></p>
<p style="text-align: justify; margin: 0pt;"><strong><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&nbsp;</span></span></span></span></span></span></strong></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">The first line of the input file contains two integers&#1417; 1</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">N</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;100,000</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&nbsp;and 1</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">M</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;200,000</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">. Each of the following M lines contains two integers 1</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">A, B</span></span></span></span></span></span></span></span><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&le;N denoting a road from A to B.</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;"><br /></span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><strong><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">Output</span></span></span></span></span></strong><strong><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">&nbsp;</span></span></span></span></span></strong></p>
<p style="text-align: justify; margin: 0pt;"><strong><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;"><br /></span></span></span></span></span></strong></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">The output file contains an integer denoting the number of candidate cities followed by the list of candidate cities in increasing order.</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;"><br /></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-style: normal;"><span style="font-family: 'liberation serif1';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-family: 'courier new', courier;"><strong><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: verdana, geneva;">Example</span></span></span></span></strong></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><br /></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">Input:</span></span></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;"><br /></span></span></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">4 4</span></span></span></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">1 2</span></span></span></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">3 2</span></span></span></span></span></span></span></span></p>
<p style="margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">4 3</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">2 1</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;"><br /></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">Output:</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;"><br /></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">2</span></span></span></span></span></span></span></span></p>
<p style="text-align: justify; margin: 0pt;"><span style="font-family: 'courier 10 pitch';"><span style="font-size: medium;"><span style="font-size: medium;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-size: small;"><span style="font-family: 'courier new', courier;">1 2</span></span></span></span></span></span></span></span></p>


______________________________________________________
ASSIGN5||||||true||||||


<p>New term is coming. Our monitor <a href="../../../users/cathyyin/">Cathy Yin</a> is going to make necessary preparations. Now she has <em>m</em> jobs to do, and <em>n</em> classmates are going to help her. Each job requires some classmates working on it for certain time, say the <em>i</em>-th classmate must work on the <em>j</em>-th job for <em>A<sub>ij</sub></em> minutes. As an OIer of great responsibility she wishes to finish all jobs as soon as possible. But a classmate can do only one job at a time, and two classmates can <strong>not</strong> do the same job at the same moment. For example, to decorate the classroom, Alpha must work on it for 3 minutes <strong>plus</strong> Beta works on it for 4 minutes, then one possible assignment will be ABABBAB, taking 7 minutes in total.</p>
<p>Now she is to make a detailed schedule specifying who is doing what at each moment. Jobs are independent, i.e. they may be done in arbitrary order. Also for each job anyone can do it for arbitrarily long, but not longer than the required time <em>A<sub>ij</sub></em> Anyone can be free at any time. Time for certain classmate doing certain work need <strong>not</strong> be consecutive.</p>
<p>As her friend, you are to help her to work out the schedule minimizing the time needed. (The time of this assignment itself does not count!)</p>

*******InputConstraints*******

<p>First line of the input contains two positive integers <em>m</em>, <em>n</em> (1 &lt;= <em>m</em>, <em>n</em> &lt;= 2000), number of jobs and classmates.</p>
<p><em>m</em> lines follow, each descibing a job. <em>i</em>-th line contains <em>n</em> non-nagative integers (&lt;= 10<sup>6</sup>), where the <em>j</em>-th number is A<sub>ij</sub>, meaning that the <em>j</em>-th classmate has to work on the <em>i</em>-th job for A<sub>ij</sub> minutes as descibed above.</p>

*******OutputConstraints*******

<p>First line contains single integer T, minimum time needed. Next line contains <em>n</em> non-negative intergers (&lt;= <em>m</em>), giving one possible schedule for the first minute, where the <em>i</em>-th number specifying the job for the <em>i</em>-th classmate to do, and 0 denotes that the corresponding classmate is free.</p>
<p>If there are multiple solutions, any one is accepted.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 2<br />2 5<br />5 1<br /><br /><strong>Output:</strong><br />7<br />1 0</pre>
<h4>Explanation:</h4>
<p>Two jobs are assigned to two classmates, say Lambda and Mu. To tidy up the classroom Lambda needs to work for 2 minutes and Mu 5 minutes; and to move desks for new comers Lambda needs 5 minutes and Mu 1 minute.<br /><br />One optimal schedule is:</p>
<table style="width: 200px;" border="0">
<tbody>
<tr>
<td>T</td>
<td>Lambda</td>
<td>Mu</td>
</tr>
<tr>
<td>0</td>
<td>Tidy</td>
<td>Free</td>
</tr>
<tr>
<td>1</td>
<td>Move</td>
<td>Tidy</td>
</tr>
<tr>
<td>2</td>
<td>T</td>
<td>M</td>
</tr>
<tr>
<td>3</td>
<td>M</td>
<td>T</td>
</tr>
<tr>
<td>4</td>
<td>M</td>
<td>T</td>
</tr>
<tr>
<td>5</td>
<td>M</td>
<td>T</td>
</tr>
<tr>
<td>6</td>
<td>M</td>
<td>T</td>
</tr>
</tbody>
</table>
<p>7 minutes in total. It is obvious that it is impossible to finish it in less than 7 minutes.</p>


______________________________________________________
CFJUN21||||||true||||||


<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">Last year Bob earned by selling memory sticks. During each of&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;days of his work one of the two following events took place:</p>
<ul style="list-style-type: disc; list-style-position: inside; list-style-image: initial; padding: 0px; margin: 0.5em;">
<li style="padding: 0px; margin: 0px;">A customer came to Bob and asked to sell him a&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2<sup><em>x</em></sup></span>&nbsp;MB memory stick. If Bob had such a stick, he sold it and got&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2<sup><em>x</em></sup></span>berllars.</li>
<li style="padding: 0px; margin: 0px;">Bob won some programming competition and got a&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2<sup><em>x</em></sup></span>&nbsp;MB memory stick as a prize. Bob could choose whether to present this memory stick to one of his friends, or keep it.</li>
</ul>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">&nbsp;</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">Bob never kept more than one memory stick, as he feared to mix up their capacities, and deceive a customer unintentionally. . Now, knowing all the customers' demands and all the prizes won at programming competitions during the last&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;days, Bob wants to know, how much money he could have earned, if he had acted optimally.</p>

*******InputConstraints*******

<p>The first input line contains number&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;(<span style="font-size: 18px; font-family: 'times new roman';">1&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le;&thinsp;5000</span>) &mdash; amount of Bob's working days. The following&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;lines contain the description of the days. Line&nbsp;<span style="font-size: 15px; font-family: 'courier new';">sell x</span>&nbsp;stands for a day when a customer came to Bob to buy a&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2<sup><em>x</em></sup></span>&nbsp;MB memory stick (<span style="font-size: 18px; font-family: 'times new roman';">0&thinsp;&le;&thinsp;<em>x</em>&thinsp;&le;&thinsp;2000</span>). It's guaranteed that for each&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>x</em></span>&nbsp;there is not more than one line&nbsp;<span style="font-size: 15px; font-family: 'courier new';">sell x</span>. Line&nbsp;<span style="font-size: 15px; font-family: 'courier new';">win x</span>&nbsp;stands for a day when Bob won a&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2<sup><em>x</em></sup></span>&nbsp;MB memory stick (<span style="font-size: 18px; font-family: 'times new roman';">0&thinsp;&le;&thinsp;<em>x</em>&thinsp;&le;&thinsp;2000</span>).</p>

*******OutputConstraints*******

<p>Output the maximum possible earnings for Bob in berllars, that he would have had if he had known all the events beforehand. Don't forget, please, that Bob can't keep more than one memory stick at a time.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre style="font-size: 15px; line-height: 1.25em; background-color: #efefef; padding: 0.25em; margin: 0px;">7<br />win 10<br />win 5<br />win 3<br />sell 5<br />sell 3<br />win 10<br />sell 10</pre>
<br /><strong>Output:</strong> 1056</pre>


______________________________________________________
CTFLAG||||||true||||||


<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">According to a new ISO standard, a flag of every country should have, strangely enough, a chequered field&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em>&thinsp;&times;&thinsp;<em>m</em></span>, each square should be wholly painted one of 26 colours. The following restrictions are set:</p>
<ul style="list-style-type: disc; list-style-position: inside; list-style-image: initial; padding: 0px; margin: 0.5em;">
<li style="padding: 0px; margin: 0px;">In each row at most two different colours can be used.</li>
<li style="padding: 0px; margin: 0px;">No two adjacent squares can be painted the same colour.</li>
</ul>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">&nbsp;</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">Pay attention, please, that in one column more than two different colours can be used.</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">Berland's government took a decision to introduce changes into their country's flag in accordance with the new standard, at the same time they want these changes to be minimal. By the given description of Berland's flag you should find out the minimum amount of squares that need to be painted different colour to make the flag meet the new ISO standard. You are as well to build one of the possible variants of the new Berland's flag.</p>

*******InputConstraints*******

<p>The first input line contains 2 integers&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;and&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>m</em></span>&nbsp;(<span style="font-size: 18px; font-family: 'times new roman';">1&thinsp;&le;&thinsp;<em>n</em>,&thinsp;<em>m</em>&thinsp;&le;&thinsp;500</span>) &mdash; amount of rows and columns in Berland's flag respectively. Then there follows the flag's description: each of the following&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;lines contains&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>m</em></span>&nbsp;characters. Each character is a letter from&nbsp;<span style="font-size: 15px; font-family: 'courier new';">a</span>&nbsp;to&nbsp;<span style="font-size: 15px; font-family: 'courier new';">z</span>, and it stands for the colour of the corresponding square.</p>

*******OutputConstraints*******

<p>Output the minimum amount of squares that need to be repainted to make the flag meet the new ISO standard</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-size: 15px; line-height: 1.25em; background-color: #efefef; padding: 0.25em; margin: 0px;">3 4<br />aaaa<br />bbbb<br />cccc</pre>
<strong>Output:</strong> 6</pre>


______________________________________________________
FPLAN||||||true||||||


<p>World Soccer Championship is coming soon and coach Yogi wants to prepare his team as well as possible. So he made up a strategy field plan for every player of the team. One plan describes a number of possible locations for the player on the field. Moreover, if Yogi wants the player to be able to move from one location <em>A</em> to another location <em>B</em> then the plan specifies the ordered pair <em>(A,B)</em>. He is sure that his team will win if the players run over the field from one location to another using only moves of the plan.</p>
<p><img src="http://www.spoj.pl../../../content/ak15:fieldplan.png" alt="example image" width="50%" height="50%" /></p>
<p>Yogi tells every player to follow his plan and to start from a location that reaches every other location on the plan (by possibly multiple moves). However, it is quite difficult for some soccer players, simple minded as they are, to find a suitable starting location. Can you help every player to figure out the set of possible start locations?</p>

*******InputConstraints*******

<p>The first line gives the number of field plans. The input contains at most eleven field plans (what else?). Every plan starts with a line of two integers <em>N</em> and <em>M</em>, with <em>1 &le; N &le; 100000</em> and <em>1 &le; M &le; 100000</em>, giving the number of locations and the number of moves. In the following <em>M</em> lines a plan specifies moves <em>(A,B)</em> by two white space separated integers <em>0 &le; A,B &lt; N</em>. The plans are separated by a blank line.</p>

*******OutputConstraints*******

<p>For every plan print out all possible starting locations, sorted increasingly and one per line. If there are no possible locations to start, print <strong>Confused</strong>. Print a blank line after each plan output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4 4
0 1
1 2
2 0
2 3

4 4
0 3
1 0
2 0
2 3

<strong>Output:</strong>
0
1
2

Confused

</pre>


______________________________________________________
HACKING||||||true||||||


<p>A coach of one of the soccer world finals teams (lets call him Hugo Hacker) wants to find out secret information about an opposing team before the game. The coach of the opposing team has a website with public information about his team. Hugo suspects that also secret information is stored on the computer which hosts the website.</p>
<p>The website contains a form which allows to search for key words and returns a chunk of a text file which contains the key word. Hugo has found out that by entering words which cannot be found in the documents publicly available, he can exploit a bug in the search and get access to other files on the computer. He already knows the publicly available documents. However the search box has a restriction on the maximum length of a word and the characters which can be entered. Can you tell him a word which can be entered in the search box and which does not occur as a substring in the documents?</p>

*******InputConstraints*******

<p>The first line of the input consists of the number of test cases which are to follow. Each test case consists of two lines: in the first line there are three integers <em>n</em> (<em>1 &le; n &le; 10000</em>), <em>m</em> (<em>1 &le; m &le; 100</em>) and <em>k</em> (<em>1 &le; k &le; 26</em>), where <em>n</em> is the length of the publicly available documents, <em>m</em> is the maximum allowed length of words which can be entered in the search box, and <em>k</em> specifies that the search box allows only the first <em>k</em> characters of the alphabet. The second line of each test case describes the publicly available documents and consists of <em>n</em> lower-case letters.</p>

*******OutputConstraints*******

<p>For each test case in the input, print one line in the output containing a word which does not occur as a substring in the given text. The word should have at most <em>m</em> lower-case characters from the first <em>k</em> letters in the alphabet. You may assume that for each given test case, there is always at least one such word (you may print any such word).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
9 3 2
bbbaababb
9 3 2
aaabbabaa

<strong>Output:</strong>
aaa
bbb
</pre>


______________________________________________________
LMCONSTR||||||true||||||


<p>For the upcoming soccer world championship's finals in South Africa the organisation committee has planned a very prestigious project.  To take the two teams, which are battling it out for the title, to new heights, the final should take place on a plateau of the "Mafadi", the highest mountain of South Africa.  During the preparations, the logistics of such a huge event have been severely underestimated.</p>
<p>Now, with barely a month to go, the stadium on top of the plateau is finished but the means of transportation to the plateau are next to nonexistent. Until now, there are only small roads connecting many little villages spread all over the mountain.  Furthermore, known for their efficiency, ancient South African builders only built a road between two villages, if no other connection existed so far.</p>
<p>Since the amount of fans would exceed the capacity of the small mountain roads, this leaves the committee with only one choice: improve the possibilities to reach the mountain at one of the sites.  But as if this wasn't enough trouble to go through, the mountain folks have announced to sabotage the finals, if the constructions would disturb any village more than once.  Since the committee has access to an old tunnel-drill, it has decided to create a number of alternative routes to divert a bit of the traffic.</p>
<p>The engineers have identified a number of possible sites, all offering a good landing spot to fly in the giant drill to and a takeoff spot to transport the drill back from. But as the drill is really old, it has to follow the natural structures in the rock and can therefore only be used to drill in the given direction.  Thus, the engineers seek your help to identify the sites on which a route for the drill (using existing roads and drilling new tunnels) exists from the landing platform to the takeoff spot, visiting each village at most once. Furthermore, a valid route needs to contain all the tunnels identified necessary by the engineers, and it should contain no other tunnels.</p>

*******InputConstraints*******

<p>The input to your program provided by the South African building committee will be structured as follows. Each input file begins with the number of test cases on a single line. On the first line of every test case three numbers <em>N</em>, <em>M</em>, <em>T</em> (<em>1 &le; N,M &le; 100000</em>, <em>0 &le; T &le; 100000</em>) will specify the number of villages, as well as connections and tunnels to follow. The second line specifies the location of the landing platform and the takeoff spot respectively (landing platform <em>&ne;</em> takeoff spot). After this <em>M</em> lines follow, each giving a pair of villages <em>a</em> <em>b</em> (<em>0 &le; a,b &lt; N</em>, <em>a &ne; b</em>) to indicate an existing road between <em>a</em> and <em>b</em> which can be used in both directions. Finally <em>T</em> lines follow, each giving a pair of villages <em>a</em> <em>b</em> (<em>0 &le; a,b &lt; N</em>, <em>a &ne; b</em>) to indicate that a tunnel was deemed necessary for the finals from <em>a</em> to <em>b</em>. The tunnel has to be drilled in the direction from <em>a</em> to <em>b</em>.</p>

*******OutputConstraints*******

<p>For each of the presented test cases, print a single line containing either <strong>IMPOSSIBLE</strong> whenever the construction is not possible, or <strong>POSSIBLE</strong> whenever the constructions can be carried out under the given restrictions.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 2 1
1 0
0 1
0 2
1 2
3 2 1
1 0
0 1
0 2
2 1

<strong>Output:</strong>
POSSIBLE
IMPOSSIBLE
</pre>


______________________________________________________
LINEUP||||||true||||||


<p>On June 13th team Germany has its first match in the FIFA world cup against team  Australia. As the coach of team Germany, it is your duty to select the lineup for  the game. Given this is your first game in the cup, naturally you want to make a  good impression. Therefore you'd like to play with the strongest lineup possible.</p>
<p><img src="http://www.spoj.pl../../../content/ak15:lineup.png" alt="example image" width="50%" height="50%" /></p>
<p>&nbsp;</p>
<p>You have already decided on the tactical formation you wish to use, so now you  need to select the players who should fill each of the <em>11</em> positions in the team.  Your assistant has selected the <em>11</em> strongest players from your squad, but this still  leaves the question where to put which player.</p>
<p>Most players have a favoured position on the field where they are strongest, but  some players are proficient in different positions. Your assistant has rated the  playing strength of each of your <em>11</em> players in each of the <em>11</em> available positions in  your formation, where a score of <em>100</em> means that this is an ideal position for the  player and a score of <em>0</em> means that the player is not suitable for that position at all.  Find the lineup which maximises the sum of the playing strengths of your players for  the positions you assigned them. All positions must be occupied, however, do not put  players in positions they are not proficient with (i.e.\ have a score of <em>0</em>).</p>

*******InputConstraints*******

<p>The input consists of several test cases. The first line of input contains the number  <em>C</em> of test cases. For each case you are given <em>11</em> lines, one for each player, where  the <em>i</em>-th line contains <em>11</em> integer numbers <em>s<sub>ij</sub></em> between <em>0</em> and <em>100</em>. <em>s<sub>ij</sub></em> describes the <em>i</em>-th player's strength on the <em>j</em>-th position. No player will be proficient  in more than five different positions.</p>

*******OutputConstraints*******

<p>For each test case output the maximum of the sum of player strengths over all possible lineups. Each test case result should go on a separate line. There will always be at least one valid lineup.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
100 0 0 0 0 0 0 0 0 0 0
0 80 70 70 60 0 0 0 0 0 0
0 40 90 90 40 0 0 0 0 0 0
0 40 85 85 33 0 0 0 0 0 0
0 70 60 60 85 0 0 0 0 0 0
0 0 0 0 0 95 70 60 60 0 0
0 45 0 0 0 80 90 50 70 0 0
0 0 0 0 0 40 90 90 40 70 0
0 0 0 0 0 0 50 70 85 50 0
0 0 0 0 0 0 66 60 0 80 80
0 0 0 0 0 0 50 50 0 90 88

<strong>Output:</strong>
970
</pre>


______________________________________________________
POLYNOM||||||true||||||


<p>The number of spectators at the FIFA World Cup increases year after year. As you sell the advertisement slots during the games for the coming years, you need to come up with the price a company has to pay in order to get an advertisement slot. For this, you need a good estimate for the number of spectators in the coming games, based on the number of spectators in the past games.</p>
<p>Your intuition tells you that maybe the number of spectators could be modeled precisely by a polynomial of degree at most <em>3</em>. The task is to check if this intuition is true.</p>

*******InputConstraints*******

<p>The input starts with a positive integer <em>N</em>, the number of test   cases. Each test case consists of one line. The line starts with an   integer <em>1 &le; n &le; 500</em>, followed by <em>n</em> integers <em>x<sub>1</sub>, ...,   x<sub>n</sub></em> with <em>0 &le; x<sub>i</sub> &le; 50000000</em> for all <em>i</em>, the number of   spectators in past games.</p>

*******OutputConstraints*******

<p>For each test case, print <strong>YES</strong> if there is a polynomial <em>p</em> (with real coefficients) of degree at most <em>3</em> such that <em>p(i) = x<sub>i</sub></em> for all <em>i</em>. Otherwise, print <strong>NO</strong>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
1 3
5 0 1 2 3 4
5 0 1 2 4 5

<strong>Output:</strong>
YES
YES
NO
</pre>


______________________________________________________
SBETS||||||true||||||


<p>The teams have finished the group stage of the FIFA World Cup and the teams that are in the round of the last sixteen are known. My boss has all of the games analyzed and bets on the whole rest of the tournament by writing the outcome of each match on a single sheet of paper. It was my job to bring his bets to the next betting office and set <em>1000</em> dollar.  Being nervous with so much cash in my pockets I fell over (I am a bit clumsy) and the bets got shuffled. So I don't know if a bet corresponds to the final match or the semi-final or something else.</p>
<p>I do not want to disappoint my boss, so I decided to place only one bet on the winner of the tournament. Everything I know is that in each round the teams that win (a team wins if it shoots more goals than the opposing team) are in the next round, the other teams are eliminated from the tournament. This is not true for the semi-finals where the losers also play for the third place. So we have in total <em>16</em> matches.</p>
<p>Can you please tell me which team will win the World Cup based on the bets of my boss?</p>

*******InputConstraints*******

<p>The first line of the input is the number of test cases <em>c</em> (<em>1 &le; c &le; 100</em>). Each test case consists of <em>16</em> lines describing the matches in random order. A match description looks as follows: <em>t<sub>1</sub></em> <em>t<sub>2</sub></em> <em>g<sub>1</sub></em> <em>g<sub>2</sub></em>. <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em> are the names of teams (abbreviated as exactly three uppercase letters), <em>g<sub>1</sub></em> and <em>g<sub>2</sub></em> (<em>0 &le; g<sub>1</sub>, g<sub>2</sub> &le; 10</em>; <em>g<sub>1</sub> &ne; g<sub>2</sub></em>) are the goals of the two teams.</p>

*******OutputConstraints*******

<p>For each test case, print one line containing the team that will win the FIFA World Cup (based on the analysis of my boss which is always correct!).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
ITA URU 2 0
ITA IRE 1 0
ITA ARG 3 4
YUG ARG 2 3
GER CZE 1 0
ENG GER 3 4
ITA ENG 2 1
CAM COL 2 1
ENG CAM 3 2
ENG BEL 1 0
GER ARG 1 0
CZE CRC 4 1
NET GER 1 2
BRZ ARG 0 1
SPA YUG 1 2
ROM IRE 4 5

<strong>Output:</strong>
GER
</pre>


______________________________________________________
TBGAME||||||true||||||


<p>Lizarb's national soccer team undoubtedly belongs to the group of favourites to win the World Cup at the upcoming championship. Their greatest advantages are their excellent dribbling skills   and the ball passing precision. Particularly, each player can pass the ball to every other player  on the playing field at any distance. The team's captain, Oicul, claims that an exercise which certainly  has a substantial effect on the team's soccer skills is the so-called "Two-ball Game".</p>
<p>In the two-ball game, <em>n &gt; 4</em> kickers are positioned on the playing field and do not move (i.e.\ change their locations) during the game.  Four of the players are distinguished: two of them, denoted as <em>s<sub>1</sub></em> and <em>s<sub>2</sub></em>, are called  starting players, and two others, denoted as <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em>, are called terminal players. At the beginning, player <em>s<sub>1</sub></em> has got a white ball and <em>s<sub>2</sub></em> possesses a black ball. Then each starting  player can kick the ball directly to the corresponding terminal player but he can also kick the  ball to any other player on the field and this player can pass the ball to the next one, and so on.  The aim is that at the end the white ball is in possession of <em>t<sub>1</sub></em> and the black ball in possession  of <em>t<sub>2</sub></em>. So, it seems the game is quite simple. However, to avoid ball collisions,  the constraint of the game is that no ball trajectories cross each other and that no player  (including starting and terminal ones) has more than one ball contact. For simplicity, we assume the  trajectory of a ball moving from one player to the next one is a line segment.</p>
<p>Lizarb's national soccer team observed that for some locations of kickers the two-ball game is possible but for some others it is impossible. The figure below shows two example locations: to the left, playing two-ball game is impossible; to the right, playing the game is possible.</p>
<p><img src="http://www.spoj.pl../../../content/ak15:tbgame.png" alt="example image" width="85%" /></p>
<p>Your task is to write a program that checks if for given player locations the two-ball game is possible or not.</p>

*******InputConstraints*******

<p>Each input starts with a single integer that gives the number of cases that follow.  The firsts line of each case contains the number of players <em>n</em>, with <em>4 &le; n &le; 100000</em> followed by <em>n</em> lines that describe the coordinates of the players. All coordinates are pairwise different and  the points determined by the coordinates are <em>not</em> collinear (recall, three or more points are said to be collinear if they lie on a single straight line).  The first coordinate describes the location  of <em>s<sub>1</sub></em>, the second the location of <em>t<sub>1</sub></em>, the third coordinate describes the location  of <em>s<sub>2</sub></em>, and the fourth the location of <em>t<sub>2</sub></em>. The remaining coordinates describe  positions of other players of the team.</p>

*******OutputConstraints*******

<p>For each case, your algorithm has to output a line containing POSSIBLE if it is  possible to play the game and IMPOSSIBLE, otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

2
5
2.01 0.02
1.04 3.02
0.01 0.99
4.1  3.2
2.1  2.01
5
2.01 0.02
1.04 3.02
0.01 0.99
2.1  2.01
4.1  3.2

<strong>Output:</strong>
IMPOSSIBLE
POSSIBLE
</pre>


______________________________________________________
TOSCORE||||||true||||||


<p>Robot soccer matches in the very early days were quite funny, since most of the time there wasn't any action in the game. Robots only moved to catch a ball that a robot from the other team had shot. The reason for this somewhat strange behavior was attributed to the used strategy. The robots made a map of all players from the same team and the opponents. If one player was in possession of the ball before even shooting he tried to check whether it was possible to score from the current situation. In the process he checked if there was a way for the ball to reach the goal via several other players of his team. It was possible to shoot the ball to another player if no opponent was close enough to the shooting line to catch the ball. The opponent always moved perpendicular to the shooting line and only if he was sure that he could intercept the shot. The ball always traveled three times as fast as a robot could move, i.e. the player had to be quite near the shooting line to intercept the shot.
</p>
<p>The other part of the game was fouling another player in order to prevent the other team from reaching the goal. The rules stated that only one player could be fouled at a time, so this only happened if fouling this one player prevented the other team from scoring. Also the initial shooter may not be fouled at any time. Fouling happens almost instantly by knocking the robot out with an electromagnetic pulse, thus the distance between the two opponents does not matter and the fouling robot does not move.</p>
<p><img src="http://www.spoj.pl../../../content/ak15:toscore.png" alt="example image" width="50%" height="50%" /></p>
<p>Let's have a look at the figure. There are four players in each team, indicated by the black and white circles. Suppose player <strong>A</strong> has the ball. Then only the shown shots are possible (note the directions). In all other cases a white player is near enough to intercept the shot (e.g. the direct shot from <strong>A</strong> to the goal). Thus in principle the black team could score. However, if player <strong>D</strong> is fouled the goal can no longer be scored.</p>
<p>Your university has decided to program a simulator for these ancient robot football matches and your task is to write the part that checks if the team in possession of the ball is able to score or not, based on the current positions of all robots. As a summary of the description above, a team may score if the ball cannot be intercepted by an opponent player and if more than one player would have to be fouled.</p>

*******InputConstraints*******

<p>The first line contains the number of testcases <em>1 &le; k &le; 10</em> that follow. The first line of each testcase holds the number <em>n</em> of players per team (<em>1 &le; n &le; 20</em>). The next <em>2n</em> lines contain the coordinates of all players, the first <em>n</em> lines being the first team, the second <em>n</em> lines the second team. A coordinate is given as two non-negative floating point numbers separated by spaces. The first player of the first team is in possession of the ball. The coordinates of the goal follow below the two teams. You may assume that the inputs are chosen in such a way that small floating point errors do not lead to wrong results.</p>

*******OutputConstraints*******

<p>Output <strong>Goal</strong> if the first team is able to score or <strong>No goal</strong> if the ball can be intercepted or if fouling one player is enough to prevent the team from scoring.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4
407.89 297.33
396.64 80.21
190.26 96.43
210.73 290.67
345.43 315.24
462.45 218.22
291.76 60.82
104.98 113.45
0 191.18
4
407.89 297.33
396.64 80.21
190.26 96.43
210.73 290.67
521.43 369.86
565.14 368.22
563.25 328.18
521.31 334.00
0 191.18

<strong>Output:</strong>
No goal
Goal
</pre>


______________________________________________________
CT10R3B||||||true||||||


<p>We are looking into building a very long fence. We have already found a  nice place to build it, and all that remains is to collect the  materials.</p>
<p>From local hardware stores, we can buy unlimited numbers of wooden  boards, each of which can come in a variety of different lengths. To  avoid waste, we want to make sure that the total length of these boards  is <em>exactly</em> equal to the length of the fence we are trying to  build.</p>
<p>Given the length of the fence, and the possible board lengths that we  can use, what is the minimum number of boards that we need to purchase  in order to get exactly the right length?</p>
<p><em>Beware:</em> the fence is going to be very long!</p>

*******InputConstraints*******

<p>The first line of the input file contains the number of cases, <strong>T</strong>.  <strong>T</strong> test cases follow.</p>
<p>Each test case consists of two lines. The first line contains  space-separated integers <strong>L</strong> and <strong>N</strong>. These represent the  total length of the fence, and the number of different board lengths  that can be purchased. The second line contains <strong>N</strong> space-separated  integers <strong>B<sub>1</sub></strong>, <strong>B<sub>2</sub></strong>, ..., <strong>B<sub>N</sub></strong>,  representing all the possible board lengths.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x: M", where x is  the case number (starting from 1) and M is as follows:</p>
<ul>
<li> If it is possible to purchase one or more boards so that their  total length is exactly equal to <strong>L</strong>, then M should be the minimum  number of boards required to do this. </li>
<li> Otherwise, M should be the string "IMPOSSIBLE". </li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><code>2<br /> 10000000001 3<br /> 23 51 100<br /> 10000000001 3<br /> 100 52 22 </code><br /><strong>Output:</strong><br /><code>Case #1: 100000004<br />Case #2: IMPOSSIBLE<br /><br /><br /></code></pre>


______________________________________________________
CT16E||||||true||||||


<div>
<p><span><em>n</em></span> fish, numbered  from <span>1</span> to <span><em>n</em></span>,  live in a lake. Every day right one pair of fish meet, and the  probability of each other pair meeting is the same. If two fish with  indexes i and j meet, the first will eat up the second with the  probability <span><em>a</em><sub><em>ij</em></sub></span>,  and the second will eat up the first with the probability <span><em>a</em><sub><em>ji</em></sub>&thinsp;=&thinsp;1&thinsp;-&thinsp;<em>a</em><sub><em>ij</em></sub></span>. The described process goes  on until there are at least two fish in the lake. For each fish find out  the probability that it will survive to be the last in the lake.</p>
</div>

*******InputConstraints*******

<p>The first line contains integer <span><em>n</em></span> (<span>1&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le; &thinsp;18</span>) &mdash; the amount of fish in the lake. Then there follow <span><em>n</em></span> lines with <span><em>n</em></span> real numbers each &mdash; matrix <span><em>a</em></span>. <span><em>a</em><sub><em>ij</em></sub></span> (<span>0&thinsp;&le;&thinsp;<em>a</em><sub><em>ij</em></sub>&thinsp; &le;&thinsp;1</span>) &mdash; the probability that fish with index <span><em>i</em></span> eats up fish with index <span><em>j</em></span>. It's guaranteed that the main diagonal  contains zeros only, and for other elements the following is true: <span><em>a</em><sub><em>ij</em></sub>&thinsp;=&thinsp;1&thinsp;- &thinsp;<em>a</em><sub><em>ji</em></sub></span>. All real  numbers are given with not more than 6 characters after the decimal  point.</p>

*******OutputConstraints*******

<p>Output <span><em>n</em></span> space-separated real numbers accurate to not less than 6 decimal  places. Number with index <span><em>i</em></span> should  be equal to the probability that fish with index <span><em>i</em></span> will survive to be the last in the lake.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>5<br />0 1 1 1 1<br />0 0 0.5 0.5 0.5<br />0 0.5 0 0.5 0.5<br />0 0.5 0.5 0 0.5<br />0 0.5 0.5 0.5 0</pre>
<br /><strong>Output:</strong> <br />
<pre>1.000000 0.000000 0.000000 0.000000 0.000000 </pre>
</pre>


______________________________________________________
ASISTENT||||||true||||||


<p>You are given a permutation of first N natural numbers on which you are to perform K operations of following type: given integers A and B, your task is to swap elements on positions A and B in permutation and then output permutation rank modulo 1000 000 007.</p>
<p><strong>Note:</strong> Difference from original task is that elements remain swapped after query.</p>

*******InputConstraints*******

<p>On first line of standard input you are given two integers (2 &le; N &le; 50 000, 1 &le; K &le; 30 000), length of permutation and number of operations.<br />On the next line there is permutation of first N natural numbers.<br />In next K lines there are two integers A, B ( 1 &le; A, B &le; N ).</p>

*******OutputConstraints*******

<p>Output permutation rank after applying each of K operations.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 3<br />1 5 4 2 3<br />1 3<br />2 3<br />2 5<br /><br /><strong>Output:</strong><br />91<br />77<br />90<br /></pre>


______________________________________________________
WONKA1||||||true||||||


<p>&nbsp; &nbsp; &nbsp;Willy Wonka, the amazing <a title="Willy Wonka Song" href="http://www.youtube.com/watch?v=AcLjLjJIliI#t=0m35s" target="_blank">Chocolatier</a>, appears to have a serious predicament at hand. You see, the worker population of his large factory, which consists of 100% <a title="Oompa Loompa Song" href="http://www.youtube.com/watch?v=EiMpTzd0Gqo&amp;feature=PlayList&amp;p=ADB5280FDBB62320&amp;playnext_from=PL&amp;index=54&amp;playnext=1" target="_blank">Oompa Loompas</a>, is facing a massive decline. This started off because of the fatal accidents in the testing of new Wonka products, but the decline has grown ever since then as old age was slowly factored into the equation. Because Oompa Loompas are as of yet a completely male tribe, they cannot simply reproduce amongst themselves to make up for their dying comrades.&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp;So Willy Wonka has travelled out into the uncharted terrain of LoompaLand once more in an attempt to find wives for the Oompa Loompas. This trip is not fruitless, since he soon comes across the Impa Limpas, a tribe of civilized females in search of husbands.</p>
<p>&nbsp; &nbsp; &nbsp;Problem solved, you say?? Well, not exactly. Since these are civilized women who have embraced the power of logic and wisdom, they will not give consent to marry savages. To test the Oompa Loompas' intellectual capacity, they have set up a task for them. Standing at an angle (possibly perpendicular) to a completely flat field&nbsp; in the dead center of LoompaLand , the Impa Limpas have set up 2 totem poles facing each other. One belongs to the Impa Limpas while the other belongs to the Oompa Loompas.</p>
<p><img title="Initial Set Up" src="../../../content/programmer111:Diagram1.png" alt="" width="575" height="155" /></p>
<p>&nbsp; &nbsp; &nbsp;The objective of this task, given the ratio of descent of each totem pole (this ratio is how many  degrees the totem pole falls per second), is to determine how many seconds apart the totem poles should be pushed so that they end up with their tops touching and all motion stopped. Willy Wonka knows that the angle at which a totem pole initially stands at in relation to the field will not  determine the direction it falls in, only the direction of the push  will do this (which should normally be towards the other totem pole). No matter what the situation, you can assume that all motion is stopped once the tops of the poles meet; keep in mind that gravity has nothing to do with this problem.</p>
<p><img title="Desired Result" src="../../../content/programmer111:Diagram2.png" alt="" width="575" height="155" /></p>
<p>&nbsp; &nbsp; The Impa Limpas are gracious with this task and have provided a 2D representation (done with a Cartesian Plane) of their totem poles' set-up to the Oompa Loompas, but they're not <em>THAT</em> gracious... they have rotated the actual diagram in relation to some point by some degrees, so the field may appear to be elevated. Since Oompa Loompas are, in fact, mostly savages, Willy Wonka has no faith in their problem solving capabilities. He attempted to solve this task himself, but seeing as how he dropped out of school early to go into the chocolate making business, his math skills aren't that great. So he has turned to his last hope: you (the boy (or girl...he forgets which) he inspired to become a programmer). Willy Wonka will give you 6 pieces on information: H1 and H2 (the points of the tops of the&nbsp;totem poles), B1 and B2 (the points of the bottom of the totem poles), and A1 and A2 (the ratio of decent of each totem pole). You are to solve this task for your childhood hero at all costs! Don't let Willy down.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p style="text-align: justify;">The first line contains an integer T (with 1&lt;= T &lt;= 10000), specifying the number of test cases that will follow.</p>
<p style="text-align: justify;">Each of the following T lines contain 4 (x,y) coordinates giving 4 seperate points on the Cartesian Plane: H1, B1, H2, and B2 (-50000&lt;= x, y &lt;= 50000), in that order and 2 real numbers A1 and A2 (0 &lt; A1, A2&lt;= 90), giving each totem pole's degree of descent per second after initial push.</p>

*******OutputConstraints*******

<p style="text-align: justify;">Output is a single real number S (rounded off to the nearest 1000th), where S is&nbsp; the absolute value of the difference in the number of seconds&nbsp;that each totem pole&nbsp;has in the air after it has been pushed before all motion has been stopped by the Oompa Loompas' and the Impa Limpas' totem poles meeting. In the case that this requirement is never met (say, for instance, that the totem poles come crashing down&nbsp; onto the field without their tops ever meeting) then the program should output "-1".</p>

*******IOTestCases*******

<pre><span style="font-size: medium;"><strong><br />Input:</strong></span><br /><span style="font-size: medium;">3<br />0 5 0 0 6 5 6 0 1 1 <br />-1 6 -4 5 -1 3 -2 1 0.5 0.25<br />4 -1 3 -1 4 -5 3 -5 12 10.6<br /></span><span style="font-size: small;">&nbsp;</span><br />&nbsp;<strong><br /><span style="font-size: medium;">Output:</span></strong><br /><span style="font-size: medium;">0.000<br /></span><span style="font-size: small;"><span style="font-size: medium;">61.087<br />-1</span></span><strong><br /><br /><br />Input Explanation:<br /></strong><span style="font-size: small;"><em>CASE 1:</em><br /><br />H1 Coordinates: (0,5)<br />B1 Coordinates: (0,0)<br />H2 Coordinates: (6,5)<br />B2 Coordinates: (6,0)<br />A1 Ratio : 1 degree drop per 1 second (clockwise, in this case)<br />A2 Ratio : 1 degree drop per 1 second (counter-clockwise, in this case)<br /><br /><em>CASE 2:</em><br /><br />H1 Coordinates: (-1,6)<br />B1 Coordinates: (-4,5)<br />H2 Coordinates: (-1,3)<br />B2 Coordinates: (-2,1)<br />A1 Ratio : 0.5 degree drop per 1 second <br />A2 Ratio : 0.25 degree drop per 1 second<br /><em><br />CASE 3:</em><br /><br />H1 Coordinates: (4,-1)<br />B1 Coordinates: (3,-1)<br />H2 Coordinates: (4,-5)<br />B2 Coordinates: (3,-5)<br />A1 Ratio : 12 degree drop per 1 second <br />A2 Ratio : 10.6 degree drop per 1 second</span><span style="font-size: small;"><br /><br /><br /></span><strong>Output Explanation:</strong><br /><br /><span style="font-size: small;"><em>CASE 1: </em>  It takes both totem poles the exact same amount of time to reach the point <br />where their tops hit each other. The difference as expressed through S is thus 0.<br /><br /><em>CASE 2: </em>  For the tops of the totem poles to meet, one totem pole must be pushed <br />approximately 61.087 seconds before the other.<br /><br /><em>CASE 3:  </em> The tops of the totem poles will never meet, so you must print "-1" as shown. </span><br /><strong><br /><br /><span style="font-size: large;">Hint: </span></strong><strong><br /></strong><br /><span style="font-size: small;">Pencil and Paper is the way to go! <br /></span><br /><br /><br /><br /><br /><br /><br /></pre>


______________________________________________________
PWSUM||||||true||||||


<p style="text-align: center;"><img title="pwsum" src="../../../content/syntax_error:pwsum.png" alt="suma" width="82" height="112" /></p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Everyone knows that we can express sums of form sigma i = 1 to x ( i^k ) as polynomials</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">of degree k+1. Most people find it hard to derive actual formulas for such sums, so</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">we'd like to have a program that does that for us! You are given a nonnegative</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">integer K, and you're asked to compute the coefficient representation of the polynomial</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">which defines the sum shown above. However, we'd like to simplify your computation</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">so you only have to output the formula modulo 10007. ( A formula which correctly computes</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the remainder of the sum when divided by 10007, for any natural x ).</div>
<p>Everyone knows that we can express sums this form as polynomials&nbsp;of degree k+1. Most people find it hard to derive actual formulas for such sums, so&nbsp;we'd like to have a program that does that for us! You are given a nonnegative&nbsp;integer K, and you're asked to compute the coefficient representation of the polynomial&nbsp;which defines the sum shown above. However, we'd like to simplify your computation&nbsp;so you only have to output the formula modulo 10007. ( A formula which correctly computes&nbsp;the remainder of the sum when divided by 10007, for any natural x ).</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first and only line of input contains a nonnegative integer k ( 0 &lt;= k &lt;= 300 ): the power we use&nbsp;in our sum.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>The first and only line of output should contain the canonic coefficient representation of the&nbsp;formula. To elaborate, this should be the form of your output:</p>
<p>a<sub>k+1</sub>x<sup>k+1</sup> + a<sub>k</sub>x<sup>k</sup> + a<sub>k-1</sub>x<sup>k-1</sup> ... a<sub>0</sub>x<sup>0</sup></p>
<p>ai here represents the coefficient that stands by the i-th power of x.&nbsp;As we only wish to find the formula modulo 10007, all the coefficients should be&nbsp;from interval [0, 10006] of integers. See the sample input and output for further clarification.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre><strong><span style="font-weight: normal; ">1</span></strong>

<strong>Output:</strong>
</pre>
<pre>5004x^2 + 5004x^1 + 0x^0</pre>
<pre><strong><br /></strong></pre>
<pre><strong>Input:</strong></pre>
<pre>3</pre>
<pre><strong>Output:</strong></pre>
<pre>2502x^4 + 5004x^3 + 2502x^2 + 0x^1 + 0x^0</pre>
<div style="text-align: left;"><strong><br /></strong></div>


______________________________________________________
MEPPERM||||||true||||||


<p>For a directed graph <em>G</em> where any vertex <em>v</em> has two  weights <em>A<sub>v</sub></em> and <em>B<sub>v</sub></em>, we call <em>A<sub>u</sub></em>+<em>B<sub>v</sub></em> the weight of a edge (<em>u</em>,<em>v</em>). Let <em>MaxEdge</em>(<em>G</em>)  be the maximum weight of the edges of <em>G</em>.</p>
<p>Given a permutation <em>P</em> on 1..<em>n</em>, we can derive a directed graph <em>G</em>=(<em>V</em>,<em>E</em>)  where <em>V</em>={1,..,<em>n</em>} and (<em>u</em>,<em>v</em>) in <em>E</em> iff  <em>P</em>(<em>u</em>)=<em>v</em>. Your task is to compute <em>MaxEdge</em>(<em>P<sup>k</sup></em>)  for every <em>k</em> in 0..<em>q</em>-1.</p>

*******InputConstraints*******

<p>The first line contains a positive integer <em>n</em>.<br />The second line  contains <em>n</em> integers in {1,..,<em>n</em>}, denoting the permutation <em>P</em>.<br />The  third and the fourth line both contain <em>n</em> natural numbers, <em>A</em><sub>1</sub>,..,<em>A<sub>n</sub></em> and <em>B</em><sub>1</sub>,..,<em>B<sub>n</sub></em> respectively.<br />The fifth line contains a  positive integer <em>q</em>.</p>

*******OutputConstraints*******

<p>The only one line contains <em>q</em> integers <em>MaxEdge</em>(<em>P</em><sup>0</sup>),..,<em>MaxEdge</em>(<em>P<sup>q</sup></em><sup>-1</sup>), separated by a single space.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />3 2 1<br />0 1 2<br />2 2 0<br />5<br /><br /><strong>Output:</strong><br />3 4 3 4 3<br /></pre>

______________________________________________________
SUB_PROB||||||true||||||


<p>String Matching is an important problem in computer science research  and finds applications in Bioinformatics, Data mining,pattern  recognition, Internet security and many more areas.</p>
<p>The problem we consider here is a smaller version of it. You are given a string M  and N other strings smaller in length than M.  You have to find whether each of these N strings is a substring of M.  All strings consist of only alphanumeric characters.</p>
<p>You are required to write a C/CPP code to solve the problem.</p>

*******InputConstraints*******

<p>Input to the program consists of a series of lines. The first line  contains the string M (no more than <strong>100000</strong> characters long). The next line contains an integer N (&lt;<strong>1000</strong>)  the number of query strings. Each of the next N lines contain a string  S (each of which is no more than <strong>2000</strong> characters long).</p>

*******OutputConstraints*******

<p>Output should consist of N lines each with a character 'Y'/'N'  indicating whether the string S is a substring of String M or not.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre><code>abghABCDE<br />2<br />abAB</code><code><br />ab</code></pre>
<br /><br /><strong>Output:</strong><br />Â <br />
<pre><code>N<br />Y<br /></code></pre>
<br /><br /></pre>
<p><strong>Note:</strong> The test data for this problem not only consist of the official test cases from the contest,as well some cases of my own.</p>
<p><strong>A testcase is added on 25.7.2010,after rejudging 3 users loose accepted.</strong></p>
<p>Â </p>


______________________________________________________
RPAR||||||true||||||


<p style="text-align: justify;">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">It's raining parabolas!</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">Nowdays you just can't predict what'll fall on your head tomorrow..</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">Because we don't care about the nature, it is now striking back:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; it's raining parabolas!</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">The parabolas that are falling are given in form of quadratic</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">fuctions: f(x) = ax^2 + bx + c. The ground can be defined as a line</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">with N blocks, numbered from 0 to N-1, initially having height 0.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">At some point, a block can have some positive height, but when it exceeds</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">10006 ( we don't actually know why, but measurements have shown it is a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">weird regularity.. ) it falls back to 0 . When a parabola falls on the ground,&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">it interacts with its current configuration ( the parabolas that have</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">fallen before it ) by summing with them.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">Today you somehow came in possesion of some sort of schedule which defines</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">the order in which the parabolas will fall on the ground. Apart from that,&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">you're interested total heights ( sums of heights ) of consecutive blocks</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">of ground.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">You're given two integers: N and M ( 1 &lt;= N, M &lt;= 100000 ). N specifies</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">the number of blocks on the floor, and M is the number of queries.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">As we already said, we have two types of queries of form:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; 0 x0 x1 a b c ( x0 &lt;= x1, 0 &lt;= a, b, c &lt;= 10006 )</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; &nbsp; &nbsp;this type of query just tells you that a parabola has</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; &nbsp; &nbsp;fallen into the interval [x0, x1], and it function is f(x) = ax^2 + bx + c</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; 1 x0 x1</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; &nbsp; &nbsp;this is the type of query you have to answer - output the sum of heights</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">&nbsp;&nbsp; &nbsp; &nbsp;of all the blocks from interval [x0, x1] modulo 10007</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; text-align: justify;">All numbers in the input are integers.</div>
<p style="text-align: justify;"><span style="font-size: small;">Nowdays you just can't predict what'll fall on your head the next day..&nbsp;Because we don't care about the nature, it is now striking back:&nbsp;it's raining parabolas!</span></p>
<p style="text-align: justify;"><span style="font-size: small;">The parabolas that are falling are given in form of quadratic&nbsp;functions:</span><strong><span style="font-size: small;"> f(x) = ax</span></strong><sup><strong><span style="font-size: small;">2</span></strong></sup><strong><span style="font-size: small;"> + bx + c</span></strong><span style="font-size: small;">. The ground can be defined as a line&nbsp;with N blocks, numbered from 0 to N-1, initially having height 0.&nbsp;At some point, a block can have some positive height, but when it exceeds&nbsp;10006 ( we don't actually know why, but measurements have shown it is a&nbsp;weird regularity.. ) it falls back to 0. When a parabola falls on some block,&nbsp;it interacts with its current configuration ( the parabolas that have&nbsp;fallen there before it ) by summing with it. More precisely, if we are given an interval [x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">, x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">] in which the next parabola will fall, and the function of our parabola is f(x) ( defined above ), some block </span><span style="font-size: xx-small; "><span style="font-size: small;">i ( x</span><sub><span style="font-size: small;">0 &nbsp;</span></sub><span style="font-size: small;">&lt;= i &lt;= x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">&nbsp;), with height h</span><sub><span style="font-size: small;">i</span></sub><span style="font-size: small;">, the new height of that block becomes</span><strong><span style="font-size: small;"> </span></strong></span><span style="font-size: xx-small;"><strong><span style="font-size: small;">(h</span></strong><sub><strong><span style="font-size: small;">i</span></strong></sub><strong><span style="font-size: small;">&nbsp;+ f(i)) modulo 10007</span></strong><span style="font-size: small;">.</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">Today you somehow came in possesion of some sort of schedule which defines&nbsp;the order in which the parabolas will fall on the ground. Apart from that, you're interested total heights ( sums of heights ) of consecutive blocks&nbsp;of ground.&nbsp;</span><span style="font-size: x-small; "><span style="font-size: small;">When we want to find the total height of some interval [x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">, x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">], we're looking for the<strong> sum of h</strong></span><sub><span style="font-size: small;"><strong>i</strong></span></sub><span style="font-size: small;"><strong>&nbsp;for all i</strong> (&nbsp;x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">&nbsp;&lt;= i &lt;= x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">&nbsp;) <strong>modulo 10007</strong>.</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">Before the first parabola falls, the ground is flat ( all heights are 0 ).</span></p>

*******InputConstraints*******

<p>&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">The first line of input contains two integers: N and M ( 1 &lt;= N, M &lt;= 100000 ). N specifies&nbsp;the number of blocks on the floor, and M is the number of queries. Each of the next M lines contains a query. As we already said, we have two types of queries of form:</span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; 0 x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">&nbsp;x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">&nbsp;a b c (0 &lt;= x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">&nbsp;&lt;= x</span><sub><span style="font-size: small;">1&nbsp;</span></sub><span style="font-size: small;">&lt; N, 0 &lt;= a, b, c &lt;= 10006, </span><strong><span style="font-size: small;">all integers</span></strong><span style="font-size: small;"> )</span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; &nbsp; &nbsp;this type of query just tells you that a parabola has</span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; &nbsp; &nbsp;fallen into the interval [x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">, x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">], and its function is f(x) = ax</span><sup><span style="font-size: small;">2</span></sup><span style="font-size: small;">&nbsp;+ bx + c</span></p>
<p><span style="font-size: small;"><br /></span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; 1 x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">&nbsp;x</span><sub><span style="font-size: small;">1&nbsp;</span></sub><span style="font-size: small;">( 0 &lt;= x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">&nbsp;&lt;= x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">&nbsp;&lt; N, </span><strong><span style="font-size: small;">all integers</span></strong><span style="font-size: small;"> )</span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; &nbsp; &nbsp;this is the type of query you have to answer - output the sum of heights</span></p>
<p><span style="font-size: small;">&nbsp;&nbsp; &nbsp; &nbsp;of all the blocks from interval [x</span><sub><span style="font-size: small;">0</span></sub><span style="font-size: small;">, x</span><sub><span style="font-size: small;">1</span></sub><span style="font-size: small;">] modulo 10007</span></p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p style="text-align: justify;"><span style="font-size: small;">For each query of type 1, output a single line containing the sum of all the heights in the given interval modulo 10007.</span></p>

*******IOTestCases*******

<p><strong>Input:</strong> <br />10 2<br /> 0 0 9 1 0 0<br /> 1 0 3 <br /> <strong>Output:</strong> <br />14&nbsp;</p>
<pre>(the sum of the first 4 squares ( from 0 to 3 ) is 14 )</pre>


______________________________________________________
XYYHHTT||||||true||||||


<p><span style="white-space: pre;"> </span>XiYangYang is a kind of lovely and rare sheep. They live in a peaceful land which can be describled as a tree with N cities (nodes).</p>
<p><span style="white-space: pre;"> </span>Now you have K robots. They will start at a same point and travel each edge at least once so that all XiYangYang will be caught. All your robots can stop at any city in the land. Because of expensive oil, you want minimize the total distance that your robots walk.</p>

*******InputConstraints*******

<p><span style="white-space: pre;"> </span>First line : N K ( N&lt;=15000, K&lt;=30 )</p>
<p><span style="white-space: pre;"> </span>Next N-1 lines: a b c (city a and city b are connected with a road whose length is c (1&lt;=a,b&lt;=N , 0&lt;=c&lt;=100)</p>

*******OutputConstraints*******

<p><span style="white-space: pre;"> </span>N lines: The total distance that your robots walk if they all start at city i</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5 3</pre>
<pre>1 2 7</pre>
<pre>2 3 5</pre>
<pre>3 4 14</pre>
<pre>3 5 8

<strong>Output:</strong>
42</pre>
<pre>39</pre>
<pre>34</pre>
<pre>42</pre>
<pre>42</pre>
<pre>Hint: my solution can get AC in 0.75~1 second.</pre>


______________________________________________________
CT23E||||||false||||||

<div>
<p>Recently Bob invented a new game with a tree (we  should remind you, that a tree is a connected graph without cycles): he  deletes any (possibly, zero) amount of edges of the tree, and counts the  product of sizes of the connected components left after the deletion.  Your task is to find out the maximum number that Bob can get in his new  game for a given tree.</p>
</div>
<div>
<div><strong>Input</strong></div>
<p>The first input line contains  integer number <span><em>n</em></span> (<span>1&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le;&thinsp;700</span>) &mdash; amount of vertices in the  tree. The following <span><em>n</em>&thinsp;-&thinsp;1</span> lines  contain the description of the edges. Each line contains the pair of  vertices' indexes, joined by an edge, <span><em>a</em><sub><em>i</em></sub></span>, <span><em>b</em><sub><em>i</em></sub></span> (<span>1&thinsp;&le;&thinsp;<em>a</em><sub><em>i</em></sub>,&thinsp;<em>b</em><sub><em>i</em></sub>&thinsp; &le;&thinsp;<em>n</em></span>). It's guaranteed that the graph described in the  input is a tree.</p>
</div>
<div>
<div><strong>Output</strong></div>
<p>Output the only number &mdash; the  maximum product of sizes of the connected components, that Bob can get  after deleting some of the tree's edges.</p>
</div>
<h3>Example</h3>
<pre><strong>Input:</strong><br /><pre>8<br />1 2<br />1 3<br />2 4<br />2 5<br />3 6<br />3 7<br />6 8</pre>
<br /><br /><strong>Output:</strong><br />18<br /></pre>


______________________________________________________
CTOI10D2||||||false||||||

<p>Martin has just been hired as a computer administrator in a big  company. The company did not change its authorization system since 1980s. Every person has a four-digit personal identification number (PIN).  Nobody uses usernames or passwords, you can login just by typing your PIN. As the company grew, they added the possibility to use letters as well,  but the length of the PIN remained the same.</p>
<p>Martin is not happy with the situation. Suppose there are people  whose PINs differ only at a single place, for example <tt>61ab</tt> and <tt>62ab</tt>.  If the first person accidentally  presses 2 instead of 1, the system would still let him in. Martin would  like to make the statistics about the PINs currently in use, in particular,  compute the number of pairs of PINs that differ at 1, 2, 3 or 4 positions. He hopes that these numbers will be alarming enough to  convince his boss to invest in a better system.</p>
<p><a id="Task_specification" name="Task_specification"></a></p>
<h2><strong><span>Task specification</span></strong></h2>
<p>Given the list of PINs and an integer <span><em>D</em></span>,  find the number of pairs of PINs that  differ at exactly <span><em>D</em></span> positions.</p>
<p><a id="Input_specification" name="Input_specification"></a></p>
<h2><strong><span>Input specification</span></strong></h2>
<p>The first line of the input contains two space-separated positive  integers <span><em>N</em></span> and <span><em>D</em></span>, where <span><em>N</em></span> is the number of PINs and <span><em>D</em></span> is the  chosen number of differences.  Each of the following <span><em>N</em></span> lines  contains a single PIN.</p>
<p><a id="Constraints" name="Constraints"></a></p>
<h2><strong><span>Constraints</span></strong></h2>
<p>You may assume that in all test cases <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/7298a9999296c4d7793e1c97eeeee012.png" alt="2\leq  N\leq 50\,000" /> and <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/7298a9999296c4d7793e1c97eeeee012.png" alt="1 \le D \le 4" />.</p>
<p>Each PIN is of length 4 and each character is either a digit or a  lowercase letter between '<tt>a</tt>' and '<tt>z</tt>', inclusive. You may assume  that all PINs in the input are different.</p>
<p>In test cases worth 15 points, <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/c1a52ab313a6bca4e406e9a1328c39dd.png" alt="N\leq 2000" />.</p>
<p>In test cases worth 60 points, <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/21e28b303b26bd974e72bca8b3939c26.png" alt="D\leq 2" />. Out of those, in test cases worth 30 points, <span><em>D</em> = 1</span>.</p>
<p>In test cases worth 75 points, every PIN will only consist of  digits or lowercase letters between '<tt>a</tt>' and '<tt>f</tt>', inclusive. Thus it can be  viewed as a hexadecimal number.</p>
<p><a id="Output_specification" name="Output_specification"></a></p>
<h2><strong><span>Output specification</span></strong></h2>
<p>Output a single line with a single number: the number of pairs of  PINs that differ at <strong>exactly</strong> <span><em>D</em></span> positions.</p>
<p><a id="Examples" name="Examples"></a></p>
<h2><strong><span>Examples</span></strong></h2>
<p><strong>input:</strong></p>
<pre>4 1<br />0000<br />a010<br />0202<br />a0e2<br /></pre>
<p><strong>output:</strong></p>
<pre>0<br /></pre>
<p><em>For these PINs each pair of PINs differs at more than one  position.</em></p>
<p><strong>input:</strong></p>
<pre>4 2<br />0000<br />a010<br />0202<br />a0e2<br /></pre>
<p><strong>output:</strong></p>
<pre>3<br /></pre>
<p><em>There are three pairs that differ at exactly 2 positions: <span>(0000,<em>a</em>010)</span>, <span>(0000,0202)</span>,  and <span>(<em>a</em>010,<em>a</em>0<em>e</em>2)</span>.</em></p>


______________________________________________________
CTOI10D3||||||false||||||

<p>The ancient Babylonians decided to build a huge tower. The tower  consists of <span><em>N</em></span> cubic building blocks that are  stacked one onto another. The Babylonians gathered many building blocks  of various sizes from all over the country. From their last unsuccessful attempt they have learned that if they put a  large block directly onto a much smaller block, the tower will fall.</p>
<p><a id="Task_specification" name="Task_specification"></a></p>
<h2><strong><span>Task specification</span></strong></h2>
<p>Each two building blocks are different, even if they have the same  size. For each building block you are given its side length. You are also given an integer <span><em>D</em></span> with  the following meaning: you are not allowed to put block A directly onto block B if the side length  of A is strictly larger than <span><em>D</em></span> plus  the side length of B.</p>
<p>Compute the number of different ways in which it is possible to  build the tower using <strong>all</strong> the building blocks. Since this number can be very large, output the result modulo <span>10<sup>9</sup> + 9</span>.</p>
<p><a id="Input_specification" name="Input_specification"></a></p>
<h2><strong><span>Input specification</span></strong></h2>
<p>The first line of the input contains two positive integers <span><em>N</em></span> and <span><em>D</em></span>:   the number of building blocks and the tolerance respectively.</p>
<p>The second line contains <span><em>N</em></span> space-separated integers; each represents the size of one building block.</p>
<p><a id="Constraints" name="Constraints"></a></p>
<h2><strong><span>Constraints</span></strong></h2>
<p>All numbers in the input files are positive integers not exceeding <span>10<sup>9</sup></span>.</p>
<p><span><em>N</em></span> is always at least 2.</p>
<p>In test cases worth 70 points <span><em>N</em></span> will be at most 70.</p>
<p>Out of those, in test cases worth 45 points, <span><em>N</em></span> will be at most 20.</p>
<p>Out of those, in test cases worth 10 points, <span><em>N</em></span> will be at most 10.</p>
<p>For some of the test cases the total number of valid towers will  not exceed <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/24a5c8770b600ace07b146862f0cf905.png" alt="1\,000\,000" />.  These test cases are worth 30 points in total.</p>
<p>For the last six test cases (worth 30 points) the value of <span><em>N</em></span> is larger than 70. No upper bound on <span><em>N</em></span> is given for these test cases.</p>
<p><a id="Output_specification" name="Output_specification"></a></p>
<h2><strong><span>Output specification</span></strong></h2>
<p>Output a single line containing a single integer: the number of  towers that can be built, modulo <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/ed6b2d513f8a0481430dfa08a743f41e.png" alt="1\,000\,000\,009" />.</p>
<p><a id="Examples" name="Examples"></a></p>
<h2><strong><span>Examples</span></strong></h2>
<p><strong><strong>input:</strong></strong></p>
<pre>4 1<br />1 2 3 100<br /></pre>
<p><strong><strong>output:</strong></strong></p>
<pre>4<br /></pre>
<p><em>We can arrange the first three blocks in any order, except for <span>2,1,3</span> or <span>1,3,2</span>. The  last block has to be at the bottom.</em></p>
<p><strong><strong>input:</strong></strong></p>
<pre>6 9<br />10 20 20 10 10 20<br /></pre>
<p><strong>output:</strong></p>
<pre>36<br /></pre>
<p><em>We are not allowed to put a cube of size 20 onto a cube of size  10. There are six ways to order the cubes of size 10, and six ways to  order the cubes of size 20.</em></p>


______________________________________________________
CTOI10D1||||||false||||||

<h1><strong><span>The MP3 Player</span></strong></h1>
<p>Georg's new MP3 player has many interesting features, one of them  being the key lock. All the keys are locked after more than <span><em>T</em></span> seconds of inactivity. After the key lock is engaged, no key performs its original function, but if any key is pressed, the  key lock is disengaged.</p>
<p>For example, assume that <span><em>T</em> = 5</span> and the player is currently locked. Georg presses the key <span><em>A</em></span>, waits for 3  seconds, presses the key <span><em>B</em></span>, waits for 5 seconds, presses <span><em>C</em></span>,  waits for 6 seconds, and presses <span><em>D</em></span>. In this case only the keys <span><em>B</em></span> and <span><em>C</em></span> perform their regular functions. Note that the keys became locked between <span><em>C</em></span> and <span><em>D</em></span> was pressed.</p>
<p>Sound level of the MP3 player is controlled by the <tt>+</tt> and <tt>-</tt> keys, increasing and decreasing volume by <span>1</span> unit respectively. The sound level is an integer between <span>0</span> and  <span><em>V</em><sub><em>m</em><em>a</em><em>x</em></sub></span>.  Pressing the <tt>+</tt> key at volume <span><em>V</em><sub><em>m</em><em>a</em><em>x</em></sub></span> or pressing the <tt>-</tt> key at volume <span>0</span> leaves the volume unchanged.</p>
<p><a id="Task_specification" name="Task_specification"></a></p>
<h2><strong><span>Task specification</span></strong></h2>
<p>Georg does not know the value of <span><em>T</em></span>.  He wanted to find it by an experiment.  Starting with a locked keyboard, he pressed a sequence of <span><em>N</em></span> <tt>+</tt> and <tt>-</tt> keys. At the end of the experiment Georg read the final volume from the  player's display.  Unfortunately, he forgot to note the volume before his first keypress. For the purpose of this task, the unknown initial volume will be denoted  <span><em>V</em><sub>1</sub></span> and the known final volume will be denoted <span><em>V</em><sub>2</sub></span>.</p>
<p>You are given the value <span><em>V</em><sub>2</sub></span> and a list of keystrokes in the order in which Georg made them. For each key, you are given the type of the key (<tt>+</tt> or <tt>-</tt>) and the number of seconds from the beginning of the experiment to the  moment when the key was pressed. The task is to find the largest possible <strong>integer</strong> value  of <span><em>T</em></span> which is consistent with the outcome of the experiment.</p>
<p><a id="Input_specification" name="Input_specification"></a></p>
<h2><strong><span>Input specification</span></strong></h2>
<p>The first line of the input contains three space-separated integers <span><em>N</em></span>, <span><em>V</em><sub><em>m</em><em>a</em><em>x</em></sub></span> and  <span><em>V</em><sub>2</sub></span> (<img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/9dfc98e9c17641e243ca89cbb7f7b08d.png" alt="0 \leq V_2 \leq V_{max}" />).  Each of the next <span><em>N</em></span> lines contains a  description  of one key in the sequence: a character <tt>+</tt> or <tt>-</tt>, a space and an integer <span><em>C</em><sub><em>i</em></sub></span> (<img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/9dfc98e9c17641e243ca89cbb7f7b08d.png" alt="0 \leq C_i \leq 2\cdot 10^9" />),  the number of seconds from the beginning of the experiment. You may  assume that the keypresses are in sorted order and that all times are distinct (i.e., <span><em>C</em><sub><em>i</em></sub> &lt; <em>C</em><sub><em>i</em> + 1</sub></span> for all <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/9dfc98e9c17641e243ca89cbb7f7b08d.png" alt="1 \leq i &lt; N" />).</p>
<p><a id="Constraints" name="Constraints"></a></p>
<h2><strong><span>Constraints</span></strong></h2>
<p>You may assume that <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/5e48b0d6ec8aae89db3308bafa7bdab7.png" alt="2 \leq N \leq 100\,000" /> and <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/5e48b0d6ec8aae89db3308bafa7bdab7.png" alt="2 \leq V_{max} \leq 5\,000" />.</p>
<p>In test cases worth 40 points <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/8f2b8e70de458be7932b372589b316ea.png" alt="N \leq  4\,000" />.</p>
<p>In test cases worth 70 points <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/05a2e7d73dd5b8adda051ef187736b71.png" alt="N \cdot  V_{max} \leq 400\,000" />.</p>
<p><a id="Output_specification" name="Output_specification"></a></p>
<h2><strong><span>Output specification</span></strong></h2>
<p>If <span><em>T</em></span> can be arbitrarily large,  output a single line containing the word "<tt>infinity</tt>" (quotes for clarity).</p>
<p>Otherwise, output a single line containing two integers <span><em>T</em></span> and <span><em>V</em><sub>1</sub></span> separated by a single space.</p>
<p>The values must be such that carrying out the experiment with  locking time <span><em>T</em></span> starting at volume   <span><em>V</em><sub>1</sub></span> gives the final volume  <span><em>V</em><sub>2</sub></span>. If there are multiple possible answers, output the one with the largest <span><em>T</em></span>; if there are still multiple possible answers, output the one with the largest <span><em>V</em><sub>1</sub></span>.</p>
<p>(Note that at least one solution always exists: for <span><em>T</em> = 0</span> none of the keys performs its  action, so it suffices to take <span><em>V</em><sub>1</sub> = <em>V</em><sub>2</sub></span>.)</p>
<p><a id="Examples" name="Examples"></a></p>
<h2><strong><span>Examples</span></strong></h2>
<p><strong><strong>input:</strong></strong></p>
<pre>6 4 3<br />- 0<br />+ 8<br />+ 9<br />+ 13<br />- 19<br />- 24<br /></pre>
<p><strong><strong>output:</strong></strong></p>
<pre>5 4<br /></pre>
<p><em>For <span><em>T</em> = 5</span> the keys perform the  following actions: unlock, unlock, <tt>+</tt>, <tt>+</tt>, unlock, <tt>-</tt>.</em></p>
<p><em>For any <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/9cf3e27455d31d7a83ccf61dc4371860.png" alt="V_1\in\{2,3,4\}" /> we would get <span><em>V</em><sub>2</sub> = 3</span>. Note  that the output contains the largest possible <span><em>V</em><sub>1</sub></span>.</em></p>
<p><em>For <img src="http://www.spoj.plhttp://riesky.sk/ceoi2010/i/130f856360b9459ce396b9b577717479.png" alt="T\geq 6" /> the last two keystrokes will both be active, hence it will be impossible  to</em> have <span><em>V</em><sub>2</sub> = 3</span>.</p>
<p><br /> <strong><strong>input:</strong></strong></p>
<pre>3 10 10<br />+ 1<br />+ 2<br />+ 47<br /></pre>
<p><strong><strong>output:</strong></strong></p>
<pre>infinity<br /></pre>
<p><em>If <span><em>V</em><sub>1</sub> = 10</span> then for  any <span><em>T</em></span> we'll have <span><em>V</em><sub>2</sub> = 10</span>.</em></p>


______________________________________________________
CTOI09_1||||||false||||||

<p>Mecho the bear has found a little treasure - the bees' secret honeypot,  which is full of honey! He was happily eating his newfound treasure until suddenly one bee saw him  and sounded the bee alarm. He knows that at this very moment hordes of bees will emerge from  their hives and start spreading around trying to catch him. He knows he has to leave the  honeypot and go home quickly, but the honey is so sweet that Mecho doesn't want to leave too  soon. Help Mecho determine the latest possible moment when he can leave.</p>
<p>Mecho's forest is represented by a square grid of <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.1.png" alt="" /></span> by  <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.1.png" alt="" /></span> unit cells, whose sides are parallel to the north-south and east-west directions. Each cell is occupied by a  tree, by a patch of grass, by a hive or by Mecho's home. Two cells are considered adjacent if one of  them is immediately to the north, south, east or west of the other (but not on a diagonal).  Mecho is a clumsy bear, so every time he makes a step, it has to be to an adjacent cell. Mecho can  only walk on grass and cannot go through trees or hives, and he can make at most <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.1.png" alt="" /></span> steps per minute. At the moment when the bee alarm is sounded, Mecho is in the grassy cell  containing the honeypot, and the bees are in every cell containing a hive (there may be  more than one hive in the forest). During each minute from this time onwards, the following  events happen in the following order:</p>
<ul>
<li> If Mecho is still eating honey, he decides whether to keep  eating or to leave. If he        continues eating, he does not move for the whole minute.  Otherwise, he leaves        immediately and takes up to <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.4.png" alt="" /></span> steps through the forest as described above. Mecho        cannot take any of the honey with him, so once he has moved he  cannot eat honey again. </li>
<li> After Mecho is done eating or moving for the whole minute, the  bees spread one unit        further across the grid, moving only into the grassy cells.  Specifically, the swarm of bees        spreads into every grassy cell that is adjacent to any cell  already containing bees.        Furthermore, once a cell contains bees it will always contain  bees (that is, the swarm        does not move, but it grows). </li>
</ul>
<p>In other words, the bees spread as follows: When the bee alarm is  sounded, the bees only occupy the cells where the hives are located. At the end of the first  minute, they occupy all grassy cells adjacent to hives (and still the hives themselves). At the  end of the second minute, they additionally occupy all grassy cells adjacent to grassy cells  adjacent to hives, and so on. Given enough time, the bees will end up simultaneously occupying all  grassy cells in the forest that are within their reach. Neither Mecho nor the bees can go outside the forest. Also, note that  according to the rules above, Mecho will always eat honey for an integer number of minutes. The bees catch Mecho if at any point in time Mecho finds himself in a  cell occupied by bees.</p>
<h2><strong>Task</strong></h2>
<p>Write a program that, given a map of the forest, determines the largest  number of minutes that Mecho can continue eating honey at his initial location, while still  being able to get to his home before any of the bees catch him.</p>
<h2><strong>Constraints</strong></h2>
<p><span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.5.png" alt="" /></span> -  the size (side length) of the map<br /> <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.5.png" alt="" /></span> -  the maximum number of steps Mecho can take in each minute</p>
<h2><strong>Input</strong></h2>
<p>The input contains several testcases.</p>
<p>The fist line contains the number of testcase T.</p>
<p>Each testcase has the form as following:</p>
<ul>
<li> The first line contains the integers <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.7.png" alt="" /></span> and  <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.7.png" alt="" /></span>,  separated by a space. </li>
<li> The next <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.9.png" alt="" /></span> lines represent the map of the forest. Each of these lines contains <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.9.png" alt="" /></span> characters   with each character representing one unit cell of the grid. The  possible characters and their   associated meanings are as follows:
<p><tt>T</tt> denotes a tree   <tt>G</tt> denotes a grassy cell   <tt>M</tt> denotes the initial location of Mecho and the honeypot,  which is also a grassy cell   <tt>D</tt> denotes the location of Mecho's home, which Mecho can  enter, but the bees cannot.   <tt>H</tt> denotes the location of a hive</p>
</li>
</ul>
<p><strong>Note:</strong> It is guaranteed that the map will contain exactly one  letter <tt>M</tt>, exactly one letter <tt>D</tt> and   at least one letter <tt>H</tt>. It is also guaranteed that there is a  sequence of adjacent letters <tt>G</tt> that   connects Mecho to his home, as well as a sequence of adjacent letters <tt>G</tt> that connects at    least one hive to the honeypot (i.e., to Mecho's initial location).  These sequences might be as    short as length zero, in case Mecho's home or a hive is adjacent to  Mecho's initial location.    Also, note that the bees cannot pass through or fly over Mecho's  home. To them, it is just like    a tree.</p>
<h2><strong>Output</strong></h2>
<p>For each test , your program must write to standard output a single line containing a  single integer: the maximum possible number of minutes that Mecho can continue eating honey  at his initial location, while still being able to get home safely. If Mecho cannot possibly reach his home before the bees catch him, the  number your program writes to standard output must be <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.11.png" alt="" /></span> instead.</p>
<h2><strong>Grading</strong></h2>
<p>For a number of tests, worth a total of 40 points, <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.12.png" alt="" /></span> will not exceed 60.</p>
<h2><strong>Example</strong></h2>
<p>For the input data:</p>
<p>&nbsp;1</p>
<pre>7 3<br />TTTTTTT<br />TGGGGGT<br />TGGGGGT<br />MGGGGGD<br />TGGGGGT<br />TGGGGGT<br />THHHHHT<br /></pre>
<p><strong>the correct result is:</strong></p>
<pre>1<br /></pre>
<p><strong>Explanation of the example:</strong> After eating honey for one minute,  Mecho can take the shortest path directly to the right and he will be home in another two minutes, safe from the bees.</p>
<p>For the input data:</p>
<p>1</p>
<p>7 3</p>
<p>TTTTTTT</p>
<p>TGGGGGT</p>
<p>TGGGGGT</p>
<p>MGGGGGD</p>
<p>TGGGGGT</p>
<p>TGGGGGT</p>
<p>TGHHGGT</p>
<p><strong>the correct result is:</strong></p>
<pre>2<br /></pre>
<p><strong>Explanation of the example:</strong> After eating honey for two minutes,  Mecho can take steps <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.13.png" alt="" /></span> during the third minute, then steps <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.13.png" alt="" /></span> during the fourth minute and steps <span><img src="http://www.spoj.plhttp://www.main.edu.pl/images/IOI2009/mch-en-tex.13.png" alt="" /></span> during the fifth minute.</p>


______________________________________________________
PARTPAL||||||true||||||


<p>Fernando is president of country named Palindromia. Every two years there are elections in Palindromia, but not normal elections. Elections in Palindromia are preformed in next steps:</p>
<ul>
<li>Candidate which at the moment isn't president gives to the current president one string <strong><em>O,</em></strong> which consist only of upper-case letters of english alphabet and character '?', string <em><strong>U,</strong></em> which consist only of upper-case letters of english alphabet, and integer <strong><em>K</em></strong>. </li>
</ul>
<ul>
<li>Current president has one day to compute all longest palindromes in the first string by the folowing rules:        <br /> 
<ul>
<li>Every '?' in <em><strong>O</strong></em> is substituted with one letter from <em><strong>U</strong></em>, <em><strong>i</strong></em>-th '?' in <strong><em>O</em></strong> with <strong><em>i</em></strong>-th letter in <em><strong>U</strong></em>.</li>
<li>Every time he search for palindromes, he may substitute some '?' with any letter, at most <em><strong>K</strong></em>-times.</li>
<li>If he finds palindrome, he goes to step 1.</li>
</ul>
</li>
</ul>
<ul>
<li>If he doesn't succeed, the candidate becomes the new president </li>
</ul>
<ul>
<li>If there are more candidates, go to step one.</li>
</ul>
<p>Fernando wants to stay president for at least two more years, so he asks you to write program which solves his problem.</p>
<blockquote><ol> </ol> 
<ul>
</ul>
<blockquote><ol> </ol></blockquote>
<ul>
</ul>
</blockquote>
<blockquote><br />

*******InputConstraints*******

<p>First line of input will contain string <em><strong>O</strong></em> ( 1 &lt;= lenght of <strong><em>O</em></strong> &lt;= 5 * 10^5 ), string which Fernando must compute to stay president. <em><strong>O</strong></em> will consist only of upper-case letters of english alphabet and character '?'. You may assume there is at least one '?' in <em><strong>O</strong></em>.</p>
<p>Second line will contain string <em><strong>U</strong></em>, string with leads for '?'s. <em><strong>i</strong></em>-th letter in <em><strong>U</strong></em> corespond to <em><strong>i</strong></em>-th '?' in <strong><em>O</em></strong>. <em><strong>U</strong></em> will consist only of upper-case letters of english alphabet.</p>
<p>Third line will contain integer <em><strong>K</strong></em> ( 0 &lt;= K &lt;= 300 ), number of replacements.</p>
<p><span style="font-size: large;"><strong><em><span style="text-decoration: underline;">It is guraranteed that there will be not more than 300 '?'s.</span></em></strong></span></p>

*******OutputConstraints*******

<p>In first line of output print integer <em><strong>S</strong></em>, lenght of the longest palindrome that Fernando could find.</p>
<p>In Second and next lines print string <em><strong>P</strong><strong><sub>i</sub></strong></em> and integer <strong><em>L<sub>i</sub>, </em></strong>longest palindrome and position where it starts. Each <em><strong>P</strong><strong><sub>i</sub></strong></em> must contain only upper-case letters of english alphabet.</p>
<p>&nbsp;</p>
<p><strong>Notes:</strong></p>
<ul>
<li>you must print all longest palindromes, in alphabeticaly increasing order</li>
<li>if two or more palindromes starts at the same position, print only one of them</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong><br />UDOVICAB??IVODUANAVOL?MILOVANA<br />CCA<br />1<br /><br /><strong>Output:</strong><br />15<br />ANAVOLIMILOVANA 16<br />UDOVICABACIVODU 1<br /><br /><span style="text-decoration: underline;"><span style="font-size: small;"><em><strong><br /><span style="font-size: large;">Note that both palindromes have 1 letter which Fernando has changed.</span></strong></em></span><br /></span><br /><br /><br /><strong>Input:<br /></strong>ABCDE??ABCDE??<br />ABCD<br />1<br /><strong><br />Output:</strong><br />5<br />CBABC 6<br /><br /><br /><strong>Input:</strong><br />ABCDE??ABCDEFG<br />FG<br />0<br /><br /><strong>Output:</strong><br />1<br />A 1<br />A 8<br />B 2<br />B 9<br />C 10<br />C 3<br />D 4<br />D 11<br />E 5<br />E 12<br />F 13<br />F 6<br />G 7<br />G 14<br /><br /></pre>
</blockquote>


______________________________________________________
INDEPCNT||||||true||||||


<p>Given integer <strong>N</strong> ( 1 &lt;= <strong>N</strong> &lt;= 60), output the number of <strong>Rooted Unlabeled Trees</strong> which have an odd number of independent sets.</p>
<p><strong>Rooted Unlabeled Tree:</strong> An Unlabeled Tree with a specified vertex as root and order amongst children does not matter. That is, two trees are considered equal if they are the same after some re-ordering of their non-root vertices. A rigorous definition is "two Rooted Unlabeled Trees T1 and T2 are equal if and only if there is a bijection <strong>f</strong> between T1 and T2 such that if root1 and root2 are the roots of T1 and T2 respectively, f(root1)=root2 and edge (u,v) is in T1 if and only if edge (f(u),f(v)) exists in T2"</p>
<p><strong>Independent Set:</strong> A set of vertices (possibly empty) is called an Independent Set if no two vertices of the set have an edge between them.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases.<br />Next T lines contain one number each, N.&nbsp;</p>

*******OutputConstraints*******

<p>Output T lines, one per test case. Each line should contain the number of rooted unlabeled trees which have an odd number of independent sets. Output the answer modulo 1000000007. That is, if the actual answer is A, output A%1000000007. (This is just to keep computations within 64 bit integers.)</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6</pre>
<pre>1</pre>
<pre>2</pre>
<pre>3</pre>
<pre>4</pre>
<pre>5</pre>
<pre>40</pre>
<pre><strong>Output:</strong></pre>
<pre>0</pre>
<pre>1</pre>
<pre>2</pre>
<pre>2</pre>
<pre>5</pre>
<pre>632355321</pre>


______________________________________________________
PERMPATT||||||true||||||


<p>Given a permutation P[1...n] of {1,2,...n}, you should output if the permutation contains a pattern of the form 1324. That is, do there exist indices &nbsp;1 &lt;= i1 &lt; i2 &lt; i3 &lt; i4 &lt;= n such that &nbsp;P[i1] &lt; P[i3] &lt; P[i2] &lt; P[i4]. For example, P = 6 8 5 4 9 3 7 2 1 10 contains one: the indices 1, 2, 7, 10 correspond to the sequence &nbsp;6 8 7 10 which is a 1324 pattern.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases</p>
<p>Each of the next T lines contains <strong>n </strong>(1 &lt;= n &lt;= 100000), followed by <strong>n</strong>&nbsp;integers, representing a permutation of [1,2,..,n].</p>
<p>SUM( n * log<sub>2</sub>(n)) over all test cases &lt;= 10<sup>8</sup>. Do not assume anything else about the number of test cases or their distribution.</p>

*******OutputConstraints*******

<p>Output T lines, one per test case: "yes"(without quotes) if the permutation contains a 1324 pattern or "no" (without quotes) otherwise.</p>
<p><strong>Warning: </strong>Huge I/O</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre><strong></strong>2</pre>
<pre>10 6 8 5 4 9 3 7 2 1 10</pre>
<pre>10 5 3 4 7 9 10 8 6 2 1</pre>
<pre><strong>Output:</strong></pre>
<pre><strong></strong>yes</pre>
<pre>no</pre>


______________________________________________________
RNDORDER||||||true||||||


<p>You are given n symbols a<sub>1</sub>, a<sub>2</sub>,..., a<sub>n</sub>. You are told that there is a total ordering of the symbols. That is, there is a permutation [P1, P2,..., Pn] of [1,2,...,n] such that a<sub>P1</sub>&lt; a<sub>P2 </sub>&lt;...&lt; a<sub>Pn</sub>. You are trying to figure out the order by doing comparisons. The process you follow for determining the order is as follows:</p>
<ul>
<li>Compare [a<sub>1</sub>, a<sub>2</sub>]</li>
<li>Compare [a<sub>2</sub>, a<sub>3</sub>], [a<sub>1</sub>, a<sub>3</sub>]&nbsp;</li>
<li>Compare [a<sub>3</sub>, a<sub>4</sub>], [a<sub>2</sub>, a<sub>4</sub>], [a<sub>1</sub>, a<sub>4</sub>]</li>
<li>....</li>
<li>....</li>
<li>Compare [a<sub>n-1</sub>,a<sub>n</sub>], [a<sub>n-2</sub>,a<sub>n</sub>],..., [a<sub>1</sub>, a<sub>n</sub>]</li>
</ul>
<p>Note that you compare in the order specified. That is you compare [a<sub>2</sub>, a<sub>3</sub>], then and only then do you compare [a<sub>1</sub>, a<sub>3</sub>].</p>
<p>Definition of Compare[a<sub>i</sub>, a<sub>j</sub>] (i &lt; j)</p>
<ul>
<li>If Compare [a<sub>i</sub>, a<sub>j</sub>] = 1, it means a<sub>i</sub> &gt; a<sub>j</sub>. If Compare[a<sub>i</sub>, a<sub>j</sub>] = -1, it means a<sub>i</sub> &lt; a<sub>j</sub>.&nbsp;</li>
<li>Compare is consistent. Suppose, that you queried [a<sub>2</sub>, a<sub>6</sub>] and it was already established [a<sub>2</sub> &lt; a<sub>6</sub>] (because for example a<sub>2</sub> &lt; a<sub>5</sub> and a<sub>5</sub> &lt; a<sub>6</sub> - since both of these comparisons happen earlier), then [a<sub>2</sub>, a<sub>6</sub>] returns -1.</li>
<li>If no relationship is known between a<sub>i</sub> and a<sub>j</sub>, Compare[a<sub>i</sub>, a<sub>j</sub>] = 1 with probablity 1/2 and -1 with probability 1/2</li>
</ul>
<p>Your task is to output the probability that a<sub>1</sub> is the smallest element of the final ordering so obtained.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases</p>
<p>Each of the next T lines contains one number each, <strong>n</strong>(1 &lt;= n &lt;= 1000).&nbsp;</p>

*******OutputConstraints*******

<p>Output T lines in total, one per test case: Probability that a<sub>1</sub> is indeed the smallest element at the end of the comparisons. Your output will be judged correct if it differs by no more than 10<sup>-9</sup> to the reference answer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>3</pre>
<pre>1</pre>
<pre>2</pre>
<pre>3

<strong>Output:</strong>
</pre>
<pre>1</pre>
<pre>0.500</pre>
<pre>0.3750000</pre>
<pre><strong>Explanation:</strong></pre>
<pre>n = 1 is trivial</pre>
<pre>For n = 2, only comparison is [a<sub>1</sub>, a<sub>2</sub>]. a1 is lower with probability 1/2.</pre>
<pre>For n = 3, a1 is not the least element if either (a<sub>1</sub> &gt; a<sub>2</sub>) or (a<sub>1</sub> &lt; a<sub>2</sub> and a<sub>3</sub> &lt; a<sub>2</sub> and a<sub>3</sub> &lt; a<sub>1</sub>).&nbsp;</pre>
<pre>So, probability that a<sub>1</sub> is not the least element = 1/2 + 1/8 = 5/8. Probability that a<sub>1</sub> is the least = 3/8 = 0.375.</pre>


______________________________________________________
ARRANGE2||||||false||||||

<p>Given A and B, how many numbers between A and B (with no leading 0's) rearrange their digits when multiplied by 2 ?<br /><br />Input :<br />The first line contains the number of test cases T. T lines follow, containing two integers A and B.<br /><br />Output :<br />Output T lines, one for each test case containing the desired answer for the corresponding test case.<br /><br />Sample Input :<br />2<br />1 100<br />499875921 499875921<br /><br />Sample Output :<br />0<br />1<br /><br />Constraints :<br />1 &lt;= T &lt;= 10000<br />1 &lt;= A &lt;= B &lt;= 10000000000 (10^10)</p>


______________________________________________________
SUMSLOPE||||||false||||||

<p>A digit in a number N is a minima if it is lesser than both the digits adjacent to it. Similarly, a digit is a maxima if it is greater than both the digits adjacent to it. The slope of N is the number of digits in N (leaving out the first and the last digit) which are either a minima or a maxima. Given A and B, count the sum of the slopes of all numbers between A and B.<br /><br />Input :<br />The first line contains the number of test cases T. Each of the next T lines contains two integers A and B.<br /><br />Output :<br />Output T lines one for each test case, containing the required sum for the corresponding test case.<br /><br />Sample Input :<br />3<br />101 101<br />1 100<br />100 150<br /><br />Sample Output :<br />1<br />0<br />19<br /><br />Constraints :<br />1 &lt;= T &lt;= 50000<br />1 &lt;= A &lt;= B &lt;= 1000000000000000 (10^15)</p>


______________________________________________________
STJEPAN||||||true||||||


<p>&nbsp;</p>
<p>Little Stjepan lives in a village which can be represented as X-axis. In village there are N beer machines, machine i has x coordinate P<sub>i</sub> and needs T<sub>i</sub> seconds to produce 1 liter of beer.</p>
<p>This year M tourists( one by one because there is only one guide, Stjepan ) will visit his village, tourist i will arrive at point A<sub>i</sub>, want to drink L<sub>i</sub> liters of beer but will have energy to walk at most D<sub>i</sub> seconds( that is D<sub>i</sub> units of length ), he will walk to beer machine Stjepan suggest him and as soon as machine produces L<sub>i</sub> liters of beer tourist will be able to enjoy it.</p>
<p>As Stjepan wants all tourists to come next year too he will choose machine for each tourist so that tourist can get a beer as soon as possible. Help Stjepan to do that and write program which will output total passed time from arrival of tourist to getting a beer. If tourist can't get a beer then his time is 0.</p>
<p>Note that tourists are independent and machines can be used multiple times.</p>

*******InputConstraints*******

<p>On first line of standard input you are given two integers (2 &le; N &le; 250 000, 1 &le; M &le; 500 000), number of beer machines and number of tourists.</p>
<p>Next 5 lines contain 4 integers( X<sub>0</sub>, A, B, C ) each and they describe arrays P, T, A, L and D, respectively.<br />With these four numbers i-th element of array is defined as X<sub>i</sub> = 1 + ( ( X<sub>i-1</sub> * A + B ) mod C ), where indices are 1-based and X<sub>0</sub> is given in input.</p>
<p>1 &le; X<sub>0</sub>, A, B, C&nbsp;&le;&nbsp;10<sup>9</sup>.</p>
<p><strong>Note:</strong>&nbsp;Author's solution doesn't depend on properties of pseudo-random generator.</p>

*******OutputConstraints*******

<p>Output total time from task statement.&nbsp;Answer will fit in 64-bit signed integer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 302px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">3 4</div>3 4
1 4 3 6
2 4 4 10
3 8 1 10
3 1 8 7
1 3 2 6
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 302px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">1 3 2</div>
<strong>Output:</strong>
53</pre>
<pre><span style="white-space: normal; font-size: 12px; color: #181818; line-height: 18px;"><span style="color: #000000;"><strong>Explanation</strong></span><span class="sy4"><span style="color: #000000;"><strong>:</strong></span></span><span style="color: #000000;">&nbsp;<br />Machines( P, T ) : ( 2, 3 ), ( 6, 7 ), ( 4, 3 )<br /></span></span><span style="white-space: normal; font-size: 12px; line-height: 18px;">Tourists( A, L, D ) : ( &nbsp;6, 5, 6 ), ( 10, 7, 3 ), ( 2, 2, 6 ), ( 8, 4, 3 )</span></pre>
<pre><span style="white-space: normal; font-size: 12px; color: #181818; line-height: 18px;"><span style="color: #000000;">Tourist&nbsp;</span><span class="co2"><span style="color: #000000;">#1 -&gt; Machine #3 -&gt; 17 time units<br /></span></span></span><span style="white-space: normal; font-size: 12px; line-height: 18px;">Tourist #2 -&gt; No beer :( -&gt; 0 time units<br />Tourist #3 -&gt; Machine #1 -&gt; 6 time units<br />Tourist #4 -&gt; Machine #2 -&gt; 30 time units</span></pre>


______________________________________________________
AVOIDSOS||||||false||||||

<p>You are given a grid having N rows and M columns. Some squares are contain letters 'S' or 'O', whereas the other squares are unfilled. A filled grid is called "Avoiding SOS" if there is no occurance of the string "SOS" in the grid either vertically or horizontally. In how many ways can the grid be completed by filling the unfilled squares with either 'S' or 'O' such that the resultant grid is "Avoiding SOS" ?<br /><br /><br />Input :<br />The first line contains T the number of test cases. T test cases follow. The first line for the test case contains N and M, the number of rows and columns in the grid respectively. N lines follow, each containing M characters. The jth character in the ith line is a '.' if the corresponding square in the grid is unfilled, otherwise it contains either the letter 'S' or the letter 'O'. A blank line seperates two test cases.<br /><br />Output :<br />Output T lines, one for each test case, containing the desired answer for the corresponding test case. Output each result modulo 1000000007.<br /><br />Sample Input :<br />5<br />2 3<br />...<br />...<br /><br />1 4<br />....<br /><br />3 3<br />.O.<br />S.S<br />.O.<br /><br />1 3<br />SOS<br /><br />1 3<br />SOO<br /><br />Sample Output :<br />49<br />12<br />9<br />0<br />1<br /><br />Constraints :<br />1 &lt;= T &lt;= 100<br />1 &lt;= N,M &lt;= 8</p>


______________________________________________________
VLATTICE||||||false||||||

<p>Consider a N*N*N lattice. One corner is at (0,0,0) and the opposite one is at (N,N,N). How many lattice points are visible from corner at (0,0,0) ? A point X is visible from point Y iff no other lattice point lies on the segment joining X and Y. <br />&nbsp;<br />Input : <br />The first line contains the number of test cases T. The next T lines contain an interger N <br />&nbsp;<br />Output : <br />Output T lines, one corresponding to each test case. <br />&nbsp;<br />Sample Input : <br />3 <br />1 <br />2 <br />5 <br />&nbsp;<br />Sample Output : <br />7 <br />19 <br />175 <br />&nbsp;<br />Constraints : <br />T &lt;= 50 <br />1 &lt;= N &lt;= 1000000</p>


______________________________________________________
BUILDING||||||false||||||

<p>A certain city has M buildings, all having a width of 1. The ith building has height h_i units. The outline of the city can be seen by everyone passing along, and you wish to place an advertisement in front. You want the advertisement to be totally contained within the boundary defined by the outline of the city. The advertisement should be rectangular in shape, and its base should be at ground level. Also, it should have an integral height and its vertical edges should coincide with the vertical edges of the buildings. Now you wonder, for each building x, how many ways are there to place an advertisement such that it hides (fully or partially) building x ?<br /><br />Input :<br />The first line contains an integer M, the number of buildings. The second line contains M space seperated integers, the heights of the buildings.<br /><br />Output :<br />Output M integers. The ith integer is the number of possible advertisements which cover the ith building partially or fully.<br /><br />Sample Input :<br />4<br />2 1 4 4<br /><br />Sample Outout :<br />5 6 12 10<br /><br />Constraints :<br />1 &lt;= M &lt;= 100000<br />1 &lt;= h_i &lt;= 10000</p>


______________________________________________________
ACAB||||||true||||||


<p>Cops are one of the most fascinating types of people. In the movies they are usually shown as fat and lazy, but they are so much more! Our today's specimen, officer Acab is, for example, very much into philosophy. All the criminals are afraid of Acab so when he appears in a city no criminals can come there. He's often engaged in car chases, so he usually asks himself the following questions: If I know a criminal has to travel from city a to city b, how many cities are there (other than a and b) such that there are no other cops there, and if I come to that city the criminal won't be able to accomplish his trip? If I sort those cities by distance from a, which one will be the k-th in the sorted list? How many roads are there such that there are no other cops on them, and if I'm present on that road the criminal won't be able to travel from a to b? Which is the k-th such road if I sort the available roads by their distance from a?</p>
<p><br />Given a list of bidirectional roads that connect the cities write a program that will answer Acab's questions. In the beginning we know that there are no other cops in any of the cities. There will be one or more paths between each pair of cities.</p>
<p>Sometimes Acab's cop-friends contact him to tell him they have entered a city or road. There is never more than one cop present in a city or on a road. Thus, when a road or city is reported for the second time, we assume the cop has left there. This only means that after each even report of the same city or a road there are no cops there, and for odd reports there is a cop there.</p>
<p><br /><strong>Note:</strong> we define the distance of a road from a city as the minimum of the distances of its endpoints from that city. Even though Acab is a good cop, he doesn't have any special powers such as multilocation, so he can only be present in one city at a time. If you, for some reason, find two cities or roads equidistant from the city a, output the one with the smaller index. <strong>Also, the other cops aren't as good as Acab, so they only block Acab from visiting a city, and not the criminals.</strong></p>

*******InputConstraints*******

<p>The first line of input contains two integers N and M (1 &lt;= N &lt;= M &lt;= 100000).<br />The next M lines contain a pair of integers a and b (1 &lt;= a, b &lt;= N).<br />All the cities are numbered from 1 to N.<br />The next line contains a single integer Q (1 &lt;= Q &lt;= 200000).<br />The next Q lines contain queries. There are six possible types of queries:<br />&nbsp;&nbsp; &nbsp;1 n&nbsp;&nbsp; -&nbsp; a cop has contacted Acab to let him know he's in city n<br />&nbsp;&nbsp; &nbsp;2 e&nbsp;&nbsp; -&nbsp; a cop has contacted Acab to let him know he's on the road e<br />&nbsp;&nbsp; &nbsp;3 a b&nbsp; -&nbsp; tell Acab how many cities he can block the criminal with<br />&nbsp;&nbsp; &nbsp;4 a b&nbsp; -&nbsp; tell Acab how many roads he can block the criminal with<br />&nbsp;&nbsp; &nbsp;5 a b k&nbsp; -&nbsp; tell Acab which is the k-th city he can block the criminal with<br />&nbsp;&nbsp; &nbsp;6 a b k&nbsp; -&nbsp; tell Acab which is the k-th road he can block the criminal with</p>

*******OutputConstraints*******

<p>For each query of type 3, 4, 5 or 6 output a single line containing the answer. If for a query of type 5 or 6 k is greater than the actual number of possible cities, output -1. Also, in queries 2 and 6 the number of the road is assumed to be its index from the input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />9 10<br />1 2<br />1 3<br />2 4<br />2 5<br />4 5<br />4 6<br />3 7<br />3 8<br />7 8<br />8 9<br />10<br />3 6 9<br />4 6 9<br />5 6 9 2<br />6 6 9 2<br />1 2<br />5 6 9 2<br />2 1<br />6 6 9 2<br />1 2<br />5 6 9 2<br /><br /><strong>Output:</strong><br />5<br />4<br />2<br />1<br />1<br />2<br />2<br /><br /></pre>
<p><strong>Explanation:</strong><br />In the first query, there are 5 blockable cities: 4, 2, 1, 3, 8.<br />In the second query there are 4 blockable roads: 6, 1, 2, 10.<br />In the third query the second city is 2 (4, 2, 1, 3, 8).<br />In the fourth query the second road is 1 (6, 1, 2, 10).<br />In the fifth query we've been reported there's a cop in city 2.<br />In the sixth query the second blockable city is 1 (city 2 already contains a cop).<br />In the seventh query we've been reported there's a cop on road 1.<br />In the eighth query the second blockable road is 2 (road 1 already contains a cop).<br />In the ninth query we've been reported the cop from city 2 has left.<br />In the tenth query the second city is 2 again.</p>


______________________________________________________
CFPARTY||||||true||||||


<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;"><span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;people came to a party. Then those, who had no friends among people at the party, left. Then those, who had exactly 1 friend among those who stayed, left as well. Then those, who had exactly&nbsp;<span style="font-size: 18px; font-family: 'times new roman';">2,&thinsp;3,&thinsp;...,&thinsp;<em>n</em>&thinsp;-&thinsp;1</span>&nbsp;friends among those who stayed by the moment of their leaving, did the same.</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 1em; margin-left: 0px; padding: 0px;">What is the maximum amount of people that could stay at the party in the end?</p>

*******InputConstraints*******

<p>The first input line contains one number&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>t</em></span>&nbsp;&mdash; amount of tests (<span style="font-size: 18px; font-family: 'times new roman';">1&thinsp;&le;&thinsp;<em>t</em>&thinsp;&le;&thinsp;10<sup>5</sup></span>). Each of the following&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>t</em></span>&nbsp;lines contains one integer number&nbsp;<span style="font-size: 18px; font-family: 'times new roman';"><em>n</em></span>&nbsp;(<span style="font-size: 18px; font-family: 'times new roman';">1&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le;&thinsp;10<sup>5</sup></span>).</p>

*******OutputConstraints*******

<p>For each test output in a separate line one number &mdash; the maximum amount of people that could stay in the end.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
3

<strong>Output:</strong>
1
</pre>


______________________________________________________
ZIGZAG||||||true||||||


<p>A N&times;N matrix is filled with numbers 1 to N<sup>2</sup>, diagonally in a zig-zag fashion.</p>
<p>The table below shows numbers in the matrix for N = 6.</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="34">
<p style="text-align: center;">1</p>
</td>
<td width="34">
<p style="text-align: center;">2</p>
</td>
<td width="34">
<p style="text-align: center;">6</p>
</td>
<td width="34">
<p style="text-align: center;">7</p>
</td>
<td width="34">
<p style="text-align: center;">15</p>
</td>
<td width="34">
<p style="text-align: center;">16</p>
</td>
</tr>
<tr>
<td width="34">
<p style="text-align: center;">3</p>
</td>
<td width="34">
<p style="text-align: center;">5</p>
</td>
<td width="34">
<p style="text-align: center;">8</p>
</td>
<td width="34">
<p style="text-align: center;">14</p>
</td>
<td width="34">
<p style="text-align: center;">17</p>
</td>
<td width="34">
<p style="text-align: center;">26</p>
</td>
</tr>
<tr>
<td width="34">
<p style="text-align: center;">4</p>
</td>
<td width="34">
<p style="text-align: center;">9</p>
</td>
<td width="34">
<p style="text-align: center;">13</p>
</td>
<td width="34">
<p style="text-align: center;">18</p>
</td>
<td width="34">
<p style="text-align: center;">25</p>
</td>
<td width="34">
<p style="text-align: center;">27</p>
</td>
</tr>
<tr>
<td width="34">
<p style="text-align: center;">10</p>
</td>
<td width="34">
<p style="text-align: center;">12</p>
</td>
<td width="34">
<p style="text-align: center;">19</p>
</td>
<td width="34">
<p style="text-align: center;">24</p>
</td>
<td width="34">
<p style="text-align: center;">28</p>
</td>
<td width="34">
<p style="text-align: center;">33</p>
</td>
</tr>
<tr>
<td width="34">
<p style="text-align: center;">11</p>
</td>
<td width="34">
<p style="text-align: center;">20</p>
</td>
<td width="34">
<p style="text-align: center;">23</p>
</td>
<td width="34">
<p style="text-align: center;">29</p>
</td>
<td width="34">
<p style="text-align: center;">32</p>
</td>
<td width="34">
<p style="text-align: center;">34</p>
</td>
</tr>
<tr>
<td width="34">
<p style="text-align: center;">21</p>
</td>
<td width="34">
<p style="text-align: center;">22</p>
</td>
<td width="34">
<p style="text-align: center;">30</p>
</td>
<td width="34">
<p style="text-align: center;">31</p>
</td>
<td width="34">
<p style="text-align: center;">35</p>
</td>
<td width="34">
<p style="text-align: center;">36</p>
</td>
</tr>
</tbody>
</table>
<p>There is a rabbit in the cell containing number 1. A rabbit can jump to a neighboring cell (up, down, left or right) if that cell exists.</p>
<p>Given K valid rabbit jumps, write a program that will calculate the sum of numbers of all cells that rabbit visited (add the number to the sum each time rabbit visits the same cell).&nbsp;</p>

*******InputConstraints*******

<p>The first line contains two integers N and K (1 &le; N &le; 100<span style="font-size: 4.0pt; line-height: 110%;"> </span>000, 1 &le; K &le; 300<span style="font-size: 4.0pt; line-height: 110%;"> </span>000), the size of the matrix and the number of rabbit jumps.</p>
<p>The second line contains a sequence of K characters 'U', 'D', 'L' and 'R', describing the direction of each jump. The sequence of jumps will not leave the matrix at any moment.</p>

*******OutputConstraints*******

<p>Output one integer, the sum of numbers on visited cells.</p>
<p><strong>Note:</strong> This number doesn't always fit in 32-bit integer type.</p>

*******IOTestCases*******

<table style="width: 100%;" border="0" frame="void" align="center">
<tbody>
<tr>
<td align="left" valign="top">
<pre><strong>Input:</strong>
6 8
DDRRUULL

<strong>Output:</strong>
47</pre>
</td>
<td align="left" valign="top">
<pre><strong>Input:</strong>
3 8
DDRRUULL

<strong>Output:</strong>
41</pre>
</td>
<td align="left" valign="top">
<pre><strong>Input:</strong>
6 10
RRRRRDDDDD

<strong>Output:</strong>
203</pre>
</td>
</tr>
</tbody>
</table>
<p><strong>Clarification for the first sample:</strong> The rabbit visits cells 1, 3, 4, 9, 13, 8, 6, 2 and 1. <strong>Clarification for the second sample: </strong>The rabbit visits cells 1, 3, 4, 8, 9, 7, 6, 2 and 1. <strong>Clarification for the third sample: </strong>The rabbit visits cells 1, 2, 6, 7, 15, 16, 26, 27, 33, 34 and 36.</p>


______________________________________________________
CPATTERN||||||true||||||


<p>A particular subgroup of K (1 &lt;= K &lt;= 25,000) of Farmer John's cows likes to make trouble. When placed in a line, these troublemakers stand together in a particular order. In order to locate these troublemakers, FJ has lined up his N (1 &lt;= N &lt;= 100,000) cows. The cows will file past FJ into the barn, staying in order. FJ needs your help to locate suspicious blocks of K cows within this line that might potentially be the troublemaking cows.&nbsp;<br /><br />FJ distinguishes his cows by the number of spots 1..S on each cow's coat (1 &lt;= S &lt;= 25). While not a perfect method, it serves his purposes. FJ does not remember the exact number of spots on each cow in the subgroup of troublemakers. He can, however, remember which cows in the group have the same number of spots, and which of any pair of cows has more spots (if the spot counts differ). He describes such a pattern with a sequence of K ranks in the range 1..S. For example, consider this sequence:&nbsp;</p>
<pre>   1 4 4 3 2 1</pre>
<p>In this example, FJ is seeking a consecutive sequence of 6 cows from among his N cows in a line. Cows #1 and #6 in this sequence have the same number of spots (although this number is not necessarily 1) and they have the smallest number of spots of cows #1..#6 (since they are labeled as '1'). Cow #5 has the second-smallest number of spots, different from all the other cows #1..#6. Cows #2 and #3 have the same number of spots, and this number is the largest of all cows #1..#6.&nbsp;<br /><br />If the true count of spots for some sequence of cows is:&nbsp;</p>
<pre>   5 6 2 10 10 7 3 2 9</pre>
<p>then only the subsequence 2 10 10 7 3 2 matches FJ's pattern above.&nbsp;<br /><br />Please help FJ locate all the length-K subsequences in his line of cows that match his specified pattern.</p>

*******InputConstraints*******

<p>Line 1: Three space-separated integers: N, K, and S&nbsp;<br /><br />Lines 2..N+1: Line i+1 describes the number of spots on cow i.&nbsp;<br /><br />Lines N+2..N+K+1: Line i+N+1 describes pattern-rank slot i.</p>

*******OutputConstraints*******

<p>Line 1: The number of indices, B, at which the pattern matches&nbsp;<br /><br />Lines 2..B+1: An index (in the range 1..N) of the starting location where the pattern matches.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
9 6 10
5
6
2
10
10
7
3
2
9
1
4
4
3
2
1

<strong>Output:</strong>
1
3
</pre>


______________________________________________________
KOLACI||||||true||||||


<p>Darko and Marko are twins and they love to eat cookies. Their grandma Mara loves to bake cookies, but she doesn't like the fact that Darko and Marko eat them too fast.</p>
<p>To teach her grandsons to eat slower, Mara turned it into a game. Mara will bake N cookies and assign them with integers 1 to N. Then she will arrange them in a circle such that each cookie i is between to cookie i&minus;1 and i+1 except for cookies 1 and N that are neighbors.</p>
<p>Mara knows a recipe for 26 different types of cookies. We will denote a cookie type with lower case english letters 'a' to 'z'.</p>
<p>Darko and Marko will each get one cookie every 5 minutes. Mara will say one integer out loud. Darko and Marko will search for a cookie with this number, but will eat two neighboring cookies. This procedure is repeated until one or two cookies are left on the table. Then the game ends and Mara eats the remaining cookies.</p>
<p><img style="border: 0px initial initial;" src="../../content/kalinov:kolaci" alt="" width="620" height="198" /></p>
<p>The game can be represented with a sequence of (N&minus;1) div 2 integers that Mara said out loud. For example, the illustrations above can be represented with a sequence (4, 8, 6). Two games are considered different if their respective sequences are different.</p>
<p>After a few games Mara noticed that Marko and Darko often fight during the game. In fact, they fight every time when the two neighboring cookies are of different types because they can't decide which one will get which cookie.</p>
<p>Mara decided to count the number of ways to play a game in a way to avoid such situations.</p>
<p>Given a cookie type for each of N cookies, write a program that will calculate the number of ways to play a game such that Darko and Marko will not fight. This number can get very large, so output the remainder of division by 10007 instead.</p>

*******InputConstraints*******

<p>The first line contains one integer N (3 &le; N &le; 75), the number of cookies.</p>
<p>The second line contains a sequence of N lower case english letters, types of cookies in order they are arranged in a circle.</p>

*******OutputConstraints*******

<p>Output a single integer, the total number of ways to play a game that will prevent Darko and Marko from fighting modulo 10007.</p>

*******IOTestCases*******

<table style="width: 100%;" border="0" frame="void" align="center">
<tbody>
<tr>
<td align="left" valign="top">
<pre><strong>Input:</strong>
8
cibaboca

<strong>Output:</strong>
4</pre>
</td>
<td align="left" valign="top">
<pre><strong>Input:</strong>
5
aabab

<strong>Output:</strong>
5</pre>
</td>
<td align="left" valign="top">
<pre><strong>Input:</strong>
11
fffffffffff

<strong>Output:</strong>
388</pre>
</td>
</tr>
</tbody>
</table>
<p>Clarification for the first example: This sample corresponds to illustration above. Four valid sequences are (4, 8, 2), (4, 8, 6), (8, 4, 2) i (8, 4, 6).</p>
<p>Clarification for the second example: Five valid sequences are (3, 1), (5, 2), (4, 4), (4, 1) i (4, 2).</p>
<p>Clarification for the third example: All cookies share the same type, so Darko and Marko can't get into fight no matter what. In each step Mara can say any integer remaining on the table, so the total number of games is equal to 11&sdot;9&sdot;7&sdot;5&sdot;3 = 10395. 388 is the remainder of division by 10007.</p>


______________________________________________________
CT25C||||||true||||||


<p>There are <span><em>n</em></span> cities numbered from 1 to <span><em>n</em></span> in Berland. Some of them are connected by two-way roads. Each road has  its own length &mdash; an integer number from 1 to 1000. It is known that from  each city it is possible to get to any other city by existing roads.  Also for each pair of cities it is known the distance between  them. Berland Government plans to build <span><em>k</em></span> new roads. For each of the planned road it is known its length, and  what cities it will connect. To control the correctness of the  construction of new roads, after the opening of another road Berland  government wants to check the sum of the shortest distances between all  pairs of cities. Help them &mdash; for a given matrix of distances on  the old roads and plans of all new roads, find out how the sum of the  shortest distances between all pairs of cities changes after  construction of each road.</p>

*******InputConstraints*******

<p>The first line contains integer <span><em>n</em></span> (<span>2&thinsp;&le;&thinsp;<em>n</em>&thinsp;&le;&thinsp;300</span>) &mdash; amount of cities in Berland. Then there follow <span><em>n</em></span> lines with <span><em>n</em></span> integer numbers each &mdash; the matrix of distances. <span><em>j</em></span>-th integer in the <span><em>i</em></span>-th row &mdash; <span><em>d</em><sub><em>i</em>,&thinsp;<em>j</em></sub></span>, the distance between cities <span><em>i</em></span> and <span><em>j</em></span>. It is guaranteed that <span><em>d</em><sub><em>i</em>,&thinsp;<em>i</em></sub>&thinsp;=&thinsp;0,&thinsp;<em>d</em><sub><em>i</em>,&thinsp;<em>j</em></sub>&thinsp;=&thinsp;<em>d</em><sub><em>j</em>,&thinsp;<em>i</em></sub></span>,  and a given matrix is a matrix of distances for some set of  two-way roads with integer lengths from 1 to 1000, such that from each  city it is possible to get to any other city using these roads.</p>
<p>Next line contains integer <span><em>k</em></span> (<span>1&thinsp;&le;&thinsp;<em>k</em>&thinsp;&le;&thinsp;300</span>) &mdash; amount of planned roads. Following <span><em>k</em></span> lines contain the description of the planned roads. Each road is described by three space-separated integers <span><em>a</em><sub><em>i</em></sub></span>, <span><em>b</em><sub><em>i</em></sub></span>, <span><em>c</em><sub><em>i</em></sub></span> (<span>1&thinsp;&le;&thinsp;<em>a</em><sub><em>i</em></sub>,&thinsp;<em>b</em><sub><em>i</em></sub>&thinsp;&le;&thinsp;<em>n</em>,&thinsp;<em>a</em><sub><em>i</em></sub>&thinsp;&ne;&thinsp;<em>b</em><sub><em>i</em></sub>,&thinsp;1&thinsp;&le;&thinsp;<em>c</em><sub><em>i</em></sub>&thinsp;&le;&thinsp;1000</span>) &mdash; <span><em>a</em><sub><em>i</em></sub></span> and <span><em>b</em><sub><em>i</em></sub></span> &mdash; pair of cities, which the road connects, <span><em>c</em><sub><em>i</em></sub></span> &mdash; the length of the road. It can be several roads between a pair of cities, but no road connects the city with itself.</p>

*******OutputConstraints*******

<p>Output <span><em>k</em></span> lines, each line contains one integers <span><em>q</em><sub><em>i</em></sub></span> (<span>1&thinsp;&le;&thinsp;<em>i</em>&thinsp;&le;&thinsp;<em>k</em></span>). <span><em>q</em><sub><em>i</em></sub></span> should be equal to the sum of shortest distances between all pairs of  cities after the construction of roads with indexes from 1 to <span><em>i</em></span>.  Roads are numbered from 1 in the input order. Each pair of cities  should be taken into account in the sum exactly once, i. e. we count  unordered pairs.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>3<br />0 4 5<br />4 0 9<br />5 9 0<br />2<br />2 3 8<br />1 2 1</pre>
<br /><br /><br /><br /><strong>Output:</strong><br />17 <br />12<br /></pre>


______________________________________________________
CROBOTS||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In a modernized warehouse, robots are used to fetch the goods. Careful</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">planning is needed to ensure that the robots reach their destinations with-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">out crashing into each other. Of course, all warehouses are rectangular,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and all robots occupy a circular floor space with a diameter of 1 meter.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Assume there are N robots, numbered from 1 through N. You will get to</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">know the position and orientation of each robot, and all the instructions,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">which are carefully (and mindlessly) followed by the robots. Instructions</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">are processed in the order they come. No two robots move simultane-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">ously; a robot always completes its move before the next one starts mov-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">ing.</div>
<p>&nbsp;</p>
<p>In a modernized warehouse, robots are used to fetch the goods. Careful&nbsp;planning is needed to ensure that the robots reach their destinations without crashing into each other. Of course, all warehouses are rectangular,&nbsp;and all robots occupy a circular floor space with a diameter of 1 meter.&nbsp;Assume there are N robots, numbered from 1 through N. You will get to&nbsp;know the position and orientation of each robot, and all the instructions,&nbsp;which are carefully (and mindlessly) followed by the robots. Instructions&nbsp;are processed in the order they come. No two robots move simultaneously; a robot always completes its move before the next one starts moving.</p>
<div>
<div>A robot crashes with a wall if it attempts to move outside the area of&nbsp;the warehouse, and two robots crash with each other if they ever try to&nbsp;occupy the same spot.</div>
</div>
<p>&nbsp;</p>
<p><img src="http://www.spoj.plhttp://alex.acm.org/spoj_pics/crashing_robots.jpg" alt="" width="450" height="211" /></p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line of input is K, the number of test cases. Each test case starts&nbsp;with one line consisting of two integers, 1 &le; A, B &le; 100, giving the size of&nbsp;the warehouse in meters. A is the length in the EW-direction, and B in the&nbsp;NS-direction.</p>
<div>
<div>The second line contains two integers, 1 &le; N, M &le; 100, denoting the&nbsp;numbers of robots and instructions respectively.</div>
<div>Then follow N lines with two integers, 1 &le; Xi &le; A, 1 &le; Yi &le; B and&nbsp;one letter (N, S, E or W), giving the starting position and direction of each&nbsp;robot, in order from 1 through N. No two robots start at the same position.</div>
<div>
<div>Finally there are M lines, giving the instructions in sequential order.&nbsp;An instruction has the following format:</div>
</div>
</div>
<div>
<div>&lt;robot #&gt; &lt;action&gt; &lt;repeat&gt;</div>
</div>
<div>
<div>Where &lt;action&gt; is one of:</div>
<div>
<ul>
<li>L: turn left 90 degrees,</li>
<li>R: turn right 90 degrees, or</li>
<li>F: move forward one meter,</li>
</ul>
</div>
<p>&nbsp;</p>
<p>and 1 &le; &lt;repeat&gt; &le; 100 is the number of times the robot should perform&nbsp;this single move.</p>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output one line for each test case:</p>
<div>
<ul>
<li>Robot i crashes into the wall, if robot i crashes into a wall. (A&nbsp;robot crashes into a wall if Xi = 0, Xi = A + 1, Yi = 0 or Yi = B + 1.)</li>
<li>Robot i crashes into robot j, if robots i and j crash, and i is the&nbsp;moving robot.</li>
<li>OK, if no crashing occurs.</li>
</ul>
</div>
<p>&nbsp;</p>
<p>Only the first crash is to be reported.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
5 4
2 2
1 1 E
5 4 W
1 F 7
2 F 7
5 4
2 4
1 1 E
5 4 W
1 F 3
2 F 1
1 L 1
1 F 3
5 4
2 2
1 1 E
5 4 W
1 L 96
1 F 2
5 4
2 3
1 1 E
5 4 W
1 F 4
1 L 1
1 F 20


<strong>Output:</strong>
Robot 1 crashes into the wall
Robot 1 crashes into robot 2
OK
Robot 1 crashes into robot 2
</pre>


______________________________________________________
CRYPTON||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The young and very promising cryptogra-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">pher Odd Even has implemented the security</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">module of a large system with thousands of</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">users, which is now in use in his company.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The cryptographic keys are created from the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">product of two primes, and are believed to be</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">secure because there is no known method for</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">factoring such a product effectively.</div>
<p>&nbsp;</p>
<p>The young and very promising cryptographer Odd Even has implemented the security&nbsp;module of a large system with thousands of&nbsp;users, which is now in use in his company.&nbsp;The cryptographic keys are created from the&nbsp;product of two primes, and are believed to be&nbsp;secure because there is no known method for&nbsp;factoring such a product effectively.</p>
<div>
<div>What Odd Even did not think of, was that&nbsp;both factors in a key should be large, not just&nbsp;their product. It is now possible that some of&nbsp;the users of the system have weak keys. In a desperate attempt not to&nbsp;be fired, Odd Even secretly goes through all the users keys, to check if&nbsp;they are strong enough. He uses his very poweful Atari, and is especially&nbsp;careful when checking his boss&rsquo; key.</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The input consists of no more than 20 test cases. Each test case is a line&nbsp;with the integers 4 &le; K &le; 10^100 and 2 &le; L &le; 10^6 . K is the key itself, a&nbsp;product of two primes. L is the wanted minimum size of the factors in the&nbsp;key. The input set is terminated by a case where K = 0 and L = 0.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each number K, if one of its factors are strictly less than the required&nbsp;L, your program should output &ldquo;BAD p&rdquo;, where p is the smallest factor in&nbsp;K. Otherwise, it should output &ldquo;GOOD&rdquo;. Cases should be separated by a&nbsp;line-break.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
143 10
143 20
667 20
667 30
2573 30
2573 40
0 0

<strong>Output:</strong>
GOOD
BAD 11
GOOD
BAD 23
GOOD
BAD 31
</pre>


______________________________________________________
NECKDEC||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">string clockwise on a ring, with the first</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">character following on the last, starting at</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">any character position and moving clock-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">wise on the ring until the character pre-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">ceeding the starting character is reached.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A string is a necklace if it is the lexico-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">graphically smallest among all its cyclic</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">rotations. For instance, for the string 01011 the cyclic rotations are</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">(10110,01101,11010,10101,01011), and furthermore 01011 is the smallest</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">string and hence, a necklace.</div>
<p>The set of cyclic rotations of a string are&nbsp;the strings obtained by embedding the&nbsp;string clockwise on a ring, with the first&nbsp;character following on the last, starting at&nbsp;any character position and moving clockwise on the ring until the character preceeding the starting character is reached.&nbsp;A string is a necklace if it is the lexicographically smallest among all its cyclic&nbsp;rotations. For instance, for the string 01011 the cyclic rotations are&nbsp;(10110,01101,11010,10101,01011), and furthermore 01011 is the smallest&nbsp;string and hence, a necklace.</p>
<div>
<div>Any string S can be written in a unique way as a concatenation S =&nbsp;T1 T2 . . . Tk of necklaces Ti such that Ti+1 &lt; Ti for all i = 1, . . . , k &minus; 1, and&nbsp;Ti Ti+1 is not a necklace for any i = 1, . . . , k &minus; 1. This representation is&nbsp;called the necklace decomposition of the string S, and your task is to find&nbsp;it.</div>
</div>
<div>
<div>The relation &lt; on two strings is the lexicographical order and has the&nbsp;usual interpretation: A &lt; B if A is a proper prefix of B or if A is equal to&nbsp;B in the first j &minus; 1 positions but smaller in the jth position for some j. For&nbsp;instance, 001 &lt; 0010 and 1101011 &lt; 1101100.</div>
</div>

*******InputConstraints*******

<p>On the first line of the input is a single positive integer n, telling the&nbsp;number of test scenarios to follow. Each scenario consists of one line&nbsp;containing a non-empty string of zeros and ones of length at most 100.</p>

*******OutputConstraints*******

<p>For each scenario, output one line containing the necklace decomposition&nbsp;of the string. The necklaces should be written as &rsquo;(&rsquo; necklace &rsquo;)&rsquo;.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
0
0101
0001
0010
11101111011

<strong>Output:</strong>
(0)
(0101)
(0001)
(001)(0)
(111)(01111)(011)</pre>


______________________________________________________
ADVEDIST||||||true||||||


<p>The edit distance of two strings S and T is the minimum number of edit operations that need to be done to transform S into T . The valid edit operations are:<br />&bull; Insert a single character at any position.<br />&bull; Modify an existing character.<br />&bull; Remove an existing character.<br />For example, the edit distance of &ldquo;pantera&rdquo; and &ldquo;aorta&rdquo; is 5, because the following chain of<br />edits is valid (and there is no shorter chain):<br />&ldquo;pantera&rdquo; &gt;&gt;&gt; &ldquo;antera&rdquo; &gt;&gt;&gt; &ldquo;aotera&rdquo; &gt;&gt;&gt; &ldquo;aoera&rdquo; &gt;&gt;&gt; &ldquo;aora&rdquo; &gt;&gt;&gt; &ldquo;aorta&rdquo;.</p>
<p>We define the advanced edit distance in a similar way, but adding the swap of two adjacent characters as an extra valid operation. With this setting, the advanced edit distance of &ldquo;pantera&rdquo; and &ldquo;aorta&rdquo; is 4:<br />&ldquo;pantera&rdquo; &gt;&gt;&gt; &ldquo;antera&rdquo; &gt;&gt;&gt; &ldquo;antra&rdquo; &gt;&gt;&gt; &ldquo;aotra&rdquo; &gt;&gt;&gt; &ldquo;aorta&rdquo;.</p>
<p><br />You need to write a program that calculates the advanced edit distance of two given words.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />two non-empty words, each of them of at most 1000 lowercase letters, separated by a single<br />space. The last line of the input contains two asterisks separated by a single space and should<br />not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer representing the advanced edit distance<br />of the two input words.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />pantera aorta<br />zero zero<br />* *<br /><br /><strong>Output:</strong><br /><br />4<br />0<br /></pre>


______________________________________________________
BACKTPOL||||||true||||||


<p>A simple polygon is a polygon that does not overlap with itself. A diagonal of a simple polygon<br />is a segment within the polygon that connects two non-consecutive vertices. A triangulation<br />of a simple polygon of N edges is the drawing of exactly N &minus; 3 diagonals that do not touch<br />each other anywhere, with the possible exception of their endpoints. A triangulation divides<br />the polygon in exactly N &minus; 2 triangles that do not overlap and only touch each other along<br />their edges.</p>
<p>In this problem, you are given the triangulation of a simple polygon, which means, the set of<br />triangles in which a polygon was divided. From them, you need to reconstruct the original<br />polygon.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line of each<br />test case contains an integer N (3 &le; N &le; 500), the number of edges of the original polygon.<br />Each of the next N &minus; 2 lines describes one triangle in the triangulation of the polygon. Each<br />triangle is given by six integers X1 , Y1 , X2 , Y2 , X3 and Y3 separated by single spaces, where Xi<br />and Yi are the coordinates in the XY plane of the i-th vertex of the triangle (&minus;1000 &le; Xi , Yi &le;<br />1000). The triangles and their vertices are not given in any specific order. The last line of the<br />input contains a single &minus;1 and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with 2N integers separated by single spaces. These<br />integers must represent the coordinates in the XY plane of the vertices of the original polygon,<br />in clockwise order. To make the output unique, the first vertex to be listed is the one with the<br />smallest X coordinate, and if there are many of those, the one with the smallest Y coordinate<br />among them.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />0 0 10 9 10 0<br />10 9 0 9 0 0<br />10 9 0 9 5 13<br />3<br />0 1 1 1 1 0<br />10<br />-1 -2 2 -2 2 -1<br />-1 -2 0 -1 -2 3<br />-2 3 2 3 1 2<br />0 -1 2 1 1 2<br />-1 -2 2 -1 0 -1<br />2 1 0 -1 2 0<br />2 3 2 2 1 2<br />0 -1 -2 3 1 2<br />-1<br /><strong>Output:</strong><br />0 0 0 9 5 13 10 9 10 0<br />0 1 1 1 1 0<br />-2 3 2 3 2 2 1 2 2 1 2 0 0 -1 2 -1 2 -2 -1 -2</pre>


______________________________________________________
CANDN||||||true||||||


<p>Charly and Nito are friends and they like to be together at a nice bar in Palermo Hollywood.<br />About at 3 a.m. they start to feel sleepy and want to go home. They want to get home quickly<br />so each of them uses a path that minimizes the distance to his home. However, Charly and<br />Nito also like to walk together while they talk about the &ldquo;good old times&rdquo;, so they want to<br />walk together as much as possible.<br />Charly and Nito live in a city that can be modeled as a set of streets and junctions. Each<br />street connects a pair of distinct junctions and can be walked in both directions. No two streets<br />connect the same pair of junctions. Charly and Nito do not live together, and they do not live<br />at the bar. There is at least one path from the bar to Charly&rsquo;s home; the same occurs with<br />Nito&rsquo;s home.<br />Given information about the streets and junctions in the city, the locations of the bar, Charly&rsquo;s<br />home and Nito&rsquo;s home, you must tell Charly and Nito the maximum distance that they can<br />walk together without forcing them to walk more than the minimum distance from the bar to<br />their respective homes. Charly and Nito also want to know how much each of them will walk<br />alone.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line of<br />each test case contains five integers J, B, C, N and S separated by single spaces. The value<br />J is the number of junctions in the city (3 &le; J &le; 5000); each junction is identified by an<br />integer number between 1 and J. The values B, C and N are the identifiers of the junctions<br />where the bar, Charly&rsquo;s home and Nito&rsquo;s home are located, respectively (1 &le; B, C, N &le; J);<br />these three junction identifiers are different. The value S is the number of streets in the city<br />(2 &le; S &le; 150000). Each of the next S lines contains the description of a street. Each street<br />is described using three integers E1 , E2 and L separated by single spaces, where E1 and E2<br />identify two distinct junctions that are endpoints of the street (1 &le; E1 , E2 &le; J), and L is the<br />length of the street (1 &le; L &le; 10<sup>4</sup> ). You may assume that each street has a different pair of<br />endpoints, and that there exist paths from junction B to junctions C and N . The last line<br />of the input contains the number &minus;1 five times separated by single spaces and should not be<br />processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with three integers T , C and N separated by single<br />spaces, where T is the maximum distance that Charly and Nito can walk together, C is the<br />distance that Charly walks alone, and N is the distance that Nito walks alone.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 3 2 1 6<br />3 4 10<br />4 5 10<br />5 1 3<br />5 2 4<br />1 3 23<br />2 3 24<br />8 1 7 8 8<br />1 2 1<br />2 4 1<br />2 3 1<br />4 5 1<br />3 5 1<br />5 6 1<br />6 8 1<br />6 7 1<br />-1 -1 -1 -1 -1<br /><br /><strong>Output:</strong><br /><br />20 4 3<br />4 1 1</pre>


______________________________________________________
DTWW||||||true||||||


<p>You are developing a visual component for a web browser. The component is known as textarea,<br />and its main functionality is to show a given text using one or more lines. Every textarea has<br />a linewidth W , which is the number of characters that can fit in a single line.<br />The text that needs to be shown is a sequence of words. The textarea must display the text<br />using lines of W characters, without breaking any word, and placing a single space between<br />each pair of consecutive words that are in the same line. Any number of trailing spaces may<br />be left at the end of each line. So the behavior of the textarea is quite simple: it keeps adding<br />words to a line until the next word does not fit; each time this occurs, a new line is started.<br />With the permanent growing in the amount of information that web pages must show, you<br />have to make a smart textarea that uses as little space as possible, even when dealing with very<br />long texts. Given a text to show and a number of lines L, you must set the linewidth W to the<br />minimum possible value such that the text is shown using at most L lines.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in exactly two lines. The first line<br />of each test case contains two integers L and N separated by a single space, where L is the<br />maximum number of lines the textarea can have (1 &le; L &le; 10<sup>8</sup> ), and N is the number of words<br />the text to show is made of (1 &le; N &le; 10<sup>5</sup> ). The second line contains the text to show, formed<br />by N non-empty words of at most 25 lowercase letters each, separated by an arbitrary number<br />of spaces. The last line of the input contains the number &minus;1 twice separated by a single space<br />and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer W representing the minimum linewidth<br />such that the textarea has at most L lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 2<br />hello     word<br />2 2<br />racing club<br />-1 -1<br /><strong>Output:</strong>
10<br />6</pre>


______________________________________________________
EDDIST||||||true||||||


<p>The edit distance of two strings S and T is the minimum number of edit  operations that need to be done to transform S into T . The valid edit  operations are:<br />&bull; Insert a single character at any position.<br />&bull; Modify an existing character.<br />&bull; Remove an existing character.<br />For example, the edit distance of &ldquo;pantera&rdquo; and &ldquo;aorta&rdquo; is 5, because the following chain of<br />edits is valid (and there is no shorter chain):<br />&ldquo;pantera&rdquo; &gt;&gt;&gt; &ldquo;antera&rdquo; &gt;&gt;&gt; &ldquo;aotera&rdquo; &gt;&gt;&gt; &ldquo;aoera&rdquo; &gt;&gt;&gt; &ldquo;aora&rdquo; &gt;&gt;&gt; &ldquo;aorta&rdquo;.</p>
<p>In this problem, given a value K and a word S, we need to construct a word T such that the edit distance of S and T is at most K. There are of course several possibilities for that, so we will ask that you choose the word T that comes first alphabetically. A word always comes alphabetically after any proper prefix. Among two words that are not prefixes of each other, the one that comes first alphabetically is the one that has, in the first position at wich they differ from left to right, a letter closest to the beginning of the alphabet. Notice that the empty word (that has zero characters) is a valid word and is alphabetically before any other word.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />an integer K (0 &le; K &le; 1000) and a non-empty word S of at most 1200 lowercase letters,<br />separated by a single space. The last line of the input contains the number &minus;1 and an asterisk<br />separated by a single space and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with a word T of lowercase letters such that the edit<br />distance of S and T is at most K. If there are several words in that situation, output the one<br />that comes first alphabetically.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 abcadef<br />1000 zero<br />0 zero<br />-1 *<br /><strong>Output:</strong>
aaaaaadef<br /><br />zero</pre>


______________________________________________________
FTHEELF||||||true||||||


<p>Feanor is an elf, and of course, he really likes arrows and bows. Surprisingly enough, Feanor<br />has a laptop, but he knows nothing about programming, so he requires your help.<br />Feanor lives in a tower of height H, and he loves throwing arrows from the top of it. He had a<br />good amount of intesive training and he knows that he always throws his arrows with the same<br />initial speed V . He wants you to make a program that given H and V returns the maximum<br />distance that a Feanor&rsquo;s arrow can reach when it hits the ground, measured from the base<br />of the tower. With this information, he will be able to place a nice circular fence to prevent<br />deoriented little elves from being killed.<br />Newtonian laws apply in Feanor&rsquo;s world and the gravity has the same strength as in ours. These<br />laws can be summarized as follows:<br />&bull; The position of Feanor is assumed to be a point. The same occurs with the position of<br />his arrow at each moment in time.<br />&bull; The initial speed V of the arrow can be expressed as Vx<sup>2</sup> + Vy<sup>2</sup> = V<sup>2</sup> , where Vx and Vy<br />are the horizontal and vertical components of V , respectively. Speed Vx is always non-<br />negative, while speed Vy is positive if the arrow is thrown up, and negative if the arrow<br />is thrown down.<br />&bull; The initial position of the arrow is the position of Feanor.<br />&bull; The horizontal position of the arrow (relative to Feanor&rsquo;s position) at time t is x(t) = Vx * t.<br />&bull; The vertical position of the arrow (relative to Feanor&rsquo;s position) at time t is y(t) = Vy * t &minus; gt<sup>2</sup> / 2, where g = 9.8 m/s2 .</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />two integers V and H separated by a single space. The value V is the initial speed of Feanor&rsquo;s<br />arrow measured in m/s (0 &le; V &le; 1000), while the value H is the tower&rsquo;s height in meters<br />(0 &le; H &le; 1000). The last line of the input contains the number &minus;1 twice separated by a single<br />space and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the radius of Feanor&rsquo;s fence in meters, rounded up<br />to 6 decimal digits (he wants to be sure that he doesn&rsquo;t kill those cute little elves).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 0<br />10 0<br />100 0<br />1000 0<br />-1 -1<br /><br /><strong>Output:</strong><br /><br />0.102041<br />10.204082<br />1020.408163<br />102040.816327</pre>


______________________________________________________
GK||||||true||||||


<p>Leandro and Fede are traveling by train and to spend some time they decided to start playing<br />the guitar. They want to play together some songs, but Fede&rsquo;s memory is not working well<br />because he caught a little cold. To work it out, Leandro wants to show to Fede some music<br />scores of several punk rock songs. A punk rock song is a sequence of notes, and there are twelve<br />possible notes, divided in two groups. The first group has seven natural notes called A, B, C,<br />D, E, F and G, while the second group has five alterations called A#, C#, D#, F# and G#.<br />The way to draw a music score is as follows: you start with an empty one, and then you draw<br />note by note from left to right in the same order they appear in the song. In the following<br />picture you can see an empty music score with two lines. The symbol at the beginning of each<br />line is called G key. Each line is divided in four groups, each group having room for four notes.</p>
<p>&lt;img src=http://www.spoj.pl/content/pabloh:pentagrama-ex.png&gt;</p>
<p>In this figure, the song &ldquo;E, F, F#, G, G#, A, A#, B, C, C#, D, D#&rdquo; is depicted.</p>
<p>Can you help Leandro writing a program for drawing punk rock songs given the sequence of<br />notes?</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />the number of notes N (1 &le; N &le; 100), followed by the sequence of N notes. Each note is one<br />of A, A#, B, C, C#, D, D#, E, F, F#, G and G#. Values in each line are separated by single<br />spaces. The last line of the input contains a single &minus;1 and should not be processed as a test<br />case.</p>

*******OutputConstraints*******

<p>For each test case output the music score of the input song and print a blank line after each test<br />case (even after the last one). You have to follow the sample input and output for drawing the<br />music scores. Every score line has the same background formed by the characters &ldquo;|&rdquo; (pipe)<br />and &ldquo;-&rdquo; (hyphen). They differ in the borders (first and last borders are doubled), and of course<br />in the notes they have inside. Each eighth note is drawn consecutively as in the sample, and<br />the different heights are those shown. Alterations are preceded by a character &ldquo;#&rdquo; (sharp sign).<br />There must be no trailing spaces at the end of printed lines, neither empty score lines (without<br />notes inside).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />36 E F F# G G# A A# B C C# D D# E F F# G G# A A# B C C# D D# E F F# G G# A A# B C C# D D#<br />-1<br /><br /><strong>Output:</strong><br />||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />||------------------------|------------------------|--------------|\----|\--|------------------------|<br />||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />||------------------------|--------------------|\--|--|-----|----x|---#x|---|------------------------|<br />||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; | x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />||--------------------|\--|--|\----|-----|----x|---|------------------------|--------------------|\--|<br />||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |<br />||--|\----|-----|----x|---|#x|---------------------|------------------------|--|\----|-----|----x|---|<br />||&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />||-x|---------------------|------------------------|------------------------|-x|---------------------|<br />||&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|------------------------|--------------|\----|\--|------------------------|------------------------|<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|--------------------|\--|--|-----|----x|---#x|---|------------------------|--------------------|\--|<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; | x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |<br />&nbsp;|--|\----|-----|----x|---|------------------------|--------------------|\--|--|\----|-----|----x|---|<br />&nbsp;|&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|#x|---------------------|------------------------|--|\----|-----|----x|---|#x|---------------------|<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; |&nbsp;&nbsp;&nbsp; x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|------------------------|------------------------|-x|---------------------|------------------------|<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br />&nbsp;|--------------|\----|\--|------------------------|------------------------|------------------------||<br />&nbsp;|&nbsp; |\&nbsp;&nbsp;&nbsp; |\&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br />&nbsp;|--|-----|----x|---#x|---|------------------------|------------------------|------------------------||<br />&nbsp;| x|&nbsp;&nbsp; #x|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br />&nbsp;|------------------------|------------------------|------------------------|------------------------||<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br />&nbsp;|------------------------|------------------------|------------------------|------------------------||<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br />&nbsp;|------------------------|------------------------|------------------------|------------------------||<br />&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||<br /></pre>


______________________________________________________
HEPNUM||||||true||||||


<p>The Factory of Computer Enhaced Numbers (FCEN) has asked its Development Comitee (DC)<br />to come up with a way to handle numbers written in base 17.<br />As everybody knows, base 17 is very important for many scientific applications, as well as for<br />engineering and other practical uses. Numbers in base 17 can be tough, but are kind and soft<br />if treated appropiately.<br />Numbers in base 17 are written by using a set of 17 characters: digits 0 to 9 with their usual<br />values, and uppercase letters A to G that have values from 10 to 16, respectively.<br />Base 17, probably because its basement on a prime number, does not require numbers to start<br />with a non-zero digit, so each number has many representations. For instance, the decimal<br />number 117 can be written as 6F , but also as 06F or even 00000006F .<br />Because of this leading-zeroes thing, heptadecimal numbers are hard to compare. As a member<br />of the FCEN-DC, you were asked to write a program that helps in this difficult and challenging<br />task.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />two non-empty strings of at most 10<sup>5</sup> heptadecimal digits, separated by a single space. The last<br />line of the input contains two asterisks separated by a single space and should not be processed<br />as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the sign &ldquo;&lt;&rdquo; if the first heptadecimal number is<br />smaller than the second one, the sign &ldquo;&gt;&rdquo; if the first heptadecimal number is greater than the<br />second one, or the sign &ldquo;=&rdquo; if both heptadecimal numbers are equal.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />006F B3B<br />0000 0<br />* *<br /><br /><strong>Output:</strong>
<br />&lt;<br />=</pre>


______________________________________________________
INDIPROG||||||true||||||


<p>When dealing with a long task, computers often provide a progress indicator to help users<br />estimate how much longer they will have to wait. This is especially useful when copying a large<br />number of data files from one drive to another.<br />In the Institute of Computer Power Control (ICPC) are very concerned about their brand new<br />file copier, which they think will change forever the way people copy files. While this is a great<br />accomplishment for the engineers in ICPC, the lack of a progress indicator is threatening the<br />future of the project and the well being of most computer users around the world!<br />The Supremum Principal Director Manager of ICPC has called you personally to ensure you<br />are up for the task. The interface provided by the developing team of the file copier only gives<br />two integers M and N . M is the number of files that have already been copied, and N is<br />the total number of files to be copied. Using this information, you must write a module that<br />displays the progress indicator.<br />The indicator must be drawn as a string of exactly 20 characters. The first K of them must<br />be asterisks (&ldquo;*&rdquo;) and the rest must be hyphens (&ldquo;-&rdquo;). The number K must be chosen in such<br />a way that K/20 correctly approximates M/N ; this means that the distance between the two<br />mentioned fractions is minimum. If there is more than one possible value for K, the greatest<br />one must be chosen.<br />Also, for more precision, a number P without leading zeroes and followed by a percentage<br />sign (&ldquo;%&rdquo;) must be written on top of the described indicator. Since the goal is to represent<br />the finished percentage, the number P must be such that P/100 correctly approximates M/N ,<br />with the same policy as before. The finished percentage must be centered on top of the display.<br />This means that if possible, the same number of display characters (&ldquo;*&rdquo; or &ldquo;-&rdquo;) must be seen<br />to the left and to the right of the percentage; if this is not possible, exactly one extra character<br />must be seen to the left.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />two integers M and N as explained above (0 &le; M &le; N &le; 10<sup>9</sup> and N &ne; 0). These values are<br />separated by a single space. The last line of the input contains the number &minus;1 twice separated<br />by a single space and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with exactly 20 characters representing the mentioned<br />display.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />2 5<br />2 6<br />0 10<br />-1 -1<br /><strong><br />Output:</strong><br /><br />********-40%--------<br />*******--33%--------<br />---------0%---------<pre><br /></pre>
<br /><br /></pre>


______________________________________________________
TTREAT||||||false||||||

<p style="text-align: center; "><span style="font-size: small;"><strong> </strong></span></p>
<p><strong> </strong></p>
<p><strong>
<div style="text-align: auto;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: 10px;">
<p style="text-align: left;">In the land of Eden, all phone conversations are happy ones. People com-plaining on the phone are immediately put in jail. To enforce this law, the&nbsp;police taps all phone conversations.&nbsp;The police wants to hire the approriate number of operators to listen to all&nbsp;conversations in a given period of time. Unfortunately, each of their operators&nbsp;can listen to one conversation only before needing a really long break to rest&nbsp;from the eort.&nbsp;As a contractor of the police department, you have been asked to provide&nbsp;a program capable of determining the required number of operators. If the&nbsp;program does not work correctly, you will be put in jail as well, along with all&nbsp;the unhappy complainers. Do you really want to end up there?&nbsp;Telephone operators. Photo: Seattle&nbsp;Municipal Archives.</p>
</span></span></span></div>
</strong></p>
<p style="text-align: left;"><strong>Input</strong></p>
<p>Each test case starts with two integers denoting the number of phone calls N (1&lt;=N&lt;=10 000) and the&nbsp;number of intervals M (1&lt;=M&lt;=100). This is followed by N lines describing the telephone calls, each one&nbsp;consisting of four integers Source, Destination, Start and Duration. Source and Destination identify the&nbsp;pair of telephone numbers establishing the connection (0&lt;=Source;Destination&lt;=10 000 000). Start and&nbsp;Duration are the start time and duration of the call in seconds (1&lt;=Duration&lt;=10000 and Start&gt;=0).&nbsp;You can safely assume that the sum of Start and Duration ts into a 32-bit signed integer.&nbsp;Afterwards follow M lines containing the time intervals the police are interested in, each on described by&nbsp;two integers Start and Duration, in the same format and with the same meaning and constraints as those&nbsp;in the telephone calls. The last test case is represented by N = M = 0 and must not be processed.</p>
<p><strong>Output</strong></p>
<p>For each of the M intervals of each test case, print the number of calls that are active during at least one&nbsp;second of the interval.</p>
<p><strong>Sample input:</strong></p>
<p><span style="font-weight: normal;">3 2</span></p>
<p>3 4 2 5</p>
<p><span style="font-weight: normal;">1 2 0 10</span></p>
<p><span style="font-weight: normal;">6 5 5 8</span></p>
<p><span style="font-weight: normal;">0 6</span></p>
<p><span style="font-weight: normal;">8 2</span></p>
<p><span style="font-weight: normal;">1 2</span></p>
<p><span style="font-weight: normal;">8 9 0 10</span></p>
<p><span style="font-weight: normal;">9 1</span></p>
<p><span style="font-weight: normal;">10 1</span></p>
<p><span style="font-weight: normal;">0 0</span></p>
<p>&nbsp;</p>
<p>Sample output:</p>
<p><span style="font-weight: normal;">3</span></p>
<p><span style="font-weight: normal;">2</span></p>
<p><span style="font-weight: normal;">1</span></p>
<p><span style="font-weight: normal;">0</span></p>
<p><span style="font-weight: normal;"><br /></span></p>


______________________________________________________
HEADSHOT||||||false||||||

<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p><span style="font-size: medium;">You have a revolver gun with a cylinder that has n chambers. Chambers are located in a circle on a&nbsp;cylinder. Each chamber can be empty or can contain a round. One chamber is aligned with the gun's&nbsp;barrel. When trigger of the gun is pulled, the gun's cylinder rotates, aligning the next chamber with the&nbsp;barrel, hammer strikes the round, making a shot by firing a bullet through the barrel. If the chamber is&nbsp;empty when the hammer strikes it, then there is no shot but just a "click".</span></p>
<p>&nbsp;</p>
<p><span style="font-size: medium;">You have found a use for this gun. You are playing Russian Roulette with your friend. Your friend loads&nbsp;rounds into some chambers, randomly rotates the cylinder, aligning a random chamber with a gun's&nbsp;barrel, puts the gun to his head and pulls the trigger. You hear "click" and nothing else - the chamber&nbsp;was empty and the gun did not shoot.</span></p>
<p><span style="font-size: medium;">Now it is your turn to put the gun to your head and pull the trigger. You have a choice. You can either&nbsp;pull the trigger right away or you can randomly rotate the gun's cylinder and then pull the trigger. What&nbsp;should you choose to maximize the chances of your survival?</span></p>
<p>&nbsp;</p>
<p><span style="font-size: medium;"><br /></span></p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">International Cyber Police Corporation (ICPC) had built a new mega-tall business center to host its</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">headquarters and to lease some space for extra pro&macr;t. It has so many &deg;oors, that it is impractical to have</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">a separate button in each of its m elevator cars for each individual &deg;oor. Instead, each elevator car has</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">just two buttons. One button in i-th elevator car makes it move up ui &deg;oors, the other makes it move</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">down di &deg;oors. The business center is so high, that we can ignore its height for this problem (you will</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">never reach the top &deg;oor), but you cannot go below the ground &deg;oor. All &deg;oors are numbered by integer</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">numbers starting from zero, zero being the ground &deg;oor.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">You start on the ground &deg;oor of the business center. You have to choose one elevator car out of m to</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">ride on. You cannot switch elevators cars after that. What is the lowest &deg;oor above the ground &deg;oor you</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; border: 1px dashed #bbbbbb;"><span style="font-size: medium;">can get to after you press elevator car buttons exactly n times</span></div>
<h3 style="font-size: 1.17em;"><span style="font-size: medium;">Input</span></h3>
<p><span style="font-size: medium;">The input first line contains a single line with a string of n digits "0" and "1" (2&lt;=n&lt;=100). This line of&nbsp;digits represents the pattern of rounds that were loaded into the gun's chambers. "0" represent an empty&nbsp;chamber, "1" represent a loaded one. In this representation, when cylinder rotates before a shot, the&nbsp;next chamber to the right gets aligned with the barrel for a shot. Since the chambers are actually located&nbsp;</span><strong><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: medium;">on a circle, the first chamber in this string follows the last one. There is at least one "0" in this string.</span></span></span></strong></p>
<p><strong><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: medium;">&nbsp;</span></span></span><span style="font-size: medium;">Output</span></strong></p>
<p>&nbsp;</p>
<p><span style="font-size: medium;">Write to the output single one of the following words (without quotes):</span></p>
<p><span style="font-size: medium;">"SHOOT" - if pulling the trigger right away makes you less likely to be actually shot in the head&nbsp;with the bullet (more likely that the chamber will be empty).</span></p>
<p><span style="font-size: medium;">"ROTATE" - if randomly rotating the cylinder before pulling the trigger makes you less likely to be&nbsp;actually shot in the head with the bullet (more likely that the chamber will be empty).</span></p>
<p><span style="font-size: medium;">"EQUAL" - if both of the above choices are equal in terms of probability of being shot.</span></p>
<p>&nbsp;</p>
<h3 style="font-size: 1.17em;"><span style="font-size: medium;">Example</span></h3>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-weight: normal; white-space: normal;"><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">Input:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">&nbsp;</span></strong><span style="font-size: medium;">0011
</span><strong><span style="font-size: medium;">Output:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: medium;"><strong>&nbsp;</strong>EQUAL</span></pre>
</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="white-space: normal;"><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;"><br /></span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">Input:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: medium;"><strong>&nbsp;</strong>0111
</span></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">Output:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: medium;"><strong>&nbsp;</strong>ROTATE</span></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;"><br /></span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">Input:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: medium;"><strong>&nbsp;</strong>000111</span></pre>
</span><span style="white-space: normal;">
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-size: medium;">Output:</span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="font-size: medium;"><strong>&nbsp;</strong>SHOOT</span></pre>
</span></pre>
</div>


______________________________________________________
IOIGARD||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Byteman owns the most beautiful garden in Bytetown. He planted n roses in his garden. Summer has come</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and the flowers have grown big and beautiful. Byteman has realized that he is not able to take care of all the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">roses on his own. He has decided to employ two gardeners to help him. He wants to select two rectangular</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">areas, so that each of the gardeners will take care of the roses inside one area. The areas should be disjoint</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and each should contain exactly k roses.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Byteman wants to make a fence surrounding the rectangular areas, but he is short of money, so he wants</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">to use as little fence as possible. Your task is to help Byteman select the two rectangular areas.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The garden forms a rectangle l meters long and w meters wide. It is divided into l &middot; w squares of size</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">1 meter &times; 1 meter each. We fix a coordinate system with axes parallel to the sides of the garden. All squares</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">have integer coordinates (x,y) satisfying 1  x  l, 1  y w. Each square may contain any number of roses.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The rectangular areas, which must be selected, should have their sides parallel to the sides of the garden</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and the squares in their corners should have integer coordinates. For 1  l1  l2  l and 1  w1  w2  w, a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">rectangular area with corners (l1,w1), (l1,w2), (l2,w1) and (l2,w2):</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&bull; contains all the squares with coordinates (x,y) satisfying l1  x  l2 and w1  y  w2, and</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&bull; has perimeter 2 &middot; (l2&minus;l1+1)+2 &middot; (w2&minus;w1+1).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The two rectangular areas must be disjoint, that is they cannot contain a common square. Even if they have a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">common side, or part of it, they must be surrounded by separate fences.</div>
<p>&nbsp;</p>
<p>Byteman owns the most beautiful garden in Bytetown. He planted n roses in his garden. Summer has come&nbsp;and the flowers have grown big and beautiful. Byteman has realized that he is not able to take care of all the&nbsp;roses on his own. He has decided to employ two gardeners to help him. He wants to select two rectangular&nbsp;areas, so that each of the gardeners will take care of the roses inside one area. The areas should be disjoint&nbsp;and each should contain exactly k roses.&nbsp;Byteman wants to make a fence surrounding the rectangular areas, but he is short of money, so he wants&nbsp;to use as little fence as possible. Your task is to help Byteman select the two rectangular areas.</p>
<p>The garden forms a rectangle l meters long and w meters wide. It is divided into l &middot; w squares of size&nbsp;1 meter &times; 1 meter each. We fix a coordinate system with axes parallel to the sides of the garden. All squares&nbsp;have integer coordinates (x,y) satisfying 1&lt;=x&lt;=l, 1&lt;=y&lt;=w. Each square may contain any number of roses.&nbsp;The rectangular areas, which must be selected, should have their sides parallel to the sides of the garden&nbsp;and the squares in their corners should have integer coordinates. For 1&lt;=l1&lt;=l2&lt;=l and 1&lt;=w1&lt;=w2&lt;=w, a&nbsp;rectangular area with corners (l1,w1), (l1,w2), (l2,w1) and (l2,w2):</p>
<p>&bull; contains all the squares with coordinates (x,y) satisfying l1&lt;=x&lt;=l2 and w1&lt;=y&lt;=w2, and</p>
<p>&bull; has perimeter 2 &middot; (l2&minus;l1+1)+2 &middot; (w2&minus;w1+1).</p>
<p>The two rectangular areas must be disjoint, that is they cannot contain a common square. Even if they have a&nbsp;common side, or part of it, they must be surrounded by separate fences.</p>
<p style="text-align: center;"><span style="font-size: x-small;"><strong><span style="font-size: small;">Task</span></strong></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 style="text-align: left;"><span style="font-size: small;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: small;">Write a program, that:</span></span></span></span></h3>
<h3 style="text-align: left;"><span style="font-size: small;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: small;">&bull; reads from the standard input the dimensions of the garden, the number of roses in the garden, the&nbsp;</span></span></span></span><span style="font-weight: normal; font-size: small;">number of roses that should be in each of the rectangular areas, and the positions of the roses.</span></h3>
<h3 style="text-align: left;"><span style="font-size: small;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: small;">&bull; finds the corners of two such rectangular areas with minimum sum of perimeters that satisfy the given&nbsp;</span></span></span></span><span style="font-weight: normal; font-size: small;">conditions.</span></h3>
<h3 style="text-align: left;"><span style="font-size: small;"><span style="font-size: x-small;"><span style="font-weight: normal;"><span style="font-size: small;">&bull; writes to the standard output the minimumsum of perimeters of two non-overlapping rectangular areas,&nbsp;</span></span></span></span><span style="font-weight: normal; font-size: small;">each containing exactly the given number of roses (or a single word NO, if no such pair of areas exists).</span></h3>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line of standard input contains two integers: l and w (1&lt;=l,w&lt;=250) separated by a single space&nbsp;&mdash; the length and the width of the garden. The second line contains two integers: n and k (2&lt;=n&lt;=5000,&nbsp;1&lt;=k&lt;=n/2) separated by a single space &mdash; the number of roses in the garden and the number of roses that&nbsp;should be in each of the rectangular areas. The following n lines contain the coordinates of the roses, one rose&nbsp;per line. The (i+2)-nd line contains two integers li, wi (1&lt;=li&lt;=l, 1&lt;=wi&lt;=w) separated by a single space&nbsp;&mdash; the coordinates of the square containing the i-th rose. Two or more roses can occur in the same square.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>The standard output should contain only one line with exactly one integer&mdash;the minimum sum of perimeters&nbsp;of two non-overlapping rectangular areas, each containing exactly k roses, or a single word NO, if no such pair&nbsp;of areas exists.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6 5
7 3
3 4
3 3
6 1
1 1
5 5
5 5
3 1

<strong>Output:</strong>
22</pre>


______________________________________________________
IOIPALIN||||||true||||||


<p>A palindrome is a symmetrical string, that is, a string read identically from left to right&nbsp;as well as from right to left. You are to write a program which, given a string,&nbsp;determines the minimal number of characters to be inserted into the string in order to&nbsp;obtain a palindrome.&nbsp;As an example, by inserting 2 characters, the string "Ab3bd" can be transformed into&nbsp;a palindrome ("dAb3bAd" or "Adb3bdA"). However, inserting fewer than 2&nbsp;characters does not produce a palindrome.</p>

*******InputConstraints*******

<p>The first line contains one integer: the length of&nbsp;the input string N, 3&le;N&le;5000. The second line contains one string with length N. The&nbsp;string is formed from uppercase letters from &lsquo;A&rsquo; to &lsquo;Z&rsquo;, lowercase letters from &lsquo;a&rsquo; to&nbsp;&lsquo;z&rsquo; and digits from &lsquo;0&rsquo; to &lsquo;9&rsquo;. Uppercase and lowercase letters are to be considered&nbsp;distinct.</p>

*******OutputConstraints*******

<p>The first line contains one integer, which is the&nbsp;desired minimal number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
Ab3bd

<strong>Output:</strong>
2</pre>


______________________________________________________
IOIBOUND||||||true||||||


<p>Farmer Don watches the fence that surrounds his N meter by N meter square, flat field (2&lt;=N&lt;=500,000). One fence corner is at the origin (0, 0) and the opposite corner is at (N,N); the sides of Farmer Don's fence are parallel to the X and Y axes.Fence posts appear at all four corners and also at every meter along each side of the&nbsp;fence, for a total of 4&times;N fence posts. The fence posts are vertical and are considered to&nbsp;have no radius. Farmer Don wants to determine how many of his fence posts he can&nbsp;watch when he stands at a given location within his fence.&nbsp;Farmer Don&rsquo;s field contains R (1&lt;=R&lt;=30,000) huge rocks that obscure his view of some&nbsp;fence posts, as he is not tall enough to look over any of these rocks. The base of each&nbsp;rock is a convex polygon with nonzero area whose vertices are at integer coordinates.&nbsp;The rocks stand completely vertical. Rocks do not overlap, do not touch other rocks, and&nbsp;do not touch Farmer Don or the fence. Farmer Don does not touch the fence, does not&nbsp;stand within a rock, and does not stand on a rock.&nbsp;Given the size of Farmer Don's fence, the locations and shapes of the rocks within it, and&nbsp;the location where Farmer Don stands, compute the number of fence posts that Farmer&nbsp;Don can see. If a vertex of a rock lines up perfectly with a fence post from Farmer Don's&nbsp;location, he is not able to see that fence post.</p>

*******InputConstraints*******

<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first line of input contains two space-separated integers: N and R.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&middot; The next line of input contains two space-separated integers that specify the X</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and Y coordinates of Farmer Don's location inside the fence.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&middot; The rest of the input file describes the R rocks:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">o Rock i&rsquo;s description starts with a line containing a single integer pi (3 &pound; pi</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&pound; 20), the number of vertices in the rock's base.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">o Each of the next pi lines contains a space-separated pair of integers that are</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the X and Y coordinates of a vertex. The vertices of a rock&rsquo;s base are</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 160px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">distinct and given in counterclockwise order.</div>
<p>The first line of input contains two space-separated integers: N and R.&nbsp;The next line of input contains two space-separated integers that specify the X&nbsp;and Y coordinates of Farmer Don's location inside the fence.&nbsp;The rest of the input file describes the R rocks:&nbsp;Rock i&rsquo;s description starts with a line containing a single integer pi (3&lt;=pi&lt;=20), the number of vertices in the rock's base.&nbsp;Each of the next pi lines contains a space-separated pair of integers that are&nbsp;the X and Y coordinates of a vertex. The vertices of a rock&rsquo;s base are&nbsp;distinct and given in counterclockwise order.</p>

*******OutputConstraints*******

<p>The output file should contain a single line with a single integer, the number of fence&nbsp;posts visible to Farmer Don.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
100 1
60 50
5
70 40
75 40
80 40
80 50
70 60

<strong>Output:</strong>
319</pre>


______________________________________________________
CF25E||||||true||||||


<p>Sometimes it is hard to prepare tests for programming problems. Now Bob  is preparing tests to new problem about strings &mdash; input data to his  problem is one string. Bob has 3 wrong solutions to this problem. The  first gives the wrong answer if the input data contains the substring <span><em>s</em><sub>1</sub></span>, the second enters an infinite loop if the input data contains the substring <span><em>s</em><sub>2</sub></span>, and the third requires too much memory if the input data contains the substring <span><em>s</em><sub>3</sub></span>.  Bob wants these solutions to fail single test. What is the minimal  length of test, which couldn't be passed by all three Bob's solutions?</p>

*******InputConstraints*******

<p>There are several test cases. For each test case there are exactly 3 lines. The <span><em>i</em></span>-th line contains string <span><em>s</em><sub><em>i</em></sub></span>. All the strings are non-empty, consists of lowercase Latin letters, the length of each string doesn't exceed <span>10<sup>5</sup></span>.</p>

*******OutputConstraints*******

<p>For each test case output one number &mdash; what is minimal length of the string, containing <span><em>s</em><sub>1</sub></span>, <span><em>s</em><sub>2</sub></span> and <span><em>s</em><sub>3</sub></span> as substrings.</p>

*******IOTestCases*******

<pre><strong>Input</strong>:<br />ab<br />bc<br />cd<br />abacaba<br />abaaba<br />x<strong><br /><br />Output:</strong>
4<br />11</pre>


______________________________________________________
EGYPIZZA||||||true||||||


<pre style="text-align: left;"><br /><p>Abotrika is having a party because his team won the african cup so he is inviting his friends to eat some pizza.</p><p>Unfortunately,Abotrika's friends can't eat an entire pizza but all of them know exactly how much pizza&nbsp;</p><p>they can eat and insist on getting the exact amount of pizza but Abotrika eats one complete pizza 
and all of them wants his amount of pizza in one slice.</p>
<p>Their requests break down to three different pizza slices-either one quarter or a half or three quarters of pizza.</p><p>write a program that will help Abotrika to find out what is the minimal number of pizzas he has to order so that&nbsp;</p><p>everyone gets exact amount of pizza they want.</p>
*******InputConstraints*******
<p>First line contains an integer N, 0&lt;=N&lt;=10,000 , number of friends.</p><p>In each of next N lines there is amount of pizza that each of Abotrika's friends wants to eat,that&nbsp;</p><p>is the fraction 1/4 , 1/2 or 3/4.</p>
*******OutputConstraints*******
<p>In the first and only line you should write the minimal number of pizzas Abotrika has order don't forget to order&nbsp;</p><p>one complete pizza for Abotrika</p>
*******IOTestCases*******
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Input:</strong>
3</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">1/2</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">3/4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">3/4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Output:</strong>
4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Input:</strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">5</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">1/2</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">3/4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">1/2</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">1/4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">1/4</pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong><span style="font-weight: normal;"><strong>Output:</strong></span></strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">4</pre>
<strong>Note : the problem rejudged</strong></pre>


______________________________________________________
AXIS||||||true||||||


<p>Given a point p and a line L on the plane, the reflection of p against L is a point q such that<br />the segment pq is perpendicular to L and its middle point is on L. If p is on L, then p = q.</p>
<p>Given a set of points on the plane, an axis of symmetry is a line on the plane such that the<br />reflection of any point of the set against that line gives a point of the set.<br />In this problem you are given a set of points on the plane, and you must decide whether there<br />exists at least one axis of symmetry or not.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line of each<br />test case contains an integer N indicating the number of points in the set (3 &le; N &le; 1000).<br />Each of the next N lines describes a different point of the set using two integers X and Y<br />separated by a single space (&minus;2000 &le; X, Y &le; 2000); these numbers represent the coordinates<br />of the point in the XY plane. You may assume that no two points of each test case have the<br />same location. The last line of the input contains a single &minus;1 and should not be processed as<br />a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an uppercase &ldquo;Y&rdquo; if there exists at least one axis of<br />symmetry for the provided set of points, or an uppercase &ldquo;N&rdquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />-10 0<br />10 0<br />10 10<br />10 -10<br />4<br />-10 0<br />10 1<br />10 10<br />10 -10<br />6<br />-1000 30<br />-100 20<br />-10 10<br />1000 30<br />100 20<br />10 10<br />-1<br /><br /><strong>Output:</strong><br />Y<br />N<br />Y<br /></pre>


______________________________________________________
BYECAKES||||||true||||||


<p>John is moving to a different city and he wants to use all his perishable food before doing it,<br />to avoid wasting. Luckily all he has now is eggs, flour, sugar and milk, so he is going to make<br />his famous cakes and give them to his friends as a goodbye gift.<br />John only knows how to make an entire cake and not half a cake, a third of a cake, or any<br />other portion. So, he will buy whatever is needed of each ingredient so that he can make an<br />integer number of cakes and have nothing left. Of course, he wants to spend as little money as<br />possible. You must help John to decide how much he should buy of each ingredient.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />eight integers E, F , S, M , E' , F' , S' and M' separated by single spaces. Values E and E' are<br />numbers of eggs, F and F' are grams of flour, S and S' are grams of sugar, and M and M' are<br />centiliters of milk. For each ingredient, X is the amount John has (0 &le; X &le; 1000), while X' is<br />the amount needed to make a single cake (1 &le; X &le; 1000). The last line of the input contains<br />the number &minus;1 eight times separated by single spaces and should not be processed as a test<br />case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with four non-negative integers separated by single spaces,<br />representing the amount of each ingredient John needs to buy, in the same order and units as<br />the input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 3 4 5 1 1 1 1<br />3 6 9 0 1 2 3 4<br />-1 -1 -1 -1 -1 -1 -1 -1<br /><strong>Output:</strong>
3 2 1 0<br />0 0 0 12
</pre>


______________________________________________________
COUNTPAS||||||true||||||


<p>Pascal&rsquo;s triangle is a common figure in combinatorics. It is a triangle formed by rows of integers.<br />The top row contains a single 1. Each new row has one element more than the previous one<br />and is formed as follows: the leftmost and rightmost values are 1, while each of the other values<br />is the sum of the two values above it. Here we depict the first 7 rows of the triangle.</p>
<table style="height: 100px; width: 10px;" border="0" align="center">
<tbody>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>2</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>3</td>
<td>&nbsp;</td>
<td>3</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>4</td>
<td>&nbsp;</td>
<td>6</td>
<td>&nbsp;</td>
<td>4</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
<td>5</td>
<td>&nbsp;</td>
<td>10</td>
<td>&nbsp;</td>
<td>10</td>
<td>&nbsp;</td>
<td>5</td>
<td>&nbsp;</td>
<td>1</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>1</td>
<td>&nbsp;</td>
<td>6</td>
<td>&nbsp;</td>
<td>15</td>
<td>&nbsp;</td>
<td>20</td>
<td>&nbsp;</td>
<td>15</td>
<td>&nbsp;</td>
<td>6</td>
<td>&nbsp;</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Pascal&rsquo;s triangle is infinite, of course, and contains the value 1 an unbounded number of times.<br />However, any other value appears a finite number of times in the triangle. In this problem you<br />are given an integer K &ge; 2. Your task is to calculate the number of values in the triangle that<br />are different from 1 and less than or equal to K.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />an integer K (2 &le; K &le; 10<sup>9</sup> ). The last line of the input contains a single &minus;1 and should not be<br />processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer indicating the number of values in Pascal&rsquo;s<br />triangle that are different from 1 and less than or equal to K.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />6<br />-1<br /><br /><strong>Output:</strong><br />1<br />10</pre>


______________________________________________________
DINOSM||||||true||||||


<p>After a failed but interesting DNA project, a lot of dinosaurs spread over the lab devouring<br />most of the staff. Jeff, a scientist that worked in the project, managed to survive by hiding in<br />the southwest corner of the lab. Now that all dinosaurs are asleep, he is going to try to leave.<br />The exit of the lab is located at the northeast corner.<br />Jeff knows that if any of the dinosaurs wakes up, he does not stand a chance, so he needs to<br />minimize the likelihood of that happening. For that, he wants to follow a path that maximizes<br />the minimum distance from him to a dinosaur along the path. The length of the path is of no<br />interest to Jeff.<br />For this problem we consider that Jeff and the dinosaurs are points on the plane, and that Jeff&rsquo;s<br />path is a continuous curve conecting the southwest and northeast corners of the lab. As we<br />mentioned, Jeff wants to maximize the minimum distance between this curve and the position<br />of any dinosaur.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line of each<br />test case contains three integers N , W , and H separated by single spaces. The value N is the<br />number of dinosaurs in the lab (1 &le; N &le; 300). The values W (width) and H (height) are the<br />size of the lab on the x and y coordinates, respectively (2 &le; W, H &le; 10<sup><sub>6</sub></sup> ). This means that<br />the starting position of Jeff is at (0, 0), while the exit of the lab is located at (W, H). Each<br />of the next N lines contains two integers X and Y separated by a single space, representing<br />the coordinates of a different dinosaur (1 &le; X &le; W &minus; 1 and 1 &le; Y &le; H &minus; 1). Note that no<br />dinosaur is located on the border of the lab. You may assume that no two dinosaurs have the<br />same location. The last line of the input contains the number &minus;1 three times separated by<br />single spaces and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the maximum possible distance to the closest<br /> dinosaur. Write the result rounded to the closest number with exactly three decimal places,<br /> using the highest in case of ties, as usual.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 2 2<br />1 1<br />3 5 4<br />1 3<br />4 1<br />1 2<br />2 5 4<br />1 3<br />4 1<br />-1 -1 -1<br /><br /><strong>Output:</strong>
1.000<br />1.581<br />1.803</pre>


______________________________________________________
ESJAIL||||||true||||||


<p>Harry is currently a prisoner of the International Common Prison for Criminals (ICPC), the<br />most secure prison in the world. It was designed by and old gamer and as such, the prison is<br />not necesarilly closed, but only an incredibly logical and fast mind can get out.<br />The prison is made of N chambers connected by M corridors. Each corridor connects exactly<br />two chambers and can be traversed in any direction. Each chamber is either empty, contains<br />a single unbreakable door, or contains a single key. No chamber contains both a door and a<br />key. There are K doors and K keys in the whole prison. Each key opens a different door, and<br />each door is opened by a different key. If a chamber contains a door, the corresponding key is<br />needed to enter the chamber, regardless of which corridor was used to reach it.<br />Harry found the complete map of the prison, including the location of each door and each key,<br />and wants to know how to get out that hell hole. According to the map, Harry is now in<br />chamber number 1, and the exit is in chamber N . Given the information on the map, let Harry<br />know if it is possible to escape or if he is doomed forever.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line of each<br />test case contains three integers N , K, and M separated by single spaces. The value N is the<br />number of chambers in the prison (4 &le; N &le; 10<sup>5</sup> ); each chamber is identified by an integer<br />number between 1 and N . The value K is the number of doors and keys (1 &le; K &le; N/2), while<br />M is the number of corridors (1 &le; M &le; 10<sup>5</sup> ). Each of the next K lines describes a door and its<br />corresponding key using two integers A and B separated by a single space, with the following<br />meaning: chamber A cointains the key that opens the door in chamber B (2 &le; A, B &le; N &minus; 1).<br />The last M lines of the test case describe the corridors. Each of these lines cointains two integers<br />C and D separated by a single space, indicating that there is a corridor connecting chambers<br />C and D (1 &le; C &lt; D &le; N ). You may assume that no two corridors connect the same pair of<br />chambers. The last line of the input contains the number &minus;1 three times separated by single<br />spaces and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an uppercase &ldquo;Y&rdquo; if it is possible for Harry to escape<br />from the prison, or an uppercase &ldquo;N&rdquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 1 4<br />2 3<br />3 4<br />2 3<br />1 3<br />2 4<br />6 2 5<br />5 4<br />3 2<br />2 6<br />2 5<br />1 4<br />1 5<br />3 4<br />4 1 1<br />3 2<br />2 3<br />-1 -1 -1<br /><br /><strong>Output:</strong>
N<br />Y<br />N</pre>


______________________________________________________
FALTAENV||||||true||||||


<p>Envido is an important part of the typical argentinian game Truco. It is even more important<br />when Falta Envido is called, because in this case the winner of the Envido wins the entire game.<br />In this problem you are asked to calculate the envido advantage of a cheater.<br />Truco is played with a limited deck of spanish cards. This deck contains four suits: espada,<br />basto, copa and oro. There are 10 cards of each suit: 1, 2, 3, 4, 5, 6, 7, 10, 11 and 12. Cards<br />10, 11 and 12 have an envido value of 0, while the envido value for any of the other cards is<br />simply its number. Each player holds three cards. The winner of an Envido is the player with<br />the higher envido score. When calculating his envido score each player can either:<br />1. select a single card and have as envido score the envido value of the card; or<br />2. select two cards of the same suit and have as envido score 20 plus the sum of the envido<br />value of each selected card.<br />Players always select the card or cards that yield the highest envido score. For instance, a<br />player having a 10 and a 2 of the same suit, together with a 5 of a different suit, would inform<br />an envido score of 22 because 20 + 0 + 2 = 22.<br />A cheater playing Truco thinks that he can change one of his three cards without anybody else<br />in the table noticing. If he changes more than one card, he surely will be discovered, so he does<br />not do that. Since even changing one card is risky, he only does it when the envido score of the<br />resulting hand is much higher than the one of his original hand.<br />Given the cards the cheater has in hand, you must calculate the maximum increase he can get<br />in the envido score by exchanging one of his cards with a card from the deck. Notice that the<br />resulting hand must be formed by two of his original cards and one new card selected from the<br />deck, and that he cannot have two equal cards (same number and suit).</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br /> six values N1 , S1 , N2 , S2 , N3 , and S3 separated by single spaces. Each pair (Ni , Si ) describes<br /> a card in the hand of the cheater (1 &le; i &le; 3), where Ni is the number of the card (1, 2, 3, 4,<br /> 5, 6, 7, 10, 11 or 12), and Si is its suit (espada, basto, copa or oro). You may assume that the<br /> three cards are different. The last line of the input contains three times the number &minus;1 and an<br /> asterisk, with the six values separated by single spaces, and should not be processed as a test<br /> case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer representing the maximum increase in<br />the envido score that can be obtained by replacing exactly one card of the input hand.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />12 espada 10 basto 11 basto<br />7 espada 1 oro 2 oro<br />7 espada 1 oro 6 espada<br />-1 * -1 * -1 *<br /><br /><strong>Output:</strong>
7<br />10<br />0</pre>


______________________________________________________
GUESSTHE||||||true||||||


<p>You are playing the funny game &ldquo;Guess the number&rdquo; with a friend. In this game, one of the<br />players choose a positive integer and the other has to guess it by using the clues that are<br />revealed. The i-th clue is either &ldquo;Y&rdquo; or &ldquo;N&rdquo; indicating whether the hidden number is a multiple<br />of i or not, respectively. For instance, if the clues so far are &ldquo;YYNYY&rdquo; it means that the number<br />is a multiple of 1, 2, 4 and 5, but it is not a multiple of 3. Given the clues of the game so<br />far, you have to guess the minimum possible number according to them, or call your friend a<br />cheater if there is no number such that the clues were correctly given.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />a non-empty string of at most 20 characters. The string is formed entirely of uppercase letters<br />&ldquo;Y&rdquo; and &ldquo;N&rdquo;, and represents the clues given so far, in order from left to right. The last line of<br />the input contains a single asterisk and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the minimum positive integer that satisfies all the<br />clues, or &minus;1 if there is no such a number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />YYNYY<br />YYYNNN<br />*<br /><br /><strong>Output:</strong>
20<br />-1</pre>


______________________________________________________
HEXBOARD||||||true||||||


<p>Square boards (as the chessboard) are really common among games and luckily, they are easy<br />to draw with the help of a ruler. However, there exist other games that requiere hexagonal<br />boards, that are much harder to draw by hand.<br />The Institute for Client Permanent Comfort (ICPC) of a famous board game factory has decided<br />to provide their customers with an automated program to build hexagonal boards for several<br />games. The size of an hexagonal board is determined by a single integer N that indicates how<br />many cells there are in each of the 6 sides of the board. For example, a board of size N = 2<br />should look as follows when drawn by the program.<br />&nbsp; &nbsp; &nbsp; <span style="font-family: courier new,courier;">_<br />&nbsp;_/ \_<br />/ \_/ \<br />\_/ \_/<br />/ \_/ \<br />\_/ \_/<br />&nbsp; \_/</span><br />Your task is to help ICPC in making the program.</p>

*******InputConstraints*******

<p>The input contains several test cases. Each test case is described in a single line that contains<br />an integer N representing the size of the board (1 &le; N &le; 20). The last line of the input<br />contains a single &minus;1 and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output the hexagonal board of the required size, and a line with exactly<br />three asterisks. You have to follow the sample input and output, as well as the example given<br />above. Use only regular spaces, underscores (&ldquo; &rdquo;), slashes (&ldquo;/&rdquo;) and backslashes (&ldquo;\&rdquo;). There<br />must be no trailing spaces at the end of printed lines, neither empty lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1<br />3<br />-1<br /><br /><strong>Output:</strong>
<span style="font-family: courier new,courier;"> _<br />/ \<br />\_/<br />***<br />     _<br />   _/ \_<br /> _/ \_/ \_<br />/ \_/ \_/ \<br />\_/ \_/ \_/<br />/ \_/ \_/ \<br />\_/ \_/ \_/<br />/ \_/ \_/ \<br />\_/ \_/ \_/<br />  \_/ \_/<br />    \_/<br />***</span></pre>


______________________________________________________
INTEGMAX||||||true||||||


<p>A set of points on the XY plane, all of them with different x coordinate, defines a polygonal<br />line in the following way: sort the points in increasing order of their x coordinates, and connect<br />each point with its neighbors. The integral of such polygonal line is the area contained below<br />the line and above the x axis, between the first and last values of x. For instance, the set of<br />points {(5, 1), (3, 2), (6, 2), (2, 1)} defines the polygonal line shown in the figure; the integral of<br />the polygonal line is the shaded area, with a value of 6.</p>
<p><img src="http://www.spoj.pl../../content/pabloh:integral.png" alt="" width="400" height="200" /></p>
<p>Given a set of N different values for x, and a set of N values for y, we want to pair them to<br /> form N points on the plane such that the integral of the polygonal line defined by the points is<br /> as large as possible.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in exactly three lines. The first line of<br />each test case contains an integer N indicating the number of points in the set (2 &le; N &le; 10<sup>4</sup> ).<br />The second line contains N different integers Xi separated by single spaces (1 &le; Xi &le; 10<sup>4</sup><br />for 1 &le; i &le; N ); these integers represent the values of x and are given in increasing order<br />(Xi &lt; Xi+1 for 1 &le; i &le; N &minus; 1). The third line contains N integers Yi separated by single spaces<br />(1 &le; Yi &le; 10<sup>4</sup> for 1 &le; i &le; N ); these integers represent the values of y and are not given in any<br />particular order. The last line of the input contains a single &minus;1 and should not be processed<br />as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the maximum integral of a polygonal line formed<br />by pairing the input values, using exactly one decimal digit. Notice that one decimal digit is<br />always enough to represent the exact value of the integral of a polygonal line defined by points<br />with integer coordinates.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1 2<br />1 2<br />4<br />2 3 5 6<br />1 2 1 2<br />-1<br /><br /><strong>Output:</strong>
1.5<br />7.0</pre>


______________________________________________________
CURSE||||||false||||||

<p>Most of the contestants managed to arrive at the Benelux Algorithm Programming Contest on&nbsp;time. All except those unfortunate souls who chose to use a cheap car navigation system. A&nbsp;couple of wrong turns led them completely of course, and now they have ended up all over the&nbsp;world.&nbsp;Consider the case of contestant J.-P. B. (who has asked to remain anonymous). After driving&nbsp;for countless hours he found himself beneath three miles of water in the middle of the Atlantic&nbsp;Ocean. He was so focused on his navigation system that he failed to look outside until he noticed&nbsp;that the air was getting very moist. Fortunately for this contestant there was a spare submarine&nbsp;under his seat, which allowed him to escape this perilous situation.&nbsp;Tragic as this story seems, it is not even the worst. Another contestant, whom we will simply&nbsp;call S, wisely decided to travel by train. Sadly, she still listened to the advice of her evil car&nbsp;navigation system, and this morning she took a southbound train instead of heading north.&nbsp;After some more bad directions she found herself locked inside a labyrinth, in the pyramid of&nbsp;the Egyptian pharaoh Sok-O-Ban. As any experienced adventurer knows, these ancient tombs&nbsp;are often riddled with traps and other mechanisms. Sok-O-Ban's nal resting place was no&nbsp;exception.&nbsp;During his lifetime this pharaoh was known for his sadistic behavior, and he liked to give&nbsp;impossible challenges to random strangers. It is therefore no coincidence that the cavern where&nbsp;contestant S ended up was completely closed o, surrounded by solid rock on every side.&nbsp;After looking around, our protagonist S managed to draw a map of the tomb. Fortunately she&nbsp;found no skeletons, mummies or spiked death traps. She did discover some buttons embedded&nbsp;in the oor tiles. If she could press them all at the same time, then the hidden exit would open.&nbsp;But as soon as she would release one of the buttons, the door would close again.&nbsp;Besides the buttons, the walls and a few dusty oor tiles, there were also two sarcophagi lled&nbsp;with rocks. To accommodate the small stature of the ancient Egyptians, the sarcophagi were&nbsp;cubes with sides measuring 1 meter, the same size as the &nbsp;oor tiles. It seemed that these&nbsp;sarcophagi were the key to escaping: by pushing them onto the buttons the exit could be kept&nbsp;open. Only one small problem remained: the sarcophagi were far too heavy to move by hand&nbsp;and too large to climb over.&nbsp;Fortunately for S, the pharaoh did not anticipate the portable sarcophagus transporter she had&nbsp;conveniently stashed in her backpack. Attaching this reusable system to her arms allowed her&nbsp;to eortlessly push a sarcophagus exactly one meter straight ahead. This corresponds nicely to&nbsp;the 1 meter steps S used when marking out the grid in her map.</p>

______________________________________________________
CAL||||||false||||||

<p>In a galaxy, far far away, there was a planet, Gringo quite similar to our own. Maybe it is because the planet has a similar "Sun" and "Moon". In Gringo, people use a calendar which is identical to ours. It is said this calendar was made by one of many kings in Gringo's history thousands of years ago. In the legend, it says the king liked programming very much, and at one night he solved a very difficult problem. He was so happy that he wanted to make a new calendar to congratulate. Hence in his calendar, this very midnight with full moon is first second.</p>
<p>&nbsp;</p>
<p>In this calendar, names of periods of time are same to ours, like days, months, years, minutes and seconds. In Gringo planet, the planet will reach same position on its revolution around the "Sun" every T1 seconds, the time between two neighbor full moons is T2 seconds and the time between two neighbor midnights is T3 seconds. It's very clear that a year is T1 seconds and a day is T3 seconds. And luckily, T1 is divisible by T3. So a leap year is unnecessary.</p>
<p>&nbsp;</p>
<p>But T2 may be not divisible by T3, which is very troublesome. But our king was very clever, he made following rules.</p>
<p>&nbsp;</p>
<p>1. A new day comes when a midnight come.</p>
<p>2. A new year comes when the planet reaches the same position with the "first midnight" on its revolution around the "Sun". Of course it will be a midnight and a new day will come, too.</p>
<p>3. When a new day comes, if the "Moon" will be full in this day, a new month will come, too.</p>
<p>4. When a new year comes, a new month will come, too. The "Moon" may not be full. So the month was called "0th month" of a year, until a new full moon come.</p>
<p>5. Due to these complex rules, it is very difficult to calculate how many days in a month. Now many people in Gringo are turning to you for help.</p>
<p>&nbsp;</p>
<p><strong>Input</strong></p>
<p>&nbsp;</p>
<p>There are multiple test cases. The first line of input contains an integer T (T&lt;= 20), indicating the number of test cases. Then T test cases follow. There is a blank line between different test cases. The first line of each test case contains 3 integers T1, T2 and T3 (1&lt;=T3&lt;=10000, 5&lt;=T1/T3&lt;=1000, T1 is divisible by T3, T3&lt;T2&lt;T1). The next line contains an integer Q (1&lt;=Q&lt;=100). Then Q lines follow, each line contains two integer Yi and Mi, means the Mith month in Yith year, (1 &lt;= Yi &lt;=5000, 0&lt;= Mi &lt;= 5000).</p>
<p>&nbsp;</p>
<p><strong>Output</strong></p>
<p>&nbsp;</p>
<p>For each month, output how many days in that months. If there is no such month, output 0.</p>
<p>&nbsp;</p>
<p><strong>Sample Input</strong></p>
<p>1</p>
<p>3650 295 10</p>
<p>4</p>
<p>1 1</p>
<p>1 2</p>
<p>2 0</p>
<p>2 13</p>
<p>&nbsp;</p>
<p><strong>Sample Output</strong></p>
<p>29</p>
<p>30</p>
<p>18</p>
<p>0</p>


______________________________________________________
ALCHE||||||true||||||


<p>Alchemy is a discipline that is believed to span at least 2500 years of human history.<br />It is most known for its intention of transforming matter, typically trying to come up<br />with a recipe to make gold based on much less valued metals, aided by some non-metal<br />components.<br />Most scientists and scholars think that alchemy has failed. They surely do not know that<br />a particular alchemist named Albert Ainstain, managed to create gold from a simple<br />combination of ordinary iron (much more common and cheap than gold) and some good-<br />old-fashioned water. However, the combination must have the exact proportion of grams<br />of iron and centiliters of water to work, otherwise the alchemist would end up with useless<br />rusty iron.<br />Many alchemists and bussinessman had tried to recreate Albert Ainstain&rsquo;s findings to<br />achieve recognition, fame, prestige or economical welfare, but none of them have suceeded.<br />Since you know very little about chemistry, alchemy and ancient practices, you believe<br />that your chances for success in this task are bounded to using a computer in your benefit.<br />Therefore, you decide to create a program that automatically tests a given combination<br />of iron and water, and informs whether that combination has the correct proportion<br />to produce gold. Of course, once you find the right proportion, you can double both<br />amounts and get double the gold, cut both in half and get half the gold, or multiply both<br />by any other real number to obtain the amount of gold you want. Your task is then,<br />given the number of grams of iron and the number of centiliters of water, say whether<br />the proportion between both components is the right one.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in a single line. The line<br />contains two integers I and W separated by a single space, representing grams of iron<br />and centiliters of water, respectively (1 &le; I, W &le; 10<sup>6</sup> ). The last line of the input contains<br />the number &minus;1 twice separated by a single space and should not be processed as a test<br />case.</p>

*******OutputConstraints*******

<p>For each test case output a single line containing an uppercase &ldquo;Y&rdquo; if the combination<br />produces gold, or an uppercase &ldquo;N&rdquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1000 37<br />999 37<br />10000 370<br />10001 370<br />-1 -1<br /><br /><strong>Output:</strong><br />Y<br />N<br />Y<br />N</pre>


______________________________________________________
BORW||||||true||||||


<p style="text-align: right;">&ldquo;<em>It&rsquo;s Black, It&rsquo;s White, It&rsquo;s Tough For You To Get By</em>&rdquo;<br />Michael Jackson (1958-2009)</p>
<p><br />You have a sequence of integers. You can paint each of the integers black or white, or leave<br />it unpainted. The black integers must appear in ascending order and the white integers<br />must appear in descending order. The ascending/descending order must be strict, that<br />is, two integers painted with the same color cannot be equal. Paint the sequence so as to<br />minimize the number of unpainted integers.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in exactly two lines. The first line<br />contains an integer N indicating the number of elements in the sequence (1 &le; N &le; 200).<br />The second line contains N integers Xi separated by single spaces, representing the<br />sequence to paint (1 &le; Xi &le; 10<sup>6</sup> for 1 &le; i &le; N ). The last line of the input contains a<br />single &minus;1 and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer representing the minimum number<br />of unpainted elements of the sequence, when the sequence is painted optimally following<br />the rules described above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />8<br />1 4 2 3 3 2 4 1<br />12<br />7 8 1 2 4 6 3 5 2 1 8 7<br />-1<br /><br /><strong>Output:</strong>
0<br />2</pre>


______________________________________________________
CLOSEST||||||true||||||


<p>Closest pair is an old problem that asks to find, given a set of N points in the plane,<br />the pair that minimizes the distance between them. This problem can easily be solved<br />using roughly N 2 operations by testing all possible pairs of points and keeping at each<br />step the optimal pair. With a more clever approach, the problem has been solved using<br />&sim; N log N operations.<br />Closest triplet is an analogous problem which also takes a set of N points as input, and<br />asks for the triplet (group of three points) that minimizes the sum of the three distances<br />between each pair of them. In this case there is also a trivial solution that tests all possible<br />triplets using roughly N<sup>3</sup> operations. However, since you are a clever programmer, we<br />are confident that you are able to find a better algorithm.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line<br />contains an integer N indicating the number of points in the set (3 &le; N &le; 3000). Each<br />of the next N lines describes a different point of the set using two integers X and Y<br />separated by a single space (1 &le; X, Y &le; 10<sup>6</sup> ); these values represent the coordinates of<br />the point in the XY plane. You may assume that within each test case no two points<br />have the same location. The last line of the input contains a single &minus;1 and should not<br />be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with a real number representing the sum of the<br />distances between each pair of points of any closest triplet of the set of points. Round<br />the result to the closest rational number with three decimal places. In case of ties, round<br />up. Always use exactly three digits after the decimal point, even if it means finishing<br />with a zero.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />1 1<br />4 1<br />1 5<br />1000 1000<br />9<br />100000 200000<br />200000 200000<br />150000 286603<br />60000 140000<br />240000 140000<br />150000 340000<br />1 340000<br />300000 340000<br />150000 87087<br />-1<br /><br /><strong>Output:</strong>
12.000<br />300000.796</pre>


______________________________________________________
DRAWM||||||true||||||


<p>You are a member of a team that is working in a new wonderful graphics program.<br />Your task is to write a module for drawing skylines of mountains. However, for now the<br />program is in beta version, so each skyline is discretized. This means that your module<br />receives as input a sequence of integers representing heights. Each pair of consecutive<br />heights in the sequence may differ by at most 1 and produces a column of output, each<br />column containing a single character. The particular character to write and its position<br />in the column depend on the pair of heights. When both heights are equal an underscore<br />(&ldquo; &rdquo;) must be printed. If the heigths within the pair increase or decrease, you must write<br />a slash (&ldquo;/&rdquo;) or a backslash (&ldquo;\&rdquo;), respectively. The position of the character in the<br />column is such that the skyline visually respect the given heights.<br />For instance, the sequence of heights (1, 2, 3, 2, 3, 3, 2, 1, 0) must produce the skyline shown<br />in the following figure.</p>
<p><span style="font-family: courier new,courier;">&nbsp; &nbsp; _<br />&nbsp;/\/ \<br />/&nbsp;&nbsp;&nbsp;&nbsp; \<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \</span></p>
<p>Notice that when the sequence of heights has C + 1 elements, the corresponding skyline<br />has only C columns. Given a sequence of heights, you must draw the skyline according<br />to the rules given above. See the examples for further clarification.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in exactly two lines. The first<br />line contains an integer C indicating the number of columns of the skyline (1 &le; C &le; 70).<br />The second line contains C + 1 integers Hi separated by single spaces representing the<br />sequence of heights (0 &le; Hi &le; 30 for 1 &le; i &le; C + 1). You may assume that there exist<br />an height Hi = 0, and that the difference between succesive heights is at most 1 (i.e.<br />|Hi &minus; Hi+1 | &le; 1 for 1 &le; i &le; C). The last line of the input contains a single &minus;1 and should<br />not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output the correponding skyline, followed by a line with exactly three<br />asterisks (&ldquo;***&rdquo;). While writting the skyline, use only regular spaces, newlines, and the<br />three characters mentioned in the statement. Ths skyline must be left aligned and it<br />must contain exactly C columns. There must be no trailing spaces at the end of printed<br />lines, neither empty lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />8<br />1 2 3 2 3 3 2 1 0<br />3<br />1 0 0 1<br />-1<br /><br /><strong>Output:</strong><br /><span style="font-family: courier new,courier;">  &nbsp; _<br />&nbsp;/\/ \<br />/&nbsp;&nbsp;&nbsp;&nbsp; \<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<br /></span>***<br />\_/<br />***</pre>


______________________________________________________
ELASTIC||||||true||||||


<p>The Institute of Circles with Perimetral Connections (ICPC) has recently discovered that<br />several machines that were working in their diverse productive areas were totally obsolete.<br />Of course, all machines in the Institute contain several circles.<br />The Supreme Chief Director Manager President of the ICPC asked their Computer Aided<br />Problem Solving department to help in overcoming this situation. They have signaled<br />you as the maximum responsible, so you better get to work.<br />Many machines in the Institute have mechanical parts in the shape of a circle that need<br />to be rotated clockwise in order for the machine to work. Currently, each circular part<br />is connected to a different electrical engine that does the job. You noted, however, that<br />when many circles are coplanar, you can connect them with elastic bands and they will<br />rotate all together with the energy of one engine.<br />This marvelous idea lead you to a new problem. What&rsquo;s the optimal way to connect<br />all the circles? In general, there are many ways to place elastic bands and make all the<br />circles be connected. Since some of the rotating power of the system is lost in the tension<br />of the elastic bands, you want to minimize the total length of elastic bands used.<br />Formally, the length of the elastic band that connects two cricles is the perimeter of the<br />smallest convex area that contains both circles. The total length is the sum of the lengths<br />of all used elastic bands. Two circles can be connected with an elastic band even if the<br />band touches or goes through any number of other circles or elastic bands.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in several lines. The first line<br />contains an integer N indicating the number of circles to connect (2 &le; N &le; 3000). Each<br />of the next N lines describes a different circle using three integers X, Y and R separated<br />by single spaces (1 &le; X, Y, R &le; 10<sup>6</sup> ). The values X and Y represent the coordinates of<br />the center of the circle in the XY plane, while the value R indicates its radius. You may<br />assume that within each test case no two circles overlap or touch each other. The last<br />line of the input contains a single &minus;1 and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line containing a real number representing the minimum<br />total length of elastic band needed to connect all the circles. Round the result to the<br />closest rational number with three decimal places. In case of ties, round up. Always use<br />exactly three digits after the decimal point, even if it means finishing with a zero.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />2 2 2<br />1 6 1<br />6 1 1<br />2<br />1 1 1<br />1 4 1<br />-1<br /><br /><strong>Output:</strong>
35.829<br />12.283</pre>


______________________________________________________
FINDSR||||||true||||||


<p>In mathematics, the N-th root of a number M, is a number K such that K<sup>N</sup> = M , i.e. KKK . . . K = M where K is multiplied N times.<br />We can translate this into strings. In string notation, the yuxtaposition is concatenation instead of multiplication. So, the N-th root of a string S is another string T such that T<sup>N</sup> = S, where T N = T T T . . . T is the string T concatenated N times. For instance, if S = &ldquo;abcabcabcabc&rdquo;, for N = 2 the string T = &ldquo;abcabc&rdquo; is the N-th root of S, while for N = 4 its N-th root is T = &ldquo;abc&rdquo;. Note that for N = 1 any string S is the N-th root<br />of S itself.<br />Given a string S you have to find the maximum N such that the N-th root of S exists. In the above example the answer would be 4, because there is no N-th root of S = &ldquo;abcabcabcabc&rdquo; for N &gt; 4.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in a single line. The line contains<br />a non-empty string S of at most 10<sup>5</sup> characters, entirely formed of digits and lowercase<br />letters. The last line of the input contains a single asterisk (&ldquo;*&rdquo;) and should not be<br />processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with the greatest integer N such that there exists<br />a string T that concatenated N times is equal to S.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />abcabcabcabc<br />abcdefgh012<br />aaaaaaaaaa<br />*<br /><br /><strong>Output:</strong>
4<br />1<br />10</pre>


______________________________________________________
CLOCKS||||||true||||||


<p>&nbsp;</p>
<pre>|-------|    |-------|    |-------|    <br />|       |    |       |    |   |   |    <br />|---O   |    |---O   |    |   O   |          <br />|       |    |       |    |       |           <br />|-------|    |-------|    |-------|    <br />    A            B            C<br /><br />|-------|    |-------|    |-------|<br />|       |    |       |    |       |<br />|   O   |    |   O   |    |   O   |<br />|   |   |    |   |   |    |   |   |<br />|-------|    |-------|    |-------|<br />    D            E            F<br /><br />|-------|    |-------|    |-------|<br />|       |    |       |    |       |<br />|   O   |    |   O---|    |   O   |<br />|   |   |    |       |    |   |   |<br />|-------|    |-------|    |-------|  (Figure 1)<br />    G            H            I<br /></pre>
<hr />
<p>There are nine clocks in a 3*3 array (figure 1). The goal is to return all the dials to 12 o'clock with as few moves as possible. There are nine different allowed ways to turn the dials on the clocks. Each such way is called a move. Select for each move a number 1 to 9. That number will turn the dials 90' (degrees) clockwise on those clocks which are affected according to figure 2 below.</p>
<pre>Move   Affected clocks<br /> <br /> 1         ABDE<br /> 2         ABC<br /> 3         BCEF<br /> 4         ADG<br /> 5         BDEFH<br /> 6         CFI<br /> 7         DEGH<br /> 8         GHI<br /> 9         EFHI    (Figure 2)<br /></pre>

*******InputConstraints*******

<p>&nbsp;</p>
<p>Read nine numbers from standard input<kbd></kbd>. These numbers give the start positions of the dials. 0=12 o'clock, 1=3 o'clock, 2=6 o'clock, 3=9 o'clock. The example in figure 1 gives the following input data file:</p>
<pre>3 3 0<br />2 2 2 <br />2 1 2<br /></pre>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>Write to the standard output the shortest sequence of moves (numbers), which returns all the dials to 12 o'clock. In case there are many solutions, write the solution which is the least in lexicographic order. In our example the <kbd>output</kbd> is as follows:</p>
<pre>4 5 8 9<br /></pre>

*******IOTestCases*******

<pre>Each number represents a time accoring to following table:<br /><pre>0 = 12 o'clock<br />1 = 3 o'clock<br />2 = 6 o'clock <br />3 = 9 o'clock<br /></pre>
<br />
<pre>3 3 0         3 0 0         3 0 0          0 0 0         0 0 0 <br />2 2 2   5-&gt;   3 3 3   8-&gt;   3 3 3   4 -&gt;   0 3 3   9-&gt;   0 0 0 <br />2 1 2         2 2 2         3 3 3          0 3 3         0 0 0 <br /><br />Note: This just represents a valid sequence of moves, and not the solution<br /></pre>
<br /></pre>


______________________________________________________
TRIKA||||||true||||||


<p style="text-align: left;">Abotrika is a famous player , he plays in a good team , his team will play the final match the next week and he must train well , because all his club fans are waiting from Abotrika to score more than one goal , so his friends suggested helping him in training given that Abotrika will play in the training alone against all his friends&nbsp;</p>

*******InputConstraints*******

<p style="text-align: left;">Given two integers N,M (length and width of training court) ,&nbsp; 2&lt;=N,M&lt;=20 and X,Y the starting point of Abotrika on the court where X is number of row and Y is number of column 1&lt;=X,Y&lt;=N,M then P[i][j],where P is the power of each of Abotrika's friends 0&lt; P[i][j]&lt;100 , and P[X][Y] is the power of Abotrika.</p>

*******OutputConstraints*******

<p style="text-align: left;">The output must be one line either "N" or "Y &nbsp;then the maximum power "Abotrika can get when he pass from his friends to reach the (the goal who is at the cell P[N][M] in the court ). NOTE :&nbsp; Abotrika's power decreases by the power of his friend who passed from him in his way to score a goal "Y" means that he had scored a goal and he has at least 0 power and "N" if he couldn't reach the goal &hellip; don't forget that Abotrika can pass from two directions&nbsp; at right or downwards to reach the goal.&nbsp;</p>

*******IOTestCases*******

<pre style="text-align: left;"><strong>Input:</strong>
<p style="text-align: left;">4 4</p><p style="text-align: left;">1 1</p><p style="text-align: left;">100 55 10 2</p><p style="text-align: left;">20&nbsp;&nbsp; 10 90 1</p><p style="text-align: left;">60&nbsp;&nbsp; 20 22 4</p><p style="text-align: left;">1&nbsp;&nbsp;&nbsp;&nbsp; 30 70 5</p><strong>Output:</strong>
<p style="text-align: left;">Y 23</p><p align="right">&nbsp;</p><p style="text-align: left;"><strong>Explaination : </strong></p><p style="text-align: left;">The maximum power Abotrika can get after reaching goal : 100- (55+10+2+1+4+5)=23&nbsp;</p><p style="text-align: left;">&nbsp;</p><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: left; margin: 8px;"><strong>Input:</strong>
<p style="text-align: left;">2 2</p><p style="text-align: left;">1 1</p><p style="text-align: left;">1   55 </p><p style="text-align: left;">20&nbsp;10 </p><strong>Output:</strong>
<p style="text-align: left;">N</p></pre>
<p style="text-align: left;"><strong>Explaination : </strong></p>
<p style="text-align: left;">The maximum power Abotrika can get after reaching goal : 1 - (20+10)=-29 so it will be N&nbsp;</p>
</pre>


______________________________________________________
GARBAGE||||||true||||||


<p>A big office uses a cleaning robot to empty the trash can in every cubicle. The surface of<br />each cubicle is a square and the office floor plan is organized as a rectangular matrix of R<br />rows of C cubicles each. The cleaning process begins by the robot entering the floor by a<br />door that accesses the topmost leftmost cubicle, and finishes with the robot exiting using<br />the same door. Both entering and leaving take 26 seconds each. When the cleaning robot<br />is in a cubicle it can emtpy the trash can using 13 seconds. The robot can also move to<br />a cubicle that shares a side with its current location, using 38 seconds. The robot needs<br />to enter in each cubicle at least once to empty its trash can.</p>
<p>The total time the robot takes for the entire process depends on the actual tour through<br />the different cubicles. Among all possible tours, we are interested in those of minimum<br />time.</p>
<p>Given the description of the office, you must indicate the minimum time required for<br />the entire cleaning process (including entering, leaving, emptying the trash can in every<br />cubicle, and moving around). Notice that it is possible that an optimal tour passes<br />through a cubicle several times, but the robot has to take the time to empty the trash<br />can only once.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in a single line. The line contains<br />two integers R and C separated by a single space, representing the number of rows and<br />cubicles per row, respectively (1 &le; R, C &le; 100). The last line of the input contains the<br />number &minus;1 twice separated by a single space and should not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer representing the minimum number<br />of seconds that the robot needs to complete the cleaning process.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 2<br />3 3<br />-1 -1<br /><br /><strong>Output:</strong>
460<br />549</pre>


______________________________________________________
HOMEW||||||true||||||


<p>When trying to clean your old room, you find out your old notes from high school.<br />Reading the homeworks you were given then, you start thinking how much easier they<br />would have been today. However, there is a particular one that still seems to maintain<br />its difficulty.</p>
<p>When the solution to a problem involved solving the square root of an integer, to keep<br />a fancy and clean expression, you were asked to express it as the integer part and the<br />root part. This means that if you had as solution N you were asked to express it<br />as &radic;N = A &radic;B with the part A being as high as possible. For instance, 180 can be<br />expressed as 1 &radic;180, 2 &radic;45, 3 &radic;20 or 6 &radic;5. Of course, the last expression is the correct<br />one.</p>
<p>Now that you are grown up, you decide to write a program to perform this task for you.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in a single line. The line contains<br />an integer N (1 &le; N &le; 10<sup>18</sup> ). The last line of the input contains a single &minus;1 and should<br />not be processed as a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with two integers A and B separated by a single<br />space such that &radic;N = A &radic;B and A is maximum.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />180<br />17<br />1000000000000000000<br />-1<br /><br /><strong>Output:</strong>
6 5<br />1 17<br />1000000000 1</pre>


______________________________________________________
INVESORT||||||true||||||


<p>You have just bought an old fashioned jukebox that can hold 10 music albums. Albums<br />are mantained as a sequence, each album represented by a unique lowercase letter between<br />&ldquo;a&rdquo; and &ldquo;j&rdquo;, inclusive. The jukebox allows you to select a subsequence of contiguous<br />albums and a mechanical arm inverts that part of the sequence. For instance, if the<br />current sequence is &ldquo;abcdefghij&rdquo; and you select the subsequence &ldquo;bcd&rdquo;, the result of<br />the inversion would be &ldquo;adcbefghij&rdquo;. Soon you notice that it is possible to get the<br />albums into any desired order using simply inversions. However, you are interested in<br />doing so with the minimum number of operations.<br />Given the current order and a desired order of the 10 music albums, find the minimum<br />number of inversion operations needed to obtain the desired order.</p>

*******InputConstraints*******

<p>The input contains several test cases, each one described in a single line. The line contains<br />two strings C and D separated by a single space, representing the current and desired<br />orders of the music albums, respectively. Each of the strings has exactly 10 characters<br />and contains the characters of &ldquo;abcdefghij&rdquo; in some order. The last line of the input<br />contains two asterisks (&ldquo;*&rdquo;) separated by a single space and should not be processed as<br />a test case.</p>

*******OutputConstraints*******

<p>For each test case output a single line with an integer representing the minimum number<br />of inversions needed to transform the current order given by C, into the desired order<br />given by D.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />abcdefghij adcbefghij<br />abcdefghij abcdefghij<br />bcdaefghji beagfcdhji<br />* *<br /><br /><strong>Output:</strong>
1<br />0<br />2</pre>


______________________________________________________
IPCELLS||||||true||||||


<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Tim loves spreadsheets. Everything he does on a computer, he does in a spreadsheet. Track his expenses? Create a spreadsheet! Decide which car to buy? Create a spreadsheet to compare them! Make an inventory of his games? Create a spreadsheet! Decide which girl he loves most? &hellip;</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Unfortunately his spreadsheet software just crashed and he needs some of the data right now and does not have the time to install a competing office suit.</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Given the formulas used in the cells of a spreadsheet, calculate the values of all the cells.</p>

*******InputConstraints*******

<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">The first line of the input file contains an integer&nbsp;<span style="font-style: italic;">T&nbsp;</span>specifying the number of test cases. Each test case is preceded by a blank line.</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Each test case starts a single number&nbsp;<span style="font-style: italic;">N&nbsp;</span>giving the number of expression. Each of the following&nbsp;<span style="font-style: italic;">N&nbsp;</span>lines contains a single cell formula of the form &ldquo;<span style="font-family: monospace;">CELL = EXPRESSION</span>&rdquo;, where&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">CELL</span></span></span>&nbsp;is the name of the cell and&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">EXPRESSION</span></span></span>&nbsp;is a mathematical expression consisting of cell names and the operators&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">+</span></span></span>,&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">-</span></span></span>,&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">*</span></span></span>&nbsp;and&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">/</span></span></span>. A cell name is a non-empty sequence of letters followed by a positive integer.</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Each test case is correct: there are no cycles, and all cells referenced in expressions have definitions.</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 0em;"><span style="font-family: sans-serif; font-weight: bold;">Evaluating expressions</span></p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">When evaluating an expression, usual priorities apply: first we evaluate all&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">*</span></span></span>&nbsp;and&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">/</span></span></span>&nbsp;(left to right), and only then all&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">+</span></span></span>&nbsp;and&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">-</span></span></span>&nbsp;(again, left to right).</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">You may assume that the expressions are such that when evaluating the expression in correct order, the result and also all intermediate values will fit into 32-bit signed integer variables.</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">The operator&nbsp;<span style="white-space: nowrap;"><span><span style="font-family: monospace;">/</span></span></span>&nbsp;represents integer division which is always rounded&nbsp;<span style="font-weight: bold;">down</span>. The dividend will always be non-negative and the divisor will always be positive.</p>

*******OutputConstraints*******

<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">For each test case output the calculated values of cells, one per line, in the form &ldquo;<span style="font-family: monospace;">CELL = VALUE</span>&rdquo;. The rows in the output should be ordered alphabetically. (To compare two rows, take a look at the first character where they differ. The one with a smaller ASCII value goes first.)</p>
<p style="text-align: justify; margin-top: 0px; margin-bottom: 12px; margin-left: 0px; text-indent: 1.5em;">Optionally, output a blank line between test cases.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<span style="font-family: monospace;">2</span><br /><br /><span style="font-family: monospace;">3</span><br /><span style="font-family: monospace;">A47</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;5</span><span style="font-family: monospace;">&nbsp;+</span><span style="font-family: monospace;">&nbsp;ZZ22</span><br /><span style="font-family: monospace;">ZZ22</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;3</span><br /><span style="font-family: monospace;">A9</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;13</span><span style="font-family: monospace;">&nbsp;+</span><span style="font-family: monospace;">&nbsp;A47</span><span style="font-family: monospace;">&nbsp;*</span><span style="font-family: monospace;">&nbsp;ZZ22</span><br /><br /><span style="font-family: monospace;">2</span><br /><span style="font-family: monospace;">A1</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;4</span><span style="font-family: monospace;">&nbsp;/</span><span style="font-family: monospace;">&nbsp;7</span><span style="font-family: monospace;">&nbsp;+</span><span style="font-family: monospace;">&nbsp;4</span><span style="font-family: monospace;">&nbsp;/</span><span style="font-family: monospace;">&nbsp;7</span><br /><span style="font-family: monospace;">B2</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;3</span><span style="font-family: monospace;">&nbsp;*</span><span style="font-family: monospace;">&nbsp;3</span><span style="font-family: monospace;">&nbsp;/</span><span style="font-family: monospace;">&nbsp;7</span>

<strong>Output:</strong>
<span style="font-family: monospace;">A47</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;8</span><br /><span style="font-family: monospace;">A9</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;37</span><br /><span style="font-family: monospace;">ZZ22</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;3</span><br /><br /><span style="font-family: monospace;">A1</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;0</span><br /><span style="font-family: monospace;">B2</span><span style="font-family: monospace;">&nbsp;=</span><span style="font-family: monospace;">&nbsp;1</span></pre>


______________________________________________________
PLYGRND||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">George has K &le; 20 steel wires</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">shaped in the form of half-circles,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">with radii a1 , a2 , . . . , aK .</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">They</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">can be soldered (connected) at the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">ends, in any angle. Is it possible</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">for George to make a closed shape</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">out of these wires? He does not</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">have to use all the wires.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The wires can be combined at</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">any angle, but may not intersect.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Beware of floating point errors.</div>
<p>&nbsp;</p>
<p>George has K &le; 20 steel wires&nbsp;shaped in the form of half-circles,&nbsp;with radii a1 , a2 , . . . , aK .&nbsp;They&nbsp;can be soldered (connected) at the&nbsp;ends, in any angle. Is it possible&nbsp;for George to make a closed shape&nbsp;out of these wires? He does not&nbsp;have to use all the wires.&nbsp;The wires can be combined at&nbsp;any angle, but may not intersect.&nbsp;Beware of floating point errors.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>Each data set consists of a number 0 &lt; K &le; 20 on a line by itself, followed&nbsp;by a line of K space-separated numbers ai . Each number is in the range&nbsp;0 &lt; ai &lt; 10^7 , and has at most 3 digits after the decimal point.&nbsp;</p>
<p>The input will be terminated by a zero on a line by itself.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each test case, there should be one word on a line by itself; &ldquo;YES&rdquo; if&nbsp;it is possible to make a simple connected figure out of the given arcs, and&nbsp;&ldquo;NO&rdquo; if it isn&rsquo;t.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
4.000
2
1.000 1.000
3
1.455 2.958 4.424
7
1.230 2.577 3.411 2.968 5.301 4.398 6.777
0


<strong>Output:</strong>
NO
YES
NO
YES
</pre>


______________________________________________________
ROOKS||||||true||||||


<p style="text-align: left;">Two rooks are to be placed on a chess like N*N game board . each square contains a single non negative integer . the rooks must be placed on different squares.</p>
<p style="text-align: left;">We say that some squares on the board are attacked if that square in the same row or same column with the rook but squares containing rooks are not attacked.</p>
<p style="text-align: left;">We want to place our rooks so that the total sum of the numbers of all attacked squares is as large as possible . write a program that will find this maximum sum.</p>
<p align="right">&nbsp;</p>

*******InputConstraints*******

<p style="text-align: left;">The first line on input will contain N , 2&lt;=N&lt;=300</p>
<p style="text-align: left;">Each of the following N lines N integers . each number will be greater than or equal zero and less that 1000 these are numbers on board</p>
<p align="right">&nbsp;</p>

*******OutputConstraints*******

<p style="text-align: left;">the only line should contain single integer &ndash; the maximum sum from the task description</p>
<p align="right">&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3</pre>
<pre>0 1 4</pre>
<pre>3 0 2</pre>
<pre>1 4 1

<strong>Output:</strong>
15
</pre>


______________________________________________________
PERFUME||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">One of the largest perfume shops is making perfumes by mixing fragrant</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">essential oils with other compounds. The shop representative told you that what</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">really matters in the mixture is the percentages of two main components (call</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">them A and B), all other stuff is complementary. For example their first sold</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">perfume had 10% of component A and 35% of component B, while the most</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">successful one had 16% of A and 20% of B. Sometimes the store needs to</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">create a new mixture with specific percentages of A and B and they wonder if</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">this can be achieved by mixing some of the mixtures they already have and this</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">is where they need your help. For example a new mixture which has 12% of A</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and 30% of B can be created by mixing the two mixtures above in the ratio 2:1,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">while it is impossible to create a mixture which has 13% of A and 22% of B</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">using the same two mixtures.</div>
<p>&nbsp;</p>
<p>One of the largest perfume shops is making perfumes by mixing fragrant&nbsp;essential oils with other compounds. The shop representative told you that what&nbsp;really matters in the mixture is the percentages of two main components (call&nbsp;them A and B), all other stuff is complementary. For example their first sold&nbsp;perfume had 10% of component A and 35% of component B, while the most&nbsp;successful one had 16% of A and 20% of B. Sometimes the store needs to&nbsp;create a new mixture with specific percentages of A and B and they wonder if&nbsp;this can be achieved by mixing some of the mixtures they already have and this&nbsp;is where they need your help. For example a new mixture which has 12% of A&nbsp;and 30% of B can be created by mixing the two mixtures above in the ratio 2:1,&nbsp;while it is impossible to create a mixture which has 13% of A and 22% of B&nbsp;using the same two mixtures.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line contains T &lt;= 100, the number of test cases. The first line of each&nbsp;test case contains an integer (1 &lt;= N &lt;= 200), the number of mixtures the shop&nbsp;already has. The next N lines each contain two floating point numbers (0 &lt;= A,&nbsp;B &lt;= 100, A+B &lt;= 100) representing the percentages of components A and B in&nbsp;each mixture. The next line contains an integer (1 &lt;= Q &lt;= 5151) the number&nbsp;of mixtures to verify. The next Q lines each contain two floating point numbers&nbsp;(0 &lt;= A, B &lt;= 100, A+B &lt;= 100) representing the percentages of components&nbsp;A and B in each new mixture. Test cases are separated by one or more empty&nbsp;lines.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each mixture query print "Yes" if the new mixture can be created from the&nbsp;already existent ones or "No" otherwise. Print a blank line between test cases.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
10.0000 35.0000
16.0000 20.0000
2
12.0000 30.0000<br />13.0000 22.0000<br />
3
10 35
16 20
7 15
1
13 22

<strong>Output:</strong>
Yes
No<br /><br />Yes</pre>


______________________________________________________
PBOARD||||||true||||||


<p>Wango is a brilliant maths teacher. He has two sons Kango and Dango. They are born two years apart on the<br />same day! Kango is 9 and Dango is 7. Their birthdays are approaching again. Wango has to buy them a gift<br />each. After long thought, this time Wango wanted to give each of his sons a piece of the Pango board and thus<br />introduce them to higher mathematics.<br />A size n (n &gt;= 0) Pango board is a 2 by n rectangle of unit squares. A pango board has to be tiled with Pango<br />pieces. Any tiling with the Pango pieces is acceptable. A size 0 Pango board exists and is unique and serves as<br />an example of the empty set.</p>
<p><br />Four types of Pango pieces are available.<br />1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; &nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4<br />==&nbsp;&nbsp;&nbsp; ==&nbsp;&nbsp; ==&nbsp;&nbsp;&nbsp; ==<br />XX&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X<br />XX&nbsp;&nbsp;&nbsp; XX&nbsp; X</p>
<p><br />Picture of the four kinds of pieces</p>
<p><img title="Blocks for Kids" src="http://www.hostpic.org/images/66pic.jpg.jpeg" alt="4 types of blocks" width="278" height="69" /></p>
<p><br />When Wango presents a board to Kango or Dango, he has to tile the board completely with these pieces<br />(unlimited number of pieces of each type are available) and then give them out. Note that pieces cannot be<br />rotated for tiling. To cut costs (recession mind you), Wango decides to buy a single board of size N, then<br />choose a k (0 &lt;= k &lt;= N), and give a size k board to Kango and a size (N-k) board to Dango, (tiled of course).<br />Help him find the number of ways he can give the presents. Two ways are distinct if and only if either Dango<br />gets a different board or Kango gets a different board. Two Pango boards are considered the same if and only<br />if they have the same tiling (same set of tiles at the same places) from left to right (rotation of board is not<br />allowed in comparing).</p>

*******InputConstraints*******

<p>The input consists of a sequence of cases, one per line.<br />Each case consists of one integer N (0 &lt;= N &lt;= 1000,000,000) representing the size of the board which<br />Wango is going to buy.<br />The input will end with a line containing -1. This case should not be processed.<br />There will be a maximum of 10000 test cases.</p>

*******OutputConstraints*******

<p>One line per case, outputting the number of ways Wango can distribute the presents to his sons modulo<br />10,007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />0<br />1<br />2<br />-1<br /><br /><strong>Output:</strong><br />1<br />4<br />16<br /><br />Explanation:<br />Number of different 0-sized Pango boards = 1<br />Number of different 1-sized Pango boards = 2<br />Number of different 2-sized Pango boards = 6<br />For N = 0, he has to give 0-sized boards to both his sons. He can do this in 1*1 = 1 way<br />For N = 1, he has to give 0-sized board to one of his sons, and 1-sized board to the other, for a total of 2*1 +<br />1*2 = 4 ways<br />For N = 2, he can give the presents in 6*1 + 2*2 + 1*6 = 16 ways<br /></pre>


______________________________________________________
SUBLEX||||||true||||||


<p>Little Daniel loves to play with strings! He always finds different ways to have fun with strings! Knowing that, his friend Kinan decided to test his skills so he gave him a string <strong>S</strong> and asked him <strong>Q</strong> questions of the form:</p>
<p><br />If all distinct substrings of string <strong>S</strong> were sorted lexicographically, which one will be the <strong>K-th</strong> smallest?</p>
<p><br />After knowing the huge number of questions Kinan will ask, Daniel figured out that he can't do this alone. Daniel, of course, knows your exceptional programming skills, so he asked you to write him a program which given <strong>S</strong> will answer Kinan's questions.<br /><strong><br />Example:</strong></p>
<p><br /><strong>S</strong> = "aaa" (without quotes)<br />substrings of S are "a" , "a" , "a" , "aa" , "aa" , "aaa". The sorted list of substrings will be:<br />"a", "aa", "aaa".</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>In the first line there is Kinan's string <strong>S</strong> (with length no more than  90000 characters). It contains only small letters of English alphabet.  The second line contains a single integer <strong>Q</strong> (<strong>Q</strong> &lt;= 500) , the number of questions Daniel will be asked. In the next <strong>Q</strong> lines a single integer <strong>K</strong> is given (0 &lt; <strong>K</strong> &lt; 2^31).</p>

*******OutputConstraints*******

<p>Output consists of <strong>Q</strong> lines, the <strong>i-th </strong>contains a string which is the answer to the <strong>i-th</strong> asked question.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />aaa<br />2<br />2<br />3<br /><br /><strong>Output:</strong>
aa<br />aaa<br /></pre>


______________________________________________________
LITE||||||true||||||


<p><br />Farmer John tries to keep the cows sharp by letting them play with intellectual toys. One of the larger toys is the lights in the barn.&nbsp; Each of the N (2 &lt;= N &lt;= 100,000) cow stalls conveniently numbered 1..N has a colorful light above it.<br /><br />At the beginning of the evening, all the lights are off. The cows control the lights with a set of N pushbutton switches that toggle the lights; pushing switch i changes the state of light i from off to on or from on to off.<br /><br />The cows read and execute a list of M (1 &lt;= M &lt;= 100,000) operations expressed as one of two integers (0 &lt;= operation &lt;= 1).<br /><br />The first kind of operation (denoted by a 0 command) includes two subsequent integers S_i and E_i (1 &lt;= S_i &lt;= E_i &lt;= N) that indicate a starting switch and ending switch. They execute the operation by pushing each pushbutton from S_i through E_i inclusive exactly once.<br /><br />The second kind of operation (denoted by a 1 command) asks the cows to count how many lights are on in the range given by two integers S_i and E_i (1 &lt;= S_i &lt;= E_i &lt;= N) which specify the inclusive range in which the cows should count the number of lights that are on.<br /><br />Help FJ ensure the cows are getting the correct answer by processing the list and producing the proper counts.</p>

*******InputConstraints*******

<p><br />Line 1: Two space-separated integers: N and M<br />Lines 2..M+1: Each line represents an operation with three space-separated integers: operation, S_i, and E_i</p>

*******OutputConstraints*******

<p>Lines 1..number of queries: For each output query, print the count as an integer by itself on a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 5<br />0 1 2<br />0 2 4<br />1 2 3<br />0 2 4<br />1 1 4<br /><br /><strong>Output:</strong><br />1<br />2<br /></pre>


______________________________________________________
NUMGAME||||||true||||||


<p>Arya and Bran are playing a game. Initially, two positive integers&nbsp;<strong>A</strong>&nbsp;and&nbsp;<strong>B</strong>&nbsp;are written on a blackboard. The players take turns, starting with Arya. On his or her turn, a player can replace&nbsp;<strong>A</strong>&nbsp;with&nbsp;<strong>A</strong>&nbsp;-&nbsp;<strong>k</strong>*<strong>B</strong>&nbsp;for any positive integer&nbsp;<strong>k</strong>, or replace&nbsp;<strong>B</strong>&nbsp;with&nbsp;<strong>B</strong>&nbsp;-&nbsp;<strong>k</strong>*<strong>A</strong>&nbsp;for any positive integer&nbsp;<strong>k</strong>. The first person to make one of the numbers drop to zero or below loses.</p>
<p>For example, if the numbers are initially (12, 51), the game might progress as follows:</p>
<ul>
<li style="margin-bottom: 0.25em;">Arya replaces 51 with 51 - 3*12 = 15, leaving (12, 15) on the blackboard.</li>
<li style="margin-bottom: 0.25em;">Bran replaces 15 with 15 - 1*12 = 3, leaving (12, 3) on the blackboard.</li>
<li style="margin-bottom: 0.25em;">Arya replaces 12 with 12 - 3*3 = 3, leaving (3, 3) on the blackboard.</li>
<li style="margin-bottom: 0.25em;">Bran replaces one 3 with 3 - 1*3 = 0, and loses.</li>
</ul>
<p>We will say (<strong>A</strong>,&nbsp;<strong>B</strong>) is a&nbsp;<em>winning</em>&nbsp;position if Arya can always win a game that starts with (<strong>A</strong>,<strong>B</strong>) on the blackboard, no matter what Bran does.</p>
<p>&nbsp;</p>
<p>Given four integers&nbsp;<strong>A<sub>1</sub></strong>,&nbsp;<strong>A<sub>2</sub></strong>,&nbsp;<strong>B<sub>1</sub></strong>,&nbsp;<strong>B<sub>2</sub></strong>, count how many winning positions (<strong>A</strong>,&nbsp;<strong>B</strong>) there are with&nbsp;<strong>A<sub>1</sub></strong>&nbsp;&le;&nbsp;<strong>A</strong>&nbsp;&le;&nbsp;<strong>A<sub>2</sub></strong>&nbsp;and&nbsp;<strong>B<sub>1</sub></strong>&nbsp;&le;&nbsp;<strong>B</strong>&nbsp;&le;&nbsp;<strong>B<sub>2</sub></strong>.</p>

*******InputConstraints*******

<p>The first line of the input gives the number of test cases,&nbsp;<strong>T</strong>.&nbsp;<strong>T</strong>&nbsp;test cases follow, one per line. Each line contains the four integers&nbsp;<strong>A<sub>1</sub></strong>,&nbsp;<strong>A<sub>2</sub></strong>,&nbsp;<strong>B<sub>1</sub></strong>,&nbsp;<strong>B<sub>2</sub></strong>, separated by spaces.</p>
<p>1 &le;&nbsp;<strong>T</strong>&nbsp;&le; 250.&nbsp;<br />1 &le;&nbsp;<strong>A<sub>1</sub></strong>&nbsp;&le;&nbsp;<strong>A<sub>2</sub></strong>&nbsp;&le; 1,000,000.<br />1 &le;&nbsp;<strong>B<sub>1</sub></strong>&nbsp;&le;&nbsp;<strong>B<sub>2</sub></strong>&nbsp;&le; 1,000,000.<br /><strong>A<sub>2</sub></strong>&nbsp;-&nbsp;<strong>A<sub>1</sub></strong>&nbsp;&le; 999,999.<br /><strong>B<sub>2</sub></strong>&nbsp;-&nbsp;<strong>B<sub>1</sub></strong>&nbsp;&le; 999,999.</p>

*******OutputConstraints*******

<p>For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1), and y is the number of winning positions (<strong>A</strong>,&nbsp;<strong>B</strong>) with&nbsp;<strong>A<sub>1</sub></strong>&nbsp;&le;&nbsp;<strong>A</strong>&nbsp;&le;&nbsp;<strong>A<sub>2</sub></strong>&nbsp;and&nbsp;<strong>B<sub>1</sub></strong>&le;&nbsp;<strong>B</strong>&nbsp;&le;&nbsp;<strong>B<sub>2</sub></strong>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />5 5 8 8<br />11 11 2 2<br />1 6 1 6

<strong>Output:</strong>
<code style="color: black; font-family: 'bogus font here', monospace; font-size: 13px;">Case #1: 0<br />Case #2: 1<br />Case #3: 20<br /><br /></code></pre>


______________________________________________________
DIGNUM||||||true||||||


<p>Given a digital LED pattern of a number. You have to find the number and print it. All inputs will be valid as shown.</p>

*******InputConstraints*******

<p>Input consists of LED patterns. Each pattern is given in set of fixed number of lines. You have to read input till EOF.</p>

*******OutputConstraints*******

<p>Print the number corresponding to each pattern.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /> _  _&nbsp; _&nbsp; _&nbsp; _  _ <br />&nbsp;_| _| _|| ||_||_ <br />|_&nbsp; _||_ |_|&nbsp; | _|<br />    _&nbsp;&nbsp;&nbsp;&nbsp; _&nbsp;&nbsp;&nbsp;  _ <br />&nbsp; ||_ |_||_&nbsp;  || |<br />&nbsp; ||_|&nbsp; ||_|  ||_|<br /><strong> </strong>_&nbsp; _&nbsp; _&nbsp; _&nbsp;&nbsp;&nbsp;  _ <br />&nbsp; ||_||_||_&nbsp;  ||_|<br />&nbsp; |&nbsp; |  | _|  ||_|<br /><strong><br /><br />Output:</strong><br /><br />232095<br />164610<br />799518<br /></pre>


______________________________________________________
CNTTREE||||||false||||||

<p>Given a tree, you need to count how many subtrees with diameter &lt;= K exist. <br />&nbsp;<br />Input : <br />The first line contains the number of test cases T. <br />T test cases follow. For each test case, the first line contains N and K. The following N - 1 lines contain two integers ai and bi, indicating an edge between nodes ai and bi in the tree. There is a blank line after each test case. <br />&nbsp;<br />Output : <br />Output T lines, one corresponding to each test case, containing the required answer. <br />&nbsp;<br />Sample Input : <br />2 <br />3 1 <br />0 1 <br />1 2 <br />&nbsp;<br />6 3 <br />0 1 <br />1 2 <br />2 3 <br />2 4 <br />3 5 <br />&nbsp;<br />&nbsp;<br />Sample Output : <br />5 <br />23 <br />&nbsp;<br />&nbsp;<br />Constraints : <br />1 &lt;= T &lt;= 100 <br />2 &lt;= N &lt;= 60<br />0 &lt;= ai,bi &lt; N <br />1 &lt;= K &lt;= N - 1</p>


______________________________________________________
GRIDCOIN||||||false||||||

<p>In how many ways can R coins be placed on an N * M grid such that each row and each column have atleast 1 coin ?<br /><br />Input :<br />The first line contains the number of test cases T. T lines follow containing 3 integers: N,M and R. (1 &lt;= T &lt;= 100. 1 &lt;= N,M &lt;= 200. 1 &lt;= R &lt;= N * M)<br /><br />Output :<br />Output T lines, one for each test case, containing the output for the corresponding test case. Output all values modulo 1000000007<br /><br />Sample Input :<br />3<br />1 1 1<br />2 1 1<br />2 3 3<br /><br />Sample Output :<br />1<br />0<br />6</p>


______________________________________________________
MULTQ3||||||false||||||

<p>There are N numbers a[0],a[1]..a[N - 1]. Initally all are 0. You have to perform two types of operations :<br /><br />1) Increase the numbers between indices A and B (inclusive) by 1. This is represented by the command "0 A B"<br />2) Answer how many numbers between indices A and B (inclusive) are divisible by 3. This is represented by the command "1 A B".<br /><br />Input :<br />The first line contains two integers, N and Q. Each of the next Q lines are either of the form "0 A B" or "1 A B" as mentioned above.<br /><br />Output :<br />Output 1 line for each of the queries of the form "1 A B" containing the required answer for the corresponding query.<br /><br />Sample Input :<br />4 7<br />1 0 3<br />0 1 2<br />0 1 3<br />1 0 0<br />0 0 3<br />1 3 3<br />1 0 3 <br /><br />Sample Output :<br />4<br />1<br />0<br />2<br /><br />Constraints :<br />1 &lt;= N &lt;= 100000<br />1 &lt;= Q &lt;= 100000<br />0 &lt;= A &lt;= B &lt;= N - 1</p>


______________________________________________________
LCKYCONT||||||true||||||


<p>Egor works as a controller in the bus. Each day he is given a pack of tickets which he then sells. Recently he has become interested about how many tickets in the pack are lucky. He thinks that the more tickets are lucky the luckier day he will have. No he wants to find out how lucky for him will the next day be. The numbers of all tickets consist of n digits. The ticket is considered to be lucky if the sum of the first n/2 digits equals to the sum of the last n/2 digits. Egor knows that the numbers in the pack that he will be given can start with equal probability from any number in the interval from a to b inclusive. The pack holds k tickets. The numbers in the tickets are consecutive. Help Egor find out the expected amount of lucky tickets in the pack.


*******InputConstraints*******

<p>The first line of the input file contain number n - the amount of tests. The next n lines consist of three integers a, b &#1080; k (0 <= a <= b < 10^12, 1 <= k <= 100000). Integers a, b and b+k consist of the same amount of digits which is equal to the amount of digits in the number of each ticket. They may start with zeroes. The amount of digits in a and b is always even.


*******OutputConstraints*******

<p>Output the expected quantity of lucky tickets in the pack in the form of irreducible fraction. In case the
result is an integer, no slash should appear in the output.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
0123 4567 150
10 10 20
4000 4999 11

<b>Output:</b>
6519/635
2
103/125

</pre>



______________________________________________________
CHEFJUN||||||true||||||


<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:spiral" style="float:left;margin:5px;">There is a very large field, colored white and divided into squares. There is a coordinate system attached to the field: y-axis goes from south to north and x-axis goes from west to east. Sides of the squares are parallel to the axes. There is a robot in the (0, 0) square. Robot starts to move in spiral as depicted. First it moves one step east and one step north. Then two steps west and two steps south. Then three steps east and three steps north, four steps west and four steps south and so on. It moves to a new square with each step. As it moves it counts squares it passes and, if the number of the square is the prime number, then the robot fills this square with black color. The (0, 0) square has the number 0. Given the coordinates of a square you are to calculate the distance from this square to the nearest to it black square. For two squares with coordinates (x1, y1) and (x2, y2) the distance between those squares is |x1-x2|+|y1-y2|.
<div style="clear:both">Â </div>


*******InputConstraints*******

<p>Input file consists of a set of tests. The first line of the file is number T &#8211; the number of tests (T <= 500). Following T lines contains two integers each separated with a space: x and y &#8211; the coordinates of the square (-2000001 < x < 2000001, -2000001 < y < 2000001).


*******OutputConstraints*******

<p>For each coordinate pair in the input file you are to output the distance between this square and the nearest to it black square.


*******IOTestCases*******


<pre>
<b>Input:</b>
8
0 0
1 0
1 1
0 1
3 3
-3 -3
-1 2
0 -3

<b>Output:</b>
1
1
0
0
1
1
2
2

</pre>



______________________________________________________
CHEFJUL||||||true||||||


<p>Johnny has a pool in his garden. There are several islands in the pool. Some islands are connected by bridges. Any bridge can be removed. Every day Johnny removes some bridges so that there is only one way from any island to any other. In the evening he returns removed bridges to their places. Also he has some favorite bridges which he never removes. Johnny will be happy if he is able to make a configuration of bridges on the given day which he has never made before. You have to count the amount of days he will be happy. Of course, if the favorite bridges themselves don't satisfy the happiness condition Johnny will not be happy for even single day.


*******InputConstraints*******

<p>The first line of input file contains number t the number of test cases. Then the description of each test case follows. The first line of each test case contains number n the number of islands. Islands are numbered with integers from 1 to n. Then n lines follow each containing n characters defining the connectivity matrix of those islands. Character in column x of line y will be 1 if the islands with numbers x and y are connected and 0 otherwise. The next line is number p the number of favorite bridges. The next p lines contain the pairs of islands that are conected by favorite bridges.


*******OutputConstraints*******

<p>For each test case print the number of days Johnny will be happy in this situation.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
0111
1011
1101
1110
2
1 2
3 4

<b>Output:</b>
4

</pre>



______________________________________________________
SHUFFLEN||||||true||||||


<p>My office is quite far from my home. Every day, I go there by bus. That takes a lot of time. More over, due to traffic jams, the time to reach my office is not fixed. To make the best use of this time, I carry my music player all the time.     My music player has a &lsquo;shuffle&rsquo; mode. In that mode, the music player selects a track randomly that has not been played in that session (<strong>before the next Shuffle</strong>), and starts playing. It will continue doing so, until, I have stopped playing, or it has played all tracks in that session.</p>
<p>For the purpose of this problem, you can assume that all tracks are of equal duration. To select randomly, the player keeps list of the tracks already played. That is, if I listen to one track now, from next shuffle session, that track will be marked as played.</p>
<p><strong>In addition, after stopping play, when it shuffles once more,</strong> to select a random track, the player always use such strategy that, selecting an old track (<strong>Already listened in previous shuffle session</strong>) is twice more probable than a new track (<strong>Not listened in previous shuffle session</strong>).     I go to my office in the morning and return home at night. &nbsp;<strong>Performing 2 shuffles a day, one in the morning, one at night</strong>.</p>
<p>It takes at least p minutes and at most q minutes to reach my office. The time required will always be an integer. You can assume that all travel times are equiprobable (that is, if p = 2 and q = 4, and if P(t) is the probability to reach office in t minutes, then P(2) = P(3) = P(4)). If all tracks are of 1 minute, how many days on average are required to listen to all the songs?</p>

*******InputConstraints*******

<p>First line of input contains an integer <strong>T(&le;10053)</strong>, the number of test cases.  Each test case contains 5 integers, <strong>N (1&le;N&le;75)</strong>, <strong>p1, q1, p2, q2 (0 &le; p1, q1, p2, q2 &le; 30, p1 &le; q1, p2 &le; q2)</strong>, where <strong>N</strong> is the number of songs, <strong>p1,q1</strong> are the minimum and maximum number of songs listened during day, and <strong>p2,q2 </strong>are the minimum and maximum number of songs during night.</p>

*******OutputConstraints*******

<p>For each test case, output the test case, followed by the expected number of days required to listen all songs. If it&rsquo;s not possible to listen to all songs, output &ldquo;IMPOSSIBLE&rdquo;.</p>
<p>The Judge used is "Ignore FP rounding up to 10^-6".</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />11<br />1 0 1 0 1<br />20 0 26 1 3
10 11 21 0 0
64 0 0 1 23
48 0 0 0 0
42 18 29 6 13
29 19 25 0 0
32 0 0 8 27
75 0 1 0 1
75 0 1 0 0
75 0 0 0 1


<strong>Output:<br /></strong>
Case 1: 1.3333333<br />Case 2: 3.1143655
Case 3: 1.0000000
Case 4: 39.6303478
Case 5: IMPOSSIBLE
Case 6: 7.1950023
Case 7: 4.7682679
Case 8: 8.1514607
Case 9: 660.4533446
Case 10: 1320.4066892
Case 11: 1320.4066892<br /><br /><strong><span style="font-size: medium;">Hint<br /></span></strong><br />Calculate  P [n] [ rest ] [q] [next].  It is in this session, we have not heard the song in each n songs played,<br />with "rest" number of songs never heard,  with q minutes played so far, <br /> the probability of "next" song been played for the first time.  Dp by this O (N ^ 2q ^ 2).<br />Sum over [0, q] to get  P [n] [rest] [qsum] [next], so we can use subtraction to get interval sums.<br /><br />Now let 0 be day, 1 by night, then we compute dp[0][rest], dp[1] [rest], the expected number of days it takes to<br />finish all the songs if only considering day or night. dp [0] [rest] is [0, rest) of dp [1] [rest] and P [n] [rest] [qsum] [next].<br />Using O ( rest ) can be calculated as as X = dp[0][rest], Y = dp[1] [rest], then {X = a Y + c, Y = b X + d}.<br />Solving this, and done.<br />In the base case with rest=1, use infinite geometric series to compute overall O (TN ^ 2 + N ^ 2q ^ 2).<br /><br />
</pre>


______________________________________________________
KULE||||||false||||||


<table class="problems" style="width: 99%;" border="0"><tbody><tr class="navigation">
	<td><a href="/problems/KULE/english/">English version</a></td>
	<td><a href="/problems/KULE/polski/">Wersja polska</a></td>
</tr></tbody></table>

<span style="line-height: normal">



<p>John has a certain number of spheres. Almost all of them have identical weight apart from one. There are a lot of them and John cannot say which one differs from the other ones by himself. You can help him to determine which sphere it is by using the pair of scales.</p>


______________________________________________________
MSTRMND||||||false||||||


<table class="problems" style="width: 99%;" border="0"><tbody><tr class="navigation">
	<td><a href="/problems/MSTRMND/english/">English version</a></td>
	<td><a href="/problems/MSTRMND/polski/">Wersja polska</a></td>
</tr></tbody></table>

<span style="line-height: normal">



<p>Task (<a href="http://en.wikipedia.org/wiki/Mastermind_(board_game)">the rules of the game</a>) requires to guess the code which consists of four elements. Each element of the code can have one of six different values. The same values can appear multiple times. The code should be guessed in a maximum amount of ten tries. After guessing the code (or after using up the limit of ten tries) your program should end.</p>

<p><b>Input/output</b></p>

<p>During each try you give your suggestion of a correct code &#8211; you output four numbers from a range of one to six on the standard output. In the response you get a hint about which elements were typed correctly and which were not &#8211; you read four numbers and each of them can have one of those values: 1 (the number is correct), 0 (element is not in the right place) or -1 (the element is incorrect).</p>

<p><b>Example</b></p>
<pre>
You:    1  1  1  2
Judge:  1  1 -1  1

You:	3  4  5  6
Judge: -1 -1 -1  0

You:	1  1  6  2
Judge:	1  1  1  1
</pre>
<p><b>Remark: </b>Program should clear the output buffer after printing each line. It can be done using fflush(stdout) command or you can set the proper type of buffering at the beginning of the execution - setlinebuf(stdout).</p>


</span>


______________________________________________________
SHUFFLE1||||||true||||||


<p>A casino owns an expensive card shuffling machine which may shuffle up to 520 cards at a<br />time (there are 52 cards in each deck). For convenience, we will simply label the cards 1, 2,<br />3, ..., N where N is the total number of cards, and copies of the same card (e.g. Ace of<br />Spades) from different decks are considered different. Unfortunately, the card shuffling<br />machine is defective, and it always shuffles the cards the same way. The company that<br />produces these machines is out of business because of the economic downturn. There is no<br />one who can fix the machine, and a new machine is too expensive.</p>
<p><br />Being a brilliant employee of the casino, you realized that all is not lost. You can shuffle the<br />cards differently simply by using the machine zero or more times. For example, suppose<br />that the machine shuffles the cards 1, 2, 3, 4 into the order 2, 3, 4, 1. If you put the cards into<br />the machine, take the shuffled cards out and insert them into the machine again (without<br />changing the order), you will get the order 3, 4, 1, 2. That way, it is possible to shuffle the<br />cards in many different ways even though it may take longer. But this is not a significant<br />issue since decks do not have to be reshuffled often, and used decks can be shuffled while<br />other decks are being used to avoid any waiting time.</p>
<p><br />Unfortunately, not all shufflings can be produced in this way in general, and you wish to<br />know if this procedure "stack the decks" in a favorable way for the casino or the player. As<br />a first step, you wish to know which shufflings are possible to produce, and how many times<br />you need to use the machine on the deck in order to produce the shuffling.</p>

*******InputConstraints*******

<p>The input for each case consists of three lines. The first line consists of a single integer N<br />indicating the number of cards to shuffle. The number of cards is a positive integer up to<br />520. The second line consists of the integers 1, 2, ..., N listed in some order and separated by<br />a space. The list gives the order of the shuffling performed by the machine when the input<br />cards are ordered 1, 2, ..., N. The third line is in the same format as the second line, and<br />gives the shuffling we wish to obtain. The end of input is indicated by a line in which N = 0.</p>

*******OutputConstraints*******

<p>For each case, print the smallest number of times (zero or more) you need to pass the deck<br />through the machine to produce the desired shuffling. If it is not possible, print -1. The<br />output for each case should be in a single line. You may assume that the answer will always<br />fit in a 32-bit signed integer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />2 3 4 1<br />3 4 1 2<br />4<br />2 3 4 1<br />1 3 2 4<br />10<br />2 1 3 5 6 7 8 9 10 4<br />1 2 3 9 10 4 5 6 7 8<br />0<br /><strong>Output:</strong>
2<br />-1<br />12</pre>


______________________________________________________
ITERBIT||||||false||||||

<p>Let f(x) be the number of 1's in the binary representation of x.<br /><br />We can define f^k(x) as f(x) for k = 1, and f^(k-1)(f(x)) for k &gt; 1.<br /><br />Let f^*(x) be the smallest k &gt;= 1 such that f^k(x) = 1.<br /><br />Given N and K, how many numbers x between 1 and N inclusive have f^*(x) = K ?<br /><br />Input :<br />The first line contains the number of test cases T. Each of the next T lines contains two space seperated numbers N and K.<br /><br />Output :<br />Output one line corresponding to each test case, containing the answer for the corresponding test case. Output all answers modulo 1000000007.<br /><br />Sample Input :<br />6<br />1 1<br />2 1<br />3 1<br />3 2<br />13 3<br />20 2<br /><br />Sample Output :<br />1<br />2<br />2<br />1<br />3<br />10<br /><br />Constraints :<br />1 &lt;= T &lt;= 1000<br />1 &lt;= N &lt;= 10^500<br />1 &lt;= K &lt;= 10</p>


______________________________________________________
TREESUM||||||false||||||

<p>Let Lx denote the level of a node x in a rooted tree. Lx is 1 if x is the root, otherwise Lx = 1 + Ly, where y is the parent of x in the rooted tree.<br /><br />You need to calculate the sum Lx ^ K for all nodes x in the tree.<br /><br />Input :<br />The first line contains the number of test cases T. T test cases follow. The first line of each test case contains N and K, where N is the number of nodes in the tree. The following N - 1 lines contain two integers ai and bi, indicating an edge between nodes ai and bi in the tree. There is a blank line after each test case.<br /><br />Output :<br />Output N lines for each test case. The ith line should contain the required sum if the tree is rooted at node i. Output all values modulo 1000000007. Output a blank line after each test case.<br /><br />Sample Input :<br />2<br />3 2<br />0 1<br />1 2<br /><br />3 3<br />0 1<br />0 2<br /><br />Sample Output :<br />14<br />9<br />14<br /><br />17<br />36<br />36<br /><br />Constraints :<br />1 &lt;= T &lt;= 10<br />1 &lt;= N &lt;= 20000<br />1 &lt;= K &lt;= 20<br />0 &lt;= ai,bi &lt; N</p>


______________________________________________________
MCOMP||||||true||||||


<p style="text-align: justify;">Everyone knows what Manhattan streets look like. For simplicity, we'll say there are two types of streets: horizontal and vertical (when seen on a map). For two junctions A and B, with coordinates (ax, ay), (bx, by) respectively, we define distance( A, B ) = |ax-bx| + |ay-by|.</p>
<p style="text-align: justify;">A company in Manhattan has the following problem: we have to link N junctions by couriers in such a way that each pair of&nbsp; junctions can communicate through the couriers. We must use the minimal possible number of couriers to do so. Also, of all the possible solutions with the minimal number of couriers, we'll take the one that minimizes the maximum distance of assigned junction pairs over all the couriers.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer: N (2 &lt;= N &lt;= 10<sup>5</sup>).<br />The next N lines each contains two integers: x<sub>i</sub> and y<sub>i</sub> (0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>5</sup>).</p>

*******OutputConstraints*******

<p>The first and only line of output should contain the minimal maximum distance over all the couriers defined above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />0 0<br />0 2<br />2 0<br /><strong>Output:</strong>
2</pre>
<pre><strong>Explanation:</strong> couriers go between junction pairs ( 1, 2 ) and ( 1, 3 ). <br />Maximum distance is 2.</pre>


______________________________________________________
FUNFACT||||||true||||||


<p>Ling: Stir, let's go out and play our favorite game.</p>
<p>Stir: I am already having fun with my first factorial program.</p>
<p>Ling: Than I will give you a challenge on factorials. If you fail in it, you will have to come.</p>
<p>Stir: ok..</p>
<p>Ling gives Stir a number x and the challenge is to find the largest value of n such that n! is not greater than the largest value that can be formed by x digits. Stir is stuck with the problem and needs your help. Now, it's your turn to make sure that Stir can continue having fun with factorials.</p>

*******InputConstraints*******

<p>The first line of the input contains a number t (about 10^5), the number of the test cases. The next t lines contain a number x (1 &lt;= x &lt;= 10^9).</p>

*******OutputConstraints*******

<p>Output a total of t lines with each line containing the value n corresponding to the input case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />2<br />1<br />7<br /><br /><strong>Output:</strong> <br />3<br />10
</pre>


______________________________________________________
ACTIV||||||true||||||


<p>Ana likes many activities. She likes acrobatics, alchemy, archery, art, Arabic dances, and<br />many more. She joined a club that offers several classes. Each class has a time interval<br />in every week. Ana wants to sign up for many classes, but since they overlap in time, she<br />looks for a subset of non-overlapping classes to attend. A subset is non-overlapping if it<br />does not contain two classes that overlap in time. If a class starts at the time another<br />class ends, this is not considered overlapping.<br />Ana decided to list all the non-overlapping non-empty subsets of classes. Then she will<br />choose the subset she likes best. In order to predict the amount of paper needed to write<br />the list, she wants you to calculate how many of these subsets there are.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains an integer N<br />indicating the number of classes the club offers (1 &le; N &le; 10<sup>5</sup> ). Each of the next N lines<br />describes a class using two integers S and E that represent the starting and ending times<br />of the class, respectively (1 &le; S &lt; E &le; 10<sup>9</sup> ). The end of input is indicated with a line<br />containing a single &minus;1.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with a single integer representing the number of<br />non-overlapping non-empty subsets of classes. To make your life easier, output only the<br />last 8 digits of the result. If the result has less than 8 digits, write it with leading zeros<br />to complete 8 digits.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />5<br />1 3<br />3 5<br />5 7<br />2 4<br />4 6<br />3<br />500000000 1000000000<br />1 500000000<br />1 500000000<br />1<br />999999999 1000000000<br />-1

<strong>Output:</strong> <br />00000012<br />00000005<br />00000001</pre>


______________________________________________________
PKA||||||true||||||


<p>During this economic crisis time, Jack has started an incredible new business related to air travel, a parking-lot for airplane. He bought a very large land to park airplanes. However the land is very narrow, so that the only way airplanes can go in or go out of the parking lot must be in the Last-In First-Out fashion (see picture below). He only has spaces in the parking lot so he cannot take some airplane at the end out so that other airplanes can move. Because of the limitation of the parking lot, it is not possible to accommodate all requests for parking. Each request consists of the planned arrival time and planned departure time, which are the times the airplane arrives at the parking lot.</p>
<p>An example below shows a request table for 4 planes.<br />Airplane Arrival Departure<br />1 1 10<br />2 2 5<br />3 3 7<br />4 6 9<br />In this case, it is possible to accommodate airplane 1, 2, and 4. But it is not possible to accommodate both airplanes 2 and 3. It is possible that different planes plan to arrive or depart the parking lot at the same time. Jack has the best crews working with him, so that they will manage to arrange the plane to the parking lot in the best way that if it is possible to park and take out the planes they will be able to do it.</p>
<p>Consider another example.<br />Airplane Arrival Departure<br />5 10 12<br />6 10 15<br />7 13 17</p>
<p>Although airplane 5 and 6 arrive at the same time, Jack's crews know that airplane 5 will have to be out before airplane 6, so when both airplanes arrive they put airplane 6 in first, following by airplane 5.</p>
<p><br />Given a list of parking requests, you want to find the maximum number of airplanes that can be parked in this parking lot, provided that they can only depart in the Last-In First-Out fashion.</p>

*******InputConstraints*******

<p>The first line contains an integer T, the number of test cases (1 &lt; T &lt; 5). Each test case is in the following format. The first line starts with an integer N (1 &lt; N &lt; 300) denoting the number of airplanes. The next<br />N lines describe the request table. Each line 1 + i, for 1 &lt; i &lt; N, contains two integer Si and Ti, (0 &lt; Si &lt; Ti &lt; 1,000,000,000) which are the planned arrival time and planned departing time for airplane i.</p>

*******OutputConstraints*******

<p>For each test case, you program must output a single line consisting of one integer, the maximum number of airplanes that can be parked in Jack's parking lot.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />2<br />4<br />1 10<br />2 5<br />3 7<br />6 9<br />3<br />10 12<br />10 15<br />13 17
<br /><strong>Output:</strong> <br />3<br />2</pre>


______________________________________________________
PKD||||||true||||||


<p><br /> <img src="http://www.spoj.plhttp://acm.csie.org/ntujudge/problemdata/1014.png" alt="" width="undefined" /></p>
<p>A very important aspect of web portals is customer reviews. The customers can rate any product  in the web portal. Generally, a customer can rate a product from one star to five star. Based on  the rating of all the customers the average customer rating for a product is shown. Look at the  figure on  the  left   to get  a clear   idea.  For example if three customers rate a  product   as   3   star,   4   star   and   4   star  respectively   then   the   average   rating  will be (3+4+4)/3 = 3.67 (Rounded to  two digits after the decimal point). In  the  figure on  the  left  847 customers  have rated a product and 597, 189, 26, 11 and 24 customers have rated the product as 5 star, 4  star,   3   star,   2   star   and   1   star   respectively.   So   the   average   rating   is:  <img src="http://www.spoj.plhttp://acm.csie.org/ntujudge/problemdata/1014-2.png" alt="" width="undefined" /> (Rounded   to   eight   digits   after   the  decimal point).</p>
<p>Most web portals display the total number of people who have rated the product (As more people  rates  the product   the more reliable  the rating  is) but  do not  display  the numeric value of  the  average  rating.   In  the web portal  of  warzone  (A  renowned web portal)   the  total  number  of  customers that have rated a product (In the figure above the total 847 customers have rated the  product) and the average rating is stored in two different tables.  The average rating is stored,  rounded to n (0&lt;n&lt;9) digits after the decimal point so its value is not always the exact average  value. Unfortunately, the table that stored the total number of people that rated different products  somehow got  corrupted.  All   information available  in  the database now  is  the average  rating  (rounded  to at  most  eight  digits after   the decimal  point).  They do not  want   to  lose  the huge  number  of  customer   ratings  they have  received  throughout  10-15 years  but  also  they cannot  cheat with their customers by guessing the number of raters or voters. So from the average rating  they want   to determine  the minimum possible number  of people  that  rated  that  product.  You  have to help them find it out by writing a program.</p>

*******InputConstraints*******

<p>The input file can contain up to 2000 lines of inputs. Each line contains a non-negative floating- point number v (1 &le; v &le; 5). This number will have minimum one digit and maximum eight digits  after   the decimal  point.   If   this number  has n digits after   the decimal  point   then you have  to  assume that the value of the average is given rounded to n digits after the decimal point. Input is terminated by a line containing a negative number.</p>

*******OutputConstraints*******

<p>For each line of input produce one line of output. This line contains the serial of output followed  by an integer T which denotes the minimum number of voter that is required for this average  rating.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>1.15
4.56316411
4.56316
3.67
3.66
-1.00</pre>
<strong>Output:</strong>&nbsp;
<pre>Case 1: 13
Case 2: 847
Case 3: 190
Case 4: 3
Case 5: 29</pre>
</pre>


______________________________________________________
PC8H||||||true||||||


<p>RoboCorp Oregon has already deployed several of its PoliceBots throughout the state, and suddenly they have remembered the importance of being able to repair these bots when they break. They are willing to build only a limited number of repair depots in the state, and they want to locate these depots so that each PoliceBot's city is within a given distance of some depot. You are given the locations of where the n (1 &#8804; n &#8804; 16) PoliceBots have been deployed, and the maximum number (1 &#8804; c &#8804; n) of repair depots that RoboCorp is willing to construct. Your job is to locate these repair depots to minimize the distance any bot has to be transported for repair, and return what that maximum distance is. You can assume that any bot can be repaired at any depot.</p>

*******InputConstraints*******

<p>The first line contains the integer t (1 &#8804; t &#8804; 350), the number of cases. Each case starts with a line containing n and c. Following this line is one line per deployed bot; that line contains two floating point values, separated by a single space, giving the Cartesian coordinates of the bot. Each such value will be between 0.0 and 10.0, inclusive (NOTE: the Sample Input shows integer values for brevity).</p>

*******OutputConstraints*******

<p>You are to print for each input set the minimum value that can be obtained, such that each PoliceBot is within that distance of some depot. You should print your result with at least one digit before and exactly six digits after the decimal point; your value should be within 5e-7 of the true result. To make round-off error less of a concern, the true result will never have a 4 or a 5 as the seventh digit after the decimal point.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br /><pre>2
9 3
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
4 2
0 0
1 1
2 4
3 9
</pre>
<strong>Output:</strong>Â 
<pre>1.000000
2.236068
</pre>
</pre>


______________________________________________________
MESS||||||false||||||

<p style="text-align: justify;">For the fall semester 2010, EPFL proudly welcomed 2&rsquo;300 new students to the campus. Handling their registrations to the different sections and levels requires an administrative masterstroke. Nowadays this process is highly automated and worked impeccably up to this year...</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://www.spoj.pl/content/imuteb:mess.jpg" alt="" width="381" height="255" /></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">The software that handles the registrations wasn&rsquo;t lead out for such a huge number of new students and the secretaries were close to a heart attack when they received the registration printouts. Instead of receiving one sheet per class (defined by the orientation of studies and the level, e.g. Architecture, Bachelor 1) containing the list of all the students registered to that class, the printouts contained sentences in 5 different formats:</p>
<ul>
<li>! <em>STUDENT_ID1</em> studies <em>SECTION</em></li>
<li>! <em>STUDENT_ID1</em> enters semester <em>SEMESTER</em></li>
<li>! <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> chose the same studies</li>
<li>! <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> are in same semester</li>
<li>! <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> are in same class</li>
</ul>
<p style="text-align: justify;"><em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> are the 6-digit sciper numbers, <em>SEMESTER</em> is an integer number in the range from 1 to 10 and <em>SECTION</em> is a one-worded string.</p>
<p style="text-align: justify;">The secretaries were very puzzled and couldn&rsquo;t figure out how to recreate the expected lists from these printouts. But luckily they remembered PolyProg. The desperate secretaries provide you with the printouts and you are to answer their impatient questions to your best.</p>
<ul>
<li>? What does<em> STUDENT_ID1</em> study</li>
<li>? Which semester will<em> STUDENT_ID1 </em>enter</li>
<li>? Are <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> classmates</li>
</ul>
<p style="text-align: justify;">Two students are considered to be classmates if and only if they study the same subject and enter the same semester. Answering to your best means that your answer must be as complete as possible, you must never give an erroneous answer, but you can just admit that the input was insufficient to answer a question at the point in time it was asked.</p>
<p>Your answers shall respect the following priority:</p>
<table style="width: 621px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="168" valign="top">
<p><strong>Question</strong></p>
</td>
<td width="454" valign="top">
<p><strong>Answer</strong></p>
</td>
</tr>
<tr>
<td width="168" valign="top">
<p>? What   does<em> STUDENT_ID1</em> study</p>
</td>
<td width="454" valign="top">
<p><em>STUDENT_ID1 </em>studies <em>SECTION</em></p>
<p>Sorry,   I have no clue yet</p>
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td width="168" valign="top">
<p>? Which   semester will<em> STUDENT_ID1 </em>enter</p>
</td>
<td width="454" valign="top">
<p><em>STUDENT_ID1 </em>enters semester <em>SEMESTER</em></p>
<p>Sorry,   I have no clue yet</p>
</td>
</tr>
<tr>
<td width="168" valign="top">
<p>? Are   <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> classmates</p>
<p>&nbsp;</p>
</td>
<td width="454" valign="top">
<p>Yes,   <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> are classmates</p>
<p>No,   this is not possible</p>
<p>Possible,   given that <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> study the same subject</p>
<p>Possible,   given that <em>STUDENT_ID1</em> and <em>STUDENT_ID2</em> are in the same semester</p>
<p>Sorry,   I have no clue yet</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p style="text-align: justify;">The input consists of a single test-case with no more than 1&rsquo;000 printout sentences and no more than 500 questions. They may be mixed and you are to go through them in sequential order, which means that in order to answer a question, you must not rely on any information further down the list. You may safely assume that the sentences are not contradictory! Input terminates on a line containing the single word END.</p>
<p style="text-align: justify;">&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>Output your answers, one per line and terminate with a newline. Be aware of typos :)</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p><span style="font-family: courier new,courier;">! 166554 and 175129 chose the same studies</span></p>
<p><span style="font-family: courier new,courier;">! 175129 and 170113 are in same semester</span></p>
<p><span style="font-family: courier new,courier;">! 166554 studies electronics</span></p>
<p><span style="font-family: courier new,courier;">! 169983 and 170113 chose the same studies</span></p>
<p><span style="font-family: courier new,courier;">? Are 170113 and 169983 classmates</span></p>
<p><span style="font-family: courier new,courier;">! 169983 enters semester 9</span></p>
<p><span style="font-family: courier new,courier;">! 175129 and 169983 are in same semester</span></p>
<p><span style="font-family: courier new,courier;">? Which semester will 170113 enter</span></p>
<p><span style="font-family: courier new,courier;">? Are 169983 and 170113 classmates</span></p>
<p><span style="font-family: courier new,courier;">? Which semester will 166554 enter</span></p>
<p><span style="font-family: courier new,courier;">? What does 175129 study</span></p>
<p><span style="font-family: courier new,courier;">! 169983 studies communicationsystems</span></p>
<p><span style="font-family: courier new,courier;">? Are 166554 and 169983 classmate</span></p>
<p><span style="font-family: courier new,courier;">END</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p><span style="font-family: courier new,courier;">Possible, given that 170113 and 169983 study the same subject</span></p>
<p><span style="font-family: courier new,courier;">170113 enters semester 9</span></p>
<p><span style="font-family: courier new,courier;">Yes, 169983 and 170113 are classmates</span></p>
<p><span style="font-family: courier new,courier;">Sorry, I have no clue yet</span></p>
<p><span style="font-family: courier new,courier;">175129 studies electronics</span></p>
<p><span style="font-family: courier new,courier;">No, this is not possible</span></p>


______________________________________________________
ONTIME||||||false||||||

<p style="text-align: justify;">Last week&rsquo;s campaign on healthy and environmentally friendly mobility was a big success. Hundreds of commuters to the EPFL campus traded their car for a ride by bus or metro and gave a very positive feedback. They merely complained about earlier wake-up times necessary to reach the campus on time.</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:ontime.jpg" alt="" width="405" height="202" /></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">This is where you enter the story. Try to improve the mood of the people by indicating them the latest time they can leave their house such that they can reach the campus no later than 8h15. Any means are ok to maximize their sleeping time, and all would accept to change bus or metro lines several times during their journey if this helps your planning.</p>
<p style="text-align: justify;">The public transport network is made up of <em>S (0&lt;=S&lt;=100)&nbsp; </em>stations (numbered from 1 to <em>S</em>) and counts <em>C (0&lt;=C&lt;=1'000)</em>&nbsp; unidirectional connections that link two stations in regular time intervals, starting from a certain time in the morning and up to 8h15. Note that for any two stations, there might exist several direct shuttle services with different starting time and frequency. You are to answer some students&rsquo; request on the latest possible time they can leave from home in order not to be late.</p>
<p style="text-align: justify;">&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases separated by an empty line. Each test-case starts with the number of stations <em>S</em>, the number of connections <em>C</em> and the number of requests <em>R</em> on a line. Then come <em>C </em>lines, each describing one shuttle service in the format &lsquo;from&rsquo; &lsquo;to&rsquo; &lsquo;firstRide&rsquo; &lsquo;travelTime&rsquo; &lsquo;frequency&rsquo; (in minutes). The next <em>R</em> lines each hold two integers, the first being the closest station to the student&rsquo;s home (come what may, but so early no student would like to walk more than necessary) and the second the time (in minutes) it takes the student to reach that station. The campus is located at station <em>S</em>. Input terminates on a test-case <em>with S=C=R=0</em>, which must not be evaluated.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>Answer the requests in the same order as they appeare in the input. For each request, print a line in the form &ldquo;Leave no later than &lsquo;time&rsquo;&rdquo;, where &lsquo;time&rsquo; is in the format <em>hh:mm</em>. Add an empty line after each test-case. If there is no way the students can make it on time, output &ldquo;Doomed to be late&rdquo;. You can safely assume that the commuters are so experienced in hopping on and off busses that they can change busses in no time at all.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p><span style="font-family: courier new,courier;">3 2 2</span></p>
<p><span style="font-family: courier new,courier;">1 3 07:10 50 15</span></p>
<p><span style="font-family: courier new,courier;">2 3 08:20 5 5</span></p>
<p><span style="font-family: courier new,courier;">1 3</span></p>
<p><span style="font-family: courier new,courier;">2 0</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">3 4 3</span></p>
<p><span style="font-family: courier new,courier;">2 3 05:30 6 5</span></p>
<p><span style="font-family: courier new,courier;">1 3 06:11 5 15</span></p>
<p><span style="font-family: courier new,courier;">1 2 07:01 2 5</span></p>
<p><span style="font-family: courier new,courier;">3 2 08:00 1 8</span></p>
<p><span style="font-family: courier new,courier;">1 2</span></p>
<p><span style="font-family: courier new,courier;">2 1</span></p>
<p><span style="font-family: courier new,courier;">3 10</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">0 0 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p><span style="font-family: courier new,courier;">Leave no later than 07:22</span></p>
<p><span style="font-family: courier new,courier;">Doomed to be late</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">Leave no later than 07:59</span></p>
<p><span style="font-family: courier new,courier;">Leave no later than 08:04</span></p>
<p><span style="font-family: courier new,courier;">Leave no later than 08:05</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>


______________________________________________________
PANCAKES||||||false||||||

<p style="text-align: justify;">Just as promised, PolyProg will invite you to a bounteous pancake buffet right after this contest. Can you already feel the seductive odours dazing your senses? Well, before your mouth starts watering, you should solve this last problem.</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://www.spoj.pl/content/imuteb:pancakes.jpg" alt="" width="440" height="400" /></p>
<p style="text-align: justify;">As you might know, the basic ingredients to pancakes are flour, milk and eggs. These may be completed by a passel of additional toppings such as sugar, jam, berries, cheese, ham, mushrooms etc. As the chef of the evening was yet uncertain about the recipe he&rsquo;d whip up tonight, he asked his assistant simply to buy random quantities of each ingredient.</p>
<p style="text-align: justify;">With these quantities he could make <em>N1</em> pancakes according to recipe 1, <em>N2</em> if he decides to follow recipe 2, <em>N3</em> for recipe 3 and so on and so forth. As the end of the competition is close, the chef will not have enough time to combine several recipes: All pancakes tonight will be of the same taste (too bad :( ). The repertoire of recipes is huge, and as we imagine you to have a ravenous appetite, you are to select the recipe that yields the largest number of pancakes.</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p style="text-align: justify;">The input consists of several test-cases separated by an empty line. The first line of each test-case holds the number of ingredients <em>N (1&lt;=N&lt;=50)</em> the assistant bought followed by the number of recipes <em>R (1&lt;=R&lt;=100) </em>in the chef&rsquo;s repertoire. Each of the next lines contains exactly <em>N</em> non-negative integers (no larger than 10<sup>6</sup>) informing about the ingredients. The first of these lines lists the quantities the assistant bought of each ingredient. The remaining <em>R</em> lines list the quantities (in the same order as the previous line) necessary to make ten pancakes according to the recipe r<sub>i</sub> (from 1 to <em>R</em>). The input ends on a test-case having both <em>N</em> and <em>R</em> zero, which must not be processed.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p style="text-align: justify;">Your program should produce one line per test-case containing the recipe that yields the largest number of pancakes followed by the number of entire pancakes that can be made then. If there is a tie, prefer the recipe that appears first in the input.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p><span style="font-family: courier new,courier;">3 2</span></p>
<p><span style="font-family: courier new,courier;">20 20 20</span></p>
<p><span style="font-family: courier new,courier;">5 10 1</span></p>
<p><span style="font-family: courier new,courier;">2 1 3</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">6 3</span></p>
<p><span style="font-family: courier new,courier;">100 60&nbsp;130 80&nbsp;100 90</span></p>
<p><span style="font-family: courier new,courier;">10 5 10 5 10 5</span></p>
<p><span style="font-family: courier new,courier;">1 2 1 2 20 7</span></p>
<p><span style="font-family: courier new,courier;">0 0 0 10 30 1</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><span style="font-family: courier new,courier;">0 0</span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p><span style="font-family: courier new,courier;">2 66</span></p>
<p><span style="font-family: courier new,courier;">1 100</span></p>
<p>&nbsp;</p>


______________________________________________________
BEENUMS||||||true||||||


<p>A beehive is an enclosed structure in which some honey bee species live and raise their<br />young. In this problem we consider a two-dimensional sketch of the beehives. Each<br />beehive is composed of a certain number of cells, where each cell is a regular hexagon.<br />Each cell may have some neighbors, which are other cells that share a side with that cell.<br />A cell with exactly 6 neighbors is an internal cell, while a cell with fewer neighbors is an<br />external one. Notice that an external cell can always be changed to internal by adding<br />some neighbor cells.</p>
<p><br />We are interested in a particular class of beehives. This class of valid beehives is defined<br />recursively as follows: a) a single cell is a valid beehive; and b) given a valid beehive B,<br />if we add the minimum number of cells such that each external cell of B becomes an<br />internal cell, the result is a valid beehive.</p>
<p>The number of cells in a valid beehive is called a beehive number. Given an integer N ,<br />you must decide whether it is a beehive number.</p>

*******InputConstraints*******

<p>Each test case is described using a single line. The line contains an integer N (1 &le; N &le;<br />10<sup>9</sup> ). The end of input is indicated with a line containing a single &minus;1.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing an uppercase &ldquo;Y&rdquo; if N is a beehive<br />number, or an uppercase &ldquo;N&rdquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />43<br />1<br />7<br />19<br />15<br />-1
<strong>Output:</strong><br />N<br />Y<br />Y<br />Y<br />N</pre>


______________________________________________________
CAMELOT||||||true||||||


<p>Camelot is a solitaire game that is played with a deck of French cards. The deck contains<br />52 cards, each of them having a suit and a face value. There are 4 possible suits and 13<br />possible face values. Since for this solitaire suits are not important, we consider that the<br />deck contains 4 repetitions of each possible face value. Face values are A, 2, 3, 4, 5, 6, 7,<br />8, 9, 10, J, Q and K.</p>
<p>The solitaire starts with the full deck placed, face down, on the table. There is also a<br />board containing 16 empty slots arranged in a 4 by 4 grid. The game repeatedly alternates<br />two phases: a dealing phase and a removal phase.<br />The first phase is a dealing phase. During this phase cards are dealt from the deck one<br />at a time. Each card is placed, face up, in an empty slot. However, certain cards can<br />only be placed in specific slots: Jacks (face value J) can only occupy the middle two slots<br />of first and last columns. Queens (face value Q) can only occupy the middle two slots of<br />first and last rows. Finally, Kings (face value K) can only occupy the corner slots. Cards<br />having other face values can be placed in any empty slot. The game is lost whenever a<br />card is dealt from the deck for which no valid empty slot exists. Each time the last empty<br />slot has just been occupied, or when the deck is empty, a removal phase starts.</p>
<p>During a removal phase, it is possible to remove from the board any card or pair of cards<br />that add up to 10. For this purpose, Aces (face value A) are considered as having value 1,<br />while Jacks, Queens and Kings cannot be removed. For instance, it is possible to remove<br />a 10 on its own, a pair formed by a 3 and a 7, a pair formed by an Ace and a 9, etcetera.<br />Cards removed from the board are not used anymore during the game. The removal<br />phase ends when no card can be removed from the board, or when the player decides not<br />to continue removing cards. Notice that it is not mandatory to remove from the board<br />every card that can be removed. However, since the player cannot decide the moment<br />in which a new removal phase will begin, leaving removable cards on the board must be<br />done carefully. Besides, note that if during a removal phase no card is removed, then the<br />game is lost. When the removal phase ends, a new dealing phase starts, unless the deck<br />is empty, in which case the game is over.</p>
<p>The game is won if the deck is empty and only Jacks, Queens and Kings are left on the<br />board.</p>
<p>Camelot is really nice to play, but is frustrating to discover at the end of a game that it<br />was impossible to win because of the initial arrangement of the deck. Even if the initial<br />deck allows the player to win, he may fail to do so because of bad decisions or bad luck<br />when placing or removing cards. Your job in this problem is to find out whether it is at<br />least possible to win the game, given the order in which the cards will be dealt from the<br />deck.</p>

*******InputConstraints*******

<p>Each test case is described using a single line. The line contains a single string of exactly<br />52 characters representing the initial arrangement of the deck. The first card dealt from<br />the deck is given by the first character of the string, and so on. Each card is represented<br />by its face value, with the exception of cards with face value 10 that are represented by<br />the digit &ldquo;0&rdquo;. You may assume that the string corresponds to a valid initial arrangement<br />of the deck, i.e., it contains exactly 4 repetitions of each possible face value. The end of<br />input is indicated with a line containing a single asterisk (&ldquo;*&rdquo;).</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing an uppercase &ldquo;Y&rdquo; if it is possible to win<br />the game with the given initial arrangement of the deck, or an uppercase &ldquo;N&rdquo; otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />AAAA222233334444555566667777888899990000JJJJQQQQKKKK<br />JJJJQQQQKKKKA9A9A9A928282828373737374646464655550000<br />JJJJQQQQKKKKA9A9A9A928282828333377774646464655550000<br />28333377774646464655550000JJJJQQQQKKKKA9A9A9A9282828<br />*
<strong>Output:</strong> <br />N<br />Y<br />N<br />Y</pre>


______________________________________________________
DRAWQUAD||||||true||||||


<p>A quadrilateral consists of 4 points A, B, C and D in the plane, together with the<br />segments AB, BC, CD and DA. Points are called vertices, while segments are called<br />sides. The quadrilateral is simple if opposite sides (i.e., sides that do not share a vertex)<br />do not intersect. Notice that it is possible to have a simple quadrilateral that looks like<br />a triangle, with exactly 3 collinear vertices.<br />Demetrio has just drawn N points on the wall of his room. He planned to draw a<br />simple quadrilateral having 4 of these points as vertices, and then paint it with blue ink.<br />Demetrio is going to buy the ink right now, but he has not chosen the 4 points yet. Can<br />you tell him the maximum area a simple quadrilateral drawn on his wall can have? In<br />this way Demetrio will be sure he will not run out of blue ink before the work is done.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains an integer N<br />indicating the number of points drawn on the wall (4 &le; N &le; 1000). Each of the next N<br />lines describes a different point of the set using two integers X and Y (&minus;10<sup>7</sup> &le; X, Y &le;<br />10<sup>7</sup> ); these values represent the coordinates of the point in the XY plane. You may<br />assume that within each test case no two points have the same location, neither are all<br />collinear. The end of input is indicated with a line containing a single &minus;1.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with a single decimal number representing the<br />maximum area of a simple quadrilateral having as vertices 4 different points of the input<br />set. Round the result to the closest rational number with one decimal place. In case of<br />ties, round up. Always use exactly one digit after the decimal point, even if it means<br />finishing with a zero.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />6<br />-100 0<br />100 0<br />-100 50<br />0 55<br />0 -65<br />1 1<br />4<br />-1 0<br />10000 0<br />0 0<br />0 1<br />-1
<strong>Output:</strong> <br />12000.0<br />5000.5</pre>


______________________________________________________
ESCJAILA||||||true||||||


<p>A new International Common Prison for Criminals (ICPC) was built, and your old friend<br />Harry was moved there as a prisoner. As before, the new ICPC is one of the most secure<br />prisons in the world. It was designed by and old gamer and as such, the prison is not<br />necessarily closed, but only an incredibly logical and fast mind can get out.<br />The new ICPC can be represented as a grid of square cells. Each cell is empty, or it<br />contains a wall, a door, an opening button or a closing button. Harry was accommodated<br />in an empty cell, and all doors were closed. Nevertheless, Harry told you that he will<br />try to escape. Each time Harry is in a cell, he can move in a single step to an adjacent<br />cell (i.e., a cell that shares a side with his current location). Each time Harry steps on a<br />cell that contains an opening button, all doors open, while each time he steps on a cell<br />that contains a closing button, all doors close. Harry can walk around as he wants within<br />the prison, although he cannot move to a cell that contains a wall, neither to a cell that<br />contains a door if the doors are closed.<br />To escape from the prison, Harry needs to step outside, which means placing himself in<br />one of the cells on the sides and then taking one extra step out in the direction opposite<br />to the prison.<br />You obtained a map of the prison, and Harry deserves your advise. Tell him the minimum<br />number of steps he needs to escape, or warn him that there is no way to get out.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains two integers N and<br />M indicating respectively the number of rows and columns of the grid that represents<br />the prison (1 &le; N, M &le; 100). Line i of the next N lines describes row i of the grid<br />using a string of exactly M characters, where character j represents cell j of that row.<br />This string only contains the following characters with the indicated meanings: &ldquo;H&rdquo; is<br />the empty cell where Harry is at the beginning; &ldquo;.&rdquo; is an empty cell where Harry is not<br />at the beginning; &ldquo;W&rdquo; is a wall; &ldquo;D&rdquo; is a door; &ldquo;O&rdquo; is an opening button; and &ldquo;C&rdquo; is closing<br />button. You may assume that within each test case there is exactly one character &ldquo;H&rdquo;.<br />The end of input is indicated with a line containing the number &minus;1 twice.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with a single integer representing the minimum<br />number of steps Harry needs to escape the prison, or the number &minus;1 if it is impossible<br />for him to do so.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />5 8<br />WWWWWWW.<br />WHDC...D<br />W.WW.WCW<br />W.OW..OW<br />.WWWWWWW<br />3 3<br />ODO<br />DHD<br />ODO<br />3 7<br />WWWWWWW<br />DH..OCD<br />WWWWWWW<br />4 1<br />W<br />H<br />O<br />W<br />1 13<br />HOW.DO.COW.DO<br />-1 -1

<strong>Output:</strong> <br />21<br />-1<br />8<br />1<br />1</pre>


______________________________________________________
FILRTEST||||||true||||||


<p>In a recent programming contest appeared a problem named &ldquo;File Recover&rdquo;. In that<br />problem, repeated strings of a given text were to be counted. You are preparing test<br />cases for that problem, and in order to test for border cases you want to generate a text<br />with many repetitions of a particular string.<br />Of course, test cases cannot be arbitrarily long, so you decided to choose a length and a<br />string, and then fit in a text of that length as many repetitions as possible of the string.<br />For instance, if the length is 14 and the string is &ldquo;abcab&rdquo;, you may generate the text<br />&ldquo;abcabcabcabcab&rdquo; whose length is 14 and where the string &ldquo;abcab&rdquo; appears 4 times<br />(starting at positions 1, 4, 7 and 10).<br />You would like to know how good your idea is before implementing. Given a length and<br />a string, you must determine the maximum number of times the characters of the string<br />can appear consecutively in a text of that length.</p>

*******InputConstraints*******

<p>Each test case is described using a single line. The line contains an integer K (1 &le; K &le;<br />10<sup>9</sup> ) and a non-empty string S of at most 10<sup>6</sup> lowercase letters. The end of input is<br />indicated with a line containing the number &minus;1 and an asterisk (&ldquo;*&rdquo;).</p>

*******OutputConstraints*******

<p>For each test case, output a single line with a single integer representing the maximum<br />number of times the characters of S can appear consecutively in a text of length K.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />14 abcab<br />1000 abcde<br />1000000000 z<br />1 zzzzz<br />-1 *
<br /><strong>Output:</strong> <br />4<br />200<br />1000000000<br />0</pre>


______________________________________________________
GIRLSNBS||||||true||||||


<p>There are G girl students and B boy students in a class that is about to graduate. You<br />need to arrange them in a single row for the graduation. To give a better impression of<br />diversity, you want to avoid having too many girls or too many boys seating consecutively.<br />You decided to arrange the students in order to minimize the gender regularity. The<br />gender regularity of an arrangement is the maximum number of students of the same<br />gender (all girls or all boys) that appear consecutively.<br />Given G and B, calculate the minimum gender regularity among all possible arrange-<br />ments.</p>

*******InputConstraints*******

<p>Each test case is described using a single line. The line contains two integers G and B<br />representing the number of girls and boys in the class, respectively (0 &le; G, B &le; 1000).<br />The end of input is indicated with a line containing the number &minus;1 twice.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with a single integer representing the minimum<br />gender regularity that an arrangement of G girls and B boys can have.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />10 10<br />5 1<br />0 1000<br />-1 -1
<br /><strong>Output:</strong> <br />1<br />3<br />1000</pre>


______________________________________________________
HACKERS||||||true||||||


<p>The network of your office is composed of several computers and bidirectional links. Each<br />link connects a given pair of computers and has an access value. Each user in the network<br />has an access privilege, and is able to use any link with access value not exceeding his<br />access privilege.<br />Everything was fine until suddenly you notice that a bunch of hackers are accessing the<br />network. You know that if there is a link between computers A and B, with access value<br />V , and a hacker with access privilege of at least V controls A, then he can control B.<br />Hackers wish to control the most important computers by exploiting problems in the<br />network. They are trying to increase their access privileges in order to use the links, and<br />your task is to measure how safe the network is.<br />Given the description of the network, the computer each hacker currently controls and<br />the target computer each hacker wishes to control, you need to calculate the minimum<br />access privilege each hacker needs to get in order to control his target computer.<br />Hackers act independently, neither they collaborate nor interfere with each other. This<br />means that each hacker may control each computer and use each link independently of<br />what the other hackers do.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains three integers<br />C, L and H, indicating the number of computers, links and hackers in the network,<br />respectively (2 &le; C &le; 3000, 1 &le; L, H &le; 10<sup>5</sup> ); each computer is identified by an integer<br />number between 1 and C. Each of the next L lines describes a different bidirectional link<br />using three integers A, B and V ; the numbers A and B identify two distinct computers<br />that are the endpoints of the link (1 &le; A &lt; B &le; C); the number V is the access value<br />of the link, that is, any hacker must have an access privilege of at least V to use the<br />link (1 &le; V &le; 10<sup>9</sup> ). Each of the last H lines describes a different hacker using two<br />distinct integers S and T that identify the computer that the hacker currently controls<br />and the computer that the hacker wishes to control, respectively (1 &le; S, T &le; C). You<br />may assume that within each test case no two links connect the same pair of computers,<br />and that for any pair of computers there is at least one sequence of links that allow to<br />reach one computer starting from the other. The end of input is indicated with a line<br />containing the number &minus;1 three times.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with H integers representing the minimum access<br />privilege each hacker needs to achieve its goal. The result for each hacker must appear<br />in the same order that the hackers are described in the input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />5 6 4<br />1 2 4<br />1 3 5<br />2 4 3<br />2 5 1<br />3 4 2<br />4 5 2<br />3 2<br />2 4<br />1 5<br />3 1<br />2 1 1<br />1 2 1<br />2 1<br />2 1 3<br />1 2 1000000000<br />2 1<br />2 1<br />1 2<br />-1 -1 -1
<br /><strong>Output:</strong> <br />2 2 4 4<br />1<br />1000000000 1000000000 1000000000</pre>


______________________________________________________
IMPUNITS||||||true||||||


<p>As you may know, there are currently two main sets of measurement units in the world:<br />the metric system and the imperial system. The imperial system receives its name from<br />the British empire, which was the place of its invention and its main user until recently.<br />Nowadays, Britain&rsquo;s heir, the United States of America, is the only country where a<br />variation of the imperial system is the official measurement system.<br />For a particular magnitude, in a given measurement system there are N different units<br />U1 , U2 , . . . UN (the number of units depends on both the magnitude and the system). For<br />every i (1 &le; i &le; N &minus; 1), a certain number of Ui is equivalent to a certain number of<br />Ui+1 . In the metric system we always have that 1Ui is equivalent to 10Ui+1 . For instance,<br />1 decimeter is equivalent to 10 centimeters, 1 gram is equivalent to 10 decigrams, and<br />1 decaliter is equivalent to 10 liters. On the contrary, in some variations of the imperial<br />system we may have other positive integers instead of 1 and 10. For instance, 32 drams<br />are equivalent to 875 grains.<br />Since you were born and raised using the much more sensible metric system, you need help<br />learning the imperial system and its variations. You want to be able to transform directly<br />from U1 to UN , that is, you need to know that a certain number of U1 is equivalent to a<br />certain number of UN . To ease further calculations, you want to express the equivalence<br />using only integers values, and these values must be as small as possible.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains an integer N<br />indicating the number of units in the measurement system (2 &le; N &le; 10). Line i of the<br />next N &minus; 1 lines describes the relationship between units Ui and Ui+1 with two integers<br />Ai and Bi representing that Ai Ui is equivalent to Bi Ui+1 (1 &le; Ai &lt; Bi &le; 100). The end<br />of input is indicated with a line containing a single &minus;1.</p>

*******OutputConstraints*******

<p>For each test case, output a single line with two positive integers C and D representing<br />that CU1 is equivalent to DUN . If there are several alternatives, choose the minimum<br />possible value for C.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />5<br />1 2<br />2 3<br />3 4<br />2 5<br />2<br />6 9<br />-1
<br /><strong>Output:</strong> <br />1 10<br />2 3</pre>


______________________________________________________
JARA||||||true||||||


<p>Victor Jara was a Chilean teacher, theater director and political activist. He is widely<br />recognized because of his talent as poet and song writer. His most recognized work is<br />probably the song &ldquo;A Desalambrar&rdquo; that can be translated from Spanish as &ldquo;Unwire&rdquo;.<br />In this song Jara assures that people is the rightful owner of the lands, and so wire fences<br />that delimit private properties should be cut down to allow access to everybody.<br />Although Jara&rsquo;s proposal is far from being fulfilled, some of his convinced listeners keep<br />trying to make it happen. Since they must face several enemies, they try to make their<br />job efficient by only cutting down the necessary number of fences and not more.<br />Each fence can be modeled as a segment (straight line) connecting two points in the XY<br />plane. These endpoints are considered to be part of the fence. A cut in a fence removes<br />any contiguous part of the fence except the endpoints.<br />An area is said to be free if and only if, for any pair of points not lying over a fence, there<br />is a (not necessarily straight) line that connect these points without crossing any fence.<br />Given the location of the fences, your job is to calculate the minimum number of fences<br />that need to be cut down to make the area free, according to the above definition.</p>

*******InputConstraints*******

<p>Each test case is described using several lines. The first line contains an integer N<br />indicating the number of fences in the area (1 &le; N &le; 10<sup>5</sup>). Each of the next N lines<br />describes a different fence using four integers X0 , Y0 , X1 and Y1 (&minus;10<sup>4</sup> &le; X0 , Y0 , X1 , Y1 &le;<br />10<sup>4</sup> ). These values represent that there is a fence whose endpoints in the XY plane are<br />(X0 , Y0 ) and (X1 , Y1 ). You may assume that for each fence its two endpoints are distinct.<br />Besides, within each test case, the intersection of any pair of fences is either empty or<br />it is an endpoint of both fences. The end of input is indicated with a line containing a<br />single &minus;1.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing a single integer representing the mini-<br />mum number of fences that need to be cut down to make the area free.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />9<br />-50 0 0 0<br />0 0 50 0<br />-50 0 0 50<br />0 50 50 0<br />-50 0 0 -50<br />0 -50 50 0<br />0 0 0 -50<br />0 -50 50 -50<br />50 -50 50 0<br />2<br />0 1 2 3<br />0 0 2 2<br />-1
<br /><strong>Output:</strong><br />4<br />0</pre>


______________________________________________________
RANJAN02||||||true||||||


<p>Given 3 three pegs: leftmost peg A, middle peg B and rightmost peg C.Find the shortest sequence of moves that transfers a tower of n disks from the left peg A to the right peg C, if direct moves between A and C are disallowed. (Each move must be to or from the middle peg B.)<br /><br /> Constraints:<br /> 1. Initially the left peg A in stacked by n disks in the order of decreasing size.<br /> 2. Only one move cand be done at a time and never moving a larger one onto a smaller.<br /> 3. Number of moves will always be less than 2^64.<br /><br /></p>

*******InputConstraints*******

<p>Input begins with a integer t, followed by t lines. Each line has the no. of pegs n.</p>

*******OutputConstraints*******

<p>For each test case, output the minimum no. of move required to transfer the n disks from peg A to peg C.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />1<br />2<br />5<br />10<br /><br /><strong>Output:</strong><br />2<br />8<br />242<br />59048<br /></pre>


______________________________________________________
BIO1||||||true||||||


<p>Aly being one of the smartest guys in his third grade class solved the question "How many ways to assign K cells for rooks in an N*M such that no two rooks are attacking each other" (A rook is a chess piece that can attack other pieces on the same row or the same column) but he was only able to solve it when N*M didn't exceed 10. After some days one of his classmates said he was able to solve it even if N*M reached 100. Aly kept asking how he did it and after questioning a lot of people he knew that he used a program to calculate this for him so he decided to challenge him in front of all his classmates but to do that he also needed a program that not only solve the problem when N*M reaches 100 but when N and M each reach 1,000,000 and he came for you to do that program for him but as he knows that the answer can be really big he wanted the program to output the number of ways modulo 1,000,000,007.</p>

*******InputConstraints*******

<p>The first and only line of input contains three numbers N, M and K( 1 &lt;= N,M &lt;= 1,000,000 , 1 &lt;= K &lt;= N*M ).</p>

*******OutputConstraints*******

<p>The number of ways required modulo 1,000,000,007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4 4 4

<strong>Output:</strong>
24</pre>


______________________________________________________
FLIB||||||true||||||


<p>G(n) is defined as</p>
<p>G(n) = G(n-1) + f(4n-1)   , for n &gt; 0</p>
<p>and    G(0) = 0</p>
<p>f(i) is ith Fibonacci number. Given n you need to evaluate G(n) modulo 1000000007.</p>

*******InputConstraints*******

<p>First line contains number of test cases t (t&lt;40000). Each of the next t lines contain an integer n ( 0 &lt;= n &lt; 2^51).</p>

*******OutputConstraints*******

<p>For each test case print G(n) modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>2<br />2<br />4<br /></pre>
<br /><br /><strong>Output:</strong><br /><br />
<pre>15<br />714<br /><br /></pre>
<br /><br /></pre>


______________________________________________________
LGLOVE||||||true||||||


<p>Bob fell in love with LCM and GCD. So much that he started seeing LCMs and GCDs everywhere.</p>
<p>Betty, his girl friend was jealous and she gave Bob an array A[ ] of integers, which had nothing to do with LCMs or GCDs.</p>
<p>Quickly, naughty Bob evaluated a new array B[ ] containing n integers, such that B[i] is LCM(1,2,3,...,A[i]), A[i]&gt;0. When A[i] is 0, B[i] is also 0.</p>
<p>Angry Betty decided to give m queries to Bob, each being one of the following type:</p>
<p>-   "0 i j p", meaning add 'p' to each element in A[i..j]. -300000&lt;= p &lt;= 300000 , 0&lt;=i&lt;=j&lt;n</p>
<p>-   "1 i j"    , meaning print the LCM of all elements in B[i..j]. 0&lt;=i&lt;=j&lt;n</p>
<p>-   "2 i j"    , meaning print the GCD of all elements in B[i..j].0&lt;=i&lt;=j&lt;n</p>

*******InputConstraints*******

<p>First line contains n(n &lt;= 100000 ) and m( m &lt;= 35000 ).</p>
<p>Second line contains n integers in the original array A[ ] .</p>
<p>Next m lines contain one of the above said queries.</p>
<p>It is guaranteed that A[i] after any number of updates will satisfy 0&lt;=A[i]&lt;=300000.</p>

*******OutputConstraints*******

<p>Output one line for each query of type 1 or 2, modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><pre>5 5<br />4 1 3 6 2<br />1 2 4<br />2 1 3<br />0 0 3 2<br />1 1 2<br />2 2 4<br /><br /></pre>
<br /><br /><strong>Output:</strong><br />
<pre>60<br />1<br />60<br />2<br /><br /></pre>
<br /></pre>


______________________________________________________
SBACT||||||true||||||


<!-- Block added 2009-04-02 SRL --> <!-- End block -->
<p>&nbsp;</p>
<p>&nbsp;Given an nxn grid of cells, a bacteria colony can colonize these cells. Their growth after every second is governed by the following rules:</p>
<p>1) One new bacteria is born in cell (i ,j) if and only if either one of its four neighboring cells or the cell(i,j) itself has a bacteria population more than or equal to the threshold value, k.</p>
<p>2) Already living bacterias do not die.</p>
<p>Given, the initial state of the nxn cell grid, you need to accurately estimate the time by when the total bacteria population reaches m.</p>

*******InputConstraints*******

<p>First line contains t, number of test cases.</p>
<p>Each test case starts with n (side length of grid) , k (growth threshold) and m (final population).</p>
<p>Next n lines contain an nxn grid of integers, where ith row,jth column has an integer representing the number of bacteria's present initially at cell(i,j).</p>
<p>1&lt;  n &lt;= 100 , 0&lt;  k &lt;= 2^45 , 0&lt; m &lt;= 2^45,</p>
<p>There are no more than n cells with initial population equal to or greater than k.</p>

*******OutputConstraints*******

<p>For each test case print the number of seconds required for the total bacteria population to reach m. If m can never be reached print "Not possible" (quotes for clarity).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>1<br />3 5 15<br />0 0 0<br />0 3 0<br />0 0 5<br /><br /><br /></pre>
<br /><br /><strong>Output:</strong><br />
<pre>3<br /><br /></pre>
<br /></pre>


______________________________________________________
BIO||||||false||||||

<p>It was no later than 1869 that Jules Verne succeeded to vulgarize interest in the depths of the oceans through his science-fiction novel &ldquo;Twenty thousand leagues under the sea&rdquo;. On board the Nautilus manoeuvred by captain Nemo, the crew visits the lost city of Atlantis and gets to know strangest kinds of sea dwellers.</p>
<p>Nearly a century later, one of the deepest points on Earth, the Challenger Deep was visited by Piccard and Walsh and a Swiss flag was dibbled at 10&rsquo;924 metres below sea level. The ridership of the Trieste submarine was amazed by the animal life in these depths.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:biology1" alt="" width="510" height="340" /></p>
<p>&nbsp;</p>
<p>Recently a team of biologists decided to investigate these depths of the Mariana Trench and especially their So Weird Exotic Rare Citizens (SWERC). To this goal a preliminary study was performed, which showed that the species in the Mariana Trench have very local biotopes, which if projected onto the sea surface, can be described by convex polygons. All the biotopes are located at the same depth and some may overlap. The biologists now want to install racks and cameras in each biotope in order to attract and film them. As delicious as the food at the racks might be, no species would ever take the risk to transgress the borders of its habitat. As these cameras and the associated telecommunication system are extremely expensive, their number is to be minimized. Can you tell the biologists for how many cameras they need to account in their budget planning in order not to miss any species if they choose the locations in a clever way? You may consider each camera-rack couple as a mathematical point which must lie <span style="text-decoration: underline;">strictly</span> inside the biotope in order to attract the related species.</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases separated by an empty line. Each test-case starts with the number of species <em>S (0&lt;=S&lt;=20) </em>. Each of the next<em> S</em> lines describes one biotope. The first entry indicates the number <em>n<sub>i</sub></em> &nbsp;of vertices of the convex polygon. Then follow their coordinates in the order <em>x1 y1 x2 y2 ... xn<sub>i</sub> yn<sub>i</sub></em> <em>(|xi|,|yi|&lt;=1000)</em>. Input terminates on a test-case <em>with S=0</em>, which must not be evaluated.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>For each test-case, output the minimum number of camera-rack couples necessary to screen all the species listed in the input.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p>3</p>
<p>3 11.00 0.00 -2.50 7.79 -2.50 -7.79</p>
<p>4 4.00 -3.00 -3.00 4.00 -10.00 -3.00 -3.00 -10.00</p>
<p>4 4.00 2.00 3.00 3.00 2.00 2.00 3.00 1.00</p>
<p>&nbsp;</p>
<p>10</p>
<p>7 -317.00 99.00 -330.55 127.15 -361.01 134.10 -385.43 114.62 -385.43 83.38 -361.01 63.90 -330.55 70.85</p>
<p>6 -99.00 93.00 -238.50 334.62 -517.50 334.62 -657.00 93.00 -517.50 -148.62 -238.50 -148.62</p>
<p>4 113.00 -134.00 42.00 -63.00 -29.00 -134.00 42.00 -205.00</p>
<p>3 90.00 -68.00 -261.00 134.65 -261.00 -270.65</p>
<p>7 218.00 -342.00 147.22 -195.02 -11.83 -158.71 -139.38 -260.43 -139.38 -423.57 -11.83 -525.29 147.22 -488.98</p>
<p>6 131.00 -286.00 38.00 -124.92 -148.00 -124.92 -241.00 -286.00 -148.00 -447.08 38.00 -447.08</p>
<p>4 -170.00 -247.00 -172.00 -245.00 -174.00 -247.00 -172.00 -249.00</p>
<p>4 -332.00 -102.00 -395.00 -39.00 -458.00 -102.00 -395.00 -165.00</p>
<p>6 -52.00 -224.00 -196.50 26.28 -485.50 26.28 -630.00 -224.00 -485.50 -474.28 -196.50 -474.28</p>
<p>5 -101.00 163.00 -210.87 314.22 -388.63 256.46 -388.63 69.54 -210.87 11.78</p>
<p>&nbsp;</p>
<p>0</p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p>2</p>
<p>5</p>
<p>&nbsp;</p>
<p><img src="http://www.spoj.pl../../../content/imuteb:biology2" alt="" width="256" height="243" /> &nbsp; &nbsp;&nbsp; <img src="http://www.spoj.pl../../../content/imuteb:biology2" alt="" width="302" height="239" /></p>
<p style="text-align: left;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample input 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample input 2</p>


______________________________________________________
CF33C||||||true||||||


<p>Learn, learn and learn again &#8212; Valera has to do this every day. He is studying at mathematical school, where math is the main discipline. The mathematics teacher loves her discipline very much and tries to cultivate this love in children. That's why she always gives her students large and difficult homework. Despite that Valera is one of the best students, he failed to manage with the new homework. That's why he asks for your help. He has the following task. A sequence of n numbers is given. A prefix of a sequence is the part of the sequence (possibly empty), taken from the start of the sequence. A suffix of a sequence is the part of the sequence (possibly empty), taken from the end of the sequence. It is allowed to sequentially make two operations with the sequence. The first operation is to take some prefix of the sequence and multiply all numbers in this prefix by &#8201;-&#8201;1. The second operation is to take some suffix and multiply all numbers in it by &#8201;-&#8201;1. The chosen prefix and suffix may intersect. What is the maximum total sum of the sequence that can be obtained by applying the described operations?


*******InputConstraints*******

<p>The first line of the input gives the number of test cases, T. T test cases follow, each with two lines. The first line contains integer n (1&#8201;&#8804;&#8201;n&#8201;&#8804;&#8201;10<sup>5</sup>) &#8212; amount of elements in the sequence. The second line contains n integers ai (&#8201;-&#8201;10<sup>4</sup>&#8201;&#8804;&#8201;ai&#8201;&#8804;&#8201;10<sup>4</sup>) &#8212; the sequence itself.


*******OutputConstraints*******

<p>For each test case, output one line containing the answer to the problem.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3
-1 -2 -3
5
-4 2 0 5 0
5
-1 10 -5 10 -2

<b>Output:</b>
6
11
18
</pre>



______________________________________________________
HAROWS||||||false||||||

<p style="text-align: center;"><strong>Crazy Rows</strong></p>
<p>You are given an <strong>N</strong> x <strong>N</strong> matrix with 0 and 1 values. You can swap any two <em>adjacent</em> rows of the matrix.</p>
<p>Your goal is to have all the 1 values in the matrix below or on the main diagonal. That is, for each X where 1 &le; X &le; N, there must be no 1 values in row X that are to the right of column X.</p>
<p>Return the minimum number of row swaps you need to achieve the goal.</p>
<p>Input</p>
<p>The first line of input gives the number of cases, <strong>T</strong>. <strong>T</strong> test cases follow.<br /> The first line of each test case has one integer, <strong>N</strong>. Each of the next <strong>N</strong> lines contains <strong>N</strong> characters. Each character is either 0 or 1.</p>
<p>Output</p>
<p>For each test case, output</p>
<pre>Case #X: K</pre>
<p>where <strong>X</strong> is the test case number, starting from 1, and <strong>K</strong> is the minimum number of row swaps needed to have all the 1 values in the matrix below or on the main diagonal.</p>
<p>You are guaranteed that there is a solution for each test case.</p>
<p>Limits</p>
<p>1 &le; <strong>T</strong> &le; 60</p>
<p>1 &le; <strong>N</strong> &le; 8</p>
<table style="width: 213px; height: 208px;" border="0">
<tbody>
<tr>
<td><span style="font-size: small;">Input<br />&nbsp;</span></td>
<td><span style="font-size: small;">Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> <span style="font-size: small;">3<br /> 2<br /> 10<br /> 11<br /> 3<br /> 001<br /> 100<br /> 010<br /> 4<br /> 1110<br /> 1100<br /> 1100<br /> 1000</span><br /> </code></td>
<td valign="top"><span style="font-size: small;"><code> Case #1: 0<br /> Case #2: 2<br /> Case #3: 4<br /> </code></span></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>


______________________________________________________
HASTOCK||||||false||||||

<p style="text-align: center;"><strong>B - Stock Charts</strong></p>
<p>You're in the middle of writing your newspaper's end-of-year economics summary, and you've decided that you want to show a number of charts to demonstrate how different stocks have performed over the course of the last year. You've already decided that you want to show the price of <strong>n</strong> different stocks, all at the same <strong>k</strong> points of the year.</p>
<p>A <em>simple chart</em> of one stock's price would draw lines between the points (0, price<sub>0</sub>), (1, price<sub>1</sub>), ... , (k-1, price<sub>k-1</sub>), where price<sub>i</sub> is the price of the stock at the <em>i</em>th point in time.</p>
<p>In order to save space, you have invented the concept of an <em>overlaid chart</em>. An overlaid chart is the combination of one or more simple charts, and shows the prices of multiple stocks (simply drawing a line for each one). In order to avoid confusion between the stocks shown in a chart, the lines in an overlaid chart may not cross or touch.</p>
<p>Given a list of <em>n</em> stocks' prices at each of <em>k</em> time points, determine the minimum number of overlaid charts you need to show all of the stocks' prices.</p>
<p>Input</p>
<p>The first line of input will contain a single integer <strong>T</strong>, the number of test cases.  After this will follow <strong>T</strong> test cases on different lines, each of the form:</p>
<pre>n k<br />price<sub>0,0</sub> price<sub>0,1</sub> ... price<sub>0,k-1</sub><br />price<sub>1,0</sub> price<sub>1,1</sub> ... price<sub>1,k-1</sub><br />...<br />price<sub>n-1,0</sub> price<sub>n-1,1</sub> ... price<sub>n-1,k-1</sub><br /></pre>
<p>Where price<sub>i,j</sub> is an integer, the price of the <em>i</em>th stock at time <em>j</em>.</p>
<p>Output</p>
<p>For each test case, a single line containing "Case #X: Y", where <em>X</em> is the number of the test-case (1-indexed) and <em>Y</em> is the minimum number of overlaid charts needed to show the prices of all of the stocks.</p>
<p>Limits</p>
<p>1 &le; <strong>T</strong> &le; 100<br /> 2 &le; <strong>k</strong> &le; 25<br /> 0 &le; price<sub>i,j</sub> &le; 1000000</p>
<p>1 &le; <strong>n</strong> &le; 16</p>
<p>Sample</p>
<table style="width: 158px; height: 226px;" border="0">
<tbody>
<tr>
<td><br /> <span>Input</span> <br />&nbsp;</td>
<td><br /> <span>Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> 3<br /> 3 4<br /> 1 2 3 4<br /> 2 3 4 6<br /> 6 5 4 3<br /> 3 3<br /> 5 5 5<br /> 4 4 6<br /> 4 5 4<br /> 5 2<br /> 1 1<br /> 2 2<br /> 5 4<br /> 4 4<br /> 4 1<br /> </code></td>
<td valign="top"><code> Case #1: 2<br /> Case #2: 3<br /> Case #3: 2</code></td>
</tr>
</tbody>
</table>


______________________________________________________
HAPLANT||||||false||||||

<p style="text-align: center;"><strong>Watering Plants</strong></p>
<p>In your greenhouse you have a number of plants which you need to water.</p>
<p>Each of the plants takes up an area which is a circle.  No two of the plants overlap or touch each other.</p>
<p>You are going to buy two sprinklers.  Each of the sprinklers will spray everything within a circle of radius <strong>R</strong> with water.</p>
<p>One of the sprinklers will run in the morning, and one will run at night. For you to be satisfied that a plant will get enough water, either the whole area of the plant must be watered in the morning, or the the whole area of the plant must be watered at night. So each of the circles representing a plant must be completely in one or both of the two circles representing the area the sprinklers can water.</p>
<p>Given the location and radius of each of the plants, find the minimum radius <strong>R</strong> so that it is possible to place the two sprinklers to water all the plants. The sprinklers will be installed on the ceiling, so a sprinkler's position can be inside the area of a plant.</p>
<p>Input</p>
<p>&nbsp;</p>
<ul>
<li>One line containing an integer <strong>C</strong>, the number of test cases in the input file. </li>
</ul>
<p>For each test case, there will be:</p>
<ul>
<li>One line containing <strong>N</strong>, where <strong>N</strong> is the number of plants you have. </li>
<li><strong>N</strong> lines, one for each plant, containing three integers "<strong>X</strong> <strong>Y</strong> <strong>R</strong>", where  (<strong>X</strong>, <strong>Y</strong>) are the coordinates of the center of the plant, and <strong>R</strong> is the radius of the plant. </li>
</ul>
<p>Output</p>
<p>For each test case:</p>
<ul>
<li>One line containing the string "Case #x: R" where <em>x</em> is the number of the test case, starting from 1, and <strong>R</strong> is the minimum radius of the sprinklers. </li>
</ul>
<p>Any answer with absolute or relative error of at most 10<sup>-5</sup> will be accepted.</p>
<p>Limits</p>
<p>All numbers in the input file are integers.<br /> 1 &le; <strong>X</strong> &le; 1000<br /> 1 &le; <strong>Y</strong> &le; 1000<br /> 1 &le; <strong>R</strong> &le; 100</p>
<p>Small Input</p>
<p>1 &le; <strong>C</strong> &le; 10<br /> 1 &le; <strong>N</strong> &le; 3</p>
<p>Large Input</p>
<p>1 &le; <strong>C</strong> &le; 30<br /> 1 &le; <strong>N</strong> &le; 40</p>
<table style="width: 272px; height: 394px;" border="0">
<tbody>
<tr>
<td><span>Input</span> <br />&nbsp;</td>
<td><br /> <span>Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> 5<br /> 3<br /> 20 10 2<br /> 20 20 2<br /> 40 10 3<br /> 3<br /> 20 10 3<br /> 30 10 3<br /> 40 10 3<br /> 5<br /> 100 100 1<br /> 140 100 1<br /> 100 130 1<br /> 100 500 1<br /> 150 500 1<br /> 8<br /> 100 100 1<br /> 110 100 1<br /> 100 110 1<br /> 110 110 1<br /> 200 200 1<br /> 210 200 1<br /> 200 210 1<br /> 210 210 1<br /> 4<br /> 100 100 1<br /> 200 100 1<br /> 200 103 1<br /> 300 103 1<br /> </code></td>
<td valign="top"><code> Case #1: 7.000000<br /> Case #2: 8.000000<br /> Case #3: 26.000000<br /> Case #4: 8.071067<br /> Case #5: 51</code></td>
</tr>
</tbody>
</table>


______________________________________________________
HAALPHA||||||false||||||

<p style="text-align: center;"><strong>Alphabetomials</strong></p>
<p>As we all know, there is a big difference between polynomials of degree 4 and those of degree 5. The question of the non-existence of a closed formula for the roots of general degree 5 polynomials produced the famous Galois theory, which, as far as the author sees, bears no relation to our problem here.</p>
<p>We consider only the multi-variable polynomials of degree up to 4, over 26 variables, represented by the set of 26 lowercase English letters. Here is one such polynomial:</p>
<pre>aber+aab+c<br /></pre>
<p>Given a string <em>s</em>, we evaluate the polynomial on it. The evaluation gives <em>p</em>(<em>S</em>) as follows: Each variable is substituted with the number of appearances of that letter in <em>S</em>.<br /> For example, take the polynomial above, and let <em>S</em> = "abracadabra edgar". There are six a's, two b's, one c, one e, and three r's. So</p>
<pre>p(S) = 6 * 2 * 1 * 3 + 6 * 6 * 2 + 1 = 109.<br /></pre>
<p>Given a dictionary of distinct words that consist of only lower case letters, we call a string <em>S</em> a <em>d-phrase</em> if</p>
<pre>S = "S<sub>1</sub> S<sub>2</sub> S<sub>3</sub> ... S<sub>d</sub>",<br /></pre>
<p>where S<sub>i</sub> is any word in the dictionary, for 1 &le; i &le; d. i.e., <em>S</em> is in the form of <em>d</em> dictionary words separated with spaces. Given a number <strong>K</strong> &le; 10, your task is, for each 1&le; <em>d</em> &le; <strong>K</strong>, to compute the sum of <em>p</em>(<em>S</em>) over all the <em>d</em>-phrases. Since the answers might be big, you are asked to compute the remainder when the answer is divided by 10009.</p>
<p>Input</p>
<p>The first line contains the number of cases <strong>T</strong>. <strong>T</strong> test cases follow. The format of each test case is:<br /> A line containing an expression <em>p</em> for the multi-variable polynomial, as described below in this section, then a space, then follows an integer <strong>K</strong>.<br /> A line with an integer <strong>n</strong>, the number of words in the dictionary.<br /> Then <strong>n</strong> lines, each with a word, consists of only lower case letters. No word will be repeated in the same test case.</p>
<p>We always write a polynomial in the form of a sum of terms; each term is a product of variables. We write <em>a</em><sup>t</sup> simply as <em>t</em> <em>a</em>'s concatenated together. For example, <em>a</em><sup>2</sup><em>b</em> is written as <em>aab</em>. Variables in each term are always lexicographically non-decreasing.</p>
<p>Output</p>
<p>For each test case, output a single line in the form</p>
<pre>Case #X: sum<sub>1</sub> sum<sub>2</sub> ... sum<sub>K</sub><br /></pre>
<p>where <em>X</em> is the case number starting from 1, and sum<sub>i</sub> is the sum of <em>p</em>(<em>S</em>), where <em>S</em> ranges over all i-phrases, modulo 10009.</p>
<p>Limits</p>
<p>1 &le; <strong>T</strong> &le; 100.<br /> The string <em>p</em> consists of one or more terms joined by '+'. It will not start nor end with a '+'. There will be at most 5 terms for each <em>p</em>. Each term consists at least 1 and at most 4 lower case letters, sorted in non-decreasing order. No two terms in the same polynomial will be the same.<br /> Each word is non-empty, consists only of lower case English letters, and will not be longer than 50 characters. No word will be repeated in the same dictionary.</p>
<p>Small dataset</p>
<p>1 &le; <strong>n</strong> &le; 20<br /> 1 &le; <strong>K</strong> &le; 5</p>
<p>Large dataset</p>
<p>1 &le; <strong>n</strong> &le; 100<br /> 1 &le; <strong>K</strong> &le; 10</p>
<p>Sample</p>
<table style="width: 357px; height: 238px;" border="0">
<tbody>
<tr>
<td><br /> <span>Input</span> <br />&nbsp;</td>
<td><br /> <span>Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> 2<br /> ehw+hwww 5<br /> 6<br /> where<br /> when<br /> what<br /> whether<br /> who<br /> whose<br /> a+e+i+o+u 3<br /> 4<br /> apple<br /> orange<br /> watermelon<br /> banana<br /> <br /> </code></td>
<td valign="top"><code> Case #1: 15 1032 7522 6864 253<br /> Case #2: 12 96 576<br /> </code></td>
</tr>
</tbody>
</table>


______________________________________________________
HATEAM||||||false||||||

<p style="text-align: center;"><strong>Football Team</strong></p>
<p>A football team will be standing in rows to have a photograph taken. The location of each player will be given by two integers x and y, where y gives the number of the row, and x gives the distance of the player from the left edge of the row. The x values will be all different.</p>
<p>In order to make the photo more interesting, you're going to make sure players who are near each other have shirts of different colors. To do this, you set the following rule:<br /> For each player P:</p>
<ul>
<li>The closest player to the right of P in the same row, if there is such a player, must have a different shirt color. </li>
<li>The closest player to the right of P in the previous row, if there is such a player, must have a different shirt color. </li>
<li>The closest player to the right of P in the next row, if there is such a player, must have a different shirt color. </li>
</ul>
<p>More formally, if there is a player at (x1,y1) and (x2,y2), where x1&lt;x2, then those two players must have different shirt colors if:</p>
<ul>
<li> y1 - 1 &le; y2 &le; y1 + 1, and </li>
<li> there is no x3 such that there is a player at (x3, y2) and x1 &lt; x3 &lt; x2. </li>
</ul>
<p>Find the minimum number of distinct shirt colors required so that this is possible.</p>
<p>Input</p>
<p>The first line of input contains a single integer <strong>T</strong>, the number of test cases. Each test case starts with a line that contains an integer <strong>N</strong>, the number of players, followed by <strong>N</strong> lines of the form</p>
<pre>x y</pre>
<p>each specifying the position of one player.</p>
<p>Output</p>
<p>For each test case, output</p>
<pre>Case #X: c</pre>
<p>where <strong>X</strong> is the test case number, starting from 1, and <strong>c</strong> is the minimum number of colors required.</p>
<p>Limits</p>
<p>1 &le; <strong>T</strong> &le; 100<br /> 1 &le; <strong>x</strong> &le; 1000<br /> The values of x will all be different.</p>
<p>Small dataset</p>
<p>1 &le; <strong>y</strong> &le; 15<br /> 1 &le; <strong>N</strong> &le; 100</p>
<p>Large dataset</p>
<p>1 &le; <strong>y</strong> &le; 30<br /> 1 &le; <strong>N</strong> &le; 1000</p>
<p>Sample</p>
<table style="width: 166px; height: 226px;" border="0">
<tbody>
<tr>
<td><br /> <span>Input</span> <br />&nbsp;</td>
<td><br /> <span>Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> 3<br /> 3<br /> 10 10<br /> 8 15<br /> 12 7<br /> 5<br /> 1 1<br /> 2 1<br /> 3 1<br /> 4 1<br /> 5 1<br /> 3<br /> 1 1<br /> 2 2<br /> 3 1<br /> </code></td>
<td valign="top"><code> Case #1: 1<br /> Case #2: 2<br /> Case #3: 3<br /> </code></td>
</tr>
</tbody>
</table>


______________________________________________________
HARANGES||||||false||||||

<p style="text-align: center;"><strong>Interesting Ranges</strong></p>
<p>A positive integer is a <em>palindrome</em> if its decimal representation (without leading zeros) is a palindromic string (a string that reads the same forwards and backwards). For example, the numbers 5, 77, 363, 4884, 11111, 12121 and 349943 are palindromes.</p>
<p>A range of integers is <em>interesting</em> if it contains an even number of palindromes. The range [L, R], with L &le; R, is defined as the sequence of integers from L to R (inclusive): (L, L+1, L+2, ..., R-1, R). L and R are the range's first and last numbers.</p>
<p>The range [L<sub>1</sub>,R<sub>1</sub>] is a <em>subrange</em> of [L,R] if L &le; L<sub>1</sub> &le; R<sub>1</sub> &le; R.  Your job is to determine how many interesting subranges of [L,R] there are.</p>
<p>Input</p>
<p>The first line of input gives the number of test cases, <strong>T</strong>.  <strong>T</strong> test cases follow. Each test case is a single line containing two positive integers, <strong>L</strong> and <strong>R</strong> (in that order), separated by a space.</p>
<p>Output</p>
<p>For each test case, output one line. That line should contain "Case #x: y", where x is the case number starting with 1, and y is the number of interesting subranges of [L,R], modulo 1000000007.</p>
<p>Limits</p>
<p>1 &le; <strong>T</strong> &le; 120</p>
<p>Small dataset</p>
<p>1 &le; <strong>L</strong> &le; <strong>R</strong> &le; 10<sup>13</sup></p>
<p>Large dataset</p>
<p>1 &le; <strong>L</strong> &le; <strong>R</strong> &le; 10<sup>100</sup></p>
<p>Sample</p>
<table style="width: 226px; height: 106px;" border="0">
<tbody>
<tr>
<td><br /> <span>Input</span> <br />&nbsp;</td>
<td><br /> <span>Output</span> <br />&nbsp;</td>
</tr>
<tr>
<td><code> 3<br /> 1 2<br /> 1 7<br /> 12 110<br /> <br /></code></td>
<td valign="top"><code> Case #1: 1<br /> Case #2: 12<br /> Case #3: 2466</code></td>
</tr>
</tbody>
</table>


______________________________________________________
LEXIPOS||||||true||||||


<p>Let us consider the set of integer numbers between 1 and N inclusive. Order them lexicographically (i. e. like in the vocabulary), for example, for  N&nbsp;=&nbsp;11 the order would be: 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.</p>
<p>Denote the position of the number K in this ordering as Q<sub>N,K</sub>.  For example, Q<sub>11,2</sub>&nbsp;=&nbsp;4.</p>
<p>Given N and K, compute Q<sub>N,K</sub>.</p>

*******InputConstraints*******

<p>The first line contains a number T, which is the number of test cases. T lines follow, each contains 2 integers N and K separated by a single space.</p>

*******OutputConstraints*******

<p>For each test case, print Q<sub>N,K</sub> on a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />7<br />1 1<br />11 2<br />215 211<br />215 215<br />215 26<br />215 99<br />1000000000 999999999<br /><br /><strong>Output:</strong> <br />1<br />4<br />126<br />130<br />135<br />215<br />1000000000
</pre>


______________________________________________________
HLP||||||false||||||

<p><span style="font-size: small;">During, the meeting held to organize a competition in Memory</span><span style="font-size: small;">&nbsp;</span><span style="font-size: small;">strength</span><span style="font-size: small;">,&nbsp;</span><span style="font-size: small;">One of</span></p>
<p><span style="font-size: small;">the attendant suggested an idea that was&nbsp;</span><span style="font-size: small;">accepted by almost&nbsp;</span><span style="font-size: small;">all the organizers.</span></p>
<p><span style="font-size: small;"><br /></span></p>
<p><span style="font-size: small;">First, The competition is held such that all competitors oppose</span><span style="font-size: small;">&nbsp;</span><span style="font-size: small;">each other&nbsp;</span><span style="font-size: small;">and</span></p>
<p><span style="font-size: small;">the winner is the one who got the highest score.</span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;">At the begin of the competition a sequence of pictures are&nbsp;</span><span style="font-size: small;">shown to all&nbsp;</span><span style="font-size: small;">the</span></p>
<p><span style="font-size: small;">competitors where their task, during every&nbsp;</span><span style="font-size: small;">match, is to arrange the&nbsp;</span><span style="font-size: small;">pictures</span></p>
<p><span style="font-size: small;">in front of him/her as quickly&nbsp;</span><span style="font-size: small;">as possible in the same order he&nbsp;</span><span style="font-size: small;">had seen in</span></p>
<p><span style="font-size: small;">the show.</span></p>
<p><span style="font-size: small;"><br /><br />Let's return to our suggestion, One of the Organizers&nbsp;</span><span style="font-size: small;">suggested to put&nbsp;</span><span style="font-size: small;">the</span></p>
<p><span style="font-size: small;">pictures in order where each two&nbsp;</span><span style="font-size: small;">pictures where shown consecutively&nbsp;</span><span style="font-size: small;">in the</span></p>
<p><span style="font-size: small;">show aren't beside&nbsp;</span><span style="font-size: small;">each other. Also he suggested that, for each one,&nbsp;</span><span style="font-size: small;">along</span></p>
<p><span style="font-size: small;">the&nbsp;</span><span style="font-size: small;">competition, isn't allowed to try to put in order the same&nbsp;</span><span style="font-size: small;">arrangement of</span></p>
<p><span style="font-size: small;">the pictures he had tried to do that with before.</span></p>
<p><span style="font-size: small;"><br /></span></p>
<p><span style="font-size: small;">In order not to help any competitor to remember easily.<br /></span></p>
<p><span style="font-size: large;"><span style="font-size: small;"><br />Then, he needed to calculate the </span><strong><span style="font-size: small;">minimum </span></strong><span style="font-size: small;">number of pictures&nbsp;</span></span><span style="font-size: small;">that can be</span></p>
<p><span style="font-size: small;">in the sequence that allow organizing the competition.</span></p>
<p><span style="font-size: small;"><strong>Hint:</strong></span></p>
<p><span style="font-size: small;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All competitors will face each other one through out the competition.<br /></span></p>
<p style="text-align: left; "><span style="font-size: small;"><br /></span><strong><span style="font-size: small;">----------------------------------------------</span></strong></p>
<p style="text-align: left;"><strong><span style="font-size: small;">&nbsp;</span></strong><span style="font-size: small;"><br /></span><strong><span style="font-size: large;"><span style="white-space:pre"><span style="white-space: pre;"><span style="font-size: small;"> </span></span><span style="font-size: small;"> </span><span style="white-space: pre;"><span style="font-size: small;"> </span></span></span><span style="font-size: small;">Task</span></span></strong></p>
<p style="text-align: left; "><strong><span style="font-size: small;">&nbsp;</span></strong><span style="font-size: large;"><span style="font-size: small;"><br /><br /></span><span style="white-space: pre;"><span style="font-size: small;"> </span></span><span style="font-size: small;">write a program th reads the number of the competitors&nbsp;</span></span><span style="font-size: small;">and calculate the</span></p>
<p style="text-align: left; "><span style="font-size: small;">minimum number of elements needed in the&nbsp;</span><span style="font-size: small;">sequence, that can be arranged,</span></p>
<p style="text-align: left; "><span style="font-size: small;">where no two pictures that&nbsp;</span><span style="font-size: small;">where originally next to each other are next to</span></p>
<p style="text-align: left; "><span style="font-size: small;">each other,&nbsp;</span><strong><span style="font-size: small;">M</span></strong><span style="font-size: large;"><span style="font-size: small;">&nbsp;times.</span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><span style="font-size: small;"><br /></span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><strong><span style="font-size: small;">M</span></strong><span style="font-size: small;"> is calculated, such that no one is allowed to try to arrange the&nbsp;</span></span><span style="font-size: small;"><span style="font-size: small;">same</span></span></p>
<p style="text-align: left; "><span style="font-size: small;"><span style="font-size: small;">&nbsp;</span></span><span style="font-size: small;"><span style="font-size: small;">sequence more than once, </span><span style="font-size: small;">along the competition</span><span style="font-size: small;">.</span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><span style="font-size: medium;"><span style="font-size: small;"><br /></span></span><span style="font-size: small;"><br /></span></span><strong><span style="font-size: small;">Input</span></strong><span style="font-size: small;"><br /><br /></span><strong><span style="font-size: small;">N</span></strong><span style="font-size: large;"><span style="font-size: small;">&nbsp;(number of the competitors), where </span><strong><span style="font-size: small;">1</span></strong><span style="font-size: small;"> &lt;&nbsp;</span></span><strong><span style="font-size: small;">N&nbsp;</span></strong><strong><span style="font-size: small;">&le;&nbsp;</span></strong><span style="font-size: large;"><strong><span style="font-size: small;">10</span></strong><sup><strong><span style="font-size: small;">309</span></strong></sup><span style="font-size: small;">&nbsp;<br /></span></span><span style="font-size: large;"><strong><span style="font-size: small;"><br /></span></strong><span style="font-size: small;"><br /></span></span><strong><span style="font-size: small;">Output</span></strong></p>
<p style="text-align: left; "><strong><span style="font-size: small;">&nbsp;</span></strong><span style="font-size: large;"><span style="font-size: small;"><br /></span><span style="font-size: small;">The </span><strong><span style="font-size: small;">minimum </span></strong><span style="font-size: small;">number of elements needed in the sequence that</span></span><span style="font-size: large;"><span style="font-size: small;">&nbsp;</span></span><span style="font-size: small;">will be</span></p>
<p style="text-align: left; "><span style="font-size: small;">shown to all the competitors.</span></p>
<p style="text-align: left; "><span style="font-size: small;"><br /></span></p>
<p style="text-align: left; "><span style="font-size: large;"><strong><span style="font-size: small;">INPUT:</span></strong><span style="font-size: small;"><br /></span><span style="font-size: small;">5</span></span></p>
<p style="text-align: left; "><span style="font-size: small;"><br /></span></p>
<p style="text-align: left; "><span style="font-size: large;"><strong><span style="font-size: small;">OUTPUT:</span></strong><strong><span style="font-size: small;"><br /></span></strong><span style="font-size: small;">5</span></span></p>
<p style="text-align: left;"><span style="font-size: small;"><br /></span></p>
<p style="text-align: left; "><span style="font-size: large;"><strong><span style="font-size: small;">Explanation:</span></strong></span></p>
<p style="text-align: left; "><span style="font-size: large;"><strong><span style="font-size: small;">&nbsp;</span></strong><span style="white-space: pre;"><span style="font-size: small;"> </span></span><span style="font-size: small;">&nbsp;</span><strong><span style="font-size: small;">M</span></strong><span style="font-size: small;">&nbsp;(minimum number of available arrangements needed)&nbsp;</span></span><span style="font-size: large;"><span style="font-size: small;">will&nbsp;</span></span><span style="font-size: large;"><span style="font-size: small;">be </span><strong><span style="font-size: small;">5</span></strong><span style="font-size: small;">, in this case,</span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><span style="font-size: small;">also a sequence of length&nbsp;</span><strong><span style="font-size: small;">5</span></strong><span style="font-size: small;">&nbsp;can</span></span><span style="font-size: large;"><span style="font-size: small;">&nbsp;</span></span><span style="font-size: large;"><span style="font-size: small;">allow&nbsp;</span><strong><span style="font-size: small;">14 unique&nbsp;</span></strong></span><span style="font-size: large;"><span style="font-size: small;">arrangements.</span></span></p>
<p style="text-align: left;"><span style="font-size: medium;"><br /><span style="font-family: courier new,courier;">+ For <strong>5</strong> competitors there are <strong>10</strong> matches (<strong>4.0*5.0/2.0</strong>)<br /><br /><strong>Notice </strong>that each arrangement can be used for <strong>more than one</strong> <strong>match</strong>, but <strong>one time</strong> for <strong>each player</strong> at <strong>maximum.</strong></span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><span style="font-size: small;"><br /></span><strong><span style="font-size: small;">Hint:</span></strong><span style="font-size: small;"><br /></span><strong><span style="white-space: pre;"><span style="font-size: small;"> </span></span><span style="font-size: small;">4</span></strong><span style="font-size: small;">&nbsp;can not b the right answer, as with a sequence of length&nbsp;</span><strong><span style="font-size: small;">4</span></strong><span style="font-size: small;">,&nbsp;</span></span><span style="font-size: large;"><span style="font-size: small;">the number of</span></span></p>
<p style="text-align: left; "><span style="font-size: large;"><span style="font-size: small;">available arrangements is&nbsp;</span><strong><span style="font-size: small;">2</span></strong><span style="font-size: small;">&nbsp;only - </span><strong><span style="font-size: small;">less than needed</span></strong><span style="font-size: small;"> -.</span></span></p>
<p style="text-align: left;"><span style="font-size: small;"><img src="http://www.spoj.plhttp://media.z-trening.com/1/8/5/9/lwq382o9dm8yc944thzq5000001162m350.jpg" alt="" /></span></p>
<p style="text-align: left;"><span style="font-size: large;"><strong><span style="font-size: small;">INPUT:</span></strong></span><span style="font-size: medium;">&nbsp;</span></p>
<h2 style="text-align: left;"><span style="font-size: small;">89</span></h2>
<p style="text-align: left;"><span style="font-size: small;"><br /></span></p>
<p style="text-align: left;"><span style="font-size: large;"><strong><span style="font-size: small;">OUTPUT:</span></strong></span></p>
<p style="text-align: left;"><span style="font-size: large;"><strong><span style="font-size: small;">6<br /></span></strong></span></p>
<pre><br /></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><ul><li><span style="font-size: small;"><span style="font-size: small;">Number of test-cases is </span><strong><span style="font-size: small;">52</span></strong><span style="font-size: small;">.</span></span></li><br /></ul><br /></pre>


______________________________________________________
HISIX||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">"I read somewhere that everybody on this planet is separated by only six other people. Six</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">degrees of separation between us and everyone else on this planet. The President of the United</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">States, a gondolier in Venice, just ll in the names. I nd it A) extremely comforting that</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">we're so close, and B) like Chinese water torture that we're so close because you have to nd</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">the right six people to make the right connection... I am bound to everyone on this planet by</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">a trail of six people." { Ouisa Kitteridge, "Six Degrees of Separation"</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Is widely know that one is separated from everyone in the world in no more than 6 degrees of</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">separation. A degree of separation is dened by the minimum numbers of connections you need</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">to make to contact someone else. For instance, if you know personally another person, then</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">you are separated by one degree. If you know somebody through some friend but not directly</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">(a friend of a friend), then you are separated by two degrees, and so on.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Nevertheless, young Kevin Smith is not convinced about this theory and wants to probe it false.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">To achieve this, he has hacked the Hi6! social network and requested you to help him knock</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">down the theory of six degrees of separation</div>
<p style="text-align: justify;">"I read somewhere that everybody on this planet is separated by only six other people. Six&nbsp;degrees of separation between us and everyone else on this planet. The President of the United&nbsp;States, a gondolier in Venice, just ll in the names. I find it A) extremely comforting that&nbsp;we're so close, and B) like Chinese water torture that we're so close because you have to find&nbsp;the right six people to make the right connection... I am bound to everyone on this planet by&nbsp;a trail of six people." - Ouisa Kitteridge, "Six Degrees of Separation"</p>
<p style="text-align: justify;">Is widely know that one is separated from everyone in the world in no more than 6 degrees of&nbsp;separation. A degree of separation is defined by the minimum numbers of connections you need&nbsp;to make to contact someone else. For instance, if you know personally another person, then&nbsp;you are separated by one degree. If you know somebody through some friend but not directly&nbsp;(a friend of a friend), then you are separated by two degrees, and so on.</p>
<p>Nevertheless, young Kevin Smith is not convinced about this theory and wants to probe it false.&nbsp;To achieve this, he has hacked the Hi6! social network and requested you to help him knock&nbsp;down the theory of six degrees of separation.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line contains an integer T, which specifies the number of test cases. Then, T test case&nbsp;descriptions will follow.&nbsp;Each test case will start with a line with one positive integer, N meaning the number of&nbsp;connections. The next N lines will contain the following pattern:</p>
<p>&lt;name_1&gt; &lt;name_2&gt; &lt;D&gt;</p>
<p>meaning that person "&lt;name_1&gt;" is connected with the person "&lt;name_2&gt;" by making D connections and viceversa. Note that both persons can know each other by a lower degree of&nbsp;separation using other connections.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each input case you must print the string "Case #i: ", where i is the test case number,&nbsp;starting from 1, following by the maximum degree of separation between the specified people.&nbsp;If there is someone that cannot connect to another person, print "INFINITE" instead.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /></pre>
<pre>3<br />2<br />john judy 1<br />mary peter 1<br />3<br />john judy 7<br />john peter 2<br />judy peter 2<br />7<br />john judy 3<br />katie peter 4<br />john peter 2<br />judy mary 1<br />peter mary 2<br />john katie 1<br />katie mary 1<br /><br /><br /><strong>Output:</strong><br /></pre>
<pre>Case #1: INFINITE<br />Case #2: 4<br />Case #3: 3<br /></pre>


______________________________________________________
IITD1||||||false||||||

<p>Dexter keeps doing strange things with numbers.<br />Yesterday he found a new algorithm to sort a sequence of numbers &amp; he implemented the following pseudocode to sort the list Seq of N numbers (0-based) in ascending order :<br /><br />Seq = Given sequence of N numbers<br /><br />swap(i,j)<br />{<br />&nbsp;&nbsp; &nbsp;temp = Seq[i]<br />&nbsp;&nbsp; &nbsp;Seq[i] =Seq[j]<br />&nbsp;&nbsp; &nbsp;Seq[j] = temp<br />}<br /><br /><br />reverse(i,j)<br />{<br />&nbsp;&nbsp; &nbsp;Do for k from i to (i+j-1)/2<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;swap(k,i+j-k)<br />}<br /><br />sort()<br />{<br />&nbsp;&nbsp; &nbsp;Do for i from 0 to N-1<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Do for j from i+1 to N-1&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(Seq[i]&gt;Seq[j]) then reverse(i,j)<br />&nbsp;&nbsp; &nbsp;<br />}<br /><br />However unknown to Dexter, his sister Dee Dee added another loop inside the outer loop so that the changed sort function now looks like :<br /><br />sort()<br />{<br />&nbsp;&nbsp; &nbsp;Do for i from 0 to N-1&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Do for j from i+1 to N-1&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(Seq[i]&gt; Seq[j]) then reverse(i,j)<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Do for j from N-2 to i+2&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;reverse(i+1,j)<br /><br />}<br /><br />When today Dexter tested his program he was frustrated to find that the program was sorting the numbers but it was taking more time than it should(DeeDee's plans always work !).<br />You have been asked to help esitmate the time taken. Given the sequence of numbers that Dexter wants to sort,&nbsp; your job is to find the number of times the swap function has been called.<br /><br /><strong>Input Format :</strong><br /><br />First line contains the number N, the size of the sequence to be sorted. N lines follow, each containing a single integer (the (i)th of these lines contains the value Seq[i])<br /><br /><strong>Output Format:</strong><br /><br />Output a single number representing the number of times the swap function has been called. <br /><br /><br /><strong>Sample Input File:</strong><br /><br />5<br />1<br />2<br />3<br />4<br />5<br /><br /><br /><strong>Sample Output File:</strong><br /><br />4<br /><br /><strong>Constraints:</strong><br />1&lt;=N&lt;=4000<br />0&lt;=Seq[i]&lt;=1,000,000,000</p>
<p>&nbsp;</p>


______________________________________________________
IITD5||||||false||||||

<p>We are given a sequence S of N distinct integers. Denote by S[i] as ith element of S.<br />Hardik picks up a random permutation of S , breaks it into product of disjoint cycles &amp; looks at cycle containing S[i].He notes down the sum of all element of this cycle. Call the expected value of this sum as cycleSum[i]. Your task is to find the minimum value amongst all cycleSums.<br /><br />Assume all permutations of these N numbers are equally likely.<br /><br /><br /><strong>Input Format :</strong><br /><br />First line contains an integer T which denotes the number of test cases. Then follow description of T test scenarios. Each test scenario takes 2 lines. First line contains a single integer N, the size of S. Then follows second line containing N elements of S.<br /><br /><br /><strong>Output Format :</strong></p>
<p><strong></strong><br />Print answer for each test case , rounded to exactly one decimal place , in one line each. <br /><br /><strong>Sample Input :</strong><br />2<br />1<br />1<br />2<br />1 2<br /><br /><br /><strong>Sample Output:</strong><br />1.0<br />2.0<br /><br /><br /><strong>Note:</strong> Notion of cycles for any sequence is defined by using index in the sequence (1-N).<br /><br /></p>
<p><strong>Explaination for sample output</strong> :</p>
<p>In first case only possible permutation is (1)&nbsp; So answer is trivially 1.0</p>
<p>In second case possible permutations are (1)(2) &amp; (12).&nbsp; As both of these are equally likely, cycleSum[1] = 1/2 * 1 + 1/2 * (1+2) = 2.0</p>
<p>And cycleSum[2] = 1/2 * 2 + 1/2 * (1+2) = 2.5.&nbsp; Smaller of these is 2.0 , hence the answer.</p>
<p><strong>Constraints :</strong><br /><br />1&lt;=T&lt;=500<br />1&lt;=N&lt;=5000<br />All elements of S are distinct integers in range 0 to 10^5</p>


______________________________________________________
IITD4||||||false||||||

<p>Define F(n,k) = Sum of kth powers of all divisors of n<br /> So for example F(6,2) = 1^2 + 2^2 + 3^2 + 6^2 = 50<br /> <br /> Define further G(a,b,k) as : Sum of F(j,k) where j varies from a to b both inclusive<br /> <br /> Your task is to find G(a,b,k) given a,b &amp; k.<br /> As values of G can get very large , you only need to output the value of G(a,b,k) modulo 10^9+7.<br /> <br /> <strong>Input Format:</strong></p>
<p><br />First line of input file contains a single integer T - denoting the number of test cases.<br />The  follow description of T test cases. Each test case occupies exactly one  line which contains three space separated integers a,b &amp; k.<br /><br /><strong>Output Format:</strong></p>
<p><br />Output your result for each test case in a new line.</p>
<p><br /><strong>Sample Input File:</strong><br /><br />2<br />2 2 1<br />1 3 2<br /><br /><strong>Sample Output File:</strong><br /><br />3<br />16<br /><br /><br /><strong>Description of sample output:</strong><br /><br />In case 1, we are to find sum of divisors of 2. which is nothing but 1+2=3.<br />In  case 2, we are to find sum of squares of divisors of 1 2 &amp; 3. So  for 1 sum is = 1. For 2 sum is = 1^2+ 2^2= 5. For 3 sum is = 1^2 +  3^2=10.<br />So ans is 16.<br /><strong><br /> Constraints :</strong></p>
<p><br />1&lt;=a&lt;=b&lt;=10^5<br />1&lt;=k&lt;=10^5<br />Number of test cases &lt;=20</p>


______________________________________________________
YOKOF||||||true||||||


<p>Starting with&nbsp;<span><em>x</em></span> and repeatedly multiplying by&nbsp;<span><em>x</em></span>, we can compute&nbsp;<span><em>x</em><sup>31</sup></span> with thirty multiplications:</p>
<blockquote><span><em>x</em><sup>2</sup> = <em>x</em> <tt>*</tt> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>3</sup> = <em>x</em><sup>2</sup> <tt>*</tt> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>4</sup> = <em>x</em><sup>3</sup> <tt>*</tt> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp; <span>... &nbsp;,</span>&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>31</sup> = <em>x</em><sup>30</sup> <tt>*</tt> <em>x</em></span>.</blockquote>
<p>The operation of squaring can appreciably shorten the sequence of multiplications. The following is a way to compute&nbsp;<span><em>x</em><sup>31</sup></span> with eight multiplications:</p>
<blockquote><span><em>x</em><sup>2</sup> = <em>x</em> </span><span><tt>*</tt></span><span> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>3</sup> = <em>x</em><sup>2</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>6</sup> = <em>x</em><sup>3</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em><sup>3</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>7</sup> = <em>x</em><sup>6</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>14</sup> = <em>x</em><sup>7</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>7</sup></span>, <br /> <span><em>x</em><sup>15</sup> = <em>x</em><sup>14</sup> </span><span><tt>*</tt></span><span> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>30</sup> = <em>x</em><sup>15</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>15</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>31</sup> = <em>x</em><sup>30</sup> </span><span><tt>*</tt></span><span> <em>x</em></span>.</blockquote>
<p>This is not the shortest sequence of multiplications to compute&nbsp;<span><em>x</em><sup>31</sup></span>. There are many ways with only seven multiplications. The following is one of them:</p>
<blockquote><span><em>x</em><sup>2</sup> = <em>x</em> </span><span><tt>*</tt></span><span> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>4</sup> = <em>x</em><sup>2</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>2</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>8</sup> = <em>x</em><sup>4</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>4</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>10</sup> = <em>x</em><sup>8</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>2</sup></span>, <br /> <span><em>x</em><sup>20</sup> = <em>x</em><sup>10</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>10</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>30</sup> = <em>x</em><sup>20</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>10</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>31</sup> = <em>x</em><sup>30</sup> </span><span><tt>*</tt></span><span> <em>x</em></span>.</blockquote>
<p>There however is no way to compute&nbsp;<span><em>x</em><sup>31</sup></span> with fewer multiplications. Thus this is one of the most efficient ways to compute&nbsp;<span><em>x</em><sup>31</sup></span> only by multiplications.</p>
<p>If division is also available, we can find a shorter sequence of operations. It is possible to compute&nbsp;<span><em>x</em><sup>31</sup></span> with six operations (five multiplications and one division):</p>
<blockquote><span><em>x</em><sup>2</sup> = <em>x</em> </span><span><tt>*</tt></span><span> <em>x</em></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>4</sup> = <em>x</em><sup>2</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em><sup>2</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>8</sup> = <em>x</em><sup>4</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em><sup>4</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>16</sup> = <em>x</em><sup>8</sup> </span><span><tt>*</tt></span><span><tt></tt> <em>x</em><sup>8</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>32</sup> = <em>x</em><sup>16</sup> </span><span><tt>*</tt></span><span> <em>x</em><sup>16</sup></span>,&nbsp;&nbsp;&nbsp;&nbsp;  <span><em>x</em><sup>31</sup> = <em>x</em><sup>32</sup> &divide; <em>x</em></span>.</blockquote>
<p>This is one of the most efficient ways to compute&nbsp;<span><em>x</em><sup>31</sup></span> if a division is as fast as a multiplication.</p>
<p>Your mission is to write a program to find the least number of operations to compute <span><em>x</em><sup>n</sup></span> by multiplication and division starting with&nbsp;<span><em>x</em></span> for the given positive integer&nbsp;<span><em>n</em></span>. Products and quotients appearing in the sequence of operations should be <span><em>x</em></span> to a positive integer's power. In other words, <span><em>x</em><sup>-3</sup></span>, for example, should never appear.</p>

*******InputConstraints*******

<p>The input is a sequence of one or more lines each containing a single integer&nbsp;<span><em>n</em></span>. <span><em>n</em></span> is positive and less than or equal to 1000. The end of the input is indicated by a zero.</p>

*******OutputConstraints*******

<p>Your program should print the least total number of multiplications and divisions required to compute <span><em>x</em><sup>n</sup></span> starting with&nbsp;<span><em>x</em></span> for the integer&nbsp;<span><em>n</em></span>.  The numbers should be written each in a separate line without any superfluous characters such as leading or trailing spaces.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>1
31
70
91
473
512
811
953
0
</pre>
<strong>Output:</strong>&nbsp;
<pre>0
6
8
9
11
9
13
12
</pre>
<p>&nbsp;</p>
<hr />
</pre>


______________________________________________________
YOKOH||||||true||||||


<p>In the year 29XX, the government of a small country somewhere on the earth introduced a law restricting first names of the people only to traditional names in their culture, in order to preserve their cultural uniqueness.  The linguists of the country specifies a set of rules once every year, and only names conforming to the rules are allowed in that year.  In addition, the law also requires each person to use a name of a specific length calculated from one's birth date because otherwise too many people would use the same very popular names.  Since the legislation of that law, the common task of the parents of new babies is to find the name that comes first in the alphabetical order among the legitimate names of the given length because names earlier in the alphabetical order have various benefits in their culture.</p>
<p>Legitimate names are the strings consisting of only lowercase letters that can be obtained by repeatedly applying the rule set to the initial string ``S'', a string consisting only of a single uppercase S.</p>
<p>Applying the rule set to a string is to choose one of the rules and apply it to the string.  Each of the rules has the form  <span><em>A</em> <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /> <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \alpha$" width="16" height="15" align="BOTTOM" /></span>, where <span><em>A</em></span> is an uppercase letter and <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \alpha$" width="16" height="15" align="BOTTOM" /></span> is a string of lowercase and/or uppercase letters.  Applying such a rule to a string is to replace an occurrence of the letter <span><em>A</em></span> in the string to the string <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \alpha$" width="16" height="15" align="BOTTOM" /></span>.  That is, when the string has the form `` <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \beta$" width="15" height="33" align="MIDDLE" /><em>A</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \gamma$" width="14" height="31" align="MIDDLE" /></span>'', where <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \beta$" width="15" height="33" align="MIDDLE" /></span> and <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \gamma$" width="14" height="31" align="MIDDLE" /></span> are arbitrary (possibly empty) strings of letters, applying the rule rewrites it into the string `` <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \beta$" width="15" height="33" align="MIDDLE" /><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \alpha$" width="16" height="15" align="BOTTOM" /><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \gamma$" width="14" height="31" align="MIDDLE" /></span>''.  If there are two or more occurrences of <span><em>A</em></span> in the original string, an arbitrary one of them can be chosen for the replacement.</p>
<p>Below is an example set of rules.</p>
<blockquote>
<table border="0">
<col align="CENTER"></col><col align="CENTER"></col><col align="LEFT"></col><col align="CENTER"></col><col align="LEFT"></col> 
<tbody>
<tr>
<td align="CENTER" valign="BASELINE">S</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">aAB</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(1)</td>
</tr>
<tr>
<td align="CENTER" valign="BASELINE">A</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td><br /></td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(2)</td>
</tr>
<tr>
<td align="CENTER" valign="BASELINE">A</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">Aa</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(3)</td>
</tr>
<tr>
<td align="CENTER" valign="BASELINE">B</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">AbbA</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(4)</td>
</tr>
</tbody>
</table>
</blockquote>
<p>Applying the rule (1) to ``S'', ``aAB'' is obtained.  Applying (2) to it results in ``aB'', as A is replaced by an empty string.  Then, the rule (4) can be used to make it ``aAbbA''.  Applying (3) to the first occurrence of A makes it ``aAabbA''.  Applying the rule (2) to the A at the end results in ``aAabb''.  Finally, applying the rule (2) again to the remaining A results in ``aabb''.  As no uppercase letter remains in this string, ``aabb'' is a legitimate name.</p>
<p>We denote such a rewriting process as follows.</p>
<blockquote>S <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aAB <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aB <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (4)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aAbbA <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (3)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aAabbA  <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aAabb <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>aabb</blockquote>
<p>Linguists of the country may sometimes define a ridiculous rule set such as follows.</p>
<blockquote>
<table border="0">
<col align="CENTER"></col><col align="CENTER"></col><col align="LEFT"></col><col align="CENTER"></col><col align="LEFT"></col> 
<tbody>
<tr>
<td align="CENTER" valign="BASELINE">S</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">sA</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(1)</td>
</tr>
<tr>
<td align="CENTER" valign="BASELINE">A</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">aS</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(2)</td>
</tr>
<tr>
<td align="CENTER" valign="BASELINE">B</td>
<td align="CENTER" valign="BASELINE"><span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img1.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span></td>
<td align="LEFT" valign="BASELINE">b</td>
<td><br /></td>
<td align="LEFT" valign="BASELINE">(3)</td>
</tr>
</tbody>
</table>
</blockquote>
<p>The only possible rewriting sequence with this rule set is:</p>
<blockquote>S <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>sA <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>saS <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (1)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span>sasA <span>&nbsp;<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img5.png" border="0" alt="$ \;\stackrel{{\mbox{\tiny (2)}}}{{\longrightarrow}}\;$" width="42" height="25" align="BOTTOM" /> &nbsp;</span><span><sup> ... </sup></span></blockquote>
<p>which will never terminate.  No legitimate names exist in this case. Also, the rule (3) can never be used, as its left hand side, B, does not appear anywhere else.</p>
<p>It may happen that no rules are supplied for some uppercase letters appearing in the rewriting steps.  In its extreme case, even S might have no rules for it in the set, in which case there are no legitimate names, of course.  Poor nameless babies, sigh!</p>
<p>Now your job is to write a program that finds the name earliest in the alphabetical order among the legitimate names of the given length conforming to the given set of rules.</p>

*******InputConstraints*******

<p>The input is a sequence of datasets, followed by a line containing two zeros separated by a space representing the end of the input.  Each dataset starts with a line including two integers <span><em>n</em></span> and <span><em>l</em></span> separated by a space, where <span><em>n</em></span> ( <span>1 <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img9.png" border="0" alt="$ \leq$" width="18" height="31" align="MIDDLE" /> <em>n</em> <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img9.png" border="0" alt="$ \leq$" width="18" height="31" align="MIDDLE" /> 50</span>) is the number of rules and <span><em>l</em></span> ( <span>0 <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img9.png" border="0" alt="$ \leq$" width="18" height="31" align="MIDDLE" /> <em>l</em> <img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img9.png" border="0" alt="$ \leq$" width="18" height="31" align="MIDDLE" /> 20</span>) is the required length of the name. After that line, <span><em>n</em></span> lines each representing a rule follow.  Each of these lines starts with one of uppercase letters, A to Z, followed by the character ``='' (instead of `` <span><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3623img9.png" border="0" alt="$ \rightarrow$" width="22" height="17" align="BOTTOM" /></span>'') and then followed by the right hand side of the rule which is a string of letters A to Z and a to z.  The length of the string does not exceed 10 and may be zero.  There appears no space in the lines representing the rules.</p>

*******OutputConstraints*******

<p>The output consists of the lines showing the answer to each dataset in the same order as the input.  Each line is a string of lowercase letters, a to z, which is the first legitimate name conforming to the rules and the length given in the corresponding input dataset.  When the given set of rules has no conforming string of the given length, the corresponding line in the output should show a single hyphen, ``<tt>-</tt>''.  No other characters should be included in the output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>4 3
A=a
A=
S=ASb
S=Ab
2 5
S=aSb
S=
1 5
S=S
1 0
S=S
1 0
A=
2 0
A=
S=AA
4 5
A=aB
A=b
B=SA
S=A
4 20
S=AAAAAAAAAA
A=aA
A=bA
A=
0 0
</pre>
<strong>Output:</strong>&nbsp;
<pre>abb
-
-
-
-

aabbb
aaaaaaaaaaaaaaaaaaaa
</pre>
</pre>


______________________________________________________
YOKOC||||||true||||||


<p>Let's play a puzzle using eight cubes placed on a  <span>3 <tt>x</tt> 3</span> board leaving one empty square.</p>
<p>Faces of cubes are painted with three colors.  As a puzzle step, you can roll one of the cubes to the adjacent empty square.  Your goal is to make the specified color pattern visible from above by a number of such steps.</p>
<p>The rules of this puzzle are as follows.</p>
<p>&nbsp;</p>
<ol>
<li><strong>Coloring of Cubes:</strong> All the cubes are colored in the same way  as shown in Figure 3. The opposite faces have the same color.
<p>&nbsp;</p>
<div><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/p3618a.png" border="0" alt="\epsfbox{p3618a.eps}" width="206" height="178" align="BOTTOM" /></div>
<p>&nbsp;</p>
<div>Figure 3: Coloring of a cube</div>
<p>&nbsp;</p>
</li>
<li><strong>Initial Board State:</strong> Eight cubes are placed on the  <span>3 <tt>x</tt> 3</span> board leaving one empty square.  All the cubes have the same orientation as shown in Figure 4.  As shown in the figure, squares on the board are given <span><em>x</em></span> and <span><em>y</em></span> coordinates, (1, 1), (1, 2), ..., and (3, 3). The position of the initially empty square may vary.
<p>&nbsp;</p>
<div><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/p3618b.png" border="0" alt="\epsfbox{p3618b.eps}" width="452" height="228" align="BOTTOM" /></div>
<p>&nbsp;</p>
<div>Figure 4: Initial board state</div>
<p>&nbsp;</p>
</li>
<li><strong>Rolling Cubes:</strong> At each step, we can choose one of the cubes adjacent to the empty square and roll it into the empty square, leaving the original position empty.  Figure 5 shows an example.
<p>&nbsp;</p>
<div><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/p3618c.png" border="0" alt="\epsfbox{p3618c.eps}" width="548" height="162" align="BOTTOM" /></div>
<p>&nbsp;</p>
<div>Figure 5: Rolling a cube</div>
<p>&nbsp;</p>
</li>
<li><strong>Goal:</strong> The goal of this puzzle is to arrange the cubes so that their top faces form the specified color pattern by a number of cube rolling steps described above. </li>
</ol>
<p>Your task is to write a program that finds the minimum number of steps required to make the specified color pattern from the given initial state.</p>
<p>&nbsp;</p>
<h2><span style="color: #ff0000; font-size: medium;"><a name="SECTION0001001000000000000000"></a></span></h2>

*******InputConstraints*******

<p>The input is a sequence of datasets.  The end of the input is indicated by a line containing two zeros separated by a space.  The number of datasets is less than 16.  Each dataset is formatted as follows.</p>
<p>&nbsp;</p>
<blockquote><span> 
<table border="0">
<tbody>
<tr>
<td align="LEFT" valign="BASELINE"><em>x</em></td>
<td align="LEFT" valign="BASELINE"><em>y</em></td>
<td align="LEFT" valign="BASELINE">&nbsp;</td>
</tr>
<tr>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>11</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>21</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>31</sub></td>
</tr>
<tr>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>12</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>22</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>32</sub></td>
</tr>
<tr>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>13</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>23</sub></td>
<td align="LEFT" valign="BASELINE"><em>F</em><sub>33</sub></td>
</tr>
</tbody>
</table>
</span></blockquote>
<p>The first line contains two integers <span><em>x</em></span> and <span><em>y</em></span> separated by a space, indicating the position <span>(<em>x</em>, <em>y</em>)</span> of the initially empty square. The values of <span><em>x</em></span> and <span><em>y</em></span> are 1, 2, or 3.</p>
<p>The following three lines specify the color pattern to make.  Each line contains three characters  <span><em>F</em><sub>1j</sub>, <em>F</em><sub>2j</sub>,</span> and <span><em>F</em><sub>3j</sub></span>, separated by a space.  Character <span><em>F</em><sub>ij</sub></span> indicates the top color of the cube, if any, at position <span>(<em>i</em>, <em>j</em>)</span> as follows:</p>
<dl><dt><tt>B</tt>: Blue, </dt><dt><tt>W</tt>: White, </dt><dt><tt>R</tt>: Red, </dt><dt><tt>E</tt>: the square is Empty. </dt></dl>
<p>There is exactly one `<tt>E</tt>' character in each dataset.</p>

*******OutputConstraints*******

<p>For each dataset, output the minimum number of steps to achieve the goal, when the goal can be reached within 30 steps. Otherwise, output ``<tt>-1</tt>'' for the dataset.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>1 2 
W W W 
E W W 
W W W 
2 1 
R B W 
R W W 
E W W 
3 3 
W B W 
B R E 
R B R 
3 3 
B W R 
B W R 
B E R 
2 1 
B B B 
B R B 
B R E 
1 1 
R R R 
W W W 
R R E 
2 1 
R R R 
B W B 
R R E 
3 2 
R R R 
W E W 
R R R
0 0
</pre>
<strong>Output:</strong>&nbsp;
<pre>0 
3 
13 
23 
29 
30 
-1 
-1
</pre>
</pre>


______________________________________________________
NUMOFPAL||||||false||||||

<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;">Each palindrome can be always created from the other palindromes, if a single character is also a palindrome. For example, the string "malayalam" can be created by some ways:</span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br />* malayalam = m  + ala + y + ala + m<br />* malayalam = m + a + l + aya + l + a + m<br /><br />We want to take the value of function NumPal(s) which is the number of different palindromes that can be created using the string S by the above method. If the same palindrome occurs more than once then all of them should be counted separately.<br /></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br /></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><strong>Input</strong></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;">The string S.</span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br /></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><strong>Output</strong></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;">The value of function NumPal(s).</span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br /></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><strong>Limitations</strong></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;">0 &lt; |s| &lt;= 1000</span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br /></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><strong>Example</strong></span></p>
<p style="margin-top: 0.05cm; margin-bottom: 0.05cm; line-height: 100%;"><span style="font-size: small;"><br /></span></p>
<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->
<p style="margin-bottom: 0cm; line-height: 100%;"><span style="font-size: small;"><span style="font-size: x-small;"><strong>Input:</strong></span></span></p>
<p style="margin-bottom: 0cm; line-height: 100%;"><span style="font-size: small;"><span style="font-size: x-small;">malayalam</span></span></p>
<p style="margin-bottom: 0cm; line-height: 100%;"><span style="font-size: small;"><span style="font-size: x-small;"><strong>Output:</strong></span></span></p>
<p style="margin-bottom: 0cm; line-height: 100%;"><span style="font-size: small;"><span style="font-size: x-small;">15</span></span></p>


______________________________________________________
MISERMAN||||||true||||||


<p style="margin-bottom: 0cm;">Jack is a wise and miser man. Always tries to save his money.</p>
<p style="margin-bottom: 0cm;">One day, he wants to go from city A to city B.  Between A and B, there are N number of cities(including B and excluding A) and in each city there are M buses numbered from 1 to M. And the fare of each bus is different. Means for all N*M busses, fare (K) may be different or same.  Now Jack has to go from city A to city B following these conditions:</p>
<ol>
<li>
<p style="margin-bottom: 0cm;">At every city, he has to change 	the bus.</p>
</li>
<li>
<p style="margin-bottom: 0cm;">And he can switch to only those 	buses which have number either equal or 1 less or 1 greater to the 	previous.</p>
</li>
</ol>
<p style="margin-bottom: 0cm;">You are to help Jack to go from A to B by spending the minimum amount of money.</p>
<p style="margin-bottom: 0cm;">N,M,K&lt;=100.</p>

*******InputConstraints*******

<p style="margin-bottom: 0cm;">Line 1:&nbsp;&nbsp; &nbsp;N M<br />Line 2:&nbsp;&nbsp;&nbsp; NxM Grid</p>
<p style="margin-bottom: 0cm;">Each row lists the fares the M busses to go form the current city to the next city.</p>

*******OutputConstraints*******

<p style="margin-bottom: 0cm;">Single Line containing the minimum amount of fare that Jack has to give.</p>

*******IOTestCases*******

<p>Input:<br />5 5<br />1  3  1  2  6<br /> 10 2  5  4  15<br />10 9  6  7  1<br /> 2  7  1  5  3<br /> 8  2  6  1  9<br /><br />Output:<br />10<br /><br />Explanation: <br />1-&gt;4-&gt;1-&gt;3-&gt;1 = 10</p>
<p>&nbsp;</p>


______________________________________________________
PC8C||||||true||||||


<p>R2D2 was exploring a tunnel when a cave-in suddenly occurred. Oh no, is he trapped?</p>
<p>&nbsp;</p>
<div><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/p4434.png" border="0" alt="\epsfbox{p4434.eps}" width="1332" height="430" align="BOTTOM" /></div>
<p>&nbsp;</p>
<div>Figure1: Overhead view of the cave crisis from the third example test case.</div>
<p>From an overhead view, we can see all the obstacles (debris) on a two-dimensional Cartesian plane. The tunnel is <span><em>w</em></span> cm wide, bounded by the lines <span><em>y</em> = <em>w</em>/2</span> and <span><em>y</em> = - <em>w</em>/2</span>. R2D2 starts at <span>(0, 0)</span>, and has a perfectly circular footprint of radius <span><em>r</em></span>. The exit of the tunnel lies to the right of the line <span><em>x</em> = 1000</span>. Between R2D2 and the exit lie a number of polygonal obstacles.</p>
<p>Is it possible for R2D2 to navigate between the obstacles and make it to the exit?</p>

*******InputConstraints*******

<p>The input file will contain multiple test cases. Each test case begins with a single line containing an even  integer <span><em>w</em></span> ( <span>2<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>w</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000</span>), the width of the tunnel, and an integer <span><em>N</em></span> ( <span>0<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>N</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />100</span>), the number  of obstacles. The next <span><em>N</em></span> lines each contain the description of a single obstacle. The <span><em>i</em></span>-th obstacle is a simple  polygon, specified on a single line containing an integer <span><em>n</em><sub>i</sub></span> ( <span>3<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>n</em><sub>i</sub><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />10</span>), the number of vertices, followed  by <span><em>n</em><sub>i</sub></span> pairs of integers, <span><em>x</em><sub>ij</sub></span> and <span><em>y</em><sub>ij</sub></span> ( <span>0<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>x</em><sub>ij</sub><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000</span> and  <span>- <em>w</em>/2<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>y</em><sub>ij</sub><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4434img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>w</em>/2</span> for   <span><em>j</em> = 1,..., <em>ni</em></span>), specifying the  coordinates of the vertices in counterclockwise order. Note that  obstacles in the input may touch or even overlap. However, you are  guaranteed that R2D2's initial location will not touch or overlap any  obstacle. The vertices of each polygon are unique, no two nonconsecutive  edges of the polygon intersect (even at their endpoints), and each  polygon is guaranteed to have nonzero area.</p>
<p>The end-of-input is denoted by an invalid test case with <span><em>w</em> = <em>N</em> = 0</span> and should not be processed.</p>

*******OutputConstraints*******

<p>For each input test case, you must determine the maximum radius <span><em>r</em> &gt; 0</span> that R2D2 could have and still be able to plan a path from his starting location <span>(0, 0)</span> to the tunnel exit without overlapping with any of the obstacles. You should print either this maximum radius <span><em>r</em></span> (rounded to two decimal places) or the message "<tt>impossible</tt>" if no such radius exists.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>6 2
4 2 -1 4 -1 4 1 2 1
3 3 0 6 -1 6 1
8 2
3 1 -1 4 -1 4 4
3 3 -4 6 1 3 1
10 7
4 0 5 4 2 5 3 4 5
3 4 -5 9 -5 9 0
4 8 -5 11 -5 11 -2 8 -2
3 8 3 16 1 11 5
4 21 -5 23 -3 20 -2 15 -4
3 22 3 26 -1 28 0
3 24 0 29 4 25 3
0 0</pre>
<strong>Output:</strong>&nbsp;
<pre>1.00
impossible
1.33
</pre>
</pre>


______________________________________________________
PC8F||||||true||||||


<p>The following is taken from the official rules for the International  Collegiate Programming Contest, as reported at  http://www.acmicpc-pacnw.org/rules.htm</p>
<p>&nbsp;</p>
<blockquote>The total time is the sum of the time consumed for each problem solved.  The time consumed for a solved problem is the time elapsed from the  beginning of the contest to the submittal of the first accepted run plus  20 penalty minutes for every previously rejected run for that problem.  There is no time consumed for a problem that is not solved.</blockquote>
<p>Quite simply, one element of the optimal strategy is <span>not</span> to have any erroneous submissions, so the androids do not have to worry  about the penalty minutes. All that remains is to determine the order  in which they should submit problems.</p>
<p>Let's assume perfect knowledge -- hey, these androids are <span>good</span> -- so that they can make a very good estimate of the development time required for each of the problems. The task is to determine the <span>order</span> in which the  problems should be submitted. The androids realize that their best approach is for each to think independently about  different problems rather than having all three work on a single problem. Furthermore, each android types infinitely  fast, and does not use the computer terminal while thinking. Hence, up to three problems can be simultaneously in  progress at any given  time, and it is actually possible for all three bots to submit a problem within the same minute. For the same reason, the  number of problems posed is larger than those posed in the contest for biological entities. Being innately fussy, if  there are multiple ways to submit the problems and obtain the same score, they will submit the problem order that comes  lexicographically first.</p>
<p>Determine the algorithm to solve the most problems and to obtain the best possible score for  those problems. Then implement it.</p>

*******InputConstraints*******

<p>The first line of input to your program is a single integer <span><em>n</em></span> ( <span>0 &lt; <em>n</em> &lt; 100</span>), giving the number of data sets -- one for each set of problems. Following that are exactly <span><em>n</em></span> lines, giving information about each data set. The first number is the number of problems in that dataset as an integer <span><em>k</em></span> ( <span>5 </span>&lt;=<span> <em>k</em> &lt;= 15</span>). On the same line, separated by single spaces, are <span><em>k</em></span> integers, all between 1 and 300 inclusive, giving the estimated time required to solve each problem. The problems  themselves are labeled by alphabetic characters starting with A. Note that there are exactly 300 minutes in the contest.</p>

*******OutputConstraints*******

<p>Each data set generates one line of output, giving the data set number, the sequence the problems are submitted, the  total number solved, and the final penalty score. See the sample output for format -- all non-blank entries are  separated by single blank spaces.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp; <pre>4<br />9 25 50 100 150 100 100 150 225 300<br />10 60 120 99 129 15 150 225 135 50 123<br />12 6 60 99 45 135 66 231 63 96 39 50 123<br />15 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75<br /></pre>
<br /><strong>Output:</strong>&nbsp;<br />
<pre>Data set 1: A B C D E F G H 8 1450<br />Data set 2: E I A J C B F H D 9 1473<br />Data set 3: A J D B K F H I C E L 11 1452<br />Data set 4: A B C D E F G H I J K L 12 2250<br /></pre>
<br /></pre>


______________________________________________________
MLK||||||false||||||

<p><span style="white-space: pre;"> </span>Hareedi and Hanadt live in a village with <strong>N </strong>houses built next to each other along one</p>
<p>straight&nbsp;roadway with equal&nbsp;distances between adjacent houses. Some people own cows</p>
<p>and&nbsp;sell the&nbsp;milk their cows produce, while others do&nbsp;not own cows and may need to buy</p>
<p>milk.</p>
<p>Every morning, Hareedi and Hanadi transport milk around the village&nbsp;such that everyone</p>
<p>buys or sells the exact number of bottles they want. Transporting one bottle of milk from</p>
<p>one house to an adjacent house results in one unit of work. <strong>Fortunately</strong>, the number of</p>
<p>milk bottles needed&nbsp;by people is always equal to the number of milk bottles sold by</p>
<p>cow owners.</p>
<p>&nbsp;</p>
<h3 style="font-size: 1.17em;">Task</h3>
<p>write a program that is given the number of milk bottles that people at each house needs</p>
<p>to buy or sell,&nbsp;represented as an integer, finds the minimum work necessary to transport</p>
<p>the bottles from sellers to buyers.</p>
<p>&nbsp;</p>
<p><strong>Constraints</strong></p>
<p>2 &le; <strong>N </strong>&le; 1,000,000 &nbsp; &nbsp; The number of houses.</p>
<p>-1000 <strong>&le;</strong> <strong>B<sub>i</sub>&nbsp;<strong>&le; </strong><span style="font-weight: normal;">1000</span></strong><span style="font-size: xx-small; ">&nbsp;&nbsp; &nbsp; &nbsp;<span style="font-size: x-small;">Integer representing the number of bottles to be bought from or</span></span></p>
<p><span style="font-size: xx-small; "><span style="font-size: x-small;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sold to people&nbsp;</span></span><span style="font-size: xx-small;"><span style="font-size: x-small;">at the house at position </span><strong><span style="font-size: x-small;">i.</span></strong></span></p>
<p><strong>Input</strong></p>
<ul>
<li>Line 1 contains the integer <strong>N</strong>, the number of houses.</li>
<li>Each of the next <strong>N</strong>&nbsp;lines contains an integer <strong>B<span style="font-size: xx-small;"><sub>i</sub><span style="font-weight: normal;">.</span>&nbsp;<span style="font-weight: normal;">If <strong>B<span style="font-size: xx-small;"><sub>i</sub></span></strong>&nbsp;&gt; 0 <span style="font-size: x-small;">then people in house </span></span><span style="font-size: x-small;">i</span><span style="font-weight: normal;"><span style="font-size: x-small;"> are cow</span></span></span></strong></li>
</ul>
<p><span style="font-size: xx-small;"><span style="white-space: pre;"><span style="font-size: x-small;"> </span></span><span style="font-size: x-small;">&nbsp;&nbsp;owners and want</span></span><strong><span style="font-weight: normal;"><span style="font-size: x-small;">&nbsp;to sell</span> <strong>B<span style="font-size: xx-small;"><sub>i</sub></span></strong>&nbsp;bottles of milk, If <strong>B<span style="font-size: xx-small;"><sub>i</sub></span></strong>&nbsp;&le; 0 then people at house </span>i<span style="font-weight: normal;"> are not cow owners</span></strong></p>
<p><strong><span style="font-weight: normal;"><span style="white-space: pre;"> </span>&nbsp;&nbsp; &nbsp;&nbsp;and want to buy <strong>B<span style="font-size: xx-small;"><sub>i</sub></span></strong>&nbsp;bottles of milk.</span></strong></p>
<p><strong><span style="font-weight: normal;">&nbsp;</span></strong><strong>Output</strong></p>
<ul>
<li>A single line containing a single integer, the minimum work units necessary to</li>
</ul>
<p><span style="white-space: pre;"> </span>&nbsp;&nbsp;transport the bottle&nbsp;of milk.</p>
<ul>
</ul>
<h3>Example</h3>
<pre><strong>Input:</strong>
5</pre>
<pre>5</pre>
<pre>-4</pre>
<pre>1</pre>
<pre>-3</pre>
<pre>1</pre>
<pre><strong>Output:</strong>
9</pre>
<pre>There are 5 houses as shown in the table.</pre>
<pre><span style="white-space: normal; font-size: small;"><table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="72" valign="top">
<p align="center"><strong>Position</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>1</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>2</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>3</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>4</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>5</strong></p>
</td>
</tr>
<tr>
<td width="72" valign="top">
<p align="center"><strong>Bottles</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>5</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>-4</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>1</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>-3</strong></p>
</td>
<td width="36" valign="top">
<p align="center"><strong>1</strong></p>
</td>
</tr>
</tbody>
</table></span></pre>
<pre>4 bottles are transported from house 1 to house 2, 1 bottle from house 1 to</pre>
<pre>house 4, 1 bottle from house 3 to house 4, 1 bottle from house 5 to house 4.</pre>
<pre>
</pre>
<ul>
<li>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">Number of test-cases is 28.</pre>
</li>
</ul>
<pre>
</pre>


______________________________________________________
CF36D||||||true||||||


<p>Petya and Vasya are inventing a new game that requires a rectangular board and one chess piece. At the beginning of the game the piece stands in the upper-left corner of the board. Two players move the piece in turns. Each turn the chess piece can be moved either one square to the right or one square down or jump <b><i>k</i></b> squares diagonally down and to the right. The player who can&#8217;t move the piece loses.
<p><center><img border="0" src="/content/shkoorah:cf36d.png"></center>
<p>The guys haven&#8217;t yet thought what to call the game or the best size of the board for it. Your task is to write a program that can determine the outcome of the game depending on the board size.


*******InputConstraints*******

<p>The first input line contains one integer 1 &#8201;&#8804;&#8201; <b><i>t</i></b>&#8201; &#8804;&#8201; 20202. Each of the following <b><i>t&#8201;</i></b> lines contains three numbers:  <b><i>k</i></b> and <b><i>n</i></b>, <b><i>m</i></b> - the jump length and the board&#8217;s length and width (1 &#8201;&#8804; <b><i>&#8201;n,&#8201;m&#8201;,k</i></b> &#8804;&#8201; 10<sup>9</sup>).


*******OutputConstraints*******

<p>Output <b><i>t</i></b> lines that can determine the outcomes of the game on every board. Write &#171;+&#187; if the first player is a winner, and &#171;-&#187; otherwise.


*******IOTestCases*******


<pre>
<b>Input:</b>
10
1 1 1
1 2 1
2 1 2
2 2 2
1 3 2
2 3 2
3 1 3
3 2 3
3 3 3
4 3 3

<b>Output:</b>
-
+
+
-
+
+
-
+
-
-
</pre>



______________________________________________________
FIBFACT||||||true||||||


<p>Let F(n) be nth fibonacci number. F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3 and so on. Given a positive integer n &gt; 2, print the smallest prime number P such that P divides F(n) but it does not divide any F(k) smaller than F(n). Maximum value of n is limited by P where P &lt; 2^64. You should print IMPOSSIBLE if no such P exists.</p>

*******InputConstraints*******

<p>First line of input contains a single positive integer T denoting number of test cases. T &lt;= 20. Next T lines contains value of n.</p>

*******OutputConstraints*******

<p>Output value of P corresponding to each n in separate lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />3<br />8<br /><br /><strong>Output:</strong><br />2<br />7<br /><br />PS : Source Code Limit changed to 700B.<br /></pre>


______________________________________________________
DIVISER9||||||true||||||


<p>Find the the smallest integer with exactly <strong>N</strong> odd divisors, where each divisor is greater or equal to 1 !!!</p>
<p>For example for 3 odd divisors, 9 (factors 1, 3, 9) is minimum.</p>
<table style="width: 644px; height: 14px;" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="5"><br /></td>
<td align="left" valign="top">&nbsp;</td>
</tr>
</tbody>
</table>

*******InputConstraints*******

<p>Each line contain <strong>N (0 &lt; N &lt; 10<sup>14</sup>)</strong>.&nbsp; There are 100 inputs total.</p>

*******OutputConstraints*******

<p>One answer on each line for each <strong>N</strong>, <strong>Modulo 1000000007.</strong></p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />3<br />1024<br /><br /><strong>Output:</strong> <br />9<br />97947700<br /><br /></pre>


______________________________________________________
NE06D||||||true||||||


<p>Contrary to the popular belief, alien flying saucers cannot fly  arbitrarily around our planet Earth. Their touch down and take off  maneuvers are extremely energy consuming, so they carefully plan their mission  to Earth to touch down in one particular place, then hover above the  ground carrying out their mission, then take off. It was all so easy  when human civilization was in its infancy, since flying saucers can  hover above all the trees and building, and their shortest path from one  mission point to the other was usually a simple straight line -- the  most efficient way to travel. However, modern cities have so tall  skyscrapers that flying saucers cannot hover above them and the task of  navigating modern city became quite a complex one. You were hired by an alien  spy to write a piece of software that will ultimately give flying  saucers driving directions throughout the city. As your first assignment  (to prove your worth to your alien masters) you should write a program  that computes the shortest distance for a flying saucer from one point  to another. This program will be used by aliens as an aid in planning  of mission energy requirements.</p>
<p>The problem is simplified by several  facts. First of all, since flying saucer can hover above most of the  buildings, you are only concerned with locations of skyscrapers. Second,  the problem is actually twodimensional -- you can look at everything  ``from above" and pretend that all objects are situated on <span><em>OXY</em></span> Cartesian plane. Flying saucer is represented by a circle of radius <span><em>r</em></span> , and  since modern cities with skyscrapers tend to be regular, every skyscraper  is represented with a rectangle whose sides are parallel to <span><em>OX</em></span> and <span><em>OY</em></span> axes.</p>
<p>By definition, the location of flying saucer is the location of  its center, and the length of the path it travels is the length of the  path its center travels. During its mission flying saucer can touch  skyscrapers but it cannot intersect them.</p>
<p>At the first picture a flying  saucer of <span><em>r</em> = 1</span> has to get from point <span><em>A</em></span> to point <span><em>B</em></span> . The straight dashed  line would have been the shortest path if not for skyscraper 1. The  shortest way to avoid skyscraper 1 is going around its top right corner,  but skyscraper 2 is too close to fly there. Thus, the answer is to go  around the bottom left corner of skyscraper 1 for a total path length of  10.570796.</p>
<p>In the second picture it is impossible for a flying saucer  of <span><em>r</em> = 2</span> to get from point <span><em>A</em></span> to point <span><em>B</em></span> , since all skyscrapers are too  close to fly in between them.</p>
<p>In the third picture flying saucer of <span><em>r</em> = 1</span> has to fly in a slalom-like way around two skyscrapers in order to  achieve the shortest path of length 11.652892 between <span><em>A</em></span> and <span><em>B</em></span> .</p>
<p>&nbsp;</p>
<p><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/p3705.jpg" border="0" alt="\epsfbox{p3705.eps}" width="946" height="307" align="BOTTOM" /></p>

*******InputConstraints*******

<p>The input file contains several test cases, each of them as described below.</p>
<p>The first line of the input file contains integer numbers <span><em>r</em></span> and <span><em>n</em></span> <span>(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>r</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />100, 0<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>n</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />30)</span> , where <span><em>r</em></span> is the radius of the flying  saucer, and <span><em>n</em></span> is the number of skyscrapers. The next line contains four  integer numbers <span><em>x</em><sub>A</sub></span> , <span><em>y</em><sub>A</sub></span> , <span><em>x</em><sub>B</sub></span> , and <span><em>y</em><sub>B</sub></span> <span>(- 1000<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>x</em><sub>A</sub>, <em>y</em><sub>A</sub>, <em>x</em><sub>B</sub>, <em>y</em><sub>B</sub><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000)</span> , where  <span>(<em>x</em><sub>A</sub>, <em>y</em><sub>A</sub>)</span> are the coordinates of the starting point of the flying  saucer's mission and  <span>(<em>x</em><sub>B</sub>, <em>y</em><sub>B</sub>)</span> are the coordinates of its finishing point.</p>
<p>The following <span><em>n</em></span> lines describe skyscrapers. Each skyscraper is  represented by four integer numbers <span><em>x</em><sub>1</sub></span> , <span><em>y</em><sub>1</sub></span> , <span><em>x</em><sub>2</sub></span> , and  <span><em>y</em><sub>2</sub>(- 1000<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>, <em>x</em><sub>2</sub>, <em>y</em><sub>2</sub><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/3705img2.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000, <em>x</em><sub>1</sub> &lt; <em>x</em><sub>2</sub>, <em>y</em><sub>1</sub> &lt; <em>y</em><sub>2</sub>)</span> -- coordinates of the corners  of the corresponding rectangle.</p>
<p>Skyscrapers neither intersect nor touch  each other. Starting and finishing points of the flying saucer's  mission are valid locations for flying saucer, that is, it does not  intersect any skyscraper in those points, but may touch some of them.</p>

*******OutputConstraints*******

<p>For each test case, write to the output a line with the text ``<tt>no solution</tt>" (without quotes) if  the flying saucer cannot reach its finishing point from the starting  one. Otherwise, write to the output a line with a single number -- the  shortest distance that the flying saucer needs to travel to get from the  starting point to the finishing point. Answer has to be precise to at  least 6 digits after the decimal point.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>1 3 <br />2 7 7 1 <br />3 2 6 4 <br />7 5 9 8 <br />1 8 5 9 <br />2 4 <br />0 0 5 6 <br />8 3 10 6 <br />5 9 9 10 <br />1 4 2 8 <br />3 1 5 3 <br />1 2 <br />0 5 10 5 <br />2 2 4 5 <br />6 5 8 8<br /></pre>
<br /><strong>Output:</strong><br />
<pre>10.570796 <br />no solution <br />11.652892<br /></pre>
<br /></pre>


______________________________________________________
MATHS||||||false||||||

<p>One could define mathematics as the study of quantity, structure, space and change and as the science of infinity. Sometimes very abstract, mathematics finds nevertheless applications in many engineering domains. The figure below shows so-called Ford circles. These circles are disjoint or tangent and fill the space in a very compact way! Starting with large circles, the space between these circles can be filled with circles of smaller diameter, and so on and so forth.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:mathematics" alt="" width="500" height="375" /></p>
<p>&nbsp;</p>
<p>Mathematicians observed that the diameters and positions of the centers of these circles follow a given scheme, which can be described with the help of Farey sequences. The Farey sequence of order<em> N</em> is the sequence of completely reduced fractions between 0 and 1, which have denominators less than or equal to <em>N</em>, arranged in increasing size. Thus each Farey sequence starts with the value 0, denoted by the fraction <sup>0</sup>&frasl;<sub>1</sub>, and ends with the value 1, denoted by the fraction <sup>1</sup>&frasl;<sub>1</sub>.</p>
<p>The Amazing Circle Mathematicians (ACM) are interested in the number of terms contained in such a Farey sequence as well as in certain precise terms, which they name Interesting and Curious Position In Circle (ICPC). Your job is to provide the ACMs with this abstract information, which helps them to better understand the Ford circles.</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases, one per line. Each test-case consists of two numbers, the first is the order <em>N</em> (2&lt;=<em>N</em>&lt;=10<sup>6</sup>) of the Farey sequence the ACM is interested in and the second is the ICPC <em>P</em> (1&lt;=<em>P</em>&lt;=10<sup>4</sup>) . Input terminates on a line containing 0 0 which must not be processed.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>For each test-case, output first the ICPC, then the total number of terms in the given Farey sequence.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p>2 2</p>
<p>6 12</p>
<p>14 35</p>
<p>0 0</p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p>1/2 3</p>
<p>5/6 13</p>
<p>6/11 65</p>
<p>&nbsp;</p>


______________________________________________________
BPORT||||||false||||||

<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">N ports are to be constructed on the bytelandian river. Since trade occurs only along a Y miles stretch of the river, the distance between the start point and the last port must be Y. (Consider start point has the 0th port.)</p>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">To optimize the ship movement between important ports, the distance between any two consecutive ports has been fixed to be within a range of possible distances. Also, distance between two consecutive ports can only be an integer number of miles.</p>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">As a programmer you have been assigned the job of evaluating the number of different possible arrangements of ports modulo 1000000007.</p>
<p>&nbsp;</p>
<div><strong>Input</strong></div>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">First line of input contains t. The number of test cases. (t&lt;100)</p>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">First line of each test case contains two integers: N, the number of ports to be built (N&lt;=20) and Y, the ditance between the start point and the last port. (Y&lt;100000)</p>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">Next N lines of the test case contains the range of distances between consecutive ports, with ith line giving two integers, the minimum and maximum gap between (i-1)th and ith port.</p>
<p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">&nbsp;</p>
<div><strong>Output</strong></div>
<p>Print one of output for each test case which is the number of possible arrangements modulo 1000000007.</p>
<p>&nbsp;</p>
<p><strong>Example</strong></p>
<pre><strong>Input:</strong></pre>
<pre>1</pre>
<pre>2 4</pre>
<pre>0 3</pre>
<pre>0 3</pre>
<pre><strong>Output:</strong></pre>
<pre>3</pre>


______________________________________________________
SHOPPERS||||||true||||||


<pre><br /><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">A group of N shoppers go to a supermarket. The supermarket has M items. Each shopper wants to buy only the items he likes.</p><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">They plan to buy K items in all. A shopper can buy at max only one item. Some shoppers may not buy anything and some items might not be bought.</p><br />
*******InputConstraints*******
<br /><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">First line contains the number of test cases.</p><br /><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">Each test case contains three integers N , M and K separated by spaces. Then follow N lines containing M characters each.</p><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">If jth character of ith line is 1 then ith shopper likes item j.</p><br /><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">1&lt;= K &lt;= N, M &lt;=13</p><br />
*******OutputConstraints*******
<br /><p style="padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; font-family: Arial, Helvetica, sans-serif; font: normal normal normal 12px/1.4em Arial, sans-serif; line-height: 1.5em; margin: 0px;">For each test case, output the number of ways K items in all can be bought.</p><br />
*******IOTestCases*******
<br /><pre style="font-family: Arial, Helvetica, sans-serif; padding: 0px; margin: 0px;"><strong>Input:</strong><br />1<br />4 4 2<br />1111<br />0100<br />0100<br />1100<br /><br /><br /><strong>Output:</strong><br />14</pre>
<br /></pre>


______________________________________________________
ARCHI||||||false||||||

<p>Architecture, a tightrope walk between engineering and art! There are probably few invariants shared by the architectural styles around the world and throughout time. Precisely this diversity makes the domain so interesting and challenging.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:Architecture" alt="" width="356" height="341" /></p>
<p>&nbsp;</p>
<p>Any domains may serve as sources of inspiration, mathematical shapes, nature, organisms and even arched slices of Swiss cheese J. Some of our university friends from architecture plan to participate in the prestigious Erect a Palace From Lines (EPFL) contest. This contest is about designing a huge single-floor palace by building horizontal and vertical walls inside the preset square fundament.</p>
<p>The students just finished their creative prototypes, and you are to revise their projects before they enter the contest. Some were obviously overwhelmed by the cryptographic protocol required for the palace description and do not know how many rooms their palace has. Walls are one unit thick and are described by their horizontal and vertical start and end positions. As the palace is huge, these coordinates are expressed in a base 26 system (the latin alphabet). Having overlapping walls is not a problem. For the encryption, read &lsquo;A&rsquo; as zero and &lsquo;Z&rsquo; as twenty-five. All other letters cover the remaining range in the conventional lexicographic order.</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases, separated by an empty line. Each test-case starts with the side length of the square palace <em>n</em> (A&lt;=n&lt;=Z<sup>Z</sup>) and the number of walls <em>w</em> (0&lt;=w&lt;=500) the student placed inside the palace. The palace&rsquo;s interior spreads thus from 0 to <em>n-1</em>, vertically and horizontally. The following <em>w</em> lines each describe a wall in the form x1 y1 x2 y2, the horizontal and vertical endpoints of the wall such that (0&lt;=x1,y1,x2,y2&lt;=n-1). Input terminates on a test-case with <em>n</em>=A and <em>w</em>=0, which must not be processed. You may safely assume that no student placed walls that transgress the fundaments of the palace and that no palace has more than 10&rsquo;000 rooms.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>For each test-case, output the number of rooms in the palace.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p>P 17</p>
<p>G N G F</p>
<p>F G C G</p>
<p>F O F K</p>
<p>G M N M</p>
<p>C F C M</p>
<p>I E K E</p>
<p>O C O E</p>
<p>B L B N</p>
<p>J M J E</p>
<p>M O J O</p>
<p>H O C O</p>
<p>L H L I</p>
<p>N F K F</p>
<p>M E O E</p>
<p>N D O D</p>
<p>E C E L</p>
<p>G O G L</p>
<p>&nbsp;</p>
<p>ZZZZZZZZZZZZZZZZ 4</p>
<p>A GH ZZZZZZZZZZZZZZZY GH</p>
<p>POLYPROG SELECTION POLYPROG CONTEST</p>
<p>TOBE ORNOT TOBE THATSTHEQUESTION</p>
<p>LEADINGZEROS NO LEADINGAS NO</p>
<p>&nbsp;</p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p>&nbsp;</p>
<p>4</p>
<p>2</p>


______________________________________________________
TELECOM||||||false||||||

<p><!--[if !mso]> <mce:style><!  v\:* {behavior:url(#default#VML);} o\:* {behavior:url(#default#VML);} w\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);} --> <!--[endif]--><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves>false</w:TrackMoves> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--><!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="1027" /> </xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit"> <o:idmap v:ext="edit" data="1" /> </o:shapelayout></xml><![endif]--></p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;">From beacons over telegraphs and telephones towards radio and television and ultimately computer networks and internet &ndash; telecommunication systems knew a tremendous evolution within the last century! This was also clear to Richard Hamming, who was bothered by erroneous data transmission.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;">As the transmission channel is often very noisy, the received information is not necessarily the information that was sent out. Looking at digital data transmission, a straight-forward way to check for errors would be a supplementary bit of information, a so-called parity bit. Each package of data on <em>n-1</em> bits is completed by 1 parity bit, whose value is chosen such that the number of ones in the <em>n</em>-bit package is even. Although there is little overhead, parity checking is not very robust. If an even number of bits is flipped during transmission, the check bit remains valid and the error will not be detected. Moreover, although parity can detect errors, it provides no indication on the position of the flipped bit. The data must be discarded entirely and re-transmitted.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;">&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:telecommunications" alt="" width="440" height="311" /></p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;">&nbsp;</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;">If more error-correcting bits are included with a message, and if those bits can be arranged such that different incorrect bits produce different error results, then bad bits could be identified and corrected! Among others, Hamming invented the following algorithm that generates a single-error correcting code for any number of bits.</p>
<p><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--><!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="1026" /> </xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit"> <o:idmap v:ext="edit" data="1" /> </o:shapelayout></xml><![endif]--></p>
<p class="MsoNormalTable" style="margin-right: -28.3pt; text-align: justify;"><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--></p>
<p><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--></p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify;"><strong>Hamming Codes:</strong></p>
<ol type="1">
<li class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify; line-height: normal;">Number the bits starting from 1: bit 1,      2, 3, 4, 5, etc.</li>
<li class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify; line-height: normal;">Write the bit numbers in binary. 1, 10, 11, 100, 101, etc.</li>
<li class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify; line-height: normal;">All bit positions that are powers of two      (have only one 1 bit in the binary form of their position) are parity      bits.</li>
<li class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify; line-height: normal;">All other bit positions, with two or      more 1 bits in the binary form of their position, are data bits.</li>
<li class="MsoNormalTable" style="margin-right: 0.05pt; text-align: justify; line-height: normal;">Each data bit is included in a unique      set of 2 or more parity bits, as determined by the binary form of its bit      position. </li>
</ol>
<p class="MsoNormalTable" style="margin-right: 0.05pt; margin-left: 67.65pt; text-align: justify; text-indent: -18pt; line-height: normal;">a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parity bit 1 covers all bit positions which have the least significant bit set: bit 1 (the parity bit itself), 3, 5, 7, 9, etc.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; margin-left: 67.65pt; text-align: justify; text-indent: -18pt; line-height: normal;">b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parity bit 2 covers all bit positions which have the second least significant bit set: bit 2 (the parity bit itself), 3, 6, 7, 10, 11, etc.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; margin-left: 67.65pt; text-align: justify; text-indent: -18pt; line-height: normal;">c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parity bit 4 covers all bit positions which have the third least significant bit set: bits 4&ndash;7, 12&ndash;15, 20&ndash;23, etc.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; margin-left: 67.65pt; text-align: justify; text-indent: -18pt; line-height: normal;">d)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parity bit 8 covers all bit positions which have the fourth least significant bit set: bits 8&ndash;15, 24&ndash;31, 40&ndash;47, etc.</p>
<p class="MsoNormalTable" style="margin-right: 0.05pt; margin-left: 67.65pt; text-align: justify; text-indent: -18pt; line-height: normal;">e)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In general each parity bit covers all bits where the binary AND of the parity position and the bit position is non-zero.</p>
<p><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--></p>
<p class="MsoNormal" style="margin-right: 0.05pt; text-align: justify;"><span lang="EN-US">Imagine you want to transmit the data &lsquo;42&rsquo;. Its binary representation is 101010. According to the above algorithm, some of these data bits must shift their position and will be interlaced by parity bits. We obtain 10-101-0--, where each hyphen is a placeholder for a parity bit. To get an even number of ones on positions 1,3,5,7,9, parity bit 1 must be <strong>0</strong>. Setting parity bit 2 to <strong>0</strong> ensures an even number of ones on positions 2,3,6,7,10. For similar reasons on positions 4,5,6,7, parity bit 4 must be <strong>0</strong> and parity bit 8 must be <strong>1 </strong>because of positions 8,9,10. Thus the Hamming code for data &lsquo;42&rsquo; is &lsquo;10<strong>1</strong>101<strong>0</strong>0<strong>00</strong>&rsquo; i.e. &lsquo;720&rsquo;. Let&rsquo;s suppose the transmission channel is noisy and the received code is &lsquo;724&rsquo;, i.e.&rsquo;10<strong>1</strong>101<strong>0</strong>1<strong>00</strong>&rsquo;. Then the parity check for parity bit 1 counts an odd number of ones and so does the check for parity bit 2. Parity bit checks 4 and 8 result in an even value. Thus the bit that occurs in parity checks 1 and 2 (i.e. position 3) is wrong and can be corrected! We found back the &lsquo;720&rsquo; code. Removing the parity overhead (bits 1,2,4,8) yields the correct data &lsquo;42&rsquo;! </span></p>
<p class="MsoNormal" style="margin-right: 0.05pt; text-align: justify;"><span lang="EN-US">Assuming that the noise in the channel is not sufficient to flip more than one bit per package, you are to write a program that extracts the data from a received Hamming code.</span><span lang="EN-GB">&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<!--[if !mso]> <mce:style><!  v\:* {behavior:url(#default#VML);} o\:* {behavior:url(#default#VML);} w\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);} --> <!--[endif]-->
<p class="MsoNormal" style="margin-right: 0.05pt; text-align: justify;"><span lang="EN-GB">The input consists of several test-cases, one per line. Each test-case consists of a single decimal number C (0&lt;=C&lt;2<sup>64</sup>)</span><span style="font-size: 11pt; line-height: 115%; font-family: ">&nbsp;</span><span lang="EN-GB">, which is the received Hamming code. The last line is -1, which is obviously not a Hamming code and terminates the test sequence.</span></p>
<p class="MsoNormal" style="margin-right: 0.05pt; text-align: justify;"><span lang="EN-GB"><br /></span></p>
<p><strong>OUTPUT</strong></p>
<p><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--></p>
<p class="MsoNormal" style="margin-right: 0.05pt; text-align: justify;"><span lang="EN-GB">For each test-case, output the correct data that was transmitted, assuming the above algorithm was used to generate the Hamming code.</span></p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves /> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]-->
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">7</span></span></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">28</span></span></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">109</span></span></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">-1</span></span></p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p><!--[if !mso]> <mce:style><!  v\:* {behavior:url(#default#VML);} o\:* {behavior:url(#default#VML);} w\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);} --> <!--[endif]--><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves>false</w:TrackMoves> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi; 	mso-fareast-language:EN-US;} --> <!--[endif]--></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">1</span></span></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">3</span></span></p>
<p class="MsoNormal" style="margin: 0cm -28.3pt 0.0001pt 0cm; text-align: justify;"><span style="font-family: courier new,courier;"><span lang="EN-GB">5</span></span></p>
<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;"><!--[if !mso]> <mce:style><!  v\:* {behavior:url(#default#VML);} o\:* {behavior:url(#default#VML);} w\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);} --> <!--[endif]--><!--[if gte mso 9]><xml> <w:WordDocument> <w:View>Normal</w:View> <w:Zoom>0</w:Zoom> <w:TrackMoves>false</w:TrackMoves> <w:TrackFormatting /> <w:HyphenationZone>21</w:HyphenationZone> <w:PunctuationKerning /> <w:ValidateAgainstSchemas /> <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid> <w:IgnoreMixedContent>false</w:IgnoreMixedContent> <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText> <w:DoNotPromoteQF /> <w:LidThemeOther>FR-CH</w:LidThemeOther> <w:LidThemeAsian>X-NONE</w:LidThemeAsian> <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript> <w:Compatibility> <w:BreakWrappedTables /> <w:SnapToGridInCell /> <w:WrapTextWithPunct /> <w:UseAsianBreakRules /> <w:DontGrowAutofit /> <w:SplitPgBreakAndParaMark /> <w:DontVertAlignCellWithSp /> <w:DontBreakConstrainedForcedTables /> <w:DontVertAlignInTxbx /> <w:Word11KerningPairs /> <w:CachedColBalance /> </w:Compatibility> <m:mathPr> <m:mathFont m:val="Cambria Math" /> <m:brkBin m:val="before" /> <m:brkBinSub m:val=" " /> <m:smallFrac m:val="off" /> <m:dispDef /> <m:lMargin m:val="0" /> <m:rMargin m:val="0" /> <m:defJc m:val="centerGroup" /> <m:wrapIndent m:val="1440" /> <m:intLim m:val="subSup" /> <m:naryLim m:val="undOvr" /> </m:mathPr></w:WordDocument> </xml><![endif]--><!--[if gte mso 9]><xml> <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="267"> <w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal" /> <w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8" /> <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9" /> <w:LsdException Locked="false" Priority="39" Name="toc 1" /> <w:LsdException Locked="false" Priority="39" Name="toc 2" /> <w:LsdException Locked="false" Priority="39" Name="toc 3" /> <w:LsdException Locked="false" Priority="39" Name="toc 4" /> <w:LsdException Locked="false" Priority="39" Name="toc 5" /> <w:LsdException Locked="false" Priority="39" Name="toc 6" /> <w:LsdException Locked="false" Priority="39" Name="toc 7" /> <w:LsdException Locked="false" Priority="39" Name="toc 8" /> <w:LsdException Locked="false" Priority="39" Name="toc 9" /> <w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption" /> <w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title" /> <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font" /> <w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle" /> <w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong" /> <w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis" /> <w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text" /> <w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1" /> <w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision" /> <w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph" /> <w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote" /> <w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5" /> <w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6" /> <w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6" /> <w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6" /> <w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6" /> <w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6" /> <w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6" /> <w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6" /> <w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6" /> <w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6" /> <w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6" /> <w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6" /> <w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6" /> <w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6" /> <w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6" /> <w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis" /> <w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis" /> <w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference" /> <w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference" /> <w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title" /> <w:LsdException Locked="false" Priority="37" Name="Bibliography" /> <w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading" /> </w:LatentStyles> </xml><![endif]--><!--[if gte mso 10]> <mce:style><!   /* Style Definitions */  table.MsoNormalTable 	{mso-style-name:"Table Normal"; 	mso-tstyle-rowband-size:0; 	mso-tstyle-colband-size:0; 	mso-style-noshow:yes; 	mso-style-priority:99; 	mso-style-qformat:yes; 	mso-style-parent:""; 	mso-padding-alt:0cm 5.4pt 0cm 5.4pt; 	mso-para-margin-top:0cm; 	mso-para-margin-right:0cm; 	mso-para-margin-bottom:10.0pt; 	mso-para-margin-left:0cm; 	line-height:115%; 	mso-pagination:widow-orphan; 	font-size:11.0pt; 	font-family:"Calibri","sans-serif"; 	mso-ascii-font-family:Calibri; 	mso-ascii-theme-font:minor-latin; 	mso-fareast-font-family:"Times New Roman"; 	mso-fareast-theme-font:minor-fareast; 	mso-hansi-font-family:Calibri; 	mso-hansi-theme-font:minor-latin; 	mso-bidi-font-family:"Times New Roman"; 	mso-bidi-theme-font:minor-bidi;} --> <!--[endif]--><!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="1027" /> </xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit"> <o:idmap v:ext="edit" data="1" /> </o:shapelayout></xml><![endif]-->
<p class="MsoNormal" style="margin-right: -28.3pt; text-align: justify;">From beacons over telegraphs and telephones towards radio and television and ultimately computer networks and internet &ndash; telecommunication systems knew a tremendous evolution within the last century! This was also clear to Richard Hamming, who was bothered by erroneous data transmission.</p>
<p class="MsoNormal" style="margin-right: -28.3pt; text-align: justify;"><img src="http://www.spoj.plfile:///C:/Users/kauth/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="" hspace="12" width="357" height="253" align="left" />As the transmission channel is often very noisy, the received information is not necessarily the information that was sent out. Looking at digital data transmission, a straight-forward way to check for errors would be a supplementary bit of information, a so-called parity bit. Each package of data on <em>n-1</em> bits is completed by 1 parity bit, whose value is chosen such that the number of ones in the <em>n</em>-bit package is even. Although there is little overhead, parity checking is not very robust. If an even number of bits is flipped during transmission, the check bit remains valid and the error will not be detected. Moreover, although parity can detect errors, it provides no indication on the position of the flipped bit. The data must be discarded entirely and re-transmitted.</p>
<p style="margin-right: -28.3pt; text-align: justify;"><span style="font-family: " lang="EN-US">If more error-correcting bits are included with a message, and if those bits can be arranged such that different incorrect bits produce different error results, then bad bits could be identified and corrected! Among others, Hamming invented the following algorithm that generates a single-error correcting code for any number of bits.</span></p>
</div>


______________________________________________________
PEBBLE||||||true||||||


<p>Pebble is a popular turn-based multi-player game played by kids. In this game, all the players are given a binary string (i.e., a string consisting only of 0's and 1's) of some fixed length. The goal of the game is to convert this binary string to a string containing all 0's.</p>
<p>In a turn, a player is allowed to perform only one operation:- Replace a 1 by a 0 or vice-versa. But each such operation will flip the states of all the bits following the bit you changed.</p>
<p>Take for example, the string: 1001010. You decide to flip the 1 located at the 4th position. The new string after the operation will be : 1000101. (Note that 5th to 7th bits flipped as a result of flipping the 4th bit.)</p>
<p>Your small sister loves to play this game very much. So, you decide to gift her the pebble-solver software which solves this game with the minimum number of operations(how else will you make sure that she always wins?!). And we want to make sure that your software doesn't have any bugs. (he he)</p>

*******InputConstraints*******

<p>There are going to multiple test cases. Each test case consists of a single line which is the initial bit-string.</p>

*******OutputConstraints*******

<p>Output corresponding to the each test case in the following format :</p>
<p>"Game #x: y", where x indicates the test case number and y is the minimum number of steps required for your program to solve the game.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
0101
10000
00</pre>
<pre><strong>Output:</strong>
Game #1: 3
Game #2: 2
Game #3: 0</pre>


______________________________________________________
CPCRC1C||||||true||||||


<p>Majid is a 3rd-grade elementary student and quite well in mathematics. Once, Majid's teacher asked him to calculate the sum of numbers 1 through n.</p>
<p>Majid quickly answered, and his teacher made him another challenge. He asked Majid to calculate the sum of the digits of numbers 1 through n.</p>
<p>Majid did finally find the solution. Now it is your turn, can you find a solution?</p>

*******InputConstraints*******

<p>Two space-separated integers 0 &lt;= a &lt;= b &lt;= 10<sup>9</sup>.</p>
<p>Program terminates if a and b are -1.</p>

*******OutputConstraints*******

<p>The sum of the digits of numbers a through b.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 10<br />100 777<br />-1 -1<br /><strong>Output:</strong><br />46<br />8655</pre>


______________________________________________________
ELEC||||||false||||||

<p>The electrical engineers&rsquo; indefatigable strive towards environmentally friendly energy production translated into the recent boom of hydro, solar, wind and geothermal power plants. While the production side seems ready, these ambitious projects have their bottleneck in the transportation and distribution: Besides the energy losses that occur during transportation over long distances, the renewable energy sources cannot provide power on demand &ndash; they must be taken as provided by nature. Used at large scale in today&rsquo;s networks, unreliable green energy can disrupt the balance of power grids easily and cause huge damage along with large-scale power outages.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://www.spoj.pl/content/imuteb:Elec0" alt="" width="705" height="234" /></p>
<p>&nbsp;</p>
<p>Serious effort is thus put on researching transient and dynamic phenomena in power grids. You are offered a position in the lab for linear and planar distribution networks. Given a description of the distribution network&rsquo;s line impedances Z<sub>i</sub> , you are to find the equivalent impedance between some couples of nodes. The knowledge of such equivalent impedances may speed up the network analysis considerably! Impedances are complex number whose real part represents the resistive line behaviour while the imaginary part stands for the capacitive (negative) or inductive (positive) characteristic. Lines are bidirectional, that is impedance(a,b) equals impedance (b,a).</p>
<p>It was proven that any linear and planar graph (can be drawn in a way that its edges intersect only at their endpoints) can be reduced into a single equivalent edge that represents the equivalent impedance between its ending nodes, using the following six transformations:</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://www.spoj.pl/content/imuteb:Elec1" alt="" width="726" height="564" /></p>
<p>&nbsp;</p>
<p>Now that you have all the necessary operations available, are you able to determine the equivalent impedance between several couples of nodes?</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases separated by an empty line. Each test-case starts with the number of nodes <em>N</em> (1&lt;=N&lt;=100), the number of bidirectional connections <em>C</em> (0&lt;=C&lt;=1000) and the number of equivalent impedances to compute <em>Z</em> (0&lt;=Z&lt;=10) on a line. Then follow <em>C </em>lines, each describing one bidirectional connection in the form <em>&lsquo;EndPoint_1&rsquo; &lsquo;EndPoint_2&rsquo; &lsquo;Impedance&rsquo;</em>. <em>&lsquo;EndPoint_1&rsquo;</em> <em>and &lsquo;EndPoint_2&rsquo;</em> are in the range <em>1</em> to <em>N</em> and impedance has the format &lsquo;<em>re im</em>&rsquo; where <em>re </em>and <em>im</em> designate the real and imaginary parts respectively, both being real numbers <em>d</em> such that 10<sup>-3</sup> &lt; |d| &lt; 10<sup>3</sup>. The next <em>Z </em>lines each hold two integers, the indices of the nodes between which you are to compute the equivalent impedance. Input terminates on a test-case <em>with N=C=Z=0</em>, which must not be evaluated.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>For each couple of endpoints, output the equivalent impedance in the form &lsquo;<em>re im</em>&rsquo; where <em>re </em>and <em>im</em> designate the real and imaginary parts respectively. If the nodes are not connected, output &lsquo;no connection&rsquo;. Electrical engineers will consider your result as correct if the absolute error on the real and imaginary parts is below 10<sup>-2</sup>. Finish each test-case on a blank line.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p><span style="font-family: courier new,courier;">5 10 3</span></p>
<p><span style="font-family: courier new,courier;">3 1 12.317 -0.779</span></p>
<p><span style="font-family: courier new,courier;">5 3 30.107 0.289</span></p>
<p><span style="font-family: courier new,courier;">5 1 27.447 -22.649</span></p>
<p><span style="font-family: courier new,courier;">4 2 15.351 24.371</span></p>
<p><span style="font-family: courier new,courier;">5 5 19.63 -3.549</span></p>
<p><span style="font-family: courier new,courier;">2 2 11.841 18.757</span></p>
<p><span style="font-family: courier new,courier;">4 5 4.834 -16.542</span></p>
<p><span style="font-family: courier new,courier;">3 5 5.022 -22.387</span></p>
<p><span style="font-family: courier new,courier;">2 5 24.768 -22.356</span></p>
<p><span style="font-family: courier new,courier;">5 2 27.351 12.053</span></p>
<p><span style="font-family: courier new,courier;">1 2</span></p>
<p><span style="font-family: courier new,courier;">2 3</span></p>
<p><span style="font-family: courier new,courier;">3 3</span></p>
<p><span style="font-family: courier new,courier;"><br /></span></p>
<p><span style="font-family: courier new,courier;">10 10 4</span></p>
<p><span style="font-family: courier new,courier;">9 8 6.36 17.411</span></p>
<p><span style="font-family: courier new,courier;">1 3 27.596 -6.484</span></p>
<p><span style="font-family: courier new,courier;">9 10 4.735 -8.282</span></p>
<p><span style="font-family: courier new,courier;">8 8 6.901 27.939</span></p>
<p><span style="font-family: courier new,courier;">8 4 14.894 3.729</span></p>
<p><span style="font-family: courier new,courier;">5 4 14.311 -2.422</span></p>
<p><span style="font-family: courier new,courier;">10 10 11.009 6.225</span></p>
<p><span style="font-family: courier new,courier;">4 4 3.196 -32.703</span></p>
<p><span style="font-family: courier new,courier;">10 9 15.282 -14.799</span></p>
<p><span style="font-family: courier new,courier;">3 9 20.473 27.158</span></p>
<p><span style="font-family: courier new,courier;">10 9</span></p>
<p><span style="font-family: courier new,courier;">8 1</span></p>
<p><span style="font-family: courier new,courier;">2 9</span></p>
<p><span style="font-family: courier new,courier;">9 6</span></p>
<p>&nbsp;</p>
<p><strong>SAMPLE OUTPUT</strong></p>
<pre><span style="font-family: courier new,courier;">23.37 -7.26</span></pre>
<pre><span style="font-family: courier new,courier;">19.61 -6.97</span></pre>
<pre><span style="font-family: courier new,courier;">0.00 0.00</span></pre>
<pre><span style="font-family: courier new,courier;"><br /></span></pre>
<pre><span style="font-family: courier new,courier;">3.79 -5.46</span></pre>
<pre><span style="font-family: courier new,courier;">54.43 38.09</span></pre>
<pre><span style="font-family: courier new,courier;">no connection</span></pre>
<pre><span style="font-family: courier new,courier;">no connection</span></pre>
<p style="text-align: center;"><span style="font-family: courier new,courier;"><img src="http://www.spoj.pl../../../content/imuteb:Elec2" alt="" width="224" height="163" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="http://www.spoj.pl../../../content/imuteb:Elec2" alt="" width="210" height="155" /></span></p>
<p style="text-align: center;"><span style="font-family: courier new,courier;">Sample input 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sample input 2<br /></span></p>


______________________________________________________
CSQUARE||||||false||||||

<p><strong>Description :</strong></p>
<p>Marko is learning method of successive squaring so that he can calculate a^b mod m quickly. To give himself practice he wrote many tuples of a, b and m and went to school thinking that he will do it after school.</p>
<p>After school he found that tuples he wrote are modified by his little sister. His sister converted each b into base 3. Marko wrote everything in base 10.<br /><br />Help Marko to do his excercise.</p>
<p><strong>Input:</strong></p>
<p>First line of input contains a number t, number of test cases. Then t test cases follows each containing three numbers a(&lt;=10^9), b and m(&lt;=10^5) (a in base 10, b in base 3 and m in base 10). Number of digits in b will be less than 250<strong>.</strong></p>
<p><strong>Output:</strong></p>
<p>Output a number for each test case a^b mod m in base 10.</p>
<p><strong>Sample </strong></p>
<p><strong>Input:</strong></p>
<p>2<br />2 10 10<br />3 21101 19</p>
<p><strong>Output:<br /> </strong>8<br /> 3<strong><br /> </strong></p>


______________________________________________________
FLWRS||||||true||||||


<p>Hanadi has <strong>N</strong> flower pots each with a unique flower. The pots are&nbsp;arranged along in a line.</p>
<p>One day, She decided to change their&nbsp;order under the condition that no two pots that were</p>
<p>originally&nbsp;next to each other remain next to each other.</p>
<p>&nbsp;</p>
<h3 style="font-size: 1.17em;">Task</h3>
<p>write a program that is given the number of pots, calculates the&nbsp;number of possible orders</p>
<p>satisfying the condition&nbsp;<strong><span style="text-decoration: underline;">modulo a given integer M</span></strong>.</p>
<p>&nbsp;</p>
<h3 style="font-size: 1.17em;">Constraints</h3>
<p><strong>1</strong> &le; <strong>N</strong> &le; <strong>1,000</strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The number of pots.</p>
<p><strong>2</strong> &le; <strong>M</strong> &le; <strong>1,000,000</strong></p>
<p><strong><br /></strong></p>

*******InputConstraints*******

<ul>
<li>Line 1 contains the integer <strong>N</strong>, the number of flower pots.</li>
<li>Line 2 contains the integer <strong>M</strong>.</li>
</ul>

*******OutputConstraints*******

<p>A single line containing one integer between <strong>0</strong> and <strong>M-1</strong> (inclusive):&nbsp;the number of possible</p>
<p>orders modulo <strong>M</strong>.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5</pre>
<pre>11</pre>
<pre><strong>Output:</strong><br />3</pre>
<pre>For<strong> 5</strong> pots, there are <strong>14</strong> orders satisfying Hanadi's condition, assuming the original order</pre>
<pre>of pots was "<strong>ABCDE</strong>"</pre>
<pre>Then the <strong>14</strong> possible orders are:</pre>
<pre><p><strong>ACEBD</strong></p><p><strong>ADBEC</strong></p><p><strong>BDACE</strong></p><p><strong>BDAEC</strong></p><p><strong>BECAD</strong></p><p><strong>CADBE</strong></p><p><strong>CAEBD</strong></p><p><strong>CEADB</strong></p><p><strong>CEBDA</strong></p><p><strong>DACEB</strong></p><p><strong>DBEAC</strong></p><p><strong>DBECA</strong></p><p><strong>EBDAC</strong></p><p><strong>ECADB</strong></p><p><strong><br /></strong></p><p><strong>14</strong> modulo <strong>11</strong> =<strong> 3</strong></p><p>So the answer is <strong>3</strong>.&nbsp;</p><p><strong><br /></strong></p><p>&nbsp;</p></pre>
<ul>
<li>Number of test-cases is <strong>21</strong>.</li>
</ul>
<pre><br /></pre>


______________________________________________________
HOMO||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Consider a list of numbers with two operations:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">&bull; insert number &mdash; adds the specified number to the end of the list.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">&bull; delete number &mdash; removes the first occurrence of the specified number from the list. If the list</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">does not contain the number specified, no changes are performed.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">For example: the result of the insertion of a number 4 to the list [1, 2, 1] is the list [1, 2, 1, 4]. If we delete</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">the number 1 from this list, we get the list [2, 1, 4], but if we delete the number 3 from the list [1, 2, 1, 4],</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">the list stays unchanged.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">The list is homogeneous if it contains at least two equal numbers and the list is heterogeneous if it</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">contains at least two different numbers. For example: the list [2, 2] is homogeneous, the list [2, 1, 4] is</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">heterogeneous, the list [1, 2, 1, 4] is both, and the empty list is neither homogeneous nor heterogeneous.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Write a program that handles a number of the operations insert and delete on the empty list and</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">determines list&rsquo;s homogeneity and heterogeneity after each operation.</div>
<p>&nbsp;</p>
<p>Consider a list of numbers with two operations:</p>
<p>&bull; insert number &mdash; adds the specified number to the end of the list.</p>
<p>&bull; delete number &mdash; removes the first occurrence of the specified number from the list. If the list&nbsp;does not contain the number specified, no changes are performed.</p>
<p>For example: the result of the insertion of a number 4 to the list [1, 2, 1] is the list [1, 2, 1, 4]. If we delete&nbsp;the number 1 from this list, we get the list [2, 1, 4], but if we delete the number 3 from the list [1, 2, 1, 4],&nbsp;the list stays unchanged.</p>
<p>The list is homogeneous if it contains at least two equal numbers and the list is heterogeneous if it&nbsp;contains at least two different numbers. For example: the list [2, 2] is homogeneous, the list [2, 1, 4] is&nbsp;heterogeneous, the list [1, 2, 1, 4] is both, and the empty list is neither homogeneous nor heterogeneous.</p>
<p>Write a program that handles a number of the operations insert and delete on the empty list and&nbsp;determines list&rsquo;s homogeneity and heterogeneity after each operation.</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line of the input file contains an integer number n &mdash; the number of operations to handle&nbsp;(1 &le; n &le; 100 000).</p>
<p>Following n lines contain one operation description each. The operation description consists of a word&nbsp;&ldquo;insert&rdquo; or &ldquo;delete&rdquo;, followed by an integer number k &mdash; the operation argument (&minus;10^9 &le; k &le; 10^9 ).</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each operation output a line, containing a single word, describing the state of the list after the&nbsp;operation:</p>
<p>&bull; &ldquo;both&rdquo; &mdash; if the list is both homogeneous and heterogeneous.</p>
<p>&bull; &ldquo;homo&rdquo; &mdash; if the list is homogeneous, but not heterogeneous.</p>
<p>&bull; &ldquo;hetero&rdquo; &mdash; if the list is heterogeneous, but not homogeneous.</p>
<p>&bull; &ldquo;neither&rdquo; &mdash; if the list is neither homogeneous nor heterogeneous.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /></pre>
<pre>11<br />insert 1<br />insert 2<br />insert 1<br />insert 4<br />delete 1<br />delete 3<br />delete 2<br />delete 1<br />insert 4<br />delete 4<br />delete 4<br /><br /><br /><strong>Output:</strong><br /></pre>
<pre>neither<br />hetero<br />both<br />both<br />hetero<br />hetero<br />hetero<br />neither<br />homo<br />neither<br />neither<br /></pre>


______________________________________________________
CHEM||||||false||||||

<p>The story started some 5&rsquo;000 years ago in Ancient Egypt, was continued by the Greeks and Arabs, reached France, Europe, and finally conquered the world. The studies on the compositions of waters, the humans&rsquo; greed for purified materials, millions of experiments and many brilliant minds made chemistry what it is today: No more the quest of the Philosopher&rsquo;s stone, but the study of matter and the changes it undergoes.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/imuteb:chemistry" alt="" width="390" height="311" /></p>
<p>&nbsp;</p>
<p>There remain nevertheless still groups of stout-hearted followers of ancient believes, so-called alchemist. Keeping their research top-secret, they meet once a year for a conference where they share their recent findings. This year&rsquo;s location is Lausanne and Extremely Purified Fluorescent Liquids (EPFL) is the topic. The idea is that the chemists brew together some new EPFLs. As we speak about state of the art EPFLs, it is necessary that certain chemists put their very specific knowledge together. Thus for a certain EPFL <em>E<sub>1</sub></em>, the presence of chemists <em>C<sub>1</sub></em>, <em>C<sub>2</sub></em> and <em>C<sub>3</sub></em> may be required. For another <em>E<sub>2</sub></em>, chemists <em>C<sub>1</sub></em><sub> </sub>and <em>C<sub>4</sub> </em>might be necessary.</p>
<p>&nbsp;Although chemists are generally very patient people, as their reactions might take long times, they get very impatient if they are to observe experiments in which they are not involved. As an example, chemist <em>C<sub>4</sub></em><sub> </sub>would go crazy if he had to assist to the brewage of <em>E<sub>1</sub></em>. To ensure a pleasant stay in Lausanne to every chemist, you are to arrange their departure and arrival dates so that each chemist is available whenever his knowledge is required, but is not in Lausanne when other EPFLs are created.</p>
<p>To this purpose, you are given a schedule with ones and zeros. Each column stands for one EPFL, each row for one chemist. There is a 1 at position (<em>C<sub>i</sub>,E<sub>i</sub></em>) if chemist<em> C<sub>i</sub></em> is needed for EPFL <em>E<sub>i</sub></em>, and a zero otherwise. Your task boils now down on rearranging the columns in a way that all ones are consecutive in every line. For traditional reasons, the organizers&rsquo; EPFL is always brewed first and corresponds to the first column of the input schedule (<em>E<sub>1</sub></em>).</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases separated by an empty line. Each test-case starts with the number of chemists <em>C</em> (1&lt;=C&lt;=400), followed by the number of EPFLs <em>E</em> (1&lt;=E&lt;=400). Then follow <em>C</em> lines of <em>E </em>characters, &lsquo;1&rsquo; or &lsquo;0&rsquo;. You may assume that there exists exactly one order of EPFLs (initiated by <em>E<sub>1</sub></em>) that meets the above constraints. Input terminates on a test-case with <em>C=E=0</em>, which must not be processed.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>Print each output on a line by itself, which holds <em>E</em> numbers, corresponding to the initial position in the planning, arranged such that all chemists are available when necessary and away from Lausanne otherwise. (the first number must always be 1 as a tribute to the host).</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p>6 5</p>
<p>00010</p>
<p>01000</p>
<p>10101</p>
<p>10100</p>
<p>00011</p>
<p>00101</p>
<p>&nbsp;</p>
<p>0 0</p>
<p>&nbsp;</p>
<p><span style="font-family: courier new,courier;">&nbsp;</span></p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p>1 3 5 4 2</p>
<p>&nbsp;</p>


______________________________________________________
ENVIRON||||||false||||||

<p>One of the major challenges for environmental engineers in the future will be the overall scarcity of potable water. Not only vegetation and wildlife are fundamentally dependent upon adequate freshwater resources, but also humans. Several desalination processes were developed to make sea water drinkable.</p>
<p>Nonetheless, the water distribution is not uniform on planet, and so some regions are lacking water while others possess it on excess. The International Committee for Precious Consumables (ICPC) worked out an ambitious project fostering the uniform distribution of water on Earth (a perfect ball). The richest and poorest regions in terms of water resources were found to lie equidistantly distributed along a circle of maximum length around the Earth (i.e. the centre of the Earth is also the centre of this circle). So the idea came to construct gigantic pipelines that can transport water along this circle.</p>
<p>&nbsp;</p>
<p><img src="http://www.spoj.pl../../../content/imuteb:Environ1" alt="" width="207" height="187" /><img src="http://www.spoj.pl../../../content/imuteb:Environ1" alt="" width="281" height="187" /></p>
<p>&nbsp;</p>
<p>Each pipeline has two terminals, starting at a location with water abundance and ending in a region with water scarcity. As drilling the Earth on so long distances is not a reasonable option, all pipelines will be above Earth. Further are there dedicated ducts for the pipelines at different heights. That is, a pipeline grows vertically into the sky until one of the allowed heights is reached, makes a 90&deg; angle, and follows the duct at constant height until it is above the depletion region, where it forms another 90&deg; angle to descent vertically to ground.</p>
<p>As all pipelines&rsquo; projection to ground must follow the same circle, the ICPC faces a serious problem. They must make sure that no pipelines cross each other in this 2D plane! Further they are concerned about the total length of the pipes, which they&rsquo;d like to minimize. Your task is to calculate the minimal total length of all the pipes, knowing that the allowed duct heights are non-zero integer multiples of the distance between two adjacent locations (measured along the circle on surface level), which for our purpose has a value of 1.</p>
<p>&nbsp;</p>
<p><strong>INPUT</strong></p>
<p>The input consists of several test-cases separated by an empty line. Each test-case starts with the number of locations <em>N (0&lt;=N&lt;=500)</em>, followed by a line containing <em>N </em>numbers (&lsquo;0&rsquo; or &lsquo;1&rsquo;) and describing the locations along the circle. A &lsquo;0&rsquo; stands for a location with water depletion, a &lsquo;1&rsquo; for a region with water abundance. You may safely assume that there are as many &lsquo;0&rsquo; as &lsquo;1&rsquo;. Input terminates on a test-case <em>with N=0</em>, which must not be evaluated.</p>
<p>&nbsp;</p>
<p><strong>OUTPUT</strong></p>
<p>For each test-case, output the minimum total length (to a precision of 10<sup>-2</sup>) of the pipes so that each abundance region connects to exactly one depletion region.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT</strong></p>
<p>4</p>
<p>1 0 0 1</p>
<p>&nbsp;</p>
<p>8</p>
<p>1 1 1 1 0 0 0 0</p>
<p>&nbsp;</p>
<p>0</p>
<p>&nbsp;</p>
<p><strong>SAMPLE OUTPUT</strong></p>
<p>&nbsp;</p>
<p>9.14</p>
<p>31.00</p>
<p>&nbsp;</p>
<p><img src="http://www.spoj.pl../../../content/imuteb:Environ3" alt="" width="158" height="130" />&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <img src="http://www.spoj.pl../../../content/imuteb:Environ3" alt="" width="156" height="127" />&nbsp;&nbsp;&nbsp; <img src="http://www.spoj.pl../../../content/imuteb:Environ3" alt="" width="163" height="131" /></p>
<p>Sample input 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Sample input 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A larger test-case</p>


______________________________________________________
CENCRY||||||false||||||

<p>Marko is going to write a secret letter to a friend. He thought it is better to encrypt letter so that no other person can read it. After long thought he came up with an encryption scheme which was lame but he thought it will work anyways.<br /><br />To encrypt a text he first wrote two infinite strings of characters first string consists only of vowels and second string consists of consonants only.</p>
<p>aeiouaeiouaeiouaeiouaeiou....................<br />bcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyz...<br />&nbsp;<br />Following is the scheme for encryption :<br />1. let c be any character to be encrypted.<br />2. let k be the count of number of times c character occured in text to be encrypted till now.<br />3. first find which of two infinite string contains that character.<br />4. then look for kth occurence of that character in that string.<br />5. replace charcter c by corresponding character in second string.<br /><br />For example encrypted text of "baax" will be "abho".</p>

______________________________________________________
CIVIL||||||true||||||


<!-- p { margin-bottom: 2.12mm; } -->
<p>Civil engineers are people who build impressive structures from concrete and steel. Throughout the world, sky scrapers get ever higher, bridges get ever wider, and tunnels get ever longer. Most recently, the Gotthard Base Tunnel just pushed the limits a bit further...</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/jbw:gotthard_small.jpg" alt="Gotthard base tunnel" width="400" height="225" /></p>
<!-- p { margin-bottom: 2.12mm; } -->
<p>In this task, you take the role of a civil engineer who is to build a tunnel through a mountain. Unfortunately, you have a very limited budget, and must construct the cheapest possible tunnel.</p>
<p>Because engineers have a habit of simplifying things, we will model the mountain and the tunnel using basic geometric shapes. First of all, consider that the earth is flat, and two-dimensional. On this flat surface stands a mountain of height h and width w. Each side of the mountain is parabolic (i.e. satisfies y = ax&sup2; + bx + c for some a, b, c). You also know that the base of the mountain is smooth, which means that its steepness at the base is zero.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/jbw:tunnel_small.png" alt="Graphical view of a tunnel" width="400" height="279" /></p>
<p>The tunnel is modeled as a horizontal line through the mountain. The best possible tunnel is the one which minimizes construction cost. This cost is proportional to the length of the road which leads to the tunnel, plus the length of the tunnel itself. Consider that each meter of the tunnel is a factor f times as expensive as a meter of road.</p>

*******InputConstraints*******

<!-- p { margin-bottom: 2.12mm; } -->
<p>The input file consists of several test cases. Each case is given on a line by itself and consists of the three numbers h, w and f, separated by a space. All these are strictly positive floating point numbers. The input file ends with a test case where all numbers are zero (which must not be processed).</p>

*******OutputConstraints*******

<!-- p { margin-bottom: 2.12mm; } -->
<p>Print for each test case a single number, the optimal height t of the tunnel. Always print three digits after the decimal point. You may assume that it is always cheaper to build some tunnel than to drive over the top of the mountain.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1 2 1.5
9033.66 29752.4 1.56382
0 0 0<strong><br /><br />Output:</strong><br /><!-- p { margin-bottom: 2.12mm; } -->0.313<br />8852.956<br /></pre>


______________________________________________________
JZPCIR||||||false||||||

<p>Jumping Zippy likes to jump. He jumps every day and feels boring. Then he think of a new way to jump. He jumps on a big round plaza. The plaza is divided into n sectors numbered clockwise from 0 to n-1. Firstly, he stands on sector 0. Each time, when he is stand on sector x, he can jump to sector (x-2)%n, (x-1)%n, (x+1)%n or (x+2)%n. His goal is to jump to each sector exactly once and jump back to sector 0 at last. And for the first jump, he never jumps to sector n-1 or sector n-2. He wants to find the number of different ways in which he can complete his goal.</p>

______________________________________________________
COMDIV||||||true||||||


<p>You will be given T (T&lt;=10^6) pair of numbers. All you have to tell is the number of common divisors between two numbers in each pair.</p>

*******InputConstraints*******

<p>First line of input: T (Number of test cases)<br />In next T lines, each have one pair A B (0&lt;A,B&lt;=10^6)</p>

*******OutputConstraints*******

<p>One integer describing number of common divisors between two numbers.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>3<br />100000 100000<br />12 24<br />747794 238336</pre>
<br /><br /><strong>Output:</strong><br />
<pre>36<br />6<br />2</pre>
<br /></pre>


______________________________________________________
HPYNOS||||||true||||||


<p>The process of &ldquo;<strong>breaking</strong>&rdquo; an integer is defined as summing the squares of its digits. For example, the<br />result of breaking the integer <strong>125 </strong>is (<strong>1<sup>2</sup></strong> + <strong>2<sup>2</sup> </strong>+ <strong>5<sup>2</sup></strong>) = <strong>30</strong>. An integer <strong>N</strong> is <strong>happy </strong>if after &ldquo;<strong>breaking</strong>&rdquo; it<br />repeatedly the result reaches 1. If the result never reaches 1 no matter how many times the<br />&ldquo;<strong>breaking</strong>&rdquo; is repeated, then N is not a happy number.</p>
<h3><span style="font-size: small;"><strong>TASK</strong></span></h3>
<p>Write a program that given an integer N, determines whether it is a happy number or not.</p>
<h3><span style="font-size: small;"><strong>CONSTRAINTS</strong></span></h3>
<p><strong>2 &le; N &le; 2,147,483,647</strong></p>

*******InputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; A single line containing a single integer <strong>N</strong>.</p>

*******OutputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; A single line containing a single integer <strong>T</strong> which is the number of times the process had to be<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done to determine that N is happy, or <strong>-1</strong> if <strong>N</strong> is not happy.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />19<br /><br /><strong>Output:</strong><br />4<br /><br /><br />1) 19   : 1<sup>2</sup> + 9<sup>2</sup> = 82<br />2) 82   : 82 + 2<sup>2</sup> = 68<br />3) 68   : 6<sup>2</sup> + 8<sup>2</sup> = 100<br />4) 100 : 1<sup>2 </sup>+ 0<sup>2</sup> + 0<sup>2</sup> = 1<br /><br />The solution is 4 because we discovered that the integer 19 is happy after we repeated the process 4<br />times.<br /><br /><br />
______________________________________________________
TWIST||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/TWIST/en/">English</a></td>
<td width="50%"><a href="/problems/TWIST/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p> </p>
<div style="text-align: justify;">A well-known sharper I*** invented a new way to  swindle people. There are N thimbles on the table, and there is a small  ball with the number under each of them. The balls are numbered with  numbers from 1 to N from left to right. At one operation I*** changes  the order of some subsequence of successive thimbles to the opposite.  Your task is to find the order of numbers (from left to right) in  sequence after all of his manipulations. The total number of  manipulations is M.</div>
<div style="text-align: justify;"><br /><strong>Input</strong></div>
<div style="text-align: justify;">The  first line contains two integer numbers N and M (1&lt;=N&lt;=100000,  1&lt;=M&lt;=100000) separated by a space. Each of the following M lines  contains two integer numbers Pi, Qi (1&lt;=Pi&lt;=Qi&lt;=N) - positions  of the leftmost and rightmost thimbles in rotated sequence.</div>
<div style="text-align: justify;"><br /><strong>Output</strong></div>
<div style="text-align: justify;">Output the sequence of N numbers - the numbers of balls in the thimbles from left to right.</div>
<div style="text-align: justify;"><br /><strong>Sample test(s)</strong></div>
<div style="text-align: justify;"><br />Input</div>
<div style="text-align: justify;"><span style="font-family: Courier New;">Test #1 <br />5 2 <br />1 3 <br />4 5 <br /> <br />Test #2 <br />5 2 <br />1 4 <br />2 5 <br /> </span></div>
<div style="text-align: justify;"><br />Output</div>
<div style="text-align: justify;"><span style="font-family: Courier New;">Test #1 <br />3 2 1 5 4 <br /> <br />Test #2 <br />4 5 1 2 3 </span></div>
<p style="text-align: justify;"><strong>Note: A naive solution would result in TLE. Have fun! :D</strong></p>
<p></p>


______________________________________________________
BOI7ESC||||||true||||||


<p>A group of war prisoners are trying to escape from a prison. They have thoroughly planned the escape from the prison itself, and after that they hope to find shelter in a nearby village. However, the village (marked as B, see picture below) and the prison (marked as A) are separated by a canyon which is also guarded by soldiers. These soldiers sit in their pickets and rarely walk; the range of view of each soldier is limited to exactly 100 meters. Thus, depending on the locations of soldiers, it may be possible to pass the canyon safely, keeping the distance to the closest soldier strictly larger than 100 meters at any moment.</p>
<p><img title="Escape" src="http://vn.spoj.pl/SPOJVN/content/boi7esc.jpg" alt="" width="571" height="477" /></p>
<p>You are to write a program which, given the width and the length of the canyon and the coordinates of every soldier in the canyon, and assuming that soldiers do not change their locations, first determines whether prisoners can pass the canyon unnoticed. If this is impossible then the prisoners (having seen enough violence) would like to know the minimum number of soldiers that have to be eliminated in order to pass the canyon safely. A soldier may be eliminated regardless of whether he is visible to any other soldier or not.</p>
<p style="text-align: justify;"><img src="http://www.spoj.plfile:///tmp/moz-screenshot.png" alt="" /></p>

*******InputConstraints*******

<p>The first line contains three integers L, W , and N &ndash; the length and the width of the canyon, and the number of soldiers, respectively. Each of the following N lines contains a pair of integers Xi and Yi &ndash; the coordinates of i-th soldier in the canyon (0 &le; Xi &le; L, 0 &le; Yi &le; W ). The coordinates are given in meters, relative to the canyon: the southwestern corner of the canyon has coordinates (0, 0), and the northeastern corner of the canyon has coordinates (L, W ), as seen in the picture above.<br />Note that passing the canyon may start at coordinate (0, ys ) for any 0 &le; ys &le; W and end at coordinate (L, ye ) for any 0 &le; ye &le; W . Neither ys nor ye need to be integer.</p>

*******OutputConstraints*******

<p>In the first and only line of the output file the program should print the minimum number of soldiers that have to be eliminated in order for the prisoners to pass the canyon safely. If the prisoners can escape without any elimination, the program should print 0 (zero).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />130 340 5<br />10 50<br />130 130<br />70 170<br />0 180<br />60 260<br /><br /><strong>Output:</strong><br />1<br /><br /><br /><br /></pre>


______________________________________________________
BOI7SOU||||||true||||||


<p>In digital recording, sound is described by a sequence of numbers representing the air pressure, measured at a rapid rate with a fixed time interval between successive measurements. Each value in the sequence is called a sample. An important step in many voice-processing tasks is breaking the recorded sound into chunks of non-silence separated by silence. To avoid accidentally breaking the recording into too few or too many pieces, the silence is often defined as a sequence of m samples where the difference between the lowest and the highest value does not exceed a certain treshold c. Write a program to detect silence in a given recording of n samples according to the given parameter values m and c.</p>

*******InputConstraints*******

<p>The first line of the file contains three integers: n (1 &le; n &le; 1,000,000), the number of samples in the recording; m (1 &le; m &le; 10,000), the required length of the silence; and c (0 &le; c &le; 10,000), the maximal noise level allowed within silence. The second line of the file contains n integers ai (0 &le; ai &le; 1,000,000 for 1 &le; i &le; n), separated by single spaces: the samples in the recording.</p>

*******OutputConstraints*******

<p>The file should list all values of i such that max(a[i . . . i + m &minus; 1]) &minus; min(a[i . . . i + m &minus; 1]) &le; c. The values should be listed in increasing order, each on a separate line. If there is no silence in the input file, write NONE on the first and only line of the output file.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />7 2 0<br />0 1 1 2 3 2 2<br /><strong>Output:</strong>
2<br />6</pre>


______________________________________________________
BOI7FEN||||||true||||||


<p>Leopold is indeed a lucky fellow. He just won a huge estate in the lottery. The estate contains several grand buildings in addition to the main mansion, in which he intends to live from now on. However, the estate lacks a fence protecting the premises from trespassers, which concerns Leopold to a great extent. He decides to build a fence, but unfortunately he cannot afford to put it round all of his newly acquired land. After some thinking, he decides it is sufficient to have a fence that encloses the main mansion, except for one important restriction: the fence must not lie too close to any of the buildings.<br />To be precise, seen from above, each building is enclosed in a surrounding forbidden rectangle within which no part of the fence may lie. The rectangles&rsquo; sides are parallel to the x- and y-axis. Each part of the fence must also be parallel either to the x-axis or the y-axis.</p>
<p><img title="Fence" src="http://vn.spoj.pl/SPOJVN/content/boi7fen.jpg" alt="Figure 5.1: The main mansion (black) and three other buildings with sur- rounding forbidden rectangles. The thick black line shows a shortest allowed fence enclosing the main mansion." width="633" height="348" /></p>
<p>Figure 5.1: The main mansion (black) and three other buildings with surrounding forbidden rectangles. The thick black line shows a shortest allowed fence enclosing the main mansion.</p>

*******InputConstraints*******

<p>The first line of the input file contains a positive integer m (1 &le; m &le; 100), the number of buildings of the estate. Then follow m lines each describing a forbidden rectangle enclosing a building. Each row contains four space-separated integers tx, ty, bx, and by, where (tx, ty) are the coordinates of the upper left corner and (bx, by) the coordinates of the bottom right corner of the rectangle. All coordinates obey 0 &le; tx &lt; bx &le; 10,000 and 0 &le; ty &lt; by &le; 10,000. The first rectangle is the forbidden rectangle enclosing the main mansion.</p>

*******OutputConstraints*******

<p>Contains one line with a single positive integer equal to the minimum length of any allowed fence enclosing the main mansion.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />8 4 13 8<br />2 1 6 7<br />4 7 9 11<br />14 7 19 11<br /><strong>Output:</strong><br />32</pre>


______________________________________________________
BOI7SEQ||||||true||||||


<p>We are given a sequence a1 , ..., an . We can manipulate this sequence using the operation reduce(i), which replaces elements ai and ai+1 with a single element max(ai , ai+1 ), resulting in a new shorter sequence. The cost of this operation is max(ai , ai+1 ). After n&minus;1 operations reduce, we obtain a sequence of length 1. Our task is to compute the cost of the optimal reducing scheme, i.e. the sequence of reduce operations with minimal cost leading to a sequence of length 1.</p>

*******InputConstraints*******

<p>The first line contains n (1 &le; n &le; 1,000,000), the length of the sequence. The following n lines contain one integer ai , the elements of the sequence (0 &le; ai &le; 1,000,000,000).</p>

*******OutputConstraints*******

<p>In the first and only line of the output print the minimal cost of reducing the sequence to a single element.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1<br />2<br />3<br /><strong>Output:</strong>
5</pre>


______________________________________________________
OLOLO||||||true||||||


<table style="width: 100%;" border="0">
<tbody>
<tr>
<td><img src="http://www.spoj.pl../../../content/pyshnograev:onotole" alt="" align="left" /></td>
<td valign="top">
<p>Onotole has a lot of pyani. Each pyani has a number, writing on it. Pyanis with equal numbers are&nbsp;<span id="result_box" lang="en"><span title="&#1053;&#1072;&#1078;&#1084;&#1080;&#1090;&#1077;, &#1095;&#1090;&#1086;&#1073;&#1099; &#1091;&#1074;&#1080;&#1076;&#1077;&#1090;&#1100; &#1072;&#1083;&#1100;&#1090;&#1077;&#1088;&#1085;&#1072;&#1090;&#1080;&#1074;&#1085;&#1099;&#1081; &#1087;&#1077;&#1088;&#1077;&#1074;&#1086;&#1076;">indistinguishable.</span></span>&nbsp;Onotole knows everything, so, he knows that each pyani appeared twice, and only one pyani is unique. He wants to get &#1074;&#1079;&#1076;&#1088;&#1098;&#1078;&#1085;&#1080; &#1101;&#1092;&#1092;&#1077;&#1082;&#1090;, and he needs the unique pyani. Given the list of&nbsp;pyanis&nbsp;denote which one of them appeared once (it is guaranteed that other&nbsp;pyanis&nbsp;appeared twice).</p>
</td>
</tr>
</tbody>
</table>

*******InputConstraints*******

<p>First line of input contains number of pyanis N&lt;=500 000. Next&nbsp;N lines contain a single positive integer 1 &lt;=&nbsp;Pi &lt;= 10^9.</p>

*******OutputConstraints*******

<p>Output one positive integer on pyani,&nbsp;which appeared once.</p>

*******IOTestCases*******

<pre><strong>Input:<br /></strong>3<strong><br /></strong>1<br />8<br />1<br /><strong>Output:</strong>
8<br /></pre>
<p><strong>Onotole has found not optimal AC algorithms, so all solutions will be rejudged. He is watching you.</strong></p>


______________________________________________________
MBINGO||||||false||||||

<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">   </p>
<table style="cursor: default; width: 748px; background-color: #44c23c; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Albert, Charles and Mary invented a new version of the classical game Bingo. In traditional</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Bingo the game is presided over by a non-player known as the caller. At the beginning of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">game each player is given a card containing a unique combination of numbers from 0 to N</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">arranged in columns and rows. The caller has a bag containing N + 1 balls, numbered from 0</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">to N. On each turn, the caller randomly selects a ball from the bag, announces the number of</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">the drawn ball to the players, and sets the ball aside so that it cannot be selected again. Each</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">player searches his card for the called number and marks it if he &#64257;nds it. The &#64257;rst player who</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">marks a complete pre-announced pattern on the card (for example, a full horizontal line) wins</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">a prize.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">In the Albert-Charles-Mary version, on each turn, the caller draws a &#64257;rst ball, returns it to</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">the bag, draws a second ball, returns it to the bag, and then calls out the absolute di&#64256;erence</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">between the two ball numbers. To generate even more excitement, before the game started a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">possibly empty subset of balls is removed from the bag, in such a way that at least two balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">remain there. They would like to know if every number from 0 to N may still be called out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">with the new drawing method considering the balls that were left in the bag.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Input</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Each test case is given using exactly two lines. The &#64257;rst line contains two integers N and B.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">The meaning of N was described above (1 &le; N &le; 90), while B represents the number of balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">which remained in the bag (2 &le; B &le; N + 1). The second line contains B distinct integers bi,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">indicating the balls which remained in the bag (0 &le; bi &le; N).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">The last test case is followed by a line containing two zeros.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Output</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">For each test case output a single line containing a single uppercase &lsquo;Y&rsquo; if is possible to call out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">every number from 0 to N, inclusive, or a single uppercase &lsquo;N&rsquo; otherwise.</div>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">Albert, Charles and Mary invented a new version of the classical game Bingo. In traditional&nbsp;Bingo the game is presided over by a non-player known as the caller. At the beginning of the&nbsp;game each player is given a card containing a unique combination of numbers from 0 to N&nbsp;arranged in columns and rows. The caller has a bag containing N + 1 balls, numbered from 0&nbsp;to N. On each turn, the caller randomly selects a ball from the bag, announces the number of&nbsp;the drawn ball to the players, and sets the ball aside so that it cannot be selected again. Each&nbsp;player searches his card for the called number and marks it if he &#64257;nds it. The &#64257;rst player who&nbsp;marks a complete pre-announced pattern on the card (for example, a full horizontal line) wins&nbsp;a prize.</span></span></p>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">In the Albert-Charles-Mary version, on each turn, the caller draws a &#64257;rst ball, returns it to&nbsp;the bag, draws a second ball, returns it to the bag, and then calls out the absolute di&#64256;erence&nbsp;between the two ball numbers. To generate even more excitement, before the game started a&nbsp;possibly empty subset of balls is removed from the bag, in such a way that at least two balls&nbsp;remain there. They would like to know if every number from 0 to N may still be called out&nbsp;with the new drawing method considering the balls that were left in the bag.</span></span></p>
<h1>Input</h1>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">Each test case is given using exactly two lines. The &#64257;rst line contains two integers N and B.&nbsp;The meaning of N was described above (1 &le; N &le; 90), while B represents the number of balls&nbsp;which remained in the bag (2 &le; B &le; N + 1). The second line contains B distinct integers bi,&nbsp;indicating the balls which remained in the bag (0 &le; bi &le; N).&nbsp;The last test case is followed by a line containing two zeros.</span></span></p>
<h1>Output</h1>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">For each test case output a single line containing a single uppercase &lsquo;Y&rsquo; if is possible to call out&nbsp;every number from 0 to N, inclusive, or a single uppercase &lsquo;N&rsquo; otherwise.</span></span></p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<h1 style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">Sample input</h1>
<pre>6 7</pre>
<pre>2 1 3 4 0 6 5</pre>
<pre>5 4</pre>
<pre>5 3 0 1</pre>
<pre>5 3</pre>
<pre>1 5 0</pre>
<pre>0 0</pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Output for the sample input</h3>
<p>&nbsp;</p>
<p>Y</p>
<p>Y</p>
<p>N</p>
<p>&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
MCOCIR||||||false||||||

<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; "><span style="font-size: 8.33333px;">   </span></p>
<table style="cursor: default; width: 748px; background-color: #44c23c; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Albert, Charles and Mary invented a new version of the classical game Bingo. In traditional</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Bingo the game is presided over by a non-player known as the caller. At the beginning of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">game each player is given a card containing a unique combination of numbers from 0 to N</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">arranged in columns and rows. The caller has a bag containing N + 1 balls, numbered from 0</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">to N. On each turn, the caller randomly selects a ball from the bag, announces the number of</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">the drawn ball to the players, and sets the ball aside so that it cannot be selected again. Each</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">player searches his card for the called number and marks it if he &#64257;nds it. The &#64257;rst player who</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">marks a complete pre-announced pattern on the card (for example, a full horizontal line) wins</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">a prize.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">In the Albert-Charles-Mary version, on each turn, the caller draws a &#64257;rst ball, returns it to</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">the bag, draws a second ball, returns it to the bag, and then calls out the absolute di&#64256;erence</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">between the two ball numbers. To generate even more excitement, before the game started a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">possibly empty subset of balls is removed from the bag, in such a way that at least two balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">remain there. They would like to know if every number from 0 to N may still be called out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">with the new drawing method considering the balls that were left in the bag.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Input</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Each test case is given using exactly two lines. The &#64257;rst line contains two integers N and B.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">The meaning of N was described above (1 &le; N &le; 90), while B represents the number of balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">which remained in the bag (2 &le; B &le; N + 1). The second line contains B distinct integers bi,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">indicating the balls which remained in the bag (0 &le; bi &le; N).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">The last test case is followed by a line containing two zeros.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Output</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">For each test case output a single line containing a single uppercase &lsquo;Y&rsquo; if is possible to call out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">every number from 0 to N, inclusive, or a single uppercase &lsquo;N&rsquo; otherwise.</div>
<p>&nbsp;</p>
<p><span style="font-size: x-small;"><span style="font-size: small;">You probably know what a set of collinear points is: a set of points such that there exists a&nbsp;</span></span><span style="font-size: small;">straight line that passes through all of them. A set of cocircular points is de&#64257;ned in the same&nbsp;</span><span style="font-size: small;">fashion, but instead of a straight line, we ask that there is a circle such that every point of the&nbsp;</span><span style="font-size: small;">set lies over its perimeter.</span></p>
<p><span style="font-size: x-small;"><span style="font-size: small;">The International Collinear Points Centre (ICPC) has assigned you the following task: given a&nbsp;</span></span><span style="font-size: small;">set of points, calculate the size of the larger subset of cocircular points.</span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; font-family: Verdana, Arial, Helvetica, sans-serif; color: #000000; ">Input</h1>
<p>&nbsp;</p>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">Each test case is given using several lines. The &#64257;rst line contains an integer N representing the&nbsp;</span></span><span style="font-size: small;"><span style="font-family: 'andale mono', times;">number of points in the set (1 &le; N &le; 100). Each of the next N lines contains two integers X&nbsp;</span></span><span style="font-size: small;"><span style="font-family: 'andale mono', times;">and Y representing the coordinates of a point of the set (&minus;10^4&nbsp;</span></span><span style="font-size: small;"><span style="font-family: 'andale mono', times;">&le; X, Y &le; 10^4&nbsp;</span></span><span style="font-size: small;"><span style="font-family: 'andale mono', times;">). Within each&nbsp;</span></span><span style="font-size: small;"><span style="font-family: 'andale mono', times;">test case, no two points have the same location.&nbsp;</span></span></p>
<p><span style="font-size: small;"><span style="font-family: 'andale mono', times;">The last test case is followed by a line containing one zero.</span></span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; font-family: Verdana, Arial, Helvetica, sans-serif; color: #000000; ">Output</h1>
<p>&nbsp;</p>
<p><span style="font-size: x-small;"><span style="font-size: small;"><span style="font-family: 'andale mono', times;">For each test case output a single line with a single integer representing the number of points&nbsp;</span></span></span><span style="font-size: x-small;"><span style="font-size: small;"><span style="font-family: 'andale mono', times;">in one of the largest subsets of the input that are cocircular.</span></span></span></p>
<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<h1 style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Sample input</h1>
<pre style="margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">7<br />-10 0<br />0 -10<br />10 0<br />0 10<br />-20 10<br />-10 20<br />-2 4<br />4<br />-10000 10000<br />10000 10000<br />10000 -10000<br />-10000 -9999<br />3<br />-1 0<br />0 0<br />1 0<br />0</pre>
</div>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; ">&nbsp;</p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; ">&nbsp;</p>
<h3 style="font-size: 1.17em; font-family: Verdana, Arial, Helvetica, sans-serif; color: #000000; ">Output for the sample input</h3>
<p><span style="font-size: x-small; "><span>&nbsp;</span></span>5</p>
<p>3</p>
<p>2</p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; ">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; ">&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
HPYNOSII||||||true||||||


<p>The process of &ldquo;<strong>breaking</strong>&rdquo; an integer is defined as summing the squares of its digits. For example, the<br />result of breaking the integer <strong>125 </strong>is (<strong>12</strong> + <strong>22 </strong>+ <strong>52</strong>) = <strong>30</strong>. An integer <strong>N</strong> is <strong>happy </strong>if after &ldquo;<strong>breaking</strong>&rdquo; it<br />repeatedly the result reaches 1. If the result never reaches 1 no matter how many times the<br />&ldquo;<strong>breaking</strong>&rdquo; is repeated, then N is not a happy number.</p>
<h3><span style="font-size: small;"><strong>TASK</strong></span></h3>
<p>Write a program that given an integer <strong>T</strong> (number of test cases) and <strong>T </strong>integers, determines for each number whether it is a happy number or not.</p>
<h3><span style="font-size: small;"><strong>CONSTRAINTS</strong></span></h3>
<p><strong>1 &le; T &le; 1,080,000</strong></p>
<p><strong>2 &le; N &le; </strong><strong>2,147,483,647&nbsp; (number for determining whether it is happy or not)<br /></strong></p>

*******InputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; The first line contains an integer <strong>T</strong>.</p>
<p>&nbsp; &nbsp; &bull; next 1...T lines contain an integer <strong>N</strong> for detemining whether it is happy or not.</p>

*******OutputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; T lines containing a single integer <strong>N</strong> which is the number of times the process had to be<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done to determine that N is happy, or <strong>-1</strong> if <strong>N</strong> is not happy.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />19<br />204<br /><br /><strong>Output:</strong><br />4<br />-1<br /><br /><br />1) 19   : 1<sup>2</sup> + 9<sup>2</sup> = 82<br />2) 82   : 82 + 2<sup>2</sup> = 68<br />3) 68   : 6<sup>2</sup> + 8<sup>2</sup> = 100<br />4) 100 : 1<sup>2 </sup>+ 0<sup>2</sup> + 0<sup>2</sup> = 1<br /><br />The solution for 19 is 4 because we discovered that the integer 19 is happy after we repeated the process 4<br />times.<br /><br /><br /></pre>
<h4>204 &ndash;&gt; <span style="font-size: small;"><strong>20</strong></span> &ndash;&gt; 4 &ndash;&gt; 16 &ndash;&gt; 37 &ndash;&gt; 58 &ndash;&gt; 89 &ndash;&gt; 145 &ndash;&gt; 42 &ndash;&gt; <strong><span style="font-size: small;">20</span></strong> &ndash;&gt; 4 &ndash;&gt; 16 &ndash;&gt; 37 &ndash;&gt; 58 &ndash;&gt; 89 &ndash;&gt; 145 &hellip;&hellip;..</h4>
<pre><pre><br /><br /><strong>204 </strong>is not a happy number because after breaking it several times the results start repeating so we<br />can deduce that if we continue breaking it, the result will never reach 1.<br /></pre>
<br /></pre>


______________________________________________________
MFLAR10||||||false||||||

<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; white-space: normal;">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">   </p>
<p>&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">Albert, Charles and Mary invented a new version of the classical game Bingo. In traditional</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">Bingo the game is presided over by a non-player known as the caller. At the beginning of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">game each player is given a card containing a unique combination of numbers from 0 to N</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">arranged in columns and rows. The caller has a bag containing N + 1 balls, numbered from 0</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">to N. On each turn, the caller randomly selects a ball from the bag, announces the number of</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">the drawn ball to the players, and sets the ball aside so that it cannot be selected again. Each</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">player searches his card for the called number and marks it if he &#64257;nds it. The &#64257;rst player who</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">marks a complete pre-announced pattern on the card (for example, a full horizontal line) wins</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">a prize.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">In the Albert-Charles-Mary version, on each turn, the caller draws a &#64257;rst ball, returns it to</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">the bag, draws a second ball, returns it to the bag, and then calls out the absolute di&#64256;erence</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">between the two ball numbers. To generate even more excitement, before the game started a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">possibly empty subset of balls is removed from the bag, in such a way that at least two balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">remain there. They would like to know if every number from 0 to N may still be called out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">with the new drawing method considering the balls that were left in the bag.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">Input</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">Each test case is given using exactly two lines. The &#64257;rst line contains two integers N and B.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">The meaning of N was described above (1 &le; N &le; 90), while B represents the number of balls</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">which remained in the bag (2 &le; B &le; N + 1). The second line contains B distinct integers bi,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">indicating the balls which remained in the bag (0 &le; bi &le; N).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">The last test case is followed by a line containing two zeros.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">Output</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">For each test case output a single line containing a single uppercase &lsquo;Y&rsquo; if is possible to call out</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; white-space: normal; border: 1px dashed #bbbbbb;">every number from 0 to N, inclusive, or a single uppercase &lsquo;N&rsquo; otherwise.</div>
<p>&nbsp;</p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;">Fiona has always loved poetry, and recently she discovered a fascinating poetical form. Tau</span></span><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">tograms are a special case&nbsp;</span></span></span><span style="font-size: 10px;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">of</span></span></span><span style="font-size: 10px;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">&nbsp;alliteration, which is the occurrence of the same letter at the&nbsp;</span></span></span><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">beginning of adjacent words. In particular, a sentence is a&nbsp;</span></span></span></span></span><span style="font-size: 10px;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">tautogram if all of its words start&nbsp;</span></span></span><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">with the same letter.&nbsp;</span></span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">For instance, the following sentences are tautograms:</span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">&bull; Flowers Flourish from France</span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">&bull; Sam Simmonds speaks softly</span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">&bull; Peter pIckEd pePPers</span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">&bull; truly tautograms triumph</span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">Fiona wants to dazzle her boyfriend with a romantic letter full of this kind of sentences. Please&nbsp;</span></span></span><span style="white-space: normal;"><span style="font-size: small;"><span style="font-size: small;">help Fiona to check if each&nbsp;</span></span></span><span style="font-size: small;">sentence she wrote down is a tautogram or not.</span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; font-family: Verdana, Arial, Helvetica, sans-serif; color: #000000; white-space: normal;">Input</h1>
<p>&nbsp;</p>
<p style="text-align: justify;"><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;">Each test case is given in a single line that contains a sentence. A sentence consists of&nbsp;</span></span><span style="font-size: 10px;"><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">a sequence &nbsp;</span></span></span><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">of at most 50 words separated by single spaces. A word is a sequence of&nbsp;</span></span></span></span><span style="font-size: 10px;"><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">at most 20 contiguous &nbsp;</span></span></span><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">uppercase and lowercase letters from the English alphabet. A&nbsp;</span></span></span></span><span style="font-size: 10px;"><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">word contains at least one letter&nbsp;</span></span></span><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><span style="font-size: small;">and a sentence contains at least one word. &nbsp;</span></span></span></span></p>
<p style="text-align: justify;"><span style="white-space: normal; font-size: small;"><span style="font-size: small;">The last test case is followed by a line containing only a single character &lsquo;*&rsquo; (asterisk).</span></span></p>
<p style="text-align: justify;"><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;"><br /></span></span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; font-family: Verdana, Arial, Helvetica, sans-serif; color: #000000; white-space: normal;">Output</h1>
<p>&nbsp;</p>
<p><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;">For each test case output a single line containing an uppercase &lsquo;Y&rsquo; if the sentence is a tautogram,&nbsp;</span></span><span style="white-space: normal; font-size: x-small;"><span style="font-size: small;">or an uppercase &lsquo;N&rsquo; otherwise.</span></span></p>
<p>&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<h1 style="color: #000000;"><span style="font-size: small;">Sample input</span></h1>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: x-small;"><span style="font-size: 13.3333px; color: #000020; -webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px;">Flowers Flourish from France&nbsp;<br />Sam Simmonds speaks softly</span></span></p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: x-small;"><span style="font-size: 13.3333px; color: #000020; -webkit-border-horizontal-spacing: 2px; -webkit-border-vertical-spacing: 2px;">&nbsp;</span></span><span style="font-size: small;">Peter pIckEd pePPers</span></p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: small;">truly tautograms triumph</span></p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: small;"> this is NOT a tautogram</span></p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: small;"> *</span></p>
</div>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; white-space: normal;">&nbsp;</p>
<h3 style="color: #000000; white-space: normal;"><span style="font-size: small;">Output for the sample input</span></h3>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; white-space: normal;"><span style="font-size: small;">Y</span></p>
<p><span style="white-space: normal;"><span style="font-size: small;">Y</span></span></p>
<p><span style="white-space: normal;"><span style="font-size: small;">Y</span></span></p>
<p><span style="white-space: normal;"><span style="font-size: small;">Y</span></span></p>
<p><span style="white-space: normal;"><span style="font-size: small;">N</span></span></p>
<p>&nbsp;</p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; white-space: normal;">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000000; white-space: normal;">&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
MGLAR10||||||false||||||

<p>&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p>   </p>
</div>
<p>&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;"></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">right of themselves, but they never lose characters, nor insert new characters in the middle.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">The problem is that the collection is not annotated, so they forgot to which string each photo</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">need your help to &#64257;nd an appropriate sequence of photos.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">so all strings in the sequence must be di&#64256;erent.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">Given a set of strings representing all available photos, your job is to calculate the size of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px;">largest sequence they can produce following the guidelines above.</div>
<div style="color: #000000; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin: 8px;"><span style="font-size: small;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as&nbsp;it is usually the case in regular farms, they grow strings. A string is a sequence of characters.&nbsp;Strings have the particularity that, as they grow, they add characters to the left and/or to the&nbsp;right of themselves, but they never lose characters, nor insert new characters in the middle.&nbsp;</span></div>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin: 8px;"><span style="font-size: small;">&nbsp;</span><span style="font-size: small;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.&nbsp;</span><span style="font-size: small;">The problem is that the collection is not annotated, so they forgot to which string each photo&nbsp;</span><span style="font-size: small;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they&nbsp;</span><span style="font-size: small;">need your help to &#64257;nd an appropriate sequence of photos.</span></div>
<div style="color: #000000; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin: 8px;"><span style="font-size: small;">Each photo illustrates a string. The sequence of photos must be such that if si comes immediately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si&nbsp;appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,&nbsp;so all strings in the sequence must be di&#64256;erent.</span></div>
<div style="color: #000000; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin: 8px;"><span style="font-size: small;">Given a set of strings representing all available photos, your job is to calculate the size of the&nbsp;largest sequence they can produce following the guidelines above.</span></div>
<p>&nbsp;</p>
<h1 style="font-size: 2em; text-align: center;">Input</h1>
<p>&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">Each test case is given using several lines. The &#64257;rst line contains an integer N representing the&nbsp;number of strings in the set (1 &le; N &le; 10^4). Each of the following N lines contains a di&#64256;erent&nbsp;non-empty string of at most 1000 lowercase letters of the English alphabet. Within each test&nbsp;case, the sum of the lengths of all strings is at most 10^6.</span></p>
<p style="text-align: justify;"><span style="font-size: small;">The last test case is followed by a line containing one zero.</span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; text-align: center;">Output</h1>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">&nbsp;</p>
<p><span style="font-size: small;">For each test case output a single line with a single integer representing the size of the largest&nbsp;sequence of photos that can be produced.</span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; text-align: center;">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin: 8px;"><span style="font-size: x-small;"><strong>input</strong><br /></span><span style="font-size: small;">6</span><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">
<span style="font-size: small;">plant
ant
cant
decant
deca
an
2
supercalifragilisticexpialidocious
rag
0</span><br /><br /><strong><span style="font-size: small;">output</span></strong><br /><span style="font-size: small;">4
2</span></span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;"> </p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
MHLAR10||||||false||||||

<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<p>   </p>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; font-size: 10px; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">right of themselves, but they never lose characters, nor insert new characters in the middle.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">The problem is that the collection is not annotated, so they forgot to which string each photo</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">need your help to &#64257;nd an appropriate sequence of photos.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">so all strings in the sequence must be di&#64256;erent.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Given a set of strings representing all available photos, your job is to calculate the size of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">largest sequence they can produce following the guidelines above.</div>
<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">Helen is a hyperactive girl. She wants to schedule her activities so that at any moment of the&nbsp;</span></span><span style="font-size: small;">day there is at least one thing she can do. She does not care if her activities overlap in time,&nbsp;</span><span style="font-size: small;">as long as every moment of her day has an activity scheduled.</span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">Helen divided the day in a particular way. The day starts at time 0 and &#64257;nishes at time M.&nbsp;</span></span><span style="font-size: small;">Each moment of the day is represented by a real number between 0 and M, inclusive. Helen&nbsp;</span><span style="font-size: small;">made a list of all possible activities, with their start and &#64257;nish times. Now she must decide&nbsp;</span><span style="font-size: small;">which subset of activities to schedule.</span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">If an activity starts at time S and &#64257;nishes at time F, then we say that it covers all moments&nbsp;</span></span><span style="font-size: small;">between S and F, inclusive. Helen does not want to waste any activities, so she will only&nbsp;</span><span style="font-size: small;">choose minimal subsets of activities that cover the day to be scheduled. A subset of activities&nbsp;</span><span style="font-size: small;">is a minimal subset that covers the day if and only if:</span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">1. every moment of the day is covered by at least one activity of the subset; and</span></span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">2. removing any of the activities from the subset would leave at least one moment of the&nbsp;</span></span><span style="font-size: small;">day uncovered.</span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">Note that some moments of the day may be covered by more than one activity.</span></span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; text-align: justify; "><span><span style="font-size: small;">Given the list of possible activities for one day, you must help Helen by determining how many&nbsp;</span></span><span style="font-size: small;">distinct minimal subsets cover the day.</span></div>
<p>&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Input</h1>
<p style="color: #000000; "><span style="font-size: small;"><br /></span></p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; "><span><span style="font-size: small;">Each test case is given using several lines. The &#64257;rst line contains two integers M and N,&nbsp;</span></span><span style="font-size: 10px;"><span style="font-size: 10px;"><span style="font-size: small;">representing respectively the highest value for a moment in the day (1 &le; M &le; 10^9</span></span><span style="font-size: small;">) and the&nbsp;</span><span style="font-size: small;">number of possible activities for the day (1 &le; N &le; 100). Each of the next N lines describes&nbsp;</span></span><span style="font-size: small;">one possible activity and contains two integers S and F, representing respectively the start and&nbsp;</span><span style="font-size: small;">&#64257;nish times of the activity (0 &le; S &lt; F &le; M).</span></p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; "><span><span style="font-size: small;">The last test case is followed by a line containing two zeros.</span></span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Output</h1>
<p>&nbsp;</p>
<p style="text-align: justify; "><span style="font-size: small;">For each test case output a single line with a single integer representing the number of minimal&nbsp;</span><span style="font-size: small;">subsets that cover the day. To make your life easier, print the remainder of dividing the solution&nbsp;</span><span style="font-size: small;">by 10^8</span><span style="font-size: 10px;">.</span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span style="font-size: x-small;"><strong><span style="font-size: small;">input</span></strong><br /></span><span style="font-size: small;">8 7
0 3
2 5
5 8
1 3
3 6
4 6
0 2
1 1
0 1
2 1
0 1
0 0</span><span style="font-size: x-small;"><span><br /><br /></span></span><strong><span style="font-size: small;">output</span></strong><span style="font-size: x-small;"><span><br /></span></span><span style="font-size: small;">4
1
0</span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
</div>
<p>&nbsp;</p>


______________________________________________________
MKLAR10||||||false||||||

<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<p>&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<p>   </p>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p>&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; font-size: 10px; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">right of themselves, but they never lose characters, nor insert new characters in the middle.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">The problem is that the collection is not annotated, so they forgot to which string each photo</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">need your help to &#64257;nd an appropriate sequence of photos.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">so all strings in the sequence must be di&#64256;erent.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Given a set of strings representing all available photos, your job is to calculate the size of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">largest sequence they can produce following the guidelines above.</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span><span style="font-size: small;">Kevin is a kid. He has lunch at school together with many more kids. They use to go outdoors&nbsp;</span></span><span><span style="font-size: small;">and have lunch sitting on the ground. They love to form a big circle in which each kid has&nbsp;</span></span><span><span style="font-size: small;">exactly two neighbors, one on the left and one on the right. Sometimes the teacher has problems&nbsp;</span></span><span><span style="font-size: small;">arranging the circle because some kids wish to sit down next to other kids. Each kid may wish&nbsp;</span></span><span><span style="font-size: small;">to sit down next to at most two other kids, because each kid has just two neighbors in the&nbsp;</span></span><span><span style="font-size: small;">circle. The teacher wants to know whether it is possible to arrange the circle in such a way&nbsp;</span></span><span><span style="font-size: small;">that all kids&rsquo; wishes are satis&#64257;ed. You clean up the place when the lunch ends. Since you want&nbsp;</span></span><span><span style="font-size: small;">to &#64257;nish your work as early as possible, help the teacher in answering that question.</span></span></div>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Input</h1>
<p style="color: #000000; font-size: 10px; font-family: Verdana, Arial, Helvetica, sans-serif; "><span style="font-size: small;"><br /></span></p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; "><span><span style="font-size: small;">Each test case is given using several lines. The &#64257;rst line contains two integers K and W&nbsp;</span></span><span><span style="font-size: small;">representing respectively the number of kids (3 &le; K &le; 10^9</span></span><span><span style="font-size: small;">) and the number of wishes (0 &le;&nbsp;</span></span><span><span style="font-size: small;">W &le; 10^5</span></span><span><span style="font-size: small;">). Kids are identi&#64257;ed with numbers between 1 and K. Each of the next W lines&nbsp;</span></span><span><span style="font-size: small;">describes a di&#64256;erent wish using two distinct integers A and B (1 &le; A,B &le; K); these values&nbsp;</span></span><span><span style="font-size: small;">represent that kid A wishes to sit down next to kid B. Each kid has at most two wishes.</span></span></p>
<p style="text-align: justify; font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; "><span><span style="font-size: small;">The last test case is followed by a line containing two zeros.</span></span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Output</h1>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p><span style="font-size: small;">For each test case output a single line containing an uppercase &lsquo;Y&rsquo; if it is possible to arrange a&nbsp;<span>circle in such a way that all kids&rsquo; wishes are satis&#64257;ed, or an uppercase &lsquo;N&rsquo; otherwise.</span></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span style="font-size: x-small;"><strong><span style="font-size: small;">input</span></strong><br /></span><span style="font-size: small;">4 3
2 3
1 3
2 1
1000000000 0
3 6
3 2
2 1
1 2
1 3
2 3
3 1
0 0</span><span style="font-size: x-small;"><br /><br /></span><strong><span style="font-size: small;">output</span></strong><span style="font-size: x-small;"><br /></span><span style="font-size: small;">N
Y
Y</span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>


______________________________________________________
MJLAR10||||||false||||||

<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<p>   </p>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; font-size: 10px; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; ">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">right of themselves, but they never lose characters, nor insert new characters in the middle.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">The problem is that the collection is not annotated, so they forgot to which string each photo</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">need your help to &#64257;nd an appropriate sequence of photos.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">so all strings in the sequence must be di&#64256;erent.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">Given a set of strings representing all available photos, your job is to calculate the size of the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 10px; border: 1px dashed #bbbbbb;">largest sequence they can produce following the guidelines above.</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; ">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span><span style="font-size: small;">Jollo is a simple card game which the children from Logonia love to play. It is played between&nbsp;</span></span><span><span style="font-size: small;">two players with a normal deck of 52 cards. In the game, cards are ordered according to their&nbsp;</span></span><span><span style="font-size: small;">rank and suit, forming a sequence of 52 distinct values.</span></span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span><span style="font-size: small;">The game is composed of three rounds, played in a best-of-three series (a player must win two&nbsp;</span></span><span><span style="font-size: small;">rounds to win the game). At the beginning of the game the deck is shu&#64260;ed and each player&nbsp;</span></span><span><span style="font-size: small;">is given a hand of three cards. In each round the players show one card to each other and the&nbsp;</span></span><span><span style="font-size: small;">player with the highest card wins the round. The cards shown in a round are discarded (i.e.,&nbsp;</span></span><span><span style="font-size: small;">they cannot be shown again).</span></span></div>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span><span style="font-size: small;">The King&rsquo;s son loves to play the game. But he is not very smart, losing frequently to his little&nbsp;</span></span><span><span style="font-size: small;">sister. And when he loses, he cries so loud no one can stand it. The servant who deals the&nbsp;</span></span><span><span style="font-size: small;">cards to the Prince and his sister is afraid he will be sent to prison if the Prince continues to&nbsp;</span></span><span><span style="font-size: small;">lose. The servant is allowed to see every card he deals, and after dealing &#64257;ve cards (three to&nbsp;</span></span><span><span style="font-size: small;">the Princess and two to the Prince) he wants to know which is the lowest card he should deal&nbsp;</span></span><span><span style="font-size: small;">to the Prince so that there is no chance he will lose the game, no matter how badly he plays.</span></span></div>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Input</h1>
<p>&nbsp;</p>
<p style="text-align: justify; "><span><span style="font-size: small;">Each test case is given in a single line that contains &#64257;ve distinct integers A, B, C, X and &nbsp;</span></span><span><span style="font-size: small;">Y , describing the cards dealt to the players. The &#64257;rst three cards are given to the Princess&nbsp;</span></span><span><span style="font-size: small;">(1 &le; A,B,C &le; 52) and the last two cards are given to the Prince (1 &le; X, Y &le; 52).&nbsp;</span></span><span><span style="font-size: small;">The last test case is followed by a line containing &#64257;ve zeros.</span></span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">Output</h1>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">For each test case output a single line. If there exists a card that will make the Prince win the&nbsp;<span>game no matter how badly he plays, you must print the lowest such a card. Otherwise, print&nbsp;</span><span>-1.</span></span></p>
<p>&nbsp;</p>
<h1 style="font-size: 2em; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; text-align: center;">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><span style="font-size: x-small;"><strong><span style="font-size: small;">input</span></strong><br /></span><span style="font-size: small;">4 3
28 51 29 50 52
50 26 19 10 27
10 20 30 24 26
46 48 49 47 50
0 0 0 0 0</span><span style="font-size: x-small;"><br /><br /></span><strong><span style="font-size: small;">output</span></strong><span style="font-size: x-small;"><br /></span><span style="font-size: small;">30
-1
21
51</span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; "> </p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; ">&nbsp;</p>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>


______________________________________________________
MELAR10||||||false||||||

<p>&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p>   </p>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; font-size: 10px; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: 10px;"></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">You are going to construct a new factory in your city. Since you have major electric needs,&nbsp;<span>having the factory placed close to a power plant is important. You want to build a prioritized&nbsp;</span><span>list of possible locations.</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">The area in which the factory needs to be located can be represented as a rectangular grid of&nbsp;<span>N rows and M columns of cells. Some of those cells contain a power plant. The new factory&nbsp;</span><span>occupies exactly one cell, and can be placed in any empty cell (i.e., any cell that does not&nbsp;</span><span>contain a power plant).</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">Numbering rows from 1 to N and columns from 1 to M, the location of a cell can be described&nbsp;<span>by two integers. Cell (i, j) is the cell in row i and column j. The distance between cell (i0, j0)&nbsp;</span><span>and cell (i1, j1) is max(|i0 &minus; i1|, |j0 &minus; j1|) where |x| represents the absolute value of x. The&nbsp;</span><span>electric priority of a location is its minimum distance to a power plant.</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">With this in mind, you will number all possible locations with consecutive integers starting from &nbsp;<span>1. You will do it in ascending order of electric priority. Among locations with the same electric&nbsp;</span><span>priority, you will number them in ascending order of their row numbers. Among locations with&nbsp;</span><span>the same electric priority and row number, you will list them in ascending order of column&nbsp;</span><span>numbers.</span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">In the following picture you can see a 4 &times; 7 grid. Black cells are the cells in which there is a&nbsp;<span>power plant. Dark gray cells have an electric priority of 1, light gray cells an electric priority of&nbsp;</span><span>2 and white cells an electric priority of 3. The number inside each cell is the number assigned&nbsp;</span><span>by you to the location.</span></span></p>
<p style="text-align: center;"><span style="font-size: small;"><span><img src="http://www.spoj.plhttp://i55.tinypic.com/2hzohg0.jpg" alt="" width="319" height="156" /></span></span></p>
<p style="text-align: justify;"><span style="font-size: small;">&nbsp;</span></p>
<p style="text-align: justify;"><span><span style="font-size: small;">You will receive several queries about the prioritized list built. In each query you will be given&nbsp;</span></span><span><span style="font-size: small;">a number representing a position in the prioritized list and you have to calculate which location&nbsp;</span></span><span><span style="font-size: small;">was assigned the given position.</span></span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">right of themselves, but they never lose characters, nor insert new characters in the middle.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">The problem is that the collection is not annotated, so they forgot to which string each photo</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">need your help to &#64257;nd an appropriate sequence of photos.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">so all strings in the sequence must be di&#64256;erent.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Given a set of strings representing all available photos, your job is to calculate the size of the</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; border: 1px dashed #bbbbbb;"><span style="font-size: small;">largest sequence they can produce following the guidelines above.</span></div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; text-align: justify;">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">Input</h1>
<p>&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">Each test case is given using several lines. The &#64257;rst line contains three integers N, M and P,&nbsp;<span>representing the number of rows and columns of the grid (1 &le; N,M &le; 10^9</span><span>) and the number&nbsp;</span><span>of existing power plants (1 &le; P &le; 20). Each of the next P lines contains two integers R and&nbsp;</span><span>C representing the row and column numbers of the location of a power plant (1 &le; R &le; N and&nbsp;</span><span>1 &le; C &le; M). Within each test case, all power plant locations are di&#64256;erent. The next line&nbsp;</span><span>contains a single integer Q representing the number of queries (1 &le; Q &le; 50). Then follows a&nbsp;</span><span>line with Q integers p1, ..., pQ representing positions in the prioritized list (1 &le; pi &le; N&times;M&minus;P).</span></span></p>
<p>&nbsp;</p>
<p style="text-align: justify;"><span style="font-size: small;">The last test case is followed by a line containing three zeros.</span></p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">Output</h1>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span><span style="font-size: small;">For each test case output Q + 1 lines. Line i of the &#64257;rst Q lines must contain two integers&nbsp;</span></span><span><span style="font-size: small;">representing the row and column numbers of the location that was assigned number pi. The&nbsp;</span></span><span><span style="font-size: small;">last line for each test case must contain a single character &lsquo;-&rsquo; (hyphen).</span></span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<h1 style="font-size: 2em; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; text-align: center;">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin: 8px;"><span style="font-size: x-small;"><strong><span style="font-size: small;">input</span></strong><br /></span><span style="font-size: small;">4 7 2
2 5
4 4
6
1 6 11 16 21 26
1000000000 1000000000 1
1 1
1
999999999999999999
0 0 0</span><span style="font-size: x-small;"><br /><br /></span><strong><span style="font-size: small;">output</span></strong><span style="font-size: x-small;"><br /></span><span style="font-size: small;">1 4
3 3
4 5
2 7
4 7
4 1
-
1000000000 1000000000
-</span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;"> </p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
</div>
</div>
<p>&nbsp;</p>


______________________________________________________
MILAR10||||||false||||||

<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p>   </p>
</div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
</div>
</div>
</div>
<p>&nbsp;</p>
<table style="cursor: default; width: 748px; background-color: #44c23c; font-size: 10px; color: #000000; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;" border="0">
<tbody>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/en/">English</a></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; text-align: center; margin: 8px; border: 1px dashed #bbbbbb;" width="50%"><a href="/problems/MTEMP/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<div style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;"><span style="font-size: 10px;"></p>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span><span style="font-size: small;">The King of Logonia will inaugurate soon a new and revolutionary metro, based on an invention&nbsp;</span></span><span><span style="font-size: small;">of the Royal Engineers, which allows teletransportation.&nbsp;</span></span></p>
<p style="text-align: justify;"><span><span style="font-size: small;">The new metro consists of a very long tunnel with a station at each kilometer. There are also T&nbsp;</span></span><span><span style="font-size: small;">teletransporters, which are located at some of the stations. In each station there is a keyboard&nbsp;</span></span><span><span style="font-size: small;">with T keys, where each key corresponds to one teletransporter. The &#64257;gure below illustrates a&nbsp;</span></span><span><span style="font-size: small;">metro system with three teletransporters, located in stations marked A, B and C.</span></span></p>
<p>&nbsp;</p>
<p style="text-align: center; color: #000000;"><span><span style="font-size: small;"><img src="http://www.spoj.plhttp://i52.tinypic.com/a4tyxu.jpg" alt="" width="571" height="84" /></span></span></p>
<p style="text-align: justify; font-size: 10px; color: #000000;"><span style="font-size: small;">&nbsp;</span></p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span><span style="font-size: small;">The metro works as follows. The user goes in a station (the start station) and presses the key&nbsp;</span></span><span><span style="font-size: small;">corresponding to the teletransporter he wants to use. The user is then teletransported to the&nbsp;</span></span><span><span style="font-size: small;">station which is at the same distance from the teletransporter as the start station, but on the&nbsp;</span></span><span><span style="font-size: small;">opposite side relative to the teletransporter. More precisely, if the location of the start station&nbsp;</span></span><span><span style="font-size: small;">is i and the user presses the key corresponding to the teletransporter located in position j, he&nbsp;</span></span><span><span style="font-size: small;">will be taken to the station located at position 2 &times; j &minus; i. For example, if the user is in station&nbsp;</span></span><span><span style="font-size: small;">6 and wants to go to station &minus;2, he can use the teletransporter C (goes from 6 to 10) and then&nbsp;</span></span><span><span style="font-size: small;">the teletransporter A (goes from 10 to &minus;2).</span></span></p>
<p style="text-align: justify;"><span><span style="font-size: small;">The King, however, knows that it is possible that there is no sequence of teletransporters that&nbsp;</span></span><span><span style="font-size: small;">will take the user from a given station X to a given station Y . To avoid that the users keep&nbsp;</span></span><span><span style="font-size: small;">trying to go where they cannot go, he wants to make a program available in the Internet to help&nbsp;</span></span><span><span style="font-size: small;">users. The King wants you to write a program which, given the position of each teletransporter,&nbsp;</span></span><span><span style="font-size: small;">answers a series of queries. For each query the start and the destination stations are given, and&nbsp;</span></span><span><span style="font-size: small;">your program must determine if it is possible for the user to go from start to destination.</span></span></p>
<p>&nbsp;</p>
<p style="color: #000000;"><span style="font-size: small;">&nbsp;</span></p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">it is usually the case in regular farms, they grow strings. A string is a sequence of characters.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Strings have the particularity that, as they grow, they add characters to the left and/or to the</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">right of themselves, but they never lose characters, nor insert new characters in the middle.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Gene and Gina have a collection of photos of some strings at di&#64256;erent times during their growth.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">The problem is that the collection is not annotated, so they forgot to which string each photo</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">belongs to. They want to put together a wall to illustrate strings growing procedures, but they</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">need your help to &#64257;nd an appropriate sequence of photos.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Each photo illustrates a string. The sequence of photos must be such that if si comes imme-</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">diately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures,</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">so all strings in the sequence must be di&#64256;erent.</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">Given a set of strings representing all available photos, your job is to calculate the size of the</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 448px; width: 1px; height: 1px; overflow: hidden; color: #000000; font-size: 10px; font-family: Verdana,Arial,Helvetica,sans-serif; border: 1px dashed #bbbbbb;"><span style="font-size: small;">largest sequence they can produce following the guidelines above.</span></div>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; text-align: justify;">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">Input</h1>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;"><span><span style="font-size: small;">Each test case is given using several lines. The &#64257;rst line contains two integers T and Q indi</span></span><span><span style="font-size: small;">cating respectively the number of teletransporters (1 &le; T &le; 10^5</span></span><span><span style="font-size: small;">) and the number of queries&nbsp;</span></span><span><span style="font-size: small;">(1 &le; Q &le; 10). The second line contains T di&#64256;erent integers ti indicating the position of the&nbsp;</span></span><span><span style="font-size: small;">teletransporters (&minus;10^7&nbsp;</span></span><span><span style="font-size: small;">&le; ti &le; 10^7</span></span><span><span style="font-size: small;">). Each of the Q following lines describes a query and con</span></span><span><span style="font-size: small;">tains two distinct integers S and D indicating the position of the start and destination stations&nbsp;</span></span><span><span style="font-size: small;">(&minus;10^7</span></span><span><span style="font-size: small;">&le; S,D &le; 10^7</span></span><span><span style="font-size: small;">).</span></span></p>
<p style="text-align: justify;"><span><span style="font-size: small;">The last test case is followed by a line containing two zeros.</span></span></p>
<p>&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<h1 style="font-size: 2em; text-align: center; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">Output</h1>
<p style="text-align: justify;"><span style="font-size: 10px;"><span style="font-size: small;">For each test case output a single line containing the answers to the Q queries, in the same&nbsp;</span><span style="font-size: small;">order that the queries were given in the input. For each query you must output an uppercase&nbsp;</span></span><span><span style="font-size: small;">&lsquo;Y&rsquo; if it is possible to reach the destination station from the start station using the metro, or&nbsp;</span></span><span><span style="font-size: small;">an uppercase &lsquo;N&rsquo; otherwise.</span></span></p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<h1 style="font-size: 2em; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; text-align: center;">Sample</h1>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; text-align: justify; margin: 8px;"><span style="font-size: x-small;"><strong><span style="font-size: small;">input</span></strong><br /></span><span style="font-size: small;">1 1<br />-2<br />-6 2<br />5 2<br />10 20 30 40 50<br />10 15<br />20 40<br />5 3<br />0 5 -3 -8 4<br />-1 499<br />4 237<br />-1 -591<br />0 0</span><span style="font-size: x-small;"><br /><br /></span><strong><span style="font-size: small;">output</span></strong><span style="font-size: x-small;"><br /></span><span style="font-size: small;">Y<br />N Y<br />Y N Y</span></pre>
<p style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px;"> </p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
<p style="font-size: 10px; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif;">&nbsp;</p>
</div>
</div>
</div>
<p>&nbsp;</p>


______________________________________________________
HLPRSRCH||||||true||||||


<p>A scientist was doing a research on some kinds of bacteria. He found that the kinds, he examined, take <strong>T</strong> unit of time to grow (be <span id="result_box" lang="en"><span>mature</span></span>) enough in order to can reproduce.<br /><br />Also he found that each type reproduces with a constant rate which is <strong>N</strong> new bacteria every <strong>F</strong> unit of time.</p>
<p>(where <strong>F</strong>=<strong>T</strong>)</p>
<p>&nbsp;</p>
<h3>Task</h3>
<p>write a progam that reads <strong>L</strong> (number of bacteria (at the begining of the experiment)), <strong>M</strong> (number of mature bacteria of them), <strong>T</strong> (time of each to get mature which is also the time needed for reproducing <strong>N</strong> new bacteria), <strong>N</strong> (rate of reproducing per <strong>T</strong> unit of time) and <strong>Z</strong> (period elapsed by the experiment).</p>
<p>Calculate the number of bacteria after <strong>Z</strong> unit of time.Regardless of life-span</p>
<h3>Constraints</h3>
<p>1 &le; <strong>L</strong> &le; 5 &nbsp; &nbsp; number of bacteria (at the begining of the experiment)</p>
<p>1 &le; <strong>M</strong> &le; <strong>L</strong> &nbsp;&nbsp; number of mature bacteria</p>
<p>1 &le; <strong>T</strong> &le; 5&nbsp;&nbsp; time of each to get mature which is also the time needed for reproducing <strong>N</strong> new bacteria</p>
<p>1 &le; <strong>N</strong> &le; 50 &nbsp;&nbsp; rate of reproducing per <strong>T</strong> unit of time</p>
<p>1 &le; <strong>Z/T</strong> &le; 4,300&nbsp;&nbsp;&nbsp; period elapsed by the experiment</p>
<h3>Note</h3>
<p><strong>Z</strong> is always divisible by <strong>T</strong>.</p>

*******InputConstraints*******

<ul>
<li><strong>L</strong> (number of bacteria (at the begining of the experiment))</li>
<li><strong>M</strong> (number of mature bacteria of them)</li>
<li><strong>T</strong> (time of each to get mature which is also the time needed for reproducing <strong>N</strong> new bacteria)</li>
<li><strong>N</strong> (rate of reproducing per <strong>T</strong> unit of time)</li>
<li><strong>Z</strong> (period elapsed by the experiment)</li>
</ul>

*******OutputConstraints*******

<ul>
<li>the number of bacteria after <strong>Z</strong> unit of time.Regardless of life-span.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />2<br />3<br />1<br />3<br /><br /><strong>Output:</strong><br />5<br /><br />The experiment begins with 2 mature bacteria and one unmature bacterium.<br />For, each of the mature bacteria reproduces after 3 units of time.<br />Then th total becomes 4 -as each one got a new one (2*2)-.<br />But, for the unmature bacterium after 3 units of time, it only become mature.<br />After all of that the experiment finishes with 5 bacteria.<br /><br /><br /><pre><strong>Input</strong><br />2<br />0<br />1<br />1<br />100<br /><br /><strong>Output:</strong><br />1146295688027634168202<br /><br /></pre>
</pre>


______________________________________________________
EXFOR||||||true||||||


<p>&nbsp;</p>
<p>Consider 10 Boolean variables x1, x2, x3, x4, x5, x6, x7, x8, x9, and x10. Consider all pairs and triplets of&nbsp;distinct variables among these ten. (There are 45 pairs and 120 triplets.) Count the number of pairs and&nbsp;triplets that contain at least one variable equal to 1. Set f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = 1 if this&nbsp;number is odd and f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = 0 if this number is even.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Here&rsquo;s an explicit formula that represents the function f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) correctly:</p>
<p>&nbsp;</p>
<p>f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = (x1 || x2)^(x1 || x3)^(x1 || x4)^(x1 || x5)^(x1 || x6)^(x1 || x7)^(x1 || x8)^(x1 || x9)^(x1 || x10)^(x2 || x3)^(x2 || x4)^(x2 || x5)^(x2 || x6)^(x2 || x7)^(x2 || x8)^(x2 || x9)^(x2 || x10)^(x3 || x4)^(x3 || x5)^(x3 || x6)^(x3 || x7)^(x3 || x8)^(x3 || x9)^(x3 || x10)^(x4 || x5)^(x4 || x6)^(x4 || x7)^(x4 || x8)^(x4 || x9)^(x4 || x10)^(x5 || x6)^(x5 || x7)^(x5 || x8)^(x5 || x9)^(x5 || x10)^(x6 || x7)^(x6 || x8)^(x6 || x9)^(x6 || x10)^(x7 || x8)^(x7 || x9)^(x7 || x10)^(x8 || x9) ^ (x8 || x10) ^ (x9 || x10) ^ (x1 || x2 || x3) ^ (x1 || x2 || x4) ^ (x1 || x2 || x5) ^ (x1 || x2 || x6) ^(x1 || x2 || x7) ^ (x1 || x2 || x8) ^ (x1 || x2 || x9) ^ (x1 || x2 || x10) ^ (x1 || x3 || x4) ^ (x1 || x3 || x5) ^(x1 || x3 || x6) ^ (x1 || x3 || x7) ^ (x1 || x3 || x8) ^ (x1 || x3 || x9) ^ (x1 || x3 || x10) ^ (x1 || x4 || x5) ^(x1 || x4 || x6) ^ (x1 || x4 || x7) ^ (x1 || x4 || x8) ^ (x1 || x4 || x9) ^ (x1 || x4 || x10) ^ (x1 || x5 || x6) ^(x1 || x5 || x7) ^ (x1 || x5 || x8) ^ (x1 || x5 || x9) ^ (x1 || x5 || x10) ^ (x1 || x6 || x7) ^ (x1 || x6 || x8) ^(x1 || x6 || x9) ^ (x1 || x6 || x10) ^ (x1 || x7 || x8) ^ (x1 || x7 || x9) ^ (x1 || x7 || x10) ^ (x1 || x8 || x9) ^(x1 || x8 || x10) ^ (x1 || x9 || x10) ^ (x2 || x3 || x4) ^ (x2 || x3 || x5) ^ (x2 || x3 || x6) ^ (x2 || x3 || x7) ^(x2 || x3 || x8) ^ (x2 || x3 || x9) ^ (x2 || x3 || x10) ^ (x2 || x4 || x5) ^ (x2 || x4 || x6) ^ (x2 || x4 || x7) ^(x2 || x4 || x8) ^ (x2 || x4 || x9) ^ (x2 || x4 || x10) ^ (x2 || x5 || x6) ^ (x2 || x5 || x7) ^ (x2 || x5 || x8) ^(x2 || x5 || x9) ^ (x2 || x5 || x10) ^ (x2 || x6 || x7) ^ (x2 || x6 || x8) ^ (x2 || x6 || x9) ^ (x2 || x6 || x10) ^(x2 || x7 || x8) ^ (x2 || x7 || x9) ^ (x2 || x7 || x10) ^ (x2 || x8 || x9) ^ (x2 || x8 || x10) ^ (x2 || x9 || x10) ^(x3 || x4 || x5) ^ (x3 || x4 || x6) ^ (x3 || x4 || x7) ^ (x3 || x4 || x8) ^ (x3 || x4 || x9) ^ (x3 || x4 || x10) ^(x3 || x5 || x6) ^ (x3 || x5 || x7) ^ (x3 || x5 || x8) ^ (x3 || x5 || x9) ^ (x3 || x5 || x10) ^ (x3 || x6 || x7) ^(x3 || x6 || x8) ^ (x3 || x6 || x9) ^ (x3 || x6 || x10) ^ (x3 || x7 || x8) ^ (x3 || x7 || x9) ^ (x3 || x7 || x10) ^(x3 || x8 || x9) ^ (x3 || x8 || x10) ^ (x3 || x9 || x10) ^ (x4 || x5 || x6) ^ (x4 || x5 || x7) ^ (x4 || x5 || x8) ^(x4 || x5 || x9) ^ (x4 || x5 || x10) ^ (x4 || x6 || x7) ^ (x4 || x6 || x8) ^ (x4 || x6 || x9) ^ (x4 || x6 || x10) ^(x4 || x7 || x8) ^ (x4 || x7 || x9) ^ (x4 || x7 || x10) ^ (x4 || x8 || x9) ^ (x4 || x8 || x10) ^ (x4 || x9 || x10) ^(x5 || x6 || x7) ^ (x5 || x6 || x8) ^ (x5 || x6 || x9) ^ (x5 || x6 || x10) ^ (x5 || x7 || x8) ^ (x5 || x7 || x9) ^(x5 || x7 || x10) ^ (x5 || x8 || x9) ^ (x5 || x8 || x10) ^ (x5 || x9 || x10) ^ (x6 || x7 || x8) ^ (x6 || x7 || x9) ^(x6 || x7 || x10) ^ (x6 || x8 || x9) ^ (x6 || x8 || x10) ^ (x6 || x9 || x10) ^ (x7 || x8 || x9) ^ (x7 || x8 || x10) ^(x7 || x9 || x10) ^ (x8 || x9 || x10)</p>
<p>&nbsp;</p>
<p>In this formula || stands for logical or, and ^ stands for exclusive or (xor). Remember that in C++ and&nbsp;Java these two binary operators are denoted as &ldquo;||&rdquo; and &ldquo;^&rdquo;.</p>
<p>&nbsp;</p>
<p>Given the values of x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, calculate the value of f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10).</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input file contains T, the number of test cases. The next T lines contain 10 numbers each, x1, x2, x3, x4, x5, x6, x7, x8, x9, and x10. Each of these numbers is either 0 or 1.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case output a single line with the value f(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10).</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>1
1 0 0 1 0 0 1 0 0 1

<strong>Output:</strong>
0<span style="white-space: normal;">
</span></pre>


______________________________________________________
ANARC09I||||||true||||||


<p><img style="float: right; margin: 5px; border: 5px solid black;" title="OnB" src="http://vn.spoj.pl/SPOJVN/content/anarc09i2.jpg" alt="Origin and Blured Image" width="195" height="452" /></p>
<p>Image blurring occurs when the object being captured is out of the camera&rsquo;s focus. The top two figures on the right are an example of an image and its blurred version. Restoring the original image given only the blurred version is one of the most interesting topics in image processing. This process is called deblurring, which will be your task for this problem.</p>
<p><br />In this problem, all images are in grey-scale (no colours). Images are represented as a 2 dimensional matrix of real numbers, where each cell corresponds to the&nbsp; brightness of the corresponding pixel. Although not mathematically accurate, one way to describe a blurred image is through averaging all the pixels that are within (less than or equal to) a certain Manhattan distance&dagger; from each pixel (including the pixel itself ). Here&rsquo;s an example of how to calculate the blurring of a 3x3 image with a&nbsp; blurring distance of 1:</p>
<p><img style="vertical-align: middle; margin: 5px; border: 5px solid black;" title="HowTo" src="http://vn.spoj.pl/SPOJVN/content/anarc09i1.jpg" alt="How to compute" width="377" height="310" /></p>
<pre><img style="float: right; margin: 5px; border: 5px solid black;" title="Mahatan" src="http://vn.spoj.pl/SPOJVN/content/anarc09i3.jpg" alt="Mahattan distance" width="178" height="216" /></pre>
<p>Given the blurred version of an image, we are interested in reconstructing the original version assuming that the image was blurred as explained above.</p>

*******InputConstraints*******

<p>Input consists of several test cases. Each case is specified on H + 1 lines. The first line specifies three non negative integers specifying the width W , the height H of the blurred image and the blurring distance D respectively where (1 &le; W, H &le; 10) and (D &le; min(W/2, H/2)). The remaining H lines specify the gray-level of each pixel in the blurred image. Each line specifies W non-negative real numbers given up to the 2nd decimal place. The value of all the given real numbers will be less than 100. Zero or more lines (made entirely of white spaces) may appear between cases. The last line of the input file consists of three zeros.</p>

*******OutputConstraints*******

<p>For each test case, print a W &times; H matrix of real numbers specifying the deblurred version of the image. Each element in the matrix should be approximated to 2 decimal places and right justified in a field of width 8. Separate the output of each two consecutive test cases by an empty line. Do not print an empty line after the last test case. It is guaranteed that there is exactly one unique solution for every test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 2 1<br />1 1<br />1 1<br />3 3 1<br />19 14 20<br />12 15 18<br />13 14 16<br />4 4 2<br />14 15 14 15<br />14 15 14 15<br />14 15 14 15<br />14 15 14 15<br />0 0 0<br /><br /><strong>Output:</strong><br />    1.00    1.00 <br />    1.00    1.00<br /><br />    2.00   30.00   17.00<br />   25.00    7.00   13.00<br />   14.00    0.00   35.00<br /><br />    1.00   27.00    2.00   28.00<br />   21.00   12.00   17.00    8.00<br />   21.00   12.00   17.00    8.00<br />    1.00   27.00    2.00   28.00<br /></pre>


______________________________________________________
ANARC09J||||||true||||||


<p>The great hall of the national museum has been robbed few times recently. Everyone is now worried about the security of the treasures on display. To help secure the hall, the museum contracted with a private security company to provide additional guards to stay in the great hall and keep an eye on the ancient artifacts. The museum would like to hire the minimum number of additional guards so that the great hall is secured. The great hall is represented as a two dimensional grid of R &times; C cells. Some cells are already occupied with the museum&rsquo;s guards. All remaining cells are occupied by artifacts of different types<br />(statues, sculptures, . . . etc.) which can be replaced by new hired guards. For each artifact, few other cells in the hall are identified as critical points of the artifact depending on the artifact value, type of vault it is kept inside, and few other factors. In other words, if this artifact is going to stay in the hall then all of its critical points must have guards standing on them. A guard standing in a critical position of multiple artifacts can keep an eye on them all. A guard, however, can not stand in a cell which contains an artifact (instead, you may remove the artifact to allow the guard to stay there). Also you can not remove an artifact and leave the space free (you can only replace an artifact with a new hired guard). Surveying all the artifacts in the great hall you figured out that the critical points of any artifact (marked by a symbol) are always a subset of the 12 neighboring cells as shown in the grid below.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img title="Guard1" src="http://vn.spoj.pl/SPOJVN/content/anarc09j1.jpg" alt="Guard Position" width="274" height="189" /></p>
<p>Accordingly, the type of an artifact can be specified as a non-negative integer where the i-th bit is 1 only if critical point number i from the picture above is a critical point of that artifact. For example an artifact of type 595 (in binary 1001010011) can be pictured as shown in the figure below. Note that bits are numbered from right to left (the right-most bit is bit number 1.) If a critical point of an artifact lies outside the hall grid then it is considered secure.</p>
<p style="text-align: center;"><img title="Guard2" src="http://vn.spoj.pl/SPOJVN/content/anarc09j2.jpg" alt="Guard Position" width="237" height="180" /></p>
<p>You are given the layout of the great hall and are asked to find the minimum number of additional guards to hire such that all remaining artifacts are secured.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified using R+1 lines. The first line specifies two integers (1 &le; R, C &le; 50) which are the dimensions of the museum hall. The next R lines contain C integers separated by one or more spaces. The j-th integer of the i-th row is -1 if cell (i, j) already contains one of the museum&rsquo;s guards, otherwise it contains an integer (0 &le; T &lt; 2<sup>12</sup> ) representing the type of the artifact in that cell. The last line of the input file has two zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. G<br />Where k is the test case number (starting at one,) and G is the minimum number of additional guards to hire such that all remaining artifacts are secured.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 3<br />512 -1 2048<br />2 3<br />512 2560 2048<br />512 2560 2048<br />0 0<br /><br /><strong>Output:</strong><br />1. 0<br />2. 2<br /></pre>


______________________________________________________
ANARC09H||||||true||||||


<p>The king of the Far, Far Away Kingdom has passed-away and the kingdom must be split amongst his K sons. The kingdom, which can be drawn on a rectangular map, consists of N cities. To divide the land, they will draw K &minus; 1 straight segments on the map, all of them parallel to either<br />the vertical or the horizontal axis of the map. This divides the map into exactly K rectangles, all having equal heights (if the dividing lines where vertical), or equal widths (if the dividing lines where horizontal). No segment should pass through any of the cities. Each son will then be assigned one random region out of the K regions and the cities inside that region will be his share. Of course, they want the division to be as fair as possible: theoretically, in the fairest division, each son should get N/K cities (we&rsquo;ll call this value the baseline), but since the baseline isn&rsquo;t always a whole number, each of the sons wants to be as close as possible to the baseline. We will calculate the unfairness of each son as the absolute difference between the number of cities assigned to him and the baseline. The fairest division is the one that minimizes the average unfairness of all the sons.</p>
<p style="text-align: center;"><img title="Land" src="http://vn.spoj.pl/SPOJVN/content/anarc09h.jpg" alt="Land division" width="973" height="242" /></p>
<p>Consider the example above with 3 sons and 6 cities (so the baseline is 6/3 = 2.0) Figure (a) is the original map. Figure (b) shows a non-optimal division (the dashed lines are the 2 dividing lines.) In this case, the middle region contains 3 cities (unfairness of |3 &minus; 2| = 1), the left region contains 1 city (unfairness of |1 &minus; 2| = 1), while the right region contains 2 cities (perfectly fair, unfairness of 0), so the average unfairness is 2/3.<br />Figure (c) on the right shows the optimal division since all three regions contain the same number of cities for an average unfairness of 0. Write a program to determine the fairest land division for a given kingdom.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is described on N + 1 lines. The first line of each test case specifies two positive integers: (N &le; 100, 000) and (K &le; 10) where N is the number of cities and K is number of children. Note that K &le; N . N lines follows,&nbsp; each describing the coordinates of a city by specifying two integers (x, y) where 0 &le; x, y &le; 100, 000. Since coordinates are rounded to the&nbsp; nearest integer, more than one city could have the exact same coordinate on the map. You may assume that the map of the kingdom is any rectangle that contains all of the given points (although such information is not needed by the program.) Note also that while all cities lie on integer coordinates, the dividing lines need not be. The last line of the input file contains two zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. A/B<br />Where k is the test case number (starting at one,) and A/B is the minimum average that could be obtained. A/B should be an irreducible fraction. Let B=1 when the result is a whole number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />6 3<br />0 4<br />1 3<br />2 3<br />3 1<br />4 4<br />5 0<br />4 3<br />0 0<br />0 1<br />1 1<br />1 0<br />0 0<br /><br /><strong>Output:</strong><br />1. 0/1<br />2. 8/9<br /></pre>


______________________________________________________
ANARC09G||||||true||||||


<p>I have to admit, the solution I proposed last year for solving the bank  cash crisis didn&rsquo;t solve the whole economic crisis. As it turns out,  companies don&rsquo;t have that much cash in the first place. They have assets  which are primarily shares in other companies. It is common, and  acceptable, for one company to own shares in another. What complicates  the issue is for two companies to own shares in each other at the same  time. If you think of it for a moment, this means that each company now  (indirectly) controls its own shares.</p>
<p>New market regulation is being  implemented: No company can control shares in itself, whether directly  or indirectly. The Stock Market Authority is looking for a&nbsp; computerized  solution that will help it detect any buying activity that will result  in a company controlling its own shares. It is obvious why they need a  program to do so, just imagine the situation where company A buying  shares in B, B buying in C, and then C buying in A. While the first two  purchases are acceptable. The third purchase should be rejected since it  will lead to the three companies controlling shares in&nbsp; themselves. The  program will be given all purchasing transactions in chronological  order. The program should reject any transaction that could lead to one  company controlling its own shares. All other transactions are accepted</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on T + 1 lines. The first line specifies two positive numbers: (0 &lt; N &le; 234) is the number of companies and (0 &lt; T &le; 100, 000) is the number of transactions. T lines follow, each describing a buying transaction. Each transaction is specified using two numbers A and B where (0 &lt; A, B &le; N ) indicating that company A wants to buy shares in company B. The last line of the input file has two zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. R<br />Where k is the test case number (starting at one,) R is the number of transactions that should be rejected.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 6
1 2<br />1 3<br />3 1<br />2 1<br />1 2<br />2 3<br />0 0<br /><strong>Output:</strong>
1. 2</pre>


______________________________________________________
LLCA||||||true||||||


<p>Given a labeled complete k-ary tree, find the largest labeled common ancestor of two given nodes. In a complete k-ary tree, the node in the tree is labeled sequentially from the left most child to right most child, level by level. Largest labeled common ancestor of A and B is defined as the largest labeled node in the tree which has A and B as descendants. A node is a descendant of itself.</p>
<p><strong>Be careful with your finger, the source limit is 256 bytes.</strong></p>

*******InputConstraints*******

<p>The first line of input contains an integer T (1 &lt;= T &lt;= 100) the number of cases. Each cases contains three integers K, A and B (2 &lt;= K &lt;= 100; 1 &lt;= A,B &lt;= 2,000,000,000).</p>

*******OutputConstraints*******

<p>For each test case, output in a line the largest labeled common ancestor node.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<br /><br /><br />4<br />3 42 7<br />2 2 6<br />2 1 105<br />4 10 13<br /><br /><strong>Output:</strong>
<br /><br /><br />2<br />1<br />1<br />3<br /><br /><strong>Whitespace Explanation:<br /></strong>If there no input in any line, then the output for that line is a blank line :)) Sorry for inconvenience. &gt;:)</pre>


______________________________________________________
COMFUNC||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Two functions f and g (f, g: X &rarr; X) are commuting if and only if f(g(x)) = g(f(x)) for each x in X.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example, functions f(x) = x + 1 and g(x) = x &minus; 2 are commuting, whereas functions f(x) = x + 1</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and g(x) = 2x are not commuting.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each function h (h: N_n &rarr; N_n, where N_n = 1, 2, ..., n and n is positive integer) can be represented as a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">value list &mdash; a list in which the i-th element is equal to h(i). For example, a function h(x) = ceil(x/2) from</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">N_5 to N_5 has the value list [1, 1, 2, 2, 3].</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The value lists are ordered lexicographically: list [a1 ... an] is smaller than list [b1 ... bn] if and only if</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">there exists such an index k that a_k &lt; b_k, and a_l = b_l for any index l &lt; k.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The function f (f: X &rarr; X) is bijective if for every y in X, there is exactly one x in X such that</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">f(x) = y.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given a bijective function f (f: N_n &rarr; N_n, n is positive integer), find the function g that is commuting</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">with f and has the lexicographically smallest possible value list.</div>
<p>&nbsp;</p>
<p>Two functions f and g (f, g: X &rarr; X) are commuting if and only if f(g(x)) = g(f(x)) for each x in X.&nbsp;For example, functions f(x) = x + 1 and g(x) = x &minus; 2 are commuting, whereas functions f(x) = x + 1&nbsp;and g(x) = 2x are not commuting.</p>
<p>&nbsp;</p>
<p>Each function h (h: N<sub>n</sub> &rarr; N<sub>n</sub>, where N<sub>n</sub> = {1, 2, ..., n} and n is positive integer) can be represented as a&nbsp;value list &mdash; a list in which the i-th element is equal to h(i). For example, a function h(x) = ceil(x/2) from&nbsp;N<sub>5</sub> to N<sub>5</sub> has the value list [1, 1, 2, 2, 3].</p>
<p>&nbsp;</p>
<p>The value lists are ordered lexicographically: list [a<sub>1</sub> ... a<sub>n</sub>] is smaller than list [b<sub>1</sub> ... b<sub>n</sub>] if and only if&nbsp;there exists such an index k that a<sub>k</sub> &lt; b<sub>k</sub>, and a<sub>l</sub> = b<sub>l</sub> for any index l &lt; k.</p>
<p>&nbsp;</p>
<p>The function f (f: X &rarr; X) is bijective if for every y in X, there is exactly one x in X such that&nbsp;f(x) = y.</p>
<p>&nbsp;</p>
<p>Given a bijective function f (f: N<sub>n</sub> &rarr; N<sub>n</sub>, n is positive integer), find the function g that is commuting&nbsp;with f and has the lexicographically smallest possible value list.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input file contains the number of test cases. Each test case is described by a line containing a single integer number n &mdash; the number of the elements in the value list of a bijective function f (1 &le; n &le; 200000), followed by another line which contains the value list of the function f.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing n integer numbers &mdash; the value list of function g that commutes with the function f and has the lexicographically smallest value list.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
10
1 2 3 4 5 6 7 8 9 10
10
2 3 4 5 6 7 8 1 9 10

<strong>Output:</strong>
1 1 1 1 1 1 1 1 1 1
1 2 3 4 5 6 7 8 9 9<span style="white-space: normal;">
</span></pre>


______________________________________________________
DEFKIN||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Theodore implements a new strategy game &ldquo;Defense of a Kingdom&rdquo;. On each level a player defends the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Kingdom that is represented by a rectangular grid of cells. The player builds crossbow towers in some</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">cells of the grid. The tower defends all the cells in the same row and the same column. No two towers</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">share a row or a column.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The penalty of the position is the number of cells in the largest undefended rectangle. For example, the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">position shown on the picture has penalty 12.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">[IMAGE]</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Help Theodore write a program that calculates the penalty of the given position.</div>
<p>&nbsp;</p>
<p>Theodore implements a new strategy game &ldquo;Defense of a Kingdom&rdquo;. On each level a player defends the&nbsp;Kingdom that is represented by a rectangular grid of cells. The player builds crossbow towers in some&nbsp;cells of the grid. The tower defends all the cells in the same row and the same column. No two towers&nbsp;share a row or a column.</p>
<p>&nbsp;</p>
<p>The penalty of the position is the number of cells in the largest undefended rectangle. For example, the&nbsp;position shown on the picture has penalty 12.</p>
<p>&nbsp;</p>
<p><img title="Example position" src="../../../content/fidels:DEFKIN.png" alt="This position has a penalty of 12." width="658" height="239" /></p>
<p>&nbsp;</p>
<p>Help Theodore write a program that calculates the penalty of the given position.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line of the input file contains the number of test cases.</p>
<p>&nbsp;</p>
<p>Each test case consists of a line with three integer numbers: w &mdash; width of the grid, h &mdash; height of the&nbsp;grid and n &mdash; number of crossbow towers (1 &le; w, h &le; 40 000; 0 &le; n &le; min(w, h)).</p>
<p>&nbsp;</p>
<p>Each of the following n lines contains two integer numbers x<sub>i</sub> and y<sub>i</sub> &mdash; the coordinates&nbsp;of the cell occupied by a tower (1 &le; x<sub>i</sub> &le; w; 1 &le; y<sub>i</sub> &le; h).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each test case, output a single integer number &mdash; the number of cells in the largest rectangle that is not defended by&nbsp;the towers.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
15 8 3
3 8
11 2
8 6

<strong>Output:</strong>
12<span style="white-space: normal;">
</span></pre>


______________________________________________________
KITROB||||||false||||||

<p>Robots are becoming more and more popular. They are used nowadays not only in manufacturing plants,&nbsp;but also at home. One programmer with his friends decided to create their own home robot. As you may&nbsp;know most programmers like to drink beer when they gather together for a party. After the party there&nbsp;are a lot of empty bottles left on the table. So, it was decided to program robot to collect empty bottles&nbsp;from the table.</p>
<p>The table is a rectangle with the length l and width w. Robot starts at the point (x<sub>r</sub>, y<sub>r</sub>) and n bottles&nbsp;are located at points (x<sub>i</sub>, y<sub>i</sub>) for i = 1, 2, ..., n. To collect a bottle robot must move to the point where&nbsp;the bottle is located, take it, and then bring to some point on the border of the table to dispose it. Robot&nbsp;can hold only one bottle at the moment and for simplicity of the control program it is allowed to release&nbsp;bottle only at the border of the table.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img title="Example" src="../../content/fidels:KITROB.png" alt="Example" width="141" height="179" /></p>
<p>&nbsp;</p>
<p>You can assume that sizes of robot and bottles are negligibly small (robot and bottles are points), so the&nbsp;robot holding a bottle is allowed to move through the point where another bottle is located.&nbsp;One of the subroutines of the robot control program is the route planning. You are to write the program&nbsp;to determine the minimal length of robot route needed to collect all the bottles from the table.</p>
<p>&nbsp;</p>
<p><strong>Input</strong></p>
<p>The first line of the input file contains T, the number of test cases. T test cases follow.</p>
<p>The first line of each test case contains two integer numbers w and l &mdash; the width and the length of the&nbsp;table (2 &le; w, l &le; 1000).</p>
<p>The second line contains an integer number n &mdash; the number of bottles on the table&nbsp;(1 &le; n &le; 18). Each of the following n lines contains two integer numbers x<sub>i</sub> and y<sub>i</sub> &mdash; coordinates&nbsp;of the i-th bottle (0 &lt; x<sub>i</sub> &lt; w; 0 &lt; y<sub>i</sub> &lt; l). No two bottles are located at the same point.</p>
<p>The last line of the test case contains two integer numbers x<sub>r</sub> and y<sub>r</sub> &mdash; coordinates of the robot&rsquo;s initial&nbsp;position (0 &lt; x<sub>r</sub> &lt; w; 0 &lt; y<sub>r</sub> &lt; l). Robot is not located at the same point with a bottle.</p>
<p>&nbsp;</p>
<p><strong>Output</strong></p>
<p>For each test case, output the length of the shortest route of the robot. Your answer should be accurate within an absolute&nbsp;error of 10<sup>-6</sup>.</p>
<p>&nbsp;</p>
<p><strong>Example</strong></p>
<pre><strong>Input:</strong>
1
3 4
2
1 1
2 3
2 1

<strong>Output:</strong>
5.60555127546399<span style="white-space: normal;">
</span></pre>


______________________________________________________
LPRISON||||||true||||||


<p>(Maybe) someday there is a planet used to jail much prisoners from universe. One time, the prison manager collects all of prisoners, with handcuff in their hand locked. He orders to officers to unlock all handcuffs. Then, he orders to officers to look at prisoners whose number can divided by two. If his/her handcuff is locked, the open it, otherwise, lock it. Then, he orders again to all officers to look at prisoners whose number can divided by three, and so on.</p>
<p>You, the universe criminal researcher, is requested to calculate the environmental criminal impact by calculating ratio of freed prisoners about all prisoners to the number of prisoners are known.</p>

*******InputConstraints*******

<p>Line 1 contains one integer T (1 &lt;= T &lt;= 100) number of test cases. Then T next lines contains one number K (1 &lt;= K &lt;= 10<sup>1000</sup>), the number of prisoners.</p>

*******OutputConstraints*******

<p>Output contains K lines, contains the probability of freed prisoners about all prisoners. the probabilty accuration is 10<sup>-500</sup> with bankers' rounding method.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br /><br />2<br />5<br />100<br /><br /><strong>Output (splitted to readibility) :</strong><br />0.40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br />000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br /><strong><br />Whitespace Explanation:</strong><br />If there no input in any line, then do not print any line :)) Sorry for inconvenience. &gt;:)<br /></pre>


______________________________________________________
COWPIC||||||true||||||


<p>Farmer John wants to take a picture of his entire herd of N (1 &lt;= N &lt;= 100,000) cows conveniently numbered 1..N so he can show off to his friends. <br /><br />On picture day, the cows run to form a single line in some arbitrary order with position i containing cow c_i (1 &lt;= c_i &lt;= N). Farmer John has his own ideas about how the cows should line up. <br /><br />FJ thinks cow i may stand only to the left of cow i+1 (for all i, 1 &lt;= i &lt;= N-1) and that cow N may only stand to the left of Cow 1.&nbsp; Of course, no cow will stand to the left of the first (leftmost) cow in the line.<br /><br />The cows are hungry for the promised post-photo dinner, so Farmer John wants to take the picture as quickly as possible. Cows are not great at following directions, so he will only choose a pair of adjacent cows and have them switch places once per minute. How quickly is Farmer John able to get them into some acceptable order? <br /><br /><br />Consider a set of 5 cows whose initial lineup looks like this:<br /><br /><span style="font-family: courier new,courier;">&nbsp;&nbsp;&nbsp;&nbsp; Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp; 5&nbsp; 4&nbsp; 2&nbsp; 1<br /></span><br />He can first swap the second pair of cows:<br /><br /><span style="font-family: courier new,courier;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 2 1<br /></span><br />and then swap the rightmost pair:<br /><span style="font-family: courier new,courier;"><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 1&nbsp; 2<br /></span><br />to yield an acceptable lineup that required but two minutes of cow swapping.</p>

*******InputConstraints*******

<p>Line 1: A single integer: N<br />Lines 2..N+1: Line i+1 contains the number of the i-th cow in line: c_i</p>

*******OutputConstraints*******

<p>Line 1: The minimum amount of time, in minutes, that it takes Farmer John to get the cows into some appropriate order.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />3<br />5<br />4<br />2<br />1<br /><br /><strong>Output:</strong><br />2<br /></pre>


______________________________________________________
TREEISO||||||true||||||


<p>Given two undirected trees T1 and T2 with equal number of vertices N (1 &le; N &le; 100,000) numbered 1 to N, find out if they are isomorphic.<br /><br />Two trees T1 and T2 are isomorphic if there is a bijection f between the vertex sets of T1 and T2 such that any two vertices u and v of T1 are adjacent in T1 if and only if f(u) and f(v) are adjacent in T2.</p>

*******InputConstraints*******

<p>The first line of input contains the number of test cases nTest (1&lt;= nTest &lt;= 400). Each test case contains:</p>
<ul>
<li>The first line contains the number of nodes N.</li>
<li>Each of next N-1 lines contain two integers A, B, denoting that there is an edge in T1 between nodes A and B (1 &le; A, B &le; N).</li>
<li>Each of next N-1 lines contain two integers A, B, denoting that there is an edge in T2 between nodes A and B (1 &le; A, B &le; N).</li>
</ul>
<p>The sum of N over all test cases will not exceed 100,000.</p>

*******OutputConstraints*******

<p>For each test case print YES if T1 and T2 are isomorphic and NO otherwise.&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />4<br />4 2<br />4 1<br />2 3<br />4 2<br />2 3<br />4 1<br />5<br />3 4<br />3 2<br />3 5<br />3 1<br />3 4<br />4 2<br />2 5<br />2 1

<strong>Output:</strong>
YES<br />NO
</pre>


______________________________________________________
JZPSTA||||||false||||||

<p>Recently <a href="../JZPCIR/" target="_blank">Zippy</a> recieved four stacks, named A B C D respectively. Firstly, there are n elements in stack A (the element sequence is a permutation of 1..n), and stack B C D are empty. He can do four types of operations:</p>
<p>operation a: push the top element of stack A to stack B (if stack A is not empty, this operation can be done)</p>
<p>operation b: push the top element of stack B to stack D (if stack B is not empty, this operation can be done)</p>
<p>operation c: push the top element of stack A to stack C (if stack A is not empty, this operation can be done)</p>
<p>operation d: push the top element of stack C to stack D (if stack C is not empty, this operation can be done)</p>
<p>He can do 2*n operations in total. Obviously, there are n elements in stack D after he did the 2*n operations. Then he take out the top element in stack D one by one. If the first element he takes out is n, the second is n-1, ... , the last is 1, he will be very happy. Also, he wants to make the operation sequence he did lexicographic smallest.</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Input</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">First line is a number t, which is the number of testcases.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">The following t lines, each line contains a integer n, which is the number of sectors. (5&lt;=n&lt;=10^18)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Then following t testcases. For each test case, the first line contains a number n, which denotes the number of the elements in stack A. The second line contains n numbers, separated by a space, which are the elements in stack A, from top to the bottom.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Output</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">For each case, output a line. If there exists an answer, output the lexicographic smallest one. If not, output 0.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Example</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Input:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">2</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">4</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">1 3 4 2</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">4</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">2 3 4 1</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Output:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">a b a c a b b d</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">0Zippy jumps for years, and finally knows that jump is very boring. Then he found out a new way to&nbsp;</div>

______________________________________________________
ADV04A1||||||true||||||


<p>Daniel is building towers out of blocks. He has many black and white blocks. He has built n towers out of those. Now he suggests Max playing the following game. Black block will belong to Daniel and white blocks will be Max's blocks. During his turn the player can take any of his blocks from any tower and remove it and all the blocks above it. As usual the player who can't make the move loses. Daniels make the first move. Determine who will win if both players play optimally.


*******InputConstraints*******

<p>The input starts with number t - the amount of test cases. The first line of each test is number n - the number of towers. Then n strings follow. Each string is formed of 'B' and 'W' characters, where 'B' means bleck block and 'W' - white block. Each string describes one tower from bottom to top.


*******OutputConstraints*******

<p>For each test case print 'Win' if Daniel wins and 'Loss' if Max wins given both players play optimally.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5
BBWWB
BWBB
BB
WWW
WB

<b>Output:</b>
Win

</pre>

<h4>Beware! Much input data.</h4>



______________________________________________________
ADV04B1||||||true||||||


<p>There is a king in the lower left corner of the n Ã— n checkmate board. The king can move one step right, one step up or one step up-right. How many ways are there for him to reach the upper right corner of the board?


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. Next T lines consist of single integer n - the size of the board.


*******OutputConstraints*******

<p>For each test case output the munber of ways to reach upper right corner of n Ã— n board modulo 1000003.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
3

<b>Output:</b>
3
13

</pre>



______________________________________________________
ADV04C||||||true||||||


<p>Deal or No Deal is played in many different ways around the world. Many different countries have their own version or versions of the show, each with their own twists on the same general format. The general format is the following.
<p>The game revolves around the opening of a set of numbered briefcases, each of which contains a different prize (cash or otherwise). The contents of all of the cases are known at the start of the game, but the specific location of any prize is unknown. The value of each of the cases is indicated by a label or card sealed within it. The contestant claims (or is assigned) a case to begin the game. The case's value is not revealed until the conclusion of the game.
<p>The contestant then begins choosing cases to be removed from play. The amount inside each choice is immediately revealed; by process of elimination, the amount revealed cannot be inside the player's chosen case. Throughout the game, after a predetermined number of cases have been opened, the banker offers the contestant an amount of money and/or prizes to quit the game, the offer based roughly on the amounts remaining in play and the contestant's demeanor. The player then answers the titular question, choosing:
<ul>
<li>"Deal", accepting the offer presented and ending the game, or</li>
<li>"No Deal", rejecting the offer and continuing the game.</li>
</ul>
<p>This process of removing cases and receiving offers continues, until either the player accepts an offer to 'deal', or all offers have been rejected and the values of all unselected cases are revealed. The player wins the value of the deal taken, or if no deal is taken, the contents of the player's case.
<p>For the sake of this problem we will consider that the banker offers are deal before each removing of cases. Also we will assume that banker follows the particular model of contestants behaviour which is - if the banker offers the contestant the prize x the probability that the contestant accepts the deal is:</p><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:deal">,<p>
where min and max are the minimum and maximum prizes left in the game respectively. The banker wants to minimize the expexted prize the contestant wins. Help the banker calculate the expected prize the contestant is going to win if the banker offers optimal deals.


*******InputConstraints*******

<p>The first line of input is n - the number of briefcases. Next lines consists of n integers a<sub>1</sub>, a<sub>2</sub>, &#8230;, a<sub>n</sub> - the prizes in the briefcases. Number q follows - the amount of situations the banker needs to evaluate. The description of each sitation follows: k &#8211; the number of prizes still in the game; b<sub>1</sub>, b<sub>2</sub>, &#8230;, b<sub>k</sub> &#8211; the prizes themselves.


*******OutputConstraints*******

<p>For each situation print the expected prize the contestant is going to win and also the optimal deal the banker should offer. Both numbers should be printed with two digits after the dot.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
10 20 30 40
4
2 10 20
2 20 30
2 40 10
4 20 30 10 40

<b>Output:</b>
14.59 12.66
24.59 22.66
23.76 17.99
22.40 17.08

</pre>



______________________________________________________
ADV04D||||||true||||||


<p>There is a UFO in the form of the disc of radius r. Currently its center is in point A and it needs to move its center to point B as soon as possible. But the tricky inhabitants of the Earth are starting to suspect something, so they have built a redar in point C with a range of R, which is able to detect a UFO, if any part of it will be in the range. Because of the special features of the UFO it cannot change its height and always maintain vertical alignment. Determine the shortest path for the UFO to reach its destination not being caught by the radar.


*******InputConstraints*******

<p>The first line of input contains number T &#8212; the amount of test cases. Next T line consist of eight integers each x<sub>A</sub>, y<sub>A</sub>, x<sub>B</sub>, y<sub>B</sub>, x<sub>C</sub>, y<sub>C</sub>, r and R &#8212; the coordinates of points A, B, C and radii of the UFO and radar coverage. It is guaranteed that the UFO won't be within the radar coverage in points A and B.


*******OutputConstraints*******

<p>For each test case output a real number which is the shortest UFO path with two decimals after the dot.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
0 0 8 0 4 0 1 1

<b>Output:</b>
9.02

</pre>



______________________________________________________
ADV04E||||||true||||||


<p>Daniel enjoys watching TV series. One of his favourite is Futurama. One episode has the following plot.<p>Professor Farnsworth switches bodies with Amy using a new invention so that he can relive his youth. Likewise, Amy is reminiscent of her younger days of constantly eating and wishes to use the Professor's skinny body to gorge herself with food once again. Later, they find they cannot switch their bodies back with each other, because the device will not operate on the same pairing of bodies. The Professor thoughtlessly suggests they might be able to switch back to their original bodies with a third person. Bender switches bodies with the Professor (Amy's body) so he can perform a robbery without being identified. After realizing his mistake, the Professor, now in Bender's body, tires of trying to solve the problem. He decides to live a life of daring stunts and joins a robot circus.
Bender, now in Amy's body, is caught aboard the yacht of Robo-Hungarian emperor Nikolai. When Bender states that he is really a robot who has switched bodies with a human, Nikolai reveals that he feels trapped by his wealth and wishes to live the life of a normal, "peasant" robot. Bender tricks him into switching bodies with a robot wash bucket and inhabits Nikolai's body, planning to live like an emperor. However, he discovers that Nikolai's fiancÃ©e and first officer are plotting to kill him. Bender is saved with the assistance of the Professor and the circus' loyal Robo-Hungarian citizens. Meanwhile, Leela switches bodies with Amy, thus inhabiting the Professor's body, when she comes to believe that Fry only loves her for her beauty. In order to beat Leela at her own game, Fry switches bodies with Dr. Zoidberg in an attempt to repulse Leela. This leads them to one-up each other using various disgusting acts while on a date, which climaxes when the two have sex with each other in their equally grotesque bodies, and reconcile. During this time, Amy has overeaten in Leela's body, making it overweight. She switches bodies with Hermes, so she can continue eating while Hermes slims Leela's body back down. While eating, she witnesses Fry and Leela making out in the Professor and Dr. Zoidberg's bodies and loses her appetite for food. Concurrently, Zoidberg and Nikolai, in the respective bodies of Fry and the robot wash bucket, become friends and attempt to assume the lives of Fry and Bender, blowing up their apartment in the process. The bucket, now in Amy's body, professes its love to Scruffy the Janitor, but he turns it away. Finally, two Globetrotters, Ethan "Bubblegum" Tate and "Sweet" Clyde Dixon, mathematically prove that everyone's minds can be restored using two additional bodies and then successfully do so, with themselves as the extras.<p>We need to replicate how they have accomplished this. We will consider that a certain amount of body switches already took place. We need to determine the sequence of switches after which everyone is in self body, using no more than two extra bodies. Don't forget that two specific bodies can be mind switched only once.


*******InputConstraints*******

<p>The first line of input contains t - the number of test cases. The description of tests follows. The first line of each test is numbers n - the numbre of characters and m - the number of body swtiches already taken place. Next m lines contain the description of switches. Let us mark all bodies with numbers from 1 to n. Then each switch is defined by two numbers a, b - the numbers of bodies used in the switch. The switches are listed chronologically.


*******OutputConstraints*******

<p>Print the number of switches needed to return everyone to their own bodies in the first line of the output. Then you should print the switches themselves in the order they should be performed. The format should be the same as in the input data. You can output any valid solution. However you shouldn't use more than two extra bodies. The extra bodies should be marked as n+1 and n+2. After all the switches the extra characters should be in their own bodies as well. Also you can't use more than 3n swtiches.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 1
1 2

<b>Output:</b>
5
1 3
2 4
2 3
1 4
3 4

</pre>



______________________________________________________
ADV04F1||||||true||||||


<p>There is a n Ã— 1 board. Its cells are numbered with integers from 1 to n. First four cells have indistinguishable chips in them. In one turn you can move one chip to the neighbouring cell or move it symmetrically relatively any other chip (i.e. if you move a chip in cell 10 symmetrically relative to the chip in cell 13 it will end up in cell 16), given that the chip won't leave the board and each cell will have no more than one chip. You need to determine the minimum number of turns needed to reach a certain configuration of chips.


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. Next T lines consist of four integers a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub> and a<sub>4</sub> &#8212; the numbers of cells where the chips should be in the final configuration.


*******OutputConstraints*******

<p>For each test case print single integer - the answer to the problem in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 2 3 4
1 3 4 6

<b>Output:</b>
0
1

</pre>



______________________________________________________
ADV04G1||||||true||||||


<p>Regular expression is an expression which defines a set of strings. In this problem regular expression will contain only small latin letters a-z and special characters &#8216;?&#8217;, &#8216;*&#8217; &#1080; &#8216;+&#8217;. Each letter corresponds to itself in the defined strings. Special character can occur only after some letter and means the number of repetitions of the letter:</p>
<div align="center">
<table border="1" cellspacing="0" cellpadding="1"><tbody><tr><td align="left" nowrap=""> Character</td><td align="left" nowrap="">Repetitions</td></tr>
<tr><td align="left" nowrap=""> <tt>?</tt></td><td align="left" nowrap="">none or one</td></tr>
<tr><td align="left" nowrap=""> <tt>*</tt></td><td align="left" nowrap="">none or more</td></tr>
<tr><td align="left" nowrap=""> <tt>+</tt></td><td align="left" nowrap="">one or more</td></tr>
</tbody></table>
</div>
<p>For example &#8220;ac&#8221;, &#8220;abc&#8221;, &#8220;acc&#8221;, &#8220;abcccc&#8221;, and so on match regular expression &#8220;ab?c+&#8221;.

For the given string find the substring which matches the given regular expression. If there are many such substrings find the most left one. If there are many of those as well fing the longest one.


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. The description of T test cases follows. The first line of each test case is the given string S of length L. Next line contains number n - the amount of regular expressions. Next n lines describe one regular expression Ri each for which you should find the matching substrings.


*******OutputConstraints*******

<p>For each regular expression print the matching substring or -1 if there is no such substring in the given string.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
aabbcc
5
b*c
a?b+c+
ab?c
b?c?
a?b?c?

<b>Output:</b>
bbc
abbcc
-1

a

</pre>



______________________________________________________
ADV04H||||||true||||||


<p>There are two tables. These tables are filled with numeric data. Each column of each table has a unique name. You need to implement JOIN operation for those tables. JOIN creates a new result table by combining column values of the two tables based upon the join-predicate. The query compares each row of the first table with each row of the second to find all pairs of rows which satisfy the join-predicate. When the join-predicate is satisfied, column values for each matched pair of rows of the table are combined into a result row. The result of the join can be defined as the outcome of first taking the Cartesian product of all records in the tables (combining every record in the first table with every record in the second table) - then return all the records which satisfy the join predicate. After that needed column are picked and printed as the result. Moreover the resulting rows should be output in the lexicographic order.


*******InputConstraints*******

<p>The input starts with the description of the first table. The first line consists of k<sub>1</sub> names of the columns of the table separated with spaces. All the names contain only small latin letters and digits. Next line contain number n<sub>1</sub> &#8211; the amount of records in the table. In each of the next n<sub>1</sub> lines there are k<sub>1</sub> integers &#8211; data written in the table. The description of the second table in the same format follows. Next line is number q &#8211; the amount of queries. The description of each query follows in the following format:<p>
<pre>
SELECT &lt;list of the names of columns>
JOIN ON &lt;a name of the column from the first table>=&lt;a name of the column of the second table>
</pre>


*******OutputConstraints*******

<p>For each query print the result of JOIN operation. You should print only the columns given in the query and in the appropriate order. The rows should be ordered lexicographically. The result of each query won't contain more than 50000 records. Print blank line after the answer for each query. See the example for more information.


*******IOTestCases*******


<pre>
<b>Input:</b>
id1 a b
4
1 2 3
2 2 3
3 2 4
2 4 4
id2 c d
3
3 3 3
5 2 1
1 3 4
3
SELECT a,b,c
JOIN ON id1=d
SELECT id1,d
JOIN ON a=c
SELECT id2,id1,d
JOIN ON b=c

<b>Output:</b>
a b c
2 3 2
2 4 3

id1 d
1 1
2 1
3 1

id2 id1 d
1 1 4
1 2 4
3 1 3
3 2 3

</pre>



______________________________________________________
ADV04J||||||true||||||


<p>Daniel marked a point on a plane with sympathetic ink and he has also drawn a regular n-gon with normal ink. Max can see the n-gon, but can't see the point. Max can draw a line and ask Daniel which side of the line the point is. What is the minimum number of questions Max have to ask to define if the point is inside the n-gon in the worst case?


*******InputConstraints*******

<p>First line of the input contains number t - the amount of test cases. Each test consists of the single integer n - the amount of sides of the n-gon.


*******OutputConstraints*******

<p>For each test case print a single number - the anwer to the questiong in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4

<b>Output:</b>
3

</pre>



______________________________________________________
ADV04K||||||true||||||


<p>Once little Petya was learning positional numeral systems. Using such systems the numbers are represented as the sequence of digits</p>
<div align="center"><table class="display dcenter"><tbody><tr valign="middle"><td class="dcell">
</td><td class="dcell"><table border="0" cellspacing="1" cellpadding="0"><tbody><tr><td class="hbar"></td></tr>
<tr><td align="center" nowrap=""><i>a</i><sub><i>n</i></sub>Â <i>a</i><sub><i>n</i>&#8722;1</sub>Â &#8230;Â <i>a</i><sub>2</sub>Â <i>a</i><sub>1</sub>Â <i>a</i><sub>0</sub></td></tr>
</tbody></table></td><td class="dcell">Â =Â </td><td class="dcell"><table class="display"><tbody><tr><td class="dcell" align="center"><i>n</i></td></tr>
<tr><td class="dcell" align="center"><font size="6">&#8721;</font></td></tr>
<tr><td class="dcell" align="center"><i>k</i>=0</td></tr>
</tbody></table></td><td class="dcell">Â <i>a</i><sub><i>k</i></sub>Â <i>b</i><sup><i>k</i></sup>,
</td></tr>
</tbody></table></div>
<p>where b is the base of the numeral system, and 0 &lt;= a<sub>k</sub> &lt; b. Petya was dissapointed that one can represent only non-negative numbers this way. But then he found out that there are systems with negative base such as negabinary system in which b = &#8722;2, a<sub>k</sub> &#8712; {0, 1}. One can represent any integer in this system for example 1110<sub>&#8722;2</sub> = &#8722;6. Moving the idea further Petya came up with his own base b using which he could represent even more numbers given a<sub>k</sub> &#8712; {0, 1}. 
However performing arithmetic operations in this non-standard system turned to be rather difficult. Help Petya implement a calculator for his numeral system.


*******InputConstraints*******

<p>The first line of input is number T - the amount of test cases. Next T lines contain the description of arithmetic expression consisting of two operands and an opertaion separated with spaces. Both operands consist of one &#8216;0&#8217; and &#8216;1&#8217; digits and have the length of no more than 100. Operation is one of &#8216;+&#8217;, &#8216;-&#8217; or &#8216;*&#8217;.


*******OutputConstraints*******

<p>For each test case output a number which is the result of evaluating the given expression.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
11 - 11
1 + 1
1100 * 1100
1101 - 11
111 * 1

<b>Output:</b>
0
1100
111010000
111010110
111

</pre>



______________________________________________________
ADV04L||||||true||||||


<p>If you are travelling a lot you could have met the following problem: different countries use different measurement systems. Notably there are two major measurement systems for distances: metric and imperial. Metric system exploits kilometers while miles are used in the imperial system. It is known that one mile is approximately 1.609 kilometers. By interesting coincidence this is close enough to the value of the golden ration which is about 1.618. On this basis there is an interesting way of converting miles to kilometeres. Let's look into Fibonacci sequence: <i>F</i><sub>1</sub> = <i>F</i><sub>2</sub> = 1, <i>F</i><sub><i>n</i></sub> = <i>F</i><sub><i>n</i>&#8722;1</sub> + <i>F</i><sub><i>n</i>&#8722;2</sub>, &#1076;&#1083;&#1103; <i>n</i> > 2. The ratio of two successive Fibonacci numbers <i>F</i><sub><i>n</i>+1</sub>/<i>F</i><sub><i>n</i></sub> tends to golden ration as <i>n</i> tends to infinity. So you can partition the amount of miles you have into Fibonacci numbers, and you should use as large Fibonacci numbers as possible, then for each element in the partition you should go to the next Fibonacci number and sum up the elements again. That way you will get the approximate amount of kilometers. For example, 40 &#8658; 34 + 5 + 1 &#8658; 55 + 8 + 2 &#8658; 65. That means that 40Â miles is approximately 65Â kilometers (more precise value is 64,37 kilometers). Write a program that implements this method.


*******InputConstraints*******

<p>The first line of input contains number t &#8211; the amount of test cases. The description of t test cases follows. Each test consists of a single integer m - the amount of miles.


*******OutputConstraints*******

<p>For each test case output the amount of kilometers calculated using the method given in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1
7
40
128

<b>Output:</b>
2
11
65
207

</pre>


______________________________________________________
C1LJUTNJ||||||true||||||


<p>Children in a kindergarten have received a large sack containing M candies. It has been decided that the candies are to be distributed among N children.</p>
<p>Each child has stated the number of candies that it wants. If a child isn&rsquo;t given the amount of candy it wants, it will get angry. In fact it&rsquo;ll get angrier for each candy it is deprived of. Some speculate that it&rsquo;s anger will be equal to the square of the number of candy it is deprived of. For instance, if Mirko states that he wants 32 candies but receives only 29, he would be missing 3 candies, so his anger would be equal to 9.</p>
<p>Unfortunately, there is an insufficient amount of candy to satisfy all children. Therefore, the candies should be distributed in such a way that the sum of the children&rsquo;s anger is minimal.</p>

*******InputConstraints*******

<p>The first line contains two integers, M (1 &le; M &le; 2.10<sup>9</sup>) and N (1 &le; N &le; 100 000).</p>
<p>The following N lines contain integers (one per line) which represent the wishes of the children. Those numbers are all strictly less than 2.10<sup>9</sup>, and their sum always exceeds M.</p>

*******OutputConstraints*******

<p>The first and only line of output must contain the minimum sum of the children&rsquo;s anger.</p>
<p>Note: The test cases will ensure that the result fits in a 64-bit unsigned integer: int64 in Pascal, long long in C/C++, long in Java.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 3 <br />1 <br />3 <br />2<br /><strong>Output:</strong><br />1<strong><br /><br />Input:</strong><br />10 4<br />4<br />5<br />2<br />3<strong><br /><br />Output:</strong><br />4</pre>


______________________________________________________
C1TABOVI||||||true||||||


<p>Zvonkec is yet another programmer employed in a small company. Every day he has to refactor one file of source code. Much to his dismay, the source is usually far from being clear and tidy. He is especially bothered by uneven indentation, i.e. the number of tabulators (tabs) indenting each line.</p>
<p>Fortunately, his editor has a command to select a group of consecutive lines and add or delete a character from the start of each one. Help&nbsp; Zvonkec tidy up the code as quickly as possible.</p>
<p>You are given the number of lines N, a sequence specifying the current number of tabs at the start of each line, and a sequence specifying the required number of tabs at the start of each line.</p>
<p>Zvonkec can execute any number of commands consisting of:</p>
<p>&#9679; selecting any number of consecutive lines<br />&#9679; adding or deleting a single tab to/from the front of each of the selected lines</p>
<p>The two actions above comprise a single command, regardless of the number of selected lines. It should be noted that it is forbidden to delete more tabs from a line than are actually present at the start of a line, as the editor would start deleting characters other than tabs.</p>
<p>You are asked to calculate the minimum number of commands required to tidy up the code.</p>

*******InputConstraints*******

<p>The first line of input contains a positive integer N (N &le; 1000).</p>
<p>The second line contains a sequence of N integers Pi (0 &le; Pi &le; 80), specifying the number of tabs at the start of i-th line before any editing.</p>
<p>The third line contains a sequence of N integers Ki (0 &le; Ki &le; 80), specifying the number of tabs that Zvonkec would like at the start of i-th line.</p>

*******OutputConstraints*******

<p>The first and only line of output must contain the required number, as specified in the problem statement.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 <br />3 4 5 <br />6 7 8<br /><br /><strong>Output:</strong><br />3<strong><br /><br />Input:</strong><br />4 <br />1 2 3 4 <br />3 1 1 0<strong><br /><br />Output:</strong><br />6<strong><br /></strong><strong><br />Input:</strong><br />4<br />5 4 5 5<br />1 5 0 1<strong><br /><br />Output:</strong><br />10<strong><br /></strong><br /></pre>


______________________________________________________
C2CRNI||||||true||||||


<p>Even though he has found all the most amusing rides, Mirko&#8223;s enthusiasm still isn&#8223;t fading. He opened his graph paper notebook and started colouring squares, and a new, even harder problem dawned on him.</p>
<p>You are given a square table consisting of N rows by N columns. Each cell is either black or white. A set of cells forming a rectangle, with horizontal and vertical edges following cell borders, shall be called a black rectangle if all cells inside the rectangle are black and it consists of at least two cells.</p>
<p>(IMAGE)</p>
<p>The left image shows two rectangles which are not black rectangles. The rectangle labelled 1 is not a black rectangle because it contains a white cell, and the rectangle labelled 2 is not a black rectangle because it consists of only one cell. On the other hand, the right image shows three valid black rectangles.</p>
<p>Calculate the number of possible selections of two black rectangles that have no common cells. As the required number can be extremely large, you should output the remainder of dividing that number by 10 007.</p>

*******InputConstraints*******

<p>The first line of input contains the integer N (2 &le; N &le; 1000).</p>
<p>Each of the next N lines contains a single row of the table, consisting of N symbols. The symbol 'C' represents a black cell, while 'B' represents a white cell.</p>

*******OutputConstraints*******

<p>The first and only line of output must contain the remainder of dividing the required number by 10 007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 <br />CC <br />CC<br /><br /><strong>Output:</strong><br />2<br /><strong><br />Input:</strong><br />3 <br />CCB <br />CCB <br />CBB<br /><br /><strong>Output:</strong><strong><br /></strong>5<br /><strong><br />Input:</strong><strong><br /></strong>5<br />BCCBB<br />BBCBB<br />BCCBB<br />BBBBB<br />CCBBB<br /><br /><strong>Output:</strong><br />8</pre>


______________________________________________________
ADV04I1||||||true||||||


<p>Super Board Games Inc. is a big company producing board games. A new game was invented within it which may become very popular. A board divided into square cells is required for this game. Left and lower borders of the board should be level and the height of columns of cells should not increase from left to right. Also the board must be entirely paveable with dominoes. After it was found out that the game is the most interesting when played on the board consisting of n cells, it has been decided to release as many versions of the game using different n-cell boards as possible. Help the company count the number of different boards that can be released.


*******InputConstraints*******

<p>The first line of input is number T - the amount of test cases. Each test is a single integer n - the number of cells.


*******OutputConstraints*******

<p>For each test case output the answer to the problem in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
3
4

<b>Output:</b>
2
0
5

</pre>



______________________________________________________
SPFIBO||||||true||||||


<p>Fibonacci sequence is defined as follow: F<sub>1</sub> = 1, F<sub>2</sub> = 2, F<sub>i</sub> = F<sub>i-1</sub> + F<sub>i-2</sub> (i &gt; 2).</p>
<p>Each natural number X can be expressed by the maximum numbers that are less than or equal to X in Fibonacci sequence: X = a<sub>1</sub>xF<sub>1</sub> + a<sub>2</sub>xF<sub>2</sub> + &hellip; Therefore, in Fibonacci system, X is known as: a<sub>n</sub>a<sub>n-1</sub>&hellip;a<sub>1</sub>. For example, 1 = 1<sub>F</sub>, 2 = 10<sub>F</sub>, etc. If we write all natural numbers successively in Fibonacci system, we will obtain a sequence like this: 1_1_0&hellip; This is called &ldquo;Fibonacci bit sequence of natural numbers&rdquo;.</p>
<p>Your task is counting the numbers of times that bit 1 appears in first N bits of this sequence.</p>

*******InputConstraints*******

<p>Line 1: An integer N (1 &lt;= N &lt;= 10<sup>15</sup>)</p>

*******OutputConstraints*******

<p>Line 1: An integer K is the result</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br /><br /><strong>Output:</strong><br />2<br /></pre>


______________________________________________________
SKYLINE||||||true||||||


<p>The director of a new movie needs to create a scaled set for the  movie. In the set there will be N skyscrapers, with distinct integer  heights from 1 to N meters. The skyline will be determined by the  sequence of the heights of the skyscrapers from left to right. It will  be a permutation of the integers from 1 to N.</p>
<p>The director is  extremely meticulous, so she wants to avoid a certain sloping pattern.  She doesn&rsquo;t want for there to be ANY three buildings in positions i, j  and k, i &lt; j &lt; k, where the height of building i is smaller than  that of building j, and building j&rsquo;s height is smaller than building k&rsquo;s  height.</p>
<p>Your task is to tell the director, for a given number of  buildings, how many distinct orderings for the skyline avoid the sloping  pattern she doesn't like.</p>

*******InputConstraints*******

<p>There will be several test cases in the input. Each test case will  consist of a single line containing a single integer N (3 &le; N &le; 1,000),  which represents the number of skyscrapers. The heights of the  skyscrapers are assumed to be 1, 2, 3, ..., N. The input will end with a  line with a single 0.</p>

*******OutputConstraints*******

<p>For each test case, output a single integer, representing the number  of good skylines - those avoid the sloping pattern that the director  dislikes - modulo 1,000,000. Print each integer on its own line with no  spaces. Do not print any blank lines between answers.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />4<br />0<br /><br /><strong>Output:</strong><br />5<br />14<br /></pre>


______________________________________________________
FINDPATH||||||true||||||


<p>In Tom and Jerry, Jerry, tired of Tom, decided to leave for his cousin <em>Muscle</em> for few days. <em>Muscle</em> is characterized as <em>A very strong Mouse that has a fondness for beating up cats</em>.</p>
<p>&nbsp;Jerry has some mysterious anti-Tom numbers (a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... a<sub>m-1</sub>, a<sub>m</sub>) so that he can jump from position (say x) to x*a<sub>i</sub>&nbsp; , for any value of a<sub>i</sub> ( 0 &lt; i &lt;= m). These jumps are safe from Tom and other cats also. The goal is to reach <em>Muscle</em> safely, without making a single jump which can be sensed by cats. Since Jerry knew you are good at puzzles, he ask you to Help Him!!!</p>
<p>Find whether Jerry can reach cousin<em> Muscle</em>. If yes, print the minimum  number of steps required, followed by the path in the next line,  otherwise -1.</p>
<p>The starting position is 1.</p>
<p><strong>Constraints:</strong></p>
<p>0 &lt; n &lt;= 10<sup>10</sup></p>
<p>0 &lt; m &lt;= 10</p>
<p>0 &lt; a<sub>i</sub> &lt;= 20&nbsp; (1 &lt;= i &lt;= m)</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>There are about 100 test cases. Each test case consists of two lines. In first, there is n and m, position of Uncle Muscle and number of anti-Tom number, respectively. Follows, m space separated anti-Tom number in the next line. Read test cases upto end of file.</p>

*******OutputConstraints*******

<p>For each test case, if the path is possible, print the minimum number of jumps required to reach Cousin <em>Muscle</em>, followed by the stops (including starting and final position) in the next line.If there are more than one path, print the lexicographically smallest one. If no such path exists, print -1.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />12 2<br />2 3<br />10 3<br />2 3 5<br />13 6<br />2 4 6 8 10 12<br /><br /><strong>Output:</strong><br /><br />3<br />1 2 4 12<br />2<br />1 2 10<br />-1<br /><br /><br /><span style="text-decoration: underline;">Explanation for Test case</span>:<br />12 2<br />2 3<br /><br />There minimum no. of stops are<strong> </strong>3<strong>.</strong><br />But there are more than one path with 3 steps,<br />a) 1 2 4 12<br />b) 1 2 6 12<br />c) 1 3 6 12<br /><br />Since the lexicographically smallest term has to be printed:<br />a) 1 2 4 12 <br />is the answer.<br /><br /></pre>


______________________________________________________
OSPROB1||||||false||||||

	<form action="/newsubmit/OSPROB1/" method="post" id="newform">
<!--BISMILLAHIRRAHMANIRRAHIM-->
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><a name="__DdeLink__4_1723023814"></a>&nbsp;</span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">As you all know, Operating System (OS) is a software that controls the execution of computer programs and may provide various services. Although modern operating systems are very easy to use and give us lots of services, their designing is not so easy. It needs lots of work and time to design a good OS. But no OS is perfect. Either they are not so usable or they are not so secure (got tons of viruses). Lingates, as an excellent programmer, wants perfection in all things. So he decided to not use this OSs and write his own OS. But he found out this work is not so easy to do alone even for a programmer like him. So he needs your help.&nbsp;</span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">As a programmer with honor he won&rsquo;t let you do <em>equal or more</em> work in a turn then him (Means Lingates has to do more work then you on each turn). Each turn you both divide the works between yourself. But the works are related so it&rsquo;s better to take works which are adjacent. Like if there are <strong>5</strong> works <strong>5, 2, 7, 1, 3</strong> then Lingates would take 1st work and give you the 2nd work. But you can't take 2nd and 3rd work because that sum to <strong>7+2 = 9</strong> which is more than his work (<strong>5</strong>). Again you can't take 2nd and 4th work because they are not adjacent. After you both finish your work you both will again distribute your works. There is no limit how much work you both can take on a turn. Like Lingates can take 1st and 2nd work on first turn and give you <em>no work</em> on that turn or he can take 1st, 2nd and 3rd turn (total <strong>5+2+7=14</strong>) and give you only 4th (<strong>1</strong>) or both works (<strong>1+3=4</strong>). As you are helping him he let you to divide the works but it has to be that Lingates has to do more work on each turn. As you are also a programmer with honor you also like to take the turns and divide the work on each turn such that it <strong><em><span style="text-decoration: underline;">maximizes</span></em></strong><span style="text-decoration: underline;"> <strong><em>your total works</em></strong></span>.</span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">Write a program which will take the list of work and give the total amount of work done by Lingates and you if you make the list optimally. Again Lingates will do any amount of work you will give him in any turn as long as your work on that turn is less than his.<br /> <!--[if !supportLineBreakNewLine]--><br /> <!--[endif]--></span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><strong>Input</strong></span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">The first line will be number of test cases (<strong>T&lt;=500</strong>) and each case will start with an integer n (<strong>0&lt;=n&lt;=100</strong>). In the flowing line n numbers will given as the amount of works (all will be <strong>non negative integer &lt;1000</strong>)</span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><strong>Output</strong></span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">A single line for each test case first the total work of Lingates and second the work of your.</span></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><strong>Example</strong></span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><strong>Input:</strong> <br /> 4 <br /> 3 <br /> 1 2 3 <br /> 5 <br /> 5 2 7 1 3 <br /> 5 <br /> 6 6 6 6 6 <br /> 7 <br /> 4 9 5 7 6 5 1 <br /> <strong>Output:</strong> <br /> 6 0<br /> 12 6<br /> 18 12<br /> 20 17</span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;"><br /> <strong>Explanation:</strong></span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">In 1st case you have to give Lingates all 3 works because 1&lt; (2+3) and (1+2) =3, so you can't take any work.</span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">In 2nd case you can give Lingates 1st work (5) and you can take 2nd (2). Then you can give Lingates the 3rd (7) and you can take the rest (1+3).</span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">In 3rd case you can give Lingates 1st to 3rd work (6+6+6=18). You can take the left two works (6+6=12).</span></span></p>
<p class="MsoNormal" style="margin-bottom: 0.0001pt; line-height: normal;"><span style="font-family: verdana,geneva;"><span style="font-size: small;">In 4th case you can give Lingates 4 and 9 and you will take 5 and 7. Then in next turn you can give him 6 and you own take 5. Then you can give him 1. <br /> So totaling (4+9+6+1) =20 and (5+7+5) =17.</span></span></p>
	
	<div id="global_result">
	</div>
	<br/>
	<table class="problems" width="100%">
		<tr class="headerrow">
			<th width="17%" class="">ID</th>
			<th width="36%">RESULT</th>
			<th width="16%">TIME</th>
		</tr>
		<tr class="kol3">
			<td class="status_sm"></td>
			<td manual="0" status="15" id="statusres_8071" class="statusres td5">
	    	</td>
	    	<td id="statustime_8071" class="statustext td6">
	    	</td>
		</tr>
	</table>
	
	<input type="hidden" name="ajax" value="1"/>
	<input type="hidden" name="ajax2" value="1"/>
	<script type="text/javascript" src="/gfx/jquery-ui-1.7.1.custom.min.js"></script>
	<script type="text/javascript" src="/gfx/jquery.form.js"></script>
	<input type="hidden" id="debug" value="0"/>

<script language="JavaScript">
<!--
		var loader = "<img src='/gfx/loader.gif'/>";
        var screen_width = 1;
        var screen_height = 1;
        var win_width = 1;
        var win_height = 1;
        var win_left = 1;
        var win_top = 1;
        var tmp = "";
		function load(){
                a = new Array();
                for(var i = 0; i<9; i++){
                        var results = $('.statusres[status='+i+'][manual=0]').each(function(i, el){
                                var zz = $(el).attr('id').substring(10);
                                a.push( zz );
                                $('#statustime_'+zz).html(loader);
                        });
                };
                if( a.length > 0 ){
                $.ajax({
                        type: "POST",
                        url: "/status/ajax=1,ajaxdiff=1",
                        data: "ids="+a.join(','),
                        dataType: 'json',
                        success: function(data){
                                for(var i = 0; i<data.length; i++){
                                        $("#statusres_" + data[i].id).attr('status', data[i].status);
                                        $("#statusres_" + data[i].id).html(data[i].status_description);
                                        $("#statustime_" + data[i].id).html(data[i].time);
                                        $("#statusch_" + data[i].id).html(data[i].chk_id);
                                        if( data[i].status >= 9 ){
                                                $("#statusres_" + data[i].id).parent('tr').attr('class', 'kol');
                                                $("#statusmem_" + data[i].id).html(data[i].mem);
                                        }
                                        if( data[i].status == 15 ){
                                                $("#statusres_" + data[i].id).parent('tr').attr('class', 'kol3');
                                        }
                                        if( data[i].status < 9 ){
                                                $("#statusres_" + data[i].id).html( $("#statusres_" + data[i].id).html());
                                                $("#statustime_" + data[i].id).html( loader );
                                        }
                                        $("#statusres_" + data[i].id).parent().attr('class', data[i].color);
                                }
								setTimeout(load, 4000);
                        },
                        error: function(err,a,b){
							if( $("#debug").attr("value") == 1 ){
								alert(err);
								alert(a);
								alert(b);
								tmp = err;
							};
                        }
                });
                }
        }

$(document).ready(function(){
        function reload_window_dim(){
			screen_width = $(window).width() - 10;
			screen_height = $(window).height() - 10;
			win_width = screen_width * 4 / 5;
			win_height = screen_height * 4 / 5;
			win_left = screen_width / 10;
			win_top = screen_height / 10;
		}
		reload_window_dim();

        load();
    
        $.ui.dialog.defaults.bgiframe = true;
	
		function source_code_execute(){
			$("#op_window_sourcecode_link").unbind("click");
			$("#op_window_sourcecode_link").bind("click", function(){
				$('#op_window_mjudge').hide();
				$('#op_window_sourcecode').show();
				var url = $('#url').attr('value');
				loadCode(url, "op_window_sourcecode", false);
				return false;
			});
		}
		function plain_text_execute(){
			$("#op_window_plaintext_link").unbind("click");
			$("#op_window_plaintext_link").bind("click", function(){
				$('#op_window_mjudge').hide();
				$('#op_window_sourcecode').show();
				var url = $('#url').attr('value');
				url = url.replace('src', 'src\/plain');
				loadCode(url, "op_window_sourcecode", true);
				return false;
			});
		}
		function copy_to_submit_execute(){
			$("#op_window_copy_to_submit_link").unbind("click");
			$("#op_window_copy_to_submit_link").bind("click", function(){
				var id = $('#solutionid').attr('value');
				var pcode = $('#pcode').attr('value');
				window.location.href = "/submit/"+pcode+"/?id="+id;
			});
		}
		function manual_rejudge_execute(){
			$("#op_window_mjudge_link").unbind("click");
			$("#op_window_mjudge_link").bind("click", function(){
				$('#op_window_mjudge').show();
				$('#op_window_sourcecode').hide();
				return false;
			});
		}
		
		function createWindow(){
			reload_window_dim();
			$("#op_window").dialog({
				//bgiframe: true,
				autoOpen: false,
				height: win_height,
				width: win_width,
				modal: true,
				buttons: {
					Close: function() {
						$(this).dialog('close');
						//$(this).dialog('destroy');
					}
				}
			});
			$(".ui-dialog .ui-dialog-titlebar").append("<a class=\"ui-dialog-titlebar-resize ui-corner-all\" href=\"\"><span class=\"ui-icon ui-icon-newwin\" unselectable=\"on\" style=\"-moz-user-select: none;\">resize</span></a>");
			$(".ui-dialog .ui-dialog-titlebar .ui-icon-newwin").bind("click", function(){
				reload_window_dim();
				if( ! $(".ui-dialog").attr("max") ){
					$('#op_window').parents('.ui-dialog:first').animate({ width: screen_width, height: screen_height, left: 0, top: 0 });
					$('#op_window').animate({ width: screen_width, height: screen_height-100 });
					$(".ui-dialog").attr("max", "1");
				} else {
					$('#op_window').parents('.ui-dialog:first').animate({ width: win_width, height: win_height, left: win_left, top: win_top });
					$("#op_window").animate({ width: win_width, height: (win_height - 100) });
					$(".ui-dialog").attr("max", "");
				}
				return false;
			});
			source_code_execute();
			plain_text_execute();
			manual_rejudge_execute();
			copy_to_submit_execute();
		};
		
		createWindow(); 
		
		
		function loadCode(url,objectid,pre){
			$("#"+objectid).html(loader);
			if( ! url ) return;
			$.ajax({
				type: "POST",
				url: url,
				cache: false,
				data: "post=1",
				success: function(data){
					if( ! pre ){
						$("#"+objectid).html(data);
					} else {
						$("#"+objectid).html("<pre>" + data + "</pre>");
					}
				},
				error: function(){
					$("#"+objectid).html("error ;(");	
				}
			});
		}
		
		
					
			$(".op_window").bind("click", function(){
				reload_window_dim();
				$('#solutionid').attr('value', ( $(this).attr('sid') ) );
				$('#pcode').attr('value', ( $(this).attr('pcode') ) );
				$('#op_window').dialog('open');
				$('#op_window').dialog('enable');
				//$('.ui-dialog').css('display', 'block');
				$(".ui-dialog").attr("max", "");
				var url = "/files/src/" + $(this).attr('sid') + "/";
				$('#url').attr('value', url);
				loadCode(url, "op_window_sourcecode", false);
				$("#op_window_sourcecode_link").click();
				return false;
			});
			
				
		
		
		$(".ideone-run").click(function(){
			var $this = $(this);
			$.ajax({
                	type: "post",
                	url: "/files/src/plain/"+$(this).attr('sid')+"/",
                	cache: false,
                	dataType: 'html',
                	success: function(data){
                		ideone_submit(data, $this.attr('lang'), '', $this.attr('note'), true, true);
                	}
                });
            return false;
		});
		
	});
-->
</script>


	<div id="op_window" title="<a href='#' id='op_window_sourcecode_link'>Source code</a> | <a href='#' id='op_window_plaintext_link'>Plain text</a> | <a href='#' id='op_window_copy_to_submit_link'><b>Copy to submit</b></a>">
		<input type="hidden" class="url" value="" id="url"/>
		<div id="op_window_sourcecode">
		code...
		</div>
		<input type="hidden" class="solutionid" id="solutionid"/>
		<input type="hidden" class="pcode" id="pcode"/>
	</div>
	
	<script type="text/javascript">
	<!--
		$(document).ready(function() {
			$("#newform").bind('submit', function() {
				$(this).ajaxSubmit({
					success: function(responseText, statusText){
						var id = responseText;
						$(".status_sm").html(id);
						$(".td5").attr('id', 'statusres_'+id);
						$(".td5").attr('status', '0');
						$(".td6").attr('id', 'statustime_'+id);
						$(".td7").attr('id', 'statusmem_'+id);
						load();
					}
				});
				return false;
			});
		});
	-->
	</script>
	
	
	<br/><br/>
	<input type="submit" value="Submit solution"/>
	
	</form>


______________________________________________________
MULPAL||||||true||||||


<p>Given a sequence of N integers. Find two disjoint contiguous palindromic subsequences. Lets call them X and Y. Your task is to find X and Y such that product of their lengths is maximal possible.</p>

*******InputConstraints*******

<pre>First line will contain one integer N (1 <span>&le;</span> N <span>&le;</span> 10<sup>6</sup>).<br />Second line will contain N integers representing a sequnce from the text of the task (0 <span>&le;</span> A<sub>i </sub><span>&le;</span> 2*10<sup>9</sup>).</pre>

*******OutputConstraints*******

<pre>First and only line of output should contain only one integer, the maximum possible product from the text of problem.</pre>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1 1<br /><br /><strong>Output:</strong><br />1<strong><br /><br /><br /><br />Input:<br /></strong>4<br />1 1 2 2<br /><br /><strong>Output:</strong><br />4<br /><br /><br /><br /><strong>Input:</strong><br />6<br />10 11 12 12 11 10<br /><strong><br />Output:</strong><br />4<br /><br /><br /><br /><strong>Input:</strong><br />6<br />0 1 0 1 0 1<br /><br /><strong>Output:</strong><br />9<br /><br /><strong>&nbsp;</strong></pre>


______________________________________________________
ACPC10G||||||true||||||


<p>Imagine a chess board that extends indefinitely in both horizontal and vertical directions. N identical knights are placed on this board, each in a different square. N different squares are specially marked, which we will call the target squares, which could be different from where the knights are initially at. We would like you to determine the minimum number of knight-steps needed so that each of the target squares is occupied by one of the knights.</p>
<p style="text-align: center;"><img title="a" src="../../../content/omar_azazy:ACPC10G" alt="a" width="276" height="278" /></p>
<p>As illustrated in the figure, a knight moves using the normal &rdquo;L&rdquo; move (1 square in one dimension and 2 squares in the other dimension.) For this problem, it is possible for more than one knight to occupy the same square while trying to reach its final destination as long as each knight ends up in a different target square.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified using 2N +1 lines.<br />The first line specifies (1 &le; N &le; 15) which is the number of knights (or targets.) The following N lines each specifies the position of a knight by specifying two integers representing the x and y location. The remaining N lines each specifies the position of a target square again by specifying two integers representing the x and y location. All coordinates are 32-bit signed integers.<br />The last case is followed by a line with a single zero.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. m<br />Where k is the test case number (starting at one,) and m is the minimum number of moves.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />3 5<br />6 5<br />5 3<br />7 3<br />0<br /><strong>Output:</strong><br />1. 3</pre>


______________________________________________________
ACPC10H||||||true||||||


<p>N jumping beans are standing in a line. At each second, a bean jumps. Your assignment is to figure the final position of the beans after a given number of seconds. To make the explanation easier, let&rsquo;s assign a unique letter to each bean, and for simplicity, let&rsquo;s assume the beans are initially standing in order: A, B, C, etc. To simplify even further, let&rsquo;s assume N = 4, so initially the beans are standing in the order ABCD. At the first second, A jumps, swapping its place with B. Now the order is BACD. At the second second, it&rsquo;s B&rsquo;s turn, but this time swapping its place with A, then C, resulting in the standing order ACBD. More formally: at second s, the left most bean that has jumped the least number of times will do the swap s times, each time swapping its place with the bean on its right. Note that when the right-most bean swaps, it moves to the left-most position, pushing everybody else one place to the right. So, continuing with the previous example, and starting with the arrangement ACBD, it is bean C&rsquo;s turn, since it is the left-most bean that has jumped the least amount of times. Being at the third second, C will swap three times, first resulting in ABCD, then ABDC, and then CABD. At the fourth second, it&rsquo;s bean D&rsquo;s turn to jump. At the fifth second, and since all the four beans have jumped exactly once, the bean that will jump is the bean standing at the left-most position.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a single line specifying an integer T and a string S where (0 &lt; T &lt; 10<sup>9</sup> ) is the number of seconds and S is the initial arrangement of the beans. S is a non empty string made of different upper-case letters (&rsquo;A&rsquo;. . . &rsquo;Z&rsquo;).<br />The last test case is followed by a line having a single 0.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. S<br />Where k is the test case number (starting at one,) and S is the arrangement of the beans after jumping for T seconds.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 ABCD<br />13 ACM<br />0<br /><br /><strong>Output:</strong><br />1. CABD<br />2. CAM</pre>


______________________________________________________
ACPC10I||||||false||||||

<p>In light of the exploding population on earth, a number of cities are being constructed on the moon. We would like you to assist in determining the best road system for these cities. Considering the high cost associated with building roads on the moon, all what is required is for the roads to form a cycle starting from the city that appears first in the input, passing through all other cities exactly once (but in any arbitrary order,) and then ending back to the first. (Yes, this problem is a variation of the traveling-salesman problem.)<br />You are given the cost of building a road between each pair of cities. Roads are one-way, but the cost for building a road from city i to j is the same as the cost of building from city j to i. When roads intersect at a location that is not a city, you must account for the cost of constructing bypassing bridges. Constructing a bypass system costs k &lowast; (k &minus; 1) &lowast; C/2 where k is the number of roads intersecting at that location, and C is a given constant. Note that the cities are laid out so that no three cities fall on the same straight line.</p>

______________________________________________________
ACPC10F||||||true||||||


<p>You&rsquo;ve been assigned the task of programming a new video game called the World of Cubes. The game is played inside a box-shaped object (mathematically speaking: a rectangular cuboid) which we&rsquo;ll call the hall. Within the hall, the player is assigned N positions, called focal points.<br />The player must build N cubes, all parallel to the axes, and each is centered around one of the focal points. The mission is for the N cubes to completely fill the hall. It is acceptable for the cubes to overlap and even to extend beyond the hall. The only restriction is that all the cubes must be of equal side-length. And we would like you to compute the minimum such length.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified using N +1 lines.<br />The first line specifies four integers: (1 &le; N &le; 50) is the number of cubes and (1 &le; X, Y, Z &le; 10<sup>9</sup> ) are the dimensions of the hall. One corner of the hall is at the origin (0, 0, 0), with the opposing corner at (X, Y, Z).<br />N lines follow, each specifying the coordinate of a focal point using three integers: (0 &le; x &le; X), (0 &le; y &le; Y ), and (0 &le; z &le; Z).<br />The last test case is followed by a line containing four zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. D<br />Where k is the test case number (starting at one,) and D is an integer which is the smallest length of the cube edges so that the N cubes would completely fill the hall.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 4 4 8<br />2 2 2<br />2 2 6<br />2 4 4 8<br />2 2 2<br />2 2 5<br />0 0 0 0<br /><br /><strong>Output:</strong><br />1. 4<br />2. 6</pre>


______________________________________________________
ACPC10E||||||true||||||


<p>FIFA is considering a few changes to the way it organizes the Football World Cup. Currently, 32 teams compete for the World Title in two stages. During the first stage, known as the groups stage, the 32 teams are split evenly into 8 groups. Every team in the group plays 3 games, one against each team in their own group. Teams are then ranked within their group according to some points system. During the second (and final) stage, the top two teams from each group advance to the knockout stage where eight games are played to determine eight winners who would then play four games to determine four winners, then two games to determine the two winners who would then play the final game to determine the world champion. Needless to say, for the knockout stage to work, the number of teams in that stage has to be a power of two. FIFA is considering adding more groups, adding more teams to groups, and possibly changing the number of teams advancing from each group to the knockout stage. In addition, FIFA is considering having certain teams (previous champion, host country, etc.) advance to the knockout stage directly (without having to play in the groups stage.) But FIFA needs to know how many games will be played if any of these changes are applied. Please help them!</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a single line made of 4 natural numbers with the following format:<br />G T A D<br />Where (G &gt; 0) is the number of groups; T is the number of teams in each group; A is the number of teams advancing from each group to the knockout stage; and D is the number of teams directly advancing to the knockout stage without going through the groups stage. Note that (0 &lt; A &le; T) and that the four numbers in the input are no larger than 2<sup>16</sup>.<br />If the total number of teams in the knockout stage is not a power of two, your program must increase them to the closest power of two.<br />The last test case is followed by a dummy line made of four -1&rsquo;s.</p>

*******OutputConstraints*******

<p>For each test case, print:<br />G*A/T+D=X+Y<br />where G, A, T, and D are as in the input, X is the total number of games, and Y is the number of teams your program determined it must add.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />8 4 2 0<br />8 4 2 1<br />-1 -1 -1 -1<br /><br /><strong>Output:</strong><br />8*2/4+0=63+0<br />8*2/4+1=79+15</pre>


______________________________________________________
ACPC10A||||||true||||||


<p>According to Wikipedia, an arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. For instance, the sequence 3, 5, 7, 9, 11, 13, . . . is an arithmetic progression with common difference 2. For this problem, we will limit ourselves to arithmetic progression whose common difference is a non-zero integer.<br />On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18, 54, . . . is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric progression whose common ratio is a non-zero integer.<br />Given three successive members of a sequence, you need to determine the type of the progression and the next successive member.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each case is specified on a single line with three integers (&minus;10, 000 &lt; a1 , a2 , a3 &lt; 10, 000) where a1 , a2 , and a3 are distinct.<br />The last case is followed by a line with three zeros.</p>

*******OutputConstraints*******

<p>For each test case, you program must print a single line of the form:<br />XX v<br />where XX is either AP or GP depending if the given progression is an Arithmetic or Geometric Progression. v is the next member of the given sequence. All input cases are guaranteed to be either an arithmetic or geometric progressions.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 7 10<br />2 6 18<br />0 0 0<br /><br /><strong>Output:</strong><br />AP 13<br />GP 54</pre>


______________________________________________________
ACPC10D||||||true||||||


<p>Here&rsquo;s a simple graph problem: Find the shortest path from the top-middle vertex to the bottom-middle vertex in a given tri-graph. A tri-graph is an acyclic graph of (N &ge; 2) rows and exactly 3 columns. Unlike regular graphs, the costs in a tri-graph are associated with the vertices rather than the edges.</p>
<p style="text-align: center;"><img title="a" src="../../../content/omar_azazy:ACPC10D" alt="a" width="271" height="405" /></p>
<p>So, considering the example with N = 4, the cost of going straight down from the top to bottom along the middle vertices is 7 + 13 + 3 + 6 = 29. The layout of the directional edges in the graph are always the same as illustrated in the figure.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases.<br />Each test case is specified using N + 1 lines where the first line specifies a single integer (2 &le; N &le; 100, 000) denoting the number of rows in the graph. N lines follow, each specifying three integers representing the cost of the vertices on the ith row from left to right. The square of each cost value is less than 1,000,000.<br />The last case is followed by a line with a single zero.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. n<br />Where k is the test case number (starting at one,) and n is the least cost to go from the top-middle vertex to the bottom-middle vertex.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />13 7 5<br />7 13 6<br />14 3 12<br />15 6 16<br />0<br /><br /><strong>Output:</strong><br />1. 22</pre>


______________________________________________________
ACPC10B||||||true||||||


<p>Take any positive number, find the sum of the squares of its digits, repeat! You&rsquo;ll end up with an infinite sequence with an interesting property that we would like to investigate further. Starting with the number 5, the sequence is:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (5, 25, 29, 85, 89, 145, 42, 20, 4, 16, 37, 58, . . .)<br />The interesting part is in what comes after 58: 5<sup>2</sup> + 8<sup>2</sup> = 89 which is a number that&rsquo;s already been seen in the sequence. In other words, after 58, the sequence will fall into the repeating cycle:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 89, 145, 42, 20, 4, 16, 37, 58.<br />What&rsquo;s amazing is that this cycle will appear for many other numbers: 3, 18, 36, and 64 just to name a few. (see figure on the following page.) For some numbers, the sequence will fall into another repeating cycle by reaching 1. (see second figure on the following page) For example, starting with 19, you&rsquo;ll end up with the sequence:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (19, 82, 68, 100, 1, . . .)<br />And that&rsquo;s about it. Any number you choose will end up falling into a repeating cycle: Either the 89, 145, . . . cycle or the 1, . . . cycle.<br />Given two numbers, your objective is to generate as few numbers in their sequences for the two sequences to intersect at one common number. For example, given 61 and 29, we can achieve what&rsquo;s required by generating the sequences: (61, 37, 58, 89) and (29, 85, 89). Similarly, for 19 and 100, the sequences would be (19, 82, 68, 100) and (100).</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on a single line having two integers (0 &lt; A, B &lt; 10<sup>9</sup> ).<br />The last case is followed by a dummy line made of two zeros.</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />A B S<br />Where A, B are as in the input and S is the (minimum) sum of the lengths of the two sequences.<br />If the sequences starting at A and B do not intersect, then S = 0.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />89 89<br />19 100<br />61 19<br />0 0<br /><br /><strong>Output:</strong><br />89 89 2<br />19 100 5<br />61 19 0<br /><br /></pre>
<p style="text-align: center;"><img title="a" src="../../content/omar_azazy:ACPC10B_a" alt="a" /></p>
<p style="text-align: center;"><img title="b" src="../../content/omar_azazy:ACPC10B_b" alt="b" /></p>


______________________________________________________
FIBOSUM||||||true||||||


<p>The fibonacci sequence is defined by the following relation:</p>
<p>F(0) = 0</p>
<p>F(1) = 1</p>
<p>F(N) = F(N - 1) + F(N - 2), N &gt;= 2</p>
<p>&nbsp;</p>
<p>Your task is very simple. Given two non-negative integers N and M, you have to calculate the sum (F(N) + F(N + 1) + ... + F(M)) mod 1000000007.</p>

*******InputConstraints*******

<div id="_mcePaste" style="position: absolute; left: -10000px; top: 138px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The rst line contains an integer T (the number of test cases). Then, T lines follow. Each test</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 138px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">case consists of a single line with two non-negative integers N and M.</div>
<p>&nbsp;</p>
<p>The first line contains an integer T (the number of test cases). Then, T lines follow. Each test&nbsp;case consists of a single line with two non-negative integers N and M.</p>

*******OutputConstraints*******

<p>For each test case you have to output a single line containing the answer for the task.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
0 3
3 5
10 19

<strong>Output:</strong>
4
10
10857</pre>

______________________________________________________
HORRIBLE||||||true||||||


<p>World is getting more evil and it's getting tougher to get into the Evil League of Evil. Since the legendary Bad Horse has retired, now you have to correctly answer the evil questions of Dr. Horrible, who has a PhD in horribleness (but not in Computer Science). You are given an array of <strong>N</strong> elements, which are initially all 0. After that you will be given <strong>C</strong> commands. They are -</p>
<p>* <strong>0 p q v</strong> - you have to add <strong>v</strong> to all numbers in the range of <strong>p</strong> to <strong>q</strong> (inclusive), where <strong>p</strong> and <strong>q</strong> are two indexes of the array.</p>
<p>* <strong>1 p q</strong> - output a line containing a single integer which is the sum of all the array elements between <strong>p</strong> and <strong>q </strong>(inclusive)</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>In the first line you'll be given <strong>T</strong>, number of test cases.</p>
<p>Each test case will start with <strong>N </strong>(<strong>N</strong>&lt;=100 000) and <strong>C</strong> (<strong>C</strong>&lt;=100 000). After that you'll be given <strong>C </strong>commands in the format as mentioned above. 1 &lt;= <strong>p</strong>,<strong>q</strong> &lt;= <strong>N</strong> and 1 &lt;= <strong>v</strong> &lt;= 10^7.</p>

*******OutputConstraints*******

<p>Print the answers of the queries.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />8 6<br />0 2 4 26<br />0 4 8 80<br />0 4 5 20<br />1 8 8 <br />0 5 7 14<br />1 4 8<br /><br /><strong>Output:</strong><br />80<br />508<br /><br /><strong><br /></strong><br /></pre>


______________________________________________________
TTOP||||||true||||||


<p>Given a rooted tree, a permutation of its nodes is valid if the following holds: for each pair of nodes <strong>a</strong> and <strong>b</strong>, if <strong>a</strong> is an ancestor of <strong>b</strong>, then <strong>a</strong> appears before <strong>b</strong> in the permutation. Let <strong>P(t)</strong> be the number of valid permutations for a tree <strong>t</strong>.<br /><br />Given an integer N, you can construct all the possible trees of N nodes, numbered from 1 to N, <em><strong>rooted at </strong></em><strong>1</strong>. I'd like to know what's the sum of <strong>P(t)</strong> <strong><em>for all</em></strong> <strong>t</strong> that can be constructed for the given N.</p>
<p><strong>We consider two trees equal iff each node in the second tree has the same parent as it does in the first one.&nbsp;</strong></p>
<p style="text-align: center;"><img title="trees" src="../../../content/syntax_error:ttop.png" alt="trees for N = 3" width="247" height="153" /></p>
<p style="text-align: center;"><em>The picture shows all the possible trees for N = 3.</em></p>

*******InputConstraints*******

<p>A single integer N ( 1 &lt;= N &lt;= 1000000 ).</p>

*******OutputConstraints*******

<p>A single integer representing the solution modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />3<br /><strong>Output:</strong> <br />4</pre>
<p><strong>Explanation:</strong> If you take a look at the picture, you'll see that the first two trees have one valid permutation each, and the third tree has two, namely { 1, 2, 3 } and { 1, 3, 2 }. The total is, of course, 4.</p>


______________________________________________________
SOCIALNE||||||true||||||


<p>Josu&eacute;, one of the undergraduate students in PUCMM, is developing a Social Network, but he is having difficulties in identifying the person that has more possible friends. Two persons are possible friends if they are not friends and they have at least one common friend, for example if person A is friend only to person B, and person B is friend of C, then, A and C are possible friends. You are about to help him in this task. Given the network table, you have to write a program that finds the person that has more possible friends, if more than one person matches this criteria, then select the one that comes first ( the one that has the lower ID).</p>

*******InputConstraints*******

<p>The first line is <strong>T </strong>(1 &le; <strong>T </strong>&le; 1,000), the number of test cases, then <strong>T</strong> test cases follow.</p>
<p>Each test case consists in a 'Y' or 'N' square matrix(<strong>M</strong>x<strong>M</strong>) representing the friendship of the network, where <strong>M</strong> is the number of persons.</p>
<pre><strong>Constraints</strong><br /></pre>
<p><strong>M </strong>(1 &le; <strong>M</strong> &le; 50)</p>
<p>The square matrix has <strong>M</strong> lines, each line has <strong>M</strong> characters.</p>
<p>The first line of the matrix corresponds to person 0, the next line to person 1, and so on.</p>
<p>On each line the leftmost character corresponds to person 0, the next character to person 1, and so on.</p>
<p>So if character j of the line i is 'Y', it means that person 'i' is a friend of 'j'.</p>
<p>For each person i, character i of line i will be 'N'.</p>
<p>For each i,j character j of line i will be the same as character i of line j.</p>

*******OutputConstraints*******

<p>For each test case, you have to output one line containing the ID of the person(0-based) that has more possible friends and the number of possible friends this person has, separated by a blank space.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />NYN<br />YNY<br />NYN<br />NYYY<br />YNNY<br />YNNN<br />YYNN<br />NNYNNNN<br />NNYNNNN<br />YYNYNNN<br />NNYNYNN<br />NNNYNYY<br />NNNNYNN<br />NNNNYNN<br /><strong>Output:</strong><br />0 1<br />2 2<br />3 4<br /></pre>


______________________________________________________
AMR10A||||||false||||||

<p>My kid's school cleared a large field on their property recently to convert it into a playing area.&nbsp; The field is polygonal.&nbsp; The school administration decided to separate the field into two areas by building a straight picket fence between the area for the older kids and the area for the younger kids.&nbsp; The fence would go between two non-adjacent vertices of the polygonal field, and given the shape of the field, all such possible fences would lie strictly and entirely within the field. <br />Naturally, the smaller of the two areas would go to the younger kids.&nbsp; So can you help the school determine what the area of the smaller play-area would be for different fence positions? <br />&nbsp;<br /><strong>INPUT</strong><br />The first line contains 2 numbers N denoting the number of points in the convex polygon and Q denoting the number of possible locations of straight line fences. <br />The next N lines contain 2 integers each. The ith line contains the integers xi yi denoting the coordinates of the ith point of the polygon. The points are given in clockwise order. <br />The next Q lines contain 2 integers a b denoting that a straight line fence is to be drawn connecting a and b. <br />&nbsp;<br /><strong>OUTPUT</strong><br />Output Q lines one corresponding to each query. For each query, output the area of the smaller region for the corresponding query truncated to 1 decimal place. Always have 1 digit after the decimal place, so if the answer is 1, output it as 1.0 instead. <br />&nbsp;<br /><strong>CONSTRAINTS</strong> <br />4 &lt;= N &lt;= 50000 <br />1 &lt;= Q &lt;= 50000 <br />-20,000,000 &lt;= x,y &lt;= 20,000,000 <br />0 &lt;= a &lt; b-1 <br />b &lt; N <br />&nbsp;<br /><strong>SAMPLE INPUT</strong><br />4 2 <br />0 0 <br />0 1 <br />1 2 <br />1 0 <br />1 3 <br />0 2 <br />&nbsp;<br /><strong>SAMPLE OUTPUT</strong><br />0.5 <br />0.5 <br />&nbsp;<br /><strong>EXPLANATION</strong><br />The polygon is given by the points (0,0) (0,1) (1,2) (1,0). &nbsp;<br />In the first query, we join the points (0,1) and (1,0) which leads to the 2 areas given by (0,0) (0,1) (1,0) and (0,1) (1,2) (1,0). The first triangle has an area of 0.5 and the second triangle has an area of 1. The minimum of these 2 is 0.5. <br />In the second query, we join the points (0,0) and (1,2) which leads to the 2 areas given by (0,0) (0,1) (1,2) and (0,0) (1,2) (1,0). The first triangle has an area of 0.5 and the second triangle has an area of 1. The minimum of these 2 is 0.5.</p>


______________________________________________________
AMR10B||||||false||||||

<p>A regular expression is used to describe a set of strings. For this problem the alphabet is limited to 'a' and 'b'. R is a regular expression if:<br />1) R is "a" or "b"<br />2) R is of the form "(R1R2)" where R1 and R2 are regular expressions<br />3) R is of the form "(R1|R2)" where R1 and R2 are regular expressions<br />4) R is of the form "(R1*)" where R1 is a regular expression.<br /><br />The set of strings recognised by R are as follows:<br />1) If R is "a", then the set of strings recognised = {a}<br />2) If R is "b", then the set of strings recognised = {b}<br />3) if R is of the form "(R1R2)" then the set of strings recognised = all strings which can be obtained by a concatenation of strings s1 and s2 where s1 is recognised by R1 and s2 by R2.<br />4) if R is of the form "(R1|R2)" then the set of strings recognised = union of the set of strings recognised by R1 and R2.<br />5) If R is of the form "(R1*)" then the the strings recognised are the empty string and the concatenation of an arbitrary number of copies of any string recognised by R1.<br /><br />The edit distance between two strings s1 and s2 is the minimum number of characters to be inserted/deleted or replaced in s1 to make it equal to s2.<br /><br />Given two regular expressions R1 and R2, find the minimum edit distance amongst all pairs of strings s1 and s2 such that s1 is recognised by R1 and s2 is recognised by R2.<br /><br /><strong>INPUT</strong><br />The first line contains the number of test cases T. T test cases follow. <br />Each test case contains two lines containing two regular expressions R1 and R2. There is a blank line after each test case.<br /><br /><strong>OUTPUT</strong><br />Output T lines one corresponding to each test case containing the required answer for the corresponding test case.<br /><br /><strong>CONSTRAINTS</strong><br />T &lt;= 100<br />1 &lt;= length(R1), length(R2) &lt;= 50<br />You are guaranteed that R1 and R2 will conform to the definition provided above. <br /><br /><strong>SAMPLE INPUT</strong><br />2<br />((a|b)*)<br />(a(b(aa)))<br /><br />(a((ab)*))<br />(a(b(((ab)b)b)))<br /><br /><strong>SAMPLE OUTPUT</strong><br />0<br />2<br /><br /><strong>EXPLANATION</strong><br /><br />For the first case R1 recognises all strings over the alphabet a and b. Thus it recognises the string "abaa" which is also recognised by R2.<br />For the second case the strings "aababab" and "ababbb" are recognised by R1 and R2 respectively and have edit distance of 2.</p>


______________________________________________________
AMR10C||||||false||||||

<p>You all know about factorization of an integer.&nbsp; Here we want you to factor a number into as few factors as possible.&nbsp; That is easy, you say, just have the number itself, and that will be the smallest number of factors i.e. 1. <br />But wait, I haven't finished -- each of the factors that you find must be square-free.&nbsp; A square-free number, however you factor it, won't have any factor that is a perfect square.&nbsp; Of course, you can never include 1 as a factor. <br />&nbsp;<br /><strong>INPUT</strong><br />The first line of input is the number of test cases T. <br />The next T lines each have an integer N. <br />&nbsp;<br /><strong>OUTPUT</strong><br />For each testcase, output the smallest number of square-free factors. <br />&nbsp;<br /><strong>CONSTRAINTS</strong> <br />T &lt;= 1e4 <br />2 &lt;= N &lt;= 1e6 <br />&nbsp;<br /><strong>SAMPLE INPUT </strong><br />2 <br />6 <br />8 <br />&nbsp;<br /><strong>SAMPLE OUTPUT </strong><br />1 <br />3</p>


______________________________________________________
AMR10D||||||false||||||

<p>My kid's favorite subject is math, as you know by now.&nbsp; He is learning division now, and his teacher has taught him about even numbers being divisible by 2, numbers whose digits add up to a multiple of 3 being exactly divisible by 3 etc.<br />He was familiar with division by 11 during selection for soccer teams on his playground, and was wondering whether there was any easy rule to see if a number was divisible by 11.&nbsp; For example, he wondered, if he arranged a number of digits 0-9 in a row to form a number, which ones would be divisible by 11?<br />He decided to start off with d[1] 1's, d[2] 2's ..., d[9] 9's, and seeing what is the minimum factor of 11 that he could get by using all these digits, together with any number of 0's.&nbsp; Please help him figure out how many digits there are in this minimum factor. If he will not be able to form a multiple of 11 in this way, print -1.<br /><br /><strong>INPUT</strong><br /><br />The first line will contain the number of test cases T. T lines follow one corresponding to each test case. <br />Each line has 9 integers d[1] d[2] .... d[9].<br /><br /><strong>OUTPUT</strong><br /><br />Output T lines one corresponding to each test case. The ith line should contain the required answer for the corresponding test case.<br /><br /><strong>CONSTRAINTS</strong><br /><br />1 &lt;= T &lt;= 100<br />1 &lt;= d[1] + ... + d[9] &lt;= 100<br /><br /><strong>SAMPLE INPUT</strong><br />2<br />2 0 0 0 0 0 0 0 0<br />0 1 0 0 0 0 0 0 1<br /><br /><strong>SAMPLE OUTPUT</strong><br />2<br />3<br /><br /><strong>EXPLANATION</strong> <br />For the first case, the number 11 can be formed which has 2 digits. <br />For the second case, number 209 can be formed which is divisible by 11 and has 3 digits.</p>


______________________________________________________
AMR10E||||||false||||||

<p>The department store where my family goes shopping is trying to predict how much of each item they stock they will sell each month.&nbsp; Keeping a large amount of inventory is costly, and running out of items is also not a good idea.&nbsp; Since the manager asked for my help as a sales consultant, I decided to formulate a model for predicting each month's sales S of an item based on its sales during the previous R months.&nbsp; After a lot of trial and error, I came up with such a model, where <br />S(n) = a1*S(n-1) + a2*S(n-2) + ... + aR*S(n-R) &nbsp;<br />where S(n) is the predicted sales for the nth month for n &gt; R, and S(1) to S(R) are seed values. <br />&nbsp;<br />The store manager was pleased with my model's ability to help him in controlling his inventory. &nbsp;<br />He asked me to list out every Kth month's sales, and give him the sum of the first N values from this list.&nbsp; For example he wanted every Christmas month's sales summed up for the next 10 years (N=10 and K=12, month 1 being January), or every end-of-quarter month's sales for the next 2 years (N=2, K=3). <br />&nbsp;<br />Can you please help me write a program that does all the above? <br />&nbsp;<br /><strong>INPUT</strong> <br />The first line of the input T, the number of test cases. Each test case consists of three lines. <br />The first line of each test case contains N, R, K. <br />The second line of each test case contains R integers denoting S(1), S(2), ..., S(R). <br />The third line of each test case contains R integers denoting the coefficients a1, a2, ..., aR of the predictive model. <br />&nbsp;<br /><strong>OUTPUT</strong> <br />For each test case, output the sum requested by the manager as given in the problem statement, modulo 1,000,000,007. <br />&nbsp;<br /><strong>CONSTRAINTS </strong><br />T &lt;= 40 <br />1 &lt;= N &lt;= 1000000000 <br />1 &lt;= R &lt;= 8 <br />1 &lt;= K &lt;= 8 <br />0 &lt;= All other input values &lt; 1000000007 <br />&nbsp;<br /><strong>SAMPLE INPUT </strong><br />2 <br />4 1 1 <br />1 &nbsp;<br />2 &nbsp;<br />3 2 3 <br />1 1 &nbsp;<br />1 1 &nbsp;<br />&nbsp;<br /><strong>SAMPLE OUTPUT</strong> <br />15 <br />44 <br />&nbsp;<br /><strong>EXPLANATION </strong><br />In the first test case, it is given that S(1) = 1 and the relation is S(n)=2*S(n-1). The list asked by the store manager consists of all the terms of S since K is 1. Hence, the answer is just the sum of the first 4 terms of S. <br />In the second test case, the sequence S is the fibonacci sequence which is: 1, 1, 2, 3, 5, 8, 13, 21, 34. The list consists of 2, 8, 34 which sum up to 44.</p>


______________________________________________________
AMR10F||||||false||||||

<p>The kids in my son's kindergarten made Christmas cookies with their teacher, and piled them up in columns.&nbsp; They then arranged the columns so that the tops of the columns, going from shortest to tallest, were in a nice straight ramp.&nbsp; The cookies were all of uniform size.&nbsp; Given that there were A cookies in the shortest pile, that the difference in height between any two adjacent piles was D cookies, and that there were N piles, can you write a program to figure out how many cookies there were in total? <br />&nbsp;<br /><strong>INPUT</strong> <br />The first line contains the number of test cases T. T lines follow, one corresponding to each test case, containing 3 integers : N, A and D. <br />&nbsp;<br /><strong>OUTPUT</strong><br />Output T lines, each line containing the required answer for the corresponding test case. <br />&nbsp;<br /><strong>CONSTRAINTS</strong> <br />T &lt;= 100 <br />1 &lt;= N, A, D &lt;=100 <br />&nbsp;<br /><strong>SAMPLE INPUT</strong> <br />3 <br />1 1 1 <br />3 5 6 <br />2 1 2 <br />&nbsp;<br /><strong>SAMPLE OUTPUT</strong> <br />1 <br />33 <br />4 <br />&nbsp;<br /><strong>EXPLANATION</strong> <br />In the second test case the sequence is: 5, 11, 17 whose sum is 33.</p>


______________________________________________________
AMR10G||||||false||||||

<p>My kid's kindergarten class is putting up a Christmas play.&nbsp; (I hope he gets the lead role.)&nbsp; The kids are all excited, but the teacher has a lot of work.&nbsp; She has to produce costumes for a scene with K soldiers.&nbsp; She wants to buy all the costumes in the same size, allowing for some small amount of length alteration to be done by the kids' parents later.&nbsp; So she has taken all the kids' height measurements.&nbsp; Can you help her select K kids from her class of N to play the soldier role, such that the height difference between the tallest and shortest in the group is minimized, and alternations will be easiest?&nbsp; Tell her what this minimum difference is. <br />&nbsp;<br />&nbsp;<br /><strong>INPUT</strong> <br />The first line contains the number of test cases T. T test cases follow each containing 2 lines. <br />&nbsp;<br />The first line of each test case contains 2 integers N and K. <br />The second line contains N integers denoting the height of the N kids. <br />&nbsp;<br /><strong>OUTPUT</strong> <br />Output T lines, each line containing the required answer for the corresponding test case. <br />&nbsp;<br /><strong>CONSTTRAINTS</strong> <br />T &lt;= 30 <br />1 &lt;= K &lt;= N &lt;= 20000 <br />1 &lt;= height &lt;= 1000000000 <br />&nbsp;<br /><strong>SAMPLE INPUT</strong><br />3 <br />3 1 <br />2 5 4 &nbsp;<br />3 2 <br />5 2 4 &nbsp;<br />3 3 <br />2 5 4 &nbsp;<br />&nbsp;<br />&nbsp;<br /><strong>SAMPLE OUTPUT</strong> <br />0 <br />1 <br />3 <br />&nbsp;<br /><strong>EXPLANATION</strong><br />In the first test case, the teacher needs to only select 1 kid and hence she can choose any kid since the height difference is going to be 0. <br />In the second test case, the teacher can choose kids with height 4 and 5. <br />In the third test case, the teacher is forced to choose all 3 kids and hence the answer = 5-2 = 3</p>


______________________________________________________
AMR10H||||||false||||||

<p>A shop-keeper is trying to figure out how to arrange gifts in his shop for Christmas. He runs a peculiar shop such that each customer buys exactly two gifts at the shop (he could buy two of the same gifts too). He knows the probability that a customer might want gift i, is P_i. <br /><br />He needs to arrange the gifts across several floors. Each floor should have exactly one gift. It takes A*(|x - y|)^2 + B*(|x - y|) + C seconds to go from floor x to floor y.<br /><br />Can you help him arrange the gifts across floors such that, the expected time spent by a shopper is minimized?<br /><br />For the purpose of this problem assume that the first gift choice and the second gift choice are independent of each other. i.e., Choosing a first gift as i does not change his probability of choosing the second gift as j. It still remains P_j.<br /><br /><strong>INPUT</strong><br />The first line contains the number of test cases T. 2*T lines follow, 2 per test case. The first line contains 4 integers : N, A, B, C. The second line contains N integers in the range 1 to 100. The ith integer represents the percentage probability P_i. All P_i's will sum to 100.<br /><br /><strong>OUTPUT</strong><br />Output T lines one for each test case. Each line contains the minimum expected travelling time for the corresponding test case. Output the answer as a reduced fraction as below.<br /><br /><strong>CONSTRAINTS</strong><br />1 &lt;= T &lt;= 100<br />1 &lt;= N &lt;= 20<br />0 &lt;= A,B,C &lt;= 10<br /><br /><strong>SAMPLE INPUT</strong><br />4<br />3 0 1 0<br />60 10 30<br />1 1 1 0<br />100<br />1 1 1 3<br />100<br />4 3 7 2<br />25 25 25 25<br /><br /><strong>SAMPLE OUTPUT</strong><br />3/5<br />0/1<br />3/1<br />73/4</p>


______________________________________________________
AMR10I||||||false||||||

<p>There are N stones, which can be divided into some piles arbitrarily. Let the value of each division be equal to the product of the number of stones in all the piles modulo P. How many possible distinct values are possible for a given N and P? <br />&nbsp;<br /><strong>INPUT</strong> <br />The first line contains the number of test cases T. T lines follow, one corresponding to each test case, containing 2 integers: N and P. <br />&nbsp;<br /><strong>OUTPUT</strong> <br />Output T lines, each line containing the required answer for the corresponding test case. <br />&nbsp;<br /><strong>CONSTRAINTS</strong><br />T &lt;= 20 <br />2 &lt;= N &lt;= 70 <br />2 &lt;= P &lt;= 1e9 <br />&nbsp;<br /><strong>SAMPLE INPUT</strong><br />2 <br />3 1000 <br />5 1000 <br />&nbsp;<br /><strong>SAMPLE OUTPUT</strong> <br />3 <br />6 <br />&nbsp;<br /><strong>EXPLANATION</strong><br />In the first test case, the possible ways of division are (1,1,1), (1,2), (2,1) and (3) which have values 1, 2, 2, 3 and hence, there are 3 distinct values. <br />In the second test case, the numbers 1 to 6 constitute the answer and they can be obtained in the following ways: <br />1=1*1*1*1*1 <br />2=2*1*1*1 <br />3=3*1*1 <br />4=4*1 <br />5=5 <br />6=2*3</p>


______________________________________________________
AMR10J||||||false||||||

<p>There are N bottles each having a different chemical. For each chemical i, you have determined C[i] which means that mixing chemicals i and C[i] causes an explosion. You have K distinct boxes. In how many ways can you divide the N chemicals into those boxes such that no two chemicals in the same box can cause an explosion together? <br />&nbsp;<br /><strong>INPUT</strong><br />The first line of input is the number of test cases T. T test cases follow each containing 2 lines. <br />The first line of each test case contains 2 integers N and K. <br />The second line of each test case contains N integers, the ith integer denoting the value C[i]. The chemicals are numbered from 0 to N-1. <br />&nbsp;<br /><strong>OUTPUT</strong> <br />For each testcase, output the number of ways modulo 1,000,000,007. <br />&nbsp;<br /><strong>CONSTRAINTS </strong><br />T &lt;= 50 <br />2 &lt;= N &lt;= 100 <br />2 &lt;= K &lt;= 1000 <br />0 &lt;= C[i] &lt; N <br />For all i, i != C[i] <br />&nbsp;<br /><strong>SAMPLE INPUT </strong><br />3 <br />3 3 <br />1 2 0 <br />4 3 <br />1 2 0 0 <br />3 2 <br />1 2 0 <br />&nbsp;<br /><strong>SAMPLE OUTPUT </strong><br />6 <br />12 <br />0 <br />&nbsp;<br /><strong>EXPLANATION </strong><br />In the first test case, we cannot mix any 2 chemicals. Hence, each of the 3 boxes must contain 1 chemical, which leads to 6 ways in total. <br />In the third test case, we cannot put the 3 chemicals in the 2 boxes satisfying all the 3 conditions.</p>


______________________________________________________
CIRU||||||true||||||


<p>You are given N circles and expected to calculate the area of the union of the circles !</p>

*******InputConstraints*******

<p>The first line is one integer n indicates the number of the circles. (1 &lt;= n &lt;= 1000)</p>
<p>Then follows n lines every line has three integers</p>
<p>Xi Yi Ri</p>
<p>indicates the coordinate of the center of the circle, and the radius. (|Xi|. |Yi|&nbsp; &lt;= 1000, Ri &lt;= 1000)</p>
<p><span style="color: #ff0000;"><strong>Note that in this problem Ri may be 0 and it just means one point ! </strong></span></p>

*******OutputConstraints*******

<p>The total area that these N circles with&nbsp;3 digits after decimal point</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3</pre>
<pre>0 0 1<br />0 0 1<br />100 100 1<br /><br /><br /><strong>Output:</strong><br />6.283<br /></pre>


______________________________________________________
NUMG||||||true||||||


<p>In ACM_DIY, there is one master called &ldquo;ShaZai&rdquo;. As we know, he is the god of &ldquo;Number Theory&rdquo;. He always kills the problem about &ldquo;Number Theory&rdquo; in seconds! But of course we do not have any idea about these problems~ One day in ACM_DIY, ShaZai asks us one problem:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You are given three non-negative integers A, B and K, you are expected to find the number of number that satisfy</p>
<p>(1)&nbsp;&nbsp; X^A = B( mod (2K + 1) )</p>
<p>(2)&nbsp;&nbsp; X is in the ranger [0, 2K];</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Of course we have no idea about this problem, so could you help us?</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line is one integer T indicates the number of the test cases. (T &lt;= 1000)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Then for every case, only one line contains three integers A, B and K. (1 &lt;= A, B &lt;= 10^9, 1 &lt;= K &lt;= 5 * 10^8)</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output the answer in a single line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><p>3<br />213 46290770 80175784<br />3 46290770 80175784<br />3333 46290770 80175784</p><p>&nbsp;</p><br /><strong>Output:</strong>

27<br />27<br />297</pre>


______________________________________________________
SEQN||||||true||||||


<p>As you know, there number of permutation of the increasing vector {1, 2, 3&hellip;n} is exactly n! ;For example, if n = 3, then, {1,2,3} , {1,3,2}, {2,1,3}, {2,3,1}, {3,1,2}, {3,2,1} are all the permutation of the vector {1,2,3 };</p>
<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; We define D( {</strong>A1,A2...An <strong>} ) = the number of element that satisfy&nbsp;&nbsp; Ai = i.<br /></strong></p>
<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong>For example, D( {1,2,3} ) = 3 ,D( {1,3,2} ) = 1 (only &lsquo;1&rsquo; is at 1), D({3,1,2}) = 0 &hellip;.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now we want to calculate the number of permutation that satisfy D( {A1,A2...An   } ) = K.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For example, if n = 3 and k = 3, then of course there is only one permutation {1,2,3} that satisfy D( {1,2,3}) = 3. But if n = 3 and k = 0, then there are two permutations {3,1,2} and {2,3,1} satisfy D( {3,2,1} ) = D( {2,3,1} ) = 0;</p>
<p>&nbsp; But when n is very large, it&rsquo;s hard to calculate by brute force algorithm. Optimal is one required here.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Because the answer may be very large, so just output the remainder of the answer after divided by m.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>In the first line there is an integer T, indicates the number of test cases. (T &lt;= 500)</p>
<p>In each case, the first line contains three integers n,k and m. (0 &lt;= k&lt;= n &lt;=10^9, 1 &lt;= m &lt;= 10^5, n != 0)</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output &ldquo;Case d: &ldquo;first where d is the case number counted from one. Then output the remainder of the answer after divided by m.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />3 0 7<br />3 3 3<br />331105236 82934100 3711<br /><br /><br />&nbsp;<strong>Output:</strong>
Case 1: 2<br />Case 2: 1<br />Case 3: 2622</pre>


______________________________________________________
JZPGYZ||||||false||||||

<p style="text-align: left;">&nbsp;</p>
<address style="text-align: left;"><span style="font-size: medium;">&nbsp;&nbsp; &nbsp;Oimaster and sevenk love each other.</span></address><address style="text-align: left;"><span style="font-size: medium;"><br /></span></address> <address style="text-align: left;"><span style="font-size: medium;">&nbsp;&nbsp; &nbsp;But recently,sevenk heard that a girl named ChuYuXun was dating with oimaster.</span></address><address style="text-align: left;"><span style="font-size: medium;">As a woman's nature, sevenk felt angry and began to check oimaster's online talk with ChuYuXun.</span></address><address style="text-align: left;"><span style="font-size: medium;">&nbsp;&nbsp; &nbsp;Oimaster talked with ChuYuXun n times, and each online talk actually is a string.</span></address><address style="text-align: left;"><span style="font-size: medium;">Sevenk asks q questions like this,</span></address><address style="text-align: left;"><span style="font-size: medium;">&nbsp;&nbsp; &nbsp;"how many strings in oimaster's online talk contain this string as their substrings?"</span></address><address style="text-align: left;"><span style="font-size: medium;"><br /></span></address> <address style="text-align: left;"><span style="font-size: medium;">Input</span></address><address style="text-align: left;"><span style="font-size: medium;"><br /></span></address> <address style="text-align: left;"><span style="font-size: medium;">There are two integers in the first line,</span><span style="font-style: normal; font-size: small;">&nbsp;</span></address> <address style="text-align: left;"><span style="font-size: medium;">the number of strings n and the number of questions q.</span></address> <address style="text-align: left;"><span style="font-size: medium;">And n lines follow, each of them is a string describing oimaster's online talk.</span><span style="font-style: normal; font-size: small;">&nbsp;</span></address> <address style="text-align: left;"><span style="font-size: medium;">And q lines follow, each of them is a question.</span></address><address style="text-align: left;"><span style="font-size: medium;">n&lt;=10000, q&lt;=60000&nbsp;</span></address><address style="text-align: left;"><span style="font-size: medium;">the total length of n strings&lt;=100000,&nbsp;</span></address><address style="text-align: left;"><span style="font-size: medium;">the total length of q question strings&lt;=360000</span></address><address style="text-align: left;"><span style="font-size: medium;"><br /></span></address> <address style="text-align: left;"><span style="font-size: medium;">Output</span></address> <address style="text-align: left;"><span style="font-size: medium;">For each question, output the answer in one line.</span></address> <address style="text-align: left;"><span style="font-size: medium;">Example</span></address>
<pre style="text-align: left;"><address><span style="font-size: medium;">Input:</span></address><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">3 3</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">hi,I'mChuYuXun..YouaresohandsomethatIfallinlovewithyou</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">butIlovesevenk..you'dbettergoaway</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">55555555555</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">ChuYuXun</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">you</span></span></address></span><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">55555555</span></span></address></span></pre>
<pre style="text-align: left;"><address><span style="font-size: medium;">Output:</span></address><span style="font-size: medium;"><address><span style="font-size: medium;"><span style="font-style: normal;">1</span></span></address><address><span style="font-size: medium;"><span style="font-style: normal;">2</span></span></address><address style="text-align: left;"><span style="font-size: medium;"><span style="font-style: normal;">1</span></span></address></span></pre>


______________________________________________________
SPQUEUE||||||true||||||


<p>On some special occasion Nadia&rsquo;s company provide very special lunch for all employees of the company. Before the food is served all of the employees must stand in a queue in front of the food counter. The company applied a rule for standing in the queue. For instance if Abul is the supervisor of Babul and Abul stands in kth position from the front of the queue, then Babul cannot stand at any position in between 1 and k-1 from front of the queue. The company has N employees and each of them has one supervisor except one who doesn&rsquo;t have any supervisor.</p>
<p>You need to calculate in how many ways the queue can be created. You can safely assume that in at least one way the queue can be created.</p>

*******InputConstraints*******

<p>The first line is the number of test cases.</p>
<p>Each test case:</p>
<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The first line contains 2 integers M and N.</p>
<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line 2..N: consist of one integer is supervisor of i-employees.</p>

*******OutputConstraints*******

<p>For each test case: the result of this problem module M in one line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />2 2<br />1<br /><strong>Output:</strong><br /><br />1<br /><br /><strong>Constraints:</strong><br />- Number of test cases &lt;= 10 for small data, N &lt;= 100000<br />- Number of test cases = 1 for large data, N &lt;= 500000<br />- 1 &lt;= M &lt;= 1000000000<br />- Time Limit for all tests: 2.3s</pre>


______________________________________________________
IOIISL08||||||false||||||

<p><span style="font-size: small;">You are visiting a park which has <strong>N</strong> islands. From each island i, exactly one bridge was constructed.</span> <span style="font-size: small;">The length of that </span><span style="font-size: small;">bridge is denoted by <strong>Li</strong>. The total number of bridges in the island is <strong>N</strong>.</span> <span style="font-size: small;">Each bridge can be traversed in both directions. Also, for each pair of island</span>, <span style="font-size: small;">there is a unique ferry that travels back and forth between them. </span></p>
<p><br /><span style="font-size: small;">Since you like walking better than riding ferries, you want to maximize the sum of the lengths of the bridges you cross subject to the constraints below :</span></p>
<ul>
<li><span style="font-size: small;">You can start a visit on an island of your choice.</span></li>
<li><span style="font-size: small;">You may not visit any island more than once.</span></li>
<li><span style="font-size: small;">At any time you may move from your current island S to any island D which you have not visited before. You can go from S to D either by walking, in which case the length of the bridge you take will be added to the total length or by ferry if the islands are not connected by any bridge (when checking for connectivity you should include those islands which have been previously visited by you).</span></li>
</ul>
<p><span style="font-size: small;">Note that you do not have to visit all the islands, and it may be impossible to cross al the bridges.</span></p>
<p><span style="font-size: small;">Given N bridges along with their lengths, your task is to find out the maximum distance you can walk by following the rules above.</span></p>
<p><strong><span style="font-size: small;">Constraints :<br /></span></strong></p>
<p><span style="font-size: small;">2 &lt;= N &lt;= 100000</span></p>
<p><span style="font-size: small;">1 &lt;= Li &lt;= 1000000</span></p>
<h2 style="text-align: center;"><span style="font-size: small;"><strong>Input</strong><br /></span></h2>
<p><span style="font-size: small;">The first line of the input contains N, the number of islands. Islands are numbered 1 to N inclusive. Then follow N lines. The ith of these lines contains two integers Ii and Li, which are the island the ith island connects to and the length of the bridge respectively. You may assume that each bridge has two different islands as its endpoints.</span></p>
<h2 style="text-align: center;"><span style="font-size: small;"><strong>Output</strong><br /></span></h2>
<p><span style="font-size: small;">You must write a single line which is the maximum possible distance that you can walk.</span></p>
<h2 style="text-align: center;"><span style="font-size: small;"><strong>Example</strong><br /></span></h2>
<p><strong><span style="font-size: small;">Input :</span></strong></p>
<p><span style="font-size: small;">7</span></p>
<p><span style="font-size: small;">3 8</span></p>
<p><span style="font-size: small;">7 2</span></p>
<p><span style="font-size: small;">4 2</span></p>
<p><span style="font-size: small;">1 4</span></p>
<p><span style="font-size: small;">1 9</span></p>
<p><span style="font-size: small;">3 4</span></p>
<p><span style="font-size: small;">2 3</span></p>
<p><strong><span style="font-size: small;">Output :</span></strong></p>
<p><span style="font-size: small;">24</span></p>
<p><span style="font-size: small;"><strong>Explanation of the example :</strong></span></p>
<p><span style="font-size: small;">Start at 5.</span></p>
<p><span style="font-size: small;">Walk to 1.</span></p>
<p><span style="font-size: small;">Walk to 3.</span></p>
<p><span style="font-size: small;">Walk to 6.</span></p>
<p><span style="font-size: small;">Ferry to 7.</span></p>
<p><span style="font-size: small;">Walk to 2.</span></p>
<p><span style="font-size: small;">Hence total distance you walked is 9 + 8 + 4 + 3 = 24.<br /></span></p>
<p><span style="font-size: small;"><strong>Note : </strong>The final answer fits within 64 bit integer.<br /></span></p>


______________________________________________________
TABLE||||||true||||||


<p>In today's math lesson, Little Crash has just learnt Least Common Multiple (LCM). For two positive integers <em>a</em> and <em>b</em>, LCM(<em>a</em>, <em>b</em>) means the minimum positive integer which can be divisible by <em>a</em> and <em>b</em>.</p>
<p>After coming home, Crash is still thinking about what he learnt in  the math lesson. Then he draw a table filled numbers in order to  research LCM. The table has <em>N</em> rows and <em>M</em> columns. The number in the <em>i</em>th row and<em> j</em>th column is LCM(<em>i</em>, <em>j</em>).</p>
<p>A table of 4*5 is just like this:</p>
<table border="0">
<tbody>
<tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>6</td>
<td>4</td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>3</td>
<td>12</td>
<td>15</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>12</td>
<td>4</td>
<td>20</td>
</tr>
</tbody>
</table>
<p>Now Little Crash wants to know the sum of all the numbers in the table. You just need to output the sum modulo 20101009.</p>

*******InputConstraints*******

<p>Only two positive integers stand for <em>N</em> and <em>M</em>. (<em>N</em>, <em>M</em> &lt;= 10<sup>7</sup>)</p>

*******OutputConstraints*******

<p>A positive integer which means the sum modulo 20101009.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 5<br /><br /><strong>Output:</strong><br />122</pre>


______________________________________________________
SHLIGHTS||||||false||||||

<p style="text-align: justify;"><span style="font-size: small;">Recently I made a new device. It contains a set of lightbulbs, each having two parts. The left part glows blue and the right part glows green. One cannot guess which parts of the bulbs will be&nbsp; glowing when the device is powered on. Consider any two adjacent bulbs at time t. If the left bulb is glowing green and the right bulb is glowing blue they swap their states to blue and green respectively at time t + 1. But now I am wondering, if I </span><span style="font-size: small;">power it on </span><span style="font-size: small;">when will the bulbs stop swapping. Can you help me with this ?</span></p>
<h3><span style="font-size: small;"><strong>Input</strong></span></h3>
<p><span style="font-size: small;">The first line of the input contains t, the number of testcases. Each of the next t lines contains a single string containing characters 'B' and 'G' representing the bulbs when switched on i.e. at time t = 0. Here 'B' is for blue and 'G' is for green. The length of the</span> <span style="font-size: small;">string will be less than 100000.</span></p>
<h3><span style="font-size: small;"><strong>Output</strong></span></h3>
<p><span style="font-size: small;">For each test output one line giving the time after which swapping stops.</span></p>
<h3><span style="font-size: small;">Example</span></h3>
<p><span style="font-size: small;"><strong>Input :</strong></span></p>
<p><span style="font-size: small;">2</span></p>
<p><span style="font-size: small;">GBGBBB</span></p>
<p><span style="font-size: small;">BGBBGGGBBBGBGB</span></p>
<p><span style="font-size: small;"><strong>Output :</strong></span></p>
<p><span style="font-size: small;">4</span></p>
<p><span style="font-size: small;">8<br /></span></p>


______________________________________________________
KFRIENDS||||||true||||||


<table style="width: 834px; height: 105px;" border="0">
<tbody>
<tr>
<td>
<p><img title="horse" src="http://farm6.static.flickr.com/5285/5285188921_46b75fa7a6.jpg" alt="horse" width="104" height="158" /></p>
</td>
<td>
<p>Gurram land is the city of Knights and is shaped exactly like a chess  board. Some of the cells in this city contains Knights. Due to scarcity  of grass ( Global Warming ! ), there has been fights between  every pair of neighboring Knights. Knight A is a neighbor of Knight B, if A can reach B in exactly one step ( see  notes for clarity ) .</p>
<p>To spread peace in the Gurram land, the United  Nations has organized a 'Friendship Mela' and wants to distribute  friendship neck straps to the Knights. Each pair of neighboring Knights then exchange Neck Strap of same color and wear it around their neck, to promote friendship :). To make it more colorful, the UN  also wants each Knight to have distinct colored neck straps around  its neck. The UN is ready to produce any number of straps of a particular color,  but can you help them to find out the minimum number of colors to be  used.</p>
<p><strong>Notes:</strong> A Knight in cell (x,y) can move in one step to any of the  cells   (x+2,y+1) , (x+2,y-1) , (x+1,y+2) , (x+1,y-2) , (x-2,y+1) ,  (x-2,y-1) ,   (x-1,y+2) , (x-1,y-2) i.e., the normal rule in standard  chess.</p>
</td>
</tr>
</tbody>
</table>

*******InputConstraints*******

<p>First line contains T ( around 10 ), the number of test cases. Each test case starts with an integer N ( 0 &lt;= N &lt;= 10000 ) the number of Knights in the city. Each of the next N lines contains two integers X Y the row and the column number of a Knight ( 1 &lt;= X,Y &lt;= 100 ). No two Knights are on a same cell.</p>

*******OutputConstraints*******

<p>For each test case, print the minimum number of colors needed, in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />3<br />1 1<br />2 3<br />3 2<br />4<br />1 1<br />2 3<br />2 1<br />1 3<br /><strong>Output:</strong><br />2<br />1<br /><br />Case 1 : (1,1) &amp; (2,3) can exchange a Red strap , (1,1) &amp; (3,2) can exchange a Green Strap<br />Case 2 : (1,1) &amp; (2,3) can exchange a Red strap , (2,1) &amp; (1,3) can exchange a Red Strap</pre>


______________________________________________________
DPMAX||||||true||||||


<p>Given two vectors, a = ( x<sub>a</sub>, y<sub>a</sub> ), b = ( x<sub>b</sub>, y<sub>b</sub> ), their dot product is defined as follows:<br />dp( a, b ) = x<sub>a</sub>*x<sub>b</sub> + y<sub>a</sub>*y<sub>b</sub>.<br /><br />Given N vectors in the plane, find a pair for each of them (among those given in the input) such that the dot product of the vector and its pair is maximal. You may pair a vector with itself too.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer N ( 1 &lt;= N &lt;= 200000 ).<br />Each of the next N lines contain a pair of real numbers, x<sub>i</sub> and y<sub>i (</sub>0 &lt;= |x<sub>i</sub>|, |y<sub>i</sub>| &lt;= 100000)<sub>,</sub> representing the i-th vector. x<sub>i</sub> and y<sub>i</sub> will be rounded to 3 decimal places.</p>

*******OutputConstraints*******

<p>Output N lines, i-th one containing the maximal dot product for the i-th vector from the input rounded to 3 decimal places.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br /><br />4<br />0.000 1.000<br />0.000 2.000<br />1.000 1.000<br />0.000 0.000<br /><br /><strong>Output:<br /></strong>&nbsp;<br />2.000<br />4.000<br />2.000<br />0.000<br /><br /></pre>
<p><strong>Explanation: </strong>Pair the first vector with the second, the second with itself, third with itself or with the second, and the last one with any of them.</p>


______________________________________________________
ACPC10C||||||true||||||


<p>As you most probably know, any boolean expression can be expressed in either a disjunctive normal form or a conjunctive normal form. In a disjunctive normal form, a boolean expression is written as a disjunct (logical or) of one-or more sub-expressions where each of these sub-expressions is written in a conjunctive normal form. Similarly, an expression written in a conjunctive normal form is a conjunct (logical and) of sub-expressions each written in a disjunctive normal form.</p>
<p style="text-align: center;"><img title="a" src="../../../content/omar_azazy:ACPC10C" alt="a" width="171" height="187" /></p>
<p><br />An AND/OR tree is a tree-like graphical-representation of boolean ex- pressions written as either conjunctive- or disjunctive-normal form. Since the sub-expressions of a normalized form alternate in being either disjunctive or conjunctive forms, you&rsquo;d expect the sub-trees on an AND/OR tree to alternate in being AND- or OR- trees depending on the sub-tree&rsquo;s depth-level. The example upwards illustrates this observation for the boolean expression (A (B C)) (D E) where the trees in the 1st (top-most) and 3rd levels are AND-trees.<br />Write a program that evaluates a given and/or tree.</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is specified on exactly one line (which is no longer than 32,000 characters) of the form:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( E1 E2 . . . En )<br />where n &gt; 0 and Ei is either T for true, F for false, or a sub-expression using the same format.<br />The trees at the deepest level are AND-trees. The last test case is followed by a dummy line made of ().</p>

*******OutputConstraints*******

<p>For each test case, print the following line:<br />k. E<br />Where k is the test case number (starting at one,) and E is either true or false depending on the value of the expression in that test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />((F(TF))(TF))<br />(TFT)<br />((TFT)T)<br />()<br /><br /><strong>Output:</strong><br />1. false<br />2. false<br />3. true</pre>


______________________________________________________
POLYU||||||true||||||


<p>In the country of Giantarum, the king of Giantarum is AC.AC and his  billions of hougong like to eat giantarum very much. The shape of  giantarum is special! It could be regard as a triangle. There are N  giantarums in the Cartesian coordinates, they may cover each other. AC  wants to know the total area that is covered by giantarums.</p>

*******InputConstraints*******

<div>
<p>In the first line there is an integer T,  indicates the number of test cases.&#65288;T&lt;=100&#65289;</p>
<p>In each case, the  first line contains an integer N (N &lt;= 100), indicates the number of  the giantarum. The follow N line, every line contains six floating  numbers x0, y0, x1, y2, x2, y2, indicates the coordinate of the three  vertices of the giantarum. (all |xi| &lt;= 10^4 and |yi| &lt;= 10^4)</p>
</div>

*******OutputConstraints*******

<p>For every test case, output one line. First output &ldquo;Case idx: &rdquo;, here  idx is the case number start from 1.Then output the area, rounded to 3  digits after the decimal point.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1<br />0 0 1 0 1 1<br />2<br />0 0 1 0 1 1<br />0 0 0 1 1 1<br /><br /><br /><strong>Output:</strong><br />Case 1: 0.500<br />Case 2: 1.000<br /><br /></pre>


______________________________________________________
CIRUT||||||true||||||


<p>You are given N <span style="color: #ff0000;"><strong>different </strong></span>circles , while some region may be covered more than once.</p>
<p>If one region is covered by K times, then it was called a "K- Region".</p>
<p>So, you are expected to output the area of all the regions! (K from 1 to N)</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line is one integer n indicates the number of the circles.  (1 &lt;= n &lt;= 1000)</p>
<p>Then follows n lines every line has three integers</p>
<p>Xi Yi Ri</p>
<p>indicates the coordinate of the center of the circle, and the radius.  (|Xi|. |Yi|&nbsp; &lt;= 1000, 0 &lt; Ri &lt;= 1000)</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output N lines, the i-th line output</p>
<p>[i] = area_of_i_region</p>
<p>here the area must round to&nbsp; 3 digits after decimal point.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />0 0 1<br />1 0 1<br />1 1 1<br /><br /><strong>Output:</strong>
[1] = 4.699<br />[2] = 1.699<br />[3] = 0.443<br /></pre>


______________________________________________________
SKY||||||true||||||


<p>We can represent a grid of skyscrapers by an NxN matrix of their positive  heights. A skyscraper is made out of square blocks, and you may travel  through them using a special elevator that can move as any other, but  also sideways (four possible directions on a fixed floor). They may move  anywhere as long as they don't exit the skyscrapers. In other words, if  the elevator is inside a skyscraper, it may move to the neighboring  skyscraper only if its height is greater or equal to the current level  the elevator is at.</p>
<p>Moving sideways (in one of the 4 directions, that is, N, E, S, W...) is done for free when using this elevator, but moving one floor up or down costs exactly one unit.</p>
<p>Given  the positions of two skyscrapers, find the cost of moving from the<strong> top  block</strong> of the first to the <strong>top block</strong> of the second using the described  elevator.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer N ( 1 &lt;= N &lt;= 1000 ). The next line contains four integers, x<sub>a</sub>, y<sub>a</sub>, x<sub>b</sub>, y<sub>b</sub>, (between 1 and N), representing the positions of the two skyscrapers.</p>
<p>The next line contains three integers: A, B and C (1 &lt;= A, B, C &lt;= 10<sup>9</sup>).</p>
<p>Generate the height of the skyscraper at coordinates (i, j) using the formula h<sub>ij</sub> = (((i-1)*N+j-1)*A + B) mod C (indicies are 1-based).</p>

*******OutputConstraints*******

<p>To the first and only line of input output the solution.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />3<br />1 1 3 3<br />5 5 7<br /><br /><strong>Output:</strong> <br />2<br /></pre>


______________________________________________________
STREETR||||||true||||||


<p>A group of&nbsp;trees&nbsp;is planted along a straight line.</p>
<p>KOI is planning to plant more trees so that the distance between two adjacent trees is&nbsp;equal for all trees.</p>
<p>For simplicity, each tree&nbsp;can only&nbsp;be planted on an integer coordinate.</p>
<p>For example, if&nbsp;4 trees&nbsp;were originally&nbsp;planted on coordinates (1,3,7,13),&nbsp;and if KOI plants&nbsp;3 more trees on coordinates&nbsp;(5,9,11), then the distance between two adjacent trees will equal for all trees.</p>
<p>Your task is to calculate the&nbsp;minimal number of trees that KOI&nbsp;can plant so that the distance between two adjacent trees will equal for all trees.</p>

*******InputConstraints*******

<p>The first&nbsp;line is an integer N (3&lt;=N&lt;=100,000), which denotes the number of already planted trees.</p>
<p>The next&nbsp;N lines will have&nbsp;an integer X (1&lt;=X&lt;=1,000,000,000), which&nbsp;denotes the coordinate of each&nbsp;tree.&nbsp;</p>
<p>You can safely assume that the value of&nbsp;X will be unique.&nbsp;</p>

*******OutputConstraints*******

<p>Output the minimal number of trees that must be planted.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>4</pre>
<pre>1</pre>
<pre>3</pre>
<pre>7</pre>
<pre>13</pre>
<pre><strong>Output:</strong></pre>
<pre>3</pre>
<pre><strong>Input:</strong></pre>
<pre>4</pre>
<pre>2</pre>
<pre>6</pre>
<pre>12</pre>
<pre>18</pre>
<pre><strong>Output:</strong></pre>
<pre>5</pre>


______________________________________________________
CHAIR||||||true||||||


<p>N chairs are placed in a circle.</p>
<p>There will be K attendants to&nbsp;a very important&nbsp;meeting.</p>
<p>However, the attendants do not like each other, so they&nbsp;do not want to sit beside each other in the meeting.</p>
<p>As&nbsp;the host of this&nbsp;important meeting, you want to find out how many ways there are&nbsp;to choose K chairs such that none of them&nbsp;are adjacent to each other.&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input is an integer N (4&lt;=N&lt;=1000), which denotes the number of chairs.</p>
<p>The next line is an integer K (1&lt;=K&lt;=N), which denotes the number of attendants to the meeting.</p>

*******OutputConstraints*******

<p>Output the total number of ways to choose K chairs from N chairs such that none of the chairs&nbsp;are adjacent.</p>
<p>Since the answer can get very large, output the answer modulo 1,000,000,003.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4</pre>
<pre>2</pre>
<pre><strong>Output:</strong>
2
</pre>


______________________________________________________
BUREAU||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Many centuries later lawyers discovered that there were only two types of laws in the kingdom:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&sup2; direct law, that states a new norm;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&sup2; canceling law, that cancels one of the previous laws.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The law is considered active if and only if there is no active law that cancels it.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You are to write program that &macr;nds out which laws are still active.</div>
<p>Long ago, in a kingdom far, far away the king decided to keep a record of all laws of his kingdom. From that moment whenever a new law was passed, a corresponding record was added to the law archive.</p>
<p>Many centuries later lawyers discovered that there were only two types of laws in the kingdom:</p>
<ul>
<li>direct law, that states a new norm;</li>
<li>canceling law, that cancels one of the previous laws.</li>
</ul>
<p>The law is considered active if and only if there is no active law that cancels it.</p>
<p>You are to write program that finds out which laws are still active.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input contains T, the number of test cases. T test cases follow.</p>
<p>The first line of each test case contains an integer number n (1 &lt;= n &lt;= 100000) - the number of passed laws.</p>
<p>The following n lines describe one law each. Each description has one of the following formats:</p>
<ul>
<li>"declare", meaning that a direct law was passed.</li>
<li>"cancel i", where i is the number of law being cancelled by this one.</li>
</ul>
<p>The laws are numbered from one.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case your output must contain a line with the number of active laws. The following line must contain numbers of these laws listed in increasing order.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
5
declare
cancel 1
declare
cancel 2
cancel 3

<strong>Output:</strong>
3
1 4 5</pre>


______________________________________________________
CIRCSCR||||||true||||||


<p>Yesterday Andrew wrote a program that draws n white circles on a black screen. The screen is monochrome and it has a resolution w x h pixels. Pixels are numbered from upper left corner (0, 0) to bottom right one (w-1, h-1).</p>
<p>A circle with the center at pixel (x<sub>c</sub>, y<sub>c</sub>) and the radius r consists of the pixels with coordinates (x, y) such that (x<sub>c</sub>-x)<sup>2</sup> + (y<sub>c</sub>-y)<sup>2</sup> &lt;= r<sup>2</sup> . If the circle does not fit on the screen, it is truncated. If some pixel belongs to two or more circles, it is white.</p>
<p style="text-align: center;"><img title="Example" src="../../content/fidels:CIRCLES.png" alt="Example" /></p>
<p>The resulting picture was very nice, so Andrew decided to copy it to his wall. He has white wallpaper and he can only draw some parts of wall into black. Now he wants to know the amount of paint he needs.</p>
<p>He copies the picture exactly pixel-to-pixel, so you should write a program that calculates the number of black pixels left on a screen after drawing n circles.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>In the first line of input file there is an integer T, the number of test cases. T test cases follow.</p>
<p>Each test case begins with a line where there are three integers: w, h, and n (1 &lt;= w, h &lt;= 20.000; 1 &lt;= n &lt;= 100). Each of the following n lines contains descriptions of the circles. In i+1-th line there are three integers: x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> (0 &lt;= x<sub>i</sub> &lt; w; 0 &lt;= y<sub>i</sub> &lt; h; 0 &lt;= r<sub>i</sub> &lt;= 40 000). They denote a circle with the center at pixel (x<sub>i</sub>, y<sub>i</sub>) and radius r<sub>i</sub>.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case you should output exactly one number - the number of black pixels left on the screen.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
5 3 2
1 1 1
3 1 1
12 9 2
3 3 2
7 5 4

<strong>Output:</strong>
6
51</pre>
<p><span style="white-space: normal;">Note: The picture corresponds to the second test case of the example.</span></p>


______________________________________________________
XMAX||||||true||||||


<p>Given a set of integers S = { a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... a<sub>|S|</sub> }, we define a function X on S as follows:<br />X( S ) = a<sub>1</sub> ^ a<sub>2</sub> ^ a<sub>3</sub> ^ ... ^ a<sub>|S|</sub>.<br />(^ stands for bitwise 'XOR' or 'exclusive or')</p>
<p>Given a set of N integers, compute the maximum of the X-function over all the subsets of the given starting set.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer N, 1 &lt;= N &lt;= 10<sup>5</sup>.<br />Each of the next N lines contain an integer a<sub>i</sub>, 1 &lt;= a<sub>i </sub>&lt;= 10<sup>18</sup>.</p>

*******OutputConstraints*******

<p>To the first line of output print the solution.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />3<br />1<br />2<br />4<br /><strong>Output:</strong><br /><br />7</pre>


______________________________________________________
NSUBSTR||||||true||||||


<p>You are given a string S which consists of 250000 lowercase latin letters at most. We define F(x) as the maximal number of times that some string with length x appears in S. For example for string 'ababa' F(3) will be 2 because there is a string 'aba' that occurs twice. Your task is to output F(i) for every i so that 1&lt;=i&lt;=|S|.</p>

*******InputConstraints*******

<p>String S consists of at most 250000 lowercase latin letters.</p>

*******OutputConstraints*******

<p>Output |S| lines. On the i-th line output F(i).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />ababa<br /><br /><strong>Output:</strong><br />3<br />2<br />2<br />1<br />1<br /></pre>


______________________________________________________
NFACTOR||||||true||||||


<p>A number is called&nbsp;<strong>n</strong>-factorful if it has exactly&nbsp;<strong>n</strong>&nbsp;distinct prime factors. Given positive integers&nbsp;<strong>a</strong>,&nbsp;<strong>b</strong>, and&nbsp;<strong>n</strong>, your task is to find the number of integers between&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>, inclusive, that are&nbsp;<strong>n</strong>-factorful. We consider 1 to be 0-factorful.</p>

*******InputConstraints*******

<p>Your input will consist of a single integer&nbsp;<strong>T</strong>&nbsp;followed by a newline and&nbsp;<strong>T</strong>&nbsp;test cases. Each test cases consists of a single line containing integers&nbsp;<strong>a</strong>,&nbsp;<strong>b</strong>, and&nbsp;<strong>n</strong>&nbsp;as described above.</p>
<p>&nbsp;</p>
<p><strong>T</strong>&nbsp;&gt; 10000<br />1 &le;&nbsp;<strong>a</strong>&nbsp;&le;&nbsp;<strong>b</strong>&nbsp;&le; 10<span style="font-size: xx-small;"><sup>6</sup></span><br />0 &le;&nbsp;<strong>n</strong>&nbsp;&le; 10</p>

*******OutputConstraints*******

<p>Output for each test case one line containing the number of&nbsp;<strong>n</strong>-factorful integers in [<strong>a</strong>,&nbsp;<strong>b</strong>].</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

<pre style="margin: 0px;">5
1 3 1
1 10 2
1 10 3
1 100 3
1 1000 0</pre>
<pre><strong>Output:</strong>
<pre style="margin: 0px;">2
2
0
8
1</pre>
</pre>
</pre>


______________________________________________________
ZEROCNT||||||true||||||


<p>Write down N integers 1, 2, ..., N in binary system on a paper, one per line, ignore all leading 0s:</p>
<p>1</p>
<p>10</p>
<p>11</p>
<p>100</p>
<p>101</p>
<p>110</p>
<p>111</p>
<p>...</p>
<p>Now on each line, consider all groups of consecutive 0s, index these group from 1. We will color all zeros in the 1st, (K+1)th, (2K+1)th, ... group, for K is a given integer.</p>
<p>For example: if a number in binary is: 1<span style="color: #ff0000;">0</span>1000111<span style="color: #ff0000;">00</span>110000, and K = 2. We have 4 groups of consecutive 0s, and we will color all zeros in the 1st and the 3rd group. So we will color 1 + 2 = 3 zeros in this line.</p>
<p>Given N and K. Compute total number of 0s we will color in the paper. (The paper is big enough to contain all numbers :D)</p>

*******InputConstraints*******

<p>Several lines, each line contains 2 integers: N and K separated by a single space. (1 &lt; N &lt; 2<sup>31</sup>, K &gt; 0)</p>

*******OutputConstraints*******

<p>For each line in the input, print exactly 1 number on a single line which is the result of the corresponding test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 1<br />56 2<br /><strong>Output:</strong><br />3<br />92</pre>


______________________________________________________
PSTR||||||false||||||

<p>A string is called a "prime string" if it can't be written as  concatenation of more than one same strings. For example, the following  strings are not prime strings: AAA, ABABAB, CFGFGCFGFG, while CFGFGC,  ABABA are prime strings. <br /> Calculate the number of prime string of length N  (1&lt;=N&lt;=1000000), and only contains first K (1&lt;=K&lt;=26)  letters from English alphabet. Note that some of these K letters need  not appear in that string.</p>

______________________________________________________
INTCOMB||||||true||||||


<p>You will be given n positive integers a_1, a_2, ..., a_n. We say that a  nonnegative integer combination of these numbers is of the form a_1*b_1 +  a_2*b_2 + ... + a_n*b_n where each of b_1, b_2, ..., b_n is a  nonnegative integer. You are to determine how many positive integers  cannot be expressed as a nonnegative integer combination of a_1, a_2,  ..., a_n.</p>

*******InputConstraints*******

<p>The first line contains a single integer denoting the number of test  cases (about 30). Each test case consists of a single line. The first  integer on the line is n, between 1 and 30, which indicates the number  of integers a_1, a_2, ..., a_n. Then n integers follow each between 1  and 100,000. The i'th such integer is a_i. All integers on this line are  separated by a space.</p>

*******OutputConstraints*******

<p>For each test case you are to output a single line. If there are only a  finite number of positive integers that cannot be expressed as a  nonnegative integer combination of a_1, a_2, ..., a_n, then you are to  output this number. Otherwise, simply output the text "Infinite"  (without quotes).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 <br />2 2 4 <br />2 4 5 <br />3 11 12 13<br /><strong>Output:</strong>
Infinite <br />6 <br />30<br /><strong>Explanation<br /></strong>Sample Test 2 :<br />You cannot express 1,2,3,6,7 and 11 using only the integers 4 and 5.<br /><strong><br /></strong></pre>

______________________________________________________
DIST||||||true||||||


<p>You are given the coordinates of N cities (xi,yi). Each city also has a  popularity value, pi. You have to place a new city (x,y) such that the  sum of distances of this new point from all the other given points is  minimized. <br /> Distance of the new point from a given city i is given by : <br /> d = |xi - x| ^ pi + | yi - y | ^ pi</p>

*******InputConstraints*******

<p>There are multiple test cases. <br /> First line contains the number of testcases. <br /> Each testcases starts with the number N, the number of points. <br /> This is followed by the descriptions of each in the format <br /> xi yi pi <br /> The input consists of only integers</p>

*******OutputConstraints*******

<p>For each testcase, output the minimum distance obtained, with exactly 3 digits after the decimal point.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 <br />3 <br />1 2 0 <br />4 5 1 <br />2 4 2<br /><strong>Output:</strong>
4.500<br /><br /></pre>

______________________________________________________
NONDEC||||||true||||||


<p>A Non-Decreasing number is a number whose ith digit from the left it greater than or equal to the (i-1)th digit from the left. <br /> You are given four integers A, B, C and D. X is any  integer b/w A and B, inclusive, and Y is any integer b/w C and D,  inclusive. You must output the number of numbers formed by the  concatenation of X and Y which are Non-Decreasing, i.e. if we treat "X"  and "Y" as STRINGS, then "Z" = "X" + "Y" must represent a Non-Decreasing  number.  <br /> Since this number can be very large, give your answer modulo 98765431. <br /> If the same number "Z" can be formed in various ways, it must be counted every time. See example for clarification.</p>

*******InputConstraints*******

<p>The first line of the input contains t, the number of test cases. <br /> This is followed by t lines containing 4 positive integers each, which are the values of A, B, C, D.</p>

*******OutputConstraints*******

<p>You must output t lines. Each line contains the answers for the quadruple (A, B, C, D) in the order they appear in input.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />1 11 1 11
<strong>Output:</strong>
56<br /><br /><strong>Explanation</strong><br />Note that the number "111" is counted twice. Once as "11" + "1" and again as "1" + "11".<br /><br /></pre>

______________________________________________________
WEIGHT||||||true||||||


<p>You are given N integers, A[1] to A[N]. You have to assign weights to  these integers such that their weighted sum is maximized. The weights  should satisfy the following conditions :</p>
<ol>
<li> Each weight should be an positive integer. </li>
<li> W[1] = 1 </li>
<li> W[i] should be in the range [2, W[i-1] + 1] for i &gt; 1 </li>
</ol>
<p>Weighted sum is defined as S = A[1] * W[1] + A[2] * W[2] + ... + A[N] * W[N]</p>

*******InputConstraints*******

<p>There are multiple test cases. <br /> First line contains the number of test cases <br /> Each test case consists of a single line containing N. <br /> This is followed by N lines, each containing A[i]</p>

*******OutputConstraints*******

<p>For each test case, output one line - the maximum weighted sum.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1 <br />4 <br />1 <br />2 <br />3 <br />-4<br /><strong>Output:</strong>
6<br /><strong>Explanation<br /></strong>The weights are 1,2,3,2<br /><br /></pre>

______________________________________________________
RECTMAT||||||true||||||


<p>In a matrix with n rows and m columns, (i,j) is the cell in i-th row and  j-th column(0&lt;=i&lt;n,0&lt;=j&lt;m). A rectangle (r0,r1,c0,c1) in a  matrix is the set of cells (i,j) where r0 &lt;= i &lt; r1 and c0 &lt;= j  &lt; c1. (0&lt;=r0 &lt; r1 &lt;= n, 0 &lt;= c0 &lt;c1 &lt;= m). Two  rectangles are called independent if the intersection of their cell set  is empty.<br /> Given n,m,k, find the number of ways to choose k  independent rectangles from a nxm matrix. The order of these k  rectangles doesn't matter, see sample for further clarification.</p>

*******InputConstraints*******

<p><br /> One line contains three integers n,m,k(1&lt;=n,m&lt;=1000, 1&lt;=k&lt;=6).</p>

*******OutputConstraints*******

<p>For each test case, output the number of ways, modulo 10^9+7.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 2 4<br />10 10 1<br /><strong>Output:</strong><br />1<br />3025<br /><strong>Explanation<br /></strong>First case: You have to find the number of ways of choosing 4  independent rectangles from a 2x2 matrix.<br />The only way to do this is to  choose each cell as a separate rectangle.<br /><br /></pre>

______________________________________________________
MATCH||||||true||||||


<p>You are given a bipartite graph with N(1&lt;=N&lt;=300) nodes on each side.         Determine whether the number of perfect matching is odd or even.</p>

*******InputConstraints*******

<p>First line is an integer T(1&lt;=T&lt;=20) means the number of test  cases. 	The following are T parts. 	Each part begin with an integer N(1&lt;=N&lt;=300) means the number of  nodes on both sides. 	It followed with N lines, each line contains a 0/1 string. 	If the j(1&lt;=j&lt;=N)th character of the i(1&lt;=i&lt;=N)th line is  1, it means the i th node on left have an edge to the j th node on  right. 	See the sample for details.</p>

*******OutputConstraints*******

<p>T lines, each contain "Odd" or "Even", which means the parity of the number of the perfect matching. 	See the sample for details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2   <br />1<br />1<br />4<br />1100<br />1100<br />0011<br />0011<br /><strong>Output:</strong>
Odd<br />Even<br /><br /></pre>

______________________________________________________
FASTFOOD||||||true||||||


<p>Hong Kil Dong wants to open a new fast food&nbsp;restaurant to make some money. The picture below describes the city where&nbsp;he wants to open&nbsp;his restaurant. The&nbsp;nodes are the possible&nbsp;locations that he can set up his new restuarant, and the edges are the&nbsp;length of the road&nbsp;connecting the&nbsp;two locations. You can assume that maximum five roads&nbsp;intersect at a single node, and that it is possible to reach&nbsp;all&nbsp;nodes&nbsp;from any chosen node.</p>
<p>There are three apartments (these three&nbsp;are the only&nbsp;places people live in)&nbsp;in this city, denoted A, B, and C, as shown in the picture.</p>
<p><img title="Graph" src="http://211.228.163.31/pool/koi_chain/img/chain.gif" alt="Graph" width="260" height="203" /></p>
<p>Suppose he wants to open his new restuarant in location (node)&nbsp;1. The shortest distances from&nbsp;location 1 to A, B, and C are 8, 16, and 9 respectively.&nbsp;These values&nbsp;are each larger than the shortest&nbsp;distances from&nbsp;location 4 to A, B, and C, which are 6, 7, and 3. Since people usually&nbsp;prefer using&nbsp;closer restuarants, it is better to open his restaurant in&nbsp;location 4.</p>
<p>Consider&nbsp;location 6. The shortest&nbsp;distances from&nbsp;location 6 to A,&nbsp;B, and C are 5, 3, and 5.&nbsp;Therefore,&nbsp;location 6 is better than location 1. However,&nbsp;when comparing&nbsp;with location 4, it is better regarding&nbsp;A and B, but worse&nbsp;when considering&nbsp;C.</p>
<p>Therefore, Hong Kil Dong came up with a&nbsp;criteria to determine whether a given&nbsp;location is good or bad.</p>
<p>Consider location p, and let&nbsp;the shortest&nbsp;distances from location p to A, B, and C be a, b, and c, respectively.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>Consider another&nbsp;location q, and let the shortest&nbsp;distances from location q to A, B, and C be x, y, z, respectively.</p>
<p>If a&gt;x, b&gt;y and c&gt;z, we say that location p is a bad location. If there is no location q that satisfies this, we say that location p is a good location.</p>
<p>Hong Kil Dong has chosen some candidate locations. Given the description of the city and a number of queries, determine whether&nbsp;each&nbsp;candidate location is good or bad.</p>
<p>Note that it is possible to open the restaurant in any of the locations, even in &nbsp;A, B, and C.</p>

*******InputConstraints*******

<p>The first line of the input is an integer N (1&lt;=N&lt;=100,000), denoting the number of locations. &nbsp;All the locations are numbered from 1-N.</p>
<p>The second line of the input is three integers A, B, and C, denoting the location of each apartment. A, B, and C are all&nbsp;distinct and are between 1 and N, inclusive.</p>
<p>The third line of the input is M, denoting the number of roads in this city.</p>
<p>The next M lines give the description of each road and consist of integer X, Y, and Z (1&lt;=Z&lt;=10,000). X and Y are the two endpoints of this road, and Z is the length of this road. No two same roads appear in the input.</p>
<p>The next line is an integer T (1&lt;=T&lt;=10,000), denoting the number of queries.</p>
<p>The next&nbsp;T lines&nbsp;each consist of an integer Q (1&lt;=Q&lt;=N), which denote the location number.&nbsp;</p>

*******OutputConstraints*******

<p>For each query, determine whether location Q is a good location or a bad location. If it is bad, output "NO" (quotes for clarity) and "YES" if it is good.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
9<br />2 5 9<br />15<br />1 2 8<br />1 3 5<br />2 4 6<br />2 5 8<br />2 6 5<br />3 4 6<br />3 9 4<br />4 6 4<br />4 9 3<br />5 6 3<br />5 7 4<br />6 7 2<br />6 9 5<br />7 8 7<br />8 9 6<br />2<br />1<br />2<br />
<strong>Output:</strong>
NO<br />YES<br />
</pre>


______________________________________________________
WINGOLD||||||true||||||


<p>In a game there are infinite number of levels. In order to go to the next level,a player has to clear all the preceding levels. A player cant go further,if  he fails to clear the level. Each  player has a probability p of clearing the level (which is independent of the other players and the level number). For  example, if p =1/2 there is a probability 2^(-n-1) that a particular game will have exactly n levels cleared.A player will get Gold medal if he clears the maximum number of levels. If the maximum number of levels reached is common between two or more players, then no one wins the gold medal.What is the probability that  a Gold medal is given to any player?</p>

*******InputConstraints*******

<p>T number of test cases each case follow<br />p n m . probability of clearing level for each player, number of player, number of levels in game</p>

*******OutputConstraints*******

<p>T line each probability that gold medal is given round off to 4 significant digits</p>
<p>limit:</p>
<p>1&lt;=T&lt;10000<br /> 1&lt;=n&lt;1000<br /> 1&lt;=m&lt;100<br /> 0&lt;=p&lt;=1.0</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />6<br />0.43 3 2<br />0.5 3 4<br />0.2 3 4<br />0.1 4 5<br />0.9 3 3<br />1.0 4 4<br /><strong>Output:</strong>
0.4490<br />0.6244<br />0.4184<br />0.3014<br />0.0275<br />0.0000</pre>


______________________________________________________
SIGNGAME||||||true||||||


<p>After the previous game ,each ball is either red or green in color. Dope tells you that he is changing the color of all balls in the range i to j (both inclusive),that is red balls to green and green balls to red.And then he asks you to tell the total extra mass of red balls over green balls for some range between i to j (inclusively). As you like red balls,you will try to maximize the total mass of red balls mass over the green balls. So He allows you to choose any range inside the range i, j inclusively which gives the maximum extra mass of red balls  over the green balls .When you choose a range, you have to take all the green and red balls that belong to the range.</p>
<p>Convention:<br />(+) positive mass represents red ball mass<br />(-) negative mass represents green ball mass</p>

*******InputConstraints*******

<p>T number of test cases<br />next T test cases follow each contains:<br />N number of balls <br />next line contains N mass of ball ( positive or negative)<br />next line Q number of operation and query next Q lines contain<br />c a b<br />c =0 change the color of balls in range a, b inclusively<br />c =1 print the maximum extra mass of red bass over green in the range a,b inclusively</p>

*******OutputConstraints*******

<p>each line for print query</p>
<p>limit:<br />1&lt;=T&lt;10<br />1&lt;=N&lt;100000<br />1&lt;=Q&lt;100000<br />0&lt;=a&lt;=b&lt;N<br />c = 0 or 1<br />abs(individual mass )&lt;1000</p>

*******IOTestCases*******

<p><strong>Input:</strong><br />1<br />5<br />2 -3 4 5 -2<br />4<br />0 0 2<br />1 0 2<br />1 1 3<br />0 1 1<br /><br /><strong>Output:</strong><br />3<br />5<br /><br />[you have to choose a range, if all balls are green in the range you have to print (-)ve answer]</p>


______________________________________________________
PLAYSIGN||||||true||||||


<p>You and Dope are visiting DAKSH. Suddenly Dope found some balls having some mass  on it and all balls are white in color. They found an interesting thing of the balls that they can  change color from red to green and vice versa on clicking the switch on it.Dope is in a funny  mood and wants to play a game with you.  He tells you that each player will switch the balls to either red or green color alternatively and  only white ball can be chosen to change the color.After changing the color of all balls you need  to pay an amount equal to the absolute difference between mass of the red balls and green balls.  Dopen would try to maximize the pay and obviously you want to give him as less as possible.  Dope invites you to play first. If you and Dope  play optimally, what is the amount you  have to pay to Dope?</p>

*******InputConstraints*******

<p>T number of test cases. Each case consists of two lines. first line N number of white balls. Next line contains a b c use to generate N mass using<br />mass = (a*i+b)%c; for 1&lt;=i&lt;=N<br /><br /></p>

*******OutputConstraints*******

<p>single line for each case the amount you need to pay</p>
<p>limit:<br />1&lt;=T&lt;1000<br />1&lt;=N&lt;10000</p>
<p>1&lt;=a,c&lt;1000<br />0&lt;=b&lt;1000</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />3<br />1 0 10<br />4<br />2 1 10<br /><strong>Output:</strong>
<br />2<br />10<br /><br />explanation:<br />case1: 3 mass = 1 2 3; output = 2<br />case2: 4 mass=3 5 7 9;output=10 </pre>


______________________________________________________
GLJIVE||||||true||||||


<p>In front of Super Mario there are 10 mushrooms, arranged in a row. A certain amount of points is<br />awarded for picking each of the mushrooms. Super Mario must pick mushrooms in order they appear,<br />but is not required to pick them all &ndash; his goal is to score a number of points as close as possible to<br />100.<br />In case there exist two such numbers which are equally close to 100 (e.g. 98 and 102), Mario will pick<br />the greater one (in this case 102).<br />Help Super Mario and tell him how many points he will score.</p>

*******InputConstraints*******

<p>Input consists of 10 lines, each of which contains one positive integer less than or equal to 100,<br />denoting the scores awarded for picking each mushroom, in the order that Mario can pick them in.</p>

*******OutputConstraints*******

<p><span style="font-family: Garamond;">
<p>The first and only line of output must contain the required number of points.</p>
</span></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<span style="font-family: Courier; font-size: small;"><span style="font-family: Courier; font-size: small;"><p align="left">10</p><p align="left">20</p><p align="left">30</p><p align="left">40</p><p align="left">50</p><p align="left">60</p><p align="left">70</p><p align="left">80</p><p align="left">90</p><p>100</p></span></span>

<strong>Output:</strong>
<span style="font-family: Courier; font-size: small;"><span style="font-family: Courier; font-size: small;"><p>100</p></span></span>
</pre>


______________________________________________________
SCROLL||||||true||||||


<p>Sruthi is looking at a spreadsheet containing N rows. Only K rows of the spreadsheet are visible at a time (If the top row is i, the bottom row will be i+K-1). In the beginning, rows 1..K are visible. Sruthi needs to read certain values from rows r1,r2...rM in that order. It is possible to scroll the spreadsheet so that the rows j..j+K-1 can be viewed instead of the current i..i+K-1. This operation counts as one scroll and its scroll length is defined as |j-i|</p>
<p>Find the minimum number of scrolls required so that Sruthi can read of all the M values in the given order. As there may be more than one way to do this, also find the minimum total scroll length required to do the reading in so many scrolls.</p>

*******InputConstraints*******

<p>The first line of the input contains the integer T (&lt;=20), the number of test cases to follow.</p>
<p>The description of each test case begins with a line containing 3 integers N(&lt;=10^8), K(&lt;=10^8) and M(&lt;=50000) as defined in the problem. Following this are M lines giving the row numbers from which values have to be read sequentially.</p>

*******OutputConstraints*******

<p>Output two space separated integers in a line per test case : The minimum number of scrolls required and the minimum scroll length required for the minimum number of scrolls.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
20 10 2
10
20
20 10 2
10
7

<strong>Output:</strong>
1 10
0 0
</pre>


______________________________________________________
CHOCDIST||||||true||||||


<p>In Dystopia, chocolates are being distributed to children waiting in a queue. The distribution proceeds as follows. Each chocolate bar is rectangular in shape with integer edge lengths. If the chocolate bar is a square, it is given away completely to the first child in the queue. Otherwise the largest possible square piece of chocolate is broken off from the chocolate bar and given to the first child. After a child receives his share of chocolate, he leaves the queue. The remaining portion of the chocolate bar is dealt with in the same fashion and the whole or a portion of it is given to the next child in the queue.</p>
<p>For example, if we start with a 5x3 chocolate bar, the first child in the queue receives a 3x3 chocolate bar, leaving a 2x3 bar. The second child gets a 2x2 bar while the third and fourth children get 1x1 bars. Thus four children have been fed using the 5x3 bar.</p>
<p>The Dystopian government has got a carton of chocolate bars to be distributed to children in the country. To make sure that maximum inequality is achieved while distributing chocolates, the chocolate bars in the carton are all of different sizes. For every i such that M&lt;=i&lt;=N and every j such that P&lt;=j&lt;=Q (where M,N,P,Q are integers) there is exactly one chocolate bar of length i and breadth j in the carton. Here a bar of length i and breadth j is considered to be different from a bar of length j and breadth i.</p>
<p>Given the values of M,N,P,Q find the number of children that can be fed with the chocolate in the carton.</p>

*******InputConstraints*******

<p>The first line of the input contains the number of test cases, T (&lt;=1000)</p>
<p>Following this are T lines, each describing a test case with four integers M,N,P,Q separated by spaces (1&lt;=M&lt;=N&lt;=100000000, 1&lt;=P&lt;=Q&lt;=1000)</p>

*******OutputConstraints*******

<p>Output T lines, each containing an integer : The number of children that can be fed using the chocolate in the carton</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1 2 1 2
3 4 4 5

<strong>Output:</strong>
6
14
</pre>


______________________________________________________
TRIEQUAL||||||true||||||


<p>Consider three distinct points A,B,C on a plane. The sum of straight line distances from A to B and B to C is always greater than or equal to the straight line distance from A to C. Equality holds only when ABC is a degenerate triangle. This is the famous <strong>triangle inequality</strong></p>
<p>In this case, distance between points is measured by the Euclidean metric. ie, the distance between points (x<sub>1</sub>,y<sub>1</sub>) and (x<sub>2</sub>,y<sub>2</sub>) is given by sqrt((x<sub>1</sub>-x<sub>2</sub>)<sup>2</sup>+(y<sub>1</sub>-y<sub>2</sub>)<sup>2</sup>). However, this is not the only metric possible. Another common metric used is the <strong>Manhattan metric</strong> where the distance between the pair of points is given by |x<sub>1</sub>-x<sub>2</sub>|+|y<sub>1</sub>-y<sub>2</sub>|</p>
<p>You are given N distinct points on a plane where distances are measured using the Manhattan metric. Find the number of ordered triplets of distinct points (A,B,C) such that the sum of distances from A to B and B to C is equal to the distance from A to C.</p>

*******InputConstraints*******

<p>The first line of input contains an integer T (&lt;=10), the number of test cases to follow.</p>
<p>Following this are the descriptions of T test cases. Each test case description begins with an integer N (&lt;=50000), the number of points. Following this are N lines, each giving the x and y coordinates of a point (0&lt;=x<sub>i</sub>,y<sub>i</sub>&lt;=10<sup>8</sup>) separated by a space.</p>

*******OutputConstraints*******

<p>Output T lines, each containing the number of ordered triplets of distinct points in every test case with the given property</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3
0 0
1 1
2 2
3
0 0
1 2
2 1

<strong>Output:</strong>
2
0
</pre>


______________________________________________________
MILPATR||||||true||||||


<p>Dystopia consists of N cities. There are one-way roads connecting some pairs of cities. The dysfunctional state has recently seen a lot of protests to overthrow the tyrannical ruler and the government plans to use military patrol vehicles to make sure that the protests are suppressed. Every patrol vehicle is assigned a sequence of cities. If a patrol vehicle is assigned the cities c<sub>1</sub>,c<sub>2</sub>,...c<sub>k</sub> then it starts from the city c<sub>1</sub> and takes the direct one-way road to c<sub>2</sub>, from there it takes the one-way road to c<sub>3</sub> and so on. Finally the vehicle takes the one way road from c<sub>k</sub> to c<sub>1</sub>. This routine is repeated everyday to keep the protestors perpetually under fear.</p>
<p>Now note that:</p>
<ul>
<li> Every city has to appear in exactly one vehicle's patrol sequence exactly once </li>
<li> Every patrol vehicle has to move - so it has to be assigned more than one city </li>
</ul>
<p>&nbsp;</p>
<p>The government does not have any limit on the number of patrol vehicles it can use. However, they want to make sure that the least possible amount of money is spent on the patrol mission and hence they want to minimise the total distance travelled by the patrol vehicles.</p>
<p>Given the road network of Dystopia, find the minimum total distance the patrol vehicles need to move so that all the cities can be patrolled. If it is impossible to organise a nationwide patrol with the given constraints, report the same.</p>

*******InputConstraints*******

<p>First line of the contains T, the number of test cases (T&lt;=10)</p>
<p>This is followed by the descriptions of the T testcases. The first line of the description contains two integers N and R, the number of cities and one way roads respectively (N&lt;=200,R&lt;=10000). The cities are numbered 1,2,3,...N This is followed by R lines, each representing a one way road by 3 integers N<sub>1</sub>, N<sub>2</sub> and D : the start city, the end city and the length of the road respectively ( N<sub>1</sub>!=N<sub>2</sub>, 1&lt;=D&lt;=1000000). You are assured that there is no more than one one way road from any N<sub>1</sub> to N<sub>2</sub></p>

*******OutputConstraints*******

<p>For each test case output one line. If the patrol can be done, output the minimum total distance that the patrol vehicles have to travel. Otherwise output Impossible</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 3
1 2 1
2 3 1
1 3 1
4 6
1 2 2
2 3 2
3 4 2
4 1 2
1 4 1
3 2 1

<strong>Output:</strong>
Impossible
6
</pre>


______________________________________________________
PARTPLNE||||||true||||||


<p>You are given the coordinates of 4*K+5 points on a plane such that no three of them are collinear. You need to select five points from these : a central point O and four arm points A,B,C,D such that:</p>
<ul>
<li>Rays from the centre to the arm points divide the plane into four regions containing an equal number of points </li>
<li>None of the four central angles is a reflex angle </li>
<li> Sum of absolute values of the cotangents of the central angles is as low as possible </li>
</ul>
<p>&nbsp;</p>
<p>If it is possible to choose points satisfying this condition, output the lowest possible value for the sum of absolute values of the cotangents of the central angles. Otherwise report that it is not possible.</p>

*******InputConstraints*******

<p>The first line of input contains T(&lt;=4), the number of test cases. Following this are the descriptions of the T test cases.</p>
<p>The first line in the description of each test case gives K(&lt;=100). Following this are 4*K+5 lines giving the x and y coordinates of each point separated by a space (0&lt;=x,y&lt;=10<sup>6</sup>)</p>

*******OutputConstraints*******

<p>For each test case output in a different line the minimum sum of absolute values of the cotangents of the central angles, with six digits after the decimal point. If the division cannot be done in the manner explained, print Impossible</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />0<br />0 0<br />0 1<br />1 1<br />1 0<br />2 3<br />0<br />0 0<br />2 0<br />0 1<br />2 1<br />1 2<br /><br /><strong>Output:</strong><br />4.500000<br />Impossible<br /></pre>


______________________________________________________
LEAKCONT||||||true||||||


<p>The acid manufacturing company has a special room to store leaky acid containers. The container holders in the room, which have the capacity to hold one leaky container each, are arranged in a rectangular grid of R rows and C columns such that the columns are in the North-South direction while the rows are in the East-West direction. Currently there are N leaky containers in some of the holders and M more have just arrived and need to be placed in the holders.</p>
<p>The company has realised that the containers being produced these days are exceptionally leaky. So much so that the acid that is leaking is corroding the holders completely.</p>
<p>Every acid container leaks either in the North-South direction or the East-West direction. Containers can be rotated by 90 degrees and thus a container that is leaking in the East-West direction can be made to leak North-South and vice versa. Given enough time, a leaky container can corrode the holder completely and start corroding the two adjacent holders in the leak direction and this process can go on.</p>
<p>The company employee has to make a decision fast. He needs to rotate some of the existing containers and place the new containers in proper holders and directions such that the total number of holders that will be corroded is minimised.</p>
<p>Find out the minimum number of holders that will be corroded after proper placement of the new containers and proper orientation of all containers.</p>

*******InputConstraints*******

<p>The first line of the input contains the number of test cases T (&lt;=10).</p>
<p>For each test case, the first line has four numbers R, C, N and M (1&lt;=R,C&lt;=100, 1&lt;=M,N&lt;=20, M+N&lt;=R*C). This is followed by N lines, each giving the location and leak direction of an existing container by 3 integers r (row number), c (column number) and d (1 if leakage is N-S, 0 if E-W). Numbering of rows and columns begins with 1.</p>

*******OutputConstraints*******

<p>For each test case, output on a different line the smallest number of holders that will get corroded after rotating the existing containers and placing the newly arrived containers.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4 6 4 4
1 2 0
2 4 0
3 2 1
3 5 1
50 50 5 10
1 35 1
17 44 0
17 46 1
42 35 1
42 46 0

<strong>Output:</strong>
12
148
</pre>


______________________________________________________
PROGPROG||||||true||||||


<p>An arithmetic progression is a sequence of numbers a<sub>1</sub>, a<sub>2</sub>,... a<sub>n</sub> such that a<sub>i+1</sub>-a<sub>i</sub> is equal for all 0&le;i&lt;n. This difference is called the common difference of the arithmetic progression.</p>
<p>Now consider a sequence of arithmetic progressions A<sub>1</sub> = (a<sub>1,1</sub>, a<sub>1,2</sub>,... a<sub>1,n<sub>1</sub></sub>), A<sub>2</sub> = (a<sub>2,1</sub>, a<sub>2,2</sub>,... a<sub>2,n<sub>2</sub></sub>),... A<sub>k</sub> = (a<sub>k,1</sub>, a<sub>k,2</sub>,... a<sub>k,n<sub>k</sub></sub>)</p>
<p>A progressive progression is such a sequence with the additional properties that:</p>
<ul>
<li> a<sub>i,n<sub>i</sub></sub> = a<sub>i+1,1</sub> for 1 &le; i &lt; k </li>
<li> c<sub>i</sub>, the common difference of A<sub>i</sub>, is a positive factor of a<sub>i,1</sub> for 1 &le; i &le; k </li>
<li> c<sub>i</sub>&lt;c<sub>i+1</sub> for 1 &le; i &lt; k </li>
<li> n<sub>i</sub> &gt;1 for 1 &le; i &le; k </li>
<li> k &ge; 1 </li>
</ul>
<p>&nbsp;</p>
<p>Find the number of progressive progressions such that a<sub>1,1</sub>=1 and a<sub>k,n<sub>k</sub></sub> = N. As this number can be quite large, output it modulo 100000007.</p>

*******InputConstraints*******

<p>The first line of input contains T (&le; 100), the number of testcases. This is followed by the description of the testcases. The description of each testcase consists of a single integer N (1 &lt; N &le; 1000000).</p>

*******OutputConstraints*******

<p>For each testcase, output modulo 100000007 the number of progressive progressions such that a<sub>1,1</sub>=1 and a<sub>k,n<sub>k</sub></sub> = N</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
5
10

<strong>Output:</strong>
1
6
</pre>


______________________________________________________
MOVEBOOK||||||true||||||


<p>Sheldon and Lenard are a pair of nerds playing an unimaginatively named game, "Move the books". The game board is an infinitely long strip of cells numbered 1,2,3.... from left to right. On certain cells, their favourite physics books have been placed. A player's move consists of taking any one of the books and moving it to any cell which lies to its left. But there is a constraint that you are not allowed to make your book jump over a cell that contains a book already (ie, You cannot move a book from cell j to cell i &lt; j if there is a cell k which contains one or more books such that i &lt; k &lt; j). However, you can place a book into a cell even if it contains one or more books already. But books that are placed in a cell are stacked in the order in which they arrive and hence only the topmost book (the last arrived one) can be moved from there. The players make moves alternately, and the person unable to move any book loses.</p>
<p>They have been playing the game for a long time. Sheldon makes the first move in all the games and wins most of the time. Lenard is fed up and wants to make the first move. However, Sheldon doesn't yield and this leads to an argument. This is the final agreement they have come up with:</p>
<ul>
<li> They start with N books placed in different cells. The arrangement is computer generated and hence there is no player role in this step </li>
<li> Lenard picks two natural numbers a &amp; c while Sheldon picks a natural number b. Both are unaware of the number(s) the other person has chosen while choosing their own number(s). Three more books are now added to the set : a cells to the right of the rightmost current book, b cells to the right of this book and c cells to the right of the latter book. </li>
<li> They start the game with the same rules as earlier, with Sheldon making the first move. </li>
</ul>
<p>&nbsp;</p>
<p>Now Lenard feels that there might be certain pairs (a,c) such that independent of which number Sheldon chooses, Lenard is assured to win the game. Given the initial configuration of the board find all such pairs, sort them lexicographically [(a<sub>1</sub>,c<sub>1</sub>) &lt; (a<sub>2</sub>,c<sub>2</sub>) iff a<sub>1</sub> &lt; a<sub>2</sub> or (a<sub>1</sub>=a<sub>2</sub> and c<sub>1</sub> &lt; c<sub>2</sub>)] and output the Kth such pair. If there are less than K pairs with this property, output Impossible</p>

*******InputConstraints*******

<p>The first line of the Input contains T (&le;50), the number of test cases. Following this are the descriptions of the T test cases</p>
<p>The first line in the description of each test case contains two space separated integers N (&le;1000) and K (&le;10<sup>8</sup>). Following these are N lines, each containing the location of a book. The book positions are given in increasing order and will each fit in a 32 bit signed integer.</p>

*******OutputConstraints*******

<p>For each test case output the Kth lexicographically smallest pair of integers that will assure Lenard a win. The two integers should be separated by a space and pairs for each test case should be output on a new line. If for any test case there are less than K pairs of integers that assure Lenard a win, on the line for that test case output Impossible</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
1 1
1

<strong>Output:</strong>
1 1
</pre>


______________________________________________________
ROADTRIP||||||true||||||


<p>Phileas Fogg and Passepartout are now going on a road trip in their brand new car. They start at location A<sub>0</sub> and need to go to A<sub>N</sub>. Their car has a capacity to hold only C units of fuel and can travel unit distance on unit amount of fuel. They start by filling some amount of fuel from the filling station at A<sub>0</sub>. On the way, there are several filling stations A<sub>1</sub>, A<sub>2</sub>,... A<sub>N-1</sub>. The cost of fuel is not the same at all filling stations. Find the minimum amount that they have to spend on fuel to make the journey.  Note that it is assured that the journey can be completed with the car of the given capacity.</p>

*******InputConstraints*******

<p>The first line of input contains T (&le;10), the number of test cases. Following this are the descriptions of the testcases</p>
<p>The first line in the description of each test case contains two space integers N (&le;50000) and C (&le;10<sup>8</sup>). This is followed by N lines, each containing an integer. The integer on the ith line is the distance from A<sub>0</sub> to A<sub>i</sub> and is &le; 10<sup>8</sup>. The distances are in increasing order. This is followed by N more lines, each containing an integer. The integer on the ith line is the cost of one unit of fuel at the filling station A<sub>i-1</sub> and is  &le; 10<sup>8</sup>.</p>

*******OutputConstraints*******

<p>Output one integer per test case, the minimum total amount that needs to be spent on fuel to complete the journey</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
5 10
10
20
30
40
50
1
2
1
2
1
5 15
10
20
30
40
50
1
2
1
2
1

<strong>Output:</strong>
70
60
</pre>


______________________________________________________
GNTFNTN||||||true||||||


<p>The Dystopian government has installed a giant fountain in front of the parliament building. The fountain consists of N levels stacked one on top of the other and is situated on top of a large tank of infinite capacity. The levels of the fountain are numbered 1 to N from top to bottom. The top l<sub>1</sub> levels are identical with capacity c<sub>1</sub>, the next l<sub>2</sub> levels identical with capacity c<sub>2</sub>,... the final l<sub>K</sub> levels with capacity c<sub>K</sub>. Here l<sub>1</sub> + l<sub>2</sub> + ... l<sub>K</sub> = N.</p>
<p>When water is added to level i beyond its capacity, the excess water overflows to level i+1. Water overflowing from level N is collected in the tank. Water is added to the levels in the following fashion. First, w<sub>1</sub> amount of water is added to each level i such that s<sub>1</sub> &le; i &le; e<sub>1</sub>. Then w<sub>2</sub> amount of water is added to each s<sub>2</sub> &le; i &le; e<sub>2</sub>... Finally w<sub>M</sub> amount is added to s<sub>M</sub> &le; i &le; e<sub>M</sub>. Note that water might be added to the same level multiple times in this fashion.  You have to find out the amount of water that has overflowed to the tank at the bottom, and the total number of levels of the fountain that are completely filled</p>

*******InputConstraints*******

<p>The first line of the input contains T (&le;10), the number of test cases. Following this are the descriptions of the test cases.</p>
<p>The first line of the description of a test case contains space separated integers N (&le;2x10<sup>8</sup>), K (&le;2000) and M (&le;10<sup>4</sup>). Following this are K lines, each containing a space separated pair of integers. These are the (l<sub>i</sub>,c<sub>i</sub>) pair as explained in the problem statement. Here l<sub>1</sub> + l<sub>2</sub> + ... l<sub>K</sub> = N and c<sub>i</sub> &le; 10<sup>8</sup>. This is followed by M lines, each containing a space separated triplet of integers. These are (s<sub>i</sub>,e<sub>i</sub>,w<sub>i</sub>) as explained in the problem statement. 1 &le; s<sub>i</sub> &le; e<sub>i</sub> &le; N and w<sub>i</sub> &le; 10<sup>6</sup></p>

*******OutputConstraints*******

<p>For each test case output a space separated pair of integers : The total amount of water that has overflowed to the tank and the number of levels of the fountain that are completely filled.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
10 2 1
5 6
5 3
3 9 5

<strong>Output:</strong>
5 5
</pre>


______________________________________________________
SSTRCITS||||||true||||||


<p>Unlike Dystopia, the neighbouring nation of Utopia believes in economic development. To improve the economy of the nation, the Utopian government has decided to select some pairs of cities as sister cities and take steps to improve trade relations between each pair.</p>
<p>There are N cities in Utopia, numbered 1 to N. There are two-way roads  connecting some pairs of cities. The total number of roads in Utopia is R. Now the road network in Utopia has been created efficiently so that there is no road that is redundant. That is, there is exactly one way to travel between any pair of cities without using the same road twice. Now when a pair of cities is chosen as sister cities, the government wants to make sure that there is a direct road between them. Also, a given city cannot have more than one sister.</p>
<p>Given the road network of Utopia, find the number of ways of selecting K pairs of sister cities under these constraints. As the answer can be quite large, output it modulo 100000007.</p>
<p>For example, assume that there are 6 cities in Utopia. There are direct roads between the following pairs of cities : (1,2), (2,3), (2,4), (4,5), (4,6). Notice that  there is exactly one way to travel between any pair of cities. If the government wants to select two pairs of sister cities, it can do it in four ways : {(1,2),(4,5)}, {(3,2),(4,5)}, {(1,2),(4,6)}, {(3,2),(4,6)}</p>

*******InputConstraints*******

<p>First line of the input contains T (&le;10), the number of test cases. This is followed by the description of the test cases.</p>
<p>The description of each test case begins with a line containing 3 space separated integers N (&lt;400), R (&lt;10000) and K (&lt;400). Following these are R lines, each representing a road in Utopia. The line will contain two different space separated integers N<sub>1</sub> and N<sub>2</sub> implying that there is a two way road between N<sub>1</sub> and N<sub>2</sub>. You are assured that the road network has the property as described in the problem statement.</p>

*******OutputConstraints*******

<p>For each test case, output modulo 100000007 the number of ways of selecting K pairs of sister cities satisfying the conditions in the problem statement.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 2 1
1 2
2 3
6 5 2
1 2
2 3
2 4
4 5
4 6

<strong>Output:</strong>
2
4
</pre>


______________________________________________________
SKISLOPE||||||true||||||


<p>A skier wants to ski down from the top of a mountain to its base. There are several possible routes, using different slopes enroute, and passing through some flat areas. The effort expended in skiing down a slope depends upon the length of the slope and the speed of skiing. For each slope, there is a maximum advisable speed. The skier wants to use a toute that minimizrs the <strong>average effort spent per unit distance traveled</strong> (i.e. the total effort expended divided by the total distance traveled).</p>
<p>The flat regions on the mountain are numbered 1 to N from top to bottom. The skier begins at level 1 and needs to reach level N. You are given the numbers of the flat regions each slope connects. Note that on a slope, one can only ski downwards. For each slope, you are also given the length of the slope and the maximum advisable speed for it. The effort expended in skiing down a particular slope is given by the following formula:</p>
<p>e = d*(70-s) if s &le; 60, and e = d*(s-50) if s &gt; 60</p>
<p>where e is the effort required, d is the distance traveled and s is the speed of travel.</p>
<p>You have to determine the minimum average effort per unit distance that the skier has to expend in order to reach the mountain base, while staying within the maximum advisable speed at every slope.</p>

*******InputConstraints*******

<p>The first line of input gives the number of test cases T(&le;20). This is followed by the descriptions of the test cases</p>
<p>For each test case, the first line of input gives the number of flats, N (N &le; 1000), and the number of slopes, R (R &le; 20000), connecting them respectively. Each of the next R lines describes a slope by giving: the numbers of the flats at the top and the bottom of the slope, the maximum advisable speed for the slope (&le; 100), and the length of the slope (&le; 1000) respectively.</p>

*******OutputConstraints*******

<p>For each test case, output a single number (with four places after the decimal point, rounded up) that gives the minimum average effort per unit distance that needs to be expended to ski down from the mountain top to the base. The output for each test case should be on a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4 5
1 4 30 60
1 2 50 40
1 3 60 20
2 4 60 50
3 4 50 50
3 3
1 2 50 40
1 3 40 20
2 3 20 30

<strong>Output:</strong>
14.4445
30.0000
</pre>


______________________________________________________
PLCNMGME||||||true||||||


<p>Place-name game is a favourite pastime among the few children that go to school in Dystopia. The game is played as follows : One player says the name of a city and the next player has to say the name of a city that begins with the last letter of the said city. The game then goes on.</p>
<p>Dystopian cities recently went through a massive renaming. Now each city has a name that begins with a consonant and ends with a consonant.</p>
<p>Anaximander is a student with a very poor knowledge of geography. Hence he fares very poorly in the game. He has recently come up with a new idea. He would just remember the name of 21 Dystopian cities. He wants to choose the 21 cities such that there is exactly one city name starting with each consonant and exactly one city name ending with each. This would give him a good advantage in the game, whether he is playing first or second.</p>
<p>Given the names of the N cities in Dystopia, find out the number of ways Anaximander can select 21 city names out of the lot satisfying the properties. As this number can be very large, output it modulo 100000007.</p>

*******InputConstraints*******

<p>The first line of the input contains N (&le;1000), the number of cities. This is followed by N lines, each containing the name of a city in Dystopia. Each city name will begin and end with a consonant, and will contain at least 2 and at most 10 letters.</p>

*******OutputConstraints*******

<p>Output modulo 100000007 the number of ways Anaximander can choose 21 city names out of the N with the intended properties.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
23
BBBB
CCCC
DDDD
FFFF
GGGG
HHHH
JJJJ
KKKK
LLLL
MMMM
NNNN
PPPP
QQQQ
RRRR
SSSS
TTTT
VVVV
WWWW
XXXX
YYYY
ZZZZ
BAAC
CAAB

<strong>Output:</strong>
2
</pre>


______________________________________________________
ENUMRTNL||||||true||||||


<p>It is well known that rational numbers form a countable set. Hence the set of rational numbers in the open interval (0,1) also form a countable set.</p>
<p>Here we enumerate the rationals in (0,1) in the following fashion. First, every rational is expressed in the lowest terms : ie, as p/q where p and q are positive integers with no common factor other than one. Then we sort the fractions in the ascending order of p+q. In case of a tie, the smaller fraction comes first.</p>
<p>The first few terms in this enumeration are 1/2, 1/3, 1/4, 2/3, 1/5, 1/6, 2/5...</p>
<p>Given a natural number N, find the numerator and denominator of the Nth term in the enumeration.</p>

*******InputConstraints*******

<p>The first line of the input contains T (&le;1000), the number of test cases. This is followed by T lines, each containing an integer N(&le;10<sup>11</sup>).</p>

*******OutputConstraints*******

<p>For each value of N, output separated by space the numerator and denominator (in lowest terms) of the Nth fraction in the enumeration</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />3<br />6<br /><br /><strong>Output:</strong><br />1 4<br />1 6<br /></pre>


______________________________________________________
CNTTEAMS||||||true||||||


<p>The teacher in the Dystopian School for Politics and other Dirty Games (DSPDG) is training students in group activities. She feels that to really understand group behavior, students need to practice working in groups of different sizes. This is how she groups the students:</p>
<p>There are N students in the class, with roll numbers from 1 to N(2&le;N&le;10<sup>12</sup>). The teacher generates using her laptop a random permutation of the roll numbers. The student with the roll number equal to the i<sup>th</sup> number in the permutation is assigned as a "target" to the student with roll number as i (Note that "targetship" is not mutual. If 1 is the target for 2, 2 need not be the target for 1). If any student is assigned himself as the target, the teacher generates another permutation till no student is assigned himself.</p>
<p>The N students stand far from each other. Now student 1 goes and joins his target. After this, student 2 (and any student who is with him) joins 2's target. At the i<sup>th</sup> step, student i and anyone who is already with him joins i's target. In case i's target is already with him, nothing is done.</p>
<p>By following this procedure, when all students have joined their targets, the class gets split into some groups. For example, assume that there are 6 students in the class and the permutation that has been generated is {2,4,5,6,3,1}. First, 1 goes and joins 2. Then 1 and 2 join 4. Then 3 joins 5. Then 1, 2 and 4 join 6. 5 is already with 3 and hence does not move. Similarly 6 is already with 1 and does not move. In the end, we have 2 teams : {1,2,4,6} and {3,5}</p>
<p>Given N, find out the expectation value of the number of teams that will be formed when the teacher groups the class in this fashion.</p>

*******InputConstraints*******

<p>First line of the input contains T(&le;100), the number of test cases. Following this are T lines, each containing an integer N(2&le;N&le;10<sup>12</sup>).</p>

*******OutputConstraints*******

<p>For each N, output the expectation value of the number of groups formed. Output 6 digits after the decimal point while printing the expectation value</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3
4

<strong>Output:</strong>
1.000000
1.333333
</pre>


______________________________________________________
BRODOVI||||||true||||||


<p>Mirko lives in a small town with a harbour: once in a blue moon a ship passes by. However, to this day<br />Mirko remembers the day when all the ships who had ever visited the harbour showed up. He<br />denoted this day by index 1.<br />Many days have passed since, but Mirko noted each day when at least one ship visited the harbour,<br />naming these days entertaining.<br />Additionally, Mirko has noticed that each ship visits the harbour periodically, at regular intervals. For<br />instance, an interval of length 3 implies that some ship visited the harbour on days 1, 4, 7, 10 etc.<br />Given Mirko&rsquo;s list of entertaining days (including today which is considered to be an entertaining day as<br />well), compute the minimum possible number of ships visiting his harbour.<br />Notes: All entertaining days appear on Mirko&rsquo;s list. It is guaranteed that the given data is consistent - in<br />other words, a solution will always exist.</p>

*******InputConstraints*******

<p>The first line of input contains an integer N (2 &le; N &le; 5000), the number of entertaining days.<br />The following N lines contain indices of entertaining days, one per line, in ascending order. The first<br />and the last indices, representing the day from which Mirko started monitoring harbour traffic and<br />today, respectively, will always appear on the list. The first index will always be 1, and the last one<br />(index of today) will be less than 109.</p>

*******OutputConstraints*******

<p>The first and only line of output must contain the required minimum number of ships.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />1<br />7<br />10<br />13<br />19<br /><strong>Output:</strong><br />2</pre>


______________________________________________________
MIDO||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Slavko has started to follow the NBA league. The game duration is exactly 48 minutes. When a game&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">ends, the statistics are shown. Slavko has written down whenever a team scored. He is curious about&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">how long each team was in the lead. &nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">INPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first line of input contains one integer N (1 &le; N &le; 100). The following N lines describe events&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">when a team scored.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each description consists of a team that scored, which is either &nbsp;1 or &nbsp;2, and a timestamp in format&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">MM:SS (minutes:seconds), the time when a team scored. Minutes and seconds are zero padded and&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">from ranges [00, 47] and [00, 59] (inclusive). The given timestamps are unique.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">OUTPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first line of output must contain the duration that the first team was in the lead.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The second line of output must contain the duration that the second team was in the lead.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">All durations should be in MM:SS format, with leading zeros</div>
<p>&nbsp;</p>
<p>Slavko has started to follow the NBA league. The game duration is exactly 48 minutes. When a game&nbsp;</p>
<p>ends, the statistics are shown. Slavko has written down whenever a team scored. He is curious about&nbsp;</p>
<p>how long each team was in the lead. &nbsp;</p>
<p><strong>INPUT&nbsp;</strong></p>
<p>The first line of input contains one integer N (1 &le; N &le; 100). The following N lines describe events&nbsp;</p>
<p>when a team scored.&nbsp;</p>
<p>Each description consists of a team that scored, which is either &nbsp;1 or &nbsp;2, and a timestamp in format&nbsp;</p>
<p>MM:SS (minutes:seconds), the time when a team scored. Minutes and seconds are zero padded and&nbsp;</p>
<p>from ranges [00, 47] and [00, 59] (inclusive). The given timestamps are unique.&nbsp;</p>
<p><strong>OUTPUT&nbsp;</strong></p>
<p>The first line of output must contain the duration that the first team was in the lead.&nbsp;</p>
<p>The second line of output must contain the duration that the second team was in the lead.&nbsp;</p>
<p>All durations should be in MM:SS format, with leading zeros.</p>
<p><strong>SAMPLE TESTS</strong></p>
<p>&nbsp;</p>
<p><strong>input&nbsp;</strong></p>
<p>3&nbsp;</p>
<p>1 01:10&nbsp;</p>
<p>2 21:10&nbsp;</p>
<p>2 31:30&nbsp;</p>
<p><strong>output&nbsp;</strong></p>
<p>20:00&nbsp;</p>
<p>16:30&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
CCHESS||||||true||||||


<p>In the country of Rome, Chess is a royal game. For evey move the players had to give some bucks to the Emperor Jurg. The LGMs or Little Green Men, are very good player of chess. But as the chess is a expensive game, thats why it is royal, they asked you to help them find the minimum bucks which they had to pay for moving their Knight from one position to another. Any number of steps can be used to reach the destination.</p>
<p><strong>Constraints:</strong></p>
<p>The chess has a dimension of 8X8, and the index of left bottom cell (0, 0).</p>
<p>Knight move only in a standard way, i.e. 2 row and 1 col or 1 row and 2 col.</p>
<p>If in a step Knight move from (a, b) to (c, d), then LGM had to pay a*c + b*d bucks to Emperor Jurg.</p>
<p>0 &le; a, b, c, d &le; 7</p>

*******InputConstraints*******

<p>There are 100-150 test cases. Each test case is composed of four space separeated integers.The first two numbers, a, b, are the starting position of the Knight and the next two, c, d, are the destination of the Knight. Read upto End Of File.</p>

*******OutputConstraints*******

<p>For each test case, print the minimum amount of bucks they had to pay in separate line. If its impossible to reach the destination then print -1.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 5 5 2<br />4 7 3 2<br />1 2 3 4<br /><br /><strong>Output:</strong><br />42<br />78<br />18<br /><br /><br /><em><span style="text-decoration: underline;">Explanation for test case #1:<br /></span>2 5 5 2<br /><br /></em>For moving Knight from (2, 5) to (5, 2) in minimum cost,  one of the path is (2, 5) -&gt; (3, 3) -&gt;(5, 2)<br />Bucks paid:<br />(2, 5)              =  0<br />(2, 5) -&gt; (3, 3) =  0 + (2*3 + 5*3) = 21<br />(3, 3) -&gt; (5, 2) = 21 + (3*5 + 3*2) = 42<br />     <br /><br /><em>To infinity and beyond...</em><br /></pre>


______________________________________________________
PRISMSA||||||true||||||


<p>In a far away nation, all the liquid substance are stored in a can of shape of a triangular prism. According to belief, this will bring security to their children. As they are very resource conservative people, unlike the earth natives, they want to use as less as possible amount of the raw material to be used for producing the can, which directly depends on the surface area of the can. Mr. Buzz Light Year, of Star Command, is provided with the responsiblity to find the minimal suface area required to prodce a can of a given volume.</p>
<p><strong>Notes</strong></p>
<p>- Consider the material the can is made of to be infinitely thin.</p>
<p>- The base of the prism is equilateral triangle.</p>
<p>- Some formuls:</p>
<p>&nbsp; a: triangle side's length.</p>
<p>&nbsp; h: height of the prism.</p>
<p>&nbsp; Volume, V =&nbsp; (a<sup>2</sup> * sin(60&deg;) * h)/2</p>
<p>&nbsp; Surface Area, S = a<sup>2</sup>*sin(60&deg;) + 3*a*h</p>
<p>&nbsp;- If not provided by a library, use the alue of 2*acos(0) for PI(&pi;).</p>
<p>&nbsp;- Reminder</p>
<p>&nbsp;&nbsp;&nbsp; If your result is within 10<sup>-2</sup> of the expected result, your solution will be evaluated as correct.</p>
<p>&nbsp;&nbsp;&nbsp; If your result is between (1-10<sup>-2</sup>)*expected and (1+10<sup>-2</sup>)*expected, it will be evaluated as correct.</p>
<p>&nbsp;</p>
<p><img title="Prism" src="http://cat4mba.com/Notes/Maths/geometry/SpaceFigure_files/image012.gif" alt="Prism" width="265" height="131" /></p>
<p>&nbsp;</p>
<p><strong>Constriants:</strong></p>
<p>&nbsp;- Volume will be between 1 and 100000, inclusive.</p>
<p>&nbsp;- Volume will always be a integer.</p>

*******InputConstraints*******

<p>Input begins with a integer t, number of test cases. Then follows t lines, each one containing an integer, V, given volume.</p>

*******OutputConstraints*******

<p>For each volume, print the minimum surface area required to produce the can in separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />10<br />5<br />100<br />245<br />5421<br /><br /><strong>Output:</strong><br />30.3872837089<br />19.1427891970<br />141.0452767471<br />256.3318686611<br />2020.2796324002<br /><br /><em><span style="text-decoration: underline;">Explanation for test case 1:</span></em> Volume = 10<br /> a = 3.41995<br /> h = 1.97451<br /> Minimum Surface Area = 30.3872837089</pre>


______________________________________________________
TSUM||||||true||||||


<p>You're given a sequence <strong>s</strong> of <strong>N</strong> distinct integers.<br />Consider all the possible sums of three integers from the sequence at three different indicies.<br />For each obtainable sum output the number of different triples of indicies that generate it.<br /><strong><br />Constraints:</strong><br />N &lt;= 40000, |s<sub>i</sub>| &lt;= 20000</p>

*******InputConstraints*******

<p>The first line of input contains a single integer N.<br />Each of the next N lines contain an element of s.</p>

*******OutputConstraints*******

<p>Print the solution for each possible sum in the following format:<br />sum_value : number_of_triples<br /><br />Smaller sum values should be printed first.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />5<br />-1<br />2<br />3<br />0<br />5<br /><strong>Output:</strong>
<br />1 : 1<br />2 : 1<br />4 : 2<br />5 : 1<br />6 : 1<br />7 : 2<br />8 : 1<br />10 : 1<strong><br /></strong></pre>
<p><strong>Explanation:</strong><br />4 can be obtained using triples ( 0, 1, 2 ) and ( 0, 3, 4 ).<br />7 can be obtained using triples ( 0, 2, 4 ) and ( 1, 3, 4 ).<br /><br /><strong>Note:</strong> a triple is considered the same as any of its permutations.</p>


______________________________________________________
AVION1||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Mirko and Slavko are USKOK agents tracking the movements of an unnamed corrupt government&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">official. Anonymous sources have tipped them about his upcoming escape attempt. They now know he&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">plans to use his diplomatic liaisons to try and hitch a ride on a CIA blimp leaving from Severin na Kupi&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">blimp port.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">It&rsquo;s common knowledge that all CIA blimps have the &nbsp;string &ldquo;FBI&rdquo; somewhere in their registration&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">codes. They obtained a list of all blimps scheduled for the designated day. There are exactly 5 blimps&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">on the list. Write a program that will point out all CIA blimps.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">INPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">There are exactly 5 rows of input, each row representing one blimp registration code from the list. A&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">registration code is a sequence of at most 10 uppercase letters of the English alphabet, digits &lsquo;0&rsquo; to &lsquo;9&rsquo;,&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">or dashes &lsquo;.&rsquo;.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">OUTPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first and only line of output must contain a space separated list of integers, sorted in increasing&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">order, indicating the corresponding input rows containing registrations of CIA blimps.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 100px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">If there are no CIA blimps, output the string &ldquo;HE GOT AWAY!&rdquo;</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Mirko and Slavko are USKOK agents tracking the movements of an unnamed corrupt government&nbsp;</p>
<p>official. Anonymous sources have tipped them about his upcoming escape attempt. They now know he&nbsp;</p>
<p>plans to use his diplomatic liaisons to try and hitch a ride on a CIA blimp leaving from Severin na Kupi&nbsp;</p>
<p>blimp port.&nbsp;</p>
<p>It&rsquo;s common knowledge that all CIA blimps have the &nbsp;string &ldquo;FBI&rdquo; somewhere in their registration&nbsp;</p>
<p>codes. They obtained a list of all blimps scheduled for the designated day. There are exactly 5 blimps&nbsp;</p>
<p>on the list. Write a program that will point out all CIA blimps.&nbsp;</p>
<p style="text-align: center;"><strong>INPUT&nbsp;</strong></p>
<p>There are exactly 5 rows of input, each row representing one blimp registration code from the list. A&nbsp;</p>
<p>registration code is a sequence of at most 10 uppercase letters of the English alphabet, digits &lsquo;0&rsquo; to &lsquo;9&rsquo;,&nbsp;</p>
<p>or dashes &lsquo;.&rsquo;.&nbsp;</p>
<p style="text-align: center;"><strong>OUTPUT&nbsp;</strong></p>
<p>The first and only line of output must contain a space separated list of integers, sorted in increasing&nbsp;</p>
<p>order, indicating the corresponding input rows containing registrations of CIA blimps.&nbsp;</p>
<p>If there are no CIA blimps, output the string &ldquo;HE GOT AWAY!&rdquo;</p>
<p>&nbsp;</p>
<p><strong>input&nbsp;</strong></p>
<p>N-FBI1&nbsp;</p>
<p>9A-USKOK&nbsp;</p>
<p>I-NTERPOL&nbsp;</p>
<p>G-MI6&nbsp;</p>
<p>RF-KGB1&nbsp;</p>
<p><strong>output&nbsp;</strong></p>
<p>1&nbsp;</p>
<p>&nbsp;</p>
<p><strong>input&nbsp;</strong></p>
<p>N321-CIA&nbsp;</p>
<p>F3-B12I&nbsp;</p>
<p>F-BI-12&nbsp;</p>
<p>OVO-JE-CIA&nbsp;</p>
<p>KRIJUMCAR1&nbsp;</p>
<p><strong>output&nbsp;</strong></p>
<p>HE GOT AWAY!</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
PARKET1||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Ivica has set up a new parquet flooring in his room. The room is L decimeters long and W decimeters&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">wide.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The blocks are of quadratic shape and each has an area of one quadratic decimeter. Once Ivica had set&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">up the flooring, which consists of brown.colored blocks, he decided to paint the blocks on the edge</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">of the room red.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The picture below illustrates the scenario from the test case #2 &ndash; outer blocks are red, while the&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">remaining two inner blocks are brown:&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Marica has come to visit Ivica. While Ivica was serving her cookies, she counted the number of blocks&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">of each color. When she returned home, she recalled of the two numbers and wished to calculate the&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">dimensions of Ivica&rsquo;s room. Help her!&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">INPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first and only line of input contains two integers separated by a space, &nbsp;R (the number of red&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">blocks) and B (the number of brown blocks). The following constraints will apply: 8 &le; R &le; 5000, 1 &le;&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">B &le; 2 000 000.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">OUTPUT&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first and only line of output must contain the dimensions of the room, L and W, respectively. If&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the numbers differ, output the greater one first. The test data will ensure that a unique solution always&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">exists</div>
<p>&nbsp;</p>
<p>Ivica has set up a new parquet flooring in his room. The room is L decimeters long and W decimeters&nbsp;wide.&nbsp;</p>
<p>The blocks are of quadratic shape and each has an area of one quadratic decimeter. Once Ivica had set&nbsp;up the flooring, which consists of brown.colored blocks, he decided to paint the blocks on the edge&nbsp;of the room red.&nbsp;</p>
<p>The picture below illustrates the scenario from the test case #2 &ndash; outer blocks are red, while the&nbsp;remaining two inner blocks are brown:&nbsp;</p>
<p style="text-align: center;"><img src="http://www.spoj.plhttp://www.9ower.com/uploads/9ower.com18d512980550531.png" alt="picture for problem" width="120" height="86" /></p>
<p>Marica has come to visit Ivica. While Ivica was serving her cookies, she counted the number of blocks&nbsp;of each color. When she returned home, she recalled of the two numbers and wished to calculate the&nbsp;dimensions of Ivica&rsquo;s room. Help her!&nbsp;</p>
<p style="text-align: center;"><strong>INPUT&nbsp;</strong></p>
<p>The first and only line of input contains two integers separated by a space, &nbsp;R (the number of red&nbsp;</p>
<p>blocks) and B (the number of brown blocks). The following constraints will apply: 8 &le; R &le; 5000, 1 &le;&nbsp;B &le; 2 000000.&nbsp;</p>
<p style="text-align: center;"><strong>OUTPUT&nbsp;</strong></p>
<p>The first and only line of output must contain the dimensions of the room, L and W, respectively. If&nbsp;</p>
<p>the numbers differ, output the greater one first. The test data will ensure that a unique solution always&nbsp;</p>
<p>exists.</p>
<p>&nbsp;</p>
<p><strong>input&nbsp;</strong></p>
<p>8 1 &nbsp;</p>
<p><strong>output&nbsp;</strong></p>
<p>3 3</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>input&nbsp;</strong></p>
<p>10 2&nbsp;</p>
<p><strong>output&nbsp;</strong></p>
<p>4 &nbsp;3</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
BALL||||||true||||||


<p>In a coordinate plane, there are N horizontal conveyor belts, each moving either leftwards or rightwards. When the ball falls on a belt, the belt drags it in direction it's moving. When the ball reaches the end of the belt, it falls vertically downwards. For example, if the belt is moving rightwards and it ends in the unit square with x-coordinate 12, the ball will fall from the belt on the x-coordinate 13, and continue falling on the same x-coordinate until it falls on another belt or reaches the ground (the height of 0).</p>
<p>Frane drops a ball many times (from the height that is greater than any of the belt heights), from various x-coordinates, and your task is: for each ball Frane drops, determine the direction of each belt such that this ball falls on as many belts as possible.</p>
<p>This picture reprezents the first test example: &nbsp;<img title="First example" src="http://i.imgur.com/hjvKB.png" alt="" width="211" height="161" /></p>

*******InputConstraints*******

<p>In the first line of input, there is an integer N (the number of conveyor belts, 1 &le; N &le;&nbsp;100000).</p>
<p>In each of the next N lines, there are integers X1, Y1, Z (X1 &le;&nbsp;X2, 0 &lt; X1, X2, Y &lt; 10<sup>9</sup>) reprezenting the belt. Imagine the belt as a segment of which the bounding unit squares are (X1, Y) and (X2, Y). The belt's thickness is zero and it lies on the bottom of the given unit squares. The belts will not touch or overlap each other.</p>
<p>In the next line, there is an integer Q (the number of falling balls, 1 &le; Q &le;&nbsp;100000).</p>
<p>In the next Q lines there is an integer less than 10<sup>9</sup>, reprezenting the x-coordinate of the unit square Frane drops the ball from.</p>

*******OutputConstraints*******

<p>For each of the Q queries, output the greatest possible number of the conveyor belts visited by the ball.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">3
1 4 3
5 7 2
2 4 1
4
1
4
5
6</pre>
<strong>Output:</strong></pre>
<pre>3</pre>
<pre>3</pre>
<pre>2</pre>
<pre>2</pre>
<pre><strong>Input:</strong></pre>
<pre><pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px; font-weight: bold;">3
5 20 20
15 30 15
10 14 11
3
5
30
516546</pre>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px; font-weight: bold;"><strong><strong>Output:</strong></strong></pre>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px; font-weight: bold;"><pre style="color: #000000; font-family: 'Courier New', Courier, monospace; font-size: 12px; font-weight: bold; margin: 8px;">3
2
0</pre>
</pre>
</pre>


______________________________________________________
YOUTUBE||||||true||||||


<p>N students are bored in computer class so they watch funny video clips on YouTube.</p>
<p>The site contains K popular clips, numbered 1 through N. When a video clip is watched, a list of similar video clips is displayed on the side.</p>
<p>Every student picks a video clip from the main page and starts watching it. After exactly one minute every student gets bored of his or her video clip, so he opens the <strong>first </strong>video clip from the list of similar clips on the side (even if he already watched that clip).</p>
<p>Write a program that determines for each student which video clip he will be watching <strong>during the M-th minute </strong>of the class.</p>

*******InputConstraints*******

<p>The first line contains three integers N, K and M (1 &le; N, K &le; 100 000) (1 &lt; M &le; 1 000 000 000), the numbers of students, video clips and minutes.</p>
<p>The second line contains N integers, each between 1 and K, the indices of video clips the students start watching.</p>
<p>The third line contains K integers, each between 1 and K, the index of the first similar clip for each video clip.</p>

*******OutputConstraints*******

<p>Output N integers, the indices of video clips that students will be watching during the M-th minute.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4 5 2<br />1 2 4 3<br />5 5 1 2 3
<strong><br />Output:</strong>
5 5 2 1<br /><strong><br /><br />Input:</strong><br />2 6 5<br />1 6<br />2 3 4 1 4 5<br /><strong><br />Output:</strong><br />1 2<br /></pre>


______________________________________________________
QUADRATE||||||true||||||


<p>Manohar is new to mathematics and now a days he is learning quadratic equations. He is learning that how to find for a given quadratic equation that whether equation has equal roots ,imaginary roots or real but distinct roots. His teacher has given him some quadratic equations and told him to tell the nature of roots. Manohar is not sure for his solutions so he want your help . Write a program that determine the nature of roots. &nbsp;</p>

*******InputConstraints*******

<p>In the first line no of test cases is given(T&lt;=10). Then T lines follows each containing a quadratic equation in the form a*x*x + b*x+c=0 ,where a,b,c are constants 0&lt;a&lt;1000 and -10000&lt;= b,c&lt;=10000.<sup>&nbsp;&nbsp;&nbsp;</sup></p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case output "Equal roots." ,"Imaginary roots." or "Distinct real roots." according to nature of the roots as explained above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>2
x*x-2*x+1=0
2*x*x+5*x-3=0
<strong>Output:</strong>
Equal roots.</pre>
<pre>Distinct real roots.</pre>


______________________________________________________
KCYCLES||||||true||||||


<p>In Byteland, Government is planning to repair all roads in different cities. To minimize the cost it is required to know that how many roads are redundant. For this the Byteland Governer has assigned you to find out how many cycles are there in the road network in Byteland . You are given a map of roads . Count the number of k-cycles &nbsp;in the network for given positive integer 1&lt;k&lt;100.A k-cycle is a cycle consisting of k no of roads and no road is repeated.</p>

*******InputConstraints*******

<p>First line- No of test cases T&lt;=100.</p>
<p>In each test case first line is three &nbsp;integers n,m and k where n is no of cities and m is no roads. Then m lines follows each containing two integers 0=&lt;u,v&lt;n denoting a road between city u and v.Remember u and v can be repeated showing multiple roads between two cities.</p>
<p>1=&lt;n&lt;=100</p>
<p>0=&lt;m&lt;=500</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case print the no of k-cycles in the given network.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1</pre>
<pre>5 7 4</pre>
<pre>1 2</pre>
<pre>2 3</pre>
<pre>1 3</pre>
<pre>3 4</pre>
<pre>2 4</pre>
<pre>3 5</pre>
<pre>4 5</pre>
<pre><strong>Output:</strong>
2</pre>


______________________________________________________
TEMPLEQ||||||true||||||


<table border="0">
<tbody>
<tr>
<td><img src="http://www.spoj.plhttp://farm6.static.flickr.com/5056/5472021008_bcb05d7fb5.jpg" alt="main-destinations-tirupati" width="215" height="120" /></td>
<td>
<p align="justify">The <a href="http://en.wikipedia.org/wiki/Tirumala_Venkateswara_Temple" target="_blank">Tirumala temple </a> is the most visited place of worship in the world. As the number of pilgrims who visit the temple each day is very high, the head of the temple should keep monitoring the queue system. Today is another lovely day and he has started his work. There are <strong>N</strong> queues at the entrance of the temple and some of them are already filled with pilgrims. Each queue has a metal door at the beginning, which leads to the temple. When the door is opened, it allows only one pilgrim to get through it and it gets closed immediately after that.</p>
</td>
</tr>
</tbody>
</table>
<p align="justify">New pilgrims are rushing in to the queues and the head needs to monitor the current sizes of the queues and decide which doors to be opened. At any time, he wants to know how many queues currently have at least <strong>X</strong> pilgrims. He also decides an integer <strong>Y</strong> and wants to open the doors of all the queues having at least <strong>Y</strong> pilgrims at that time. You are the controller of the queue system and are following his instructions. Respond quickly and win yourself a big laddu (sweet) from him :) .</p>
<p><br /> Read the input section for rest of the details. <br /><br /></p>

*******InputConstraints*******

<p>The first line contains two integers N and Q. N - The number of queues [ 1 &lt;= N &lt;= 100,000 ], Q - The number of queries [ 0 &lt;= Q &lt;= 500,000 ] . The second line contains N integers, which are the initial sizes of the queues. ith integer ( 1-based ) is the initial size of queue i  [ 0 &lt;= initial size &lt;= 100,000,000 ] <br /><br /> Each of the next Q lines is one of the following <br /><br /> 1 A  [ One pilgrim enters the queue# A ( 1 &lt;= A &lt;= N ) ] <br /><br /> 2 X  [ Find the number of queues having atleast X pilgrims currently ( 0 &lt;= X &lt;= 1,000,000,000 )  ] <br /> <br /> 3 Y  [ Open the doors of all the queues having atleast Y pilgrims ( 1 &lt;= Y &lt;= 1,000,000,000 ), and thus allowing only one pilgrim to enter the temple from each of them ] <br /><br /></p>

*******OutputConstraints*******

<p>For each query of type "2 X" , print the answer in a new line. <br /><br /></p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 6<br />20 30 10 50 40<br />2 31<br />1 2<br />2 31<br />3 11<br />2 20<br />2 50<br /><br /><strong>Output:</strong><br />2<br />3<br />3<br />0<br /><br /><strong>Note : Ideal time limit should be 2s. It has been increased to 7s, to let Java solutions pass, as the i/o is huge.</strong><br /><br />* There are multiple test sets, and the judge shows the <strong>sum</strong> of the time taken over all test sets of your submission, if Accepted.</pre>


______________________________________________________
CANDYSTN||||||true||||||


<table border="0">
<tbody>
<tr>
<td>
<p align="justify">Little Pratya loves collecting candies and she also likes playing games :).</p>
<p align="justify">Today Pratya is travelling in bus and she has a bag full of <strong>N</strong> candies. She looks outside the window and notices milestones with numbers written on them. She decides to play a game. She wants to select some initial <em>non-zero</em> number of candies from the bag and call it her collection of candies. When she sees a milestone on the way, she will add or remove some candies from her collection as following.</p>
Let the previous milestone number be <strong>a1</strong> and the current milestone number be <strong>a2</strong>.</td>
<td>
<p><img src="http://www.spoj.plhttp://farm5.static.flickr.com/4097/5445555238_672c9bb466.jpg" border="0" alt="pratya1" width="142" height="165" /></p>
</td>
</tr>
</tbody>
</table>
<p><strong>a2 &gt; a1 : </strong> Pratya adds ( a2 - a1 ) candies to her collection (thus, her bag of candies loses them). If the bag doesn't contain  at least ( a2 - a1 ) candies, she starts crying. <br /><br /></p>
<p><strong>a2 &lt; a1 : </strong> Pratya removes ( a1 - a2 ) candies from her collection (thus, her bag of candies gains them). If her collection doesn't contain  more than ( a1 - a2 ) candies, she starts crying.  <br /><br /></p>
<p><strong>a1 = a2 : </strong> Pratya is bored to see the same number again and so she eats one of the candies from her collection.</p>
<p align="justify">Moreover, Pratya always wants her candy collection to have at least one candy, otherwise she starts crying. Given the numbers written on all the milestones in order, find the minimum number of candies Pratya should select in the beginning so that she doesn't have to cry at all.  If it is not possible , print -1. Note that no change to the collection happens when she sees the first milestone.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line contain the number of test cases <strong>T</strong>. Each test case has two lines. The first line specifies <strong>N</strong> and <strong>M</strong>. <strong>N</strong> is the number of candies in the bag and <strong>M</strong> is the total number of milestones. Second line contains <strong>M</strong> integers, the numbers written on the milestones, in the order Pratya sees them.</p>
<p>^ is used for power.</p>
<p>T &lt;= 150</p>
<p>1 &lt;= N &lt;= 10^7</p>
<p>2 &lt;= M &lt;= 10^4</p>
<p>Each milestone number will be between [-10^6,10^6].</p>

*******OutputConstraints*******

<p>For each test case output the minimum number of candies that should be selected from the bag or -1 if its not possible</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />10 5<br />1 5 1 -1 -2<br />2 5<br />1 5 1 -1 -2<br />100 3<br />1 2 3<br /><br /><strong>Output:</strong><br />4<br />-1<br />1<br /></pre>
<p>Note : Large input, prefer using scanf / printf&nbsp; to&nbsp; cin / cout<br /> <em>* There are multiple test sets, and the judge shows the <strong>sum</strong> of the time taken over all test sets of your submission, if Accepted.</em></p>


______________________________________________________
MNMXPATH||||||true||||||


<p>I have been asked to set a problem by spoj, what do I do now ? Lets see the standard stuff in most of the programming contests and make one problem out of it. Hmm... many problems are having Binary digits, Grids, Paths, Coins, Maximize or Minimize something, so let me mix them all now in to one problem, the one problem to rule them all ;) <br /><br /> Lets have a grid of size <strong>N</strong> x <strong>M</strong> having N rows and M columns, and put gold coins in it. How many in each cell ? , lets involve binary here. I'll give you two binary strings <strong>A</strong>[1...N] and <strong>B</strong>[1...M]. Cell (i,j) (1-based indexing) Row-i and Column-j in the grid contains A[i] * B[j] gold coins. From a cell (i,j), you can move to any of the 4 adjacent cells (i-1,j), (i+1,j), (i,j-1), (i,j+1) in one step. I want a path of <em>minimum length</em> from top-left cell (1,1) to bottom-right cell (N,M), and the value of this path = number of gold coins it covers. Find the maximum value of such a path. Not every one wants to become a Raja, also find the minimum value of such a path.</p>

*******InputConstraints*******

<p>First line contains T [ number of test cases, around 10 ]. T cases follow, each having 2 lines, "N A" and "M B" (quotes for clarity only). [ 1 &lt;= N,M &lt;= 100,000 and each character in A, B is either 0 or 1 ]</p>

*******OutputConstraints*******

<p>For each test case, print the maximum value of a path followed by the minimum value of a path, in the same line, separated by a single space. Output of each case should be in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />4 1001<br />3 110<br />5 01111<br />3 110<br /><br /><strong>Output:</strong><br />3 1<br />5 0<br /><br /><strong>Explanation:</strong><br />Case 1 : A Maximum path in bold<br /><table border="0">
<tbody><tr><td><strong>1</strong></td><td><strong>1</strong></td><td>0</td></tr>
<tr><td>0</td><td><strong>0</strong></td><td>0</td></tr>
<tr><td>0</td><td><strong>0</strong></td><td>0</td></tr>
<tr><td>1</td><td><strong>1</strong></td><td><strong>0</strong></td></tr>
</tbody></table><br />Case 1 : A Minimum path in bold<br /><table border="0">
<tbody><tr><td><strong>1</strong></td><td>1</td><td>0</td></tr>
<tr><td><strong>0</strong></td><td><strong>0</strong></td><td>0</td></tr>
<tr><td>0</td><td><strong>0</strong></td><td><strong>0</strong></td></tr>
<tr><td>1</td><td>1</td><td><strong>0</strong></td></tr>
</tbody></table><br /></pre>


______________________________________________________
FAVSUBS||||||true||||||


<table border="0">
<tbody>
<tr>
<td>
<p><img src="http://www.spoj.plhttp://farm5.static.flickr.com/4101/5433129276_143f85ce44.jpg" border="0" alt="" width="221" height="185" /></p>
</td>
<td>
<p align="justify">Little Princess Rapunzel is blessed with long (really looong!) hair, which is golden colored and has healing power. After the end of a long happy story, she marries her lover Flynn. They decide to lead a normal life by getting rid of the mysterious hair, which when cut loses its power and turns brown. There are many colorful beads on her hair in order. Rapunzel has some <strong>K</strong> favorite colors <strong>B</strong>[1...K] <br /><br /> To remember good old stories, she wants to keep a part of her hair after its cut. A favorite sub hair is that continuous part of the hair, which has each of her favorite color beads at least once.</p>
</td>
</tr>
</tbody>
</table>
<p align="justify">For the purpose of this problem, we represent a color as an integer and Hair as an array <strong>A</strong>[1...N], which has exactly <strong>N</strong> colored beads in the given order. Could you please tell her the total number of ways she can cut her favorite sub hair (sub-array). Two sub-arrays are different, if their starting or ending index in A differ.</p>

*******InputConstraints*******

<p>First line contains T [ number of test cases, around 10 ]. Each test case is preceded by a blank line, including the 1st case. [ -2,000,000 &lt;= A[i], B[j] ( colors ) &lt;= 2,000,000 ]<br /> Each test case has 4 lines, as described below.<br /> N [ 1 &lt;= N &lt;= 100,000 ]<br /> &lt; Array A : N integers, separated by spaces &gt;<br /> K [ 1 &lt;= K &lt;= 1,000 ]<br /> &lt; Array B : K integers, separated by spaces, her favorite colors, without repetition &gt;</p>

*******OutputConstraints*******

<p>For each test case, output the number of different sub-arrays, which has her favorite color appearing at least once, in a separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3

4
1 2 3 1
2
1 2

6
10 20 30 40 50 60
1
20

5
1 2 3 4 5
2
2 6

<strong>Output:</strong>
4
10
0

<strong>Explanation:</strong>
Case 1 : Favorite sub-arrays in bold [ <strong>1 2</strong> 3 1 ], [ <strong>1 2 3</strong> 1 ] , [ 1 <strong>2 3 1</strong> ], [ <strong>1 2 3 1</strong> ]
</pre>
<p><br /> Note: Large input, prefer using scanf / printf to cin / cout<br /><br /> <em>There are multiple test sets, and the judge shows the <strong>sum</strong> of the time taken over all test sets of your submission, if Accepted.</em></p>


______________________________________________________
SNAKYNUM||||||true||||||


<p>Sanky is a school kid and is very fond of numbers. His teacher gave his class a home work, asking each of them to invent a new series of numbers, with a large collection of numbers in them. His friend Evan has already invented one, which starts from 0 and picks every alternate number : {0, 2, 4 ,...} and he named them 'Evan' numbers :). Sanky is not happy because he couldn't invent that first and thinks picking every alternate number starting from 1 : {1, 3, 5, ... } would not be very odd ;).</p>
<table border="0">
<tbody>
<tr>
<td>
<p align="justify">After refreshing at home, he comes up with a new series of numbers in which the digits alternate between increasing and decreasing when compared with the digit before it, in a zig-zag fashion. To make it clear, if the number is abcde, either a &lt; b &gt; c &lt; d &gt; e or a &gt; b &lt; c &gt; d &lt; e. He cleverly named them 'Snaky Numbers' :). Eg: 8, 90, 243516 and 31524 are Snaky while 44, 123 and 4235 are not. He is now wondering if his Snaky series is large enough. Particularly, he wants to know how many 'Snaky Numbers' are there of length <em>at most</em> <strong>N</strong>. Count only non-negative integers, without leading zeros.</p>
</td>
<td>
<p><img src="http://www.spoj.plhttp://farm5.static.flickr.com/4076/5434599401_63cd906d64_m.jpg" border="0" alt="" width="146" height="103" /></p>
</td>
</tr>
</tbody>
</table>
<p>The answer may get very big and not fit in Sanky's book, so please just tell him the ( answer modulo <strong>M</strong> )</p>

*******InputConstraints*******

<p>First line contains T [ number of test cases, around 50 ].  Each of the next T lines contains two integers N M.</p>
<p>1 &lt;= N &lt;= 1,000,000,000</p>
<p>2 &lt;= M &lt;= 1,000,000,007</p>

*******OutputConstraints*******

<p>For each test case, output  ( Number of Snaky numbers of length at most N ) % M, in a separate line</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />1 101<br />2 107<br />3 1001<br /><br /><strong>Output:</strong><br />10<br />91<br />616<br /><br /></pre>
<p><strong><span style="text-decoration: underline;"><em>&nbsp;Hint:</em></span></strong> You may have to use the mod operator wisely !</p>
<p><br /> <em>* There are multiple test sets, and the judge shows the <strong>sum</strong> of the time taken over all test sets of your submission, if Accepted.</em></p>


______________________________________________________
CLNFORUM||||||true||||||


<p align="justify">Long ago during the Jurassic Park age, there was a company TopHunters, which used to conduct hunting competitions for the Dinosaurs around the world. Petrosaurus was believed to be the greatest hunter of that time and all other dinosaurs enjoyed watching the hunting videos posted by him in the forums ( yes, they had a website :) ).</p>
<p align="justify">Many Indian dinosaurs used to post in sms language in the forums and annoy others. Vexosaurus was so annoyed reading the posts with numbers used in place of letters. He decided to correct all those posts, before the forums get <em>Rusty</em>. Could you please code for him and replace the following words in 1st column with their corresponding words in 2nd column</p>
<table border="0" align="center">
<tbody>
<tr>
<td align="center">
<table border="0">
<tbody>
<tr>
<td>8</td>
<td>ate</td>
</tr>
<tr>
<td>w8</td>
<td>wait</td>
</tr>
<tr>
<td>gr8</td>
<td>great</td>
</tr>
<tr>
<td>4</td>
<td>for</td>
</tr>
<tr>
<td>b4</td>
<td>before</td>
</tr>
</tbody>
</table>
</td>
<td>Â </td>
<td>Â </td>
<td>Â </td>
<td>Â </td>
<td>Â </td>
<td>Â </td>
<td align="right"><img src="http://www.spoj.plhttp://farm6.static.flickr.com/5176/5471439962_8c94dfdd55.jpg" alt="" width="220" height="150" /></td>
</tr>
</tbody>
</table>
<p>Lets not make this complex and just replace the words when they appear entirely as a word themselves, and not as a subpart of bigger words ( see examples for clarity ). A word is a continuous sequence of non-space characters.<em></em></p>
<p><em>Disclaimer</em> : This is just a fictional story. Any resemblance to real persons or company or dinosaurs is purely coincidental :|</p>

*******InputConstraints*******

<p>First line contains T [ number of test cases, around 50 ]. Each of the next T lines contains a sentence with not more than 100 characters [ 'a' - 'z' , '0' - '9' , space ]. There can be 2 or more continuous spaces and you have to preserve them, in the output. Input sentence will not begin or end with a space.</p>

*******OutputConstraints*******

<p>For each test case, output the corrected sentence, in a new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />i 8 food b4<br />gr8 2 see you w8ing<br />1234   5678   9<br /><br /><strong>Output:</strong><br />i ate food before<br />great 2 see you w8ing<br />1234   5678   9<br /></pre>


______________________________________________________
SQUA_REV||||||true||||||


<p>Given a number calculate the product N of their digits bigger than zero. The output is the number R of different (!) presentations of N in the form A*A+B*B with A and B being positive integers including zero.</p>

*******InputConstraints*******

<p>Twenty tests with one positive integer &lt; 10^20.</p>

*******OutputConstraints*******

<p>Print the illustrated above number R for each test.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5<br />7<br />78185824586267361855

<strong>Output:</strong>
1<br />0<br />3
</pre>


______________________________________________________
BTCODE_A||||||true||||||


<p>Given 2 points in 2 dimensional space (xs,ys) and (xd,yd), your task is to find whether (xd,yd) can be reached from (xs,ys) by making a sequence of zero or more operations.<br /> From a given point (x, y), the operations possible are:<br /> a) Move to point (y, x)<br /> b) Move to point (x, -y)<br /> c) Move to point (x+y, y)<br /> d) Move to point (2*x, y)</p>

*******InputConstraints*******

<p>The first line of input contains T, the number of test cases. T lines follow, one for each test case. For each test case, the input contains one line denoting the 4 integers xs, ys, xd, yd</p>

*******OutputConstraints*******

<p>Output T lines, one for each test case. For each test case, output "YES" if (xd,yd) is reachable from (xs,ys) and "NO" otherwise. (quotes for clarity)</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
1 1 2 2

<strong>Output:</strong>
YES

<strong>Constraints:</strong>
T &lt;= 25
-10^10 &lt;= xs, ys, xd, yd &lt;= 10^10
Note that, although the input values are constrained by the above inequality, the coordinates of the points
at the intermediate steps need not be.

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: We can move in the following manner: (1,1) -&gt; (2,1), using the operation (x,y) -&gt; (2*x,y). Then, move from (2,1) -&gt; (1,2), using the operation (x,y) -&gt; (y,x). Finally use the operation (x,y) -&gt; (2*x,y) to move from (1,2) -&gt; (2,2).</p>


______________________________________________________
BTCODE_B||||||true||||||


<p>You are given 'n' integers k<sub>1</sub>, k<sub>2</sub>, ...., k<sub>n</sub> and an integer 'x', which satisfy the equation x<sub>1</sub><sup>k<sub>1</sub></sup> * x<sub>2</sub><sup>k<sub>2</sub></sup> * ..... * x<sub>n</sub><sup>k<sub>n</sub></sup> = x. You are also given values a<sub>1</sub>, a<sub>2</sub>, ...., a<sub>n</sub> and y<sub>1</sub>, y<sub>2</sub>, ...., y<sub>n</sub>. Your task is to find the least positive value 'v', that can be taken by the expression: a<sub>1</sub>*x<sub>1</sub><sup>y<sub>1</sub></sup> + a<sub>2</sub>*x<sub>2</sub><sup>y<sub>2</sub></sup> + ... + a<sub>n</sub>*x<sub>n</sub><sup>y<sub>n</sub></sup>. Note that x<sub>1</sub>, x<sub>2</sub>, x<sub>3</sub>, ..... x<sub>n</sub> are some variables (not necessarily integers), which can only take positive values.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer 't', denoting the number of test cases. <br />The first line of each testcase contains two space separated integers 'n' and 'x'. <br />Next line contains 'n' integers k<sub>1</sub>, k<sub>2</sub>, ..., k<sub>n</sub>. <br />Next line contains 'n' integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>. <br />Next line contains 'n' integers y<sub>1</sub>, y<sub>2</sub>, ..., y<sub>n</sub>.</p>

*******OutputConstraints*******

<p>For each testcase output the least positive value 'v' that can be taken by the expression. To avoid floating point errors, round it off to the nearest integer.</p>
<p>For example, 12.6 is rounded off to 13, and 12.4 is rounded off to 12. To avoid ambiguity, there will be no test case for which the fractional part of the answer equals 0.5.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1 4
2
3
3
2 6
1 1
1 1
1 1

<strong>Output:</strong>
24
5

<strong>Constraints:</strong>
t &lt;= 25
1 &lt;= n &lt;= 20
1 &lt;= x &lt;= 1000000
1 &lt;= k<sub>i</sub>, a<sub>i</sub>, y<sub>i</sub> &lt;=20
x<sub>i</sub> &gt; 0

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: x<sub>1</sub><sup>2</sup> = 4. Therefore, x<sub>1</sub> = 2 and 3*x<sub>1</sub><sup>3</sup> = 24. <br />Test case 2: x<sub>1</sub>*x<sub>2</sub> = 6. Minimum value of x<sub>1</sub> + x<sub>2</sub> is 2*sqrt(6) = 4.89897. x<sub>1</sub> = sqrt(6) and x<sub>2</sub> = sqrt(6) gives this solution. Answer is 4.89897, which when rounded off to the nearest integer equals 5.</p>


______________________________________________________
BTCODE_C||||||true||||||


<p>You are given 'n' inequalities. Each inequality is of one of the following 4 types: <br />Type 1: x &gt; v <br />Type 2: x &lt; v <br />Type 3: x = v <br />Type 4: x != v</p>
<p>where 'x' is a variable which can only take non-negative integral values.</p>
<p>Your task is to find the maximum number of inequalities which are satisfied for some value of 'x'. You are also required to find the minimum value of 'x' for which the maximum number of inequalities are satisfied.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer 'n', denoting the total number of inequalities. <br />Each of the next 'n' lines contain 2 space separated integers t<sub>i</sub> and v<sub>i</sub>. t<sub>i</sub> denotes the type of inequality and v<sub>i</sub> denotes the value on the right hand side of the inequality.</p>

*******OutputConstraints*******

<p>Output two space separated integers, the first integer denoting the maximum number of inequalities which are satisfied for some value of 'x', and the second integer denoting the minimum value of 'x' for which the maximum number of inequalities are satisfied.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1 10
2 9
3 7
4 4

<strong>Output:</strong>
3 7

<strong>Constraints:</strong>
1 &lt;= n &lt;= 100000
1 &lt;= t<sub>i</sub> &lt;= 4
1 &lt;= v<sub>i</sub> &lt;= 10^18

</pre>
<p><strong>Explanation:</strong></p>
<p>The given inequalities are: 1) x &gt; 10, 2) x &lt; 9, 3) x = 7, 4) x != 4. For x=7, the inequalities 2), 3) and 4) are satisfied.</p>


______________________________________________________
BTCODE_D||||||true||||||


<p>Chakra is a young and dynamic entrepreneur, who is developing rapidly as a successful hotelier. He owns the Quickbyte chain of restaurants, 'M' of which are fully functional now. He divides each day into 'N' time slots. For each time slot 'j', in every restaurant 'i', there are A<sub>ij</sub> waiters and B<sub>ij</sub> customers. Being a quality conscious person, he wants each waiter to handle atmost one customer in a given time slot. Since he is really busy, in a day each restaurant is open only during one of the time slots. Since the hunger and demand for food varies during the day, the price which the customer is willing to pay varies, and is given by C<sub>ij</sub> for a restaurant 'i' during a time slot 'j'.</p>
<p>Given the values of A<sub>ij</sub>, B<sub>ij</sub> and C<sub>ij</sub>, find the maximum profit which Chakra can make in a day.</p>

*******InputConstraints*******

<p>The first line of input contains an integer 't', denoting the number of test cases.  <br />For each testcase, the first line contains 2 space separated integers 'M' and 'N'.  <br />Each of the next 'M' lines contains 'N' integers. The j<sup>th</sup> integer on the i<sup>th</sup> line denotes the value of A<sub>ij</sub> <br />Each of the next 'M' lines contains 'N' integers. The j<sup>th</sup> integer on the i<sup>th</sup> line denotes the value of B<sub>ij</sub> <br />Each of the next 'M' lines contains 'N' integers. The j<sup>th</sup> integer on the i<sup>th</sup> line denotes the value of C<sub>ij</sub></p>

*******OutputConstraints*******

<p>For each test case output one value, denoting the maximum profit which Chakra can make in a day.</p>
<p>More than one restaurant can be open during a given time slot.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
2 3
1 2 3
3 2 1
3 2 1
1 2 3
4 5 2
3 1 6

<strong>Output:</strong>
16

<strong>Constraints:</strong>
t &lt;= 50
1 &lt;= M,N &lt;= 100
1 &lt;= A<sub>ij</sub>, B<sub>ij</sub> &lt;= 5000
0 &lt;= C<sub>ij</sub> &lt;= 10^9

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: By opening the first restaurant at time slot 2 and second restaurant at time slot 3, Chakra makes a profit = 2*5 + 1*6 = 16. Note that although there are 3 customers for the second restaurant at time slot 3, since there is only 1 waiter, only 1 customer can be served.</p>


______________________________________________________
BTCODE_E||||||true||||||


<p>Venkatesh is an expert in mathematics, and loves playing around with polynomials during his free time. His favourite mathematical equation is pretty obviously: f(x) = a<sub>n</sub>*x<sup>n</sup> + a<sub>n-1</sub>*x<sup>n-1</sup> + ..... + a<sub>1</sub>*x + a<sub>0</sub>. His friend Suhash loves posing challenges to Venkatesh. Once they were discussing a particular problem at Snacky, which goes as follows:</p>
<p>Suhash would choose an integer 'n' as the degree of the polynomial and give Venkatesh the value of the polynomial at 'n+1' equally spaced points, i.e  he gives Venkatesh integers 'n', 'x<sub>0</sub>', 'd' and g<sub>0</sub>, g<sub>1</sub>, g<sub>2</sub>, ..., g<sub>n</sub> such that:  f(x<sub>0</sub>) = g<sub>0</sub>, f(x<sub>0</sub>+d) = g<sub>1</sub>, f(x<sub>0</sub>+2*d) = g<sub>2</sub>, ......f(x<sub>0</sub>+n*d) = g<sub>n</sub>. Now, Venkatesh is required to find the polynomial. Since he hates floating point values, he decides to find the polynomial in coefficient form, modulo a prime number. Can you help Venkatesh find the polynomial?</p>

*******InputConstraints*******

<p>The first line of input contains an integer 't', denoting the number of test cases.  <br />For each test case, the first line contains 3 space separated integers 'n', 'x<sub>0</sub>', 'd'. The next line contains 'n+1' space separated integers g<sub>0</sub>, g<sub>1</sub>, g<sub>2</sub>, .....g<sub>n</sub>.</p>

*******OutputConstraints*******

<p>For each test case output 'n+1' integers, denoting the coefficients of the polynomial a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>,...... a<sub>n</sub>. All the coefficients that are printed should be non-negative and should be less than 1000000007.</p>
<p>You are required to find coefficients of the polynomial a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>,...... a<sub>n</sub>, which satisfy the equations:  f(x<sub>0</sub>)%1000000007 = g<sub>0</sub>, f(x<sub>0</sub>+d)%1000000007 = g<sub>1</sub>, ....... f(x<sub>0</sub>+n*d)%1000000007 = g<sub>n</sub>. It is guarenteed that there is a unique solution for every test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
3 1 1
10 26 58 112

<strong>Output:</strong>
4 3 2 1

<strong>Constraints:</strong>
t &lt;= 25
1 &lt;= n &lt;= 1000
0 &lt;= x<sub>0</sub> &lt;= 100000
0 &lt; d  &lt;= 10000
0 &lt;= g<sub>i</sub> &lt;= 10^9

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: It can be seen that the polynomial f(x) = x<sup>3</sup> + 2*x<sup>2</sup> + 3*x + 4 satisfies the above input.</p>


______________________________________________________
BTCODE_F||||||true||||||


<p>Gobo and Muku were really bored of working and decided to play a game on their respective laptops - the game of life. It is a one player game which consists of an M*N rectangular grid. Each cell of the grid contains exactly one magical potion. The potion at the j<sup>th</sup> column of the i<sup>th</sup> row of the grid increases the player's current health by V<sub>ij</sub>.(This value can be negative, in which case the player's health decreases). At any point of time, the health of a player can be negative too (i.e. He does not die). From a cell(i,j), the player can move to cells (i+1,j-1) or (i+1,j) or (i+1,j+1), as long as these cells exist in the grid. Initially, the player has a health of 0. He can start from any column on the first row (1,j). If he chooses to enter a cell, then he is forced to drink the potion in that cell. The game is completed when any column of the last row is reached. There are 2 modes in which the game can be played: the "min" mode and the "max" mode. In "max" mode, the aim is to finish the game with maximum health H<sub>max</sub> satisfying the condition A &lt;= H<sub>max</sub> &lt;= B. Similarly, in "min" mode the aim is finish the game with minimum health H<sub>min</sub>, satisfying the conditions A &lt;= H<sub>min</sub> &lt;= B. Now, Gobo decides to play the game in "max" mode on his laptop, and Muku decides to play the game in "min" mode on his laptop. Can you help Gobo and Muku finish with maximum and minimum health respectively, satisfying the above conditions?</p>

*******InputConstraints*******

<p>The first line of input contains an integer 't', denoting the number of test cases.  <br />For each test case, the first line contains 2 space separated integers 'M' and 'N'. The next line contains 2 space separated integers 'A' and 'B'.  Each of the next 'M' lines contain 'N' integers. The j<sup>th</sup> integer on the i<sup>th</sup> line denotes the value V<sub>ij</sub>.</p>

*******OutputConstraints*******

<p>Output 2 space separated integers H<sub>min</sub> and H<sub>max</sub>, the maximum and minimum health with which Gobo and Muku can finish the game.  H<sub>max</sub> and H<sub>min</sub> should satisfy A &lt;= H<sub>max</sub>, H<sub>min</sub> &lt;= B. If it is not possible to achieve such a health, output "NO" (quotes for clarity).</p>
<p>Gobo and Muku start playing on 2 different instances of the same game independently. i.e the values of A,B and initial values of V<sub>ij</sub> are same for both grids.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 3
5 10
2 5 10
-1 -10 3
-3  6 -2
2 3
8 11
2 5 10
-1 -10 2

<strong>Output:</strong>
6 10
NO NO

<strong>Constraints:</strong>
t &lt;= 10
1 &lt;= M,N &lt;= 25
-1000 &lt;= A &lt;= B &lt; 1000
-25 &lt;= V<sub>ij</sub> &lt;= 25

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: Take the path (1,2) -&gt; (2,1) -&gt; (3,2), to get a value 5-1+6=10. Take the path (1,2) -&gt; (2,3) -&gt; (3,3), to get a value 5+3-2=6. <br />Test case 2: There is no valid path which satisfies the above conditions.</p>


______________________________________________________
BTCODE_G||||||true||||||


<p>Nivash and Bhoopathi play a game of memory, which goes as follows: There is a tree containing 'N' nodes, all of which are initially uncoloured.  In the game, Nivash has 2 moves:</p>
<p>1) Command: Color a particular node with a given color.  <br />2) Query: Ask Bhoopathi if the path from node 'a' to node 'b' (both inclusive), is monochromatic or not.(i.e Whether all nodes on the path have the same color).</p>
<p>Nivash can do these steps in any order he wishes and he colors each node atmost once. Whenever Nivash puts forth a 'Query' at Bhoopathi, Bhoopathi has to recollect the colouring of the tree and reply either "YES" or "NO". Can your help Bhoopathi answer these queries?</p>

*******InputConstraints*******

<p>The first line of input contains an integer 'N', denoting the number of nodes in the tree.  The next 'N-1' lines contain 2 space separated integers 'u' and 'v', denoting an edge between vertex 'u' and vertex 'v'. <br />The next line contains an integer 'Q', denoting the number of inputs (commands and queries) which Nivash wants to give. The next 'Q' lines contain 3 space separated integers 'x', 'a', 'b'. If 'x' is 1, it denotes a command to color node 'a' with a color 'b'. If 'x' is 2, it denotes a query and Bhoopathi should answer if the path from node 'a' to node 'b' (both inclusive), is monochromatic or not.</p>
<p>All vertices of the tree are 0 based.</p>

*******OutputConstraints*******

<p>For each query, output "YES" or "NO" (quotes for clarity), denoting whether the path from node 'a' to node 'b' (both inclusive), is monochromatic or not.</p>
<p>Output "NO", even if all nodes on the path from node 'a' to node 'b' (both inclusive) are uncolored.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
0 1
1 2
7
1 0 11
2 0 1
2 0 2
1 2 12
1 1 11
2 0 1
2 0 2

<strong>Output:</strong>
NO
NO
YES
NO

<strong>Constraints:</strong>
1 &lt;= N &lt;= 100000 
1 &lt;= Q &lt;= 200000
1 &lt;= color value &lt;= 30.

</pre>
<p><strong>Explanation:</strong></p>
<p>Initially node '0' is colored with color '11', so path between node '0' and node '1' is not monochromatic. Hence, the answer is "NO". The same explanation holds for the path between node '0' and  node '2'. Then node '2' is colored with color '12' and node '1' with color '11'. Now, all nodes on the path between node '0' and node '1' are colored with only one color ('11'), so the answer is "YES". The path between node '0' and node '2' has 2 colors ('11' and '12'), hence the answer is "NO".</p>


______________________________________________________
BTCODE_H||||||true||||||


<p>What is the expected number of nodes in a trie when 'N' words, each of length 'L' are inserted into it. The words are made up only of 0's and 1's. The words may be repeated and all possible permutations of words are equally likely. Initially the trie consists of only one node (root node).</p>

*******InputConstraints*******

<p>The first line of input contains an integer 't', denoting the number of test cases. Each of the next 't' lines contain 2 space separated integers 'N' and 'L'.</p>

*******OutputConstraints*******

<p>For each test case, output one floating point value denoting the expected number of nodes in the trie. Output the values rounded off to 2 decimal places. Always print 2 digits after the decimal point.</p>
<p>To know more about tries visit <a href="http://en.wikipedia.org/wiki/Trie">here</a>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1 3
2 2

<strong>Output:</strong>
4.00
4.25

<strong>Constraints:</strong>
t &lt;= 25
1 &lt;= N &lt;= 300
1 &lt;= L &lt;= 300

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: There are 8 possible words of length 3. Which ever word is inserted into the trie, we get only 4 nodes.</p>


______________________________________________________
BTCODE_I||||||true||||||


<p>Harsha is given 9 integers a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, .... a<sub>9</sub>. This denotes that he is given a<sub>1</sub> 1's, a<sub>2</sub> 2's,......a<sub>9</sub> 9's. Let 'x' = (a<sub>1</sub> + a<sub>2</sub> + ...a<sub>9</sub>). Now, Harsha makes all possible 'x' digit numbers by using these given digits. Let S be the set of all such numbers which he makes. Now he constructs a directed graph containing |S| nodes, in which each node denotes a unique number from the set. For all numbers u,v belonging to S, there is a directed edge from node 'u' to node 'v in the graph iff u&gt;v. It is easy to note that we obtain a directed acyclic graph. Whats more, the edges of the graph are weighted. The weight of an edge joining node 'u' and node 'v' is equal to u+v. Now, Deepak decides to test Harsha's memory and gives him 'Q' queries. Each query consists of two numbers 'u', 'v' (u&gt;v, both belonging to the set S). For each query Harsha must provide the following answers:</p>
<p>1) How many distinct paths are there from node 'u' to node 'v' in the graph. <br />2) For each distinct path 'i' from node 'u' to node 'v', let S<sub>i</sub> denote the sum of weights of all edges on this path. Calculate the value of sum(S<sub>i</sub>), for every distinct path 'i' from node 'u' to node 'v'.</p>

*******InputConstraints*******

<p>The first line of input contains 9 integers a<sub>1</sub>, a<sub>2</sub>, ....a<sub>9</sub>. The second line contains a single integer 'Q', denoting the number of queries. Each of the next 'Q' lines contain 2 numbers 'u' and 'v'.</p>

*******OutputConstraints*******

<p>For each query, output 2 space separted integers denoting the number of distinct paths and sum of weights of all paths respectively. Since the output can be large, output these quantities modulo 1000000007.</p>
<p>Two paths (v<sub>1</sub>, v<sub>2</sub>, .... v<sub>m</sub>) and (u<sub>1</sub>, u<sub>2</sub>, .... u<sub>n</sub>) are distinct if: <br />1) m != n <br />2) m = n, there exists some index 'k' (1 &lt;= k &lt;= m) such that v<sub>k</sub> != u<sub>k</sub></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 0 1 0 0 0 0 0 0
1
311 113

<strong>Output:</strong>
2 1110

<strong>Constraints:</strong>
1 &lt;= (a<sub>1</sub>  + a<sub>2</sub> + .... a<sub>9</sub>) &lt;= 500
1 &lt;= Q &lt;= 20
a<sub>i</sub> &gt;= 0

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: The set S for the above problem is {311, 113, 131}. The edges of the graph are 311-&gt;131, 311-&gt;113, 131-&gt;113. There are 2 distinct paths from 311 to 113, namely (311-&gt;131-&gt;113) and (311-&gt;113). The sum of weights of edges on path-1 = (311+131)+(131+113) = 686. For path-2, the sum of weights of edges = (311+113) = 424. Therefore, answer  = 686 + 424 = 1110.</p>


______________________________________________________
BTCODE_J||||||true||||||


<p>Vikas is the chief interior designer incharge of the Taj Palace, Mumbai. He wants to make an impressive and colourful pattern in the courtyard. Importing exotic tiles has become very difficult after the Mumbai terror attacks, and therefore Vikas has only 4 kinds of tiles to choose from:</p>
<pre>A&nbsp;&nbsp;&nbsp;&nbsp; B&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp;&nbsp; D
==    ==    ==&nbsp;&nbsp; ==
XX    X     X&nbsp;&nbsp;&nbsp; X
XX    X     XX

</pre>
<p>Any rotation of above tiles is also permitted.</p>
<p>Each tile is available in 'k' different colors, and there's an infinite supply of all tiles. The courtyard has dimensions 2 * 'n'. Vikas wants to tile the courtyard in such a way that no two adjacent tiles have the same color. Two tiles are considered adjacent if they share a common side. Two tilings are considered different if:</p>
<p>1) The arrangement of tiles is different. <br />2) There is atleast 1 position (1*1 square) which has different colors in the two arrangements.</p>
<p>Can you help Vikas find the number of different ways in which he can tile the courtyard, subject to the above conditions?</p>

*******InputConstraints*******

<p>The first line of input contains a single integer 't', denoting the number of test cases. <br />Each of the next 't' lines contains 2 space separated integers 'n' and 'k'.</p>

*******OutputConstraints*******

<p>For each test case output one integer, denoting the number of different ways in which the courtyard can be tiled.</p>
<p>Two tiles are considered adjacent if they share an edge. Two tiles which just share a common point are not considered adjacent.</p>
<p>Since the answers can be large, print all the quantities modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1 1
1 2

<strong>Output:</strong>
1
4

<strong>Constraints:</strong>
t &lt;= 1000
1 &lt;= n &lt;= 10^9
1 &lt;= k &lt;= 1000

</pre>
<p><strong>Explanation:</strong></p>
<p>Test case 1: There is only 1 way to tile the courtyard, by using a 2*1 tile. <br />Test case 2: Let '1' and '2' be the available colors. The grid can be tiled in 4 ways - 1) place one 2*1 tile of color '1', 2) place one 2*1 tile of color '2', 3) Place two 1*1 tiles (color '1' above and color '2' below), 4) Place two 1*1 tiles (color '2' above and color '1' below)</p>


______________________________________________________
BTCODE_K||||||true||||||


<p>Sumit specialises in sorting algorithms, and Abhishek decides to test Sumit's coding skills. An array of 'n' numbers a[0], a[1], a[2], ..., a[n-1] is given. Abhishek gives a sequence of inputs of the form "v i j". Each input is either a query or an update (query if 'v' is 0, update otherwise).</p>
<p>For any input of the form "0 i j" ,Sumit's output should be as follows: <br /> If the subarray a[i], a[i+1], ... a[j] is unsorted, output 0. <br /> If the subarray a[i], a[i+1], ... a[j] is sorted in non-descending order, output 1. <br /> If the subarray a[i], a[i+1], ... a[j] is sorted in non-ascending order, output 2. <br /> If the subarray a[i], a[i+1], ... a[j] is sorted in both non-ascending and non-descending order (i.e, if all the elements in the  range are equal), output 3.</p>
<p>Any other input "v i j" (v!=0) should be treated as an update, as follows: <br /> For each element in the subarray a[i], a[i+1], ... a[j], Sumit has to replace the element a[k] with v-a[k].</p>
<p>Sumit is really tired and does not want to write a program. Can you write a program for Sumit, which responds to Abhishek's instructions?</p>

*******InputConstraints*******

<p>The first line of input contains 2 space separated integers 'n' and 'q'. The second line contains 'n' integers a[0], a[1], ....., a[n-1]. Each of the next 'q' lines contain 3 integers 'v', 'i', 'j'.</p>

*******OutputConstraints*******

<p>For each query, output a single integer 0, 1, 2 or 3, denoting the answer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4 5
3 -2 -5 1
1 1 3
0 0 3
0 0 2
0 2 3
0 0 1

<strong>Output:</strong>
0
1
2
3

<strong>Constraints:</strong>
1 &lt;= n &lt;= 100000
1 &lt;= q &lt;= 100000
-5000 &lt;= a[i] &lt;= 5000
-5000 &lt;= v &lt;= 5000

</pre>
<p><strong>Explanation</strong> <br />Initial array is {3, -2, -5, 1}. After first update, the array will be {3, 3, 6, 0}. Now, from indices '0' to '3', it is unsorted. From indices '0' to '2', it is sorted in non-descending order. From indices '2' to '3', it is sorted in non-ascending order. Between indices '0' and '1', the values are equal.</p>


______________________________________________________
SQUAREV1||||||true||||||


<p>Given a number N&nbsp;calculate the number R of different&nbsp;presentations of N in the form A*A+B*B with A and B being positive integers including zero. 1*1+2*2 and 2*2+1*1 are not different presentations. So for input 5 the output is 1.</p>

*******InputConstraints*******

<p>Fifty tests with one positive integer &lt; 10^9.</p>

*******OutputConstraints*******

<p>Print the illustrated above number R for each test.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5<br />7<br />986244509

<strong>Output:</strong>
1<br />0<br />2
</pre>


______________________________________________________
KOLICA||||||true||||||


<p>A number of shopping carts filled with explosives are floating in a coordinate system, in one of the four main directions (up, down, left or right). All carts are moving at a speed of one unit per second.</p>
<p>Movement is continuous; for example, in one third of a second, a cart travels one third of a unit.</p>
<p>When two or more carts collide (are at the same place at the same time), there is an explosion and all carts taking part in the collision explode and cease to exist.</p>
<p>Write a program that, given the starting points and directions of all carts, determines which carts never explode.</p>

*******InputConstraints*******

<p>The first line of input contains an integer N (2 &le; N &le; 500), the number of carts.</p>
<p>Each of the following N lines contains two integers and a string. Each pair of integers describes the starting coordinates of one cart (between 0 and 100 000 000, inclusive), and the string describes the direcction in which the cart is moving ("gore" for up, "dolje" for down, "lijevo" for left, or "desno" for right).</p>
<p>No two carts will start at the same coordinates.</p>

*******OutputConstraints*******

<p>Output the indices of all carts which never explode, sorted in ascending order, one index per line. The first cart in the input is labeled 1, the second is labeled 2 etc. If no carts survive, output "nema".</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />5 5 dolje<br />5 6 lijevo<br />5 7 desno<br />5 8 gore

<strong>Output:</strong>
1<br />2<br />3<br />4<br /><strong><br /><br />Input:</strong><br />5<br />3 3 dolje<br />1 1 desno<br />5 1 lijevo<br />100000 500000 desno<br />900000 500000 lijevo<br /><br /><strong>Output:</strong><br />nema<br /><br /><br /><strong>Input:</strong><br />3<br />10 0 gore<br />0 10 desno<br />15 5 lijevo
<br /><strong>Output:<br /></strong>2<strong><br /></strong></pre>


______________________________________________________
NOVICE43||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">When I first learned backtracking I made a program to find all the permutations of the English alphabets in lexicographically increasing. Filled with elation I showed the program to Rohil. Rohil being someone who likes to do stuff off the league was not impressed and gave me the following variation of the problem help me to solve the problem:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You have to find the number of permutations of length N(1&lt;=N&lt;=12) such that at whenever an alphabet say($) appears in the permutation all the alphabets smaller than $ should have appeared before it at least once. An alphabet is smaller than another if it appears before the other in the English alphabet. &lsquo;a&rsquo; being the smallest and &lsquo;z&rsquo; being the largest. For example when N=2 then aa,ab are the only valid permutations and ba,bb is invalid since in ba all the alphabets smaller than b have not appeared at least once before it. See example for further clarification.</div>
<p>When I first learned backtracking I made a program to find all the permutations of the English alphabets in lexicographically increasing. Filled with elation I showed the program to Rohil. Rohil being someone who likes to do stuff off the league was not impressed and gave me the following variation of the problem help me to solve the problem:&nbsp;</p>
<p>You have to find the number of permutations of length N(1&lt;=N&lt;=11) such that at whenever an alphabet (say 'c' ) appears in the permutation all the alphabets smaller than 'c' should have appeared before it at least once. An alphabet is smaller than another if it appears before the other in the English alphabet. &lsquo;a&rsquo; being the smallest and &lsquo;z&rsquo; being the largest. For example when N=2 then aa,ab are the only valid permutations and ba,bb is invalid since in ba all the alphabets smaller than b have not appeared at least once before it. See example for further clarification.</p>

*******InputConstraints*******

<p>Line 1: T(no. of test cases)</p>
<p>Line 2: n1</p>
<p>Line 3: n2</p>
<p>&hellip;</p>
<p>&hellip;</p>

*******OutputConstraints*******

<p>Line 1: no. of such permutations of length n1</p>
<p>&hellip;&hellip;</p>
<p>&hellip;..</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
3

<strong>Output:</strong>
2
5</pre>
<pre>Explanation for N=3, the possible permutations are:
abc
aba
abb
aab
aaa</pre>


______________________________________________________
PLOT1||||||true||||||


<p>Given a function y=f(x) in RPN-notation plot it with stars (*) and then (!) its derivation with crosses (+)&nbsp;for 0&lt;=x&lt;=20 with &Delta;x=1 in a diagram with 21*21 points (0&lt;=x,y&lt;=20). Empty fields are marked with dots (.). For plotting the real number y should be rounded to integer (-0.5 -&gt; -1, -0.4 -&gt; 0, 0.4 -&gt; 0, 0.5 -&gt; 1). The function and its derivation are continuous between 0 and 20.<br />The function definition uses only the following characters: 0123456789x.+-*/^<br />'^' means 'power of'. Items are separated by space.</p>

*******InputConstraints*******

<p>In the first line the number N of functions, then N lines with one function.</p>

*******OutputConstraints*******

<p>The plot of each function and its derivation&nbsp;in 21 lines.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1<br />x 1 -

<strong>Output:</strong>
.....................<br />....................*<br />...................*.<br />..................*..<br />.................*...<br />................*....<br />...............*.....<br />..............*......<br />.............*.......<br />............*........<br />...........*.........<br />..........*..........<br />.........*...........<br />........*............<br />.......*.............<br />......*..............<br />.....*...............<br />....*................<br />...*.................<br />+++++++++++++++++++++<br />.*...................<br /></pre>


______________________________________________________
PROBLEM4||||||false||||||

<p>Problem 4:&nbsp; &nbsp;PRIMITIVEROOTS</p>
<p>&nbsp;</p>
<p><strong>Introduction to Primitive Roots:</strong></p>
<p>a <strong>primitive root modulo <em>n</em></strong> is any number <em>g</em> with the property that any number <a href="http://en.wikipedia.org/wiki/Coprime">coprime</a> to <em>n</em> is <a title="Modular arithmetic" href="http://en.wikipedia.org/wiki/Modular_arithmetic#Congruence_relation">congruent</a> to a power of <em>g</em> modulo <em>n</em>.</p>
<p>&nbsp;</p>
<p>The number 3 is a primitive root modulo 7. because</p>
<p>&nbsp;</p>
<p><img style="vertical-align: middle;" src="http://upload.wikimedia.org/math/9/0/6/9067f634e30d7ae5f9b974a2e8e40490.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Problem Statement:</strong></p>
<p>Given a prime number n as input you&rsquo;ve to find the (product all the primitive roots of n) % n</p>
<p>&nbsp;</p>
<p><strong>Input</strong>:</p>
<p>The first line consists of t the number of test cases followed by t lines. Each line consists of a prime number n.</p>
<p>&nbsp;</p>
<p><strong>Output:</strong></p>
<p>For each test case print&nbsp; the test case number followed by &lsquo;:&rsquo; followed by (product of all primitive roots of n) % n. If it is not a prime then print &ldquo;NOTPRIME&rdquo;</p>
<p><strong>&nbsp;</strong></p>
<p><strong>Input Specifications</strong></p>
<p>1&lt;=t&lt;=100</p>
<p>10000&gt;=n&gt;=3</p>
<p><strong>Example</strong></p>
<p><strong>Sample Input</strong></p>
<p>3</p>
<p>6</p>
<p>7</p>
<p>9</p>
<p><strong>Sample Output</strong></p>
<p>1:NOTPRIME</p>
<p>2:1</p>
<p>3:NOTPRIME</p>
<p>&nbsp;</p>
<p><strong>Description for test case #2:</strong></p>
<p>The primitive roots of 7 are 3 and 5. The product % 7 = 15%7&nbsp; =1</p>


______________________________________________________
AVDM||||||false||||||

<p>To help you move from Waterloo to the big city, you are considering renting a moving truck. Gas prices being so high these days, you want to know how much the gas for such a beast will set you back.</p>
<p>The truck consumes a full litre of gas for each kilometre it travels. It has a 200 litre gas tank. When you rent the truck in Waterloo, the tank is half full. When you return it in the big city, the tank must be at least half full, or you'll get gouged even more for gas by the rental company. You would like to spend as little as possible on gas, but you don't want to run out along the way.</p>
<p><strong>Input</strong></p>
<p>Input is all integers. The first integer is the distance in kilometres from Waterloo to the big city, at most 10000. Next comes a set of up to 100 gas station specifications, describing all the gas stations along your route, in non-decreasing order by distance. Each specification consists of the distance in kilometres of the gas station from Waterloo, and the price of a litre of gas at the gas station, in tenths of a cent, at most 2000.</p>
<h3>Output</h3>
<p>Output is the minimum amount of money that you can spend on gas to get you from Waterloo to the big city. If it is not possible to get from Waterloo to the big city subject to the constraints above, print "Impossible".</p>
<h3>Example</h3>
<pre><strong>Input:</strong><pre>500
100 999
150 888
200 777
300 999
400 1009
450 1019
500 1399</pre>
<strong>Output:</strong>
<pre>450550</pre>
</pre>


______________________________________________________
BARN||||||true||||||


<pre style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;"><code style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;">Farmer John recently opened up a new barn and is now accepting stall
allocation requests from the cows since some of the stalls have a
better view of the pastures.

The barn comprises N (1 &lt;= N &lt;= 100,000) stalls conveniently numbered
1..N; stall i has capacity C_i cows (1 &lt;= C_i &lt;= 100,000). Cow i
may request a contiguous interval of stalls (A_i, B_i) in which to
roam (1 &lt;= A_i &lt;= N; A_i &lt;= B_i &lt;= N), i.e., the cow would like to
wander among all the stalls in the range A_i..B_i (and the stalls
must always have the capacity for her to wander).

Given M (1 &lt;= M &lt;= 100,000) stall requests, determine the maximum
number of them that can be satisfied without exceeding stall
capacities.

Consider both a barn with 5 stalls that have the capacities shown
and a set cow requests:

Stall id:    1   2   3   4   5
           +---+---+---+---+---+
Capacity:  | 1 | 3 | 2 | 1 | 3 |  
           +---+---+---+---+---+
Cow 1       XXXXXXXXXXX             (1, 3)
Cow 2           XXXXXXXXXXXXXXX     (2, 5)
Cow 3           XXXXXXX             (2, 3)
Cow 4                   XXXXXXX     (4, 5)

FJ can't satisfy all four cows, since there are too many requests
for stalls 3 and 4.

Noting that Cow 2 requests an interval that includes stalls 3 and
4, we test the hypothesis that cows 1, 3, and 4 can have their
requested stalls. No capacity is exceeded, so the answer for this
set of data is 3 -- three cows (1, 3, and 4) can have their requests
satisfied.</code></pre>

*******InputConstraints*******

<pre style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;"><code style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;">* Line 1: Two space-separated integers: N and M

* Lines 2..N+1: Line i+1 contains a single integer: C_i

* Lines N+2..N+M+1: Line i+N+1 contains two integers: A_i and B_i</code></pre>

*******OutputConstraints*******

<pre style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;"><code style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;">* Line 1: The maximum number of requests that can be satisfied</code></pre>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;"><code style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;">5 4
1
3
2
1
3
1 3
2 5
2 3
4 5</code></pre>
<strong>Output:</strong>
<pre style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;"><code style="font-family: 'Andale Mono', 'Courier New', Courier, monospace;">3</code></pre>
</pre>


______________________________________________________
GPA1||||||false||||||

<p><strong>Problem 1: GRADEPOINTAVERAGE</strong></p>
<p><strong>Problem Statement:</strong></p>
<p>Every student of a college has to write 3 internal assessments and 1 final exam on each semester for all the 6 subjects.&nbsp; Each internal assessment mark is out of 20 and the final exam mark is out of 100. The best two of three assessment marks is chosen and those marks are considered to be out off 45. The final exam mark is considered to be out off 50. The rest 5 marks is allotted based on the percentage of attendance of the student.</p>
<p>Attendance mark allotment</p>
<p>Below 51% attendance &ndash; 5 marks</p>
<p>Below 61% attendance &ndash; 4 marks</p>
<p>Below 71% attendance &ndash; 3 marks</p>
<p>Below 81% attendance &ndash; 2 marks</p>
<p>Below 91% attendance &ndash; 1 mark</p>
<p>else &ndash;No mark for those sincere students</p>
<p>Since the attendance mark for the absentees is higher, some students even bunk the assessments. If he bunks then instead of the mark &lsquo;ab&rsquo; symbol is used which denotes &ldquo;absent&rdquo;. But no one bunks the final exam.</p>
<p>For each subject there&rsquo;ll be some credit allotted by the department based on the importance of the subject.</p>
<p>&nbsp;</p>
<p>Total marks in a particular subject = best two out of three assessments(45%)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + attendance mark(5%) +Final exam mark(50%)</p>
<p>&nbsp;</p>
<p><strong>Points out off 10:</strong></p>
<p>%Total mark in a subject&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Points</p>
<p>&gt;=91&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10</p>
<p>&gt;=81&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9</p>
<p>&gt;=71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8</p>
<p>&gt;=61&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7</p>
<p>&gt;50 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6</p>
<p>==50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5</p>
<p>&lt;50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;</p>
<p>If the student scores 0 point in any of the subjects then he&rsquo;s declared as FAILED else he&rsquo;s declared as PASSED</p>
<p>Mr.Chintumani, a professor of Computer Science department of the college designed a software program to calculate the GRADEPOINTAVERAGE(GPA) of the student and to determine whether the student is &ldquo;PASSED&rdquo; or &ldquo;FAILED"</p>
<p>GPA=&nbsp; sum of (credit*points) for all the subjects / total number of credits of all the subjects</p>
<p>&nbsp;</p>
<p><strong>Input:</strong></p>
<p>The first line consists of an integer n, the number of students in the class. Then n test cases follows, in each test case the first line consists of 6 integers a,b,c,d,e and f, the credits of the 6 subjects. Then for the next 6 lines, each line(each subject) consists of 5 numbers(the first three numbers are the assessment marks out off 20, the fourth is the final exam mark and the fifth is the percentage of attendance).</p>
<p>&nbsp;</p>
<p><strong>Output: </strong></p>
<p>Assume you are Prof. Chintumani and print the result and GPA(rounded to two decimal places) per line for each student in the format as given in the example output.</p>
<p>&nbsp;</p>
<p><strong>Example:</strong></p>
<p><strong>Sample Input:</strong></p>
<p>1</p>
<p>1 1 1 2 2 3</p>
<p>19 18 20 70 70</p>
<p>17.33 15 16.66 66 70.66</p>
<p>ab ab ab 0 100</p>
<p>ab ab 10 78 78</p>
<p>17 18.33 19.5 64 87</p>
<p>14 8 ab 60 45</p>
<p><strong>Sample Output:</strong></p>
<p>FAILED, 6.30</p>
<p>&nbsp;</p>
<p><strong>Explanation of &nbsp;the testcase:</strong></p>
<p>There is only 1 student</p>
<p>In the Subject 0, he got 19,18 and 20 as internal marks, considering best two of three his internals score is 43.875/45.</p>
<p>His final exam score is 35/50</p>
<p>His attendance mark is 3</p>
<p>So the total marks he got in that subject is 81.875 which leads to 9 points.</p>
<p>Similarly he gets</p>
<p>Subject 1:&nbsp; 74.2387 --&gt; 8 points</p>
<p>Subject 2: &nbsp;0 --&gt; 0 points</p>
<p>Subject 3: &nbsp;52.25 --&gt; 6 points</p>
<p>Subject 4: &nbsp;75.5588 --&gt; 8 points</p>
<p>Subject 5: 59.75 --&gt; 6 points</p>
<p>&nbsp;</p>
<p>Gpa= (9*1 + 8*1 + 0*1 + 6*2 + 8*2 + 6*3 ) / (1+1+1+2+2+3) = 6.30</p>
<p>Since he got 0 points in atleast one of the subjects he is FAILED</p>
<p>The output format is &ldquo;RESULT,&lt;space&gt;gpa&rdquo; without double quotes.</p>


______________________________________________________
POCALC1||||||true||||||


<p>Adam likes pocket calculators, especially the early ones. As one of his favorite calculators is about 40 years old, he is not sure how long he will be able to use it. So he had the ingenious idea to develop a simulator that behaves exactly like his calculator. This simulator must be able to read a sequence of keystrokes from the calculator's keypad,  process the appropriate calculations and print the calculator's output. As Adam needs only basic arithmetic, the following keys will be sufficient:  digits 0 to 9, decimal point, operators +, -, x and : (for division), the equal sign for calculating and displaying a result and the [C] key for reseting the calculator and clearing the display, i.e. the display is set to "0.".  Calculations are done from left to right without any operator precedence.</p>
<p style="text-align:center"><img src="http://www.spoj.pl../../../content/numerix:pocalc1-600.jpg" alt="Calculator Display" width="600" height="128" /></p>
<p>You may call Adam's calculator a headstrong comtemporary, because of its special behaviour:<br /> There is no invalid sequence of keystrokes. You can press arbitrary keys one after another, the calculator always knows how to handle it.  If more than one operator key (including [=]) is pressed directly after another, only the last of these operators will be processed - all previous ones (in that continuous sequence) are ignored.<br /> If more than 8 digit keys are pressed for the input of a single number, only the first 8 digits will be processed - all following digits are ignored. If the actual display value is zero, the typing of the zero key will have no effect, it's just ignored like successive keystrokes of the same operator. If a floating point value is typed in, a leading zero directly before the decimal point may be left out, but will be displayed just the same. If the decimal point key is pressed within a number that already has a decimal point typed in or if the input of a number (as a  sequence of digit keys) is terminated by a decimal point, that has no effect.</p>

*******InputConstraints*******

<p>Input starts with a positive integer t (t&lt;1000) in a single line, the number of testcases. Then t lines follow, each line giving the description of an arbitrary sequence of keystrokes on the calculator's keypad. Every key is enclosed by square brackets, all keystrokes are separated by a single space. The number of keystrokes per sequence is less than 500 and every sequence will be terminated by [=].</p>

*******OutputConstraints*******

<p>For each sequence of keystrokes print the result the calculator will show on  the display after the complete sequence of keystrokes has been processed.  The size of the display is 8 digits plus an optional "-"-sign in front of the leftmost digit and a  decimal point that will always appear, even if the result is an integer value. If a value has more than 8 decimal digits, it has to be rounded to fit into 8 digits. As the calculator's display is filled from right to left, the output has to be adjusted to the right.<br /> If the absolute value of a number rounded to an integer needs more than 8 digits, scientific notation is used. Same case, if the absolute value of a number is larger than 10<sup>-100</sup>, but rounding to 8 digits would result in displaying zeros only. If the absolute value is not larger than 10<sup>-100</sup>, it results to zero.<br /> In scientific notation a number is expressed as a product of a decimal part and a power of 10.  The decimal part has always exactly one non-zero digit before the decimal point, an optional "-" sign in front of the leftmost digit and upto 4 digits after the decimal point, rounded if necessary. If the exponent is negative, a "-" follows, otherwise a space. Then follow two digits representing the exponent;  a leading zero is shown in the exponent, if necessary.</p>
<p>Notice that there are two cases, where the calculator will display "Error." instead of showing a result. If a (final or interim) result has a rounded absolute value of at least 10<sup>100</sup> or if you divide by zero. After an error has occured, all following keystrokes are ignored unless [C] is pressed.</p>
<p><strong>For more clarity of the calculator's behaviour and the required input and output format please look at the examples below.</strong></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
12
[3] [+] [4] [x] [5] [=]
[1] [:] [6] [=]
[4] [.] [8] [-] [x] [+] [-] [+] [x] [-] [.] [=]
[4] [.] [8] [-] [x] [+] [-] [+] [x] [.] [=]
[+] [+] [+] [+] [+] [+] [1] [=] [=] [=]
[9] [8] [C] [-] [7] [6] [5] [4] [3] [2] [1] [0] [1] [2] [3] [4] [=]
[1] [=] [2] [=] [3] [=]
[5] [:] [9] [8] [7] [8] [9] [8] [9] [8] [7] [8] [8] [:] [4] [5] [6] [7] [8] [9] [=]
[-] [9] [9] [9] [9] [9] [9] [9] [9] [-] [-] [-] [-] [8] [8] [8] [8] [8] [8] [=]
[2] [.] [3] [.] [4] [.] [5] [=]
[0] [0] [0] [0] [0] [=]
[.] [:] [.] [=]
 
<strong>Output:</strong>
       35.
 0.1666667
       4.8
        0.
        1.
-76543210.
        3.
  1.108-13
-1.0089 08
     2.345
        0.
    Error.
</pre>


______________________________________________________
PHONMESS||||||true||||||


<p>Adam has a lot of friends and therefore he stored a lot of phone numbers in his phone database. As his telephone doesn't belong to the latest generation, its database is somewhat simple. In fact, all entries are stored line by line, exactly in the way Adam once typed them in, no matter what format he used. Unfortunately he changed the format from time to time, unable or too lazy to remember how he did it the last time. So, after years have passed (Adam likes his phone and doesn't want to replace it by a modern one), his phone number list has become really messed up and he wants to do some clean up. Your task is to write a program that will do that clean up for him.</p>
<p>Every entry consists of three parts: telefon number, first name and last name of one of Adam's friends. The order of these parts may vary. An entry may start with the phone number, following the name or vice versa, phone number and name always separated by exactly one space. The order of the two parts of the name may also vary. Either it is first name before last name, separated by a space, or it is last name before first name, separated by a comma.<br /> A phone number may contain an optional leading area code, separated by a "-" or a "/" from the local code. If an area code is missing, the area code of Adam's hometown is assumed. Area code and local code both consist of at least three and at most ten digits. There may be additional optional spaces in between for better readability. For the final list the phone numbers have to be normalized. A normalized phone number consists of the area code and the local code,  separated by "-" without any spaces.<br /> A name consists of any letters of the English alphabet. Capital letters and small letters may be mixed, as Adam didn't pay attention to that when he typed in the entries. First name and last name each are at least one and at most 20 characters long. For the final list all names have to be normalized. A normalized name consists of only small letters, except the first one being  a capital letter. All following explanations refer to normalized numbers and names.</p>
<p>If two different persons have the same phone number, that will be considered as being an error - none of these entries must appear in the final list. If two entries are equal, they must appear only once in the final list. If a person is listed with different phone numbers, this person has changed phone numbers over the years and will only appear with the latest of the listed numbers, that does not have to be removed because of the reason stated above.</p>

*******InputConstraints*******

<p>Input starts with a positive integer t (t&lt;50) in a single line, then t testcases follow.  Every testcase starts with one line containing a positive integer n (n&lt;1000), the number of phone list entries, and - separated by a space - the area code of Adam's hometown. Then n lines follow, each line representing one entry in the phone list.</p>

*******OutputConstraints*******

<p>For each testcase first print the number k of entries in the final list in a single line. Then k lines must follow, the cleaned up phone list. Each line is a single entry that has to look exactly like this: [first name] [last name]: [phone number]. Square brackets only for clarity. The list has to be sorted in alphabetical order according to last names (primary key) and - if necessary - first names (secondary key).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
10 0608
Sastre,Carlos 030/64 736 666
Voigt,Jens 07401-4498
A Winokurow 0289-334405
Jan ULLRICH 089-77 98 00 9
089/779 8009 Ullrich,Jan
LANCE Armstrong 0608 / 220 4 768 86
Jan Ullrich 089/7798 005
02 89 / 33 44 05 Contador,A
ArmStrong,Lance 220476886
Ullrich,JaN 0289 / 334405
5 012
Becker,Franz 1200344
Becker,Boris 034/50005
Boris Becker 012 / 50 005
5000 5 Boris Becker
Franz Beckenbauer 332323
 
<strong>Output:</strong>
4
Lance Armstrong: 0608-220476886
Carlos Sastre: 030-64736666
Jan Ullrich: 089-7798005
Jens Voigt: 07401-4498
3
Franz Beckenbauer: 012-332323
Boris Becker: 012-50005
Franz Becker: 012-1200344
</pre>


______________________________________________________
MAXSUB||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given an array find the sum of the maximum non-empty subset of the array and also give the count of the subset. A subset of an array is a list obtained by striking off some numbers.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A non-empty subset implies a subset with at least 1 element in it.</div>
<p>&nbsp;</p>
<p>Given an array find the sum of the maximum non-empty subset of the array and also give the count of the subset. A subset of an array is a list obtained by striking off some (possibly none) numbers.</p>
<p>A non-empty subset implies a subset with at least 1 element in it.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

______________________________________________________
NOSQ||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A square free number is defined as a number which is not divisible by any square number.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">13, 15, 210 are square free numbers, where as 25 (divisible by 5*5), 108 (divisible by 6*6), 18 (divisible by 3*3) are not square free numbers.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">However number 1 is not considered to be a square and is a squarefree number.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Now you must find how many numbers from number a to b, are square free and also have a digit d inside it.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example for in the range 10 to 40 te squarefree numbers having digit 3 are</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">13, 23, 30, 31, 33, 34, 35, 37, 38, 39</div>
<p>&nbsp;</p>
<p>A square free number is defined as a number which is not divisible by any square number.</p>
<p>For example,</p>
<p>13, 15, 210 are square free numbers, where as 25 (divisible by 5*5), 108 (divisible by 6*6), 18 (divisible by 3*3) are not square free numbers.</p>
<p>However number 1 is not considered to be a square and is a squarefree number.</p>
<p>Now you must find how many numbers from number a to b, are square free and also have a digit d inside it.</p>
<p>For example for in the range 10 to 40 te squarefree numbers having digit 3 are</p>
<p>13, 23, 30, 31, 33, 34, 35, 37, 38, 39</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

______________________________________________________
NACCI||||||true||||||


<p>We all know about the classical fibonaaci series, Fibonacci series is F(n)=F(n-1)+F(n-2). For this question we call it a 2-Nacci series as a new element is calculated as the sum of the last 2 terms of the series. For fibonaaci we assume F(0)=0 and F(1)=1. We define as new series N-Nacci where F(n) is the sum of the last n terms and here we assume that F(0)=0, F(1)=1,F(2)=2... F(n-1)=(n-1). Your task is to calculate the last K digits of the Lth term of the N-Nacci series(no leading zeros needed).</p>
<p>&nbsp;</p>
<p>Constraints</p>
<p>&nbsp;</p>
<p>2&lt;=N&lt;=30</p>
<p>K&lt;=8</p>
<p>L&lt;=1000000000</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input denotes the number of test cases t(atmost 10). Each line denotes a test case consisting of N,K,L.</p>

*******OutputConstraints*******

<p>For each test case print the last K digits of the Lth term of the N-Nacci series.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
2 1 5
3 6 12
4 1 10
4 2 10

<strong>Output:</strong></pre>
<pre>5
778
6
16
</pre>


______________________________________________________
PSWITCH||||||false||||||

<p>&nbsp;</p>
<p>Seraph is a smart boy who, one day at the time of his birthday he was wearing a lot of lights for the event. The number of lights is installed for as many as N, which are numbered 1 through N. lights are connected to a controller that has 4 buttons. Each button functions as follows:</p>
<p>1. if this button is pressed, then all light will change the state from OFF to ON or from ON to OFF</p>
<p>2. if this button is pressed, then the odd-numbered light will change its state</p>
<p>3. if this button is pressed, then the even-numbered light will change its state</p>
<p>4. if this button is pressed, all lights are numbered 3K +1 will change its state</p>
<p>In the controller, there are counter C that count number of button will be pressed. when the initial state, the state of all the lights are ON and the counter C is set to 0. After that you will be given information of light at the end of the show, and you have to count how many kinds of configuration according to the information provided.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Seraph is a smart boy who, one day at the time of his birthday he was wearing a lot of lights for the event. The number of lights is installed for as many as N, which are numbered 1 through N. lights are connected to a controller that has 4 buttons. Each button functions as follows:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">1. if this button is pressed, then all light will change the state from OFF to ON or from ON to OFF</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2. if this button is pressed, then the odd-numbered light will change its state</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">3. if this button is pressed, then the even-numbered light will change its state</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">4. if this button is pressed, all lights are numbered 3K +1 will change its state</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">
<p>In the controller, there are counter C that count number of button will be pressed. when the initial state, the state of all the lights are ON and the counter C is set to 0. After that you will be given information of light at the end of the show, and you have to count how many kinds of configuration according to the info</p>
<p>rmation ahdadhprovided.</p>
</div>
<p><strong>Input</strong></p>
<p>The first line containing N (10 &lt;= N &lt;= 100) that indicates number of lamps. The second line is C (1 &lt;= C &lt;= 1000) that indicate the final value of counte. The third line is lists the number of ON lights at the end of the show, each number separated by a space and the end of the line given the value -1. The fourth line is lists the number of OFF light at the end of the show, each number separated by a space and the end of the line given the value -1.</p>
<h3>Output</h3>
<p>configurations are possible at the end of the event. There should be no repetitive configuration and output must be in lexicographical. If there is no configuration, print "Impossible".</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
10
1
-1
7 -1

<strong>Output:</strong>
0000000000
0101010101
0110110110<span style="white-space: normal;">
</span></pre>
<pre>Explanation :</pre>
<pre>There is 10 lamps in that event and you have to pressed the button once, and at the end of event, lamp number 7 must be OFF.</pre>
<pre>0 mean that lamp is OFF, 1 mean that lamp is ON&nbsp;</pre>


______________________________________________________
POCALC2||||||true||||||


<p>Adam likes pocket calculators, not only the  <a href="../../problems/POCALC1/">early ones</a>, but also the modern ones with a  two line LCD-display and mathematically correct operator precedence. The upper (input-)line shows the expression you typed in, the (output-)line below shows the result immediately after the [=] key has been pressed. Given the calculator's input-line, the program's task is to produce its output-line. Using the calculator's [S-D] key, the display switches between fractional and decimal representation of the result, so output must contain both  representations.</p>
<p style="text-align:center"><img src="http://www.spoj.pl../../../content/numerix:pocalc2-b-300-gr.jpg" alt="Display left" width="300" height="114" /> <img src="http://www.spoj.pl../../../content/numerix:pocalc2-b-300-gr.jpg" alt="Display right" width="300" height="114" /></p>
<!--
<p style="text-align:center" mce_style="text-align:center"><img src="http://www.spoj.plpocalc2-b-300-gr.jpg" mce_src="pocalc2-b-300-gr.jpg"></img> <img src="http://www.spoj.plpocalc2-b-300-gr.jpg" mce_src="pocalc2-a-300-gr.jpg"></img></p>
-->

*******InputConstraints*******

<p>Input starts with a positive integer t (t&lt;1000) in a single line, then t testcases follow. Every testcase consists of either three lines or a single line, representing the expression in the calculator's input-line, followed by a blank line.  An expression contains n numbers (0 &lt; n &lt; 10) with exactly one operator (+, -, x, :) between any two numbers and exactly one space to separate number and operator. There will be no invalid expression and no undefined operation.<br /> A number is given as a decimal, a fraction or a mixed number and will be non-negative. If a number is positive, its decimal value is between 10<sup>-9</sup> and 10<sup>9</sup>, numerator and denominator are also non-negative and not larger than 10<sup>9</sup> each, given decimals have at most 9 digits overall. These constraints also hold for all calculations, if done properly. The length of the fraction bar depends on the maximum length of the numerator or the denominator respectively. If lengths of numerator and denominator are different, the shorter one will be centered based on the fraction bar. If centering isn't possible, it is set one digit to the right.</p>

*******OutputConstraints*******

<p>For each testcase print the result the calculator will display in its output-line: first fractional, then decimal, both representations separated by " [S-D] ". If a result is negative, the negative sign has to be printed directly (i.e. no space) in front of the integer part or the fraction bar.<br /> The fractional representation has to be printed in lowest terms either as a proper fraction or mixed number. If the number has an integer representation, that has to be printed instead. Numerator and denominator have to be placed as described in the input section.<br /> After " [S-D] " the exact(!) decimal represenation has to be printed.  As the screenshot shows, the calculator is even able to display a repeating decimal in its decimal representation using a vinculum, so that's what the program has to do as well, using underscores in the line above. You can assume that no decimal expansion is longer than 100 digits (it's a calculator with XXL-display).</p>
<p>The number of lines for every output depends on the result. It may be three lines (if fractions appear) or a single line (if result is an integer). Print a blank line after every testcase except the last one. Be careful not to print any trailing spaces.</p>
<p><strong>For more clarity of input and output format please look at the examples below.</strong></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5
  9          50
2-- + 0.26 x --
 11          15

        4   9
5.88 - -- : -
       18   5

3 - 5.125

9 + 14

 1       
--- x 0.5
100      


<strong>Output:</strong>
 113          __
3--- [S-D] 3.684
 165

 1532           _________
5---- [S-D] 5.75654320987
 2025

  1
-2- [S-D] -2.125
  8

23 [S-D] 23

 1 
--- [S-D] 0.005
200
</pre>


______________________________________________________
MAIN72||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">you are given an array of N integers. Now you want to find the sum of all those integers which can be expressed as the sum of at least one subset of the given array.</div>
<p>You are given an array of N integers. Now you want to find the sum of all those integers which can be expressed as the sum of at least one subset of the given array.</p>

*******InputConstraints*******

<p>First line contains T the number of test case. then T test cases follow,first line of each test case contains N (1&lt;=N&lt;=100) the number&nbsp;of integers, next line contains N integers, each of them is between 0 and 1000 (inclusive). &nbsp;</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
0 1
3
2 3 2

<strong>Output:</strong>
1
21</pre>


______________________________________________________
MAIN73||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Manoj and Pankaj play the following game on a N*M grid, Each cell of which is either empty or contain a stone.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each player in his his turn must take one the two moves described below:-</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">1. He can shift an stone to its adjacent right cell, if that cell is empty</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2. or he can remove a stone completely from the grid.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Player who take the last turn will wins the game. It is also given that both the players will play optimally and Manoj always take the first turn.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You have to find who will win the game.&nbsp;</div>
<p>Manoj and Pankaj play the following game on a N*M grid, Each cell of which is either empty or contain a stone.</p>
<p>Each player in his his turn must take one the two moves described below:-</p>
<p>1. He can shift an stone to its adjacent right cell, if that cell is empty</p>
<p>2. He can remove a stone completely from the grid.</p>
<p>1st player who is unable to take a move looses the game . It is also given that both the players will play optimally and Manoj always take the first turn.</p>
<p>You have to find who will win the game.&nbsp;</p>

*******InputConstraints*******

<p>First line of each test case contains two integers N and M. (1&lt;=N,M&lt;=200) Each of next&nbsp;N lines contains an string, jth character on of ith string is '*' if there is an stone otherise it is '.' (empty). Input ends when N, M = 0,0. which is not to be processed.</p>

*******OutputConstraints*******

<p>For each test case print 'Manoj' if Manoj wins, print 'Pankaj' otherwise.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

2 2
.*
.*

2 2
.*
*.
0 0</pre>
<pre><strong>Output:</strong>
Pankaj
Manoj</pre>


______________________________________________________
MAIN74||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Consider the famous euclid algoithm to calculate the GCD of two integers (a, b):</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">int gcd(int a, int b){</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;&nbsp; while(b!=0){</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;&nbsp; &nbsp; &nbsp; int temp = a</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span> &nbsp; a = b</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span> &nbsp; b = temp % b</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;&nbsp; }</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;&nbsp; return a;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">}</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">for input (7, 3) the 'while' loop will run 2 times as follows: (7, 3) &nbsp;=&gt; (3, 1) =&gt; &nbsp;(l, 0)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Now given an integer N you have to find the smallest possible sum of two non-negative integers a, b (a&gt;=b) such that</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the while loop in the euclid algorithm for (a, b) will run exactly N times.</div>
<p>Consider the famous euclid algoithm to calculate the GCD of two integers (a, b):</p>
<p>int gcd(int a, int b){</p>
<p>&nbsp;&nbsp; while(b!=0){</p>
<p>&nbsp;&nbsp; &nbsp; &nbsp; int temp = a</p>
<p><span style="white-space: pre;"> </span> &nbsp; a = b</p>
<p><span style="white-space: pre;"> </span> &nbsp; b = temp % b</p>
<p>&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp; return a;</p>
<p>}</p>
<p>for input (7, 3) the 'while' loop will run 2 times as follows: (7, 3) &nbsp;=&gt; (3, 1) =&gt; &nbsp;(l, 0)</p>
<p>Now given an integer N you have to find the smallest possible sum of two non-negative integers a, b (a&gt;=b) such that&nbsp;the while loop in the above mentioned function for (a, b) will run exactly N times.</p>

*******InputConstraints*******

<p>First line of input contains T (1&lt;=T&lt;=50) the number of test cases. Each of the following T lines contains an integer N (0&lt;=N&lt;=10^18).</p>

*******OutputConstraints*******

<p>For each test case print the required answer modulo 1000000007 in a seperate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
1

<strong>Output:</strong></pre>
<pre><strong>&nbsp;</strong>2</pre>
<pre>Explaination: (1,1) is the required pair.</pre>


______________________________________________________
MAIN75||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">N nodes are labled with integers from 1 to N. Now these N nodes are inserted in a empty binary search tree. But the constraint is that</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">we have to build this tree such that height of the tree is exactly equal to H. Your tast is to find how many distict binary search trees exists&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">of these nodes such that their height is exactly equal to H ?</div>
<p>N nodes are labled with integers from 1 to N. Now these N nodes are inserted in a empty binary search tree. But the constraint is that&nbsp;we have to build this tree such that height of tree is exactly equal to H. Your tast is to find how many distict binary search trees exists&nbsp;of these nodes such that their height is exactly equal to H ?</p>
<p>Two BSTs are considered to be different if there exist a node whose parent is different in both trees.</p>

*******InputConstraints*******

<p>Input First line contains 1&lt;=T&lt;=10 the number of test cases. Follwomg T lines contains 2 integers each. N and H. 1&lt;=N&lt;=500, 0&lt;=H&lt;=500.</p>

*******OutputConstraints*******

<p>For each test case print the required answer modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1</pre>
<pre>2 1</pre>
<pre><strong>Output:</strong>
2</pre>


______________________________________________________
LSQF||||||true||||||


<p>Given a string x, the string obtained by concatenating x to itself is sometimes called the square of x. <br /><br />Given a string s, output the longest string x such that its square is a substring of s. If you find more than one solution, output the lexicographically smallest.</p>

*******InputConstraints*******

<p>The first and only line of input contains a string s (consisting only of lowercase letters of the english alphabet). The length of s is less than or equal to 10<sup>5</sup>.</p>

*******OutputConstraints*******

<p>To the first line of output print the length of the string x.<br /> To the second line print the string x.</p>
<p>Such a string will always exist in the test data.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
abcabc<br /><strong><br />Output:</strong>
3<br />abc</pre>


______________________________________________________
ABCD||||||true||||||


<p>Consider a table with 2 rows and 2N columns (a total of 4N cells). Each cell of the first row is coloured by one of the colours A, B, C, D such that there are no two adjacent cells of the same colour. You have to colour the second row using colours A, B, C, D such that:</p>
<p>&bull; There are exactly N cells of each colour (A, B, C and D) in the table.</p>
<p>&bull; There are no two adjacent cells of the same colour. (Adjacent cells share a vertical or a horizontal side.)</p>
<p>It is guaranteed that the solution, not necessarily unique, will always exist.</p>

*******InputConstraints*******

<p>[a natural number N &le; 50000]</p>
<p>[a string of 2N letters from the set {A, B, C, D}, representing the first row of the table]</p>

*******OutputConstraints*******

<p>[a string of 2N letters from the set {A, B, C, D}, representing the second row of the table]</p>

*******IOTestCases*******

<pre><p><strong>Input</strong></p><p>1</p><p>CB</p><p><strong>Output</strong></p><p>AD</p><p>&nbsp;</p><p><strong>Input</strong></p><p>2</p><p>ABAD<strong>&nbsp;</strong></p><p><strong>Output</strong></p><p>BCDC</p></pre>


______________________________________________________
LINQSOLV||||||true||||||


<p>Given a system of linear equations, print the solution of that system.</p>

*******InputConstraints*******

<p>Input starts with a positive integer t&lt;100 in a single line, then t testcases follow. Every testcase represents a linear system and starts with one line containing a positive integer n&lt;21, the number of equations and also the number  of variables of that system. Then n equations follow, each one in a single line. <br /> An equation is written in schoolbook notation, i.e. variables noted by single small letters (english alphabet), no multiplication sign, factor 1 left out, no spaces in between.  A variable or a value may occur zero or more times in an equation. All coefficients are integers with an absolute value less than 100, a single line won't be longer than 100 characters and will always contain a valid linear equation.</p>
<p>The following equations are considered to be <span style="font-weight:bold; color:green">valid</span>:<br /> a+b-c+b-2c-a=1 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -x+5-9=-4x+y-8 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c-c+t+1=0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=z</p>
<p>The following equations are considered to be <span style="font-weight:bold; color:red">invalid</span>:<br /> 4*a+b=6 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6+-2x=99 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c-c+t-t=0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4+9 = h</p>

*******OutputConstraints*******

<p>For each testcase print all variables of the linear system in alphabetical order together with the associated value  as an integer or a fraction in lowest terms respectively. Print a blank line between testcases.  For exact notation see example below. All (interim) results will fit into 64-bit,  if algorithm is implemented properly. You can assume that all linear systems have an unique solution.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
a+b=5
b-a=1
3
5u-5z+4=0
8k-3z=-2
9k-u=u
 
<strong>Output:</strong>
a=2
b=3

k=-4/55
u=-18/55
z=26/55
</pre>


______________________________________________________
FOUROW||||||true||||||


<p><img style="float:left; margin-right:30px; margin-bottom:8px; margin-top:2px; margin-left:5px" src="../../../content/numerix:fourow-360.png" alt="Four in a row" width="240" height="220" /></p>
<p>You probably know the popular two-players game "Four in a row". Each player gets 21 chips of the same color at the beginning. Then the two players take turns in putting a chip into one of seven slots (each one six cells in height), trying to get at least four of their chips "in a row", i.e. horizontally, vertically or diagonally.<br /> Given a series of moves, your task is to first check, if this is a valid game. A game is <em>invalid</em>, if one or more moves are made after a player has already won the game or if more than six chips are put into a single slot. If a game is valid, check if the game is over. A game is over, if one of the players got at least four chips "in a row" with his last move (i.e. he is the winner of the game) or if all slots are filled. If a game is over, check if there is a winner and if so, who it is. If there is a winner, then print the final state of the game.<br /> The picture shows the final state of a game, won by the first player (yellow chips).</p>

*******InputConstraints*******

<p>Input starts with a positive integer t&lt;100 in a single line, then t testcases follow. Every testcase starts with "Game #n: ", where n is the number of the game, numbered from 1 to t. Then the description of a game follows, given as a series of digits 1 to 7 indicating the number of the slot (as noted in the picture), in which the player puts his chip. The players are taking turns and the number of moves (i.e. the number of chips put into the slots) will be at most 42.</p>

*******OutputConstraints*******

<p>For each testcase print exactly one of the following five lines, where n has to be replaced by the game's number:<br /> Game #n is invalid.<br /> Game #n is over. There is no winner.<br /> Game #n is over. The first player won.<br /> Game #n is over. The second player won.<br /> Game #n is not over, yet.</p>
<p>If there is a winner, you also have to print a snapshot of the game's final state. A game's state consists of at most six lines representing the (horizontal) rows of the game's grid plus a leading and a trailing line containing seven hyphens.  Every line has a length of exactly seven characters. Use "x" for the chips of the first player, "o" for  those of the second player, whitespaces for all cells without a chip. If a (horizontal) row contains only whitespaces, it must not be printed.</p>
<p>To make it easier to find the winning row in the grid, <em>all</em> chips that belong to the winning  row(s) have to be marked either by "X" (instead of "x", if the first player has won) or by "O" (instead of "o", if the second player has won). Be aware that there can be more than four chips in a winning row and more than one winning row!</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
Game #1: 2143563445575
Game #2: 123456

<strong>Output:</strong>
Game #1 is over. The first player won.
-------
    X  
   Xx  
  Xoo  
oXoxxoo
-------
Game #2 is not over, yet.

</pre>


______________________________________________________
REVSEQ||||||true||||||


<p>This is a very ad-hoc problem. Consider a sequence (N, N-1, ..., 2, 1). You have to reverse it, that is, make it become (1, 2, ..., N-1, N). And how do you do this? By making operations of the following kind.</p>
<p>Writing three natural numbers A, B, C such that 1 &le; A &le; B &lt; C &le; N means that you are swapping the block (block = consecutive subsequence) of elements occupying positions A...B with the block of elements occupying positions B+1..C. Of course, the order of elements in a particular block does not change.</p>
<p>This means that you can pick any two adjacent blocks (each of an arbitrary length) and swap them. The problem can easily be solved in N-1 operations, but to make it more difficult, you must think of a faster way.</p>

*******InputConstraints*******

<p>A natural number 1 &lt; N &lt; 100.</p>

*******OutputConstraints*******

<p>Output at most 50 operations, one per line. Each opearations is represented by three numbers as described above.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5

<strong>Output:</strong>
2 3 5</pre>
<pre>1 2 4</pre>
<pre>2 3 5</pre>
<pre><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Explanation of the sample output:</strong> (5 4 3 2 1) --&gt; (5 2 1 4 3) --&gt; (1 4 5 2 3) --&gt; (1 2 3 4 5)</pre>
</pre>


______________________________________________________
PRIMPERM||||||true||||||


<p>Given two positive integers n and m, we call m a prime permutation of n, if m is prime and can be obtained by zero or more permutations of the digits of n. Permutations with leading zeros are invalid.</p>

*******InputConstraints*******

<p>Input starts with a positive integer t&lt;10<sup>4</sup> in a single line, then t lines follow.<br /> Each of the t lines contains one positive integer n&lt;10<sup>7</sup>.</p>

*******OutputConstraints*******

<p>For every n print the number of distinct prime permutations of n in a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
13
110

<strong>Output:</strong>
2
1
</pre>
<p><strong>Hint</strong>:If your solution times out, you may try the <a href="../../problems/TPRIMPER/">tutorial version</a> with a weaker time limit.</p>


______________________________________________________
TAILS||||||true||||||


<p style="text-align: justify;">John and James planned to play a game with coins. John has 20 coins and he places it on the table in a random manner(i.e either with heads(1) or tails(0) facing up). John asked james to convert all heads into tails in minimum number of flips with the condition that if a coin is flipped the coins present to the right and left of the chosen coin should also be flipped.</p>

*******InputConstraints*******

<p>A single line with 20 space-separated integers</p>

*******OutputConstraints*******

<p style="text-align: justify;">The minimum number of coin flips necessary to convert all heads into tails (i.e., to 0). For the inputs given, it will always be possible to find some combination of flips that will manipulate the coins to 20 tails.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0<br /><br /><strong>Output:</strong>
3<br /><br /><strong>Hint </strong><br />Explanation of the sample: <br />&nbsp;<br />Flip coins 4, 9, and 11 to make them all tails: <br />0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 [initial state] <br />0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 [after flipping coin 4] <br />0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 [after flipping coin 9] <br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 [after flipping coin 11]</pre>


______________________________________________________
WAGE||||||true||||||


<p style="text-align: justify;">Danny has created a new civilization on a 2D grid. At the outset each grid location may be occupied by one of three life forms: Woods, Axe, or Grass. Each day, differing life forms occupying horizontally or vertically adjacent grid locations wage war. In each war, Woods always defeat Axe, Axe always defeat Grass, and Grass always defeat Woods. At the end of the day, the winner expands its territory to include the loser's grid position. The loser vacates the position.Determine the territory occupied by each life form after n days.</p>

*******InputConstraints*******

<p style="text-align: justify;">The first line of input contains t, the number of test cases. Each test case begins with three integers not greater than 100: r and c, the number of rows and columns in the grid, and n. The grid is represented by the r lines that follow, each with c characters. Each character in the grid is W, A, or G, indicating that it is occupied by Woods, Axe, or Grass respectively.</p>

*******OutputConstraints*******

<p>For each test case, print the grid as it appears at the end of the nth day.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 <br />3 3 1 <br />WWW <br />WAW <br />WWW <br />3 4 2 <br />WAGW <br />AGWA <br />GWAG</pre>
<pre><br /><br /><strong>Output:</strong>
WWW <br />WWW <br />WWW <br />&nbsp;<br />WWWA <br />WWAG <br />WAGW</pre>


______________________________________________________
TRAVERSE||||||false||||||

<p>An n x n game board is filled with integers, one positive integer per square. The objective is to travel along any legitimate path from the upper left corner to the lower right corner of the board. &nbsp;<br />&nbsp;<br />Rules <br />&nbsp;<br />1.The number in any one square describes how far a step away from that location must be. &nbsp;<br />2.If the step size moves out of the game board, then that step is not allowed. <br />3.All steps must be either to the right or towards the bottom. &nbsp;<br />&nbsp;<br />Note that a 0 is a dead end which prevents any further progress. &nbsp;<br />&nbsp;<br />Consider the 4 x 4 board shown in Figure 1, where the solid circle identifies the start position and the dashed circle identifies the target. Figure 2 shows the three paths from the start to the target, with the irrelevant numbers in each removed.</p>
<h3><img title="fig" src="http://www.samhita11.com/images/fig.jpg" alt="fig" width="618" height="174" /></h3>

______________________________________________________
NY10E||||||false||||||

<p>A number is said to be made up of non-decreasing digits if all the digits to the left of any digit is less than or equal to that digit.For example, the four-digit number <strong>1234</strong> is composed of digits that are non-decreasing.&nbsp; Some other four-digit numbers that are composed of non-decreasing digits are<strong> 0011</strong>, <strong>1111</strong>, <strong>1112</strong>, <strong>1122</strong>, <strong>2223</strong>.&nbsp; As it turns out, there are exactly 715 four-digit numbers composed of non-decreasing digits. <br />&nbsp;<br />Notice that leading zeroes are required: 0000, 0001, 0002 are all valid four-digit numbers with non-decreasing digits. <br />&nbsp;<br />For this problem, you will write a program that determines how many such numbers there are with a specified number of digits.</p>

______________________________________________________
NY10A||||||true||||||


<p>Penney&rsquo;s game is a simple game typically played by two players.&nbsp; One version of the game calls for each player to choose a unique three-coin sequence such as <strong>HEADS TAILS HEADS (HTH)</strong>.&nbsp; A fair coin is tossed sequentially some number of times until one of the two sequences appears.&nbsp; The player who chose the first sequence to appear wins the game.</p>
<p>For this problem, you will write a program that implements a variation on the Penney Game.&nbsp; You willread a sequence of 40 coin tosses and determine how many times each three-coin sequence appears.&nbsp; Obviously there are eight such three-coin sequences: <strong>TTT</strong>, <strong>TTH</strong>, <strong>THT</strong>, <strong>THH</strong>, <strong>HTT</strong>, <strong>HTH</strong>, <strong>HHT</strong> and <strong>HHH</strong>. Sequences may overlap.&nbsp; For example, if all 40 coin tosses are heads, then the sequence HHH appears 38 times.</p>

*******InputConstraints*******

<p>The first line of input contains a single integer P, (1 &le; P &le; 1000), which is the number of data sets that follow.&nbsp; Each data set consists of 2 lines.&nbsp; The first line contains the data set number N.&nbsp; The second line contains the sequence of 40 coin tosses.&nbsp; Each toss is represented as an upper case H or an upper case T, for heads or tails, respectively.&nbsp; There will be no spaces on any input line.</p>

*******OutputConstraints*******

<p>For each data set there is one line of output.&nbsp; It contains the data set number followed by a single space, followed by the number of occurrences of each three-coin sequence, in the order shown above, with a space between each one.&nbsp; There should be a total of 9 space separated decimal integers on each output line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />1<br />HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH<br />2<br />TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT<br />3<br />HHTTTHHTTTHTHHTHHTTHTTTHHHTHTTHTTHTTTHTH<br />4<br />HTHTHHHTHHHTHTHHHHTTTHTTTTTHHTTTTHTHHHHT<br /><br /><strong>Output:</strong><br />1 0 0 0 0 0 0 0 38<br />2 38 0 0 0 0 0 0 0<br />3 4 7 6 4 7 4 5 1<br />4 6 3 4 5 3 6 5 6</pre>


______________________________________________________
NY10B||||||false||||||

<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<p style="font-family: 'Times New Roman'; font-size: medium;"><small>Note: This problem has nothing to do with siting sewage plants, power lines or wind farms. NIM is an ambigram.</small></p>
<p style="font-family: 'Times New Roman'; font-size: medium;">The game of&nbsp;NIM&nbsp;is played with any number of piles of objects with any number of objects in each pile. At each turn, a player takes one or more (up to all) objects from one pile. In the normal form of the game, the player who takes the last object is the winner. There is a well-known strategy for this game based on the&nbsp;nim-2 sum.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">The&nbsp;Nim-B sum&nbsp;(nim sum base&nbsp;<em>B</em>) of two non-negative integers&nbsp;<em>X</em>&nbsp;and&nbsp;<em>Y</em>&nbsp;(written&nbsp;<em>NimSum</em>(<em>B</em>,&nbsp;<em>X</em>,&nbsp;<em>Y</em>)) is computed as follows:</p>
<ol style="font-family: 'Times New Roman'; font-size: medium;">
<li>Write each of&nbsp;<em>X</em>&nbsp;and&nbsp;<em>Y</em>&nbsp;in base&nbsp;<em>B</em>.</li>
<li>Each digit in base&nbsp;<em>B</em>&nbsp;of the&nbsp;Nim-B sum&nbsp;is the sum modulo&nbsp;<em>B</em>&nbsp;of the corresponding digits in the base&nbsp;<em>B</em>&nbsp;representation of&nbsp;<em>X</em>&nbsp;and&nbsp;<em>Y</em>.</li>
</ol>
<p style="font-family: 'Times New Roman'; font-size: medium;">For example:</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">&nbsp;<em>NimSum</em>(2, 123, 456) = 1111011 &curren; 111001000 = 110110011 = 435</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><em>NimSum</em>(3, 123, 456) = 11120 &curren; 121220 = 102010 = 300</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><em>NimSum</em>(4, 123, 456) = 1323 &curren; 13020 = 10303 = 307</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">The strategy for normal form Nim is to compute the Nim-2 sum&nbsp;<em>T</em>&nbsp;of the sizes of all piles. If at any time, you end your turn with&nbsp;<em>T</em>&nbsp;= 0, you are guaranteed a&nbsp;WIN. Any opponent move must leave&nbsp;<em>T</em>&nbsp;not 0 and there is always a move to get&nbsp;<em>T</em>&nbsp;back to 0. This is done by computing&nbsp;<em>NimSum</em>(2,&nbsp;<em>T</em>,&nbsp;<em>PS</em>)&nbsp;for each pile; if this is less than the pile size&nbsp;(<em>PS</em>), compute the difference between the&nbsp;<em>PS</em>&nbsp;and the Nim-2 sum and remove it from that pile as your next move.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">Write a program to compute&nbsp;<em>NimSum</em>(<em>B</em>,&nbsp;<em>X</em>,&nbsp;<em>Y</em>).</p>
<h2 style="font-size: 1.5em;">Input</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">The first line of input contains a single integer&nbsp;<em>P</em>,&nbsp;(1<img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>P</em><img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by three space separated decimal integers,&nbsp;<em>B</em>,&nbsp;<em>X</em>&nbsp;and&nbsp;<em>Y</em>.&nbsp;2<img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>B</em><img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />2000000,&nbsp;0<img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>X</em><img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />2000000,&nbsp;0<img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>Y</em><img style="border: 0px initial initial;" src="http://acmicpc-live-archive.uva.es/nuevoportal/data/4874img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />2000000.</p>
<h2 style="font-size: 1.5em;">Output</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">For each data set there is one line of output. It contains the data set number followed by a single space, followed by&nbsp;<em>N</em>, the decimal representation of the Nim sum in base&nbsp;<em>B</em>&nbsp;of&nbsp;<em>X</em>&nbsp;and&nbsp;<em>Y</em>.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><strong>Sample Input</strong></p>
<p><span style="font-size: small;">4<br />1 2 123 456<br />2 3 123 456<br />3 4 123 456<br />4 5 123 456</span></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><span style="font-size: small;"><strong><span style="font-size: medium;">Sample Output</span></strong></span></p>
<p><span style="font-size: small;">1 435<br /></span><span style="font-size: small;"><span style="font-size: small;">2 300<br /></span></span><span style="font-size: small;"><span style="font-size: small;">3 307<br /></span></span><span style="font-size: small;"><span style="font-size: small;">4 429</span></span></p>
<div><span style="font-size: small;"><span style="font-size: small;"><br /></span></span></div>
</div>


______________________________________________________
NY10C||||||false||||||

<p style="font-family: 'Times New Roman'; font-size: medium;">Fax machines use a form of compression based on&nbsp;run-length encoding. Run-length encoding (RLE) is a very simple form of data compression in which&nbsp;runs&nbsp;of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most useful on data that contains many such runs: for example, relatively simple graphic images such as icons, text, and line drawings. It is not useful with files that don't have many runs as it could potentially double the file size (photograph, for example).</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">For this problem, you will write a program that encodes a block of data using a very simple RLE algorithm. A&nbsp;run&nbsp;is encoded using a two byte sequence. The first byte of the sequence contains the&nbsp;count, and the second contains the&nbsp;value&nbsp;to repeat. The&nbsp;count&nbsp;is encoded using an 8 bit value with the high order bit set to 1. The remaining 7 bits represent the&nbsp;count-3. This gives a maximum run count of 130 per 2 byte sequence. (This implies that the minimum run count is 3). Bytes that are not part of a&nbsp;run&nbsp;are encoded as-is with a prefix byte indicating the count of bytes in the&nbsp;non-run&nbsp;minus 1, 0 through 127, representing a range of 1 - 128 (the high order bit will always be 0 in the case of&nbsp;non-run&nbsp;data).</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">If a run contains more than 130 bytes, then it must be encoded using multiple sequences, the first of which will always be a run of 130. All&nbsp;runs&nbsp;of 3 or more&nbsp;must&nbsp;be encoded as a&nbsp;run. If a&nbsp;non-run&nbsp;contains more than 128 bytes, then multiple non-run sequences must be used. For example, a run of 262 would be encoded as two runs of 130 followed by a non-run of 2.</p>
<h2>Input</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">The first line of input contains a single integer&nbsp;<em>P</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4875img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>P</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4875img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000), which is the number of data sets that follow. Each data set consists of multiple lines. The first line contains two (2) decimal integer values: the problem number, followed by a space, followed by the number of bytes&nbsp;<em>B</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4875img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>B</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4875img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />5000), to encode. The remaining line(s) contain(s) the data to be encoded. Each line of data to encode will contain 80&nbsp;hexadecimal digits&nbsp;(except the last line, which may contain less). 2&nbsp;hexadecimal digits&nbsp;are used to represent each byte. Hexadecimal digits are:&nbsp;<tt>0</tt>,&nbsp;<tt>1</tt>,&nbsp;<tt>2</tt>,&nbsp;<tt>3</tt>,&nbsp;<tt>4</tt>,&nbsp;<tt>5</tt>,&nbsp;<tt>6</tt>,<tt>7</tt>,&nbsp;<tt>8</tt>,&nbsp;<tt>9</tt>,&nbsp;<tt>A</tt>,&nbsp;<tt>B</tt>,&nbsp;<tt>C</tt>,&nbsp;<tt>D</tt>,&nbsp;<tt>E</tt>,&nbsp;<tt>F</tt>.</p>
<h2>Output</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">For each data set, there are multiple lines of output. The first line contains a decimal integer giving the data set number followed by a single space, followed by a decimal integer giving the total number of encoded bytes. The remaining lines contain the encoded data each with 80 hexadecimal digits, except the last, which may contain less.</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
<pre>4 
1 1 
07 
2 5 
F4A5A5A5A5 
3 44 
0000000000000000FFFFFF66665A5A5A5A5A71727374758008011011135555555555555501020399 
777777CC 
4 40 
68686868686868686868686868686868686868686868686868686868686868686868686868686868</pre>
<strong>Output:</strong>
<pre>1 2 
0007 
2 4 
00F481A5 
3 32 
850080FF016666825A0A717273747580080110111384550301020399807700CC 
4 2 
A568</pre>
</pre>


______________________________________________________
NY10D||||||false||||||

<p style="font-family: 'Times New Roman'; font-size: medium;">Fax machines use a form of compression based on&nbsp;run-length encoding. Run-length encoding (RLE) is a very simple form of data compression in which&nbsp;runs&nbsp;of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most useful on data that contains many such runs: for example, relatively simple graphic images such as icons, text, and line drawings. It is not useful with files that don't have many runs as it could potentially double the file size (photograph, for example).</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">For this problem, you will write a program that decodes a block of data using a very simple RLE algorithm. A&nbsp;run&nbsp;is encoded using a two byte sequence. The first byte of the sequence contains the&nbsp;count, and the second contains the&nbsp;value&nbsp;to repeat. The&nbsp;count&nbsp;is encoded using an 8 bit value with the high order bit set to 1. The remaining 7 bits represent the&nbsp;count-3. This gives a maximum run count of 130 per 2 byte sequence. (This implies that the minimum run count is 3). Bytes that are not part of a&nbsp;run&nbsp;are encoded as-is with a prefix byte indicating the count of bytes in the&nbsp;non-run&nbsp;minus 1, 0 through 127, representing a range of 1 - 128 (the high order bit will always be 0 in the case of&nbsp;non-run&nbsp;data).</p>
<h2>Input</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">The first line of input contains a single integer&nbsp;<em>P</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4876img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>P</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4876img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000), which is the number of data sets that follow. Each data set consists of multiple lines. The first line contains two (2) decimal integer values: the problem number, followed by a space, followed by the number of bytes&nbsp;<em>B</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4876img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>B</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4876img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />5000), to decode. The remaining line(s) contain(s) the data to be decoded. Each line of data to decode contains 80&nbsp;hexadecimal digits&nbsp;(except the last line, which may contain less).&nbsp;2 hexadecimal digits&nbsp;are used to represent each&nbsp;byte. Hexadecimal digits are:&nbsp;<tt>0</tt>,&nbsp;<tt>1</tt>,&nbsp;<tt>2</tt>,&nbsp;<tt>3</tt>,&nbsp;<tt>4</tt>,&nbsp;<tt>5</tt>,&nbsp;<tt>6</tt>,&nbsp;<tt>7</tt>,<tt>8</tt>,&nbsp;<tt>9</tt>,&nbsp;<tt>A</tt>,&nbsp;<tt>B</tt>,&nbsp;<tt>C</tt>,&nbsp;<tt>D</tt>,&nbsp;<tt>E</tt>,&nbsp;<tt>F</tt></p>
<h2>Output</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">For each data set, there are multiple lines of output. The first line contains a decimal integer giving the data set number followed by a single space, followed by a decimal integer giving the total number of decoded bytes. The remaining lines contain the decoded data, 80 hexadecimal digits per line, except the last line which may contain less.</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
<pre>4 
1 2 
0007 
2 4 
00F481A5 
3 32 
850080FF016666825A0A717273747580080110111384550301020399807700CC 
4 2 
A568</pre>
<strong>Output:</strong>
<pre>1 1 
07 
2 5 
F4A5A5A5A5 
3 44 
0000000000000000FFFFFF66665A5A5A5A5A71727374758008011011135555555555555501020399 
777777CC 
4 40 
68686868686868686868686868686868686868686868686868686868686868686868686868686868</pre>
</pre>


______________________________________________________
NY10F||||||false||||||

<p style="font-family: 'Times New Roman'; font-size: medium;">I<sup>2</sup>C&nbsp;(Inter-Integrated Circuit)&nbsp;is a serial communication protocol that is used to attach low-speed peripherals (100&nbsp;kbit/sec) to a motherboard, embedded system or cell phone. A single I<sup>2</sup>C data bus may have several devices attached, each with a different 7-bit address. One of the nice things about I<sup>2</sup>C is that it only requires two signal lines, SCL (clock) and SDA (data). One bit of data is presented on the I2C data bus (SDA line) per clock (SCL). Typically, one device on the bus is designated as the master, and the other devices are&nbsp;slaves. The&nbsp;master&nbsp;will initiate communication to a specific device on the bus by specifying its&nbsp;address&nbsp;in a transaction.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">If there is no activity on the I<sup>2</sup>C bus, both the SCL and SDA signals are in a&nbsp;high&nbsp;state (1). The master initiates a transaction on the bus by pulling the SDA signal to a&nbsp;low&nbsp;state (0), while the SCL signal is&nbsp;high&nbsp;(1): this is called a&nbsp;START&nbsp;bit. At this point, all slaves on the bus must start paying attention to the signaling to see if the transaction is directed at them. The&nbsp;master&nbsp;will then send the 7bit slave address (most significant bit first), one bit at-a-time. This is done by bringing the SCL signal low (0), presenting the next bit value on the SDA line, then releasing the SCL signal so it goes high (1). The slaves will read the SDA signal as soon as the clock goes high (1). This operation is repeated 7 times, one for each bit of the desired slave address. Another data bit is presented on the bus in the same manner. This last bit is an indicator as to whether the master wants to read from (1) or write to (0) the addressed slave device. When a slave recognizes its address on the bus, it must acknowledge&nbsp;(ACK)&nbsp;that it is available and ready by pulling the SDA line low. The master will see this the next time it brings the clock high, at which point, the data transfer can begin. If no&nbsp;ACK&nbsp;is seen this means that the slave specified by the address does not exist. Note: If no device pulls a signal low, it will go high by default; a device simplyreleases&nbsp;a signal, and it will go high.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">Data is always transferred as 8 bit bytes, 1 bit at-a-time, most significant bit first. After each byte, the slave must&nbsp;ACK&nbsp;the master by pulling the SDA line low. If the slave is not ready to transmit (or receive) the next byte of data, it may pull the SCL line low. This will cause the master to go into a&nbsp;wait mode&nbsp;until the slave is ready. The slave indicates it is ready by bringing SDA low, and releasing the SCL line so it goes high. The next byte of data can then be transferred. The sequence repeats until the master decides all the data has been transferred, at which point it will send a&nbsp;STOP&nbsp;bit. This is done when the master lets the SDA line go high while the SCL line is high.</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">For this problem, you will write a program that&nbsp;sniffs&nbsp;the&nbsp;<em>I</em><sup>2</sup><em>C</em>&nbsp;bus signals and displays the details of transactions.</p>
<h2>Input</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">The first line of input contains a single integer&nbsp;<em>P</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4878img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>P</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4878img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1000), which is the number of data sets that follow. Each data set consists of multiple lines which represents a single&nbsp;<em>I</em><sup>2</sup><em>C</em>&nbsp;transaction. The first line contains two (2) decimal integer values: the problem number, followed by a space, followed by the number of signal samples&nbsp;<em>S</em>,&nbsp;(1<img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4878img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" /><em>S</em><img src="http://www.spoj.plhttp://acmicpc-live-archive.uva.es/nuevoportal/data/4878img1.png" border="0" alt="$ \le$" width="18" height="31" align="MIDDLE" />1161), for the transaction. The remaining line(s) contain(s) the signal samples. Each line of samples contains 40 samples (except the last which may contain less). Each sample consists of 2 binary digits characters representing SCL and SDA in that order.</p>
<h2>Output</h2>
<p style="font-family: 'Times New Roman'; font-size: medium;">For each data set, display a single line containing a decimal integer giving the data set number followed by a single space, followed by a description of the transaction. There will only be six different descriptions (two non-error cases, and four error cases):</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">Non-error cases:</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>WRITE OF</tt>&nbsp;<em>n</em>&nbsp;<tt>BYTES TO SLAVE</tt>&nbsp;<em>xx</em></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>READ OF</tt>&nbsp;<em>n</em>&nbsp;<tt>BYTES FROM SLAVE</tt>&nbsp;<em>xx</em></p>
<p style="font-family: 'Times New Roman'; font-size: medium;">&nbsp;Error cases:</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>ERROR NO START BIT</tt></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>ERROR NO STOP BIT</tt></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>ERROR NO ACK FROM SLAVE</tt>&nbsp;<em>xx</em></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><tt>ERROR NO ACK FOR DATA</tt></p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><em>n</em>&nbsp;is a decimal integer (1 - 128) representing the number of data bytes.&nbsp;<br /><em>xx</em>&nbsp;is a 2 digit hexadecimal value (00-7F) representing the slave address.&nbsp;<br />The&nbsp;<tt>ERROR NO ACK FROM SLAVE</tt>&nbsp;<em>xx</em>&nbsp;case occurs when there is no&nbsp;ACK&nbsp;for the supplied address&nbsp;<br />The&nbsp;<tt>ERROR NO ACK FOR DATA</tt>&nbsp;case occurs when there is no&nbsp;ACK&nbsp;after a data byte</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">For the error cases, only the first error detected should be displayed.</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
<pre>4 
1 97 
01111001110010001000100111011101110111001000100010011100100010001000100010001000 
10001001110010001000100010011100100010001001110010001000100111001000100010001001 
1100100010001001110111001000101111 
2 169 
01111000100010011100100010001001110010001000100010011100100010001000100010001000 
10001001110010001000100010011100100010001001110010001000100111001000100010001001 
11001000100010011101110010001000100111001000100111001000100010001000100111001000 
10011100100111001000100010011100100010011101110010001000100010011100100010011101 
110111001000101111 
3 60 
01111000100010001001110010011101110010001000100010011100100010001000100010001000 
1000100111001000100010001001110010001111 
4 40 
01111000100010011101110010011100100111001111111111111111111111111111111111111111</pre>
<strong>Output:</strong>
<pre>1 READ OF 4 BYTES FROM SLAVE 47
2 WRITE OF 8 BYTES TO SLAVE 11 
3 ERROR NO STOP BIT 
4 ERROR NO ACK FROM SLAVE 0B</pre>
</pre>


______________________________________________________
NWERC10G||||||true||||||


<p>As you may know, the country of Absurdistan is full of abnormalities. For example, the whole country can be divided into unit squares that are either grass or swamp. Also, the country is famous for its incapable bureaucrats. If you want to buy a piece of land (called a parcel), you can only buy a rectangular area, because they cannot handle other shapes. The price of the parcel is determined by them and is proportional to the perimeter of the parcel, since the bureaucrats are unable to multiply integers and thus cannot calculate the area of the parcel.</p>
<p>Per owns a parcel in Absurdistan surrounded by swamp and he wants to sell it, possibly in parts, to some buyers. When he sells a rectangular part of his land, he is obliged to announce this to the local bureaucrats. They will first tell him the price he is supposed to sell it for. Then they will write down the name of the new owner and the coordinates of the south-east corner of the parcel being sold. If somebody else already owns a parcel with a south-east corner at the same spot, the bureaucrats will deny the change of ownership.</p>
<p>Per realizes that he can easily trick the system. He can sell overlapping areas, because bureaucrats only check whether the south-east corners are identical. However, nobody wants to buy a parcel containing swamp.</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../content/disatoba:NWERC10G" alt="" width="300" height="359" /></p>
<p style="text-align: left;">Now Per would like to know how many parcels of each perimeter he needs to sell in order to maximize his profit. Can you help him? You may assume that he can always find a buyer for each piece of land, as long as it doesn't contain any swamps. Also, Per is sure that no square within his parcel is owned by somebody else.</p>

*******InputConstraints*******

<p>On the first line a positive integer: the number of test cases, at most 100. After that per test case:</p>
<ul>
<li>One line with two integers n and m (1 &le; n, m &le; 1&nbsp;000): the dimensions of Per's parcel.</li>
<li>n lines, each with m characters. Each character is either `<tt>#</tt>' or `<tt>.</tt>'. The j-th character on the i-th line is a `<tt>#</tt>' if position (i, j) is a swamp, and `<tt>.</tt>' if it is grass. The north-west corner of Per's parcel has coordinates (1, 1), and the south-east corner has coordinates (n,m).</li>
</ul>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Per test case:</p>
<ul>
<li>Zero or more lines containing a complete list of how many parcels of each perimeter Per needs to sell in order to maximize his profit. More specifically, if Per should sell p</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre>1
6&nbsp;5
..#.#
.#...
#..##
...#.
#....
#..#.</pre>
<strong>Output:</strong>
<pre>6&nbsp;x&nbsp;4
5&nbsp;x&nbsp;6
5&nbsp;x&nbsp;8
3&nbsp;x&nbsp;10
1&nbsp;x&nbsp;12</pre>
</pre>


______________________________________________________
NWERC10H||||||true||||||


<p>In this problem we deal with the calculation of stock prices. You need to know the following things about stock prices:</p>
<ul>
<li>The <em>ask price </em>is the lowest price at which someone is willing to sell a share of a stock.</li>
<li>The&nbsp;<em>bid price </em>is the highest price at which someone is willing to buy a share of a stock.</li>
<li>The <em>stock price</em> is the price at which the last deal was established.</li>
</ul>
<p>Whenever the bid price is greater than or equal to the ask price, a deal is established. A buy order offering the bid price is matched with a sell order demanding the ask price, and shares are exchanged at the rate of the ask price until either the sell order or the buy order (or both) is fulfilled (i.e., the buyer wants no more stocks, or the seller wants to sell no more stocks). You will be given a list of orders (either buy or sell) and you have to calculate, after each order, the current ask price, bid price and stock price.</p>

*******InputConstraints*******

<p>On the first line a positive integer: the number of test cases, at most 100. After that per test case:</p>
<ul>
<li>One line with an integer n (1 &le; n &le; 1&nbsp;000): the number of orders.</li>
<li>n lines of the form "<em>order_type x</em>&nbsp;<tt>shares&nbsp;at y", <span style="font-family: arial, helvetica, sans-serif;">where <em>order_type </em>is either<em> </em>"buy" or "sell", x (1 &le; x &le; 1&nbsp;000) is the number of shares of a stock someone wishes to buy or to sell, and y (1 &le; y &le; 1&nbsp;000) is the desired price.</span></tt></li>
</ul>

*******OutputConstraints*******

<p>Per test case:</p>
<ul>
<li>n lines, each of the form "ai bi si" , where ai, bi and si are the current ask, bid and stock prices, respectively, after the i-th order has been processed and all possible deals have taken place. Whenever a price is not defined, output "-" instead of the price.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre>2
6
buy&nbsp;10&nbsp;shares&nbsp;at&nbsp;100
sell&nbsp;1&nbsp;shares&nbsp;at&nbsp;120
sell&nbsp;20&nbsp;shares&nbsp;at&nbsp;110
buy&nbsp;30&nbsp;shares&nbsp;at&nbsp;110
sell&nbsp;10&nbsp;shares&nbsp;at&nbsp;99
buy&nbsp;1&nbsp;shares&nbsp;at&nbsp;120
6
sell&nbsp;10&nbsp;shares&nbsp;at&nbsp;100
buy&nbsp;1&nbsp;shares&nbsp;at&nbsp;80
buy&nbsp;20&nbsp;shares&nbsp;at&nbsp;90
sell&nbsp;30&nbsp;shares&nbsp;at&nbsp;90
buy&nbsp;10&nbsp;shares&nbsp;at&nbsp;101
sell&nbsp;1&nbsp;shares&nbsp;at&nbsp;80</pre>
<strong>Output:</strong>
<pre>-&nbsp;100&nbsp;-
120&nbsp;100&nbsp;-
110&nbsp;100&nbsp;-
120&nbsp;110&nbsp;110
120&nbsp;100&nbsp;99
-&nbsp;100&nbsp;120
100&nbsp;-&nbsp;-
100&nbsp;80&nbsp;-
100&nbsp;90&nbsp;-
90&nbsp;80&nbsp;90
100&nbsp;80&nbsp;90
100&nbsp;-&nbsp;80</pre>
</pre>


______________________________________________________
ALIENS1||||||true||||||


<p>Little Johnny of Byteland has been kidnapped by aliens from the Andromeda galaxy! Johnny is currently locked in a small room inside an UFO, which has been parked in his backyard. Johnny is desparately trying to open the door of the room. He finds that the door asks a series of arithmetic questions: addition, subtraction, mutltiplication or exponentiation (the aliens dont know how to divide) of two given numbers. Johnny laughs aloud and thinks that it will be very easy to answer these questions and escape. But when he sees the questions, he realises that the aliens use base 42! Now Johnny has panicked and asks you to help him out.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p><br />The first line of the input has a number T (&lt;= 500), denoting the number of tests cases. T lines follows, each of the form A op B, where A and B are numbers in base 42 having upto 10000 digits without unnecessary zeros and op is either +, -, * or ^ denoting the operation to be performed. Base 42 numbers are denoted by:</p>
<p>'0' to '9' denotes 0 to 9</p>
<p>'A' to 'Z' denotes 10 to 35</p>
<p>'a' to 'f' denotes 36 to 41</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each test case, output one line: the result of the required&nbsp;operation in base 42 modulo LIFE<sub>42</sub>, without any unnessary zeros.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
11
a + a
e - A
91 * 89
AEIOU + abcd
A - B
b ^ 2
5 ^ 0
123 - 45
ABC * 10
6 - 6
0 ^ 0

<strong>Output:</strong>
1U
U
1W59
L6ZR
LIFD
WP
1
de
ABC0
0
1</pre>
<pre><strong><span style="font-size: large;">Warning: large Input/Output data, be careful with certain languages.</span></strong></pre>


______________________________________________________
CHEFFEB||||||true||||||


<p>
Recently Johnny have learned bogosort sorting algorithm. He thought that it is too ineffective. So he decided to improve it. As you may know this algorithm shuffles the sequence randomly until it is sorted. Johnny decided that we don't need to shuffle the whole sequence every time. If after the last shuffle several first elements end up in the right places we will fix them and don't shuffle those elements furthermore. We will do the same for the last elements if they are in the right places. For example, if the initial sequence is (3, 5, 1, 6, 4, 2) and after one shuffle Johnny gets (1, 2, 5, 4, 3, 6) he will fix 1, 2 and 6 and proceed with sorting (5, 4, 3) using the same algorithm. Johnny hopes that this optimization will significantly improve the algorithm. Help him calculate the expected amount of shuffles for the improved algorithm to sort the sequence of the first n natural numbers given that no elements are in the right places initially.</p>


*******InputConstraints*******

<p>The first line of input file is number t - the number of test cases. Each of the following t lines hold single number n - the number of elements in the sequence.


*******OutputConstraints*******

<p>For each test case output the expected amount of shuffles needed for the improved algorithm to sort the sequence of first n natural numbers in the form of irreducible fractions.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
6
10

<b>Output:</b>
2
1826/189
877318/35343

</pre>



______________________________________________________
CHEFMAR||||||true||||||


<p>Fat Tony and Fit Tony are playing the square painting game. There are n squares drawn on a plane. The sides of the squares are parallel to the axes. Squares don't intersect, but some of them can be inside others. In his turn a player can choose any square and paint it's internal area black. All squares inside the painted one are also painted black. The player can't paint the squares that were already painted. The loser is the player who can't make a turn. Determine the winner of the game if both players play optimally and Fat Tony's turn is the first. Also if Fat Tony can win the game determine which square he has to paint on his first turn in order to win. If there are many squares which guarantee victory to Fat Tony choose the one with the smallest number.


*******InputConstraints*******

<p>The first line of input contains t - the number of test cases. Each test case starts with n - the number of squares. Next n lines consist of three integers each x, y, a - the coordinates of the lowest left corner of the square and the length of it's sides. The squares in the input are numbered from 1 to n in the order they are listed.


*******OutputConstraints*******

<p>For each test case print "Fat x", where x - is the number of square which needs to be painted on the first turn in order to win (if there are many such square chose the one with the smallest number), if Fat Tony wins or "Fit" if Fit Tony wins.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5
0 0 10
15 15 1
1 1 3
5 5 1
14 14 3
2
1 1 1
3 3 1

<b>Output:</b>
Fat 2
Fit

</pre>



______________________________________________________
ITRIX_B||||||false||||||

<p><strong><span style="white-space: pre;"> </span></strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lucky Numbers are those numbers made up of prime digits ( 2, 3, 5, 7 ) only . Lucky Numbers contain zero or more copy of these four digits. Lucky sequence is the sequence made of lucky numbers written in ascending order. Print the n<sup>th</sup> number of the Lucky Sequence.</p>
<p>The first 20 numbers of the lucky sequence will be <strong>2</strong>,<strong>3</strong>,<strong>5</strong>,<strong>7</strong>,<strong>22</strong>,<strong>23</strong>,<strong>25</strong>,<strong>27</strong>,<strong>32</strong>,<strong>33</strong>,<strong>35</strong>,<strong>37</strong>,<strong>52</strong>,<strong>53</strong>,<strong>55</strong>,<strong>57</strong>,<strong>72</strong>,<strong>73</strong>,<strong>75</strong>,<strong>77</strong>&hellip;..</p>
<p><strong>Input Format:</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The First line of the input file contains t which indicate the number of the test cases .Each of the following &lsquo;t&rsquo;<strong> </strong>lines contains an integer <strong>&lsquo;n&rsquo; </strong>.</p>
<p>Constraints: t&lt;=2000; n&lt;=10^10( 10 &nbsp;power &nbsp;10)</p>
<p><strong>Output Format:</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output the n<sup>th</sup> element of the Lucky Sequence (one&nbsp; lucky number per line)</p>
<p><strong>Sample Input:</strong></p>
<p>4</p>
<p>1</p>
<p>3</p>
<p>10</p>
<p>18</p>
<p><strong>Sample Output:</strong></p>
<p>2</p>
<p>5</p>
<p>33</p>
<p>73</p>


______________________________________________________
ITRIX_C||||||false||||||

<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Everyone enjoyed <a href="http://www.codechef.com/BYTCDE11">BYTCDE11</a>. So the &ldquo;Maximum Profit &rdquo;problem is &ldquo;</p>
<p><em>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</em><em>Chakra is a young and dynamic entrepreneur, who is developing rapidly as a successful hotelier. He owns the Quickbyte chain of restaurants, 'M' of which are fully functional now. He divides each day into 'M' &nbsp;time slots. For each time slot 'j', in every restaurant 'i', there are Aij waiters and Bij customers. Being a quality conscious person, he wants each waiter to handle atmost one customer in a given time slot. Since he is really busy, in a day each restaurant is open only during one of the time slots. Since the hunger and demand for food varies during the day, the price which the&nbsp; customer is willing to pay varies, and is given by Cij for a restaurant 'i' during a time slot 'j'.Given the values of Aij, Bij and Cij, find the maximum profit which Chakra can make in a day . </em>&ldquo;..</p>
<p>Let&rsquo;s add a constraint&nbsp; &ldquo;<strong>Only one restaurant &nbsp;can be opened in a time slot</strong> &nbsp;&rdquo;.Also the number of restaurants and number of time slots will be equal (&lsquo;<strong>M</strong>&rsquo;).</p>
<p>&nbsp;</p>
<p><strong>Input Format:</strong></p>
<p>The first line of input contains an integer 't', denoting the number of test cases.</p>
<p>For each testcase, the first line contains an integer 'M'.</p>
<p>Each of the next 'M' lines contains 'M&rsquo; integers. The jth integer on the ith line denotes the value of Aij.</p>
<p>Each of the next 'M' lines contains 'M' integers. The jth integer on the ith line denotes the value of Bij</p>
<p>Each of the next 'M' lines contains 'M' integers. The jth integer on the ith line denotes the value of Cij</p>
<p><strong>Output Format:</strong></p>
<p>For each test case output one value, denoting the maximum profit which Chakra can make in a day.</p>
<p><strong>Example</strong></p>
<p><strong>Input:</strong></p>
<p>2</p>
<p>2</p>
<p>1 2</p>
<p>3 2</p>
<p>3 2</p>
<p>1 2</p>
<p>4 5</p>
<p>3 1</p>
<p>3</p>
<p>1 1 1</p>
<p>1 1 1</p>
<p>1 1 1</p>
<p>1 1 1</p>
<p>1 1 1</p>
<p>1 1 1</p>
<p>1000 33 10</p>
<p>75 1000 1000</p>
<p>100 50 39</p>
<p><strong>Output:</strong></p>
<p>13</p>
<p>2050</p>
<p><strong>Constraints:</strong></p>
<p>t &lt;= 50</p>
<p>1 &lt;= M&lt;= 15</p>
<p>1 &lt;= Aij, Bij &lt;= 5000</p>
<p>0 &lt;= Cij &lt;= 10^9</p>


______________________________________________________
ITRIX_D||||||false||||||

<p><strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong><strong>RishiKumar</strong> spends most of his time in solving Querying problems. When solving a 2D Querying problem he got exhausted and he needs the help of someone .yes he got!! .. <strong>Karthi</strong> &nbsp;is in search of his girl and &nbsp;asked Rishi whether he saw his girl on his way . Rishi replied he knew where she has gone but he will disclose the truth if Karthi solve this Bloody Querying problem. Help Karthi to solve this!!!!</p>
<p>Given two 2D arrays X and Y &nbsp;. Max size of X and Y is 500. (500 x 500)</p>
<p><strong>There are 3 Operations (Three Types of Queries)</strong></p>
<p>A)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong> 0</strong> &nbsp;x1 y1 x2 y2 ---Swaps the contents of the rectangle given by the points (x1,y1) and (x2,y2) &nbsp;of X and Y</p>
<p>B)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>1</strong> x1 y1 x2 y2 --- Print the sum of all elements in rectangle given by points (x1,y1) &nbsp;and (x2,y2) of the array X.</p>
<p>C)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>2</strong> x1 y1 x2 y2 -- - Print the sum of all elements in rectangle given by points (x1,y1)&nbsp; and (x2,y2) of the array Y.</p>
<p>(Points (x1,y1) and (x2,y2 ) inclusive)</p>
<p>(x1,y1) &ndash;&shy;Top Left point of the rectangle and(x2,y2) &ndash;Bottom right point of the rectangle</p>
<p><strong>Input Format:</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The first line of the input file contains N &ndash; Dimension of the array (It is clear that array is square array i.e. length=breadth) .The next N lines contains N integers per line separated by space which are the elements of array X .The next N lines contains N integers per line separated by space which are the elements of the array Y. The next line contains and integer Q &ndash;Total number of Queries&nbsp; ..Then each of the following Q lines contains the Queries (as per the above operations)&nbsp;</p>
<p><strong>Constraints</strong>: N &lt;=500 &nbsp;,&nbsp;0 &lt;=X<sub>ij</sub>,Y<sub>ij</sub> &lt;=10^6</p>
<p>Q&lt;=100000 (10 power 5)&nbsp;</p>
<p>Array indexing start from <strong>[1, 1] to [N, N];</strong></p>
<p><strong>Output Format:</strong></p>
<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; Print the result of each Query(There will be output &nbsp;for query type B and Query Type C)&nbsp; line by line.</p>
<p><strong>Sample Input:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong></p>
<p>5</p>
<p>1 2 3 4 5</p>
<p>6 7 8 9 0</p>
<p>1 2 3 4 5</p>
<p>6 7 8 9 0</p>
<p>9 1 2 3 4</p>
<p>1 1 1 1 1</p>
<p>1 1 1 1 1</p>
<p>1 1 1 1 1</p>
<p>1 1 1 1 1</p>
<p>1 1 1 1 1</p>
<p>4</p>
<p>1 1 1 4 4</p>
<p>0 1 1 4 4</p>
<p>1 1 1 4 4</p>
<p>2 1 1 4 4</p>
<p><strong>Sample Output:</strong></p>
<p>80</p>
<p>16</p>
<p>80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong></p>
<p><strong>Warning: Huge I/O, Make Your I/O &nbsp;Fast</strong></p>


______________________________________________________
ITRIX_E||||||false||||||

<p><strong>&nbsp;</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Subru and Shanmu are playing Chess. Shanmu wonder about <strong>queens</strong> . So he asked Subru the following question</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &ldquo;<em>How many ways are there to place a black and a white Queen on an M * N chessboard such that they do not attack each other?</em><em> </em><em>The queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally..</em>&rdquo;</p>
<p>Subru gave the answer in seconds for a given chess board of size M x N &nbsp;&nbsp;(M&lt;=N). Can you repeat the same with Your Code?</p>
<p><strong>Input Format:</strong></p>
<p>The first line contains the integer &nbsp;&ldquo;t&rdquo; which indicates the number&nbsp; of test cases. Each of the following <strong>t </strong>lines contains two integers M and N separated by spaces (M&lt;=N).</p>
<p><strong>Output Format:</strong></p>
<p>Output for each case consists of one line: The number of ways of placing a black and a white queen on a M x N chess board <strong>such that they do not attack each othe<em>r</em></strong>.</p>
<p><strong>Constraints: T&lt;=10000 , 2&lt;=M &lt;=10^10 (10 power 10 ) &nbsp;,2&lt;=N&lt;=10^10 (10 power 10). And M&lt;=N .</strong></p>
<p><strong>Sample Input:</strong></p>
<p>3</p>
<p>5 5</p>
<p>3 4</p>
<p>2 2</p>
<p><strong>Sample Output:</strong></p>
<p>280</p>
<p>40</p>
<p>0</p>


______________________________________________________
MAXLN||||||false||||||

<p><span id="internal-source-marker_0.8809220087714493" style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In this problem you will be given a half-circle. The half-circle&rsquo;s radius is r. You can take any point A on the half-circle and draw 2 lines from the point to the two sides of the diameter(AB and AC). Let the sum of square of one line&rsquo;s length and the other line&rsquo;s length is s.</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="http://www.spoj.plhttps://docs.google.com/drawings/image?authkey=CLnNvY8O&amp;id=sE2qJlnf5DUTr7awOFtMOwA&amp;w=346&amp;h=200&amp;rev=36&amp;ac=1" alt="" width="346px;" height="200px;" /><br /><br /><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Like in the figure s=AB^2+AC. And BC=2r.</span><br /><br /><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Now given r you have to find the maximum value of s. That is you have to find point A such that AB^2+AC is maximum.</span><br /><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Input:</span><br /><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">First line of the test case will be the number of test case T(1&lt;=T&lt;=1000) . Then T lines follows. On each line you will find a integer number r(1&lt;=r&lt;=1000000); each representing the radius of the half-circle.</span><br /><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Output:</span><br /><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">For each input line, print a line containing &ldquo;Case I: &rdquo;, where I is the test case number and the maximum value of s. Print 2 digit after decimal(Errors should be less then .01).</span><br /><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Sample Input:</span><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1</span><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1</span><br /><br /><span style="font-size: 12pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: bold; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Sample Output:</span><br /><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Case 1: 4.25</span></p>
<p><span style="font-size: 11pt; font-family: 'Courier New'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p>


______________________________________________________
GAME2||||||true||||||


<p>Goran and Stjepan play an interesting game. On the table between them, there is a sequence of N skyscrapers made of Lego bricks. All of them are made of equal bricks and each of them has a height, which equals the number of bricks in it.</p>
<p>Goran plays first; then Stjepan, then Goran, then Stjepan and so on. In each move, a player has to find the <strong>highest</strong> skyscraper in the sequence (if there's more than one, he chooses any of them) and reduces its height - that is, takes away an arbitrary (positive) number of bricks from it.</p>
<p>The winner of the game is the one who takes away the last brick. Equivalently, the loser of the game is the one who is not able to make a move.</p>
<p>Help Goran and tell him in how many ways he can play his first move, so that he can certainly win (no matter how Stjepan played). If Goran doesn't have a winning strategy at all, the number of ways is zero.</p>

*******InputConstraints*******

<p>In the first line of input, there is an integer T &le; 3, the number of test cases.</p>
<p>Then follow T blocks, each of them in two lines:</p>
<p>- N &le; 300 000, the number of skyscrapers in the sequence</p>
<p>- a sequence of N integers in the range [0, 10<sup>6</sup>]</p>

*******OutputConstraints*******

<p>For each of the T games, print the required number of ways.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<p>3</p><p>5</p><p>0 1 0 1 0</p><p>3</p><p>0 7 0</p><p>5</p><p>1 0 1 0 1</p>
<strong>Output:</strong>
0</pre>
<pre>1</pre>
<pre>3</pre>


______________________________________________________
CLOPPAIR||||||false||||||

<p>You are given N points on a plane and your task is to find a pair of points with the smallest euclidean distance between them.</p>
<p>All points will be unique and there is only one pair with the smallest distance.</p>

______________________________________________________
MAKETREE||||||true||||||


<p>A group of graduated students decided to establish a company; however, they don't agree on who is going to be who's boss.</p>
<p>Generally, one of the students will be the <strong>main</strong> boss, and each of the other students will have exactly one boss (and that boss, if he is not the main boss, will have a boss of his own too). Every boss will have a strictly greater salary than all of his subordinates - therefore, there are no cycles. Therefore, the hierarchy of the company can be represented as a rooted <strong>tree</strong>.</p>
<p>In order to agree on who is going to be who's boss, they've chosen K most successful students, and each of them has given a statement: I want to be the superior of him, him, and him (they could be successful or unsuccessful). And what does it mean to be a superior? It means to be the boss, or to be one of the boss' superiors (therefore, a superior of a student is not necessary his direct boss).</p>
<p>Help this immature company and create a hierarchy that will satisfy all of the successful students' wishes. A solution, not necessary unique, will exist in all of the test data.</p>

*******InputConstraints*******

<p>In the first line of input, read positive integers N (N &le; 100 000), total number of students, and K (K &lt; N), the number of successful students. All students are numbered 1..N, while the successful ones are numbered 1..K.</p>
<p>Then follow K lines. In A<sup>th</sup> of these lines, first read an integer W (the number of wishes of the student A, 1 &le; W &le; 10), and then W integers from the range [1, N] which denote students which student A wants to be superior to.</p>

*******OutputConstraints*******

<p>Output N integers. The A<sup>th</sup> of these integers should be 0 if student A is the main boss, and else it should represent the boss of the student A.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre><div style="background-color: transparent; font-family: 'Times New Roman'; font-size: medium;"><span id="internal-source-marker_0.2749345675110817" style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">4 2</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1 3</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2 3 4</span></div>

<strong>Output:</strong>
<div style="background-color: transparent; font-family: 'Times New Roman'; font-size: medium;"><span id="internal-source-marker_0.2749345675110817" style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">0</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2</span></div></pre>
<pre><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Input:</strong>
<div style="background-color: transparent; font-family: 'Times New Roman'; font-size: medium;"><span id="internal-source-marker_0.2749345675110817" style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">7 4</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2 2 3</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1 6</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1 7</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2 1 2</span></div>

<strong>Output:</strong>
<div style="background-color: transparent; font-family: 'Times New Roman'; font-size: medium;"><span id="internal-source-marker_0.2749345675110817" style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">4</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">1</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">0</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">4</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">2</span><br /><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000; background-color: transparent; font-weight: normal; font-style: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">3</span></div></pre>
</pre>


______________________________________________________
BFIT||||||false||||||

<p>You are given a sequence of N random values (s1, s2, s3, s4, . . . . , sN)<br />You have to find a function f(t) = a*t+b such that the Euclidean Distance between <br />the given sequence and the function values where t varies from 1 to N is minimum.</p>
<p>In effect, you have to minimize</p>
<p style="text-align: center;"><img src="http://www.spoj.pl/files/gif/f/e/5/fe51c3542db3f26f40202e10e8ef5b31/"/></p>
<p>Output the values a and b for each test case, rounded up to 4 decimal places.</p>
<p><strong>Input</strong></p>
<p>Line 1: T /* Number of test cases T &lt;= 1000 */<br />Line 2: N /* Number of values in first test case N &lt;= 10000 */<br />Line 3: s1 s2 s3 s4 &hellip; sN /* all values are less than 10000 */<br />.<br />.<br />.</p>
<h3>Output</h3>
<p>a b&nbsp; /* Output the values a and b rounded up to 4 decimal places for each test case */</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
3<br />3<br />1 1 1<br />3<br />1 2 3<br />3<br />1 3 1

<strong>Output:</strong>
0.0000 1.0000<br />1.0000 0.0000<br />0.0000 1.6667
</pre>


______________________________________________________
CHARLIE||||||true||||||


<p>Charlie works in a magical chocolate factory.&nbsp;Packets of its marzipan are made on conveyor belts.&nbsp;To make marzipan perfect, M conveyor belts are used, and the process is as follows.</p>
<p>Each of the M belts has N cells.&nbsp;Charlie first makes a few initial packets and puts them on the cells of the first belt (there may be zero or more packets in a particular cell).</p>
<p>Then the first belt generates a second belt such that each cell of the second belt, at the same time, counts the packets in some five cells of the first belt and creates that number of packets in itself.</p>
<p>Fox example, the first cell of the second belt sums the packets in the cells 1, 2, 3, 5, 9 of the first belt, the second cell of the second belt sums the packets in the cells 2, 3, 4, 5, 6 of the first belt and so on.</p>
<p>Then, from the second belt, a third belt is generated in the same manner, then the fourth from the third and so on until the M<sup>th</sup>.&nbsp;Since the number of packets on the belts usually increases, the number of packets in each cell is observed only modulo 10007.</p>
<p>You, as the winner of the golden ticket to the factory, are able to see how the M<sup>th</sup>&nbsp;belt looks like - that is, how many packets of marzipan there is in each cell. Charlie has also explained to you the production process and now you are wondering how first belt looked like.</p>

*******InputConstraints*******

<p><span title="Kliknite za alternativne prijevode">The first</span>&nbsp;<span title="Kliknite za alternativne prijevode">line</span>&nbsp;<span title="Kliknite za alternativne prijevode">of input contains</span>&nbsp;positive&nbsp;<span title="Kliknite za alternativne prijevode">integers</span>&nbsp;<span title="Kliknite za alternativne prijevode">N</span>&nbsp;<span title="Kliknite za alternativne prijevode">(</span><span title="Kliknite za alternativne prijevode">N</span>&nbsp;<span title="Kliknite za alternativne prijevode">&le;</span>&nbsp;<span title="Kliknite za alternativne prijevode">100)</span>&nbsp;<span title="Kliknite za alternativne prijevode">and</span>&nbsp;<span title="Kliknite za alternativne prijevode">M</span>&nbsp;<span title="Kliknite za alternativne prijevode">(</span><span title="Kliknite za alternativne prijevode">M</span>&nbsp;<span title="Kliknite za alternativne prijevode">&lt;&nbsp;</span><span title="Kliknite za alternativne prijevode">2<sup>31</sup>)</span><span title="Kliknite za alternativne prijevode">.</span></p>
<p>The next N lines describe the process of generating each new belt. In the A<sup>th</sup> of these lines there are five distinct integers from the interval [1, N], denoting the cells of a previous belt from which the packets are added to the A<sup>th</sup> cell of a new belt.</p>
<p><span title="Kliknite za alternativne prijevode">The next</span>&nbsp;<span title="Kliknite za alternativne prijevode">line</span>&nbsp;<span title="Kliknite za alternativne prijevode">contains N</span>&nbsp;<span title="Kliknite za alternativne prijevode">integers</span>&nbsp;<span title="Kliknite za alternativne prijevode">describing the</span>&nbsp;<span title="Kliknite za alternativne prijevode">state of</span>&nbsp;<span title="Kliknite za alternativne prijevode">the</span>&nbsp;<span title="Kliknite za alternativne prijevode">M<sup>th</sup> belt</span>&nbsp;<span title="Kliknite za alternativne prijevode">(</span><span title="Kliknite za alternativne prijevode">modulo</span>&nbsp;<span title="Kliknite za alternativne prijevode">10007</span><span title="Kliknite za alternativne prijevode">)</span><span title="Kliknite za alternativne prijevode">.</span></p>

*******OutputConstraints*******

<p><span title="Kliknite za alternativne prijevode">Print</span>&nbsp;<span title="Kliknite za alternativne prijevode">N</span>&nbsp;integers&nbsp;<span title="Kliknite za alternativne prijevode">describing the</span>&nbsp;<span title="Kliknite za alternativne prijevode">state of</span>&nbsp;<span title="Kliknite za alternativne prijevode">the first belt&nbsp;</span><span title="Kliknite za alternativne prijevode">(</span><span title="Kliknite za alternativne prijevode">modulo</span>&nbsp;<span title="Kliknite za alternativne prijevode">10007</span><span title="Kliknite za alternativne prijevode">)</span><span title="Kliknite za alternativne prijevode">.</span>&nbsp;A&nbsp;<strong>unique</strong>&nbsp;solution will exist in all of the test data.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-size: 12px; text-align: left; color: #000000; font-family: 'Courier New', Courier, monospace; margin: 8px;">6 3
1 2 3 4 5
1 2 3 4 6
1 2 3 5 6
1 2 4 5 6
1 3 4 5 6
2 3 4 5 6
13 12 12 12 14 12</pre>
<strong>Output:</strong>
<pre style="font-size: 12px; text-align: left; color: #000000; font-family: 'Courier New', Courier, monospace; margin: 8px;"><pre style="font-size: 12px; text-align: left; color: #000000; font-family: 'Courier New', Courier, monospace; margin: 8px;">1 0 0 0 2 0</pre>
<pre style="font-size: 12px; text-align: left; color: #000000; font-family: 'Courier New', Courier, monospace; margin: 8px;"><pre style="font-size: 12px; text-align: left; color: #000000; font-family: 'Courier New', Courier, monospace; margin: 8px;"><pre style="font-size: 10px; text-align: left; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; margin: 8px;"><strong>Explanation of the sample case: </strong>the process goes like this:&nbsp;</pre>
<pre style="font-size: 10px; text-align: left; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; margin: 8px;">(1 0 0 0 2 0) - (3 1 3 3 3 2) - (13 12 12 12 14 12)</pre>
</pre>
</pre>
</pre>
</pre>


______________________________________________________
CUBEND||||||true||||||


<p>Given any string of decimal digits, ending in 1, 3, 7 or 9,&nbsp; there is always a decimal <br />number, which when cubed has a decimal expansion ending in the original given digit <br />string. The number need never have more digits than the given digit string.&nbsp; <br />&nbsp;<br />Write a program, which takes as input a string of decimal digits ending in 1, 3, 7 or 9 <br />and finds a number of at most the same number of digits, which when cubed, ends in <br />the given digit string.</p>

*******InputConstraints*******

<p>The input begins with a line containing only the count of problem instances, nProb, as a <br />decimal integer, 1 &lt;= nProb &lt;= 100.&nbsp; This is followed by nProb lines, each of which <br />contains a string of between 1 and 10 decimal digits ending in 1, 3, 7 or 9.</p>

*******OutputConstraints*******

<p>For each problem instance, there should be one line of output consisting of the number, <br />which when cubed, ends in the given digit string. The number should be output as a <br />decimal integer with no leading spaces and no leading zeroes.&nbsp;</p>
<p>If there are many answers, the minimum should be chosen.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4 <br />123 <br />1234567 <br />435621 <br />9876543213
<strong>Output:</strong>
947 <br />2835223 <br />786941 <br />2916344917</pre>


______________________________________________________
NSUBSTR2||||||true||||||


<p>You are given a string T which consists of 40000 lowercase latin letters at most. You are also given some integers A, B and Q. You have to answer Q queries. For i-th query you are given a string S<sub><span style="font-size: xx-small;">i</span></sub> and you need to output how many times S<sub>i</sub> appears in T. Immediately after answering the current query you need to add ((A*ans+B) modulo 26+1)-th lowercase symbol of the English alphabet to the end of T where ans is the answer to this query.</p>

*******InputConstraints*******

<p>The first line of input contains a string T. The next line consists of three integers Q (1&lt;=Q&lt;=40000), A (0&lt;=A&lt;=27) and B (0&lt;=B&lt;=26). The following Q lines contain Q query strings, S<sub>i-2</sub> on i-th line. Input will not exceed 600 kb.</p>

*******OutputConstraints*******

<p>Output Q lines. Output the answer to the i-th query on the i-th line output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />aaaaa<br />2 0 0<br />a<br />aa<br /><br /><strong>Output:</strong><br />5<br />5<br /></pre>


______________________________________________________
WORD||||||true||||||


<p>Ivana made up a long word of N letters. Then she wrote down all K-letter-substrings of that word. For example, if the original word is BANANA and K=3, Ivana writes down the words BAN, ANA, NAN, ANA. The number of these words is, obviously, N-K+1.</p>
<p>Ivana sorted these words in lexicographicÂ order (in the given example, that would be ANA, ANA, BAN, NAN).</p>
<p>But the sad thing happened: Ivana forgot the original word! Your task is to reconstruct it. A unique solution will exist in all of the test data.</p>
<p>Constraints: 3 &#8804; N &#8804; 100 000, 2 &#8804; K &#8804; 15, K &lt; N.</p>

*******InputConstraints*******

<p>[integers N, K]</p>
<p>[N-K+1 words in lexicographicÂ order, each consisting of capital English letters]</p>

*******OutputConstraints*******

<p>[the required word]</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">6 3
ANA
ANA
BAN
NAN</pre>
<strong>Output:</strong></pre>
<pre>BANANA</pre>


______________________________________________________
MAIN8_C||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Shaky has N (1&lt;=N&lt;=50000) candy boxes each of them contains a non-zero number of candies (between 1 and 1000000000). Shakey want to distibute these candies</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">among his K (1&lt;=K&lt;=1000000000) IIIT-Delhi students. He want to distibute them in a way such that:</div>
<p>Shaky has N (1&lt;=N&lt;=50000) candy boxes each of them contains a non-zero number of candies (between 1 and 1000000000). Shakey want to distibute these candies&nbsp;among his K (1&lt;=K&lt;=1000000000) IIIT-Delhi students. He want to distibute them in a way such that:</p>
<p>1. All students get equal number of candies.</p>
<p>2. All the candies which a student get must be from a single box only.&nbsp;</p>
<p>As he want to make all of them happy so he want to give as many candies as possible. Help Shaky in finding out what is the &nbsp;maximum number of candies which a student can get.</p>

*******InputConstraints*******

<p>First line contains 1&lt;=T&lt;=20 the number of test cases. Then T test cases follow. First line of each test case contains N and K.&nbsp;Next line contains N integers, ith of which is the number of candies in ith box.</p>

*******OutputConstraints*******

<p>For each test case print the required answer in a seperate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 2 
3 1 4
4 1
3 2 3 9

<strong>Output:</strong>
3
9</pre>


______________________________________________________
MAIN8_D||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">One day Rohil was getting very bored so he was tossing an unbiased coin randomly. He observed that certain patterns (a sequence of Head and Tail) appear very frequently&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">while some other are very rare. Being a programmer he decided to code a solution which takes a pattern string as input and tells what is&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the expecetd number of times he will have to toss his coin to see that pattern. He wrote this program very quickly. Can you?</div>
<p>One day Rohil was getting very bored so he was tossing an unbiased coin randomly. He observed that certain patterns (a sequence of Head and Tail) appear very frequently&nbsp;while some other are very rare. Being a programmer he decided to code a solution which takes a pattern string as input and tells what is&nbsp;the expected number of times he will have to toss his coin to see that pattern. He wrote this program very quickly. Can you?</p>
<p><strong>Input</strong></p>
<p>First line contains ( 1&lt;=T&lt;=25 ) the number of test cases. Each of following T lines contains a pattern string of 'H' and 'T' only. H is for Head and T is for Tail.</p>
<p>|S| &lt;= 40</p>
<h3>Output</h3>
<p>For each test case print the output in a new line (it is guaranteed that answer will always be an integer and fits in 64 bit type).</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
3
H
HTHT
TTHTHTHTHTHHTHTHTHTTTTTTHTHHHHHTT

<strong>Output:</strong>
2
20
8589934598</pre>


______________________________________________________
MAIN8_E||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given two strins A and B. You have to find the length of the smallest substring of A, such that B is the subsequence of this substing.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Formally speaking</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">you have to find the lenght of smallest possible string S such that&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">S is the substring of A</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">B is the subsequence S</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Note: Subsequence of an string S is obtained by deletnig some (possibly none) of the characters from it. for example "ah" is the subsequecne of "aohol"</div>
<p>Given two strins A and B. You have to find the length of the smallest substring of A, such that B is the subsequence of this substing.&nbsp;</p>
<p>Formally speaking</p>
<p>you have to find the lenght of smallest possible string S such that&nbsp;</p>
<p>S is the substring of A</p>
<p>B is the subsequence S</p>
<p>Note: Subsequence of an string S is obtained by deletnig some (possibly none) of the characters from it. for example "ah" is the subsequecne of "aohol"</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases. Then T test cases follow, 2 lines for each test case, 1st contains A and 2nd contain B.</p>
<p>|A|&lt;=20000, |B|&lt;=100</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line. if no such substring exists print -1 instead.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
aaddddcckhssdd
acs
ghkkhllhjkhthkjjht
hh

<strong>Output:</strong>
10
3</pre>


______________________________________________________
SKIING||||||true||||||


<p>Believe it or not, the devices measuring time in alpine ski racing are not perfect. Instead of measuring the exact time, they measure an interval in which the ski racer finished the race (for example 53.42 sec - 53.45 sec).</p>
<p>The probability is distributed evenly on this interval. <span style="font-size: xx-small;">(More precisely, if we choose any two sub-intervals of equal length, the probability that the ski racer finished the race in each of these sub-intervals is equal. One can also say that each moment in the given interval has equal probability assigned to it, but this in fact says nothing since the probability for each moment is equal to zero (since there are infinitely many moments in the interval) no matter how we distribute the probability.)</span></p>
<p>And what if there are N ski racers? Then we have N intervals. Find the probability that the first ski racer on the list won the race (that is, finished the race with the minimal time).</p>

*******InputConstraints*******

<p>In the first line, there is an integer N (1 &le;&nbsp;N &le; 300).</p>
<p>In the next N lines, read the intervals assigned to the ski racers: two real numbers A<sub>i</sub>&nbsp;and B<sub>i</sub>&nbsp;in each line, representing the interval [Ai, Bi] of the i-th ski racer. (0 &lt; A<sub>i&nbsp;</sub>&lt; B<sub>i&nbsp;</sub>&lt; 1000)</p>

*******OutputConstraints*******

<p>Print the required probability. The absolute difference between yours and official solution may be&nbsp;at most 10<sup>-6</sup>.</p>

*******IOTestCases*******

<p><span style="font-weight: bold;"><span style="font-size: x-small;">input</span></span></p>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">2
1.000 5.000
2.500 3.000
</pre>
<p><span style="font-weight: bold;"><span style="font-size: x-small;">output</span></span></p>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">0.437500</pre>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;"><strong><br /></strong></pre>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;"><span style="font-size: small;"><strong>input</strong></span></pre>
<pre><pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">4
3.500 17.300
12.700 21.200
2.900 15.000
1.000 20.000
</pre>
<span style="font-weight: bold;"><span style="font-size: medium;">output</span></span>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">0.263541</pre>
</pre>


______________________________________________________
STRDIST2||||||true||||||


<p style="text-align: justify;">Prof.XYZ is an expert in sequence analysis. One such problem he works on is   bar-coding DNA sequences. The problem at hand is, given two DNA   sequences, find a way to compute their similarity efficiently. Formally a   DNA sequence is a string (S) of length N where each character is from a   set  of symbols derived from a vocabulary &sum;. We define the  m-perturbed set of a string S to be&nbsp; &Delta;(S,m)  which contains the set of  all strings S' obtained by changing atmost m  characters of S with  m&lt;=N. In other words, &Delta;(S,m) is the set of all strings S' such that  the hamming distance between S and S' (defined by H(S,S')) is atmost m.&nbsp;</p>
<p style="text-align: justify;">&nbsp;</p>
<p style="text-align: justify;">Prof.XYZ defines an order (m1,m2) similarity between two   N-length strings S1 and S2 to be the number of strings in the   intersection of &Delta;(S1,m1) and &Delta;(S2,m2). It is easy to see that the number   of strings in this intersection only depends on the hamming distance   between S1 and S2 (rather than the entire original strings S1 and S2). In other  words |&Delta;(S1,m1) &cap; &Delta;(S2,m2)| is only a function of N, the hamming distance  H(S1,S2), m1, m2 and the alphabet size |&sum;|. Your objective is to write a program that counts the size of  this  intersection given&nbsp; N, m1, m2, H(S1,S2) and&nbsp;  |&sum;|. Since the  answer can be very large, output the answer modulo 1000000007.</p>

*******InputConstraints*******

<p>The first line of the input contains the number of test cases T (atmost 50). Each testcase consists of 5 integers in order</p>
<p>&nbsp;(1) N : The length of each of the two strings. 1&lt;=N&lt;=1000</p>
<p>&nbsp;(2) m1 : The allowed number of changes in the first string. 0&lt;=m1 &lt;= min(100,N/2)</p>
<p>&nbsp;(3) m2 : The allowed number of changes in the second string. 0&lt;=m2 &lt;=min(100,N/2)</p>
<p>&nbsp;(4) H(S1,S2): The hamming distance between the two strings. 0&lt;=H &lt;=min(100,N/2)</p>
<p>&nbsp;(5) |&sum;| : The size of the vocabulary. 2&lt;=|&sum;|&lt;=1000000</p>

*******OutputConstraints*******

<p>For each test-case output the required number of strings in the intersection modulo 1000000007 in a seperate line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />3<br />6 1 2 2 2<br />10 2 2 3 5<br />20 3 4 5 7<br /><br /><br /><strong>Output:</strong><br />3<strong><strong><br /></strong></strong>24<strong><strong><br /></strong></strong>1925<strong><strong><br /><br />Explanation (for the first test case)</strong></strong></pre>
<p style="text-align: justify;">The length of each string is 6. We are allowed to perturb atmost one element from the first string and atmost two elements from the second. Since their hamming distance needs to be two, let S1=000000 be the first string and S2=000011 be the second. The set &Delta;(S1,1) is&nbsp; {000000,000001,000010,000100,001000,010000,100000}. Without enumerating &Delta;(S2,2), we can see that the only set of strings in &Delta;(S1,1) that can be obtained by perturbing atmost two elements in S2 are {000000,000001,000010}. Thus |&Delta;(S1,m1) &cap; &Delta;(S2,m2)| =3.</p>
<pre>&nbsp;</pre>


______________________________________________________
SILVER||||||true||||||


<p>A creditor wants a daily payment during n days from a poor miner in debt. Since the miner can not pay his daily obligation, he has negotiated with the creditor an alternative way, convenient for both parties, to pay his debt: the miner will give an equivalent of a 1&micro; (= 0.001mm) long piece of a silver bar as a guarantee towards the debt. The silver bar owned by the poor miner is initially n&micro; units long.</p>
<p>By the end of n days the miner would not have any more silver to give and the creditor would have received an amount of silver equivalent to that of the silver bar initially owned by the miner. By then, the miner expected to have enough money to pay the debt at the next day so that he would have back all his silver.</p>
<p>With this negotiation in mind, the miner has realized that it was not necessary to cut exactly 1&micro; silver piece from the bar everyday. For instance, at the third day he could give the creditor a 3&micro; silver piece, taking back the equivalent of a 2&micro; silver piece which the creditor should already have.</p>
<p>Since cutting the bar was rather laborious and time consuming, the miner wanted to mini-mize the number of cuts he needed to perform on his silver bar in order to make the daily silver deposits during the n days. Could you help him?</p>

*******InputConstraints*******

<p>Input consists of several cases, each one de&#64257;ned by a line containing a positive integer number n (representing the length in micras of the silver bar and the number of days of the amortization period). You may assume that 0 &lt; n &lt; 20000. The end of the input is recognized by a line with 0.</p>

*******OutputConstraints*******

<p>For each given case, output one line with a single number: the minimum number of cuts in which to cut a silver bar of length n&micro; to guarantee the debt during n days.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1<br />5<br />3<br />0<br /><strong>Output:</strong>
0<br />2<br />1 <br /></pre>


______________________________________________________
DOMINO1||||||true||||||


<p>You are given N domino tiles. Each tile is made of some number of squares (not necessarily two), and each square is coloured either white or black (we use the Croatian letters: B for white and C for black).</p>
<p>Find the longest chain that can be made of these tiles. Each tile can be used at most once and cannot be rotated (for example, BC cannot become CB). The chain is made by a common rule: in adjacent tiles, touching squares must be of the same colour.</p>

*******InputConstraints*******

<p>[N &le;&nbsp;100, the number of dominoes]</p>
<p>in the next N lines:</p>
<p>[a string of size between 1 and 100, representing the domino]</p>

*******OutputConstraints*******

<p>The length of the longest chain.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">4
CB
BCC
BBCC
BCBBC</pre>
<strong>Output:</strong>
<pre style="font-family: 'Courier New', Courier, monospace; font-size: 12px;">11</pre>
</pre>


______________________________________________________
DYNALCA||||||true||||||


<p>&nbsp;</p>
<p>A forest of rooted trees initially consists of N  (1 &le; N &le; 100,000) single-vertex trees. The vertices are numbered from 1 to N.</p>
<p>You must process the following queries, where (1 &le; A, B &le; N) :</p>
<ul>
<li><strong>link</strong> A B : add an edge from  vertex  A to B, making A a child of B, where initially A is a root vertex, A and B are in different trees.</li>
<li><strong>cut</strong> A : remove edge from A to its parent, where initially A is a non-root vertex.</li>
<li><strong>lca</strong> A, B : print the lowest common ancestor of A and B, where initially A and B are in the same tree.</li>
</ul>

*******InputConstraints*******

<p>The first line of input contains the number of initial single-vertex trees N and the number of queries M (1 &le; M &le; 100,000). The following M lines contain queries.</p>

*******OutputConstraints*******

<p>For each <strong>lca</strong> query output the lowest common ancestor (vertex number between 1 and N).</p>

*******IOTestCases*******

<pre><strong>Input:<br /></strong>5<br />9<br />lca 1 1<br />link 1 2<br />link 3 2<br />link 4 3<br />lca 1 4<br />lca 3 4<br />cut 4<br />link 5 3<br />lca 1 5<br /><br /><strong>Output:<br /></strong>1<br />2<br />3<br />2<br /><br /></pre>


______________________________________________________
SPOINTS||||||true||||||


<p>Numbers of black and white points are placed on a plane. Let&rsquo;s imagine that a straight line of in&#64257;nite length is drawn on the plane. When the line does not meet any of the points, the line divides these points into two groups. If the division by such a line results in one group consisting only of black points and the other consisting only of white points, we say that the <br />line &ldquo;separates black and white points&rdquo;.</p>
<p>Let&rsquo;s see examples in the figure below. In the leftmost example, you can easily &#64257;nd that the black and white points can be perfectly separated by the dashed line according to their colors. In the remaining three examples, there exists no such straight line that gives such a separation.</p>
<p><img style="border: 0px;" title="Example plane" src="../../../content/johnm91:plane.png" alt="Example plane" /></p>
<p>In this problem, given a set of points with their colors and positions, you are requested to decide whether there exists a straight line that separates black and white points.</p>

*******InputConstraints*******

<p>The input is a sequence of datasets, each of which is formatted as follows.</p>
<p><em>n m</em> <br /><em>x</em><sub>1</sub> <em>y</em><sub>1</sub> <br />. <br />. <br />. <br /><em>x</em><sub>n</sub> <em>y</em><sub>n</sub> <br /><em>x</em><sub>n+1</sub> <em>y</em><sub>n+1</sub> <br />. <br />. <br />. <br /><em>x</em><sub>n+m</sub> <em>y</em><sub>n+m</sub></p>
<p>The &#64257;rst line contains two positive integers separated by a single space; <strong>n</strong> is the number of black points, and <strong>m</strong> is the number of white points. They are less than or equal to 100. Then<strong> n</strong><em> +</em><strong> m</strong> lines representing the coordinates of points follow. Each line contains two integers x<sub>i</sub> and y<sub>i</sub> separated by a space, where (x<sub>i</sub> , y<sub>i</sub>) represents the x-coordinate and the y-coordinate of the i-th point. The color of the i-th point is black for <strong><em>1 &le; i &le; n</em></strong>, and is white for <strong>n + 1 &le; i &le; n + m</strong>. All the points have integral x- and y-coordinate values between 0 and 10000 inclusive. You can also assume that no two points have the same position. <br />The end of the input is indicated by a line containing two zeros separated by a space.</p>

*******OutputConstraints*******

<p>For each dataset, output &ldquo;YES&rdquo; if there exists a line satisfying the condition. If not, output &ldquo;NO&rdquo;. In either case, print it in one line for each input dataset.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 3 <br />100 700 <br />200 200 <br />600 600 <br />500 100 <br />500 300 <br />800 500 <br />3 3 <br />100 300 <br />400 600 <br />400 100 <br />600 400 <br />500 900 <br />300 300 <br />3 4 <br />300 300 <br />500 300 <br />400 600 <br />100 100 <br />200 900 <br />500 900 <br />800 100 <br />1 2 <br />300 300 <br />100 100 <br />500 500 <br />1 1<br />100 100
200 100 <br />2 2 <br />0 0 <br />500 700 <br />1000 1400 <br />1500 2100 <br />2 2 <br />0 0 <br />1000 1000 <br />1000 0 <br />0 1000 <br />3 3 <br />0 100 <br />4999 102 <br />10000 103 <br />5001 102 <br />10000 102 <br />0 101 <br />3 3 <br />100 100 <br />200 100 <br />100 200 <br />0 0 <br />400 0 <br />0 400 <br />3 3 <br />2813 1640 <br />2583 2892 <br />2967 1916 <br />541 3562 <br />9298 3686 <br />7443 7921 <br />0 0<br /><br /><strong>Output:</strong>
YES <br />NO <br />NO <br />NO <br />YES <br />YES <br />NO <br />NO <br />NO <br />YES
</pre>


______________________________________________________
SWJAM||||||true||||||


<p>Despite urging requests of the townspeople, the municipal o&#64259;ce cannot a&#64256;ord to improve many of the apparently de&#64257;cient city amenities under this recession. The city swimming pool is one of the typical examples. It has only two swimming lanes. The Municipal Fitness Agency, under this circumstances, settled usage rules so that the limited facilities can be utilized fully. <br />Two lanes are to be used for one-way swimming of di&#64256;erent directions. Swimmers are requested to start swimming in one of the lanes, from its one end to the other, and then change the lane to swim his/her way back. When he or she reaches the original starting end, he/she should return to his/her initial lane and starts swimming again.</p>
<p><br />Each swimmer has his/her own natural constant pace. Swimmers, however, are not permitted to pass other swimmers except at the ends of the pool; as the lanes are not wide enough, that might cause accidents. If a swimmer is blocked by a slower swimmer, he/she has to follow the slower swimmer at the slower pace until the end of the lane is reached. Note that the blocking swimmer&rsquo;s natural pace may be faster than the blocked swimmer; the blocking swimmer might also be blocked by another swimmer ahead, whose natural pace is slower than the blocked swimmer. Blocking would have taken place whether or not a faster swimmer was between them.</p>
<p>Swimmers can change their order if they reach the end of the lane simultaneously. They change their order so that ones with faster natural pace swim in front. When a group of two or more swimmers formed by a congestion reaches the end of the lane, they are considered to reach there simultaneously, and thus change their order there. The number of swimmers, their natural paces in times to swim from one end to the other, and the numbers of laps they plan to swim are given. Note that here one &ldquo;lap&rdquo; means swimming from one end to the other and then swimming back to the original end. Your task is to calculate <br />the time required for all the swimmers to &#64257;nish their plans. All the swimmers start from the same end of the pool at the same time, the faster swimmers in front. In solving this problem, you can ignore the sizes of swimmers&rsquo; bodies, and also ignore the time required to change the lanes and the order in a group of swimmers at an end of the lanes.</p>

*******InputConstraints*******

<p>The input is a sequence of datasets. Each dataset is formatted as follows.</p>
<p><em>n <br />t<sub>1</sub> c<sub>1</sub> <br />. . . <br />t<sub>n</sub> c<sub>n</sub> </em></p>
<p><br /><em>n</em> is an integer (1 &le; <em>n</em> &le; 50) that represents the number of swimmers. <em>t<sub>i</sub></em> and <em>c<sub>i</sub></em> are integers (1 &le; <em>t<sub>i</sub></em> &le; 300, 1 &le; <em>c<sub>i</sub></em> &le; 250) that represent the natural pace in times to swim from one end to the other and the number of planned laps for the i-th swimmer, respectively. <em>t<sub>i</sub></em> and <em>c<sub>i</sub></em> are separated by a space.</p>
<p>The end of the input is indicated by a line containing one zero.</p>

*******OutputConstraints*******

<p>For each dataset, output the time required for all the swimmers to &#64257;nish their plans in a line.</p>
<p>No extra characters should occur in the output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2 <br />10 30 <br />15 20 <br />2 <br />10 240 <br />15 160 <br />3 <br />2 6 <br />7 2 <br />8 2 <br />4 <br />2 4 <br />7 2 <br />8 2 <br />18 1 <br />0

<strong>Output:</strong>
600 <br />4800 <br />36 <br />40
</pre>


______________________________________________________
TWENTYQ||||||true||||||


<p>Consider a closed world and a set of features that are de&#64257;ned for all the objects in the world. Each feature can be answered with &ldquo;yes&rdquo; or &ldquo;no&rdquo;. Using those features, we can identify any object from the rest of the ob jects in the world. In other words, each object can be represented as a &#64257;xed-length sequence of booleans. Any object is di&#64256;erent from other objects by at least <br />one feature.</p>
<p>You would like to identify an object from others. For this purpose, you can ask a series of questions to someone who knows what the object is. Every question you can ask is about one of the features. He/she immediately answers each question with &ldquo;yes&rdquo; or &ldquo;no&rdquo; correctly. You can choose the next question after you get the answer to the previous question.</p>
<p>You kindly pay the answerer 100 yen as a tip for each question. Because you don&rsquo;t have surplus money, it is necessary to minimize the number of questions in the worst case. You don&rsquo;t know what is the correct answer, but fortunately know all the ob jects in the world. Therefore, you can plan an optimal strategy before you start questioning.</p>
<p>The problem you have to solve is: given a set of boolean-encoded objects, minimize the maximum number of questions by which every object in the set is identi&#64257;able.</p>

*******InputConstraints*******

<p>The input is a sequence of multiple datasets. Each dataset begins with a line which consists of two integers, <em>m</em> and <em>n</em>: the number of features, and the number of ob jects, respectively. You can assume 0 &lt; <em>m</em> &le; 11 and 0 &lt; <em>n</em> &le; 128. It is followed by n lines, each of which corresponds to an object. Each line includes a binary string of length m which represent the value (&ldquo;yes&rdquo; or &ldquo;no&rdquo;) of features. There are no two identical objects.</p>
<p>The end of the input is indicated by a line containing two zeros.&nbsp;</p>

*******OutputConstraints*******

<p>For each dataset, minimize the maximum number of questions by which every object is identi- <br />&#64257;able and output the result.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
8 1 <br />11010101 <br />11 4 <br />00111001100 <br />01001101011 <br />01010000011 <br />01100110001 <br />11 16 <br />01000101111 <br />01011000000 <br />01011111001 <br />01101101001 <br />01110010111 <br />01110100111 <br />10000001010 <br />10010001000 <br />10010110100 <br />10100010100 <br />10101010110 <br />10110100010 <br />11001010011 <br />11011001001 <br />11111000111 <br />11111011101 <br />11 12 <br />10000000000 <br />01000000000 <br />00100000000 <br />00010000000 <br />00001000000 <br />00000100000 <br />00000010000 <br />00000001000 <br />00000000100 <br />00000000010 <br />00000000001 <br />00000000000<br />9 32 <br />001000000 <br />000100000 <br />000010000 <br />000001000 <br />000000100 <br />000000010 <br />000000001<br />000000000 <br />011000000 <br />010100000 <br />010010000 <br />010001000 <br />010000100 <br />010000010 <br />010000001 <br />010000000 <br />101000000 <br />100100000 <br />100010000 <br />100001000 <br />100000100 <br />100000010 <br />100000001 <br />100000000 <br />111000000 <br />110100000 <br />110010000 <br />110001000 <br />110000100 <br />110000010 <br />110000001 <br />110000000 <br />0 0<br /><strong><br />Output:</strong>
0 <br />2 <br />4 <br />11 <br />9
</pre>


______________________________________________________
CUBARTWK||||||true||||||


<p><em>International Center for Picassonian Cubism</em> is a Spanish national museum of cubist artworks, dedicated to Pablo Picasso. The center held a competition for an artwork that will be displayed at the facade of the museum building.</p>
<p>The artwork is a collection of cubes that are piled up on the ground and is intended to amuse visitors, who will be curious how the shape of the collectionof cubes changes when it is seen from the front and the sides. The artwork is a collection of cubes with edges of 1 foot long and is built on a &#64258;at ground that is divided into a grid of unit squares, measuring 1 foot long on each side. Due to some technical reasons, cubes of the artwork must be either put on the ground, &#64257;tting into a unit square in the grid, or put on another cube in the way that the bottom face of the upper cube exactly meets the top face of the lower cube. No other way of putting cubes is possible.</p>
<p>You are a member of the judging committee responsible for selecting one out of a plenty of artwork proposals ubmitted to the competition. The decision is made primarily based on artistic quality but the cost for installing the artwork is another important factor. Your task is to investigate the installation cost for each proposal. The cost is proportional to the number of cubes, so you have to &#64257;gure out the minimum number of cubes needed for installation.</p>
<p>Each design proposal of an artwork consists of the front view and the side view (the view seen from the right-hand side), as shown in Figure 1.</p>
<p style="text-align: center;"><img title="Figure 1: An example of artwork proposal" src="../../../content/johnm91:figure1.png" alt="Figure 1: An example of artwork proposal" width="400" height="276" /></p>
<p>The front view (resp., the side view) indicates the maximum heights of piles of cubes for each column line (resp., row line) of the grid.</p>
<p>There are several ways to install this proposal of artwork, such as follows.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><img title="Explanation of Figure 1" src="../../../content/johnm91:figure1exp.png" alt="Explanation of Figure 1" /></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">In these &#64257;gures, the dotted lines on the ground indicate the grid lines. The left &#64257;gure makes use of 16 cubes, which is not optimal. That is, the artwork can be installed with a fewer number of cubes. Actually, the right one is optimal and only uses 13 cubes.</p>
<p style="text-align: left;"><br />Notice that swapping columns of cubes does not change the side view. Similary, swapping rows does not change the front view. Thus, such swaps do not change the costs of building the artworks.</p>
<p style="text-align: left;">For example, consider the artwork proposal given in Figure 2.</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: center;"><img title="Figure 2: Another example of artwork proposal" src="../../../content/johnm91:figure2.png" alt="Figure 2: Another example of artwork proposal" /></p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">An optimal installation of this proposal of artwork can be achieved with 13 cubes, as shown in the following &#64257;gure, which can be obtained by exchanging the rightmost two columns of the optimal installation of the artwork of Figure 1.</p>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: center;"><img title="Explanation" src="../../../content/johnm91:figure2exp.png" alt="Explanation" /></p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The input is a sequence of datasets. The end of the input is indicated by a line containing two<br />zeros separated by a space. Each dataset is formatted as follows.</p>
<p><br /><em>w d<br />h<sub>1</sub> h<sub>2</sub> &middot;&middot;&middot; h<sub>w</sub><br />h&prime;<sub>1</sub> h&prime;<sub>2</sub> &middot;&middot;&middot; h&prime;<sub>d</sub></em></p>
<p>The integers <em>w</em> and <em>d</em> separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 &le; <em>w</em> &le; 10 and 1&le; <em>d</em> &le; 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers <em>h<sub>i</sub></em> (1&le; <em>hi</em> &le; 20, 1&le;<em> i </em>&le;<em> w</em>) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front); The integers <em>h&prime;<sub>i</sub></em> (1&le; <em>h&prime;<sub>i</sub></em> &le; 20, 1&le; <em>i </em>&le; <em>d</em>) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).</p>

*******OutputConstraints*******

<p>For each dataset, output a line containing the minimum number of cubes. The output should not contain any other extra characters.</p>
<p>You can assume that for each dataset there is at least one way to install the artwork.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5 5<br />1 2 3 4 5<br />1 2 3 4 5<br />5 5<br />2 5 4 1 3<br />4 1 5 3 2<br />5 5<br />1 2 3 4 5<br />3 3 3 4 5<br />3 3<br />7 7 7<br />7 7 7<br />3 3<br />4 4 4<br />4 3 4<br />4 3<br />4 2 2 4<br />4 2 1<br />4 4<br />2 8 8 8<br />2 3 8 3<br />10 10<br />9 9 9 9 9 9 9 9 9 9<br />9 9 9 9 9 9 9 9 9 9<br />10 9<br />20 1 20 20 20 20 20 18 20 20<br />20 20 20 20 7 20 20 20 20<br />0 0<br /><br /><strong>Output:</strong><br />15<br />15<br />21<br />21<br />15<br />13<br />32<br />90<br />186<br /></pre>


______________________________________________________
MRAVOGRA||||||true||||||


<p>The hard working ants have built a town called Ant Town. They modeled their town after Manhattan, with H horizontal and V vertical streets which cross in V&times;O intersections. As ants don't like water, with the first raindrops comes chaos in Ant Town. Town authorities have placed umbrellas under which any number of ants can hide, but only on N intersections.</p>
<p>When the rain starts, each ant on an intersection starts running, <strong>using streets</strong>, to the nearest intersection with an umbrella. But, if an ant can choose from more than one such intersection, it panics and, not knowing where to go, <strong>stays on its starting intersection</strong> and gets wet. Town authorities use the name "wet intersections" for such starting intersections.</p>
<p>For example, if Ant Town has 10 horizontal and 10 vertical streets, and if there are 4 intersections with umbrellas, then the question marks in the figure represent "wet intersections":</p>
<p style="text-align: center;"><img src="http://www.spoj.pl../../../content/stjepang:mravograd.png" alt="" width="305" height="257" /></p>
<p><img src="http://www.spoj.pl../../embed/stjepang:mravograd.png" alt="" /></p>
<p style="text-align: center;"><em>Picture represents first example. We count streets from left to right from 1 to V and from down upwards from 1 to H.</em></p>
<p>Write a program which, given the locations of intersections with umbrellas, determines the <strong>number of "wet intersections</strong>" in Ant Town.</p>

*******InputConstraints*******

<p>The first line contains two integers H and V (1 &le; H, V &le; 30 000), the numbers of horizontal and vertical streets in Ant Town.</p>
<p>Horizontal streets are numbered 1 to H, vertical streets 1 to V.</p>
<p>The second line contains an integer N (1 &le; N &le; 10), the number of intersections with umbrellas.</p>
<p>Each of the following N lines contains two integer h and v, meaning that there is an umbrella on the crossing of horizontal street h and vertical street v. The locations of all umbrellas will be distinct.</p>

*******OutputConstraints*******

<p>Output the number of "wet intersections" in Ant Town.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />10 10<br />4<br />4 4<br />4 6<br />6 4<br />9 9<br /><br /><strong>Output:</strong><br />19<br /><strong><br /><br />Input:</strong><br />9 9<br />3<br />2 2<br />5 5<br />8 8<br /><br /><strong>Output:</strong><br />36<br /><strong><br /><br />Input:</strong><br />100 100<br />2<br />50 50<br />50 51<br /><br /><strong>Output:</strong><br />0<br /></pre>


______________________________________________________
OKRET||||||true||||||


<p>There is a text consisting of N characters. At each step Mirko chooses two numbers A and B and then reverses the subsequence consisting of characters between indices A and B, inclusive. Indices are 1-based.</p>
<p>Write a program that prints the final text after all operations are made.</p>

*******InputConstraints*******

<p>The first line of input contains the initial text of length N (1 &le; N &le; 2500000). It consists only of lowercase letters of the English alphabet.</p>
<p>The second line contains integer M (<span class="AM">1 </span>&le; M &le; 2500), the number of steps.</p>
<p>Each of the following M lines contain two integer A and B (1 &le; A &le; B &le; N).</p>

*******OutputConstraints*******

<p>In the first and only line output the final text.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />lukakuka<br />3<br />1 4<br />5 8<br />1 8<br /><br /><strong>Output:</strong><br />kukaluka<br /><strong><br /><br />Input:</strong><br />kukulelebodumepcele<br />5<br />3 7<br />10 12<br />2 10<br />5 18<br />5 15<br /><br /><strong>Output:</strong><br />kubeeludomepcelluke<br /></pre>


______________________________________________________
SEQ7||||||false||||||

<p><span style="font-size: small;">We have an infinite non-decreasing sequence A which is created as follows :</span></p>
<ul>
<li><span style="font-size: small;">A[1] = 1 and A[2] = 2.</span></li>
<li><span style="font-size: small;">A number i occurs A[i] times in the sequence.<br /></span></li>
</ul>
<p><span style="font-size: small;">First few terms in the sequence are: { 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7... }. Note that 3 occurs 2 times in the sequence, (because A[3] = 2).</span></p>
<p><span style="font-size: small;">Your task is to find the term A[n] for any given n, where 0 &lt; n &lt;= 1e13.<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Input</span></h3>
<p><span style="font-size: small;">First line contains t, the number of testcases. Each of the next t lines contains a number n.</span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Output</span></h3>
<p><span style="font-size: small;">For every case, print the nth term of the sequence.<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Example</span></h3>
<p style="text-align: left;"><span style="font-size: small;"><strong>Input:</strong><br />2<br />5<br />12</span></p>
<p><span style="font-size: small;">&nbsp;</span></p>
<p><span style="font-size: small;"><strong>Output:</strong><br />3<br />6</span></p>


______________________________________________________
LCDS||||||false||||||

<p><span style="font-size: small;">GIven two sequences of integers, your task is to find the longest common subsequence where every two adjacent values differ the same.</span></p>
<p><span style="font-size: small;">For example, if the sequences are A = {1, 5, 8, 3} and B = {3, 10, 5}, then the common subsequence with adjacent values same are A<sub>L </sub>= {1, 8, 3} and B<sub>L</sub> = {3, 10, 5} since the differences in A<sub>L </sub>are 7 and -5 which is also the same in B<sub>L</sub>.<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Input</span></h3>
<p><span style="font-size: small;">First line of the input contains N<sub>A</sub> and N<sub>B</sub>, the sizes of the sequences A and B. Then follow two lines, the sequences A and B. (1 &lt;= N<sub>A</sub>, N<sub>B</sub> &lt;= 1000 and all values in the sequence will lie between -1e9 and 1e9).<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Output</span></h3>
<p><span style="font-size: small;">Print one line, the length of the LCDS as described above.<br /></span></p>
<h3 style="text-align: center;"><span style="font-size: small;">Example</span></h3>
<p><span style="font-size: small;"><strong>Input:</strong><br />4 3<br />1 5 8 3<br />3 10 5<br /><br /><strong>Output:</strong><br />3<br /><br /><strong>Input:</strong><br />1 2<br />5<br />6 8<br /><br /><strong>Output:</strong><br />1</span></p>


______________________________________________________
AVARY||||||true||||||


<p>After Maryanna found the treasure buried by 27 pilots in a secret cave, she wanted to leave there immediately. Unfortunately, finding the door closed because of the overweight treasure she carried, she had to find out the password of the lock. She remembered someone had told her the password is an <em>N</em>-digit natural decimal integer (without extra leading zeroes), and the <em>N</em> least significant digits of any positive integral power of that integer is same as itself. She, being a smart girl, came up with all the possible answers within 1 minute. After a few times of tries, she escaped from that cave successfully. To show your intelligence you may solve the same task with your computer within only 10 seconds!</p>

*******InputConstraints*******

<p>The first line contains <strong>T</strong> (<strong>T</strong> &lt;= 1000), the number of test cases. <strong>T</strong> lines follow, each contains a single positive integer <em>N</em>(<em>N</em> &lt;= 500).</p>

*******OutputConstraints*******

<p>For each test case, output a single line, which should begin with the case number counting from 1, followed by all the possible passwords sorted in increasing order. If no such passwords exist, output <tt>Impossible</tt> instead. See the sample for more format details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
1

<strong>Output:</strong>
Case #1: 25 76
Case #2: 0 1 5 6
</pre>


______________________________________________________
BWORK||||||true||||||


<p align="left">Professor Z. always gives his students lots of boring homework. Last week, after explaining binary search trees (BSTs), he asked his students to draw a picture of BST according to the list of numbers inserted into the tree sequentially. Maryanna spent so much time playing the game "Starcraft II" that she can't finish her homework in time. She needs your help.</p>
<p align="left">&nbsp;<em>A binary search tree, which may sometimes also be called ordered or sorted binary tree, is a node-based binary tree data structure which has the following properties:</em></p>
<p align="left"><em>The left subtree of a node contains only nodes with keys less than the node's key.</em></p>
<p align="left"><em>The right subtree of a node contains only nodes with keys greater than the node's key.</em></p>
<p align="left"><em>Both the left and right subtrees must also be binary search trees.</em></p>
<p align="right"><em>--from Wikipedia</em>&nbsp;</p>
<p align="left">To draw a picture of BST, you may follow the rules listed below:&nbsp;</p>
<ol>
<li>The picture of a 1-node BST, whose size is 1*1, is a single 'o' (15th small Latin letter).</li>
<li>If a BST has a non-empty subtree, draw a single '|' just above the subtree's root, and a single '+' just above previous drawn '|'. Finally, in the row of '+', use the least number (including 0) of '-'s to connect '+' (denoting the left subtree and right subtree) and 'o' (denoting the parent node of the subtree)</li>
<li>The left subtree (if exists) must be drawn on the left side of its parent. Similarly, the right subtree (if exists) must be drawn on the right side of its parent. </li>
<li>The column of the BST's root must not contain any character from left subtree or right subtree.</li>
<li>Any column containing any characters from BST's left subtree must not contain any characters from BST's right subtree, and vice versa. That is, for a node of the BST, the picture of its left subtree and the picture of its right subtree do not share common columns in the picture of the whole tree.</li>
</ol>
<p align="left">&nbsp;The sample output may give a clear clarification about the format of the picture.</p>

*******InputConstraints*******

<p align="left">The first line contains <strong>T</strong> (<strong>T</strong> &lt;= 2500), the number of test cases. T lines follow. Each line contains a positive integer <strong>N</strong> (<strong>N</strong> &lt; 80), followed by <strong>N</strong> integers - a permutation of 1 to <strong>N</strong>. The permutation indicates the insert order for the BST.</p>

*******OutputConstraints*******

<p align="left">For each test case:</p>
<p align="left">Output the case number counting from 1 in the first line. The next lines should be the image described above without any trailing spaces. See the sample for more format details.</p>
<p align="left"><em>Notice that no trailing whitespaces after the last visible characters of each line are allowed.</em></p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
3 3 1 2
6 4 5 6 1 3 2
5 3 4 5 2 1

<strong>Output:</strong>
Case #1:
+-o
|
o+
 |
 o
Case #2:
+--o+
|   |
o-+ o+
  |  |
 +o  o
 |
 o
Case #3:
 +o+
 | |
+o o+
|   |
o   o
</pre>


______________________________________________________
COMPLETE||||||true||||||


<p align="left">Archaeologists have made a discovery on the Temple of Topology. The temple was once used as a place for ritual ceremony thousands of years ago. Among the relics that were unearthed, a scroll of parchment raised the interest of scientists. The parchment contained many numbers written in ancient symbols.</p>
<p align="left">By decrypting the words carved on a stone, scientists know that these numbers form an interesting set of integers satisfying the following two properties:</p>
<p align="left">1. Bitwise AND any number of integers from the set result in an integer in that set again.</p>
<p align="left">2. Bitwise OR any number of integers from the set result in an integer in that set again.</p>
<p align="left">As the parchment is extremely old, some part of it were broken and the numbers were lost. Now you job is to complete the original set from the remaining integers such that the size of the set is as small as possible.</p>

*******InputConstraints*******

<p align="left">The input contains several test cases. The total number of test cases is less than 1100. Each test case begins with a line containing an integer <strong>n</strong> (<strong>n</strong> &gt; 1). The following line contains <strong>n</strong> integers <strong>a<sub>i</sub></strong> (0 &lt;= <strong>a<sub>i</sub></strong> &lt; 2<sup>16</sup>), the remaining integers on the parchment. The integers are distinct.</p>

*******OutputConstraints*******

<p align="left">For each test case, output one line containing a single integer, the minimal number of additional integers to make the set complete. If these numbers are already a complete set, print 0.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
5
0 1 3 5 7
2
2 4
3
3 7 11
3
1 2 4

<strong>Output:</strong>
Case #1: 0
Case #2: 2
Case #3: 1
Case #4: 5
</pre>


______________________________________________________
DETECT||||||true||||||


<p>E.T. Inc. employs Maryanna as alien signal researcher. To identify possible alien signals and background noise, she develops a method to evaluate the signals she has already received. The signal sent by E.T is more likely regularly alternative.</p>
<p>Received signals can be presented by a string of small latin letters 'a' to 'z' whose length is <strong>N</strong>. For each <em>X</em> between 1 and <strong>N</strong> inclusive, she wants you to find out the maximum length of the substring which can be written as a concatenation of <em>X</em> same strings. For clarification, a substring is a consecutive part of the original string.</p>

*******InputConstraints*******

<p>The first line contains <strong>T</strong>, the number of test cases (<strong>T</strong> &lt;= 200). Most of the test cases are relatively small. <strong>T</strong> lines follow, each contains a string of only small latin letters 'a' - 'z', whose length <strong>N</strong> is less than 1000, without any leading or trailing whitespaces.</p>

*******OutputConstraints*******

<p>For each test case, output a single line, which should begin with the case number counting from 1, followed by <strong>N</strong> integers. The <em>X</em>-th (1-based) of them should be the maximum length of the substring which can be written as a concatenation of <em>X</em> same strings. If that substring doesn't exist, output 0 instead. See the sample for more format details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
arisetocrat
noonnoonnoon

<strong>Output:</strong>
Case #1: 11 0 0 0 0 0 0 0 0 0 0
Case #2: 12 8 12 0 0 0 0 0 0 0 0 0
</pre>

______________________________________________________
TENNIS||||||true||||||


<p>Maryanna and Lucyanna play tennis every Sunday afternoon since 10 years ago.
<p>A tennis match is determined through 5 sets. Typically the first player to win 3 sets wins the match. A set consists of games, and games, in turn, consist of points.
<p>A game consists of a sequence of points played with the same player serving. A game is won by the first player to have won at least four points in total and at least two points more than the opponent. The running score of each game is described in a manner peculiar to tennis: scores from zero to three points are described as "love", "fifteen", "thirty", and "forty" respectively. If at least three points have been scored by each player, and the scores are equal, the score is "deuce". If at least three points have been scored by each side and a player has one more point than his opponent, the score of the game is "advantage" for the player in the lead. During informal games, "advantage" can also be called "ad in" or "ad out", depending on whether the serving player or receiving player is ahead, respectively.
<p>A set consists of a sequence of games played with service alternating between games, ending when the count of games won meets certain criteria. Typically, a player wins a set by winning at least six games and at least two games more than the opponent.
<p>The first servers of two consecutive sets are different.
<p>Maryanna has found out when she is the server, her winning probability of this point is <b>M</b>%; otherwise, <b>Y</b>%. She wants to know her winning probability of the whole match if she serves first.</p>

*******InputConstraints*******

<p>The first line contains <b>T</b> (<b>T</b> <= 10000), the number of test cases. <b>T</b> lines follow. Each line contains two space-separated positive integers <b>M</b>, <b>Y</b> (0 < <b>M</b>, <b>Y</b> < 100).

*******OutputConstraints*******

<p>For each test case, output a single line, which should begin with the case number counting from 1, followed by Maryanna's winning percentage accurate to 4 decimal places. See the sample for more format details.</p>

*******IOTestCases*******

<pre><b>Input:</b>
2
50 50
51 51

<b>Output:</b> 
Case #1: 50.0000%
Case #2: 63.5654%
</pre>


______________________________________________________
MAHJONG||||||false||||||

<p>Click <a href="http://www.spoj.pl/content/john_jones:mahjong.pdf">here</a> to get the PDF version of this problem. It seems that the style of this problem is the same as problem TRACTOR added by me about 2 years ago, but this one is far easier than that one. This problem is solved by a team at 286 minutes after the read-time contest start.</p>


______________________________________________________
FEELUCK||||||true||||||


<p>Google is one of the most famous Internet search engines which hosts and develops a number of Internet-based services and products. On its search engine website, an interesting button "I'm feeling lucky"attracts our eyes. This feature could allow the user skip the search result page and goes directly to the first ranked page. Amazing! It saves a lot of time.</p>
<p>The question is, when one types some keywords and presses "I'm feeling lucky" button, which web page will appear? Google does a lot and comes up with excellent approaches to deal with it. In this simplified problem, let us just consider that Google assigns every web page an integer-valued relevance. The most related page will be chosen. If there is a tie, all the pages with the highest relevance are possible to be chosen.</p>
<p>Your task is simple, given 10 web pages and their relevance. Just pick out all the possible candidates which will be served to the user when "I'm feeling lucky".</p>

*******InputConstraints*******

<p>The input contains multiple test cases. The number of test cases is in the first line of the input file.</p>
<p>For each test case, there are 10 lines, describing the web page and the relevance. Each line contains a character string without any blank characters denoting the URL of this web page and an integer <strong>V<sub>i</sub></strong> denoting the relevance of this web page. The length of the URL is between 1 and 100 inclusively. (1 &lt;= <strong>V<sub>i</sub></strong> &lt;= 100)</p>

*******OutputConstraints*******

<p>For each test case, output several lines which are the URLs of the web pages which are possible to be chosen. The order of the URLs is the same as the input.</p>
<p>Please look at the sample output for further information of output format.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
www.youtube.com 1
www.google.com 2
www.google.com.hk 3
www.alibaba.com 10
www.taobao.com 5
www.bad.com 10
www.good.com 7
www.fudan.edu.cn 8
www.university.edu.cn 9
acm.university.edu.cn 10
www.youtube.com 1
www.google.com 2
www.google.com.hk 3
www.alibaba.com 11
www.taobao.com 5
www.bad.com 10
www.good.com 7
www.fudan.edu.cn 8
acm.university.edu.cn 9
acm.university.edu.cn 10

<strong>Output:</strong>
Case #1:
www.alibaba.com
www.bad.com
acm.university.edu.cn
Case #2:
www.alibaba.com
</pre>


______________________________________________________
HERBICID||||||false||||||

<p>Professor Z. has a courtyard beside his house. In the past, he loved to clean it and prune the flowers in his yard. However, with the JavaFF class taught by Professor Z. being offered, he indulged in assigning boring homework to the students and had no time for caring his yard. Consequently, weeds begin to grow up and then his yard becomes overgrown.</p>
<p>In the last weekend, after Professor Z. assigned a mass of boring homework again, he suddenly brought his yard to mind. And after he saw the weedy ground, he decided to remove the weeds. But he did not have much time to deal with the garden&rsquo;s problem because of the uncompleted plans of further boring homework in the next JavaFF class.&nbsp; He sprayed herbicide on the ground optionally and, strangely, herbicide was sprayed as several simple polygons on the ground. In order to determine whether he should continue his work or not, Professor Z. needed to know how many weeds were covered by the herbicide. Notice that we assume that the weeds were not killed by the herbicide applied before. In the other words, a single weed can be counted several times in different polygon of herbicide.</p>
<p>It seems that counting this number is quite a tough job. Then he asked Maryanna, one of his students in JavaFF class, for help. But Maryanna has no time because her boring homework had never been finished. Please help her!</p>

______________________________________________________
IMITATE||||||true||||||


<p>Iris is a student of ethology studying the animal behavior. She is interested by the imitation behavior of animals. Imitation is an advanced behavior whereby an individual observes and replicates another&rsquo;s.</p>
<p>Iris is such a good researcher that she builds a mathematical model to describe the body figure of animals. She describes the body as a number of joints. And the figure or the status of animal body can be denoted as a set of ordered pairs of two different joints. To study the imitation of the animals, Iris defines the correlation of joints. She defines the correlation as the transitive closure of the ordered pairs of body status with its reflexive pairs eliminated. That is to say, the correlation is an anti-reflexive relation. In this case, we could say that one body status is imitating the other one when the correlations of both body statuses are the same.</p>
<p>For example, for the joint set {J1, J2, J3}. The first body status contains the ordered pair (J1, J2), (J2, J3). And the second body status contains the ordered pair (J1, J2), (J2, J3), (J1, J3). We could say that the first body status is imitating the other one because both of the correlation sets are (J1, J2), (J2, J3), (J1, J3) since the definition of the correlation is the transitive closure of body status.</p>
<p>For a given body status, that is, a given set of ordered pairs of joints, Iris want to get another body status, which is imitating the given one. At the same time, the desired body status must contain the minimum number of ordered pairs or the maximum number of ordered pairs. Your task is to calculate the minimum number and the maximum number.</p>

*******InputConstraints*******

<p>There are several test cases. The first line of the input contains a single integer denoting the number of test cases. There are about 100 test cases, but 90% of them are relatively small.</p>
<p>For each test case, the first line contains two integers <strong>N</strong> and <strong>M</strong> where <strong>N</strong> is the number of joints of both the given body status and the desired body status, <strong>M</strong> is the number of ordered pairs of the given body status. (1 &lt;= <strong>N</strong> &lt;= 1000, 0 &lt;= <strong>M</strong> &lt;= 10000)</p>
<p>Next <strong>M</strong> lines, each line denoting an ordered pair (<strong>X<sub>i</sub></strong>, <strong>Y<sub>i</sub></strong>). The <strong>X<sub>i</sub></strong> and <strong>Y<sub>i</sub></strong> are integers between 1 and N. Note that we consider the joints as the number between 1 and N.</p>

*******OutputConstraints*******

<p>For each test case, output two integers denoting the minimum and maximum number of ordered pairs of the desired set. Two integers are separated by a single space.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
3 3
1 2
2 3
1 3
3 3
1 2
2 3
3 1
9 9
1 2
2 3
3 1
4 5
5 6
6 4
7 8
8 9
9 7

<strong>Output:</strong>
Case #1: 2 3
Case #2: 3 6
Case #3: 9 18
</pre>

______________________________________________________
JUICE||||||true||||||


<p>Jerry loses himself in the interesting game: Fruit Ninja. Fruit Ninja is a game of iPhone and iPad in which the players cut the fruits coming from the bottom of the screen and gain the bonus from cutting more than two fruits with a single slice. Once a fruit is cut, it breaks into small pieces and cannot be cut any more.</p>
<p>After months of training, he becomes pro of this game. Actually, he can cut all the fruits on the screen at any time. Jerry also has a bad habit that he has no willing to leave some fruits for the future cutting. In the other words, after Jerry cuts the fruits, all the fruits on the screen breaks and no one left. That is why all his friends call him <em>Juice Extractor</em>.</p>
<p>Now he only consider about the bonus, when he cuts more than two fruits, he can gain some bonus scores as same as the number of fruits he slice at that time. For example, if Jerry cuts 4 fruits with a single slice, he can get 4 scores from this slice.</p>
<p>After Jerry gets the fruit schedule, he knows the appearing time and the disappearing time for every single fruit. He can only cut a fruit into pieces between its appearing time and disappearing time inclusive. He wants to know the maximum possible bonus scores he can receive.</p>

*******InputConstraints*******

<p>There are several test cases; the first line of the input contains a single integer <strong>T</strong>, denoting the number of the test cases. (<strong>T</strong> &lt;= 200)</p>
<p>For each test case, the first line contains an integer <strong>N</strong>, denoting the total number of fruits. (1 &lt;= <strong>N</strong> &lt;= 1000)</p>
<p>The next <strong>N</strong> lines, each line describe a fruit. For each line, there are two integers <strong>X<sub>i</sub></strong> and <strong>Y<sub>i</sub></strong>, where <strong>X<sub>i</sub></strong> is the appearing time of the fruit and <strong>Y<sub>i</sub></strong> is the disappearing time of this fruit. (0 &lt;= <strong>X<sub>i</sub></strong> &lt;= <strong>Y<sub>i</sub></strong> &lt;= 1000000000)</p>

*******OutputConstraints*******

<p>For each test case, output a single integer denoting the maximum scores that Jerry could possibly gain. See the sample for further details.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
10
1 10
2 11
3 12
4 13
13 14
14 15
13 19
20 22
21 23
22 24

<strong>Output:</strong>
Case #1: 10
</pre>


______________________________________________________
PRATA||||||true||||||


<p>IEEE is having its AGM next week and the president wants to serve cheese prata after the meeting. The subcommittee members are asked to go to food connection and get P(P&lt;=1000) pratas packed for the function. The stall has L cooks(L&lt;=50) and each cook has a rank R(1&lt;=R&lt;=8). A cook with a rank R can cook 1 prata in the first R minutes 1 more prata in the next 2R minutes, 1 more prata in 3R minutes and so on(he can only cook a complete prata) ( For example if a cook is ranked 2.. he will cook one prata in 2 minutes one more prata in the next 4 mins an one more in the next 6 minutes hence in total 12 minutes he cooks 3 pratas in 13 minutes also he can cook only 3 pratas as he does not have enough time for the 4th prata). The webmaster wants to know the minimum time to get the order done. Please write a program to help him out.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line tells the number of test cases. Each test case consist of 2 lines. In the first line of the test case we have P the number of prata ordered. In the next line the first integer denotes the number of cooks L and L integers follow in the same line each denoting the rank of a cook.</p>

*******OutputConstraints*******

<p>Print an integer which tells the number of minutes needed to get the order done.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />3<br />10<br />4 1 2 3 4<br />8<br />1 1<br />8<br />8 1 1 1 1 1 1 1 1<br /><strong>Output:</strong><br />12<br />36<br />1</pre>


______________________________________________________
GNUM||||||true||||||


<p>There was an application "Guess number!" in one of the popular social network recently. On each of the levels of this offered game it is necessary to define the secret number with some information provided.
<p>In particular, one of the most difficult levels consists in  guessing the rational number <i>x</i> (0 < <i>x</i> < 1). It is known, that the result of multiplication of this number by natural number <i>k</i> is exactly one alteration: the <i>i</i>-th and <i>j</i>-th digits after a decimal point are exchanged by each other.
<p>As the number in front of decimal point isn't changed, the inequality
0 < <i>kx</i> < 1 is executed. Initially the numbers after a decimal point can be infinite. 
<p>Your problem consists in writing the program which will define value <i>x</i> on numbers <i>i</i>, <i>j</i>, <i>k</i>.


*******InputConstraints*******

<p>The first input line contains in one integer <i>t</i> (about 1000). Each of the following <i>t</i>&#8201; lines contains three numbers: <i>i</i>, <i>j</i>, <i>k</i> (1 &#8804; <i>i</i> < <i>j</i> &#8804; 1000; 2 &#8804; <i>k</i> &#8804; 10<sup>9</sup>).


*******OutputConstraints*******

<p>If the required number exists, output consists in two integers &#8212; numerator and denominator of a non-reducible fraction setting required number. Otherwise output is "NO SOLUTION".


*******IOTestCases*******


<pre>
<b>Input:</b>

1
1 4 13

<b>Output:</b>

2997 40000
</pre>



______________________________________________________
DOUTI||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In 45 BC a standard calendar was adopted by Julius Caesar - each year would have 365 days, and every fourth year have an extra day - the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Write a program that will read in a date, determine which style it is in, and then convert it to the other style.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Input will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single '#'.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden; text-align: justify;">Output will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk ('*') immediately after the day of the month (with no intervening space). Note that this will not apply to the input.</div>
<p style="text-align: justify;">&nbsp;</p>
<div style="text-align: justify;">In 45 BC a standard calendar was adopted by Julius Caesar - each year would have 365 days, and every fourth year have an extra day - the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles.</div>
<div style="text-align: justify;">Write a program that will read in a date, determine which style it is in, and then convert it to the other style.</div>
<div style="text-align: justify;"></div>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>
<div style="text-align: justify;">Input will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single '#'.</div>
<div></div>
</p>

*******OutputConstraints*******

<p>
<div style="text-align: justify;">Output will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk ('*') immediately after the day of the month (with no intervening space). Note that this will not apply to the input.</div>
<div></div>
</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

Saturday 29 August 1992
Saturday 16 August 1992
Wednesday 19 December 1991
Monday 1 January 1900
#</pre>
<pre>
<strong>Output:</strong></pre>
<pre>Saturday 16* August 1992
Saturday 29 August 1992
Wednesday 1 January 1992
Monday 20* December 1899</pre>


______________________________________________________
POCRI||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">During the power crisis in New Zealand this winter (caused by a shortage of rain and hence low levels in the hydro dams), a contingency scheme was developed to turn off the power to areas of the country in a systematic, totally fair, manner. The country was divided up into N regions (Auckland was region number 1, and Wellington number 13). A number, m, would be picked 'at random', and the power would first be turned off in region 1 (clearly the fairest starting point) and then in every m'th region after that, wrapping around to 1 after N, and ignoring regions already turned off. For example, if N = 17 and m = 5, power would be turned off to the regions in the order:1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The problem is that it is clearly fairest to turn off Wellington last (after all, that is where the Electricity headquarters are), so for a given N, the 'random' number m needs to be carefully chosen so that region 13 is the last region selected.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Write a program that will read in the number of regions and then determine the smallest number m that will ensure that Wellington (region 13) can function while the rest of the country is blacked out.</div>
<p>&nbsp;</p>
<div style="text-align: justify;">During the power crisis in New Zealand this winter (caused by a shortage of rain and hence low levels in the hydro dams), a contingency scheme was developed to turn off the power to areas of the country in a systematic, totally fair, manner. The country was divided up into N regions (Auckland was region number 1, and Wellington number 13). A number, m, would be picked 'at random', and the power would first be turned off in region 1 (clearly the fairest starting point) and then in every m'th region after that, wrapping around to 1 after N, and ignoring regions already turned off. For example, if N = 17 and m = 5, power would be turned off to the regions in the order:1,6,11,16,5,12,2,9,17,10,4,15,14,3,8,13,7.</div>
<div style="text-align: justify;">The problem is that it is clearly fairest to turn off Wellington last (after all, that is where the Electricity headquarters are), so for a given N, the 'random' number m needs to be carefully chosen so that region 13 is the last region selected.</div>
<div style="text-align: justify;">Write a program that will read in the number of regions and then determine the smallest number m that will ensure that Wellington (region 13) can function while the rest of the country is blacked out.</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>Input will consist of a series of lines, each line containing the number of regions (N) with 13 &lt;= N &lt; 100. The file will be terminated by a line consisting of a single 0.</p>

*******OutputConstraints*******

<p>Output will consist of a series of lines, one for each line of the input. Each line will consist of the number m according to the above scheme.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
17
0

<strong>Output:</strong>
7</pre>


______________________________________________________
PATT||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">A regular expression is a string which contains some normal characters and some meta characters.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The meta characters include,</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">. means any character</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">[c1 &minus; c2]means any character between c1 and c2 (c1 and c2 are two characters)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">[ &circ; c1 &minus; c2] means any character not between c1 and c2 (c1 and c2 are two characters)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"> means the character before it can occur any times</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">+ means the character before it can occur any times but at least one times</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">\ means any character follow should be treated as normal character</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You are to write a program to find the leftmost substring of a given string, so that the substring</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">can match a given regular expression. If there are many substrings of the given string can match</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">the regular expression, and the left positions of these substrings are same, we prefer the longest</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">one.</div>
<p>&nbsp;</p>
<div style="text-align: justify; ">A regular expression is a string which contains some normal characters and some meta characters.</div>
<div style="text-align: justify; ">The meta characters include,</div>
<div style="text-align: justify; ">. means any character</div>
<div style="text-align: justify; ">[c1 &minus; c2]means any character between c1 and c2 (c1 and c2 are two characters)</div>
<div style="text-align: justify; ">[ &circ; c1 &minus; c2] means any character not between c1 and c2 (c1 and c2 are two characters)</div>
<div style="text-align: justify; "> means the character before it can occur any times</div>
<div style="text-align: justify; ">+ means the character before it can occur any times but at least one times</div>
<div style="text-align: justify; ">\ means any character follow should be treated as normal character</div>
<div style="text-align: justify; ">You are to write a program to find the leftmost substring of a given string, so that the substring&nbsp;can match a given regular expression. If there are many substrings of the given string can match&nbsp;the regular expression, and the left positions of these substrings are same, we prefer the longest&nbsp;one.</div>
<div style="text-align: justify; "></div>

*******InputConstraints*******

<div style="text-align: justify;">Every two lines of the input is a pattern-matching problem. The first line is a regular expression,&nbsp;and the second line is the string to be matched. Any line will be no more than 80 character. A line&nbsp;with only an eEvery two lines of the input is a pattern-matching problem. The first line is a regular expression,&nbsp;and the second line is the string to be matched. Any line will be no more than 80 character. A line&nbsp;with only an end will terminate the input.nd will terminate the input.</div>

*******OutputConstraints*******

<p>&nbsp;</p>
<div style="text-align: justify;">For each matching problem, you should give an answer in one line. This line contains the string to&nbsp;be matched, but the leftmost substring that can match the regular expression should be bracketed.&nbsp;If no substring matches the regular expression, print the input string.</div>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong>

.*
asdf
f.*d.
sefdfsde
[0-9]+
asd345dsf
[^\*-\*]
**asdf**fasd
b[a-z]*r[s-u]*
abcdefghijklmnopqrstuvwxyz
[T-F]
dfkgjf
end</pre>
<pre style="text-align: justify;">
<strong>Output:</strong></pre>
<pre style="text-align: justify;">
(asdf)
se(fdfsde)
asd(345)dsf
**(a)sdf**fasd
a(bcdefghijklmnopqrstu)vwxyz
dfkgjf</pre>
<pre style="text-align: justify;"></pre>


______________________________________________________
PROBOR||||||true||||||


<p>Everyone knows OR operation. Let us define new operation which we will call Probablistic OR. We will denote this operation as #. For given real number p (0 <= p <= 1) and two bits a and b:</p>
<ul>
<li>if a = 1 and b = 1, then #(a, b) = 1;</li>
<li>if a = 0 and b = 0, then #(a, b) = 0;</li>
<li>else #(a, b) = 0 with probability p, #(a, b) = 1 with probability 1-p.</li>
</ul>
<p>Now for two given non-negative integers x and y we can define bitwise Probablistic OR operation. The result of this operation is a number received by performing # operation for each pair of bits of x and y in same positions. For example, for p= 0.5, x = 2, and y = 4, we will get 0, 2, 4 or 6 each with probability 0.25.
You will be given a list of non-negative integers. You have to implement a program which will calculate the expected value of the result of performing bitwise probablistic OR operation on all these numbers given some p. The numbers will be taken from left to right.</p>


*******InputConstraints*******

<p>Input file starts with real number p (0 <= p <= 1) with exactly two digits after the decimal point. Integer n follows (1 <= n <= 100). Next line contains n numbers ai in the order they are taking pert in the operation (0 <= ai <= 10<sup>9</sup>).


*******OutputConstraints*******

<p>Output the expected value of performing Probablistic OR operation on the given numbers for given p. Print the result with two digits after the decimal point.


*******IOTestCases*******


<pre>
<b>Input:</b>
0.25 4
1 2 3 4

<b>Output:</b>
5.11

</pre>



______________________________________________________
VILLAGES||||||true||||||


<p>In a far away country there is a wide river, N villages on the left and N villages on the right side of this river (denoted by 1..N on each side). There are also M small ships, each of them connecting one village from the left and one village from the right side (in both ways).</p>
<p>You are to organize a film festival in four of these villages: two from the left and two from the right side. Each two of these four villages must be connected by a ship (directly) if they belong to opposite sides of the river.</p>
<p>Help yourself to choose these four villages and first find out; in how many ways can you choose them?</p>

*******InputConstraints*******

<p>In the first line there are integers N &#8804; 1000 and M &#8804; N<sup>2</sup>.</p>
<p>In the next M lines there are two integers from the interval [1, N] representing the village from the left and the village from the right side connected by this ship.</p>

*******OutputConstraints*******

<p>Print the required number of ways to choose villages for the festival.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 5<br />1 1<br />1 2<br />1 3<br />2 2<br />2 3<br />
<strong>Output:</strong>
1<br /><br />(the only possibility is to choose the villages 1, 2 from the left and 2, 3 from the right side)</pre>


______________________________________________________
PLUSEVI||||||true||||||


<p>Mirko is a strange boy so he has written down a square matrix full of ones and zeroes. Now he is interested in how many plusses there are in his matrix.</p>
<p>A plus is a square such that its side has an odd length greater than 1 and all of its cells are zero, except for the middle row and the middle column: they must be full of ones. For example, in the matrix below there are two plusses, one inside the other:</p>
<p style="text-align: center;">00100<br />00100<br />11111<br />00100<br />00100</p>

*******InputConstraints*******

<p>In the first line there is an integer N &#8804; 2000, dimenzion of the square matrix.</p>
<p>The next N lines are the rows of the matrix.</p>

*******OutputConstraints*******

<p>Print the number of plusses appearing in the matrix.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
8<br />00010000<br />00010000<br />00010000<br />11111111<br />00010000<br />00010010<br />00010111<br />00010010<br /><br /><br /><strong>Output:</strong>
3</pre>


______________________________________________________
PAAAARTY||||||true||||||


<p>Kate is preparing a party. She have bought a very strange garland for it. The garland is a closed chain of bulb. Each bulb can be in one of the following states: N - don't glow, R - glow red, G - glow green, B - glow blue. Each second the state of each bulb changes according to the following table:</p>
<table align="center" border="1" cellpadding="3" cellspacing="0">
<tr>Â <td></td><td>N</td><td>R<td>G<td>B
<tr><td>N</td><td>N</td><td>R</td><td>G</td><td>B</td><tr/>
<tr><td>R</td><td>R</td><td>N</td><td>B</td><td>G</td><tr/>
<tr><td>G</td><td>G</td><td>B</td><td>N</td><td>R</td></tr>
<tr><td>B</td><td>B</td><td>G</td><td>R</td><td>N</td></tr>
</table>
<p>where row is chosen by the current state of the bulb and column is chosen by the state of the bulb on the right. The value at the intersection of the chosen row and column gives the new state of the bulb. For example, if the  bulb glows red (R) and the bulb on its right glows green (G) then in the next second the bulb will glow blue (B). And if the bulb and its right neighbour both glow blue then the bulb won't glow at all in the next second. Also all the bulbs change their states simultaneously. Such behaviour should (theoretically) lead to constant twinkling of the garland. Unfortunately it turns out that sometimes eventually the garland goes into such a state that all bulb don't glow. So the garland stops twinkling. Kate is rather worried that this can spoil the party. She is going to set the initial states of each bulb as she like. Help her determine for how long the garland will twinkle starting from this initial state.</p>


*******InputConstraints*******

<p>The input file consists of a single string containing characters 'N', 'R', 'G' and 'B', which describes the initial state of the garland. Each character defines the initial state of some bulb. The bulbs are listed from left to right. There is the first bulb on the right of the last one. The length of the string will be no more than 1234567 characters.


*******OutputConstraints*******

<p>Print the number of seconds during which the garland will twinkle. If the garland won't stop twinkling (at least until the power is turned off) print "Party!" (quotes for clarity).


*******IOTestCases*******


<pre>
<b>Input:</b>
RGBG

<b>Output:</b>
4

</pre>


______________________________________________________
GRIDPNTS||||||true||||||


<p>There's a Cartesian lattice with 0&lt;=x,y&lt;=n. Given one point (x1, y1&gt;0) in this lattice rotating clockwise as little as possible around the origin&nbsp;find the next point (x2, y2). The given and searched points mustn't have&nbsp;another point between the origin (0, 0) and this point itself.<br />x1, y1, x2, y2 are non-negative integers.</p>
<p><img title="Graphic for GridPnt" src="../../../content/hwk:GraphGridPnt" alt="Graphic for GridPnt" width="240" height="240" /></p>

*******InputConstraints*******

<p>In the first line the number T (T&lt;10000) of test cases.<br />Then T lines with the space-separated n (1&lt;=n&lt;=1000000), x1 and y1.</p>

*******OutputConstraints*******

<p>For each test case the space-separated x2 and y2.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />1 1 1<br />5 3 2<br />100 97 98

<strong>Output:</strong>
1 0<br />5 3<br />98 99
</pre>


______________________________________________________
XIXO||||||false||||||

<pre>Bessie has baked a rectangular brownie that can be thought of as
an RxC grid (1 &lt;= R &lt;= 500; 1 &lt;= C &lt;= 500) of little brownie squares.
The square at row i, column j contains N_ij (0 &lt;= N_ij &lt;= 4,000)
chocolate chips.

Bessie wants to partition the brownie up into A*B chunks (1 &lt;= A
&lt;= R; 1 &lt;= B &lt;= C): one for each of the A*B cows. The brownie is
cut by first making A-1 horizontal cuts (always along integer
coordinates) to divide the brownie into A strips.  Then cut each
strip *independently* with B-1 vertical cuts, also on integer
boundaries. The other A*B-1 cows then each choose a brownie piece,
leaving the last chunk for Bessie. Being greedy, they leave Bessie
the brownie that has the least number of chocolate chips on it.

Determine the maximum number of chocolate chips Bessie can receive,
assuming she cuts the brownies optimally.

As an example, consider a 5 row x 4 column brownie with chips
distributed like this:

         1 2 2 1
         3 1 1 1
         2 0 1 3
         1 1 1 1
         1 1 1 1

Bessie must partition the brownie into 4 horizontal strips, each
with two pieces. Bessie can cut the brownie like this:

       1 2 | 2 1
       ---------
       3 | 1 1 1
       ---------
       2 0 1 | 3
       ---------
       1 1 | 1 1
       1 1 | 1 1

Thus, when the other greedy cows take their brownie piece, Bessie
still gets 3 chocolate chips.

<strong><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><span style="white-space: normal;">I<span>nput</span></span></pre>
</strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">5 4 4 2
1 2 2 1
3 1 1 1
2 0 1 3
1 1 1 1
1 1 1 1
</pre>
<h3>Output</h3>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;">3<br /><br /><br />probm was added from USACO.</pre>


______________________________________________________
THRBL||||||true||||||


<p>Bob has unusual problem. In Byteland we can find a lot of hills and cities. King of Byteland ordered Bob to deliver magic balls from one city to another. Unfortunately, Bob has to deliver many magic balls, so walking with them would take too much time for him. Bob came up great idea - catapulting them.</p>
<p>Byteland is divided into intervals. Each interval contains city and hill.</p>
<p>Bob can catapult magic ball accurately from city A to city B, if between them there isn't higher hill than A's hill.</p>

*******InputConstraints*******

<p>Every test case contains N and M (N&lt;=50000) (M&lt;=50000), number of intervals and number of balls.</p>
<p>In next line there's N numbers H(H&lt;=10^9) separated by one space.</p>
<p>In next M lines numbers A and B (1&lt;=A,B&lt;=N), number of city from which we want to catapult the ball and number of city to which we want to catapult the ball.</p>

*******OutputConstraints*******

<p>Write one number - number of magic balls that Bob can catapult successfully.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />7 3<br />2 3 5 4 2 1 6<br />3 5<br />2 5<br />4 6<br /><br /><strong>Output:</strong><br />2<br /><br />Bob can catapult ball number 1 and 3. <br /></pre>


______________________________________________________
LQDNUMS||||||false||||||

<p style="text-align: left;"><span style="font-size: small;"><br /></span></p>
<p><span style="font-size: medium;"> </span></p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="font-size: medium;">He choose a number N ( 1 &le; N &le; 10^18 ),&nbsp;</span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="font-size: medium;">then wrote all the numbers from 1 to N to form a continuous string of digits. Next he replaced substrings of indentical digits with a single digit. For example string fragment "14445556677666" would be changed to "145676". He named this shortened string S. Then he specified a problem for his fellow professors: given a length of string S determine the number N witch results in that kind of string S. The task has proven to be too much for Mathematicans. can you solve it?&nbsp;</span></div>
<p><span style="font-size: medium;">During a meeting with professors in the Asian Confederation of Mathematics, a Russian professor came up with a problem:&nbsp;</span></p>
<p><span style="font-size: medium;">He choose a number N ( 1 &le; N &le; 10^18 ),&nbsp;then wrote all the numbers from 1 to N to form a continuous string of digits. Next he replaced substrings of indentical digits with a single digit. For example string fragment "14445556677666" would be changed to "145676". Then he specified a problem for his fellow professors: given a length of string S determine the number N witch results in that kind of string S. The task has proven to be too much for Mathematicans. can you solve it?&nbsp;</span></p>
<p style="text-align: left;"><strong><span style="font-size: medium;">Request&nbsp;: </span></strong></p>
<p style="text-align: left;"><span style="font-size: medium;">Write a program to help your country's mathematicians.&nbsp;</span></p>
<h3 style="text-align: left;"><span style="font-size: medium;">Input</span></h3>
<p style="text-align: left;"><span style="font-size: medium;"><span style="font-size: medium;"><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">A single number M, length of the string S&nbsp;&nbsp;( 1 &le; M &le; 10<sup>18&nbsp;</sup>)</span></span></span></p>
<h3 style="text-align: left;"><span style="font-size: medium;"><span style="font-size: medium;">Output</span></span></h3>
<p style="text-align: left;"><span style="font-size: medium;">A single number N, the number which Russian professor selected.&nbsp;</span></p>
<h3 style="text-align: left;"><span style="font-size: medium;"><span style="font-size: medium;">Example</span></span></h3>
<pre style="text-align: left;"><span style="font-size: medium;"><span style="font-size: medium;"><strong>Input:</strong>
</span></span><p><span style="font-size: medium;"><span style="font-size: medium;">13</span></span></p><span style="font-size: medium;"><span style="font-size: medium;">
<strong>Output:</strong>
</span></span><p><span style="font-size: medium;"><span style="font-size: medium;">12</span></span></p><p><strong><span style="font-size: medium;"><span style="font-size: medium;">Interpretation :</span></span></strong></p><p><span style="font-size: medium;"><span style="font-size: medium;"><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">When</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">N</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">=</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;"><strong>12</strong></span><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">, we get</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">the string</span><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">:</span><br /><br /><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">-</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">123456789101112</span><br /><br /><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">Due to</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">three</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">consecutive</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">number</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">one</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">in</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">the same</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">location</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">adjacent to</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">the end</span><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">,</span>&nbsp;we delete the first two numbers<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">, then</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">we</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">have</span><br /><br /><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">-</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">1234567891012</span><br /><br /><span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">The length</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">of this</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">string</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;">is</span>&nbsp;<span title="Nh&#7845;p Ã°&#7875; xem b&#7843;n d&#7883;ch thay th&#7871;"><strong>13</strong></span></span></span></p></pre>


______________________________________________________
KOICOST||||||true||||||


<p>You are given&nbsp;an undirected graph with N verticies and M edges, where the weights are unique.&nbsp;</p>
<p>There is a function&nbsp;Cost(u,v), which is defined as follows:</p>
<p>While there is a path between vertex u and v, delete the edge with the smallest weight. Cost(u,v) is the sum of the weights of the edges that were deleted in this process.</p>
<p><img title="graph" src="http://211.228.163.31/pool/koi_cost/img/cost.gif" alt="graph" width="287" height="116" /></p>
<p>For example, from the graph above (same as the sample input), Cost(2,6) is 2+3+4+5+6 = 20.</p>
<p>Given an undirected graph, your task is to calculate the sum of Cost(u,v) for all vertices u and v, where u&lt;v. Since the answer can get large, output the answer modulo 10^9.</p>

*******InputConstraints*******

<p>The first line of the input consists of two integers, N and M. (1&lt;=N&lt;=100,000, 0&lt;=M&lt;=100,000)</p>
<p>The next M lines consists of three integers, u, v, and w. This means that there is an edge between vertex u and v with weight w. (1&lt;=u,v&lt;=N, 1&lt;=w&lt;=100,000)</p>

*******OutputConstraints*******

<p>Output the sum specified in the problem statement.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6 7<br />1 2 10<br />2 3 2<br />4 3 5<br />6 3 15<br />3 5 4<br />4 5 3<br />2 6 6<br /><br />

<strong>Output:</strong>
256<br />
</pre>


______________________________________________________
KOIREP||||||true||||||


<p>There are N classes in a school, each with M students. There is going to be a race&nbsp;of 100m dash, and a representative from&nbsp;each class&nbsp;will be chosen to&nbsp;participate in this race. You were assigned a task to choose these representatives. Since you did not want the race to be one sided, you wanted to choose the representatives such that the difference between the&nbsp;ability of&nbsp;the best&nbsp;representative and the&nbsp;worst representative&nbsp;is minimal.</p>
<p>For example, if N = 3 and M = 4, and each class has&nbsp;students with following abilities:</p>
<p>Class 1: {12,16,67,43}</p>
<p>Class 2: {7,17,68,48}</p>
<p>Class 3: {14,15,77,54}</p>
<p>it is best to choose the student with ability 16 from Class 1, 17 from Class 2, and 15 from Class 3. Thus, the difference in this case would be 17-15 = 2.</p>
<p>Your task is to calculate the minimal possible difference you can achieve by choosing a representative from each class.</p>

*******InputConstraints*******

<p>The first line of the input consists of two integers, N and M. (1&lt;=N&lt;=1000, 1&lt;=M&lt;=1000).</p>
<p>The next N lines will have M integers. The jth element of ith line is the ability of the jth student in ith class. The number is between 0 and 10^9, inclusive.</p>

*******OutputConstraints*******

<p>Output the minimal difference one can achieve by choosing the representative from each class.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3 4<br />12 16 67 43<br />7 17 68 48<br />14 15 77 54<br /><br />
<strong>Output:</strong>
2</pre>
<pre><strong></strong></pre>
<pre><strong>Input:</strong><br />4 3<br />10 20 30<br />40 50 60<br />70 80 90<br />100 110 120</pre>
<pre><br /><br /><br /><br /><strong>Output:</strong><br />70<br /><br /><br /></pre>


______________________________________________________
KOILINE||||||true||||||


<p>N people are lined up in a&nbsp;straight line to enter a concert. Each person&nbsp;in this line knows how many people in front&nbsp;have&nbsp;shorter or same heights. Let's call the sequence&nbsp;representing these numbers S. So in other words, S[i] means that there are S[i] people in front of the ith person who have shorter or same heights than that of&nbsp;person i.&nbsp;</p>
<p>Given the&nbsp;heights of N people and a sequence S, determine the correct&nbsp;order of people lined up. (left is front)&nbsp;&nbsp;&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input is an integer N. (1&lt;=N&lt;=100,000)</p>
<p>The next N lines&nbsp;each consists of one integer&nbsp;H. (1&lt;=H&lt;=2*10^9) These N integers are the heights of people lined up.</p>
<p>Then,&nbsp;sequence S is given in a single&nbsp;line, separated by a space. &nbsp;</p>

*******OutputConstraints*******

<p>Determine the correct ordering of people lined up. Total of N lines should be output.&nbsp;The&nbsp;integer on the ith line represents&nbsp;the height of the ith person in the line.&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
12<br />120<br />167<br />163<br />172<br />145<br />134<br />182<br />155<br />167<br />120<br />119<br />156<br />0 1 0 0 3 2 6 7 4 6 9 4<br />
<strong>Output:</strong>
134<br />167<br />120<br />119<br />156<br />120<br />167<br />182<br />155<br />163<br />172<br />145<br />
</pre>


______________________________________________________
FUPRCO||||||false||||||

<p>Bob is trying to solve many problems.<br /><br />Today he's trying to do his best at "Funny programming contest". In this contest there is N rounds.<br /><br />Each round is starting in moment Ai and ends in moment Bi. Rounds can overlap on each other. For each round there is one problem to solve. He can't solve more than one problem at once.<br /><br />Bob knows that problems are very difficult, so he assumed that he will do each round for more than half of time the round lasts.<br /><br />He knows start and end time for each round.<br /><br />Help him figuring out if he can spend as much time as he want for each round.<br /><br /><strong>Input</strong><br />First line contains number N(1&lt;=N&lt;=2*10^5)<br /><br />In next N lines there are three numbers, ai,bi,ci (0&lt;=ai&lt;bi&lt;=10^9 , (bi-ai)/2 &lt; ci &lt;= bi-ai ), time when round i starts, time when round i end, and time which Bob wants to spend for round i.<br /><br /><strong>Output</strong><br /><br />Print "YES" if Bob can spend as much time as he wants for each round, otherwise print "NO"<br /><strong>Example</strong><br /><br />Input:<br /><br />2<br />1 5 3<br />1 2 1<br /><br /><br />Output:<br />YES<br /><br />Input:<br /><br />2<br />1 5 3<br />2 3 1<br /><br /><br />Output:<br />NO</p>


______________________________________________________
GUESSLNK||||||true||||||


<p>I really enjoy setting problem <a href="/problems/GUESSING/">GUESSING</a>. After three years, I decided to set another "kind of interactive" problem based on it.

<p>Given a link for GUESSING problem, find the server's response

<h3>Specification</h3>
<p>The script runs on server works like this, the URL contains 12 digits, first 6 digits represents <b>SEED</b> generated by random number generator, and it won't change during a guessing session. The last 6 digits represents <b>GUESS</b>, which is the number user just typed. 
<p>The unknown part (for you, of course) is an integer function <b>f</b> which is a bijection from [0,999999] to [0,999999]. 
<p>The server first generate <b>TARGET</b> = <b>f</b>(<b>SEED</b>), then it compares <b>TARGET</b> and <b>GUESS</b> and give response back to user.
<p>for more details on <b>f</b>, it's in format (expr(x) % 1000000), and expr (x) is a expression contains <b>only</b> operation add, subtract, multiply, division, modulo, each <b>exactly once</b>, and every constants are in [0,999999], every variable is x(of course), brackets are allowed.

<p>for example, expr(x) could be "x/12-34%(x+1)*56", but it's invalid since <b>f</b> is not a bijection.

<p>the modulo/division operations here works well if left side is a negative number, for example, -2 % 5 = 3, -2 / 5 = -1. but it's undefined if the number on the right side is not positive.


*******InputConstraints*******

<p>each line contains a link in format
"<tt>http://www.spoj.pl/problems/GUESSING/XXXXXXYYYYYY/</tt>", where <tt>XXXXXXYYYYYY</tt> contains exactly 12 digit.


*******OutputConstraints*******

<p>The server's response, in format "<tt>XAYB</tt>".


*******IOTestCases*******


<pre>
<b>Input:</b>
<a href="/problems/GUESSING/123456123456/">http://www.spoj.pl/problems/GUESSING/123456123456/</a>
<a href="/problems/GUESSING/000000000000/">http://www.spoj.pl/problems/GUESSING/000000000000/</a>

<b>Output:</b>
1A3B
1A5B
</pre>



______________________________________________________
KAMIL||||||true||||||


<p>Some kids cannot pronounce all letters, some of them they sometimes pronounce correctly and sometimes incorrectly. Kamil sometimes says T instead of K, but he never says K instead of T. Similarly he sometimes says D instead of G. Instead of R he sometimes says L and sometimes F. Of course it happens that he pronounces the letter correctly. Kamil's father always thinks how many words can mean the word spoken by his son (it doesn't matter if they are real English words).</p>
<h3>Task</h3>
<p>Write a program which</p>
<div>
<ul>
<li> reads from standard input the words spoken by Kamil</li>
<li> counts how many different words can that mean</li>
<li> writes the outcome on standard output </li>
</ul>
</div>
<p>&nbsp;</p>

*******InputConstraints*******

<p>Ten test cases (given one under another, you have to process all!). Every test case is a single line - a word spoken by Kamil. Only 26 capital leters are used. The length of the word is at most 20.</p>

*******OutputConstraints*******

<p>For every testcase write an integer in a single line with a single integer, denoting the number of words which Kamil's word can mean.</p>

*******IOTestCases*******

<pre><tt><strong>Input:</strong>
FILIPEK
[and 9 test cases more]
</tt>
<tt><strong>Output:</strong>
4
[and 9 test cases more]
</tt>
</pre>


______________________________________________________
BYTEFOOD||||||false||||||

<P align=justify>
Fanatics from the BBFO blew up all the food factories in the Bytelandian capital! Hurry up! There is still some food left in shops. Some shops are located in the centre, others in the suburbs, so Johnny has to decide which of them are worth visiting. Some shops can be very big and have plenty of food in them, others may be so small that food dissappears from them at an alarming rate... So? Help Johnny buy as much food as possible. 
<br><br>
There are <i>n</i> open shops, each of them located at position (<i>x<sub>i</sub></i>,<i>y<sub>i</sub></i>), for <i>i</i>=1,...,<i>n</i>, where 0 <= <i>x<sub>i</sub></i>,<i>y<sub>i</sub></i> <= 250. The distances between shops are measured using the Manhattan metric (i.e. as sums of absolute values of differences of x and y coordinates). Besides, every shop is characterized by a linear time function describing how much food is left in the shop at the moment:</p>
<p align=center><center><i>f<sub>i</sub></i> = <b>max</b>{0, <i>a<sub>i</sub></i> - <i>b<sub>i</sub></i> * <i>time</i>}</center></p><p align=justify>where 0 <= <i>a<sub>i</sub></i> <= 1000000, 0 <= <i>b<sub>i</sub></i> <= 1000, while <i>time</i> is the time (in minutes) that has elapsed from the moment Johnny left the house (assume that Johnny does not live in the same place as any shop). If Johnny decides to stay in a shop, he can buy at most <i>b<sub>i</sub></i> units of food per minute. Otherwise, he can move along the ortogonal system of streets of the city at a constant speed of unit distance per minute. Johnny only ever changes the action he is performing at the full minute. Because his family is slowly beginning to starve, he should be back at home not later than <i>m</i> minutes after he left. 
Since there are thousands of starving families in the capital, Johnny can't spent more that 1 <= <i>c<sub>i</sub></i> <= 10 minutes in a shop. Moreover, he will never go into the same shop twice for fear of being lynched...</p>
<H3>Input</h3>
<P align=justify>
The first line of input contains a single positive integer <i>t</i> <= 1000, the number of test cases.

Each test case begins with the number of shops in the city 1 <= <i>n</i> <= 1000 and the deadline 1 <= <i>m</i> <= 5000.

Then the following <i>n</i> lines consist of four integers <i>x<sub>i</sub> y<sub>i</sub> a<sub>i</sub> b<sub>i</sub> c<sub>i</sub></i> each, describing the position and the parameters of the function for food availability of the <i>i</i>-th shop. At the end of every test case comes a line with two integers<i>p q</i> (between 0 and 250), corresponding to the x and y coordinates of the position of Johnny's house.
<br><br>All the input data are integers.
</p>
<H3>Output</h3>
<P align=justify>
Process all test cases. The correct output for the <i>i</i>-th test case takes the following form:
<br><i>i</i>	[the number of the test case, in the input order]
<br><i>s m</i> [<i>s</i> is the number of the target shop and <i>m</i> > 0 is the number of minutes spent in it]. 
<br>At the end of the series of moves you should always write a line conisting of two zeros ('0 0').
<br><br>All the output data should be integers.
</p>
<H3>Scoring</h3>
<P align=justify>
The score of your program is the total amount of food that Johnny bought (summed over all the testcases in which he managed to come back home before the deadline).
</p>
<H3>Example</h3>
<P align=justify>
<pre>
<b>Input</b>
4
2 20
0 0 100 5 5
10 0 200 10 10
5 0
2 20
0 0 180 15 10
10 0 200 20 10
5 0
4 101
0 0 1000 20 5
20 0 200 1 5
0 20 5000 200 5
20 20 300 5 10
10 10
1 15
1 0 10 1 5
5 0

<b>Output</b>
1
2 10
0 0
2
1 10
0 0
3
3 5
4 10
2 1
0 0
4
1 5
0 0

<b>Score</b>
Score = 1261
</pre>
</p>


______________________________________________________
SOLSTRAS||||||false||||||

Let us denote the set of all prime numbers by the symbol <B>P</B>. The 
Solovay-Strassen algorithm determines whether a given positive odd integer <I>n</I>>2 
belongs to <B>P</B>.<BR>
<BR>
The <EM>Legendre function</EM> <FONT COLOR="purple">sig</FONT> for number <I>n</I><img src="http://www.spoj.pl/content/coni:elem.png" alt="in">
<B>N</B> with parameter <I>s</I><img src="http://www.spoj.pl/content/coni:elem.png" alt="in"> <B>N</B>
(<I>s</I><<I>n</I>) is defined by the formula <FONT COLOR="purple">sig</FONT>(<I>n</I>,<I>s</I>)=<I>s</I><SUP>(<I>n</I>-1)/2</SUP>
<FONT COLOR="purple">mod</FONT> <I>n</I>. The symbol <FONT COLOR="purple">mod</FONT> is defined in such a way as to return the result with the smallest possible absolute value, from the range (-n/2, n/2].<BR>
<BR>
The <EM>Jacobi function</EM> <FONT COLOR="purple">jac</FONT> for number <I>n</I><img src="http://www.spoj.pl/content/coni:elem.png" alt="in">
<B>N</B> with parameter <I>s</I><img src="http://www.spoj.pl/content/coni:elem.png" alt="in"> <B>N</B>
(<I>s</I><<I>n</I>) is given as:
<DIV ALIGN="center"><TABLE CELLSPACING="0" CELLPADDING="0">
		<TR VALIGN="middle">
			<TD NOWRAP>
				<FONT COLOR="purple">jac</FONT>(<I>n</I>,<I>s</I>)=
			</TD>
			<TD NOWRAP><TABLE CELLSPACING="0" CELLPADDING="0">
					<TR VALIGN="middle">
						<TD NOWRAP><img src="http://www.spoj.pl/content/coni:brace.png" alt="cases"></TD>
						<TD NOWRAP><TABLE CELLSPACING="2" CELLPADDING="0">
								<TR>
									<TD ALIGN="left" NOWRAP><FONT COLOR="purple">sig</FONT>(<I>n</I>,<I>s</I>),
									</TD>
									<TD ALIGN="left" NOWRAP>Â Â ifÂ  <I>n</I><img src="http://www.spoj.pl/content/coni:elem.png" alt="in"><B>P</B></TD>
								</TR>
								<TR>
									<TD ALIGN="left" NOWRAP><TABLE CELLSPACING="0" CELLPADDING="0">
											<TR VALIGN="middle">
												<TD NOWRAP><TABLE CELLSPACING="0" CELLPADDING="0">
														<TR>
															<TD ALIGN="center"><I>k</I></TD>
														</TR>
														<TR>
															<TD ALIGN="left"><img src="http://www.spoj.pl/content/coni:pi.png" alt="product"></TD>
														</TR>
														<TR>
															<TD ALIGN="center"><I>i</I>=1</TD>
														</TR>
													</TABLE>
												</TD>
												<TD NOWRAP>
													<FONT COLOR="purple">sig</FONT>(<I>p</I><SUB><I>i</I></SUB>,<I>s</I>),
												</TD>
											</TR>
										</TABLE>
									</TD>
									<TD ALIGN="left" NOWRAP><TABLE CELLSPACING="0" CELLPADDING="0">
											<TR VALIGN="middle">
												<TD NOWRAP>Â  if</TD>
												<TD NOWRAP>
													<I>Â  n</I>=</TD>
												<TD NOWRAP><TABLE CELLSPACING="0" CELLPADDING="0">
														<TR>
															<TD ALIGN="center"><I>k</I></TD>
														</TR>
														<TR>
															<TD ALIGN="left"><img src="http://www.spoj.pl/content/coni:pi.png" alt="product"></TD>
														</TR>
														<TR>
															<TD ALIGN="center"><I>i</I>=1</TD>
														</TR>
													</TABLE>
												</TD>
												<TD NOWRAP>
													<I>Â p</I><SUB><I>i</I></SUB>,Â where allÂ  <I>p</I><SUB><I>i</I></SUB>
													<img src="http://www.spoj.pl/content/coni:elem.png" alt="in"><B>P</B></TD>
											</TR>
										</TABLE>
									</TD>
								</TR>
							</TABLE>
						</TD>
					</TR>
				</TABLE>
			</TD>
		</TR>
	</TABLE>
</DIV>
<p>
	It is interesting to note that for given <I>n</I> and <I>s</I>, the values of <FONT COLOR="purple">
		sig</FONT>(<I>n</I>,<I>s</I>) and <FONT COLOR="purple">jac</FONT>(<I>n</I>,<I>s</I>) 
	can be computed in <I>O</I>((log<SUB>2</SUB> <I>n</I>)<SUP>2</SUP>) 
	time. For particulars consult an encyclopedia, such as <a href="http://mathworld.wolfram.com/JacobiSymbol.html">
		MathWorld</a>.<BR>
</p>
<p>
	The deterministic version of the Solovay-Strassen primality-test algorithm is 
	given below. <BLOCKQUOTE><TABLE border="0" cellspacing="0" cellpadding="0">
			<TR>
				<TD ALIGN="left" NOWRAP><B>algorithm </B><FONT COLOR="purple">Solovay-Strassen</FONT>
					(<I>n</I>)</TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>var</B> <I>s</I>;</TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>begin</B></TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>Â Â Â  for</B> <I>s</I> <B>in</B> {1,2,3,4,...,<I>n</I>}
					<B>do</B></TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP height="25"><B>Â Â Â Â Â Â Â  if</B>
					<FONT color="purple">sig</FONT>(<I>n</I>,<I>s</I>)<img src="http://www.spoj.pl/content/coni:neq.png" alt="neq"><FONT color="purple">jac</FONT>(<I>n</I>,<I>s</I>)</TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>Â Â Â Â Â Â Â Â Â Â Â  
						then return</B> "<EM>n is composite </EM>(<EM>detected at attempt <</EM>s</EM>>)";</TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>Â Â Â  return</B> "<EM><I>n</I> is prime</EM>";</TD>
			</TR>
			<TR>
				<TD ALIGN="left" NOWRAP><B>end</B>.</TD>
			</TR>
		</TABLE>
	</BLOCKQUOTE>
	<h3>Task</h3>
<p>
	We are not asking you to implement the Solovay-Strassen algorithm, this would 
	be far too easy :). Instead, try to find values of <I>n</I>, for which the 
	output of the algorithm would be "<I>n</I> is composite (detected at attempt 1)", 
	"<I>n</I> is composite (detected at attempt 2)", and so on. Write out as many of 
	these values as you can in consecutive lines, and try to keep them as small as 
	possible.
</p>
<h3>Scoring</h3>
<p>
	The score awarded to your program is the total of all points given for its 
	individual lines.
</p>
<p>
	The <I>i</I>-th line output by your program should contain exactly one positive 
	odd integer <I>n>2</I> of no more than 500 decimal digits. If 
	Solovay-Strassen(<I>n</I>) yields the answer "<I>n</I> is composite (detected at 
	attempt <I>i</I>)", you will receive <I>i</I>/log<SUB>10</SUB>
	<I>n</I> points for this line, if not - your program will be considered 
	incorrect. Output 0 if you don't want a line to be assessed. Only the first 
	1000 lines of output are taken into account.
</p>
<h3>Example</h3>
<p>
	A program outputing:
</p>
<pre>0
0
561</pre>
<p>
	will receive 3/log<SUB>10</SUB> 561 = 1.091 points.
</p>



______________________________________________________
JOHNNY||||||false||||||

<P>
Johnny visited his favourite supermarket to purchase as many sweets as he could afford. Since daddy had left his credit card at home untended, this was not really a problem. Once he had (barely) managed to push the trolley laden with chocolate bars past the cash desk, he began to wonder how to carry all the shopping home without breaking his back.
</p>
<p>
You must know that Johnny is a perfectly normal child, and has exactly 2 hands. Help him distribute his load between both hands so as to minimise the difference in load between both hands.
</P>
<H3>Input</H3>
<P>
The first line of input contains a single integer <i>n</i><= 10000 denoting the number of sweet packets Johnny has bought. In each of the next <i>n</i> lines a single positive integer is given, describing the weight of the respective packet (the weight is an integer value never exceeding 10<sup>14</sup>).
</P>
<H3>Output</H3>
<P>
In separate lines, output the numbers of the packets which Johnny should carry in his left hand. Assume packets are numbered in the input order from 1 to <i>n</i>.
</P>
<H3>Scoring</H3>
<P>
Your program shall receive log<sub>10</sub> (<i>s</i>/(|<i>d</i>|+1)) points, where <i>s</i> is the total weight of all parcels, while <i>d</i> denotes the difference in weight between the load carried in Johnny's left and right hand.
</P>
<H3>Example</H3>
<p>
For the sample input:
<pre>
3
5
8
4
</pre>
<p>
a program outputting:
<pre>
2
3
</pre>
<p>will score log<sub>10</sub> ((5+8+4)/(|8+4-5|+1))= 0.327 points.
</p>


______________________________________________________
SOLVING||||||false||||||

<P align=justify>
The 15 puzzle is a classic puzzle made famous in the 19th century. It consists of 4x4 board with 15 sliding tiles numbered from 1 to 15. The objective is to get them into this pattern:
</P>
<center>
<table border="2" cellpadding="5" cellspacing="1">
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
  </tr>
  <tr>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
  <tr>
    <td>9</td>
    <td>10</td>
    <td>11</td>
    <td>12</td>
  </tr>
  <tr>
    <td>13</td>
    <td>14</td>
    <td>15</td>
    <td></td>
  </tr>
</table>
</center>
<br>
<P align=justify>
Here we will deal with a generalized version of the above puzzle. You should write a program that given some initial state of the nxn board finds a sequence of moves that transforms it so that in the i-th row there are tiles with
numbers i*n+1,i*n+2,...,i*n+n (from left to right) - with the exception of the lower right corner where the hole should be. The less moves you use, the more points you get.
</P>

</P>
<H3>Input</H3>
<P align=justify>
The first line of input contains the number of test cases c (c<=200). Then c test cases follow, each of them begins with a line with a single integer n (3<=n<=10) in it. The next n lines describe the initial state of the board - the i-th line consists of exactly n integers describing the i-th row. The position of the hole is indicated by 0.
</P>
<H3>Output</H3>
<P align=justify>
For each test case output one line - the found sequence of moves. Write 'D' to move the hole down, 'U' to move it up, 'R' to move it right and 'L' to move it left. You shouldn't use more than 10000 moves. All moves should be valid (so for example don't try to move the hole up when it is in the first row).
</P>
<H3>Scoring</H3>
<P align=justify>
Your program will receive n^3/(m+1) points for each test case where m is the number of moves.
</P>
<H3>Example</H3>
<pre>
Input:
2

4
1   2  7  3
5   6  0  4
9  10 11  8
13 14 15  12

3
0 1 2
4 5 3
7 8 6

Output:
URDDD
RRDD
</pre>



______________________________________________________
PSPHERE||||||true||||||


<p>Imagine a number of identically charged weightless dimensionless particles placed on the surface of a ball. They will instantly reach a state of equilibrium (a stable state of minimum energy), becoming distributed fairly evenly all round the sphere.
<p>
You probably won't be surprised to hear that Byteland has a sadly distorted electrostatic field, and the energy of the system is not governed by ordinary laws. Instead, it is inversely proportional to the distance between the closest pair of charges on the sphere.
<p>
Please help the charges find positions in which they will feel as comfortable as possible. Charges should be regarded as points in 3D space, located on the surface of the unitary sphere (with center (0,0,0) and a radius of 1).


*******InputConstraints*******

<p>An integer t denoting the number of test cases (t<=10), followed by t test cases, each consisting of a line with a single integer n - the number of points on the sphere (2<=n<=1000). 


*******OutputConstraints*******

<p>For each test case, output n lines consisting of three floating point numbers, corresponding to the x y z coordinates of successive points. 


*******IOTestCases*******

<p>
For the sample input:<br>
1<br>
2<br>
<br>
a program outputting:<br>
0.0 0.0 1.0<br>
0.0 1.0 0.0<br>
<br>
will receive 2.828 points.




______________________________________________________
PAWNS||||||true||||||


<p>Imagine a game played on an <i>n x n</i> chessboard by two players sitting at opposite ends, one having n white pawns, the other - n black pawns. Pawns are arranged in the row closest to the player. Moves are made in turn by both players and resemble those in chess: in a single move, a player can move exactly one pawn, either a square forward (if the square it is moving onto is free), or on the bias, one square forward and one square to the left or right (if the square it is moving onto is occupied by an enemy's pawn, which is considered beaten and removed from the game).
<p></p>
<img src="http://www.spoj.pl/content/adrian:pawns.png" align="center"/>
<p>Pawns may never be moved backwards or off the board, and if a pawn reaches the final line it just has to stay there. The game ends if a player can't make a move. The winner is then the player who... oh, it doesn't matter really (possibly the players have a fight with beer bottles, and the one who isn't knocked out, wins). Your task is different - seeing snapshots of a game at two moments of time, try to reenact a sequence of moves that may have led from the first situation to the second.


*******InputConstraints*******

<p>The first line of input contains a single positive integer t<=25, the number of test cases. t test cases (of successively increasing size) follow.</p>
<p>
Each test case begins with an integer n (2<=n<=26) denoting the size of the board. Then, the snapshot of the earlier situation is given, followed by a snapshot of the later situation. Each snapshot is a sequence of n lines of n characters, corresponding to the squares of a chessboard oriented as in the figure above. Character '.' - denotes an empty square, 'W' - a square with a white pawn, 'B' - a square with a black pawn. Assume that it is black's turn to move after the earlier position (though black needn't have necessarily started the game as such).


*******OutputConstraints*******

<p>For each test case, output the number k of moves which could have led from the first to the second position (output 0 if you don't know a solution, even though such a solution exists for certain). In the next k lines, print the determined sequence of moves. Each move should be given in a seperate line, using the format: <tt>old_column old_row new_column</tt> to describe the change of coordinates of a pawn (assume board orientation as in the exemplary figures).


*******IOTestCases*******

<p>
For the sample input:
<pre>
1
6

....W.
.WWW.W
B.B...
......
......
B..BBB

......
.BWW..
.....W
......
.....B
B..BB.
</pre>
<p>
a program outputting:
<pre>
5
A 3 B
F 2 F
C 3 D
E 1 D
F 6 F
</pre>
<p>will receive 5 points.


______________________________________________________
BURNCITY||||||true||||||


Terrorists from the BBFO have raised fires in the capital of Byteland! As is it is a hot summer day, most of the fire brigade have quite naturally taken a day off, and so the noble task of extinguishing all the fires falls to the only officer on duty. By now you will probably not be surprised to learn that he is in fact... Johnny. This enterprising youth remains undaunted by the challenge facing him, and, taking advantage of the absence of his superiors, he decides to use his favourite fire fighting technique. So, he loads the fire station's helicopter with as many dynamite charges as it can carry, and takes off on his errand of mercy.
<p>
From up there in the sky Johnny can see the city as a square, sliced into smaller, identical squares by a regular grid of streets. Every square contains one of three kinds of terrain - buildings, grassland or water (perhaps most firemen would go into further detail when analysing terrain, but you really can't expect that from a firefighter whose preferred method of extinguishing fires is dynamite, can you?).
<p>
Johnny starts out in the centre of the square corresponding to the fire station. In the time from the start of a minute to the end of that minute he can move to the center of one of the four adjacent squares (but he is not allowed to leave the city). While over the center of a square he can choose to drop a single dynamite charge on it. He starts preparing the charge at the beginning of a minute, and it is dropped from the helicopter at the end of the same minute. Everything on the square on which the bomb was dropped is blown apart, and in its place a crater is formed and instantly flooded by subterranean waters.
<p>
The fire spreads in a most predictable way: if a square starts burning at the beginning of minute m, then all four adjacent squares will catch fire at the start of minute (<i>m</i>+2). The only exception is a square filled with water (either naturally, or by Johnny's bombs) which never catches fire. If a square starts burning, all property on it is instantly destroyed. Once a square starts burning it will only stop burning if Johnny blows it up, or when the monsoon rain comes and floods the city, at the end of the <i>h</i>-th minute of firefighting.
<p>
Johnny's main objective is to save as many squares with buildings as possible (from fire and dynamite).
<p>
An example of the fire fighting process is presented below.
</p>

<img src="http://www.spoj.pl/content/mima:burncity.png" alt="An example of the fire fighting process"/>


*******InputConstraints*******

<p>
The first line of input contains a single integer <i>t</i><=500, the number of test cases.
<p>
The first line of every test case contains five integers <i>n c h s<sub>x</sub> s<sub>y</sub></i>, respectively denoting: <i>n</i> - the length of one side of the city (measured in squares), <i>c</i> - the number of dynamite charges Johnny can use, <i>h</i> - the number of minutes after which the rain falls, <i>s<sub>x</sub></i>, <i>s<sub>y</sub></i> - the <i>x</i> and <i>y</i> coordinates of the square containing the fire-station from which Johnny starts, measured relative to the North-West corner of the city (1<=<i>s<sub>x</sub></i>, <i>s<sub>y</sub></i><=<i>n</i><=50, 0<=<i>c</i><=<i>h</i><=5*<i>n</i>; there are about 10 test cases for all possible values of <i>n</i>). Finally, the map of the city is given in the form of <i>n</i> lines of <i>n</i> characters each, each corresponding to the state of a square at the start of the fire fighting ('b' - building, 'g' - grassland, 'w' - water, 'f' - fire).

*******OutputConstraints*******

<p>
For the <i>i</i>-th test case output a line containing the text 'city <i>i</i> Y' if you want to solve the test case or 'city <i>i</i> N' if you wish to leave it out. 
<p>
If you chose to the solve the test case, in the next line output a sequence of exactly <i>h</i> characters 'N', 'S', 'W', 'E', '+' or '-', corresponding to Johnny's actions in successive minutes (moving North, South, West and East on the map, dropping dynamite, not doing anything, respectively).


*******IOTestCases*******

<pre>
<b>Input:</b>
5
3 2 9 1 1
bgg
bbg
bbf
4 2 8 3 1
bbbb
bgwg
fwgg
gbbb
4 3 15 2 1
bbbb
bbbb
bbbb
fbbb
4 3 15 2 1
bbbf
bbbb
bbbb
fbbb
4 3 15 2 1
bbbf
bbbb
bbbb
fbbb

<b>Output:</b>
city 1 Y
S+E---N+-
city 2 Y
W+SSS+--
city 3 Y
ESE+SW+S+------
city 4 Y
+EES+W+--------
city 5 Y
+ES+-E+--------

<b>Score:</b>
9
</pre>

<p>(The first test case is illustrated in the figure and Johnny can save one building. In testcases 2, 3, 4, 5 Johnny saves 4, 2, 2 and 0 buildings, respectively).

<p>
<i>Bonus info</i>: The three digit number after the decimal point of your score denotes the number of test cases you have solved correctly, rescuing at least one building.
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
HANOI||||||true||||||


<p align=justify>Consider the folowing variation of the well know problem Towers of Hanoi:</p>

<p align=justify>
We are given <i>n</i> towers and <i>m</i> disks of sizes 1,2,3,...,<i>m</i> stacked on some towers. Your objective is to transfer all the disks to the <i>k</i>-th tower in as few moves as you can manage, but taking into account the following rules:
<ul>
<li>moving only one disk at a time,
<li>never moving a larger disk one onto a smaller one,
<li>moving only between towers at distance at most <i>d</i>.
</ul>
<p>
You can assume that all the problems can be solved in not more than 20000 moves.

</p>

*******InputConstraints*******

<p align=justify>The first line of input contains a single positive integer <i>t</i> <= 1000, the number of test cases.
</p>
<p align=justify>
Each tests case begins with the number of towers 3 <= <i>n</i> <= 100, the number of target tower 1 <= <i>k</i> <= <i>n</i>, the number of disks <i>m</i> <= 100 and the maximum distance 1 <= <i>d</i> <= <i>n</i> - 1.
<br><br>
Then, the following <i>m</i> lines consists of pairs of numbers describing the initial situation, in the form: the tower and disk on it. Assume according to the rules that on every tower smaller disks are on larger disks.
</p>

*******OutputConstraints*******

<p>Process all test cases. The correct output for the <i>i</i>-th test case takes the following form:
<br><i>i</i> [the number of the test case (in input order)]
<br><i>a b</i> [a sequence of lines of this form, where <i>a</i> is the tower with the moved disk on top of it and <i>b</i> is the target tower].<br> The test case is considered solved if after performing the sequence all disks are on the <i>k</i>-th tower. At the end of the series of moves you should always write a line consisting of two zeros ('0 0').
<br>
</p>

*******IOTestCases*******

<pre>
<b>Input</b>
5
3 3 3 2
1 1
1 2
1 3
3 1 3 2
1 1
1 2
1 3
4 4 4 2
1 1
1 2
1 3
1 4
4 4 4 2
1 1
1 2
2 4
4 3
4 4 4 3
1 1
4 2
4 3
4 4

<b>Output</b>
1
1 3
1 2
3 2
1 3
2 1
2 3
1 3
0 0
2
0 0
3
0 0
4
4 3
2 4
3 4
1 2
1 3
3 4
2 4
0 0
5
1 2
0 0

<b>Score</b>
Assuming: <i>T</i> = {7,6,15,7,1} the output will receive <b>2</b> points. 
</pre>
<p>
<i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with non-zero score...


______________________________________________________
BYTELE||||||true||||||


<p align=justify>
King Johnny has a serious drink problem, which has recently become the focus of attention of all Bytelandian tabloids and colour magazines. In a desperate effort to divert the public's attention and ingratiate himself with his subjects, he decides to start giving out valuable gifts. This time he has chosen to harass the peaceful life of the CEO of Bytelandian Telecom, and requested him to create a Metropolitan Area Network for the citizens of the capital of Byteland, as part of an "our King is a good man" campaign.<p>
The CEO has no choice but to obey the orders he receives. This rational and business-minded man would obviously like to perform the installation at the smallest possible cost, and he asks you for your help.
<p>
The King has stated the topology of the network plainly enough in the form of a graph (not necessarily connected), with vertices corresponding to nodes (computers), and edges to the cable connections between them. It is now your task to select the points of the city to place the nodes of the network at. The city is a regular mesh of streets (depicted as vertical and horizontal segments on a map), with crossroads located at points with integer coordinates. Nodes may only be located at crossroads of streets (no two nodes at the same crossroad). Cables may only run along streets and must connect nodes by the shortest possible route under this constraint. Moreover, a cable of precisely such length must be currently in stock (you are provided with a list of possible cable lengths).

Try to layout the network in such a way as to minimise the total length of cable used.


*******InputConstraints*******

<p>
The input starts with a line containing integer <i>t</i> <= 1000, the number of test cases. <i>t</i> test cases follow.
<p>
The first line of a test cases begins with integer <i>k</i>, denoting the number of different available cable lengths, followed by <i>k</i> space separated integers <i>p<sub>j</sub></i> corresponding to the allowed lengths of cables (1 <= <i>k</i> <= 100, 1 <= <i>p<sub>j</sub></i> <= 100). The next line contains two integers <i>n m</i>, denoting the required number of nodes and cables in the network, respectively (1 <= <i>n</i> <= 100, 1 <= <i>m</i> <= 1000). The next m lines contain a pair of integers 
<i>a<sub>j</sub> b<sub>j</sub></i> each, signifying that nodes <i>a<sub>j</sub></i> and <i>b<sub>j</sub></i> should be connected by a cable (1 <= <i>a<sub>j</sub>,b<sub>j</sub> <= n</i>).</p>

*******OutputConstraints*******

<p>
A valid solution to the <i>i</i>-th test case consists of a line with the text '<tt>city </tt><i>i</i><tt> Y</tt>', followed by <i>n<sub>i</sub></i> lines each containing two integers, the x- and y-coordinates of successive nodes in the solution (0 <= <i>x</i>,<i>y</i> <= 100).
<p>
It is guaranteed that for every test case there exists at least one possible solution. You can however leave out a test case by outputting the line '<tt>city </tt><i>i</i><tt> N</tt>' instead of a valid solution.

*******IOTestCases*******

<pre>
<b>Input:</b>
4
2 1 2
4 5
1 2
2 3
3 4
1 4
2 4
1 2
4 5
1 2
2 3
3 4
1 4
2 4
2 1 2
5 8
1 2
1 3
1 4
1 5
2 4
2 5
3 4
3 5
1 1
2 1
1 2

<b>Output:</b>
city 1 Y
0 0
0 1
1 1
1 0
city 2 Y
2 0
1 1
0 2
0 0
city 3 Y
0 1
0 2
1 1
1 2
0 0
city 4 N

<b>Score:</b>
score = 3.340003
</pre>
<p align=justify><i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with non-zero score...</p>



______________________________________________________
SANTA||||||true||||||


<p>Every year Santa Claus faces a more and more difficult task. The number of children in the world is increasing rapidly, while Santa's old patched up sack can only accommodate a few presents at a time. And every child wants their own very special present... This means that, ever so often, once his sack is partially or completely empty, Santa has to fly back to his base in Lapland to replenish his supplies. So irksome has this become that Santa has decided to resort to modern operational research to aid him in his sack-packing and route planning. Please write a program which will guide Santa through his daily chores.


*******InputConstraints*******

<p>The input starts with a line containing a single integer t<=100, the number of test cases. t test cases follow. 

<p>The first line of every test case consists of four integers n x y S, denoting the number of good children who will receive a present from Santa, the x and y coordinates of Santa's home base, and the amount of space in the sack, respectively (1<=n<=10000, -10000<=x,y<=10000, 1<=S<=100000). n lines follow, each consisting of three integers x<sub>i</sub> y<sub>i</sub> s<sub>i</sub> - the x and y coordinates of the i-th child's home, and the amount of space taken up by this child's present when in Santa's sack, respectively (-10000<=x<sub>i</sub>,y<sub>i</sub><=10000, 1<=s<sub>i</sub><=S).


*******OutputConstraints*******

<p>For each test case output a sequence of space separated integers, corresponding to successive actions that should be taken by Santa:
<div align="justify">
<ul>
<li><i>-i</i> (1<=i<=n) signifies that Santa should travel to his base and pack the present for the i-th child into his sack (he needs to have sufficient room in his sack to do this).
</li>
<li><i>i</i> (1<=i<=n) signifies that Santa should travel to the i-th child's home and leave a present for him/her.
</li>
<li>
0 signifies that Santa should travel back to his base and end his Christmas activity (and that you want to proceed to the next test case).
</li>
</ul>
</div>
<p>
Assume that Santa starts in his base and always travels between points by the shortest possible route (along straight lines). All distances are measured using the Euclidean metric.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 0 0 3
1 0 1
1 0 2
1 0 3

<b>Output:</b>
-1 -2 1 2 -3 3 0

<b>Score:</b>
2/(1+1+1+1)= 0.5
</pre>



______________________________________________________
CTQUINE||||||false||||||

<p>
Evergreen trees are really wonderful. They were treasured by all civilisations of the Western world, from ancient Egiptian priests to Celtic druids in the British Isles. In the late Middle Ages a tradition of placing an evergreen tree at home for Christmas developed in Germany and spread throughout the Old and New World, reaching the Asia Pacific and America in the XIX-th century.
</p>
<p>
Surely, you must have noticed the sad fact that nowadays this global custom, however beautiful it may be, results in the death of millions of coniferous trees worldwide. Help us in our effort to restore the healthy balance. In the Christmas period, draw & plant your own tiny fir tree!
</p>
<p>
Since we are limited to text mode, there is little room for creative art, and solid, well built trees are definitely favoured. An <i>ideal tree</i> consists of several lines (at least 1) of the same length, consisiting of ASCII characters -- both whitespace ("spaces"), and non-whitespace ("relevant characters"). Counting from the top, the number of characters between the first and last relevant characters in a line (inclusive) is equal to 1, 1, 3, 1, 3, 5, 1, 3, 5, 7, 1, 3,... for consecutive lines. The line for which this distance is the largest begins and ends with relevant characters. All other lines contain exactly the same number of spaces to the left of the leftmost relevant character and to the right of the rightmost relevant character (this gives the ideal tree a nice, vertical trunk).
</p>
<p>
Please write a program which outputs a tree as close to an ideal tree as you can get, and keeps it as small as possible (such a tree has the largest chance of sprouting roots when planted). <i>And it can hardly come as a surprise to you to learn that the source code of the program you submit has to be identical to the text it writes to output (character by character, there are no exceptions)!</i>
</p>
<h3>Score</h3>
<p>Your program will be judged as follows: if the program is not a quine (i.e. if it contains no relevant characters or outputs text different than its own source code) it will be judged as a Wrong Answer. Any other program will receive some number of penalty points depending on its size and quality as a tree (the fewer points, the better). One penalty point is given for every line of code used. 10 penalty points are given for a line without any relevant characters (how can you expect a broken tree to grow?). For non-empty lines, the position of the leftmost and rightmost relevant characters in the analyzed tree are compared with respect to corresponding positions in an ideal tree with the same number of lines. The squared differences in position between these two pairs of characters are added to the penalty score.
</p>
<p>
Technical note: a single newline character (ASCII 10) should be used to terminate all lines. ASCII characters 32 (space) and 9 (tab) are treated as single spaces, all other characters are considered relevant. Notice that the problem description doesn't penalise for left out or excessive spaces after the last relevant character of a line (but doesn't allow any difference between the source code and output text in this respect).
</p>

<h3>Example</h3>

<pre>
<b>C source code:</b>
   ;
   ;
  ;;;
   ;
  main(
 )  {;
   ; 
  ; ;   
 /* */     
;return
   0
  ;;}
</pre>
<p>
This code would be judged as Wrong Answer, since it isn't a valid quine. Were it a quine, it would receive 16 penalty points (12 for 12 lines, 4=2<sup>2</sup> additional penalty points for a misplaced rightmost relevant character in line 5).
</p>
<!--
<h3>League rank bonus</h3>
<p>
In addition to the normal ranking points given in the league, 0.50 bonus points will be awarded for the best solution to the problem in a given language. A contestant's score may however never exceed 1.50 points (and will be rounded down to this value if it does).
</p>
-->
<p>
<b>Solutions to this problem may only be submitted in the following languages: C, C++, Pascal, Java, C#, Python, Haskell, OCaml, Brainf**k, Intercal.</p>


______________________________________________________
PIVAL||||||false||||||

<p>In this problem you have to find as many digits of PI as possible.

<h3>Output</h3>
<p>Output must contain as many digits of PI as possible (not more than 1000000).

<h3>Score</h3>
<p>The score awarded to your program will be the first position of the digit where the first difference occured.

<h3>Example</h3>
<pre>
<b>Output:</b>
3.1415926535897932384626433832795
</pre>
<p>will be awarded with 33 points.</p>



______________________________________________________
DCODE||||||false||||||

Byteland is making preparations for the approaching period of <i>feasts,  cabaret shows, and general merrymaking</i>. The women in Byteland are especially excited about the Grand Ball to be held on the last Saturday of the holiday period, and have already started making preparations. At present, one of the most important questions for every lady seems to be: <i>What should I wear for the ball?</i>. This problem is far more important than you might imagine possible, since the months after the period of feasts will offer no celebrations whatsoever, and during this time every lady likes to think back to how charming and original she looked at the ball. And of course, you have to remember that if two female friends come to the party dressed in the same dresses they will both be the subject of jokes and chuckled remarks for years.
</p>
<p>
As in most difficult problems among ladies, the gentlemen of Byteland are forcibly involved and asked to help out. So, every day each woman asks her man for advice on what to wear. Unfortunately very few men in Byteland know anything at all about fashion so they all come to you and ask for help. 
</p>
<p>
You do not have a lot of to do with Bytelandian fashion either but, as a computer specialist and a generally clever person who never gives up, you know how to address any problem. You have modeled the situation as follows:
<ul>
<li>there are 1<=k<=20 days left till the grand feast, 
<li>dresses in Byteland come in different colors, which you have numbered with integers starting from 0,
<li>the relationships between Bytelandian women are given by a graph (adjacent nodes denote two friends),
<li>every lady would like to have a dress of different color than all her friends, otherwise she will be most unhappy.
</ul>
<p>
You have a plan to provide the men with a simple set of rules to help them determine the best, most unique color of clothes for their ladies. Since you only have a limited amount of time to spare, each man will have to content himself with the same algorithm from you. Because most of the men don't use a computer, you should use a very simple language to express your algorithm.

<h3>Task</h3>
<p>
Prepare an algorithm which, if applied properly by all the men, will guarantee that as few of the ladies as possible are unhappy due to their dresses.
</p>
<p>
A short description of the language you should use is given below:
<ul>
<li>
each program is a list of rules,
<li>
each <tt>< rule ></tt> is of the form:
<pre>< rule >::= if < comp_condition > then { < comp_command > };

< comp_command >::=< command >;
< comp_command >::=< command >; < comp_command >

< comp_condition >::=< condition >
< comp_condition >::=not < comp_condition >
< comp_condition >::=(< comp_condition > or < comp_condition >)
< comp_condition >::=(< comp_condition > and < comp_condition >)</pre>
Please note that after each <tt>< command ></tt> and <tt>< rule ></tt> you must put a semicolon.
<br><br>
<li>
<tt>< command ></tt> is simply an assignment of the form:
<pre>< command >::= < symbol >:=< expr ></pre>
<li>
<tt>< symbol ></tt> can be one of the following strings:
<ul>
<li>a state component: <tt>color, a, b</tt>,
<li>an additional local variable: <tt>l0, l1, l2, l3, l4, l5, l6, l7, l8, l9</tt>.
</ul> 
<li>The expression <tt>< expr ></tt> should be constructed using:
<ul>
<li>writable symbols (as given above) and several special read-only variables which give you some information about the graph:
<pre>
deg       degree of current vertex
delta     maximum vertex degree in a graph 
n         number of vertices 
m         number of edges
nr        number of possible colors
daysleft  number of days remaining till the ball
</pre>
<li>
operators (in order of precedence):
<pre>
+ -       arithmetic plus and minus
* / %     arithmetic multiplication, division and remainder 
</pre>
<li>function <tt>rnd(< expr >)</tt>, returning a random number between 0 and <tt>< expr > - 1</tt> inclusive.
<li>functions <tt>mina, minb, minc</tt> returning the minimal value of variable <tt>a, b, color</tt> respectively, taken over all the neighbours of the vertex (or the smallest integer for a vertex without neighbours). Functions <tt>maxa, maxb, maxc</tt> act similarly for maximum values of variables.
</ul>
<li>
<tt>< condition ></tt> is a logical expression taking one of two forms:
<pre>< condition >::= < expr > < operator > < expr >
< condition >::= < exist-operator > ( < expr > )
</pre> The binary <tt>< operator ></tt> is one of the comparison operators ==, <, or >. The unary <tt>< exist-operator ></tt> is one of the following functions: <tt>Eaeq, Ebeq, Eceq</tt>, which return true iff  for some neighbour of the given vertex the value of variable <tt>a, b, color</tt>, respectively, is equal to <tt>< expr ></tt>.
</ul>
<p>
The algorithm has to be applied by every man every day. More formally speaking: at the start of the process all variables have random values. Every morning all the men assign 0 to their variables <tt>l0,l1,...,l9</tt>. Exactly at noon, each lady comes to ask for advice. The man does all he can to help her: he processes all his rules from top to bottom, and repeats the process as long as at least one of the IF clauses is true. (However, if he has to do it more than one hundred times, he will give up in dispair). Then he tells the lady the color he has chosen for her. Every evening, the men meet at the pub, and when they have nothing left to talk about, they exchange information about how the women are boring them, and what values of <tt>a, b</tt> and <tt>color</tt> they have had to come up with today. (It is interesting to note that, as a side effect, functions <tt>E_eq</tt>, <tt>min_</tt> and <tt>max_</tt> actually make use of the previous day's values of the neighbours' variables.) 
<p>Finally, on the day of the ball the women put on clothing corresponding to the color last suggested by their men and it is time to judge how effective your algorithm has been. (This is one of these tasks which, if done badly, may result in getting the programmer lynched by an angry mob.)

<h3>Score</h3>
<p>
There are 50 test cases on which your program will be tested. Graphs used in tests will have no more than 25 vertices. Your score is the sum of scores of your program taken over all test cases. For each test case the score is equal to the ratio of the number of correctly colored vertices (i.e. such that 0<= color< nr and Eceq(color) is false) to the total number of vertices. If all vertices are correctly colored, a bonus of 1/(1+ <i>maximum color used</i>) points is awarded.
<p>A program will be assessed as Compilation Error if it cannot be interpreted due to syntactic errors. If on a given day the rules for a vertex cannot be processed within 100 iterations or the entire simulation takes more than about 60s, your program will be judged as Time Limit Exceeded.

<h3>Example</h3>
<p>
Submit code in the language TEXT, <a href="http://sphere.pl/~kosowski/SPOJ/DCODE">the judge</a> will interpret it properly. Here is an example of a simple single-rule program.
<pre>
<b>Code:</b>
if (l0==0 and not Eceq ((color-1)%n)) then {color:=(color-1)%n; l0:=1;};

<b>Score:</b>
5.491
</pre>


______________________________________________________
MFENCE||||||true||||||


<p>After the tragic end of the watermelon plantation, Johnny has switched to farming. More precisely, he is now a Certified Livestock Supervisor (i.e. shepherd) tending herds of antelope. It is his task to divide the animals into herds, and to build a fence around each herd, trying to keep the total length of all fences as small as possible. Each herd must consist of at least 2 antelope, and the antelope may stand arbitrarily close to the fence itself. 

*******InputConstraints*******

<p>
<br><i>t</i> [the number of test cases <= 1000]
<br><i>n</i> [2 <= the number of antelope <= 100]
<br><i>x</i><sub>1</sub></i> y</i><sub>1</sub></i>[coordinates of the antelope, between -1000 and 1000]
<br><i>x</i><sub>2</sub></i> y</i><sub>2</sub></i>
<br>.....
<br><i>x</i><sub>n</sub> y<sub>n</sub></i>
<br>[next test cases]


*******OutputConstraints*******

<p>
<br>case <i>i</i> Y [N - if you want to skip the testcase]
<br><i>c</i> [the number of herds]
<br><i>a s<sub></i>1<i></sub>  s<sub></i>2<i></sub> ... s<sub>a</sub></i> [2 <= <i>a</i> - the number of antelope in the first herd, and the numbers of the antelope in this herd in the order from the input sequence]
<br>[next test cases]

*******IOTestCases*******

<pre>

<b>Input:</b>
6
2
0 0
5 0
3
4 0
-4 -5
2 3
5
20 10
10 10
40 50
-20 -40
-30 -20
4
2 4
2 -4
2 0
-5 -3
3
2 4
-4 -4
2 3
4
-1 -3
-1 5
3 -5
-1 5

<b>Output:</b>
case 1 Y
1
2 1 2
case 2 Y
1
3 1 2 3
case 3 Y
2
3 1 2 3
2 4 5
case 4 Y
2
2 1 4
2 2 3
case 5 Y
1
3 1 2 3
case 6 Y
1
4 1 2 3 4

<b>Score:</b>
3.079001
</pre>
<p align=justify><i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with score > 0.5</p>



______________________________________________________
ATSHELT||||||true||||||


<p>The election campaign of the mayor of Byteland continues. His advisors firmly believe that a military touch might do good to his image. On the other hand, aggressive use of arms might arouse the insane anger of the pacifist part of the electorate. So, investing in national defence seems to be the best solution. And this is why the capital of Byteland will receive its first ever atomic shelters.
<p>
The Bytelandian capital consists of exactly <i>n</i> buildings and the mayor intends to build shelters underneath exactly <i>k</i> of them. Now it is your task to layout the shelters in the city in such a way as to minimise the maximum distance a citizen of Byteland may have to cover to reach the nearest atomic shelter. After all, there is nothing more important than a mayor who guarantees your safety by putting an atomic shelter not far from your house.


*******InputConstraints*******

<p>
<i>t</i> [the number of test cases <= 1000]
<br><i>n k</i> [2 <= the number of different buildings <= 100, 1 <= the number of shelters <= <i>n</i>-1]
<br><i>x<sub></i>1</sub> <i>y<sub></i>1</sub> [-1000 <= coordinates <= 1000]
<br><i>x<sub></i>2</sub> <i>y<sub></i>2</sub> 
<br>.....
<br><i>x<sub>n</sub> y<sub>n</sub> </i>
<br>[next test cases]
</p>


*******OutputConstraints*******

<p>
case <i>i</i> Y [N if you wish to skip this test case]
<br><i>b<sub></i>1</sub> <i>b<sub></i>2</sub>...
<i>b<sub>k</sub></i> [numbers of buildings to put shelters in, in increasing input order]
<br>
[next test cases]


*******IOTestCases*******


<pre>
<b>Input:</b>
5
5 2
-3 -4
-4 3
2 -3
-2 -3
-5 5
5 4
2 0
-5 -4
1 -1
-1 0
5 -5
5 2
-3 0
5 -2
-1 -5
2 4
4 5
5 3
5 0
-1 -5
3 2
-5 1
-1 3
5 4
-1 2
1 1
5 4
0 5
-2 2

<b>Output:</b>
case 1 Y
3 4
case 2 Y
1 3 4 5
case 3 Y
4 5
case 4 Y
1 2 3
case 5 N

<b>Score:</b>
5.592004

</pre>

<p align=justify><i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with Y answer.



______________________________________________________
TMBOX||||||false||||||

<p>If you've ever dealt with the theory of information, you are no doubt familiar with the theoretical notion of a <i>Turing Machine</i>. But have you ever wondered what you could do if you got a <i>real</i> Turing Machine -- one of those big metal things with all the cranks and levers and rolls of infinite tape that looks suspiciously like toilet paper?...
<p>
The sad answer is: there are few interesting things that can be done with such a machine. Even problems that have a little charm in the theoretical model (like the intractable Halting Problem) can be solved very efficiently with practical brute-force algorithms (see e.g. the figure at the end of the problem description). But there is one thing that you can do with a practical Turing Machine, and can't do with a theoretical one, and it is: to use it as a music box.<p>Our Turing Machine has exactly one state variable (an integer in the range 0 to 999) and is equipped with an infinite tape, consisting of cells with symbols from a given alphabet encoded on them. A movable read/write head is positioned over some cell of the tape, and is operated according to the list of rules encoded in the machine. The rules are of the form <tt>S1 C1 S2 C2 M</tt>, which means: if the machine is in state S1 and C1 is written in the current cell, change state to S2, write C2 in the current cell, and move the head as described by move M (one cell left, one cell right, or not at all). If no matching rule is found for the given state the machine should halt.<p>
Now, here is the good bit. The head makes a creaking sound when performing each rule. It goes <tt>da</tt> when moved right, <tt>di</tt> when moved left, and <tt>um</tt> when left in place. Suppose that each cell of the tape can contain one of 16 possible symbols, formed as the concatenation of exactly two of the words: <tt>da</tt>, <tt>di</tt>, <tt>um</tt> and <tt>sh</tt> for silence. Initially, nearly all the cells of the tape are filled with the symbol <tt>shsh</tt>. Only a few (not more than 500) consecutive cells form a piece of music, each cell encoding a pair of sounds (one of 9 combinations of <tt>da</tt>, <tt>di</tt> or <tt>um</tt>, without any silences). The head of the machine is initially positioned over the leftmost of the cells containing sounds.<p>
Now it is your task to use the Turing machine to play the piece of music written on its tape (as read from left to right, starting from the initial position of the head, as far as the first silence) as accurately as possible, using the head itself to produce the sounds required.<p>

<h3>Output</h3>
<p>The output of your program must contain a set of rules describing the behaviour of the Turing Machine designed for playing music. Each rule must be of the form <tt>S1 C1 S2 C2 M</tt>, where S1 and S2 are integers from the range 0..999, C1 and C2 belong to the 16 symbols of the alphabet, while M describes the move direction of the head by the sound it makes (<tt>da</tt>, <tt>di</tt> or <tt>um</tt>).

<h3>Score</h3>
<p>
Your program will be tested multiple times for different pieces of music written on the tape. The score of your program is equal to the total of non-negative scores, taken over all test cases.
<p>
For a test case with n notes (n/2 non-silent cells) your program will receive n-d points, where d denotes the edit distance between the music played and the music required (i.e. the minimum total number of notes that have to be inserted into or changed in both the pieces to obtain the same piece of music).

<h3>Example</h3>
<p>
Consider the following set of rules output by a program:
<pre>
000 dada 000 dada da
000 umda 000 dada da
000 shsh 000 shsh da
000 didi 001 didi di
001 dada 002 didi di
</pre>
<p>
Then the results of exemplary testing could be as follows:
<pre>
<b>Music:</b> da da|da da|da da|di di|um um
<b>Plays:</b> da da da di di
<b>Score:</b> 5

<b>Music:</b> um da|um da|um da|da um|di di
<b>Plays:</b> da da da
<b>Score:</b> 3

<b>Total:</b> 5 + 3 = 8 points
</pre>

<p><i>Bonus info:</i> There are no more than 100 tests. The score format is <i>s.xxyy</i>, where <i>xx</i> denotes the number of tests for which your machine played the music perfectly, <i>yy</i> - the number of tests for which it received a positive score.
<p>
<img src="http://www.spoj.pl/content/adrian:halting.png" alt="While this machine halts, it loops. We just help it in its agony."</img>


______________________________________________________
HWORK||||||true||||||


<p>One day when Johnny was still a schoolboy he got caught red-handed by his teacher while doing a Very Mischievous Thing (of the sort that you would expect of Johnny). As a punishment he was told off and assigned additional homework. The teacher underlined quite a few words in a dictionary and asked Johnny to rewrite all of them to his notebook.
<p>
Johnny wasn't at all pleased about this, since writing by hand is always a painful burden. Fortunately, Johnny's dad took pity on the crying boy and offered to help. He presented his son with a few sheets of carbon paper, thanks to which any text Johnny wrote was at once ready in exactly <i>k</i> copies. Some of the characters of particular copies could then be erased using a white correction pen, so as to obtain only the words required by the teacher. All the characters forming a single word have to be directly adjacent, but words can be written in any order on the sheets and different words can be separated by an arbitrary (possibly 0) amount of space.
<p>
Johnny has cheered up considerably by now, since the bit with the carbon paper and correction pen sounds rather fun. All that remains to be done is to write down an appropriate text, obviously keeping it as short as possible. Please advise Johnny what to write.


*******InputConstraints*******

<p>
Input begins with a single integer t (t=1000). t test cases follow.
<p>
Each test case starts with a line containing two integers n k, respectively denoting the number of words the teacher has asked Johnny to write and the total number of carbon copies that Johnny creates, including the original (1<=k<=n<=512). Each of the next n lines contains a word assigned by the teacher - a string of between 4 and 12 characters 'a', 'b', 'c' or 'd'. All words given at input are Bytelandian nouns in common use.


*******OutputConstraints*******

<p>For the i-th test case output a line with the text <tt>case i Y</tt> or <tt>case i N</tt>, specifying whether you wish to solve the given case. Then in the former case
print a single line containing the text that should be written by Johnny. Exactly n lines with a single integer on each should follow, the i-th representing the position of the first letter of the i-th word (on the page on which this word eventually appears, before applying the correction pen).


*******IOTestCases*******

<pre>
<b>Input:</b>
1
4 2
aaaa
aaaa
aaaa
bbaaa

<b>Output:</b>
case 1 Y
aaaabbaaaa
1
1
7
5

<b>Score:</b>
17 - 10 = 7
</pre>
<p>
When given in to the teacher, the 2 pages of homework may look as follows:
<pre>
aaaa__aaaa
aaaabbaaa_
</pre>


______________________________________________________
BRIGAMI||||||true||||||


<p>
Many of Johnny's school friends have perfected the art of folding a square sheet of paper into beautiful shapes (known as <i>origami</i>). Johnny attempted to follow suit, but to his dismay he found that his fingers were a little to clumsy for the task in hand. After spending yet another day creating something especially disastrous (later named "From the series: <i>Crumpled Pieces of Paper Seen with an Artist's Eye</i>, No. 27"), Johnny decided he'd had enough. Therefore he proudly proclaimed to all his friends that origami was not fit for serious people, and that he intended to become the master of <i>kirigami</i>, the art of cutting paper. But after experimenting with kirigami for a few weeks, he sold the rather miserable results of his labour to the local confetti store, and announced that true beauty lay in convex polygons, and that they were the only shapes a true artist should ever cut. Still, if a person is as lazy and inapt as Johnny, even such a seemingly simple task may turn out a real challenge.
<p>
The method Johnny uses to create works of art consists of several steps. First, he takes a sheet of paper in the shape of a convex polygon and uses a ruler and pencil to draw a convex polygon  (lying entirely within the sheet). Then, he proceeds to cut it out using a ruler and a razor-edged paper cutter. Every cut is thus a segment of a line, reaching from one edge of the sheet of paper to another, and adjacent to one side of the drawn polygon. Johnny then discards the cut off corner of the sheet and continues cutting until the shape outlined in pencil is completely cut out. Since he is extremely disinclined to perform hard work, please write a program to help him minimise the total length of the lines along which the paper is cut.


*******InputConstraints*******

<p>
Input begins with a single integer t (t=200). t test cases follow. 
<p>
Each test case starts with a line containing two integers m n, denoting the number of vertices of the sheet of paper and the shape drawn on it, respectively (3<=m,n<=600). The next m lines contain two integers <i>a<sub></i>i</sub> <i>b<sub></i>i</sub>  each (-20000<=<i>a<sub></i>i</sub>, <i>b<sub></i>i</sub> <=20000), corresponding to the x and y coordinates of vertices of the sheet of paper (given in clockwise order). The description of the shape drawn on the sheet follows, given in the next n lines in a similar form.


*******OutputConstraints*******

<p>
For the i-th test case output a line with the text <tt>case i Y</tt> or <tt>case i N</tt>, specifying whether you wish to solve the given case. In the former case, in the next line output a permutation of the numbers 1...n denoting the order in which Johnny is supposed to cut out the respective sides of the shape drawn on the sheet (vertices are numbered from 1 to n in the input order, and side <i>s</i> connects vertices  <i>s</i> and 1 + <i>s</i> mod n).


*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 4
0 0
0 2
2 2
2 0
0 1
1 2
2 1
1 0
4 3
0 0
0 3
3 3
3 0
1 1
1 2
2 2
4 3
0 0
0 3
3 3
3 0
1 1
1 2
2 2

<b>Output:</b>
case 1 Y
1 2 3 4
case 2 Y
1 2 3
case 3 Y
3 2 1

<b>Score:</b>
4.94

</pre>


______________________________________________________
DERAIL||||||true||||||


<p>Many cities in Byteland look back on the days when Johnny the First was king, and when nobody bothered about public spending. One of things that the citizens liked most about Johnny was that whenever he had a hangover, he would sign any public petition brought forth to him, just for the sake of peace and quiet. Rail travel was extremely popular, and lots of cities and villages requested railway lines connecting them directly, to which King Johnny always graciously agreed (even if he wasn't quite sure what he was agreeing to). Seeing that money was no object, the railway tracks were built in such a way as to connect pairs of cities directly, along straight lines. If two railroads intersected, a complex intersection involving bridges and tunnels was built and everyone seemed perfectly happy.
<p>
And then after Johnny's abdication, democracy returned, and the happy days of Byteland ended. One of the first things that had to be done was closing down most of the railway lines. The new government intends to disassemble a large part of the direct railway connections, preserving barely enough to make travel possible between any two cities (perhaps via other cities on the way). The total cost of maintenance of the lines which remain open, equal to <i>k</i> Bytelandian Dollars per kilometer of track open and <i>l</i> Bytelandian Dollars per intersection of 2 used tracks, is to be as low as possible. Please help the government decide which railroads should remain open.


*******InputConstraints*******

<p>Input starts with a single integer t, the number of test cases (t<=100). t test cases follow.<p>

Each test case begins with a line containing two integers n m k l, denoting the number of cities, the number of direct connections between cities, the cost of upkeep of a kilometer of track, and the cost of upkeep of a single railway line intersection, respectively (3<=n<=m<=10000, 0<=k,l<=100000). Each of the next n lines contains two integers x<sub>i</sub> y<sub>i</sub>, corresponding to the X and Y coordinates of the i-th city, measured in kilometers, respectively (-40000<=x<sub>i</sub>,y<sub>i</sub><=40000). Then exactly m lines follow, containing a pair of integers a<sub>i</sub> b<sub>i</sub> each, which denote that cities a<sub>i</sub> and b<sub>i</sub>, numbered in input order, are connected by a direct railway track (1<=a<sub>i</sub>, b<sub>i</sub><=n). No three cities are collinear and no three tracks intersect at one point. All tracks are bidirectional.


*******OutputConstraints*******

<p>For the i-th test case output a line containing the text <tt>case <i>i</i> Y</tt> or <tt>case <i>i</i> N</tt>, specifying whether you wish to solve the given case. Then in the former case, write exactly n-1 lines containing one integer each -- the numbers of the railway connections that ought to be left open (numbered in input order). It is guaranteed that for the input data some solution always exists.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4 5 1 100
0 0
0 1
1 1
1 0
1 2
2 3
1 3
3 4
4 2

<b>Output:</b>
case 1 Y
3
2
5

<b>Score:</b>
(100+1+1+1+1.414+1.414) / (100+1+1.414+1.414) - 1 = 0.019
</pre>

<p><img src="http://www.spoj.pl/content/adrian:derail.png" alt="Illustration to sample test data"/>


______________________________________________________
CROSSES||||||true||||||


<p>The game of gomoku (otherwise known as naughts & crosses), played on an <i>n x n</i> board has many interesting variations. One of them is the Game of Crosses & Crosses, with the following set of rules:
<ul>
<li>Two players - red and black - take it in turns to place one cross of their respective color on an unoccupied square of the <i>n x n</i> gaming board. Red starts the game.
<li>After each player's move any rectangles with sides equal to at least 2, lying entirely within the gaming board and covered completely by crosses, are simultaneously removed (cut off) from the gaming board and the game continues.
<li>When all the squares remaining in the gaming board are covered by crosses, the game comes to an end. The score of each player is equal to the number of crosses of his color left standing on the gaming board, and the player with the higher score is considered the winner.
</ul>
<p>
The game of crosses & crosses feels rather like playing a degenerated game of Go with an army of suicide bombers. For many years now it has been the favourite passtime of Bytelandian schoolchildren during their lessons. Little Johnny was no different, and among his friends he actually became a notable crossing champion.
<p>
But not many people knew about Johnny's crossing talent, and Johnny often used this to his advantage. So when a few years after Johnny's abdication from the throne of Byteland an unsuspecting publisher signed a million dolar contract with the ex-king for a series of memoirs entitled <i>The famous victories of Johnny the Great</i>, he was certainly not prepared for what he received -- a detailed account of Johnny's childhood games of crosses & crosses. To make matters worse, all accounts are written by Johnny in exciting prose, rich in action, e.g.: "<tt>Then I played yet another game on a 3x3 board. I placed my first cross at (1,1). Then I placed a cross at (2,3). The next cross I placed at (2,2). The cross after that I placed at (3,3). Finally, I placed a cross at (1,2) and I won the game 2:1.</tt>".
<p>In a desperate effort to save the day, the publisher employed you to create illustrations for the book. You are given a free hand in reinacting the games (and in particular the oponent's moves, which Johnny has modestly left out), provided your version of events is not an evident contradiction of Johnny's text.


*******InputConstraints*******

<p>Input begins with a line containing a single integer t (t=100). t test cases follow.

<p>Each test case starts with a line with three integers describing a single game: n sr sb, denoting the length of the side of the playing board, the number of points scored by the red player (Johnny) and the number of points scored by the black player (Johnny's oponent), respectively (3<=n<=250, 0<=sb< sr). The next ceil(n<sup>2</sup>/2) lines contain 2 integers x<sub>i</sub> y<sub>i</sub> each - the coordinates of the squares where Johnny placed his crosses in successive moves (1<= x<sub>i</sub>, y<sub>i</sub> <= n).


*******OutputConstraints*******

<p>For the i-th test case output a line with the text <tt>case i Y</tt> or <tt>case i N</tt>, specifying whether you wish to solve the given case. Then in the former case print  exactly floor(n<sup>2</sup>/2) lines containining 2 integers each - the coordinates of the squares where Johnny's anonymous oponent placed his crosses in successive moves.
 

*******IOTestCases*******


<pre>
<b>Input:</b>
1
3 2 1
1 1
2 3
2 2
3 3
1 2

<b>Output:</b>
case 1 Y
3 1
1 3
2 1
3 2

<b>Score:</b>
1
</pre>
<p>
<img src="http://www.spoj.pl/content/adrian:crosses.png" alt="Illustration to sample test data"/>
</p>
<b>
Warning: large Input/Output data, be careful with certain languages
</b>


______________________________________________________
EVAL||||||true||||||


<p>In this problem you have to find as many digits of E as possible.<BR>
</p>


*******InputConstraints*******

<p>There is no input for this problem<BR>


*******OutputConstraints*******

<p>Output must contain as many digits of E as possible (max = 1000000)<BR>


*******IOTestCases*******

<b>Output:</b>
<pre>
2.7182<BR>
</pre>
<p>will be awarded with 6 points.</p>



______________________________________________________
BFORG||||||true||||||


<p>The relationship between The University of Byteland and King Johnny was never a friendly one. The king was the easy-going, open-minded sort of person who is prepared to turn a blind eye to the embezzlement of public funds, but inwardly revolts at the thought of money going to waste, and supporting a university was to the king a perfect example of a waste of money. On the other hand, the chancellor of the university showed no tolerance whatsoever, and frequently stated in public that Byteland was being governed by a monarch who took terrible decisions when he was drunk and even worse ones when he was sober. After some time of bad-tempered coexistence, the king had had enough and decided to close down the university. However, the king's councillors advised against this move, suggesting it might cause social unrest. The king yielded to their advice, and instead established a law which banned all organisations, clubs and associations active at the university.</p>
<p>
This action had a rather curious effect on the usually lazy students of the university. They had never before even thought of organising any sort of fellowship, but now they immediately decided they needed to set one up. And this is how the <i>Secret Fellowship</i> came to life.
<p>
The main problem that faced the management of the Fellowship was to organise members' meetings in such a way as to minimise the risk to the participants. It was decided that the <i>n</i> members of the fellowship should be split into <i>k</i> secret divisions, each consisting of at least 2 members. All members belonging to the same division would then meet regularly, and they would take it in turns to host the meetings of the division in their houses.
<p>
But one more important factor has to be taken into account -- the laziness of students. It is therefore your task to form the divisions in such a way that the furthest distance a student may ever be asked to walk is as short as possible.


*******InputConstraints*******

<p>The first line of input contains a single integer t, the number of test cases (t=1000). t test cases follow.
<p>
Each test cases starts with a line containing two integers <i>n k</i>, denoting the number of students and the number of divisions to be formed, respectively (2<=2<i>k</i><=<i>n</i><=200). Each of the next <i>n</i> lines contains two integers <i>x<sub>i</sub> y<sub>i</sub></i> each (-1000 <= <i>x<sub>i</sub>,y<sub>i</sub></i> <= 1000), denoting the coordinates of the houses of successive students.


*******OutputConstraints*******

<p>
For the <i>i</i>-th test case output a line with the text <tt>case <i>i</i> Y</tt> or <tt>case <i>i</i> N</tt>, specifying whether you wish to solve the given case. Then in the former case print exactly <i>k</i> lines. Each line should start with integer <i>n<sub>j</sub></i> (<i>n<sub>j</sub></i>>=2) and be followed by a space separated list of exactly <i>n<sub>j</sub></i> increasing integers <i>s<sub>jl</sub></i>, denoting the students belonging to the <i>j</i>-th division, numbered in input order (1<=<i>s<sub>jl</sub></i><=n). All divisions must be disjoint and the sum of all numbers <i>n<sub>j</sub></i> must equal <i>n</i>.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
6 3
0 0
1 0
0 1
1 1
2 0
2 1
6 2
0 0
1 0
0 1
1 1
2 0
2 1
6 2
0 0
1 0
0 1
1 1
2 0
2 1

<b>Output:</b>
case 1 Y
3 1 2 4
3 3 5 6
case 2 Y
3 1 2 5
3 3 4 6
case 3 Y
2 1 3
4 2 4 5 6

<b>Score:</b>
1.849003

</pre>

<p align=justify><i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with Y answer.



______________________________________________________
JCROSS||||||true||||||


<p>Japan crossword is a very popular game. It represents encoded picture which consists of filled block of cells.
At the start of game you see empty grid. Each row (column) has some numbers in beginning of the row (column).
Each number means how many continious cells are filled in a hidden picture (length of the filled blocks). 
Filled blocks of cells are arranged from left to right and from top to bottom. 
Between filled blocks must be at least one empty cell. For example, numbers are 4, 2, 7 mean that there are three groups 
with 4, 2, and 7 filled cells in it.
Your task is decode hidden picture using hints.
<br>
<table align="center">
<tr>
<td><img src="http://www.spoj.pl/content/maxsu:s1.gif">
</td>
<td> </td>
<td><img src="http://www.spoj.pl/content/maxsu:s4.gif">
</td></tr>
</table>



*******InputConstraints*******

<p>The first line of input contains a single positive integer t<=300 - the number of test cases.
Then for every test case first line specifies integer numbers R and C (number of rows and columns) of the picture (1<=R<=50, 1<=C<=100).
Below R lines are follow. Each line consists of any integers for horizontal hints. The very last number for every line is 0. Then C lines are follow. Each line consists of any integers for vertical hints. And again every line ends with 0.


*******OutputConstraints*******

<p>For every test case you should write decoded picture in the form of rectangle with R rows and C characters in each line.
Symbol '#'(sharp) means filled block and symbol '.'(point) means empty cell. 


*******IOTestCases*******


<pre>
<b>Input:</b>
1
10 5
3 0
2 2 0
5 0
5 0
3 0
1 0
1 0
3 0
2 0
3 0
3 0
5 0
1 8 0
5 3 0
3 1 1 0

<b>Output:</b>
.###.
##.##
#####
#####
.###.
..#..
..#..
..###
..##.
..###

<b>Score:</b>
(10+5)*1.5 = 22.500
</pre>
<p align=justify><i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of entirely correct test cases</p>
</pre>



______________________________________________________
IMGREC1||||||true||||||


<p>
One of the hard problems that borrows human minds and can find the practical application in creating Artifical Intelegence is problem of Image Recognition. This problem in its simplest form can be applied in many spheres of manufactures. In given problem we interest in one elementary case of Image Recognition. You have to make choise form only two possible images that are represented on a bicoloured picture. This images is "dagger" or "zero". This images can be rotated, deformed, scaled, moved, have some noise or different width of lines on the picture. But human always can correctly define that is represented on a picture.
<BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases, than <i>t</i> test cases follows. [<i>t</i> <= 100]<BR>
[empty line]<BR>
Eache test case starts with integer N equals to number of pictures in this test, than N pictures follows. [4 <= N <= 10]<BR> 
[empty line]<BR>
Description of each picture starts from two integers H and W - height and width of picture accordingly. [5 <= H, W <= 50]<BR>
than follows exactly H lines each consists of W chars.<BR>
Description of picture consists of two simbols only: 'x' - painted square and '.' - empty square.
You can be assured, that no other symbols are present at the description of a picture.
 

*******OutputConstraints*******

<p>For each test it is necessary to deduce on a separate line a string of chars with length equals to N. The string  should consist of a set of two chars 'x' and '0'. Where 'x' corresponds to a dagger on a picture, and '0' corresponds to a zero. 
If answer will contains other chars or length of a string won't equals to N you will receive status "Wrong Answer".
</p>


*******IOTestCases*******

<b>Input:</b>

<pre>
1

5

5 5
x...x
.x.x.
..x..
.x.x.
x...x
5 5
xxxxx
x...x
x...x
x...x
xxxxx
6 6
..x...
..x...
xxxxxx
..x...
..x...
......
5 5
.xxx.
x...x
x...x
x...x
.xxx.
5 5
.xxx.
.x.x.
.xxx.
.....
.....
</pre>

<b>Output:</b>

<pre>
x0x00
</pre>

<b>Output:</b>

<p>You will recieve 5 points for this solution</p>


______________________________________________________
XWORDS||||||true||||||


<p> It is quite simple really: I'll give you a list of words and you use them to make a crossword puzzle 
in a 16x32 grid. You'll be able to use the words more than once in the grid and there is a special 
"flipper" square you can use as a wild card. The winner will be the program that can create the "best" 
fully connected crossword in one minute. The original problem appeared here: <a href="http://dinsights.com/POTM/XWORDS/details.php">Programmer of the month contest (Feb. 2005)</a>.<BR><BR>

<b>The Starting Grid</b><BR>
 - The grid will consist of 32 columns and 16 rows<BR><BR>

<b>The Word List</b><BR>
 - There will be at least one word and fewer than 512 words in the wordlist<BR>
 - Each word will be two letters long or more (WORDLENGTH >= 2)<BR>
 - Each word will be sixteen letters long or less (WORDLENGTH <= 16) <BR>
 - Words in the wordlist will contain only letters "A" through "Z" in upper case letters with no white space<BR>
 - Words will appear in the wordlist with one word per line<BR>
 - Words will not be repeated in the wordlist, but they may be used multiple times in your solution<BR>
 - Do not assume anything (like sorting) about arrangement of the words in the list <BR>
 - Do not assume anything about whether a "word" is contained in any dictionary: POTM, ABCDEFG, and XYZZY are all possible "words"<BR>
 - Words in the list may be subsets of one another: SCAT, CAT, CATS and XCATS may all appear in the same wordlist ... there is no bonus for using words containing other words ... see scoring note below<BR>
 - There may be words in the wordlist which are not possible to connect to any other words in the wordlist<BR><BR>

<b>Placement of the Words onto the Grid</b><BR>
 - Any word from the word list may be used in your solution as many times as you wish<BR>
 - You may use any subset of words in the wordlist, or all of them<BR>
 - All words placed on the grid must read left-to-right or downwards<BR>
 - All words placed on the grid must be connected to one another<BR>
 - ONLY words on the wordlist may be used and empty squares or grid boundaries must be used immediately before and after all words<BR>
 - Words may not "wrap-around" the grid boundaries in any sense<BR>
 - Your solution does not need to be symmetric in any sense<BR>
 - Output which is not connected, or contains words which do not appear in the wordlist, will receive a score of zero<BR><BR>

<b>The Flipper Square</b><BR>
 - There is one (and only one) "flipper" square (denoted by an asterisk) permitted in your output<BR>
 - You may place the flipper square within any word you place on the grid<BR>
 - When used, it may represent a different letter in the horizontal and vertical words of which it is a part<BR>
 - Any words formed using the "flipper" square must be part of the wordlist (if C*T is placed on the grid, then there must be a three letter word in the wordlist that begins with "C" and ends in "T")<BR>
 - The "flipper" will likely be used at a word intersection, although this is not required (why would you use it elsewhere??)<BR><BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 10]<BR>
<i>N</i> - number of words for given test case, then <i>N</i> lines follows
each line contain one word, in upper case. Word will contain no whitespace or characters other than [A-Z].
</p>


*******OutputConstraints*******

<p>For each testcase your output must contain exactly 16 lines with 32 characters followed by a line feed as in printf("\n") on each line. The letters in your output must be upper case [A-Z} as in the wordlist. The "Flipper" (if used) in your output should be an asterisk "*". Squares that do not contain a letter or a flipper should contain an underbar "_". There should be no white space in your output. Your output must be exactly t*528 bytes.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
28
NECESSARY
POLITICAL
CONNECTED
SEPARATE
OPINIONS
REQUIRES
SEPARATION
SELFEVIDENT
UNALIENABLE
HAPPINESS
GOVERNMENTS
INSTITUTED
DERIVING
GOVERNMENT
DESTRUCTIVE
INSTITUTE
FOUNDATION
PRINCIPLES
ORGANIZING
ESTABLISHED
TRANSIENT
ACCORDINGLY
EXPERIENCE
SUFFERABLE
THEMSELVES
ABOLISHING
ACCUSTOMED
USURPATIONS

<b>Output:</b>
CONNECTED__USURPATIONS_CONNECTED
O_E___R___R_U____R_P___O_E___R__
NECESSARY_E_FOUNDATION_NECESSARY
N_E___N___Q_F____N_N___N_E_U_N__
E_S_INSTITUTED_INSTITUTE_S_F_S__
C_S_N_I___I_R____I_O___C_S_F_I_E
TRANSIENT_R_A_GOVERNMENT_A_E_E_S
E_R_T_N_H_E_B____N_S_X_E_R_R_N_T
D_Y_I_THEMSELVES_T___P_D_Y_A_T_A
____T___M___E__E_____E_____B___B
HAPP*NESS______P____PRINCIPLES_L
____T___E_SEPARATION_I_____E___I
SUFFERABLE_____R_____E_________S
____D___V_SEPARATION_NECESSARY_H
________E______T_____C_________E
HAPPINESS_THEMSELVES_ESTABLISHED

<b>Score:</b>
341
</pre>


______________________________________________________
MGAME||||||true||||||


<p>One of the most popular types of computer multiplayer games in existence is the simple deathmatch shooter, in which it is the player's task to eliminate all other players on the gaming board. Usually, at the start of the game the players are distributed fairly randomly over the board, and run around in order to find and shoot opponents.
<p>But there is a fair percentage of players (especially the younger ones) who enjoy the shooting most and give up the running altogether. To achieve this, at the start of the match all players are arranged very close to each other, and everyone opens fire in the very first second of the game. The gunfire continues until everyone within sight of everyone else is dead, and then the game ends, since no one feels like moving from their selected camping point.
<p>Parents are often helpless when their children get addicted to this sort of entertainment, and don't know how to make them stop playing without causing a major quarrel. But Johnny's dad has developed the perfect method. He always says to his son: <i>Sure, I'll let you play another round, but tell me please how long it'll take!</i> And no, the answer <i>only a minute or two</i> is just not good enough.
<p>
At the start of the game, the players are positioned on the board and each player has a list of other players he is capable of eliminating (from his location). At the start of every second, each living player fires a round towards one of the opponents on his list (provided the list is not yet empty). Players who have been hit are eliminated from the game directly after the shots were fired. The situation continues until the lists of all surviving players are empty.
<p>
We are not asking you to give an exact answer the question posed by Johnny's dad, but only for an honest estimate. Given an arrangement of players on the board, try to find scenarios of shooting leading to the longest possible and the shortest possible game.


*******InputConstraints*******

<p>The first line of input contains a single integer <i>t</i>, the number of test cases (t=100). <i>t</i> test cases follow. 

Each test case starts with a line containing integer <i>n</i>, denoting the number of players on the board (2<=<i>n</i><=500). Each of the next <i>n</i> lines contains a list of integers: first, <i>d<sub>i</sub></i> the length of the i-th player's list, followed by the considered list of exactly <i>d<sub>i</sub></i> other players (numbered in input order from the range 1 to <i>n</i>).

*******OutputConstraints*******

<p>For the <i>i</i>-th test case output a line with the text <tt>case <i>i</i> Y</tt> or <tt>case <i>i</i> N</tt>, specifying whether you wish to solve the given case. Then in the former case print a description of the longest known game scenario, followed by a description of the shortest known game scenario. Each scenario starts with an integer <i>t</i>, the duration of the game measured in seconds (0<=<i>t</i><=<i>n-1</i>). Each of the next <i>t</i> lines contains a list of integers, representing the identifiers of players eliminated by respective players in the given second (one integer for each player left alive and capable of hitting an enemy at the start of the second, ordered according to the input identifiers of the shooting players).


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
2 2 3
2 1 3
3 1 2 4
1 3

<b>Output:</b>
case 1 Y
2
3 3 4 3
2 1
1
2 1 4 3

<b>Score:</b>
2/1 - 1 = 1.00
</pre>



______________________________________________________
DISPLACE||||||true||||||


<p>You are given two strings S1, S2 of not more than 250 characters each. S1 does not contain characters &#8216;(&#8216; and &#8216;)&#8217;. You can swap two consecutive characters in S1.
Your task is to do it in as small a number of swapping operations as possible to obtain a string which contains S2 as a substring (you can assume that for the given input, this can always be done).


*******InputConstraints*******

<p>The first line of the input file contains an integer t representing the number of test cases (t < 20). Then t test cases follow. Each test case has the following form:
<ul>
<li>The first line contains S1
<li>The second line contains S2
</ul>


*******OutputConstraints*******

<p>For each test case, output 0 iff you do not want to solve this test case. Otherwise, output a line containing the number 1 and two more lines of the following form:
<ul>
<li>The first line contains an integer k representing the number of swap operations
<li>The second line contains k integers p1 p2,..., pk separated by single spaces, pi means that in the i-th operation, you swapped the i-th character and the (i+1)-th character in S1.
</ul>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
ABCDEFGH
FC

<b>Output:</b>
1
3
5 4 3

<b>Score:</b>
3
</pre>



______________________________________________________
MAMMOTH||||||true||||||


<p>Whereas most parks in different parts of the world are inhabited by pleasant little creatures like birds or squirrels, the nature park in Byteland's capital has somewhat larger inhabitants -- a herd of mammoths. As you may well imagine, this does lead to peculiar problems sometimes.
<p>On one occassion the King of Bitland came on a state visit to Byteland, and, to everybody's surprise, decided he would take a stroll in the Mammoth Park. Since mammoths tend to be a little unpredictable and know nothing of the protocol of royal visits, they had to be tied up for the time being. But tying mammoths <i>properly</i> is not as easy as it sounds.
<p>
The park consists of little clearings connected by alleys, and on every clearing there stands a mammoth. Due to the lack of sterdy trees in the park, the only things you can tie a mammoth to are other mammoths. Since tying a mammoth by too few ropes may actually be more dangerous than leaving them alone, it is required that each mammoth has to be tied to <i>exactly k</i> other mammoths (that way all animals are kept safe and none of them has a feeling of being unfairly treated). The ropes connecting two mammoths must run along the park alleys and can only be 1 or 2 alleys long (in the latter case, the rope is assumed not to touch the mammoth in between). Finally, no two ropes may run a long a single alley, since this might result in an awful tangle.
<p>
It is your task to design which mammoths to tie together, or to determine that the required tethering is impossible to attain.


*******InputConstraints*******

<p>The first line of input contains integer t, the number of test cases (t<=100). t test cases follow.
<p>The first line of each test case contains three integers n m k, denoting the number of clearings (each with a mammoth on it), the number of alleys in the park, and the number of mammoths to tie each mammoth to, respectively (1<=k<=n<=m<=2000).
<p>Each of the next m lines contains a pair of integers a<sub>i</sub> b<sub>i</sub>, denoting that clearings a<sub>i</sub> and b<sub>i</sub> are connected by an alley (1<=a<sub>i</sub>,b<sub>i</sub><=n). 


*******OutputConstraints*******

<p>For the i-th test case output a line containing the text <tt>case <i>i</i> YES</tt> if you know a solution to the given problem and <tt>case <i>i</i> NO</tt> in the opposite case. In the former case, you should then output exactly (k*n)/2 lines, containing the description of a rope between two mammoths. Each such line should begin with integer l, the length of the rope measured in alleys (l=1 or l=2) and be followed by exactly l+1 integers corresponding to successive clearings on the path of the rope.
<p>It is possible that for the given test case no answer exists; in that case the only allowed solutions is <tt>case <i>i</i> NO</tt>.
<p> Your score is equal to the number of test cases for which you gave the answer <tt>case <i>i</i> YES</tt>.

*******IOTestCases*******


<pre>
<b>Input:</b>
3
4 4 2
1 2
2 3
3 1
1 4
4 4 1
1 2
2 3
3 1
1 4
3 3 2
1 2
2 3
3 1

<b>Output:</b>
case 1 NO
case 2 YES
1 2 3
1 1 4
case 3 NO

<b>Score:</b>
1+0+0 = 1
</pre>
<p>For the presented example, the optimal solution would score 2 points (for test cases 2 and 3).


______________________________________________________
SIZECON||||||true||||||


<p> Given the set of integers, find the sum of all positive integers in it. <b>Solutions can be sent in any language supported by SPOJ except <i>Whitespace</i>.</b><BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> < 1000]<BR>
On each of next t lines given a integer N [-1000 <= N <= 1000]
</p>


*******OutputConstraints*******

<p>One integer equals to sum of all positive integers.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
5
-5
6
-1
<b>Output:</b>
11
</pre>


______________________________________________________
TFRACAL2||||||true||||||


<p align=justify>The input consists of exactly 1000 test cases in the following format recursive format:</p>

*******InputConstraints*******

<pre>
case <i>i</i> [<i>i</i>-th test]
< list_eq >:=< eq >'\n'[< list_eq >]
< eq >:=< var >=(< onp >,< fraction >)
< onp >:=(_< var >,< onp >)(_< var >,< onp >)< op >
< var >:=(a,c,g,t)[< var >]
< op >:=(+,*,/)
< fraction >:=< number >/< number >
< number >:=(1-9)[< number >]
</pre>
<pre>
<table>
<tr>
<td bgcolor=navy  align=center><font color=yellow><b>
< id >:=</b></font></td>
<td>the definition of the expression</td>
</tr>
<tr>
<td bgcolor=navy align=center><font color=yellow><b>
< id ></b></font></td>
<td>on the right side: just use the definition of the expression</td>
</tr>
<tr>
<td bgcolor=navy  align=center><font color=yellow><b>(<i>x</i>,<i>y</i>)</b></font></td>
<td>choose exactly one from the list: <i>x</i> or <i>y</i></td>
</tr>
<tr>
<td bgcolor=navy  align=center><font color=yellow><b>[<i>x</i>]</b></font></td>
<td>process (choose) <i>x</i> or not</td>
</tr>
</table>
</pre>
<p align=justify>
The definition of every variable (on the left side) appears only once and follows its last appearance on the right side.

*******OutputConstraints*******

<p align=justify>
The output should contain the list of variables in nondecreasing lexicographic order of identifiers and all values should be represented as simple fractions in lowest terms, i.e. in the form <i>N</i> / <i>D</i>, where <i>N</i> and <i>D</i> are relatively prime.
</p>

*******IOTestCases*******

<pre>
<b>Input</b>
case 1
c=_g_a/_cg_g/*
cg=_a_ct_a++
g=_a_a/_ct*
ct=_a_a*
a=2/2
case 2
t=_ct_ta*_ta*
ta=_c_a_a**
c=_ct_a+
ct=_a_a+_a_a*+
a=2/4
case 3
c=_t_cg_cg//
t=_g_g+_cg_g**
cg=_g_ct/
ct=_g_g/
g=6/71
case 4
g=_tt_tt_gt+*
t=_gt_tt*_tt/
gt=_tt_tt+_a_a*/
a=_tt_tt_tt/*
tt=2/62
case 5
c=_cc_t*
ca=_a_a/_a/
a=_cc_cc_t*+
cc=_t_t_t/*
t=76/13

<b>Output</b>
case 1 Y [write 'Y' and the correct answer, write 'N' if you don't wish to answer]
a 1 1
c 3 1
cg 3 1
ct 1 1
g 1 1
case 2 Y
a 1 2
c 7 4
ct 5 4
t 245 1024
ta 7 16
case 3 Y
c 432 357911
cg 6 71
ct 1 1
g 6 71
t 432 357911
case 4 Y
a 1 31
g 1923 961
gt 62 1
t 62 1
tt 1 31
case 5 Y
a 6764 169
c 5776 169
ca 169 6764
cc 76 13
t 76 13

<b>Score</b>
0.05</pre>




______________________________________________________
TSSTR||||||true||||||



*******InputConstraints*******

<p>
Input begins with a single integer <i>t</i> (<i>t</i> = 1000). t test cases follow.
<p>
Each test case starts with a line containing integer <i>n</i> denoting the number of words (1 <= <i>n</i> <= 100). Each of the next <i>n</i> lines contains a word - a string of between 4 and 16 characters 'a', 'b', 'c' or 'd'. 


*******OutputConstraints*******

<p>For the <i>i</i>-th test case output a line with the text <tt>case <i>i</i> Y</tt> or <tt>case <i>i</i> N</tt>, specifying whether you wish to solve the given case. Then in the former case
print a single line containing the shortest superstring. Exactly <i>n</i> lines with a single integer on each should follow, the <i>i</i>-th representing the position of the first letter of the <i>i</i>-th word.


*******IOTestCases*******

<pre>
<b>Input:</b>
1
4
aaaa
aaaa
aaaa
bbaaa

<b>Output:</b>
case 1 Y
aaaabbaaaa
1
1
7
5

<b>Score:</b>
17/10 = 1.7
</pre>
<i>Bonus info:</i> If score = <i>xxx</i>.<i>xxxaaa</i>, <i>aaa</i> means the number of test cases with Y answer.


______________________________________________________
RIS||||||true||||||


<p>
In two fundamental branches of modern science -- electronics and telecommunication -- progress is so marked that it may be perceived nearly as a natural power, controlling the fate of people and companies and transforming human life. Mainframes, computers, LAN, internet, built-in systems, Wi-Fi - generation upon generation of technology has sprung up within a time interval shorter than that of human life. Progress has its own life cycle, and periods of growth of semiconductor device production are interleaved with periods of decline, approximately once every five years. <!-- But this decline and growing periods on amount only, many experts reconverge in opinion that quantitative decline only respite, during which progress accumulates power for new qualitative jump. --> Experts believe that the main reason for such decline is the lack of new tools for Electronic Design Automation (EDAs), which can take full advantage of the latest technological achievements.

<!--
<BR></p>
<H3><img src="http://www.spoj.pl/content/turbo:ris0002.gif" alt="Fig.1"><BR></H3>

At a general level, the design process for electronic systems consists of four stages :<BR>
1) idea development and stating technical requirements<BR>
2) creating a functional scheme<BR>
3) development of the principle scheme, component placement and wire routing along the circuit<BR>
4) physical entailment<BR><BR>
-->
<p>
You are employed by the designers of a modern EDA and you have been asked by your boss to solve one of the stages of the design process. More specifically, you are to present a piece of software which, given a square-shaped board and a list of rectangular semiconductor devices, tries to place them on the board. No element may lie outside the board (even partially) or overlap with another element. 

<p>
You are rather vague about the details of your task, and so (surprisingly) is your boss. "Just make sure the guys from Marketing can feature <<<i>Efficient Automated Semiconductor Placement</i>>> in our sales brochure" -- he says, and leaves you to it.

<p>
Eventually, you decide to pack as many of the listed chips as possible on the given board (leaving out those that simply won't fit in), and go off for the evening to the local whisky bar, wondering whether the next recession in the technological cycle won't come sooner than in 5 years' time...

<!--
And elements mustn't intersect with each other and overrun the bounds of substrate. It's natural that space shouldn't be wasted, that's why the less free space on substrate will left the more compact circuit we will get on output. The designing process will prove effectiveness and let avoid additional cost for production of unnecessary substrates.-->
</p>


*******InputConstraints*******

<p>
<i>t</i> &#8211; number of test cases, then <i>t</i> tests follow. [t <= 500]<BR>
In the first line of each test there is an integer N, and in the second line an integer K. N is the length of the side of the square [2 <= N <= 1000], and K is the number of available rectangles [1 <= K <= 10000]. Then exactly K lines follow, with 3 numbers on each of them: wi, hi, li. wi - length of rectangle [wi <= N], hi - height of rectangle [hi <= N], li - number of rectangles of this type [li <= 200000]. You may rotate a rectangle by a multiple of 90 degrees.</p>


*******OutputConstraints*******

<p> For each test case output integer R - number of used rectangles, and then exactly R lines. On each of these lines output integer coordinates of opposite corners of rectangle xi1, yi1, xi2, yi2. Solution will be accepted if all rectangles won't intersect with each other and won&#8217;t overrun the bounds of square.
<BR>
</p>


*******IOTestCases*******

<p><b>Input :</b></p>
<pre>
1
10
8
3 5 2
2 2 1
2 3 1
2 5 1
4 5 1
1 3 2
3 8 1
1 1 1
</pre>

<p><b>Output :</b></p>
<pre>
9
1 1 5 3
6 1 8 5
9 1 10 2
1 4 5 7
6 6 10 7
9 3 10 5
1 8 1 10
2 8 2 10
3 8 10 10
</pre>

<p><b>Example explanation :</b></p>
<pre>
<img src="http://www.spoj.pl/content/turbo:ris_img0001.png" alt="Fig.1">
</pre><BR>
On the figure rectangles marked with numbers in accordance with position in example output.
For this test case you will receive 4.000001 points, because square fully covered with rectangles.
</pre>


______________________________________________________
LIB||||||true||||||


<p> In separate lines of a file you are given the titles of publications, written in lower-case letters. With nothing at your disposal but the Brainf**k language, write a converter from this style of naming to a format in which the first letter of each word is upper-case and a title ends with a dot.<BR><BR>

The Brainf**k language consists of eight commands, listed below. A Brainf**k program is a sequence of these commands, possibly interspersed with other characters (which are ignored). The commands are executed sequentially, except as noted below.<BR><BR>

The Brainf**k language uses a simple machine model which (apart from the executed code) consists of an array of 32,768 int32 cells initialized to zero, a movable pointer to an array cell (initialized to point to the leftmost cell of the array), and two streams of ints for input and output (most often connected to a keyboard and a monitor respectively, and using the ASCII character encoding).<BR><BR>

The eight language commands, each consisting of a single character, are the following :<BR>
'>' : increment the pointer (to point to the next cell to the right).<BR>
'<' : decrement the pointer (to point to the next cell to the left).<BR>
'+' : increment (increase by one) the byte at the pointer.<BR>
'-' : decrement (decrease by one) the byte at the pointer.<BR>
',' : accept one byte of input (stdin), storing its value in the byte at the pointer.<BR>
'.' : output (to stdout) the value of the byte at the pointer. <BR>
'[' : jump forward to the command after the corresponding ']' if the byte at the pointer is zero.<BR>
']' : jump back to the command after the corresponding '[' if the byte at the pointer is nonzero.<BR><BR>

Brainf**k programs can be translated into C using the following interpreter: <a href="http://spoj.pl/bf2c.c">http://spoj.pl/bf2c.c</a><BR><BR>

The program should be as small as possible of course.<BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of lines [10 <= <i>t</i> <= 99].
In each of the following t lines there is one publication title consisting of several words (length of a line <= 1000 symbols, length of a word <= 40). Each line ends with the ASCII symbol '\n' = 10. Publication names consist of lower-case letters: 'a'-'z' and space: ' '.
</p>


*******OutputConstraints*******

<p> Each publication title should be placed in a separate line. Each word of the publication title should begin with an upper-case letter and there should be a dot at the end of the publication title.


*******IOTestCases*******


<pre>
<b>Input:</b>
06
joint power management of memory and disk
instruction scheduling for dynamic hardware configuration
hierarchical variance analysis for analog circuits based on graph modeling
lifetime modeling of a sensor network
symmetric multiprocessing on programmable chips made easy
a time slice based scheduler model for system level design

<b>Output:</b>
Joint Power Management Of Memory And Disk.
Instruction Scheduling For Dynamic Hardware Configuration.
Hierarchical Variance Analysis For Analog Circuits Based On Graph Modeling.
Lifetime Modeling Of A Sensor Network.
Symmetric Multiprocessing On Programmable Chips Made Easy.
A Time Slice Based Scheduler Model For System Level Design.

</pre>


______________________________________________________
TTR||||||true||||||


<p> In the very heart of a well known producer of microelectronic products, a mobile phone with a built in game of Network Tetris is being prepared for release. The owners of such mobile phones can arrange duels when at a small distance from each other. Data transmission between players is carried out using the Bluetooth protocol. 
<p>
However -- now we are coming to the point -- it sometimes happens that there may be no other similar phone nearby and the player may need to play alone. For this purpose it is necessary to write a computer player (AI) with a very hard difficulty level.<p> 

The rules of Network Tetris are pretty simple :<BR>

The game has two playing fields, each with the rules of standard Tetris: figures of 4 blocks keep falling from the top of the field, and have to placed in such a way as to form horizontal lines. Once a line is filled up, it is removed and all lines above it are appropriately shifted downwards. There is however one difference with respect to standard Tetris -- a player receives additional penalty lines as soon as his opponent clears a line. The game is over when one of players fills his own field, either on his own or with his opponent's help, to such an extent, that the next figure cannot fully enter the field.<BR><BR>

The width of the field is 10, and the height of field is 20. There are 6 types of figures in the game:<BR>
I (1) - <img src="http://www.spoj.pl/content/turbo:ttr_stick.gif"><BR>
L (2) - <img src="http://www.spoj.pl/content/turbo:ttr_letg1.gif"><BR>
J (3) - <img src="http://www.spoj.pl/content/turbo:ttr_letg2.gif"><BR>
Z (4) - <img src="http://www.spoj.pl/content/turbo:ttr_letz1.gif"><BR>
S (5) - <img src="http://www.spoj.pl/content/turbo:ttr_letz2.gif"><BR>
O (6) - <img src="http://www.spoj.pl/content/turbo:ttr_cube.gif"><BR><BR>

<img src="http://www.spoj.pl/content/turbo:ttr_well.gif"><BR>
It is your task to write a bot which starts with an empty field and, knowing the sequence of figures dropping on its field, plays in such a way as to do as much harm as possible to the opponent.<BR><BR>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 150], then <i>t</i> tests follow.<BR>
Each test case starts with integer <i>N</i> equal to the number of figures which drop onto the field [10 <= N <= 50000]. Then N integers follow, numbered from 1 to 6 &#8211; denoting one of the figures, in the same position as they appear in the pictures. (Look at numbers in parenthesis).
</p>


*******OutputConstraints*******

<p>For each test you should output line <i>case 1 Y</i> if you wish to solve this test case or <i>case 1 N</i> otherwise. If you output <i>Y</i>, then exactly N lines must follow. Each of them should contain exactly two integers: A and X, where A is the clockwise angle of rotation in the given move, numbered from 0 to 3 (0 - 0 degrees, 1 - 90 degrees, 2 - 180 degrees, 3 - 270 degrees), while X is the horizontal coordinate of leftmost cube of the figure [1 <= x <= 10]. The <i>i</i>-th figure at input corresponds to the <i>i</i>-th figure at output. If the figure falls outside the field or the parameters have incorrect value, or any falling figure stops with at least one cube in a line of number larger than 20, then the solution will be judged as Wrong Answer.


*******IOTestCases*******


<pre>
<b>Input :</b>
1
14
3
2
4
5
3
2
1
6
6
1
1
4
1
5

<b>Output :</b>
case 1 Y
0 1
0 8
0 1
0 8
1 7
3 3
1 5
0 7
0 9
0 1
1 6
1 6
0 1
1 4

<b>Score :</b>
score = 30 + 1 = 31

</pre>


______________________________________________________
HIR||||||true||||||


<p> It is a well established fact that every civilization goes through one key stage of technological development, which is best illustrated by the rapid transition from typewriters to GUI based word-processing computer software. What is more remarkable, during this transition period taste and fashion is turned upside down, and good old esthetic sensibility is replaced by the urge to show off the whole repertoire of fonts available in the typists brand new word-processor to the wide, wide world. Even if some of the fonts look like the handwriting of a 1-year-old chimpanzee.

<p>All civilizations which have already gone through this stage of transition look back on it with a smile. All, with one notable exception -- that of Byteland. When the multiple font craze in Byteland reached its heights, it engulfed everyone (including the usually conservative passport department officials), and now everyone is paying the price. Automating the process of passport scanning is turning out a real nightmare, since all 6-digit passport numbers are written in different fonts. Not surprisingly, you've been asked to help out.
<p>
You should write a program for recognizing images of 6-digit numbers. Naturally, in some cases, the image may be blurred or deformed, but a human can always recognize the number written (possibly after overcoming the initial surprise). The picture is black & white, and consists of a white background with a black raster image on it (character &#8220;.&#8221; denotes the color white and character &#8220;X&#8221; - the color black).
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; number of test cases [<i>t</i> <= 250], then t tests follow.<BR>
Each test case starts with 2 integers, <i>H</i> and <i>W</i>, denoting height and width of picture [10 <= H, W <= 200]. 
Then H rows with W characters ('.' or 'X') in each follow.
</p>


*******OutputConstraints*******

<p>For each test case you should output the numerical value of the recognized 6-digit number in separate lines. 


*******IOTestCases*******


<pre>
<b>Input :</b>
2
13 40
........................................
........................................
......XX...XX...XX......X..XX...XX......
.....X..X.X..X.X..X....XX.X..X.X..X.....
.....X..X.X..X.X..X....XX.X..X.X..X.....
.....X..X.X..X.X..X...X.X.X..X.X..X.....
.....X..X.X..X.X..X...X.X..XX....X......
.....X..X.X..X.X..X..X..X.X..X...X......
.....X..X.X..X.X..X..X..X.X..X..X.......
.....X..X.X..X.X..X.X...X.X..X..X.......
.....X..X.X..X.X..X.XXXXXXX..X.X........
......XX...XX...XX......X..XX..XXXX.....
........................................
12 60
..........................................................XX
............XXXXX.....X...XXXXXX.XXXX......X...XXXX.........
XX..........X.......XX....X...X.X....X....XX..X....X........
............X......X......X...X.X....X...X.X..X....X........
............XXXX..X..........X..X....X...X.X......X.........
............X...X.X.XXX......X...XXXX...X..X....XXX.........
................X.XX...X....X....X..X...X..X.......X........
................X.X....X....X...X....X.XXXXXX......X........
................X.X....X...X....X....X.....X..X....X........
...........X...X...X..X....X....X....X.....X..X...X.........
............XXX.....XX....X......XXXX....XXXXX.XXX........XX
XX..........................................................

<b>Output :</b>
000482
567833

<b>Score :</b>
score = 1 (the first answer is correct,
the second one has one incorrect digit)
<img src="http://www.spoj.pl/content/turbo:hir0001.bmp" border=1> <img src="http://www.spoj.pl/content/turbo:hir0001.bmp" border=1>

<b>Picture examples :</b>

</pre>
<img src="http://www.spoj.pl/content/turbo:hir003.bmp"> <img src="http://www.spoj.pl/content/turbo:hir003.bmp"> <img src="http://www.spoj.pl/content/turbo:hir003.bmp"> <img src="http://www.spoj.pl/content/turbo:hir003.bmp"> <img src="http://www.spoj.pl/content/turbo:hir003.bmp">
<img src="http://www.spoj.pl/content/turbo:hir008.bmp"> <img src="http://www.spoj.pl/content/turbo:hir008.bmp"> <img src="http://www.spoj.pl/content/turbo:hir008.bmp"> <img src="http://www.spoj.pl/content/turbo:hir008.bmp"> <img src="http://www.spoj.pl/content/turbo:hir008.bmp">


______________________________________________________
MSWP||||||true||||||


<p>
The puzzle &#8220;Minesweeper&#8221; is based on the widely known game "Minesweeper", available for almost all MS Windows users, starting from version 2.0. The goal is simple -- to discover (or more precisely: uncover) the positions of all mines in rectangular grid. After a field without a mine on it is uncovered, the revealed value shows how many neighboring cells (at most 8) are occupied by mines. In the puzzle, just as in the game, you know the total number of mines on the board. But unlike in the game, you are not asked to risk your life by uncovering fields. Instead, you are given a list of uncovered fields (without mines, with numbers on them) and are requested to hazard a guess at the locations of all the mines. <BR><BR>
<center><img src="http://www.spoj.pl/content/turbo:zmswppole.jpg" alt=&#8221;Minesweeper&#8221;></center>
<!--One free cell can be occupied by mine or can be free. Cell with number in it can&#8217;t contain mine. In puzzle unlike game you can&#8217;t &#8220;click&#8221; on cell and in result convince that cell is empty (or otherwise run on mine and start from beginning). In puzzle you know the total number of mines, that hidden on the grid. This information can be very useful during solution. <BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswppole.jpg"></center><BR>
<p>
 Let&#8217;s consider process of the solution on an example of a small square. Total number of mines in our case equal to 19. We shall designate rows with numbers and columns with letters. Mines we will mark with mine image, and cells in which mine can&#8217;t be placed mark with blue color. The solution process for this puzzle consists of some separate reasoning &#8211; small steps. It&#8217;s easy to understand that if number of empty cells around cell with number in it equal to this number, then you can fill all this cells with mines. But in professionally made &#8220;minesweepers&#8221; this situation as rare as a capture of a figure on the first step in chess two-move puzzle. That&#8217;s why first moves have to be more intelligent. Pay attention!<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0001.gif"></center><BR>
<p>Let&#8217;s consider integer 2 in cell h3. This integer gives information, that in four cells gh2 and gh4 exactly two mines. Integer 3 in g3 gives information that in two cells f3 and f4 exactly one mine (because in other neighbor cells two mines). From this we can understand that other cells around ones on e3 and e4 are empty. We can color them blue.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0002.gif"></center><BR>
<p>After that two mines around cell d4 and three mines around cell e5 are restored unequivocally.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0003.gif"></center><BR>
<p>Other cells around f5 we can mark as empty, this allows us to place two mines close to h6 - in h5 and h7. <BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0004.gif"></center><BR>
<p>Each new step give us additional possibilities for new steps. Mark empty cells around g7, add mine in &#1077;7 (because around d6 exactly three mines). Mark that cell f3 is empty, and as consequence all remained cells around f2.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0005.gif"></center><BR>
<p>Place mines in d1 and b6 cells, color h2 with blue, then place mine in h4.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0006.gif"></center><BR>
<p>Than we out of simple reasons, for continue we should use more intelligent reasoning. Close to b7 exactly on one mine more than close to &#1072;7, this mine can only be in &#1089;8. Other cells around &#1089;7 are empty, as far as &#1077;8.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0007.gif"></center><BR>
<p>Integer 4 in &#1089;2 means, that in cells b1, b3, and &#1089;1 we have two mines, which together with mine c3 fully &#8220;ensure&#8221; three in b2. That&#8217;s why cells a2 and a3 are empty. That is the mine for a1 have to be in b1.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0008.gif"></center><BR>
<p>In cells b3 and b4 exactly one mine (due to three in &#1089;4), therefore the mine is in &#1072;5 (due to two in &#1072;4). <BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0009.gif"></center><BR>
<p> Now designate empty cells around b5, mines in &#1072;8 and b3, empty cell &#1089;1. And in the end we can ensure that solution has no errors.<BR></p>
<center><img src="http://www.spoj.pl/ZEL06/content/zmswp0010.gif"></center><BR>
-->


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases, and then <i>t</i> tests follow [<i>t</i> <= 500].<BR>
Each test starts with three integers H, W, N equal to the height, width and number of mines on the grid, respectively [5 <= H, W <= 50] [1 <= N <= H*W]<BR> 
Then exactly H lines follow, each of them consisting of W symbols.<BR>
The description of the grid consists of ASCII characters: '1'-'8' &#8211; the number of mines in neighbouring cells and '.' &#8211; a cell with unknown content. You can be sure that no other characters are present in the grid description. 
 

*******OutputConstraints*******

<p>For each test you should output the text <tt>char Y</tt> in a separate line if you wish to solve this test, or <tt>char N</tt> otherwise. In the former case, you should then output a grid with the same size as that of the test, with mines placed on it in stead of some characters '.'. Mines are defined by the character 'X'. The number of mines should be equal to the number of mines N given in the test description.
</p>


*******IOTestCases*******

<p>
<b>Input:</b>

<pre>
2
8 8 19
........
2323..2.
..23...2
.3..33..
2.321...
....1.32
.3...3..
1...2..2
6 6 6
111.1.
1.2121
112.21
..112.
122111
1..1..
</pre>

<p>
<b>Output:</b>

<pre>
Y
X.X.....
2323X.2X
.X23XX.2
X3X.33.X
2.321X.X
.XX.1.32
.3...3X.
1X.X2XX2
Y
111X1.
1X2121
112X21
..112.
122111
1.X1XX
</pre>
<p>
<b>Score:</b>

<p>The first test is solved entirely correctly, for which 23*10 = 230 points are awarded. The score for the second test case is equal to 10-15 = -5, treated as 0. The total score is thus 230.001.</p>



______________________________________________________
DELIVERY||||||true||||||


<p>Fry is an intergalactic delivery boy that spends all day trying to impress Lila. He wants to prove her that he's a smart guy so he wants to find routs between the different planets he must travel to by himself. Of course, he wants these routs to be as short as possible. Because of space pirates, meteor showers and other dangerous things, it's safe to travel only between certain pairs of planets. Help him find a good delivery plan so he can win Lila's heart. By Fry's observations, there is a safe route between any 2 destinations and the shortest one always passes through no more then 50 planets.


*******InputConstraints*******

<p>The first line of input contains 2 integer, N and M (N&#8804;50.000, M&#8804;250.000), representing the number of planets and the number of direct routs between them. The next M lines contain 3 integers, X, Y, L (1&#8804;L&#8804;1.000.000) meaning that there is a safe connexion between planet X and planet Y of length L. The M+2-th line contains a number NQ (NQ&#8804;5.000) and then follow NQ lines with 2 integers A and B meaning that Fry should take a package from planet A to B.


*******OutputConstraints*******

<p>Output must contain NQ lines, each line containing a number Nr (Nr&#8804;100) and Nr integers representing the planets in the order you visit them. If Nr is -1 then that means 
that you want to skip this query.



*******IOTestCases*******


<pre>
<b>Input:</b>
5 5
1 4 1
2 1 2
2 5 2
4 5 2
2 3 3
3
1 5
3 4
3 1

<b>Output:</b>
3 1 4 5
4 3 2 1 4
3 3 2 1

</pre>

<b>Notes:</b>
This solution should receive 3 points.
If you don't get AC on one of the 6 input cases, your score on that test case is 0 but you keep the points from the other inputs.






______________________________________________________
PRIC||||||false||||||

<p>For this task you will have to check as many numbers as possible to see if they are prime. As not to make the problem I/O oriented, consider the numbers you should check in the following order: first take 1 and then construct the numbers in the sequence after the recursion: a<sub>i</sub>=(a<sub>i-1</sub>+1234567890) mod 2<sup>31</sup>. Be careful not to use more than 4096 bytes of code.

<h3>Output</h3>
<p>For each number you should write to output the digit "1" if the number is prime or the digit "0" if it is not prime.

<h3>Score</h3>
<p>The score of your program will be the index of the first number in the sequence after which you do not have a correct answer. Because of some limitation you should not write more than 33 333 333 characters to output. If you reach this limit, your score will be adjusted in accordance to your runtime.


<h3>Example</h3>

<pre>

<b>Output:</b>
01000000000000000000000000001000010000000001100000
</pre>

<p>should receive 50 points.



______________________________________________________
SUD||||||true||||||


The name "Sudoku" is the Japanese abbreviation of a longer phrase, "suji wa dokushin ni kagiru", meaning "the digits must occur only once". Sudoku is a logic-based number placement puzzle. The objective is to fill a 9x9 grid so that each column, each row, and each of the nine 3x3 boxes contains the digits from 1 to 9. The puzzle setter provides a partially completed grid.<BR><BR>

<center><img src="http://www.spoj.pl/content/turbo:zsud_rules2.png"></center>
<BR><BR>
<p>Unlike in magazines and newspapers, the digital representation of Sudoku a puzzle is a string of length 81, with all rows of the puzzle placed one after another. The representation uses ASCII symbols &#8216;1&#8217;-&#8216;9&#8217; for digits and &#8216;.&#8217; for an empty space. For example, the puzzle from figure above can be represented as: <center><BR><b>7..25..98..6....1....61.3..9....1.......8.4.9..75.28.1.94..3.......4923.61.....4.</b></center><BR>
<p>
In this task you are to solve such puzzles automatically. The score will depend on the number of solved puzzles and on the speed of your solution. Some of the puzzles have multiple possible solutions, so be careful. A solution is correct if it satisfies the given puzzle. You can be sure that all given Sudokus are correct.


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases; then <i>t</i> test cases follows. [<i>t</i> <= 500]<BR>
Each test case describes one SuDoku puzzle and consists of an 81-character-long string.
 

*******OutputConstraints*******

<p>For the i-th test case output a line containing <b>Y</b> if you want to solve the test case or <b>N</b> if you wish to leave it out. If you chose to solve the test case, in the next line output a sequence of exactly 81 characters corresponding to the solution for the i-th Sudoku puzzle.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
3
..41..3.8.1....62...82..4.....3.28.9....7....7.16.8...562..17.3.3.....4.1....5...
1.......4....1.38.27.9.4...91.7...........5..86.4.5.9..3......8..9....2.4.......7
7..25..98..6....1....61.3..9....1.......8.4.9..75.28.1.94..3.......4923.61.....4.

<b>Output:</b>
Y
294167358315489627678253491456312879983574216721698534562941783839726145147835962
Y
198563274654217389273984615915726843347198562862435791731642958589371426426859137 
N

<b>Score:</b>
In this case <i>total_solved</i> = 2. If the program runs for 10 seconds, 
then the score of this solution will be equal to 1.905002

</pre>


______________________________________________________
ELC||||||true||||||


<p>
We are trying to develop the electrical power infrastructure in the small country of Byteland. For this purpose not far from each city we have built a nuclear power plant (NPP). We have also connected the nearest house to this NPP with a cable. The goal of this project is to connect all houses of each city to the source of electricity. Each house already connected to electricity become a source of electricity. Since there is a severe shortage of electrical cable, the total length of the electricity network should be kept as small as possible. In some places we can set up transformer/splitter boxes to which we can potentially connect several cables; all their endpoints are then considered connected. 
 

*******InputConstraints*******

<p><i>t</i> &#8211; the number of cities; then follows the description of each of <i>t</i> cities. [<i>t</i> <= 50]<BR>
The description of each city begins with <i>N</i> - the number of houses in the city [3 <= <i>N</i> <= 3000]. Then exactly <i>N</i> lines follow, with two real numbers: <i>x, y</i> in each, representing the coordinates of a house. [0.0 <= <i>x, y</i> <= 10000.0]
 

*******OutputConstraints*******

<p>For each test case you must output a connected electrical net, e.g. all houses must be connected with each other, directly, through other houses or through transformers. For each test output integer <i>M</i> [0 <= <i>M</i> <= <i>N</i>] - the number of required transformers. On each of following <i>M</i> lines output the coordinates of the transformers <i>x, y</i> [0.0 <= <i>x, y</i> <= 10000.0]. Next output the number <i>K</i> which is equal to the number of required cables [<i>N+M-1 <= K <= (M+N)*(M+N-1)/2</i>]. On the following <i>K</i> lines output two integers <i>i, j</i> - indexes of houses or transformers. Indexes for houses begins with 0 and end with <i>N-1</i>, indexes for transformers begin with <i>N</i> and end with <i>N+M-1</i>.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
1
4
1.0 1.0
1.0 11.0
11.0 1.0
11.0 11.0

<b>Output:</b>
1
6.0 6.0
4
0 4
1 4
2 4
4 3
</pre>

<b>Score:</b>
<p>Suppose that the solution ran for 10 seconds. The length of the cable is <i>score_1</i> = 20*sqrt(2). In this case number of points awarded to the program will be equal to 29.698485.</p>



______________________________________________________
DIP||||||true||||||


<p> 
One of the most interesting problems of contemporary times is digital image processing to remove noise. A good solution to this problem is very important e.g. when developing digital cameras. In this task we are given a set of pictures, each of which is a grayscale image, transferred by some communication channel with failures. During the transfer some data was corrupted. A picture is defined as a rectangular matrix of integers from the range from 0 (black) to 255 (white). A number X at position (i, j) means that the pixel in the picture at the point with coordinates x = i and y = j has color RGB(X, X, X). The considered form of corruption generates noise in the following way: each pixel of the picture has its color replaced with probability between 2 and 20% by a random value from the range [0; 255]. <BR><BR>

Thus, you now receive a set of corrupted pictures, which were originally e.g. avatars, banners or photos. You are to restore the picture with maximum quality. The more exact a picture you obtain, the fewer penalty points you get.

<center><table cellpadding=2 cellspacing=2>
<tr>
<td align=center>Original Picture</td>
<td align=center>Grayscale Picture</td>
<td align=center>Noised Picture</td>
<td align=center>Denoised Picture</td>
</tr>
<tr>
<td align=center><img alt="Original Picture" src="/content/turbo:FF.original.gif"></td>
<td align=center><img alt="Grayscale Picture" src="/content/turbo:FF.grayscale.gif"></td>
<td align=center><img alt="Noised Picture" src="/content/turbo:FF.noisy.gif"></td>
<td align=center><img alt="Denoised Picture" src="/content/turbo:FF.restored.gif"></td>
</tr>
</table></center>
<BR>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases [<i>t</i> <= 60] (total number about 250), then <i>t</i> test cases follows.<BR>
Each test case begins with three integers:
<i>Q</i>, <i>H</i> and <i>W</i>, denoting the noise probability for the generator in percent, and the height and width of picture respectively [2 <= <i>Q</i> <= 20], [10 <= <i>H, W</i> <= 200]. 
Then <i>H</i> rows follow with <i>W</i> integers in each of them.</p>


*******OutputConstraints*******

<p>For each test case you must output a picture after noise reduction in following format:
In the first line output the two integers <i>H</i> and <i>W</i>. Then <i>H</i> rows must follow with <i>W</i> integers in each of them. Each integer is the color value
of a pixel after the restoration process.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
6 20 20
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 028 255 255
 255 255 200 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 045 255 068 043 043 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 129 045 255 068 255 255 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 189 255
 255 058 058 058 096 255 079 079 079 079 255 045 255 045 255 068 255 255 068 255
 255 076 255 255 096 255 079 255 255 255 255 185 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 255 242 255 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 043 255 048 048 048 048 255
 255 255 255 255 255 255 255 255 058 255 255 255 198 255 255 255 255 255 255 255
 036 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 100 195 002 167 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 088 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 046 002 002 002 002 002 255 255 143 255
 255 255 255 255 002 002 002 002 002 013 002 002 002 002 002 002 255 255 255 255
 255 255 177 255 255 255 255 104 255 255 255 255 255 255 255 255 012 133 255 255
 022 022 022 022 066 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 079 079 079 079 079 079 079 079 079 079 079 079 079 079 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 203 255 255

<b>Output:</b>
20 20
 253 253 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 254 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 045 255 068 043 043 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 043 255
 255 058 058 058 096 255 079 079 079 079 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 043 255 048 048 048 048 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 079 079 079 079 079 079 079 079 079 079 079 079 079 079 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255

<b>Score:</b>
Original picture:
20 20
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 045 255 068 043 043 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 043 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 043 255
 255 058 058 058 096 255 079 079 079 079 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 255 255 255 255 045 255 045 255 068 255 255 068 255
 255 000 255 255 096 255 079 079 079 079 255 045 255 043 255 048 048 048 048 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 002 002 002 002 002 002 002 002 002 002 002 002 255 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022 022
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255
 255 255 255 079 079 079 079 079 079 079 079 079 079 079 079 079 079 255 255 255
 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255

score = sqrt(2^2 + 2^2 + 1^2) + 1 = 1 + 3 = 4 (three pixels differ in the top-left corner)

Original picture: <img src="http://www.spoj.pl/content/turbo:hello.gif" border=1>
Noisy picture: <img src="http://www.spoj.pl/content/turbo:hello.noisy.gif" border=1>

</pre>



______________________________________________________
SQRT2||||||true||||||


<p align="justify">
<p>In this task you are to find as many digits of the square root of 2 as possible. You have to make it within the limit of time and source code length.


*******InputConstraints*******

<p>There is no input for this problem<BR>


*******OutputConstraints*******

<p>The output must contain as many digits of the square root of 2 as possible (max = 2000000)<BR>


*******IOTestCases*******

<b>Output:</b>
<pre>
1.41421356237309504<BR>
</pre>
<p>will be awarded with 19 points.</p>


______________________________________________________
PT07E||||||true||||||


<p>
ACRush and Jelly are practising in the computer room for next TCO. Suddenly, they found the network is very slow.
After a few diagnoses, they realized that there are many redundant wires. So they plan to repair the network, change it to an optimal tree topology. And they can't spend too much money to purchase wires. Then.. too easy? Are you thinking about minimum spanning tree?

<p>
But the real trouble is the connectors have their own limitation. They can only allow one computer connects with at most <i>B</i> computers.

<p>
There are totally 10 cases, arranged in increasing order of the size of <i>N</i> (number of computers). Weight of case i-th is w[i] = i. We define
<i>infinity</i> = 4 * 10<sup>9</sup>. And in a tree, let's call number of computers that computer i connects with is <I>degree</i> of computer i.<br>
For case i-th you must show us a satisfied tree with total cost C[i] and maximum degree M[i], considering all computers of that tree. <br>
The formula to compute score is as below: <br>
With case i-th: <br>
If your M[i] <= B then Score[i] = w[i] * C[i] <br>
If your M[i] > B then Score[i] = (w[i] + 10) * C[i] * M[i]<br> 

<p>
To make the challenge more interesting, with a simple brute force program, we generated 10 upper bound degrees U[i] (1 <= i <= 10) for each of 10 cases.<br>
For any case i-th:<br>
If your M[i] > U[i] then Score[i] = infinity <br>
Finally, TotalScore = (Score[1] + Score[2] + ... + Score[10]) / 10 <br>
Try to minimize the <i>TotalScore</i>.


*******InputConstraints*******

<p>
First line contains 3 integers <i>N, M, B</i> -- number of computers, number of pairs of computers can be connected and the maximum number of computers that a computer can connect with.
(1 <= <i>N</i> <= 10<sup>4</sup>, 1 <= <i>M</i> <= 10<sup>5</sup>, 1 <= <i>B</i> <= N) <br>
Next <i>M</i> lines, line i-th contains a triple (u[i], v[i], c[i]) -- means if we want to connect computers u[i] and v[i] we should purchase a wire, cost c[i] (1 <= u[i], v[i] <= N, 1 <= c[i] <= 20000). The wires are bidirectional.


*******OutputConstraints*******

<p>
The first line contains 2 numbers --- total cost of your tree and the maximum degree in all computers of that tree.
Next, print <I>N</I>-1 lines, corresponding to <I>N</i>-1 edges of the tree, each edge on one line, forms <I>u v</i>.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 3 2
1 2 1
2 3 1
1 3 5

<b>Output:</b>
2 2
1 2
2 3
</pre>



______________________________________________________
SLEXSORT||||||true||||||


<p>Given alphabet <i>A</i> and a list of words, sort the list according to the lexicographic order induced by <i>A</i>.



*******InputConstraints*******

<p>The first line of input contains <i>t</i>, the number of tests.
<p>Each test begins with a line with alphabet <i>A</i>,
which consists of lowercase letters arbitrary chosen from the Latin alphabet. The next line contains an integer <i>n</i><100 000 - the number of words. The subsequent <i>n</i> contain one word each, which is not longer than 1 000 letters. 
Additionally, you can assume that the total number of letters in all words of each test does not exceed 4*10<sup>6</sup>.
<p>
There is an empty line after each test.


*******OutputConstraints*******

<p>For each test output the sorted list of words in successive lines. 


*******IOTestCases*******

<pre>
<b>Input:</b>
2
re
3
ere
rer
re

balujemy
5
bel
luba
lej
bal
leje

<b>Output:</b>
re
rer
ere

bal
bel
luba
lej
leje
</pre>

<b>Warning</b>: large Input/Output data, be careful with certain languages


______________________________________________________
MATH2||||||true||||||


<h3>Background</h3>
<p>This is a mathematical(?) problem. See problem <a href="http://www.spoj.pl/problems/MATH1">MATH1</a> and <a href="http://www.spoj.pl/problems/AMATH">AMATH</a>.</p>

*******InputConstraints*******

<p>The first line of the input contains a single integer c(1<=c<=2).</p>
<p>The second line contains 3 integer numbers separated by single spaces, D(1<=D<=1 000 000 000),n(1<=n<=700),m(1<=m<=700).</p>
<p>n lines follow, each contains m space-separated integer numbers.The number which is in the i-th row and j-th column is defined as a(i,j).</p>

*******OutputConstraints*******

<p>You should output n lines, each contains m integers,which is either 0 or 1.We define the number in the i-th row and j-th column of your output b(i,j).</p>

*******IOTestCases*******

<pre><b>Input #1:</b>
1
7 3 4
1 6 4 6
7 0 3 3
2 5 1 5

<b>Output #1:</b>
0 1 0 1
1 0 1 0
0 1 0 1

<b>Input #2:</b>
2
7 3 4
1 6 4 6
7 0 3 3
2 5 1 5

<b>Output #2:</b>
0 1 0 1
1 0 1 0
0 1 0 1

<b>Score:</b>
11428.5714
</pre>
<b>Warning: large input/output data, be careful with certain languages.</b>
<p>Blue Mary's Note: Some unofficial tests were added.</p>
<p>Blue Mary's Another note: the score system has been changed to avoid Wrong Answer.</p>


______________________________________________________
INTER||||||false||||||

<p>
Long long ago, so long ago, no body knows how long ago,
there was a huge galactic war. There was a very powerful
general, General Ramuk, who had every possible soldier and
scientist under him. One of his scientists reports that he
had  intercepted a transmission that he believes is from the
aliens. A group of experienced cryptographers believe that
in the following hypotheses:
</p>

<ol>

<li>The aliens follow use binary system for representing
   numbers</li>
<li>Their '0' should be interpreted as '1' and vice-versa</li>
<li>The message is encoded as follows:
   [32bits of n1][16bits of n2][n2 bits of n3]</li>
<li>
The retransmission they expect is:
[32bits of the remainder] when <b>n3</b> is divided by <b>n1</b>.
</li>
<li>
All the numbers are written, Most significant bit first.
</li>

<li>
Remainder must be communicated in the following format: <br>
[remainder for 1st instance] <br>
[remainder for 2nd instance] <br>
in their own number system, without leading '1's ('0's).
</li>
<li>The number of instances is about <b>200</b>.</li>
</ol>
<p>
The first transmission was completed. Ramuk is eagerly
waiting for the second transmission, which must be
replied. Being such a simple problem, he asks you to write a program to do the same.
</p>

<p>
He says:
<i>
"Nee evalovu chinnadha codea ezhudhariyo avalovu parisu
onnakku kaathhirriku ",
</i>
which translates to:
<i>
"The smaller the code you write, that much reward is awaiting you...".
</i>
</p>

<p>
You want to save the world from a probable Alien Invasion,
and get as much money as possible.
</p>

<p>
Constant bit length numbers  will be prefixed by '1's ('0's in their notation).
</p>
<h3>Scoring</h3>
<p> 
The scoring for this problem is the <b>length of the source code</b>.
</p>

<h3>Sample Input</h3>
<b>
NOTE: The colons (:) and newlines are for clarity
</b>
<pre>
11111111111111111111110001001110:1111111111101111:0011100111000100
11111111111111111111110001001011:1111111111101100:0100100001000011111
</pre>

<p>
The actual input will be like:
</p>
<pre>
1111111111111111111111000100111011111111111011110011100111000100
1111111111111111111111000100101111111111111011000100100001000011111
</pre>
<b>(new line is again, for clarity)</b>

<h3>Sample Output</h3>
<pre>
0101101001
0010001111
</pre>

<h3>Explanation</h3>
<pre>
n1=945
n2=16
n3=50747
output=662

n1=948
n2=20
n3=376288
output=880
</pre>

<b>Warning: Large Input.</b>


______________________________________________________
GCD||||||true||||||


<p>Consider the decimal representation of a natural number N.<br>
Find the greatest common divisor (GCD) of all numbers that can be obtained by permuting the digits in the given number. <b>Leading zeroes are allowed.</b><br>


*******InputConstraints*******

<p>Every line of input contains an integer, representing the original number N(0 < N < 10^250).


*******OutputConstraints*******

<p>For every test case, print the GCD of all numbers, which can be obtained from the given one by permuting the digits. 

*******IOTestCases*******


<pre>
<b>Input:</b>
21
3
<b>Output:</b>
3
3
</pre>



______________________________________________________
BRAINF_K||||||true||||||


<P>brainf*ck is the ungodly creation of Urban Mller, whose goal was apparently to create a Turing-complete language for which he could write the smallest compiler ever. 
<a href="http://en.wikipedia.org/wiki/Brainfuck">http://en.wikipedia.org</a> defines it as 
"a computer programming language designed to challenge and amuse programmers, and is not suitable for practical use. Its name has been variously euphemized, as in 
brainf*ck." <P>A brainf*ck program has an implicit byte pointer, called "the pointer", which is free to move around within an array of 32768 bytes, initially all set to zero. The pointer itself is initialized to point to the beginning of this array. <P>The brainf*ck programming language consists of seven commands, each of which is represented as a single character. Note: 
"Industry standard" brainf*ck actually has eight commands, but for the purposes of this problem one command was intentionally omitted. <P><BR><DIV ALIGN=CENTER><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>COMMAND </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>OPERATION </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>></TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing a pointer value of 32767 </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 0. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>&lt;</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing a pointer value of 0 </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>results in a pointer value of 32767. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>+</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Increment the byte at the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Incrementing the byte value 255 results </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 0. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>-</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrement the byte at the pointer. </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Decrementing the byte value 0 results </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>in the byte value 255. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>.</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Output the character whose ASCII </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>value is the byte at the pointer </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>[</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump forward past the matching <TT>]</TT> if the </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>byte at the pointer is zero. </TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>]</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Jump backward to the matching <TT>[</TT> </TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>unless the byte at the pointer is zero. </TD></TR></TBODY></TABLE></DIV><P><BR>For this problem, you will write a program that reads in, parses and executes a brainf*ck program. </p>


*******InputConstraints*******

<p>Input contains exactly one program. The program consists of one or more lines of brainf*ck commands. Your program should ignore any illegal characters (I.E. any character not in the set: &lt;>+-.[]), If a percent sign (%) is encountered during parsing, the remainder of the line should be discarded. This constitutes a comment. The maximum number of commands in a brainf*ck program is 128000.</p> 


*******OutputConstraints*******

<p>Your program should output the output generated by the brainf*ck program. The only possible parsing error that can occur is if there is an unmatched [ or ] in the brainf*ck program. If your program encounters such an error, it should simply print "<b>COMPILE ERROR</b>" instead of executing the program. All brainf*ck programs will use no more than the specified 32768 bytes of memory.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
++++++++[>+++++++++ % hello-world.
<-]>.<+++++[>++++++<-]>-.+++++++..
+++.<++++++++[>>++++<<-]>>.<<++++[>
------<-]>.<++++[>++++++<-]>.+++.
------.--------.>+.

<b>Output:</b>
Hello World!

<b>Input:</b>
[]]

<b>Output:</b>
COMPILE ERROR

</pre>

<b>A <a href="http://www.spoj.pl/content/crazyb0y:BRAINF_K.in">super hard test case</a> was removed.</b>


______________________________________________________
EXPR2||||||true||||||


<p>You are to write a program to analyse some simple arithmetical expressions. The BNF form of the defination of the expression is below.</p>
<pre>
&lt;expression>::=&lt;num>&lt;oper>&lt;num>
&lt;num>::=0|1|2|...|99
&lt;oper>::=+|-|*
</pre>
<p><i>Tip</i>: You may find this problem is like the problem <a href="http://www.spoj.pl/problems/GALAXY">GALAXY</a> very much. To get round of the programming problems of using Brainf**k, Whitespace or Intercal, you must use C/C++/Pascal/Java to do the programming. Seems easy? Now there is an additional objective: <b>there must not be any semicolons ";" 
in your program!!!</b></p>

*******InputConstraints*******

<p>Multiple test cases, the number of them T is given in the very first line, T<=99.</p>
<p>Each test case contains one line with a correct expression, without leading or trailing spaces.</p>

*******OutputConstraints*******

<p>For each test case you should output one line contains the result of the expression without any leading zeros. You may assume this number is always a non-negative one.</p>

*******IOTestCases*******

<pre><b>Input:</b>
3
6*7
67-25
31+11

<b>Output:</b>
42
42
42
</pre>


______________________________________________________
ERRORMIN||||||false||||||


    <p>
        In this problem, you have to reverse an algorithm. The known algorithm takes inputs
        A and C, and produces output B. Your task will be to take A and B as inputs, and
        produce C.</p>
    <p>
        The known algorithm can be expressed several ways:</p>
    <table border>
        <tr>
            <td style="height: 139px">
                As a mathematical expression:<br />
                <img alt="(image)" src="http://www.coldc.com/problem/nonoise.gif" />
            </td>
            <td style="height: 139px">
                As a repeating pattern:<br />
                <br />
                <span style="font-size: 10pt">B[0] = A[0] * C[0]</span><br />
                <span style="font-size: 9pt">B[1] = A[0] * C[1] + A[1] * C[0]</span><br />
                <span style="font-size: 8pt">B[2] = A[0] * C[2] + A[1] * C[1] + A[2] * C[0]</span><br />
                <span style="font-size: 7pt">B[3] = A[0] * C[3] + A[1] * C[2] + A[2] * C[1] + A[3] *
                    C[0]</span><br />
                <span style="font-size: 6pt">B[4] = A[0] * C[4] + A[1] * C[3] + A[2] * C[2] + A[3] *
                    C[1] + A[4] * C[0]</span><br />
                <span style="font-size: 5pt">B[5] = A[0] * C[5] + A[1] * C[4] + A[2] * C[3] + A[3] *
                    C[2] + A[4] * C[1] + A[5] * C[0]</span><br />
                ...
            </td>
            <td style="height: 139px">
                As a program:<br />
                <pre> for(int iB = 0; iB < len; iB++) { 
   for(int iC = 0; iC < len; iC++) { 
     B[iB + iC] += A[iB] * C[iC];
   }
 }
</pre>
            </td>
        </tr>
    </table>
    <p>
        When you produce a solution (C), you can check your work by running the known algorithm
        on it, and the output value (B) will be called Bprime. If B equals Bprime, then
        your program is working.</p>
    <p>
        However, errors will be introduced into B, such that it is impossible to produce
        a matching Bprime. In that case, your program must find the <i>closest match</i>.
        Here is the criteria for a success:</p>
    <ol>
        <li>When given perfect inputs, B must match Bprime exactly.</li>
        <li>The sum of the deltas between B and Bprime <span style="font-size: 8pt">(sum(B[n]
            - Bprime[n])) </span>must equal zero:<br />
            <img alt="(image)" src="http://www.coldc.com/problem/sumzero.gif" /></li>
        <li>The sum of the differences between B and Bprime <span style="font-size: 8pt">(sum(abs(B[n]
            - Bprime[n])))</span> must be as low as possible:<br />
            <img alt="(image)" src="http://www.coldc.com/problem/sumlowest.gif" />
        </li>
    </ol>
    <p>
        Your score is the sum total of the errors between B and Bprime during it's test.
         The goal is to get as low a score as possible.</p>
    Notes:<br />
    <ol>
        <li>The lengths of arrays A, B and C are the same.</li>
        <li>The arrays are floating point numbers.</li>
    </ol>
    <h3>
        Input</h3>
    <p>
        Each request is sent in two lines; each of the values for A separated by spaces,
        and each of the values for B separated by spaces.  More than one request will
        be made.</p>
    <h3>
        Output</h3>
    <p>
        Your program must output the value for C on one line, separated by spaces, in response
        to each pair of input lines.</p>
    <h3>
        Example</h3>
    <pre><b>Input:</b>
1 2 0 1 0 0
5 10 1 7 0 1
0 1 0 1 0 0 0
0 0 1 0 -1 0 0
0 1 0 1 0 0 0
0 0 0.5 0 1 0 0

<b>Output:</b>
5 0 1 0 0 0
0 0 0 0 0 0 0
0 0.75 0 0 0 0 0
</pre>
<p>
All source code submitted for this problem must be free of intellectual property restrictions, and becomes the intellectual property of Michael Mudge.</p>

<p>To the first user who solved this: You are entitled to the prize, but I have no contact information!</p>



______________________________________________________
MAGIC2||||||false||||||

<h3>Task</h3>
<p>Write a program with minimum length to print the <a href="http://www.spoj.pl/content/crazyb0y:MAGIC2.out">output</a>(119729 bytes).</p>

<h3>Score</h3>
<p>The score of your program is the length of your source code in bytes. </p>

<p><b>Notice: Sorry to the Python and PHP user, since these languages support compress functions, there are not allowed. Some submissions in these languages are judged as Wrong Answer now. </b>


______________________________________________________
JAWB||||||true||||||


<p>The goal of this popular game is to get maximum number of points, by removing aligned pieces of the same color. Pieces can only be removed if they touch each other by an entire side. The more pieces you remove in one turn, the more points you get. The number of points in one turn is described by the following formula: N*(N-1), where N is the number of pieces (for example 2*(2-1)=2, 10*(10-1)=90). If you remove pieces from the middle of the field, then all pieces located higher fall down and occupy the empty spaces. The game is finished when no pieces which can be removed from field remain. <BR><BR>

<center><img src="http://www.spoj.pl/content/turbo:JawBreak.png" alt="JawBreak game"></center>
<BR><BR>
<p>In this problem you will be given a field and pieces on it. Your goal is to obtain the maximum number of points. 

<p>
<b>Note:</b> You can practice a little and plan your strategy with this on-line game [the on-line game is slightly different from the one described above]: <a href="http://www.bigfrog.net/jawbreaker/">http://www.bigfrog.net/jawbreaker/</a><BR><BR>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of tests, then <i>t</i> tests follow. [<i>t</i> <= 500]<BR>
Each test starts with 3 integers: <i>H</i> - the number of rows of the playing field, <i>W</i> - the number of columns of the playing field and <i>C</i> - the number of different colors of pieces.
[4 <= <i>H, W</i> <= 50] and  [3 <= <i>C</i> <= 20]. Then follow <i>H</i> rows with <i>W</i> numbers in each, separated by spaces. Each number is in the range from 0 to <i>C-1</i> and describes the color of a piece.
 

*******OutputConstraints*******

<p>For each test you must output the letter &#8220;Y&#8221; if you want to solve this test, or the letter &#8220;N&#8221; otherwise. If you output Y, you must output a set of lines with 2 integers <i>x, y</i> in each. These integers define rows and columns in the field. [0 <= <i>x</i> < <i>H</i>], [0 <= <i>y</i> < <i>W</i>]. Coordinates are counted from the upper left corner of field. After your last move output the line -1 -1. 
You&#8217;ll receive status Wrong Answer if your coordinates are outside the field, or point to an empty space, or to a single piece.
 
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
1
4 4 3
0 0 1 1
1 1 2 2
0 1 2 0
0 1 1 2

<b>Output:</b>
Y
1 0
1 0
3 2
-1 -1

<b>Explanation:</b>
Initial field:

0 0 1 1
1 1 2 2
0 1 2 0
0 1 1 2

After the first turn (removed 5 "ones"):

. . . 1
0 . 1 2
0 . 2 0
0 0 2 2

After the second turn (removed 4 "zeros"):

. . . 1
. . 1 2
. . 2 0
. . 2 2

After the third turn (removed 3 "twos"):

. . . .
. . . 1
. . . 2
. . 1 0


<b>Score:</b>
In this case <i>base_score</i> = 5*(5-1) + 4*(4-1) + 3*(3-1) = 20 + 12 + 6 = 38,
<i>total_score</i> = (3*3*38)/(4*4) = 21.375. Let&#8217;s suppose that it<BR>takes 10 seconds to finish calculations, then <i>score</i> = 200*21.375/210 = 20.357143
</pre>



______________________________________________________
MAR||||||true||||||


<p>
Markov schemes are well known field of study in theory of algorithms. Let's define some slightly simplified schemes. We have some character set (alphabet), and a string composed of these symbols. Besides, we have rules of replacement, and each rule specifies the substring to be replaced and the replacement string. The replacement string can be empty. The order of rules is fixed. Everything functions as follows. Rules are looked through in input order. The first rule which can be applied, is applied exactly once (the given replacement which is described by the rule is carried out), and then the operation cycle repeats (the list is looked through anew). If there are many substrings in the line which satisfy a given rule then only the first (i.e., the leftmost) will be replaced. The process comes to an end if after the last rule application the line has not changed. During the process of replacements the length of the initial string can change, increasing or decreasing. <BR><BR>
<b>Example</b>:<BR>
Let&#8217;s consider the string <i>ababaab</i><BR>
and the set of rules<BR>
<i>ab->c</i><BR>
<i>cc->ab</i><BR>
As a result of the application of rules the initial string will be transformed into &#8220;cac&#8221;. The following intermediate results will appear: <i>ababaab, cabaab, ccaab, ccac, abac, cac</i>.
<BR><BR>
That&#8217;s all. And now some tasks.<BR><BR>

<b>Task 1</b>: The initial non-empty string was obtained from an ordinary arithmetic formula by the deletion of every symbol except brackets. You are to write the set of rules which transforms this string into the string "RIGHT" or "WRONG" depending on the correctness of brackets positions, following rules of bracket use in arithmetical expressions. For example, the string ()((())()) must be replaced by the string RIGHT, while the string (() must be replaced by the string WRONG with the same replacement rules.<BR><BR>
<b>Task 2</b>: The initial string represents an arbitrary string of the following type [integer1]+[integer2]=?, where [integer1] and [integer2] are decimal representation of some positive integers. You are to write a set of rules which translates the initial string into a string of the following type: [integer1]+[integer2]=[sum], where [sum] is the decimal representation of the sum of two numbers integer1 and integer2. For example, the string 2+2=? must be replaced by 2+2=4, and the string 25+76=? must be replaced by 25+76=101. The integers can be up to 100 digits in decimal notation.<BR><BR>
<b>Task 3</b>: You are given a string which consists of uppercase letters (A-Z), and ends with the "?" sign. You are to output this string in reverse order without the &#8220;?&#8221; sign. For example, the string ABBCD? must be transformed into DCBBA<BR><BR>
<b>Task 4</b>: You are given a binary integer which consists of 0s and 1s. You are to write it as a string of letters &#8220;z&#8221;, and the total number of such letters must be equal to the given binary number. For example, 110 must be translated by the algorithm into &#8220;zzzzzz&#8221;<BR><BR>
<b>Task 5</b>: You are given a string which consists of uppercase letters (A-Z), and ends with the "?" sign. You are to output this string in non-descending order without the &#8220;?&#8221; sign. After applying the rules to DFAAS?, the string should look like this: AADFS<BR><BR>
<b>Task 6</b>: You are given two decimal positive integers separated by the "_" symbol and followed by "=?", for example 30_42=?. You are to find and output the value of the greatest common divisor for this pair. For example for 30_42=? it&#8217;ll be 6.<BR><BR>

<u>Note</u>: The limit on the increase of the string during the work of the algorithm is 100000 symbols.


*******InputConstraints*******

<p>There is no input data for this problem.</p>
 

*******OutputConstraints*******

<p>You should output your solutions to every task one by one. If you don&#8217;t want to solve some particular task just output 0, otherwise output the length of your solution N. Then output exactly N lines <i>abc->def</i>, where <i>abc</i> is the substring for replacement, and <i>def</i> is the substring by which it will be replaced.</p>


*******IOTestCases*******


<pre>

<b>Output:</b>
0
0
0
5
a->b
b->c
d->v
g->l
l->a
0
0

<b>Score:</b>
In this case (if the set of rules leads to a correct answer)<BR>you&#8217;ll get 1 + 0.2 = 1.2 points for the 4-th task.
</pre>



______________________________________________________
EYES||||||true||||||


<p> A robot which helps to translate old papers into digital format is being prepared for mass production. But it requires special software to work efficiently.  All scans which will be analyzed by the robot use one of the standard fonts: Arial, Courier, or Times New Roman. As the press is not ideal and pages can be rotated, some of the scans will be rotated by some degree. Imperfections of the robot's camera ("eye") can also cause some noise. Uniform noise can be up to 2% of the number of pixels. All analyzed documents are in uppercase English. The total number of letters in the robot's eye ranges from 3 to 6. The matrix in the robot's eye is monochrome and its size is 200x200 pixels.
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of tests [<i>t</i> <= 500], then <i>t</i> tests follows.
Each test consists of 200 rows with 200 chars in each of them. Characters can be '.' and 'X', where '.' means the white color of the page, and 'X' is the black color of words.<BR><BR>
The input data was generated using an on-line generator. The generator outputs data in 2 formats:<BR><BR>
1) <a href="http://zcontest.ru/2008.02/crimage/create.php" target=_blank>as a picture</a><BR>
2) <a href="http://zcontest.ru/2008.02/crimage/create.php?plain=1" target=_blank>as text</a><BR><BR>
The datasets used for testing are such that all letters of the word are contained inside the picture.</p>


*******OutputConstraints*******

<p>For each test output the recognized word in a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
2<p style="font-family: 'Courier New', Courier, Arial, Helvetica, sans-serif; font-size: 4pt;">
...........X...........X..............................................................X.................................................................................................................
.............................................X...........................X......................X.........................................X...............................................X.............
........................................................................................X...............................................................................................................
X............X....X...............................................................................................................X......X..................X......X.......................X..X.........
.........................................................X.........X.............................X.........................X.....XXX........X................................X..........................
................X.................................X...X....X......X.........................X...................................XXXXX.........................X.........................................
..............................X.X...........X.......................................................X......X....X.........X....XXXXXXX.........................................X........X...............
..............................................X...................................................................X..X.........XXXXXXXX.................................................................
......................................................................................................................X..........XXXXXXX................................................................
.....................................................................X............................................................XXXXXXX.......X......................X................................
...................................................X...........................X.....X...........X........X........................XXXXXXX...........................X..................................
.......................X...............................................................X............................................XXXXXXX.......................X...X.................................
.........X.................................................................................................X......X..................XXXXXXX.......................................................X....
.............X.........X.............................................X.....X...X.............X........................................XXXXXXXX...........................X...............X..............
...X....................................X.........................................................................................X....XXXXXXXX.........................................................
......................................X..........X...................................................................................X..XXXXXXXX.......................X................................
...........................................................................X.............................................................XXXXXXXX.......................................................
.....................................................X..X.........................................X.................XX...........X........XXXXXXXX......X.....................................X.........
......................X............................................................................................XXXXXXX.................XXXXXXXX....XX.................X.............................
....................X...........................................................................X..............X..XXXXXXXXXXXXX.............XXXXXXXX......X.....................X.......................
................................................................X................................................XXXXXXXXXXXXXXXXXXX.........XXXXXXXX...............X...................................
.............................................................................X......X..............X..............XXXXXXXXXXXXXXXXXXXXXXX.....XXXXXXXX..........X.......................X...............
......................X...........X.............X.............X....................................................XXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXX..............................................X..
....................................................................................................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX....................................X...........
.X...................X.............................................................X.................................XXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXX..X.........................................X..
................................X..................................................................................X..XXXXXXX.......XXXXXXXXXXXXXXXXXXXXXX...........X..................................
..................................X..............................................................................X.....XXXXXXX...........XXXXXXXXXXXXXXXXX...........................................X..
.......................................X................................................................................XXXXXXX..............XXXXXXXXXXXX...............................................
.....XX...........................................................................X......................................XXXXXXX..................XXXXXX................................................
..............................................................................................................X...........XXXXXXX..................................................X....................
................X.....................................X.......................................X............................XXXXXXX.X.........X.............X......................X..............X......
......................................................................................................X.....................XXXXXXX.................................X.............................X...X.
....................X..X..................................................X...........................X......................XXXXXXX...............X.....X............................X.................
..................................................X....X.......................................................X..............XXXXXXX...................................................................
...........................X.............................................................X.X...................................XXXXXXX..................................................................
........X.X.......X..........................................................................X......................X...........XXXXXXXX..............................X.................................
.X............................................................................X...................XXX............................XXXXXXXX.........................................X.....................
........X..................................X.....................................................XXXXX............................XXXXXXXX........................................X.................X...
................................................................................................XXXXXXX........X...................XXXXXXXX.............................................................
.................................X.......................X.......................................XXXXXXX............................XXXXXXXX..X....X...............X....................................
................................................................X.................................XXXXXXX............................XXXXXXX..............X.................................X...........
...................................................................................................XXXXXXX....................X.......XXXXX.....................X.......................................
......X........................................X....................................................XXXXXXX............................XXX..............................................................
................X....................................................................................XXXXXXX............X...............X.....................................................X.........
......................................X...................................................XXX...X.....XXXXXXX....................XX....................................................................X
......................................................X..................................XXXXX.........XXXXXXX..................XXXX.....................X..X...........................................
...................................X........................X...........................XXXXXXX.........XXXXXXX.XX..............XXXXX...................................................................
.........................................................................................XXXXXXX.X.......XXXXXXX...............XXXXXX....................X.............X................................
.................................................................................X.....X..XXXXXXX.........XXXXXXX.....X.......XXXXXXX................................................................X..
.......................................X...................................................XXXXXXX.........XXXXXXX...........XXXXXXX........X.............X............................X................
.....................................................X...X..................................XXXXXXX.........XXXXXXX.........XXXXXXX............................................X........................
...........................................X.....................X.........................X.XXXXXXX.X.......XXXXXXXX.X....XXXXXXX...........................................X..........................
..........X...........................................................X............X..........XXXXXXX.........XXXXXXX.....XXXXXXX.....X.............X............................X...X..................
.X.................................................................X..............XXX..........XXXXXXX.........XXXXXXXX..XXXXXXX..X.................X...................................................
...................................X.............................................XXXXX..........XXXXXXX........XXXXXXXXXXXXXXXX............................................X............................
................................................................................XXXXXXX..........XXXXXXX.........XXXXXXXXXXXXX.......X......................................X...........................
...................................X.....X......X................................XXXXXXX..........XXXXXXX.........XXXXXXXXXXX..............................................................X............
.......................................X..........................................XXXXXXX..........XXXXXXX......X..XXXXXXXXX...................X...........................X.......X....................
.......................................................................XX..........XXXXXXX...X..X...XXXXXXX..X......XXXXXXX.....................X................X.....................X................
.........................X........................X.................................XXXXXXX..........XXXXXXX.........XXXXX...................X..............................................X...........
................................X..X..X..............................................XXXXXXX..........XXXXXXX.X.......XXX......X.......................................................X................
.......................................................X..............................XXXXXXX..........XXXXXXXX........X...........................X....................................................
.................................................................X.....................XXXXXXXX.........XXXXXXXX.................................................................X......................
.......................X................................................................XXXXXXXX.........XXXXXXXX.............................................X.........................................
...................................X.X.................X..............X..................XXXXXXXX.........XXXXXXXX....X..X...........................................................X..................
..........................X....................X........X.................................XXXXXXXX.........XXXXXXXX.................................X..X.......X........................................
.X........................................X..........................XX........X...........XXXXXXXX.........XXXXXXX........................X................................................X...........
....................................................................XXXXXXX....X............XXXXXXXX.........XXXXX.....X........................X.......................................................
.....................................X................X...........XXXXXXXXXXXXXX.............XXXXXXXX.......X.XXX.......................................................................................
X........................X........................................XXXXXXXXXXXXXXXXXXX.........XXXXXXXX.........X......................................X.................................................
.................X.................................................XXXXXXXXXXXXXXXXXXXXXXX.....XXXXXXXX.............X........................................................................X..........
......X....................X...................................X....XXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXX...............................X........................................................X.X.....
.............................X...X...................................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX........................................X......................................................
.....................................X........................XX......XXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXX..........................X...................................................................
.............................................................XXXX......XXXXXXX.......XXXXXXXXXXXXXXXXXXXXXX..........................................................................................X..
.....X..........................................X...........XXXXXX......XXXXXXX...........XXXXXXXXXXXXXXXXX...........XX...X............................................................................
................X...........................................XXXXXX.......XXXXXXX..............XXXXXXXXXXXX.....X........................................................................................
...........................................X.................XXXXXX.......XXXXXXX..................XXXXXX............................X.....................................X............................
.......X.................................X....................XXXXX........XXXXXXX...................................................X.............................X....................................
..............................................................XXXXXX........XXXXXXX..X..........X.........................X.....................................X...............X...............X.......
.............X............................................X....XXXXXX....X...XXXXXXX........X...........................................................X.........X...................X........X........
.....................................................X..........XXXXX.........XXXXXXX.................XX................................................................................................
..........X.....................................................XXXXXX.........XXXXXXX........................................................................X.........................................
...........................................X.....................XXXXXX.........XXXXXXX.................................................................................................................
.................................................................XXXXXX..........XXXXXXXX...................X..X........X...............................................................................
...............................X...........................X......XXXXXXX.......X.XXXXXXXX...........X................X..................X..................X...........................................
.........................X........................XX...............XXXXX...........XXXXXXXX................................X.................X.........X................................................
.................................................XXXXX.X...........XXXXXX...........XXXXXXXX...................................X........................................................................
X........................................XX..X..XXXXXXXX............XXXXXX...........XXXXXXXX.....................X.........................................................................X...........
...............................................XXXXXXXXXXX...........XXXXX.X..........XXXXXXX...................X..........X...............................................X............................
....X.........................................XXXXXXXXXXXXXX.........XXXXXX............XXXXX.....................................................X.....................X............X....X..............
......X.......................................XXXXXXXXXXXXXXX.........XXXXX.............XXX...........................X.................................................................................
........................X......................XXXXXXXXXXXXXXXX........XXXXX.............X...................................................................................................X.....X....
...............................................XXXXXX.XXXXXXXXXXX......XXXXXXX..................................................X.......................................................................
.........................X......................XXXXXX.XXXXXXXXXXXX.....XXXXX.....................X..............................X...........................X..........................................
................................X................XXXXX....XXXXXXXXXXX....XXXXX..........................X....................................X.......X...X.......................................X......
............X......................X.............XXXXXX.....XXXXXXXXXXX..XXXXX..................................................................................X....................................X..
........................X.........................XXXXXX......XXXXXXXXXXX.XXXXX...............X...........................................................................X.............................
..................X...........X...................XXXXXXX.......XXXXXXXXXXXXXXXX........................................................................................................................
..............................................X...XXXXXXX.........XXXXXXXXXXXXXX.........................................................X............................X.................................
...................................................XXXXXX...........XXXXXXXXXXXXX..................................X....................................................................................
...................................XXX..............XXXXXX............XXXXXXXXXXX.......................................................................................................................
..................................XXXXXX.............XXXXX..............XXXXXXXX........................................................................................................................
............X...X................XXXXXXXXX...........XXXXXX..............XXXXXXX.......................................X................................................................................
.....X...........................XXXXXXXXXX...........XXXXXX...............XXXX....................X...................X..............................................X..X..............................
...................................XXXXXXXXXX.......X.XXXXXX...........................................................X.........................................................X....................X.
.....................................XXXXXXXXXX........XXXXXXX....................................................................X...........................................X.........................
.......................................XXXXXXXXX.....X.XXXXXX.....................................................................................................................X.....................
..X.....................................XXXXXXXXXX......XXXXXX..........................................................................................................................................
...................................X....X.XXXXXXXXXX.....XXXXX................X.........................................................................................................................
...............................X......X.....XXXXXXXXX....XXXXXX.............XX..............................................................................................X...................X.......
..............................................XXXXXXXXX...XXXXXX.....................X..................................................................................................................
................................................XXXXXXXXX.XXXXXX...X............................X.................................X...........X..X......................................................
X......X.X........................X.X............XXXXXXXXX.XXXXXX.........................X................X.....X.....................................................X...................X............
...................................................XXXXXXXXXXXXXX....................................X.....................X............................................................................
.................................XX..................XXXXXXXXXXXXX...........................................X...X.X..........................................................................X.........
...........................X...........................XXXXXXXXXXX...X......................................X..................X........................................X...............................
...............................................X.........XXXXXXXXX.....................X................................................................................................................
..........................................................XXXXXXX..............................................................X.....................................X..................................
.............................X..........................X...XXXX...........X............................................................................................................................
....X..X..................................................X...X......................................X.....................X.....................................X......................................
....X....................................................X..............................X......X........................................................................................................
........................................................................................................................................................................................................
........................................X......X..X...............X...........................................................................X.......................X.............X...................
......................X......................................................X.....X...............X....................................................................................................
.........X.................................................................................................................X..........X..................................................X.............X
...........................X......................................................................................................................................X.....X...............................
......................................X...........................................................................X.......................................................X.........X.................X.
.............................................................................................................................................................................X....................X.....
....................................................................X................................X..................................................................................................
.................................................................................X.............................................X........................X......................X........................
........................X..................................................................................X...........................................................................X................
...........X.......................................X................X..............................X........................................................X.................................X.........
..........X.....................................................................................................X.......................................................................................
........................................................................................................................................................................................................
................................................................................................................X...............................................................X.......................
.............................X..............................................................X....................................................................X......................................
.....................X...............X....................X..................X....X.......X...............................................X......X......................................................
......................................................................................................................................................................X........................X........
..............................X.....X..................................................................................................................X..........X....................X..............X.
...........................X.X......................X.........X...............................X.......X..................................X................................X.............................
..X............................................................................X..........X......................................X....................................................X.................
.........................................................................................................................................................................X..........X..X................
.......................................................................................................................................X..........................X..........................X.........X
.....X.................................................X...........................X......X.................................................................................X...........................
............................X............................................................................X.X........................X...X.........................................................X.....
..X...........................................................X.......X...................................................X......................................................................X......
...........................X......................X....................X........................................................X.....X.................................................................
...................................X....................................................................................................................................................................
....................................................X.......................................................................................................X.......X.....................X.X...........
..........................XX.......................................................X...................X.......................................................................X........................
.................................X....................................................X.........................................................................X............................X.....X....
.................................................................X.......................................................X..............................................................................
............X...................X...................................................................................X..........................X........................................................
..............X.........................................................................................................................................................................................
........................................................................................X...............................................................................................................
..............................................................................X..................X.............................X........................................................................
.........................................................................X....X.............................X.....................X.....................................................................
..............................X............................................................X...................................X.................................................................X......
..........................................................................................................X.......X.....................................................................................
.............................................................................................X.....X....................................................................................................
..X............................................X...............................................................................X........................................................................
..................................................X...................X............................................X..X......................X...X..................X...................................
...........X.......................................X.X.......................................X................................................................................X................X........
................................................X..................................................................X...............................X.................................X..................
..X....................................................................X.................................................................................................................X..............
.....................................X..............................................................................................X...................................................................
......X........................................X..........................................................................................X.........................................................X...
..................................................X...................X..............................................................................................X........X.........................
.............X....................................................................X.......................X..................................................................X..........................
.............................X................................................................X....................................................X...............................X.......X............
.................................X..................................................................................X........................X.........X....................X...................X.......
.................................................................................................X.........................X............................................................................
...........X...X..............................................................................X.........................................................................................................
..................................................................................................................................X..................................................................X..
......X.........................................................................................................................X.......................................................................
.......................................................................................................................X................................X..............................................X
......................................................X..................................X...............................X..............................................................................
.............................X................................................................X.......................................................................XX.................X..............
.........................................X..........X.....................................................................................X.................X...X......................................X
......................................................X..........................................................................................................XX.....X...............................
.X..........................X...................X.....................................................X...................................................................X.............................
.............................................................X.................................................................................X..........................................X........X....
..........................................X............................................X................................................................................................................
......X..........X........................................................................................................X......X............................................................X.........
...................X...............X.............................................................................X........................................................X...X.........................
....................................X...........X..................................X....................................................................................................................
.............X........................................................X........X.......................................................X................................................................
..................X............................................X.........................................X............................................X................................................X
........................................................................................................X..X...........................................................................................X
.........................................X...................................................................................................................................................X..........
.......................X.......................................................................X....X...................................................................................................
...............................................................................................X.....................................X..................................................................
....X...........................................X...............................................................X.............X..............X..........................................................
....................................................X..............................................................................................X..X......................X....................X.....
............................................................................................X...............................X...............................X................X..........X...............
...X.............X...............X...........X.....................................................................................................................X....................................
.................................................................................................................................................X........................XX.X..........................
.X......X.............................X..............X.........................................................X................X.....X.................................................................
...X..............................................X.....................................................................................................................................................
..............X................................................................X....X...................................................................................................................
.........................X...............................................................X..X...........................................................................................................
.......................X................X..........X....................X.................................................X.....................X................X......................................
......................X...........................................................................................X.......................................X.........X...................................
...........X.........................................................................................................X...........X..........................X...........................................
................................X.............X...X.........................................X...............X........................................................X...............X..................
.................................................................X..............X.........X..............X..........................................X...................X............X..................
....................................................................................X................................................................X...................X..............................
..X...................................................................................................................................................................X.....X...........................
............................................................................X...........................X...............................................................................................
.........................................................................................................................X................................X.............................................
...................................................X.....................................................X......................X.......................................................................
...................................X...............................................X............X.......................................................................................................
....................................................X..........X..................................X......X....................................................X................................X........
............................X.......................................X..........................X.............................................X........................................X.........X.......
....................................................................................................................................................................................................X...
....................................X....................................................X.X...................X...X...............................................................X....................
...................X.......................................................................X............................................................................................................
..................................X............X.............................................................................X..........................................................................
............X..................X...........................................X...X..........X.............................X........X.......................X...........X.........X..............X.........
................................................................................................................X...............................X......X...X..............................X.............
......................................X...............................................................................................................X.X...................................X...........
X.............................................X..........X........................................................................................X................X....................................
.............................................................................X..........................................................................................................................
............................................................X..............................X......................................X.....................................................................
..........................................................................................................................X............................................X................................
...........................X..............................X...............................................................................X.............................................................
.............................................X....................................................................X.....................................................................................
......................................................................................................................................................X...X.............................................
...........................................................................................X.................................................................................................X.X........
..............................X.......................................................................X..X.............X..........X..............X......................................................
..........................................................X....................................X......................................................X.................................................
..............X....................................................................................................X.............X......................................................................
.............................................XX.....X.....................................X.............................................................................................................
........................X................................X.X.......................................................................................................................................X....
............X................X...............X............................................................................................X.............................................................
X.....X...............................................................................................X.................................................................................................
........................................X.............................................................X..............X.............................................X.................................X..
...................X...X..................................................X...................................X..............................................X...............................X..........
....................................X.............................X..................................................................X...........................................................X......
................................................X...............................X............X.................................................................................................X........
.......X..................................X.............................................................................................................................................................
.................X.............X....X............................................................................................................................X............X.........................
...........................................................X............................................................................................................................................
............................................................................................X...........X.......X.........................X..................................X.........................X
...X....................................................................................X..............X..X............................X................................................................
....................................................X...........................X............X...................................................................X.X....................................
....................................X..........X......X...........................................X..........X.........X.........X.................................................................X....
...............................................X...........X.X....................................................X...............X.....................................................................
...................................................................X....................................................................................................................................
...........................................................................................................................................................................X...X........................
...............................................X........................................X..............................................................................................X................
....................................X..............................X.........X.X........................................................................X...............................................
........................................................X....X........................................................................X....................................X.........................X..
....................X........................................................................X.............................................X..X...............X..X......................................
.........................X..................................X...............................X...X.............................................................X.........................................
...............X.......................X....................X......X....................................................................................X...........................................X...
............................................X...........X...............X..................X...........X....................................X...........................................................
...X.....................................................X..............................................................................................................................................
.....................................................X..................................X...................................................................................X...........................
........X.............................................................X................X.....................................X.......................................X..................................
X..................X......X...........................................................................................X...............X.................................................................
.........................................................................X.......................................................................................................X..............X.......
..............X..........................X...........................X..............................X...................................................................................................
..................................X.............X..................................................................................................X...................................................X
....................................X................................................................................................................................................X....X.............
.............X..........................................................................................................................................................................................
.................................X..................................................................................................................................................X.................X.
....................................................................................X...................................................................................................................
.............................................X........................................X.X..................................................................X...........................................X
.....................................X....................................................................................................................................X.X........X...............X..
................................X......X...............................X....................................................X..............................X............................................
.............X..........................................................................................................................................................................................
...........................................................X............X......................................................................................................................X........
...........................................................................................................................................................X............................................
......X........................................................................X.................X...................................................................................................X..
.....X..................................................................X...............................................................................................................................
.........................................................................................................................................................X..............................................
.............................X.....................................................X.........................................................X..........................................................
...........................X....................................................X.......X............................................X........X.......................................X.................
.........................................X.....................................................................X.......................X..................................................X.............
.X................................................................................................................................X.....................................................................
........................................................X...........................X.................X......................X..........................................................................
......X..........................................................X...............X....................X....................X...........X.X.....................X..X.....................................
XX..................................................................XXX.................................................................................................................................
....X.......X..................................X.....................XXX...........................X..............................................X.............................................X.......
...................X........X.................................X......XXXX...............................................................................................................................
....................................................................XXXXXXX....................................X....................................X....X...............X..............................
.....................................X.............................XXX..XXXX....X.........................X.............................................................................................
........X.........................................................XXX.....XXX.............................X.................................................X.....................X..X.............X....
.............X...............................X....................XX.......XX........................................................X..................................................................
.................................................................XXX........XX.........X.........................................................................................................X......
................X...............................................XXXX........XX..X........X...X................X.................X..............................X........................................
...............................................XX.............XXXX..........XX.................................................................................................X...........X............
.X..........................................X..................XXXX.........XX...XX..........................................X...................X......................................................
.X..........................X.................................XXXXXXX.......XX...XXXX.......................X............X....X.........................X...............................X........X......
.............................................................XXX..XXXX.....XXX....XXX.......................................................................................................X...........
............................................................XXX.....XXXXXXXXX....XXXX.................................................................X.................................................
.X...X...................................................XXXXX.....X.XXXXXXX....XXXXX...................X...............................................................................................
................................X........................XXXX..................XXXXX..........................X.......................X................................................X................
...........................................................XXX................XXX.XX.............................XX.....................................................................................
............................................................XXX...............XX..XX.....................X........X........X.....................X...........................X.......................X..
..................................................X..........XXX.............XXX..XX...........................................X..........................................................X..........X..
......................X.......................................XX............XXX...XX.........XX.........................................................................................................
.................................X.......................................X.XXX..XXX........XXXXX.....X...........................................................................X......................
..........X................................X....X.....X....................XX....XX.....XXXXXXXXX.......................................................................................................
.....................................................................X....XXX....XX...XXXXXXXX.XX......X..............X.................................................................................
...............................X.........................................XXX....XXX.XXXXX..XX.....XXX...........................................X.......................................................
....................X.................................................XXXXX......XXXXXX...XXX......XXXX.................................................................................................
.................................X..X.................................XXXX......XXXXX....XXX........XXX.............................................................X........................X..........
.............X.....X...........................................X.......XXX.......XX.....XXX..........XXXX..................................................X............................................
.........................XX...X................................X........XXX..X..........XX..........XXXXX..................................................X.........................................X..
..X..........XX.......................................................................XXXX.........XXX.XX................X..............................................................................
......................................................................................XXX........XXXX..XX...................................X...........................................................
.............................................XX......X.........X....X................XXX.......XXXX....XX...............................................................................................
..............................X.....................................................XXX.......XXXX....XX..................X.............................................................................
X...................X...............................................................XX......XXXX......XX................................................................................................
..........................X...................X.....X............................XXXXX.....XXXXXX.....XX...........................................X........X...........................................
..X.......................................................X......................XXXX....XXXXXXXX....XX.............X................................X..........................X.......................
....X................................................X.........X..................XXXXXXXXX....XXX...XXX................................................................................................
.....................X..............................X...............................XXXXXX......XXXX.XX................X...............................................X................................
.............X........................................X...............................XXX........XXXXX...................................................X..................................X...........
.............X.......................................X...........X.....................XXX.........XXX..................................................................................................
..................................................................X.X....................X..........XX..........................................................X...................................X...
....XX......X.......X.............................................X................X...............XX.................X.............X........X........................X...X....X........................
.....................................................X.............................................XX...................................................................................................
...................................................................................X.X.............XX................................................X........X.........................................
...........................X................................X.....................................XX.................................................X.........................................X........
............................X...................................................................XXXX.......................................................X......................................X.....
...........................................X....................................................XXXX.........................................................................X..........................
.X..................X..........................................................XX................XXXX............................................................X......................................
........................................................................................X..........XX......X...........................X............................................X...X...............
............................................X.................................X.............................................................................X............X.......X.............X........
X...............................................X..........X......................X...................................................................................................X.................
.................................................X...................X..........X.....X...............................................................X...........X.....................................
.....................................................................................................................................................X..................................................
....................................................................................................................................X..............................................X....................
....................................................................................................................X.........................................................X.......................X.
......X..........................................X...............XX.....................................................................................................................................
.............X..............X............................................................X..............................................................................................................
X............X...X................X...............................................................X.....................................................................................................
........................................................................................X................................................................................X.................X............
.......................X.................X.....................X...............................XX......................................................X..............................................X.
X.XX...........................................................X.....................X............................X..................................X..................................................
.............................................X.....................................................X..........................X........................................X................................
........................................................................X...........X......X............X........................................................................X......................
.........XX......X.................................................X...............................X...........X..X...........................................X..............X..........................
........................................................................................................................................................................................................
.................................................X.................X......................................................................X.............................................................
................................................................................................................................................................X.......................................
......................X.............................................................................................................X..........................................................X........
..X..X...X.......................................................X.....................X.........................................................................X...................X..................
........X.............................................X..............................................................................................................................X..................
.............................................................................................X..............................................................................X....................X......
..........................X.......X................................................X....................................................................................................................
....X..............X.....................X.......................X.................................................................X....................................................................
...........................................................................................................X.....................................................................X......................
........................................................................................................................................................................X.............X..X..............
..X........................................................................X...........................................X........X.X........X...........X................................................
...............X.................X.......X.............................................................................................................X................................................
.........X....X................................X...................................................................................................X.......................................X............
..X.............X.....................X.............................................................................X..X...........................X............................XX..X...................
.....X..........................X......................................................X.............................X..X...............X....X.......................X.............X....................
.......X...............XX.....................X.........................................................................................................................................................
...........................X..............................................................X...............................................X...................X.........................................
.............................................................................................................................................X..........................................................
....................................X...........................................................................X..............X........X.....X.X.......................................................
...............X...................................X.............................X...................................X...............................................................X..................
........................................................................................................................................................................................................
..................................................X.................................................................................................X...................................................
........................................................................................................................................................................................................
......................................X......................................................................................................................X..........................................
......................................X...........................................................................................................X.....................................................
......X................X.........................................................................................................................................................X......................
.X.............X......................................................X.............................................................X...................................................................
......X..........................................X......................................................................................................................................................
...........................................................................................................X...........................X....................X..........X....X...........................
..............................................................................................................................X.........................................................................
..............................................X..X......................................................................................................................X...............................
.......................X................................X...............................X...X........................................................X..................X...............................
.............................................................................................................X....................X...................X.............X..........................X....X...
........................................X.....................X.......................................................X........X......X....................X............................................
............................................................X........X..X....................X..........................................................X...........................X...................
........................................................................................................................................................................................................
.....X.......X.......X.......................................................X........X.........................................................X.....................................X.................
..................X.............................................................X...........................................................X..........X.......X........................................
..X..............................X.........................X..............................X.....................X.......................................................................................
.....................................................................................X.................................................................................................X................
....................................................X...................................................................................................................................................
...................................X................X..........X...............................................................X..................X...........X.....................X.......X...........
..............X................X..................................................................................X...........X...X.............................X....................X..................
...............X........................................................................................................................................................................................
....................................X................X..........................................................................................................X..............................X........
....................................................................................................................................................................X...................................
..........................................................................................X.............................................................................................................
........................................................X.......................X..........................X............................................................................................
............X......X.......X.........X.........................................................................X.....X........................................X.....................................XX..
..............................X.....................................................................................................................................X...................................
...X.........X...........................................X................XX............................................................................................................................
......................................................X..................................................................................................................................X..............
</p>
<b>Output:</b>
WNILN
PML

<b>Score:</b>
score = 5 (first test is correct and contains 5 letters, the second test has an error in the last letter)

<b>Examples of images:</b>

<img src="http://www.spoj.pl/content/turbo:ZEYE-001.png" border=1> <img src="http://www.spoj.pl/content/turbo:ZEYE-001.png" border=1> <img src="http://www.spoj.pl/content/turbo:ZEYE-001.png" border=1>
<img src="http://www.spoj.pl/content/turbo:ZEYE-004.png" border=1> <img src="http://www.spoj.pl/content/turbo:ZEYE-004.png" border=1> <img src="http://www.spoj.pl/content/turbo:ZEYE-004.png" border=1>

Additional pictures can be generated with the on-line generator.
</pre>


______________________________________________________
CARL||||||true||||||


<p>Professor Octastichs has invented a new programming language, Carl. An expression in Carl may be a positive or negative integer, or may be of the form <b>(p e1 e2)</b> where <b>p</b> is a real number between 0 and 1 (inclusive) and <b>e1</b> and <b>e2</b> are Carl expressions. An integer represents itself and <b>(p e1 e2)</b> represents <b>x + y</b> where <b>x</b> is the value of <b>e1</b> and <b>y</b> is the value of <b>e2</b> with probability <b>p</b>, otherwise it represents <b>x - y</b>.
<p>Given a Carl expression, what is its expected value?</p>

*******InputConstraints*******

<p>Input consists of several Carl expressions, one per line, followed by a line containing ().</p>

*******OutputConstraints*******

<p>For each expression, output its expected value to two decimal places.</p>

*******IOTestCases*******

<pre><b>Input:</b>
7
(.5 3 9)
()

<b>Output:</b>
7.00
3.00
</pre>


______________________________________________________
SPOJTEST||||||true||||||


<P>
The famous Glenbow Museum in Calgary is Western Canada's largest museum, with exhibits ranging from art to cultural history to mineralogy. A brand new section is being planned, devoted to brilliant computer programmers just like you. Unfortunately, due to lack of space, the museum is going to have to build a brand new building and relocate into it. 

<P>
The size and capacity of the new building differ from those of the original building. But the floor plans of both buildings are orthogonal polygons. An orthogonal polygon is a polygon whose internal angles are either 90<sup>o</sup> or 270<sup>o</sup>. If 90<sup>o</sup> angles are denoted as R (Right) and 270<sup>o</sup> angles are denoted as O (Obtuse) then a string containing only R and O can roughly describe an orthogonal polygon. For example, a rectangle (Figure 1) is the simplest orthogonal polygon and it can be described as RRRR (the angles are listed in counter-clockwise order, starting from any corner). Similarly, a cross-shaped orthogonal polygon (Figure 2) can be described by the sequence RRORRORRORRO, RORRORRORROR, or ORRORRORRORR. These sequences are called <SPAN  CLASS="textit">angle strings</SPAN>.</p>

<img src="http://www.spoj.plhttp://www.spoj.pl/content/john_jones:spojtest.png"></img>
<P>
Of course, an angle string does not completely specify the shape of a polygon -- it says nothing about the length of the sides. And some angle strings cannot possibly describe a valid orthogonal polygon (RRROR, for example). 

<P>
To complicate things further, not all orthogonal polygons are acceptable floor plans for the museum. A museum contains many valuable objects, and these objects must be guarded. Due to cost considerations, no floor can have more than one guard. So a floor plan is acceptable only if there is a place within the floor from which one guard can see the entire floor. Similarly, an angle string is acceptable only if it describes at least one acceptable polygon. Note that the cross-shaped polygon in Figure 2 can be guarded by someone standing in the center, so it is acceptable. Thus the angle string RRORRORRORRO is acceptable, even though it also describes other polygons that cannot be properly guarded by a single guard. 

<P>
Help the designers of the new building determine how many acceptable angle strings there are of a given length. </p>


*******InputConstraints*******

<P>
The input file contains exactly 42 test cases. Each test case consists of a line containing a positive integer L(1<= L <=500), which is the desired length of an angle string. There won't be any extra whitespace in the input.</p>


*******OutputConstraints*******

<P>
For each test case, print a line with the number of acceptable angle strings of the given length.
</P>

*******IOTestCases*******


<PRE><b>Input:</b>
4
6
[and 40 test cases more]

<b>Output:</b>
1
6
[and 40 test cases more]
</PRE>
<p>Note: Anyone who solves this problem will get 3 points because the only language available is <b>Intercal</b>. Any rejected submissions will be shown as "Wrong Answer" instead of different verdicts like WA, RE and TLE to make this problem a little more difficult.</p>
<b>The input has been corrected on Sep 27. 2010. Now it contains no extra '\r' at the end of each line.</b>


______________________________________________________
SELF||||||true||||||


<p>Write A program to print itself n(-10 <= n <= 10) times.
<p>Negative count means the reversed program.


*******InputConstraints*******

<p>A line contains an integer n.


*******OutputConstraints*******

<p>The required string described above.


*******IOTestCases*******


<pre>
<b>Input:</b>
-2

<b>Source:</b>
abcdefg

<b>Output:</b>
gfedcbagfedcba

<b>Score:</b>
7

<b>Hint:</b>
You can contact me if you have any question about the Special Judge or your code.

</pre>




______________________________________________________
NOP||||||true||||||


<p>Mirko purchased a new microprocessor. Unfortunately, he soon learned that many of his programs that
he wrote for his old processor didn't work on the new processor.</p>
<p>Deep inside the technical documentation for both processors, he found an explanation. In order to
work faster, the new processor imposes certain constraints on the machine code of programs,
constraints that never existed on the previous model.</p>
<p>The machine code of a processor consists of instructions that are executed sequentially. Each
instruction uses a byte of memory. Also, instructions can have zero or more parameters, each of which
uses an additional byte of memory. In machine code, parameters immediately follow an instruction. </p>
<p>When formatted as text, machine code instructions are uppercase letters, while parameters are
lowercase letters. For example:</p>

<pre>A b c b B c c C D e f g h</pre>

<p>This program consists of four instructions; the first takes three parameters, the second two, the third
none and the fourth takes four parameters. The program uses 13 bytes of memory.</p>
<p>The new processor model fetches memory in four-byte chunks so each instruction must start at a
memory address that is divisible by four (the first byte in memory is address 0). To achieve that, we
can insert NOP (no operation) instructions into the old program, instructions that do nothing and are
not limited to memory locations divisible by four. The above program, adapted to run on the new
processor, can look like this:</p>

<pre>
A b c b B c c NOP C NOP NOP NOP D e f g h
</pre>

<p>The instructions A, B, C and D are now at memory locations 0, 4, 8 and 12, which satisfies the
processor's constraints.</p>
<p>Write a program that determines the smallest number of NOP instructions that need to be inserted
for the given program to work on the new processor model.</p>


*******InputConstraints*******

<p>The input contains the machine code of the program written for the old processor model. The program
will consist of at most 200 English letters.</p>
<p>The program will always start in an instruction i.e. the first letter in the machine code will be uppercase.
If an instruction appears more than once in the machine code, it will always take the same number of
parameters.</p>


*******OutputConstraints*******

<p>Output the smallest number of NOP instructions needed to adapt the program for the new processor.</p>


*******IOTestCases*******


<pre>
Input
Abcd

Output
0


Input
EaEbFabG

Output
5


Input
AbcbBccCDefgh

Output
4
</pre>


______________________________________________________
BFWRITE||||||true||||||


<p>Task is about checking your Brainf**k Skill!!
So you have to write "SPOJ is indeed awesome" just using brainf**k. Try to use as few letters as possible.


*******InputConstraints*******

<p>Nothing


*******OutputConstraints*******

<p>Just: "SPOJ is indeed awesome"


*******IOTestCases*******


<pre>
<b>Input:</b>


<b>Output:</b>
SPOJ is indeed awesome
</pre>



______________________________________________________
RELBOARD||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/RELBOARD/en/">English</a></td> 
<td width="50%"><a href="/problems/RELBOARD/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given a matrix A with dimension N*N (2 &#8804; N &#8804; 1000) which contains only 6 types of value: {-1, -2, 0, 1, 2, 3}</p>

<p>A is called the relative board of a sequence T = (T<sub>1</sub>, T<sub>2</sub>, ..., T<sub>n</sub>), or T relates to  A if:</p>

<ul>
<li>A<sub>ij</sub> = 0  : T<sub>i</sub> = T<sub>j</sub></li>
<li>A<sub>ij</sub> = 1  : T<sub>i</sub> < T<sub>j</sub></li>
<li>A<sub>ij</sub> = -1 : T<sub>i</sub> > T<sub>j</sub></li>
<li>A<sub>ij</sub> = 2  : T<sub>i</sub> &#8804; T<sub>j</sub></li>
<li>A<sub>ij</sub> = -2 : T<sub>i</sub> &#8805; T<sub>j</sub></li>
<li>A<sub>ij</sub> = 3  : T<sub>i</sub> is not equal to T<sub>j</sub></li>
</ul>
<p>For all i, j: 1 <= i, j <= N</p> 

<p>Given the relative board A, find the sequence of positive integers T = (T<sub>1</sub>, T<sub>2</sub>, ..., T<sub>n</sub>) that relates to A such that Max(T) is as small as possible. Suppose that the sequence T always exists. </p>

<p>Define Max(T) = Max(T<sub>1</sub>, T<sub>2</sub>, ..., T<sub>n</sub>).</p>

*******InputConstraints*******

<p>The first line contains an integer N. N lines follow, each line contains N integers that describe the relative board A. 
</p>

*******OutputConstraints*******

<p>The first line contains Max(T). The second line contains N separated positive integers T<sub>1</sub>, T<sub>2</sub>, .., T<sub>n</sub>. </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
6
 0  1  1  1  2  2
-2  0  1  0  2  2
-2 -1  0  3  0  1
-2 -2  3  0  1  1
-1 -2  0 -1  0  1
-1 -2 -1 -1 -1  0

<b>Output:</b>
4
1 2 3 2 3 4 

-> Score = 4
</pre>





______________________________________________________
PLCNUM2||||||true||||||


<p>Some days ago, Little Chucha bought a computer game. She is given a NxN board which she has to fill with the numbers 1 to N^2, no repetitions allowed. The computer calculates the sum of distances for each pair of consecutive numbers, that is, 1 -> 2, 2 -> 3, ..., N^2 -> 1. The goal is to make that sum as short as possible. <p>After many hours spent playing, Chucha has mastered the game. So she bought a new version and now the goal is to make the sum of distances as big as possible. Can you help her?


*******InputConstraints*******

<p>Input consists of a single integer number 1<=N<=100, the size of the board.


*******OutputConstraints*******

<p>Output one possible placing of the numbers. You are to write N lines, N space separated integers each.


*******IOTestCases*******


<pre>
<b>Input:</b>
3

<b>Output:</b>
1 2 3
4 5 6
7 8 9

<b>Score:</b>
Score for the example is:
Distance 1 -> 2 : 1
Distance 2 -> 3 : 1
Distance 3 -> 4 : 3
Distance 4 -> 5 : 1
Distance 5 -> 6 : 1
Distance 6 -> 7 : 3
Distance 7 -> 8 : 1
Distance 8 -> 9 : 1
Distance 9 -> 1 : 4
Sum of distances (SOD): 16, Min SOD: 10, Score: 1+16-10=7 points.
</pre>



______________________________________________________
POLYBIUS||||||true||||||


<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr class="navigation">
<td><a href="/problems/POLYBIUS/polski/">Wersja polska</a></td>
<td><a href="/problems/POLYBIUS/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>For given text, encipher it with <a href="http://en.wikipedia.org/wiki/Polybius_square">Polybius square</a> and print.</p>

*******InputConstraints*******

<p>The first line of the standard input contains one integer <strong>t</strong> (t&lt;10001) which is the number of test cases.</p>
<p>In each of the next <strong>t</strong> lines there is a string <strong>n</strong> (could contain spaces, which you dont have to encipher; apart from spaces it will be only made of big letters - 'A' to 'Z').</p>

*******OutputConstraints*******

<p>For each test, print ciphered string <strong>n</strong>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4<br />SHORTENING IS FUNNY<br />NO IT ISNT<br />TRY IT AND ASCERTAIN<br />JI JI<br /><strong>Output:</strong>
43 23 34 42 44 15 33 24 33 22 24 43 21 45 33 33 54<br />33 34 24 44 24 43 33 44<br />44 42 54 24 44 11 33 14 11 43 13 15 42 44 11 24 33<br />24 24 24 24</pre>
<p></p>


______________________________________________________
DDATE||||||true||||||


<p>In DOS, current date is stored in encoded form to reduce the space. Date is encoded in a single integer number. The binary form of the number can be divided to decode the date parameters.<br /><br />Date is a sequence of 23 bits. First 14-bits for year, next 4-bits for month and finally 5 bits for date.<br /><br />e.g., 12 February 1990 can be encoded as -<br /><br />1990 02 12 ---&gt; (11111000110 0010 01100) Binary Form<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; ---&gt; (1018956) Decimal Form<br /><br />Your task is simple. You only will have to decode date from the given decimal encoded form. Score is source length.</p>

*******InputConstraints*******

<p>The input consists of N cases (equal to about 1000). The first line of the input contains only positive integer N. Then follow the cases. Each case consists of exactly one line with one positive integer X. This integer X is the encoded form which is to be decoded. &nbsp;<br /><br />1&lt;=N&lt;=1000</p>
<p>X will fit in Integer(C Int) range.</p>

*******OutputConstraints*******

<p>Output consist of exactly N lines of decoded form.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />1024275<br />1029012<br />1017036<br />903863<br />802507<br /><br /><strong>Output:</strong><br />19 August 2000<br />20 December 2009<br />12 June 1986<br />23 May 1765<br />11 June 1567<br /><br /><br /></pre>


______________________________________________________
DBP||||||true||||||


<p>The cook at the Frobbozz Magic Pancake House sometimes falls asleep on the job while cooking pancakes. As a result, one side of a stack of pancakes is often burned. Clearly, it is bad business to serve visibly burned pancakes to the patrons. Before serving, the waitress will arrange the stacks of pancakes so that the burned sides are facing down. You must write a program to aid the waitress in stacking the pancakes correctly.

<p>We start with a stack of N pancakes of distinct sizes, each of which is burned on one side. The problem is to convert the stack to one in which the pancakes are in size order with the smallest on the top and the largest on the bottom and burned side down for each pancake. To do this, we are allowed to flip the top k pancakes over as a unit (so the k-th pancake is now on top and the pancake previously on top is now in the k-th position and the burned side goes from top to bottom and vice versa).

<p>For example (+ indicates burned bottom, - a burned top):

<p>+1 -3 -2 [flip 2] &#8658; +3 -1 -2 [flip 1] &#8658; -3 -1 -2 [flip 3] &#8658;
+2 +1 +3 [flip 1] &#8658; -2 +1 +3 [flip 2] &#8658; -1 +2 +3 [flip 1] &#8658; +1 +2 +3

<p>You must write a program which finds a sequence of flips, which converts a given stack of pancakes to a sorted stack with burned sides down.


*******InputConstraints*******

<p>The first line of the input contains a single integer N < 55, the number of problem instances to follow. Each of the following N lines gives a separate dataset as a sequence of numbers separated by spaces. The first number on each line gives the number M of pancakes in the data set. The remainder of the data set is the numbers 1 through M in some order, each with a plus or minus sign, giving the initial pancake stack. The numbers indicate the relative sizes of the pancakes and the signs indicate whether the burned side is up (-) or down (+). M will be, at most, 1000.


*******OutputConstraints*******

<p>For each dataset, you should generate one line of output with the following values: The number of flips (K, where 0 <= K <= 3000) required to sort the pancakes and a sequence of K numbers, each of which gives the number of pancakes to flip on the corresponding sorting step. There may be several correct solutions for some datasets and your task is to find the shortest one. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5
12 -2 -1 -10 +7 -4 -8 +12 -3 +5 +11 +6 -9
11 +2 +6 -10 +4 -1 -5 +7 -8 -3 +9 -11
11 +1 +8 +11 +10 +4 +3 -5 +2 -6 -7 -9
13 -2 -12 +8 +9 +10 -6 -5 +3 -7 -4 +11 -1 +13
12 +11 -3 +7 -5 -8 -12 -9 -1 +4 -2 -10 +6

<b>Output:</b>
25 7 12 3 1 11 4 10 2 1 9 3 1 8 6 7 2 1 6 4 5 1 1 4 1 3 
25 11 1 11 3 1 10 1 1 9 7 1 8 2 1 6 1 5 3 4 2 1 3 1 2 1 
25 3 11 8 1 10 3 9 7 1 8 7 1 7 6 1 6 4 1 5 3 4 1 1 3 1 
24 2 1 12 2 1 11 4 10 3 7 2 1 6 4 5 2 1 4 1 3 1 1 2 1 
29 6 1 12 7 11 6 10 1 1 9 5 1 8 6 7 5 6 2 5 2 1 4 1 1 3 1 1 2 1 

<b>Score:</b>
6.4943590
</pre>



______________________________________________________
SQDIFF||||||true||||||


<p>A gardener bought two sprinklers for his new garden. Each sprinkler moistens the soil around a circle with known radius. One will be working in the morning and the other in the evening. To plan how many plants of different species is better to plant, the gardener wants to know what area of the garden will be watered only in the morning, only in the evening or both in the morning and in the evening. After some searching on the Internet, he found a formula for calculating the area of intersection of circles, but for some reason the formula that would help to calculate the remaining two areas was not found.


*******InputConstraints*******

<p>The first line contains T (1 <= T <= 1000) - the number of tests. The next T lines contain six integers x1, y1, r1, x2, y2 and r2 (0 <= xi, yi, ri <= 10000) - coordinates and radii of the first and second sprinkler, respectively.


*******OutputConstraints*******

<p>For each test case print the absolute value of the difference between the the area that is going to be watered only in the moring and the area that is going to be watered only in the evening rounded to two decimals after the point. Your score is the source length.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 2 4 5 2 3

<b>Output:</b>
21.99

</pre>


______________________________________________________
MONS||||||false||||||

<p>Your Task is simple. Write the code that will print the content of the following file.</p>
<p><a href="../../content/skydbms:monster" target="_blank">http://www.spoj.pl/content/skydbms:monster</a></p>

______________________________________________________
BRACKETS||||||false||||||

<p style="text-align: left;">Clyde has written a program that can evaluate arithmetic expressions. There is just one problem - the expressions must be fully parenthesized!</p>
<p style="text-align: left;">Help Clyde by making sure all of his expressions are fully parenthesized - he's willing to reward you.</p>
<p style="text-align: center;"><strong>Input</strong></p>
<p style="text-align: left;">The first line of input contains a single integer <code>n</code> (1 &le; <code>n</code> &le; 1000) that indicates the amount of test cases.<br />On the next <code>n</code> lines will be a string <code>s</code> representing the expression. <code>S</code> will always contain a valid expression and will be strictly less than 256 characters in length.</p>
<p>The operators used in <code>s</code> are <span style="font-family: 'courier new', courier;">*/%</span> of high precedence and <span style="font-family: 'courier new', courier;">+-</span> of low precedence. All operators are binary. All input strings will consist of only characters in the set "<span style="font-size: x-small;"><span style="font-size: small;"><span style="font-family: 'andale mono', times;">0123456789+-*/%()</span></span></span>" (no whitespace).</p>
<p style="text-align: center;"><strong>Output</strong></p>
<p style="text-align: left;">Your program should output <code>n</code> lines, each containing the fully parenthesized expression <code>s</code>.</p>
<p style="text-align: left;">A fully parenthesized expression is one where each operator is one where all operands are surrounded by either one parenthesis and one operator, or two parentheses. There should not be any extra parentheses.</p>
<p style="text-align: left;">The outputted expression does not need to be a solvable expression.</p>
<table style="text-align: left;" border="0">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><strong><span style="color: #008000;">Fully Parenthesized</span></strong></td>
<td style="text-align: center;" width="50%"><strong><span style="color: #ff0000;">Not Fully Parenthesized</span></strong></td>
</tr>
<tr>
<td style="text-align: center;"><span style="color: #008000;">(42)</span></td>
<td style="text-align: center;"><span style="color: #ff0000;">42</span></td>
</tr>
<tr>
<td style="text-align: center;"><span style="color: #008000;">(1+(2*3))</span></td>
<td style="text-align: center;"><span style="color: #ff0000;">1+(2*3)</span></td>
</tr>
<tr>
<td style="text-align: center;"><span style="color: #008000;">(1+((61%(3+6))*7))</span></td>
<td style="text-align: center;"><span style="color: #ff0000;">1+61%(3+6)*7</span></td>
</tr>
</tbody>
</table>
<p style="text-align: center"><strong>Example</strong></p>
<p><strong>Input</strong><br /><span style="font-size: x-small;"><span style="font-family: 'courier new', courier;"><span style="font-size: x-small;">6<br /></span></span><span style="font-size: small;"><span style="font-family: 'courier new', courier;">42<br />1+2*3<br />1%6*2<br />2/0<br />(1+((61%(3+6))*7))<br /></span></span></span><span style="font-family: 'courier new', courier; font-size: small;">(((((1)))))</span></p>
<p><strong>Output</strong><br /><span style="font-size: small;"><span style="font-family: 'courier new', courier;">(42)<br />(1+(2*3))<br />((1%6)*2)<br />(2/0)<br />(1+((61%(3+6))*7))<br /></span></span><span style="font-family: 'courier new', courier; font-size: small;">(1)</span></p>
<p style="text-align: center;"><strong>Score</strong></p>
<p style="text-align: left;">Your score is the length of your source code.</p>


______________________________________________________
DEC_BIN||||||true||||||


<p>Binary representation of some decimals are terminating and some gives repeating decimal,for example the binary representation 7(111) is terminating but 7.2(111.0011001100110011...) is non terminating.</p>
<p>Given a number you have to determine whether it's binary representation is terminating or not.</p>
<p>Score is the length of the source.</p>

*******InputConstraints*******

<p>Each line of input presents a single test case: a string of decimal digits, each of them is no longer than <strong>500 </strong>characters long.There will be no extraneous spaces in the input.</p>
<p>The input ends on EOF.</p>

*******OutputConstraints*******

<p>Output &#8220;1" or &#8220;0&#8221; for terminating and non-terminating respectively.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />457788832157.625<br /><br /><strong>Output:</strong><br />1<br /></pre>


______________________________________________________
CYCLE||||||true||||||


<p>A m-cycle in a directed graph is defined to be a sequence of vertices v<sub>0</sub>-v<sub>1</sub>-v<sub>2</sub>-v<sub>3</sub>-...-v<sub>m</sub> where an edge (v<sub>i</sub>, v<sub>i+1</sub>) exists for each 0 &lt;= i &lt; n, v<sub>i</sub> != v<sub>j</sub> for all 0 &lt;= i &lt; j &lt; m and v<sub>m</sub> = v<sub>0</sub>. For a given graph of n vertices we can count the number of cycles in it. Now you task is a little harder: find the maximum value among all graphs with certain constraints, that is, your graph should contain an edge from either vertex x to y or y to x, but not both.<br />Assume there are R m-cycles in your output, your solution will be awarded by w * R points, where w is related to n and m. Your score will be the sum of scores of all test cases. <strong>Note your source must not be larger than 10000 bytes.</strong></p>

*******InputConstraints*******

<p>One line containing two blank-separated integers, n and m, where 3 &lt;= m &lt;= n &lt;= 17.</p>

*******OutputConstraints*******

<p>Adjacent matrix A of the graph you found. Numbers must be separated by spaces. Edge (i, j) exists when and only when A<sub>ij</sub> = 1. A<sub>ij</sub> + A<sub>ji</sub> &lt;= 1 and A<sub>ii</sub> = 0 for any 0 &lt;= i, j &lt; n, or your solution will be judged as wrong answer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 3<br /><br /><strong>Output:</strong><br />0 0 1<br />1 0 0<br />0 1 0<br /><br />Assume w = 0.2, this solution will get 0.2 * 1 = 0.2 points for this case.<br /></pre>


______________________________________________________
REVINPUT||||||true||||||


<p>A simple task is a rare thing in SPOJ these days, but if you are looking for one, this task is for you!, all you need to do is to reverse the input N times.</p>
<p>Score is the length of your solution.</p>

*******InputConstraints*******

<p>The first lines of the input is an integer N ( 1 &lt;= N &lt;= 100).  Next follows the input consisting of all printable ASCII characters.The input is terminated by EOF. You may assume that length of each word is less then 1024 and maximum number of words can be never more than 1024.</p>

*******OutputConstraints*******

<p>Reverse the input N times.There must be a space between two words of the output.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />2<br />fox jumps over the lazy dog.<br /><br /><strong>Output:</strong><br /><br />.god .god yzal yzal eht eht revo revo spmuj spmuj xof xof  <br /><br /><p>&nbsp;</p></pre>


______________________________________________________
WORDNUM||||||true||||||


<p>In this task you just need to convert a number from its word form to digit form. For example, you should output 1 for 'one', 37000 for 'thirty seven thousand' or 99 for 'ninety nine'. You can assume that output will be >= 0 and &lt; 50000. Also all numbers will be valid i.e output will not have numbers like 023.</p>

*******InputConstraints*******

<p>First line of input has a single positive integer t = number of test cases. In the next t lines, given a number in word form.</p>

*******OutputConstraints*******

<p>Output the number as specified.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />one hundred twenty three<br />thirty four thousand one hundred eight<br />eleven<br /><strong><br />Output:</strong><br />123<br />34108<br />11<br /><br /><strong>Score : </strong>Source code length</pre>


______________________________________________________
MB2||||||true||||||


<p>Your task is to write a program in <a href="http://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> which will read a line of text and print it in reverse order.</p>

*******InputConstraints*******

<p>First and the only line of input contains text which will not be longer than 200 characters. At the end of an input there is new line character (ASCII: 10).</p>

*******OutputConstraints*******

<p>Print all characters of the input in reverse order.</p>

*******IOTestCases*******

<p><strong>Input:</strong></p>
<pre>
Reverse this line!

</pre>
<p><strong>Output:</strong></p>
<pre>
!enil siht esreveR
</pre>


______________________________________________________
NPRIME||||||true||||||


<p>Given an integer <strong> 1 &lt;= N &lt;= 100000</strong>, you have to print the Nth prime number.</p>
<p>Score is the length of your source.</p>

*******InputConstraints*******

<p>The input file consists of series of numbers one in each line.The input is terminated by EOF.</p>

*******OutputConstraints*******

<p>The Nth prime number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>3<br />5<br />7<br />11<br /></pre>
<br /><strong>Output:</strong> <br /><br />
<pre>5<br />11<br />17<br />31<strong><br /></strong></pre>
<br />PS: Timit limit and test cases are modified on <strong>05.10.2010</strong> to encourage more short solution.<br /></pre>


______________________________________________________
BENDA||||||true||||||


<p>Daniel enjoys watching TV series. One of his favourite is Futurama. One episode has the following plot.<p>Professor Farnsworth switches bodies with Amy using a new invention so that he can relive his youth. Likewise, Amy is reminiscent of her younger days of constantly eating and wishes to use the Professor's skinny body to gorge herself with food once again. Later, they find they cannot switch their bodies back with each other, because the device will not operate on the same pairing of bodies. The Professor thoughtlessly suggests they might be able to switch back to their original bodies with a third person. Bender switches bodies with the Professor (Amy's body) so he can perform a robbery without being identified. After realizing his mistake, the Professor, now in Bender's body, tires of trying to solve the problem. He decides to live a life of daring stunts and joins a robot circus.
Bender, now in Amy's body, is caught aboard the yacht of Robo-Hungarian emperor Nikolai. When Bender states that he is really a robot who has switched bodies with a human, Nikolai reveals that he feels trapped by his wealth and wishes to live the life of a normal, "peasant" robot. Bender tricks him into switching bodies with a robot wash bucket and inhabits Nikolai's body, planning to live like an emperor. However, he discovers that Nikolai's fiancÃ©e and first officer are plotting to kill him. Bender is saved with the assistance of the Professor and the circus' loyal Robo-Hungarian citizens. Meanwhile, Leela switches bodies with Amy, thus inhabiting the Professor's body, when she comes to believe that Fry only loves her for her beauty. In order to beat Leela at her own game, Fry switches bodies with Dr. Zoidberg in an attempt to repulse Leela. This leads them to one-up each other using various disgusting acts while on a date, which climaxes when the two have sex with each other in their equally grotesque bodies, and reconcile. During this time, Amy has overeaten in Leela's body, making it overweight. She switches bodies with Hermes, so she can continue eating while Hermes slims Leela's body back down. While eating, she witnesses Fry and Leela making out in the Professor and Dr. Zoidberg's bodies and loses her appetite for food. Concurrently, Zoidberg and Nikolai, in the respective bodies of Fry and the robot wash bucket, become friends and attempt to assume the lives of Fry and Bender, blowing up their apartment in the process. The bucket, now in Amy's body, professes its love to Scruffy the Janitor, but he turns it away. Finally, two Globetrotters, Ethan "Bubblegum" Tate and "Sweet" Clyde Dixon, mathematically prove that everyone's minds can be restored using two additional bodies and then successfully do so, with themselves as the extras.<p>We need to replicate how they have accomplished this. We will consider that a certain amount of body switches already took place. We need to determine the sequence of switches after which everyone is in self body, using no more than two extra bodies. Don't forget that two specific bodies can be mind switched only once.


*******InputConstraints*******

<p>The first line of input contains t - the number of test cases. The description of tests follows. The first line of each test is numbers n - the numbre of characters and m - the number of body swtiches already taken place. Next m lines contain the description of switches. Let us mark all bodies with numbers from 1 to n. Then each switch is defined by two numbers a, b - the numbers of bodies used in the switch. The switches are listed chronologically.


*******OutputConstraints*******

<p>Print the number of switches needed to return everyone to their own bodies in the first line of the output. Then you should print the switches themselves in the order they should be performed. The format should be the same as in the input data. You can output any valid solution. However you shouldn't use more than two extra bodies. The extra bodies should be marked as n+1 and n+2. After all the switches the extra characters should be in their own bodies as well. Also you can't use more than 3n swtiches.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
2 1
1 2

<b>Output:</b>
5
1 3
2 4
2 3
1 4
3 4

The score of such solution will be 5.

</pre>



______________________________________________________
DIE_PIP||||||true||||||


<p><img src="http://www.spoj.plhttp://en.wikipedia.org/wiki/File:Dice_2005.jpg" alt="" /></p>
<p>A <strong>die </strong>is a small throwable object with multiple resting attitudes, generally used as gambling devices, especially for craps or sic bo, or for use in non-gambling tabletop games.A traditional die is a cube (often with corners slightly rounded), marked on each of its six faces  with a different number of circular patches or pits called <strong>pips</strong>.  All of these pips have the same appearance within a set of dice, and are  sized for ease of recognizing the pattern formed by the pips on a face.<img title="Die" src="http://en.wikipedia.org/wiki/File:Dice_2005.jpg" alt="Die" />These pips are typically arranged in patterns denoting the numbers one  through six. The sum of opposing faces traditionally adds up to seven.</p>
<p>In this problem we will be developing a module for electronic die,your task is to convert from the decimal die roll to the visible configuration of pips (dots) on the electronic die's face,as this die is electronic we will use 0 and 1 instead of the standard one.<strong> </strong></p>
<p><strong>The challenges thrown to you are that you can use any one of your favourite programming language(s) as long it's name starts with 'C' and&nbsp; to keep your solution less than 128 bytes.<br /></strong></p>
<p>Score is the length of your source.</p>

*******InputConstraints*******

<p>An integer N<strong> (0&lt;N&lt;7), </strong>one in each line. Input is terminated by EOF.</p>

*******OutputConstraints*******

<p>The face of the die giving the appropiate value.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>1<br />2<br />3<br />4<br />5<br />6</pre>
<br /><br /><strong>Output:</strong><br /><br />
<pre>0 0 0<br />0 1 0<br />0 0 0<br /><br />0 0 1<br />0 0 0<br />1 0 0<br /><br />1 0 0<br />0 1 0<br />0 0 1<br /><br />1 0 1<br />0 0 0<br />1 0 1<br /><br />1 0 1<br />0 1 0<br />1 0 1<br /><br />1 0 1<br />1 0 1<br />1 0 1</pre>
<br /><br /></pre>


______________________________________________________
XMAS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/XMAS/en/">English</a></td> 
<td width="50%"><a href="/problems/XMAS/vn/">Vietnamese</a></td> 
</tr></table>


<p>Write a program to print to the screen the following Christmas tree. Your score is the length of your code, the smaller the better.

<pre>
_____________*_______________
____________***______________
___________*o_o*_____________
__________*o___o*____________
_________*o_____o*___________
________*o___o___o*__________
_______*o___o_o___o*_________
______*o_o_o___o_o_o*________
_____*___*o_____o*___*_______
________*o_______o*__________
_______*o____o____o*_________
______*o____o_o____o*________
_____*o____o___o____o*_______
____*o__o_o_____o_o__o*______
________*o_______o*__________
_______*o_________o*_________
______*o___________o*________
_____*o_____________o*_______
____*o_______________o*______
___*o_________________o*_____
__*o___________________o*____
_*o_o_o_o_o_o_o_o_o_o_o_o*___
____________o_o______________
____________o_o______________
____________o_o______________
____________o_o______________
____________o_o______________
____________ooo______________
</pre>
<p>
Merry Christmas and happy new year to you!




______________________________________________________
NUMWORD||||||true||||||


<pre><div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><p style="font-size: 13px; text-align: justify;">In this task you just need to convert a number from its digit form to word form.</p><p style="font-size: 13px; text-align: justify;"> For example, you should output 'one' for 1,'thirty seven thousand' for 37000 .</p><p style="font-size: 13px; text-align: justify;"> You can assume that input will be &gt;= 0 and &lt; 50000.</p><p style="font-size: 13px; text-align: justify;"> Also all numbers will be valid i.e input will not have numbers like 023.</p>
*******InputConstraints*******
<p style="font-size: 13px; text-align: justify;"> input contains one line which is n 0&lt;=n&gt;=50,000</p>
*******OutputConstraints*******
<p style="font-size: 13px; text-align: justify;">Output the number in words as specified.</p>
*******IOTestCases*******
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: left; margin: 8px;"><strong>Input:</strong></pre>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: left; margin: 8px;"><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: left; margin: 8px;">123<br />34108</pre>
<strong>Output:</strong>
<pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: left; margin: 8px;">one hundred twenty three<br />thirty four thousand one hundred eight</pre>
<strong>Score : </strong>Source code length</pre>
</pre>
problem modified on 23 / 2 / 2011</div>
many other languages added as users want!!! and problem statment changed which lead to no accepted solutions</pre>
<pre>and that is because increasing in test cases number</pre>


______________________________________________________
LINC||||||true||||||


<p>In this task you have to solve system of linear congruences.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>A list of system of Linear congruences,in the form <strong>"x = P (mod Q)"</strong> ,(without qoutes) where <img src="http://www.spoj.pl/files/gif/8/8/3/8831a8c2100b2631d469d8a9e76ee205/"/> and <img src="http://www.spoj.pl/files/gif/8/8/3/8831a8c2100b2631d469d8a9e76ee205/"/>.Every equations of a system is given in exactly one in&nbsp; each line and there is an additional new line between two systems.</p>
<p>The input is terminated by EOF.</p>

*******OutputConstraints*******

<p>Output the solutions in the form of '<strong>A + Bk</strong>'. If the system is not solvable output "<strong>no solutions</strong>"<strong><br /></strong></p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />x = 0 (mod 5)<br />x = 3 (mod 10)<br /><pre>x = 12 (mod 21)<br />x = 0 (mod 6)<br />x = 12 (mod 35)<br />x = 12 (mod 38)<br />x = 12 (mod 31)<br />x = 12 (mod 14)<br /></pre>
<br /><br /><br /><br /><strong>Output:</strong><br /><br />no solutions<br />12 + 123690k<br /><br /><strong>Score is the length of your source.</strong><br /></pre>


______________________________________________________
PRINTF||||||false||||||

<p>In this task you have to parse a C language printf statement and print the output that will be produced on executing that statement in C. The statement will be of type printf("A",A1,A2,A3.....);&nbsp; where A consists of small latin alphabets, whitespaces and following format specifiers ( whitespaces will be present only in A ):</p>
<p>%d - signed decimal integer</p>
<p>%c - character</p>
<p>%f - decimal floating point( 6 digits after decimal point )</p>
<p>%s - character string</p>
<p>A1, A2, A3 ... are the arguments passed to printf statement and they will be equal to number of format specifiers mentioned. Their argument type will be same as that of format specifier i.e if specfier is '%c' the corresponding argument will be a character only. Input will always have at least one format specifier.</p>
<h3><strong>Input</strong></h3>
<p>First line of input contains a positive integer T denoting number of test cases. Following T lines have a valid printf statment containing less than 500 characters.</p>
<h3>Output</h3>
<p>Print the corresponding output given by the printf statement.</p>
<h3>Example</h3>
<pre><strong>Input:<br /></strong>3<br />printf("%s numerix loves python","iloveC");<br />printf("%c %d%f",'L',123,4.5);<br />printf("hello %f world %d nice %f computer %c is easy %s",2.34123245231,100,1.41414141,'S',"problem");<br /><br /><strong>Output:</strong><br />iloveC numerix loves python<br />L 1234.500000<br />hello 2.341232 world 100 nice 1.414141 computer S is easy problem<br /><br /></pre>
<p><span style="font-size: x-small;"><span style="font-size: small;"><strong>Score : </strong>Source Code Length</span></span><span style="font-size: x-small;"><br /></span></p>


______________________________________________________
WAYS||||||false||||||

<p><strong>Problem Statement:</strong></p>
<p>Consider a square matrix of order m(m rows and m columns). At each step you can move one step to the right or one step to the top. How many possibilities are to reach (m,m) from (0,0)?</p>
<p>&nbsp;</p>
<p><strong>Input:</strong></p>
<p>The first line consists of an integer t, the number of testcases. &nbsp;Each testcase consists of a single integer m, the order of square matrix.</p>
<p>&nbsp;</p>
<p><strong>Output:</strong></p>
<p>For each case print the number of possibilities of reaching the point (m,m) from (0,0)</p>
<p>&nbsp;</p>
<p><strong>Input Constraints:</strong></p>
<p>1&lt;=t&lt;=10</p>
<p>1&lt;=m&lt;=14</p>
<p>&nbsp;</p>
<p><strong>Example:</strong></p>
<p><strong>Sample Input:</strong></p>
<p>3</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p><strong>Sample Output:</strong></p>
<p>2</p>
<p>6</p>
<p>20</p>
<p>&nbsp;</p>
<p><strong>Explanation of test case #2:</strong></p>
<p><img style="vertical-align: middle;" src="http://docs.google.com/uc?id=0B0rk3iRD6D_JYmFhZWZiZmItODRiOC00OTE1LThjYWItOTlkZDg1MjE1OWZl&amp;export=download&amp;authkey=CJ3DxaYJ&amp;hl=en" alt="" /></p>
<p>There are 6 possible ways of reaching (2,2) from (0,0)</p>
<p>&nbsp;</p>


______________________________________________________
PL_QUINE||||||false||||||

<p>A <strong>quine</strong> is a computer program which produces a copy  of its own source code as its only output. The standard terms for these  programs in the computability theory and computer science literature are  <strong>self-replicating programs</strong>, <strong>self-reproducing programs</strong>, and <strong>self-copying programs</strong>.</p>
<p>&nbsp;</p>
<p>Your task is to write a<strong> palindromic quine&nbsp; </strong>of source length greater than 1 byte,you can use&nbsp; any programming language you want, as long as it is <a href="http://en.wikipedia.org/wiki/Brainfuck">Brainf**k</a>.</p>

______________________________________________________
MODULUS2||||||false||||||

<p>&nbsp;</p>
<p>See also <a href="http://www.spoj.pl/problems/PROBLEM1/">http://www.spoj.pl/problems/PROBLEM1/</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p align="center"><strong>Problem</strong></p>
<p>Given an integer n print all the possibilities of a%n where a can be any positive integer.</p>
<p align="center"><strong>Input</strong></p>
<p>The first line consists of an integer t, the number of test cases followed by t lines containing an integer n.</p>
<p align="center"><strong>Output</strong></p>
<p>For each test case print all the possibilities of a%n in descending  order separated by a single space. After each test case print a new line  character. If there are no possibilities print "NOT POSSIBLE".</p>
<p>&nbsp;</p>
<p><strong>Input specifications:</strong></p>
<p>0&lt;t&lt;=100</p>
<p>0&lt;=N&lt;=100</p>
<p><strong>Time limit</strong>: 1 second</p>
<p align="center"><strong>Example</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>Sample Input</strong></p>
<p>2</p>
<p>1</p>
<p>2</p>
<p><strong>Sample Output</strong></p>
<p>0</p>
<p>1 0</p>
<p style="text-align: left;"><strong>&nbsp;</strong></p>


______________________________________________________
FIBSUM||||||true||||||


<p>Given the <strong>i</strong>th (1&lt;=i&lt;=35) Fibonacci number F<sub>i</sub> calculate the sum of the <strong>i</strong>th till <strong>i+9</strong>th number F<sub>i</sub>+F<sub>i+1</sub>+...+F<sub>i+9</sub> and the last digit of the <strong>i+246</strong>th one F<sub>i+246</sub>.<br />Be careful: Your solution mustn't exceed&nbsp;111 bytes. But rather half of it should be more than enough.<br />Score is source length.</p>

*******InputConstraints*******

<p>In the first line the number of testcases N&lt;=35, then N lines with one positive integer i.</p>

*******OutputConstraints*******

<p>One line with "F<sub>i</sub>+F<sub>i+1</sub>+...+F<sub>i+9</sub>+last digit of F<sub>i+246</sub>" for each i.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />1<br />35

<strong>Output:</strong>
146<br />1821381552</pre>


______________________________________________________
BALLS||||||true||||||


<p>In this task you have compute the number of ways we can distribute <strong>A</strong> balls into <strong>B</strong> cells with with every cell having at-least one ball.&nbsp;</p>

*******InputConstraints*******

<p>The inputs A and B are given in a single line separated by a blank,the inputs are terminated by EOF.</p>

*******OutputConstraints*******

<p>Output the answer modulus 247383691.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />12 4 <br />6 3<br /><br /><strong>Output:</strong><br /><br />14676024 <br />540<br /><br /><strong>Constraints</strong><br /><ul><li>Every A and B can be distinguishable.</li><li>[math]0 \le  A \le 1000000 [\math]</li><li>[math]0 \le B \le 100 [\math]</li></ul></pre>


______________________________________________________
EQCHECK||||||true||||||


<p>Given an equation of a straight line of form Ax+By=C. A,B,C are integers. You have to check if it passes through any lattice point or not.</p>

*******InputConstraints*******

<p>First line =&gt; T = No of test cases &lt; 100</p>
<p>Next T lines contains the equation of form Ax+By=C. 1 &lt; A,B,C &lt; 10^6</p>

*******OutputConstraints*******

<p>Print 'yes' if line passes through any lattice point, else print 'no' for each test case.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />2x+3y=4<br />6x+8y=25<br /><br /><strong>Output:</strong>
yes<br />no<br /><br /><strong>Score</strong> : Source Code Length<br /></pre>


______________________________________________________
PHIVAL||||||false||||||

<p>Calculate as many digits of the <strong>Golden Ratio &phi;</strong> ((1+5^0.5)/2) as possible but at least 1000 after the decimal point. More then 1000000 digits won't enhance the score. In addition try to shorten your code.</p>

______________________________________________________
PLDGTS||||||true||||||


<p>Let F(x) is a function which returns the last digit of the first prime number with 'x' digit. The first few values of F(x) is:<br /><br />F(1) = 2<br />F(2) = 1<br />F(3) = 1 <br />F(4) = 9<br />F(5) = 7<br /><br />The value of F(x) for 1 &lt;= x &lt;= 25 is {2,1,1,9,7,3,3,9,7,7,9,3,9,7,1,7,1,3,3,1,9,7,9,7,7}.<br /><br />In this task you have to compute the sum up F(x)'s between two given a and b (including)<br /><br /><br />Constraints:<br /><br />1 &lt;= T &lt;= 1000<br />1 &lt;= a &lt;= b &lt;= 1000</p>

*******InputConstraints*******

<p>The first line of the input is an integer T(say),then T test cases follows.</p>

*******OutputConstraints*******

<p>Output the answer one in each line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>3<br />647 997<br />736 823<br />632 928</pre>
<br /><strong>Output:</strong><br />
<pre>1741<br />410<br />1487<br /><br /><strong>Constraints:</strong><br /><br />1 &lt;= T &lt;= 1000<br />1 &lt;= a &lt;= b &lt;= 1000<br /><br />
______________________________________________________
GRIDPNT||||||true||||||


<p>There's a Cartesian lattice with 0&lt;=x,y&lt;=n. Given one point (x1, y1&gt;0) in this lattice rotating clockwise as little as possible around the origin&nbsp;find the next point (x2, y2). The given and searched points mustn't have&nbsp;another point between the origin (0, 0) and this point itself.<br />x1, y1, x2, y2 are non-negative integers.</p>
<p><img title="GraphGridPnt" src="../../../../content/hwk:GraphGridPnt" alt="GraphGridPnt" width="240" height="240" /></p>
<p>Score is source length.</p>

*******InputConstraints*******

<p>In the first line the number T (T&lt;100) of test cases.<br />Then T lines with the space-separated n (1&lt;=n&lt;=50), x1 and y1.</p>

*******OutputConstraints*******

<p>For each test case the space-separated x2 and y2.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />1 1 1<br />5 3 2<br />50 48 49

<strong>Output:</strong>
1 0<br />5 3<br />49 50
</pre>


______________________________________________________
TLCS||||||true||||||


<!--<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr class="navigation">
<td><a href="/problems/TLCS/polski/">Wersja polska</a></td>
<td><a href="/problems/TLCS/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p align="justify">For a given two words <strong>x</strong> = <em>x</em>1<em>x</em>2<em>...x<sub>n</sub></em> and <strong>y</strong> = <em>y</em>1<em>y</em>2<em>...y<sub>m</sub></em> find the longest common subsequence, i.e. <strong>z</strong> = <em>z</em>1<em>z</em>2<em>...z<sub>k</sub></em> such that every two consecutive elements of <strong>z</strong> are equal to some two elements of <strong>x</strong>: x<sub>a</sub>, x<sub>b</sub>, and <strong>y</strong>: y<sub>c</sub>, y<sub>d</sub> where <em>a</em> &lt; <em>b</em> and <em>c</em> &lt; <em>d</em>. Assume, that elements of words are letters 'a' - 'z' and <em>m</em>,<em>n</em> &lt;= 1000.</p>

*******InputConstraints*******

<p align="justify"><em>N</em> [the number of series &lt;= 1000] <br /><em>n</em> <strong>x</strong> <br /><em>m</em> <strong>y</strong> <br />...</p>

*******OutputConstraints*******

<p align="justify">case 1 Y [or N when no answer to this case] <br /><em>d</em> [the length of the lcs] <br /><em>z<sub>j</sub></em> <em>p q</em> [position of <em>z<sub>j</sub></em> in <strong>x</strong> and in <strong>y</strong>, respectively] <br />...</p>
<p align="justify">Text grouped in [ ] does not appear in the input and output file.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
5 ddacc
3 cac
7 cbbccbc
4 aaca
4 cbeb
5 fdceb

<strong>Output:</strong>
case 1 Y
2
a 3 2
c 4 3
case 2 N
case 3 Y
3
c 1 3
e 3 4
b 4 5

<strong>Score</strong>
2

</pre>
<p></p>-->
<p align="justify">For given two words <strong>x</strong> = <em>x</em><sub>1</sub><em>x</em><sub>2</sub><em>...x<sub>n</sub></em> and <strong>y</strong> = <em>y</em><sub>1</sub><em>y</em><sub>2</sub><em>...y<sub>m</sub></em> find the longest common subsequence (lcs), i.e. the longest word <strong>z</strong> = <em>z</em><sub>1</sub><em>z</em><sub>2</sub><em>...z<sub>k</sub></em> such that there are two sequences <em>a</em><sub>1</sub> &lt; <em>a</em><sub>2</sub> &lt; ... &lt; <em>a<sub>k</sub></em> and <em>b</em><sub>1</sub> &lt; <em>b</em><sub>2</sub> &lt; ... &lt; <em>b<sub>k</sub></em> satisfying the equalities <em>z<sub>i</sub></em> = <em>x<sub>a<sub>i</sub></sub></em> = <em>y<sub>b<sub>i</sub></sub></em> for all <em>i</em> = 1,2,...,<em>k</em>. Assume, that elements of words are letters 'a' - 'z' and <em>m</em>,<em>n</em> &lt;= 1000.</p>

______________________________________________________
PT07I||||||true||||||


<p>
    In Amber's childhood, he usually liked to observe some little things for tickling his little curiosity.
    He often found it interesting to climb up a tree, sit on a branch
    and watch the movement of a group of lovely ants on the branches of the tree.
</p>
<p>
    Amber finds there are <i>n</i> ant holes and <i>m</i> ants in the tree now.
    Because of his careful observation, he knows all ants' behaviors,
    the <i>i</i>-th ant wanna travel from one hole <i>s<sub>i</sub></i> to another hole <i>t<sub>i</sub></i> at the speed <i>v<sub>i</sub></i>.
</p>
<p>
    During the ant's travel, if two ants arrive at the same position (meet or chase),
    they will touch their feelers for exchanging the information about food or danger.
    Even at the moment that the travel starts or finishes, the ant can also touch other's feelers.
    But after the travel finishes, the ant will enter into the hole and never touch feelers.
    What amber wonders is to count the times of touchings during the whole traveling process.
</p>
<p>
    Consider there are <i>n</i> - 1 branches in the tree.
    Each branch connects the adjacent ant holes and has a particular length.
    Assume there is always a path that consists of branches between any two ant holes.
    Assume that no two ants have the same speeds and the touching doesn't cost any time.
</p>

*******InputConstraints*******

<p>
    Input consists of multiple testcases. The first line contains one integer <i>t</i> (1 <= <i>t</i> <= 20).
    For each testcase, the input format is following.
</p>
<p>
    The first line contains one integer <i>n</i> (1 <= <i>n</i> <= 10<sup>6</sup>).
    In next <i>n</i> - 1 line, the <i>i</i>-th line contains an integer triple (<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>w<sub>i</sub></i>)
    (1 <= <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i> <= <i>n</i>, <i>u<sub>i</sub></i> != <i>v<sub>i</sub></i>, 1 <= <i>w<sub>i</sub></i> <= 10<sup>3</sup>).
    The triple means there is a branch with the length <i>w<sub>i</sub></i> between node <i>u<sub>i</sub></i> and node <i>v<sub>i</sub></i>.
</p>
<p>
    The next line contains one integer <i>m</i> (1 <= <i>m</i> <= 10<sup>3</sup>).
    In next <i>m</i> line, the <i>i</i>-th line contains an integer triple (<i>s<sub>i</sub></i>, <i>t<sub>i</sub></i>, <i>v<sub>i</sub></i>)
    (1 <= <i>s<sub>i</sub></i>, <i>t<sub>i</sub></i> <= <i>n</i>, 1 <= <i>v<sub>i</sub></i> <= 10<sup>6</sup>).
    The triple means that the <i>i</i>-th ant's travel is from <i>s<sub>i</sub></i> to <i>t<sub>i</sub></i> at the speed <i>v<sub>i</sub></i>.
</p>


*******OutputConstraints*******

<p>For each testcase, print a line that consists of an integer that means the times of the feeler touchings.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
1 2 1
2 3 1
3
1 3 1
3 1 1
1 2 3

<b>Output:</b>
2
</pre>
<b>Note: It's a partly correct problem, so score is set for each case. When you pass all cases, you'll get 300 points</b>


______________________________________________________
NKLEAVES||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKLEAVES/en/">English</a></td> 
<td width="50%"><a href="/problems/NKLEAVES/vn/">Vietnamese</a></td> 
</tr></table>

<p>One beautiful autumn day Radu and Mars noticed that the garden alley where they usually spend time is rather full of leaves. They decided to gather all the leaves in exactly  K piles. The alley is a straight line and they established a coordinate system on the alley, with the origine at the beginning of the alley.</p>
<p>There are N leaves of various weights on the alley, all lined up, and the distance between each consecutive leaves is 1. More precisely the first leaf is at coordinate 1, the second at coordinate 2, ... , the N-th at coordinate N. Initially the two guys are at coordinate N.</p>
<p>The leaf gathering operation takes place as Radu and Mars leave the garden, so the leaves can only be moved to the left. The cost of moving a leaf is equal to its weight times the distance it is moved. Obviously one of the K piles will be at coordinate 1, but the rest can be anywhere.</p>


<h3>Task</h3>
<p>Find out the total minimum cost of gathering the N leaves in exactly K piles.</p>


*******InputConstraints*******

<p>The input contains on the first line two positive integers, N and K, separated by a space, having the significance given above. The following N lines contain N positive integers representing the weights of the leaves (line i+1 contains the weight of the leaf located at coordinate i).</p>


*******OutputConstraints*******

<p>The output will contain a single line on which the minimum cost for gathering all the leaves in exactly K piles will be written.<p>


*******IOTestCases*******

<pre>
<b>Input</b>
5 2
1
2
3
4
5

<b>Output</b>
13
</pre>
<p>It would be best to form the 2 piles in points 1 and 4.
Leaves 1, 2 and 3 are taken to coordinate 1, and 4 and 5 are taken to coordinate 4.
The total cost is:</p>
<p>1 * 0 + 2 * 1 + 3 * 2 + 4 * 0 + 5 * 1 = 13</p>




______________________________________________________
NKMARS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKMARS/en/">English</a></td> 
<td width="50%"><a href="/problems/NKMARS/vn/">Vietnamese</a></td> 
</tr></table>

<p><i>(This task was inspired by task &#8216;Atlantis&#8217; of the Mid&#8211;Central European Regional ACM&#8211;ICP Contest 2000/2001.)</i></p>
<p>In the year 2051, several Mars expeditions explored different areas of the red planet and produced maps of these areas.
Now, the BaSA (Baltic Space Agency) has an ambitious plan: they would like to produce a map of the whole planet. In
order to calculate the necessary effort, they need to know the total size of the area for which maps already exist. It is your
task to write a program that calculates this area.</p>


*******InputConstraints*******

<p>The input starts with a line containing a single integer N (1 &#8804; N &#8804; 10 000 ), the number of available maps. Each
of the following N lines describes a map. Each of these lines contains four integers x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub> and y<sub>2</sub> (0 &#8804; x<sub>1</sub> < x<sub>2</sub> &#8804; 30 000 ,
0 &#8804; y<sub>1</sub> < y<sub>2</sub> &#8804; 30 000 ). The values ( x<sub>1</sub>;y<sub>1</sub>) and ( x<sub>2</sub>;y<sub>2</sub>) are the coordinates of, respectively, the bottom-left and the top-
right corner of the mapped area. Each map has rectangular shape, and its sides are parallel to the x- and y-axis of the
coordinate system.</p>


*******OutputConstraints*******

<p>The output should contain one integer A, the total area of the explored territory (i.e. the area of the union
of all the rectangles).</p>


*******IOTestCases*******

<pre>
<b>Input</b>
2
10 10 20 20
15 15 25 30

<b>Output</b>
225
</pre>




______________________________________________________
NKTEAM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKTEAM/en/">English</a></td> 
<td width="50%"><a href="/problems/NKTEAM/vn/">Vietnamese</a></td> 
</tr></table>

<p>The Interpeninsular Olympiad in Informatics is coming and the leaders of the Balkan Peninsula Team
have to choose the best contestants on the Balkans. Fortunately, the leaders could choose the members
of the team among N very good contestants, numbered from 1 to N (3 &#8804; N &#8804; 500000). In order to select
the best contestants the leaders organized three competitions. Each of the N contestants took part in all
three competitions and there were no two contestants with equal results on any of the competitions. We
say that contestant &#1040; is better than another contestant &#1042; when &#1040; is ranked before &#1042; in all of the
competitions. A contestant A is said to be excellent if no other contestant is better than A. The leaders
of the Balkan Peninsula Team would like to know the number of excellent contestants.</p>
<p>Write a program, which for given N and the three competitions results, computes the
number of excellent contestants.</p>


*******InputConstraints*******

<p>The input data are given as four lines. The first line contains the number N. The
next three lines show the rankings for the three competitions. Each of these lines contains the
identification numbers of the contestants, separated by single spaces, in the order of their ranking from
first to last place.</p>

*******OutputConstraints*******

<p>The output should contain one line with a single number written on it: the number of the
excellent.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
3 
2 3 1
3 1 2
1 2 3

<b>Output</b>
3
</pre>
<p><i>Note: No contestant is better than any
other contestant, hence all three are
excellent.</i></p>
<pre>
<b>Input</b>
10 
2 5 3 8 10 7 1 6 9 4
1 2 3 4 5 6 7 8 9 10
3 8 7 10 5 4 1 2 6 9

<b>Output</b>
4
</pre>
<p><i>Note: The excellent contestants are those numbered with 1,
2, 3 and 5.</i></p>





______________________________________________________
NKMOBILE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKMOBILE/en/">English</a></td> 
<td width="50%"><a href="/problems/NKMOBILE/vn/">Vietnamese</a></td> 
</tr></table>

<p>Suppose that the fourth generation mobile phone base stations in the Tampere area operate as follows.
The area is divided into squares. The squares form an SxS matrix with the rows and columns numbered
from 0 to S - 1. Each square contains a base station. The number of active mobile phones inside a
square can change because a phone is moved from a square to another or a phone is switched on or off.
At times, each base station reports the change in the number of active phones to the main base station
along with the row and the column of the matrix.</p>
<p>Write a program, which receives these reports and answers queries about the current total number
of active mobile phones in any rectangle-shaped area.</p>


*******InputConstraints*******

<p>The input is encoded as follows. Each input comes on a separate line, and consists
of one instruction integer and a number of parameter integers according to the following table.</p>
<table border="1" width="100%">
<tr><td><b>Instruction</b></td><td><b>Parameters</b></td><td><b>Meaning</b></td></tr>
<tr><td>0</td><td>S</td><td>Initialize the matrix size to SÂ´S containing all zeros. This
instruction is given only once and it will be the first
instruction.</td></tr>
<tr><td>1</td><td>X Y A</td><td>Add A to the number of active phones in table square (X, Y).
A may be positive or negative.</td></tr>
<tr><td>2</td><td>L B R T</td><td>Query the current sum of numbers of active mobile phones
in squares (X,Y), where L &#8804; X &#8804; R, B &#8804; Y &#8804; T</td></tr>
<tr><td>3</td><td>.</td><td>Terminate program. This instruction is given only once and
it will be the last instruction.</td></tr>
</table>
<p>The values will always be in range, so there is no need to check them. In particular, if A is
negative, it can be assumed that it will not reduce the square value below zero. The indexing starts at 0,
e.g. for a table of size 4x4, we have 0 &#8804; X &#8804; 3 and 0 &#8804; Y &#8804; 3.</p>


*******OutputConstraints*******

<p>Your program should not answer anything to lines with an instruction other than 2. If the
instruction is 2, then your program is expected to answer the query by writing the answer as a single
line containing a single integer.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
0 4  		
1 1 2 3  		
2 0 0 2 2
1 1 1 2
1 1 2 -1
2 1 1 2 3
3

<b>Output</b>
3
4
</pre>




______________________________________________________
NKMOU||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKMOU/en/">English</a></td> 
<td width="50%"><a href="/problems/NKMOU/vn/">Vietnamese</a></td> 
</tr></table>

<p>The Mountain Amusement Park has opened a brand-new simulated roller coaster. The simulated track consists of n 

rails
attached end-to-end with the beginning of the first rail fixed at elevation 0. Byteman, the operator, can reconfigure the
track at will by adjusting the elevation change over a number of consecutive rails. The elevation change over other rails is
not affected. Each time rails are adjusted, the following track is raised or lowered as necessary to connect the track while
maintaining the start at elevation 0. The figure below illustrates two example track reconfigurations.</p>
<p>Each ride is initiated by launching the car with sufficient energy to reach height h. That is, the car will continue to
travel as long as the elevation of the track does not exceed h, and as long as the end of the track is not reached.</p>
<p>Given the record for all the day&#8217;s rides and track configuration changes, compute for each ride the number of rails
traversed by the car before it stops.</p>
<p>Internally, the simulator represents the track as a sequence of n elevation changes, one for each rail. The i-th number
d<sub>i</sub> represents the elevation change (in centimetres) over the i-th rail. Suppose that after traversing i&#8722;1 rails the 

car has
reached an elevation of h centimetres. After traversing i rails the car will have reached an elevation of h+d<sub>i</sub> 

centimetres.</p>
<p>Initially the rails are horizontal; that is, d<sub>i</sub> = 0 for all i. Rides and reconfigurations are interleaved 

throughout the day.
Each reconfiguration is specified by three numbers: a, b and D. The segment to be adjusted consists of rails a through b
(inclusive). The elevation change over each rail in the segment is set to D. That is, d<sub>i</sub> = D for all a &#8804; i &#8804; b.</p>
<p>Each ride is specified by one number h &#8212; the maximum height that the car can reach.


*******InputConstraints*******

<p>The first line of input contains one positive integer n &#8212; the number of rails, 1 &#8804; n &#8804; 1 000 000 000 . The following lines
contain reconfigurations interleaved with rides, followed by an end marker. Each line contains one of:</p>

<ul>
<li>Reconfiguration &#8212; a single letter &#8216;I&#8217;, and integers a, b and D, all separated by single spaces (1 &#8804; a &#8804; b &#8804; n,
&#8722;1 000 000 000 &#8804; D &#8804; 1 000 000 000 ).</li>
<li>Ride &#8212; a single letter &#8216;Q&#8217;, and an integer h (0 &#8804; h &#8804; 1 000 000 000) separated by a single space;</li>
<li>A single letter &#8216;E&#8217; &#8212; the end marker, indicating the end of the input data.</li>
</ul>
<p>You may assume that at any moment the elevation of any point in the track is in the interval [0 ,1 000 000 000] 

centimetres.</p>
<p>The input contains no more than 100 000 lines.</p>
<p>In 50% of test cases n satisfies 1 &#8804; n  &#8804; 20 000 and there are no more than 1 000 lines of input.</p>


*******OutputConstraints*******

<p>The i-th line of output should consist of one integer &#8212; the number of rails traversed by the car during the i-th ride.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
4
Q 1
I 1 4 2
Q 3
Q 1
I 2 2 -1
Q 3
E

<b>Output</b>
4
1
0
3
</pre>
<p>
<img src="http://www.spoj.plhttps://www.spoj.pl/content/paulmcvn:mou.jpg" width="470" height="535"></img>
</p>
<p>Views of the track before and after each reconfiguration. The x axis denotes the rail number. The y axis and the 

numbers
over points denote elevation. The numbers over segments denote elevation changes.
</p>




______________________________________________________
NKPAIRS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKPAIRS/en/">English</a></td> 
<td width="50%"><a href="/problems/NKPAIRS/vn/">Vietnamese</a></td> 
</tr></table>

<p>Mirko and Slavko are playing with toy animals. First, they choose one of three boards given in the figure below.
Each board consists of cells (shown as circles in the figure) arranged into a one, two or three dimensional grid.</p>
<p><img src="http://www.spoj.plhttps://www.spoj.pl/content/paulmcvn:pairs.jpg" width="921" height="227"></p>
<p>Mirko then places N little <b>toy animals</b> into the cells.</p>
<p>The <b>distance</b> between two cells is the smallest number of moves that an animal would need in order to reach
one cell from the other. In one move, the animal may step into one of the adjacent cells (connected by line
segments in the figure).</p>
<p>Two animals can hear each other if the distance between their cells is <b>at most D</b>. Slavko's task is to calculate
how many <b>pairs of animals</b> there are such that one animal can hear the other.</p>
<h3>Task</h3>
<p>Write a program that, given the board type, the locations of all animals, and the number D, finds the desired
number of pairs.</p>


*******InputConstraints*******

<p>The first line of input contains four integers in this order:</p>
<ul>
<li>The board type B (1 &#8804; B &#8804; 3);</li>
<li>The number of animals N (1 &#8804; N &#8804; 100 000);</li>
<li>The largest distance D at which two animals can hear each other (1 &#8804; D &#8804; 100 000 000);</li>
<li>The size of the board M (the largest coordinate allowed to appear in the input):</li>
<ul>
<li>When B=1, M will be at most 75 000 000.</li>
<li>When B=2, M will be at most 75 000.</li>
<li>When B=3, M will be at most 75.</li>
</ul>
</ul>
<p>Each of the following N lines contains B integers separated by single spaces, the coordinates of one toy animal.
Each coordinate will be between 1 and M (inclusive).</p>
<p>More than one animal may occupy the same cell.</p>


*******OutputConstraints*******

<p>Output should consist of a single integer, the number of pairs of animals that can hear each other.</p>
<p><b>Note:</b> use a 64-bit integer type to calculate and output the result (long long in C/C++, int64 in Pascal).</p>


*******IOTestCases*******

<table width="99%">
<tr>
<td width="33%" style="border-right: thin solid; vertical-align: text-top">
<pre>
<b>Input</b>
1 6 5 100
25
50
50
10
20
23

<b>Output</b>
4
</pre>
</td>
<td width="33%" style="border-right: thin solid; vertical-align: text-top">
<pre>
<b>Input</b>
2 5 4 10
5 2
7 2
8 4
6 5
4 4

<b>Output</b>
8
</pre>
</td>
<td width="33%" style="vertical-align: text-top">
<pre>
<b>Input</b>
3 8 10 20
10 10 10
10 10 20
10 20 10
10 20 20
20 10 10
20 10 20
20 20 10
20 20 20

<b>Output</b>
12
</pre>
</td>
</tr>
<table>




______________________________________________________
NKMINERS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKMINERS/en/">English</a></td> 
<td width="50%"><a href="/problems/NKMINERS/vn/">Vietnamese</a></td> 
</tr></table>

<p>
There are two coal mines, each employing a group of miners. Mining coal is hard work, so miners need food to
keep at it. Every time a shipment of food arrives at their mine, the miners produce some amount of coal. There
are three types of food shipments: meat shipments, fish shipments and bread shipments.</p>
<p>Miners like variety in their diet and they will be more productive if their food supply is kept varied. More
precisely, every time a new shipment arrives to their mine, they will consider the new shipment and the
previous two shipments (or fewer if there haven't been that many) and then:</p>
<ul>
<li>If all shipments were of the same type, they will produce one unit of coal.</li>
<li>If there were two different types of food among the shipments, they will produce two units of coal.</li>
<li>If there were three different types of food, they will produce three units of coal.</li>
</ul>
<p>We know in advance the types of food shipments and the order in which they will be sent. It is possible to
influence the amount of coal that is produced by determining which shipment should go to which mine.
Shipments cannot be divided; each shipment must be sent to one mine or the other in its entirety.</p>
<p>The two mines don't necessarily have to receive the same number of shipments (in fact, it is permitted to send all
shipments to one mine).</p>

<h3>Task</h3>
<p>Your program will be given the types of food shipments, in the order in which they are to be sent. Write a
program that finds the largest total amount of coal that can be produced (in both mines) by deciding which
shipments should be sent to mine 1 and which shipments should be sent to mine 2.</p>


*******InputConstraints*******

<p>The first line of input contains an integer N (1 &#8804; N &#8804; 100 000), the number of food shipments.</p>
<p>The second line contains a string consisting of N characters, the types of shipments in the order in which they
are to be distributed. Each character will be one of the uppercase letters 'M' (for meat), 'F' (for fish) or 'B' (for
bread).</p>


*******OutputConstraints*******

<p>Output a single integer, the largest total amount of coal that can be produced.</p>


*******IOTestCases*******

<table width="99%">
<tr>
<td width="33%" style="border-right: thin solid">
<pre>
<b>Input</b>
6
MBMFFB

<b>Output</b>
12
</pre>
</td>
<td width="33%">
<pre>
<b>Input</b>
16
MMBMBBBBMMMMMBMB

<b>Output</b>
29
</pre>
</td>
</tr>
<table>




______________________________________________________
NKTRAFIC||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKTRAFIC/en/">English</a></td> 
<td width="50%"><a href="/problems/NKTRAFIC/vn/">Vietnamese</a></td> 
</tr></table>

<p>After they divided the country into counties the monkeys have a new problem: they have to stop the banana traffic. Monkey Land has N cities numbered from 1 to N connected by  M two-directional roads. Between each two cities there is at most one road but between any to cities there is at least one connecting path (made up of one ore more roads). Cities 1 and N are capitals.</p>
<p>Lately, the banana traffic between the two capitals has increased. In order to fight the traffic the president has G soldiers he can place anywhere on a road, no matter how close to a city, but not inside a city. In case of an attack on one of the capitals all soldiers must get to that capital. Soldiers move at the same constant speed. The amount of time required for such a mobilization is equal to the maximum distances from the soldiers to one of the capitals.</p>

<h3>Task</h3>
<p>Write a program that finds a soldier placement solution so that any path from one capital to the other go through at least one road with a soldier and the mobilization time for the worst case scenario be minimal.</p>


*******InputConstraints*******

<p>The input contains on the first line three integers N M G separated by blanks.</p>
<p>Each of the following M lines contains three integers separated by blanks a b c meaning "there is a two-way road between city a and b of length c".</p>


*******OutputConstraints*******

<p>The output will contain a single line with the minimum time needed for all the soldiers to get to a capital, written with one exact decimal. If there is no solution, the first line will contain -1.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
6 6 2
1 2 1
2 3 2
3 6 1
1 4 1
4 5 3
5 6 1

<b>Output</b>
2.5
</pre>




______________________________________________________
NKPANO||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKPANO/en/">English</a></td> 
<td width="50%"><a href="/problems/NKPANO/vn/">Vietnamese</a></td> 
</tr></table>

<p>A group of K painters has to paint a rectangular billboard of size 1xN. The billboard is divided into N cells of size 1x1.
The cells are numbered from 1 to N in left to right order. </p>
<p>The i-th painter (1 &#8804; i &#8804; K) is currently standing in front of the cell S<sub>i</sub>. He either can paint no cells at all or can paint a 
consecutive number of cells that must containt the cell S<sub>i</sub>. Moreover, he can only paint at most L<sub>i</sub> cells, and for each painted
cell, he will receive a payment of P<sub>i</sub> dollars. Each cell can be painted by at most one person.
</p>
<p>Your task is to find a way for the painters to receive the largest amount of payment.


*******InputConstraints*******

<ul>
<li>The first line of the input contains two positive integers N, K (N &#8804; 16000; K &#8804; 100).</li>
<li>The i-th line of the next K lines contains three positive integers L<sub>i </sub>, P<sub>i</sub>, S<sub>i</sub> (i = 1, 2, &#8230; K) 
separated by spaces (1 &#8804;  P<sub>i</sub> &#8804; 10000, 1 &#8804; L<sub>i</sub> , S<sub>i</sub> &#8804;  N ). 
The numbers S<sub>1</sub>, S<sub>2</sub>, . . . S<sub>K</sub> are pairwise distinct.
</ul>


*******OutputConstraints*******

<p>A single line contains the largest payment that the painters can receive.


*******IOTestCases*******

<pre>
<b>Input</b>
8 4
3 2 2
3 2 3
3 3 5
1 1 7  

<b>Output</b>
17
</pre>
<p><i>The first painter will paint the first two cells, the second painter will paint the next two cells, the third one will paint the remaining cells 
and the last won't have to paint any cells.</i>
</p>




______________________________________________________
NKDIST||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NKDIST/en/">English</a></td> 
<td width="50%"><a href="/problems/NKDIST/vn/">Vietnamese</a></td> 
</tr></table>

<p>Consider a sequence D consisting of an infinite number of hexadecimal digits made by concatenating all the positive integers 1, 2, 3, 4,..., N,...</p>
<p>The sequence D begins with:</p>
<p>123456789ABCDEF10111<b>21</b>31415161718191A1B1C1D1E1F20<b>21</b>22...</p>
<p>We may see D as an infinite string of hexadecimal digits. Let S be an arbitrary string consisting only of hexadecimal digits. 
The number of occurrences of S in D as a substring is infinite. 
The distance between two nonoverlapping occurrence of S is the number of digits between these two occurrences. 
For instance, if S='21', the distance between the first two occurrences of S is 27 (as illustrated above).
</p>
<h3>Task</h3>
<p>You are given a string S of at most 30 characters long. Write a program that determines the distance between the first two occurrences of S in D.</p>


*******InputConstraints*******
 
<p>The input contains the string S in a single line.


*******OutputConstraints*******

<p>The output contains the distance between the first two occurrences of S in D in a single line.


*******IOTestCases*******

<pre>
<b>Input</b>
21
<b>Output</b>
27

<b>Input</b>
A
<b>Output</b>
26
</pre>




______________________________________________________
VTRI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/VTRI/en/">English</a></td> 
<td width="50%"><a href="/problems/VTRI/vn/">Vietnamese</a></td> 
</tr></table>

<p>In the plane, given a rectangular grid with sides parallel to the axes of coordinates. The 

coordinates of the bottom-left corner is (0, 0) and the top-right corner is (X, Y).</p>
<p>Your task is to count the number of triangles with integer coordinates lying inside the given 

grid and having areas equal to an integer S.</p>


*******InputConstraints*******

<p>A single line consisting of three integers: X, Y, S (1 &#8804; X, Y &#8804; 30, 1 &#8804; S &#8804; X*Y/2).</p>


*******OutputConstraints*******

<p>A single integer: the number of triangles with integer coordinates lying inside the rectanglular 

grid and having areas equal to S.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
2 1 1	

<b>Output</b>
6 
<img src='/content/Tri.png' />
</pre>




______________________________________________________
VSTEPS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/VSTEPS/en/">English</a></td> 
<td width="50%"><a href="/problems/VSTEPS/vn/">Vietnamese</a></td> 
</tr></table>

<p>While playing the computer game "Lucky Luke", Bom arrived at a scenario in which Lucky has to 

climb a staircase consisting of n steps.</p>
<p>The steps are numbered as 1 to n from bottom to top. Lucky may go up one step, or may jump two 

steps at once. However, some steps are broken and Lucky cannot stand on them. In the beginning, 

Lucky stands on the first step (the first step is never broken).</p>
<p>Suddenly, Bom arrived at a question: how many ways for Lucky to climb the staircase? (i.e. to 

stand on the n<sup>th</sup> step). Bom needs your help to answer this question.</p>


______________________________________________________
QTREE3||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/QTREE3/en/">English</a></td> 
<td width="50%"><a href="/problems/QTREE3/vn/">Vietnamese</a></td> 
</tr></table>


<p>You are given a tree (an acyclic undirected connected graph) with N nodes. The tree nodes are numbered from 1 to N. In the start, the color of any node in the tree is white.
<p>We will ask you to perfrom some instructions of the following form:</p>
<ul>
<li><b>0 i</b> : change the color of the i-th node (from white to black, or from black to white);<br>
or
<li><b>1 v</b> : ask for the id of the first black node on the path from node 1 to node v. if it doesn't exist, you may return -1 as its result.
</ul>


*******InputConstraints*******

<p>In the first line there are two integers <b>N</b> and <b>Q</b>.
<p>In the next <b>N</b>-1 lines describe the edges in the tree: a line with two integers <b>a b</b> denotes an edge between <b>a</b> and <b>b</b>.
<p>The next <b>Q</b> lines contain instructions <b>"0 i"</b> or <b>"1 v"</b> (1 &#8804; i, v &#8804; N). </p>


*******OutputConstraints*******

<p>For each "<b>1 v</b>" operation, write one integer representing its result.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
9 8
1 2
1 3
2 4
2 9
5 9
7 9
8 9
6 8
1 3
0 8
1 6
1 7
0 2
1 9
0 2
1 9 

<b>Output:</b>
-1
8
-1
2
-1
</pre>

______________________________________________________
VBLOCKS||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/VBLOCKS/en/">English</a></td> 
<td width="50%"><a href="/problems/VBLOCKS/vn/">Vietnamese</a></td> 
</tr></table>

<p>
Bom and Cuoi are playing a puzzle game together. The game consists of a horizontal board of L unit cells (size 1x1) and some horizontal segments of size 1xS (made from S unit cubes). Bom has to put these segments on the board so that two consecutive segments have to be at least D cells apart from each other (i.e. there are at lease D empty cells between them).
</p>

<p>
To make the game more difficult, Cuoi gives Bom some more conditions. Each condition has the form: "the i<sup>th</sup> cell must be covered" or "the i<sup>th</sup> cell must not be covered" (by a cube).
</p>
<p>
Help Bom to find a way to put the segments so that Cuoi's conditions are satisfied. If one way exists, determine the maximum number of segments that Bom can use.
</p>


*******InputConstraints*******

<ul>
<li>The first line contains three integers L, S, D (1 &#8804; L &#8804; 100000).</li>
<li>The second line contains an integer K that is the number of Cuoi's conditions.</li>
<li>Each line in the next K lines contains two integers i and d (d=1 or d=2) representing a Cuoi's condition: d=1 means "the i<sup>th</sup> cell must be covered" and d=2 means "the i<sup>th</sup> cell must not be covered". The values of i are in ascending order.</li>
</ul>


*******OutputConstraints*******

<p>If there is no way for Bom to put the segments satisfying Cuoi's conditions, print -1. Otherwise, print the maximum number of segments that Bom can use.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
10 4 2
2
2 1
5 2	

<b>Output</b>
2

<b>Input</b>
4 2 1
2
1 1
3 1	

<b>Output</b>
-1
</pre>




______________________________________________________
VBOARD||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/VBOARD/en/">English</a></td> 
<td width="50%"><a href="/problems/VBOARD/vn/">Vietnamese</a></td> 
</tr></table>

<p>Given a chessboard of size nxn. There is a number in each square of the board. The top-left 

square is in white color (the squares are in black and white color alternatively). The columns are 

numbered as 1 to n from left to right. The rows are number as 1 to n from top to bottom. The square 

in the i<sup>th</sup> row and j<sup>th</sup> column of the board is denoted as (i, j).</p>
<p>Cuoi have some puzzles for Bom: Cuoi tells Bom a rectangle area in the chessboard, and Bom has 

to calculate the absolute value of the difference between the sum of white squares' numbers and the 

sum of black squares' numbers in that area. Help Bom to answer these puzzles.</p>


*******InputConstraints*******

<ul>
<li>The first line contains an integer n (1 &#8804; n &#8804; 500).</li>
<li>The i<sup>th</sup> line in the next n lines contains n integers a<sub>i1</sub>, a<sub>i2</sub>, 

..., a<sub>ij</sub> representing the numbers in the i<sup>th</sup> row of the chessboard (0 &#8804; 

a<sub>ij</sub> < 100).</li>
<li>The (n+2)<sup>th</sup> row contains an integer q that is the number of Cuoi's puzzles (1 &#8804; q 

&#8804; 10000).</li>
<li>Each line in the next q lines contains four integers i<sub>1</sub>, j<sub>1</sub>, 

i<sub>2</sub>, j<sub>2</sub> representing the coordinates of a rectangle area in a puzzle: the top

-left corner is (i<sub>1</sub>, j<sub>1</sub>) and the bottom-right corner is (i<sub>2</sub>, 

j<sub>2</sub>). </li>
</ul>


*******OutputConstraints*******

<p>Print out q lines; in each line, print Bom's answer to Cuoi's corresponding puzzle.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
3 
1 3 5
2 4 6
0 10 5
2
1 1 2 2
1 2 3 3

<b>Output</b>
0
5
</pre>




______________________________________________________
MAKHOA||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MAKHOA/en/">English</a></td> 
<td width="50%"><a href="/problems/MAKHOA/vn/">Vietnamese</a></td> 
</tr></table>


<p>
The summer has come! Ktuan promised himself to do something new in this summer, and now it&#8217;s the time for him to start.
</p>

<p>
Ktuan goes sailing to a treasure island. After days searching, ktuan discovers a locked box. Obviously ktuan cannot break the lock because it will activate the mine to explode. Thus it is neccessary to find the key to open the box.
</p>
<p>
The key is a binary string of length n (that is a string consisting only of 0 and 1).  The digits are numbered as 1 to n from left to right. Ktuan has collected some digits of the key successfully. Besides, ktuan has also collected some information about the key from the previous explorers (who fails to find the key). The information are statements of the form: &#8220;There are k consecutive digit x(s) from position a to position b (inclusive)&#8221;. 
</P>
<p>
For example, if ktuan has known the key has 5 digits of the form 1???? (in which ? stands for an unknown digit), and he has also known that &#8220;there are 3 consecutive digit 0s from position 2 to position 5 (inclusive)", then the key can be 10001, 10000, or 11000. Ktuan is therefore sure that the third and the fourth digit is 0 and the key has the form 1?00?.
</p>
<p>
Given the form of the key and the information, help ktuan to determine the remaining digits of the key.
</p>


*******InputConstraints*******

<ul>
<li>The first line contains two integers n and m that is the number of digits in the key and the number of statements of information (1 &#8804; n &#8804; 50, 1 &#8804; m &#8804; 25).</li>
<li>The second line contains n characters &#8216;0&#8217;, &#8216;1&#8217; or &#8216;?&#8217; representing a 0, 1, or unknown digit in the key.</li>
<li>Each line in the next m lines contains 4 integers k, x, a, b corresponding to one statement of information.</li>
</ul>


*******OutputConstraints*******

<ul>
<li>Print out a line representing the key in which the unknown digits are denoted by ?.</li>
<li>If the statements are contradicted, print out &#8216;mau thuan&#8217; (meaning &#8216;contradiction&#8217; in Vietnamese).</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
5 1
1????
3 0 2 5

<b>Output</b>
1?00?
</pre>




______________________________________________________
NDIGIT||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NDIGIT/en/">English</a></td> 
<td width="50%"><a href="/problems/NDIGIT/vn/">Vietnamese</a></td> 
</tr></table>

<p>The number A(K) is defined by writing the numbers 1^K, 2^K, 3^K, ... sucessively in a right to left order. </p>
<p>For example, A(1) = ...181716151413121110987654321.</p>
<p>A(2)= ...169144121100816449362516941.</p>
<p>Consider the sum S = A(1) + A(2). The end of S is:
...350860272513937560350171262.</p>
<p>Given N, K1, K2. Your task is to find the N-th digit from the right of S = A(K1) + A(K2)(the rightmost digit of S is counted as the first digit).</p>


*******InputConstraints*******

<p>There are 3 sub test cases. Each test case is written in a line containing 3 integers N, K1, K2 (1 &#8804; K1, K2 &#8804; 5. 1 &#8804; N &#8804; 1,000,000,000)</p>


*******OutputConstraints*******

<p>Print out 3 corresponding answers to the sub test cases.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
1 1 2
3 1 2
5 1 2

<b>Output</b>
2
2
7
</pre>





______________________________________________________
FACUP||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/FACUP/en/">English</a></td> 
<td width="50%"><a href="/problems/FACUP/vn/">Vietnamese</a></td> 
</tr></table>

<p>The FA Cup is the oldest footbal cup. All the matches will play on knock-out rule. There are 2^N teams in the cup playing in N rounds. There are 2^(N-1) matches in the first round and 2^(N-1) winners advances to the second round. And so on. Until there is only a team left. This is the champion.</p>

<p>Matches in the first round are numbered as 1 to 2^(N-1): team 1 vs team 2, team 3 vs team 4, ..., and team (2^N-1) vs team 2^N. Matches in the second round are: match 1's winner vs match 2's winner, ..., match 2^(N-2)'s winner vs match 2^(N-1) winner.</p>

<p>Matches in the second round are numbered as 1 to 2^(N-2) and matches in the third round are: match 1's winner vs match 2's winner, ..., match 2^(N-3)'s winner vs match 2^(N-2) winner.</p>

<p>There is no tie in a game (if a game is tied at the end of regulation time it goes into extra time and/or penalty shootout). Given the fixtures and result's probability of every matches. Your task is to sort the teams decreasingly according to the chance of becoming champion.


*******InputConstraints*******

<ul>
<li>The first line containg an integer N (1 &#8804; N &#8804; 8).</li>
<li>In the next lines there is a matrix P of size (2^N) * (2^N) containing integers in the interval [0, 100]. P[x, y] is the percentage that team x can defeat team y. The sum of P[x, y] and P[y, x] is always 100 and P[x, x] = 0 for all x.
</ul>


*******OutputConstraints*******

<p>Print out 2^N lines. Each line contains the index of a team sorted in deceasing order according to the chance of become champion for a team. If there are two teams with the same chance of becoming champion, print the team with smaller index first.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
2
 0 90 50 50
10  0 10 10
50 90  0 50
50 90 50  0


<b>Output</b>
1
3
4
2
</pre>


______________________________________________________
CWAY||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/CWAY/en/">English</a></td> 
<td width="50%"><a href="/problems/CWAY/vn/">Vietnamese</a></td> 
</tr></table>

<p>A complete graph of N verticles is a graph in which there is an edge between every pair of nodes.</p>
<p>Your task is to count the number of paths between  any pair of nodes in the graph. Note that a path cannot visit a vertex more than once.</p>


*******InputConstraints*******

<p>A single integer N that is the number of verticles in the graph (2 &#8804; N &#8804; 1000).</p>


*******OutputConstraints*******

<p>A single integer that is the number of paths between any two nodes in the graph.</p>


*******IOTestCases*******


<pre>
<b>Input</b>
4

<b>Output</b>
5

<b>Description</b>
For example, there are 5 paths between 1 and 2:
1-2
1-3-2
1-3-4-2
1-4-2
1-4-3-2
</pre>






______________________________________________________
KDEL||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/KDEL/en/">English</a></td> 
<td width="50%"><a href="/problems/KDEL/vn/">Vietnamese</a></td> 
</tr></table>

<p>Bom loves arithmetic very much. He is currently examining the numbers formed by writing the prime numbers successively.
Accordingly, the n<sup>th</sup> number of this kind is formed by writing the first, second, ..., and up to n<sup>th</sup> prime number successively. 
The first few ones are:
</p> 
<p>2, 23, 235, 2357, 235711, ... </p>
<p>Bom denotes the n<sup>th</sup> number in the above sequence by a<sub>n</sub>.</p>
<p>Write a program that helps Bom delete k digits from a<sub>n</sub> so that the number formed by the remaining digits is maximized.</p>


*******InputConstraints*******

<p>A single line containing two integers n and k (1 &#8804; n &#8804; 50000, k &#8805; 0 and k is smaller than the number of digits of a<sub>n</sub>).</p>


*******OutputConstraints*******

<p>Print in a single line the maximum number obtained by deleting exactly k digits from a<sub>n</sub>.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
5 4

<b>Output</b>
71
</pre>




______________________________________________________
INTEGER7||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/INTEGER7/en/">English</a></td> 
<td width="50%"><a href="/problems/INTEGER7/vn/">Vietnamese</a></td> 
</tr></table>


<p>Find two nonnegative integers x1 and x2 so that a<sub>1</sub> * x<sub>1</sub> + b<sub>1</sub> = a<sub>2</sub> * x<sub>2</sub> + b<sub>2</sub> and x<sub>1</sub> + x<sub>2</sub> is minimized. Given that there exist x<sub>1</sub> and x<sub>2</sub> satisfying the above equation.</p>


*******InputConstraints*******

<ul>
<li>A single line containing four integers a<sub>1</sub>, b<sub>1</sub>, a<sub>2</sub>, b<sub>2</sub> (the integers are within the interval [0..2<sup>31</sup>-1].</li>
</ul>

*******OutputConstraints*******

<ul>
<li>Print two integers x<sub>1</sub>, x<sub>2</sub>.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
3 4 5 5

<b>Output</b>
2 1
</pre>




______________________________________________________
PCYCLE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/PCYCLE/en/">English</a></td> 
<td width="50%"><a href="/problems/PCYCLE/vn/">Vietnamese</a></td> 
</tr></table>


<p>
In a maze, there are N rooms and some corridors connecting the rooms. There is at most one corridor connecting each pair of rooms.</p>
<p>An explorer wants to explore that maze. He'll start at a room and go along all the corridors so that each corridor is passed exactly once. Then he'll return to the starting point. Each corridor is assigned a value c meaning that when going along that corridor, the explorer's energy points will be add up with c unit(s) (c may be negative). The explorer starts with 0 energy point. He'll die if after passing a corridor, his energy point is negative.
</p> 
<p>
Your task is to help the explorer find a <b>safe</b> journey satisfying the given conditions.
</p>


*******InputConstraints*******

<ul>
<li>The first line contains two integers N and M (1 &#8804; N &#8804; 200).</li>
<li>The i<sup>th</sup> line in the next M lines contains three integers u, v, c representing a corridor connecting room u and room v with c energy points. (|c| &#8804; 10000).</li>
</ul>


*******OutputConstraints*******

<ul>
<li>If there is no safe journey, print -1. Otherwise, print M+1 integers which are indexes of the rooms along the journey.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
3 3
1 2 2
1 3 -1
2 3 -1

<b>Output</b>
2 1 3 2
</pre>




______________________________________________________
HELPPM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/HELPPM/en/">English</a></td> 
<td width="50%"><a href="/problems/HELPPM/vn/">Vietnamese</a></td> 
</tr></table>


<table width='100%'>
<tr>
<td valign='top'>
<p>
In 2050, Le Don Khue has become the Prime Minister of Vietnam. He has to consider a  logging plan of K m<sup>3</sup> wood in a forest for export. The forest is a MxN km<sup>2</sup> rectangular area. For easy management, the forest is divided into MxN cells (M rows and N columns). The rows are numbered as 1 to M from top to bottom. The columns are numbered as 1 to N from left to right. The cell at row i and column j has coordinates (i, j). The quantity of wood (m<sup>3</sup>) in each cell is already known. 
</p>
<p>
The PM decided to give permission for logging. The logging area should also be rectangular. The PM wants to find an area as small as possible but there is still enough wood in this area for export. 
</p>
<p>
Has not been programming for a long time, the PM needs your help. Let's help him!
</p>
</td>
<td>
<img src='http://vn.spoj.pl/VM08/content/HELPPM.jpg' width='250px'/>
</td>
</tr>
</table>	

*******InputConstraints*******

<ul>
<li>The first line contains three integers M, N, K (1 &#8804; M, N &#8804; 500, 1 &#8804; K &#8804; 10<sup>9</sup>).</li>
<li>The i<sup>th</sup> line in the next M lines contains N non-negative integers in which the j<sup>th</sup> number is the quantity of wood in cell (i, j). The quantity of wood in each cell is not larger than 10<sup>4</sup> m<sup>3</sup>.</li>
</ul>
	

*******OutputConstraints*******

<p>If there is no logging area that give enough wood for export, print -1. Otherwise, print two lines:</p>
<ul>
<li>The first line contains the minimum possible area of the logging area.</li>
<li>The second line contains four integers that are coordinates of the top left and bottom right corner of the logging area. If there is more than one possible area, print the coordinates of any of them.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
3 3 19
5 4 0
4 7 0
0 0 2

<b>Output</b>
4
1 1 2 2
</pre>





______________________________________________________
NHP||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/NHP/en/">English</a></td> 
<td width="50%"><a href="/problems/NHP/vn/">Vietnamese</a></td> 
</tr></table>

<p>In the adventure of collecting the Deathly Hallows, Harry and his friends found a secret chamber. Suddenly, when they had just entered, walls appeared everywhere, divided the chamber into N*N rooms. The team then was split into several rooms. Every room was equal in size and had 4 doors, each of which was on a wall of the room.</p>
<p>Monsters then appeared in the rooms contained people. The number of monsters was equal to the number of people in that room, which meant when a person moved from room X to room Y, a new monster immediately appeared in room Y.</p>
<p>Harry and his friends had to fight the monsters and find paths to escape. They found that the time to kill a monster in the room (I, J) was A[i, j]. (The rooms were numbered from left to right, and from above to below). One person could fight only one monster in a room at the same time; after killing a monster, (s)he could move to one of the adjacent rooms immediately. <i> However, in case (s)he stayed, another monster would appear immediately. </i></p>
<p>With the Marauder's Map, Harry knew which rooms his friends were confined. He also discovered that these rooms were painted with different colors. Moreover, the doors on the walls of the chamber also had different colors. Harry had to guide each of his friends, <b>one after another</b>, to run to the door which had the same color with the room confined that person. But when a person escaped, <b>immediately</b>, the monsters would regained their lost energy (<i>or the monsters would be strong as it'd just appeared</i>) and the walls of the chamber rotated a unit clockwise. Also, the doors on them also went with them, as described on the figures below.</p>
<img height=355 src="http://vn.spoj.pl/SPOJVN/content/nhp.jpg" width=662>
<p>Because of the difficult situation, Harry could only guide the next friend after the current one had escaped the maze. Please help Harry to guide all his friends escaped the chamber in minimum time.</p>
<p>(P.s: If you ask me &#8216;How could Harry guide his friends?&#8217; Yeah, he used the &#8216;Sonorus!&#8217; incantation. It made his voice resounded everywhere in the chamber. :D)</p>


*******InputConstraints*******

<ul>
<li>The first line contains 2 positive integer N, K. N is the dimension of the maze, and K is the number of  members in Harry&#8217;s Team.</li>
<li>The I-th line of the the next N lines contains N non-negative integers. The J-th number in line I is A[I, J] representing the time required to kill a monster in the room (I, J).</li>
<li>Each line in the next K lines contains 3 non-negative integers I, J, C, which means the Xth person is in the room (I, J) and this room is painted with color C.</li>
<li>The last line contains 4*N non-negative integers which are the colors of the doors on 4 walls enclosed the maze. The colors, one after another clockwise, start from the door on the upper wall of the room (1,1). (Order similar to Figure 1).</li>
</ul>


*******OutputConstraints*******


<p>A single integer that is the minimum time for Harry and all of his friends to escape the maze.</p>


*******IOTestCases*******


<pre>
<b>Input</b>
3 2
2 2 2
0 2 0
1 0 2
1 2 2
2 1 2
2 2 2 2 2 2 1 1 2 1 1 2

<b>Output</b>
3
</pre>
<p> A valid way to escape:</p><p>
- The person (1,2) kills his monster in 2 seconds, then escapes the chamber by moves to (0,2). While (2,1) fighting his monster. He can kill it, but he can't move, so the monster appears again.</p><p>
- The chamber rotates. The monster at (2,1) regains its health.</p><p>
- The person (2,1) kills his monster in 0 second, and moves to (3,1). He kills the monster at (3,1) in 1 seconds, then escapes the chamber by moves to (3,0).</p><p>
Total Time = 2+0+1 = 3.
</p>




______________________________________________________
TRIBE||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/TRIBE/en/">English</a></td> 
<td width="50%"><a href="/problems/TRIBE/vn/">Vietnamese</a></td> 
</tr></table>

<p>The language of an ancient tribe was only based on two characters - <i>a</i> and <i>b</i> - to create words. It also used character space to separate words in the sentence. So, a word was an unextendible consecutive characters in a sentence. A sentence did not contain meaningless words. People in the tribe were very religious, they believed that each word had its own lucky value. The value of a sentence is the summation of the value of each word in that sentence. </p>
<p>You can use at most <b>x</b> character <i>a</i>, <b>y</b> character <i>b</i> and <b>z</b> character space to make the a sentence. Show us how lucky you are! Tell us the luckiest sentence you can make. In case of multiple solutions, print the smallest lexicographical sentence (space is smaller than <i>a</i> and <i>a</i> is smaller than <i>b</i>).



*******InputConstraints*******

<p>
<ul>
<li>The first line contains N, the number of meaningful words in the language.(1 &#8804; N &#8804; 50)</li>
<li>The second line contains 3 integer numbers:<b>x</b>, <b>y</b>, <b>z</b> as stated.( 0 &#8804; x, y, z &#8804; 50)</li>
<li>Each of the next N lines contains one word and its value, separated by a space. Value of a word is a positive integer and not exceed 50.</li>
</ul>

*******OutputConstraints*******

<p>Only one line, contains the sentence you found.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
3 3 1
abb 3
baa 3
aaa 4
bbb 1

<b>Output:</b>
abb baa
</pre>

______________________________________________________
KINGDOM||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/KINGDOM/en/">English</a></td> 
<td width="50%"><a href="/problems/KINGDOM/vn/">Vietnamese</a></td> 
</tr></table>


<p>Once upon a time, there were N kingdoms in a far far away land, fighting with each other. King of the mightiest kingdom decided to conquer  other kingdoms, looking for oil sources! The kingdom's budget is a bit limited because the money were pumped into the king's latest election campaign. The budget is initially M.</p>
<p>The kingdoms are numbered from 1 to N. Kingdom 1 is the mightiest. The kingdoms are connected by bidirectional roads in which there is exactly once path between any two kingdoms.</p>
<p>The king hired you to make a strategic plan for him. His spies gave you two numbers for each country i (i>1):</p>
<ul>
<li>V<sub>i</sub> = the value of this country's oil sources</li>
<li>C<sub>i</sub> = the cost of conquering this country</li>
</ul>
<p>A kingdom can be conquered only when it is adjacent to kingdom 1 or when you've conquered an adjacent kingdom to it (which is connected to it via a road).</p>
<p>Now, your task is to make a plan to conquer other kingdoms so that the total value from oil sources is maximized. Never exceed the budget!</p>


*******InputConstraints*******

<ul>
<li>The first line contains two integers N (1 &#8804; N &#8804; 100) and M (0 &#8804; M &#8804; 2000).</li>
<li>The second line contains N-1 integers V<sub>2</sub>, V<sub>3</sub>..., V<sub>N</sub> (1 &#8804; V<sub>i</sub> &#8804; 100).</li>
<li>The third line contains N-1 integers C<sub>2</sub>, C<sub>3</sub>,..., C<sub>N</sub> (0 &#8804; C<sub>i</sub> &#8804; 30).</li>
<li>Each line in the next N-1 lines contains two integers u, v representing a road.</li>
</ul>


*******OutputConstraints*******

<p>A single integer that is the maximum value of oil sources the Mightiest King can get from conquering other countries.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
10 3
10 10 10 9 5 8 8 7 10
0 0 0 0 0 3 2 2 0
1 2
1 3
1 4
2 5
3 6
4 7
5 8
6 9
8 10



<b>Output</b>
62

<b>Input</b>
3 1
1 1
1 0
1 2
2 3

<b>Output</b>
2
</pre>





______________________________________________________
BINLADEN||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/BINLADEN/en/">English</a></td> 
<td width="50%"><a href="/problems/BINLADEN/vn/">Vietnamese</a></td> 
</tr></table>


<p>Bin Laden the terrorist is hiding in a basement that has M floors below the ground. Each floor has N rooms.
The rooms are separated by solid doors that are very hard to break. Each room has doors going to the room below and two rooms beside.
From the ground, there are N doors going to N rooms of floor -1. Bin Laden is in the last floor (floor -M), room N (the rightmost room).
Each door is made of diffrent kinds of metal, so they require different time to break.</p>
<P>Find the fastest way to go from the ground to Bin Laden's room or he will escape!</p>


*******InputConstraints*******

<ul>
<li>Line 1: M and N</li>
<li>From line 2 to line 2M+1, even lines contain N numbers, odd lines contain N-1 numbers that are the time required to break the doors.</li>
</ul>


*******OutputConstraints*******

<p>A single number that is the minimum time to go to Bin Laden's room.</p>


*******IOTestCases*******

<pre>
<b>Input</b>
4 2
99 10
1
10 99
1
99 10
1
10 99
1

<b>Output</b>
44

+--99--+--10--+
|      |      |
|      1      |
|      |      |
+--10--+--99--+
|      |      |
|      1      |
|      |      |
+--99--+--10--+
|      |      |
|      1      |
|      |      |
+--10--+--99--+
|      |      |
|      1      |
|      |      |
+------+------+
We may go in zigzag.
</pre>


______________________________________________________
WIFI||||||true||||||


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/WIFI/en/">English</a></td> 
<td width="50%"><a href="/problems/WIFI/vn/">Vietnamese</a></td> 
</tr></table>

<p>
The are N teams participating in the next year regional ACM contest in Ho Chi Minh city. The organization board has arranged N computers for the teams. Team i will sit at coordinates x<sub>i</sub>, y<sub>i</sub>. To help the teams access the judging system easily, the organization board has also arranged M access points. They want to setup the computer lab so that:</p>
<ul>
<li>Each computer is connected to exactly one access point.</li>
<li>The number of computers connected to the access points are different by no more than one.</li>
<li>The total "flickering number" of the network is minimized. The flickering number of a computer is measured by the square distance from this computer to the access point that it is connected to.</li>
</ul>


*******InputConstraints*******

<ul>
<li>First line: two numbers M and N.</li>
<li>In the next M lines, each line contain two numbers that are coordinates of the access points.</li>
<li>In the next N lines, each line contain two numbers that are coordinates of the computers.</li>
</ul>


*******OutputConstraints*******

<ul>
<li>Line 1: print the minimum total flickering number of the network.</li>
<li>Line 2: print N numbers. The i<sup>th</sup> number is the index of the access point that computer i connected to.</li>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
2 3
0 0
2 1
1 0
1 1
1 2

<b>Output</b>
4
1 2 2
</pre>

<p>The following figure represents the example test case. The computer are represented by black squares and the access points are represented by white squares.</p>

<img src='http://vn.spoj.pl/VM08/content/wifi.gif'/>


______________________________________________________
REDUCT||||||true||||||


<p>What do you do if you need to copy a 560x400mm image onto a standard sheet of US letter-size paper (which is about 216x280mm), while keeping the image as large as possible? You can rotate the image 90 degrees (so that it is in landscape mode), then reduce it to 50% of its original size so that it is 200x280mm.Then it will fit on the paper without overlapping any edges. Your job is to solve this problem in general.
</p>


*******InputConstraints*******

<p> The input consists of one or more test cases, each of
which is a single line containing four positive integers <i>A</i>, <i>B</i>, <i>C</i>, and <i>D</i>, separated by a space, representing an <i>A</i>x<i>B</i>mm image and a <i>C</i>x<i>D</i>mm piece of paper. All inputs will be less than one thousand. Following the test cases is a line containing four zeros that signals the end of the input.</p>


*******OutputConstraints*******

<p> For each test case, if the image fits on the sheet
of paper without changing its size (but rotating it if necessary), then the output is 100%. If the image must be reduced in order to fit, the output is the largest <em>integer</em> percentage of its original size that will fit (rotating it if necessary). Output the percentage exactly as shown in the examples below. You can assume that no image will need to be reduced to less than 1% of its original size, so the answer will always be an integer percentage between 1% and 100%, inclusive.
</p> 


*******IOTestCases*******


<pre>
<b>Input:</b>
560 400 218 280
10 25 88 10
8 13 5 1
9 13 10 6
199 333 40 2
75 90 218 280
999 99 1 10
0 0 0 0

<b>Output:</b>
50%
100%
12%
66%
1%
100%
1%
</pre>


______________________________________________________
CONDIG||||||true||||||


<p>As a recruiting ploy, Google once posted billboards in Harvard
Square and in the Silicon Valley area just stating &#8220;{first 10-digit
prime found in consecutive digits of e}.com&#8221;. In other words, find
that 10-digit sequence and then connect to the web site &#8212; and find
out that Google is trying to hire people who can solve a particular
kind of problem.</p>

<p>Not to be outdone, Gaggle (a loosy-goosy fuzzy logic search firm),
has devised its own recruiting problem. Consider the <em>base 7</em>
expansion of a rational number. For example, the first few digits of
the base 7 expansion of 1/5<sub><font size="-3">10</font></sub>
= 0.12541...<sub><font size="-3">7</font></sub>, 33/4<sub><font
        size="-3">10</font></sub> =
11.15151...<sub><font size="-3">7</font></sub>, and 6/49<sub><font
   size="-3">10</font></sub> = 0.06000...<sub><font
   size="-3">7</font></sub>, From this expansion, find the digits in
   a particular range of positions to the right of the "decimal"
   point.</p>



*******InputConstraints*******

<p>The input file begins with a line containing a single integer specifying the number of problem sets in the file. Each problem set is specified by four base 10 numbers on a single line, n d b e, where n and d are the numerator and denominator of the rational number and 0 &#8804; n &#8804; 5,000 and 1 &#8804; d &#8804; 5,000. b and e are the beginning and ending positions for the desired range of digits, with 0 &#8804; b,e &#8804; 250 and 0 &#8804; (e-b) &#8804; 20. Note that 0 is the position immediately to the right of the decimal point.
</p>


*******OutputConstraints*******

<p>Each problem set will be numbered (beginning at one) and will generate a single line:

    Problem set k: n / d, base 7 digits b through e: result 

where k is replaced by the problem set number, result is your computed result, and the other values are the corresponding input values.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1 5 0 0
6 49 1 3
33 4 2 7
511 977 122 126

<b>Output:</b>
Problem set 1: 1 / 5, base 7 digits 0 through 0: 1
Problem set 2: 6 / 49, base 7 digits 1 through 3: 600
Problem set 3: 33 / 4, base 7 digits 2 through 7: 151515
Problem set 4: 511 / 977, base 7 digits 122 through 126: 12425
</pre>



______________________________________________________
PAINTER||||||true||||||


<p>The local toy store sells small fingerpainting kits with between
three and twelve 50ml bottles of paint, each a different color. The
paints are bright and fun to work with, and have the useful property
that if you mix <i>X</i> ml each of any three different colors, you
get <i>X</i> ml of gray. (The paints are thick and "airy",
almost like cake frosting, and when you mix them together the volume
doesn't increase, the paint just gets more dense.)  None of the
individual colors are gray; the only way to get gray is by mixing
exactly three distinct colors, but it doesn't matter which three. Your
friend Emily is an elementary school teacher and every Friday she does
a fingerpainting project with her class.  Given the number of
different colors needed, the amount of each color, and the amount of
gray, your job is to calculate the number of kits needed for
her class.
</p>



*******InputConstraints*******

<p> The input consists of one or more test cases,
followed by a line containing only zero that signals the end of the
input.  Each test case consists of a single line of five or more
integers, which are separated by a space.  The first integer <i>N</i>
is the number of different colors (3 &#8804; <i>N</i> &#8804; 12). Following
that are <i>N</i> different nonnegative integers, each at most 1,000,
that specify the amount of each color needed.  Last is a nonnegative
integer <i>G</i> &#8804; 1,000 that specifies the amount of gray needed.
All quantities are in ml.
</p>



*******OutputConstraints*******

<p>For each test case, output the smallest number of fingerpainting kits sufficient to provide the required amounts of all the colors and gray. Note that all grays are considered equal, so in order to find the minimum number of kits for a test case you may need to make grays using different combinations of three distinct colors.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3 40 95 21 0
7 25 60 400 250 0 60 0 500
4 90 95 75 95 10
4 90 95 75 95 11
5 0 0 0 0 0 333
0


<b>Output:</b>
2
8
2
3
4

</pre>



______________________________________________________
PRIMESUB||||||true||||||


<p> Let <i>n</i> be any positive integer. A <i>factor</i> of   <i>n</i>

is any number that divides evenly into   <i>n</i>, without leaving a remainder.
 For example, 13 is a factor   of 52, since 52/13 = 4.  A <i>subsequence</i>
of <i>n</i>   is a number without a leading zero that can be obtained from
  <i>n</i> by discarding one or more of its digits.  For example, 2,   13,
801, 882, and 1324 are subsequences of 8013824, but 214 is not   (you can't
rearrange digits), 8334 is not (you can't have more   occurrences of a digit
than appear in the original number), 8013824   is not (you must discard at
least one digit), and 01 is not (you   can't have a leading zero).  A <i>subfactor</i>
of <i>n</i> is an   integer greater than 1 that is both a factor and a subsequence
of   <i>n</i>.  8013824 has subfactors 8, 13, and 14.  Some numbers do
not have a subfactor; for example, 6341 is not divisible by 6, 3, 4,   63,
64, 61, 34, 31, 41, 634, 631, 641, or 341. </p>

<p>An <i>x-subfactor series</i> of <i>n</i> is a decreasing series of
 integers <i>n<sub>1</sub></i>, ..., <i>n<sub>k</sub></i>, in which
 (1)
<i>n</i> = <i>n<sub>1</sub></i>, (2) <i>k</i> &#8805; 1, (3) for   all 1 &#8804; <i>i</i>

&lt; <i>k</i>, <i>n<sub>i+1</sub></i> is   obtained from <i>n<sub>i</sub></i>
by first discarding the digits of   a subfactor of <i>n<sub>i</sub></i>,
and then discarding leading   zeros, if any, and (4) <i>n<sub>k</sub></i>

has no subfactor.  The   term "x-subfactor" is meant to suggest that a subfactor
  gets x'ed, or discarded, as you go from one number to the next.  For
example, 2004 has two distinct x-subfactor series, the second of which
can be obtained in two distinct ways.  The highlighted digits show the   subfactor
that was removed to produce the next number in the series. </p>

<blockquote>     <u><b><i>2</i></b></u>004 Â  4<br>
     200<u><b><i>4</i></b></u> Â  <u><b><i>20</i></b></u>0 Â  0<br>

     200<u><b><i>4</i></b></u> Â  <u><b><i>2</i></b></u>00 Â  0   </blockquote>

<p>   The <i>primary</i> x-subfactor series has maximal length (the   largest
<i>k</i> possible, using the notation above). If there are   two or more
maximal-length series, then the one with the smallest   second number is
primary; if all maximal-length series have the same   first and second numbers,
then the one with the smallest third   number is primary; and so on.  Every
positive integer has a unique   primary x-subfactor series, although it may
be possible to obtain it   in more than one way, as is the case with 2004.

</p>


*******InputConstraints*******

<p>The input consists of one or more positive   integers,
each less than one billion, without leading zeroes, and on   a line by itself.
 Following is a line containing only "0"   that signals the end of the input.
</p>



*******OutputConstraints*******

<p>For each positive integer, output its primary   x-subfactor
series using the exact format shown in the examples below. </p>



*******IOTestCases*******


<pre>
<b>Input:</b>
123456789
7
2004
6341
8013824
0


<b>Output:</b>
123456789 12345678 1245678 124568 12456 1245 124 12 1
7
2004 200 0
6341
8013824 13824 1324 132 12 1

</pre>



______________________________________________________
PACK1||||||true||||||


<p>In the future the delivery services will be fully automated. A robot will come to your home to pick the boxes and leaves them in the central processing office where boxes for the same address are packed together. There is a machine that can pack two boxes into a one new box containing the privious two. If we want N boxes delivered to a certain city then this machine with N-1 operation will be able to consolidate them into single box.
</p> 
<p>
Each box has its size and a price for packing it equal to this size. The size of the box resulting from the machine packing two boxes together is simply equal to the sum of the two boxes that are packed together. Your goal is to find out the minimum price for packing N boxes into a single one using the packing machine.
</p>


*******InputConstraints*******

<p>On the first line there will be one number N (1 < N < 5000001) &#8211; the number of boxes. N lines follow each line with one number representing the size of N-th box. The size will be less then 1 000 000.
In 50% of the test cases the size will be less then 4000.
</p>


*******OutputConstraints*******

<p>Your program should output a single integer &#8211; the minum price that have to be paid for packing the N boxes into a single one using N-1 operations of the machine. 
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1
1
1
1


<b>Output:</b>
8

</pre>



______________________________________________________
SYMORD||||||true||||||


<p>In your job at Albatross Circus Management (yes, it's run by a bunch of clowns), you have just finished writing a program whose output is a list of names in nondescending order by length (so that each name is at least as long as the one preceding it). However, your boss does not like the way the output looks, and instead wants the output to appear more symmetric, with the shorter strings at the top and bottom and the longer strings in the middle. His rule is that each pair of names belongs on opposite ends of the list, and the first name in the pair is always in the top part of the list. In the first example set below, Bo and Pat are the first pair, Jean and Kevin the second pair, etc. 
</p>


*******InputConstraints*******

<p>The input consists of one
 or more sets of strings, followed by a final  line containing only the value
 0. Each set starts with a line containing an  integer, <i>n</i>, which is
 the number of strings in the set, followed by  <i>n</i> strings, one per
line, sorted in nondescending order by length. None of the strings contain
spaces. There is at least one and no more than 15 strings per set.Â 

Each string is at most 25 characters long.Â  </p>



*******OutputConstraints*******

<p>For each input set print "SET n" on a line, where n starts at 1, followed by the output set as shown in the sample output. 


*******IOTestCases*******


<pre>
<b>Input:</b>
7
Bo
Pat
Jean
Kevin
Claude
William
Marybeth
6
Jim
Ben
Zoe
Joey
Frederick
Annabelle
5
John
Bill
Fran
Stan
Cece
0

<b>Output:</b>
SET 1
Bo
Jean
Claude
Marybeth
William
Kevin
Pat
SET 2
Jim
Zoe
Frederick
Annabelle
Joey
Ben
SET 3
John
Fran
Cece
Stan
Bill

</pre>



______________________________________________________
BOOKSH||||||false||||||

<p>Agnes C. Mulligan is a fanatical bibliophile &#8211; she is constantly
buying new books, and trying to find space for those books. In
particular, she has a shelf for her &#8220;to be read&#8221; books, where she puts
her newest books. When she decides to read one of these books, she
removes it from the shelf, making space for more books. Sometimes,
however, she buys a new book and puts it on the shelf, but because of
limited space, this pushes one or more books off the shelf at the other
end. She always adds books on the left side of the shelf, making books
fall off the right side. Of course, she can remove a book from any
location on the shelf when she wants to read one. <br>
</p>
<p>Your task will be to write a simulator that will keep track of books
added and removed from a shelf. At the end of the simulation, display
the books remaining on the shelf, in order from left to right. Books in
each simulation will be identified by a unique, positive integer, 0
&lt; <span style="font-style: italic;">I</span> &#8804; 100. There are three
types of
events in the simulation:<br>
</p>
<ul>

  <li><span style="font-family: monospace;"> Add</span>: A new book is
pushed on the left end of the shelf, pushing
other books to the right as needed. No book moves to the right unless
it is pushed by an adjacent (touching) book on its left. Any book that
is not <span style="font-style: italic;">entirely </span>on the shelf
falls off
the right edge. No single book will ever be wider than the given shelf.
No book that is currently on the shelf will be added again. </li>
  <li><span style="font-family: monospace;"> Remove</span>: If the book
is on the shelf, then the book is removed
from the shelf, leaving a hole. If the book isn't on the shelf, the
operation is ignored.</li>
  <li><span style="font-family: monospace;"> End</span>: End the
simulation for this case and print the contents of
the shelf.</li>

</ul>



______________________________________________________
FLOWLAY||||||true||||||


<p>A flow layout manager takes rectangular objects and places them in
a rectangular window from left to right. If there isn't enough room in
one row for an object, it is placed completely below all the objects
in the first row at the left edge, where the order continues from left
to right again.  Given a set of rectangular dimensions and a maximum
window width, you are to write a program that computes the dimensions
of the final window after all the rectangles have been placed in it.
</p>

<p>For example, given a window that can be at most 35 units wide, and
three rectangles with dimensions 10 <span style="font-family:
monospace;">x</span> 5, Â 20 <span style="font-family:
monospace;">x</span> 12, and 8 <span style="font-family:
monospace;">x</span> 13, the flow layout manager would create a window
that looked like the figures below after each rectangle was added.

</p>

<center>
<table cellspacing="2" border="0">
          <tbody>
            <tr>
              <td valign="top"><img src="http://www.spoj.plfig1a.gif"
 alt="insert 10x5 rectangle" style="width: 235; height: 35;"
 align="top">
                     </td>
              <td valign="top"><img src="http://www.spoj.plfig1b.gif"
 alt="insert 20x12 rectangle" style="width: 235; height: 77;"
 align="top">
              </td>
              <td valign="top"><img src="http://www.spoj.plfig1c.gif"
 alt="insert 8x13 rectangle" style="width: 238; height: 154;"
 align="top">

              </td>
            </tr>

  </tbody>
</table>
 </center>

<p>The final dimensions of the resulting window are 30 <span
style="font-family: monospace;">x</span> 25, since the width of the
first row is 10+20 = 30 and the combined height of the first and
second rows is 12+13 = 25.
</p>




*******InputConstraints*******

<p>The input consists
of one or more sets of data, followed by a final line containing only
the value 0. Each data set starts with a line containing an integer,
<i>m</i>, 1 &#8804; <span style="font-style: italic;">m</span> &#8804;
80, which is the maximum width of the resulting window. This is
followed by at least one and at most 15 lines, each containing the
dimensions of one rectangle, width first, then height. The end
of the list of rectangles is signaled by the pair -1 -1, which is not
counted as the dimensions of an actual rectangle.  Each rectangle is
between 1 and 80 units wide (inclusive) and between 1 and 100
units high (inclusive).
</p>



*******OutputConstraints*******

<p>For each input set
print the width of the resulting window, followed by a space, then the
lowercase letter "<span style="font-family: monospace;">x</span>",
followed by a space, then the height of the resulting window.<br>

</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
35
10 5
20 12
8 13
-1 -1
25
10 5
20 13
3 12
-1 -1
15
5 17
5 17
5 17
7 9
7 20
2 10
-1 -1
0

<b>Output:</b>
30 x 25
23 x 18
15 x 47
</pre>



______________________________________________________
GRAFT||||||true||||||


<p>    
Trees have many applications in computer science. Perhaps the most commonly
used trees are rooted binary trees, but there are other types of rooted
trees that may be useful as well. One example is ordered trees, in
which the subtrees for any given node are ordered. The number of
children of each node is variable, and there is no limit on the number.
Formally, an ordered tree consists of a finite set of nodes T such that

<ul>
<li> there is one node designated as the root, denoted root(T);<br></li>
<li> the remaining nodes are partitioned into subsets T1, T2, ..., Tm, each of which is also a tree (subtrees).</li>
</ul>

Also, define root(T1), ..., root(Tm) to be the children of root(T), with
root(Ti) being the i-th child. The nodes root(T1), ..., root(Tm) are
siblings.</p>

<p>It is often more convenient to represent an ordered
tree as a rooted binary tree, so that each node can be stored in the
same amount of memory. The conversion is performed by the following
steps:</p>

<ol>
<li>remove all edges from each node to its children;</li>
<li>for each node, add an edge to its first child in T (if any) as the left child;</li>
<li>for each node, add an edge to its next sibling in T (if any) as the right child.</li>
</ol>

<p>This is illustrated by the following:
<blockquote><pre>
         0                             0
       / | \                          /
      1  2  3       ===>             1
        / \                           \
       4   5                           2
                                      / \
                                     4   3
                                      \
                                       5
</pre></blockquote>
In most cases, the height of the tree (the number of edges in the longest
root-to-leaf path) increases after the conversion. This is undesirable
because the complexity of many algorithms on trees depends on its
height.</p>

<p>You are asked to write a program that computes the height of the tree before and after the conversion.</p>




*******InputConstraints*******

<p>The input is given by a number of lines giving the directions taken in a
depth-first traversal of the trees. There is one line for each tree.
For example, the tree above would give dudduduudu, meaning 0 down to 1,
1 up to 0, 0 down to 2, etc. The input is terminated by a line whose
first character is #. You may assume that each tree has at least 2 and
no more than 10000 nodes.</p>


*******OutputConstraints*******

<p>For each tree, print the heights of the tree before and after the conversion specified above.  Use the format:
<blockquote><pre>
Tree t: h1 => h2
</pre></blockquote>

where t is the case number (starting from 1), h1 is the height of the tree
before the conversion, and h2 is the height of the tree after the
conversion.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
dudduduudu
ddddduuuuu
dddduduuuu
dddduuduuu
#


<b>Output:</b>
Tree 1: 2 => 4
Tree 2: 5 => 5
Tree 3: 4 => 5
Tree 4: 4 => 4

</pre>



______________________________________________________
UPTIME||||||true||||||


<p>Michael
has a powerful computer server that has hundreds of parallel processors
and terabytes of main memory and disk space. Many important
computations run continuously on this server, and power must be
supplied to the server without interruption.</p><p>Michael's server
must be moved to accommodate new servers that have been purchased
recently. Fortunately, Michael's server has two redundant power
supplies---as long as at least one of the two power supplies is
connected to an electrical outlet, the server can continue to run. When
the server is connected to an electrical outlet, it can be moved to any
location which is not further away from the outlet than the length of
the cord used to connect to the outlet.</p><p>Given which outlet
Michael's server is plugged into initially and finally, and the
locations of outlets in the server room, you should determine the
smallest number of times you need to plug a cord into an electrical
outlet in order to move the server while keeping the server running at
all times. Note that, in the initial and final configuration, only one
cord is connected to the power outlet.</p>


*******InputConstraints*******

<p>The first line of input is an integer giving the number of cases to follow.  For each case, the first line is of the form</p><p>OUTLETS OUTLET_INITIAL OUTLET_FINAL LENGTH1 LENGTH2</p><p>where</p><p></p><ul><li> OUTLETS is the number of outlets in the server room (2 &lt;= OUTLETS &lt;= 1000).<br></li><li> OUTLET_INITIAL is the index (starting from 1) of the outlet the server is initially connected to.<br></li><li> OUTLET_FINAL is the index (starting from 1) of the outlet the server is finally connected to.<br></li><li>
LENGTH1 and LENGTH2 are the positive lengths of the two power cords,
with at most three digits of precision after the decimal point (0 &lt;

LENGTH1, LENGTH2 &lt;= 30000).</li></ul><p>These are followed by OUTLETS lines
giving the integer coordinates of the wall outlets, one per line, with
the k-th line giving the location of the k-th outlet. All coordinates
are specified as two integers (x- and y-coordinates) separated by a
space, with absolute values at most 30000. You may assume that all
coordinates are distinct, and that the initial outlet and the final
outlet are different.</p>


*******OutputConstraints*******

<p>For each case, print
the minimum number of times you need to plug a cord into an electrical
outlet in order to move the server to the final location while keeping
the server running at all times. If this is not possible, print
"Impossible".</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
4 1 4 2.000 1.000
0 0
0 4
4 0
4 4
9 1 4 2.000 3.000
0 7
-6 2
-3 3
6 2
-6 -3
3 -3
6 -3
-3 -7
0 -7

<b>Output:</b>
Impossible
8

</pre>



______________________________________________________
LINEARPA||||||true||||||


<p>This problem is inspired by <SPAN ID="txt48">Pachinko</SPAN>, a popular game in Japan. A traditional Pachinko machine is a cross between a vertical pinball machine and a slot machine. The player launches small steel balls to the top of the machine using a plunger as in pinball. A ball drops through a maze of pins that deflect the ball, and eventually the ball either exits at a hole in the bottom and is lost, or lands in one of many gates scattered throughout the machine which reward the player with more balls in varying amounts. Players who collect enough balls can trade them in for prizes. 

<P>
For the purposes of this problem, a <SPAN  CLASS="textit">linear</SPAN> Pachinko machine is a sequence of one or more of the following: holes (``<TT>.</TT>"), floor tiles (``<TT>_</TT>"), walls (``<TT>|</TT>"), and mountains (``<code>/\</code>"). A wall or mountain will never be adjacent to another wall or mountain. To play the game, a ball is dropped at random over some character within a machine. A ball dropped into a hole falls through. A ball dropped onto a floor tile stops immediately. A ball dropped onto the left side of a mountain rolls to the left across any number of consecutive floor tiles until it falls into a hole, falls off the left end of the machine, or stops by hitting a wall or mountain. A ball dropped onto the right side of a mountain behaves similarly. A ball dropped onto a wall behaves as if it were dropped onto the left or right side of a mountain, with a 50<SPAN CLASS="MATH">%</SPAN> chance for each. If a ball is dropped at random over the machine, with all starting positions being equally likely, what is the probability that the ball will fall either through a hole or off an end? For example, consider the following machine, where the numbers just indicate character positions and are not part of the machine itself:


<P>

<P>
<BR>

<PRE>
123456789 
/\.|__/\.
</PRE> 

<P>

<P>
<BR>
The probabilities that a ball will fall through a hole or off the end of the machine are as follows, by position: <SPAN CLASS="MATH">1 = 100%</SPAN>, <SPAN CLASS="MATH">2 = 100%</SPAN>, <SPAN CLASS="MATH">3 = 100%</SPAN>, <SPAN CLASS="MATH">4 = 50%</SPAN>, <SPAN CLASS="MATH">5 = 0%</SPAN>, <SPAN CLASS="MATH">6 = 0%</SPAN>, <SPAN CLASS="MATH">7 = 0%</SPAN>, <SPAN CLASS="MATH">8 = 100%</SPAN>, <SPAN CLASS="MATH">9 = 100%</SPAN>. The combined probability for the whole machine is just the average, which is approximately <SPAN CLASS="MATH">61.111%</SPAN>. 




*******InputConstraints*******

<p>The input consists of one or more linear Pachinko machines, each 1Ã¢&#8364;&#8220;79 characters long and on a line by itself, followed by a line containing only "<TT>#</TT>" that signals the end of the input. 




*******OutputConstraints*******

<p>For each machine, compute as accurately as possible the probability that a ball will fall through a hole or off the end when dropped at random, then output a single line containing that percentage truncated to an integer by dropping any fractional part.




*******IOTestCases*******


<pre>
<b>Input:</b>
/\.|__/\. 
_._/\_|.__/\./\_ 
... 
___ 
./\. 
_/\_ 
_|.|_|.|_|.|_ 
____|_____ 
#

<b>Output:</b>
61 
53 
100 
0 
100 
50 
53 
10

</pre>



______________________________________________________
FRSEARCH||||||true||||||


<p>For this problem you will write a search engine that takes a query, searches a collection of words, and finds the lexicographically smallest word that matches the query (i.e., the matching word that would appear first in an English dictionary). A <SPAN  CLASS="textit">query</SPAN> is a sequence of one or more terms separated by single vertical bars (``<TT>|</TT>"). A <SPAN  CLASS="textit">term</SPAN> is one or more letters followed by zero or more signed letters. A <SPAN  CLASS="textit">signed</SPAN> letter is either <TT>+</TT><SPAN CLASS="MATH"><I>s</I></SPAN> (`positive" <SPAN CLASS="MATH"><I>s</I></SPAN>) or <TT>-</TT><SPAN CLASS="MATH"><I>s</I></SPAN> (``negative" <SPAN CLASS="MATH"><I>s</I></SPAN>), where <SPAN CLASS="MATH"><I>s</I></SPAN> is a single letter. All letters are lowercase, and no letter will appear more than once within a term. A query will not contain spaces. A term matches a word if the word contains at least one of the unsigned letters, all of the positive letters, and none of the negative letters; a query matches a word if at least one of its terms matches the word. 




*******InputConstraints*******

<p>The input consists of one or more test cases followed by a line containing only ``<TT>#</TT>" that signals the end of the input. Each test case consists of 1Ã¢&#8364;&#8220;100 words, each on a line by itself, followed by a line containing only ``<TT><SPAN CLASS="MATH"><TT>*</TT></SPAN></TT>" that marks the end of the word list, followed by one or more queries, each on a line by itself, followed by a line containing only ``<TT><SPAN CLASS="MATH"><TT>*</TT> <TT>*</TT></SPAN></TT>" that marks the end of the test case. Each word will consist of 1-20 lowercase letters. All words within a test case will be unique. Each query will be as defined above and will be 1-79 characters long. 




*******OutputConstraints*******

<p>For each query, output a single line containing the lexicographically smallest word <SPAN  CLASS="textit">within that test case</SPAN> that matches the query, or the word <TT>NONE</TT> if there is no matching word. At the end of each test case, output a dollar sign on a line by itself. 



*******IOTestCases*******


<pre>
<b>Input:</b>
elk 
cow 
bat 
* 
ea 
acm+e 
nm+o|jk+l 
** 
debian 
slackware 
gentoo 
ubuntu 
suse 
fedora 
mepis 
* 
yts 
cab-e+n 
r-e|zjq|i+t|vs-p+e-u-c 
** 
#

<b>Output:</b>
bat 
NONE 
elk 
$ 
gentoo 
ubuntu 
NONE 
$
</pre>



______________________________________________________
GOGOGORE||||||true||||||


<p>The Gorelians travel through space using warp links. Travel through a warp link is instantaneous, but for safety reasons, an individual can only warp once every 10 hours. Also, the cost of creating a warp link increases directly with the linear distance between the link endpoints. 

<P>
The Gorelians, being the dominant force in the known universe, are often bored, so they frequently conquer new regions of space in the following manner. 

<P>

<OL>
<LI>The initial invasion force finds a suitable planet and conquers it, establishing a Regional Gorelian Galactic Government, hereafter referred to as the RGGG, that will govern all Gorelian matters in this region of space. 
</LI>
<LI>When the next planet is conquered, a single warp link is constructed between the new planet and the RGGG planet. Planets connected via warp links in this manner are said to be part of the Regional Gorelian Planetary Network, that is, the RGPN. 

</LI>
<LI>As additional planets are conquered, each new planet is connected with a single warp link to the nearest planet already in the RGPN, thus keeping the cost of connecting new planets to the network to a minimum. If two or more planets are equidistant from the new planet, the new planet is connected to whichever of them was conquered first. 
</LI>
</OL>

<P>
This causes a problem however. Since planets are conquered in a more-or-less random fashion, after a while, the RGGG will probably not be in an ideal location. Some Gorelians needing to consult with the RGGG might only have to make one or two warps, but others might require dozens--very inconvenient when one considers the 10-hour waiting period between warps. 

<P>
So, once each Gorelian year, the RGGG analyzes the RGPN and relocates itself to an optimal location. The optimal location is defined as a planet that minimizes the maximum number of warps required to reach the RGGG from any planet in the RGPN. As it turns out, there is always exactly one or two such planets. When there are two, they are always directly adjacent via a warp link, and the RGGG divides itself evenly between the two planets. 

<P>
Your job is to write a program that finds the optimal planets for the RGGG. For the purposes of this problem, the region of space conquered by the Gorelians is defined as a cube that ranges from (0,0,0) to (1000,1000,1000). 



*******InputConstraints*******

<p>The input consists of a set of scenarios where the Gorelians conquer a region of space. Each scenario is independent. The first line of the scenario is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> that specifies the total number of planets conquered by the Gorelians. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines of the input specify, in the order conquered, the <SPAN CLASS="MATH"><I>ID</I></SPAN>s and coordinates of the conquered planets to be added to the RGPN, in the format <!-- MATH
 $ID \ X \ Y \ Z$
 -->
<SPAN CLASS="MATH"><I>ID</I>&nbsp;<I>X</I>&nbsp;<I>Y</I>&nbsp;<I>Z</I></SPAN>. An <SPAN CLASS="MATH"><I>ID</I></SPAN> is an integer from 1 to 1000. <SPAN CLASS="MATH"><I>X</I></SPAN>, <SPAN CLASS="MATH"><I>Y</I></SPAN>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> are integers from 0 to 1000. A single space separates the numbers. A value of <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> marks the end of the input. 




*******OutputConstraints*******

<p>For each input scenario, output the <SPAN CLASS="MATH"><I>ID</I></SPAN>s of the optimal planet or planets where the RGGG should relocate. For a single planet, simply output the planet <SPAN CLASS="MATH"><I>ID</I></SPAN>. For two planets, output the planet <SPAN CLASS="MATH"><I>ID</I></SPAN>s, smallest <SPAN CLASS="MATH"><I>ID</I></SPAN> first, separated by a single space.




*******IOTestCases*******


<pre>
<b>Input:</b>
5 
1 0 0 0 
2 0 0 1 
3 0 0 2 
4 0 0 3 
5 0 0 4 
5 
1 0 0 0 
2 1 1 0 
3 3 2 0 
4 2 1 0 
5 3 0 0 
10 
21 71 76 4 
97 32 5 69 
70 33 19 35 
3 79 81 8 
31 91 17 67 
52 31 48 75 
48 90 14 4 
41 73 2 21 
83 74 41 69 
26 32 30 24 
0

<b>Output:</b>
3 
2 4 
31 97
</pre>



______________________________________________________
MST||||||true||||||


<p>Find the minimum spanning tree of the graph.


*******InputConstraints*******

<p>On the first line there will be two integers N - the number of nodes and M - the number of edges. (1 <= N <= 10000), (1 <= M <= 100000)<br/>
M lines follow with three integers i j k on each line representing an edge between node i and j with weight k. The IDs of the nodes are between 1 and n inclusive. The weight of each edge will be <= 1000000.


*******OutputConstraints*******

<p>Single number representing the total weight of the minimum spanning tree on this graph. There will be only one possible MST.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 5
1 2 10
2 3 15
1 3 5
4 2 2
4 3 40

<b>Output:</b>
17
</pre>



______________________________________________________
CONNECT2||||||true||||||


<p>Your task is to decide if a specified sequence of moves in the board game Connect ends with a winning move.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p3381.eps}$
 -->
<IMG
 WIDTH="890" HEIGHT="296" ALIGN="BOTTOM" BORDER="0"
 SRC="http://acmicpc-live-archive.uva.es/nuevoportal/data/p3381.jpg"
 ALT="\epsfbox{p3381.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

In this version of the game, different board sizes may be specified. Pegs are placed on a board at integer coordinates in the range [<SPAN CLASS="MATH">0, <I>N</I></SPAN>
<tex2html_verbatim_mark>]. Players Black and White use pegs of their own color. Black always starts and then alternates with White, placing a peg at one unoccupied position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>. Black's endzones are where <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> equals 0 or <SPAN CLASS="MATH"><I>N</I></SPAN>

<tex2html_verbatim_mark>, and White's endzones are where <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> equals 0 or <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>. Neither player may place a peg in the other player's endzones. After each play, the latest position is connected by a segment to every position with a peg of the same color that is a chess knight's move away (2 away in one coordinate and 1 away in the other), provided that a new segment will touch no segment already added, except at an endpoint. Play stops after a winning move, which is when a player's segments complete a connected path between the player's endzones. 

<P>
For example, Figure 1 shows a board with <SPAN CLASS="MATH"><I>N</I> = 4</SPAN>
<tex2html_verbatim_mark> after the moves (0,2), (2,4), and (4,2). Figure 2 adds the next move (3,2). Figure 3a shows a poor next move of Black to (2,3). Figure 3b shows an alternate move for Black to (2,1) which would win the game. 

<P>

Figure 4 shows the board with <SPAN CLASS="MATH"><I>N</I> = 7</SPAN>
<tex2html_verbatim_mark> after Black wins in 11 moves: 

<P>
(0, 3), (6, 5), (3, 2), (5, 7), (7, 2), (4, 4), (5, 3), (5, 2), (4, 5), (4, 0), (2, 4) 



*******InputConstraints*******

<p>The input contains from 1 to 20 datasets followed by a line containing only two zeroes, `<TT>0 0</TT>'. 
The first line of each dataset contains the maximum coordinate <SPAN CLASS="MATH"><I>N</I></SPAN>

<tex2html_verbatim_mark> <!-- MATH
 $(3 < N < 21)$
 -->
<SPAN CLASS="MATH">(3 &lt; <I>N</I> &lt; 21)</SPAN>
<tex2html_verbatim_mark> and the number of total moves, <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(4 < M < 250)$
 -->
<SPAN CLASS="MATH">(4 &lt; <I>M</I> &lt; 250)</SPAN>

<tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> odd, so Black will always be the last player. The dataset ends with one or more lines each containing two or more coordinate pairs, with a total of <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> coordinate pairs. All numbers on any line will be separated by blanks. All data will be legal. There will never be a winning move before the last move. 

<P>



*******OutputConstraints*******

<p>The output contains one line for each data set: `<TT>yes</TT>' if the last move is a winning move and `<TT>no</TT>' otherwise.


<P>



*******IOTestCases*******


<pre>
<b>Input:</b>
4 5 
0 2 2 4 4 2 3 2 2 3
4 5 
0 2 2 4 4 2 3 2 2 1 
7 11 
0 3 6 5 3 2 5 7 7 2 4 4 
5 3 5 2 4 5 4 0 2 4 
0 0


<b>Output:</b>
no 
yes 
yes

</pre>



______________________________________________________
SUMSQ||||||true||||||


<p>We are interested in how many different sequences of N non negative integers there are that have the sum of their squares less than S. Note that the squence (1, 2)
is different from the sequence (2, 1).


*******InputConstraints*******

<p>The input consists of only one line with two integers N (0 < N < 30) and S ( S < 100 ).


*******OutputConstraints*******

<p>A single integer representing the number of different sequences that have the sum of their squares less than S.


*******IOTestCases*******


<pre>
<b>Input:</b>
1 4

<b>Output:</b>
2
</pre>



______________________________________________________
FASTW||||||true||||||


<p>When you want to get quick to some place in the city you don't often look for the shortest distance to there. Sometimes what is important is how width the street is. We will say that a route in the city had width is the width of the smallest street you will have to pass through. Now you are give the city network of streets and intersections and the width of each street and you are asked to provide the width of the widest path between intersection with number 1 and intersection with number N.



*******InputConstraints*******

<p>On the first line of the input you will find two integers N (2 &lt; N &lt; 10000) the number of intersections in the city and M (1 &lt; M &lt; 100000) the number of streets in the city. On each of the next M lines you will get information about one street in the form of 3 integers I, J, W (1 &lt; W &lt; 65000) which will mean that intersections I and J are connected via street with width W. 


*******OutputConstraints*******

<p>A single integer representing the width of the path between 1 and N with maximum width. If no path exists between 1 and N output 0


*******IOTestCases*******


<pre>
<b>Input:</b>
5 6
1 2 1
1 3 3
1 4 9
2 5 10
3 5 4
4 5 2

<b>Output:</b>
3
</pre>



______________________________________________________
BOIFAC||||||true||||||


<p>For a positive integer number N, find all positive integer numbers X (if any such number exists) with the property that the number 1*2*3*...*X has exactly N decimal digits. Assume that N is at most 150,000.


*******InputConstraints*******

<p>A single line which contains a positive integer number denoting the number N.


*******OutputConstraints*******

<p>The first line should contain the string "NO", if such a number does not exist. Otherwise, the first line should contain a positive integer denoting how many X numbers exist. Then print all the X numbers, one number per line.


*******IOTestCases*******


<pre>
<b>Input:</b>
5

<b>Output:</b>
1
8
</pre>



______________________________________________________
BOI97TE||||||true||||||


<p>Assume that we have a number of tasks that must be executed. However, the tasks are not independent to each other. We say that task 2 depends on task 1, if the execution of task2 can start after the completion of task 1. However, we may find tasks that at any given time can be executed in parallel, saving time. Given a number of tasks and their dependencies, determine the shortest time that all tasks can be executed in a computer with an infinite number of processors. Then, you are requested to determine the minimum number of processors in order to execute the tasks in the (previously found) shortest time. Each task takes 1 time unit of execution. The tasks are represented by positive integers from 1 to N (N&lt;=200).</p>

*******InputConstraints*******

<p>The first line contains a positive integer number N denoting the number of tasks to be executed in the computer, and another positive integer number M, denoting the number of dependencies. The next M lines until the end of the input file, contain the dependencies between the tasks. For example, when the input line, which corresponds to a dependency, contains the string "2 3", this means that in order to start the execution of task 3, task 2 must be completed first. Data is always correct and there is always a solution.</p>

*******OutputConstraints*******

<p>Output will consist only one line, which contains two positive integer numbers, separated by space character. The first number T denotes the minimum number of time units that we need in order to execute all tasks, assuming an infinite number of processors. The second number denotes the minimum number of processors we can use in order to execute the tasks in T time units.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

6 6
1 4
2 5
3 6
4 6
4 5
5 6

<strong>Output:</strong>

4 2
</pre>


______________________________________________________
TAMCAM||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/TAMCAM/en/">English</a></td>
<td width="50%"><a href="/problems/TAMCAM/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<table border="0">
<tbody>
<tr>
<td><img src="http://www.spoj.pl../../../VO09/content/Tamcam.jpg" alt="" /></td>
<td valign="top">
<p>This problem is based on <a href="http://en.wikipedia.org/wiki/The_Story_of_Tam_and_Cam">the story of Tam and Cam</a>, a well-known Vietnamese fairy tale.</p>
<p>One day, Cam put some rice grains and some paddy grains into the cells of a rectangular table of size mxn. There is at most one grain in each cell. Cam asked Tam to take the minimum number of grains from the table so that in each row and each column of the table, the number of rice grains is the same as the number of paddy grains.</p>
<p>Could you help Tam to do the task?</p>
</td>
</tr>
</tbody>
</table>

*******InputConstraints*******

<ul>
<li>The first line contains two positive integers m,n &le; 100 separated by a space.</li>
<li>The ith line in the next m lines contains n characters. The jth character could be "G", "T", or "." depending on whether the corresponding cell contains a rice grain, a paddy grain, or is empty.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The first line contains the minimum number of grains that should be taken from the table.</li>
<li>The ith line in the next m lines contains n characters. The jth character could be "G", "T", or "." depending on whether there remains a rice grain, a paddy grain, or nothing in the corresponding cell.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input</strong>
4 5
GT.GG
GGTGT
TTGTG
GTGT.	

<strong>Output</strong>
6
.T.G.
.GTGT
T.GTG
G..T.
</pre>
<p> </p>


______________________________________________________
BOI97SN||||||true||||||


<p> The street network of a city is composed of streets and nodes. In a node, two or more streets can meet. All streets are one-way streets. Note also that, two nodes can be connected directly by more than one street, and one node can have a street that loops back to itself. Write a computer program in order to address the following issues:

1. Is it possible to start from at least one node A and visit ALL streets exactly once ?

2. How many nodes can serve as starting points in order to satisfy the property of the previous case ?

3. For each node X, how many paths of length S exist starting from X and ending to X, where any street or node can be visited more than once ?


*******InputConstraints*******

<p>In the first line in the input is a positive integer number N (N<=50), denoting the number of nodes in the city street network. The second line contains a positive integer number S (S<=3) denoting the path length. The next N lines contain the network description in matrix form. More precisely, the element in row I and column J is the number of streets from node I to node J.


*******OutputConstraints*******

<p>The first line contains the string "YES" if you can start from a node, travel through all streets exactly once, and arrive either at the starting point, or at another node. Otherwise, the string "NO" should appear in the output. If the answer is "YES", the next line of the output file should contain a positive integer number denoting how many nodes can serve as starting points. Finally, the last line of the output file should contain N positive integers (separated by a space) that show for each node how many different paths with length S exist such that each path leads from the node back to itself. These numbers should be sorted in increasing order.


*******IOTestCases*******


<pre>
<b>Input 1:</b>
3
2
1 1 0
1 1 1
0 1 1


<b>Output:</b>
YES
3
2 2 3

<b>Input 2:</b>
3
2
1 1 0
1 1 2
0 0 1


<b>Output:</b>
NO
1 2 2
</pre>



______________________________________________________
MDIGITS2||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MDIGITS2/en/">English</a></td> 
<td width="50%"><a href="/problems/MDIGITS2/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
A sequence of digits is obtained by writing down decimal representations of all integers starting with 1 
and continuing up to a certain number N consecutively like this: </p><p>
12345678910111213141516171819202122 ...  </p><p>etc. 
Write a program that will compute the position of the first occurrence of the decimal representation 
of number N in the sequence. 
 
</p><p>

______________________________________________________
HCN3D||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/HCN3D/en/">English</a></td>
<td width="50%"><a href="/problems/HCN3D/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>How great is our God! To show the respect for God, Bethlehem people decide to build a large area for memorial called "The God-land". There's a story that God used to visit N areas which is rectangles having edges paralell to the axises, described by the co-ordinate of a pair of opposite vertices: X<sub>i1</sub>, Y<sub>i1</sub>, X<sub>i2</sub>, Y<sub>i2</sub> (any two of them may have no common point, one common vertex or one common edge at most); on which of them there is a kind of grass called C<sub>i</sub>. People there want to build the God-land which is also a rectangle having edges parallel to the axises, putting on area(s) mentioned above, having a same kind of grass and <strong>having the maximum area</strong>! Help them to find the God-land before this Christmas!</p>

______________________________________________________
HOMELESS||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/HOMELESS/en/">English</a></td> 
<td width="50%"><a href="/problems/HOMELESS/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Homeless Jozo bought a monthly railway ticket so he could sleep in worm wagons and dream of a 
better life. </p><p>
You are given a list of all stations and railways that connect them and their length (times it takes train to 
travel between to given stations). Railways are two-way and traveling in both ways last the same. </p><p>
You are also given a list of all trains and the times of their departures and stations they are passing 
throw. Train stops at each station that it is passing throw. </p><p>
At the beginning (in 1st
 second) Jozo is on the station number 1 and he has to  return at that same 
station between T1 and T2 second. If there are two trains in the same time at the same station, he can 
jump from one train to another without losing time. 
You have to write a program that will choose a route such that Jozo can drive around and  spend 
minimum total amount of time at the stations. </p><p>
 
</p><p>

______________________________________________________
HWAYADS||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/HWAYADS/en/">English</a></td>
<td width="50%"><a href="/problems/HWAYADS/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>After several years of preparing, Vietnam has been chosen to organize the IOI2023, it's such a big even with Vietnamese fans of informatics! The host country wants to invite all guests to visit N famous places (numbered 0..N-1). Of course the journey will start from the capital Hanoi (numbered 0). And after many years of developing, the travel system has been so modern that it needs only exactly N-1 highways for guests to travel to all N places from the capital. It's not only that but Ministry of Culture and Information also has an idea to paint some slogans on the highways to advertise Vietnam and the IOI competition. KTuan wants to watch the competition so he came back to Vietnam early. On the days in Hanoi, KTuan met AnhDQ (an old friend) by chance. Hearing that exciting idea, KTuan has a slogan in his mind and wants to ask AnhDQ: <strong>how many times it appears on the way from Hanoi to the places?</strong>. Please help AnhDQ answer KTuan's question!</p>

*******InputConstraints*******

<p>- The first line contains N.<br /> - N-1 following lines, each line contains two number u, v and the string S, showing a highway from u to v, on which is painted the string S directed u-&gt;v.<br /> - The last line contains KTuan's slogan.</p>

*******OutputConstraints*******

<p>- The answer of AnhDQ.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />11<br />0 2 Welcom<br />0 7 VietN<br />2 8 nauTK<br />7 3 am<br />7 9 nauTK<br />2 5 eKTuan<br />5 4 IOIKTuanIO<br />7 1 IOI<br />5 6 IOI23<br />4 10 I2023<br />KTuanIOI<br /><br /><strong>Output:</strong><br />3<br /><br />*** Explaination:<br />On the way 0-2-5-6: Welcome<strong>KTuanIOI</strong>23<br />On the way 0-2-5-4-10: Welcome<strong>KTuanIOIKTuanIOI</strong>2023<br /></pre>
<p><img src="http://www.spoj.pl../../../content/anhdq:hwayads_sample_test_1.jpg" alt="" /></p>

______________________________________________________
MASKTAPE||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MASKTAPE/en/">English</a></td>
<td width="50%"><a href="/problems/MASKTAPE/vn/">Ti&#7871;ng Vi&#7879;t</a></td> 
</tr></table>

<p>You are a publicity agent of the JCIOI. You are ordered to make a signboard to publicize the IOI. The signboard made by painting a rectangle plywood board. The plywood board is bound with some rectangle masking tapes is in advance. So, You decide that you paint each region which is bounded by the masking tapes with different colors.
<br/>For example, &#64257;ve colors are necessary and enough to paint the plywood of Fig 5-1.
<p><center><img src="http://www.spoj.plhttp://www.spoj.pl/content/anhdq:masktape_samp_test_11.jpg"></center></p>
<p>Write a program which, given a situation of a plywood, determine the minimum number of colors to be able to paint the input plywood with. Here, it is impossible that the entire surface of the plywood is covered by masking tapes, and every side of masking tapes is parallel to one of a side of the plywood.</p>


______________________________________________________
MKOKOS||||||false||||||

<p>   </p>
<table style="width: 100%; background-color: #34ca55;" border="1" align="center">
<tbody>
<tr>
<td style="text-align: center;" width="50%"><a href="/problems/MKOKOS/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MKOKOS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>&nbsp;</p>
<p>A set of N words is given with the length of each word being exactly 2K characters. <br />A directed graph with each vertex containing a single letter is called a "kokos" if, for each word in the set, there exists a directed path in the graph such that the labels on the vertices along that path form the word. Additionally, for all vertices on that path the following conditions have to be satisfied:</p>
<p><br />&middot;&nbsp; the in-degree of the first vertex is 0 <br />&middot;&nbsp; the in-degrees of the next K-1 vertices is 1 <br />&middot;&nbsp; the out-degrees of the next K-1 vertices is 1 <br />&middot;&nbsp; the out-degree of the last vertex is 0</p>
<p>In other words, paths can fork only on the first K letters, and they can meet only on the last K letters. For the given set of the words, we say that the "kokos" is minimal if the total number of vertices is as small as possible.</p>
<p>Write a program that will find the number of vertices in a minimal kokos. <br />&nbsp;<br />An example of a minimal kokos (the set of the words is from the third example):</p>
<p><img src="http://www.spoj.plhttp://i42.tinypic.com/20rqu5s.jpg" alt="" width="549" height="219" /></p>
<p>It may seem that we can compact the graph like this:</p>
<p><img src="http://www.spoj.plhttp://i43.tinypic.com/2dhwb39.jpg" alt="" width="545" height="224" /></p>
<p>However, this graph is not a kokos because paths meet on the 4th&nbsp; letter (D), and they fork on the 6th&nbsp;&nbsp;letter (E).</p>

______________________________________________________
TOPALIN||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/TOPALIN/en/">English</a></td>
<td width="50%"><a href="/problems/TOPALIN/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>You are given a string and are allowed to perform some operators on this string. In each operator, you can change <strong>all</strong> characters of a type to another type. The cost of an operator is the number of characters affected. The cost of several operators is the total cost of each individual operator.</p>
<p>For example, the string <em>acaabc</em> will become <em>abaabb</em>if you change all <em>c</em>'s to <em>b</em>'s. The cost of this operator is 2 since there are 2 <em>c</em>'s in the first string.</p>
<p>What is the minimum cost to make the given string a <strong>palindrome</strong>?</p>

*******InputConstraints*******

<ul>
<li>The original string is given in the first line.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The minimum cost to make the string a palindrome.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>acaabc<br /><br /><br /><strong>Output:</strong></pre>
<pre>3</pre>

______________________________________________________
TOINCSEQ||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/TOINCSEQ/en/">English</a></td>
<td width="50%"><a href="/problems/TOINCSEQ/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>You are given a sequence of <strong>non-negative</strong> integers a<sub>1</sub>, a<sub>2</sub>, &hellip;, a<sub>n</sub>. You are allowed to perform some operators on the sequence. Each operator consists of 2 steps: choosing an arbitrary value, then increasing (or decreasing) <strong>all</strong> elements of the selected value in the current sequence by 1.</p>
<p>For example, the sequence <em>1 9 9 2 2</em> will become <em>1 9 9 3 3</em> if you decide to increase all elements of value 2.</p>
<p>What is the minimum number of operators does it take to make the given sequence a <strong>non-decreasing sequence</strong>?</p>

*******InputConstraints*******

<ul>
<li>The first line consits of an integer N, the number of elements in the sequence.</li>
<li>The second line consists of N elements of the sequence.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The mininum number of operators needed to make the sequence non-decreasing.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>5<br /><br />1 9 9 2 2<br /><br /><br /><strong>Output:</strong></pre>
<pre>7</pre>

______________________________________________________
SELFDIV||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/SELFDIV/en/">English</a></td>
<td width="50%"><a href="/problems/SELFDIV/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Do you think that 324 is a special number? It is divisible by 3, 2 and 4. A non-negative integer that is divisible by all of its digits is called a <strong>self-divisible number</strong>.</p>
<p>Other examples of <strong>self-divisible numbers</strong> are 5, 12, 784, 8736. Please note that 102 is not a <strong>self-divisible number</strong> as it is not divisible by 0.</p>
<p>How many <strong>self-divisible numbers</strong> which have exactly <strong>N</strong> digits? As the result may be very large, you only need to print the result modulo <strong>10007</strong>.</p>

*******InputConstraints*******

<ul>
<li>A single line consists of an integer <strong>N</strong>.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The result modulo <strong>10007</strong>.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>3<br /><br /><br /><strong>Output:</strong></pre>
<pre>56</pre>

______________________________________________________
NSC||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/NSC/en/">English</a></td>
<td width="50%"><a href="/problems/NSC/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Â </p>
<p><img style="float: right; margin-left: 10px; margin-right: 10px;" title="K&#7865;o! Ngon ngon! :x" src="../../../../content/candies.jpg" alt="Candies" width="320" height="256" /></p>
<p>Mid-Fall Festival is coming, Nuga has bought a lot of candies for her sisters and brothers. Nuga has M candies in total, and she wants to give <strong>all of them</strong> to N children. We number the children from 1 to N.</p>
<p>Nuga knows that the i-th child is happy only if he or she get at least A<sub>i</sub> candies. However one&#8217;s parents don&#8217;t want their child to eat more than B<sub>i</sub> candies (to avoid dental caries). So, Nuga has to give the i-th child X<sub>i</sub> candies that satisfies A<sub>i</sub> &#8804; X<sub>i</sub> &#8804; B<sub>Â­i</sub>.</p>
<p>Please help Nuga to calculate how many ways that she can divides M candies among N children and satisfy all conditions.</p>

*******InputConstraints*******

<p>- The first line contains 2 integers M, N.</p>
<p>- The second line contains N integers A<sub>1</sub>, A<sub>2</sub>, &#8230;, A<sub>n</sub>.</p>
<p>- The third line contains N integers B<sub>1</sub>, B<sub>2</sub>, &#8230;, B<sub>n</sub>.Â </p>

*******OutputConstraints*******

<p>One line contains the number of satisfied ways.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />6 3<br />0 0 0<br />3 2 4<br /><br /><strong>Output:</strong><br />9</pre>
<p> </p>
<p>Â </p>


______________________________________________________
CLEAR||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/CLEAR/en/">English</a></td>
<td width="50%"><a href="/problems/CLEAR/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Bom has just found a definition of <strong>clear numbers</strong> as the following: for each positive integer n, we form another number by summing the squares of the digits of n. We repeat this procedure. If at some step, we obtain the number 1 then n is called a <strong>clear number</strong>. For example, for n=19, we have:</p>
<p>19 &rarr; 82 (= 1<sup>2</sup> +9<sup>2</sup>) &rarr; 68 &rarr; 100 &rarr; 1</p>
<p>Thus, 19 is a clear number.</p>
<p>Not all numbers are clear numbers. For example, for n=12, we have:</p>
<p>12 &rarr; 5 &rarr; 25 &rarr; 29 &rarr; 85 &rarr; 89 &rarr; 145 &rarr; 42 &rarr; 20 &rarr; 4 &rarr; 16 &rarr; 37 &rarr; 58 &rarr; 89 &rarr; 145</p>
<p>Bom is very interested in this definition of clear numbers. He issued a challenge to the landlord: given a positive integer n, find S(n), the clear number succeeding n, i.e. S(n) is the minimum clear number greater than n. However, this question is so easy for the landlord that he challenged Bom with another problem: given two positive integers n and m (1 &le; n, m &le; 10<sup>15</sup>), find the number S<sup>m</sup>(n)=S(S(&hellip;S(n) )) which is the m<sup>th</sup> clear number succeeding n.</p>
<p>Please help Bom to solve the task!</p>

*******InputConstraints*******

<p>The first line contains t (0 &lt; t &le; 20) , the number of test cases.</p>
<p>Each line in the next t lines contains two positive integers n and m.</p>

*******OutputConstraints*******

<p>Print t lines, each line contains the result of the corresponding test case.</p>

*******IOTestCases*******

<pre><strong>Input</strong>
2
18 1
1 145674807	

<strong>Output</strong>
19
1000000000
</pre>

______________________________________________________
MARBLE||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MARBLE/en/">English</a></td>
<td width="50%"><a href="/problems/MARBLE/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>ktuan usually plays a marble game in a square table of NxN cells. The game proceeds as the following:</p>
<ul>
<li>Initially, ktuan puts K obstacles into K cells of the table.</li>
<li>After that, ktuan makes Q turns. At the i<sup>th</sup> turn, ktuan flicks D<sub>i</sub> marbles from the outside of the board into one of the 4 sides of the board. The size of each marble fits perfectly into one cell.&nbsp; The marble goes through the cells in the same row/column until it goes out of the board or it meets an obstacle or another marble. If there is an obstacle or another marble at the first position then the marble will not be placed on the board.</li>
<li>After each turn, ktuan records the total number of cells that the marbles in that turn passing through.</li>
</ul>
<p>Write a program that simulates the game and for each turn, print the total number of cells that the marbles in that turn passing through.</p>

*******InputConstraints*******

<ul>
<li>The first line contains three integers N, K, Q.</li>
<li>Each line in the next K lines contains a pair (u, v) representing the coordinates (row, column) of an obstacle.</li>
<li>Each line in the next Q lines contains 4 values c, D, u, v. The character c could be 'L', 'R', 'T', or 'B' depending on whether the marbles go from the left, right, top, or bottom of the board. (u, v) represents the initial coordinates of the marbles and it should be a boundary cell (corresponding to c). D is the number of marbles in the current turn.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>For each turn, print the total number of cells that the marbles passing through.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input</strong> <br />5 1 3<br />3 3<br />L 2 3 1<br />T 1 1 1<br />B 5 5 5<br /><br /><strong>Output</strong><br />3<br />2<br />25</pre>

______________________________________________________
BLAND||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/BLAND/en/">English</a></td>
<td width="50%"><a href="/problems/BLAND/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>The landlord has a rectangular land divided into a grid of M rows and N columns. The rows are numbered from the top to the bottom starting from 1, and the columns are numbered from the left to the right starting from 1. The intersection between the i<sup>th</sup> row and the j<sup>th</sup> column (i=1..M,j=1..N) has a height of h<sub>ij</sub>. The landlord has offered to exchange his land for Bom's magic fan. Here's the condition of the offer:</p>
<ul>
<li>Bom can pick two sub-pieces of land (one for housing and one for gardening). Both pieces should have rectangular shape and contain a whole number of cells.</li>
<li>Each piece should have its height difference not exceeding K, i.e. the difference between its highest cell and its lowest cell does not exceed k. </li>
<li>The two pieces should not overlap each other (though they can be in contact).</li>
<li>Please help Bom to pick the two pieces of land satisfying the above conditions and have the largest sum of areas. </li>
</ul>

*******InputConstraints*******

<ul>
<li>The first line contains three integers M, N and K (M,N&#8804;300).</li>
<li>Each line in the next M lines contains N integers h<sub>ij</sub> describing the land.(K,|h<sub>ij</sub>|&lt;10<sup>9</sup>)</li>
</ul>

*******OutputConstraints*******

<p>A single number that is the largest possible sum of areas of Bom's two pieces of land.</p>

*******IOTestCases*******

<pre><strong>Input</strong><br />3 4 0<br />1 2 3 1<br />1 9 9 1<br />2 2 2 2	<br /><br /><strong>Output</strong><br />6<br /></pre>
<p>Note: There are 50% test cases in which m,n&#8804;50.</p>
<p> </p>


______________________________________________________
WINNER||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/WINNER/en/">English</a></td>
<td width="50%"><a href="/problems/WINNER/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Having nothing to do, Bom and Cuoi invented a game as the following: there are N heaps of stones; the i<sup>th</sup> heap contains a<sub>i</sub> stones. Bom and Cuoi alternatively takes turn to play. Who has his turn may pick any heap of stones and remove some stones from that heap. The number of removed stones must be a <strong>divisor</strong> of the number of stones in that heap.</p>
<p>Who removes the last stone is the winner. Bom takes his move first.</p>
<p>Given the initial number of stones in each heap, could you write a program to tell who is the winner in this game (if both players play optimally)?</p>

*******InputConstraints*******

<p>The first line contains N, the number of heaps.</p>
<p>The second line contains N positive integers separated by spaces described the number of stones in the heaps.</p>

*******OutputConstraints*******

<p>In the first line, print either the string "Bom" or "Cuoi" depending on whether Bom or Cuoi will win the game.</p>
<p>In case Bom can win, print two numbers "x a" in the second line meaning that, in order to win the game, Bom needs to remove <em>x</em> stones from a heap that currently has <em>a</em> stones. In case there are more than one winning moves, find the winning move that has the largest x. If there is still ambiguity, among the winning moves that have the largest x, find the winning move that has the largest a.</p>

*******IOTestCases*******

<pre><strong>Input</strong><br />3<br />1 2 3 <br /><br /><strong>Output</strong><br />Bom<br />2 2<br /></pre>
<p>Output details: After Bom removes completely the heap of 2 stones, there remain two heaps of 1 and 3 stones. If Cuoi removes completely one of the two heaps, Bom will remove the remaining heap and win the game. If Cuoi takes one stone from the heap of 3 stones, Bom will take one more stone from that same heap. There remain two heaps, each heap has two stones and Bom will be sure of a win.</p>
<p> </p>


______________________________________________________
BINPAL||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/BINPAL/en/">English</a></td>
<td width="50%"><a href="/problems/BINPAL/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>The VNOI King is very interested in computer science and arts. He is especially interested in the binary palindrome strings. A binary palindrome string is a string of only two characters 0, 1 and can be read the same way in either direction.</p>
<p>In the King's 101<sup>th</sup> birthday, he announced a list of K binary strings for his courtiers. He then issued a question: how many binary strings are there that satisfies both the following two conditions:</p>
<ul>
<li>It is a binary palindrome string of exactly N characters.</li>
<li>It does not contain two non-overlapped substrings in the given list of K binary strings.</li>
</ul>
<p>For example, if the King's list consists of two binary strings 101 and 1001, two binary strings that do not satisfy the second condition are: <strong>1011001</strong> (containing two strings 101 and 1001), <strong>101</strong>0<strong>101</strong> (the two substrings can be the same). Two binary strings that satisfy the second condition are: 1001001 (two substrings 1001 are overlapped), 1010011.</p>
<p>Please help the courtiers answer the King's question!</p>

*******InputConstraints*******

<ul>
<li>The first line contains two integers N and K.</li>
<li>Each line in the next K lines contains a binary string in the King's list of binary strings.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The number of binary strings satisfying the above two conditions. You only need to print the remainder of the result when dividing by <strong>1000000007</strong>.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>5 1<br />0<br /><br /><br /><strong>Output:</strong></pre>
<pre>2</pre>

______________________________________________________
SMAX||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/SMAX/en/">English</a></td>
<td width="50%"><a href="/problems/SMAX/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Given a convex polygon of N vertices. The vertices are numbered from 1 to N. Your task is to pick K vertices among these N vertices so that they form a polygon having the maximum possible area.</p>

*******InputConstraints*******

<ul>
<li>The first line contains two integers N and K (3 &le; K &le; N &le; 200).</li>
<li>The u<sup>th</sup> line in the next N lines contains two integers X<sub>u</sub> and Y<sub>u</sub> which are the coordinates of the u<sup>th</sup> vertex. The vertices are given in clockwise order. The absolute values of all the coordinates do not exceed 10<sup>5</sup>.</li>
</ul>

*******OutputConstraints*******

<ul>
<li>The first line should contain the maximum area of a K-vertices polygon (rounding up to 2 decimal places).</li>
<li>The second line contains an increasing sequence of K numbers which are the indexes of the chosen vertices.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input</strong><br />4 3<br />1 2<br />3 1<br />2 0<br />1 1<br /><br /><strong>Output</strong><br />1.50<br />1 2 3<br /></pre>
<p> </p>


______________________________________________________
BRHQUADR||||||true||||||


<p>Butch needs help with checking his math homework. He is studying quadratic equations, which are in the form</p>
<p style="text-align: center;">y = ax<sup>2</sup>+bx+c</p>
<p style="text-align: left;">He wants to give you a, b, c, and x (1 &le; a, b, c, x &le; 10), and asks you to find y.</p>

*******InputConstraints*******

<p>Line 1: Three space-separated integers, a, b, and c.<br />Line 2: A single integer, x.</p>

*******OutputConstraints*******

<p>Line 1: A single integer, y</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 5 3<br />-4<br /><br /><strong>Output:</strong>
15</pre>


______________________________________________________
SBRICKS||||||false||||||

<!--HEVEA command line is: /usr/bin/hevea -v -O -fix Bricks.tex --> <!--CUT DEF section 1 --><!--TOC section Problem statement-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc1"></a>Problem statement</h2>
<!--SEC END -->
<p>You are given a sequence of <em>n</em> (<em>n</em> &lt; 100) integers. Each number denotes the height of a stack of bricks. If we put the stacks in a line as in the illustration below, we would see stacks of uneven heights. Suppose a &ldquo;move&rdquo; is made by picking up one brick from one stack and putting it on another, compute the minimum number of moves to rearrange the bricks such that all stacks have the same height.</p>
<div class="center"><img src="http://www.spoj.pl../../../content/melvin:bricks.png" alt="" /></div>
<p>Read the input from standard input. The first line of the input is the integer <em>n</em>, followed by <em>n</em> lines of integers denoting the height of the <em>n</em> stacks. The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height. Your output to standard output should consist of exactly one integer denoting the minimum number of moves.</p>
<!--TOC section Sample input-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc2"></a>Sample input</h2>
<!--SEC END -->
<pre class="verbatim">6<br />5<br />2<br />4<br />1<br />7<br />5<br /></pre>
<!--TOC section Sample output-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc3"></a>Sample output</h2>
<!--SEC END -->
<p><code>5</code></p>
<!--CUT END -->


______________________________________________________
SBRICKS2||||||false||||||

<!--HEVEA command line is: /usr/bin/hevea -v -O -fix Bricks2.tex --> <!--CUT DEF section 1 --><!--TOC section Summary-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc1"></a>Summary</h2>
<!--SEC END -->
<p>This is similar to &ldquo;Stacks of Bricks&rdquo; except that for each move you are only allowed to move a brick to a stack on its immediate left or right.</p>
<!--TOC section Problem statement-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc2"></a>Problem statement</h2>
<!--SEC END -->
<p>You are given a sequence of <em>n</em> (<em>n</em> &lt; 100) integers. Each number denotes the height of a stack of bricks. If we put the stacks in a line as in the illustration below, we would see stacks of uneven heights. Suppose a &ldquo;move&rdquo; is made by picking up one brick from one stack and putting it on <em>stack to its immediate left or right</em>, compute the minimum number of moves to rearrange the bricks such that all stacks have the same height.</p>
<div class="center"><img src="http://www.spoj.pl../../../content/melvin:bricks.png" alt="" /></div>
<p>Read the input from standard input. The first line of the input is the integer <em>n</em>, followed by <em>n</em> lines of integers denoting the height of the <em>n</em> stacks. The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height. Your output to standard output should consist of exactly one integer denoting the minimum number of moves.</p>
<!--TOC section Sample input-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc3"></a>Sample input</h2>
<!--SEC END -->
<pre class="verbatim">6
5
2
4
1
7
5
</pre>
<!--TOC section Sample output-->
<h2 class="section"><!--SEC ANCHOR --><a name="htoc4"></a>Sample output</h2>
<!--SEC END -->
<p><code>8</code></p>
<!--CUT END -->


______________________________________________________
BRHAR||||||true||||||


<p>Oh no, Butch still needs to finish his AR book! (Yes, upperclassmen, laugh at him.) He procrastinated so much, in fact, that he's not sure if he'll finish in time for the end of the day. He'd calculate it himself, but if he can, he'll probably need every minute he can get. Assuming Butch reads P (0 &le; P &le; 100) pages per minute, has L (0 &le; L &le; 1000) pages left, and has M (0 &le; M &le; 30) minutes to finish, please help us to determine if Butch can finish.</p>

*******InputConstraints*******

<p>Line 1: 3 space-separated integers, P, L, and M.</p>

*******OutputConstraints*******

<p>Line 1: 'yes' if he can finish, or 'no' if he can't.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2 30 10<br /><br /><strong>Output:</strong><br />no</pre>


______________________________________________________
BRHPHYS||||||true||||||


<p>Butch is afraid that he didn't do so well on his last Physics test. (Isn't it good enough that a bulldog can add and subtract numbers? Why does Mrs. Parker ask him to add and subtract vectors as well?)<br /><br />He would like to know what letter grade he has right now, but he is too depressed about the test to do it himself. <br /><br />Given N (0 &lt; N &le; 10) grades, each with a possible amount of points, Pi (0 &le; Pi &le; 200) and a score Si (0 &le; Si &le; Pi), find out what grade he would have if Ms. Parker truncates. The grading scale is as follows:<br /><br />90 - 100 = A<br />80 - 89 = B<br />70 - 79 = C<br />60 - 69 = D<br />0 - 59 = F (Heaven forbid!)<br /><br />(Note that the total points will always be more than 0)</p>

*******InputConstraints*******

<p>Line 1: A single integer, N<br />Lines 2..N+1: Two space separated integers, Pi and Si</p>

*******OutputConstraints*******

<p>Line 1: A single upper-case character representing the grade he got.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />100 89<br />75 75<br />100 72<br /><br /><strong>Output:</strong>
B</pre>


______________________________________________________
BRHWURD||||||true||||||


<p>Butch has a favorite word W (1 &le; length &le; 10), and a bucket of letters. He has L (1 &le; L &le; 26) different letters, and Ci (1 &le; Ci &le; 5) of each. <br /><br />He wants you to count how many ways he can make this word with the buckets.</p>
<p>If Butch tells you that he has a certain amount of a letter, he won't list the letter again.</p>
<p>The number of ways would be how many of letter 1 times how many of letter 2 times how many of letter 3...<br /><br />Remember that if a letter isn't listed, then he has 0 of those letters in his bucket.</p>

*******InputConstraints*******

<p>Line 1: A single integer, L<br />Line 2: A line of text (not necessarily a real word), between 1 and 10 letters long, all lowercase.<br />Lines 3..L+2: A lowercase letter, and Ci, space separated.</p>

*******OutputConstraints*******

<p>Line 1: A single integer, the number of ways he can make the word.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />6<br />dog<br />a 4<br />d 3<br />g 5<br />l 2<br />o 3<br />m 4<br /><br /><strong>Output:</strong><br />45</pre>


______________________________________________________
BRHMAIL||||||true||||||


<p>Butch is fascinated by how fast chain emails have the possibility to spread. (In case you are completely out-dated, a chain email is an email that one person send to all of his/her friends, who each then send to all of their friends, etc...)<br /><br />He wants to find out how many times a certain letter will be received. Assume that no person will "receive" it more than once (though we all know how that goes). <br /><br />For the sake of this investigation, Butch has conveniently named N (1 &le; N &le; 10) different people with the numbers 1..N. Each of these N people have Fi (0 &le; F &lt; N) friends within the group. <br /><br />Note that if person A is friends with person B, that means that person B is friends with person A. This is guaranteed to be explicitly stated in the data. Also, note that no person will ever be friends with themself (poor lonely people...). <br /><br />Assuming person 1 starts the chain (count that person 1 received it), determine how many people will receive this letter.</p>

*******InputConstraints*******

<p>Line 1: A single integer, N<br />Lines 2..N+1: One integer Fi, then Fi integers (each such that 1 &le; Fij &le; N), all space-separated, naming each of person i's friends.</p>

*******OutputConstraints*******

<p>Line 1: A single integer, the number of people who receive it. Be sure not to count a single person twice!</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />1 2<br />2 1 3<br />1 2<br />1 5<br />1 4<br /><br /><strong>Output:</strong>
3<br /><br /></pre>

______________________________________________________
BRHMUSIC||||||true||||||


<p>Butch is learning about the frequencies of musical notes, and he wants you to help him check whether he's calculated them correctly.<br /><br />A formula you can use to calculate frequences is<br /><br />f = 440 * 2<sup>N/12</sup><br /><br />Where N is the number of half-steps away from A4. (Note that if N is negative, that means it's half-steps to the left.)<br /><br />In case you aren't familiar with a piano, here's a sample:<br /><br />http://www.balaams-ass.com/octave01.jpg<br /><br />A half-step is the next note over; either a sharp (black note--denoted by the # symbol), if that note has one, or just the next note.<br /><br />Butch would like to give you a note, and have you calculate that note's frequency. Butch will only input sharps or regular notes (so no flats, for those musically talented competitors). The lowest note will be C0, and the highest will be D#8.<br /><br /><strong>For an extra challenge</strong>: Use a function to generically find the distance between any two notes--not just A4. This may be used to break ties.</p>

*******InputConstraints*******

<p>Line 1: String representing the note</p>

*******OutputConstraints*******

<p>Line 1: The frequency, TO 6 DECIMAL PLACES.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
C#5
<br /><strong>Output:</strong>
554.365261</pre>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;">Butch is learning about the frequencies of musical notes, and he wants you to help him check whether he's calculated them correctly.<br /><br />A formula you can use to calculate frequences is<br /><br />f = 440 * (2)^(N/12)<br /><br />Where N is the number of half-steps away from A4. (Note that if N is negative, that means it's half-steps to the left.)<br /><br />In case you aren't familiar with a piano, here's a sample:<br /><br />http://www.balaams-ass.com/octave01.jpg<br /><br />A half-step is the next note over; either a sharp (black note--denoted by the # symbol), if that note has one, or just the next note.<br /><br />Butch would like to give you a note, and have you calculate that note's frequency. Butch will only input sharps or regular notes (so no flats, for those musically talented competitors). The lowest note will be C0, and the highest will be D#8.<br /><br />For an extra challenge: Use a function to generically find the distance between any two notes--not just A4.</div>


______________________________________________________
SARRAY||||||true||||||


<p>Given a string of length at most 100,000 consist of alphabets and numbers. Output the suffix array of the string.</p>
<p>A <a href="http://en.wikipedia.org/wiki/Suffix_array">suffix array</a> is an array of integers giving the starting positions (0-based) of suffixes of a string in lexicographical order. Consider a string "abracadabra0AbRa4Cad14abra". The size of the suffix array is equal to the length of the string. Below is the list of 26 suffixes of the string along with its starting position sorted in lexicographical order:</p>
<pre><strong><span style="font-family: 'courier new', courier; font-size:12px">POS SUFFIX</span></strong><span style="font-family: 'courier new', courier; font-size:12px">
 11 0AbRa4Cad14abra
 20 14abra
 16 4Cad14abra
 21 4abra
 12 AbRa4Cad14abra
 17 Cad14abra
 14 Ra4Cad14abra
 25 a
 10 a0AbRa4Cad14abra
 15 a4Cad14abra
 22 abra
  7 abra0AbRa4Cad14abra
  0 abracadabra0AbRa4Cad14abra
  3 acadabra0AbRa4Cad14abra
 18 ad14abra
  5 adabra0AbRa4Cad14abra
 13 bRa4Cad14abra
 23 bra
  8 bra0AbRa4Cad14abra
  1 bracadabra0AbRa4Cad14abra
  4 cadabra0AbRa4Cad14abra
 19 d14abra
  6 dabra0AbRa4Cad14abra
 24 ra
  9 ra0AbRa4Cad14abra
  2 racadabra0AbRa4Cad14abra</span>
</pre>
<p><strong>Note</strong>: this is a partial score problem.<br /> O(n<sup>2</sup> log(n)) is expected to score about 20-30. (Naive sorting all suffixes)<br /> O(n log<sup>2</sup>(n)) is expected to score about 40. (OK for most programming contest problems)<br /> O(n log n) is expected to score about 60-70. (Use counting sort for small alphabet size)<br />O(n) without tweaks is expected to score about 80-90.<br />O(n) with tweaks is expected to score 100. (This is meant for fun only :)</p>

*******InputConstraints*******

<p>A single line containing the string.</p>

*******OutputConstraints*******

<p>The suffix array of the string.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
abracadabra0AbRa4Cad14abra

<strong>Output:</strong>
11
20
16
21
12
17
14
25
10
15
22
7
0
3
18
5
13
23
8
1
4
19
6
24
9
2
</pre>


______________________________________________________
VNINGAME||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/VNINGAME/en/">English</a></td>
<td width="50%"><a href="/problems/VNINGAME/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Johny and Margaret are playing &ldquo;pebbles&rdquo;. Initially there is a certain number of pebbles on a table, grouped in n piles. The piles are next to each other, forming a single row. The arrangement of stones satis&#64257;es an additional property that each pile consists of at least as many pebbles as the one to the left (with the obvious exception of the leftmost pile). The players alternately remove any number of pebbles from a single pile of their choice. They have to take care, though, not to make any pile smaller than the one left to it. In other words, the piles have to satisfy the initial property after the move as well. When one of the players cannot makeamove (i.e. before his move there are no more pebbles on thetable), he loses. Johny always starts, to compensate for Margaret &rsquo;s mastery in this game. <br /> In fact Margaret is so good that she always makes the best move, and wins the game whenever she has a chance. Therefore Johny asks your help &mdash; he would like to know if he stands a chance of beating Margaret with aparticular initial arrangement. Write a programme that determines answers to Johny &rsquo;s inquiries.</p>

*******InputConstraints*******

<ul>
<li>In the &#64257;rst line of the standard input there is a single integer u (0 &lt; u &lt; 11) denoting the number of initial pebble arrangements to analyse. The following 2u lines contain descriptions of these arrangements; each one takes exactly two lines. The &#64257;rst line of each description contains a single integer n, 0 &lt; n &lt; 1001 &mdash; the number of piles.</li>
<li>The second line of description holds n non-negative integers ai separated by single spaces and denoting the numbers of pebbles in successivepiles, left to right. These numbers satisfy the following inequality a1 &lt;= a2 &lt;= ... &lt;= an. The total number of pebbles in any arrangement does not exceed 10000. </li>
</ul>

*******OutputConstraints*******

<p>Precisely u lines should be printed out on the standard output. The i-th of these lines (for 1 &lt;= i &lt;= u) should hold the word TAK (yes in Polish),if Johny can win starting with the i-th initial arrangement given in the input, or the word NIE (no in Polish), if Johny is bound to lose that game, assuming optimal play of Margaret.</p>

*******IOTestCases*******

<pre> 
<strong>Input</strong> 
2
2
2 2
3
1 2 4
<strong>Output</strong> 
NIE
TAK
</pre>
<p> </p>


______________________________________________________
SIGSEGV||||||false||||||

<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr class="navigation">
<td><a href="/problems/SIGSEGV/polski/">Wersja polska</a></td>
<td><a href="/problems/SIGSEGV/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p style="text-align: center;">Your task is return SIGSEGV. Any other result will be changed into WA (Wrong Answer).</p>
<h3>No input</h3>
<h3>No output</h3>
<h3>No example</h3>
<h3>Score</h3>
<p style="text-align: center;">Score is Your source length.</p>
<p></p>


______________________________________________________
SCRAMBLE||||||false||||||

<p>&nbsp;</p>
<p>MOCK PE 2010</p>
<p>Question 2</p>
<p><em>(This question has been adapted from a CS1010e tutorial)</em></p>
<p><em>&nbsp;</em></p>
<p>A word is scrambled if, given a word, the first and last letters of the word remain unchanged while the rest of the letters may have their places interchanged.</p>
<p>In this question, we adopt cyclic-scrambling where each letter (except for the first and last) is shifted one place to the right with wrap-around. For example, the word &ldquo;programming&rdquo; when cycled once will produce &ldquo;pnrogrammig&rdquo;. Notice the letter &ldquo;n&rdquo; wraps-around to the second position. When cycled another time the word produced is &ldquo;pinrogrammg&rdquo;. Note that the first and last characters always maintain their place.</p>
<p>Write a program that takes in the number of cycles, n, followed by a sentence. The program then proceeds to cyclic-scramble each word in the sentence n times.</p>
<p>You may assume that the length of each word is strictly below 20 characters, and the length of each sentence (aka input) is strictly below 200 characters.</p>
<p>Your program should contain a function &lsquo;cycle&rsquo; that takes in arguments of two character strings str1, str2 and an integer value n that performs cycling for n times on str1 with the resulting word stored in str2.</p>
<p>void cycle(char str1[], char str2[], int n);</p>
<p>============================================</p>
<p>Sample 1 (Italicised words are the input, bolded words are the output):</p>
<p><em>1<br />According to a research at Cambridge University it does not matter in what order the letters in a word are the only important thing is that the first and last letter be in the right place</em><br /><strong>Anccordig to a rcesearh at Cgambride Utniversiy it deos not meattr in waht oerdr the lrettes in a wrod are the olny inmportat tnhig is taht the fsirt and lsat leettr be in the rhigt pclae</strong></p>
<p>============================================</p>
<p>Sample Input 2 (italicised words are the input, bolded words are the output):</p>
<p><em>3<br />According to a research at Cambridge University it does not matter in what order the letters in a word are the only important thing is that the first and last letter be in the right place</em><br /><strong>Adinccorg to a rarceseh at Cidgambre Usitnivery it deos not mttear in waht order the lterets in a wrod are the olny itanmport thing is taht the first and lsat ltteer be in the right place</strong></p>
<p>============================================</p>


______________________________________________________
SPMAP||||||true||||||


<p>Yk is a archaeologist. When discovering the pyramids of Egypt, he found a treasure map which show the location of n secret islands, each island has only a kind of precious stone, with the weight m[i](kg) and the quantity s[i].</p>
<p>So he decided to buy a plane to look for the&nbsp; treasure. But he just hired a small plane which carrying the maximum of l(kg).</p>
<p>So he want to know how many ways to select the stones which fill the plane? (total of the weight of the stones is l).</p>

*******InputConstraints*******

<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The first line is two integer: l,n (l&lt;=20000 , n&lt;=500).</p>
<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Each of next n line is two integer: m[i],s[i] (m[i]&lt;=5000 , s[i]&lt;=100).</p>

*******OutputConstraints*******

<p>-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Only line is your answer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />10 3<br />4 7<br />4 5<br />2 5<br /><br /><strong>Output:</strong><br />6<br /><span style="text-decoration: underline;"><strong><br />Note:</strong></span> you must optimize your code to get AC, time limit will be 11s :)</pre>


______________________________________________________
DUGOVI||||||false||||||

<p>In a little town called KriÂ¾ live N people. Each of them has borrowed some money from exactly one
other inhabitant. Now the time has come to pay back all the debts, but the problem is that everybody 
has spent all of their money!  
<p>The major of KriÂ¾ has decided to solve this problem. The town will give money to a few people so that 
they can pay back their debts. When some people get their money back, a chain reaction is started . for 
example: person A gets money from the city. Person A uses that money to pay the debt toward person 
B. Person B then uses that money to pay the debt towards person C etc. If person B didn&#8217;t have 
enough money to pay back the debt, they wait until  they get enough. If they have more than enough 
money, person B will keep what is left after payback.  
Another example: if two people live in KriÂ¾, and they owe $100 to each other, the town will give $100 
to one of them so they can pay back the debt to the other one.  
<p>Your task is to calculate the minimum total amount of money the town has to give to some subset 
of the inhabitants so that after the payback protocol described above all debts are payed. 
<h3>INPUT </h3>
<p>First line of input contains one integer N (2 &#8804; N &#8804; 200 000), number of inhabitants of KriÂ¾. They are
numbered from 1 to N. 
<p>The following N lines contain two integers, separated by space. In i.th of those lines, first number . Ai
represents the id of the person  i.th person owes money to (1 &#8804;  Ai
 &#8804; N,  Ai
 &#8800;  i), and second  Bi
represents the ammount of the debt in $ (1 &#8804; Bi
 &#8804; 10 000). 
<h3>OUTPUT </h3>
<p>First and only line of output should contain one integer . the minimum total ammount of money town 
has to give to its inhabitants so all debts are returned. 
<h3>SAMPLE TESTS </h3>
<pre><b>input</b>
4
2 100 
1 100 
4 70 
3 70 

<b>output</b>
170 

<b>input</b>
3 
2 120 
3 50 
2 80

<b>output</b>
150

<b>input</b>
5 
3 30 
3 20 
4 100 
5 40 
3 60 

<b>output</b>
11
</pre>


______________________________________________________
INSULENG||||||true||||||


<p>Give N bricks and a sequence a<sub>1</sub>...a<sub>n</sub> as the insulation of them. If we arrange the bricks in that order into a wall then the insulation of the wall is a<sub>1</sub> + a<sub>2</sub> + ... + a<sub>N</sub> + max(0, a<sub>2</sub> - a<sub>1</sub>) + max(0, a<sub>3</sub> - a<sub>2</sub>) + ... + max(0, a<sub>N</sub> - a<sub>N</sub> - 1). Your task is to arrange the bricks so that the insulation of the wall is maximum.</p>

*******InputConstraints*******

<ul>
<li>The first line is N (1 &lt;= N &lt;= 10<sup>5</sup>).</li>
<li>In each of the next N lines, the i<sup>th</sup> line is a<sub>i-1</sub></li>
</ul>

*******OutputConstraints*******

<ul>
<li>The maximum insulation of the wall.</li>
</ul>

*******IOTestCases*******

<pre><strong>Input:<br /></strong>4<br />5<br />4<br />1<br />7


<strong>Output:<br /></strong>24<strong><br /></strong>

</pre>


______________________________________________________
SAMDRAW||||||false||||||

<p>Type a program to draw the following image</p>
<pre>   ____                  _     _ _           _ _ 
  / ___|  __ _ _ __ ___ | |__ (_) |_  __ _  / / |
  \___ \ / _` | '_ ` _ \| '_ \| | __|/ _` | | | |
   ___) | (_| | | | | | | | | | | |_| (_| | | | |
  |____/ \__,_|_| |_| |_|_| |_|_|\__|\__,_| |_|_|
<br /></pre>
<p>Note: Points will be based on source code length.</p>


______________________________________________________
BGEEK||||||false||||||

<p>Write the following words in brainfuck programming language</p>
<p>"GEEK-O-CODE" (Quotes not included)</p>
<p>Note: Points awarded will be based on your sourcecode length</p>


______________________________________________________
SALESMAN||||||false||||||

<p>M&#7897;t th&#432;&#417;ng nh&acirc;n v&#7915;a quy&#7871;t Ã°&#7883;nh mua m&#7897;t con t&agrave;u m&#7899;i ph&#7909;c v&#7909; cho c&aacute;c cu&#7897;c trao Ã°&#7893;i h&agrave;ng h&oacute;a d&#7885;c b&#7901; s&ocirc;ng Danube. Con t&agrave;u c&#7911;a anh ta c&oacute; t&#7889;c Ã°&#7897; r&#7845;t tuy&#7879;t v&#7901;i, n&oacute; c&oacute; th&#7875; Ã°&#432;a anh ta Ã°&#7871;n b&#7845;t k&igrave; v&#7883; tr&iacute; n&agrave;o tr&ecirc;n s&ocirc;ng trong kh&ocirc;ng qu&aacute; m&#7897;t t&iacute;ch t&#7855;c, nh&#432;ng, Ã°&oacute; l&#7841;i l&agrave; m&#7897;t con t&agrave;u r&#7845;t t&#7889;n nhi&ecirc;n li&#7879;u. Con t&agrave;u t&#7889;n U dollar cho 1 m&eacute;t Ã°i ng&#432;&#7907;c d&ograve;ng, v&agrave; m&#7845;t D dollar cho 1 m&eacute;t Ã°i xu&ocirc;i d&ograve;ng.<br /><br />C&oacute; t&#7845;t c&#7843; N h&#7897;i ch&#7907; s&#7855;p s&#7917;a di&#7877;n ra tr&ecirc;n kh&#7855;p b&#7901; s&ocirc;ng Danube. M&#7895;i h&#7897;i ch&#7907; ch&#7881; di&#7877;n ra trong 1 ng&agrave;y. V&#7899;i m&#7895;i h&#7897;i ch&#7907; x, th&#432;&#417;ng nh&acirc;n bi&#7871;t h&#7897;i ch&#7907; b&#7855;t Ã°&#7847;u v&agrave;o ng&agrave;y T[x] (t&iacute;nh t&#7915; khi mua t&agrave;u), t&#7841;i v&#7883; tr&iacute; c&aacute;ch th&#432;&#7907;ng ngu&#7891;n L[x] m&eacute;t, v&agrave; n&#7871;u tham gia, th&#432;&#417;ng nh&acirc;n s&#7869; ki&#7871;m Ã°&#432;&#7907;c M[x] dollar. Anh ta s&#7869; ph&#7843;i b&#7855;t Ã°&#7847;u v&agrave; k&#7871;t th&uacute;c chuy&#7871;n Ã°i c&#7911;a m&igrave;nh t&#7841;i m&#7897;t v&#7883; tr&iacute; c&aacute;ch th&#432;&#7907;ng ngu&#7891;n S m&eacute;t.<br /><br />L&#432;u &yacute; r&#7857;ng, c&aacute;c h&#7897;i ch&#7907; b&#7855;t Ã°&#7847;u theo th&#7913; t&#7921; th&#7901;i gian, n&ecirc;n n&#7871;u nh&#432; h&#7897;i ch&#7907; A Ã°&#432;&#7907;c b&#7855;t Ã°&#7847;u s&#7899;m h&#417;n h&#7897;i ch&#7907; B, th&#432;&#417;ng nh&acirc;n kh&ocirc;ng th&#7875; tham gia h&#7897;i ch&#7907; B tr&#432;&#7899;c h&#7897;i ch&#7907; A. Tuy nhi&ecirc;n, n&#7871;u nh&#432; c&oacute; nhi&#7873;u h&#7897;i ch&#7907; di&#7877;n ra trong c&ugrave;ng 1 ng&agrave;y, th&#432;&#417;ng nh&acirc;n c&oacute; th&#7875; tham gia b&#7845;t k&igrave; h&#7897;i ch&#7907; n&agrave;o theo b&#7845;t k&igrave; th&#7913; t&#7921; n&agrave;o anh ta mu&#7889;n. Th&#432;&#417;ng nh&acirc;n c&oacute; th&#7875; Ã°i qua 1 h&#7897;i ch&#7907; nhi&#7873;u l&#7847;n trong ng&agrave;y, nh&#432;ng d&#297; nhi&ecirc;n, anh ta s&#7869; ch&#7881; ki&#7871;m Ã°&#432;&#7907;c ti&#7873;n trong l&#7847;n Ã°&#7847;u ti&ecirc;n gh&eacute; qua h&#7897;i ch&#7907; Ã°&oacute;.<br /><br />Nhi&#7879;m v&#7909; c&#7911;a b&#7841;n, l&agrave; h&atilde;y vi&#7871;t ch&#432;&#417;ng tr&igrave;nh gi&uacute;p th&#432;&#417;ng nh&acirc;n t&iacute;nh Ã°&#432;&#7907;c s&#7889; ti&#7873;n nhi&#7873;u nh&#7845;t thu Ã°&#432;&#7907;c, khi tham gia c&aacute;c h&#7897;i ch&#7907; theo ph&#432;&#417;ng &aacute;n t&#7889;i &#432;u. S&#7889; ti&#7873;n ki&#7871;m Ã°&#432;&#7907;c, b&#7857;ng t&#7893;ng l&#7907;i nhu&#7853;n Ã°&#7841;t Ã°&#432;&#7907;c t&#7915; nh&#7919;ng h&#7897;i ch&#7907; anh ta tham gia, tr&#7915; Ã°i chi ph&iacute; di chuy&#7875;n tr&ecirc;n s&ocirc;ng.<br /><br />Input:<br />- D&ograve;ng Ã°&#7847;u ti&ecirc;n g&#7891;m 4 s&#7889; nguy&ecirc;n N,U,D,S<br />- N d&ograve;ng ti&#7871;p theo, m&#7895;i g&#7891;m 3 s&#7889; T[k], L[k], M[k] m&ocirc; t&#7843; h&#7897;i ch&#7907; k: h&#7897;i ch&#7907; b&#7855;t Ã°&#7847;u v&agrave;o ng&agrave;y T[k], c&aacute;ch th&#432;&#7907;ng ngu&#7891;n L[k] m&eacute;t, v&agrave; l&#7907;i nhu&#7853;n Ã°&#7841;t Ã°&#432;&#7907;c n&#7871;u tham gia l&agrave; M[k]<br />- C&aacute;c s&#7889; tr&ecirc;n c&ugrave;ng 1 d&ograve;ng c&aacute;ch nhau b&#7903;i &iacute;t nh&#7845;t 1 d&#7845;u c&aacute;ch<br /><br />Output<br />- G&#7891;m 1 s&#7889; nguy&ecirc;n duy nh&#7845;t, l&agrave; s&#7889; ti&#7873;n l&#7899;n nh&#7845;t m&agrave; th&#432;&#417;ng nh&acirc;n c&oacute; th&#7875; ki&#7871;m Ã°&#432;&#7907;c (gi&aacute; tr&#7883; n&agrave;y c&oacute; th&#7875; b&#7857;ng 0).<br /><br />Gi&#7899;i h&#7841;n:<br />- 1 &lt;= N &lt;= 500000, s&#7889; h&#7897;i ch&#7907;<br />- 1 &lt;= D &lt;= U &lt;= 10, chi ph&iacute; di chuy&#7875;n 1 m&eacute;t ng&#432;&#7907;c d&ograve;ng (U), v&agrave; xu&ocirc;i d&ograve;ng (D)<br />- 1 &lt;= S &lt;= 500001, v&#7883; tr&iacute; xu&#7845;t ph&aacute;t c&#7911;a th&#432;&#417;ng nh&acirc;n<br />- 1 &lt;= T[k] &lt;= 500000, ng&agrave;y di&#7877;n ra h&#7897;i ch&#7907; th&#7913; k<br />- 1 &lt;= L[k] &lt;= 500001, v&#7883; tr&iacute; c&#7911;a h&#7897;i ch&#7907; th&#7913; k<br />- 1 &lt;= M[k] &lt;= 4000, s&#7889; ti&#7873;n th&#432;&#417;ng nh&acirc;n c&oacute; th&#7875; ki&#7871;m Ã°&#432;&#7907;c n&#7871;u tham gia h&#7897;i ch&#7907; th&#7913; k<br />- Kh&ocirc;ng c&oacute; hai h&#7897;i ch&#7907; n&agrave;o Ã°&#432;&#7907;c m&#7903; &#7903; c&ugrave;ng v&#7883; tr&iacute;, c&#361;ng nh&#432; kh&ocirc;ng c&oacute; h&#7897;i ch&#7907; n&agrave;o Ã°&#432;&#7907;c m&#7903; t&#7841;i nh&agrave; c&#7911;a th&#432;&#417;ng nh&acirc;n<br /><br />Example:<br />Input<br />4 5 3 100 <br />2 80 100 <br />20 125 130 <br />10 75 150 <br />5 120 110 <br />Output<br />50<br /><br />Gi&#7843;i th&iacute;ch:<br />Ph&#432;&#417;ng &aacute;n t&#7889;i &#432;u c&#7911;a th&#432;&#417;ng nh&acirc;n s&#7869; l&agrave; tham gia h&#7897;i ch&#7907; 1 v&agrave; 3, theo th&#7913; t&#7921; nh&#432; sau<br />- Ã�i ng&#432;&#7907;c d&ograve;ng 20 m&eacute;t, chi ph&iacute; 100 dollar. L&#7907;i nhu&#7853;n hi&#7879;n t&#7841;i: -100<br />- Tham gia h&#7897;i ch&#7907; 1, ki&#7871;m Ã°&#432;&#7907;c 100 dollar. L&#7907;i nhu&#7853;n hi&#7879;n t&#7841;i: 0<br />- Ã�i ng&#432;&#7907;c d&ograve;ng 5 m&eacute;t, chi ph&iacute; 25 dollar. L&#7907;i nhu&#7853;n hi&#7879;n t&#7841;i: -25<br />- Tham gia h&#7897;i ch&#7907; 3, ki&#7871;m Ã°&#432;&#7907;c 150 dollar. L&#7907;i nhu&#7853;n hi&#7879;n t&#7841;i: 125<br />- Ã�i xu&ocirc;i d&ograve;ng 25 m&eacute;t v&agrave; tr&#7903; v&#7873; nh&agrave;, chi ph&iacute; 75 dollar. L&#7907;i nhu&#7853;n cu&#7889;i c&ugrave;ng: 50 dollar</p>


______________________________________________________
INTSS||||||true||||||


<p>A weighted finite undirected graph is a triple <i>G = (V, E, w)</i> consisting of vertex set <i>V</i>, edge set <img src="http://www.spoj.pl/content/turbo:image002.gif" style="vertical-align:text-bottom">, and vertex weighting function <i>w</i> such that <img src="http://www.spoj.pl/content/turbo:image002.gif" style="vertical-align:text-bottom"> and <img src="http://www.spoj.pl/content/turbo:image002.gif" style="vertical-align:middle">. For <img src="http://www.spoj.pl/content/turbo:image002.gif" style="vertical-align:text-bottom"> and <img src="http://www.spoj.pl/content/turbo:image002.gif" style="vertical-align:text-bottom">, <i>N(u)</i> and <i>N(K)</i> will denote the neighboring vertex sets of <i>u</i> and <i>K</i> respectively, formally defined as:<BR>
<img src="http://www.spoj.pl/content/turbo:image012.gif" style="vertical-align:text-bottom"><BR>
A vertex set <img src="http://www.spoj.pl/content/turbo:image010.gif" style="vertical-align:text-bottom"> satisfying <img src="http://www.spoj.pl/content/turbo:image010.gif" style="vertical-align:text-bottom"> is called <i>internally stable</i> (also known as independent or anti-clique). In this problem you must find an internally stable set <i>B</i> such that <i>w(B) = max{w(S)}</i>, where <i>S</i> belongs to the set of all internally stable sets of that graph.</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of test cases [<i>t</i> <= 100]<BR>
<i>n k</i> &#8211; [<i>n</i> &#8211; number of vertices (2 <= <i>n</i> <= 200), <i>k</i> &#8211; number of edges (1 <= <i>k</i> <= <i>n*(n-1)/2</i>)]<BR>
then <i>n</i> numbers follows (<i>wi</i> - the weight of <i>i</i>-th vertex) [ 0 <= <i>wi</i> <= 2^31-1]<BR>
then <i>k</i> pairs of numbers follows denoting the edge between the vertices (<i>si sj</i> edge between <i>i</i>-th and <i>j</i>-th verices) [1 <= <i>si, sj</i> <= <i>n</i>]</p>


*******OutputConstraints*******

<p>For each test case output <i>MaxWeight</i> &#8211; the weight of a maximum internally stable set of the given graph. [ 0 <= <i>MaxWeight</i> <= 2^31-1]</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
2
5 6
10 20 30 40 50
1 2
1 5
2 3
3 4
3 5
4 5

4 4
10 4 10 14
1 2
2 3
3 4
4 1

<b>Output:</b>
70
20
</pre>



______________________________________________________
BCEASY||||||true||||||


<p> Some of you may be familiar with the TopCoder (TM) contest. Its exact rules are not important for this problem, but know that the most important part of it is writing a program according to the given specification. Many times the contestant ends up with a program which would work perfectly &#8211; if only he could change a couple of characters (like, replacing "=" by "==" in C, etc.). Unfortunately, even the best programmers sometimes aren't able to spot these tiny but necessary changes until it's too late... and that's why we developed a brand-new BottomCoder training for them!<BR><BR>

The idea is very simple &#8211; you're given a problem specification, a source code, and a list of permitted modifications. Your task is to find a modification which would cause the program to behave according to the specification. <BR><BR>

<b>Specification:</b> "Write a program which outputs EXACTLY 42 asterisks and NOTHING more (e.g. NO end-of-line markers, like "\n", ...)" <BR><BR>

The code you are supposed to modify:<BR></p>
<pre>
int i, n=42;
main() {
  for(i=0; i&lt;n; i--) {
    printf("*");
  }
}
</pre>
<p>
As this is a really, really simple problem, you are only permitted to make exactly ONE of these modifications to the source: 1) Add one character to the source. 2) Delete one character from the source. 3) Replace one character in the source by a different one. <BR><BR>

Moreover, it would be definitely too easy if we asked you to find just one solution, so you'll need to find TWO DIFFERENT solutions in order to obtain credit for this problem. (There are exactly three different solutions, so don't worry, it can be done!) 
<BR>
</p>


*******InputConstraints*******

<p>
There is no input for given problem.<BR>
</p>


*******OutputConstraints*******

<p>Your submission should consist of two parts. The first part should contain the first of your solutions. A single line with the letter "Q" follows. (Note that the letter Q is used as a separator. You will have to do without inserting the letter Q in at least one of your solutions :) After this line you should add your second solution. 
<BR><BR>
You don't need to worry much about the exact formatting of your submission. The exact judging procedure will look as follows: 
<BR><BR>
The first occurrence of the letter Q is found, the input is split into two parts. 
Any whitespace in each of the parts is removed. 
It is checked whether the two submissions differ and whether each of them was obtained from the original program by an allowed change. 
Each of your two submissions is compared to each of the three correct solutions.<BR>  
</p>


*******IOTestCases*******


<pre>
<b>Output:</b>
int i, n=42; main(
){ for(i=0; i&lt;n; i--)   { printf("?"); } }
Q
int i, n=41; main() { for(i=0; i&lt;n;i--) { printf("*"); } }
</pre>
<p>
(syntactically valid (but incorrect) submission) </p>



______________________________________________________
BCHARD||||||true||||||


<p> Some of you may be familiar with the TopCoder (TM) contest. Its exact rules are not important for this problem, but know that the most important part of it is writing a program according to the given specification. Many times the contestant ends up with a program which would work perfectly &#8211; if only he could change a couple of characters (like, replacing "=" by "==" in C, etc.). Unfortunately, even the best programmers sometimes aren't able to spot these tiny but necessary changes until it's too late... and that's why we developed a brand-new BottomCoder training for them!<BR><BR>

The idea is very simple &#8211; you're given a problem specification, a source code, and a list of permitted modifications. Your task is to find a modification which would cause the program to behave according to the specification. <BR><BR>

<b>Specification:</b> "Write a program which outputs a short English text mentioning our partner competition &#8211; IPSC. The text must consist of one or more English sentences and each sentence has to contain one or more English words (sequences of only upper-case characters) separated by spaces. Additionally, you may use certain punctuaction characters &#8211; namely ".!?,'". Try to obfuscate the program as much as possible." 

The code you are supposed to modify:</p>
<pre>
#include &lt;stdio.h&gt;

int rex[5];

void f3(int *a) {
  int i;
  for (i=0; i&lt;5; i++) a[i]=0;
}

int f2(int *a) {
  int i;
  for (i=0; i&lt;5; i++) if (a[i]!=0) return 0;
  return 1;
}

void f1(int *a) {
  int i;
  for (i=0; i&lt;5; i++) {
    a[i]++;
    if (a[i]&lt;100) break;
    a[i]-=100;
  }
  for (i=4; i&gt;=0 && a[i]&gt;=rex[i]; i--)
    if (a[i]&gt;rex[i])
      f3(a);
}

void f4(int *a) {
  int i;
  for (i=0; i&lt;5; i++) {
    a[i]--;
    if (a[i]&gt;=0) break;
    a[i]+=100;
  }
  if (i&gt;=5) for (i=0; i&lt;5; i++) a[i]=rex[i];
}

void f7(int *a, int *b) {
  int c[5];
  f3(c); f3(a);
  while(!f2(b)) { f1(a); f4(b); f1(c); }
  while(!f2(c)) { f1(b); f4(c); }
}

void f9(int *a, int *b) {
  f1(a);
  while(!f2(b)) { f4(b); f1(a); }
}

void f8(int *a, int *b) {
  int c[5], d[5];
  f7(d, a);
  f3(a); f1(a);
  while(!f2(b)) { f7(c, d); f9(a, c); f4(a); f4(b); }
}

void f5(int *a, int *b) {
  int c[5], d[5];
  f7(d, a);
  f3(a); f1(a);
  while(!f2(b)) { f7(c, d); f8(a, c); f4(a); f4(b); }
}

void f10(int x) {
  int rpl[]=
{80, 125, 111, 18, 59, 88, 88, 28, 65, 98, 119, 103, 101, 79, 107, 2, 16,
92, 102, 123, 103, 84, 112, 78, 68, 98, 65, 37, 105, 85, 107, 13, 45, 9,
104, 81, 21, 31, 55, 110, 78, 66, 66, 3, 77, 63, 16, 105, 15, 123, 16, 84,
31, 96, 4, 82, 82, 122, 68, 115, 35, 73, 3, 108, 115, 83, 15, 19, 31, 99, 5,
123, 24, 65, 36, 15, 75, 84, 4, 2, -1};

  int i;
  int a[5], b[5], c[5];

  if (x&lt;100000000 || x&gt;200000000) return;
  x--;
  f3(rex); rex[4]=1;
  for (i=0; rpl[i]!=-1; i++)
  {
    f3(a); a[0]=i+1;
    f3(b); f1(b); f3(c); f1(b); f1(b);
    f1(c); f1(b); f5(a, b);
    
    f1(c);
    while(!f2(a))
    {
      f3(b); b[0]=x%100; b[1]=x/100;
      f4(a); f8(c, b);
    }
    rpl[i]^=c[1];
    printf("%c", rpl[i]);
  }
  printf("\n");
}

int main()
{
  f10(47);
}

</pre>
<p>
 As you can see, the coder made almost everything according to the specification :) 

You're only allowed to alter one number in the source code &#8211; namely the number 47 on line 98 (the argument of function "f10" called from "main"). You can replace it by any integer between 100`000`000 and 200`000`000 inclusive. 
<BR>
</p>


*******InputConstraints*******

<p>
There is no input for given problem.<BR>
</p>


*******OutputConstraints*******

<p>Your submission should consist of two lines. The first line should contain the value of the constant &#8211; an integer between 100`000`000 and 200`000`000 inclusive. The second line should contain the output produced by the program if it were compiled and executed with the correct value of the constant. 
<BR>  
</p>


*******IOTestCases*******


<pre>
<b>Output:</b>
123456789
ARE YOU SOLVING IPSC PROBLEMS RIGHT NOW?
</pre>
<p>
(syntactically valid (but incorrect) submission) </p>



______________________________________________________
TCONNUM||||||true||||||


<table class="problems" width="99%"><tr  class="navigation">
<td><a href="/problems/TCONNUM/polski/">Wersja polska</a></td> 
<td><a href="/problems/TCONNUM/english/">English version</a></td> 
</tr></table>


<p align=justify>Every integer number <i>n</i> is represented in positional number system of base <i>r</i> by a sequence of digits 0 <= <i>d<sub>i</sub></i> < <i>r</i>, so the value is equal to:</p>
<center>
<i>n</i> = <i>d<sub></i>0<i></sub></i> + 
<i>r</i> * <i>d<sub></i>1<i></sub></i> +
<i>r<sup>2</sup></i> * <i>d<sub></i>2<i></sub></i> + 
<i>r<sup>3</sup></i> * <i>d<sub></i>3<i></sub></i> + ...
</center>
<p align=justify>Your task is to convert a given number in <i>r</i>-base represantation into <i>s</i>-base representation, for example:
decimal 231 into binary 11100111. Assume that <i>r</i> <= 36 and the digits are 0,1,2,3,4,5,6,7,8,9,
<i>A</i>,
<i>B</i>,
<i>C</i>,
<i>D</i>,
<i>E</i>,
<i>F</i>,
<i>G</i>,
<i>H</i>,
<i>I</i>,
<i>J</i>,
<i>K</i>,
<i>L</i>,
<i>M</i>,
<i>N</i>,
<i>O</i>,
<i>P</i>,
<i>Q</i>,
<i>R</i>,
<i>S</i>,
<i>T</i>,
<i>U</i>,
<i>V</i>,
<i>W</i>,
<i>X</i>,
<i>Y</i>,
<i>Z</i>.

</p>

*******InputConstraints*******

<p align=justify>
<i>N</i> [the number of series <= 1000]
<br><i>n r s</i> [<i>n</i> <= 10<sup>1000</sup>, <i>r</i>,<i>s</i> <= 36]
</p>


*******OutputConstraints*******

<p align=justify>
<i>n</i> [<i>s</i>-base representation of number <i>n</i>]
</p>
<p>
Text grouped in [ ] does not appear in the input and output file.


*******IOTestCases*******

<pre>
<b>Input:</b>
3
231 10 2
ABC 15 10
XYZ 36 2

<b>Output:</b>
11100111
2427
1010101111111011

</pre>


______________________________________________________
TMUL||||||true||||||


<p></p>
<p align="justify">Multiply the given numbers.</p>

*******InputConstraints*******

<p align="justify">&nbsp;</p>
<pre><em>n</em> [the number of multiplications &lt;= 1000]
<em>l1 l2</em> [numbers to multiply (at most 10000 decimal digits each)]
<p align="left">
Text grouped in [ ] does not appear in the input file.
</p>
</pre>
<p>&nbsp;</p>

*******OutputConstraints*******

<p align="justify">&nbsp;</p>
<pre>The results of multiplications.
</pre>
<p>&nbsp;</p>

*******IOTestCases*******

<pre>Input:
5
4 2
123 43
324 342
0 12
9999 12345

Output:
8
5289
110808
0
123437655
</pre>
<p><strong>Warning: large Input/Output data, be careful with certain languages</strong> </p>


______________________________________________________
TSHPATH||||||false||||||

<P align=justify>
Given a list of cities. Each direct connection between two
cities has its  transportation cost (an integer bigger than 0).
The goal is to find the paths of
minimum cost between pairs of cities. Assume that the cost
of each path (which is the sum of costs of all direct
connections belongning to this path) is at most 200000.
The name of a city is a string containing characters
a,...,z and is at most 10 characters long.
</p>

<H3>Input</h3>
<P align=justify>
<pre>
<i>s</i> [the number of tests <= 10]
<i>n</i> [the number of cities <= 10000]
<i>NAME</i> [city name]
<i>p</i> [the number of neighbours of city <i>NAME</i>]
<i>nr</i> <i>cost</i> [<i>nr</i> - index of a city connected to <i>NAME</i> (the index of the first city is 1)]
           [<i>cost</i> - the transportation cost]
<i>r</i> [the number of paths to find <= <b>100</b>]
<i>NAME1 NAME2</i> [<i>NAME1</i> - source, <i>NAME2</i> - destination]
[empty line separating the tests]
</pre>
</p>
<H3>Output</h3>
<P align=justify>
<pre>
<i>cost</i> [the minimum transportation cost from city <i>NAME1</i> to city <i>NAME2</i> (one per line)]
</pre>
</p>
<H3>Example</h3>
<P align=justify>
<pre>Input:
1
4
gdansk
2
2 1
3 3
bydgoszcz
3
1 1
3 1
4 4
torun
3
1 3
2 1
4 1
warszawa
2
2 4
3 1
2
gdansk warszawa
bydgoszcz warszawa

Output:
3
2
</pre>
</p>
<b>Warning: large Input/Output data, be careful with certain languages</b>


______________________________________________________
TDBFS||||||true||||||


<table class="problems" width="99%"><tr  class="navigation">
<td><a href="/problems/TDBFS/polski/">Wersja polska</a></td> 
<td><a href="/problems/TDBFS/english/">English version</a></td> 
</tr></table>



<p>For a given list of adjacent vertices of a graph and a chosen vertex <i>v</i> write down in the Depth First Search (DFS) or Breadth First Search (BFS) order all the vertices from the connected component of the graph containing <i>v</i>. Assume that the number of vertices of the graph is at most 1000.

*******InputConstraints*******

<p align=justify>
<br><i>t</i> [the number of graphs <= 100]
<br>Graph:
<br><i>n</i> [1 <= <i> n </i> <= 1000 the number of graph vertices]
<br><i>i m a b c ...</i> [the list of <i>m</i> adjacent vertices to vertex <i>i</i>]
<br>Any query is as follows: [not more than <i>n</i> queries]
<br><i>v</i> <i>i</i>
<br>where 1 <= <i>v</i> <= <i>n</i> is the beginning vertex and <i>i</i> = 0 for DFS order and <i>i</i> = 1 for BFS order.
<br>0 0 [at the end of the serie]
<br><br>The list for isolated vertex <i>a</i> is <i>a</i> 0.
</p>

*******OutputConstraints*******

<p>
<br><i>graph i</i> [test case, word <i>graph</i> is necessary]
<br><i>a b c ...</i> [the DFS or BFS order of all vertices]
</p>

*******IOTestCases*******

<pre>
<b>Input:</b>
3
6
1 2 3 4
2 2 3 6
3 2 1 2
4 1 1
5 0
6 1 2
5 1
1 0
1 0
0 0
10
1 6 3 5 6 7 8 9
2 1 9
3 2 1 5
4 5 6 7 8 9 10
5 4 1 3 7 8
6 3 1 4 7
7 5 1 4 5 6 8
8 5 1 4 5 7 10
9 3 1 2 4
10 2 4 8
7 1
1 0
2 1
4 1
7 1
0 0
2
1 0
2 0
1 1
0 0
<b>Output:</b>
graph 1
5
1 3 2 6 4
1 3 2 6 4
graph 2
7 1 4 5 6 8 3 9 10 2
1 3 5 7 4 6 8 10 9 2
2 9 1 4 3 5 6 7 8 10
4 6 7 8 9 10 1 5 2 3
7 1 4 5 6 8 3 9 10 2
graph 3
1
</pre>





______________________________________________________
INTEST||||||true||||||


<p>The purpose of this problem is to verify whether the method you are using to read input data is sufficiently fast to handle problems branded with the <b>enormous Input/Output</b> warning. You are expected to be able to process at least 2.5MB of input data per second at runtime.


*******InputConstraints*******

<p>The input begins with two positive integers n k (n, k<=10<sup>7</sup>). The next n lines of input contain one positive integer t<sub>i</sub>, not greater than 10<sup>9</sup>, each.


*******OutputConstraints*******

<p>Write a single integer to output, denoting how many integers t<sub>i</sub> are divisible by k.


*******IOTestCases*******


<pre>
<b>Input:</b>
7 3
1
51
966369
7
9
999996
11

<b>Output:</b>
4
</pre>



______________________________________________________
SUMTRIAN||||||true||||||


<p>
This is problem <tt>SUMITR</tt> without strict 
source limit. 
<p>
Let us consider a triangle of numbers in which a number appears in the first line, two 
numbers appear in the second line etc. Develop a program which will compute the largest 
of the sums of numbers that appear on the paths starting from the top
towards the base, so that:
<ul>
<li> on each path the next number is located on the row below, more precisely 
either directly below or below and one place to the right;
</li>
<li>
the number of rows is strictly positive, but less than 100;
</li>
<li> all numbers are positive integers between O and 99.
</li>
</ul>

*******InputConstraints*******

<p>
In the first line integer n - the number of test cases (equal to about 1000). 
Then n test cases follow. Each test case starts with the number of lines which is followed by their content.

*******OutputConstraints*******

<p>
For each test case write the determined value in a separate line. 


*******IOTestCases*******


<pre>
<b>Input:</b>
2
3
1
2 1
1 2 3
4 
1 
1 2 
4 1 2
2 3 1 1 

<b>Output:</b>
5
9
</pre>
<b>Warning: large Input/Output data, be careful with certain languages</b> 


______________________________________________________
TFOSS||||||true||||||


<p>A small group of archaeologists is working in the Antarctic. Their sensors have detected a number of caves in which there are interesting fossils. However, a thick layer of ice blocks the entrance to each cave. The archaeologists possess the equipment needed to burn a tunnel in the layer of ice, but the fuel is extremely expensive. In order to determine the size of each fossil the group has launched a number of probes through small bore-holes. Each probe which hit the fossil emits a signal consisting of its x and y coordinates. Your task is to determine the smallest possible size of the tunnel, which is equal to the maximal distance between any two probes (so that the fossil won&#8217;t be damaged during extraction). The drilling equipment needs to be provided with the squared value of this distance.

<p>Given the list of coordinates of the points containing probes, find the square of the maximal distance between any two probes. 

*******InputConstraints*******

<pre>
<p>t [the number of tests <= 20]
[empty line]
n [the number of active probes <= 100000]
x1 y1 [coordinates of the first probe]
...
xn xn
[integer coordinates from -50000000 to 50000000]
[empty line]
[input for the next test cases...]
</pre>
<p>
Text grouped in [ ] does not appear in the input file.


*******OutputConstraints*******

<pre>o1 [the square of the maximal distance in the first set]
[output for the next test cases...]
</pre>

*******IOTestCases*******


<pre>
<b>Input:</b>
5

1
2 -3

4
0 0
-2 2
2 2
1 0

6
-4 2
2 2
5 0
0 5
6 1
-1 -1

10
0 0
5 1
9 2
12 3
14 4
15 5
16 7
17 10
18 14
19 19

10
2 -3
-1 2
0 5
-5 -1
-4 2
4 0
1 3
4 3
-3 -4
0 -2

<b>Output:</b>
0
16
101
722
98
</pre>



______________________________________________________
ARMIES||||||true||||||


<p>
	Two enemy countries - <i>Bajtocja</i> and <i>Megabajtolandia</i>
- are preparing for crucial war with each other. Each country has built an army 
consisting of some number of divisions, and each division consists of some 
number of soldiers. The way of waging the war, given by strategists from each 
contry, consists of sending the division with the most man power to fight, i.e. 
starting from the most numerous division to the least.
<p>
	Thus, first each country will send its division with the most man power. If one 
	of these divisions has more soldiers than the other, then the war is over and 
	the winner is the owner of the larger division. If the man power of each of the 
	divisions sent is the same then all the soldiers will kill each other and the 
	next most numerous division is sent to fight. The man powers of the second 
	divisions decide the war if and only if they are not the same. If not, the 
	battle is carried on in aforementioned way. If, at some moment, one army runs 
	out of divisions and the second one does not, then the war is over and the 
	first army is the loser. If both armies run out of divisions then the war is 
	over and there is a draw.<br>
	<br>
	Give the result of the war, without any blood and murder.<br>
	<br>
	Write a program, which:<br>
	<ul>
		<li>
			reads from standard input the description of <i>Bajtocja's</i> and <i>Megabajtolandia's
			</i>
		army, respectively,
		<li>
		computes the result of the war,
		<li>
			writes it to standard output.</li>
	</ul>
	
*******InputConstraints*******

<p>
	The first line of input contains one integer <i>D</i> (<i>1</i><=<i>D</i><=30) 
	meaning the number of test cases. The description of each test case contains <i>4</i>
	lines. In the first, there is one integer <i>B</i> (<EM>1</EM> <= <i>B</i> <= 
	50 000) meaning the number of divisions in  <i>Bajtocja's</i> army. 
	The second line contains <i>B</i> integers <i>b<sub>i</sub></i> (1 <=<i> b<sub>i</sub></i>
	<= 1 000 000 000) (separated by single space) meaning the man power (the 
	number of soldiers) of consequtive divisions of <i>Megabajtolandia's</i> army. In 
	the third line, there is one integer <i>M</i> (<EM>1</EM> <= <i>M</i> <= 
	50 000) meaning the number of divisions of <i>Megabajtolandia's</i> army. 
	The fourth line contains <i>M</i> integers <i>m<sub>i</sub></i> (1 <=<i> m<sub>i</sub></i>
	< = 1 000 000 000) (separated by single space) meaning the man power of 
	consequtive divisions of <i>Megabajtolandia's</i> army.
	
*******OutputConstraints*******

<p>
	For each test case, your program should write, in separate lines, exactly one 
	word:<br>
	<ul>
		<li>
			"Bajtocja" in case the winner is <i>Bajtocja</i>,
		<li>
			"Megabajtolandia" in case the winner is <i>Megabajtolandia</i>,
		<li>
			"Draw" in case of a draw.<br>
		</li>
	</ul>
	
*******IOTestCases*******

<p>
	<pre><b>Sample input:</b>
3
3
1 3 4
3
4 4 1
4
2 5 3 4
3
5 6 4
4
6 1 2 5
4
5 2 6 1

<b>Sample output:</b>
Megabajtolandia
Megabajtolandia
Draw
</pre>



______________________________________________________
MMATCH||||||true||||||


<p>
There is a school trip being organized for kids.
The hotel the group is staying in can offer them one big room with enough beds to suit any group of visitors, and several smaller rooms with B beds alltogether.
The children have heard many strange and frightening stories about the big room. That's why not even one of them wants to sleep in the big room.
Furthermore not every kid would like to sleep in any bed. 
<br><br>
Your goal is to assign B beds from the smaller rooms in such a way
that the maximal number of children are happy (a child is happy when it gets to sleep in one of the beds it has selected).</p>

*******InputConstraints*******

<p>
The first line contains a positive integer t<=1000 indicating the number of test cases.
Each test case is an instance of the problem defined above.
The first line of each test case is a pair of positive integers L and B (the number of children L<=100 and beds B<=100).
The next lines contain a sequence of (c,b) pairs ending with two zeros.
(c,b) means that the child c will be happy if it gets to sleep in bed b.
</p>




*******OutputConstraints*******

<p>For each test case print the maximal number of happy children.
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
1 1
2 1
2 2
3 2
3 3
0 0
4 3
1 1
1 3
2 1
3 1
3 2
4 2
0 0
4 2
1 1
1 2
2 1
2 2
3 1
3 2
4 1
4 2
0 0


<b>Output:</b>
3
3
2
</pre>



______________________________________________________
TSORT||||||true||||||


<p>Given the list of numbers, you are to sort them in non decreasing order.<BR>
</p>


*******InputConstraints*******

<p><i>t</i> &#8211; the number of numbers in list, then <i>t</i> lines follow [<i>t</i> <= 10^6]. <BR>
Each line contains one integer: <i>N</i> [0 <= <i>N</i> <= 10^6]


*******OutputConstraints*******

<p>Output given numbers in non decreasing order.<BR>


*******IOTestCases*******

<p><b>Input:</b></p>
<pre>
5
5
3
6
7
1
</pre>

<p><b>Output:</b></p>
<pre>
1
3
5
6
7
</pre>


______________________________________________________
PRINT||||||true||||||


<p>In this problem you have to print all primes from given interval.<BR>
</p>


*******InputConstraints*******

<p><i>t</i> - the number of test cases, then <i>t</i> lines follows. [<i>t</i> <= 150]<BR>
On each line are written two integers <i>L</i> and <i>U</i> separated by a blank.  <i>L</i> - lower bound of interval, 
<i>U</i> - upper bound of interval. [2 <= <i>L</i> < <i>U</i> <= 2147483647] [<i>U-L</i> <= 1000000].


*******OutputConstraints*******

<p>For each test case output must contain all primes from interval <i>[L; U]</i> in increasing order.<BR>


*******IOTestCases*******

<p><b>Input:</b></p>
<pre>
2
2 10
3 7
</pre>
<p><b>Output:</b></p>
<pre>
2
3
5
7
3
5
7
</pre>



______________________________________________________
PL6COL||||||true||||||


<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr class="navigation">
<td><a href="/problems/PL6COL/polski/">Wersja polska</a></td>
<td><a href="/problems/PL6COL/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>A function <em>c</em> mapping the set of vertices of a graph <em>G</em> into integers 1,...,<em>k</em> is called a <em>k-coloring</em> of <em>G</em> if for every pair of adjacent vertices <em>u</em>,<em>v</em> we have that <em>c(u)</em> is not equal to <em>c(v)</em>. Find 6-coloring of a given planar graph.</p>

*******InputConstraints*******

<p>The first line contains an integer 1&lt;=<em>t</em>&lt;=100 denoting the number of test cases. Then, <em>t</em> planar graphs are given. Each graph is described by two lines. First line contains a string of the form:</p>
<p>Graph with <em>n</em> nodes and <em>m</em> edges:</p>
<p>The second line gives the edges of the graph separated with commas. Each edge is given as a pair of vertices: {<em>u</em>,<em>v</em>}. Vertices of the graph are denoted with integers 0...,<em>n</em>-1.</p>

*******OutputConstraints*******

<p>For each test case print a 6-coloring of the corresponding planar graph. The coloring of a graph with <em>n</em> vertices shoud be given in <em>n</em> lines, where each line contains two integers</p>
<p><em>v</em> <em>c(v)</em></p>
<p>the number of a vertex and the color assigned to this vertex.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
Graph with 3 nodes and 3 edges:
{0,1},{1,2},{2,0}
Graph with 9 nodes and 14 edges:
{0,1},{0,2},{0,5},{0,8},{1,2},{2,3},{2,4},{3,4},{4,5},{4,8},{5,6},{5,7},{5,8},{6,7}

<strong>Output:</strong>
0 1
1 2
2 3

0 1
1 2
2 3
3 4
4 5
5 3
6 1
7 4
8 2

</pre>

______________________________________________________
LEXISORT||||||true||||||


<p>Given is a list of words and a lexicographical ordering according to the ascii
 alphabet. Your task is to sort the words in increasing order.


*******InputConstraints*******

<p>The first line contains the numbers of testcases k (k< 100). Every testcase c
onsists of n+1 (1< n< 50000) lines. Each line contains of a string of 10 character
s. The first line of each testcase contains n.

*******OutputConstraints*******

<p>Output the sorted list of words.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
helloworld
worldhello
2
aaaaaaaaaa
Aaaaaaaaaa
<b>Output:</b>
helloworld
worldhello
Aaaaaaaaaa
aaaaaaaaaa
</pre>



______________________________________________________
J4FUN||||||true||||||


<p>
<b>birds</b><BR>
Puzzle ID: birds<BR><BR>

Ten birds sit on a clothes line. We shoot and kill one of them. How many 
birds remain on the clothes line?<BR><BR>

The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- one number: the number of birds that remain on the clothes line<BR><BR>

<b>bus</b><BR>
Puzzle ID: bus<BR><BR> 

A bus was travelling with less than 100 passengers. At stop A, exactly three
quarters of the passengers got off and 7 passengers got on the bus. The same
thing happened at next two stops, B and C. How many people got off at the 
stop C?<BR><BR>

The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the number of people getting off at C<BR><BR>

<b>palindrome</b><BR>
Puzzle ID: palindrome<BR><BR>

Suppose we write dates in the MMDDYYYY format. In this format, the 2nd of
October 2001 is a palindrome (a string equal to its reverse): 10022001. Find
the previous date that yields a palindrome in this format.<BR><BR>

The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the 8-digit string<BR><BR>

<b>cube</b><BR>
Puzzle ID: cube<BR><BR> 

You have a cube NxNxN. How many straight cuts are necessary to cut it into N^3
cubes of size 1x1x1? You may arrange the pieces in any way you like before
making each cut.<BR><BR>

a) Solve for N=3<BR>
b) Solve for N=4<BR>

The answer for this puzzle consists of three lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the number of cuts from part a)<BR>
- the number of cuts from part b)<BR><BR>

<b>girl1</b><BR>
Puzzle ID: girl1<BR><BR> 

In a two-child family, one child is a boy.<BR>
What is the probability that the other child is a girl?<BR>
<BR>
The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the answer in the form a/b (where a,b are relatively prime)<BR>
<BR>
<b>girl2</b><BR>
Puzzle ID: girl2<BR> 
<BR>
In an unnamed overpopulated country the rulers agreed on a new law: Each woman
may have as many children as she wants to, until she gives birth to a girl.
After that, she may have no more children. Assume that the law will never be
broken. All families will have as many children as they are (physically and
legally) able to. On each birth either one boy or one girl is born with equal
chances. In the current population the ratio males:females is 1:1. What will
happen in the next 100 years?<BR>
<BR>
A) The ratio of males to females will go up<BR>
B) The ratio of males to females will stay the same <BR>
C) The ratio of males to females will go down <BR>
<BR>
The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the uppercase letter corresponding to the correct answer <BR>
<BR>
<b>statements</b><BR>
Puzzle ID: statements<BR> 
<BR>
Given is a list with 2004 statements:<BR>
1. Exactly one statement on this list is false. <BR>
2. Exactly two statements on this list are false. <BR>
3. Exactly three statements on this list are false. <BR>
... <BR>
2004. Exactly 2004 statements on this list are false. <BR>
<BR>
a) Determine which statements are true.<BR>
b) Replace "exactly" by "at least". Again, determine which statements are true.<BR>
<BR>
The answer for this puzzle consists of three lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the encoded answer from part a)<BR>
- the encoded answer from part b)<BR>
<BR>
How to encode the answer? If no statements are true, write the word 'NONE'
(without the quotes). Otherwise take the set of true statements and write it
as a set of ranges. E.g. the set {1,2,3,7,9,100,101} is encoded as
1-3,7,9,100-101<BR>
<BR>
<b>letters</b><BR>
Puzzle ID: letters <BR>
<BR>
How many letters does the _shortest_ correct answer to this puzzle contain?<BR>
<BR>
The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- your exact answer <BR>
<BR>
<b>century</b><BR>
Puzzle ID: century<BR> 
<BR>
The twentieth century ended on 31. 12. 2000, which was a Sunday. Looking into
the future, on which days of the week won't any century ever end?<BR><BR>

Remember that leap years are those divisible by 400 plus those divisible by 4
but not by 100. (1996 was a leap year, so was 2000, but 2100 won't be a leap
year and neither will 2047.)<BR>
<BR>
The answer for this puzzle consists of two lines, containing respectively:<BR>
- the ID of this puzzle<BR>
- the days of the week on which no century will ever end<BR>
<BR>
The exact form of the answer is a comma-separated list of three-letter
abbreviations of the days in the order in which they appear in a week. E.g. if
the answer were Monday, Tuesday and Wednesday, write the string 'Mon,Tue,Wed'
(without the quotes).<BR>
 <BR>
</p>


*******InputConstraints*******

<p>
There is no input for given problem.<BR>
</p>


*******OutputConstraints*******

<p>Output answers for each puzzle described below in the order they was described.</p>


*******IOTestCases*******


<pre>
<b>Output:</b>
birds
100
bus
10000
...
</pre>



______________________________________________________
TFIB||||||true||||||


<p>Recall the definition of the Fibonacci numbers:</p>
<blockquote>
  <i>f</i><sub>1</sub> := 1 <br>

  <i>f</i><sub>2</sub> := 2 <br>
  <i>f</i><sub>n</sub> := <i>f</i><sub>n-1</sub> + <i>f</i><sub>n-2</sub>

      (n>=3)
</blockquote>
<p>
Given two numbers <i>a</i> and <i>b</i>, calculate how many Fibonacci numbers
are in the range [<i>a</i>,<i>b</i>].
</p>

*******InputConstraints*******

<p>
The input contains several test cases. Each test case consists of two
non-negative integer numbers <i>a</i> and <i>b</i>. Input is terminated
by <i>a=b=0</i>. Otherwise, <i>a<=b<=10<sup>100</sup></i>. The
numbers <i>a</i> and <i>b</i> are given with no superfluous leading zeros.</p>

*******OutputConstraints*******

<p>For each test case output on a single line the number of Fibonacci numbers
<i>f<sub>i</sub></i> with <i>a<=f<sub>i</sub><=b</i>.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>

10 100
1234567890 9876543210
0 0

<b>Output:</b>

5
4
</pre>



______________________________________________________
PAYBACK||||||true||||||


<p>In Byteland after the <a href="/problems/BYTEFOOD">food shortage</a> banks made credit payment freely available. At the end of the year companies have to settle their debts and to give a statement on their cashflow to the Claim Office. Among Banks and Companies a net of debts was created. Unfortunetely Banks gave a sky-high price on money transfers. For company owners it was unprofitable to pay all money transfers as they were. They chose you to help them out. Your assignment is to balance the debt network. <br/><br/>
You are given <b>[t<=1000]</b> test cases- a test case consists of the size <b>[N<=1000]</b> of the debt network, followed by a description of the network itself. Each line consists of integers separated by spaces ending with a new line. Each value states how much money the company in line "i" is in debt to company "j" where "j" is the column number.<br/>
<br/>
Your assignment is to limit the number of money transfers by determining which companies are in debt, which have earned money and which have shown neither profit nor loss. <br/>
<br/>

*******InputConstraints*******

<p>t [- test cases]<br/>
N [- size of the debt net]<br/>
a[1,1] a[1,2] a[1,3] ... a[1,n]<br/>
a[2,1] a[2,2] a[2,3] ... a[2,n]<br/>
      ...[[debt size for each company - a[1,3] denotes the sum borrowed by company 1 from 3]]<br/>
      ...<br/>
a[n,1] a[n,2] a[n,3] ... a[n,n]<br/>
[empty line]<br/>
[next test case]<br/>
<br/> 
a graphical example <br/><br/>
<img src="http://www.spoj.pl/content/slyher:graf1.gif" alt="INPUT Graph"><br/> <br/>

*******OutputConstraints*******

<p>T[Size of solution]<br/>
a[1,1] a[1,2] a[1,3] ... a[1,n] <br/>
a[2,1] a[2,2] a[2,3] ... a[2,n]<br/>
      ...[[debt size for each company - a[1,3] denotes the sum borrowed by company 1 from 3]]<br/>
      ...<br/>
a[n,1] a[n,2] a[n,3] ... a[n,n]<br/>
[empty line]<br/>
[next solution]<br/>
<p/>
[All the output data should be integers.]
<br/>
Text grouped in [ ] does not appear in the input file.<br/>
<br/> 
a graphical example <br/><br/>
<IMG SRC="/content/slyher:graf2.gif" alt="OUTPUT Graph1"><br/><br/>
a graphical example- same input<br/><br/>
<IMG SRC="/content/slyher:graf3.gif" alt="OUTPUT Graph2"><br/><br/>

*******IOTestCases*******

<pre>
<b>Input:</b>
1
7
0 18 25 34 14 21 40 
44 0 64 0 11 5 24 
11 35 0 23 17 26 23 
19 50 20 0 16 7 0 
0 14 9 0 0 27 18 
42 5 17 8 3 0 17 
36 26 0 47 7 6 0 


<b>Output:</b>
7
0 10 0 0 0 0 0 
0 0 0 0 0 0 0 
0 12 0 0 0 6 3 
0 0 0 0 0 0 59 
0 0 0 0 0 0 29 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0
</pre>



______________________________________________________
HFLOOR||||||true||||||


<p>We are given a top view of a hotel floor, which is represented by an MxN matrix of characters, composed of (only) the following: </p>

<p>'#' is a Wall<br>
  '-' is Free Space<br>
  '*' is an occupied space (by a single person).<p>
 We are required to evaluate the average number of people living in a room.</p>
<p><strong>Constraints: </strong><br>
  M, N <= 100<br>

  Number of test-cases<= 10<br>
  All border edges of the map will be walls.<br>
There will be at least one room.</p>

*******InputConstraints*******
<p>
The 1st line contains the number of test inputs, with each test case consisting of:<br>
  M N<br>

  MxN matrix of characters</p>

*******OutputConstraints*******

<p>
  For each test case output a line with the average number of people living per room, rounded to <i>exactly</i> two decimal places.</p>

*******IOTestCases*******

<p><tt><strong>Input:</strong><br>
  2<br>
  5 5<br>

  #####<br>
  #**##<br>
  ###*#<br>
  #**##<br>
  #####<br>
  6 10<br>

  ##########<br>
  #---*--*##<br>
  ###-*----#<br>
  #**#######<br>
  ##***---##<br>
  ##########<br>
</tt>
</p>
<p><tt><strong>Output:</strong><br>
  1.67<br>
  4.00</tt></p>
<p></p>


______________________________________________________
FFARM||||||true||||||


<p>We visited a farm, which was barren except for certain points in
which fruit trees existed. In general it was true that only places with
palindromic indices contained fruit trees. We are required to buy a subregion of this farm of length at most L so that our aims (in the given
priority) are satisfied best.</p>

<p>1. Maximize the amount of fruit trees present in it.<br>
  2. Minimize the size (length) of the farm bought.<br>
  3. Select the farm whose beginning is leftmost.</p>

*******InputConstraints*******

<p>The 1st line contains the number of test cases, T<=20, each test case:<br>
  A B L<br>

where [A,B] is the closed interval of land which we visited.</p>

*******OutputConstraints*******

<p>  S E<br>
  where [S,E] is the closed interval of land which we buy.<br>
  If there is no fruit-tree in the visited interval, print "Barren Land."
</p>
<p><strong>Constraints: </strong><br>
  1<=A<=B<=1000</p>


*******IOTestCases*******

<tt>
<p><strong>Input:</strong><br>
  6<br>
  1 10 5<br>
  800 1000 5<br>
  80 120 5<br>
  30 60 12<br>

  12 18 40<br>
  23 30 10<br>
</p>
<p><strong>Output:</strong><br>
  1 5<br>
  808 808<br>
  99 101<br>

  33 44<br>
  Barren Land.<br>
  Barren Land.<br>
</p>
</tt>


______________________________________________________
JHNSN||||||true||||||


<p>Johnson's algorithm solves the all-pairs shortest path problem in a weighted, directed graph.


*******InputConstraints*******

<pre>
<i>t</i> [number of test graphs]

[description of each graph]
<i>n</i> [number of nodes, 1<=<i>n</i><=100]
<i>m</i> [number of edges, <i>m</i>>=0]
[next the list of edges, one edge per line]
<i>u v w</i> [<i>e(u,v)</i> - edge from node <i>u</i> to node <i>v</i> with weight <i>w</i>]
      [1<=<i>u</i><=n, 1<=<i>v</i><=n, -1000<=<i>w</i><=1000]
...   [next edge] 

[next graph]
...
</pre>


*******OutputConstraints*******

<p>If the <i>i</i>-th test graph has negative weight cycles, then the answer should be:
<pre><i>graph i no</i> [where '<i>i</i>' is the number of the graph, 1<=<i>i</i><=<i>t</i>]</pre>
<p>Otherwise you should output the following data:
<pre><i>graph i yes</i>

[vector of function h(v)]
<i>h<sub>1</sub> h<sub>2</sub> ... h<sub>n+1</sub></i>

[matrix <i>d[u,v]</i>, the solution of the all-pairs shortest path problem]
<i>d<sub>1,1</sub> d<sub>1,2</sub> ... d<sub>1,n</sub> 
d<sub>2,1</sub> d<sub>2,2</sub> ... d<sub>2,n</sub>
... ... ... ...
d<sub>n,1</sub> d<sub>n,2</sub> ... d<sub>n,n</sub></i>
[if the path doesn't exist, you should output # instead]</pre>


*******IOTestCases*******


<pre>
<b>Input:</b>
6

2
2
1 2 -2
2 1 1

6
8
1 2 8
1 6 6
6 2 3
2 3 -1
3 6 -2
6 5 -2
5 4 2
3 4 3

4
4
1 2 1
2 3 2
3 4 3
4 1 0

2
0

1
0

2
2
1 2 -1
2 1 0

<b>Output:</b>
graph 1 no

graph 2 yes

0 0 -1 -3 -5 -3 0

0 8 7 5 3 5
# 0 -1 -3 -5 -3
# 1 0 -2 -4 -2
# # # 0 # #
# # # 2 0 #
# 3 2 0 -2 0

graph 3 yes

0 0 0 0 0

0 1 3 6
5 0 2 5
3 4 0 3
0 1 3 0

graph 4 yes

0 0 0

0 #
# 0

graph 5 yes

0 0

0

graph 6 no

</pre>


______________________________________________________
MPOWER||||||false||||||

<table class="problems" width="99%"><tr  class="navigation">
<td><a href="/problems/MPOWER/polski/">Wersja polska</a></td> 
<td><a href="/problems/MPOWER/english/">English version</a></td> 
</tr></table>


<p>For a given numbers <i>x</i>, <i>y</i> and <i>n</i> calculate <p><center><i>x<sup>y</sup></i> mod <i>n</i>,</center></p> <p align=justify>i.e. a number <i>r</i> such that 0 <= <i>r</i> < <i>n</i> and <i>n</i> | (<i>x<sup>y</sup></i> - <i>r</i>).

______________________________________________________
PCV1||||||true||||||


<p>
<b>Problem 1</b> It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the <i>almost equilateral triangle</i> 5-5-6 has an area of 12 square units. We shall define an <i>almost equilateral triangle</i> to be a triangle for which two sides are equal and the third differs by no more than one unit. Find the sum of the perimeters of every <i>almost equilateral triangles</i> with integral side lengths and area and whose perimeters do not exceed one billion (1,000,000,000).
<BR><BR>
<b>Problem 2</b> If a box contains twenty-one coloured discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs, P(BB) = (15/21)*(14/20) = 1/2. The next such arrangement, for which there is exactly 50% chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs. By finding the first arrangement to contain over 10^12 = 1,000,000,000,000 discs in total, determine the number of blue discs that the box would contain.
<BR><BR>
<b>Problem 3</b> Consider the fraction, n/d, where n and d are positive integers. If n < d and HCF(n,d)=1, it is called a reduced proper fraction. If we list the set of reduced proper fractions for d <= 8 in ascending order of size, we get:
1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, <b>3/8</b>, <b>2/5</b>, <b>3/7</b>, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
It can be seen that there are 3 fraction between 1/3 and 1/2. How many fractions lie between 1/3 and 1/2 in the sorted set of reduced proper fractions for d <= 10,000?
<BR><BR>
<b>Problem 4</b> The series, 1^1 + 2^2 + 3^3+ ... + 10^10 = 10405071317. Find the last ten digits of the series, 1^1 + 2^2 + 3^3+ ... + 1000^1000
<BR><BR>
<b>Problem 5</b> The cube, 41063625 (345^3), can be permuted to produce two other cubes: 56623104 (384^3) and 66430125 (405^3). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube. Find the smallest cube for which exactly five permutations of its digits are cube.
<BR><BR>
<b>Problem 6</b> Euler's Totient function, phi(n), is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, phi(9) = 6. Interestingly, phi(87109) = 79180,and it can be seen that 87109 is a permutation of 79180. Find the value of n, below ten million, for which phi(n) is a permutation of n and the ratio n/phi(n) - produces a minimum.
<BR><BR>
<b>Problem 7</b> The prime 41, can be written as the sum of six consecutive primes:
41 = 2 + 3 + 5 + 7 + 11 + 13
This is the longest sum of consecutive primes that adds to a prime below one-hundred. The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953. Which prime, below one-million, can be written as the sum of the most consecutive primes? (Integer 1 isn't prime)
<BR><BR>
<b>Problem 8</b> 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145. Find the sum of all numbers which are equal to the sum of the factorial of their digits. Note: as 1! = 1 and 2! = 2 are not sums they are not included.
<BR><BR>
<b>Problem 9</b> A permutaion is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
012, 021, 102, 120, 201, 210
What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
<BR><BR>
<b>Problem 10</b> By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles. Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution.
<BR><BR>


*******InputConstraints*******

<p> There is no input for this problem.
 

*******OutputConstraints*******

<p> Output answer as the set of lines. On each line first is number of problem and second is answer for this problem. If any of answers will be incorrect, you'll recieve Wrong Answer.
</p>


*******IOTestCases*******


<b>Output:</b>

<pre>
1 6174046
2 6568127473
5 806257
8 51146700
</pre>

<p>It's just the example how output would look like. If all 4 answers correct (1, 2, 5 and 8 problems), you'll recieve 4 points.</p>


______________________________________________________
LOTTERY||||||true||||||


<p>Byteland organizes this year's Soccer World Cup. Because of the mismanagement of the organizing team almost all tickets are sold out. But one radio station still has some tickets which will be raffled. Specifically, the radio station has announced a telephone game, where participants can choose a number between 1 and 1.000.000.000, and after each day the person who has chosen the k<sup>th</sup> smallest number will win one ticket. A special rule is in place which disallows people to choose a number which was already  chosen by someone else (in this case the person is asked to choose another number).</p>
<p>Martin, a fanatic soccer fan without tickets, bribed Robert H., an employee of the radio station, by promising small gifts for telling him a current winning number: "A fine basket with specialities from the black forest, including some really good sausages, ham and - hold on to your seat - a  wonderful KuKuClock! And a beer mug, too! Do I leave you any choice???"</p>
<p>Now Robert is in trouble and asks you if you can write a program which will tell him the k<sup>th</sup> smallest number at any time of the game.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input consists of the number of test cases to follow. Each test case starts with a line containing the number of telephone calls <strong>c</strong> (1 &le; c &le; 500000) followed by the number <strong>k</strong> (1 &le; k &le; min(c,100000)). The following <strong>c</strong> lines specify the chosen numbers in chronological order of the phone calls. You can assume that all chosen numbers are unique, except the number 0 which indicates that Martin called and asked for the current k<sup>th</sup> smallest number.</p>

*******OutputConstraints*******

<p>For each line in the input with a zero print a line with the current k<sup>th</sup> smallest number (or -1 if there are currently less than k chosen numbers).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2 1
1337
0
7 2
4711
0
4
0
210706
3
0
<strong>Output:</strong>
1337
-1
4711
4
</pre>


______________________________________________________
ADOMINO||||||true||||||


<p><a target=_blank href="http://en.wikipedia.org/wiki/Dominoes">Dominoes</a> have long entertained both game enthusiasts and programmers for quite some time.  Many games can be played with dominoes, including multiplayer and single player games.  Hari Khan has come up with a single player game.  He takes <b>N</b> boxes and arranges them in a row at positions <b>N<sub>1</sub></b>, <b>N<sub>2</sub></b> ... <b>N<sub>N</sub></b>.  Now he has to place <b>D</b> dominoes (<b>D</b> <= <b>N</b>) in the boxes such that the minimum distance between any two filled boxes is maximized.</p>


*******InputConstraints*******

<p>The first line of the input contains an integer <b>t</b>, the number of test cases.  <b>t</b> test cases follow.</p>

<p>The first line of each test case consists of two integers, <b>N</b> <= 100000 and <b>D</b> <= <b>N</b>, separated by a single space.</p>

<p><b>N</b> lines follow, each containing a single integer <b>N<sub>i</sub></b> <= 1000000000, indicating the location of the i<sup>th</sup> box.</p>


*******OutputConstraints*******

<p>For each test case, output a single line containing a single integer denoting the largest minimum distance achievable between any two boxes with dominoes.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
5 3
1
2
3
4
5

<b>Output:</b>
2
</pre>



______________________________________________________
SNOWMAN||||||true||||||


<p>Finally the time of the year has come where children can build snowmans. The children have collected some snow and ask you how big the snowman is going to be.</p>
<p>Assume that the snowman will consist of three spheres stacked on top of each other. The lower two spheres are of equal size, the smaller sphere (used for the head) will have a radius of 25 percent of the radius of the larger spheres.</p>


*******InputConstraints*******

<p>The first line of the input contains a number <b>t</b> &#8804; 100, which indicates the number of test cases to follow. Each test case consists of a line with one integer <b>a</b> &#8804; 500000, the amount of snow in cm<sup>3</sup>.
</p>

*******OutputConstraints*******

<p>For each test case, print a line with the height of the snowman in cm. Round this number down to the next smaller integer.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
100
500000

<b>Output:</b>
10
175
</pre>



______________________________________________________
NIMGAME||||||true||||||


<p>In this variant of the Nim game, a pile of <strong>N</strong> stones is placed between two players. The players take alternating turns and remove some stones. The player who takes the last stone wins.</p>
<p>There are two restrictions however:
<ol>
<li>The first player has to remove between 1 and <strong>N</strong>-1 stones.</li>
<li>After the first move, the next player has to remove between 1 and 2&#183;<strong>k</strong> stones, where <strong>k</strong> is the number of stones removed in the last move.</li>
</ol>
<p>
If both players play perfectly, then it is possible to determine which player will win the game.
Note that during the game the game state can be described by the number of remaining stones and the number of stones which can be taken in the next move. Each game state is either a winning position or a losing position.
</p>
<p>
You have to determine for which values of <strong>N</strong> (2 &#8804; <strong>N</strong> &#8804; 2000) the second player has a winning strategy.
</p>

*******InputConstraints*******

<p>There is no input for this problem.


*******OutputConstraints*******

<p>Print the values <strong>N</strong> for which the second player has a winning strategy.


*******IOTestCases*******


<pre>
<b>Output:</b>
2
3
5
...
1597
</pre>
<p>
Obviously, the example output is incomplete and shows only the first three values and the last value to be printed.
</p>


______________________________________________________
RECEQU||||||true||||||


<p>Many problems have solutions involving linear recurrence equations of the form <strong>f(n) = a &#183; f(n-1) + b &#183; f(n-2) (n &#8805; 2)</strong>. Usually the coefficients <strong>a</strong> and <strong>b</strong> are between 0 and 10, so it would be useful to have a program which checks if some given values can be produced by such a recurrence equation. Since the growth of the values <strong>f(n)</strong> can be exponential, we will consider the values modulo some integer constant <strong>k</strong>.
</p>
<p>
More specifically you will be given <strong>f(0)</strong>, <strong>f(1)</strong>, <strong>k</strong> and some value pairs (<strong>i</strong> , <strong>x<sub>i</sub></strong>), where <strong>x<sub>i</sub></strong> is the remainder of the division of <strong>f(i)</strong> by <strong>k</strong>.
</p>
<p>
You have to determine coefficients <strong>a</strong> and <strong>b</strong> for the recurrence equation <strong>f</strong> such that for each given value pair (<strong>i</strong>, <strong>x<sub>i</sub></strong>) the equation <strong>x<sub>i</sub> = f(i) mod k</strong> holds.
</p>
<h3>Hints</h3>
<p>
You can write the recurrence equation as follows:<br>
<img width="197" height="48" align="middle" border="0" src="/content/ak15:recequ1.jpg"
alt="<pre>
(a b) (f(n-1)) =( f(n) )
(1 0) (f(n-2))  (f(n-1))
</pre>">
<p>
Let
<img width="68" height="48" align="middle" border="0" src="/content/ak15:recequ2.jpg"
alt="<pre>
      (a b)
A :=  (1 0)
</pre>">
</p>
<p>
Then, <img width="163" height="48" align="middle" border="0" src="/content/ak15:recequ3.jpg"
alt="A<sup>n</sup> &#183; (f(1),f(0))<sup>T</sup> = (f(n+1),f(n))<sup>T</sup>">.
These equations also apply if everything is calculated modulo <strong>k</strong>.
To speed up the calculation of A<sup>n</sup>, the identity A<sup>n</sup> = (A<sup>n div 2</sup>)<sup>2</sup> &#183; A<sup>n mod 2</sup> may be used. Also, (a &#183; b) mod c = ((a mod c) &#183; (b mod c)) mod c.
</p>

*******InputConstraints*******

<p>The first line of the input contains a number <strong>T &#8804; 20</strong> which indicates the number of test cases to follow.
</p>
<p>Each test case consists of 3 lines.
The first line of each test case contains the three integers <strong>f(0)</strong>, <strong>f(1)</strong> and <strong>k</strong>, where <strong>2 &#8804; k &#8804; 10000</strong> and <strong>0 &#8804; f(0),f(1) < k</strong>. The second line of each test case contains a number <strong>m &#8804; 10</strong> indicating the number of value pairs in the next line. The third line of each test case contains <strong>m</strong> value pairs (<strong>i,x<sub>i</sub></strong>), where <strong>2 &#8804; i &#8804; 1000000000</strong> and <strong>0 &#8804; x<sub>i</sub> < k</strong>.


*******OutputConstraints*******

<p>For each test case print one line containing the values <strong>a</strong> and <strong>b</strong> separated by a space character, where <strong>0 &#8804; a,b &#8804; 10</strong>.
You may assume that there is always a unique solution.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 1 1000
3
2 2 3 3 16 597
0 1 10000
4
11 1024 3 4 1000000000 4688 5 16

<b>Output:</b>
1 1
2 0
</pre>



______________________________________________________
RLDEC||||||true||||||


<p>Your task is to write a program that decodes a sequence of characters which was encoded using a simple form of run-length encoding, as described by the rules below.  </p> <p>Any sequence of between 2 to 9 identical characters is encoded by two characters. The first character is the length of the sequence, represented by one of the characters 2 through 9. The second character is the value of the repeated character. A sequence of more than 9 identical characters is dealt with by first encoding 9 characters, then the remaining ones. </p> <p> Any sequence of characters that does not contain consecutive repetitions of any characters is represented by a 1 character followed by the sequence of characters, terminated with another 1. If a 1 appears as part of the sequence, it is escaped with a 1, thus two 1 characters are output. </p> 
*******InputConstraints*******
 <p>The first line in the input contains a number <b>T &#8804; 200</b> which specifies the number of test cases to follow. Each test case consists of one line with the encoding of a sequence of characters. Each line consists of letters (both upper- and lower-case), digits, spaces, and punctuation and is terminated with a newline character. No other characters appear in the input. You may assume that each line is a valid encoding of some sequence of characters. 
*******OutputConstraints*******
 <p>For each line in the input print one line with the decoded sequence of characters. 
*******IOTestCases*******

<pre>
<b>Input:</b>
3
9A1ABC131
1112 3124
111111

<b>Output:</b>
AAAAAAAAAABC111
12 344
11
</pre>


______________________________________________________
COUNTISL||||||true||||||


<p>You are given a simple map of an archipelago. Can you determine how many islands it shows?
</p>
<p>The map consists of grid squares with characters, where '#' indicates land and '.' indicates water. Two land squares belong to the same island if they are neighbouring grid squares, which means their x coordinates and y coordinates differ by at most 1.
</p>

*******InputConstraints*******

<p>The first line of the input contains a number <strong>T</strong> &#8804; 20 which indicates the number of test cases to follow.
</p>
<p>Each test case starts with a line containing two numbers <strong>n</strong> and <strong>m</strong> (1 &#8804; <strong>n,m</strong> &#8804; 200), the number of rows and the number of columns of the grid, respectively. The following <strong>n</strong> lines contain <strong>m</strong> characters each and describe the map to be processed. You may assume that the map contains only characters '#' and '.', and that the border of the map consists only of water (character '.').
</p>

*******OutputConstraints*******

<p>For each test case print in a line the number of islands shown on the corresponding map in the input.

*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 1
.
6 4
....
..#.
.#..
....
.##.
....

<b>Output:</b>
0
2
</pre>



______________________________________________________
CZ_PROB2||||||true||||||


<p>
Find the sum of the factors of a number including 1 and the given number.


*******InputConstraints*******

<p>
Number of test cases T followed by T lines of number n.<br>
0 < T <= 5000 <br>
0 < n <= 999999999 <br>

<I>Note: The number will not have a very large prime factor.</I>


*******OutputConstraints*******

<p>
The sum of the factors for each test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
6
5
<b>Output:</b>
12
6
</pre>



______________________________________________________
CZ_PROB3||||||true||||||


<p>
Two Ping Pong players agree to play several games. The players are evenly matched. However, the person serving first has a probability p of winning that game. A serves the first game and thereafter the loser serves first. What is the Probability that A wins the nth game?


*******InputConstraints*******

<p>
Number of test cases T followed by T lines of 'n' - the number of games played; and 'p' probability of person serving first winning.
<br>
0 < T < 100 <br>



*******OutputConstraints*******

<p>
Print for each test case the probability of A winning.<br>
Please print a <I>double</I> value.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
4 0.7
7 0.7

<b>Output:</b>
0.4872
0.500819

</pre>



______________________________________________________
CZ_PROB4||||||true||||||


<p>

Into how many parts can k cuts using an n-1 dimensional hyper-plane divide an n- dimensional hypercube? <br><br>

<I>Hint: Experiment with n=2, n=3 find a pattern </I><br>

Eg: n=3, k=5  => dividing a cube with 5 cuts using planes.


*******InputConstraints*******

<p>T, number of test cases followed by T lines of 'n' and 'k'.


*******OutputConstraints*******

<p>The number of parts in separate lines for each of 'T' test cases.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
14 20
6 23

<b>Output:</b>
1026876
145499

</pre>



______________________________________________________
CZ_PROB7||||||true||||||


<p>
An array of numbers ( N1, N2, N3&#8230; Nn) is given. The numbers are to be placed on a circle such that the sum of any two adjacent numbers is not divisible by a number in the set of Numbers V1, V2 ,V3...Vk . Write a function, that given N and V determines if such an arrangement exists.


*******InputConstraints*******

<p>
T, the number of test-cases.<br>
For each test case: 
Input array size of N, 'n' and array size of V, 'k'. This is followed by one line of values of array N (separated by spaces) and then one line of values of array 'V'(separated by spaces).


*******OutputConstraints*******

<p>
For each test case print "yes" or "no" on a separate line.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
9
3
1 2 3 4 5 6 7 8 9
3 5 7
9
3
1 2 3 4 5 6 7 8 9
1 2 3

<b>Output:</b>
yes
no

</pre>



______________________________________________________
PCV2||||||true||||||


<p>
<b>Problem 1</b> How many consecutive positive integers can you find, such that the sum of digits (in decimal representation) of each of them is not divisible by 13?<BR>
Note: Because 49 is the first number for which the sum of digits divisible by 13, so for instance integers from 1 to 48 satisfy the condition.
<BR><BR>
<b>Problem 2</b> You can find the solution in this file: <a 

href="/ZFUN07/content/answer.zip">answer.zip</a>
<BR><BR>
<b>Problem 3</b> Find the answer in this picture: <BR><BR> <center><img 

src="/ZFUN07/content/StrangePicture.png" alt="Find the Answer"></center>
<BR>
<p>
<b>Problem 4</b> When looking at a number from left-to-right, if no digit is smaller than the digit to its left, then the number is called <em>increasing</em>; for example, 125589.<BR><BR>

Similarly if no digit is smaller than the digit to its right, the number is called <em>decreasing</em>; for example, 995421. <BR><BR>

We shall call a positive integer that is neither increasing nor decreasing a "bouncy" number; for example, 64783.
<BR><BR>
Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the smallest number for which the proportion of bouncy numbers first exceeds 50% is 538. Bouncy number become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.<BR><BR>
Find the least number for which the proportion of bouncy numbers is exactly 99%.
<BR><BR>

<b>Problem 5</b> The radical of n, rad(n) - is the product of distinct prime factors of n. 
For example, 1008 = 2^4*3^2*7 , so rad(1008) = 2*3*7 = 42.<BR><BR>
If we calculate rad(n) for 1 <= n <= 10, then sort them with respect to rad(n), breaking ties by sorting with respect to the value of n, we get:<BR><BR>

Unsorted:<BR>
<i>n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10<BR>
rad(n) = 1, 2, 3, 2, 5, 6, 7, 2, 3, 10<BR><BR></i>

Sorted:<BR>
<i>n = 1, 2, 4, 8, 3, 9, 5, 6, 7, 10<BR>
rad(n) = 1, 2, 2, 2, 3, 3, 5, 6, 7, 10<BR>
k = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10  <BR><BR></i>

Let E(k) be the kth element in the sorted n column; for example, E(4) = 8 and E(6) = 9.<BR><BR>

If rad(n) is sorted for 1 <= n <= 100000, find E(10000).
<BR><BR>

<b>Problem 6</b> 
Consider the infinite polynomial series: AF(x) = x*F(1) + x^2*F(2) + x^3*F(3) + ..., 
where F(k) is the kth term in the Fibonacci sequence: 1, 1, 2, 3, 5, 8, ...,
that is, F(1) = 1; F(2) = 1; F(k) = F(k-1) + F(k-2).<BR><BR>

For this problem we shall be interested in values of x for which AF(x) is a positive integer.<BR><BR>

Surprisingly AF(1/2) = 1/2 + 1/4 + 2/8 + 3/16 + 5/32 + ... = 2<BR><BR>

The corresponding values of x for the first five natural numbers are shown below:<BR><BR>

1) x = sqrt(2)-1 AF(x) = 1<BR>
2) x = 1/2 AF(x) = 2<BR>
3) x = (sqrt(13)-2)/3 AF(x) = 3<BR>
4) x = (sqrt(89)-5)/8 AF(x) = 4<BR>
5) x = (sqrt(34)-3)/5 AF(x) = 5<BR><BR>

We shall call AF(x) a golden nugget if x is rational, because they become increasingly rarer; for example, the 10th golden nugget is 74049690.<BR><BR>

Find the 15th golden nugget.
<BR><BR>

<b>Problem 7</b>
Euler's totient function F(n) is defined as the number of positive integers not exceeding n that are relatively prime to n, where 1 is counted as being relatively prime to all numbers.  So, for example, F(20) = 8, 

because the eight integers 1, 3, 7, 9, 11, 13, 17, and 19 are relatively prime to 20.  The table below shows values of F(n) for the first 10 integers:<BR><BR><i> F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 2, F(5) = 4,<BR> F(6) = 2, F(7) = 6, F(8) =  4, F(9) = 6, F(10) = 4</i><BR><BR>

Euler's totient valence function v(n) is defined as the number of positive integers k such that F(k) = n. For instance, v(8) = 5 because only the five integers k = 15, 16, 20, 24, and 30 are such that F(k) = 8. The table below shows values of v(n) for n <= 16. (For n not in the table, v(n) = 0).<BR><BR>

<table cellpadding=2 cellspacing=2 border=1>
<tr><td>n</td><td>v(n)</td><td>k such that F(k)=n</td></tr>
<tr><td>1</td><td>2</td><td>1, 2</td></tr>
<tr><td>2</td><td>3</td><td>3, 4, 6</td></tr>
<tr><td>4</td><td>4</td><td>5, 8, 10, 12</td></tr>
<tr><td>6</td><td>4</td><td>7, 9, 14, 18</td></tr>
<tr><td>8</td><td>5</td><td>15, 16, 20, 24, 30</td></tr>
<tr><td>10</td><td>2</td><td>11, 22</td></tr>
<tr><td>12</td><td>6</td><td>13, 21, 26, 28, 36, 42</td></tr>
<tr><td>16</td><td>6</td><td>17, 32, 34, 40, 48, 60</td></tr>
</table>
<BR>

Evaluate v(2^1000).
<BR><BR>

<b>Problem 8</b>
In how many ways can 50! be expressed as a sum of two or more consecutive positive integers?
<BR><BR>

<b>Problem 9</b>
Imagine you have a crystal in the shape of an equilateral triangle, one unit long on each side. In the right conditions, the crystal starts to grow. After one minute, two sides grow from each side of the triangle that are perfectly symmetrical. The result is a six-pointed star, that has sides that are exactly 1/3 of the length of the side they grew from. After another minute, each side sprouts two more sides that are exactly 1/3 of the length of the side they came from. See the pictures to get a better idea:<BR><BR>
<center>
<img src="http://www.spoj.pl/ZFUN07/content/ZPCV2_0001.gif">   <img 

src="/ZFUN07/content/ZPCV2_0002.gif"><BR>
<img src="http://www.spoj.pl/ZFUN07/content/ZPCV2_0003.gif">   <img 

src="/ZFUN07/content/ZPCV2_0004.gif"><BR> 
<img src="http://www.spoj.pl/ZFUN07/content/ZPCV2_0005.gif">   <img 

src="/ZFUN07/content/ZPCV2_0006.gif"><BR>
<img src="http://www.spoj.pl/ZFUN07/content/ZPCV2_0007.gif">   <img 

src="/ZFUN07/content/ZPCV2_0008.gif"><BR>
</center>
<p>Your challenge is to find the perimeter (rounded to the nearest whole number) after one hour, thirty-three minutes.
<BR><BR>

<b>Problem 10</b>
One more picture:<BR><BR>
<center><img src="http://www.spoj.pl/content/turbo:032948.gif" alt="Number 758932"></center>
<BR>


*******InputConstraints*******

<p> There is no input for this problem.
 

*******OutputConstraints*******

<p> Output the answer as a set of lines. In each line first give the number of the problem and then the answer to this problem. If any of the answers are incorrect, you will receive Wrong Answer.
</p>


*******IOTestCases*******


<p><b>Output:</b>

<pre>
1 6174046
2 AnsweR
5 806257
8 51146700
</pre>

<p>It's just the example of what the output should look like. If all 4 answers are correct (problems 1, 2, 5 and 8), you will recieve 4 points.</p>


______________________________________________________
EASUDOKU||||||true||||||


<p>You are to solve the classic 9x9 sudoku problem.


*******InputConstraints*******

<p>The first line contains only one number - number of test cases (more than 1 and less then 15).
Than the test cases are given. Each of them is given by 81 numbers (from 0 to 9) seperated by single white space (new line after each 9th number). Zero means that it is to solve by your program.


*******OutputConstraints*******

<p>In case of there does not exist the solution write "No solution". If there exist 81 number beeing the solution of sudoku problem, you have to write all those 81 numbers (separated like in input).


*******IOTestCases*******


<pre>
<b>Input:</b>
2
0 0 0 0 6 9 8 3 0
9 8 0 0 0 0 0 7 6
6 0 0 0 3 8 0 5 1
2 0 5 0 8 1 0 9 0
0 6 0 0 0 0 0 8 0
0 9 0 3 7 0 6 0 2
3 4 0 8 5 0 0 0 9
7 2 0 0 0 0 0 6 8
0 5 6 9 2 0 0 0 0

0 0 0 0 6 9 8 3 0
9 8 0 0 0 0 0 7 6
6 0 0 0 3 8 0 5 1
2 0 5 4 8 1 0 9 0
0 6 0 0 0 0 0 8 0
0 9 0 3 7 0 6 0 2
3 4 0 8 5 0 0 0 9
7 2 0 0 0 0 0 6 8
0 5 6 9 2 0 0 0 0

<b>Output:</b>
5 1 2 7 6 9 8 3 4
9 8 3 5 1 4 2 7 6
6 7 4 2 3 8 9 5 1
2 3 5 6 8 1 4 9 7
1 6 7 4 9 2 3 8 5
4 9 8 3 7 5 6 1 2
3 4 1 8 5 6 7 2 9
7 2 9 1 4 3 5 6 8
8 5 6 9 2 7 1 4 3
No solution
</pre>



______________________________________________________
TREE3||||||true||||||


<p>Network is becoming more and more important in the modern times. There are hundreds million of people studying,researching and playing with the Internet. However, we can't forget that there will be a lot of cost when the network is running. So charging from the users is necessary and of course reasonable.</p>
<p>The very very famous Southern Moutain high School in the City of Soft Sheep has such a network of education. There are 2^N users in total, which are numbered 1,2,3...2^N . These users are connected by routers and cables.</p>
<p>Users,routers,cables make a Full Binary Tree together. Each leaf(colored white) of the tree denotes a user,each non-leaf node(colored gray) denotes a router,each edge denote a cable,see the following picture.</p>
<img src="http://www.spoj.pl/content/john_jones:tree3A.jpg">
<p>The charge mode of the network company in the city of Soft Sheep is quite strange, so called "Pairing Charging". It means that they charge from each two users i and j (1 <= i < j <= 2^N ). Users can choose one mode of charge among A and B by themselves,so the cost that the company charge from the great school is relative to the mode of charging by each user. The total cost equals to the sum of the cost of each pair of users.</p>
<p>Some definations:</p>
<div align="justify">
       <ul>
               <li>
               <b>Ancestor</b>:The root of the tree has no Ancestor,each ancestor of some other node Ancestors are father of this node and the father's Ancestor.
               <li>
	           <b>dominated Leaf</b>:The leaves dominate nothing,the leaves dominated by one non-leaf node are all the leaves dominated by the left and right child of this node.
	           <li>
	           <b>Dist</b>:The shortest path between each pair of nodes in the tree.</li>
	   </ul>
</div>
<p>For each pair of users i,j(1 <= i < j <= 2^N),first we find the LCA(Least Common Ancestor) of the two node named P,then let's consider the Donimated Leaves of P(the users assign to P). We define nA,nB denoted the number of users choose A and B to charge in these Donimated Leaves.</p>
<p>Charging is following the rule below:(in the rule,F(i,j) denotes the flux between i and j and will be given.)</p>
<img src="http://www.spoj.pl/content/john_jones:tree3B.jpg">
<p>Since the total cost is relative to the mode of charging,the users in the great Southern Moutain School hope to minimize the cost by changing the way of charging.However,the company has recorded the mode that each user choosed when they registered.So for each user i,if he/she wants to change the mode of charging,(change from mpde A to mode B,or change from mode B to mode A),he/she must pay $Ci to the company to modify the record.</p>
<p>Your task is: </p>
<p>Given the mode the users chosen when they registered,and Ci,decide the mode to charge of each user to minimize the total cost(the cost of changing mode + the sum of the cost of the Pairing Charging).

*******InputConstraints*******

<pre>
T [The number of test cases]
N [N<=10]
D1 D1 D2 ... DM [M=2^N, Di=0 iff the mode user i chosen when he/she registerd is A and Di=1 otherwise.]
C1 C1 C2 ... CM [the cost of changing the mode of each user,0<=Ci<=500000]
F(1,2) F(1,3) ... F(1,M)
F(2,3) F(2,4) ... F(2,M)
...
F(M-2,M-1) F(M-2,M)
F(M-1,M)
[The table above is the flux table description,0<=F(i,j)<=500]
[other tests]
</pre>

*******OutputConstraints*******

<pre>
TheMinCost
[other tests]
</pre>

*******IOTestCases*******

<pre><b>Sample Input:</b>
1
2
1 0 1 0
2 2 10 9
10 1 2
2 1
3

<b>Sample Output:</b>
8

<b>Hints:</b>
<p>Change the mode of the first user from mode B to mode A.</p>
</pre>



______________________________________________________
ANNOYING||||||false||||||

<p>
Maybe you wonder what an annoying painting tool is?
First of all, the painting tool we speak of supports only
black and white. Therefore, a picture consists of
a rectangular area of pixels, which are either black or
white.
Second, there is only one operation how to
change the colour of pixels:
</p>
<p>
Select a rectangular area of <strong>r</strong> rows and
<strong>c</strong> columns of pixels, which is completely
inside the picture. As a result of the operation, each
pixel inside the selected rectangle changes its colour
(from black to white, or from white to black).
</p>
<p>Initially, all pixels are white. To create a picture,
the operation described above can be applied several
times. Can you paint a certain picture which you have in
mind?</p>

<h4>Input Specification</h4>
<p>
The input contains several test cases.
Each test case starts with one line containing four integers
<strong>n</strong>, <strong>m</strong>, <strong>r</strong> and <strong>c</strong>.
(<i>1 &#8804; r &#8804; n &#8804; 100, 1 &#8804; c &#8804; m &#8804; 100</i>),
The following <strong>n</strong> lines each describe one row of pixels 
of the painting you want to create. The <strong>i<sup>th</sup></strong>
line consists of <strong>m</strong> characters describing the desired
pixel values of the <strong>i<sup>th</sup></strong> row in the finished
painting ('0' indicates white, '1' indicates black).
</p>
<p>
The last test case is followed by a line containing four zeros.
</p>
<h4>Output Specification</h4>
<p>
For each test case, print the minimum number of operations needed
to create the painting, or -1 if it is impossible.
</p>
<h4>Sample Input</h4>
<pre>3 3 1 1
010
101
010
4 3 2 1
011
110
011
110
3 4 2 2
0110
0111
0000
0 0 0 0
</pre>
<h4>Sample Output</h4>
<pre>4
6
-1
</pre>




______________________________________________________
BLACK||||||false||||||

<p>You are visiting the Centre Pompidou which contains a lot of modern
paintings.
In particular you notice one painting which consists solely of black
and white
squares, arranged in rows and columns like in a chess board (no two
adjacent
squares have the same colour). By the way, the artist did not use the
tool of problem A to create the painting.</p>
<p>Since you are bored, you wonder how many <i>8 Ã— 8</i>
chess boards are embedded within this
painting. The bottom right corner of a chess board must always be white.</p>

<h4>Input Specification</h4>
<p>
The input contains several test cases.
Each test case consists of one line with three integers
<strong>n</strong>, <strong>m</strong> and <strong>c</strong>.
(<i>8 &#8804; n, m &#8804; 40000</i>), where <strong>n</strong> is the number of
rows of the painting, and <strong>m</strong> is the number of columns
of the painting. <strong>c</strong> is always <i>0</i> or <i>1</i>,
where <i>0</i> indicates that the bottom right corner of the painting
is black, and <i>1</i> indicates that this corner is white.
</p>
<p>
The last test case is followed by a line containing three zeros.
</p>
<h4>Output Specification</h4>
<p>
For each test case, print the number of chess boards embedded
within the given painting.
</p>
<h4>Sample Input</h4>
<pre>8 8 0
8 8 1
9 9 1
40000 39999 0
0 0 0
</pre>
<h4>Sample Output</h4>
<pre>0
1
2
799700028
</pre>


______________________________________________________
DELI||||||false||||||

<p>Mrs. Deli is running the delicatessen store "Deli Deli".
Last year Mrs. Deli has decided to expand her business and build up an
online store. She has hired a programmer who has implemented the
online store.
</p>
<p>
Recently some of her new online customers complained about the
electronic bills. The programmer had forgotten to use the plural form
in case that an item is purchased multiple times. Unfortunaly the
programmer of Mrs. Deli is on holiday and now it is your task to
implement this feature for Mrs. Deli. Here is a description how
to make the plural form:
</p>
<ol>
  <li>If the word is in the list of irregular words replace it with the
given plural. </li>
  <li>Else if the word ends in a consonant followed by "y", replace "y" with "ies".</li>
  <li>Else if the word ends in "o", "s", "ch", "sh" or "x", append "es" to the word.</li>
  <li>Else append "s" to the word.</li>
</ol>
<h4>Input Specification</h4>
<p>The first line of the input consists of two integers
<b>L</b> and <b>N</b> (<i>0 &#8804; L &#8804; 20</i>, <i>1 &#8804; N &#8804; 100</i>).
The following <b>L</b> lines contain
the description of the irregular words and their plural form.
Each line consists of two words separated by a space character,
where the first word is the singular, the second word the plural
form of some irregular word.
After the list of irregular words, the following
<b>N</b> lines contain one word each, which you have to
make plural. You may assume that each word consists of at most
20 lowercase letters from the english alphabet ('a' to 'z').
</p>
<h4>Output Specification</h4>
<p>Print <b>N</b> lines of output, where the <b>i<sup>th</sup></b>
line is the plural form of the <b>i<sup>th</sup></b> input word.
</p>
<h4>Sample Input</h4>
<pre>3 7
rice rice
spaghetti spaghetti
octopus octopi
rice
lobster
spaghetti
strawberry
octopus
peach
turkey
</pre>
<h4>Sample Output</h4>
<pre>rice
lobsters
spaghetti
strawberries
octopi
peaches
turkeys
</pre>


______________________________________________________
DETER||||||true||||||


<p>In this problem you have to calculate the determinant of an N x N matrix whose entries are given by <b>m[i][j] = gcd(i,j)</b>, 1 &#8804; i,j &#8804; N.<br /><br />
Here gcd(i,j) denotes the greatest common divisor of i and j.<br /><br />
As the determinant D can grow very large, you have to print D%1000003.


*******InputConstraints*******

<p>First line of input consists of a single integer containing the number of test cases T ( equal to around 500000), each of the following T lines contain an integer N the size of the matrix. N lies between 1 and 2000000 ( both inclusive ).


*******OutputConstraints*******

<p>One line corresponding to each test case containing the determinant modulo 1000003 for the corresponding test case.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1
3
5

<b>Output:</b>
1
2
16
</pre>


______________________________________________________
MKBOOK||||||true||||||


<p>A printer &#8211; who still uses moveable type &#8211; is preparing to print a set of pages for a book. These pages are to
be numbered, as usual. The printer needs to know how many instances of each decimal digit will be required
to set up the page numbers in the section of the book to be printed.

<p><p>
For example, if pages 10, 11, 12, 13, 14 and 15 are to be printed, computing the number of digits is relatively
simple: just look at the page numbers that will appear, and count the number of times each digit appears.
The digit 0 appears only once, the digit 1 appears 7 times, the digits 2, 3, 4 and 5 each appear once, and 6,
7, 8 and 9 don&#8217;t appear at all.

<p><p>
Your task in this problem is to provide the printer with the appropriate counts of the digits. You will be
given the numbers of the two pages that identify the section of the book to be printed. You may safely
assume that all pages in that section are to be numbered, that no leading zeroes will be printed, that page
numbers are positive, and that no page will have more than three digits in its page number.


*******InputConstraints*******

<p>There will be multiple cases to consider. The input for each case has two integers, <i>A</i> and <i>B</i>, each of which
is guaranteed to be positive. These identify the pages to be printed. That is, each integer <i>P</i> between <i>A</i> and
<i>B</i>, including <i>A</i> and <i>B</i>, is to be printed. A single zero will follow the input for the last case.


*******OutputConstraints*******

<p>For each input case, display the case number (1, 2, &#8230;) and the number of occurrences of each decimal digit
0 through 9 in the specified range of page numbers. Display your results in the format shown in the
examples below.


*******IOTestCases*******


<pre>
<b>Input:</b>
10 15
912 912
900 999
0

<b>Output:</b>
Case 1: 0:1 1:7 2:1 3:1 4:1 5:1 6:0 7:0 8:0 9:0
Case 2: 0:0 1:1 2:1 3:0 4:0 5:0 6:0 7:0 8:0 9:1
Case 3: 0:20 1:20 2:20 3:20 4:20 5:20 6:20 7:20 8:20 9:120
</pre>



______________________________________________________
CLIQSEP||||||false||||||

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>The Clique Problem</TITLE>
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Problem</A></FONT></H2>

<P>Let <b>G</b> be the set of di-graphs with <b>n</b> nodes, <b>m</b> edges and maximum clique (complete subgraph) size of <b>k</b> nodes, 
determine whether it is possible to divide every element of <b>G</b>  into two disjoint sets of nodes, such that the largest 
size of a clique contained in one set is equal to the largest size of a clique contained in the other set.<p>


</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
Each line of input has <b>n <= 1000 , m <= 1000000 , k <= n </b>, listed in that order.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input, output "yes" if it is possible, "no" if it is not possible.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
10 99 8
9 80 3
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
yes
no
</PRE>
</BODY>
</div>
<br />

<hr size="1" />
Problemsetter ---  Chen, Xiaohong
</HTML>



______________________________________________________
PAINTPOI||||||false||||||

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Painting Points</TITLE>
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>


<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Problem</A></FONT></H2>

<P>Two players play the following game.  The first player paints a point on the plane red.
The second player paints <b>k</b> uncoloured points on the plane green.  The first
player paints an uncoloured point on the plane red.  The second player paints <b>k</b> uncoloured points on 
the plane green.  And so on.  The first player wins if there are three red points which
form an equilateral triangle.  The second player wins if it is not possible within a finite number of moves.  Assume he plays prefectly to prevent or delay the first player from winning.  Given <b>k</b>, determine the minimum number of moves it takes for the first player to force a win.  If it's not possible for the first player to win, output <b>-1</b>.
<p>


</U></U><H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">The Input</A></FONT></H2>
<P>
Each line of input has an even integer k, <b>0 < k <= 1000000</b>.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001004000000000000000">The Output</A></FONT></H2>
<P>
For each line of input, output the answer on one line.

<H2><FONT COLOR=#0070E8><A NAME="SECTION0001005000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>
10
</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001006000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>
12
</PRE>
</BODY>
</div>
<br />

<hr size="1" />
Problemsetter ---  Wu, Xiaogang
</HTML>



______________________________________________________
BBOARD||||||false||||||

<p>The manager of the International Popcorn-Selling Company has just decided that a number of advertising billboards should be installed throughout the city. The city consists of a number of crossings connected by (bidirectional) streets. Crossings are numbered by integers 1..N. </p>

<p>There should be one billboard at every crossing. However, to cut down expenses, there have been only three types of billboards printed. Nevertheless, the billboards should be arranged in such a way that one never meets the same billboard twice in a row when driving through the city (suppose that it is possible to turn back only at the crossing). How should they be installed? </p>


______________________________________________________
PANEL||||||false||||||

<p>Bulbville is a small town. However, its main square resembles a scene from Las Vegas. It is full of colorful blinking pipes and panels advertising various local companies. Nevertheless, a particular influential family residing at the main square has started to complain that a certain advertising panel shines into the windows of their residence. Therefore, they demand that the panel be switched off during the night.</p> 

<p>The panel is a square consisting of N rows of bulbs with N bulbs in each row. However, it has only 2N switches - one for each row and one for each column. The switch for a given row (or a column) turns off all the bulbs in a given row (or a column) which are on and turns on all the bulbs which are off. It might not be possible to turn off all the bulbs of the panel. Your task is to determine a configuration of the panel with the least number of shining bulbs that can be achieved using the switches.</p>


______________________________________________________
CCUBE||||||false||||||

<p>Bill Games, an excellent programmer, spent Easter with his grandparents. In their old house he came across wooden cubes - a child's toy. When he was a child, he used to build castles and towers and pyramids of these colorful cubes. He started to play with them again. However, the problem which he tries to solve today is much more complicated than building a simple pyramid. </p>

<p>Each face of a cube is colored with one color. Bill wants to build a tower from all cubes he has. This means to stack all the cubes in one column, one on another. Bill does not want to put the cubes in arbitrary order - the bottom face of every cube (except the bottom cube which is lying on the floor) should have the same color as the top face of the cube below it. <p>


______________________________________________________
JCEASY||||||false||||||

<p>There is one unnamed popular programming contest for people from all around the world. (Its name matches "SearchEngine Program Marmalade".) The contest starts with a coding phase where the contestants write code. After the coding phase there is a challenge phase. In this phase one can gain points when she finds a bug in someone else's code. </p>

<p>We were all lame and performed very badly. In fact, none of our programs worked. Thus we decided to hold a new contest: the Jam Code. Here, the task is to write a program that will never work correctly. </p>

<p>This contest will have an anti-challenge phase, where your goal is to find at least one test case such that a given program actually works ; in other words, it computes the correct answer. </p>

<h3>Problem specification</h3>
<p>You will be given a programming task and someone's source code. Find a valid input such that the program computes the correct answer. </p>

<h3>Easy Task specification</h3>
<p>The input file contains an integer <b>M</b> (0< <b>M</b> and <b>M</b> < 200) followed by <b>M</b> integers a[1], ..., a[m] in the range 1, 2, ..., 334. Output one line with the string s<sub>a[1]</sub>s<sub>a[2]</sub>...s<sub>a[m]</sub>. <a href="http://www.spoj.pl/content/john_jones:jceasy.txt">Here</a> is the list of strings s<sub>1</sub>, ..., s<sub>334</sub>.</p>

<h3>Example</h3>
<pre><b>Input</b>
3
1
2
3

<b>Output</b>
020202020202020212021202121212021202121202021212
</pre>
<p>The file <a href="http://www.spoj.pl/content/john_jones:jceasy.cpp">jceasy.cpp</a> contains the program you are supposed to anti-challenge. </p>
<p>You are to submit a file which contains a valid input.</p>


______________________________________________________
JCHARD||||||false||||||

<p>There is one unnamed popular programming contest for people from all around the world. (Its name matches "SearchEngine Program Marmalade".) The contest starts with a coding phase where the contestants write code. After the coding phase there is a challenge phase. In this phase one can gain points when she finds a bug in someone else's code. </p>

<p>We were all lame and performed very badly. In fact, none of our programs worked. Thus we decided to hold a new contest: the Jam Code. Here, the task is to write a program that will never work correctly. </p>

<p>This contest will have an anti-challenge phase, where your goal is to find at least one test case such that a given program actually works ; in other words, it computes the correct answer. </p>

<h3>Problem specification</h3>
<p>You will be given a programming task and someone's source code. Find a valid input such that the program computes the correct answer. </p>

<h3>Hard Task specification</h3>
<p>You are organizing a big party for a lot of people. You want to invite <b>2N</b> men and <b>2N</b> women. At the beginning of the party, there will be a dance. Before the party, each man sent you a list of women he is willing to dance with. You have to maximize the number of pairs that can dance at the same time. </p>

<p>The first line of the input file contains an integer <b>N</b> (0< <b>N</b> and <b>N</b> < 100). On each of the next <b>2N</b> lines there are <b>2N</b> numbers. If the <b>i</b>-th number on the <b>j</b>-th line is 0, then the <b>j</b>-th man doesn't want to dance with the <b>i</b>-th woman. If the number is 1, the man is willing to dance with the woman. </p>

<p>Output one number on one line with the maximum number of pairs which can dance at the same time. </p>

<h3>Example</h3>
<pre><b>Input</b>
1
1 1
1 1

<b>Output</b>
2
</pre>
<p>The file <a href="http://www.spoj.pl/content/john_jones:jchard.cpp">jchard.cpp</a> contains the program you are supposed to anti-challenge.</p>
<p>You are to submit a file which contains a valid input.</p>


______________________________________________________
ANALYS_T||||||true||||||



*******InputConstraints*******

<p>A Program which has the following format:</p>
<pre>
&lt;Program>::=&lt;sentence>&lt;line break>{&lt;sentence>&lt;line break>}
&lt;setence>::=&lt;level>&lt;space>&lt;body>
&lt;body>::=&lt;addition> | &lt;output> | &lt;goto> | &lt;condition> | &lt;end>
&lt;addition>::=&lt;variable>+&lt;integer>
&lt;output>::=&lt;variable>?
&lt;goto>::=GO&lt;space>&lt;level>
&lt;condition>::=IF&lt;space>&lt;variable>=&lt;integer>&lt;space>&lt;goto>
&lt;end>::=END
&lt;variable>::=&lt;character>
&lt;level>::=&lt;integer>
&lt;integer>::=&lt;digit>{&lt;digit>}
&lt;character>::=A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
&lt;digit>::= 0|1|2|3|4|5|6|7|8|9
&lt;line break>::=(ASCII 10)
&lt;space>::=(ASCII 32)
</pre>
<p>The program runs following the following rules:</p>
<div align="justify">
    <ul>
        <li>
        Program starts from the sentence whose level is minimum, and executed by the level from low to high except that the sentence is&lt;goto>or&lt;condition>.
        <li>
        All variables are initialized to 0.
        <li>
        &lt;Addition>means&lt;variable>+=&lt;integer>in C++.
        <li>
        &lt;output>means write the value of&lt;variable>to the output file(we aren't interesting about the real output file.)
        <li>
        &lt;condition>means if and only if the value of the &lt;variable> equals to &lt;integer>, &lt;goto> will be executed, otherwise the next sentence executed is as usual.
        <li>
        After&lt;goto>, the next sentence executed is the sentence with level which equals to the level in&lt;goto>.
        <li>
        Program terminates by itself when &lt;end> is executed.
        <li>
        This program can deal with all the signed 32-bit integers.
        <li>
        The number of sentences in the program is not more than 100.
        <li>
        The length of each line in the input file is not more than 20.
        <li>
        The input is correct.
        <li>
        The sentence with the maximum level is always &lt;end>.
        <li>
        The levels is not more than 3000.
        </li>
    </ul>
</div>
<p>Input terminate by EOF.</p>

*******OutputConstraints*******

<p>Output the number of sentences executed.If the program can not terminate by itself,output -1.</p>

*******IOTestCases*******

<pre><b>Input:</b>
10 A+1
20 IF A=5 GO 60
60 END
30 A+2
40 A?
50 GO 20

<b>Output:</b>
11

<b>Hint:</b>
10->20->30->40->50->20->30->40->50->20->60
</pre>


______________________________________________________
MAGIC||||||false||||||

<p>Here is a magic program (in C++). 
<pre>
#include &lt;cstdio>
int main(){
    unsigned seed=A;
    for(int i=0;i<10000;i++)
        printf("%u\n",seed=(seed*B+i)%C);
    return 0;
}
</pre>
<p>A,B,C are three magic numbers in range [1,65536). <p>Now you are given the <a href="http://www.spoj.pl/content/crazyb0y:MAGIC.out">output</a> of the program. You should submit a program to print the output. 



______________________________________________________
MAGIC3||||||false||||||

<p><a href="http://www.spoj.pl/content/crazyb0y:MAGIC3.c">Click here to get the solution(TLE)</a>


______________________________________________________
POINTS||||||true||||||


<p>A point in 3D A(ax,ay,az) is said to nest another point B(bx,by,bz), iff bx <= ax AND by <= ay AND bz <= az. Given a set of 3D points, find a nesting sequence using maximal number of points. A sequence P0, P1, P2, ... is said to be a valid nesting sequence iff, P1 nests P0, P2 nests P1 and so on. Please note there could be duplicate points, and each input point must be used atmost once while creating the sequence.
</p>


*******InputConstraints*******

<p>First line contains the number of testcases T.<br>
Each testcase starts with n - The number of points. (0 &lt; n &lt;= 100,000)<br>
The next n lines give the input points.<br>
</p>


*******OutputConstraints*******

<p>
For each testcase print one integer saying the length of the longest nesting sequence.
</p>

*******IOTestCases*******


<pre>
<b>Input:</b>
2
4
930887 692778 636916
747794 238336 885387
760493 516650 641422
202363 490028 368691
10
897764 513927 180541
383427 89173 455737
5212 595369 702568
956430 465783 21531
722863 665124 174068
703136 513930 979803
634023 723059 133070
898168 961394 18457
175012 478043 176230
377374 484422 544920

<b>Output:</b>
2
3
</pre>



______________________________________________________
PCV3||||||true||||||


<p>
<b>Problem 1</b> 
Using a combination of black square tiles and oblong tiles chosen from: red tiles of two units length, green tiles of three units length, and blue tiles of four units length, it is possible to tile a row of five units length in exactly fifteen different ways:
<BR>
<table cellpadding='10' cellspacing='0' border='0' align='center'>
<tr>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
</tr>

<tr>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
</tr>
</table>
</td>
</tr>

<tr>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='3' style='background-color:#00cc00'><img src='/content/turbo:spacer.gif' width='68' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='3' style='background-color:#00cc00'><img src='/content/turbo:spacer.gif' width='68' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='3' style='background-color:#00cc00'><img src='/content/turbo:spacer.gif' width='68' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
<td colspan='3' style='background-color:#00cc00'><img src='/content/turbo:spacer.gif' width='68' height='20' alt='' /></td>
</tr>
</table>
</td>
</tr>

<tr>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='3' style='background-color:#00cc00'><img src='/content/turbo:spacer.gif' width='68' height='20' alt='' /></td>
<td colspan='2' style='background-color:#cc0000'><img src='/content/turbo:spacer.gif' width='44' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td colspan='4' style='background-color:#0000cc'><img src='/content/turbo:spacer.gif' width='92' height='20' alt='' /></td>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
</tr>
</table>
</td>
<td>
<table cellspacing='2' cellpadding='0' border='1'>
<tr>
<td style='background-color:#000000'><img src='/content/turbo:spacer.gif' width='20' height='20' alt='' /></td>
<td colspan='4' style='background-color:#0000cc'><img src='/content/turbo:spacer.gif' width='92' height='20' alt='' /></td>
</tr>
</table>
</td>
<td> </td>
</tr>

</table>
<BR>
In how many ways can a row measuring fifty units in length be tiled?
<BR><BR>

<b>Problem 2</b> 
A hexagonal tile with number 1 is surrounded by a ring of six hexagonal tiles, starting at "12 o'clock" and numbering the tiles 2 to 7 in an anti-clockwise direction.
New rings are added in the same fashion, with the next rings being numbered 8 to 19, 20 to 37, 38 to 61, and so on. The diagram below shows the first three rings:<BR>
<BR>
<center><img src="http://www.spoj.pl/content/turbo:hex.gif"></center>
<p>
By finding the difference between tile n and each of its six neighbours we shall define PD(n) to be the number of those differences which are prime.

For example, working clockwise around tile 8 the differences are 12, 29, 11, 6, 1, and 13. So PD(8) = 3.

In the same way, the differences around tile 17 are 1, 17, 16, 1, 11, and 10, hence PD(17) = 2.

It can be shown that the maximum value of PD(n) is 3.

If all of the tiles for which PD(n) = 3 are listed in ascending order to form a sequence, the 10th tile would be 271.

Find the 2000th tile in this sequence.
<BR><BR>

<b>Problem 3</b>
Let S(A) represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:<BR>
1) S(B) &#8800; S(C); that is, sums of subsets cannot be equal. <BR>
2) If B contains more elements than C then S(B) > S(C). <BR><BR>
For this problem we shall assume that a given set contains n strictly increasing elements and it already satisfies the second rule.<BR><BR>

Surprisingly, out of the 25 possible subset pairs that can be obtained from a set for which n = 4, only 1 of these pairs needs to be tested for equality (first rule). Similarly, when n = 7, only 70 out of the 966 subset pairs need to be tested.

For n = 12, how many of the 261625 subset pairs that can be obtained need to be tested for equality?
<BR><BR>

<b>Problem 4</b> 
Find the smallest integer N > 15, for which N^3 can be written using prime digits only {i.e., 2, 3, 5, 7}.
<BR><BR>

<b>Problem 5</b> 
Let's call an integer a "titanic number" if we need 1000 or more digits to write it in decimal format. In this task you must find the minimal titanic number, which can be presented in p^q form, where p and q are prime numbers. You must output the answer in the following form: X-q, where X - the last 10 digits of the titanic number and q - the power of the exponent. For example: 8765839202-97
<BR><BR>

<b>Problem 6</b>
Find the smallest positive integer for which every number in the series (N-k)/k is a prime number for every k=1,...n, for n = 11. For n=4 the answer would be N=12, let's check: (12-1)/1 = 11, (12-2)/2 = 5, (12-3)/3 = 3, (12-4)/4 = 2.
<BR><BR>

<b>Problem 7</b> 
You are playing the following game. You can ask the host of the game to tell you a number. Each number is an independent random uniformly distributed real number between 0 and 1. After the host tells you the number you can ask for more or just stop. When you stop, your score is equal to the sum of all numbers which the host has given to you. Let 0 < x < 1 and suppose that you're trying to get a score in the interval from x to 1. What is the probability of winning, assuming that you are using the best possible strategy? Find the value of probability of winning for x=0.334568 and output it after rounding in the form of *.****** - where each * denotes a digit.
<BR><BR>

<b>Problem 8</b>
Find the number of integers 1 < n < 10^7, for which n and n + 1 have the same number of positive divisors. For example, 14 has the positive divisors 1, 2, 7, 14 while 15 has 1, 3, 5, 15.
<BR><BR>

<b>Problem 9</b>
Decode the message in the picture:<BR><BR>
<center><img src="http://www.spoj.pl/content/turbo:ZPCV3.jpg"></center>
<BR>
<p>
Output it with lowercase letters without spaces.
<BR><BR>

<b>Problem 10</b> Suppose that you find a small program which is protected by an "activation key". The value of the key depends on the name you input. The protection for this program is performed using the code in the C programming language, presented below. The program asks you for your name and password and outputs "Accept" or "Failure".
<BR><BR>
<pre>
#include &lt;stdio.h>

unsigned int code (unsigned int arg, int p, int n)
{
	unsigned int r = 1;
	for(; p >= 1; p--)
		r = (r*arg)%n;
	return r;
}

void main ()
{
	unsigned int e = 35467, n = 54031, pwd;
	char name[256];
	unsigned int hash, x;

	printf("Name: "); 
	scanf("%s", name);
	
	printf("Password: "); 
	scanf("%d", &pwd);

	hash = 0;
	for (x = 0; ; x++){
		if (name[x] == 0)
			break;
		hash += name[x];
	}

	if (code(pwd, e, n) == hash)
		printf("Accept!\n");
	else 
		printf("Failure\n");
}
</pre>
<p>
Your goal is to find the right passwords for each name presented in file: <a href=/content/turbo:nicks.zip>nicks.zip (~330 Kb)</a>. The answer for this problem will be the sum of all passwords obtained for each name from file.
<BR><BR>


*******InputConstraints*******

<p> There is no input for this problem.
 

*******OutputConstraints*******

<p> Output answer as a set of lines. In each line first output the number of the problem and then the answer for this problem. If any of the answers are incorrect, you'll receive Wrong Answer.
</p>


*******IOTestCases*******


<p><b>Output:</b>

<pre>
1 6174046
2 AnsweR
5 806257
8 51146700
</pre>

<p>It's just an example of what the output should look like. If all 4 answers are correct (for problems 1, 2, 5 and 8), you'll receive 4 points.</p>


______________________________________________________
REX||||||true||||||


<p>
You are given a set of 10 tasks. For each of these tasks you must write the correct <a href="http://en.wikipedia.org/wiki/Regular_Expression">Regular Expression</a> of minimal size in C format (current SPOJ version).
Each regular expression will be tested against a special test set, which contains right and wrong strings. The expression which is composed by you must correctly work on all test cases.<BR><BR>

<b>Task 1</b> 
You are to write regular expression which determines if a given string is equal to "abcdefghijklmnopqrstuv18340" or not.<BR><BR>
<u>Example of correct strings:</u> <BR>
<font color=green size=2>abcdefghijklmnopqrstuv18340</font><BR>
<u>Example of wrong strings:</u> <BR>
<font color=red size=2>abcdefghijklmnoasdfasdpqrstuv18340</font>
<BR><BR>
<b>Task 2</b> 
You are to write a regular expression which determines whether a given string is a GUID, with or without brackets. Here GUID is a string, consisting of 8, 4, 4, 4, 12 hex digits separated by '-'. <BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>{e02fa0e4-01ad-090A-c130-0d05a0008ba0}<BR>
e02fd0e4-00fd-090A-ca30-0d00a0038ba0</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>02fa0e4-01ad-090A-c130-0d05a0008ba0}<BR>
e02fd0e400fd090Aca300d00a0038ba0</font><BR><BR>
<b>Task 3</b> 
You are to write a regular expression which determines whether the given string is a valid MAC-address. <BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>01:32:54:67:89:AB<BR>
aE:dC:cA:56:76:54</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>01:33:47:65:89:ab:cd<BR>
01:23:45:67:89:Az</font><BR><BR>
<b>Task 4</b> 
You are to write a regular expression which determines whether a given string is uppercase and sorted in non-descending order. <BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>AABCD<BR>
ABCDZ</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>aABCD<BR>
ZABCD</font><BR><BR>
<b>Task 5</b> 
You are to write a regular expression which determines whether a given string is the hex identification of a color in HTML. Here #FFFFFF stands for white, #000000 for black, #FF0000 for red, etc.<BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
#FFFFFF<BR>
#FF3421<BR>
#00ff00
</font><BR><BR>
<u>Examples of incorrect strings:</u> <BR>
<font color=red size=2>
232323<BR>
f#fddee<BR>
#fd2
</font>
<BR><BR>
<b>Task 6</b> 
You are to write a regular expression which determines whether the given string is a date in dd/mm/yyyy format. The date is in the range from the year 1600 to the year 9999.<BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
29/02/2000<BR>
30/04/2003<BR>
01/01/2003
</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>
29/02/2001<BR>
30-04-2003<BR>
1/1/1899
</font>
<BR><BR>
<b>Task 7</b> 
You are to write a regular expression which determines whether the given string is a valid e-mail address with respect to <a href=http://www.faqs.org/rfcs/rfc2822.html>RFC number 2822</a><BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
mail@mail.ru<BR>
valid@megapochta.com<BR>
aa@aa.info
</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>
bug@@@com.ru<BR>
@val.ru<BR>
Just Text2<BR>
val@val<BR>
val@val.a.a.a.a<BR>
12323123@111[]][]
</font>
<BR><BR>
<b>Task 8</b> 
You are to write a regular expression which determines whether the given string is an IP address, in decimal format<BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
127.0.0.1<BR>
255.255.255.0<BR>
192.168.0.1
</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>
1300.6.7.8<BR>
abc.def.gha.bcd<BR>
254.hzf.bar.10
</font>
<BR><BR>
<b>Task 9</b> 
You are to check whether a given password is strong. A password is said to be strong if it consists of 8 and more symbols, where a symbol is one from the set: English letter, digit or underline. Additionally, a strong password must contain at least one uppercase letter, at least one lowercase letter and at least one digit.<BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
C00l_Pass<BR>
SupperPas1
</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>
Cool_pass<BR>
C00l
</font>
<BR><BR>
<b>Task 10</b>
You are to write a regular expression which determines whether a given string is a six-digit positive integer, printed in decimal format without leading zeros.
<BR><BR>
<u>Examples of correct strings:</u> <BR>
<font color=green size=2>
123456<BR>
234567
</font><BR><BR>
<u>Examples of wrong strings:</u> <BR>
<font color=red size=2>
1234567<BR>
12345
</font>
<BR><BR>
For testing we use the following C-function:
<pre>
int match(const char *string, char *pattern)
{
    int status;
    regex_t re;

    if (regcomp(&re, pattern, REG_EXTENDED|REG_NOSUB) != 0) {
        return(0);
    }
    status = regexec(&re, string, (size_t) 0, NULL, 0);
    regfree(&re);
    if (status != 0) {
        return (0);
    }
    return (1);
}
</pre>


*******InputConstraints*******

<p> There is no input data for this problem
 

*******OutputConstraints*******

<p>Output your answer as a set of 10 lines. The first line is for the first task, the second line for the second task, etc. 
All other lines will be ignored. If you don't want to solve some task, then in the corresponding line output "---". 
Otherwise, output the regular expression for this task. If any of your regular expressions are invalid you'll get Wrong Answer status.
</p>


*******IOTestCases*******


<b>Output:</b>

<pre>
---
^[1-9]{1}[0-9]{3} ?[A-Z]{2}$
---
---
---
---
---
---
---
---
</pre>

<p>It's just an example of what output data should look like. If the answer for second task were right, then you would get 1 + 1/28 = 1.035714 points.</p>


______________________________________________________
BCH||||||true||||||


<p> Output the longest chain of integers which has the following properties:<BR><BR>
<OL>
<LI>All integers are positive and have 4 digits in their decimal representation (i.e. all numbers are in the range [1000, 9999])</LI>
<LI>All numbers in the chain are different</LI>
<LI>The decimal representations of each number differs from the next one at only position (digit)</LI>
<LI>All integers are prime</LI>
</OL>
<p>The winner is the participant who obtains the longest chain.
<BR><BR>


*******InputConstraints*******

<p>There is no input data in this problem.</p>
 

*******OutputConstraints*******

<p>In the first line output the length of your chain <i>N</i>. In the next <i>N</i> lines output each number of your chain.</p>


*******IOTestCases*******


<pre>

<b>Output:</b>
3
9857
9887
9883

<b>Score:</b>
In this case <i>score</i> = 1000/(1062-3) = 0.944287,
</pre>


______________________________________________________
ARJ||||||false||||||

<p> Write a program of minimal possible size which outputs the given file:
<a href="/content/turbo:ZARJ.txt">ZARJ.txt (101350 bytes)</a><BR><BR>
<u>Note</u>: it's much better to submit source file, not text, when submit your solution.


______________________________________________________
MXP||||||true||||||


<p>You are given two sequences of positive integers a<small>1</small>, a<small>2</small>, ..., a<small>n</small> and b<small>1</small>, b<small>2</small>, ..., b<small>n</small> of length <i>n</i> each. You are to write a program which finds <i>k</i> such that a<small>k</small> to the power of b<small>k</small> is maximal.


*******InputConstraints*******

<p>The first line of input contains a positive integer <i>n</i>, not greater than 10000. In the second line you are given a set of positive integers a<small>i</small> separated by spaces, and in the third line &#8211; integers b<small>i</small>. All numbers in both sequences are not greater than 10000. It is guaranteed that all power values are different. 


*******OutputConstraints*******

<p>The output must contain one number &#8211; the answer to the problem. 


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1 2 2 3 3
100 1 3 2 1

<b>Output:</b>
4
</pre>



______________________________________________________
ELDORADO||||||true||||||


<p><p>
Bruce Force has gone to Las Vegas, the El Dorado for gamblers.
He is interested especially in one betting game, where a machine
forms a sequence of <i>n</i> numbers by drawing random numbers.
Each player should estimate beforehand, how many increasing
subsequences of length <i>k</i> will exist in the sequence of numbers.
</p>
<p>
A subsequence of a sequence <i>a<sub>1</sub>, ..., a<sub>n</sub></i> is defined as <i>a<sub>i<sub>1</sub></sub>, ..., a<sub>i<sub>l</sub></sub></i>, where <i>1 &#8804; i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>l</sub> &#8804; n</i>.
The subsequence is increasing, if <i>a<sub>i<sub>j-1</sub></sub> &lt; a<sub>i<sub>j</sub></sub></i> for all <i>1 &lt; j &#8804; l</i>.

</p>
<p>
Bruce doesn't trust the Casino to count the number of increasing subsequences of length <i>k</i> correctly. He has asked you if you can solve this problem for him.
</p>


*******InputConstraints*******

<p>The input contains several test cases.
The first line of each test case contains two numbers <i>n</i> and  <i>k</i> (<i>1 &#8804; k &#8804; n &#8804; 100</i>),
where <i>n</i> is the length of the sequence drawn by the machine, and <i>k</i> is the desired length of the increasing subsequences.
The following line contains <i>n</i> pairwise distinct integers <i>a<sub>i</sub></i>

(<i>-10000 &#8804; a<sub>i</sub> &#8804; 10000 </i>),
where <i>a<sub>i</sub></i> is the <i>i</i><sup>th</sup> number in the sequence drawn by the machine.

</p>
<p>
The last test case is followed by a line containing two zeros.
</p>


*******OutputConstraints*******

<p>For each test case, print one line with the number of increasing
subsequences of length <i>k</i> that the input sequence contains.
You may assume that the inputs are chosen in such a way that this number fits into a 64 bit signed integer (in C/C++, you may use the data type "long long", in Java the data type "long").
</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
10 5
1 2 3 4 5 6 7 8 9 10
3 2
3 2 1
0 0
<b>Output:</b>
252
0
</pre>



______________________________________________________
CONANGSS||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/CONANGSS/en/">English</a></td>
<td width="50%"><a href="/problems/CONANGSS/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p> </strong></strong></p>
<p><strong><strong>Given a sequence of n numbers (initially all is equal to 0) and m queries of two kinds: </strong></strong></p>
<p><strong><strong><strong>U i j v</strong> increase all numbers from position i to position j by v (v may be negative) </strong></strong></p>
<p><strong><strong><strong>Q i j</strong> query max{a<sub>p</sub>+a<sub>p+1</sub>+...+a<sub>q</sub> | i &lt;= p &lt;= q &lt;= j} as in problem GSS1 and GSS3</strong></strong></p>
<p><strong><strong>You have to process these queries and print out the answer for each query of type Q.</strong></strong></p>
<p><strong><strong>The time limit for this problem is 2s. </strong></strong></p>
<h3><strong><strong>Input</strong></strong></h3>
<p><strong><strong>- First line: n, m (1 &lt;= n &lt;= 20000, 1 &lt;= m &lt;= 20000)</strong></strong></p>
<p><strong><strong>- In each line of the next m lines there is a query of one of the two forms above.</strong></strong></p>
<h3><strong><strong>Output</strong></strong></h3>
<p><strong><strong>For each query of type Q, print out the corresponding answer.</strong></strong></p>
<h3><strong><strong>Example</strong></strong></h3>
<pre><strong><strong><strong>Input:</strong><br />4 2<br />U 1 3 2<br />Q 1 4<br /><strong>Output:</strong><br />6<br /></strong></strong></pre>
<p><strong><strong> </strong></strong></p>


______________________________________________________
FACTSUM||||||true||||||


<pre>
Given a positive integer K > 2, with prime
factorization:

K = p1^a1 * p2^a2 ... * pn^an

Compute the following:

S = a1*p1 + a2*p2 ... + an*pn.
</pre>

*******InputConstraints*******

<p>A list of <100 integers, one on each line,
all less than 2*10^19.

*******OutputConstraints*******

<p>For each integer compute the super factor
sum and output it on a single line.

*******IOTestCases*******


<pre>
<b>Input:</b>
6
7
<b>Output:</b>
5
7
</pre>



______________________________________________________
SPRIME||||||false||||||

<div align="left">
<p>
In mathematics, a prime number (or a prime) is a natural number which has exactly two distinct natural number divisors: 1 and itself.

<p>
Super-prime numbers are the elements of the subsequence of prime-numbers that occupy prime-numbered positions within the sequence of all prime numbers. That is, if p(i) denotes the ith prime number, the numbers in this sequence are those of the form p(p(i)) or Primes with a prime index in the sequence of prime numbers (the 2nd, 3rd, 5th, ... prime).

<p>
Your task is to generate all super primes &le 10^7.


______________________________________________________
ADUN||||||true||||||


<p>Your task is to read two numbers a and b (0 < a, b <2100000000) and to output their sum.


*******InputConstraints*******

<p>Input contains two lines, on the first line the number a and on the second line the number b. 


*******OutputConstraints*******

<p>Output the sum of the two numbers.


*******IOTestCases*******


<pre>
<b>Input:</b>
20
30

<b>Output:</b>
50
</pre>



______________________________________________________
LOOKSAY||||||true||||||


<p>The
look and say sequence is defined as follows. Start with any string of
digits as the first element in the sequence. Each subsequent element is
defined from the previous one by "verbally" describing the previous
element. For example, the string 122344111 can be described as "one 1,
two 2's, one 3, two 4's, three 1's". Therefore, the element that comes
after 122344111 in the sequence is 1122132431. Similarly, the string
101 comes after 1111111111. Notice that it is generally not possible to
uniquely identify the previous element of a particular element. For
example, a string of 112213243 1's also yields 1122132431 as the next
element.
</p>


*******InputConstraints*******

<p>The input consists of a number of cases. The first line gives 
the number of cases to follow. Each case consists of a line of up to
1000 digits.</p>


*******OutputConstraints*******

<p>For each test case, print the string that follows the given string.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
3
122344111
1111111111
12345

<b>Output:</b>
1122132431
101
1112131415
</pre>



______________________________________________________
CURICULA||||||true||||||


<p>Consider the following example. A student is required to take 4 courses, <SPAN  CLASS="textit">mt42</SPAN>, <SPAN  CLASS="textit">cs123</SPAN>, <SPAN  CLASS="textit">cs456</SPAN>, and <SPAN  CLASS="textit">cs789</SPAN>. <SPAN  CLASS="textit">mt42</SPAN> is only offered in the fall semester and has no prerequisites. Similarly, <SPAN  CLASS="textit">cs123</SPAN> is only offered in the spring semester and has no prerequisites. <SPAN  CLASS="textit">cs456</SPAN> is only offered in the spring semester and has both <SPAN  CLASS="textit">cs123</SPAN> and <SPAN  CLASS="textit">mt42</SPAN> as prerequisites. Finally, <SPAN  CLASS="textit">cs789</SPAN> is offered in both fall and spring and has <SPAN  CLASS="textit">cs456</SPAN> as its only prerequisite. The shortest time to graduate is 5 semesters, by taking <SPAN  CLASS="textit">mt42</SPAN> in the fall, <SPAN  CLASS="textit">cs123</SPAN> in the next spring, <SPAN  CLASS="textit">cs456</SPAN> the following spring (since it is not offered in the fall) and finally <SPAN  CLASS="textit">cs789</SPAN> the following fall. 


<P>
For this problem, there are only two semesters, fall and spring. Always start counting semesters from the fall. 

<P>
In addition to the fall/spring scheduling issues, there is one slight complication. In order to keep the dormitories full, each university limits the number of courses that can be taken in any semester. This limit appears as part of the input data. The third example below illustrates this issue. 



*******InputConstraints*******

<p>There are one to twenty-five data sets, followed by a final line containing only the integers `<TT>-1 -1</TT>'. A data set starts with a line containing two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le n \le 12$
 -->

<SPAN CLASS="MATH">1 &lt;= <I>n</I> &lt;= 12</SPAN>
<tex2html_verbatim_mark>, which is the number of courses in this data set and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \le m \le 6$
 -->
<SPAN CLASS="MATH">2 &lt;= <I>m</I> &lt;= 6</SPAN>
<tex2html_verbatim_mark>, which is the maximum number of courses that can be taken in any single semester. The next line contains the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> course identifiers. Each is a 1-5 character string from the set {<TT>a-z, 0-9</TT>}. Following the course identifiers is the individual course information. This consists of <SPAN CLASS="MATH"><I>n</I></SPAN>

<tex2html_verbatim_mark> lines, one line for each course, containing the course identifier, semester offered (`<TT>F</TT>'=Fall, `<TT>S</TT>'=Spring, `<TT>B</TT>'=Both semesters), the number of prerequisite courses, <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le p \le 5$
 -->
0 &lt;= <I>p</I> &lt;= 5</SPAN>
<tex2html_verbatim_mark>, and finally <SPAN CLASS="MATH"><I>p</I></SPAN>

<tex2html_verbatim_mark> prerequisite course identifiers. The first example data set below corresponds to the problem described above. 



*******OutputConstraints*******

<p>The output contains one line for each data set, formatted as shown in the sample output.



*******IOTestCases*******


<pre>
<b>Input:</b>
4 6 
cs123 mt42 cs456 cs789 
mt42 F 0 
cs123 S 0 
cs456 S 2 cs123 mt42 
cs789 B 1 cs456 
3 6 
math1 comp2 comp3 
comp3 S 1 comp2 
math1 S 0 
comp2 F 1 math1 
4 3 
m10 m20 c33 c44 
m10 B 0 
m20 B 0 
c33 B 0 
c44 B 0 
-1 -1


<b>Output:</b>
The minimum number of semesters required to graduate is 5. 
The minimum number of semesters required to graduate is 4. 
The minimum number of semesters required to graduate is 2.


</pre>



______________________________________________________
SEVENPER||||||true||||||


<p>Uniform Resource Identifiers (or URIs) are strings like
   <i>http://icpc.baylor.edu/icpc/</i>, <i>mailto:foo@bar.org</i>,
   <i>ftp://127.0.0.1/pub/linux</i>, or even just <i>readme.txt</i> that are
   used to identify a resource, usually on the Internet or a local computer.
   Certain characters are reserved within URIs, and if a reserved character is
   part of an identifier then it must be <dfn>percent-encoded</dfn> by
   replacing it with a percent sign followed by two hexadecimal digits
   representing the ASCII code of the character. A table of seven reserved
   characters and their encodings is shown below. Your job is to write a
   program that can percent-encode a string of characters.</p>

   <table align="center">
      <thead>
         <tr>
            <td><b>Character</b></td>

            <td><b>Encoding</b></td>
         </tr>
      </thead>

      <tbody>
         <tr>
            <td>" " (space)</td>

            <td align="right">%20</td>
         </tr>

         <tr>

            <td>"<tt>!</tt>" (exclamation point)</td>

            <td align="right">%21</td>
         </tr>

         <tr>
            <td>"<tt>$</tt>" (dollar sign)</td>

            <td align="right">%24</td>
         </tr>

         <tr>
            <td>"<tt>%</tt>" (percent sign)</td>

            <td align="right">%25</td>

         </tr>

         <tr>
            <td>"<tt>(</tt>" (left parenthesis)</td>

            <td align="right">%28</td>
         </tr>

         <tr>
            <td>"<tt>)</tt>" (right parenthesis)</td>

            <td align="right">%29</td>
         </tr>

         <tr>
            <td>"<tt>*</tt>" (asterisk)</td>

            <td align="right">%2a</td>
         </tr>
      </tbody>
   </table>


*******InputConstraints*******

<p>The input consists of one or more strings, each
   1&#8211;79 characters long and on a line by itself, followed by a line
   containing only "#" that signals the end of the input. The character "#" is
   used only as an end-of-input marker and will not appear anywhere else in the
   input. A string may contain spaces, but not at the beginning or end of the
   string, and there will never be two or more consecutive spaces.</p>


*******OutputConstraints*******

<p>For each input string, replace every occurrence of a
   reserved character in the table above by its percent-encoding, exactly as
   shown, and output the resulting string on a line by itself. Note that the
   percent-encoding for an asterisk is %2a (with a lowercase "a") rather than
   %2A (with an uppercase "A").</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
Happy Joy Joy!
http://icpc.baylor.edu/icpc/
plain_vanilla
(**)
?
the 7% solution
#

<b>Output:</b>
Happy%20Joy%20Joy%21
http://icpc.baylor.edu/icpc/
plain_vanilla
%28%2a%2a%29
?
the%207%25%20solution
</pre>



______________________________________________________
PERBITS||||||true||||||


<p>WhatNext Software creates sequence generators that they hope will produce
   fairly random sequences of 16-bit unsigned integers in the range
   0&#8211;65535. In general a sequence is specified by integers A, B, C,
   and S, where 1 &#8804; A &lt; 32768, 0 &#8804; B &lt; 65536, 2
   &#8804; C &lt; 65536, and 0 &#8804; S &lt; C. S is the first element
   (the <dfn>seed</dfn>) of the sequence, and each later element is generated
   from the previous element. If X is an element of the sequence, then the next
   element is</p>

   <blockquote>(A*X + B) % C </blockquote>

   <p>where '%' is the remainder or modulus operation. Although every element
   of the sequence will be a 16-bit unsigned integer less than 65536, the
   intermediate result A*X + B may be larger, so calculations should be done
   with a 32-bit <i>int</i> rather than a 16-bit <i>short</i> to ensure
   accurate results.</p>

   <p>Some values of the parameters produce better sequences than others. The
   most embarrassing sequences to WhatNext Software are ones that never change
   one or more bits. A bit that never changes throughout the sequence is
   <dfn>persistent</dfn>. Ideally, a sequence will have no persistent bits.
   Your job is to test a sequence and determine which bits are persistent.</p>

   <p>For example, a particularly bad choice is A = 2, B = 5, C = 18, and S =
   3. It produces the sequence 3, (2*3+5)%18 = 11, (2*11+5)%18 = 9, (2*9+5)%18
   = 5, (2*5+5)%18 = 15, (2*15+5)%18 = 17, then (2*17+5)%18 = 3 again, and
   we're back at the beginning. So the sequence repeats the the same six values
   over and over:</p>

   <table style="text-align: left; width: 200px;" border="1" cellpadding="2"
   cellspacing="2">
      <tbody>
         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            Decimal</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            16-Bit Binary</td>
         </tr>

         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            3</td>

            <td style="font-family: monospace;" align="center" valign="middle">

            0000000000000011</td>
         </tr>

         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            11</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            0000000000001011</td>

         </tr>

         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            9</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            0000000000001001</td>
         </tr>

         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            5</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            0000000000000101</td>
         </tr>

         <tr>
            <td style="font-family: monospace;" align="center" valign="middle">
            15</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            0000000000001111</td>
         </tr>

         <tr>

            <td style="font-family: monospace;" align="center" valign="middle">
            17</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            0000000000010001</td>
         </tr>

         <tr>
            <td align="center" valign="middle">overall</td>

            <td style="font-family: monospace;" align="center" valign="middle">
            00000000000????1</td>
         </tr>
      </tbody>
   </table>

   <p>The last line of the table indicates which bit positions are always 0,
   always 1, or take on both values in the sequence. Note that 12 of the 16
   bits are persistent. (Good random sequences will have no persistent bits,
   but the converse is not necessarily true. For example, the sequence defined
   by A = 1, B = 1, C = 64000, and S = 0 has no persistent bits, but it's also
   not random: it just counts from 0 to 63999 before repeating.)  Note that a
   sequence does not need to return to the seed: with A = 2, B = 0, C = 16, and
   S = 2, the sequence goes 2, 4, 8, 0, 0, 0, ....</p>




*******InputConstraints*******

<p>There are from one to sixteen datasets followed by a line
   containing only 0. Each dataset is a line containing decimal integer values
   for A, B, C, and S, separated by single blanks.</p>



*******OutputConstraints*******

<p> There is one line of output for each data set, each
   containing 16 characters, either '1', '0', or '?' for each of the 16 bits in
   order, with the most significant bit first, with '1' indicating the
   corresponding bit is always 1, '0' meaning the corresponding bit is always
   0, and '?' indicating the bit takes on values of both 0 and 1 in the
   sequence.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
2 5 18 3
1 1 64000 0
2 0 16 2
256 85 32768 21845
1 4097 32776 248
0

<b>Output:</b>
00000000000????1
????????????????
000000000000???0
0101010101010101
0???000011111???
</pre>



______________________________________________________
ROCKSKIP||||||true||||||


<p>As a member of the International Rock-Skipping League, you travel to a
   different lake each week and compete in a rock-skipping contest. The goal is
   to throw a rock so that it skips as many times as possible; the exact rules
   for determining the winner are given below. To make the competitions
   interesting, the IRSL often chooses lakes with logs, sandbars, and other
   obstacles. You are provided with a side-view, water-level "map" of the lake
   as shown in the top line of the example below. (The numbers 0..29 below the
   map are just for reference.) A period (".") indicates clear water, where a
   rock will skip; any other character indicates some kind of obstacle that
   will stop a rock.</p>

   <blockquote>
      <tt>...=...**..#...@....:.:.:..=..</tt><br>
      <tt>______________________________</tt><br>
      <tt>          11111111112222222222</tt><br>
      <tt>012345678901234567890123456789</tt>
   </blockquote>

   <p>You stand at the left end of the lake. You can throw a rock so that it
   lands at any position in the lake, and then skips at any fixed interval
   thereafter. So a throw can be defined as a pair (<i>i</i>,<i>d</i>), where
   <i>i</i> &#8805; 0 is the initial landing position and <i>d</i> > 0 is the
   distance between skips. Note that <i>d</i> must be positive. The
   <dfn>count</dfn> of a throw is the number of times that it skips on the
   water. The <dfn>length</dfn> is the position of its last contact with either
   the water or an obstacle. To rank two distinct throws, use the following
   criteria, in order, until a winner is determined: count (highest wins);
   length (greatest wins); initial position (greatest wins); distance between
   skips (smallest wins).</p>

   <p>For the map shown above, throw (27,2) hits the obstacle at position 27;
   it has count 0 and length 27. Throw (16,1) skips at positions 16, 17, 18,
   and 19, then hits the obstacle at position 20; it has count 4 and length 20,
   so it beats throw (27,2). Throw (2,7) skips at positions 2, 9, 16, and 23,
   then skips over the lake; it has count 4 and length 23, so it beats throw
   (16,1). Throw (1,4) skips at positions 1, 5, 9, 13, 17, 21, 25, and 29, then
   skips over the lake; it has count 8 and distance 29, and is the best
   possible throw for this lake.</p>



*******InputConstraints*******

<p>The input consists of one or more lake maps, each
   1&#8211;40 characters long and on a line by itself, followed by a line
   containing only "END" that signals the end of the input. Positions within a
   map are numbered starting with zero. Maps will only contain printable ASCII
   punctuation characters. A period indicates clear water and any other
   character indicates an obstacle.</p>



*******OutputConstraints*******

<p>For each map, compute the best possible throw
   (<i>i</i>,<i>d</i>), then output a line containing <i>i</i> and <i>d</i>

   separated by one space.</p>




*******IOTestCases*******


<pre>
<b>Input:</b>
...=...**..#...@....:.:.:..=..
.(+)
/^\.
*++&*
END

<b>Output:</b>
1 4
0 3
3 1
4 1
</pre>



______________________________________________________
KQUERY||||||true||||||


<!--

Note: this problem already appears in the main problemset as:
http://www.spoj.pl/problems/RACETIME/

-->


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/KQUERY/en/">English</a></td> 
<td width="50%"><a href="/problems/KQUERY/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given a sequence of n numbers a<sub>1</sub>, 

a<sub>2</sub>, ..., a<sub>n</sub> and a number of k-

queries. A k-query is a triple (i, j, k) (1 &#8804; i &#8804; j &#8804; n). For 

each k-query (i, j, k), you have to return the number of 

elements greater than k in the subsequence a<sub>i</sub>, 

a<sub>i+1</sub>, ..., a<sub>j</sub>.</p>

*******InputConstraints*******

<ul>
<li>Line 1: n (1 &#8804; n &#8804; 30000).</li>
<li>Line 2: n numbers a<sub>1</sub>, a<sub>2</sub>, ..., 

a<sub>n</sub> (1 &#8804; a<sub>i</sub> &#8804; 

10<sup>9</sup>).</li>
<li>Line 3: q (1 &#8804; q &#8804; 200000), the number of k-

queries.</li>
<li>In the next q lines, each line contains 3 numbers i, j, k 

representing a k-query (1 &#8804; i &#8804; j &#8804; n, 1 &#8804; k &#8804; 

10<sup>9</sup>).</li>
</ul>


*******OutputConstraints*******

<ul>
<li>For each k-query (i, j, k), print the number of elements 

greater than k in the subsequence a<sub>i</sub>, 

a<sub>i+1</sub>, ..., a<sub>j</sub> in a single line.</p>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
5
5 1 2 3 4
3
2 4 1
4 4 4
1 5 2 

<b>Output</b>
2
0
3 
</pre>





______________________________________________________
KQUERY2||||||true||||||


<!--

Note: this problem already appears in the main problemset as:
http://www.spoj.pl/problems/RACETIME/

-->


<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/KQUERY2/en/">English</a></td> 
<td width="50%"><a href="/problems/KQUERY2/vn/">Vietnamese</a></td> 
</tr></table>


<p>Given a sequence of n numbers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> and a number of k-queries. Besides, you are also given some modify operations.</p>
<p>A modify operation is a pair (i, v) which means a<sub>i</sub> should be set to be v.</p>
<p>A k-query is a triple (i, j, k). For each k-query (i, j, k), you have to return the number of elements greater than k in the subsequence a<sub>i</sub>, a<sub>i+1</sub>, ..., a<sub>j</sub>.</p>


*******InputConstraints*******

<ul>
<li>Line 1: n (1 &#8804; n &#8804; 30000).</li>
<li>Line 2: n numbers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 &#8804; a<sub>i</sub> &#8804; 10<sup>4</sup>) representing the initial sequence.</li>
<li>Line 3: q (1 &#8804; q &#8804; 200000), the number of operations.</li>
<li>In the next q lines, the first number of each line contains a flag value which is either 0 or 1. A flag 0 follows by 2 numbers i and v (1 &#8804; i &#8804; n, 1 &#8804; v &#8804; 10<sup>4</sup>) representing a modify operation. A flag 1 follows by 3 numbers i, j and k (1 &#8804; i &#8804; j &#8804; n, 1 &#8804; k &#8804; 10<sup>4</sup>) representing a k-query.
</ul>


*******OutputConstraints*******

<ul>
<li>For each k-query (i, j, k), print the number of elements greater than k in the subsequence a<sub>i</sub>, a<sub>i+1</sub>, ..., a<sub>j</sub> in a single line.</p>
</ul>


*******IOTestCases*******

<pre>
<b>Input</b>
5
5 1 2 3 4
6
1 2 4 1
0 4 10
1 4 4 4
0 3 1
0 1 2
1 1 5 2 

<b>Output</b>
2
1
2
</pre>





______________________________________________________
SOFTBUG||||||false||||||

<h1>Problem text</h1>
<p>
The biggest problem for all software developers are bugs. You definitely know the situationwhen a user calls to say "I've found a bug in your program". Once you have found and removedthe bug, another one appears immediately. It is a hard and never-ending process.Recently, there appeared a promising open-source initiative called "bug-preprocessor". The bug-preprocessor is a program able to find all bugs in your source code and mark them, so they arerelatively easy to be removed. Your task is to write a program that will remove all marked bugsfrom the preprocessed source code.


______________________________________________________
PASCALTR||||||true||||||


<p>An <!-- MATH
 $n \times n$
 -->
<SPAN CLASS="MATH"><I>n</I> <TT>x</TT> <I>n</I></SPAN>
<tex2html_verbatim_mark> game board is populated with integers, one nonnegative integer per square. The goal is to travel along any legitimate path from the upper left corner to the lower right corner of the board. The integer in any one square dictates how large a step away from that location must be. If the step size would advance travel off the game board, then a step in that particular direction is forbidden. All steps must be either to the right or toward the bottom. 


<P>
Consider the <!-- MATH
 $4 \times 4$
 -->
<SPAN CLASS="MATH">4 <TT>x</TT> 4</SPAN>
<tex2html_verbatim_mark> board shown in Figure 1, where the solid circle identifies the start position and the dashed circle identifies the target. Figure 2 shows the three paths from the start to the target, with the irrelevant numbers in each removed.

<P>

<IMG
 WIDTH="172" HEIGHT="172" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/nikola_borisof:PASCALTR1.jpg"
 ALT="$\textstyle \parbox{.24\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=1.5in
\epsfbox{p3390a.eps}
\par
\medskip
Figure 1
\end{center}}$"><IMG
 WIDTH="517" HEIGHT="172" ALIGN="MIDDLE" BORDER="0"
 SRC="http://www.spoj.pl/content/nikola_borisof:PASCALTR2.jpg"
 ALT="$\textstyle \parbox{.75\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=4.5in
\epsfbox{p3390b.eps}
\par
\medskip
Figure 2
\end{center}}$">
<P>

Â Â Â Â Â Â Â Â Â Â Â Â Â  Figure 1 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  Figure 2





*******InputConstraints*******

<p>The input contains data for one to thirty boards, followed by a final line containing only the integer `<TT>-1</TT>'. The data for a board starts with a line containing a single positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $4 \le n \le 34$
 -->
<SPAN CLASS="MATH">4 &lt;= <I>n</I> &lt;= 34</SPAN>
<tex2html_verbatim_mark>, which is the number of rows in this board. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN>

<tex2html_verbatim_mark> rows of data. Each row contains <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> single digits, 0-9, with no spaces between them.. 

<P>


*******OutputConstraints*******

<p>The output consists of one line for each board, containing a single integer, which is the number of paths from the upper left corner to the lower right corner. There will be fewer than <SPAN CLASS="MATH">2<SUP>63</SUP></SPAN>
<tex2html_verbatim_mark> paths for any board.


<P>

<P><P>
<BR>

<B>Warning:</B> Brute force methods examining every path will likely exceed the allotted time limit. 64-bit integer values are available as <SPAN  CLASS="textit">long</SPAN> values in Java or <SPAN  CLASS="textit">long long</SPAN> values in C/C++ compilers.

<P>




*******IOTestCases*******


<pre>
<b>Input:</b>
4 
2331 
1213 
1231 
3110 
4 
3332 
1213 
1232 
2120 
5 
11111 
11111 
11111 
11111 
11111 
-1


<b>Output:</b>
3 
0 
70

</pre>



______________________________________________________
SPEEDLM||||||true||||||


<p>Bill and Ted are taking a road trip.  But the odometer in their car
is broken, so they don't know how many miles they have
driven. Fortunately, Bill has a working stopwatch, so they can record
their speed and the total time they have driven. Unfortunately, their
record keeping strategy is a little odd, so they need help computing
the total distance driven. You are to write a program to do this
computation. </p>

<p>For example, if their log shows</p>

<blockquote>
<table cellpadding="2" cellspacing="2" border="1"
 style="text-align: left;">
      <tbody>
        <tr>
          <td valign="top" style="text-align: center;">Speed in miles per
hour<br>
          </td>
          <td valign="top" style="text-align: center;">Total elapsed time
in  hours<br>
          </td>

        </tr>
        <tr>
          <td valign="top" style="text-align: center;">20<br>
          </td>
          <td valign="top" style="text-align: center;">2<br>
          </td>
        </tr>
        <tr>

          <td valign="top" style="text-align: center;">30<br>
          </td>
          <td valign="top" style="text-align: center;">6<br>
          </td>
        </tr>
        <tr>
          <td valign="top" style="text-align: center;">10<br>

          </td>
          <td valign="top" style="text-align: center;">7<br>
          </td>
        </tr>

  </tbody>
</table>
</blockquote>

<p>this means they drove 2 hours at 20 miles per hour, then 6-2=4
hours at 30 miles per hour, then 7-6=1 hour at 10 miles per hour. The
distance driven is then (2)(20) + (4)(30) + (1)(10) = 40 + 120 + 10 =
170 miles. Note that the total elapsed time is always since the
beginning of the trip, not since the previous entry in their log. </p>


*******InputConstraints*******

<p>The input consists of one
 or more data sets. Each set starts with a line  containing an
 integer
<i>n</i>,  1 &#8804; <span style="font-style: italic;">n</span>  &#8804; 10,Â  followed
by  <i>n</i> pairs of values, one pair per line. The  first value in a pair,
<span style="font-style: italic;">s,</span> is the  speed in miles per hour
and the second value, <span style="font-style: italic;">t</span>, is the
total elapsed time. Both <span style="font-style: italic;">s</span> and <span
 style="font-style: italic;">t</span> are integers, 1 &#8804;<span
 style="font-style: italic;"> s</span> &#8804; 90 and 1 &#8804;<span
 style="font-style: italic;"> t</span> &#8804; 12.Â  The values for <span
 style="font-style: italic;">t </span>are always in strictly increasing order.
  A value of -1 for <span style="font-style: italic;">n</span> signals the
 end of the input. </p>


*******OutputConstraints*******

<p>For each input set, print
 the distance driven, followed by a space, followed by the word "miles".Â 
 </p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
20 2
30 6
10 7
2
60 1
30 5
4
15 1
25 2
30 3
10 5
-1

<b>Output:</b>
170 miles
180 miles
90 miles

</pre>



______________________________________________________
LMIS||||||true||||||


<p>You are given a set of numbers on the standard input. You need to figure out what is the smallest number of them that you need to remove so that you are left with the Longest Monotonically Nondecreasing Sequence.


*******InputConstraints*******

<p>On the standard input your are given a set with less than 1000000 integers each less than 30000.


*******OutputConstraints*******

<p>A single integer - the number of numbers you will remove.


*******IOTestCases*******


<pre>
<b>Input:</b>
3 1 2 0 5 4 10

<b>Output:</b>
3
</pre>
(you need to remove 3, 0, (5 or 4), then you will be left with 1, 2, (5 or 4), 10).



______________________________________________________
KNAPSACK||||||true||||||


<p>The famous knapsack problem. You are packing for a vacation on the sea side and you are going to carry only one bag with capacity S (1 <= S <= 2000). You also have N (1<= N <= 2000) items that you might want to take with you to the sea side. Unfortunately you can not fit all of them in the knapsack so you will have to choose. For each item you are given its size and its value. You want to maximize the total value of all the items you are going to bring. What is this maximum total value?



*******InputConstraints*******

<p>On the first line you are given S and N. N lines follow with two integers on each line describing one of your items. The first number is the size of the item and the next is the value of the item.


*******OutputConstraints*******

<p>You should output a single integer on one like - the total maximum value from the best choice of items for your trip.


*******IOTestCases*******


<pre>
<b>Input:</b>
4 5
1 8
2 4
3 0
2 5
2 3


<b>Output:</b>
13
</pre>



______________________________________________________
MERGSORT||||||true||||||


<p>Simple. Sort the numbers on the standard input using the merge sort algorithm. Don't try to cheat by just calling your build in functions... I can see your source.



*******InputConstraints*******

<p>On the standard input you will receive N (1 <= N <= 100000). Each number will fit in 32-bit integer


*******OutputConstraints*******

<p>Output the same integers in a sorted manner. Smallest to largest.


*******IOTestCases*******


<pre>
<b>Input:</b>
7 3 2 5 4 3

<b>Output:</b>
2 3 3 4 5 7
</pre>



______________________________________________________
FASTPOW||||||true||||||


<p>You are asked to compute A^B (A to the power of B) (1 <= A,B <= 100 000 000). You surely understand that this number can be quite astonishing and i don't like big numbers unless they are on my paycheck so I'm just interested in the reminder of A^B mod C (1<= C <= 1000000)


*******InputConstraints*******

<p>Three integers A B and C.


*******OutputConstraints*******

<p>Single integer - the result of the computation.


*******IOTestCases*******


<pre>
<b>Input:</b>
2 10 1000

<b>Output:</b>
24
</pre>



______________________________________________________
GARDENHU||||||true||||||


<p>We have a garden with trees in it. For each tree is represented by x and y coordinates. Your goal is to find the least amount of net needed to surround all the trees so that all trees are inside the net. In other words you need to find the the length of the convex hull around those points


*******InputConstraints*******

<p>On the first line a lonely integer N (3 <= N <= 10000) representing the number of trees in the garden. On each of the following N lines you will find two integers - the coordinates of the next tree.


*******OutputConstraints*******

<p>A single integer - the length of the convex hull. Round it up to an integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 0
5 0 
1 1
0 5


<b>Output:</b>
17
</pre>



______________________________________________________
CALCAREA||||||true||||||


<p>Very simple. You are given polygon and you need to calculate his area. The polygon does not self intersect 


*******InputConstraints*******

<p>A lonely integer N (3 <= N <= 10000) - the number of nodes. On each of the next N lines you will find the coordinates of the next vertex from the polygon.


*******OutputConstraints*******

<p>A single integer - the rounded up area of the polygon.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
0 0
1 0
1 1
0 1

<b>Output:</b>
1

</pre>



______________________________________________________
INOUTEST||||||true||||||


<p>Similar to that of the problem <a href="http://www.spoj.pl/problems/INTEST/">Enormous Input Test</a>, the purpose of this problem is to determine whether your method of reading input data and writing output data is fast enough to process extremely large test cases.</p>


*******InputConstraints*******

<p>The first line of input contains a single integer N (1 &#8804; N &#8804; 10<sup>6</sup>), denoting the number of lines to follow. Each of these lines contains two space-separated integers a and b (|a|, |b| &#8804; 40,000).</p>


*******OutputConstraints*******

<p>For each pair a and b, write a single line of output containing the value of a Ã— b.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
5
-1 -1
1 1
0 999
654 321
39999 -39999

<b>Output:</b>
1
1
0
209934
-1599920001
</pre>


______________________________________________________
NETIQUE||||||true||||||


<p>Mr. Manners teaches netiquette ("net etiquette",
particularly as it applies to email) at the local community college.
There are many different aspects to proper netiquette, including
courtesy, correct spelling, and correct grammar. Through experience
Mr. Manners has found that his college's email system does a good job
of catching most spelling and grammatical errors, and he's also found
that most of his students are courteous.  So there are four violations
of netiquette that Mr. Manners pays careful attention to, and he's
devised a quick way to test for them. A message is <em>suspicious</em>
if it contains any of the following:</p>

<ol>
    <li>two adjacent uppercase letters,<br>
    (because you might be SHOUTING)

    <li>a digit adjacent to a letter,<br>
    (because you might be l33t, d00d)

    <li>an isolated character other than <i>a</i>, <i>A</i>, or <i>I</i>,<br>

    (because u r probably abbreviating words; the spell checker
    doesn't catch this for some reason)

    <li>two adjacent punctuation marks, unless one of them is a double
    quote (the character ").<br>
    (because you might be using an emoticon :-)
</ol>

<p>For this problem, all characters in an email message are printable
ASCII characters with codes in the range 32..126 (inclusive).
A <em>punctuation mark</em> is any character other than a letter,
digit, or space.  Two characters are <em>adjacent</em> if they are
right next to each other, with no characters in between. An
<em>isolated character</em> is one whose only adjacent characters (if
any) are spaces. Your job is to write a program that can tell if
a one-line email message is suspicious.</p>



*******InputConstraints*******

<p>The input consists of one or more email messages,
followed by a line containing only # that signals the end of the
input.  Each message is on a line by itself, does not begin or end
with a space, and does not contain consecutive spaces. End-of-line
characters occur at the end of every line (of course), but they are
not considered to be part of the message. A message will contain 1..80
characters.</p>



*******OutputConstraints*******

<p>For each message, output <em>suspicious</em> if it
meets one or more of the four criteria defined above, and output
<em>OK</em> otherwise.  In the examples below, the second email meets
all four criteria, and the fourth and sixth emails meet one criterion
each.</p>



*******IOTestCases*******


<pre>
<b>Input:</b>
"This is a safe message," said 50 wise men.
DON'T b l8 for the Apple ][ user's group meeting.
I ate at "Al's Big Burritos" for lunch!
It's not OK to burp at your grandmother.
*BuT* YoU _CaN_ Do ThIs, YoU KnOw.
We 8 eight oranges.
#

<b>Output:</b>
OK
suspicious
OK
suspicious
OK
suspicious
</pre>



______________________________________________________
LOGPOWER||||||true||||||


<p>Given an integer A, N and M, calculate <i>R = A<sup>N</sup> modulo M</i>, ie. the remainder after dividing N-th power of A by the modulus M.


*******InputConstraints*******

<p>First line: positive integer T - numer of test cases, T<1000.<br/>
Next T lines contain 3 integers each: A<sub>i</sub>, N<sub>i</sub> and M<sub>i</sub>.<br/>

Data constraints:<br/>
-2<sup>30</sup> &lt; A<sub>i</sub> &lt; +2<sup>30</sup> <br/>
0 &lt; N<sub>i</sub> &lt; +2<sup>60</sup> <br/>
2 &lt; M<sub>i</sub> &lt; +2<sup>30</sup> <br/>



*******OutputConstraints*******

<p>For each of test cases, output the number R<sub>i</sub> - one in each line.


*******IOTestCases*******


<pre>
<b>Input:</b>
6
1 2 3
4 5 6
7 8 9
12 34 56
78 90 123
4567890 123456789012 34567890


<b>Output:</b>
1
4
4
16
42
781950
</pre>



______________________________________________________
EZDIJKST||||||true||||||


<p>Determine the shortest path between the specified vertices in the graph given in the input data.<br/>
Hint: You can use Dijkstra's algorithm.<br/>
Hint 2: if you're a lazy C++ programmer, you can use set and cin/cout (with sync_with_stdio(0)) - it should suffice.<br/>
<br/>

*******InputConstraints*******

<p>first line - one integer - number of test cases<br/>
For each test case the numbers V, K (number of vertices, number of edges) are given,<br/>
Then K lines follow, each containing the following numbers separated by a single space: <br/>
a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub><br/>
It means that the graph being described contains an edge from a<sub>i</sub> to b<sub>i</sub>,<br/>
with a weight of c<sub>i</sub>.<br/>

Below the graph description a line containing a pair of integers A, B is present.<br/>

The goal is to find the shortest path from vertex A to vertex B.<br/>
All numbers in the input data are integers in the range 0..10000.<br/>


*******OutputConstraints*******

<p>For each test case your program should output (in a separate line) a single number C - the length of the shortest path from vertex A to vertex B. In case there is no such path, your program should output a single word "NO" (without quotes)<br/>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 2
1 2 5
2 3 7
1 3
3 3
1 2 4
1 3 7
2 3 1
1 3
3 1
1 2 4
1 3

<b>Output:</b>
12
5
NO
</pre>



______________________________________________________
KLUCKY||||||true||||||


<p>The Kurukshetra OPC team observed that many online programming contests have a problem titled "Lucky Number". So we decided to have one in KOPC too.</p>

<p>We define the Lucky sequence as the infinite sequence of all integers, in ascending order, that can represented as any positive integer power of 5 (i.e 5<sup>k</sup> where k is a positive integer) or as a sum of distinct positive integer powers of 5 (i.e 5<sup>a1</sup> + 5<sup>a2</sup> + 5<sup>a3</sup> + ... , where a1,a2,a3, ... are distinct positive integers). All the numbers in the lucky sequence are called lucky numbers. The first few lucky numbers are 5, 25, 30, 125, 130, 150, ...
<p>
Given n your task is to find the n<sup>th</sup> lucky number.



*******InputConstraints*******

<p>First line of input contains an integer <b>t</b>, t &#8804; 200, representing the number of test-cases. Then t lines follow each containing one integer <b>n</b>, 1 &#8804; n &#8804; 8000.


*******OutputConstraints*******

<p>For each test case output the nth lucky number on a separate line. Answers will fit in a 32-bit signed integer.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
1
2
3
9

<b>Output:</b>
5
25
30
630

</pre>


______________________________________________________
MMOD29||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MMOD29/en/">English</a></td> 
<td width="50%"><a href="/problems/MMOD29/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Consider a positive integer X,and let S be the sum of all positive integer
divisors of 2004^X . Your job is to determine S modulo 29 (the rest of the
division of S by 29). Take X = 1 for an example. The positive integer
divisors of 2004^1 are 1, 2, 3, 4, 6, 12, 167, 334, 501, 668, 1002 and 2004.
Therefore S = 4704 and S modulo 29 is equal to 6. 
</pre>
<b>Input </b>
<pre>
The input consists of several test cases. Each test case contains a line 
with the integer X (1 <= X <= 10000000). A test case of X = 0 indicates 
the end of input, and should not be processed. 

Sample Input
1 
10000 
0
</pre>
<b>Output</b>
<pre>
For each test case, in a separate line, please output the result of S modulo 29. 

Sample Input
6 
10 
</pre>

 


______________________________________________________
BICOLOR||||||true||||||


<p>When you look at a political map of the world, each country is colored in color different from its neighbors' so that you can clearly see the borders. But as you know, the are between 192 and 195 countries in the world (depending on where you live) so it is common for two countries on the map to have the same color. After all, men can see only 16 colors ("Peach" is not a color according to me), so it has been a hard question for a long time if it is possible to color the map of the world with just 4 colors, following the rule that you are not allowed to color neighboring countries with the same color. This problem, however, is not easy at all, and we are going to simplify it a little bit. You are a Rock Star, and you are going on a tour in the galaxy. You are looking at the map of the sky and some of the stars are connected with other stars to form oddly shaped constellations. You are wondering if the stars can be bicolored (colored with just two colors) following the rule that you can not color two stars with the same color if they are directly connected with line on the map. You are bored as you are traveling towards the first star on your tour with speeds close to the speed of light so the clock in your space ship are ticking slower. Having nothing better to do, you decide to write a computer program to solve it.



*******InputConstraints*******

<p>The input will consist of multiple maps. Each map starts with the number of stars on the map N (1 <= N <= 1024). On the next line is the number M (1<= M <=30000), the number of lines on the map connecting the stars. The stars are numbered with integers from 0 to N-1. On the next M lines you will find 2 integers - the ID-s of two stars that are connected. To denote the end of the input, the last map will have N = 0, and at this point you should stop reading.

*******OutputConstraints*******

<p>For each map in the input case, you need to output exactly one line in the output containing either the string "NOT BICOLORABLE" or "BICOLORABLE".


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3
0 1
1 2
2 0
5
4
0 1
0 2
0 3
0 4
0

<b>Output:</b>
NOT BICOLORABLE
BICOLORABLE
</pre>



______________________________________________________
TREEQ||||||true||||||


<p>You are given a full binary tree, and there is an integer representing the data at each node of the tree. The other members of your band are asking you questions in the following form. They give you an integer X, and you have to tell them which leaf of the tree will get X for if you follow the path from it to the root of the tree and sum the numbers in each node. If there are two such leaves, choose the one with a smaller ID. The root of the tree has an ID of 0. Its left child has an ID of 1, and its right one an ID of 2. In more mathematical form, if you have a node with an ID of x, then the left child of x is 2*x+1 and the right one is 2*x+2. The members of your band will be impressed if you answer their questions fast and correctly. Cool!


*******InputConstraints*******

<p>The input consists of multiple test cases. Each test case starts with the number of nodes in the tree N (1<= N <= 1000). The last test case will have N = 0, so at this point you should quit. As you know a full binary tree with N nodes will have N = (2^x) - 1 nodes. The nodes are given IDs using the scheme described above, and the root has an ID of 0. On the next N lines of the input, you will find the the data that is stored in the corresponding node. On the next line after this is the integer M (1<= M <= 1000) - the number of question the band members are going to ask you. On each of the next M lines you will find one integer representing the question.


*******OutputConstraints*******

<p>For each of the questions you have to output the minimum ID of a leaf node that meets the requirements. If no leaf meats the requirements output "NOT FOUND". Refer to the example tests.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1
2
3
4
0
3
4
5
0

<b>Output:</b>
NOT FOUND
1
2
NOT FOUND
</pre>



______________________________________________________
MCITYHAL||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MCITYHAL/en/">English</a></td> 
<td width="50%"><a href="/problems/MCITYHAL/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Because of its age, the City Hall has suffered damage to one of its walls. 
A matrix with M rows and N columns represents the encoded image of that wall, 
where 1 represents an intact wall and 0 represents a damaged wall (like in Figure-1). 
 
1110000111
1100001111
1000000011
1111101111
1110000111 
 
Figure-1 
 
To repair the wall, the workers will place some blocks vertically into 
the damaged area. They can use blocks with a fixed width of 1 and different 
heights of {1,2, ..., M}.  
 
For a given image of the City Hall&#8217;s wall, your task is to determine how
many blocks of different heights are needed to fill in the damaged area
of the wall, and to use the least amount of blocks.
</pre>
 

______________________________________________________
MSTICK||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSTICK/en/">English</a></td> 
<td width="50%"><a href="/problems/MSTICK/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
There is a pile of  n  wooden sticks. The length and weight of each stick
are known in advance. The sticks are to be processed by a woodworking machine
in one by one fashion. It needs some time, called setup time, for the  machine
to  prepare  processing  a  stick.  The  setup  times  are  associated  with
cleaning  operations  and changing tools and shapes in the machine. The setup
times of the woodworking machine are given as follows: 
 
(a) The setup time for the first wooden stick is 1 minute. 
(b) Right after processing a stick of length  l  and weight  w , the machine will
need no setup time for a stick of length  l'  and weight  w'  if  l &#8804; l' and  w &#8804; w'. 
Otherwise, it will need 1 minute for setup. 
 
You are to find the minimum setup time to process a given pile of  n  wooden sticks. 
For example, if you have five sticks whose pairs of length and weight are  
( 9 , 4 ) , ( 2 , 5 ) , ( 1 , 2 ) , ( 5 , 3 ) , and ( 4 , 1 ) , then the minimum
setup time should be 2 minutes since there is a sequence of pairs ( 4 , 1 ) , 
( 5 , 3 ) , ( 9 , 4 ) , ( 1 , 2 ) , ( 2 , 5 ) .
</pre>

______________________________________________________
MPRIME1||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/MPRIME1/en/">English</a></td>
<td width="50%"><a href="/problems/MPRIME1/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Some positive integers can be represented by a sum of one or more consecutive prime numbers.<br />How many such representations does a given positive integer have? For example, the integer 53 has two representations 5 + 7 + 11 + 13 + 17 and 53. The integer 41 has three representations 2+3+5+7+11+13, 11+13+17, and 41. The integer 3 has only one representation, which is 3. The integer 20 has no such representations. Note that summands must be consecutive prime numbers, so neither 7 + 13 nor 3 + 5 + 5 + 7 is a valid representation for the integer 20.<br /><br />Your mission is to write a program that reports the number of representations for the given positive integer.</p>

______________________________________________________
HARDWARE||||||true||||||


<p>Ola Clason&#8217;s Hardware store is an old company where most work is done &#8220;the old way&#8221;. Among other things, the company is the one and only provider of marble house numbers. These house numbers have become extremely popular among construction companies, especially the ones
building luxury estates. This is of course great for Ola Clason, but also a small problem. Nisse, who has been managing the incoming orders has turned out to be a bottleneck in Ola&#8217;s business. Most orders are on the form &#8220;Coconut Drive 200, 202, 204, ..., 220&#8221;. This means every even number between 200 and 220. Nisse&#8217;s work is to transfer an order to a list of necessary digits and other symbols.
Your assignment is to write a program that automates Nisse&#8217;s work with orders containing only positive integer house numbers. Nisse will still in the future process all special orders (those including non digit symbols) by hand.


*******InputConstraints*******

<p>On the first line of input is a single positive integer n, specifying the number of orders that follow. The first line of each order contains the road name for that order. No road name is longer than 50 characters.
The second line states the total number of buildings needing new marble numbers on that order. Then follows the different house number specifications on several lines. These lines are of two kinds: single number
lines and multiple number lines. A single number line simply consists of the house number by itself, while a multiple number line starts with a &#8220;+&#8221;-sign, followed by three positive integer numbers: first number, last number and the interval between the house numbers. The distance between the first and last house number will always be a multiple of the house number interval. A house number will never have more than five digits. After the
last house number specification line, the next order follows, if there is any.


*******OutputConstraints*******

<p>For each order, the output consists of 13 lines. The first and second lines should be identical with the first two input lines. Then, there follows 10 lines with information on how many marble digits of each kind the order consists of. These rows are on the format &#8220;Make X digit Y&#8221; where X is how many copies of digit Y they need to make. The last row states the total number Z of digits needed, on the format &#8220;In total Z digits&#8221;. If there
is only one digit to produce, it should say &#8220;In total 1 digit&#8221;, in order to be grammatically correct.



*******IOTestCases*******


<pre>
<b>Input:</b>
1
Short Street
23 addresses
+ 101 125 2
275
+ 100 900 100

<b>Output:</b>
Short Street
23 addresses
Make 23 digit 0
Make 22 digit 1
Make 5 digit 2
Make 4 digit 3
Make 1 digit 4
Make 5 digit 5
Make 1 digit 6
Make 4 digit 7
Make 1 digit 8
Make 3 digit 9
In total 69 digits
</pre>



______________________________________________________
JACKPOT||||||true||||||


<p>Bill has found the perfect way to make money playing the slot machines.
After months of careful research, he has finally figured out the mechanics behind how the machines operate. Now he is ready to make profit of his findings.
But first an introduction to the game. A slot machine consists of a number of wheels, usually three or four, each with a number of symbols printed on it &#8211; cherries, oranges, bells, etc. &#8211; and will show one of its symbols at a given time. To play, you insert a coin, push a button and the wheels start spinning. After spinning for a while, each wheel stops &#8211; at random it seems &#8211; at one of its symbols. If all wheels stop at the same symbol, or some nice combination of symbols, the player wins. One
combination that is especially desirable is having the jackpot symbol on all wheels. This combination is simply called &#8217;jackpot&#8217; and will make you rich for life.
What Bill has discovered is that each wheel will stop at the jackpot symbol with a certain periodicity, which differs a lot between wheels.
He has also figured out (after some sneeking around at the slot-machine factory) that all newly manufactured slot-machines are delivered showing the jackpot combination, and that they all have a counter at the back,
telling how many times the machine has been played. This counter is always set to zero at delivery.
Now, all Bill needs to do is to calculate the number of times a machine has to be played between two occurrences of the jackpot combination. We will call this number the jackpot periodicity. This is of course the same as the number of times the machine has to be played after leaving the factory, before it gives its first jackpot. Thus, with a glance at the counter on the back of a machine, Bill can figure out if it is about to give a jackpot.
As Bill knows that you are a skillful computer programmer, he turns to you with the problem of calculating the jackpot periodicity. For each machine, he will give you the number of wheels, and the periodicity with which the jackpot symbol shows up on each wheel.


*******InputConstraints*******

<p>One line with the number of machines n <= 20. For each machine, one line with the number of wheels w <= 5, and one line with w numbers, p1, ..., pw the periodicity of each wheel pk <= 1000.


*******OutputConstraints*******

<p>One line per machine: The jackpot periodicity of the machine, if it is less than or equal to a billion (10^9), otherwise output the text &#8217;More than a billion.&#8217;.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
3
10 6 15

<b>Output:</b>
30
</pre>



______________________________________________________
PROBTNPO||||||false||||||

<p align="left"><strong>Background:</strong><br /> Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.</p>
<p align="left"><strong>The Problem:</strong></p>
<pre>Consider the following algorithm:

1. input n

2. print n

3. if n = 1 then STOP

         4. if n is odd then n = 3n + 1

         5. else n = n / 2

6. GOTO 2
</pre>
<p align="left">Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1</p>
<p align="left">It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 &lt; n &lt; 1,000,000 (and, in fact, for many more numbers than this.)</p>
<p align="left">Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16.</p>
<p align="left">For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.</p>
<p align="left"><strong>The Input:</strong><br /> The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0.</p>
<p align="left">You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j.</p>
<p align="left">You can assume that no operation overflows a 32-bit integer.</p>
<p align="left"><strong>The Output:</strong><br /> For each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line).</p>
<pre><strong>Sample Input:</strong>
1 10
100 200
201 210
900 1000

<strong>Sample Output:</strong>
1 10 20
100 200 125
201 210 89
900 1000 174
</pre>


______________________________________________________
DOUGHNUT||||||true||||||



<p>Young Harry was asked to buy some foodstuff to his neighbour - weird old lady who owned a lot of fat cats. But cats were weird too and they ate only doughnuts. So the lady wanted Harry to bring exactly one doughnut to each of her pets &#8211; and she had c of them. Harry had a rucksack with him but as he was a little boy he could hump only k kilograms. Harry knew that each doughnut weights w kilograms (big cats, big doughnuts). Help him decide whether he should go to supermarket and buy the foodstuff or just give up and dream he could do some magic... </p>


*******InputConstraints*******

<p>There is a single positive integer t (t <= 100) on the first line of input which corresponds to the number of tests (Harry was asked to buy doughnuts few times). Then t lines follow, each containing three numbers: c, k and w (1 <= c, k, w <= 100).
<br/><br/>
t [number of tests]<br/>
c k w [number of cats, Harry's hoisting capacity and weight of doughnut]<br/>
c k w [next test case]<br/>
...
</p>


*******OutputConstraints*******

<p>t lines containing word &#8220;yes&#8221; if Harry is capable of handling the task or &#8220;no&#8221; if doughnuts would cause his spine crack.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
5 15 3
1 5 4
13 25 2

<b>Output:</b>
yes
yes
no
</pre>




______________________________________________________
DIOEQ||||||true||||||


<p>Given a,b,c (where a,b not both zero) your task is to find if there exist any integers x,y that satisify the equation a*x+b*y=c.</p>

*******InputConstraints*******

<p>The input consists of several test cases. Each test case contains a line  with the three integers a,b,c (a,b,c &lt;= 10000000). The test case 0 0 0 indicates the end of input.</p>

*******OutputConstraints*******

<p>For each test case you must output "YES" if there exists a solution,otherwise output "NO". (quotes only for clarity)</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1 9 1
5 10 19
0 0 0

<strong>Output:</strong>
YES
NO
</pre>


______________________________________________________
APLUSB2||||||true||||||


<p>Given 2 integers, A and B, find their sum.

Beware: There are no limits on A and B

*******InputConstraints*******

<p>Two integers up to 100000 digits in length

*******OutputConstraints*******

<p>Output their sum


*******IOTestCases*******


<pre>
<b>Input:</b>
1
4

<b>Output:</b>
5
</pre>



______________________________________________________
MSE08D||||||false||||||

<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td style="text-align: center;" width="50%"><a href="/problems/MSE08D/en/">English</a></td>
<td style="text-align: center;" width="50%"><a href="/problems/MSE08D/vn/">Vietnamese</a></td>
</tr>
</tbody>
</table>
<p><br /><p>John has recently arrived in Romania for the South Eastern European Regional competitions. John has never been to Romania before so Romanians decided to organize sightseeing tour for him. This tour will include several Romanian cities and none of them will be  visited more than once. John will start in one city and will visit some other cities according to a guide tour. At the end of the tour John will return to the starting point. There are N cities numbered from 1 to N and M two-way roads in the country. Each road connects two different cities. Consider a sightseeing tour for John c1,c2, ...,cn, where each ci denotes a cityin Romania. Then all ci must be distinct, ci and ci+1 must be connected by a road, where i=1,2,...,n-1,  cn and  c1 must be connected by a road as well. </p><p>Being a odd person John would like to visit an odd number of cities. The organizers have drawn the plan of all possible  tours with an odd number of cities. Residents of the cities would like John to visit them. So if there is at least one tour passing through some city than this city is called lucky. Your task is to calculate the number of lucky cities in Romania </p>
______________________________________________________
MSE08F||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE08F/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE08F/vn/">Vietnamese</a></td> 
</tr></table>

<pre>
Joe is fond of computer games. Now, he must solve a puzzling situation.
In front of his eyes lies a huge map with fortified towns. His enemy
is a very powerful and tricky character who can connect and disconnect 
the towns by giving some commands. Two towns are connected if 
they have been directly connected or interconnected through some 
other connected towns at some moment in time. When a town is disconnected 
it gets isolated and clears its own connection 
history, not the 
connection history of the other towns. Each connection is bi-directional. 
Initially the towns are isolated. Joe is asked to answer quickly if 
two towns are connected, according to the history of the character&#8217;s commands.  
Write a program which based on information input from a text file counts 
the number of yes answers and the number of no answers to questions of 
the kind: is town i connected with town j?  
 
</pre>

______________________________________________________
MSE08I||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE08I/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE08I/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
A group of  N Internet Service Provider  companies (ISPs) use a private 
communication channel that has a maximum capacity of C traffic units 
per second. </p><p>
Each company transfers T traffic units per second through the channel and gets a 
profit that is directly proportional to the factor  
T(C  -  T*N). </p><p>
The problem is to compute T_optim, the smallest value of T that maximizes 
the total profit the N ISPs can get from using the channel. Notice 
that N, C, T, and T_optim are integer numbers.  </p><p>
 
 

______________________________________________________
MSE07B||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE07B/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE07B/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
The new founded Balkan Investment Group Bank (BIG-Bank) opened a new 
office in Bucharest, equipped with a modern computing environment 
provided by IBM Romania, and using modern information technologies. </p><p>
As usual, each client of the bank is identified by a positive 
integer K and, upon arriving to the bank for some services, 
he or she receives a positive integer priority  P. One of the inventions 
of the young managers of the bank shocked the software 
engineer of 
the serving system. They proposed to break the tradition by sometimes 
calling the serving desk with the lowest priority instead of that with
 the highest priority. Thus, the system will receive the following types 
of request: </p><p>
0  The system needs to stop serving </p><p>
1  K P Add client K to the waiting list with priority P </p><p>
2  Serve the client with the highest priority and drop him or her 
from the waiting list </p><p>
3  Serve the client with the lowest priority and drop him or her from 
the waiting list.</p><p>
Your task is to help the software engineer of the bank by writing a 
program to implement the requested serving policy.  
</p><p>

______________________________________________________
MSE07F||||||false||||||

<table class="problems" width="100%"><tr  class="navigation">
<td width="50%"><a href="/problems/MSE07F/en/">English</a></td> 
<td width="50%"><a href="/problems/MSE07F/vn/">Vietnamese</a></td> 
</tr></table>

</p><p>
Bob is a skilled engineer. He must design a highway that crosses a 
region with few villages. Since this region is quite unpopulated, 
he wants to minimize the number of exits from the 
highway. </p><p>
He models the highway as a line segment S (starting from zero), the 
villages as points on a plane, and the exits as points on S. Considering 
that the highway and the villages position are known, Bob must find the 
minimum number of exists such that each village location is at most at 
the distance D from at least one exit. He knows that  all village locations 
are at most at the distance D from S. </p><p>
 
The program input is from a text file. Each data set in the file stands 
for a particular set of a highway and the positions of the villages. 
The data set starts with the length L (fits an integer) 
of the highway. 
Follows the distance D (fits an integer), the number N of villages, and for 
each village the location (x,y). The program prints the minimum number 
of exits.  </p><p>
 
White spaces can occur freely in the input. The input data are correct 
and terminate with an end of file. For each set of data the program prints 
the result to the standard output from the beginning of a line. </p><p>

An input/output sample is in the table below. There is a single data set. 
The highway length L is 100, the distance D is 50. There are 3 villages 
having the locations (2, 4), (50, 10), (70, 30).  The result for 
the data set is the minimum number of exits: 1.  </p><p>
 

<h3>Sample</h3>
<pre>
Input :
100 
50 
3 
2 4 
50 10 
70 30 
Ouput: 
1</pre>
 

 


______________________________________________________
MFMOBILE||||||false||||||

<p>Fred is a baby. Above Fred's crib hangs a mobile. Fred is amused by this mobile. Fred has a twin sister, Mary. Above Mary's crib hangs another mobile. Fred wonders whether the mobile above his crib and the mobile above Mary's crib are the same. Help Fred.<br><br>

A mobile is a collection of bars, strings, and decorative weights suspended from the ceiling. Each bar is suspended by a string tied to the exact centre of the bar. From each end of a bar hangs a string that is tied either to another bar or to a weight. The bars can rotate freely about their centres. Fred cannot tell two bars apart, even if they have different lengths. Fred also cannot tell two strings apart. Fred therefore considers two mobiles to be the same if the bars of one mobile can be rotated somehow to make the two mobiles appear identical.<br><br>

Fred has even developed a notation for describing mobiles. He assigns each bar a distinct positive integer from 1 to the number of bars in the mobile, and he assigns the various objects negative integers. 1 always represents the bar suspended from the ceiling. (So, for example, a biplane might be represented by Fred as object -2, a crescent-moon might be object -57, and a star might be object -21.) Fred can only count down to -9999, so you can assume that he gave no objects lower numbers than -9999.


______________________________________________________
INV||||||true||||||


<p>Calculate the number of ways that k things can be 'chosen' from a set of n things.</p>


*******InputConstraints*******

<p>The first line of input is the number of tests t <= 100000. Next t lines contains two integers each n and k, separated with a single space. 0 <= k <= n <= 100000.</p>


*******OutputConstraints*******

<p>For each test output the number of ways that k things can be 'chosen' from a set of n things modulo 1000000007.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
3
9876 5432
100 50
100000 50000

<b>Output:</b>
266875274
538992043
149033233
</pre>



______________________________________________________
PLCNUM1||||||true||||||


<p>Little Chucha is having a lot of fun with her new computer game. She is given a NxN board which she has to fill with the numbers 1 to N^2, no repetitions allowed. The computer calculates the sum of distances for each pair of consecutive numbers, that is, 1 -> 2, 2 -> 3, ..., N^2 -> 1. The goal is to make that sum as short as possible.


*******InputConstraints*******

<p>Input consists of a single integer number 1<=N<=100, the size of the board.


*******OutputConstraints*******

<p>Output one possible placing of the numbers. You are to write N lines, N space separated integers each.


*******IOTestCases*******


<pre>
<b>Input:</b>
3

<b>Output:</b>
1 2 3
4 5 6
7 8 9

<b>Score:</b>
Score for the example is:
Distance 1 -> 2 : 1
Distance 2 -> 3 : 1
Distance 3 -> 4 : 3
Distance 4 -> 5 : 1
Distance 5 -> 6 : 1
Distance 6 -> 7 : 3
Distance 7 -> 8 : 1
Distance 8 -> 9 : 1
Distance 9 -> 1 : 4
Sum of distances (SOD): 16, Min SOD: 10, Score: 1+16-10=7 points.
</pre>



______________________________________________________
AE3B||||||false||||||

<p>
  The rapidly growing popularity of Bytean chess is the reason why many different
  variants of this game have been invented.
  Because the traditional version is played on an infinite chessboard, what
  can be quite troublesome, sometimes simpler variants are chosen,
  in which the dimensions of the chessboards are bounded by 100000 * 100000.
  
  Some squares of the chessboard are black and the remaining ones are white,
  however the painting pattern depends on the particular chessboard.
  A pawn moves on such a chessboard in a bit different way than in traditional
  chess - it can move horizontally, vertically or diagonally to any of the
  adjacent eight squares provided that this square has the
  same colour as the square currently occupied by the pawn.
</p>

<img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/ruch.jpg">
<p>Examples of valid moves.</p>

<p>
  For given pairs of squares on the chessboard it should be determined whether
  a pawn can travel between these squares.
</p>
    <h2>Input</h2>
<p>

  The first line of the standard input contains three integers
  n, m and P (1 &#8804; n &#8804; 100000, 1 &#8804; m &#8804; 1000000,
  1 &#8804; p &#8804; 1000) separated by single spaces and representing
  the size of the chessboard, the number of black fragments of the chessboard
  described in the input, and the number of queries, respectively.
  The chessboard has dimensions n*n and consists of squares with both
  coordinates between 1 and n.
  The following m lines contain descriptions of black fragments of the
  chessboard (they do not necessarily need to be disjoint).
  Each one of them consists of three integers w<sub>i</sub>, k<sub>i,1</sub>

  and k<sub>i,2</sub> (1 &#8804; w<sub>i</sub> &#8804; n, 1 &#8804; k<sub>i,1</sub> &#8804; k<sub>i,2</sub> &#8804; n)
  separated by single spaces and meaning that in row w<sub>i</sub> squares in
  columns between k<sub>i,1</sub> and k<sub>i,2</sub> are black.
  The squares that are not contained in any dark fragment specified in
  the input are white.
</p>
<p>
  The following P lines contain the queries.
  Each query consists of two pairs of integers
  a<sub>i,1</sub>, b<sub>i,1</sub>, a<sub>i,2</sub>, b<sub>i,2</sub>

  (1 &#8804; a<sub>i,1</sub>, b<sub>i,1</sub>, a<sub>i,2</sub>, b<sub>i,2</sub> &#8804; n)
  separated by single spaces.
  The query is: can a pawn get from the square in row a<sub>i,1</sub>
  and column b<sub>i,1</sub> to the square in row a<sub>i,2</sub> and column
  b<sub>i,2</sub>?
  </p>
	
    <h2>Output</h2>
    <p>

  Your program should output P lines to the standard output:
  the answers to the respective queries, in the same order as they
  appear in the input.
  The answer to each query is a line with a word "<tt>TAK</tt>"
  (meaning YES) or "<tt>NIE</tt>" (meaning NO) without the quotes,
  depending on whether a pawn can get from the first of the specified squares
  to the second one without passing through a square with different colour.
</p>

<h2>Example</h2>

<p>For the input data:</p><pre>4 5 2
1 1 1
2 3 4
3 2 2
4 2 2
4 2 2
1 1 3 2
1 2 4 4</pre>
<p>the correct result is:</p><pre>NIE
TAK</pre>

<img src="http://www.spoj.plhttps://vn.spoj.pl/SPOJVN/content/przyklad.jpg">
<p>The chessboard and the queries from the example.</p>

<p><i>Task author: Krzysztof Diks.</i></p>


______________________________________________________
ADWFNSNW||||||true||||||


<p>   </p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><a href="/problems/ADWFNSNW/en/">English</a></td>
<td width="50%"><a href="/problems/ADWFNSNW/vn/">Ti&#7871;ng Vi&#7879;t</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Today RomanD3 wants to race his old bicycle to Do Son beach with two friends of his, on his way he thought out a problem named "A Dwarf - N Snow Whites":</p>
<p>On his hard way to Do Son beach, he races with N Snow White racing on N different bicycles, but none of them wants to go alone. Given that the i<sup>th</sup> Snow White wants to be taken by the dwarf RomanD3 for T<sub>i</sub> minute(s), then she can go alone for (only) D<sub>i</sub> minute(s) (she will cry after that); RomanD3 wants to "escape" from them soon to go... by bus with the N+1<sup>th</sup> Snow White on the bus (whom he likes), so he must take each Snow White exactly one time but not let any of them cry; then he needs at least one minute to go with his lady (in dream ;)) ).</p>
<p>Please help him to determine whether he can do or not.</p>

*******InputConstraints*******

<p>- The first line contains number N. <br /> - Next N line(s), the i<sup>th</sup> line contains two numbers T<sub>i</sub>, D<sub>i</sub>.</p>

*******OutputConstraints*******

<p>- Print out -1 whether he can not "escape" from them or print out the order of serving them before he can jump on the bus ;))</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2 11
11 30

<strong>Output:</strong>
2 1
</pre>

______________________________________________________
LPS||||||false||||||

<p><span style="font-size: small;">A palindrome is a string that is the same as its reverse. Example "malayalam", "dad", "appa" etc. In this problem you are asked to find the length of the longest contiguous substring of a given string, which is a palindrome.</span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;"><strong>Input</strong><span style="font-size: small;"><br /></span></span></p>
<p><span style="font-size: small;">The first line consists of a single integer N, the no. of characters in the string. 1 &lt;= N &lt;= 100000.<br /></span></p>
<p><span style="font-size: small;">Second line is a string with N characters, where the characters are always lowercase english alphabets, ie 'a' to 'z'.&nbsp;</span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;"><strong>Output<br /></strong></span></p>
<p><span style="font-size: small;">A single line with an integer representing the length of longest palindromic substring.</span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;"><strong>Example<br /></strong></span></p>
<pre><p><span style="font-size: small;"><strong>Input:<br /></strong></span></p><span style="font-size: small;"><p>5<br />ababa&nbsp;</p></span></pre>
<pre><p><span style="font-size: small;"><strong><span style="font-size: small;">Output:<br /></span></strong></span></p><span style="font-size: small;"><p><span style="font-size: small;">5</span></p></span></pre>


______________________________________________________
LOTR1||||||true||||||


<p>We have all heard about good triumphing over evil. A perfect example would be the Battle of Helms Deep.</p>
<p>Lets probe a little deeper...</p>
<p>The people (especially warriors) of Rohan (good side) could not have known that they would win the battle before it was actually fought. This would have forced them to think up of some other alternate means of escape. A river flows near the fortress and naturally, they think this to be the best escape route. They build the biggest ship possible with the available materials.</p>
<p>This ship can carry a total weight of W(0&lt;W&lt;10^9) kilograms. There are a total of n (0&lt;n&lt;10000) people at Helms Deep having weights wi (0&lt;wi&lt;10^9).</p>
<p>What is the maximum number of people who can escape?</p>

*******InputConstraints*******

<p>1st line contains t, the number of testcases. First line of each test case contains the number of people n(0&lt;n&lt;10000) and the capacity of the ship W(0&lt;W&lt;10^9). The next n lines each contain the weights wi(0&lt;wi&lt;10^9) of the i th person. All numbers in the input file are integers.</p>

*******OutputConstraints*******

<p>One line giving the maximum number of people who can escape.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />1<br />3 3<br />2<br />1<br />3<br /><br /><br /><strong>Output:</strong><br />2<br /><br /></pre>


______________________________________________________
UCI2009A||||||true||||||


<p style="text-align: justify;">Ivan Ivanovich, the evil problemsetter, got tired of you and your team always using Java's BigInteger class. In an attempt to get back at you, he created this problem. You are to write a program which calculates the sum of pairs of integers. Simple, isn't it?</p>
<p style="text-align: justify;">Not so fast, coder. You will be dealing with base36 integers. Haven't you heard of them? It's easy.</p>
<ul>
<li>Digits from '0' to '9' represent the values 0 to 9.</li>
<li>Digits from 'A' to 'Z' represent the values 10 to 35.</li>
</ul>
<p>So ACMICPC<sub>36</sub> is 22531225296<sub>10</sub> and UCI2009<sub>36</sub> is 66059390601<sub>10</sub>.</p>

*******InputConstraints*******

<p style="text-align: justify;">Input starts with an integer T, representing the number of test cases (1&lt;=T&lt;=100). For each test case you will be given two base36 positive integers X1 and X2, whose lengths won't exceed 1000 digits.</p>

*******OutputConstraints*******

<p style="text-align: justify;">Print T sums, no leading zeroes, one line each.</p>

*******IOTestCases*******

<pre style="text-align: justify;"><strong>Input:</strong><br />2<br />ACMICPC<br />UCI2009<br />ACMICPC<br />UCI2009<br /><br /><strong>Output:</strong><br />14P4KCPL<br />14P4KCPL<br /></pre>


______________________________________________________
SPIDEY1||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The nefarious Mysterio an expertise in illusions has a mind-warping hold on the City of New York, and it's up to Spidey to stop him before he takes over the entire city! Mysterio uses tiny cubes to create holograms which makes up his illusions. Mysterio has disguised the whole New York City into his own dream world. Mysterio now has created this illusive world with hologram cubes on a linear arena. To break this illusion Spiderman has to pick up as many cubes as he can from the arena. But wait thats not so easy!! Mysterio has disguised the arena too!!</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>The arena consists of rectangular rocks (of zero width) whose starting and ending x-coordinates are given.(The y-coordinates of the rocks is immaterial). For example consider the configuration of the rocks as follows: 2-4 ,3-8 ,4-8 ,8-9 ,9-10 here the first rock spans between x coordinate 2 to 4 and so on. Now if Spidey steps on a rock all other rocks which have overlapping segments with it disappear ie.,if he steps on rock 1 &nbsp;then rock 2 disappears as there is an overlapping segment namely the segment 3-4 but when he steps on rock 8-9 no other rock disappears as this rock has no overlapping segment with any other rock.Assume that Spidey can jump from any rock to any other rock and if he lands on a rock he destroys the hologram cube present on the rock. Poor Peter Parker is out of mind in this menace! Help him find the maximum number of cubes he can destroy.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>Input Format</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first line of the input consists of a single integer T(1&lt;=T&lt;=100) specifying the number of test cases to follow .The first line of each test case is a single integer N(2&lt;=N&lt;=100000) the number of rocks in the arena. The next N lines of each test case consist of two space separated integers X1 X2 specifying the starting X-coordinate and the ending X-coordinate of rocks. The i+1 th line of each test case specifies the configuration of the i th rock.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>0 &lt;= X1 ,X2 &lt;= 1000000000</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;"><span style="white-space: pre;"> </span>Output Format</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For each test case output a single integer M the maximum number of cubes that Spiderman can destroy.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">SAMPLE INPUT:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">5</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2 4</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">3 8</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">4 8</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">8 9</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">9 10&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">7</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">26 29</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">23 27</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">25 28</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">30 32</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">32 37</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">27 31</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">31 35</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">SAMPLE OUTPUT:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">4</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">3<span style="white-space:pre"> </span>The nefarious Mysterio an expertise in illusions has a mind-warping hold on the City of New York, and it's up to Spidey to stop him before he takes over the entire city! Mysterio uses tiny cubes to create holograms which makes up his illusions. Mysterio has disguised the whole New York City into his own dream world. Mysterio now has created this illusive world with hologram cubes on a linear arena. To break this illusion Spiderman has to pick up as many cubes as he can from the arena. But wait thats not so easy!! Mysterio has disguised the arena too!!</div>
<p><span style="white-space: pre;"> </span>The nefarious Mysterio an expertise in illusions has a mind-warping hold on the City of New York, and it's up to Spidey to stop him before he takes over the entire city! Mysterio uses tiny cubes to create holograms which makes up his illusions. Mysterio has disguised the whole New York City into his own dream world. Mysterio now has created this illusive world with hologram cubes on a linear arena. To break this illusion Spiderman has to destroy as many cubes as he can from the arena. But wait thats not so easy!! Mysterio has disguised the arena too!!</p>
<p><span style="white-space: pre;"> </span>The arena consists of rectangular rocks (of zero width) whose starting and ending x-coordinates are given.(The y-coordinates of the rocks is immaterial). For example consider the configuration of the rocks as follows: 2-4 ,3-8 ,4-8 ,8-9 ,9-10 here the first rock spans between x coordinate 2 to 4 and so on. Now if Spidey steps on a rock all other rocks which have overlapping segments with it disappear ie.,if he steps on rock 1 &nbsp;then rock 2 disappears as there is an overlapping segment namely the segment 3-4 but when he steps on rock 8-9 no other rock disappears as this rock has no overlapping segment with any other rock.Assume that Spidey can jump from any rock to any other rock and if he lands on a rock he destroys the hologram cube present on the rock. Poor Peter Parker is out of mind in this menace! Help him find the maximum number of cubes he can destroy.</p>
<p style="text-align: center; ">&nbsp;</p>
<p style="text-align: center; "><span style="white-space: pre;"><span style="font-size: small;"> </span></span><strong><span style="font-size: small;">Input Format</span></strong></p>
<p style="text-align: left; ">The first line of the input consists of a single integer T(1&lt;=T&lt;=100) specifying the number of test cases to follow .The first line of each test case is a single integer N(2&lt;=N&lt;=100000) the number of rocks in the arena. The next N lines of each test case consist of two space separated integers X1 X2 specifying the starting X-coordinate and the ending X-coordinate of rocks. The i+1 th line of each test case specifies the configuration of the i th rock.</p>
<p style="text-align: center; "><span style="white-space:pre"> </span>0 &lt;= X1 ,X2 &lt;= 1000000000</p>
<p style="text-align: center; ">&nbsp;</p>
<p style="text-align: center; "><span style="white-space:pre"> </span><strong><span style="font-size: small;">Output Format</span></strong></p>
<p>For each test case output a single integer M the maximum number of cubes that Spiderman can destroy.</p>
<p>&nbsp;</p>
<p><strong>SAMPLE INPUT:</strong></p>
<p>2<br /> 5<br /> 2 4<br /> 3 8<br /> 4 8<br /> 8 9<br /> 9 10<br /> 7<br /> 26 29<br /> 23 27<br /> 25 28<br /> 30 32<br /> 32 37<br /> 27 31<br /> 31 35</p>
<p>&nbsp;</p>
<p><strong>SAMPLE OUTPUT:</strong></p>
<p>4<br /> 3</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


______________________________________________________
DESDEHAS||||||true||||||


<p>Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of columns and write the message (letters only) down the columns, padding with extra random letters so as to make a rectangular array of letters. For example, if the message is &ldquo;There&rsquo;s no place like home on a snowy night&rdquo; and there are five columns, Mo would write down</p>
<pre>t o i o y<br />h p k n n<br />e l e a i<br />r a h s g<br />e c o n h<br />s e m o t<br />n l e w x</pre>
<p>Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the character &lsquo;x&rsquo; to pad the message out to make a rectangle, although he could have used any letter. Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and right-to-left. So, the above would be encrypted as</p>
<pre>toioynnkpheleaigshareconhtomesnlewx</pre>
<p>Your job is to recover for Larry the original message (along with any extra padding letters) from the encrypted one.</p>

*******InputConstraints*******

<p>There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range 2...20 indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of input.</p>

*******OutputConstraints*******

<p>Each input set should generate one line of output, giving the original plaintext message, with no spaces.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre>5<br />toioynnkpheleaigshareconhtomesnlewx<br />3<br />ttyohhieneesiaabss<br />0</pre>
<br /><br /><br /><strong>Output:</strong><br /><br />
<pre>theresnoplacelikehomeonasnowynightx<br />thisistheeasyoneab</pre>
<br /></pre>


______________________________________________________
PROBTRES||||||false||||||

<p align="left"><strong>Background:</strong><br /> Problems in Computer  Science are often classified as belonging to a certain class of problems  (e.g., NP, Unsolvable, Recursive). In this problem you will be  analyzing a property of an algorithm whose classification is not known  for all possible inputs.</p>
<p align="left"><strong>The Problem:</strong></p>
<pre>Consider the following algorithm:<br /><br />1. input n<br /><br />2. print n<br /><br />3. if n = 1 then STOP<br /><br />         4. if n is odd then n = 3n + 1<br /><br />         5. else n = n / 2<br /><br />6. GOTO 2<br /></pre>
<p align="left">Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1</p>
<p align="left">It is conjectured that the algorithm above will  terminate (when a 1 is printed) for any integral input value. Despite  the simplicity of the algorithm, it is unknown whether this conjecture  is true. It has been verified, however, for all integers n such that 0  &lt; n &lt; 1,000,000 (and, in fact, for many more numbers than this.)</p>
<p align="left">Given an input n, it is possible to determine the number  of numbers printed (including the 1). For a given n this is called the  cycle-length of n. In the example above, the cycle length of 22 is 16.</p>
<p align="left">For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j.</p>
<p align="left"><strong>The Input:</strong><br /> The input will consist  of a series of pairs of integers i and j, one pair of integers per line.  All integers will be less than 1,000,000 and greater than 0.</p>
<p align="left">You should process all pairs of integers and for each  pair determine the maximum cycle length over all integers between and  including i and j.</p>
<p align="left">You can assume that no operation overflows a 32-bit integer.</p>
<p align="left"><strong>The Output:</strong><br /> For each pair of input  integers i and j you should output i, j, and the maximum cycle length  for integers between and including i and j. These three numbers should  be separated by at least one space with all three numbers on one line  and with one line of output for each line of input. The integers i and j  must appear in the output in the same order in which they appeared in  the input and should be followed by the maximum cycle length (on the  same line).</p>
<pre><strong>Sample Input:</strong><br />1 10<br />100 200<br />201 210<br />900 1000<br /><br /><strong>Sample Output:</strong><br />1 10 20<br />100 200 125<br />201 210 89<br />900 1000 174<br /></pre>
<hr />


______________________________________________________
COOLNUM||||||true||||||


<p>Eric likes interesting numbers like 64. It turns out that 64 is both a square and a cube, since 64 = 8^2 and 64 = 4^3 . Eric calls these numbers cool.</p>
<p>Write a program that helps Eric figure out how many integers in a given range are cool.</p>

*******InputConstraints*******

<p>On the first line of input, you are given an integer a such that a &ge; 1 and a &le; 10^8 . On the second<br />line of input, you are given an integer b such that a &le; b and b &le; 10^8 .</p>

*******OutputConstraints*******

<p>The output should be the number of cool numbers in the range a to b (inclusively: that is, a and b would count as cool numbers in the range if they were actually cool).</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
100

<strong>Output:</strong>
2
</pre>
<pre><strong>Input:</strong>
100
1000

<strong>Output:</strong>
1
</pre>


______________________________________________________
ADDREVUT||||||false||||||

<p><span style="color: #0070e8;">The Problem</span></p>
<p>The "reverse and add" method is simple: choose a number, reverse its digits and add it to the original. If the sum is not a palindrome (which means, it is not the same number from left to right and right to left), repeat this procedure.</p>
<p>For example: <br />195 Initial number <br />591 <br />----- <br />786 <br />687 <br />----- <br />1473 <br />3741 <br />----- <br />5214 <br />4125 <br />----- <br />9339 Resulting palindrome</p>
<p>In this particular case the palindrome 9339 appeared after the 4th addition. This method leads to palindromes in a few step for almost all of the integers. But there are interesting exceptions. 196 is the first number for which no palindrome has been found. It is not proven though, that there is no such a palindrome.</p>
<p>Task : <br />You must write a program that give the resulting palindrome and the number of iterations (additions) to compute the palindrome.</p>
<p>You might assume that all tests data on this problem: <br />- will have an answer , <br />- will be computable with less than 1000 iterations (additions), <br />- will yield a palindrome that is not greater than 4,294,967,295.</p>
<h2><a name="SECTION0001003000000000000000"></a><span style="color: #0070e8;">The Input</span></h2>
<p>The first line will have a number N with the number of test cases, the next N lines will have a number P to compute its palindrome.</p>
<h2><a name="SECTION0001004000000000000000"></a><span style="color: #0070e8;">The Output</span></h2>
<p>For each of the N tests you will have to write a line with the following data : minimum number of iterations (additions) to get to the palindrome and the resulting palindrome itself separated by one space.</p>
<h2><a name="SECTION0001005000000000000000"></a><span style="color: #0070e8;">Sample Input</span></h2>
<pre>3<br />195<br />265<br />750<br /></pre>
<h2><a name="SECTION0001006000000000000000"></a><span style="color: #0070e8;">Sample Output</span></h2>
<p>4 9339 <br />5 45254 <br />3 6666</p>


______________________________________________________
PC3||||||true||||||


<p>Elabore una funci&oacute;n que dado dos n&uacute;meros, halle el m&aacute;ximo com&uacute;n divisor entre ellos. Dicha funci&oacute;n deber&aacute; ser recursiva.<br /><br />El programa debe ir divido por funciones y en comentario la especificaci&oacute;n formal de cada una.</p>

*******InputConstraints*******

<p>La entrada consiste en un n&uacute;mero t indicando los casos de prueba. Para cada t se encuentran dos n&uacute;meros, cada uno separado por un espacio.</p>

*******OutputConstraints*******

<p>Para cada caso de prueba imprimir el mcd entre los n&uacute;meros.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />8 4<br />7 5<br />2 10<br /><br /><strong>Output:</strong>
4<br />1<br />2</pre>


______________________________________________________
KZWC||||||true||||||


<p>The Z-meet is an annual alumni meet of the department of Computer Science at PSG college of technology,where students of different batches <br />meet.The batch names are named in a alphabetical order and ending with Z(hence the name Z-meet).That is Aztecz,Byzandierz,Calitz,Dextroblitz,Espritz,<br />F5erz and Griffinxeritz.The event is held in a hall and the students are seated in random order.The event co-ordinators hav a problem.They need to find<br />the strength of attendence of the event by different batches which is calculated as follows:<br /><br />1.each person in the hall shouts out a number which is calculated as (year of Z-meet - year of pass-out )^2 if he is a alumni or <br />(year of Z-meet - year of entering )^2 if he is still a student.assume the batch of the year in which Z-meet is not passedout.<br />2.the numbers shouted by each person in the hall is added to get the strength of attendence.<br /><br />The year of passing &amp; year of entering of the different batches are given:<br />Aztecz &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2001-2005<br />Byzandiarz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2002-2006<br />Calitz&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2003-2007<br />Dextroblitz&nbsp;&nbsp; &nbsp;2004-2008<br />Espritz &nbsp;&nbsp; &nbsp;2005-2009<br />F5erz&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;2006-2010<br />Griffinxeritz&nbsp;&nbsp; &nbsp;2007-2011 <br /><br />for example if the event is held in 2008 the Aztecz batch member shouts (2008-2005)^2=9<br />and a Dextroblitz member shouts (2008-2004)^2=16<br /><br />help the event co-ordinator by writing a program to find strength of attendence.</p>

*******InputConstraints*******

<p>ther is a single positive integer T on the first line indicating the number of test cases to follow.<br />then there are T lines each containing a year in which Z-meet is held and a string giving the <br />seating arrangement of the alumni and students.that is A refers to Aztecz member C refers to Calitz member<br />and so on.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For every string,output a single line containing the strength of attendence of the event.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />2008 ADECBA<br />2006 BABACAD<br />2009 BEGFADEG<br /><br /><strong>Output:</strong><br />48<br />48<br />75<br /></pre>


______________________________________________________
PITYFERM||||||false||||||

<p><span style="font-size: large;"><span style="color: #0000ff;">FERMAT vs. PITAGORAS</span></span></p>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;"><a name="SECTION0001001000000000000000"></a></span></h2>
<p>Computer generated and assisted proofs and verification occupy a small niche in the realm of Computer Science.  The first proof of the four-color problem was completed with the assistance of a computer program and current efforts in verification have succeeded in verifying the translation of high-level code down to the chip level.</p>
<p>This problem deals with computing quantities relating to part of Fermat's Last Theorem: that there are no integer solutions of&nbsp; <img src="http://www.spoj.plhttp://www.competitiva.com.ar/archivos/imagen1.jpg" alt="" width="165" height="31" /></p>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;"><a name="SECTION0001002000000000000000"></a></span></h2>
<p>Given a positive integer <em>N</em>, you are to write a program that computes two quantities regarding the solution of</p>
<p><img src="http://www.spoj.plhttp://www.competitiva.com.ar/archivos/imagen2.jpg" alt="" width="124" height="42" /></p>
<p>where <em>x</em>, <em>y</em>, and <em>z</em> are constrained to be positive integers less than or equal to <em>N</em>.   You are to compute the number of triples (<em>x</em>,<em>y</em>,<em>z</em>) such that <em>x</em>&lt;<em>y</em>&lt; <em>z</em>, and they are relatively prime, i.e., have no common divisor larger than 1.  You are also to compute the number of values 0 &lt; p &lt; N such that <em>p</em> is not part of any triple (not just relatively prime triples).</p>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;">Input<br /></span></h2>
<p>The input consists of a sequence of positive integers, one per line. The first one is the number of test cases. Each following integer in the input file represents N and will be less than or equal to 1,000,000.</p>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;">Output<br /></span></h2>
<p>For each integer <em>N</em> in the input file print two integers separated by a space.  The first integer is the number of relatively prime triples (such that each component of the triple is &lt;= N).  The second number is the number of positive integers &lt;= N that are not part of any triple whose components are all &lt;=N .  There should be one output line for each input line.</p>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;"><a name="SECTION0001005000000000000000"></a></span></h2>
<p><strong><span style="font-size: medium;">Example Input</span></strong></p>
<pre><br />3<br />10<br />25<br />100</pre>
<p>&nbsp;</p>
<h2><span style="color: #0070e8;"><a name="SECTION0001006000000000000000"></a></span></h2>
<p><strong><span style="font-size: medium;">Example Output:</span></strong></p>
<pre>1 4<br />4 9<br />16 27</pre>


______________________________________________________
KZHAPPY||||||true||||||


<p>The Kruzade OPC team felt we should have a happy ending to the Kruzade online coding event.We define the happy sequence as follows:<br />let the sum of the squares of the digits of a positive integer s0 be represented by s1. In a similar way, let the sum of the squares of the digits of s1 be <br />represented by s2, and so on.If si=1 for some i&gt;=1, then the original integer s0 is said to be happy. For example, starting with 7 gives the sequence 7, 49,<br />&nbsp;97, 130, 10, 1, so 7 is a happy number. The first few happy numbers are 1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49...<br />You have been hired to find out the nth happy number in the sequence.</p>

*******InputConstraints*******

<p>First line contains an integer T, representing the number of test-cases. Then T lines<br />follow each containing one integer n, 1 &lt;= n &lt;= 500.</p>

*******OutputConstraints*******

<p>For each test case output on a line the nth happy number in the sequence.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>

3<br />10<br />5<br />20<strong><br />Output:</strong>
44<br />19<br />100</pre>


______________________________________________________
PRIMOKRI||||||false||||||

<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">Peter is studying mathematics and he just discovered prime numbers, he also likes programming a lot, so he plans spent this weekend creating (and then coding) a new method to encrypt text messages.... His main objective is to hide the messages he is receiving from his girlfriend to the curious eyes of his little brother....</span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><br /></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">His idea is the following: the program will receive a text message to encript (with a maximun length of 10000 characters). Then, the program will generate the output message where the input text will be hidden. </span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><br /></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The message is encripted, storing it -after reversed-, letter by letter, in the positions indexed by the <em>n </em>first prime numbers (where n is the length of the message).</span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The remaining positions will be filled in this way:</span></span></p>
<ul>
<li>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The 	first letter in the input message wil be copied once in the first 	position unused  at the output (from left to right).</span></span></p>
</li>
<li>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The 	second letter in the input message will be copied twice starting 	from the following unused position at the output.</span></span></p>
</li>
<li>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;">&hellip;<span style="font-family: Bitstream Vera Sans,sans-serif;">.</span></span></p>
</li>
<li>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The 	<em>ith</em><span style="font-style: normal;"> letter in the input will 	be copied </span><em>i </em><span style="font-style: normal;">times 	starting from the next unused position.....(maybe the last letter 	used in the filling process be used lesser times) </span></span></span></p>
</li>
<li>
<p style="margin-bottom: 0cm; font-style: normal;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The 	blanks at the input message won't be used to this filling process 	(only letters and digits).</span></span></p>
</li>
<li>
<p style="margin-bottom: 0cm; font-style: normal;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The 	filling process will finish when all the unused positions before the 	right most prime position be taken.</span></span></p>
</li>
</ul>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><br /></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">Let's say this idea isn't brilliant..., but his little brother isn't very smart, so Peter is confident will be enough.</span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;"><strong>Input</strong></span></p>
<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The input contains several test cases. The first line of a test case contains one integer N indicating the number of text messages to be encripted (1 &le; N &le; 50).</span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">The following N lines contain one input message per line. The maximun length per message is 10000 characters.</span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">You can assume there aren't spaces at the beginning or the end of the message, and there aren't two consecutive spaces.</span></span></p>
<p>&nbsp;</p>
<p><span style="font-size: small;"><strong>Output</strong></span></p>
<!-- 		@page { margin: 2cm } 		P { margin-bottom: 0.21cm } -->
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">For each text message in the input, the output will contain one line with the text message encripted.</span></span></p>
<p style="margin-bottom: 0cm;" lang="en-US"><span style="font-size: small;"><br /></span></p>
<!-- 		@page { margin: 2cm } 		TD P { margin-bottom: 0cm } 		P { margin-bottom: 0.21cm } -->
<p><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;"><strong>Sample input</strong></span></span></p>
<p><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">2</span></span></p>
<p><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">RUMBO A ACM</span></span></p>
<p><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;">WE WILL BE IN TOP 3 </span></span></p>
<p><span style="font-size: small;"><br /></span></p>
<p><span style="font-size: small;"><br /></span></p>
<!-- 		@page { margin: 2cm } 		TD P { margin-bottom: 0cm } 		P { margin-bottom: 0.21cm } -->
<p><span style="font-size: small;"><span style="font-family: Bitstream Vera Sans,sans-serif;"><strong>Sample output</strong></span></span></p>
<p><span style="font-size: small;"><span style="font-family: Courier New,monospace;"><strong>R<span style="color: #c5000b;">MC</span><span style="color: #000000;">U</span><span style="color: #c5000b;">A</span><span style="color: #000000;">U</span> MMM<span style="color: #c5000b;">A</span><span style="color: #000000;">B BBB</span><span style="color: #c5000b;">O</span><span style="color: #000000;">O</span><span style="color: #c5000b;">B</span><span style="color: #000000;">OOO</span><span style="color: #c5000b;">M</span><span style="color: #000000;">OAAAA</span><span style="color: #c5000b;">U</span><span style="color: #000000;">A</span><span style="color: #c5000b;">R</span> </strong></span></span></p>
<p><span style="font-size: small;"><span style="font-family: Courier New,monospace;"><strong><span style="color: #000000;">W</span><span style="color: #c5000b;">3 </span><span style="color: #000000;">E</span><span style="color: #c5000b;">P</span><span style="color: #000000;">E</span><span style="color: #c5000b;">O</span><span style="color: #000000;">WWW</span><span style="color: #c5000b;">T</span><span style="color: #000000;">I</span><span style="color: #c5000b;"> </span><span style="color: #000000;">III</span><span style="color: #c5000b;">N</span><span style="color: #000000;">L</span><span style="color: #c5000b;">I</span><span style="color: #000000;">LLL</span><span style="color: #c5000b;"> </span><span style="color: #000000;">LLLLL</span><span style="color: #c5000b;">E</span><span style="color: #000000;">L</span><span style="color: #c5000b;">B</span><span style="color: #000000;">LBBBB</span><span style="color: #c5000b;"> </span><span style="color: #000000;">BBB</span><span style="color: #c5000b;">L</span><span style="color: #000000;">E</span><span style="color: #c5000b;">L</span><span style="color: #000000;">EEE</span><span style="color: #c5000b;">I</span><span style="color: #000000;">EEEEI</span><span style="color: #c5000b;">W</span><span style="color: #000000;">IIIII</span><span style="color: #c5000b;"> </span><span style="color: #000000;">I</span><span style="color: #c5000b;">E</span><span style="color: #000000;">IINNN</span><span style="color: #c5000b;">W</span></strong></span></span></p>


______________________________________________________
FAIRPART||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />etc.<br /><br /><strong>Output:</strong><br />etc.<br /></pre>


______________________________________________________
FLOTTERY||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
etc.

<strong>Output:</strong>
etc.
</pre>


______________________________________________________
PLANE||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
etc.

<strong>Output:</strong>
etc.
</pre>


______________________________________________________
YUPANA||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
etc.

<strong>Output:</strong>
etc.
</pre>


______________________________________________________
COLLIDER||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />etc.<br /><br /><strong>Output:</strong><br />etc.<br /></pre>


______________________________________________________
EEIGHTS||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
etc.

<strong>Output:</strong>
etc.
</pre>


______________________________________________________
FLATLAND||||||true||||||


<p>Problem text...</p>

*******InputConstraints*******

<p>Input description...</p>

*******OutputConstraints*******

<p>Output description...</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
etc.

<strong>Output:</strong>
etc.
</pre>


______________________________________________________
KZGD||||||true||||||


<p>It is good to hav an auspicious start to any event.The kruzade OPC team felt that online coding event should <br />also have an auspicious start.As a mark of auspiciousness, we define good sequence as follows:<br />A good number is defined as a non-negative number that has an odd number of 1s in its binary<br />expansion(that is when the decimal number is converted to base 2).<br />for eg.<br />1=1&nbsp; num of 1s in binary equiv=1(odd) so,1 is a good number<br />2=10 num of 1s in binary equiv=1(odd) so,2 is a good number<br />3=11 num of 1s in binary equiv=2(even) so,3 is not a good number</p>
<p>The good sequence is the collection of good numbers.<br />The good sequence goes like this:<br />1,2,4,7,8,11,13,14,16,19...</p>
<p>You have been hired to find out the nth good number in the sequence.</p>

*******InputConstraints*******

<p>First line contains an integer T, representing the number of test-cases. Then T lines<br />follow each containing one integer n, 1 &lt;= n &lt;= 500.</p>

*******OutputConstraints*******

<p>For each test case output on a line the nth good number in the sequence.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />10<br />5<br />20

<strong>Output:</strong>
19<br />8<br />38<br /></pre>


______________________________________________________
KZBLK||||||true||||||


<p>ABC college of technology has a number of blocks which houses a number of academic departments and other facilities.<br />The following are some of the blocks and the facilities there.</p>
<p>1&nbsp; a block-admin<br />2&nbsp; b block-book depot<br />3&nbsp; d block-conf hall<br />4&nbsp; f block-canteen<br />5&nbsp; i block-industry<br />6&nbsp; m block-applied science block<br />7&nbsp; n block-management<br />8&nbsp; o block-hostel<br />9&nbsp; j block-mech block<br />10 t block-textile block<br />11 eb bock-computer science block</p>
<p>Each block is denote by a number.Some of these blocks are linked to each other through bridges,to navigate easier.<br />You are to guide a student from a block to the destination through all possible paths.</p>

*******InputConstraints*******

<p>The first line consists of a single integer which is the destination.<br />The following lines each consist of a pair of positive <br />integers separated by a space and terminated by a new-line. They represent the blocks connected by a bridge. <br />For example, if 1 2 appears on a line, then there is a bridge between block a and b. The final line consists of a pair of <br />0's.</p>

*******OutputConstraints*******

<p>Your output must consist of a line for each valid route from the a block to the destination.The blocks must <br />appear separated by a space, terminated by a new-line. Include only routes which do not pass through any <br />blocks more than once.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5<br />1 2<br />2 3<br />1 4<br />4 5<br />2 5<br />3 4<br />0 0
<strong>Output:</strong>
1 2 3 4 5<br />1 2 5<br />1 4 3 2 5<br />1 4 5</pre>


______________________________________________________
MEOWIST||||||true||||||


<p>Kat Mandu has been living in seclusion for several years, practicing martial arts and meditating. As a consequence, he missed the take-off of social networking. He was therefore surprised upon his return to society that countless many are standing with signs at every street corner, eager to be followed on Twitter; his grandmother runs one of the world's top blogs; and chances are, even <em>your mom</em> has Facebook.</p>
<p>Reluctantly, he joined the craze, but he quickly discovered that many of these services are lacking in their friend sorting facilities: they will usually only allow listing friends in alphabetical order by name. Kat Mandu would prefer sorting his friends by age, with the oldest at the top of the list. If two friends have the same age, only then sort alphabetically. Help Kat Mandu by writing a program which implements this functionality.</p>

*******InputConstraints*******

<p>Each line of input will contain a name and an age, separated by a space. Names will be unique and consist of at most 10 uppercase letters. Ages will be between 1 and 100 inclusive.</p>

*******OutputConstraints*******

<p>Print out the same names that were given in the input, but sorted according to Kat Mandu's requirements.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
DUCHESS 26
MARIE 8
BERLIOZ 8
TOULOUSE 7
THOMAS 28

<strong>Output:</strong>
THOMAS
DUCHESS
BERLIOZ
MARIE
TOULOUSE
</pre>


______________________________________________________
PYTHTRIP||||||true||||||


<p>A Pythagorean triple (A, B, C) is defined as three positive integers that satisfy the Pythagorean Theorem: A<sup>2</sup> + B<sup>2</sup> = C<sup>2</sup>. Given two positive integers A and B, your task is to verify whether they are the "legs" in a Pythagorean triple, i.e. if an integer C exists such that (A, B, C) is a Pythagorean triple.</p>

*******InputConstraints*******

<p>The first line will contain a single integer N (0 &lt; N &lt;= 10000). Each of the next N lines will contain two integers A and B (0 &lt; A, B &lt;= 100).</p>

*******OutputConstraints*******

<p>For each test case, output a single line. If a valid C exists, output a line containing the word YES and the value of C, separated by a space. Otherwise, output the single word NO.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />4<br />2 2<br />4 3<br />4 5<br />5 12<br /><br /><strong>Output:</strong><br />NO<br />YES 5<br />NO<br />YES 13<br /></pre>


______________________________________________________
MCL||||||true||||||


<p>Many word processors have a word count feature, which can tell you not only how many words are in a file, but also how many characters, lines, paragraphs, and pages. But who cares about that? All you really need to know is which of the 26 letters of the English alphabet (A - Z) you've used the most in your text. Write a program which implements this feature.</p>

*******InputConstraints*******

<p>The input will be several lines, each representing a different test case. No test case will exceed 1024 characters in length, and each will contain at least one alphabetic character.</p>

*******OutputConstraints*******

<p>For each test case, output one line, containing the most common letter and the number of times it appears in the test case, separated by a space. Break ties in favor of the letter that occurs first alphabetically. Ignore non-alphabetic characters. Counting should be case-insensitive, and output should be uppercase.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
Hello World!
Never gonna give you up, never gonna let you down...
You just lost the game.
I'm going to sleep *yawn* ZZZzzz

<strong>Output:</strong>
L 3
N 7
T 3
Z 6
</pre>


______________________________________________________
ALPHMATH||||||true||||||


<p>In his Introduction to Digital Arts and Sciences class, Dave frequently assigns homework. It usually consists of tedious exercises involving integer arithmetic. The students respond like true students: by complaining. So, to make the homeworks more exciting for his students, Dave has decided to disguise the exercises as alphabet arithmetic! This is exactly the same as integer arithmetic, except that instead of the usual digits 0 through 9, it uses letters A through J as the digits.</p>
<p>Help Dave generate the key to the homework!</p>

*******InputConstraints*******

<p>Each test case will be on one line of the form "NUMBER OP NUMBER". Each NUMBER is positive and less than 100000. OP is one of +, -, *, /. You will not have to divide by zero.</p>

*******OutputConstraints*******

<p>For each test case, output the alphabet arithmetic answer on a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
G * H
D - F
B + B
H / C

<strong>Output:</strong>
EC
-C
C
D
</pre>


______________________________________________________
SPANCONJ||||||true||||||


<h1>Spanish Conjugation</h1>
<p>As you want to go to Madrid, maybe now would be the right time to learn some Spanish grammar? Of course, as a programmer, one way to do so is to write a program that teaches you. In this task, you are required to write the part of a grammar trainer that checks whether you conjugated a verb correctly.</p>
<p>In Spanish, there are three forms of regular verbs: Those ending in -ar, -er and -ir. The verb forms are build according to the following table:</p>
<table border="0">
<tbody>
<tr style="text-align: center;">
<th style="border-style: solid; border-width: 1px;" scope="colgroup">&nbsp;</th> <th style="border-style: solid; border-width: 1px;" colspan="2" scope="colgroup">-ar</th> <th style="border-style: solid; border-width: 1px;" colspan="2" scope="colgroup">-er</th> <th style="border-style: solid; border-width: 1px;" colspan="2" scope="colgroup">-ir</th>
</tr>
<tr>
<th style="border-style: solid; border-width: 1px;" scope="colgroup">&nbsp;</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Singular</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Plural</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Singular</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Plural</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Singular</th> <th style="border-style: solid; border-width: 1px;" scope="colgroup">Plural</th>
</tr>
<tr>
<th style="border-style: solid; border-width: 1px;" scope="row">First person</th>
<td style="border-style: solid; border-width: 1px;">-o</td>
<td style="border-style: solid; border-width: 1px;">
<p>-amos</p>
</td>
<td style="border-style: solid; border-width: 1px;">-o</td>
<td style="border-style: solid; border-width: 1px;">
<p>-emos</p>
</td>
<td style="border-style: solid; border-width: 1px;">-o</td>
<td style="border-style: solid; border-width: 1px;">-imos</td>
</tr>
<tr>
<th style="border-style: solid; border-width: 1px;" scope="row">Second Person</th>
<td style="border-style: solid; border-width: 1px;">-as</td>
<td style="border-style: solid; border-width: 1px;">-Ais</td>
<td style="border-style: solid; border-width: 1px;">-es</td>
<td style="border-style: solid; border-width: 1px;">-Eis</td>
<td style="border-style: solid; border-width: 1px;">-es</td>
<td style="border-style: solid; border-width: 1px;">-Is</td>
</tr>
<tr>
<th style="border-style: solid; border-width: 1px;" scope="row">Third Person</th>
<td style="border-style: solid; border-width: 1px;">-a</td>
<td style="border-style: solid; border-width: 1px;">-an</td>
<td style="border-style: solid; border-width: 1px;">-e</td>
<td style="border-style: solid; border-width: 1px;">-en</td>
<td style="border-style: solid; border-width: 1px;">-e</td>
<td style="border-style: solid; border-width: 1px;">-en</td>
</tr>
</tbody>
</table>
<p>As an example, the word comer (to eat) in second person singular would be the stem (com) and the ending (es): comes, you eat. Note that the pronoun tu (you) is implicit; unlike English, the person can be derived from the verb alone.</p>
<p>In order to avoid compatibility problems between computers of different character encodings, we substituted some letters. Throughout this problem, we will write A instead of &aacute;, E instead of &eacute; and I instead of &iacute;. All other non-ASCII characters have been replaced by their normalized version (e.g. &ntilde;&nbsp;&rarr;&nbsp;n).</p>

*******InputConstraints*******

<p>The input contains of several test cases. Each test case consists of a verb conjugation.</p>
<p>Each conjugation consists of the infinitiv of a verb, a comma, the person (first, second, third person), the number (singular or plural), a colon and the conjugated verb form. Only regular verbs will occur.</p>

*******OutputConstraints*******

<p>For each test case, print either "correct" or "incorrect, should be ___" (where ___ is replaced with the correct conjugation).</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />hablar, first person singular: hablo<br />beber, second person plural: bebEis<br />comer, first person plural: comemas<br />vivir, third person singular: vive<br /><br /><strong>Output:</strong><br />correct<br />correct<br />incorrect, should be comemos<br />correct<br /></pre>


______________________________________________________
FIBOBASE||||||false||||||

<p><span style="font-size: big;"><span style="font-family: verdana,geneva;">   </span></span></p>
<table class="problems" style="width: 100%;" border="0">
<tbody>
<tr class="navigation">
<td width="50%"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><a href="/problems/FIBOBASE/en/">English</a></span></span></td>
<td width="50%"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><a href="/problems/FIBOBASE/vn/">Vietnamese</a></span></span></td>
</tr>
</tbody>
</table>
<p><span style="font-size: big;"><span style="font-family: verdana,geneva;"> </span></span></p>
<pre style="text-align: left;"><pre><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">SM is specially passionate to represent integers in different counting systems. <br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">This time, SM spent a lot of time for the Fibonacci Binary counting system.</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">Features of this system is that there aren&rsquo;t &nbsp;two digits 1 standing side by side. <br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">An integer M can be expressed as</span></span></p><p style="text-align: center;"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><em>M<sub>10</sub> = a<sub>n</sub>a<sub>n-1</sub>&hellip;a<sub>2</sub>a<sub>1F </sub></em>;  <br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">which a<sub>i</sub> = 1 or 0, a<sub>i</sub>*a<sub>i-1</sub> = 0 and M = a<sub>n</sub>F<sub>n</sub> + a<sub>n-1</sub>F<sub>n-1 </sub>+ &hellip; + a<sub>2</sub>F<sub>2</sub> + a<sub>1</sub>F<sub>1</sub>; <br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">which F<sub>0</sub> = F<sub>1</sub> = 1, F<sub>i</sub> = F<sub>i-1</sub> + F<sub>i-2</sub>.</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">Example:</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">1<sub>10</sub> = 1<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">2<sub>10</sub> = 10<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">3<sub>10</sub> = 100<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">4<sub>10</sub> = 101<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">5<sub>10</sub> = 1000<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">6<sub>10</sub> = 1001<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">7<sub>10</sub> = 1010<sub>F</sub></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">SM continously wrote natural numbers 1, 2, 3&hellip; in &nbsp;the Fibonacci Binary counting system <br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">and got a infinite string containing 0, 1. The beginning of the string is 110100101100010011010&hellip;</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">Looking at his result, SM wondered how many digits 1 in the first N digits of the sequence ?</span></span></p><h3 style="text-align: center;"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><strong>Input</strong><br /></span></span></h3><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">An integer N (0 &lt;= N &lt;= 10<sup>15</sup>).</span></span></p><h3 style="text-align: center;"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><strong>Output</strong></span></span></h3><p style="text-align: left;"><span style="font-size: big;"><span style="font-family: verdana,geneva;">Result in integer.</span></span></p><h3 style="text-align: center;"><span style="font-size: big;"><span style="font-family: verdana,geneva;"><strong>Example</strong></span></span></h3><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">Input:</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">21</span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;"><br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">Output:<br /></span></span></p><p><span style="font-size: big;"><span style="font-family: verdana,geneva;">10</span></span></p></pre>
<br /><br /><br /><br /><br /><br /><span style="font-size: big;">&nbsp;</span></pre>
<p><span style="font-size: big;"><span style="font-family: verdana,geneva;"></span></span></p>


______________________________________________________
ROB||||||true||||||


<p><b>k</b> bandits robbed a bank. They took away <b>n</b> gold coins. Being a progressive group of robbers they decided to use the following procedure to divide the coins. First the most respected bandit takes <b>1</b> coin, then the second respected takes <b>2</b> coins, ..., the least respected takes <b>k</b> coins, then again the most respected takes <b>k+1</b> coins, ans so on, until one of the bandits takes the remaining coins. Calculate how much gold each of the bandits gets.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consists of two integers <b>n</b> and <b>k</b> - the amount of coins and bandits respectively.


*******OutputConstraints*******

<p>For each test print the amounts of coins each bandit gets separated by spaces.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
10 2
11 3
12 4

<b>Output:</b>
4 6
5 3 3
3 2 3 4
</pre>



______________________________________________________
ANGRYKN||||||true||||||


<p>Some angry knights want to settle on the checkmate board of <b>n x m</b> size. The angry knights are much like the ordinary ones, but each can move at any time. Moreover they don't like each other and won't allow any other knight on their territory. Luckily someone removed some cells from the board, so now more knights can settle on the board without bothering each other. Count the maximal number of angry knight that can live on the board simultaneously.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test starts with two numbers <b>n</b> and <b>m</b> - the dimensions of the board. Then <b>n</b> lines follow each consisting of <b>m</b> characters. Character 'x' means that the corresponding cell is removed, character '.' that it is present.


*******OutputConstraints*******

<p>For each test print the maximal number of angry knights that can settle on such board.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2 3
...
...
3 3
...
xxx
...

<b>Output:</b>
4
2
</pre>



______________________________________________________
BRHFBALL||||||true||||||


<p>Butch unfortunately missed the most recent LSU football game, but he was luckily able to get the score S (0 &le; S &le; 30) from a friend. So he got to thinking, how many possible ways could LSU have scored this?<br /><br />Remember that the ways to score are like so:<br /><br />2 - Safety<br />3 - Field Goal<br />6 - Touchdown with missed extra point or failed conversion (only include one 6-point in your calculations; see note below)<br />7 - Touchdown with the extra point<br />8 - Touchdown with a 2 point conversion<br /><br />Butch would figure out how many ways himself, but he's busy scouring the web for a replay, so he wants you to help.<br /><br /><strong>Note: The order is important.</strong> For example, if the input is 5, there would be <strong>2</strong> ways: LSU could score a safety and then a field goal, or it could score a field goal and then a safety.</p>
<p><strong>Note about the 6 point-ers: </strong>For example 8 points in total, the number of ways to score would be:</p>
<p>2-2-2-2</p>
<p>2-3-3</p>
<p>3-2-3</p>
<p>3-3-2</p>
<p>2-6</p>
<p>6-2</p>
<p>8</p>
<p>See that there is only one set of "6-2" and "2-6"; in other words, we don't say "they scored from a safety and they scored from a touchdown with a failed extra point" and "they scored from a safety and they scored from a touchdown with a failed conversion", etc... From Neal, "You should not consider scoring the touchdown and missing the extra point, and scoring the touchdown and failing the conversion as two separate ways to score."</p>
<p><strong>Another note: Values may not be precalculated and stored in an array. <em><span style="text-decoration: underline;">Any solution tha</span></em></strong><strong><em><span style="text-decoration: underline;">t does this will be disqualified and receive 0 points.</span></em></strong></p>
<p>Extra Challenge:&nbsp;The last test case will have S &le; 10000.</p>
<p>Find the number of ways that a score S can be made in a football game, modulo 10000.</p>

*******InputConstraints*******

<p>Line 1: A single integer, S</p>

*******OutputConstraints*******

<p>Line 1: A single integer, how many ways they could score</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
8<br /><br /><strong>Output:</strong>
7</pre>


______________________________________________________
OLDP||||||true||||||


<p>Let <i>G</i> is the convex polygon with area <i>S</i> and perimeter <i>L</i>. We need to know volume of set of points which distance from <i>G</i> is not greater than <i>R</i>.</p>


*******InputConstraints*******

<p>Number of test cases in first line and three integers <i>S</i>, <i>L</i> and <i>R</i> for each test case. All integers in input are nonnegative and less than 100.</p>


*******OutputConstraints*******

<p>Volume for each test case with 10<sup>-2</sup> precision.</p>


*******IOTestCases*******


<pre>
<b>Input:</b>
1
48 57 1

<b>Output:</b>
189.724
</pre>



______________________________________________________
ALCH||||||true||||||


<p>Many computer games implement alchemy skill. It allows the player to create different elixirs using various ingredients. Usually players have to find out recipes for the elixirs they need. Usually they do it by trying to mix some ingredients. Given that there are <b>n</b> different ingredients and any elixir can be made by mixing three or more different ingredients, can you count the maximal number of various elixirs that can be made using alchemy skill.


*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consist of a single integer <b>n</b>.


*******OutputConstraints*******

<p>For each test print the maximal number of different elixirs that can be made modulo <b>1000000007</b>.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
3
4
100
100000

<b>Output:</b>
1
5
976366234
607673554
</pre>



______________________________________________________
MCPC06C||||||true||||||


<p>The D-pairs of a string of letters are the ordered pairs of letters that are distance D from each other. A string is D unique if all of its D-pairs are different. A string is surprising if it is D-unique for every possible distance D.</p>
<p>Consider the string ZGBG. Its 0-pairs are ZG, GB, and BG. Since these three pairs are all different, ZGBG is 0 unique. Similarly, the 1-pairs of ZGBG are ZB and GG, and since these two pairs are different, ZGBG is 1-unique. Finally, the only 2-pair of ZGBG is ZG, so ZGBG is 2-unique. Thus ZGBG is surprising. (Note that the fact that ZG is both a 0-pair and a 2-pair of ZGBG is irrelevant, because 0 and 2 are different distances.)</p>

*******InputConstraints*******

<p>The input consists of one or more nonempty strings of at most 79 uppercase letters, each string on a line by itself, followed by a line containing only an asterisk that signals the end of the input.&nbsp;</p>

*******OutputConstraints*******

<p>For each string of letters, output whether or not it is surprising using the <em>exact</em> output format shown below.</p>

*******IOTestCases*******

<pre><span style="color: #ff0000;"><strong>Input:</strong>
</span>ZGBG<br />X<br />EE<br />AAB<br />AABA<br />AABB<br />BCBABCC<br />*</pre>
<pre><strong><span style="color: #ff0000;">Output:</span></strong>
ZGBG is surprising.<br />X is surprising.<br />EE is surprising.<br />AAB is surprising.<br />AABA is surprising.<br />AABB is NOT surprising.<br />BCBABCC is NOT surprising.<br /></pre>


______________________________________________________
MCPC06G||||||true||||||


<p>Given positive integers B and N, find an integer A such that A^N is as close as possible to B. (The result A is an approximation to the Nth root of B.) Note that A^N may be less than, equal to, or greater than B.</p>

*******InputConstraints*******

<p>The input consists of one or more pairs of values for B and N. Each pair appears on a single line, delimited by a single space. A line specifying the value zero for both B and N marks the end of the input. The value of B will be in the range 1 to 1,000,000 (inclusive), and the value of N will be in the range 1 to 9 (inclusive).</p>

*******OutputConstraints*******

<p>For each pair B and N in the input, output A as defined above on a line by itself.</p>

*******IOTestCases*******

<pre><span style="color: #ff0000;"><strong>Input:</strong>
</span>4 3<br />5 3<br />27 3<br />750 5<br />1000 5<br />2000 5<br />3000 5<br />1000000 5<br />0 0

<strong><span style="color: #ff0000;">Output:</span></strong>
1<br />2<br />3<br />4<br />4<br />4<br />5<br />16<br /></pre>


______________________________________________________
RATIONAL||||||true||||||


<p style="text-align: justify;">Given a number N, find the number of positive irreducible rational numbers less than 1 such that when expressed as P/Q, both P, Q are less than or equal to N.</p>

*******InputConstraints*******

<p>The first line contain a single integer T, the number of test cases. Following T (&lt;= 1000) lines will contain a test case, a single number N (&lt;= 1000000).</p>

*******OutputConstraints*******

<p>For each test case print the output on a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre style="font-family: Arial, Helvetica, sans-serif; padding: 0px; margin: 0px;">3<br />1<br />2<br />3</pre>
<br /><strong>Output:</strong><br />
<pre style="font-family: Arial, Helvetica, sans-serif; padding: 0px; margin: 0px;">0<br />1<br />3</pre>
<br /></pre>


______________________________________________________
BIGFIBB||||||true||||||


<p>Consider the following <b>nxn</b> matrix:</br></p>
<div><img src="http://www.spoj.plhttps://www.spoj.pl/content/spookycookie:fibb" /></div>
<p>Calculate the deterimant of such matrix given some <b>n</b>



*******InputConstraints*******

<p>The first line of the input contains number <b>t</b> &#8211; the amount of tests. Then <b>t</b> test descriptions follow. Each test consist of a single integer <b>n</b>.


*******OutputConstraints*******

<p>For each test print the deteminant of the matrix modulo <b>1000000007</b>.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
1
2
3

<b>Output:</b>
1
2
3
</pre>



______________________________________________________
ANARC09E||||||true||||||


<p>Number guessing is a popular game between elementary-school kids. Teachers encourage pupils to play the game as it enhances their arithmetic skills, logical thinking, and following-up simple procedures. We think that, most probably, you too will master in few minutes. Here&rsquo;s one example of how you too can play this game: Ask a friend to think of a number, let&rsquo;s call it n0 . Then:</p>
<ol>
<li>Ask your friend to compute n1 = 3 &lowast; n0 and to tell you if n1 is even or odd.</li>
<li>If n1 is even, ask your friend to compute n2 = n1 /2. If, otherwise, n1 was odd then let your friend compute n2 = (n1 + 1)/2.</li>
<li>Now ask your friend to calculate n3 = 3 &lowast; n2 .</li>
<li>Ask your friend to tell tell you the result of n4 = n3 /9. (n4 is the quotient of the division operation. In computer lingo, &rsquo;/&rsquo; is the integer-division operator.)</li>
<li>Now you can simply reveal the original number by calculating n0 = 2 &lowast; n4 if n1 was even, or n0 = 2 &lowast; n4 + 1 otherwise.</li>
</ol>
<p>Here&rsquo;s an example that you can follow: If n0 = 37, then n1 = 111 which is odd. Now we can calculate n2 = 56, n3 = 168, and n4 = 18, which is what your friend will tell you. Doing the calculation 2 &times; n4 + 1 = 37 reveals n0 .</p>

*******InputConstraints*******

<p>Your program will be tested on one or more test cases. Each test case is made of a single positive number (0 &lt; n0 &lt; 1, 000, 000).</p>
<p>The last line of the input file has a single zero (which is not part of the test cases.)</p>

*******OutputConstraints*******

<p>For each test case, print the following line:</p>
<p>k. B Q</p>
<p>Where k is the test case number (starting at one,) B is either &rsquo;even&rsquo; or &rsquo;odd&rsquo; (without the quotes) depending on your friend&rsquo;s answer in step 1. Q is your friend&rsquo;s answer to step 4.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />37<br />38<br />0<br /><br /><strong>Output:</strong><br />1. odd 18<br />2. even 19</pre>


______________________________________________________
IPS||||||false||||||

<p>An interleaved periodic string <strong>S</strong> can be written down using the following procedure :</p>
<ol>
<li>Write down any two strings s1 and s2 of lengths p1 and p2 respectively. The strings must consist of only 0s and 1s, and can possibly be empty.</li>
<li>Concatenate some copies of the string s1 to obtain string S1.</li>
<li>Concatenate some copies of the string s2 to obtain string S2.</li>
<li>Interleave the strings S1 and S2 to obtain <strong>S</strong>.</li>
</ol>
<p>To interleave two strings, merge their characters arbitrarily, maintaining the relative order in which they occur in both strings. For example, the strings "101" and "011" can be interleaved to get "011011" or "101011", however they cannot be interleaved to form "110110". Given <strong>S</strong>, find the minimum possible value of (p1 + p2).<br /> <br /> <strong>Input :</strong><br /> The input consists of multiple test cases. The first line contains the number of test cases <strong>T</strong>. Each of the next <strong>T</strong> lines contain a string <strong>S</strong> consisting of only 0's and 1's.<br /> <br /> <strong>Input Constraints</strong><br /> 1 &#8804; <strong>T</strong> &#8804; 20<br /> 1 &#8804; length of <strong>S</strong> &#8804; 16<br /> <br /> <strong>Output :</strong></p>
<p>Output <strong>T</strong> lines, one corresponding to each test case, containing the minimum valueÂ Â Â Â Â  of (p1 + p2) for the corresponding test case.<br /> <br /> <strong>Sample Input :</strong><br /> 1<br /> 0101<br /> <br /> <strong>Example Output :</strong><br /> 2</p>
<p>Â </p>


______________________________________________________
FILIP||||||true||||||


<p>Mirko has a younger brother, Filip, who just started going to school and is having trouble with<br />numbers. To help him get the hang for number scale, his teacher writes two three digit numbers. She<br />asks Filip to compare those numbers, but instead of interpreting them with the leftmost most<br />significant digit, he needs to interpret them the other way around, with the most significant digit being<br />the rightmost one. He than has to tell the teacher the larger of the two numbers.<br />Write a program that will check Filips answers.</p>

*******InputConstraints*******

<p>The first and only line of input contains two three digit numbers, A and B. A and B will not be equal<br />and will not contain any zeroes.</p>

*******OutputConstraints*******

<p>First and only line of output should contain the larger of the numbers in the input, compared as<br />described in the task. The number should be written reversed, to display to Filip how he should<br />read it.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />734 893<br /><strong>Output:</strong><br />437<br /><br /><strong>Input:</strong><br />221 231<br /><strong>Output:<br /></strong>132<br /><br /><strong>Input:<br /></strong>839 237<br /><strong>Output:</strong><br />938<br /></pre>


______________________________________________________
GRID||||||true||||||


<p>Your task in this problem is very straightforward. You are given a point in the cartesian plane (m,n) where m&gt;0 and n&gt;0. You start at (0,0) and are allowed to make unit moves along the positive x-axis or the positive y-axis. In other word if you are at a point (x,y) you can move to either (x+1,y) or (x,y+1). Your task is to find out the total number of ways you can reach (m,n) from (0,0) modulus K.</p>

*******InputConstraints*******

<p>First line contains 'T', the number of testcases. The next 'T' lines contain three space separated integers m,n,K 1&lt;=m,n&lt;=1,000 K&lt;=1,000,000</p>

*******OutputConstraints*******

<p>A single integer denoting the total number of paths mod K.</p>

*******IOTestCases*******

<pre> 
<strong>Input:</strong> 
1
4 4 100
 
<strong>Output:</strong> 
70
</pre>


______________________________________________________
ANAG||||||true||||||


<p>In this problem, you are given two strings S1 and S2, your task is to determine whether one string is an anagram of the other. An anagram of a string is a string obtained by permuting the letters of a string. For example aaba and aaab are anagrams, while abcd and deba are not.</p>

*******InputConstraints*******

<p>The first line would consist of the number of test cases 'T'. This would be followed by 'T' lines consisting of two space separated strings. The strings would consist of only letters 'a'-'z'. Each string would consist of no more than 20 characters.</p>

*******OutputConstraints*******

<p>You have to print "YES" if one string is an anagram of the other or "NO" otherwise.</p>

*******IOTestCases*******

<pre> 
<strong>Input:</strong> 
2
aaba aaab
abcd deba
 
<strong>Output:</strong> 
YES
NO
</pre>


______________________________________________________
RNUM||||||true||||||


<p>In this problem your task is to reduce a given number 'N' to a non-positive number in as little moves as possible.    The moves allowed are : Given an integer 'N' you can subtract one of its factors (excluding 'N' itself) from 'N' and continue the same process with the resulting number until you reach a non-positive number</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>First line contains the number of test cases 'T'. 'T' lines follow containing a single integer 'N' 2&lt;=N&lt;100,000.</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>A single integer denoting the minimum number of moves necessary.</p>

*******IOTestCases*******

<pre> 
<strong>Input:</strong> 
1
10
 
<strong>Output:</strong> 
5
</pre>
<p>&nbsp;</p>


______________________________________________________
SQRE||||||true||||||


<p>You are given a square with 'n' points on each side of the square. None of these points co-incide with the corners of this square. You have to compute the total number of triangles that can be formed using these '4n' points (n points on each side of the square) as vertices of the triangle.</p>

*******InputConstraints*******

<p>First line contains the integer 'T', the number of test cases. This is followed by 'T' lines with a single integer 'n' on each line n &lt;= 100.</p>

*******OutputConstraints*******

<p>The total number of triangles that can be formed.</p>

*******IOTestCases*******

<pre> 
<strong>Input:</strong> 
1
1
 
<strong>Output:</strong> 
4
</pre>


______________________________________________________
SIMEQN||||||false||||||

<p>Given N,A,B,C, find how many solutions exist to the equation : a + b + c &lt;= N, such that 0 &lt;= a &lt;= A, 0 &lt;= b &lt;= B, 0 &lt;= c &lt;= C.</p>
<p style="text-align: center;"><br /><strong>Input :</strong></p>
<p>The first line contains the number of test cases T. Each test case contains 4 integers, N,A,B,C. 0 &lt;= N,A,B,C &lt;= 2500</p>
<p style="text-align: center;"><br /><strong>Output :</strong></p>
<p>Output T lines, one for each test case.</p>
<p>&nbsp;</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input :<br />2<br />4 3 2 1<br />1 1 1 1<br /><br />Sample Output :<br />20<br />4</p>


______________________________________________________
DECSTRNG||||||false||||||

<p>You need to find a string which has exactly K positions in it such that the character at that position comes alphabetically later than the character immediately after it. If there are many such strings, print the one which has the shortest length. If there is still a tie, print the string which comes the lexicographically earliest (would occur earlier in a dictionary).</p>
<p style="text-align: center;"><br /><strong>Input :</strong></p>
<p>The first line contains the number of test cases T. Each test case contains an integer K (&lt;= 100)</p>
<p style="text-align: center;"><br /><strong>Output :</strong></p>
<p><br />Output T lines, one for each test case, containing the required string.</p>
<p style="text-align: center;"><strong>Example</strong></p>
<p><br />Sample Input :<br />2<br />1<br />2<br /><br />Sample Output :<br />ba<br />cba</p>


______________________________________________________
SURPRISE||||||true||||||


<p>General Tontus holds the record for most consecutive losses in military history. The emperor is not pleased that his general holds this unique distinction and has threatened to fire him in the event of another loss. The general is convinced that his losing streak is not due to poor strategy on his part. Instead, he blames his messengers for allowing important orders to be intercepted by the enemy, thus giving away the element of surprise. To alleviate this problem, the general has devised a cunning plan. All sensitive messages will have the order of their characters reversed, so that even if they fall in enemy hands, they will be incomprehensible! Because this scheme is too complex to be applied by hand, the general needs some way to automate it. Help save the general's job by writing a program to apply this encryption algorithm.</p>

*******InputConstraints*******

<p>The first line will contain a single integer N (0 &lt; N &lt; 100). Each of the next N lines will contain a string of at most 1024 characters which must be encrypted.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing the encrpyted string. Beware, spaces are significant.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
 Hello World!
I know 10 digits of pi after the decimal: 3.1415926535
You just lost the game.
ATTACK AT DAWN

<strong>Output:</strong>
!dlroW olleH 
5356295141.3 :lamiced eht retfa ip fo stigid 01 wonk I
.emag eht tsol tsuj uoY
NWAD TA KCATTA</pre>


______________________________________________________
GENCHESS||||||true||||||


<p>The emperor's younger brother, Minimus, is an excellent chess player who has never lost a game. Let us ignore for the moment the fact that anyone who might dare defeat him would likely suffer a horrible death. Having mastered the usual game, which is played on a board of size 8, Minimus wants to generalize chess so that it can be played on a square board of arbitrary size. Unfortunately, Minimus skipped class so he never learned his multiplication tables, so he'll give you a number N, and it will be up to you to tell him how many squares a chessboard of that size would have. Don't worry, Minimus can't count higher than a million, so that's the highest number you need to be able to handle.</p>

*******InputConstraints*******

<p>There will be several test cases, each consisting of a single positive integer on a separate line, representing a possible value of N. A value of zero indicates the end of input and should not be processed.</p>

*******OutputConstraints*******

<p>For each test case, output a single line containing the number of squares on a chessboard of size N.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
8
1
42
999999
0

<strong>Output:</strong>
64
1
1764
999998000001</pre>


______________________________________________________
HFUN||||||true||||||


<p>The issue of this problem  is to find out the value for H(N),  where H(N)  is the sum of all digits  of  N, but if H(N) > 9 then  H(N) = H(H(N)).  Rather  it  is  want that you find H(N!).</p>
<p>1 &lt;= T &lt;= 300000</p>
<p>0 &lt;= N &lt;= 1000000</p>

*******InputConstraints*******

<p>T<br />N1<br />N2<br />...<br />NT</p>

*******OutputConstraints*******

<p>H(N1!)<br />H(N2!)<br />...<br />H(NT!)</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1<br />5<br /><br /><strong>Output:</strong><br />1<br />3<br /></pre>


______________________________________________________
PROBLEM||||||true||||||


<p>This problem has no statement


*******InputConstraints*******

<p>The format of the input data in not known.


*******OutputConstraints*******

<p>Output the right answer for each test.


*******IOTestCases*******


<pre>
<b>Input:</b>
4
188
432
100
765

<b>Output:</b>
4
0
2
1

</pre>


______________________________________________________
SUCCESS||||||false||||||

<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr class="navigation">
<td><a href="/problems/SUCCESS/polski/">Wersja polska</a></td>
<td><a href="/problems/SUCCESS/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>Print <strong><em>Success</em></strong>.</p>
<h3>Comment</h3>
<p>You won't have the shortest code if You just print "Success". Look for some tricks.</p>
<h3>No Input</h3>
<h3>Output</h3>
<p>Success</p>
<p></p>


______________________________________________________
XMEDIAN||||||true||||||


<p>Given an array x of n elements find the medians of its first k elements for each k from 1 to n inclusive. The median of an array is the middle element of that array when it is sorted. If there are an even number of elements in the array, we choose the first of the middle two elements to be the median.


*******InputConstraints*******

<p>The first line of input contains number n (1 <= n <= 200000) - the amount of elements in the array. The next n lines contain the elements xi (1 <= xi <= 1000000).


*******OutputConstraints*******

<p>Output n integers - the medians of the first k elements of the array for each k from 1 to n inclusive.


*******IOTestCases*******


<pre>
<b>Input:</b>
5
1
2
3
4
5

<b>Output:</b>
1
1
2
2
3

</pre>



______________________________________________________
SUPERPW||||||false||||||

<pre><div style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;"><p>You are given two arrays a and b of size n. You are also given a number p.</p><p>You are supposed to find ( a[0]^b[0] + a[1]^b[1] + ... a[n-1]^b[n-1] ) % p</p><p>You must also know that</p><p>( a + b ) % c = ( a%c + b%c ) % c</p><p>and</p><p>( a * b ) % c = ( a%c * b%c ) % c</p><p>Warning: The actual value a[i]^b[i] may not fit in any primitive data-type, infact it may not even fit in the RAM.</p><p><strong>Input</strong></p><p>First line contains T ( T &lt;= 12 ) which is the number of test-cases.</p><p>Then contain T-blocks having the following format.</p><p>First line of each block contains a number n which is the number of elements of arrays a and b and the number p.</p><p>Second line of each block contains n-integers which are the values a[0], a[1] ... a[n-1]</p><p>Third line of each block contains n-integers which are the values b[0], b[1] ... b[n-1]</p><p><strong>Output</strong></p><p>For each block of input print the answer.</p><h3 style="font-size: 1.17em;">Example</h3><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin: 8px;"><strong>Input:</strong>
2
3 5
2 3 4
1 1 1
4 4
2 2 2 2
1 1 1 1

<strong>Output:</strong>
4
0</pre>
</div>
</pre>


______________________________________________________
DIGRT||||||false||||||

<p>The digital root of a number x is calculated by summing up all digits x, then adding all digits of the sum and so on, until we are left with only a single digit.</p>
<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example, if x = 987654, then its digital root d(x) = 9 + 8 + 7 + 6 + 5 + 4 = 39.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Now we sum up digits of 39. d(39) = 3 + 9 = 12.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Now we sum up digits of 12. d(12) = 1 + 2 = 3.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Thus, d(987654) = 3.</div>
<p>&nbsp;</p>
<p>For example, if x = 987654, then its digital root d(x) = 9 + 8 + 7 + 6 + 5 + 4 = 39.&nbsp;</p>
<p>Now we sum up digits of 39. d(39) = 3 + 9 = 12.</p>
<p>Now we sum up digits of 12. d(12) = 1 + 2 = 3.</p>
<p>Thus, d(987654) = 3.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Input</strong></p>
<p>The first line gives the number of test cases T (T &lt;= 100).</p>
<p>Each of the next T test cases gives the value of N (N &lt;= 50,000).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Output</strong></p>
<p>For each test case, print 10 integers, each separated by a space, indicating number of digital roots in the range of 1 to N that are equal to i (1 &lt;= i &lt;= 9). Seperate each test case with a new line.</p>
<p>Example</p>
<pre><p>Input:</p><p>2</p><p>12</p><p>40</p><p>&nbsp;</p><strong><p>Output:</p></strong><p>2 2 2 1 1 1 1 1 1</p><p>5 5 5 5 4 4 4 4 4</p></pre>
<p>Explanation:</p>
<p>For the first case, there are 2 numbers in the range of 1 to 12 that have digital root equal to 1 (1 and 10), 2 numbers that have digital root equal to 2 (2 and 11) and so on.</p>


______________________________________________________
FGROUP||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You are given 2 arrays of size N and M.You have to answer Q queries where each query consists of a number.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You have to find out in which of the two arrays is the given number in.</div>
<p>&nbsp;</p>
<p>You are given 2 arrays of size N and M.You have to answer Q queries where each query consists of a number.</p>
<p>You have to find out in which of the two arrays is the given number in.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line gives the number of test cases T (T &lt;= 10).</p>
<p>Then T test case follow.</p>
<p>The first line of each test case gives the value of N.The second line contains N space separated integers.</p>
<p>The third line of each test case gives the value of M.The fourth line contains M space separated integers.</p>
<p>Next line gives the value of Q, number of queries to be answered.</p>
<p>Q lines follow containing a number each on one line.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each test case, in response to the Q queries for that test-case print Q lines.</p>
<p>If the number is present in both arrays, print "both" ( without quotes ).</p>
<p>Else print the array in which the number is in ( 1 or 2 ).</p>
<p>If the number is not present in both arrays,print -1.</p>
<p>&nbsp;</p>
<p>Print a new line after every test case.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3
5 8 2
4
3 8 6 1
4
5
8
6
9
3
1 2 3
3
1 2 3
3
1
2
3

<strong>Output:</strong>
1
both
2
-1

both
both
both</pre>
<pre><strong>Constraints:</strong></pre>
<pre><strong>&nbsp;</strong>N,M &lt;= 20000
Q &lt;= 30000
All numbers in the input will be less than 50000.</pre>
<pre><strong>Explanation:</strong></pre>
<p>For the first case, 5 is present in array 1 only, 8 is present in both arrays, 6 is present in array 2 only while 6 is not present in either array.</p>
<pre><span style="white-space: normal; "><pre style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; margin-top: 8px; margin-right: 8px; margin-bottom: 8px; margin-left: 8px; "><strong><br /></strong></pre>
</span></pre>


______________________________________________________
CIRCP||||||true||||||


<p>In this problem, you will be given N circles, and M points. You are required to find out that inside how many circles does each of the M points lie. None of the M points will lie on any of the N circle boundaries (they will either lie inside a circle or outside it, but not on the circle).</p>

*******InputConstraints*******

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 53px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The 1st line gives the number of test cases T.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 53px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each of the next T test cases has a format as explained below.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 53px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The 1st line of each test case contains 2 integers N and M.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 53px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each of next N lines contains 3 integers cx, cy, r. The circle is located at center (cx, cy) and has a radius r.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 53px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each of the following M lines contain 2 integers (x, y), which indicate that the location of the point.</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The 1st line gives the number of test cases T.</p>
<p>Each of the next T test cases has a format as explained below.</p>
<p>The 1st line of each test case contains 2 integers N and M.</p>
<p>Each of next N lines contains 3 integers cx, cy, r. The circle is located at center (cx, cy) and has a radius r.</p>
<p>Each of the following M lines contain 2 integers (x, y), which indicate that the location of the point.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each of test case, print M lines, each correspoding to the no of circles inside which the corresponding point lies.</p>
<p>Separate each test case with a blank line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
2 3
3 3 2
1 1 2
1 1
2 2
3 3

<strong>Output:</strong>
1
2
1<span style="white-space: normal;">
</span></pre>
<pre><strong>Sample diagram</strong></pre>
<pre><img src="http://www.spoj.plhttp://img145.imageshack.us/img145/1920/imageyr.jpg" alt="" /></pre>
<pre><strong>Constraints</strong>
T &lt;= 100
0 &lt;= N &lt;= 500
0 &lt;= M &lt;= 500
-1000 &lt;= cx &lt;= 1000
-1000 &lt;= cy &lt;= 1000
-1000 &lt;= x &lt;= 1000
-1000 &lt;= y &lt;= 1000
1 &lt;= r &lt;= 1000</pre>


______________________________________________________
GCJ2010||||||false||||||

<h3>Problem</h3>
<p><span style="font-size: small;">The <em>Snapper</em> is a clever little device that, on one side, plugs its input plug into an output socket, and, on the other side, exposes an output socket for plugging in a light or other device.</span></p>
<p><span style="font-size: small;">When a <em>Snapper</em> is in the ON state and is receiving power from its input plug, then the device connected to its output socket is receiving power as well. When you snap your fingers -- making a clicking sound -- any <em>Snapper</em> receiving power at the time of the snap toggles between the ON and OFF states.</span></p>
<p><span style="font-size: small;">In hopes of destroying the universe by means of a singularity, I have purchased <strong>N</strong> <em>Snapper</em> devices and chained them together by plugging the first one into a power socket, the second one into the first one, and so on. The light is plugged into the <strong>N</strong>th <em>Snapper</em>.</span></p>
<p><span style="font-size: small;">Initially, all the <em>Snapper</em>s are in the OFF state, so only the first one is receiving power from the socket, and the light is off. I snap my fingers once, which toggles the first <em>Snapper</em> into the ON state and gives power to the second one. I snap my fingers again, which toggles both <em>Snapper</em>s and then promptly cuts power off from the second one, leaving it in the ON state, but with no power. I snap my fingers the third time, which toggles the first <em>Snapper</em> again and gives power to the second one.  Now both <em>Snapper</em>s are in the ON state, and if my light is plugged into the second <em>Snapper</em> it will be <em>on</em>.</span></p>
<p><span style="font-size: small;">I keep doing this for hours. Will the light be <em>on</em> or <em>off</em> after I have snapped my fingers <strong>K</strong> times?  The light is <em>on</em> if and only if it's receiving power from the <em>Snapper</em> it's plugged into.</span></p>
<h3><span style="font-size: small;">Input</span></h3>
<p><span style="font-size: small;">The first line of the input gives the number of test cases, <strong>T</strong>.  <strong>T</strong> lines follow.  Each one contains two integers, <strong>N</strong> and <strong>K</strong>.</span></p>
<h3><span style="font-size: small;">Output</span></h3>
<p><span style="font-size: small;">For each test case, output one line containing "Case #x: y", where x is the case number (starting from 1) and y is either "ON" or "OFF", indicating the state of the light bulb.</span></p>
<h3><span style="font-size: small;">Limits</span></h3>
<p><span style="font-size: small;">1 &le; <strong>T</strong> &le; 10,000.</span></p>
<h4><span style="font-size: small;">Small dataset</span></h4>
<p><span style="font-size: small;">1 &le; <strong>N</strong> &le; 10;<br /> 0 &le; <strong>K</strong> &le; 100;</span></p>
<h4><span style="font-size: small;">Large dataset</span></h4>
<p><span style="font-size: small;">1 &le; <strong>N</strong> &le; 30;<br /> 0 &le; <strong>K</strong> &le; 10<sup>8</sup>;</span></p>
<h3><span style="font-size: small;">Sample</span></h3>
<p><span style="font-size: small;">4</span></p>
<p><span style="font-size: small;">1 0</span></p>
<p><span style="font-size: small;">1 1</span></p>
<p><span style="font-size: small;">4 0</span></p>
<p><span style="font-size: small;">4 47</span></p>
<p><span style="font-size: small;">Output:</span></p>
<p><span style="font-size: small;">Case #1: OFF<br /></span></p>
<p><span style="font-size: small;">Case #2:&nbsp; ON</span></p>
<p><span style="font-size: small;">Case #3: OFF<br /></span></p>
<p><span style="font-size: small;">Case #4: ON</span></p>
<p><span style="font-size: small;"><br /></span></p>


______________________________________________________
LEXI1||||||true||||||


<p>An ordering for the Cartesian product x of any two sets  A and B with order relations &lt;A and &lt;B, respectively, such that if (a1, b1) and (a2, b2) both belong to AxB, then (a1, b1) &lt; (a2, b2) iff either</p>
<ul>
<li>a1 &lt;A a2, or</li>
<li>a1 = a2 and b1 &lt;B b2.</li>
</ul>

<p>The lexicographic order can be readily extended to cartesian products of arbitrary length by recursively applying this definition, i.e., by observing that AxBxC = Ax(BxC).</p>

<p>When applied to permutations, lexicographic order is increasing numerical order. For example, the permutations of {1,2,3} in lexicographic order are 123, 132, 213, 231, 312, and 321.</p>

<p>You will be given a permutation of n first natural numbers. You need to find k-th lexicographically next permutaion. Also we will consider that the lexicographically last permutaion is followed by the first one in the ordering.</p>


*******InputConstraints*******

<p>The first line is number t - the amount of test cases. Each test case starts with numbers n and k. Then n natural numbers follow which are the elements of the given permutation.


*******OutputConstraints*******

<p>For each test case output the k-th lexicographically next permutation after the given one.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
1 2 3
3 2
2 1 3
3 8
2 3 1

<b>Output:</b>
2 3 1
3 1 2
3 2 1

</pre>



______________________________________________________
LEXI2||||||true||||||


<p>An ordering for the Cartesian product x of any two sets  A and B with order relations &lt;A and &lt;B, respectively, such that if (a1, b1) and (a2, b2) both belong to AxB, then (a1, b1) &lt; (a2, b2) iff either</p>
<ul>
<li>a1 &lt;A a2, or</li>
<li>a1 = a2 and b1 &lt;B b2.</li>
</ul>

<p>The lexicographic order can be readily extended to cartesian products of arbitrary length by recursively applying this definition, i.e., by observing that AxBxC = Ax(BxC).</p>

<p>When applied to permutations, lexicographic order is increasing numerical order. For example, the permutations of {1,2,3} in lexicographic order are 123, 132, 213, 231, 312, and 321.</p>

<p>You will be given a permutation of n first natural numbers. You need to find k-th lexicographically next permutaion. Also we will consider that the lexicographically last permutaion is followed by the first one in the ordering.</p>


*******InputConstraints*******

<p>The first line is number t - the amount of test cases. Each test case starts with numbers n and k. Then n natural numbers follow which are the elements of the given permutation.


*******OutputConstraints*******

<p>For each test case output the k-th lexicographically next permutation after the given one.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
1 2 3
3 2
2 1 3
3 5
2 3 1

<b>Output:</b>
2 3 1
3 1 2
2 1 3

</pre>



______________________________________________________
LEXI3||||||true||||||


<p>An ordering for the Cartesian product x of any two sets  A and B with order relations &lt;A and &lt;B, respectively, such that if (a1, b1) and (a2, b2) both belong to AxB, then (a1, b1) &lt; (a2, b2) iff either</p>
<ul>
<li>a1 &lt;A a2, or</li>
<li>a1 = a2 and b1 &lt;B b2.</li>
</ul>

<p>The lexicographic order can be readily extended to cartesian products of arbitrary length by recursively applying this definition, i.e., by observing that AxBxC = Ax(BxC).</p>

<p>When applied to permutations, lexicographic order is increasing numerical order. For example, the permutations of {1,2,3} in lexicographic order are 123, 132, 213, 231, 312, and 321.</p>

<p>You will be given a permutation of n first natural numbers. You need to find k-th lexicographically next permutaion. Also we will consider that the lexicographically last permutaion is followed by the first one in the ordering.</p>


*******InputConstraints*******

<p>The first line is number t - the amount of test cases. Each test case starts with numbers n and k. Then n natural numbers follow which are the elements of the given permutation.


*******OutputConstraints*******

<p>For each test case output the k-th lexicographically next permutation after the given one.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 3
1 2 3
3 2
2 1 3
3 8
2 3 1

<b>Output:</b>
2 3 1
3 1 2
3 2 1

</pre>



______________________________________________________
LEXI4||||||true||||||


<p>An ordering for the Cartesian product x of any two sets  A and B with order relations &lt;A and &lt;B, respectively, such that if (a1, b1) and (a2, b2) both belong to AxB, then (a1, b1) &lt; (a2, b2) iff either</p>
<ul>
<li>a1 &lt;A a2, or</li>
<li>a1 = a2 and b1 &lt;B b2.</li>
</ul>

<p>The lexicographic order can be readily extended to cartesian products of arbitrary length by recursively applying this definition, i.e., by observing that AxBxC = Ax(BxC).</p>

<p>When applied to subsets, two subsets are ordered by their smallest elements. For example, the subsets of {1,2,3} in lexicographic order are {}, {1}, {1,2}, {1,2,3}, {1,3}, {2}, {2,3}, {3}.</p>

<p>You will be given a subset of a set of first n natural numbers. You need to find k-th lexicographically next subset. Also we will consider that lexicographically last subset is followed by the first one in the ordering.</p>


*******InputConstraints*******

<p>The first line is number t - the amount of test cases. Each test case starts with numbers n and k. The next line describes the given subset. The description starts with number q - the amount of elements in the subset, followed by q natural numbers - the elements of the subset.


*******OutputConstraints*******

<p>For each test case output the k-th lexicographically next subset after the given one. If the result is an empty set then print "empty".


*******IOTestCases*******


<pre>
<b>Input:</b>
3
3 1
1 3
3 3
2 1 3
5 5
0

<b>Output:</b>
empty
3
1 2 3 4 5

</pre>



______________________________________________________
HMT1||||||false||||||

<p><span style="font-family: 'courier new', courier;">lqp18_31&nbsp;count rooted unlabeled trees with N nodes one by one.</span></p>
<p><span style="font-family: 'courier new', courier;">But the number is so large that he is afraid that he will never stop counting.</span></p>
<p><span style="font-family: 'courier new', courier;">So he asks you to tell him the number of rooted unlabeled trees with N nodes module 10^9+7.</span></p>
<h3><span style="font-family: 'courier new', courier;">Input</span></h3>
<p><span style="font-family: 'courier new', courier;">one line consists one interger N.(1&lt;=N&lt;=1000)</span></p>
<h3><span style="font-family: 'courier new', courier;">Output</span></h3>
<p><span style="font-family: 'courier new', courier;">one line consists the number of rooted unlabeled trees with N nodes module 10^9+7</span></p>
<h3><span style="font-family: 'courier new', courier;">Example</span></h3>
<pre><strong><span style="font-family: 'courier new', courier;">Input:</span></strong><span style="font-family: 'courier new', courier;">
11

</span><strong><span style="font-family: 'courier new', courier;">Output:</span></strong><span style="font-family: 'courier new', courier;">
1842</span>
</pre>


______________________________________________________
HMT2||||||true||||||


<pre><p style="font-size: 13px; text-align: justify;">lqp18_31&nbsp;count unrooted unlabeled trees with N nodes one by one.</p><p style="font-size: 13px; text-align: justify;">But the number is so large that he is afraid that he will never stop counting.</p><p style="font-size: 13px; text-align: justify;">So he asks you to tell him the number of unrooted unlabeled trees with N nodes module 10^9+7.</p>
*******InputConstraints*******
<p style="font-size: 13px; text-align: justify;">one line consists one interger N.(1&lt;=N&lt;=1000)</p>
*******OutputConstraints*******
<p style="font-size: 13px; text-align: justify;">one line consists the number of unrooted unlabeled trees with N nodes module 10^9+7</p>
*******IOTestCases*******
<pre style="font-size: 13px; text-align: left;"><strong>Input:</strong>
10</pre>
<pre style="font-size: 13px; text-align: left;"><strong>Output:</strong>
106</pre>
</pre>


______________________________________________________
GCJ2K10||||||false||||||

<h3>Problem</h3>
<p>A company is located in two very tall buildings. The company intranet connecting the buildings consists of many wires, each connecting a window on the first building to a window on the second building.</p>
<p>You are looking at those buildings from the side, so that one of the buildings is to the left and one is to the right. The windows on the left building are seen as points on its right wall, and the windows on the right building are seen as points on its left wall. Wires are straight segments connecting a window on the left building to a window on the right building.</p>
<p><img src="http://www.spoj.plhttp://code.google.com/codejam/contest/images/?image=RopeIntranet.png&amp;p=599117&amp;c=619102" alt="" /></p>
<p>You've noticed that no two wires share an endpoint (in other words, there's at most one wire going out of each window). However, from your viewpoint, some of the wires intersect midway. You've also noticed that exactly two wires meet at each intersection point.</p>
<p>On the above picture, the intersection points are the black circles, while the windows are the white circles.</p>
<p>How many intersection points do you see?</p>

______________________________________________________
CARDGAME||||||true||||||


<p>The game of DiceCards involves 5 dice, which are thrown in 13 rounds.  A score card contains 13 categories; each round may be scored in a  category of the player's choosing, but each category may be scored only once in the game.  The 13 categores are scored as follows:</p>
<ul>
<li>ones - sum of all ones thrown </li>
<li>twos - sum of all twos thrown </li>
<li>threes - sum of all threes thrown </li>
<li>fours - sum of all fours thrown </li>
<li>fives - sum of all fives thrown </li>
<li>sixes - sum of all sixes thrown </li>
<li>chance - sum of all dice </li>
<li>three of a kind - sum of all dice, provided at least  three have same value </li>
<li>four of a kind - sum of all dice, provided at least four have  same value </li>
<li>five of a kind - 50 points, provided all five dice have same  value </li>
<li>short straight - 25 points, provided four of the dice form a  sequence                               (that is, 1,2,3,4 or 2,3,4,5 or 3,4,5,6) </li>
<li>long straight - 35 points, provided all dice form a sequence                              (1,2,3,4,5 or 2,3,4,5,6) </li>
<li>full house - 40 points, provided three of the dice are equal                           and the other two dice are also equal.  (for                           example, 2,2,5,5,5) </li>
</ul>
<ul>
</ul>
<p>Each of the last six categories may be scored as 0 if the criteria are  not met.</p>
<p>The score for the game is the sum of all 13 categories plus a bonus of  35 points if the sum of the first six categores (ones to sixes) is 63 or  greater.</p>
<p>Your job is to compute the best possible score for a sequence of rounds.</p>

*******InputConstraints*******

<p>Each line of input contains 5 integers between 1 and 6, indicating the  values of the five dice thrown in each round.  There are 13 such lines for  each game, and there may be any number of games in the input data.</p>

*******OutputConstraints*******

<p>Your output should consist of a single line for each game containing 15  numbers: the score in each category (in the order given), the bonus score (0 or  35), and the total score.  If there is more than categorization that yields the  same total score, any one will do.</p>

*******IOTestCases*******

<p><strong>Input</strong></p>
<p>1 2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1  2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1  2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1 2 3 4 5<br />1  2 3 4 5<br />1 1 1 1 1<br />6 6 6 6 6<br />6 6 6 1 1<br />1  1 1 2 2<br />1 1 1 2 3<br />1 2 3 4 5<br />1 2 3 4 6<br />6  1 2 6 6<br />1 4 5 5 5<br />5 5 5 5 6<br />4 4 4 5 6<br />3  1 3 6 3<br />2 2 2 4 6</p>
<ul>
</ul>
<p><strong>Output:</strong></p>
<p>&nbsp;</p>
<p>1 2 3 4 5 0 15 0 0 0 25 35 0 0 90<br />3 6 9 12 15 30 21 20 26 50 25 35 40 35 327</p>


______________________________________________________
TEST00||||||false||||||

	<form action="/newsubmit/TEST00/" method="post" id="newform">
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">Ahmed wants to List all the prime numbers from 0 to n ; He will do this for N times</span></span></p>
<h3><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">Input</span></span></h3>
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">The input file first line contains the number of cases N.</span></span></p>
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">then followed by N lines.</span></span></p>
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">each line contains the number n<sub>i </sub>where i is the trial's number; Ahmed wants to calculate all primes till it</span></span></p>
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;"><br /></span></span></p>
<h3><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">Output</span></span></h3>
<p><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">A file of N lines ; line&nbsp; i contains all the prime numbers till n<sub>i</sub></span></span></p>
<p style="text-align: left;"><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;"><br /></span></span></p>
<h3 style="text-align: left;"><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;"><span style="color: #ff0000;">Example Number 1:</span><br /></span></span></h3>
<pre style="text-align: left;"><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;"><strong>Input:</strong><br />2<br />5<br />7<br /><br /><strong>Output:</strong><br />2 3 5<br /></span><span style="font-family: comic sans ms,sans-serif;">2 3 5 7<br /></span></span><h3><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;"><span style="color: #ff0000;">Example Number 2: </span><br /></span></span></h3><h3><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">&nbsp;</span><strong>Input:</strong></span></h3><pre><span style="font-size: medium;"><span style="font-family: comic sans ms,sans-serif;">3<br />5<br />1<br />7<br /><br /><br /><strong>Output:</strong><br />2 3 5<br /><br />2 3 5 7</span></span></pre>
<span style="font-size: small;"><span style="font-family: comic sans ms,sans-serif;"><span style="font-size: medium;"><span style="color: #ff0000;"><strong>Conditions</strong>: </span><br />N [Number ofTrials]  is between 0 and 100<br />0&lt; n<sub>i</sub> &lt;10000<br /></span><br /></span></span></pre>
	
	<div id="global_result">
	</div>
	<br/>
	<table class="problems" width="100%">
		<tr class="headerrow">
			<th width="17%" class="">ID</th>
			<th width="36%">RESULT</th>
			<th width="16%">TIME</th>
		</tr>
		<tr class="kol3">
			<td class="status_sm"></td>
			<td manual="0" status="15" id="statusres_8071" class="statusres td5">
	    	</td>
	    	<td id="statustime_8071" class="statustext td6">
	    	</td>
		</tr>
	</table>
	
	<input type="hidden" name="ajax" value="1"/>
	<input type="hidden" name="ajax2" value="1"/>
	<script type="text/javascript" src="/gfx/jquery-ui-1.7.1.custom.min.js"></script>
	<script type="text/javascript" src="/gfx/jquery.form.js"></script>
	<input type="hidden" id="debug" value="0"/>

<script language="JavaScript">
<!--
		var loader = "<img src='/gfx/loader.gif'/>";
        var screen_width = 1;
        var screen_height = 1;
        var win_width = 1;
        var win_height = 1;
        var win_left = 1;
        var win_top = 1;
        var tmp = "";
		function load(){
                a = new Array();
                for(var i = 0; i<9; i++){
                        var results = $('.statusres[status='+i+'][manual=0]').each(function(i, el){
                                var zz = $(el).attr('id').substring(10);
                                a.push( zz );
                                $('#statustime_'+zz).html(loader);
                        });
                };
                if( a.length > 0 ){
                $.ajax({
                        type: "POST",
                        url: "/status/ajax=1,ajaxdiff=1",
                        data: "ids="+a.join(','),
                        dataType: 'json',
                        success: function(data){
                                for(var i = 0; i<data.length; i++){
                                        $("#statusres_" + data[i].id).attr('status', data[i].status);
                                        $("#statusres_" + data[i].id).html(data[i].status_description);
                                        $("#statustime_" + data[i].id).html(data[i].time);
                                        $("#statusch_" + data[i].id).html(data[i].chk_id);
                                        if( data[i].status >= 9 ){
                                                $("#statusres_" + data[i].id).parent('tr').attr('class', 'kol');
                                                $("#statusmem_" + data[i].id).html(data[i].mem);
                                        }
                                        if( data[i].status == 15 ){
                                                $("#statusres_" + data[i].id).parent('tr').attr('class', 'kol3');
                                        }
                                        if( data[i].status < 9 ){
                                                $("#statusres_" + data[i].id).html( $("#statusres_" + data[i].id).html());
                                                $("#statustime_" + data[i].id).html( loader );
                                        }
                                        $("#statusres_" + data[i].id).parent().attr('class', data[i].color);
                                }
								setTimeout(load, 4000);
                        },
                        error: function(err,a,b){
							if( $("#debug").attr("value") == 1 ){
								alert(err);
								alert(a);
								alert(b);
								tmp = err;
							};
                        }
                });
                }
        }

$(document).ready(function(){
        function reload_window_dim(){
			screen_width = $(window).width() - 10;
			screen_height = $(window).height() - 10;
			win_width = screen_width * 4 / 5;
			win_height = screen_height * 4 / 5;
			win_left = screen_width / 10;
			win_top = screen_height / 10;
		}
		reload_window_dim();

        load();
    
        $.ui.dialog.defaults.bgiframe = true;
	
		function source_code_execute(){
			$("#op_window_sourcecode_link").unbind("click");
			$("#op_window_sourcecode_link").bind("click", function(){
				$('#op_window_mjudge').hide();
				$('#op_window_sourcecode').show();
				var url = $('#url').attr('value');
				loadCode(url, "op_window_sourcecode", false);
				return false;
			});
		}
		function plain_text_execute(){
			$("#op_window_plaintext_link").unbind("click");
			$("#op_window_plaintext_link").bind("click", function(){
				$('#op_window_mjudge').hide();
				$('#op_window_sourcecode').show();
				var url = $('#url').attr('value');
				url = url.replace('src', 'src\/plain');
				loadCode(url, "op_window_sourcecode", true);
				return false;
			});
		}
		function copy_to_submit_execute(){
			$("#op_window_copy_to_submit_link").unbind("click");
			$("#op_window_copy_to_submit_link").bind("click", function(){
				var id = $('#solutionid').attr('value');
				var pcode = $('#pcode').attr('value');
				window.location.href = "/submit/"+pcode+"/?id="+id;
			});
		}
		function manual_rejudge_execute(){
			$("#op_window_mjudge_link").unbind("click");
			$("#op_window_mjudge_link").bind("click", function(){
				$('#op_window_mjudge').show();
				$('#op_window_sourcecode').hide();
				return false;
			});
		}
		
		function createWindow(){
			reload_window_dim();
			$("#op_window").dialog({
				//bgiframe: true,
				autoOpen: false,
				height: win_height,
				width: win_width,
				modal: true,
				buttons: {
					Close: function() {
						$(this).dialog('close');
						//$(this).dialog('destroy');
					}
				}
			});
			$(".ui-dialog .ui-dialog-titlebar").append("<a class=\"ui-dialog-titlebar-resize ui-corner-all\" href=\"\"><span class=\"ui-icon ui-icon-newwin\" unselectable=\"on\" style=\"-moz-user-select: none;\">resize</span></a>");
			$(".ui-dialog .ui-dialog-titlebar .ui-icon-newwin").bind("click", function(){
				reload_window_dim();
				if( ! $(".ui-dialog").attr("max") ){
					$('#op_window').parents('.ui-dialog:first').animate({ width: screen_width, height: screen_height, left: 0, top: 0 });
					$('#op_window').animate({ width: screen_width, height: screen_height-100 });
					$(".ui-dialog").attr("max", "1");
				} else {
					$('#op_window').parents('.ui-dialog:first').animate({ width: win_width, height: win_height, left: win_left, top: win_top });
					$("#op_window").animate({ width: win_width, height: (win_height - 100) });
					$(".ui-dialog").attr("max", "");
				}
				return false;
			});
			source_code_execute();
			plain_text_execute();
			manual_rejudge_execute();
			copy_to_submit_execute();
		};
		
		createWindow(); 
		
		
		function loadCode(url,objectid,pre){
			$("#"+objectid).html(loader);
			if( ! url ) return;
			$.ajax({
				type: "POST",
				url: url,
				cache: false,
				data: "post=1",
				success: function(data){
					if( ! pre ){
						$("#"+objectid).html(data);
					} else {
						$("#"+objectid).html("<pre>" + data + "</pre>");
					}
				},
				error: function(){
					$("#"+objectid).html("error ;(");	
				}
			});
		}
		
		
					
			$(".op_window").bind("click", function(){
				reload_window_dim();
				$('#solutionid').attr('value', ( $(this).attr('sid') ) );
				$('#pcode').attr('value', ( $(this).attr('pcode') ) );
				$('#op_window').dialog('open');
				$('#op_window').dialog('enable');
				//$('.ui-dialog').css('display', 'block');
				$(".ui-dialog").attr("max", "");
				var url = "/files/src/" + $(this).attr('sid') + "/";
				$('#url').attr('value', url);
				loadCode(url, "op_window_sourcecode", false);
				$("#op_window_sourcecode_link").click();
				return false;
			});
			
				
		
		
		$(".ideone-run").click(function(){
			var $this = $(this);
			$.ajax({
                	type: "post",
                	url: "/files/src/plain/"+$(this).attr('sid')+"/",
                	cache: false,
                	dataType: 'html',
                	success: function(data){
                		ideone_submit(data, $this.attr('lang'), '', $this.attr('note'), true, true);
                	}
                });
            return false;
		});
		
	});
-->
</script>


	<div id="op_window" title="<a href='#' id='op_window_sourcecode_link'>Source code</a> | <a href='#' id='op_window_plaintext_link'>Plain text</a> | <a href='#' id='op_window_copy_to_submit_link'><b>Copy to submit</b></a>">
		<input type="hidden" class="url" value="" id="url"/>
		<div id="op_window_sourcecode">
		code...
		</div>
		<input type="hidden" class="solutionid" id="solutionid"/>
		<input type="hidden" class="pcode" id="pcode"/>
	</div>
	
	<script type="text/javascript">
	<!--
		$(document).ready(function() {
			$("#newform").bind('submit', function() {
				$(this).ajaxSubmit({
					success: function(responseText, statusText){
						var id = responseText;
						$(".status_sm").html(id);
						$(".td5").attr('id', 'statusres_'+id);
						$(".td5").attr('status', '0');
						$(".td6").attr('id', 'statustime_'+id);
						$(".td7").attr('id', 'statusmem_'+id);
						load();
					}
				});
				return false;
			});
		});
	-->
	</script>
	
	
	<br/><br/>
	<input type="submit" value="Submit solution"/>
	
	</form>


______________________________________________________
BLOWFUSE||||||false||||||

<p>http://uva.onlinejudge.org/external/6/661.html</p>


______________________________________________________
NONSTOP||||||false||||||

<p>A call centre  employee X works the late shift and leaves his company's parking lot at precisely 4:00 AM every morning. His route home is by a straight road which has <strong>four</strong> <strong>traffic signal</strong>s at <strong>fixed locations</strong> but varying Green, Yellow &amp; Red timings. X has always wondered if, given the locations and cycles of each of the traffic signals, are there velocities he can travel home without ever having to speed up or slow down on account of a red signal light. You are to write a program to satisfy his curiosity. Your program should find the maximum integer speed(in km per hour) which can be used for X's trip home. Each speed is a rate (in km per hour) he can maintain the moment he leaves the parking lot at 4:00 AM until he arrives a traffic signal. He can change the speed at every traffic signal and maintain it till the next signal such that he never passes through a red signal. Since X is a relatively law-abiding citizen,you need only consider speeds in the range 55-60. Also when light changes from yellow to red he must not cross it. If no such speeds are possible then print "not possible".</p>
<p><br />The optimum speed for a section is the maximum allowable speed so that he can reach home soon to <br />have a good nap.<br /><br />All traffic signal turns green at exactly 4 a.m everyday. The distance is as follows<br />Office    - Signal 1      50 KM<br />Signal 1 - Signal 2       20KM<br />Signal 2 - Signal 3       40KM<br />Signal 3 - Signal 4       12KM<br />Signal 4 - House          10KM  <br /><br /><br /><strong>Input</strong><br /><br />The input consists of 4 lines and 3 integers in each line for 'G'  'Y'  'R' values indicating<br />the time(in seconds) the traffic light remains in Green Yellow Or Red resp.<br /><br /><strong>Output</strong><br />It must contain five lines and each line indicating the maximum speed he can travel in that interval.<br /><br /><strong>Sample Input:</strong><br /><br />30 15 45        // G  Y  R values(in seconds)<br />18 8 25<br />20 30 40<br />10 10 30<br /> <br /><strong>Sample Output:</strong><br />60<br />60<br />60<br />57<br />60</p>


______________________________________________________
NEXTODD||||||true||||||


<p>Given an integer  1 &lt;= N &lt;= 10000,you have to print the next odd number.</p>
<p>Score is the length of your source.</p>

*******InputConstraints*******

<p>The input file consists of series of numbers one in each line.The input is terminated by EOF.</p>

*******OutputConstraints*******

<p>The next odd number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />2<br />6<br />17<br /><br /><strong>Output:</strong><br />7<br />3<br />7<br />19<br /><br /><br /></pre>
<p>PS:Take care about your fingers, do not use more than 100 bytes of code.</p>


______________________________________________________
INFINITY||||||false||||||

<p>Do you ever thought about biggest number that you can write ? For a kid,the biggest number that he/she could write is 10 or 100 or 1000 etc and this depends on solely on his/her teacher.</p>
<p>We are not kids and we also have a computer for our help so we can think of much big number,for example consider this one :</p>
<p><strong>93326215443944152681699238856266700490715968264381621468592963895217599993229915 608941463976156518286253697920827223758251185210916864000000000000000000000000 </strong></p>
<p>This is nothing but <strong>100!</strong>,but is this the biggest number? I might add <strong>1</strong> to it and thus fail your claim of the biggest number.</p>
<p>This problem is actually a test of your imagination,you supposed to output a number which will be biggest of all numbers that anybody could possibly imagine.</p>
<p>Be careful I may add just 1 and fail your claim! But if you are lucky enough you would possibly output the correct answer.</p>

______________________________________________________
NTH||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">th</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">P</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;largest value in a fixed sized array of&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">integers. &nbsp;To make things simple, N will be 3 and the array will always be have 10 decimal integer&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">values.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Input&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first line of input contains a single integer P, (1 &le; P &le; 1000), which is the number of data sets that&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">follow. &nbsp;Each data set consists of a single line containing the data set number, followed by a space,&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">followed by 10 space separated decimal integers whose values are between 1 and 1000 inclusive.&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Output&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For each data set, generate one line of output with the following values: &nbsp;The data set number as a&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">decimal integer, a space, and the 3P</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">rd</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">P</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&nbsp;largest value of the corresponding 10 integers.&nbsp;</div>
<p>&nbsp;</p>
<p>For this problem, you will write a program that prints the Nth&nbsp;largest value in a fixed sized array of&nbsp;</p>
<p>integers. &nbsp;To make things simple, N will be 3 and the array will always be have 10 decimal integer&nbsp;</p>
<p>values.&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Input&nbsp;</strong></p>
<p>&nbsp;</p>
<p>The first line of input contains a single integer P, (1 &le; P &le; 1000), which is the number of data sets that&nbsp;</p>
<p>follow. &nbsp;Each data set consists of a single line containing the data set number, followed by a space,&nbsp;</p>
<p>followed by 10 space separated decimal integers whose values are between 1 and 1000 inclusive.&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Output&nbsp;</strong></p>
<p>&nbsp;</p>
<p>For each data set, generate one line of output with the following values: &nbsp;The data set number as a&nbsp;</p>
<p>decimal integer, a space, and the 3rd&nbsp;largest value of the corresponding 10 integers.&nbsp;</p>
<p>&nbsp;</p>
<h3>Example</h3>
<pre><strong>Input:</strong>
4 
1 1 2 3 4 5 6 7 8 9 1000 
2 338 304 619 95 343 496 489 116 98 127 
3 931 240 986 894 826 640 965 833 136 138 
4 940 955 364 188 133 254 501 122 768 408

<strong>Output:</strong>
1 8 
2 489 
3 931 
4 768 <span style="white-space: normal;">
</span></pre>


______________________________________________________
TAKE4||||||false||||||

<p>Two players play the following game: <br />a) A number N is chosen<br />b) players move alternately starting from player1 <br />c) On his turn, a player may subtract either 1, 2 , 3 .. or M ( M &lt;= N ) from N. <br />d) The player to make N equal to 0, wins. <br />e) Both play optimally. That is, if there is a move which makes a player win, he is sure to find it.<br />Given the starting value N, determine who wins the game. <br />&nbsp;<br />Input: <br />First line consists of the number of test cases T (T &lt;= 1000). Each of the next T lines consists of two integers, the numbers N and M (1 &lt;= N &lt;= 2000). <br />&nbsp;<br />Output: <br />You must ouput T lines. Output "player 1 wins" (without quotes) if the first player wins, else output "player 2 wins" <br />&nbsp;<br />Example: <br />input: <br />2 <br />4 4<br />2 1<br />&nbsp;<br />&nbsp;<br />output: <br />player1 wins <br />player2 wins</p>


______________________________________________________
PERMRANK||||||false||||||

<p>Given a permutation of the first N (0 &lt; N &lt; 20) natural numbers, find the lexicographic number of the permutation. For example, if N = 3, then :<br />Rank&nbsp;&nbsp; &nbsp;Permutation <br />1&nbsp;&nbsp; &nbsp;1 2 3 <br />2&nbsp;&nbsp; &nbsp;1 3 2 <br />3&nbsp;&nbsp; &nbsp;2 1 3 <br />4&nbsp;&nbsp; &nbsp;2 3 1 <br />5&nbsp;&nbsp; &nbsp;3 1 2 <br />6&nbsp;&nbsp; &nbsp;3 2 1 <br />&nbsp;<br />Input: &nbsp;<br />The first line consists of the number of test cases T (T &lt;= 10000). Each test case consists of 2 lines- the first line has an integer N, the length of the permuatation, and the second line consists of a permutation of the integers from 1, 2, ... , N <br />&nbsp;<br />Output: <br />For each test case, output 1 integer, the rank of the permutation. Print each answer on a new line.<br />It is guaranteed that the result will fit in a 64-bit signed integer. <br />&nbsp;<br />example: <br />Input: <br />1 <br />4 <br />2 1 4 3 <br />&nbsp;<br />output: <br />8</p>


______________________________________________________
FIBOREP||||||false||||||

<p>Zeckendorf's theorem states that every number can be written uniquely as the sum of distinct fibonacci numbers, such that no 2 of the fibonacci numbers are consecutive. Given N, print the Zeckendorf representation of N.</p>
<p><br />Given a number N, you have to print the Fibonacci numbers that sum upto N, as per the Zeckendorf's theorem. <br />&nbsp;<br />Input: <br />The first line consists of an integer T, denoting the number of test cases that follow. Each of the next T lines consist of an integer N. <br />&nbsp;<br />Output: <br />Your output should contain T lines. On each line, print the Fibonacci numbers that add upto the corresponding N (in increasing order), as per the Zeckendorf's theorem. <br />&nbsp;<br />Constraints: <br />T &lt;= 1000 <br />1 &lt;= N &lt;= 100000000 (10^8) <br />&nbsp;<br />Sample Input: <br />2 <br />10 <br />100 <br />&nbsp;<br />Sample Output: <br />2 8 <br />3 8 89</p>


______________________________________________________
MINMAX||||||true||||||


<p>You have successfully decrypted the exam paper and the miracle has happened! Owing to your generous nature, you decide to share this paper with your batch-mates. Just giving away the paper to everyone would belittle the pains you took to get it. So, you devise a strategy to earn reward for your hard work. You decide to meet your batch-mates by dividing them into separate groups of several different sizes. For each group, you give away the paper to the person who bids the highest amount.</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>The first line of the input contains an integer g, the number of groups. After this, g lines follow. Each line starts with a single integer&nbsp;<strong>N</strong>, the number of batch-mates in the group followed by a space and than&nbsp;<strong>N</strong>&nbsp;space-separated integers b<sub>i</sub>, corresponding to the bids made by each of them.<span style="font-size: xx-small;">&nbsp;</span></p>

*******OutputConstraints*******

<p>For each group, output one line containing "Group #x: a", where x is the group number(starting from 1), and&nbsp;<em>a</em>&nbsp;is the highest bid value.</p>

*******IOTestCases*******

<pre><strong>Input:</strong></pre>
<pre>3
3 1 3 2<br />2 3 5
5 10 0 50 5 20</pre>
<pre><strong>Output:</strong></pre>
<pre>Group #1: 3<br />Group #2: 5<br />Group #3: 50<br /></pre>
<pre><strong>Limits:</strong></pre>
<pre>1 &lt;= g &lt;= 10^3,
1 &lt;= <strong>N</strong> &lt;= 100, <br />0 &lt;= b<sub>i</sub> &lt;= 10^9.</pre>


______________________________________________________
HACK||||||true||||||


<p>Chief, your situation is miserable in Calculus. You know that if some miracle doesn't happen, you are going to spend the next summer here. Obviously, you don't want to do that. So, you hatch a plan to hack into your instructor's computer system and obtain the exam paper. Given that you are good at hacking, you manage to obtain the exam paper but unfortunately, the text is encrypted. All is not lost yet!&nbsp; You see some numbers written on the paper. Quickly, you figure out that the key to decrypt the text is the <em>lowest common multiple</em> of the given numbers(mod 10007).</p>

*******InputConstraints*******

<p>The input consists of multiple lines. Each line consists of a number n(1 &lt;= n&nbsp; &lt;= 10^4). End of input is marked by 0.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output a single number which is the <strong>L.C.M.</strong> of the input numbers modulo 10007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />2<br />3<br />4<br />0<br /><br /><strong>Output:</strong> <br />12<br /><br />Please note that zero is just an indicator for the end of input. It is guaranted that the input will have atleast two lines.<br />
</pre>


______________________________________________________
TILEGAME||||||true||||||


<p>Tomorrow is the Calculus exam and you are playing with squares and dominoes.</p>
<p>Your room-mate shouts at you: "Chief, are you not bothered?"</p>
<p>You <img title="Cool" src="../../gfx/jscripts/tiny_mce/plugins/emotions/img/smiley-cool.gif" border="0" alt="Cool" />: "I am already prepared. Now, let me focus on the game."</p>
<p>Out of curiosity, your room-mate starts looking at the game and throws you a challenge. How many ways can you tile a board of length n using only dominoes and squares?</p>
<p><img title="Tiles" src="IDPC1/content/tiles.jpg" alt="tiles" /></p>
<p>(In the above figure, the the yellow-colored rectangle indicates the board of length 3. The blue rectangle is a unit square and the green rectangle is a dominoe.)</p>
<p>Show your room-mate that you are the Chief by writing a program that can calculate the number of tilings of a n-board using only squares and dominoes.</p>

*******InputConstraints*******

<p>The input starts with an integer t (1 &lt;= t &lt;= 10^5), the number of test cases. t lines follow. Each line contains an integer value n.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Corresponding to each test case, print an integer y, which is the number of ways one can tile a board of length n using squares and dominoes. It is safe to assume that y will fit into a 64-bit integer.</p>

*******IOTestCases*******

<pre><strong>Input:</strong> <br />2<br />1<br />3<br /><br /><strong>Output:<br /></strong>1<br />3<br /><br />Explanation for Case 2: These are the three possible arrangements: s+s+s, s+d, d+s (s: square, d: dominoe).<br /></pre>


______________________________________________________
THANKS||||||true||||||


<p>The exams are over. You and your batch-mates are over the moon, especially after cracking the Calculus paper. Chief, your popularity is soaring and your batch-mates are going ga-ga about you. As a thanking gesture, they send you&nbsp; <em>Thank you</em> messages. Overwhelmed about this, you decide to reply back to all of them. You are keen to start dating one of your batch-mates and don't want to miss this opportunity. We leave at that Chief, hoping that you will soon find a date <img title="Wink" src="../../gfx/jscripts/tiny_mce/plugins/emotions/img/smiley-wink.gif" border="0" alt="Wink" />.</p>

*******InputConstraints*******

<p>The first line of the input contains two space-separated integers T(the number of messages you recieved) and G(0 for boy, 1 for girl) which indicates your gender. T lines follow. Each line starts with the name of the sender S<sub>i</sub>, followed by a space and than an integer G<sub>i</sub>(gender of the sender).&nbsp;</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>Output exactly T lines. Each line should be of the following format: "Welcome S<sub>i</sub>" or "Welcome S<sub>i</sub>, ;)" depending on whether the sender and you are of the same gender or opposite gender.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:<br /></strong>4 0<br />Avani 1<br />Parth 0<br />Hena 1<br />Rohan 0<br /><br /><strong>Output:</strong> <br />Welcome Avani, ;)<br />Welcome Parth<br />Welcome Hena, ;)<br />Welcome Rohan<br /><br /><pre><strong>Limits:</strong> <br />1 &lt;= T &lt;= 1000,<br />Length of S<sub>i</sub> won't exceed 15 characters and there will be no spaces in the name.<br /></pre>
</pre>


______________________________________________________
RANJAN03||||||false||||||

<p>In order to pass through the wood, Vikram have to solve the following puzzle of Betaal:<br /> Betaal has captured the Vikram' family in the location pointed by the co-ordinate (x, y), while Vikram is on (0,0). Now Vikram has to count the total no. of increasing lattice paths from his initial position to his family and tell it to Betaal in order to set his family free. As Vikram is a loser in mathematics from childhood, he demanded you to solve this puzzle and message it secretely to him.<br /><br /></p>
<h3>Problem:</h3>
<p>Given the no. of test cases, t, followed by t lines. Each line contain a no., n, representing the co-ordinate (n, n), where Vikram' family has been imprisioned. Find the number of increasing lattice paths from (0, 0) to (n, n) and print in separate lines.  A path is increasing if it goes up or to the right only, i.e., a path can go from (x, y) to either (x+1, y) or (x, y+1).<br /><br /> <strong>Constraint:</strong></p>
<p>a. 0 &lt; n &lt; 31<br /> b. number of ways &lt; 2^64</p>
<h3>Example</h3>
<pre><strong>Input:</strong><br />5<br />1<br />2<br />3<br />4<br />5<br /><br /><strong>Output:</strong><br />2<br />6<br />20<br />70<br />252<br /></pre>


______________________________________________________
CCONST||||||true||||||


<p>For each input line, interpret if&nbsp; it as a hexadecimal number (if it begins  with 0x), an octal number (if it begins with 0), and a decimal number  otherwise, and output its value in decimal.</p>
<p>Score is the length of your source.</p>

*******InputConstraints*******

<p>The input file consists of series of numbers (as described above) one in each line.</p>
<p>The input is terminated by EOF.</p>

*******OutputConstraints*******

<p>The decimal value of the given number.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>&nbsp;<pre>0146
0xcd
0x188
0611
0x37d<br />0x0
0x1
01
1
0x2
</pre>
<strong>Output:</strong> <br />
<pre>102
205
392
393
893<br />0
1
1
1
2
</pre>
&nbsp;
<pre><strong>PS:Take care about your fingers, do not use more than <strong>128 bytes of code.</strong></strong></pre>
</pre>


______________________________________________________
NEWLANG||||||true||||||


<p>Given N and K, find the smallest and the largest positive integers, each with exactly N digits and having exactly K distinct digits ( 0 - 9 ). Leading zeroes are not allowed !</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases ( about 200 ). Each of the next T lines contains 'N K' , where 1 &lt;= N &lt;= 18 and 1 &lt;= K &lt;= 10 . Input is given such that the answer will always exist.</p>

*******OutputConstraints*******

<p>For each test case, output the two numbers, separated by a space, in a new line.&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
</pre>
<pre>2
1 1
3 3 </pre>
<pre><strong>Output:</strong></pre>
<pre>1 9
102 987</pre>


______________________________________________________
SALSA||||||true||||||


<p>There is a salsa dance class going on at Da-iict :). There are 2n students participating in the class. They have to form n teams of two students each so that the dance may begin. It is possible that two boys/girls are in the same team. Can you find out in how many ways the teams can be formed.</p>

*******InputConstraints*******

<p>The first line will be T (T&lt;=10) which denotes the number of test cases. &nbsp;Each of the next T lines will have the number n (0&lt;=n&lt;=17)</p>

*******OutputConstraints*******

<p>For each test case output the answer on a new line. Answer will always fit in a 64 bit signed data type.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 156px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">3</div>3
1
2
3</pre>
<pre><strong>Output:</strong>
1
3
15</pre>
<pre>Explanation: For n = 1 , there are only 2 students. Hence only 1 way to form a team.</pre>


______________________________________________________
OWNCALC||||||false||||||

<p><span style="font-family: 'comic sans ms', sans-serif;">Fed up using your operating system's stupid calculator and wanting for some recreation, you decide to make your own calculator. However, your everyday tasks revolve only around four operations: +,-,*,/. Furthermore, all the answers should be outputted in the form of {ans}%(10^9+7).</span></p>
<p><strong><span style="font-family: 'comic sans ms', sans-serif;">Input</span></strong></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">The first line contains an integer T, the number of test cases. Each of the next T lines consists of an infix expression to be evaluated. The length of an expression won't exceed 100 characters.</span></p>
<p><strong><span style="font-family: 'comic sans ms', sans-serif;">Output</span></strong></p>
<p><span style="font-family: 'comic sans ms', sans-serif;">Output exactly T lines corresponding to each input test case. The output format for a particular test case should be of the form "Case #x: y", where x is the test-case number and y is the evaluated answer.</span></p>
<p><strong><span style="font-family: 'comic sans ms', sans-serif;">Example</span></strong></p>
<pre><strong><span style="font-family: 'comic sans ms', sans-serif;">Input:</span></strong><span style="font-family: 'comic sans ms', sans-serif;">
2
10+5*3
10*9/4-5</span></pre>
<pre><strong><span style="font-family: 'comic sans ms', sans-serif;">Output:</span></strong><span style="font-family: 'comic sans ms', sans-serif;">
Case #1: 25
Case #2: 17</span></pre>
<pre><span style="font-family: 'comic sans ms', sans-serif;">Explanation: </span></pre>
<pre><span style="font-family: 'comic sans ms', sans-serif;">Case #1: * has a greater priority than +. So, 5*3 gets evaluated first.</span></pre>
<pre><span style="font-family: 'comic sans ms', sans-serif;">Case #2: (*,/) have the same priority. Hence, we evaluate them from left to right. 10*9 will give 90.
90/4 will be 22(truncate the non-integer part). And finally, 22-5 will result in 17.</span></pre>


______________________________________________________
CPCRC1A||||||true||||||


<p>Maryam and Majid have created the following game.<br />Each one has a series of cards of which a number from 1 to 100 is written on each one.<br />In each round, Majid chooses a card. Then, Maryam chooses one card from her series, and one random card from Majid's. If the sum of Maryam's chosen cards equals to Majid's card, she is the winner. If the difference of Maryam's chosen cards equals to Majid's card, Majid is the winner. Otherwise, the game continues.</p>

*******InputConstraints*******

<p>Three space-separated integers 0 &lt; A,B,C &lt;= 100 denoting the cards chosen by Majid and Maryam, respectively.<br />Program should terminate if the three numbers are zero.</p>

*******OutputConstraints*******

<p>If Maryam is the winner, print the following string:<br />Maryam Win!!!<br />If Majid is the winner, print the following string:<br />Majid Win!!!</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />10 10 10<br />1 5 1<br />7 4 4<br />7 4 3<br />2 3 5<br />0 0 0<br /><strong>Output:</strong>
Maryam Win!!!<br />Majid Win!!!</pre>


______________________________________________________
CPCRC1B||||||true||||||


<p>Ali, for making fun for his sister, proposed her the following problem.</p>
<p>Having an NxN grid, how many squares are there?</p>

*******InputConstraints*******

<p>Integer 1&lt;=N&lt;=50000 indicating the length of the grid.</p>
<p>Input terminates with N=0.</p>

*******OutputConstraints*******

<p>The number of squares.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1<br />2<br />17<br />21<br />27<br />0<br /><strong>Output:</strong>
1<br />5<br />1785<br />3311<br />6930</pre>


______________________________________________________
CPCRC1D||||||true||||||


<p>Given a non-decreasing series of integers a<sub>1</sub>,a<sub>2</sub>,...,a<sub>n</sub> and indices 1&lt;=i&lt;=j&lt;=n, what is the maximum number of repeated numbers within a<sub>i</sub>,a<sub>i+1</sub>,...,a<sub>j</sub>?</p>

*******InputConstraints*******

<p>Input contains several test cases.</p>
<p>Each case begins with two integers 1&lt;=n,q&lt;=10<sup>5</sup>.</p>
<p>Next line contains n integers (a<sub>1</sub>,a<sub>2</sub>,...,a<sub>n</sub>), each one having a size of lower than or equal to 10<sup>5</sup>.</p>
<p>In next q lines, there are queries. Each one contains two integers 1&lt;=i&lt;=j&lt;=n.</p>
<p>Input terminates when n,q are zero.</p>

*******OutputConstraints*******

<p>For each query, print the maximum number of repetitions within numbers a<sub>i</sub>,a<sub>i+1</sub>,...,a<sub>j</sub>.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
10 3<br />1 1 3 3 3 3 5 10 10 10<br />2 3<br />1 10<br />5 10<br />0 0<br /><strong>Output:</strong>
1<br />4<br />3</pre>


______________________________________________________
ARR||||||false||||||

<p>Replace "?" with a integer so that output is 4.</p>
<p>int main()<br />{<br /> int arr[7];<br /> int b,c,d,a;<br /> a=4;<br /> printf("%d",arr[?]);<br /> return 0;<br />}</p>

______________________________________________________
ADV04A||||||true||||||


<p>Daniel is building towers out of blocks. He has many black and white blocks. He has built two towers out of those. Now he suggests Max playing the following game. Black block will belong to Daniel and white blocks will be Max's blocks. During his turn the player can take any of his blocks from any tower and remove it and all the blocks above it. As usual the player who can't make the move loses. Daniels make the first move. Determine who will win if both players play optimally.


*******InputConstraints*******

<p>The input starts with number t - the amount of test cases. Each test case consists of two strings. Each string is formed of 'B' and 'W' characters, where 'B' means bleck block and 'W' - white block. Each string describes one tower from bottom to top.


*******OutputConstraints*******

<p>For each test case print 'Win' if Daniel wins and 'Loss' if Max wins given both players play optimally.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
WBW
BW
BBW
WWBB

<b>Output:</b>
Loss
Win

</pre>



______________________________________________________
ADV04B||||||true||||||


<p>There is a king in the lower left corner of the n Ã— n checkmate board. The king can move one step right, one step up or one step up-right. How many ways are there for him to reach the upper right corner of the board?


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. Next T lines consist of single integer n - the size of the board.


*******OutputConstraints*******

<p>For each test case output the munber of ways to reach upper right corner of n Ã— n board modulo 1000003.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
2
3

<b>Output:</b>
3
13

</pre>



______________________________________________________
ADV04F||||||true||||||


<p>There is a n Ã— 1 board. Its cells are numbered with integers from 1 to n. First four cells have indistinguishable chips in them. In one turn you can move one chip to the neighbouring cell or move it symmetrically relatively any other chip (i.e. if you move a chip in cell 10 symmetrically relative to the chip in cell 13 it will end up in cell 16), given that the chip won't leave the board and each cell will have no more than one chip. You need to determine the minimum number of turns needed to reach a certain configuration of chips.


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. Next T lines consist of four integers a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub> and a<sub>4</sub> &#8212; the numbers of cells where the chips should be in the final configuration.


*******OutputConstraints*******

<p>For each test case print single integer - the answer to the problem in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
2
1 2 3 4
1 3 4 6

<b>Output:</b>
0
1

</pre>



______________________________________________________
ADV04G||||||true||||||


<p>Regular expression is an expression which defines a set of strings. In this problem regular expression will contain only small latin letters a-z and special characters &#8216;?&#8217;, &#8216;*&#8217; &#1080; &#8216;+&#8217;. Each letter corresponds to itself in the defined strings. Special character can occur only after some letter and means the number of repetitions of the letter:</p>
<div align="center">
<table border="1" cellspacing="0" cellpadding="1"><tbody><tr><td align="left" nowrap=""> Character</td><td align="left" nowrap="">Repetitions</td></tr>
<tr><td align="left" nowrap=""> <tt>?</tt></td><td align="left" nowrap="">none or one</td></tr>
<tr><td align="left" nowrap=""> <tt>*</tt></td><td align="left" nowrap="">none or more</td></tr>
<tr><td align="left" nowrap=""> <tt>+</tt></td><td align="left" nowrap="">one or more</td></tr>
</tbody></table>
</div>
<p>For example &#8220;ac&#8221;, &#8220;abc&#8221;, &#8220;acc&#8221;, &#8220;abcccc&#8221;, and so on match regular expression &#8220;ab?c+&#8221;.

For the given string find the substring which matches the given regular expression. If there are many such substrings find the most left one. If there are many of those as well fing the longest one.


*******InputConstraints*******

<p>The first line of input contains number T - the amount of test cases. The description of T test cases follows. The first line of each test case is the given string S of length L. Next line contains number n - the amount of regular expressions. Next n lines describe one regular expression Ri each for which you should find the matching substrings.


*******OutputConstraints*******

<p>For each regular expression print the matching substring or -1 if there is no such substring in the given string.


*******IOTestCases*******


<pre>
<b>Input:</b>
1
aabbcc
5
ab
c+
ac
b*
a?

<b>Output:</b>
ab
cc
-1

a

</pre>



______________________________________________________
ADV04I||||||true||||||


<p>Super Board Games Inc. is a big company producing board games. A new game was invented within it which may become very popular. A board divided into square cells is required for this game. Left and lower borders of the board should be level and the height of columns of cells should not increase from left to right. Also the board must be entirely paveable with dominoes. After it was found out that the game is the most interesting when played on the board consisting of n cells, it has been decided to release as many versions of the game using different n-cell boards as possible. Help the company count the number of different boards that can be released.


*******InputConstraints*******

<p>The first line of input is number T - the amount of test cases. Each test is a single integer n - the number of cells.


*******OutputConstraints*******

<p>For each test case output the answer to the problem in the statement.


*******IOTestCases*******


<pre>
<b>Input:</b>
3
2
3
4

<b>Output:</b>
2
0
5

</pre>



______________________________________________________
HPYNOSI||||||true||||||


<p>The process of &ldquo;<strong>breaking</strong>&rdquo; an integer is defined as summing the squares of its digits. For example, the<br />result of breaking the integer <strong>125 </strong>is (<strong>12</strong> + <strong>22 </strong>+ <strong>52</strong>) = <strong>30</strong>. An integer <strong>N</strong> is <strong>happy </strong>if after &ldquo;<strong>breaking</strong>&rdquo; it<br />repeatedly the result reaches 1. If the result never reaches 1 no matter how many times the<br />&ldquo;<strong>breaking</strong>&rdquo; is repeated, then N is not a happy number.</p>
<h3><span style="font-size: small;"><strong>TASK</strong></span></h3>
<p>Write a program that given an integer <strong>T</strong> (number of test cases) and <strong>T </strong>integers, determines for each number whether it is a happy number or not.</p>
<h3><span style="font-size: small;"><strong>CONSTRAINTS</strong></span></h3>
<p><strong>1 &le; T &le; 1,080,000</strong></p>
<p><strong>2 &le; N &le; </strong><strong>2,147,483,647&nbsp; (number for determining whether it is happy or not)<br /></strong></p>

*******InputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; The first line contains an integer <strong>T</strong>.</p>
<p>&nbsp; &nbsp; &bull; next 1...T lines contain an integer <strong>N</strong> for detemining whether it is happy or not.</p>

*******OutputConstraints*******

<p>&nbsp;&nbsp;&nbsp; &bull; T lines containing a single integer <strong>N</strong> which is the number of times the process had to be<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done to determine that N is happy, or <strong>-1</strong> if <strong>N</strong> is not happy.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />19<br />204<br /><br /><strong>Output:</strong><br />4<br />-1<br /><br /><br />1) 19   : 1<sup>2</sup> + 9<sup>2</sup> = 82<br />2) 82   : 82 + 2<sup>2</sup> = 68<br />3) 68   : 6<sup>2</sup> + 8<sup>2</sup> = 100<br />4) 100 : 1<sup>2 </sup>+ 0<sup>2</sup> + 0<sup>2</sup> = 1<br /><br />The solution for 19 is 4 because we discovered that the integer 19 is happy after we repeated the process 4<br />times.<br /><br /><br /></pre>
<h4>204 &ndash;&gt; <span style="font-size: small;"><strong>20</strong></span> &ndash;&gt; 4 &ndash;&gt; 16 &ndash;&gt; 37 &ndash;&gt; 58 &ndash;&gt; 89 &ndash;&gt; 145 &ndash;&gt; 42 &ndash;&gt; <strong><span style="font-size: small;">20</span></strong> &ndash;&gt; 4 &ndash;&gt; 16 &ndash;&gt; 37 &ndash;&gt; 58 &ndash;&gt; 89 &ndash;&gt; 145 &hellip;&hellip;..</h4>
<pre><pre><br /><br /><strong>204 </strong>is not a happy number because after breaking it several times the results start repeating so we<br />can deduce that if we continue breaking it, the result will never reach 1.<br /></pre>
<br /></pre>


______________________________________________________
WNAME||||||false||||||

<p>This is probably one of the&nbsp; easiest problem,all you need to do is to output the name of the weekdays! The only challenge is that the size of your code, should not exceed the maximum of<strong> 55 bytes.</strong></p>
<p>Score is the length of the source.</p>

______________________________________________________
PECOSSTR||||||true||||||


<p>As many of you are not aware of the Pecos, let me introduce him. <em>Pecos is the Jerry's guitar playing Uncle with a henkerin's for Cat Whiskers. <br /></em></p>
<p>Whenever a string of his guitar broke, he replace it with one the Tom's whiskers. Finding no other solution, Tom asks Uncle Pecos to let him play the music for him.</p>
<p>As Uncle Pecos is a creative mouse since his last life, he provide Tom his music notes, and ask him to play notes only at n<sup>th</sup> position. On noticing that it's very easy, he added that the Tom had to miss every n<sup>th</sup> note, from the notes which he is supposed to play.</p>

*******InputConstraints*******

<p>There are one test case per line. Test cases ends with a '-1' (qoutes for clearity). Each test case contains a number, n, followed by the musical notes, charaters from [a-z] and is upto length of 1000, in the same line.</p>

*******OutputConstraints*******

<p>For each test case, print the required note in separate line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3 abcdefghijklm<br />4 pqrstuvwxyzsm<br />-1<br /><br /><strong>Output:</strong><br />cfl<br />sws<br /><br /><span style="text-decoration: underline;">Explanation for test case # 1:</span> ab<span style="text-decoration: underline;">c</span>de<span style="text-decoration: underline;">f</span>gh<span style="text-decoration: underline;">i</span>jk<span style="text-decoration: underline;">l</span>m<br /><br />Initially Tom is supposed to play every note at 3*n (n &epsilon; Z<sup>+</sup>) position : cf<span style="text-decoration: underline;">i</span>l<br /><br />But after the second restriction, he had to miss every 3*n' (n' &epsilon; Z<sup>+</sup>) note, so new notes are : cfl<br /></pre>


______________________________________________________
FIBPARIT||||||true||||||


<p>In the quest to take over the world, the Pinky falls from the table, upside down. Miracle!!! Now he is intelligent. and the conversation goes like:</p>
<p>Brains : Pinky, are you pondering what I'm pondering? <br /> Pinky : I think so, what would be the remainder when the n<sup>th</sup> fibonacci number is divided by k?</p>
<p>Help Brain, solving this mystery.</p>
<p><strong>Statement </strong>: Given n and k, find the remainder when the n<sup>th</sup> fibonacci number is divided by k.<br /> Constraints :<br /> 1 &lt;= n &lt;= 10<sup>4</sup> <br /> 1 &lt; k &lt;= 10<sup>5</sup></p>
<p>n<sup>th</sup> fibonnaci numbers are defined by :</p>
<p>fib<sub>n</sub> = 1&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if n = 1 or n = 2 <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = fib<sub>n-1</sub> + fib<sub>n-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</sub> for n &gt; 2</p>
<p>Fibonacci series goes like : 1 1 2 3 5 8 13...</p>

*******InputConstraints*******

<p>The first line contains t, number of test cases. In following t lines, there are two space separated numbers, n k.</p>

*******OutputConstraints*******

<p>For each test cases, print the solution to the Pinky's quest in new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />5<br />5 2<br />4 3<br />10 4<br />4 5<br />11 12<br /><br /><strong>Output:</strong><br />1<br />0<br />3<br />3<br />5<br /></pre>


______________________________________________________
GOLDCOIN||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Ankul and Rohil have been awarded with N gold coins in a recent programming competition. Now they want</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">to divide these N coins. But there is a problem, weight of each coin is not equal.Both of them know that</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">dividing these coins optimally is an NP-Complete problem. So they have decided to put all the coins on a stack and</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">divide them in the following manner:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">They both take their turn alternatively and in each turn atmost K coins from the top of stack can be taken.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">Ankul always start first. Consider that both of them are infinitely intelligent so they will always take the</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;">best possible move. you have to find the maxinum weight which Ankul and Rohil will be able to get.</div>
<p>Ankul and Rohil have been awarded with N gold coins in a recent programming competition. Now they want&nbsp;to divide these N coins. But there is a problem, weight of each coin is not equal.Both of them know that&nbsp;dividing these coins optimally is an NP-Complete problem. So they have decided to put all the coins on a stack and&nbsp;divide them in the following manner:&nbsp;</p>
<p>They both take their turn alternatively and in each turn atmost K coins from the top of stack can be taken.&nbsp;Ankul always start first. Consider that both of them are infinitely intelligent so they will always take the&nbsp;best possible move. you have to find the maximum weight which Ankul and Rohil will be able to get.</p>

*******InputConstraints*******

<p>First line of input contains T,(1&lt;=T&lt;=30) the number of test cases then T test cases follow.&nbsp;First line of each test cases contains two space separated integers N and K (1&lt;=N&lt;=10000 and 1&lt;=K&lt;=10).&nbsp;2nd line contains N space separated integers (w1, w2,...wn), wi if the weight of ith gold coins from the top.(0&lt;=wi&lt;=1000)</p>

*******OutputConstraints*******

<p>For each test case print one line which contains 2 space separated integers A and R.&nbsp;A and R are the maximum weight of gold which Ankul and Rohil will be able to take respectively.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
3 2
1 2 3
10 4
2 1 0 1 3 9 2 0 1 5

<strong>Output:</strong>
3 3
14 10</pre>


______________________________________________________
NOVICE21||||||true||||||


<p>Given three Integers A, B, and N. Find how many integers between A and B( inclusive ) are divisible by N. 0&lt;=A&lt;=B&lt;=10^18, 1&lt;=N&lt;=10^18.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases. Each of next T lines contains 3 integer A, B, N.</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1 4 3<br />10 20 6<br /><br /><strong>Output:</strong><br />1<br />2</pre>


______________________________________________________
NOVICE22||||||true||||||


<p>Character set of a text is the set of all the characters which are used at least once in the text. you are given an string of at most 200000 characters which contains only ASCII characters except whitespaces. you have to find the length of its character set.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases. Each of next T lines contains an string S of at least 1 and at most 200000 characters.</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />abA<br />contact@nsit_programming_group<br /><strong><br />Output:</strong>
3<br />14</pre>


______________________________________________________
NOVICE23||||||true||||||


<p>For a given positive integer N, you have to find how many prime numbers are there upto N.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases, (about 1000). Each of next T lines contains 1 integer N (1&lt;=N&lt;=1000000).</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />5<br />10<br /><strong><br />Output:</strong>
3<br />4</pre>


______________________________________________________
NOVICE24||||||true||||||


<p>Given an integer N you have to find smallest prime number which comes after N, means smalltest prime which is greater than N.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases. Each of next T lines contain one integer N. 1&lt;=N&lt;=10^9</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />5<br />21<strong><br /><br />Output:</strong>
7<br />23</pre>


______________________________________________________
NOVICE25||||||true||||||


<p>A natural number k is divisor of another natural number if K completely divides N, means N % k = 0. For example 6 has 4 positive divisors 1, 2, 3, and 6. Now given a natural number N you have to find number of its positive divisors.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases. Each of next T lines contain one integer N. 1&lt;=N&lt;=10^9</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case print the answer in a new line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />6<br />7<br /><strong><br />Output:</strong>
4<br />2</pre>


______________________________________________________
BINSTR||||||false||||||

<p>Mahesh loves to play around with Binary Strings. He defines binary strings as a string made of only '0' and '1' (possibly empty). After years of research on binary string,<br />he found something known as Stable binary string. A stable binary string can be defined as :<br /><br />1. An empty binary string is stable.<br />2. If B is stable, then "0+B+1" is also stable. <br />3. If A and B are two stable binary strings, then "A+B" is also stable.<br /><br />(+ means concatenation here, quotes for clarity)<br /><br />For example, "01", "0101", "0011", are stable binary strings while "10", "11", "00", "1001", etc are unstable ones. Mahesh found out that a lot of binary strings are unstable,<br />so he is in a mood to convert them to stable strings. He can do a single operation of changing a '1' to '0' or a '0' to '1' infintely many times. He wants you to convert a <br />given binary string into a stable binary string in minimum number of operations.<br /><br /><strong>INPUT SPECIFICATIONS</strong><br /><br />Input contains multiple lines of testcases. Each line contains a single string consisting of only '1' and '0' and the size of string is no more than 20000 and is of even size. Input terminates<br />by a single '-' in a single line.<br /><br /><strong>OUTPUT SPECIFICATIONS</strong><br /><br />For each line of input except the last one, output the test case number followed by a space followed by a single integer - the minimum no. of operations required to convert the given string to stable binary string.<br />See sample I/O for clarifications.<br /><br />SAMPLE I-O<br /><br /><strong>INPUT</strong><br /><br />10<br />010101<br />0001<br />-<br /><br /><strong>OUTPUT</strong><br /><br />1. 2<br />2. 0<br />3. 1</p>


______________________________________________________
PRSQRFR||||||false||||||

<p>Rohil and Mahesh recently attended a class on Prime Numbers. They learnt about a term "Prime Score" which is defined for all N &gt; 1. For a number N = p1<sup>a</sup> x p2<sup>b</sup> x p3<sup>b</sup> ... x pk<sup>m</sup> where p1,p2,...pk are prime factors of N, Prime Score of N = a+b+...+m. While Mahesh was interested only in primes, Rohil thought how about playing around with Composite Numbers. Both started discussing and found out something known as Perfect Composite Numbers. They defined a Composite number N as Perfect Composite if it is divisible by all the factors of its Prime Score.<br />Whoa!! That's a nice discovery both of them have made. Now, they are interested in finding the number of Perfect Composites between A and B (inclusive) having Prime Score K. They want you to write a program for the same.<br /><br /><strong>INPUT SPECIFICATIONS</strong><br /><br />First line contains a single integer T &lt;= 10000, the number of testcases. Each following line contains three integers A, B and K (2 &lt;= A &lt;= B &lt;= 10<sup>5</sup>&nbsp; and&nbsp; K &gt;= 0).<br /><br /><strong>OUTPUT SPECIFICATIONS</strong><br /><br />For each test case, print a single integer - the number of Perfect Composite numbers between A and B (inclusive) having Prime Score = K.<br /><br />SAMPLE I/O<br /><br /><strong>INPUT :</strong><br /><br />5<br />2 5 2<br />3 100 3<br />4 10 5<br />90 456 8<br />34 67 5<br /><br /><strong>OUTPUT :</strong><br /><br />1<br />11<br />0<br />2<br />0</p>


______________________________________________________
EPR||||||true||||||


<p>A number is preprime if it has exactly 4 positive integer divisors.  For  example, 6 is preprime because its divisors are 1, 2, 3, and 6.  The  integers 6, 8, 10, 14 form the beginning of an infinite sequence of  preprime numbers. Find the <strong>n</strong>-th element of this sequence, where <strong>n</strong> is a 1-based index.</p>

*******InputConstraints*******

<p>First line contains an integer <strong>T &lt;= 20 - </strong>the number of test cases. Following each line contains a single integer 1&lt;= <strong>N &lt;=</strong> 1000000.</p>

*******OutputConstraints*******

<p>For each test case, print <strong>Nth </strong>preprime in a single line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />4<br />2<br />4<br />24<br />43765<br /><br /><strong>Output:</strong><br /><br />8<br />14<br />77<br />193539</pre>


______________________________________________________
FIBPOS||||||true||||||


<table border="0">
<tbody>
<tr>
<td colspan="2"><br /></td>
</tr>
<tr>
<td>&nbsp;</td>
<td>The  fibonacci sequence is a sequence of integers in which each number is  equal to the sum of the two preceding numbers.  The first two integers  in the sequence are both 1. Formally:      
<ul>
<li> F<sub>1</sub> = 1 </li>
<li> F<sub>2</sub> = 1 </li>
<li> F<sub>i</sub> = F<sub>i-1</sub> + F<sub>i-2</sub> for each i &gt; 2 </li>
</ul>
The beginning of this sequence is 1,1,2,3,5,8,13,21.<br /><br /> We'll define the fibonacci position of an integer greater than or equal to 1 as follows:      
<ul>
<li> The fibonacci position of 1 is 2 (since F<sub>2</sub> = 1) </li>
<li> The fibonacci position of any integer n &gt; 1 such that F<sub>i</sub> = n is i </li>
<li> The fibonacci position of any integer n &gt; 1 such that it is strictly between F<sub>i</sub> and F<sub>i+1</sub> is i+(n-F<sub>i</sub>)/(F<sub>i+1</sub>-F<sub>i</sub>) (informally, this means it is linearly distributed between F<sub>i</sub> and F<sub>i+1</sub>) </li>
</ul>
As examples, if FP(n) is the fibonacci position of n,<br /><br /> FP(1)=2 (first rule) <br /><br /> FP(5)=5 (second rule F<sub>5</sub> = 5) <br /><br /> FP(4)=4.5 (third rule, is right in the middle of F<sub>4</sub> = 3 and F<sub>5</sub> = 5)<br /><br /> Given an integer <strong>n</strong>, find its fibonacci position as a double.</td>
</tr>
</tbody>
</table>

*******InputConstraints*******

<p>First line contains <strong>T &lt;= 10. </strong>Following each line contains an integer <strong>1 &lt;= n &lt;= 10<sup>8</sup></strong>.</p>

*******OutputConstraints*******

<p>For each testcase, print the fibonacci position of <strong>n, </strong>rounded to 6 places of decimal.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<br />4<br />1<br />5<br />4<br />100<br />&nbsp;<strong><br />Output:</strong>
<br />2.000000<br />5.000000<br />4.500000<br />11.200000</pre>


______________________________________________________
PRIME12||||||true||||||


<p>A prime number is a number whose only divisors are 1 and itself.  A  sublinear polynomial-time algorithm has been shown to exist that   determines primality or non-primality with certainty, unlike the  previous probablistic tests, but it is extremely complicated.  There  must be an easier way.</p>
<p>In engineering, exact solutions are often not required, only good  approximations.  Thus, an "Engineer's Prime" of order N is any number  that is divisible by none of the first N primes, since the smallest  primes are easy to remember: 2, 3, 5, and so on.  Note that 1 is not  considered a prime in this case.</p>
<p>Given an int <strong>N</strong>, your program should output the smallest Engineer's Prime of order <strong>N</strong> that is not prime.</p>

*******InputConstraints*******

<p>First line contains the number of test cases <strong>T &lt;= 100. </strong>Following each line contains an integer <strong>1 &lt;= N &lt;= 10<sup>5</sup></strong></p>

*******OutputConstraints*******

<p>For each line of testcase, output single integer -&nbsp;  smallest Engineer's Prime of order <strong>N</strong> that is not prime.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<br />3<br />265<br />1835<br />10000<br />
<strong>Output:</strong>
<br />2886601<br />247716121<br />10971096049</pre>


______________________________________________________
PTTRN||||||true||||||


<p>You are writing a  simple text editor, and one of the features you need to implement is a  text search. Given a pattern, the search mechanism should return the  position of its first occurrence, starting from the current position, or  indicate that the pattern cannot be found. Searches are case sensitive,  and do not wrap. The search dialog contains a text box and a checkbox  labeled "Whole Word". When the "Whole Word" option is selected, the  matched sequence must either be preceded by a space to its left or be at  the very beginning of the text.  Similarly, it must also either be  followed by a space to its right or be at the very end of the text.</p>
<p>You are given a String <strong>text</strong> consisting of letters and spaces.  You are also given a String <strong>search</strong>, a sequence of letters representing the search pattern, and a String <strong>wholeWord</strong>, which is either "Y" or "N", indicating whether or not the "Whole Word" option is checked. An int <strong>start</strong> represents the current position in the text from where you start  searching. Find the index of the first match, or -1 if there is none. The index  of the match here means the index of its first character. Both the  starting index and the return index are zero based.</p>

*******InputConstraints*******

<p>Input starts with <strong>T &lt;= 100 </strong>- the number of testcases. Following T testcases, each contains <strong>text, search, WholeWord, </strong>and <strong>start </strong>in 4 separate lines<strong>.</strong> See sample input for clarifications. <strong>Note that there is always a blank line in start of every of testcase.</strong></p>
<p><strong>Size of </strong><strong>text string &gt;= 1 and &lt;= 50 and will contain only 'a'-'z', 'A'-'Z' and spaces. Size of search string &gt;= 1 and &lt;= 50 and will contain only 'a'-'z', 'A'-'Z'. WholeWord string will be either "Y" or "N". Start will be from 0 to N-1 where N is the size of text.</strong></p>

*******OutputConstraints*******

<p>For each testcase, if <strong>search </strong>string is found in <strong>text </strong>string depending upon the <strong>WholeWord </strong>string and <strong>start index </strong>as mentioned above, output the index (0-based) of the first character where the string is found, else output <strong>"-1"</strong> in a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br /><br />We dont need no education<br />ed<br />N<br />13<br /><br />We dont need no thought control<br />We<br />Y<br />0<br /><br />No dark sarcasm in the classroom<br />The<br />Y<br />5<br /><br /><strong>Output:</strong><br />16<br />0<br />-1<br /></pre>


______________________________________________________
COMPSTR||||||true||||||


<p>Your company is writing a spell-checker system, and you have been  tasked with writing a function to determine how closely two words  resemble each other.  The algorithm you are to use, albeit not a very  good one, is to compare the two words character by character, and count  how many times the characters in a given position are the same.  For  instance, the words "TICK" and "TOCK" have a score of 3, since three  characters (T, C, K) are the same.  Similarly, "CAT" and "DOG" score 0,  since no letters match.</p>
<p>You are given Strings <strong>a</strong> and <strong>b</strong> and are to find an integer indicating the score (as defined above) of how closely the two match.</p>

*******InputConstraints*******

<p>First line contains <strong>an integer T &lt;= 100</strong> - the number of testcases. Following each of T lines contains two space separated strings <strong>a </strong>and <strong>b. </strong>Both <strong>a</strong> and <strong>b</strong> will have length between 1 and 50 (inclusive) and will contain only <strong>'A'-'Z'</strong> characters.</p>

*******OutputConstraints*******

<p>For each testcase, output a single integer - the score of closeness of two strings.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3<br />TICK TOCK<br />CAT DOG<br />APPLE APPLES<br /><br /><strong>Output:</strong>
3<br />0<br />5<br /><br /><strong>NOTE: </strong>In case the two strings are of different lengths, just compare till the end of shorter one.</pre>


______________________________________________________
WLCME||||||true||||||


<p>Since I didn't get any chance to welcome you all to this NOVICE Contest for NSIT and IIITA, I got a chance here to welcome you all :). So here's the algorithmic way of welcoming you all. In a given string of characters, you need to count the number of times the string "welcome to code" occurs as a subsequence. Please note that a string is called a subsequence of another string if the first one can be obtained by deleting zero or more characters from the second string. For instance, "hlwrld" is subsequence of "hello world".</p>

*******InputConstraints*******

<p>First line of Input contains an integer <strong>t &lt;= 100 - </strong>the number of testcases. Following each line contains a string <strong>s </strong>of size <strong>&gt;= 1 and &lt;= 30</strong> and containing <strong>'a'-'z' and spaces only.</strong></p>

*******OutputConstraints*******

<p>For each testcase, print the number of times 'welcome to code' occurs in the given string.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />3<br />elcomew elcome to code<br />wweellccoommee to code qpsd<br />welcome to code<br /><br /><strong>Output:</strong><br /><br />1<br />128<br />1</pre>


______________________________________________________
WLCME2||||||true||||||


<p>Am not yet satisfied with the Welcome I have given to you guys :( No no, not so easy Welcome!! Lets try doing something harder, harder means more challenge, challenge leads to more excitement in life. So here I again welcome you with the same problem (somewhat more challenging this time). In a given string, you need to count the number of times the string "welcome to code" occurs as a subsequence. Since, this number can be very large this time, you just need to print the last <strong>4</strong> digits of the number.</p>

*******InputConstraints*******

<p>First line contains an integer <strong>t &lt;= 100&nbsp; </strong>the number of testcases. Each following line contains a string <strong>s</strong> of size<strong> &gt;= 1 and &lt;= 500</strong> and containing only <strong>'a'-'z' and spaces.</strong></p>

*******OutputConstraints*******

<p>For each testcase, output exactly <strong>4</strong> digits, the last 4 digits of the answer. If the answer &lt; 1000, add as many '0' in the starting to make it exactly <strong>4</strong> digits. See Sample I/O for clarifications.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><br />3<br />pppp elcomew elcome to code<br />odkdnd wweellccoommee to code qps<br />welcome to code<br /><br /><strong>Output:</strong>
<br />0001<br />0128<br />0001</pre>


______________________________________________________
REPEAT||||||true||||||


<p>There will be odd number of element in array, and each number has a pair except one element. Find that unique element</p>

*******InputConstraints*******

<p>T = number of test cases</p>
<p>N = size of array</p>
<p>a1, a2, ... an array element</p>

*******OutputConstraints*******

<p>Unique number</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />5<br />2 1 2 3 1<br />7<br />3 3 5 4 5 4 5<br /><br /><strong>Output:</strong>
3<br />5 <br /><br />limit:<br />T&lt;=100<br />N&lt;=10^5<br />ai &lt;= 10^10<br /></pre>


______________________________________________________
BITCNT||||||true||||||


<p>Count the number of ones in bit repesentation of number.</p>
<p>Generate N number using formula (a*i+b)%c for all 1&lt;=i&lt;=n</p>
<p>limit: 1&lt;=N&lt;=1000000</p>
<p>0&lt;=a*N, b*N&lt;2^64</p>
<p>1&lt;=c&lt;2^64</p>

*******InputConstraints*******

<p>N</p>
<p>a b c</p>

*******OutputConstraints*******

<p>[N numbers]</p>
<p>c1</p>
<p>c2</p>
<p>..</p>
<p>cn</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
5<br />5 6 7<br /><br /><strong>Output:</strong>
1<br />1<br />0<br />2<br />2<br /><br />Explanation<br />Generated numbers are 4, 2, 0, 5, 3 and bit counts are 1, 1, 0, 2, 2 respectively<br /><br />hints:<br />use unsigned long long<br /></pre>


______________________________________________________
LARSQR||||||true||||||


<p>Farmer john has a circular field in which he plants cotton crops.He noticed that, the crops that are planted in a square area yielded good quality crops compared to others.So farmer john decides to plant crops only in a square fashion so as to attain maximum profit. Help john in determining the maximum area in which he can plant and harvest good quality crops.</p>

*******InputConstraints*******

<p>The first line contains t (Number of testcases &lt; 1000) and t testcases follow each specifying the diameter d&nbsp;of the circular field where d &lt; 10^6.</p>

*******OutputConstraints*******

<p>Maximum plantable area.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />3<br />7<br />12<br />29<br /><br /><strong>Output:</strong><br />24.50<br />72.00<br />420.50</pre>


______________________________________________________
BICAKE||||||true||||||


<p></p>
<table class="problems" style="width: 99%;" border="0">
<tbody>
<tr>
<td><a href="/problems/BICAKE/polski/">Wersja polska</a></td>
<td><a href="/problems/BICAKE/english/">English version</a></td>
</tr>
</tbody>
</table>
<p></p>
<p>John even on birthday solves mathematician prolems. As a good host he     wants to cut the cake for guests personally so that everyone gets a    one  piece. He had a hard day (he had to write a long essay), that is    why he  wants to do as few cuts as possible to keep power for  partying.   The  size of each piece of that cake is irrelevant because  everyone has  a   different appetite and no one will be neglected. Write  a program  which   will help John. The program must print the minumum  number of  cuts he   must do.</p>

*******InputConstraints*******

<p>The number of tests is unknown (John is very inquisitive and he likes     to consider various options). Every test consists of a one number <strong>0 &lt; n &lt; </strong><span style="color: #000000; font-family: 'MS Shell Dlg 2'; font-size: 8pt;"><strong>8*10<sup>12</sup> + 3*10<sup>6 </sup></strong></span>that is a number of guests.</p>

*******OutputConstraints*******

<p>For a given <strong>n</strong> print the number of straight cuts that divide the cake into <strong>n</strong> pieces.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />7<br /><br /><strong>Output:</strong><br />1<br />3</pre>
<p></p>


______________________________________________________
DOPECNT||||||true||||||


<p>Young Dope was bored of finding whether a given number is palindromic or not.So he started another exercise described as follows. Given a number consisting of n digits, find the number of pairs of digits such that position[i] equals position[j] 1&lt;=i,j&lt;=n.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases &lt;100<br />Each test case contains a number with 1=&lt;length &lt;= 10^5 and <br />digits only between 0 and 9 both inclusive.</p>

*******OutputConstraints*******

<p>Number of pairs of such digits.</p>

*******IOTestCases*******

<p><strong>Input:</strong></p>
<p>2<br />1234<br />777</p>
<p><strong>Output:</strong></p>
<p>4<br />9</p>
<p>&nbsp;</p>


______________________________________________________
ZBROJ||||||true||||||


<p>After he got tired of rotating tables, the teacher gave Perica another problem. She wrote two integers, A<br />and B, on the blackboard and asked him to add them.<br />Perica is never wrong with his calculation, but sometimes he doesn&rsquo;t copy the numbers correctly. The<br />only mistake he ever makes is copying a 5 as a 6, and viceversa.<br />Given two numbers, A and B, calculate the minimum and the maximum sum Perica could possibly get.</p>

*******InputConstraints*******

<p>The first and only line of input contains positive integers A and B (1 &le; A, B &le; 1 000 000).</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>In single line of output, print two space separated integers, minimum and maximum sum Perica could<br />get.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />11 25<br /><strong>Output:</strong><br />36 37</pre>


______________________________________________________
GRDGOVT||||||true||||||


<p>The Government of Greedistan has just found out that there is a lot of gold beneath some land area in their country. They quickly surveyed the land area and found that some people are living there, and surprisingly the houses are organized in a <strong>M</strong> x <strong>N</strong> grid, each cell having exactly one house.</p>
<p>To acquire all the gold beneath this area, the government has planned to make up a rumor ( a volcano is about to erupt near by ) and let the people vacate their houses themselves. They start the rumor at only one house on day 1. It takes exactly one day for the rumor to spread from a house to any of its neighbors ( top, left, bottom, right ). They all vacate their houses as soon as they know about the volcano.</p>
<p>The government wants to choose the starting house for the rumor in such a way that it takes minimum number of days for all the people to vacate their houses. Find this minimum time.</p>

*******InputConstraints*******

<p>The first line contains <strong>T</strong>, the number of test cases. Each of the next <strong>T</strong> lines contain two integers <strong>M</strong> and <strong>N</strong>. If one of M or N is zero, other one will also be zero, and this means, there are no houses at all.</p>
<p><strong>T</strong> &lt;= 1,000</p>
<p>0 &lt;= <strong>M</strong> &lt;= 1,000,000</p>
<p>0 &lt;= <strong>N</strong> &lt;= 1,000,000</p>

*******OutputConstraints*******

<p>The minimum number of days it takes to spread the rumor to all houses.</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br />2<br />1 5<br />3 4<br /><br /><strong>Output:</strong><br />3<br />4<br /><br /><strong>Explanation:</strong><br />Case 1 : Starting cell (1,3)<br />Case 2 : See the following table with a possible answer, each cell has the first day in which they hear the rumor.<br /><table border="0">
<tbody><tr> <td>3</td><td>2</td><td>3</td><td>4</td></tr>
<tr> <td>2</td><td>1</td><td>2</td><td>3</td></tr>
<tr> <td>3</td><td>2</td><td>3</td><td>4</td></tr>
</tbody></table><br /></pre>


______________________________________________________
PROBLEM1||||||false||||||

<p align="center"><strong>Problem1: MODULUS</strong></p>
<p>&nbsp;</p>
<p align="center"><strong>Problem</strong></p>
<p>Given an integer n print all the possibilities of a%n where a can be any positive integer.</p>
<p align="center"><strong>Input</strong></p>
<p>The first line consists of an integer t, the number of test cases followed by t lines containing an integer n.</p>
<p align="center"><strong>Output</strong></p>
<p>For each test case print all the possibilities of a%n in descending order separated by a single space. After each test case print a new line character. If there are no possibilities print "NOT POSSIBLE\n".</p>
<p>&nbsp;</p>
<p><strong>Input specifications:</strong></p>
<p>0&lt;t&lt;=100</p>
<p>0&lt;=N&lt;=100</p>
<p><strong>Time limit</strong>: 1 second</p>
<p align="center"><strong>Example</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>Sample Input</strong></p>
<p>2</p>
<p>1</p>
<p>2</p>
<p><strong>Sample Output</strong></p>
<p>0</p>
<p>1 0</p>
<p align="center"><strong>&nbsp;</strong></p>
<p>&nbsp;</p>


______________________________________________________
NOVICE41||||||true||||||


<p>On a board on size N*N. Johar has placed N stones such that in every row and every column there is exactly one stone. Moreover in every diagonal and anti diagonal there is at most one stone.Now Kandarp want to check his solution because he does not trust Johar. So he want you to check whether he has placed these N stones correctly or not.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases. then T test cases follow. First line of each test case contains N (1&lt;=N&lt;=50) then each of next N lines contains an string of N characters. jth character of ith string is '#' is there is an stone at position (i,j) otherwise it is '.'.</p>

*******OutputConstraints*******

<p>For each test case print YES if it is a valid arrangement or NO if it is invalid.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 172px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2</div>2
3
..# 
#..
.#.
4
.#..
...#
#...
..#.</pre>
<pre><strong>Output:</strong>
NO
YES</pre>


______________________________________________________
NOVICE42||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">This contest is based on brute force, and where better to apply this technique than in a day to day newspaper game. Hemanshu Bansal has a knack for solving puzzles and he claims that he is very fast always saying that he can solve the problem even before I can start to code. Help me beat him once in for all in this famous game of Sudoku.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The objective of Su Doku puzzles is to replace the blanks in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9. <span style="white-space: pre;"> </span></div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You will be given a Sudoku puzzle and your program has to print its solution.</div>
<p>This contest is based on brute force, and where better to apply this technique than in a day to day newspaper game. Hemanshu Bansal has a knack for solving puzzles and he claims that he is very fast always saying that he can solve the problem even before I can start to code. Help me beat him once in for all in this famous game of Sudoku.&nbsp;The objective of Su Doku puzzles is to replace the blanks in a 9 by 9 grid in such that each row, column, and 3 by 3 box contains each of the digits 1 to 9. <span style="white-space: pre;"> </span></p>
<p>You will be given a Sudoku puzzle and your program has to print its solution.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>line 1:T(no. of test cases)</p>
<p>line 2: Grid 01</p>
<p>line 3-11: grid of 9x9</p>
<p>line 12: Grid 02</p>
<p>line 13-21: grid of 9x9</p>
<p>....</p>
<p>....</p>
<p>so on.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>line 1: Grid 01(should be same as input)</p>
<p>line 2-10: grid of 9x9(the solution)</p>
<p>line 11: &lt;blank line&gt;</p>
<p>line 12: Grid 02</p>
<p>.......</p>
<p>so on.</p>
<p>In case of multiple solutions print lexicographically minimum solution. Refer to wikipedia for the definition of lexicographical order.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
Grid 01
003020600
900305001
001806400
008102900
700000008
006708200
002609500
800203009
005010300
Grid 02
200080300
060070084
030500209
000105408
000000000
402706000
301007040
720040060
004010003</pre>
<pre><strong>Output:</strong>
Grid 01
483921657
967345821
251876493
548132976
729564138
136798245
372689514
814253769
695417382

Grid 02
245981376
169273584
837564219
976125438
513498627
482736951
391657842
728349165
654812793</pre>


______________________________________________________
NOVICE44||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Piyush is a very inteligent chap, he has a facination for maths and is never convinced without proof of anything. Last time I told him that sqrt(2) can be written as an expansion of a series as sqrt(2) = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Now i need to prove this to him. Being a fan of finding all solutions i have descided to use a program to find all possible fractions that can be formed using this series with depth = N and show it to piyush, I need your help to do this.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">example:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">N=1 : 1 + 1/2 = 3/2</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">N=2 : 1 + 1/(2 + 1/2) = 7/5</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">N=3 : 1 + 1/(2 + 1/(2 + 1/2)) = 17/12</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">and so on...</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given a value of N(&lt;=40) print the fraction in lowest form. Lowest form means that GCD(numerator,denominator) = 1</div>
<p>Piyush is a very inteligent chap, he has a facination for maths and is never convinced without proof of anything. Last time I told him that sqrt(2) can be written as an expansion of a series as sqrt(2) = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...</p>
<p>Now I need to prove this to him. Being a fan of finding all solutions I have descided to use a program to find all possible fractions that can be formed using this series with depth = N and show it to piyush, I need your help to do this.</p>
<p>example:</p>
<p>N=1 : 1 + 1/2 = 3/2</p>
<p>N=2 : 1 + 1/(2 + 1/2) = 7/5</p>
<p>N=3 : 1 + 1/(2 + 1/(2 + 1/2)) = 17/12</p>
<p>and so on...</p>
<p>Given a value of N(&lt;=40) print the fraction in lowest form. Lowest form means that GCD(numerator,denominator) = 1</p>

*******InputConstraints*******

<p>line 1: T(number of test cases)</p>
<p>line 2 to T+1: vaue of N for each test case</p>

*******OutputConstraints*******

<p>numerator/denominator in the lowest form for each test case</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
4
1
2
3
4

<strong>Output:</strong>
3/2
7/5
17/12
41/29</pre>


______________________________________________________
NOVICE45||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Mahesh and I are always at conflict, Where I am a lazy person who would rather apply bruteforce and compute all possibilities of a problem to find the answer, he would rather solve it on paper to find a mathematical formula and reduce computational time. Fed up of his daily taunts I formulated the following problem, lets see who wins here bruteforce or mathematical precalculation:</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given two positive integers N and K you have to find the number of distinct ways of writing N as the sum of integers(possibly only 1) in range of [1,K] (inclusive).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example if N = 4 and K = 2, we have these 3 ways =&gt; (2+2), (2+1+1), (1+1+1+1).</div>
<p>&nbsp;</p>
<p>Mahesh and I are always at conflict, Where I am a lazy person who would rather apply bruteforce and compute all possibilities of a problem to find the answer, he would rather solve it on paper to find a mathematical formula and reduce computational time. Fed up of his daily taunts I formulated the following problem, lets see who wins here bruteforce or mathematical precalculation:</p>
<p>Given two positive integers N and K you have to find the number of distinct ways of writing N as the sum of integers(possibly only 1) in range of [1,K] (inclusive).</p>
<p>For example if N = 4 and K = 2, we have these 3 ways =&gt; (2+2), (2+1+1), (1+1+1+1).</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>Line 1: T(number of test cases)</p>
<p>Line 2 to T+1: 2 space seprated integers N,K. (1&lt;=N&lt;=10000 and 1&lt;=K&lt;=100)&nbsp;</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>1 line per test case telling the number of ways. Since the answer can be very large print it modulo 1000000007.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
1 10
2 1
4 2

<strong>Output:</strong>
1
1
3</pre>


______________________________________________________
PROBLEM6||||||false||||||

<p>PROBLEM6: &nbsp;AVERYEASYPROBLEM</p>
<p><strong>Problem Statement:</strong></p>
<p>Given two numbers a and b find the value of a!/b!</p>
<p><strong>Input:</strong></p>
<p>The first line consists of an integer t, the number of test cases. Then the next t lines consists of two integers a and b.</p>
<p><strong>Output:</strong></p>
<p>For each test case print the value of factorial(a)/ factorial(b) provided b is always less than a.</p>
<p>&nbsp;</p>
<p><strong>Input Constraints:</strong></p>
<p>1&lt;=t&lt;=100</p>
<p>0&lt;=b&lt;=a&lt;=15</p>
<p><strong>Example</strong></p>
<p><strong>Sample Input:</strong></p>
<p>3</p>
<p>15 0</p>
<p>13 2</p>
<p>1 0</p>
<p><strong>Sample Output:</strong></p>
<p><span style="font-size: small;">1307674368000</span></p>
<h2 style="text-align: left;"><span style="font-size: small;"><span style="font-family: times new roman,times;">3113510400</span></span></h2>
<h2 style="text-align: left;"><span style="font-size: small;"><span style="font-family: times new roman,times;">1</span></span></h2>
<p>&nbsp;</p>


______________________________________________________
AVG||||||false||||||

<p>Problem: AVERAGE</p>
<p><strong>Problem Statement:</strong></p>
<p>Given n numbers find the average of them.</p>
<p>&nbsp;</p>
<p><strong>Input:</strong></p>
<p>The first line consists of an integer t, the number of test cases. Each test case consists of 2 lines. In each test case the first line consists of an integer n, the count of numbers. The next line consists of n integers.</p>
<p><strong>Output:</strong></p>
<p>For each test case print the average of the numbers without decimal places</p>
<p>&nbsp;</p>
<p><strong>Sample Input:</strong></p>
<p>2</p>
<p>5</p>
<p>1 2 3 4 5</p>
<p>3</p>
<p>2 1 1</p>
<p>&nbsp;</p>
<p><strong>Sample Output:</strong></p>
<p>3</p>
<p>1</p>


______________________________________________________
CIRCINT||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Given two circles with centers at (x1, y1) and (x2,y2) and having radius r1 and r2 respectively, find if they intersect or not. If two circles touch then they are considered to be intersecting.</div>
<p>&nbsp;</p>
<p>Given two circles with centers at (x1, y1) and (x2,y2) and having radius r1 and r2 respectively, find if they intersect or not. Two circles are considered to be intersecting if they have a common area. Even if two circles touch at a point then they are considered to be intersecting.</p>
<div><strong>Input</strong></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>First line contains an integer T. Then follow T lines each line containing integers x1, y1, x2, y2, r1, r2 in that order.</p>
<div>
<div>Constraints:</div>
<div>T &lt;= 10,000</div>
<div>All other integers will have an absolute value &lt;= 1000,000,000</div>
</div>
<p>&nbsp;</p>
<h3>Output</h3>
<p>Print "YES" (without quotes) if they intersect and "NO" if they don't intersect.</p>
<p><strong>Example</strong></p>
<pre><strong>Input:</strong>
3
0 0 2 2 1 1
0 0 2 2 3 3
0 0 1000000000 0 600000000 400000000

<strong>Output:</strong>
NO
YES
YES<span style="white-space: normal;">
</span></pre>


______________________________________________________
COLORF||||||false||||||

<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Rith, the student of the month has received k sets of colored blocks. Each set is of a different color and each block in a set is identical to any other block. Rith has n-types of colors and has a1, a2, a3 ... an number of blocks for each color respectively. He arranges these blocks in a straight line, and wants to know the number of ways he can arrange it. Please help him find out the number of ways. Oh and Rith knows that this number will be very large, and hence asks you to find it modulo 1,000,000,009 (A number modulo P is the remainder that is left after dividing that number by P)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example if Rith has 2 types of colors and {a1,a2} = {1,2}</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Then the following arrangemenets are possible</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">(Digit here means the color)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">122</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">212</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">221</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Hence the answer is 3.</div>
<p>&nbsp;</p>
<p>Rith, the student of the month has received k sets of colored blocks. Each set is of a different color and each block in a set is identical to any other block. Rith has n-types of colors and has a1, a2, a3 ... an number of blocks for each color respectively. He arranges these blocks in a straight line, and wants to know the number of ways he can arrange it. Please help him find out the number of ways. Oh and Rith knows that this number will be very large, and hence asks you to find it modulo 1,000,000,009 (A number modulo P is the remainder that is left after dividing that number by P)</p>
<p>&nbsp;</p>
<p>For example if Rith has 2 types of colors and {a1,a2} = {1,2}</p>
<p>Then the following arrangemenets are possible</p>
<p>&nbsp;</p>
<p>(Digit here means the color)</p>
<p>&nbsp;</p>
<p>122</p>
<p>212</p>
<p>221</p>
<p>&nbsp;</p>
<p>Hence the answer is 3.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

______________________________________________________
LUCKYN||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Shrek and Kung Fu Panda once met after having no forthcoming prequels. They quickly noticed that both of them were superstitious and this helped them bond a lot.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Shrek believes that the number 4 is lucky and Kung Fu Panda believes that number 7 is lucky. You being their friend want to list down numbers in increasing order that consist only of 4 or 7.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">The first few elements of the list are 4, 7, 44, 47, 74, 77, 444 ... You must answer the n-th (1-based, 4 is the 1st term of the sequence)</div>
<p>&nbsp;</p>
<p>Shrek and Kung Fu Panda once met after having no forthcoming prequels. They quickly noticed that both of them were superstitious and this helped them bond a lot.</p>
<p>Shrek believes that the number 4 is lucky and Kung Fu Panda believes that number 7 is lucky. You being their friend want to list down numbers in increasing order that consist only of 4 or 7.</p>
<p>The first few elements of the list are 4, 7, 44, 47, 74, 77, 444 ... You must answer the n-th (1-based, 4 is the 1st term of the sequence)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>The first line contains the number of test-cases T&nbsp;</p>
<p>The following T-lines contains an integer n.</p>
<p>T &lt;= 10,000</p>
<p>n &lt;= 1000,000,000</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>Print the n-th term in the sequence of lucky numbers</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
6
1
20
300
4000
50000
1000000000


<strong>Output:</strong>
4
4747
44747747
77774744447
744447747474447
77477744774747744747444444447</pre>


______________________________________________________
BTHSP||||||true||||||


<p style="text-align: left;"><span style="font-size: small;">A particle has initial velocity and constant acceleration. If its velocity after certain time is v then what will its displacement be in twice of that time?&nbsp;</span></p>
<p>&nbsp;</p>

*******InputConstraints*******

<p><span style="font-size: small;">The input will contain two integers in each line. Each line makes one set of input. These two integers denote the value of v   (-100 &lt;= v &lt;= 100) and t(0&lt;=t&lt;= 200) ( t means at the time the particle gains that velocity)&nbsp; </span></p>

*******OutputConstraints*******

<p><span style="font-size: small;">For each line of input print a single integer in one line denoting the displacement in double of that time.</span></p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong><br /><pre><span style="font-size: small;">0 0<br />5 12</span></pre>
<br /><br /><strong>Output:</strong><br />
<pre><span style="font-size: small;">0<br />120</span></pre>
</pre>


______________________________________________________
SKEWB||||||true||||||


<p style="font-family: 'Times New Roman'; font-size: medium;">When a number is expressed in decimal, the&nbsp;<em>k</em>-th digit represents a multiple of 10<sup><em>k</em></sup>. (Digits are numbered from right to left, where the least significant digit is number 0.) For example,&nbsp;</p>
<p style="font-family: 'Times New Roman'; font-size: medium;"><img title="decimal" src="http://online-judge.uva.es/p/v5/575img1.gif" alt="decimal" width="641" height="29" /></p>
<p style="font-family: 'Times New Roman'; font-size: medium;">When a number is expressed in binary, the&nbsp;<em>k</em>-th digit represents a multiple of 2<sup><em>k</em></sup>. For example,&nbsp;</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">&nbsp;<img title="binary" src="http://online-judge.uva.es/p/v5/575img2.gif" alt="binary" width="553" height="29" /></p>
<p style="font-family: 'Times New Roman'; font-size: medium;">In&nbsp;<strong>skew binary</strong>, the&nbsp;<em>k</em>-th digit represents a multiple of&nbsp;2<sup><em>k</em>+1</sup>&nbsp;- 1. The only possible digits are 0 and 1, except that the least-significant nonzero digit can be a 2. For example,&nbsp;</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">&nbsp;<img title="skew" src="http://online-judge.uva.es/p/v5/575img3.gif" alt="skew" width="696" height="31" /></p>
<p style="font-family: 'Times New Roman'; font-size: medium;">The first 10 numbers in skew binary are 0, 1, 2, 10, 11, 12, 20, 100, 101, and 102. (Skew binary is useful in some applications because it is possible to add 1 with at most one carry. However, this has nothing to do with the current problem.)</p>
<p style="font-family: 'Times New Roman'; font-size: medium;">&nbsp;</p>

*******InputConstraints*******

<p>The input file contains one or more lines, each of which contains an integer</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each number, output the decimal equivalent. The decimal value of n will be at most 2<sup>31</sup>&nbsp;- 1 = 2147483647.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<pre>10120
200000000000000000000000000000
10
1000000000000000000000000000000
11
100
11111000001110000101101102000
0</pre>
<strong>Output:</strong>
<pre>44
2147483646
3
2147483647
4
7
1041110737</pre>
</pre>
<div><span style="font-family: 'Times New Roman'; font-size: small; "><br /></span></div>


______________________________________________________
QUINEI||||||false||||||

<p>A <strong>quine</strong> is a computer program which produces a copy of its own source code as its only output. The standard terms for these programs in the computability theory and computer science literature are <strong>self-replicating programs</strong>, <strong>self-reproducing programs</strong>, and <strong>self-copying programs</strong>.</p>
<p>&nbsp;</p>
<p>Your task is to write a<strong> quine&nbsp; </strong>of source length greater than 1 byte. <strong>&nbsp;</strong></p>
<p>&nbsp;</p>

______________________________________________________
MAIN71||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In this problem you have to compare two strings lexicographically for a given ordering of english alphabets.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For example, the usually ordering is "abcdefghijklmnopqrstuvwxyz" but in this problem ordering can be any&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">permutation of these 26 characters.</div>
<p>In this problem you have to compare two strings lexicographically for a given ordering of english alphabets.&nbsp;For example, the usually ordering is "abcdefghijklmnopqrstuvwxyz" but in this problem ordering can be any&nbsp;permutation of these 26 characters.</p>

*******InputConstraints*******

<p>First line contains T the number of test cases. then T test case follow. Each test case is described in 3 lines. First describes the ordering (in exaclty 26 characters) next two lines contains two strings A and B of equal length.</p>

*******OutputConstraints*******

<p>For each test case print "&gt;" if A &gt; B or "&lt;" if A&lt;B else print "="</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
1
abcdefghijklmnopqrstuvwxyz
nsit
nits

<strong>Output:</strong>
&gt;</pre>


______________________________________________________
TPRIMPER||||||true||||||


<p>Given two positive integers n and m, we call m a prime permutation of n, if m is prime and can be obtained by zero or more permutations of the digits of n. Permutations with leading zeros are invalid.</p>

*******InputConstraints*******

<p>Input starts with a positive integer t&lt;10<sup>4</sup> in a single line, then t lines follow.<br /> Each of the t lines contains one positive integer n&lt;10<sup>7</sup>.</p>

*******OutputConstraints*******

<p>For every n print the number of distinct prime permutations of n in a single line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
13
110

<strong>Output:</strong>
2
1
</pre>
<p><strong>Hint</strong>: If the time limit is too weak, then try the <a href="../../problems/PRIMPERM/">classical version</a>.</p>


______________________________________________________
NOVICE51||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Akash and Aayush play the following number game. First they choose a number N (1&lt;=N&lt;=1000000000). Then both</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">of them take their turn one by one. In a turn player has to subtract 1 from the number if it is odd&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">or divide the number by 2 if it is even. Game end when the number becomes zero.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Aayush has a dominating natue So he always play first. Help them in finding out who will win the game.</div>
<p>Akash and Aayush play the following number game. First they choose a number N (1&lt;=N&lt;=1000000000). Then both&nbsp;of them take their turn one by one. In a turn player has to subtract 1 from the number if it is odd&nbsp;or divide the number by 2 if it is even. Game end when the number becomes zero.&nbsp;Aayush has a dominating nature So he always play first. Help them in finding out who will win the game.</p>

*******InputConstraints*******

<p>First line contains T, the number of test cases. &nbsp;Following T lines contain 1 integer each, the value of N.</p>

*******OutputConstraints*******

<p>For each test case print "Aayush" if Aayush wins else print "Akash".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
468
7547

<strong>Output:</strong>
Aayush
Akash</pre>


______________________________________________________
NOVICE52||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Akash and Aayush are now getting bored with the number game. Van (another flat mate) suggested a new game to them.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Van writes down an string which only consist of 'W' and 'B'. Now both of them take their turn one by one with</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Aayush taking the first move (You know why he always play first:D)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In a move player must delete a character C such that at least one neighouburing character of C is same as C.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Rule is simple whoever can't move looses.</div>
<p>&nbsp;</p>
<p>Akash and Aayush are now getting bored with the number game. Van (another flat mate) suggested a new game to them.&nbsp;Van writes down an string which only consist of 'W' and 'B'. Now both of them take their turn one by one with&nbsp;Aayush taking the first move (You know why he always play first:D).&nbsp;In a move player must delete a character C such that at least one neighouburing character of C is same as C.&nbsp;Rule is simple whoever can't move looses.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>First line contains T (1&lt;=T&lt;=50), the number of test cases. Each of following T lines contain an string S. (1&lt;=|S|&lt;=10000)&nbsp;</p>

*******OutputConstraints*******

<p>For each test case print "Aayush" if Aayush wins else print "Akash".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
BB
BW

<strong>Output:</strong>
Aayush
Akash</pre>


______________________________________________________
NOVICE53||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">After Van left the room Aayush and Akash stopped playing "The string game". They are now back to number game, but with&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">different rules. They first decide a number N (1&lt;=N&lt;=100000). And in each turn a player must subtract a perfact</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">square from it which is not greater that the number itself. In this problem consider 1 as a perfact square number.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Game end when the number becomes zero. Player who play the last move wins. Determine who will win the game.</div>
<p>&nbsp;</p>
<p>After Van left the room Aayush and Akash stopped playing "The string game". They are now back to number game, but with&nbsp;different rules. They first decide a number N (1&lt;=N&lt;=100000). And in each turn a player must subtract a perfact&nbsp;square from it which is not greater that the number itself. In this problem consider 1 as a perfact square number.&nbsp;Game end when the number becomes zero. Player who play the last move wins. Determine who will win the game provided that both of them play perfactly.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>First line contains T (1&lt;=T&lt;=10000), the number of test cases. &nbsp;Following T lines contain 1 integer each, the value of N.</p>

*******OutputConstraints*******

<p>For each test case print "Aayush" if Aayush wins else print "Akash".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
4
5

<strong>Output:</strong>
Aayush
Akash</pre>


______________________________________________________
NOVICE54||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Aayush and Akash now want to play a game which involves prime numbers. So They play following game.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">They fist decide a postive integer N (1&lt;=N&lt;=10000) and take their turn one by one. In each turn a player</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">must delete a digit from the number. Game ends when the number becomes less than 10 or prime.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Whoever can't maek a move looses. Aayush always play first.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">First line contains T (1&lt;=T&lt;=10000), the number of test cases. &nbsp;Following T lines contain 1 integer each, the value of N.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">For each test case print "Aayush" if Aayush wins else print "Akash".</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">2</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">5</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">14</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Akash</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Aayush</div>
<p>Aayush and Akash now want to play a game which involves prime numbers. So They play following game.&nbsp;They first decide a postive integer N (1&lt;=N&lt;=100000) and take their turn one by one. In each turn a player&nbsp;must delete a digit from the number. Game ends when the number becomes less than 10 or prime.&nbsp;Whoever can't make a move looses. Aayush always play first.</p>
<p>&nbsp;</p>
<p>Clarification about deletion:&nbsp;</p>
<p>&nbsp;</p>
<p>Deleting 2 from 123 will leave 13&nbsp;</p>
<p>Deleting 1 from 103 will leave 3</p>
<p>Deleting 2 from 200 will leave 0</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>First line contains T (1&lt;=T&lt;=10000), the number of test cases. &nbsp;Following T lines contain 1 integer each, the value of N.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case print "Aayush" if Aayush wins else print "Akash".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
<span style="white-space: normal;"><p>2</p><p>5</p><p>14</p></span><strong>Output:</strong>
<span style="white-space: normal;"><p>Akash</p><p>Aayush</p></span></pre>


______________________________________________________
NOVICE55||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Aayush an Akash now want to try a game which involve painting. First of all they take an empty grid of size 1*N (1 into N).</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Initially none of the cell is painted. Now they take their turn one by one with Aayush taking the first move.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">in each turn a player must select two consecutive unpainted cells and paint both of them.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Whoever is unable to paint in his turn loose the game.&nbsp;</div>
<p>Aayush an Akash now want to try a game which involve painting. First of all they take an empty grid of size 1*N (1 cross N).&nbsp;Initially none of the cell is painted. Now they take their turn one by one with Aayush taking the first move. In each turn a player must select two consecutive unpainted cells and paint both of them.&nbsp;Whoever is unable to paint in his turn loose the game.&nbsp;</p>

*******InputConstraints*******

<p>First line contains T (1&lt;=T&lt;=10000), the number of test cases. &nbsp;Following T lines contain 1 integer each, the value of 1&lt;=N&lt;=10000.</p>

*******OutputConstraints*******

<p>For each test case print "Aayush" if Aayush wins else print "Akash".</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
1
2

<strong>Output:</strong>
Akash 
Aayush</pre>


______________________________________________________
TEASTER||||||true||||||


<p>Given a date, calculate the number of days until next Easter according to canonical (western) rule using the Gregorian Calendar.</p>

*******InputConstraints*******

<p>First line of input is a positive integer t&lt;100, the number of testcases. Each of the following t lines contains a single date (1600&lt;year&lt;2100). The example below shows the date format.</p>

*******OutputConstraints*******

<p>For every date print the number of days until next Easter.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
18 April 2011
27 February 1954
7 July 1777

<strong>Output:</strong>
6
50
286
</pre>


______________________________________________________
MAIN8_A||||||true||||||


<p>&nbsp;</p>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In C++ programming language cout statement is used to print the standard output. For example the statement&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">cout&lt;&lt;"string";</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">will print string on the screen.</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Some of the characters can not be written directly since that will make the statement ambigous. To resolve this we use '\' before such&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">characters for example to print " on screen we will write&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">cout&lt;&lt;"\"";&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">In this problem we will only deal with following 4 such special characters</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">&lt;newline&gt;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">single quote(')</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">double quote(")</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">backslash(\)</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">You are given a valid cout statement and you have to find the output of the same.</div>
<p>In C++ programming language cout statement is used to print the standard output. For example the statement&nbsp;</p>
<p>cout&lt;&lt;"string";</p>
<p>will print string on the screen.</p>
<p>Some of the characters can not be written directly since that will make the statement ambigous. To resolve this we use '\' before such&nbsp;characters. For example to print " on screen we will write-&nbsp;</p>
<p>cout&lt;&lt;"\"";&nbsp;</p>
<p>In this problem we will only deal with following 4 such special characters.</p>
<p>&lt;newline&gt;</p>
<p>single quote(')</p>
<p>double quote(")</p>
<p>backslash(\)</p>
<p>You are given a valid cout statement and you have to find the output of the same.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

*******InputConstraints*******

<p>&nbsp;</p>
<p>First line contains T the number of test cases. Each of the following T lines contains a VALID cout statement length of which doesn't exceed 1000.</p>
<p>&nbsp;</p>

*******OutputConstraints*******

<p>For each test case print the output from the new line.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
3
cout&lt;&lt;"code";
cout&lt;&lt;"NSIT\nIIITA";
cout&lt;&lt;"\\/\\/\\/\\/";

<strong>Output:</strong>
code
NSIT
IIITA
\/\/\/\/</pre>


______________________________________________________
MAIN8_B||||||true||||||


<p>you are given N (1&lt;=N&lt;=20000) squares on X-Y plane. Your task is to find the area which is common to all the squares (Area of intersection of all the squares)</p>

*******InputConstraints*******

<div id="_mcePaste" style="position: absolute; left: -10000px; top: 8px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">First line contain T the number of test cases. then t test cases follow. First line of each test case contains N, the number of squares&nbsp;</div>
<div id="_mcePaste" style="position: absolute; left: -10000px; top: 8px; width: 1px; height: 1px; overflow-x: hidden; overflow-y: hidden;">Each of following N line contains 3 integer (X, Y, L) cordinate of lower left vertex and size of the square.</div>
<p>First line contain T the number of test cases. Then T test cases follow. First line of each test case contains N, the number of squares&nbsp;Each of following N line contains 3 integer (X, Y, L) cordinate of lower left vertex and size of the square.</p>
<div>-10^9&lt;=X,Y&lt;=10^9 &nbsp; &nbsp;1&lt;=L&lt;=10^9</div>

*******OutputConstraints*******

<p>&nbsp;</p>
<p>For each test case print the answer in a new line.</p>
<p>&nbsp;</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2
2
0 0 10
1 1 11
2
10 10 25
1 1 3

<strong>Output:</strong>
81
0</pre>


______________________________________________________
SUMMIT||||||true||||||


<p>Given an altitudinal&nbsp;map&nbsp;(0 &lt;= altitudes &lt;= 100000) find the summits i.e. all points which are bigger than all&nbsp;their&nbsp;neighbours. There is at least one summit in each map.</p>
<p>Score is source length.</p>

*******InputConstraints*******

<p>The number n of&nbsp;maps (n&lt;=50) in the first line.<br />Then for each map one line with&nbsp;its width w and heigth h (3&lt;=w,h&lt;=20) separated by a space. After this the h rows of&nbsp;the map.</p>

*******OutputConstraints*******

<p>The space-separated summits in ascending order.</p>

*******IOTestCases*******

<pre><strong>Input:</strong>
2<br />3 3<br />71034 8558 65941<br />18265 1226 74076<br />71003 75481 28446<br />3 3<br />22360 72964 47891<br />75416 7746 80432<br />95606 4613 83341

<strong>Output:</strong>
71034 75481<br />83341 95606
</pre>
